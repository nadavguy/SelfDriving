
SelfDriving_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016508  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0004cf54  080167a8  080167a8  000267a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080636fc  080636fc  0008a384  2**0
                  CONTENTS
  4 .ARM          00000008  080636fc  080636fc  000736fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08063704  08063704  0008a384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08063704  08063704  00073704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08063708  08063708  00073708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000a2c4  24000000  0806370c  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  2400a2c4  0806d9d0  0008a2c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  2400a324  0806da30  0008a324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000042a4  2400a384  0806da90  0008a384  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2400e628  0806da90  0008e628  2**0
                  ALLOC
 13 .data_RAM_D2  00000000  30000000  30000000  0008a384  2**0
                  CONTENTS
 14 .bss_RAM_D2   00000000  30000000  30000000  0008a384  2**0
                  CONTENTS
 15 .openamp_section 0000008c  38000000  0806da90  00090000  2**2
                  ALLOC
 16 .ARM.attributes 0000002e  00000000  00000000  0008a384  2**0
                  CONTENTS, READONLY
 17 .debug_info   000817c8  00000000  00000000  0008a3b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000b693  00000000  00000000  0010bb7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002978  00000000  00000000  00117210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00002590  00000000  00000000  00119b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0004d4aa  00000000  00000000  0011c118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0004b254  00000000  00000000  001695c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    0019d0c2  00000000  00000000  001b4816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000053  00000000  00000000  003518d8  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000bdcc  00000000  00000000  0035192c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400a384 	.word	0x2400a384
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016790 	.word	0x08016790

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400a388 	.word	0x2400a388
 80002dc:	08016790 	.word	0x08016790

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	; 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295
 8000738:	f04f 30ff 	movne.w	r0, #4294967295
 800073c:	f000 b9a6 	b.w	8000a8c <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f83e 	bl	80007c8 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9d08      	ldr	r5, [sp, #32]
 80007ce:	4604      	mov	r4, r0
 80007d0:	468c      	mov	ip, r1
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	f040 8083 	bne.w	80008de <__udivmoddi4+0x116>
 80007d8:	428a      	cmp	r2, r1
 80007da:	4617      	mov	r7, r2
 80007dc:	d947      	bls.n	800086e <__udivmoddi4+0xa6>
 80007de:	fab2 f282 	clz	r2, r2
 80007e2:	b142      	cbz	r2, 80007f6 <__udivmoddi4+0x2e>
 80007e4:	f1c2 0020 	rsb	r0, r2, #32
 80007e8:	fa24 f000 	lsr.w	r0, r4, r0
 80007ec:	4091      	lsls	r1, r2
 80007ee:	4097      	lsls	r7, r2
 80007f0:	ea40 0c01 	orr.w	ip, r0, r1
 80007f4:	4094      	lsls	r4, r2
 80007f6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80007fa:	0c23      	lsrs	r3, r4, #16
 80007fc:	fbbc f6f8 	udiv	r6, ip, r8
 8000800:	fa1f fe87 	uxth.w	lr, r7
 8000804:	fb08 c116 	mls	r1, r8, r6, ip
 8000808:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800080c:	fb06 f10e 	mul.w	r1, r6, lr
 8000810:	4299      	cmp	r1, r3
 8000812:	d909      	bls.n	8000828 <__udivmoddi4+0x60>
 8000814:	18fb      	adds	r3, r7, r3
 8000816:	f106 30ff 	add.w	r0, r6, #4294967295
 800081a:	f080 8119 	bcs.w	8000a50 <__udivmoddi4+0x288>
 800081e:	4299      	cmp	r1, r3
 8000820:	f240 8116 	bls.w	8000a50 <__udivmoddi4+0x288>
 8000824:	3e02      	subs	r6, #2
 8000826:	443b      	add	r3, r7
 8000828:	1a5b      	subs	r3, r3, r1
 800082a:	b2a4      	uxth	r4, r4
 800082c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000830:	fb08 3310 	mls	r3, r8, r0, r3
 8000834:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000838:	fb00 fe0e 	mul.w	lr, r0, lr
 800083c:	45a6      	cmp	lr, r4
 800083e:	d909      	bls.n	8000854 <__udivmoddi4+0x8c>
 8000840:	193c      	adds	r4, r7, r4
 8000842:	f100 33ff 	add.w	r3, r0, #4294967295
 8000846:	f080 8105 	bcs.w	8000a54 <__udivmoddi4+0x28c>
 800084a:	45a6      	cmp	lr, r4
 800084c:	f240 8102 	bls.w	8000a54 <__udivmoddi4+0x28c>
 8000850:	3802      	subs	r0, #2
 8000852:	443c      	add	r4, r7
 8000854:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000858:	eba4 040e 	sub.w	r4, r4, lr
 800085c:	2600      	movs	r6, #0
 800085e:	b11d      	cbz	r5, 8000868 <__udivmoddi4+0xa0>
 8000860:	40d4      	lsrs	r4, r2
 8000862:	2300      	movs	r3, #0
 8000864:	e9c5 4300 	strd	r4, r3, [r5]
 8000868:	4631      	mov	r1, r6
 800086a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086e:	b902      	cbnz	r2, 8000872 <__udivmoddi4+0xaa>
 8000870:	deff      	udf	#255	; 0xff
 8000872:	fab2 f282 	clz	r2, r2
 8000876:	2a00      	cmp	r2, #0
 8000878:	d150      	bne.n	800091c <__udivmoddi4+0x154>
 800087a:	1bcb      	subs	r3, r1, r7
 800087c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000880:	fa1f f887 	uxth.w	r8, r7
 8000884:	2601      	movs	r6, #1
 8000886:	fbb3 fcfe 	udiv	ip, r3, lr
 800088a:	0c21      	lsrs	r1, r4, #16
 800088c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000890:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000894:	fb08 f30c 	mul.w	r3, r8, ip
 8000898:	428b      	cmp	r3, r1
 800089a:	d907      	bls.n	80008ac <__udivmoddi4+0xe4>
 800089c:	1879      	adds	r1, r7, r1
 800089e:	f10c 30ff 	add.w	r0, ip, #4294967295
 80008a2:	d202      	bcs.n	80008aa <__udivmoddi4+0xe2>
 80008a4:	428b      	cmp	r3, r1
 80008a6:	f200 80e9 	bhi.w	8000a7c <__udivmoddi4+0x2b4>
 80008aa:	4684      	mov	ip, r0
 80008ac:	1ac9      	subs	r1, r1, r3
 80008ae:	b2a3      	uxth	r3, r4
 80008b0:	fbb1 f0fe 	udiv	r0, r1, lr
 80008b4:	fb0e 1110 	mls	r1, lr, r0, r1
 80008b8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80008bc:	fb08 f800 	mul.w	r8, r8, r0
 80008c0:	45a0      	cmp	r8, r4
 80008c2:	d907      	bls.n	80008d4 <__udivmoddi4+0x10c>
 80008c4:	193c      	adds	r4, r7, r4
 80008c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x10a>
 80008cc:	45a0      	cmp	r8, r4
 80008ce:	f200 80d9 	bhi.w	8000a84 <__udivmoddi4+0x2bc>
 80008d2:	4618      	mov	r0, r3
 80008d4:	eba4 0408 	sub.w	r4, r4, r8
 80008d8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008dc:	e7bf      	b.n	800085e <__udivmoddi4+0x96>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d909      	bls.n	80008f6 <__udivmoddi4+0x12e>
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	f000 80b1 	beq.w	8000a4a <__udivmoddi4+0x282>
 80008e8:	2600      	movs	r6, #0
 80008ea:	e9c5 0100 	strd	r0, r1, [r5]
 80008ee:	4630      	mov	r0, r6
 80008f0:	4631      	mov	r1, r6
 80008f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008f6:	fab3 f683 	clz	r6, r3
 80008fa:	2e00      	cmp	r6, #0
 80008fc:	d14a      	bne.n	8000994 <__udivmoddi4+0x1cc>
 80008fe:	428b      	cmp	r3, r1
 8000900:	d302      	bcc.n	8000908 <__udivmoddi4+0x140>
 8000902:	4282      	cmp	r2, r0
 8000904:	f200 80b8 	bhi.w	8000a78 <__udivmoddi4+0x2b0>
 8000908:	1a84      	subs	r4, r0, r2
 800090a:	eb61 0103 	sbc.w	r1, r1, r3
 800090e:	2001      	movs	r0, #1
 8000910:	468c      	mov	ip, r1
 8000912:	2d00      	cmp	r5, #0
 8000914:	d0a8      	beq.n	8000868 <__udivmoddi4+0xa0>
 8000916:	e9c5 4c00 	strd	r4, ip, [r5]
 800091a:	e7a5      	b.n	8000868 <__udivmoddi4+0xa0>
 800091c:	f1c2 0320 	rsb	r3, r2, #32
 8000920:	fa20 f603 	lsr.w	r6, r0, r3
 8000924:	4097      	lsls	r7, r2
 8000926:	fa01 f002 	lsl.w	r0, r1, r2
 800092a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800092e:	40d9      	lsrs	r1, r3
 8000930:	4330      	orrs	r0, r6
 8000932:	0c03      	lsrs	r3, r0, #16
 8000934:	fbb1 f6fe 	udiv	r6, r1, lr
 8000938:	fa1f f887 	uxth.w	r8, r7
 800093c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000940:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000944:	fb06 f108 	mul.w	r1, r6, r8
 8000948:	4299      	cmp	r1, r3
 800094a:	fa04 f402 	lsl.w	r4, r4, r2
 800094e:	d909      	bls.n	8000964 <__udivmoddi4+0x19c>
 8000950:	18fb      	adds	r3, r7, r3
 8000952:	f106 3cff 	add.w	ip, r6, #4294967295
 8000956:	f080 808d 	bcs.w	8000a74 <__udivmoddi4+0x2ac>
 800095a:	4299      	cmp	r1, r3
 800095c:	f240 808a 	bls.w	8000a74 <__udivmoddi4+0x2ac>
 8000960:	3e02      	subs	r6, #2
 8000962:	443b      	add	r3, r7
 8000964:	1a5b      	subs	r3, r3, r1
 8000966:	b281      	uxth	r1, r0
 8000968:	fbb3 f0fe 	udiv	r0, r3, lr
 800096c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000970:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000974:	fb00 f308 	mul.w	r3, r0, r8
 8000978:	428b      	cmp	r3, r1
 800097a:	d907      	bls.n	800098c <__udivmoddi4+0x1c4>
 800097c:	1879      	adds	r1, r7, r1
 800097e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000982:	d273      	bcs.n	8000a6c <__udivmoddi4+0x2a4>
 8000984:	428b      	cmp	r3, r1
 8000986:	d971      	bls.n	8000a6c <__udivmoddi4+0x2a4>
 8000988:	3802      	subs	r0, #2
 800098a:	4439      	add	r1, r7
 800098c:	1acb      	subs	r3, r1, r3
 800098e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000992:	e778      	b.n	8000886 <__udivmoddi4+0xbe>
 8000994:	f1c6 0c20 	rsb	ip, r6, #32
 8000998:	fa03 f406 	lsl.w	r4, r3, r6
 800099c:	fa22 f30c 	lsr.w	r3, r2, ip
 80009a0:	431c      	orrs	r4, r3
 80009a2:	fa20 f70c 	lsr.w	r7, r0, ip
 80009a6:	fa01 f306 	lsl.w	r3, r1, r6
 80009aa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80009ae:	fa21 f10c 	lsr.w	r1, r1, ip
 80009b2:	431f      	orrs	r7, r3
 80009b4:	0c3b      	lsrs	r3, r7, #16
 80009b6:	fbb1 f9fe 	udiv	r9, r1, lr
 80009ba:	fa1f f884 	uxth.w	r8, r4
 80009be:	fb0e 1119 	mls	r1, lr, r9, r1
 80009c2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80009c6:	fb09 fa08 	mul.w	sl, r9, r8
 80009ca:	458a      	cmp	sl, r1
 80009cc:	fa02 f206 	lsl.w	r2, r2, r6
 80009d0:	fa00 f306 	lsl.w	r3, r0, r6
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x220>
 80009d6:	1861      	adds	r1, r4, r1
 80009d8:	f109 30ff 	add.w	r0, r9, #4294967295
 80009dc:	d248      	bcs.n	8000a70 <__udivmoddi4+0x2a8>
 80009de:	458a      	cmp	sl, r1
 80009e0:	d946      	bls.n	8000a70 <__udivmoddi4+0x2a8>
 80009e2:	f1a9 0902 	sub.w	r9, r9, #2
 80009e6:	4421      	add	r1, r4
 80009e8:	eba1 010a 	sub.w	r1, r1, sl
 80009ec:	b2bf      	uxth	r7, r7
 80009ee:	fbb1 f0fe 	udiv	r0, r1, lr
 80009f2:	fb0e 1110 	mls	r1, lr, r0, r1
 80009f6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80009fa:	fb00 f808 	mul.w	r8, r0, r8
 80009fe:	45b8      	cmp	r8, r7
 8000a00:	d907      	bls.n	8000a12 <__udivmoddi4+0x24a>
 8000a02:	19e7      	adds	r7, r4, r7
 8000a04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a08:	d22e      	bcs.n	8000a68 <__udivmoddi4+0x2a0>
 8000a0a:	45b8      	cmp	r8, r7
 8000a0c:	d92c      	bls.n	8000a68 <__udivmoddi4+0x2a0>
 8000a0e:	3802      	subs	r0, #2
 8000a10:	4427      	add	r7, r4
 8000a12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a16:	eba7 0708 	sub.w	r7, r7, r8
 8000a1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000a1e:	454f      	cmp	r7, r9
 8000a20:	46c6      	mov	lr, r8
 8000a22:	4649      	mov	r1, r9
 8000a24:	d31a      	bcc.n	8000a5c <__udivmoddi4+0x294>
 8000a26:	d017      	beq.n	8000a58 <__udivmoddi4+0x290>
 8000a28:	b15d      	cbz	r5, 8000a42 <__udivmoddi4+0x27a>
 8000a2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000a2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000a32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a36:	40f2      	lsrs	r2, r6
 8000a38:	ea4c 0202 	orr.w	r2, ip, r2
 8000a3c:	40f7      	lsrs	r7, r6
 8000a3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000a42:	2600      	movs	r6, #0
 8000a44:	4631      	mov	r1, r6
 8000a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a4a:	462e      	mov	r6, r5
 8000a4c:	4628      	mov	r0, r5
 8000a4e:	e70b      	b.n	8000868 <__udivmoddi4+0xa0>
 8000a50:	4606      	mov	r6, r0
 8000a52:	e6e9      	b.n	8000828 <__udivmoddi4+0x60>
 8000a54:	4618      	mov	r0, r3
 8000a56:	e6fd      	b.n	8000854 <__udivmoddi4+0x8c>
 8000a58:	4543      	cmp	r3, r8
 8000a5a:	d2e5      	bcs.n	8000a28 <__udivmoddi4+0x260>
 8000a5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a60:	eb69 0104 	sbc.w	r1, r9, r4
 8000a64:	3801      	subs	r0, #1
 8000a66:	e7df      	b.n	8000a28 <__udivmoddi4+0x260>
 8000a68:	4608      	mov	r0, r1
 8000a6a:	e7d2      	b.n	8000a12 <__udivmoddi4+0x24a>
 8000a6c:	4660      	mov	r0, ip
 8000a6e:	e78d      	b.n	800098c <__udivmoddi4+0x1c4>
 8000a70:	4681      	mov	r9, r0
 8000a72:	e7b9      	b.n	80009e8 <__udivmoddi4+0x220>
 8000a74:	4666      	mov	r6, ip
 8000a76:	e775      	b.n	8000964 <__udivmoddi4+0x19c>
 8000a78:	4630      	mov	r0, r6
 8000a7a:	e74a      	b.n	8000912 <__udivmoddi4+0x14a>
 8000a7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a80:	4439      	add	r1, r7
 8000a82:	e713      	b.n	80008ac <__udivmoddi4+0xe4>
 8000a84:	3802      	subs	r0, #2
 8000a86:	443c      	add	r4, r7
 8000a88:	e724      	b.n	80008d4 <__udivmoddi4+0x10c>
 8000a8a:	bf00      	nop

08000a8c <__aeabi_idiv0>:
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop

08000a90 <rpmsg_recv_callback>:

uint32_t receivedDataPointer = 0;

int rpmsg_recv_callback(struct rpmsg_endpoint *ept, void *data,
		size_t len, uint32_t src, void *priv)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
 8000a9c:	603b      	str	r3, [r7, #0]
	received_data = *((unsigned int *) data);
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a09      	ldr	r2, [pc, #36]	; (8000ac8 <rpmsg_recv_callback+0x38>)
 8000aa4:	6013      	str	r3, [r2, #0]
	receivedDataPointer = (uint32_t)((unsigned int *) data);
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	4a08      	ldr	r2, [pc, #32]	; (8000acc <rpmsg_recv_callback+0x3c>)
 8000aaa:	6013      	str	r3, [r2, #0]
	message_received=1;
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <rpmsg_recv_callback+0x40>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	601a      	str	r2, [r3, #0]
	parseRecievedMessages((uint8_t)received_data);
 8000ab2:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <rpmsg_recv_callback+0x38>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 f853 	bl	8000b64 <parseRecievedMessages>
	return 0;
 8000abe:	2300      	movs	r3, #0
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	2400a560 	.word	0x2400a560
 8000acc:	2400a3a0 	.word	0x2400a3a0
 8000ad0:	2400a5a8 	.word	0x2400a5a8

08000ad4 <receive_message>:
}
#endif

#ifdef CORE_CM7
unsigned int receive_message(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	while (message_received == 0 && service_created == 1)
 8000ad8:	e001      	b.n	8000ade <receive_message+0xa>
	{
		OPENAMP_check_for_message();
 8000ada:	f010 fe7d 	bl	80117d8 <OPENAMP_check_for_message>
	while (message_received == 0 && service_created == 1)
 8000ade:	4b07      	ldr	r3, [pc, #28]	; (8000afc <receive_message+0x28>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d103      	bne.n	8000aee <receive_message+0x1a>
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <receive_message+0x2c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d0f5      	beq.n	8000ada <receive_message+0x6>
	}
	message_received = 0;
 8000aee:	4b03      	ldr	r3, [pc, #12]	; (8000afc <receive_message+0x28>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]

	return received_data;
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <receive_message+0x30>)
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	2400a5a8 	.word	0x2400a5a8
 8000b00:	2400a564 	.word	0x2400a564
 8000b04:	2400a560 	.word	0x2400a560

08000b08 <service_destroy_cb>:
void service_destroy_cb(struct rpmsg_endpoint *ept)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	/* this function is called while remote endpoint as been destroyed, the
	 * service is no more available
	 */
	service_created = 0;
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <service_destroy_cb+0x1c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	2400a564 	.word	0x2400a564

08000b28 <new_service_cb>:

void new_service_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af02      	add	r7, sp, #8
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
	/* create a endpoint for rmpsg communication */
	OPENAMP_create_endpoint(&rp_endpoint, name, dest, rpmsg_recv_callback,
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <new_service_cb+0x2c>)
 8000b36:	9300      	str	r3, [sp, #0]
 8000b38:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <new_service_cb+0x30>)
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	4807      	ldr	r0, [pc, #28]	; (8000b5c <new_service_cb+0x34>)
 8000b40:	f010 fe2c 	bl	801179c <OPENAMP_create_endpoint>
			service_destroy_cb);
	service_created = 1;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <new_service_cb+0x38>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	601a      	str	r2, [r3, #0]
}
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	08000b09 	.word	0x08000b09
 8000b58:	08000a91 	.word	0x08000a91
 8000b5c:	2400a568 	.word	0x2400a568
 8000b60:	2400a564 	.word	0x2400a564

08000b64 <parseRecievedMessages>:
#ifdef CORE_CM7
#include "GUI_Paint.h"
#endif

void parseRecievedMessages(uint8_t opCode)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
	switch (opCode)
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d108      	bne.n	8000b86 <parseRecievedMessages+0x22>
	{
#ifdef CORE_CM7
		case (1):
		{
			memcpy(receivedAnglesData, (uint32_t *)receivedDataPointer, sizeof(tANGLESMESSAGES));
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <parseRecievedMessages+0x2c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a06      	ldr	r2, [pc, #24]	; (8000b94 <parseRecievedMessages+0x30>)
 8000b7a:	6812      	ldr	r2, [r2, #0]
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	221c      	movs	r2, #28
 8000b80:	4618      	mov	r0, r3
 8000b82:	f011 fa43 	bl	801200c <memcpy>
		default:
		{

		}
	}
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	2400a55c 	.word	0x2400a55c
 8000b94:	2400a3a0 	.word	0x2400a3a0

08000b98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b9c:	4b3f      	ldr	r3, [pc, #252]	; (8000c9c <SystemInit+0x104>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba2:	4a3e      	ldr	r2, [pc, #248]	; (8000c9c <SystemInit+0x104>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000bac:	4b3b      	ldr	r3, [pc, #236]	; (8000c9c <SystemInit+0x104>)
 8000bae:	691b      	ldr	r3, [r3, #16]
 8000bb0:	4a3a      	ldr	r2, [pc, #232]	; (8000c9c <SystemInit+0x104>)
 8000bb2:	f043 0310 	orr.w	r3, r3, #16
 8000bb6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bb8:	4b39      	ldr	r3, [pc, #228]	; (8000ca0 <SystemInit+0x108>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f003 030f 	and.w	r3, r3, #15
 8000bc0:	2b06      	cmp	r3, #6
 8000bc2:	d807      	bhi.n	8000bd4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bc4:	4b36      	ldr	r3, [pc, #216]	; (8000ca0 <SystemInit+0x108>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f023 030f 	bic.w	r3, r3, #15
 8000bcc:	4a34      	ldr	r2, [pc, #208]	; (8000ca0 <SystemInit+0x108>)
 8000bce:	f043 0307 	orr.w	r3, r3, #7
 8000bd2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bd4:	4b33      	ldr	r3, [pc, #204]	; (8000ca4 <SystemInit+0x10c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a32      	ldr	r2, [pc, #200]	; (8000ca4 <SystemInit+0x10c>)
 8000bda:	f043 0301 	orr.w	r3, r3, #1
 8000bde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000be0:	4b30      	ldr	r3, [pc, #192]	; (8000ca4 <SystemInit+0x10c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000be6:	4b2f      	ldr	r3, [pc, #188]	; (8000ca4 <SystemInit+0x10c>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	492e      	ldr	r1, [pc, #184]	; (8000ca4 <SystemInit+0x10c>)
 8000bec:	4b2e      	ldr	r3, [pc, #184]	; (8000ca8 <SystemInit+0x110>)
 8000bee:	4013      	ands	r3, r2
 8000bf0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bf2:	4b2b      	ldr	r3, [pc, #172]	; (8000ca0 <SystemInit+0x108>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f003 0308 	and.w	r3, r3, #8
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d007      	beq.n	8000c0e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bfe:	4b28      	ldr	r3, [pc, #160]	; (8000ca0 <SystemInit+0x108>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f023 030f 	bic.w	r3, r3, #15
 8000c06:	4a26      	ldr	r2, [pc, #152]	; (8000ca0 <SystemInit+0x108>)
 8000c08:	f043 0307 	orr.w	r3, r3, #7
 8000c0c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c0e:	4b25      	ldr	r3, [pc, #148]	; (8000ca4 <SystemInit+0x10c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c14:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <SystemInit+0x10c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c1a:	4b22      	ldr	r3, [pc, #136]	; (8000ca4 <SystemInit+0x10c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c20:	4b20      	ldr	r3, [pc, #128]	; (8000ca4 <SystemInit+0x10c>)
 8000c22:	4a22      	ldr	r2, [pc, #136]	; (8000cac <SystemInit+0x114>)
 8000c24:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c26:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <SystemInit+0x10c>)
 8000c28:	4a21      	ldr	r2, [pc, #132]	; (8000cb0 <SystemInit+0x118>)
 8000c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <SystemInit+0x10c>)
 8000c2e:	4a21      	ldr	r2, [pc, #132]	; (8000cb4 <SystemInit+0x11c>)
 8000c30:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c32:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <SystemInit+0x10c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c38:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <SystemInit+0x10c>)
 8000c3a:	4a1e      	ldr	r2, [pc, #120]	; (8000cb4 <SystemInit+0x11c>)
 8000c3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c3e:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <SystemInit+0x10c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c44:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <SystemInit+0x10c>)
 8000c46:	4a1b      	ldr	r2, [pc, #108]	; (8000cb4 <SystemInit+0x11c>)
 8000c48:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c4a:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <SystemInit+0x10c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <SystemInit+0x10c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a13      	ldr	r2, [pc, #76]	; (8000ca4 <SystemInit+0x10c>)
 8000c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c5a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <SystemInit+0x10c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <SystemInit+0x120>)
 8000c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c66:	4a14      	ldr	r2, [pc, #80]	; (8000cb8 <SystemInit+0x120>)
 8000c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <SystemInit+0x124>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <SystemInit+0x128>)
 8000c74:	4013      	ands	r3, r2
 8000c76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c7a:	d202      	bcs.n	8000c82 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <SystemInit+0x12c>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <SystemInit+0x130>)
 8000c84:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c88:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000c8a:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <SystemInit+0x104>)
 8000c8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c90:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00
 8000ca0:	52002000 	.word	0x52002000
 8000ca4:	58024400 	.word	0x58024400
 8000ca8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cac:	02020200 	.word	0x02020200
 8000cb0:	01ff0000 	.word	0x01ff0000
 8000cb4:	01010280 	.word	0x01010280
 8000cb8:	580000c0 	.word	0x580000c0
 8000cbc:	5c001000 	.word	0x5c001000
 8000cc0:	ffff0000 	.word	0xffff0000
 8000cc4:	51008108 	.word	0x51008108
 8000cc8:	52004000 	.word	0x52004000

08000ccc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cd2:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <MX_DMA_Init+0x3c>)
 8000cd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cd8:	4a0b      	ldr	r2, [pc, #44]	; (8000d08 <MX_DMA_Init+0x3c>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <MX_DMA_Init+0x3c>)
 8000ce4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	200b      	movs	r0, #11
 8000cf6:	f001 ff9c 	bl	8002c32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000cfa:	200b      	movs	r0, #11
 8000cfc:	f001 ffb3 	bl	8002c66 <HAL_NVIC_EnableIRQ>

}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	58024400 	.word	0x58024400

08000d0c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000d10:	4b22      	ldr	r3, [pc, #136]	; (8000d9c <MX_ETH_Init+0x90>)
 8000d12:	4a23      	ldr	r2, [pc, #140]	; (8000da0 <MX_ETH_Init+0x94>)
 8000d14:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8000d16:	4b21      	ldr	r3, [pc, #132]	; (8000d9c <MX_ETH_Init+0x90>)
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000d1e:	4b1f      	ldr	r3, [pc, #124]	; (8000d9c <MX_ETH_Init+0x90>)
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	3301      	adds	r3, #1
 8000d24:	2280      	movs	r2, #128	; 0x80
 8000d26:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000d28:	4b1c      	ldr	r3, [pc, #112]	; (8000d9c <MX_ETH_Init+0x90>)
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	3302      	adds	r3, #2
 8000d2e:	22e1      	movs	r2, #225	; 0xe1
 8000d30:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000d32:	4b1a      	ldr	r3, [pc, #104]	; (8000d9c <MX_ETH_Init+0x90>)
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	3303      	adds	r3, #3
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000d3c:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <MX_ETH_Init+0x90>)
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	3304      	adds	r3, #4
 8000d42:	2200      	movs	r2, #0
 8000d44:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000d46:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <MX_ETH_Init+0x90>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	3305      	adds	r3, #5
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <MX_ETH_Init+0x90>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000d56:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <MX_ETH_Init+0x90>)
 8000d58:	4a12      	ldr	r2, [pc, #72]	; (8000da4 <MX_ETH_Init+0x98>)
 8000d5a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <MX_ETH_Init+0x90>)
 8000d5e:	4a12      	ldr	r2, [pc, #72]	; (8000da8 <MX_ETH_Init+0x9c>)
 8000d60:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <MX_ETH_Init+0x90>)
 8000d64:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000d68:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000d6a:	480c      	ldr	r0, [pc, #48]	; (8000d9c <MX_ETH_Init+0x90>)
 8000d6c:	f003 fcd4 	bl	8004718 <HAL_ETH_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000d76:	f001 f890 	bl	8001e9a <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d7a:	2234      	movs	r2, #52	; 0x34
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	480b      	ldr	r0, [pc, #44]	; (8000dac <MX_ETH_Init+0xa0>)
 8000d80:	f011 f96c 	bl	801205c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d84:	4b09      	ldr	r3, [pc, #36]	; (8000dac <MX_ETH_Init+0xa0>)
 8000d86:	2221      	movs	r2, #33	; 0x21
 8000d88:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <MX_ETH_Init+0xa0>)
 8000d8c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d90:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <MX_ETH_Init+0xa0>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	2400a454 	.word	0x2400a454
 8000da0:	40028000 	.word	0x40028000
 8000da4:	2400a324 	.word	0x2400a324
 8000da8:	2400a2c4 	.word	0x2400a2c4
 8000dac:	2400a4dc 	.word	0x2400a4dc

08000db0 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08e      	sub	sp, #56	; 0x38
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a59      	ldr	r2, [pc, #356]	; (8000f34 <HAL_ETH_MspInit+0x184>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	f040 80ab 	bne.w	8000f2a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000dd4:	4b58      	ldr	r3, [pc, #352]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000dd6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dda:	4a57      	ldr	r2, [pc, #348]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000ddc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000de0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000de4:	4b54      	ldr	r3, [pc, #336]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000de6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dee:	623b      	str	r3, [r7, #32]
 8000df0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000df2:	4b51      	ldr	r3, [pc, #324]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000df4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000df8:	4a4f      	ldr	r2, [pc, #316]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000dfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dfe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e02:	4b4d      	ldr	r3, [pc, #308]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000e04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e0c:	61fb      	str	r3, [r7, #28]
 8000e0e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000e10:	4b49      	ldr	r3, [pc, #292]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000e12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e16:	4a48      	ldr	r2, [pc, #288]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e1c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e20:	4b45      	ldr	r3, [pc, #276]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000e22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2a:	61bb      	str	r3, [r7, #24]
 8000e2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e2e:	4b42      	ldr	r3, [pc, #264]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e34:	4a40      	ldr	r2, [pc, #256]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000e36:	f043 0304 	orr.w	r3, r3, #4
 8000e3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e3e:	4b3e      	ldr	r3, [pc, #248]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e44:	f003 0304 	and.w	r3, r3, #4
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4c:	4b3a      	ldr	r3, [pc, #232]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e52:	4a39      	ldr	r2, [pc, #228]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e5c:	4b36      	ldr	r3, [pc, #216]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6a:	4b33      	ldr	r3, [pc, #204]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e70:	4a31      	ldr	r2, [pc, #196]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000e72:	f043 0302 	orr.w	r3, r3, #2
 8000e76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e7a:	4b2f      	ldr	r3, [pc, #188]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e88:	4b2b      	ldr	r3, [pc, #172]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8e:	4a2a      	ldr	r2, [pc, #168]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000e90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e98:	4b27      	ldr	r3, [pc, #156]	; (8000f38 <HAL_ETH_MspInit+0x188>)
 8000e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000ea6:	2332      	movs	r3, #50	; 0x32
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eb6:	230b      	movs	r3, #11
 8000eb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	481e      	ldr	r0, [pc, #120]	; (8000f3c <HAL_ETH_MspInit+0x18c>)
 8000ec2:	f004 f83f 	bl	8004f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000ec6:	2386      	movs	r3, #134	; 0x86
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ed6:	230b      	movs	r3, #11
 8000ed8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4817      	ldr	r0, [pc, #92]	; (8000f40 <HAL_ETH_MspInit+0x190>)
 8000ee2:	f004 f82f 	bl	8004f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ee6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ef8:	230b      	movs	r3, #11
 8000efa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f00:	4619      	mov	r1, r3
 8000f02:	4810      	ldr	r0, [pc, #64]	; (8000f44 <HAL_ETH_MspInit+0x194>)
 8000f04:	f004 f81e 	bl	8004f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f08:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f1a:	230b      	movs	r3, #11
 8000f1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f22:	4619      	mov	r1, r3
 8000f24:	4808      	ldr	r0, [pc, #32]	; (8000f48 <HAL_ETH_MspInit+0x198>)
 8000f26:	f004 f80d 	bl	8004f44 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000f2a:	bf00      	nop
 8000f2c:	3738      	adds	r7, #56	; 0x38
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40028000 	.word	0x40028000
 8000f38:	58024400 	.word	0x58024400
 8000f3c:	58020800 	.word	0x58020800
 8000f40:	58020000 	.word	0x58020000
 8000f44:	58020400 	.word	0x58020400
 8000f48:	58021800 	.word	0x58021800

08000f4c <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08e      	sub	sp, #56	; 0x38
 8000f50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
 8000f60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f62:	4b86      	ldr	r3, [pc, #536]	; (800117c <MX_GPIO_Init+0x230>)
 8000f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f68:	4a84      	ldr	r2, [pc, #528]	; (800117c <MX_GPIO_Init+0x230>)
 8000f6a:	f043 0304 	orr.w	r3, r3, #4
 8000f6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f72:	4b82      	ldr	r3, [pc, #520]	; (800117c <MX_GPIO_Init+0x230>)
 8000f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f78:	f003 0304 	and.w	r3, r3, #4
 8000f7c:	623b      	str	r3, [r7, #32]
 8000f7e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f80:	4b7e      	ldr	r3, [pc, #504]	; (800117c <MX_GPIO_Init+0x230>)
 8000f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f86:	4a7d      	ldr	r2, [pc, #500]	; (800117c <MX_GPIO_Init+0x230>)
 8000f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f90:	4b7a      	ldr	r3, [pc, #488]	; (800117c <MX_GPIO_Init+0x230>)
 8000f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f9a:	61fb      	str	r3, [r7, #28]
 8000f9c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	4b77      	ldr	r3, [pc, #476]	; (800117c <MX_GPIO_Init+0x230>)
 8000fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa4:	4a75      	ldr	r2, [pc, #468]	; (800117c <MX_GPIO_Init+0x230>)
 8000fa6:	f043 0301 	orr.w	r3, r3, #1
 8000faa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fae:	4b73      	ldr	r3, [pc, #460]	; (800117c <MX_GPIO_Init+0x230>)
 8000fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	61bb      	str	r3, [r7, #24]
 8000fba:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbc:	4b6f      	ldr	r3, [pc, #444]	; (800117c <MX_GPIO_Init+0x230>)
 8000fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc2:	4a6e      	ldr	r2, [pc, #440]	; (800117c <MX_GPIO_Init+0x230>)
 8000fc4:	f043 0302 	orr.w	r3, r3, #2
 8000fc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fcc:	4b6b      	ldr	r3, [pc, #428]	; (800117c <MX_GPIO_Init+0x230>)
 8000fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fda:	4b68      	ldr	r3, [pc, #416]	; (800117c <MX_GPIO_Init+0x230>)
 8000fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe0:	4a66      	ldr	r2, [pc, #408]	; (800117c <MX_GPIO_Init+0x230>)
 8000fe2:	f043 0320 	orr.w	r3, r3, #32
 8000fe6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fea:	4b64      	ldr	r3, [pc, #400]	; (800117c <MX_GPIO_Init+0x230>)
 8000fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff0:	f003 0320 	and.w	r3, r3, #32
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ff8:	4b60      	ldr	r3, [pc, #384]	; (800117c <MX_GPIO_Init+0x230>)
 8000ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ffe:	4a5f      	ldr	r2, [pc, #380]	; (800117c <MX_GPIO_Init+0x230>)
 8001000:	f043 0310 	orr.w	r3, r3, #16
 8001004:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001008:	4b5c      	ldr	r3, [pc, #368]	; (800117c <MX_GPIO_Init+0x230>)
 800100a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100e:	f003 0310 	and.w	r3, r3, #16
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001016:	4b59      	ldr	r3, [pc, #356]	; (800117c <MX_GPIO_Init+0x230>)
 8001018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101c:	4a57      	ldr	r2, [pc, #348]	; (800117c <MX_GPIO_Init+0x230>)
 800101e:	f043 0308 	orr.w	r3, r3, #8
 8001022:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001026:	4b55      	ldr	r3, [pc, #340]	; (800117c <MX_GPIO_Init+0x230>)
 8001028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800102c:	f003 0308 	and.w	r3, r3, #8
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001034:	4b51      	ldr	r3, [pc, #324]	; (800117c <MX_GPIO_Init+0x230>)
 8001036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103a:	4a50      	ldr	r2, [pc, #320]	; (800117c <MX_GPIO_Init+0x230>)
 800103c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001040:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001044:	4b4d      	ldr	r3, [pc, #308]	; (800117c <MX_GPIO_Init+0x230>)
 8001046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	f244 0101 	movw	r1, #16385	; 0x4001
 8001058:	4849      	ldr	r0, [pc, #292]	; (8001180 <MX_GPIO_Init+0x234>)
 800105a:	f004 f923 	bl	80052a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001064:	4847      	ldr	r0, [pc, #284]	; (8001184 <MX_GPIO_Init+0x238>)
 8001066:	f004 f91d 	bl	80052a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001070:	4845      	ldr	r0, [pc, #276]	; (8001188 <MX_GPIO_Init+0x23c>)
 8001072:	f004 f917 	bl	80052a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO___LCD_CS_Pin|GPIO___LCD_DC_Pin, GPIO_PIN_RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800107c:	4843      	ldr	r0, [pc, #268]	; (800118c <MX_GPIO_Init+0x240>)
 800107e:	f004 f911 	bl	80052a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001082:	2200      	movs	r2, #0
 8001084:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001088:	4841      	ldr	r0, [pc, #260]	; (8001190 <MX_GPIO_Init+0x244>)
 800108a:	f004 f90b 	bl	80052a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	2102      	movs	r1, #2
 8001092:	4840      	ldr	r0, [pc, #256]	; (8001194 <MX_GPIO_Init+0x248>)
 8001094:	f004 f906 	bl	80052a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001098:	f244 0301 	movw	r3, #16385	; 0x4001
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109e:	2301      	movs	r3, #1
 80010a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ae:	4619      	mov	r1, r3
 80010b0:	4833      	ldr	r0, [pc, #204]	; (8001180 <MX_GPIO_Init+0x234>)
 80010b2:	f003 ff47 	bl	8004f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010bc:	2301      	movs	r3, #1
 80010be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2300      	movs	r3, #0
 80010c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010cc:	4619      	mov	r1, r3
 80010ce:	482d      	ldr	r0, [pc, #180]	; (8001184 <MX_GPIO_Init+0x238>)
 80010d0:	f003 ff38 	bl	8004f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010da:	4b2f      	ldr	r3, [pc, #188]	; (8001198 <MX_GPIO_Init+0x24c>)
 80010dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e6:	4619      	mov	r1, r3
 80010e8:	482a      	ldr	r0, [pc, #168]	; (8001194 <MX_GPIO_Init+0x248>)
 80010ea:	f003 ff2b 	bl	8004f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80010ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f4:	2301      	movs	r3, #1
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fc:	2300      	movs	r3, #0
 80010fe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001104:	4619      	mov	r1, r3
 8001106:	4820      	ldr	r0, [pc, #128]	; (8001188 <MX_GPIO_Init+0x23c>)
 8001108:	f003 ff1c 	bl	8004f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = GPIO___LCD_CS_Pin|GPIO___LCD_DC_Pin;
 800110c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001112:	2301      	movs	r3, #1
 8001114:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800111e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001122:	4619      	mov	r1, r3
 8001124:	4819      	ldr	r0, [pc, #100]	; (800118c <MX_GPIO_Init+0x240>)
 8001126:	f003 ff0d 	bl	8004f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800112a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001130:	2301      	movs	r3, #1
 8001132:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	2300      	movs	r3, #0
 800113a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001140:	4619      	mov	r1, r3
 8001142:	4813      	ldr	r0, [pc, #76]	; (8001190 <MX_GPIO_Init+0x244>)
 8001144:	f003 fefe 	bl	8004f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001148:	2302      	movs	r3, #2
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114c:	2301      	movs	r3, #1
 800114e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001154:	2300      	movs	r3, #0
 8001156:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115c:	4619      	mov	r1, r3
 800115e:	480d      	ldr	r0, [pc, #52]	; (8001194 <MX_GPIO_Init+0x248>)
 8001160:	f003 fef0 	bl	8004f44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001164:	2200      	movs	r2, #0
 8001166:	2100      	movs	r1, #0
 8001168:	2028      	movs	r0, #40	; 0x28
 800116a:	f001 fd62 	bl	8002c32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800116e:	2028      	movs	r0, #40	; 0x28
 8001170:	f001 fd79 	bl	8002c66 <HAL_NVIC_EnableIRQ>

}
 8001174:	bf00      	nop
 8001176:	3738      	adds	r7, #56	; 0x38
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	58024400 	.word	0x58024400
 8001180:	58020400 	.word	0x58020400
 8001184:	58021400 	.word	0x58021400
 8001188:	58020c00 	.word	0x58020c00
 800118c:	58021800 	.word	0x58021800
 8001190:	58020000 	.word	0x58020000
 8001194:	58021000 	.word	0x58021000
 8001198:	11310000 	.word	0x11310000

0800119c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011a0:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <MX_I2C1_Init+0x74>)
 80011a2:	4a1c      	ldr	r2, [pc, #112]	; (8001214 <MX_I2C1_Init+0x78>)
 80011a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301242;
 80011a6:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <MX_I2C1_Init+0x74>)
 80011a8:	4a1b      	ldr	r2, [pc, #108]	; (8001218 <MX_I2C1_Init+0x7c>)
 80011aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011ac:	4b18      	ldr	r3, [pc, #96]	; (8001210 <MX_I2C1_Init+0x74>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <MX_I2C1_Init+0x74>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011b8:	4b15      	ldr	r3, [pc, #84]	; (8001210 <MX_I2C1_Init+0x74>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011be:	4b14      	ldr	r3, [pc, #80]	; (8001210 <MX_I2C1_Init+0x74>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <MX_I2C1_Init+0x74>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <MX_I2C1_Init+0x74>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011d0:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <MX_I2C1_Init+0x74>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011d6:	480e      	ldr	r0, [pc, #56]	; (8001210 <MX_I2C1_Init+0x74>)
 80011d8:	f005 fe44 	bl	8006e64 <HAL_I2C_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011e2:	f000 fe5a 	bl	8001e9a <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011e6:	2100      	movs	r1, #0
 80011e8:	4809      	ldr	r0, [pc, #36]	; (8001210 <MX_I2C1_Init+0x74>)
 80011ea:	f005 fee5 	bl	8006fb8 <HAL_I2CEx_ConfigAnalogFilter>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011f4:	f000 fe51 	bl	8001e9a <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011f8:	2100      	movs	r1, #0
 80011fa:	4805      	ldr	r0, [pc, #20]	; (8001210 <MX_I2C1_Init+0x74>)
 80011fc:	f005 ff27 	bl	800704e <HAL_I2CEx_ConfigDigitalFilter>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001206:	f000 fe48 	bl	8001e9a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	2400a510 	.word	0x2400a510
 8001214:	40005400 	.word	0x40005400
 8001218:	00301242 	.word	0x00301242

0800121c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b0b8      	sub	sp, #224	; 0xe0
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001234:	f107 0310 	add.w	r3, r7, #16
 8001238:	22bc      	movs	r2, #188	; 0xbc
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f010 ff0d 	bl	801205c <memset>
  if(i2cHandle->Instance==I2C1)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a29      	ldr	r2, [pc, #164]	; (80012ec <HAL_I2C_MspInit+0xd0>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d14a      	bne.n	80012e2 <HAL_I2C_MspInit+0xc6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800124c:	2308      	movs	r3, #8
 800124e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001250:	2300      	movs	r3, #0
 8001252:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001256:	f107 0310 	add.w	r3, r7, #16
 800125a:	4618      	mov	r0, r3
 800125c:	f006 ff4a 	bl	80080f4 <HAL_RCCEx_PeriphCLKConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001266:	f000 fe18 	bl	8001e9a <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800126a:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <HAL_I2C_MspInit+0xd4>)
 800126c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001270:	4a1f      	ldr	r2, [pc, #124]	; (80012f0 <HAL_I2C_MspInit+0xd4>)
 8001272:	f043 0302 	orr.w	r3, r3, #2
 8001276:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800127a:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <HAL_I2C_MspInit+0xd4>)
 800127c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA___ChassisMPU_Pin|I2C1_SCL___ChassisMPU_Pin;
 8001288:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800128c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001290:	2312      	movs	r3, #18
 8001292:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012a2:	2304      	movs	r3, #4
 80012a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012ac:	4619      	mov	r1, r3
 80012ae:	4811      	ldr	r0, [pc, #68]	; (80012f4 <HAL_I2C_MspInit+0xd8>)
 80012b0:	f003 fe48 	bl	8004f44 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012b4:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <HAL_I2C_MspInit+0xd4>)
 80012b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012ba:	4a0d      	ldr	r2, [pc, #52]	; (80012f0 <HAL_I2C_MspInit+0xd4>)
 80012bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012c0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012c4:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <HAL_I2C_MspInit+0xd4>)
 80012c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 4, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2104      	movs	r1, #4
 80012d6:	201f      	movs	r0, #31
 80012d8:	f001 fcab 	bl	8002c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80012dc:	201f      	movs	r0, #31
 80012de:	f001 fcc2 	bl	8002c66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012e2:	bf00      	nop
 80012e4:	37e0      	adds	r7, #224	; 0xe0
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40005400 	.word	0x40005400
 80012f0:	58024400 	.word	0x58024400
 80012f4:	58020400 	.word	0x58020400

080012f8 <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
 8001304:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2220      	movs	r2, #32
 800130a:	68b9      	ldr	r1, [r7, #8]
 800130c:	4618      	mov	r0, r3
 800130e:	f011 ffcf 	bl	80132b0 <strncpy>
	ept->addr = src;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	69fa      	ldr	r2, [r7, #28]
 8001328:	631a      	str	r2, [r3, #48]	; 0x30
}
 800132a:	bf00      	nop
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af02      	add	r7, sp, #8
/* USER CODE BEGIN Boot_Mode_Sequence_0 */

/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	MPU_Config();
 800133a:	f000 fd87 	bl	8001e4c <MPU_Config>
	CPU_CACHE_Enable();
 800133e:	f000 fd17 	bl	8001d70 <CPU_CACHE_Enable>
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001342:	f001 fac5 	bl	80028d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001346:	f000 fc8b 	bl	8001c60 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 800134a:	4b2f      	ldr	r3, [pc, #188]	; (8001408 <main+0xd4>)
 800134c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001350:	4a2d      	ldr	r2, [pc, #180]	; (8001408 <main+0xd4>)
 8001352:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001356:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800135a:	4b2b      	ldr	r3, [pc, #172]	; (8001408 <main+0xd4>)
 800135c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8001368:	2000      	movs	r0, #0
 800136a:	f005 fd21 	bl	8006db0 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 800136e:	2100      	movs	r1, #0
 8001370:	2000      	movs	r0, #0
 8001372:	f005 fd37 	bl	8006de4 <HAL_HSEM_Release>


/* USER CODE END Boot_Mode_Sequence_2 */

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_D2SRAM1_CLK_ENABLE();
 8001376:	4b24      	ldr	r3, [pc, #144]	; (8001408 <main+0xd4>)
 8001378:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800137c:	4a22      	ldr	r2, [pc, #136]	; (8001408 <main+0xd4>)
 800137e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001382:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8001386:	4b20      	ldr	r3, [pc, #128]	; (8001408 <main+0xd4>)
 8001388:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800138c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001390:	603b      	str	r3, [r7, #0]
 8001392:	683b      	ldr	r3, [r7, #0]
//  __HAL_RCC_AHBSRAM1_CLK_ENABLE();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001394:	f7ff fdda 	bl	8000f4c <MX_GPIO_Init>
  MX_DMA_Init();
 8001398:	f7ff fc98 	bl	8000ccc <MX_DMA_Init>
  MX_ETH_Init();
 800139c:	f7ff fcb6 	bl	8000d0c <MX_ETH_Init>
  MX_USART3_UART_Init();
 80013a0:	f001 f906 	bl	80025b0 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80013a4:	f7ff fefa 	bl	800119c <MX_I2C1_Init>
  MX_SPI3_Init();
 80013a8:	f000 fd7c 	bl	8001ea4 <MX_SPI3_Init>
  MX_TIM1_Init();
 80013ac:	f000 ffb8 	bl	8002320 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80013b0:	f001 f8b2 	bl	8002518 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 80013b4:	f010 faca 	bl	801194c <MX_USB_HOST_Init>
//      }
//
//      /* USER CODE BEGIN 3 */
//    }

	MAILBOX_Init();
 80013b8:	f010 f850 	bl	801145c <MAILBOX_Init>

	/* Initialize the rpmsg endpoint to set default addresses to RPMSG_ADDR_ANY */
	rpmsg_init_ept(&rp_endpoint, RPMSG_CHAN_NAME, RPMSG_ADDR_ANY, RPMSG_ADDR_ANY,
 80013bc:	2300      	movs	r3, #0
 80013be:	9301      	str	r3, [sp, #4]
 80013c0:	2300      	movs	r3, #0
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	f04f 33ff 	mov.w	r3, #4294967295
 80013c8:	f04f 32ff 	mov.w	r2, #4294967295
 80013cc:	490f      	ldr	r1, [pc, #60]	; (800140c <main+0xd8>)
 80013ce:	4810      	ldr	r0, [pc, #64]	; (8001410 <main+0xdc>)
 80013d0:	f7ff ff92 	bl	80012f8 <rpmsg_init_ept>
			NULL, NULL);
	/* Initialize OpenAmp and libmetal libraries */
	if (MX_OPENAMP_Init(RPMSG_MASTER, new_service_cb)!= HAL_OK)
 80013d4:	490f      	ldr	r1, [pc, #60]	; (8001414 <main+0xe0>)
 80013d6:	2000      	movs	r0, #0
 80013d8:	f010 f94a 	bl	8011670 <MX_OPENAMP_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <main+0xb2>
	{
		Error_Handler();
 80013e2:	f000 fd5a 	bl	8001e9a <Error_Handler>

	//	ssd1306_TestAll();
//	ssd1306_Init();
//	ssd1306_TestBorder();

	uint8_t message = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	72fb      	strb	r3, [r7, #11]
//	while (message < 100)
//	{
		/* Receive the massage from the remote CPU */
		message = receive_message();
 80013ea:	f7ff fb73 	bl	8000ad4 <receive_message>
 80013ee:	4603      	mov	r3, r0
 80013f0:	72fb      	strb	r3, [r7, #11]
//			Error_Handler();
//		}
//	}

	//	isPortrait = true;
	screenInit();
 80013f2:	f00f ff25 	bl	8011240 <screenInit>
	screenClear();
 80013f6:	f00f ffff 	bl	80113f8 <screenClear>
	renderCompleteFrame = true;
 80013fa:	4b07      	ldr	r3, [pc, #28]	; (8001418 <main+0xe4>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	701a      	strb	r2, [r3, #0]

	while(1)
	{
	for (int i = 0 ; i < 160 - 49 ; i++)
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	e01e      	b.n	8001444 <main+0x110>
 8001406:	bf00      	nop
 8001408:	58024400 	.word	0x58024400
 800140c:	080167a8 	.word	0x080167a8
 8001410:	2400a568 	.word	0x2400a568
 8001414:	08000b29 	.word	0x08000b29
 8001418:	2400a3a8 	.word	0x2400a3a8
	{
		createEmptyFrame(true);
 800141c:	2001      	movs	r0, #1
 800141e:	f010 fa31 	bl	8011884 <createEmptyFrame>
		Paint_DrawImage(gImage_Image1, 0, i, 49, 49);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	b29a      	uxth	r2, r3
 8001426:	2331      	movs	r3, #49	; 0x31
 8001428:	9300      	str	r3, [sp, #0]
 800142a:	2331      	movs	r3, #49	; 0x31
 800142c:	2100      	movs	r1, #0
 800142e:	48e1      	ldr	r0, [pc, #900]	; (80017b4 <main+0x480>)
 8001430:	f00b ff18 	bl	800d264 <Paint_DrawImage>
		displayNextFrame();
 8001434:	f010 fa68 	bl	8011908 <displayNextFrame>
		HAL_Delay(20);
 8001438:	2014      	movs	r0, #20
 800143a:	f001 fadb 	bl	80029f4 <HAL_Delay>
	for (int i = 0 ; i < 160 - 49 ; i++)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	3301      	adds	r3, #1
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2b6e      	cmp	r3, #110	; 0x6e
 8001448:	dde8      	ble.n	800141c <main+0xe8>
	}

	createEmptyFrame(true);
 800144a:	2001      	movs	r0, #1
 800144c:	f010 fa1a 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image2, 0, 160 - 49, 49, 49);
 8001450:	2331      	movs	r3, #49	; 0x31
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	2331      	movs	r3, #49	; 0x31
 8001456:	226f      	movs	r2, #111	; 0x6f
 8001458:	2100      	movs	r1, #0
 800145a:	48d7      	ldr	r0, [pc, #860]	; (80017b8 <main+0x484>)
 800145c:	f00b ff02 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 8001460:	f010 fa52 	bl	8011908 <displayNextFrame>
	HAL_Delay(50);
 8001464:	2032      	movs	r0, #50	; 0x32
 8001466:	f001 fac5 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 800146a:	2001      	movs	r0, #1
 800146c:	f010 fa0a 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image3, 0, 160 - 49, 49, 49);
 8001470:	2331      	movs	r3, #49	; 0x31
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	2331      	movs	r3, #49	; 0x31
 8001476:	226f      	movs	r2, #111	; 0x6f
 8001478:	2100      	movs	r1, #0
 800147a:	48d0      	ldr	r0, [pc, #832]	; (80017bc <main+0x488>)
 800147c:	f00b fef2 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 8001480:	f010 fa42 	bl	8011908 <displayNextFrame>
	HAL_Delay(50);
 8001484:	2032      	movs	r0, #50	; 0x32
 8001486:	f001 fab5 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 800148a:	2001      	movs	r0, #1
 800148c:	f010 f9fa 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image4, 0, 160 - 49, 49, 49);
 8001490:	2331      	movs	r3, #49	; 0x31
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	2331      	movs	r3, #49	; 0x31
 8001496:	226f      	movs	r2, #111	; 0x6f
 8001498:	2100      	movs	r1, #0
 800149a:	48c9      	ldr	r0, [pc, #804]	; (80017c0 <main+0x48c>)
 800149c:	f00b fee2 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 80014a0:	f010 fa32 	bl	8011908 <displayNextFrame>
	HAL_Delay(50);
 80014a4:	2032      	movs	r0, #50	; 0x32
 80014a6:	f001 faa5 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 80014aa:	2001      	movs	r0, #1
 80014ac:	f010 f9ea 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image4a, 0, 160 - 49, 49, 49);
 80014b0:	2331      	movs	r3, #49	; 0x31
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	2331      	movs	r3, #49	; 0x31
 80014b6:	226f      	movs	r2, #111	; 0x6f
 80014b8:	2100      	movs	r1, #0
 80014ba:	48c2      	ldr	r0, [pc, #776]	; (80017c4 <main+0x490>)
 80014bc:	f00b fed2 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 80014c0:	f010 fa22 	bl	8011908 <displayNextFrame>
	HAL_Delay(50);
 80014c4:	2032      	movs	r0, #50	; 0x32
 80014c6:	f001 fa95 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 80014ca:	2001      	movs	r0, #1
 80014cc:	f010 f9da 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image4b, 0, 160 - 49, 49, 49);
 80014d0:	2331      	movs	r3, #49	; 0x31
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	2331      	movs	r3, #49	; 0x31
 80014d6:	226f      	movs	r2, #111	; 0x6f
 80014d8:	2100      	movs	r1, #0
 80014da:	48bb      	ldr	r0, [pc, #748]	; (80017c8 <main+0x494>)
 80014dc:	f00b fec2 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 80014e0:	f010 fa12 	bl	8011908 <displayNextFrame>
	HAL_Delay(50);
 80014e4:	2032      	movs	r0, #50	; 0x32
 80014e6:	f001 fa85 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 80014ea:	2001      	movs	r0, #1
 80014ec:	f010 f9ca 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image4c, 0, 160 - 49, 49, 49);
 80014f0:	2331      	movs	r3, #49	; 0x31
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	2331      	movs	r3, #49	; 0x31
 80014f6:	226f      	movs	r2, #111	; 0x6f
 80014f8:	2100      	movs	r1, #0
 80014fa:	48b4      	ldr	r0, [pc, #720]	; (80017cc <main+0x498>)
 80014fc:	f00b feb2 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 8001500:	f010 fa02 	bl	8011908 <displayNextFrame>
	HAL_Delay(50);
 8001504:	2032      	movs	r0, #50	; 0x32
 8001506:	f001 fa75 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 800150a:	2001      	movs	r0, #1
 800150c:	f010 f9ba 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image4d, 0, 160 - 49, 49, 49);
 8001510:	2331      	movs	r3, #49	; 0x31
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	2331      	movs	r3, #49	; 0x31
 8001516:	226f      	movs	r2, #111	; 0x6f
 8001518:	2100      	movs	r1, #0
 800151a:	48ad      	ldr	r0, [pc, #692]	; (80017d0 <main+0x49c>)
 800151c:	f00b fea2 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 8001520:	f010 f9f2 	bl	8011908 <displayNextFrame>
	HAL_Delay(50);
 8001524:	2032      	movs	r0, #50	; 0x32
 8001526:	f001 fa65 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 800152a:	2001      	movs	r0, #1
 800152c:	f010 f9aa 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image4e, 0, 160 - 49, 49, 49);
 8001530:	2331      	movs	r3, #49	; 0x31
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	2331      	movs	r3, #49	; 0x31
 8001536:	226f      	movs	r2, #111	; 0x6f
 8001538:	2100      	movs	r1, #0
 800153a:	48a6      	ldr	r0, [pc, #664]	; (80017d4 <main+0x4a0>)
 800153c:	f00b fe92 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 8001540:	f010 f9e2 	bl	8011908 <displayNextFrame>
	HAL_Delay(50);
 8001544:	2032      	movs	r0, #50	; 0x32
 8001546:	f001 fa55 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 800154a:	2001      	movs	r0, #1
 800154c:	f010 f99a 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image5, 0, 160 - 49, 49, 49);
 8001550:	2331      	movs	r3, #49	; 0x31
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	2331      	movs	r3, #49	; 0x31
 8001556:	226f      	movs	r2, #111	; 0x6f
 8001558:	2100      	movs	r1, #0
 800155a:	489f      	ldr	r0, [pc, #636]	; (80017d8 <main+0x4a4>)
 800155c:	f00b fe82 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 8001560:	f010 f9d2 	bl	8011908 <displayNextFrame>
	HAL_Delay(100);
 8001564:	2064      	movs	r0, #100	; 0x64
 8001566:	f001 fa45 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 800156a:	2001      	movs	r0, #1
 800156c:	f010 f98a 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image5a, 0, 160 - 49, 49, 49);
 8001570:	2331      	movs	r3, #49	; 0x31
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	2331      	movs	r3, #49	; 0x31
 8001576:	226f      	movs	r2, #111	; 0x6f
 8001578:	2100      	movs	r1, #0
 800157a:	4898      	ldr	r0, [pc, #608]	; (80017dc <main+0x4a8>)
 800157c:	f00b fe72 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 8001580:	f010 f9c2 	bl	8011908 <displayNextFrame>
	HAL_Delay(100);
 8001584:	2064      	movs	r0, #100	; 0x64
 8001586:	f001 fa35 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 800158a:	2001      	movs	r0, #1
 800158c:	f010 f97a 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image5b, 0, 160 - 49, 49, 49);
 8001590:	2331      	movs	r3, #49	; 0x31
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	2331      	movs	r3, #49	; 0x31
 8001596:	226f      	movs	r2, #111	; 0x6f
 8001598:	2100      	movs	r1, #0
 800159a:	4891      	ldr	r0, [pc, #580]	; (80017e0 <main+0x4ac>)
 800159c:	f00b fe62 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 80015a0:	f010 f9b2 	bl	8011908 <displayNextFrame>
	HAL_Delay(100);
 80015a4:	2064      	movs	r0, #100	; 0x64
 80015a6:	f001 fa25 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 80015aa:	2001      	movs	r0, #1
 80015ac:	f010 f96a 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image5c, 0, 160 - 49, 49, 49);
 80015b0:	2331      	movs	r3, #49	; 0x31
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	2331      	movs	r3, #49	; 0x31
 80015b6:	226f      	movs	r2, #111	; 0x6f
 80015b8:	2100      	movs	r1, #0
 80015ba:	488a      	ldr	r0, [pc, #552]	; (80017e4 <main+0x4b0>)
 80015bc:	f00b fe52 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 80015c0:	f010 f9a2 	bl	8011908 <displayNextFrame>
	HAL_Delay(100);
 80015c4:	2064      	movs	r0, #100	; 0x64
 80015c6:	f001 fa15 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 80015ca:	2001      	movs	r0, #1
 80015cc:	f010 f95a 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image6, 0, 160 - 49, 49, 49);
 80015d0:	2331      	movs	r3, #49	; 0x31
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	2331      	movs	r3, #49	; 0x31
 80015d6:	226f      	movs	r2, #111	; 0x6f
 80015d8:	2100      	movs	r1, #0
 80015da:	4883      	ldr	r0, [pc, #524]	; (80017e8 <main+0x4b4>)
 80015dc:	f00b fe42 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 80015e0:	f010 f992 	bl	8011908 <displayNextFrame>
	HAL_Delay(100);
 80015e4:	2064      	movs	r0, #100	; 0x64
 80015e6:	f001 fa05 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 80015ea:	2001      	movs	r0, #1
 80015ec:	f010 f94a 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image7, 0, 160 - 49, 49, 49);
 80015f0:	2331      	movs	r3, #49	; 0x31
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	2331      	movs	r3, #49	; 0x31
 80015f6:	226f      	movs	r2, #111	; 0x6f
 80015f8:	2100      	movs	r1, #0
 80015fa:	487c      	ldr	r0, [pc, #496]	; (80017ec <main+0x4b8>)
 80015fc:	f00b fe32 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 8001600:	f010 f982 	bl	8011908 <displayNextFrame>
	HAL_Delay(100);
 8001604:	2064      	movs	r0, #100	; 0x64
 8001606:	f001 f9f5 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 800160a:	2001      	movs	r0, #1
 800160c:	f010 f93a 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image9, 0, 160 - 49, 49, 49);
 8001610:	2331      	movs	r3, #49	; 0x31
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	2331      	movs	r3, #49	; 0x31
 8001616:	226f      	movs	r2, #111	; 0x6f
 8001618:	2100      	movs	r1, #0
 800161a:	4875      	ldr	r0, [pc, #468]	; (80017f0 <main+0x4bc>)
 800161c:	f00b fe22 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 8001620:	f010 f972 	bl	8011908 <displayNextFrame>
	HAL_Delay(100);
 8001624:	2064      	movs	r0, #100	; 0x64
 8001626:	f001 f9e5 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 800162a:	2001      	movs	r0, #1
 800162c:	f010 f92a 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image10, 0, 160 - 49, 49, 49);
 8001630:	2331      	movs	r3, #49	; 0x31
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	2331      	movs	r3, #49	; 0x31
 8001636:	226f      	movs	r2, #111	; 0x6f
 8001638:	2100      	movs	r1, #0
 800163a:	486e      	ldr	r0, [pc, #440]	; (80017f4 <main+0x4c0>)
 800163c:	f00b fe12 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 8001640:	f010 f962 	bl	8011908 <displayNextFrame>
	HAL_Delay(100);
 8001644:	2064      	movs	r0, #100	; 0x64
 8001646:	f001 f9d5 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 800164a:	2001      	movs	r0, #1
 800164c:	f010 f91a 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image11, 0, 160 - 49, 49, 49);
 8001650:	2331      	movs	r3, #49	; 0x31
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	2331      	movs	r3, #49	; 0x31
 8001656:	226f      	movs	r2, #111	; 0x6f
 8001658:	2100      	movs	r1, #0
 800165a:	4867      	ldr	r0, [pc, #412]	; (80017f8 <main+0x4c4>)
 800165c:	f00b fe02 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 8001660:	f010 f952 	bl	8011908 <displayNextFrame>
	HAL_Delay(100);
 8001664:	2064      	movs	r0, #100	; 0x64
 8001666:	f001 f9c5 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 800166a:	2001      	movs	r0, #1
 800166c:	f010 f90a 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image12, 0, 160 - 49, 49, 49);
 8001670:	2331      	movs	r3, #49	; 0x31
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	2331      	movs	r3, #49	; 0x31
 8001676:	226f      	movs	r2, #111	; 0x6f
 8001678:	2100      	movs	r1, #0
 800167a:	4860      	ldr	r0, [pc, #384]	; (80017fc <main+0x4c8>)
 800167c:	f00b fdf2 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 8001680:	f010 f942 	bl	8011908 <displayNextFrame>
	HAL_Delay(100);
 8001684:	2064      	movs	r0, #100	; 0x64
 8001686:	f001 f9b5 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 800168a:	2001      	movs	r0, #1
 800168c:	f010 f8fa 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image13, 0, 160 - 49, 49, 49);
 8001690:	2331      	movs	r3, #49	; 0x31
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	2331      	movs	r3, #49	; 0x31
 8001696:	226f      	movs	r2, #111	; 0x6f
 8001698:	2100      	movs	r1, #0
 800169a:	4859      	ldr	r0, [pc, #356]	; (8001800 <main+0x4cc>)
 800169c:	f00b fde2 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 80016a0:	f010 f932 	bl	8011908 <displayNextFrame>
	HAL_Delay(100);
 80016a4:	2064      	movs	r0, #100	; 0x64
 80016a6:	f001 f9a5 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 80016aa:	2001      	movs	r0, #1
 80016ac:	f010 f8ea 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image14, 0, 160 - 49, 49, 49);
 80016b0:	2331      	movs	r3, #49	; 0x31
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	2331      	movs	r3, #49	; 0x31
 80016b6:	226f      	movs	r2, #111	; 0x6f
 80016b8:	2100      	movs	r1, #0
 80016ba:	4852      	ldr	r0, [pc, #328]	; (8001804 <main+0x4d0>)
 80016bc:	f00b fdd2 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 80016c0:	f010 f922 	bl	8011908 <displayNextFrame>
	HAL_Delay(100);
 80016c4:	2064      	movs	r0, #100	; 0x64
 80016c6:	f001 f995 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 80016ca:	2001      	movs	r0, #1
 80016cc:	f010 f8da 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image15, 0, 160 - 49, 49, 49);
 80016d0:	2331      	movs	r3, #49	; 0x31
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	2331      	movs	r3, #49	; 0x31
 80016d6:	226f      	movs	r2, #111	; 0x6f
 80016d8:	2100      	movs	r1, #0
 80016da:	484b      	ldr	r0, [pc, #300]	; (8001808 <main+0x4d4>)
 80016dc:	f00b fdc2 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 80016e0:	f010 f912 	bl	8011908 <displayNextFrame>
	HAL_Delay(100);
 80016e4:	2064      	movs	r0, #100	; 0x64
 80016e6:	f001 f985 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 80016ea:	2001      	movs	r0, #1
 80016ec:	f010 f8ca 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image16, 0, 160 - 49, 49, 49);
 80016f0:	2331      	movs	r3, #49	; 0x31
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2331      	movs	r3, #49	; 0x31
 80016f6:	226f      	movs	r2, #111	; 0x6f
 80016f8:	2100      	movs	r1, #0
 80016fa:	4844      	ldr	r0, [pc, #272]	; (800180c <main+0x4d8>)
 80016fc:	f00b fdb2 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 8001700:	f010 f902 	bl	8011908 <displayNextFrame>
	HAL_Delay(100);
 8001704:	2064      	movs	r0, #100	; 0x64
 8001706:	f001 f975 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 800170a:	2001      	movs	r0, #1
 800170c:	f010 f8ba 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image17, 0, 160 - 49, 49, 49);
 8001710:	2331      	movs	r3, #49	; 0x31
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	2331      	movs	r3, #49	; 0x31
 8001716:	226f      	movs	r2, #111	; 0x6f
 8001718:	2100      	movs	r1, #0
 800171a:	483d      	ldr	r0, [pc, #244]	; (8001810 <main+0x4dc>)
 800171c:	f00b fda2 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 8001720:	f010 f8f2 	bl	8011908 <displayNextFrame>
	HAL_Delay(100);
 8001724:	2064      	movs	r0, #100	; 0x64
 8001726:	f001 f965 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 800172a:	2001      	movs	r0, #1
 800172c:	f010 f8aa 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image18, 0, 160 - 49, 49, 49);
 8001730:	2331      	movs	r3, #49	; 0x31
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	2331      	movs	r3, #49	; 0x31
 8001736:	226f      	movs	r2, #111	; 0x6f
 8001738:	2100      	movs	r1, #0
 800173a:	4836      	ldr	r0, [pc, #216]	; (8001814 <main+0x4e0>)
 800173c:	f00b fd92 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 8001740:	f010 f8e2 	bl	8011908 <displayNextFrame>
	HAL_Delay(100);
 8001744:	2064      	movs	r0, #100	; 0x64
 8001746:	f001 f955 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 800174a:	2001      	movs	r0, #1
 800174c:	f010 f89a 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image18a, 0, 160 - 49, 49, 49);
 8001750:	2331      	movs	r3, #49	; 0x31
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	2331      	movs	r3, #49	; 0x31
 8001756:	226f      	movs	r2, #111	; 0x6f
 8001758:	2100      	movs	r1, #0
 800175a:	482f      	ldr	r0, [pc, #188]	; (8001818 <main+0x4e4>)
 800175c:	f00b fd82 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 8001760:	f010 f8d2 	bl	8011908 <displayNextFrame>
	HAL_Delay(100);
 8001764:	2064      	movs	r0, #100	; 0x64
 8001766:	f001 f945 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 800176a:	2001      	movs	r0, #1
 800176c:	f010 f88a 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image18b, 0, 160 - 49, 49, 49);
 8001770:	2331      	movs	r3, #49	; 0x31
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	2331      	movs	r3, #49	; 0x31
 8001776:	226f      	movs	r2, #111	; 0x6f
 8001778:	2100      	movs	r1, #0
 800177a:	4828      	ldr	r0, [pc, #160]	; (800181c <main+0x4e8>)
 800177c:	f00b fd72 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 8001780:	f010 f8c2 	bl	8011908 <displayNextFrame>
	HAL_Delay(100);
 8001784:	2064      	movs	r0, #100	; 0x64
 8001786:	f001 f935 	bl	80029f4 <HAL_Delay>




	createEmptyFrame(true);
 800178a:	2001      	movs	r0, #1
 800178c:	f010 f87a 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image20, 0, 160 - 49, 49, 49);
 8001790:	2331      	movs	r3, #49	; 0x31
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	2331      	movs	r3, #49	; 0x31
 8001796:	226f      	movs	r2, #111	; 0x6f
 8001798:	2100      	movs	r1, #0
 800179a:	4821      	ldr	r0, [pc, #132]	; (8001820 <main+0x4ec>)
 800179c:	f00b fd62 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 80017a0:	f010 f8b2 	bl	8011908 <displayNextFrame>
	HAL_Delay(100);
 80017a4:	2064      	movs	r0, #100	; 0x64
 80017a6:	f001 f925 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 80017aa:	2001      	movs	r0, #1
 80017ac:	f010 f86a 	bl	8011884 <createEmptyFrame>
 80017b0:	e038      	b.n	8001824 <main+0x4f0>
 80017b2:	bf00      	nop
 80017b4:	0801f17c 	.word	0x0801f17c
 80017b8:	08020440 	.word	0x08020440
 80017bc:	08021704 	.word	0x08021704
 80017c0:	080229c8 	.word	0x080229c8
 80017c4:	08023c8c 	.word	0x08023c8c
 80017c8:	08024f50 	.word	0x08024f50
 80017cc:	08026214 	.word	0x08026214
 80017d0:	080274d8 	.word	0x080274d8
 80017d4:	0802879c 	.word	0x0802879c
 80017d8:	08029a60 	.word	0x08029a60
 80017dc:	0802ad24 	.word	0x0802ad24
 80017e0:	0802bfe8 	.word	0x0802bfe8
 80017e4:	0802d2ac 	.word	0x0802d2ac
 80017e8:	0802e570 	.word	0x0802e570
 80017ec:	0802f834 	.word	0x0802f834
 80017f0:	08030af8 	.word	0x08030af8
 80017f4:	08031dbc 	.word	0x08031dbc
 80017f8:	08033080 	.word	0x08033080
 80017fc:	08034344 	.word	0x08034344
 8001800:	08035608 	.word	0x08035608
 8001804:	080368cc 	.word	0x080368cc
 8001808:	08037b90 	.word	0x08037b90
 800180c:	08038e54 	.word	0x08038e54
 8001810:	0803a118 	.word	0x0803a118
 8001814:	0803b3dc 	.word	0x0803b3dc
 8001818:	0803c6a0 	.word	0x0803c6a0
 800181c:	0803d964 	.word	0x0803d964
 8001820:	0803ec28 	.word	0x0803ec28
	Paint_DrawImage(gImage_Image21, 3, 160 - 49, 49, 49);
 8001824:	2331      	movs	r3, #49	; 0x31
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	2331      	movs	r3, #49	; 0x31
 800182a:	226f      	movs	r2, #111	; 0x6f
 800182c:	2103      	movs	r1, #3
 800182e:	48e2      	ldr	r0, [pc, #904]	; (8001bb8 <main+0x884>)
 8001830:	f00b fd18 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 8001834:	f010 f868 	bl	8011908 <displayNextFrame>
	HAL_Delay(100);
 8001838:	2064      	movs	r0, #100	; 0x64
 800183a:	f001 f8db 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 800183e:	2001      	movs	r0, #1
 8001840:	f010 f820 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image22, 6, 160 - 49, 49, 49);
 8001844:	2331      	movs	r3, #49	; 0x31
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	2331      	movs	r3, #49	; 0x31
 800184a:	226f      	movs	r2, #111	; 0x6f
 800184c:	2106      	movs	r1, #6
 800184e:	48db      	ldr	r0, [pc, #876]	; (8001bbc <main+0x888>)
 8001850:	f00b fd08 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 8001854:	f010 f858 	bl	8011908 <displayNextFrame>
	HAL_Delay(100);
 8001858:	2064      	movs	r0, #100	; 0x64
 800185a:	f001 f8cb 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 800185e:	2001      	movs	r0, #1
 8001860:	f010 f810 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image23, 9, 160 - 49, 49, 49);
 8001864:	2331      	movs	r3, #49	; 0x31
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	2331      	movs	r3, #49	; 0x31
 800186a:	226f      	movs	r2, #111	; 0x6f
 800186c:	2109      	movs	r1, #9
 800186e:	48d4      	ldr	r0, [pc, #848]	; (8001bc0 <main+0x88c>)
 8001870:	f00b fcf8 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 8001874:	f010 f848 	bl	8011908 <displayNextFrame>
	HAL_Delay(100);
 8001878:	2064      	movs	r0, #100	; 0x64
 800187a:	f001 f8bb 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 800187e:	2001      	movs	r0, #1
 8001880:	f010 f800 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image24, 12, 160 - 49, 49, 49);
 8001884:	2331      	movs	r3, #49	; 0x31
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	2331      	movs	r3, #49	; 0x31
 800188a:	226f      	movs	r2, #111	; 0x6f
 800188c:	210c      	movs	r1, #12
 800188e:	48cd      	ldr	r0, [pc, #820]	; (8001bc4 <main+0x890>)
 8001890:	f00b fce8 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 8001894:	f010 f838 	bl	8011908 <displayNextFrame>
	HAL_Delay(100);
 8001898:	2064      	movs	r0, #100	; 0x64
 800189a:	f001 f8ab 	bl	80029f4 <HAL_Delay>
//	createEmptyFrame(true);
//	Paint_DrawImage(gImage_Image25, 0, 160 - 49, 49, 49);
//	displayNextFrame();
//	HAL_Delay(100);

	createEmptyFrame(true);
 800189e:	2001      	movs	r0, #1
 80018a0:	f00f fff0 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image26, 15, 160 - 49, 49, 49);
 80018a4:	2331      	movs	r3, #49	; 0x31
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	2331      	movs	r3, #49	; 0x31
 80018aa:	226f      	movs	r2, #111	; 0x6f
 80018ac:	210f      	movs	r1, #15
 80018ae:	48c6      	ldr	r0, [pc, #792]	; (8001bc8 <main+0x894>)
 80018b0:	f00b fcd8 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 80018b4:	f010 f828 	bl	8011908 <displayNextFrame>
	HAL_Delay(100);
 80018b8:	2064      	movs	r0, #100	; 0x64
 80018ba:	f001 f89b 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 80018be:	2001      	movs	r0, #1
 80018c0:	f00f ffe0 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image27, 18, 160 - 49, 49, 49);
 80018c4:	2331      	movs	r3, #49	; 0x31
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	2331      	movs	r3, #49	; 0x31
 80018ca:	226f      	movs	r2, #111	; 0x6f
 80018cc:	2112      	movs	r1, #18
 80018ce:	48bf      	ldr	r0, [pc, #764]	; (8001bcc <main+0x898>)
 80018d0:	f00b fcc8 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 80018d4:	f010 f818 	bl	8011908 <displayNextFrame>
	HAL_Delay(100);
 80018d8:	2064      	movs	r0, #100	; 0x64
 80018da:	f001 f88b 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 80018de:	2001      	movs	r0, #1
 80018e0:	f00f ffd0 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image28, 21, 160 - 49, 49, 49);
 80018e4:	2331      	movs	r3, #49	; 0x31
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	2331      	movs	r3, #49	; 0x31
 80018ea:	226f      	movs	r2, #111	; 0x6f
 80018ec:	2115      	movs	r1, #21
 80018ee:	48b8      	ldr	r0, [pc, #736]	; (8001bd0 <main+0x89c>)
 80018f0:	f00b fcb8 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 80018f4:	f010 f808 	bl	8011908 <displayNextFrame>
	HAL_Delay(100);
 80018f8:	2064      	movs	r0, #100	; 0x64
 80018fa:	f001 f87b 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 80018fe:	2001      	movs	r0, #1
 8001900:	f00f ffc0 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image29, 24, 160 - 49, 49, 49);
 8001904:	2331      	movs	r3, #49	; 0x31
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	2331      	movs	r3, #49	; 0x31
 800190a:	226f      	movs	r2, #111	; 0x6f
 800190c:	2118      	movs	r1, #24
 800190e:	48b1      	ldr	r0, [pc, #708]	; (8001bd4 <main+0x8a0>)
 8001910:	f00b fca8 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 8001914:	f00f fff8 	bl	8011908 <displayNextFrame>
	HAL_Delay(100);
 8001918:	2064      	movs	r0, #100	; 0x64
 800191a:	f001 f86b 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 800191e:	2001      	movs	r0, #1
 8001920:	f00f ffb0 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image30, 27, 160 - 49, 49, 49);
 8001924:	2331      	movs	r3, #49	; 0x31
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	2331      	movs	r3, #49	; 0x31
 800192a:	226f      	movs	r2, #111	; 0x6f
 800192c:	211b      	movs	r1, #27
 800192e:	48aa      	ldr	r0, [pc, #680]	; (8001bd8 <main+0x8a4>)
 8001930:	f00b fc98 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 8001934:	f00f ffe8 	bl	8011908 <displayNextFrame>
	HAL_Delay(100);
 8001938:	2064      	movs	r0, #100	; 0x64
 800193a:	f001 f85b 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 800193e:	2001      	movs	r0, #1
 8001940:	f00f ffa0 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image31, 30, 160 - 49, 49, 49);
 8001944:	2331      	movs	r3, #49	; 0x31
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	2331      	movs	r3, #49	; 0x31
 800194a:	226f      	movs	r2, #111	; 0x6f
 800194c:	211e      	movs	r1, #30
 800194e:	48a3      	ldr	r0, [pc, #652]	; (8001bdc <main+0x8a8>)
 8001950:	f00b fc88 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 8001954:	f00f ffd8 	bl	8011908 <displayNextFrame>
	HAL_Delay(100);
 8001958:	2064      	movs	r0, #100	; 0x64
 800195a:	f001 f84b 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 800195e:	2001      	movs	r0, #1
 8001960:	f00f ff90 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image32, 33, 160 - 49, 49, 49);
 8001964:	2331      	movs	r3, #49	; 0x31
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	2331      	movs	r3, #49	; 0x31
 800196a:	226f      	movs	r2, #111	; 0x6f
 800196c:	2121      	movs	r1, #33	; 0x21
 800196e:	489c      	ldr	r0, [pc, #624]	; (8001be0 <main+0x8ac>)
 8001970:	f00b fc78 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 8001974:	f00f ffc8 	bl	8011908 <displayNextFrame>
	HAL_Delay(100);
 8001978:	2064      	movs	r0, #100	; 0x64
 800197a:	f001 f83b 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 800197e:	2001      	movs	r0, #1
 8001980:	f00f ff80 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image33, 36, 160 - 49, 49, 49);
 8001984:	2331      	movs	r3, #49	; 0x31
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	2331      	movs	r3, #49	; 0x31
 800198a:	226f      	movs	r2, #111	; 0x6f
 800198c:	2124      	movs	r1, #36	; 0x24
 800198e:	4895      	ldr	r0, [pc, #596]	; (8001be4 <main+0x8b0>)
 8001990:	f00b fc68 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 8001994:	f00f ffb8 	bl	8011908 <displayNextFrame>
	HAL_Delay(100);
 8001998:	2064      	movs	r0, #100	; 0x64
 800199a:	f001 f82b 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 800199e:	2001      	movs	r0, #1
 80019a0:	f00f ff70 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image34, 39, 160 - 49, 49, 49);
 80019a4:	2331      	movs	r3, #49	; 0x31
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	2331      	movs	r3, #49	; 0x31
 80019aa:	226f      	movs	r2, #111	; 0x6f
 80019ac:	2127      	movs	r1, #39	; 0x27
 80019ae:	488e      	ldr	r0, [pc, #568]	; (8001be8 <main+0x8b4>)
 80019b0:	f00b fc58 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 80019b4:	f00f ffa8 	bl	8011908 <displayNextFrame>
	HAL_Delay(100);
 80019b8:	2064      	movs	r0, #100	; 0x64
 80019ba:	f001 f81b 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 80019be:	2001      	movs	r0, #1
 80019c0:	f00f ff60 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image35, 42, 160 - 49 - 5, 49, 49);
 80019c4:	2331      	movs	r3, #49	; 0x31
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	2331      	movs	r3, #49	; 0x31
 80019ca:	226a      	movs	r2, #106	; 0x6a
 80019cc:	212a      	movs	r1, #42	; 0x2a
 80019ce:	4887      	ldr	r0, [pc, #540]	; (8001bec <main+0x8b8>)
 80019d0:	f00b fc48 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 80019d4:	f00f ff98 	bl	8011908 <displayNextFrame>
	HAL_Delay(100);
 80019d8:	2064      	movs	r0, #100	; 0x64
 80019da:	f001 f80b 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 80019de:	2001      	movs	r0, #1
 80019e0:	f00f ff50 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image36, 45, 160 - 49 - 10, 49, 49);
 80019e4:	2331      	movs	r3, #49	; 0x31
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	2331      	movs	r3, #49	; 0x31
 80019ea:	2265      	movs	r2, #101	; 0x65
 80019ec:	212d      	movs	r1, #45	; 0x2d
 80019ee:	4880      	ldr	r0, [pc, #512]	; (8001bf0 <main+0x8bc>)
 80019f0:	f00b fc38 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 80019f4:	f00f ff88 	bl	8011908 <displayNextFrame>
	HAL_Delay(100);
 80019f8:	2064      	movs	r0, #100	; 0x64
 80019fa:	f000 fffb 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 80019fe:	2001      	movs	r0, #1
 8001a00:	f00f ff40 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image37, 45, 160 - 49 - 15, 49, 49);
 8001a04:	2331      	movs	r3, #49	; 0x31
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	2331      	movs	r3, #49	; 0x31
 8001a0a:	2260      	movs	r2, #96	; 0x60
 8001a0c:	212d      	movs	r1, #45	; 0x2d
 8001a0e:	4879      	ldr	r0, [pc, #484]	; (8001bf4 <main+0x8c0>)
 8001a10:	f00b fc28 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 8001a14:	f00f ff78 	bl	8011908 <displayNextFrame>
	HAL_Delay(100);
 8001a18:	2064      	movs	r0, #100	; 0x64
 8001a1a:	f000 ffeb 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 8001a1e:	2001      	movs	r0, #1
 8001a20:	f00f ff30 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image38, 35 + 15, 160 - 49 - 20, 49, 49);
 8001a24:	2331      	movs	r3, #49	; 0x31
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	2331      	movs	r3, #49	; 0x31
 8001a2a:	225b      	movs	r2, #91	; 0x5b
 8001a2c:	2132      	movs	r1, #50	; 0x32
 8001a2e:	4872      	ldr	r0, [pc, #456]	; (8001bf8 <main+0x8c4>)
 8001a30:	f00b fc18 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 8001a34:	f00f ff68 	bl	8011908 <displayNextFrame>
	HAL_Delay(200);
 8001a38:	20c8      	movs	r0, #200	; 0xc8
 8001a3a:	f000 ffdb 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 8001a3e:	2001      	movs	r0, #1
 8001a40:	f00f ff20 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image39, 40 + 15, 160 - 49 - 15, 49, 49);
 8001a44:	2331      	movs	r3, #49	; 0x31
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	2331      	movs	r3, #49	; 0x31
 8001a4a:	2260      	movs	r2, #96	; 0x60
 8001a4c:	2137      	movs	r1, #55	; 0x37
 8001a4e:	486b      	ldr	r0, [pc, #428]	; (8001bfc <main+0x8c8>)
 8001a50:	f00b fc08 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 8001a54:	f00f ff58 	bl	8011908 <displayNextFrame>
	HAL_Delay(100);
 8001a58:	2064      	movs	r0, #100	; 0x64
 8001a5a:	f000 ffcb 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 8001a5e:	2001      	movs	r0, #1
 8001a60:	f00f ff10 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image40, 45 + 15, 160 - 49 - 10, 49, 49);
 8001a64:	2331      	movs	r3, #49	; 0x31
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	2331      	movs	r3, #49	; 0x31
 8001a6a:	2265      	movs	r2, #101	; 0x65
 8001a6c:	213c      	movs	r1, #60	; 0x3c
 8001a6e:	4864      	ldr	r0, [pc, #400]	; (8001c00 <main+0x8cc>)
 8001a70:	f00b fbf8 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 8001a74:	f00f ff48 	bl	8011908 <displayNextFrame>
	HAL_Delay(100);
 8001a78:	2064      	movs	r0, #100	; 0x64
 8001a7a:	f000 ffbb 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 8001a7e:	2001      	movs	r0, #1
 8001a80:	f00f ff00 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image41, 50 + 15, 160 - 49 - 5, 49, 49);
 8001a84:	2331      	movs	r3, #49	; 0x31
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	2331      	movs	r3, #49	; 0x31
 8001a8a:	226a      	movs	r2, #106	; 0x6a
 8001a8c:	2141      	movs	r1, #65	; 0x41
 8001a8e:	485d      	ldr	r0, [pc, #372]	; (8001c04 <main+0x8d0>)
 8001a90:	f00b fbe8 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 8001a94:	f00f ff38 	bl	8011908 <displayNextFrame>
	HAL_Delay(100);
 8001a98:	2064      	movs	r0, #100	; 0x64
 8001a9a:	f000 ffab 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	f00f fef0 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image42, 55 + 15, 160 - 49, 49, 49);
 8001aa4:	2331      	movs	r3, #49	; 0x31
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	2331      	movs	r3, #49	; 0x31
 8001aaa:	226f      	movs	r2, #111	; 0x6f
 8001aac:	2146      	movs	r1, #70	; 0x46
 8001aae:	4856      	ldr	r0, [pc, #344]	; (8001c08 <main+0x8d4>)
 8001ab0:	f00b fbd8 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 8001ab4:	f00f ff28 	bl	8011908 <displayNextFrame>
	HAL_Delay(200);
 8001ab8:	20c8      	movs	r0, #200	; 0xc8
 8001aba:	f000 ff9b 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 8001abe:	2001      	movs	r0, #1
 8001ac0:	f00f fee0 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image43, 55 + 15, 160 - 49, 49, 49);
 8001ac4:	2331      	movs	r3, #49	; 0x31
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	2331      	movs	r3, #49	; 0x31
 8001aca:	226f      	movs	r2, #111	; 0x6f
 8001acc:	2146      	movs	r1, #70	; 0x46
 8001ace:	484f      	ldr	r0, [pc, #316]	; (8001c0c <main+0x8d8>)
 8001ad0:	f00b fbc8 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 8001ad4:	f00f ff18 	bl	8011908 <displayNextFrame>
	HAL_Delay(200);
 8001ad8:	20c8      	movs	r0, #200	; 0xc8
 8001ada:	f000 ff8b 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 8001ade:	2001      	movs	r0, #1
 8001ae0:	f00f fed0 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image44, 55 + 15, 160 - 49, 49, 49);
 8001ae4:	2331      	movs	r3, #49	; 0x31
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	2331      	movs	r3, #49	; 0x31
 8001aea:	226f      	movs	r2, #111	; 0x6f
 8001aec:	2146      	movs	r1, #70	; 0x46
 8001aee:	4848      	ldr	r0, [pc, #288]	; (8001c10 <main+0x8dc>)
 8001af0:	f00b fbb8 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 8001af4:	f00f ff08 	bl	8011908 <displayNextFrame>
	HAL_Delay(200);
 8001af8:	20c8      	movs	r0, #200	; 0xc8
 8001afa:	f000 ff7b 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 8001afe:	2001      	movs	r0, #1
 8001b00:	f00f fec0 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image45, 55 + 15, 160 - 49, 49, 49);
 8001b04:	2331      	movs	r3, #49	; 0x31
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	2331      	movs	r3, #49	; 0x31
 8001b0a:	226f      	movs	r2, #111	; 0x6f
 8001b0c:	2146      	movs	r1, #70	; 0x46
 8001b0e:	4841      	ldr	r0, [pc, #260]	; (8001c14 <main+0x8e0>)
 8001b10:	f00b fba8 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 8001b14:	f00f fef8 	bl	8011908 <displayNextFrame>
	HAL_Delay(200);
 8001b18:	20c8      	movs	r0, #200	; 0xc8
 8001b1a:	f000 ff6b 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 8001b1e:	2001      	movs	r0, #1
 8001b20:	f00f feb0 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image46, 55 + 15, 160 - 49, 49, 49);
 8001b24:	2331      	movs	r3, #49	; 0x31
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	2331      	movs	r3, #49	; 0x31
 8001b2a:	226f      	movs	r2, #111	; 0x6f
 8001b2c:	2146      	movs	r1, #70	; 0x46
 8001b2e:	483a      	ldr	r0, [pc, #232]	; (8001c18 <main+0x8e4>)
 8001b30:	f00b fb98 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 8001b34:	f00f fee8 	bl	8011908 <displayNextFrame>
	HAL_Delay(200);
 8001b38:	20c8      	movs	r0, #200	; 0xc8
 8001b3a:	f000 ff5b 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 8001b3e:	2001      	movs	r0, #1
 8001b40:	f00f fea0 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image47, 55 + 15, 160 - 49, 49, 49);
 8001b44:	2331      	movs	r3, #49	; 0x31
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	2331      	movs	r3, #49	; 0x31
 8001b4a:	226f      	movs	r2, #111	; 0x6f
 8001b4c:	2146      	movs	r1, #70	; 0x46
 8001b4e:	4833      	ldr	r0, [pc, #204]	; (8001c1c <main+0x8e8>)
 8001b50:	f00b fb88 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 8001b54:	f00f fed8 	bl	8011908 <displayNextFrame>
	HAL_Delay(200);
 8001b58:	20c8      	movs	r0, #200	; 0xc8
 8001b5a:	f000 ff4b 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 8001b5e:	2001      	movs	r0, #1
 8001b60:	f00f fe90 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image48, 55 + 15, 160 - 49, 49, 49);
 8001b64:	2331      	movs	r3, #49	; 0x31
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	2331      	movs	r3, #49	; 0x31
 8001b6a:	226f      	movs	r2, #111	; 0x6f
 8001b6c:	2146      	movs	r1, #70	; 0x46
 8001b6e:	482c      	ldr	r0, [pc, #176]	; (8001c20 <main+0x8ec>)
 8001b70:	f00b fb78 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 8001b74:	f00f fec8 	bl	8011908 <displayNextFrame>
	HAL_Delay(200);
 8001b78:	20c8      	movs	r0, #200	; 0xc8
 8001b7a:	f000 ff3b 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 8001b7e:	2001      	movs	r0, #1
 8001b80:	f00f fe80 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image49, 55 + 15, 160 - 49, 49, 49);
 8001b84:	2331      	movs	r3, #49	; 0x31
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	2331      	movs	r3, #49	; 0x31
 8001b8a:	226f      	movs	r2, #111	; 0x6f
 8001b8c:	2146      	movs	r1, #70	; 0x46
 8001b8e:	4825      	ldr	r0, [pc, #148]	; (8001c24 <main+0x8f0>)
 8001b90:	f00b fb68 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 8001b94:	f00f feb8 	bl	8011908 <displayNextFrame>
	HAL_Delay(200);
 8001b98:	20c8      	movs	r0, #200	; 0xc8
 8001b9a:	f000 ff2b 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 8001b9e:	2001      	movs	r0, #1
 8001ba0:	f00f fe70 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image50, 55 + 15, 160 - 49, 49, 49);
 8001ba4:	2331      	movs	r3, #49	; 0x31
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	2331      	movs	r3, #49	; 0x31
 8001baa:	226f      	movs	r2, #111	; 0x6f
 8001bac:	2146      	movs	r1, #70	; 0x46
 8001bae:	481e      	ldr	r0, [pc, #120]	; (8001c28 <main+0x8f4>)
 8001bb0:	f00b fb58 	bl	800d264 <Paint_DrawImage>
 8001bb4:	e03a      	b.n	8001c2c <main+0x8f8>
 8001bb6:	bf00      	nop
 8001bb8:	0803feec 	.word	0x0803feec
 8001bbc:	080411b0 	.word	0x080411b0
 8001bc0:	08042474 	.word	0x08042474
 8001bc4:	08043738 	.word	0x08043738
 8001bc8:	080449fc 	.word	0x080449fc
 8001bcc:	08045cc0 	.word	0x08045cc0
 8001bd0:	08046f84 	.word	0x08046f84
 8001bd4:	08048248 	.word	0x08048248
 8001bd8:	0804950c 	.word	0x0804950c
 8001bdc:	0804a7d0 	.word	0x0804a7d0
 8001be0:	0804ba94 	.word	0x0804ba94
 8001be4:	0804cd58 	.word	0x0804cd58
 8001be8:	0804e01c 	.word	0x0804e01c
 8001bec:	0804f2e0 	.word	0x0804f2e0
 8001bf0:	080505a4 	.word	0x080505a4
 8001bf4:	08051868 	.word	0x08051868
 8001bf8:	08052b2c 	.word	0x08052b2c
 8001bfc:	08053df0 	.word	0x08053df0
 8001c00:	080550b4 	.word	0x080550b4
 8001c04:	08056378 	.word	0x08056378
 8001c08:	0805763c 	.word	0x0805763c
 8001c0c:	08058900 	.word	0x08058900
 8001c10:	08059bc4 	.word	0x08059bc4
 8001c14:	0805ae88 	.word	0x0805ae88
 8001c18:	0805c14c 	.word	0x0805c14c
 8001c1c:	0805d410 	.word	0x0805d410
 8001c20:	0805e6d4 	.word	0x0805e6d4
 8001c24:	0805f998 	.word	0x0805f998
 8001c28:	08060c5c 	.word	0x08060c5c
	displayNextFrame();
 8001c2c:	f00f fe6c 	bl	8011908 <displayNextFrame>
	HAL_Delay(200);
 8001c30:	20c8      	movs	r0, #200	; 0xc8
 8001c32:	f000 fedf 	bl	80029f4 <HAL_Delay>

	createEmptyFrame(true);
 8001c36:	2001      	movs	r0, #1
 8001c38:	f00f fe24 	bl	8011884 <createEmptyFrame>
	Paint_DrawImage(gImage_Image51, 55 + 15, 160 - 49, 49, 49);
 8001c3c:	2331      	movs	r3, #49	; 0x31
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	2331      	movs	r3, #49	; 0x31
 8001c42:	226f      	movs	r2, #111	; 0x6f
 8001c44:	2146      	movs	r1, #70	; 0x46
 8001c46:	4805      	ldr	r0, [pc, #20]	; (8001c5c <main+0x928>)
 8001c48:	f00b fb0c 	bl	800d264 <Paint_DrawImage>
	displayNextFrame();
 8001c4c:	f00f fe5c 	bl	8011908 <displayNextFrame>
	HAL_Delay(200);
 8001c50:	20c8      	movs	r0, #200	; 0xc8
 8001c52:	f000 fecf 	bl	80029f4 <HAL_Delay>
	for (int i = 0 ; i < 160 - 49 ; i++)
 8001c56:	f7ff bbd3 	b.w	8001400 <main+0xcc>
 8001c5a:	bf00      	nop
 8001c5c:	08061f20 	.word	0x08061f20

08001c60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b09c      	sub	sp, #112	; 0x70
 8001c64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c6a:	224c      	movs	r2, #76	; 0x4c
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f010 f9f4 	bl	801205c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c74:	1d3b      	adds	r3, r7, #4
 8001c76:	2220      	movs	r2, #32
 8001c78:	2100      	movs	r1, #0
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f010 f9ee 	bl	801205c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001c80:	2004      	movs	r0, #4
 8001c82:	f005 fa31 	bl	80070e8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c86:	2300      	movs	r3, #0
 8001c88:	603b      	str	r3, [r7, #0]
 8001c8a:	4b36      	ldr	r3, [pc, #216]	; (8001d64 <SystemClock_Config+0x104>)
 8001c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8e:	4a35      	ldr	r2, [pc, #212]	; (8001d64 <SystemClock_Config+0x104>)
 8001c90:	f023 0301 	bic.w	r3, r3, #1
 8001c94:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001c96:	4b33      	ldr	r3, [pc, #204]	; (8001d64 <SystemClock_Config+0x104>)
 8001c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	603b      	str	r3, [r7, #0]
 8001ca0:	4b31      	ldr	r3, [pc, #196]	; (8001d68 <SystemClock_Config+0x108>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ca8:	4a2f      	ldr	r2, [pc, #188]	; (8001d68 <SystemClock_Config+0x108>)
 8001caa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cae:	6193      	str	r3, [r2, #24]
 8001cb0:	4b2d      	ldr	r3, [pc, #180]	; (8001d68 <SystemClock_Config+0x108>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cb8:	603b      	str	r3, [r7, #0]
 8001cba:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001cbc:	bf00      	nop
 8001cbe:	4b2a      	ldr	r3, [pc, #168]	; (8001d68 <SystemClock_Config+0x108>)
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cca:	d1f8      	bne.n	8001cbe <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001ccc:	4b27      	ldr	r3, [pc, #156]	; (8001d6c <SystemClock_Config+0x10c>)
 8001cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd0:	f023 0303 	bic.w	r3, r3, #3
 8001cd4:	4a25      	ldr	r2, [pc, #148]	; (8001d6c <SystemClock_Config+0x10c>)
 8001cd6:	f043 0302 	orr.w	r3, r3, #2
 8001cda:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001ce0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cea:	2302      	movs	r3, #2
 8001cec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8001cf2:	2312      	movs	r3, #18
 8001cf4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001d02:	230c      	movs	r3, #12
 8001d04:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8001d06:	2302      	movs	r3, #2
 8001d08:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8001d0a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d0e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d14:	4618      	mov	r0, r3
 8001d16:	f005 fa51 	bl	80071bc <HAL_RCC_OscConfig>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001d20:	f000 f8bb 	bl	8001e9a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d24:	233f      	movs	r3, #63	; 0x3f
 8001d26:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001d30:	2300      	movs	r3, #0
 8001d32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001d38:	2340      	movs	r3, #64	; 0x40
 8001d3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001d3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d40:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001d42:	2300      	movs	r3, #0
 8001d44:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	2101      	movs	r1, #1
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f005 fe46 	bl	80079dc <HAL_RCC_ClockConfig>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8001d56:	f000 f8a0 	bl	8001e9a <Error_Handler>
  }
}
 8001d5a:	bf00      	nop
 8001d5c:	3770      	adds	r7, #112	; 0x70
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	58000400 	.word	0x58000400
 8001d68:	58024800 	.word	0x58024800
 8001d6c:	58024400 	.word	0x58024400

08001d70 <CPU_CACHE_Enable>:
 * @brief  CPU L1-Cache enable.
 * @param  None
 * @retval None
 */
static void CPU_CACHE_Enable(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001d76:	4b34      	ldr	r3, [pc, #208]	; (8001e48 <CPU_CACHE_Enable+0xd8>)
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d11b      	bne.n	8001dba <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001d82:	f3bf 8f4f 	dsb	sy
}
 8001d86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d88:	f3bf 8f6f 	isb	sy
}
 8001d8c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001d8e:	4b2e      	ldr	r3, [pc, #184]	; (8001e48 <CPU_CACHE_Enable+0xd8>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001d96:	f3bf 8f4f 	dsb	sy
}
 8001d9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d9c:	f3bf 8f6f 	isb	sy
}
 8001da0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001da2:	4b29      	ldr	r3, [pc, #164]	; (8001e48 <CPU_CACHE_Enable+0xd8>)
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	4a28      	ldr	r2, [pc, #160]	; (8001e48 <CPU_CACHE_Enable+0xd8>)
 8001da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001dae:	f3bf 8f4f 	dsb	sy
}
 8001db2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001db4:	f3bf 8f6f 	isb	sy
}
 8001db8:	e000      	b.n	8001dbc <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001dba:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001dbc:	4b22      	ldr	r3, [pc, #136]	; (8001e48 <CPU_CACHE_Enable+0xd8>)
 8001dbe:	695b      	ldr	r3, [r3, #20]
 8001dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d138      	bne.n	8001e3a <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001dc8:	4b1f      	ldr	r3, [pc, #124]	; (8001e48 <CPU_CACHE_Enable+0xd8>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001dd0:	f3bf 8f4f 	dsb	sy
}
 8001dd4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001dd6:	4b1c      	ldr	r3, [pc, #112]	; (8001e48 <CPU_CACHE_Enable+0xd8>)
 8001dd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ddc:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	0b5b      	lsrs	r3, r3, #13
 8001de2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001de6:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	08db      	lsrs	r3, r3, #3
 8001dec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001df0:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	015a      	lsls	r2, r3, #5
 8001df6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001dfa:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001e00:	4911      	ldr	r1, [pc, #68]	; (8001e48 <CPU_CACHE_Enable+0xd8>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	1e5a      	subs	r2, r3, #1
 8001e0c:	607a      	str	r2, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1ef      	bne.n	8001df2 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	1e5a      	subs	r2, r3, #1
 8001e16:	60ba      	str	r2, [r7, #8]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1e5      	bne.n	8001de8 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e1c:	f3bf 8f4f 	dsb	sy
}
 8001e20:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001e22:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <CPU_CACHE_Enable+0xd8>)
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	4a08      	ldr	r2, [pc, #32]	; (8001e48 <CPU_CACHE_Enable+0xd8>)
 8001e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e2c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e2e:	f3bf 8f4f 	dsb	sy
}
 8001e32:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e34:	f3bf 8f6f 	isb	sy
}
 8001e38:	e000      	b.n	8001e3c <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001e3a:	bf00      	nop
	/* Enable I-Cache */
	SCB_EnableICache();

	/* Enable D-Cache */
	SCB_EnableDCache();
}
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <MPU_Config>:
 *         The Region Size is 64KB.
 * @param  None
 * @retval None
 */
static void MPU_Config(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct;

	/* Disable the MPU */
	HAL_MPU_Disable();
 8001e52:	f000 ff23 	bl	8002c9c <HAL_MPU_Disable>

	/* Configure the MPU attributes as WT for SDRAM */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001e56:	2301      	movs	r3, #1
 8001e58:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = D3_SRAM_BASE;
 8001e5a:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001e5e:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8001e60:	230f      	movs	r3, #15
 8001e62:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001e64:	2303      	movs	r3, #3
 8001e66:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001e70:	2301      	movs	r3, #1
 8001e72:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001e80:	2300      	movs	r3, #0
 8001e82:	733b      	strb	r3, [r7, #12]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001e84:	463b      	mov	r3, r7
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 ff40 	bl	8002d0c <HAL_MPU_ConfigRegion>

	/* Enable the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001e8c:	2004      	movs	r0, #4
 8001e8e:	f000 ff1d 	bl	8002ccc <HAL_MPU_Enable>
}
 8001e92:	bf00      	nop
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001e9e:	b672      	cpsid	i
}
 8001ea0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001ea2:	e7fe      	b.n	8001ea2 <Error_Handler+0x8>

08001ea4 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001ea8:	4b28      	ldr	r3, [pc, #160]	; (8001f4c <MX_SPI3_Init+0xa8>)
 8001eaa:	4a29      	ldr	r2, [pc, #164]	; (8001f50 <MX_SPI3_Init+0xac>)
 8001eac:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001eae:	4b27      	ldr	r3, [pc, #156]	; (8001f4c <MX_SPI3_Init+0xa8>)
 8001eb0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001eb4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8001eb6:	4b25      	ldr	r3, [pc, #148]	; (8001f4c <MX_SPI3_Init+0xa8>)
 8001eb8:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8001ebc:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ebe:	4b23      	ldr	r3, [pc, #140]	; (8001f4c <MX_SPI3_Init+0xa8>)
 8001ec0:	2207      	movs	r2, #7
 8001ec2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ec4:	4b21      	ldr	r3, [pc, #132]	; (8001f4c <MX_SPI3_Init+0xa8>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001eca:	4b20      	ldr	r3, [pc, #128]	; (8001f4c <MX_SPI3_Init+0xa8>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001ed0:	4b1e      	ldr	r3, [pc, #120]	; (8001f4c <MX_SPI3_Init+0xa8>)
 8001ed2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ed6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001ed8:	4b1c      	ldr	r3, [pc, #112]	; (8001f4c <MX_SPI3_Init+0xa8>)
 8001eda:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ede:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ee0:	4b1a      	ldr	r3, [pc, #104]	; (8001f4c <MX_SPI3_Init+0xa8>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ee6:	4b19      	ldr	r3, [pc, #100]	; (8001f4c <MX_SPI3_Init+0xa8>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001eec:	4b17      	ldr	r3, [pc, #92]	; (8001f4c <MX_SPI3_Init+0xa8>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001ef2:	4b16      	ldr	r3, [pc, #88]	; (8001f4c <MX_SPI3_Init+0xa8>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ef8:	4b14      	ldr	r3, [pc, #80]	; (8001f4c <MX_SPI3_Init+0xa8>)
 8001efa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001efe:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001f00:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <MX_SPI3_Init+0xa8>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001f06:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <MX_SPI3_Init+0xa8>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f0c:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <MX_SPI3_Init+0xa8>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f12:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <MX_SPI3_Init+0xa8>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001f18:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <MX_SPI3_Init+0xa8>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <MX_SPI3_Init+0xa8>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001f24:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <MX_SPI3_Init+0xa8>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001f2a:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <MX_SPI3_Init+0xa8>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001f30:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <MX_SPI3_Init+0xa8>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001f36:	4805      	ldr	r0, [pc, #20]	; (8001f4c <MX_SPI3_Init+0xa8>)
 8001f38:	f007 fc3e 	bl	80097b8 <HAL_SPI_Init>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8001f42:	f7ff ffaa 	bl	8001e9a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	2400a5bc 	.word	0x2400a5bc
 8001f50:	40003c00 	.word	0x40003c00

08001f54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b0ba      	sub	sp, #232	; 0xe8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f6c:	f107 0318 	add.w	r3, r7, #24
 8001f70:	22bc      	movs	r2, #188	; 0xbc
 8001f72:	2100      	movs	r1, #0
 8001f74:	4618      	mov	r0, r3
 8001f76:	f010 f871 	bl	801205c <memset>
  if(spiHandle->Instance==SPI3)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a37      	ldr	r2, [pc, #220]	; (800205c <HAL_SPI_MspInit+0x108>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d166      	bne.n	8002052 <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f88:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f8e:	f107 0318 	add.w	r3, r7, #24
 8001f92:	4618      	mov	r0, r3
 8001f94:	f006 f8ae 	bl	80080f4 <HAL_RCCEx_PeriphCLKConfig>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001f9e:	f7ff ff7c 	bl	8001e9a <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001fa2:	4b2f      	ldr	r3, [pc, #188]	; (8002060 <HAL_SPI_MspInit+0x10c>)
 8001fa4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fa8:	4a2d      	ldr	r2, [pc, #180]	; (8002060 <HAL_SPI_MspInit+0x10c>)
 8001faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001fb2:	4b2b      	ldr	r3, [pc, #172]	; (8002060 <HAL_SPI_MspInit+0x10c>)
 8001fb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc0:	4b27      	ldr	r3, [pc, #156]	; (8002060 <HAL_SPI_MspInit+0x10c>)
 8001fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fc6:	4a26      	ldr	r2, [pc, #152]	; (8002060 <HAL_SPI_MspInit+0x10c>)
 8001fc8:	f043 0302 	orr.w	r3, r3, #2
 8001fcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fd0:	4b23      	ldr	r3, [pc, #140]	; (8002060 <HAL_SPI_MspInit+0x10c>)
 8001fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fde:	4b20      	ldr	r3, [pc, #128]	; (8002060 <HAL_SPI_MspInit+0x10c>)
 8001fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fe4:	4a1e      	ldr	r2, [pc, #120]	; (8002060 <HAL_SPI_MspInit+0x10c>)
 8001fe6:	f043 0304 	orr.w	r3, r3, #4
 8001fea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fee:	4b1c      	ldr	r3, [pc, #112]	; (8002060 <HAL_SPI_MspInit+0x10c>)
 8001ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = SPI3_MOSI___LCD_Pin;
 8001ffc:	2304      	movs	r3, #4
 8001ffe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002002:	2302      	movs	r3, #2
 8002004:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200e:	2300      	movs	r3, #0
 8002010:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8002014:	2307      	movs	r3, #7
 8002016:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(SPI3_MOSI___LCD_GPIO_Port, &GPIO_InitStruct);
 800201a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800201e:	4619      	mov	r1, r3
 8002020:	4810      	ldr	r0, [pc, #64]	; (8002064 <HAL_SPI_MspInit+0x110>)
 8002022:	f002 ff8f 	bl	8004f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI3_SCK___LCD_Pin;
 8002026:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800202a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202e:	2302      	movs	r3, #2
 8002030:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203a:	2300      	movs	r3, #0
 800203c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002040:	2306      	movs	r3, #6
 8002042:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(SPI3_SCK___LCD_GPIO_Port, &GPIO_InitStruct);
 8002046:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800204a:	4619      	mov	r1, r3
 800204c:	4806      	ldr	r0, [pc, #24]	; (8002068 <HAL_SPI_MspInit+0x114>)
 800204e:	f002 ff79 	bl	8004f44 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002052:	bf00      	nop
 8002054:	37e8      	adds	r7, #232	; 0xe8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40003c00 	.word	0x40003c00
 8002060:	58024400 	.word	0x58024400
 8002064:	58020400 	.word	0x58020400
 8002068:	58020800 	.word	0x58020800

0800206c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002072:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <HAL_MspInit+0x5c>)
 8002074:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002078:	4a13      	ldr	r2, [pc, #76]	; (80020c8 <HAL_MspInit+0x5c>)
 800207a:	f043 0302 	orr.w	r3, r3, #2
 800207e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002082:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <HAL_MspInit+0x5c>)
 8002084:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	607b      	str	r3, [r7, #4]
 800208e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* CM4_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM4_SEV_IRQn, 4, 0);
 8002090:	2200      	movs	r2, #0
 8002092:	2104      	movs	r1, #4
 8002094:	2041      	movs	r0, #65	; 0x41
 8002096:	f000 fdcc 	bl	8002c32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM4_SEV_IRQn);
 800209a:	2041      	movs	r0, #65	; 0x41
 800209c:	f000 fde3 	bl	8002c66 <HAL_NVIC_EnableIRQ>
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 4, 0);
 80020a0:	2200      	movs	r2, #0
 80020a2:	2104      	movs	r1, #4
 80020a4:	207d      	movs	r0, #125	; 0x7d
 80020a6:	f000 fdc4 	bl	8002c32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 80020aa:	207d      	movs	r0, #125	; 0x7d
 80020ac:	f000 fddb 	bl	8002c66 <HAL_NVIC_EnableIRQ>
  /* HOLD_CORE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HOLD_CORE_IRQn, 4, 0);
 80020b0:	2200      	movs	r2, #0
 80020b2:	2104      	movs	r1, #4
 80020b4:	2094      	movs	r0, #148	; 0x94
 80020b6:	f000 fdbc 	bl	8002c32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HOLD_CORE_IRQn);
 80020ba:	2094      	movs	r0, #148	; 0x94
 80020bc:	f000 fdd3 	bl	8002c66 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020c0:	bf00      	nop
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	58024400 	.word	0x58024400

080020cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020d0:	e7fe      	b.n	80020d0 <NMI_Handler+0x4>

080020d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020d2:	b480      	push	{r7}
 80020d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020d6:	e7fe      	b.n	80020d6 <HardFault_Handler+0x4>

080020d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020dc:	e7fe      	b.n	80020dc <MemManage_Handler+0x4>

080020de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020de:	b480      	push	{r7}
 80020e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020e2:	e7fe      	b.n	80020e2 <BusFault_Handler+0x4>

080020e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020e8:	e7fe      	b.n	80020e8 <UsageFault_Handler+0x4>

080020ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002106:	b480      	push	{r7}
 8002108:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002118:	f000 fc4c 	bl	80029b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800211c:	bf00      	nop
 800211e:	bd80      	pop	{r7, pc}

08002120 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002124:	4802      	ldr	r0, [pc, #8]	; (8002130 <DMA1_Stream0_IRQHandler+0x10>)
 8002126:	f001 f991 	bl	800344c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	2400a720 	.word	0x2400a720

08002134 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002138:	4802      	ldr	r0, [pc, #8]	; (8002144 <I2C1_EV_IRQHandler+0x10>)
 800213a:	f004 ff23 	bl	8006f84 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	2400a510 	.word	0x2400a510

08002148 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800214c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002150:	f003 f8c1 	bl	80052d6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002154:	bf00      	nop
 8002156:	bd80      	pop	{r7, pc}

08002158 <CM4_SEV_IRQHandler>:

/**
  * @brief This function handles CM4 send event interrupt for CM7.
  */
void CM4_SEV_IRQHandler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0

  /* USER CODE END CM4_SEV_IRQn 0 */
  /* USER CODE BEGIN CM4_SEV_IRQn 1 */

  /* USER CODE END CM4_SEV_IRQn 1 */
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
	...

08002168 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800216c:	4802      	ldr	r0, [pc, #8]	; (8002178 <OTG_FS_IRQHandler+0x10>)
 800216e:	f003 fb41 	bl	80057f4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	2400e314 	.word	0x2400e314

0800217c <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002180:	f004 fe56 	bl	8006e30 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 8002184:	bf00      	nop
 8002186:	bd80      	pop	{r7, pc}

08002188 <HOLD_CORE_IRQHandler>:

/**
  * @brief This function handles Hold core interrupt.
  */
void HOLD_CORE_IRQHandler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0

  /* USER CODE END HOLD_CORE_IRQn 0 */
  /* USER CODE BEGIN HOLD_CORE_IRQn 1 */

  /* USER CODE END HOLD_CORE_IRQn 1 */
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0
	return 1;
 800219a:	2301      	movs	r3, #1
}
 800219c:	4618      	mov	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <_kill>:

int _kill(int pid, int sig)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80021b0:	f00f fee0 	bl	8011f74 <__errno>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2216      	movs	r2, #22
 80021b8:	601a      	str	r2, [r3, #0]
	return -1;
 80021ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <_exit>:

void _exit (int status)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80021ce:	f04f 31ff 	mov.w	r1, #4294967295
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7ff ffe7 	bl	80021a6 <_kill>
	while (1) {}		/* Make sure we hang here */
 80021d8:	e7fe      	b.n	80021d8 <_exit+0x12>

080021da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b086      	sub	sp, #24
 80021de:	af00      	add	r7, sp, #0
 80021e0:	60f8      	str	r0, [r7, #12]
 80021e2:	60b9      	str	r1, [r7, #8]
 80021e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	e00a      	b.n	8002202 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021ec:	f3af 8000 	nop.w
 80021f0:	4601      	mov	r1, r0
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	1c5a      	adds	r2, r3, #1
 80021f6:	60ba      	str	r2, [r7, #8]
 80021f8:	b2ca      	uxtb	r2, r1
 80021fa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	3301      	adds	r3, #1
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	429a      	cmp	r2, r3
 8002208:	dbf0      	blt.n	80021ec <_read+0x12>
	}

return len;
 800220a:	687b      	ldr	r3, [r7, #4]
}
 800220c:	4618      	mov	r0, r3
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	e009      	b.n	800223a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	1c5a      	adds	r2, r3, #1
 800222a:	60ba      	str	r2, [r7, #8]
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	3301      	adds	r3, #1
 8002238:	617b      	str	r3, [r7, #20]
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	429a      	cmp	r2, r3
 8002240:	dbf1      	blt.n	8002226 <_write+0x12>
	}
	return len;
 8002242:	687b      	ldr	r3, [r7, #4]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <_close>:

int _close(int file)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
	return -1;
 8002254:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002258:	4618      	mov	r0, r3
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002274:	605a      	str	r2, [r3, #4]
	return 0;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <_isatty>:

int _isatty(int file)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
	return 1;
 800228c:	2301      	movs	r3, #1
}
 800228e:	4618      	mov	r0, r3
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800229a:	b480      	push	{r7}
 800229c:	b085      	sub	sp, #20
 800229e:	af00      	add	r7, sp, #0
 80022a0:	60f8      	str	r0, [r7, #12]
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607a      	str	r2, [r7, #4]
	return 0;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3714      	adds	r7, #20
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022bc:	4a14      	ldr	r2, [pc, #80]	; (8002310 <_sbrk+0x5c>)
 80022be:	4b15      	ldr	r3, [pc, #84]	; (8002314 <_sbrk+0x60>)
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022c8:	4b13      	ldr	r3, [pc, #76]	; (8002318 <_sbrk+0x64>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d102      	bne.n	80022d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022d0:	4b11      	ldr	r3, [pc, #68]	; (8002318 <_sbrk+0x64>)
 80022d2:	4a12      	ldr	r2, [pc, #72]	; (800231c <_sbrk+0x68>)
 80022d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022d6:	4b10      	ldr	r3, [pc, #64]	; (8002318 <_sbrk+0x64>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4413      	add	r3, r2
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d207      	bcs.n	80022f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022e4:	f00f fe46 	bl	8011f74 <__errno>
 80022e8:	4603      	mov	r3, r0
 80022ea:	220c      	movs	r2, #12
 80022ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022ee:	f04f 33ff 	mov.w	r3, #4294967295
 80022f2:	e009      	b.n	8002308 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022f4:	4b08      	ldr	r3, [pc, #32]	; (8002318 <_sbrk+0x64>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022fa:	4b07      	ldr	r3, [pc, #28]	; (8002318 <_sbrk+0x64>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4413      	add	r3, r2
 8002302:	4a05      	ldr	r2, [pc, #20]	; (8002318 <_sbrk+0x64>)
 8002304:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002306:	68fb      	ldr	r3, [r7, #12]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	24040000 	.word	0x24040000
 8002314:	00000400 	.word	0x00000400
 8002318:	2400a3a4 	.word	0x2400a3a4
 800231c:	2400e628 	.word	0x2400e628

08002320 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b096      	sub	sp, #88	; 0x58
 8002324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002326:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	605a      	str	r2, [r3, #4]
 8002330:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002332:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	605a      	str	r2, [r3, #4]
 800233c:	609a      	str	r2, [r3, #8]
 800233e:	60da      	str	r2, [r3, #12]
 8002340:	611a      	str	r2, [r3, #16]
 8002342:	615a      	str	r2, [r3, #20]
 8002344:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002346:	1d3b      	adds	r3, r7, #4
 8002348:	222c      	movs	r2, #44	; 0x2c
 800234a:	2100      	movs	r1, #0
 800234c:	4618      	mov	r0, r3
 800234e:	f00f fe85 	bl	801205c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002352:	4b40      	ldr	r3, [pc, #256]	; (8002454 <MX_TIM1_Init+0x134>)
 8002354:	4a40      	ldr	r2, [pc, #256]	; (8002458 <MX_TIM1_Init+0x138>)
 8002356:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75;
 8002358:	4b3e      	ldr	r3, [pc, #248]	; (8002454 <MX_TIM1_Init+0x134>)
 800235a:	224b      	movs	r2, #75	; 0x4b
 800235c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800235e:	4b3d      	ldr	r3, [pc, #244]	; (8002454 <MX_TIM1_Init+0x134>)
 8002360:	2200      	movs	r2, #0
 8002362:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8002364:	4b3b      	ldr	r3, [pc, #236]	; (8002454 <MX_TIM1_Init+0x134>)
 8002366:	f644 6220 	movw	r2, #20000	; 0x4e20
 800236a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800236c:	4b39      	ldr	r3, [pc, #228]	; (8002454 <MX_TIM1_Init+0x134>)
 800236e:	2200      	movs	r2, #0
 8002370:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002372:	4b38      	ldr	r3, [pc, #224]	; (8002454 <MX_TIM1_Init+0x134>)
 8002374:	2200      	movs	r2, #0
 8002376:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002378:	4b36      	ldr	r3, [pc, #216]	; (8002454 <MX_TIM1_Init+0x134>)
 800237a:	2280      	movs	r2, #128	; 0x80
 800237c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800237e:	4835      	ldr	r0, [pc, #212]	; (8002454 <MX_TIM1_Init+0x134>)
 8002380:	f007 fdf7 	bl	8009f72 <HAL_TIM_PWM_Init>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800238a:	f7ff fd86 	bl	8001e9a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800238e:	2300      	movs	r3, #0
 8002390:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002392:	2300      	movs	r3, #0
 8002394:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002396:	2300      	movs	r3, #0
 8002398:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800239a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800239e:	4619      	mov	r1, r3
 80023a0:	482c      	ldr	r0, [pc, #176]	; (8002454 <MX_TIM1_Init+0x134>)
 80023a2:	f008 fbe3 	bl	800ab6c <HAL_TIMEx_MasterConfigSynchronization>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80023ac:	f7ff fd75 	bl	8001e9a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023b0:	2360      	movs	r3, #96	; 0x60
 80023b2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000;
 80023b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023b8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023ba:	2300      	movs	r3, #0
 80023bc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023be:	2300      	movs	r3, #0
 80023c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023c2:	2300      	movs	r3, #0
 80023c4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023c6:	2300      	movs	r3, #0
 80023c8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023ca:	2300      	movs	r3, #0
 80023cc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023d2:	2200      	movs	r2, #0
 80023d4:	4619      	mov	r1, r3
 80023d6:	481f      	ldr	r0, [pc, #124]	; (8002454 <MX_TIM1_Init+0x134>)
 80023d8:	f007 ff2a 	bl	800a230 <HAL_TIM_PWM_ConfigChannel>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80023e2:	f7ff fd5a 	bl	8001e9a <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023ee:	2204      	movs	r2, #4
 80023f0:	4619      	mov	r1, r3
 80023f2:	4818      	ldr	r0, [pc, #96]	; (8002454 <MX_TIM1_Init+0x134>)
 80023f4:	f007 ff1c 	bl	800a230 <HAL_TIM_PWM_ConfigChannel>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 80023fe:	f7ff fd4c 	bl	8001e9a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002402:	2300      	movs	r3, #0
 8002404:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002406:	2300      	movs	r3, #0
 8002408:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800240a:	2300      	movs	r3, #0
 800240c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800240e:	2300      	movs	r3, #0
 8002410:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002416:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800241a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002420:	2300      	movs	r3, #0
 8002422:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002424:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800242a:	2300      	movs	r3, #0
 800242c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800242e:	2300      	movs	r3, #0
 8002430:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002432:	1d3b      	adds	r3, r7, #4
 8002434:	4619      	mov	r1, r3
 8002436:	4807      	ldr	r0, [pc, #28]	; (8002454 <MX_TIM1_Init+0x134>)
 8002438:	f008 fc20 	bl	800ac7c <HAL_TIMEx_ConfigBreakDeadTime>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8002442:	f7ff fd2a 	bl	8001e9a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002446:	4803      	ldr	r0, [pc, #12]	; (8002454 <MX_TIM1_Init+0x134>)
 8002448:	f000 f82a 	bl	80024a0 <HAL_TIM_MspPostInit>

}
 800244c:	bf00      	nop
 800244e:	3758      	adds	r7, #88	; 0x58
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	2400a644 	.word	0x2400a644
 8002458:	40010000 	.word	0x40010000

0800245c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a0b      	ldr	r2, [pc, #44]	; (8002498 <HAL_TIM_PWM_MspInit+0x3c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d10e      	bne.n	800248c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800246e:	4b0b      	ldr	r3, [pc, #44]	; (800249c <HAL_TIM_PWM_MspInit+0x40>)
 8002470:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002474:	4a09      	ldr	r2, [pc, #36]	; (800249c <HAL_TIM_PWM_MspInit+0x40>)
 8002476:	f043 0301 	orr.w	r3, r3, #1
 800247a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800247e:	4b07      	ldr	r3, [pc, #28]	; (800249c <HAL_TIM_PWM_MspInit+0x40>)
 8002480:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800248c:	bf00      	nop
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	40010000 	.word	0x40010000
 800249c:	58024400 	.word	0x58024400

080024a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b088      	sub	sp, #32
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a8:	f107 030c 	add.w	r3, r7, #12
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	605a      	str	r2, [r3, #4]
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	60da      	str	r2, [r3, #12]
 80024b6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a13      	ldr	r2, [pc, #76]	; (800250c <HAL_TIM_MspPostInit+0x6c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d11f      	bne.n	8002502 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80024c2:	4b13      	ldr	r3, [pc, #76]	; (8002510 <HAL_TIM_MspPostInit+0x70>)
 80024c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024c8:	4a11      	ldr	r2, [pc, #68]	; (8002510 <HAL_TIM_MspPostInit+0x70>)
 80024ca:	f043 0310 	orr.w	r3, r3, #16
 80024ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024d2:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <HAL_TIM_MspPostInit+0x70>)
 80024d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024d8:	f003 0310 	and.w	r3, r3, #16
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TIM1_CH1___LCD_Brightness_Pin|TIM1_CH2___LIDAR_motor_ctrl_Pin;
 80024e0:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80024e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e6:	2302      	movs	r3, #2
 80024e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024f2:	2301      	movs	r3, #1
 80024f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024f6:	f107 030c 	add.w	r3, r7, #12
 80024fa:	4619      	mov	r1, r3
 80024fc:	4805      	ldr	r0, [pc, #20]	; (8002514 <HAL_TIM_MspPostInit+0x74>)
 80024fe:	f002 fd21 	bl	8004f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002502:	bf00      	nop
 8002504:	3720      	adds	r7, #32
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40010000 	.word	0x40010000
 8002510:	58024400 	.word	0x58024400
 8002514:	58021000 	.word	0x58021000

08002518 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800251c:	4b22      	ldr	r3, [pc, #136]	; (80025a8 <MX_USART1_UART_Init+0x90>)
 800251e:	4a23      	ldr	r2, [pc, #140]	; (80025ac <MX_USART1_UART_Init+0x94>)
 8002520:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002522:	4b21      	ldr	r3, [pc, #132]	; (80025a8 <MX_USART1_UART_Init+0x90>)
 8002524:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002528:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800252a:	4b1f      	ldr	r3, [pc, #124]	; (80025a8 <MX_USART1_UART_Init+0x90>)
 800252c:	2200      	movs	r2, #0
 800252e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002530:	4b1d      	ldr	r3, [pc, #116]	; (80025a8 <MX_USART1_UART_Init+0x90>)
 8002532:	2200      	movs	r2, #0
 8002534:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002536:	4b1c      	ldr	r3, [pc, #112]	; (80025a8 <MX_USART1_UART_Init+0x90>)
 8002538:	2200      	movs	r2, #0
 800253a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800253c:	4b1a      	ldr	r3, [pc, #104]	; (80025a8 <MX_USART1_UART_Init+0x90>)
 800253e:	220c      	movs	r2, #12
 8002540:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002542:	4b19      	ldr	r3, [pc, #100]	; (80025a8 <MX_USART1_UART_Init+0x90>)
 8002544:	2200      	movs	r2, #0
 8002546:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002548:	4b17      	ldr	r3, [pc, #92]	; (80025a8 <MX_USART1_UART_Init+0x90>)
 800254a:	2200      	movs	r2, #0
 800254c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800254e:	4b16      	ldr	r3, [pc, #88]	; (80025a8 <MX_USART1_UART_Init+0x90>)
 8002550:	2200      	movs	r2, #0
 8002552:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002554:	4b14      	ldr	r3, [pc, #80]	; (80025a8 <MX_USART1_UART_Init+0x90>)
 8002556:	2200      	movs	r2, #0
 8002558:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800255a:	4b13      	ldr	r3, [pc, #76]	; (80025a8 <MX_USART1_UART_Init+0x90>)
 800255c:	2200      	movs	r2, #0
 800255e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002560:	4811      	ldr	r0, [pc, #68]	; (80025a8 <MX_USART1_UART_Init+0x90>)
 8002562:	f008 fc09 	bl	800ad78 <HAL_UART_Init>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800256c:	f7ff fc95 	bl	8001e9a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002570:	2100      	movs	r1, #0
 8002572:	480d      	ldr	r0, [pc, #52]	; (80025a8 <MX_USART1_UART_Init+0x90>)
 8002574:	f009 fb56 	bl	800bc24 <HAL_UARTEx_SetTxFifoThreshold>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800257e:	f7ff fc8c 	bl	8001e9a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002582:	2100      	movs	r1, #0
 8002584:	4808      	ldr	r0, [pc, #32]	; (80025a8 <MX_USART1_UART_Init+0x90>)
 8002586:	f009 fb8b 	bl	800bca0 <HAL_UARTEx_SetRxFifoThreshold>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002590:	f7ff fc83 	bl	8001e9a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002594:	4804      	ldr	r0, [pc, #16]	; (80025a8 <MX_USART1_UART_Init+0x90>)
 8002596:	f009 fb0c 	bl	800bbb2 <HAL_UARTEx_DisableFifoMode>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80025a0:	f7ff fc7b 	bl	8001e9a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025a4:	bf00      	nop
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	2400a798 	.word	0x2400a798
 80025ac:	40011000 	.word	0x40011000

080025b0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80025b4:	4b22      	ldr	r3, [pc, #136]	; (8002640 <MX_USART3_UART_Init+0x90>)
 80025b6:	4a23      	ldr	r2, [pc, #140]	; (8002644 <MX_USART3_UART_Init+0x94>)
 80025b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80025ba:	4b21      	ldr	r3, [pc, #132]	; (8002640 <MX_USART3_UART_Init+0x90>)
 80025bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80025c2:	4b1f      	ldr	r3, [pc, #124]	; (8002640 <MX_USART3_UART_Init+0x90>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80025c8:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <MX_USART3_UART_Init+0x90>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80025ce:	4b1c      	ldr	r3, [pc, #112]	; (8002640 <MX_USART3_UART_Init+0x90>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80025d4:	4b1a      	ldr	r3, [pc, #104]	; (8002640 <MX_USART3_UART_Init+0x90>)
 80025d6:	220c      	movs	r2, #12
 80025d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025da:	4b19      	ldr	r3, [pc, #100]	; (8002640 <MX_USART3_UART_Init+0x90>)
 80025dc:	2200      	movs	r2, #0
 80025de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80025e0:	4b17      	ldr	r3, [pc, #92]	; (8002640 <MX_USART3_UART_Init+0x90>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025e6:	4b16      	ldr	r3, [pc, #88]	; (8002640 <MX_USART3_UART_Init+0x90>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025ec:	4b14      	ldr	r3, [pc, #80]	; (8002640 <MX_USART3_UART_Init+0x90>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025f2:	4b13      	ldr	r3, [pc, #76]	; (8002640 <MX_USART3_UART_Init+0x90>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80025f8:	4811      	ldr	r0, [pc, #68]	; (8002640 <MX_USART3_UART_Init+0x90>)
 80025fa:	f008 fbbd 	bl	800ad78 <HAL_UART_Init>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002604:	f7ff fc49 	bl	8001e9a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002608:	2100      	movs	r1, #0
 800260a:	480d      	ldr	r0, [pc, #52]	; (8002640 <MX_USART3_UART_Init+0x90>)
 800260c:	f009 fb0a 	bl	800bc24 <HAL_UARTEx_SetTxFifoThreshold>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002616:	f7ff fc40 	bl	8001e9a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800261a:	2100      	movs	r1, #0
 800261c:	4808      	ldr	r0, [pc, #32]	; (8002640 <MX_USART3_UART_Init+0x90>)
 800261e:	f009 fb3f 	bl	800bca0 <HAL_UARTEx_SetRxFifoThreshold>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002628:	f7ff fc37 	bl	8001e9a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800262c:	4804      	ldr	r0, [pc, #16]	; (8002640 <MX_USART3_UART_Init+0x90>)
 800262e:	f009 fac0 	bl	800bbb2 <HAL_UARTEx_DisableFifoMode>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002638:	f7ff fc2f 	bl	8001e9a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800263c:	bf00      	nop
 800263e:	bd80      	pop	{r7, pc}
 8002640:	2400a690 	.word	0x2400a690
 8002644:	40004800 	.word	0x40004800

08002648 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b0ba      	sub	sp, #232	; 0xe8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002650:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	605a      	str	r2, [r3, #4]
 800265a:	609a      	str	r2, [r3, #8]
 800265c:	60da      	str	r2, [r3, #12]
 800265e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002660:	f107 0318 	add.w	r3, r7, #24
 8002664:	22bc      	movs	r2, #188	; 0xbc
 8002666:	2100      	movs	r1, #0
 8002668:	4618      	mov	r0, r3
 800266a:	f00f fcf7 	bl	801205c <memset>
  if(uartHandle->Instance==USART1)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a6c      	ldr	r2, [pc, #432]	; (8002824 <HAL_UART_MspInit+0x1dc>)
 8002674:	4293      	cmp	r3, r2
 8002676:	f040 8088 	bne.w	800278a <HAL_UART_MspInit+0x142>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800267a:	2301      	movs	r3, #1
 800267c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800267e:	2300      	movs	r3, #0
 8002680:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002684:	f107 0318 	add.w	r3, r7, #24
 8002688:	4618      	mov	r0, r3
 800268a:	f005 fd33 	bl	80080f4 <HAL_RCCEx_PeriphCLKConfig>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002694:	f7ff fc01 	bl	8001e9a <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002698:	4b63      	ldr	r3, [pc, #396]	; (8002828 <HAL_UART_MspInit+0x1e0>)
 800269a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800269e:	4a62      	ldr	r2, [pc, #392]	; (8002828 <HAL_UART_MspInit+0x1e0>)
 80026a0:	f043 0310 	orr.w	r3, r3, #16
 80026a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80026a8:	4b5f      	ldr	r3, [pc, #380]	; (8002828 <HAL_UART_MspInit+0x1e0>)
 80026aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026ae:	f003 0310 	and.w	r3, r3, #16
 80026b2:	617b      	str	r3, [r7, #20]
 80026b4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b6:	4b5c      	ldr	r3, [pc, #368]	; (8002828 <HAL_UART_MspInit+0x1e0>)
 80026b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026bc:	4a5a      	ldr	r2, [pc, #360]	; (8002828 <HAL_UART_MspInit+0x1e0>)
 80026be:	f043 0302 	orr.w	r3, r3, #2
 80026c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026c6:	4b58      	ldr	r3, [pc, #352]	; (8002828 <HAL_UART_MspInit+0x1e0>)
 80026c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80026d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026dc:	2302      	movs	r3, #2
 80026de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e8:	2300      	movs	r3, #0
 80026ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80026ee:	2304      	movs	r3, #4
 80026f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026f4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80026f8:	4619      	mov	r1, r3
 80026fa:	484c      	ldr	r0, [pc, #304]	; (800282c <HAL_UART_MspInit+0x1e4>)
 80026fc:	f002 fc22 	bl	8004f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002700:	2340      	movs	r3, #64	; 0x40
 8002702:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002706:	2302      	movs	r3, #2
 8002708:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270c:	2300      	movs	r3, #0
 800270e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002712:	2300      	movs	r3, #0
 8002714:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002718:	2307      	movs	r3, #7
 800271a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800271e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002722:	4619      	mov	r1, r3
 8002724:	4841      	ldr	r0, [pc, #260]	; (800282c <HAL_UART_MspInit+0x1e4>)
 8002726:	f002 fc0d 	bl	8004f44 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 800272a:	4b41      	ldr	r3, [pc, #260]	; (8002830 <HAL_UART_MspInit+0x1e8>)
 800272c:	4a41      	ldr	r2, [pc, #260]	; (8002834 <HAL_UART_MspInit+0x1ec>)
 800272e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002730:	4b3f      	ldr	r3, [pc, #252]	; (8002830 <HAL_UART_MspInit+0x1e8>)
 8002732:	2229      	movs	r2, #41	; 0x29
 8002734:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002736:	4b3e      	ldr	r3, [pc, #248]	; (8002830 <HAL_UART_MspInit+0x1e8>)
 8002738:	2200      	movs	r2, #0
 800273a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800273c:	4b3c      	ldr	r3, [pc, #240]	; (8002830 <HAL_UART_MspInit+0x1e8>)
 800273e:	2200      	movs	r2, #0
 8002740:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002742:	4b3b      	ldr	r3, [pc, #236]	; (8002830 <HAL_UART_MspInit+0x1e8>)
 8002744:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002748:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800274a:	4b39      	ldr	r3, [pc, #228]	; (8002830 <HAL_UART_MspInit+0x1e8>)
 800274c:	2200      	movs	r2, #0
 800274e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002750:	4b37      	ldr	r3, [pc, #220]	; (8002830 <HAL_UART_MspInit+0x1e8>)
 8002752:	2200      	movs	r2, #0
 8002754:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002756:	4b36      	ldr	r3, [pc, #216]	; (8002830 <HAL_UART_MspInit+0x1e8>)
 8002758:	f44f 7280 	mov.w	r2, #256	; 0x100
 800275c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800275e:	4b34      	ldr	r3, [pc, #208]	; (8002830 <HAL_UART_MspInit+0x1e8>)
 8002760:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002764:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002766:	4b32      	ldr	r3, [pc, #200]	; (8002830 <HAL_UART_MspInit+0x1e8>)
 8002768:	2200      	movs	r2, #0
 800276a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800276c:	4830      	ldr	r0, [pc, #192]	; (8002830 <HAL_UART_MspInit+0x1e8>)
 800276e:	f000 fb11 	bl	8002d94 <HAL_DMA_Init>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <HAL_UART_MspInit+0x134>
    {
      Error_Handler();
 8002778:	f7ff fb8f 	bl	8001e9a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a2c      	ldr	r2, [pc, #176]	; (8002830 <HAL_UART_MspInit+0x1e8>)
 8002780:	67da      	str	r2, [r3, #124]	; 0x7c
 8002782:	4a2b      	ldr	r2, [pc, #172]	; (8002830 <HAL_UART_MspInit+0x1e8>)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002788:	e047      	b.n	800281a <HAL_UART_MspInit+0x1d2>
  else if(uartHandle->Instance==USART3)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a2a      	ldr	r2, [pc, #168]	; (8002838 <HAL_UART_MspInit+0x1f0>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d142      	bne.n	800281a <HAL_UART_MspInit+0x1d2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002794:	2302      	movs	r3, #2
 8002796:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002798:	2300      	movs	r3, #0
 800279a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800279e:	f107 0318 	add.w	r3, r7, #24
 80027a2:	4618      	mov	r0, r3
 80027a4:	f005 fca6 	bl	80080f4 <HAL_RCCEx_PeriphCLKConfig>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_UART_MspInit+0x16a>
      Error_Handler();
 80027ae:	f7ff fb74 	bl	8001e9a <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80027b2:	4b1d      	ldr	r3, [pc, #116]	; (8002828 <HAL_UART_MspInit+0x1e0>)
 80027b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027b8:	4a1b      	ldr	r2, [pc, #108]	; (8002828 <HAL_UART_MspInit+0x1e0>)
 80027ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80027c2:	4b19      	ldr	r3, [pc, #100]	; (8002828 <HAL_UART_MspInit+0x1e0>)
 80027c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027d0:	4b15      	ldr	r3, [pc, #84]	; (8002828 <HAL_UART_MspInit+0x1e0>)
 80027d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027d6:	4a14      	ldr	r2, [pc, #80]	; (8002828 <HAL_UART_MspInit+0x1e0>)
 80027d8:	f043 0308 	orr.w	r3, r3, #8
 80027dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027e0:	4b11      	ldr	r3, [pc, #68]	; (8002828 <HAL_UART_MspInit+0x1e0>)
 80027e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80027ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f6:	2302      	movs	r3, #2
 80027f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002802:	2300      	movs	r3, #0
 8002804:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002808:	2307      	movs	r3, #7
 800280a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800280e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002812:	4619      	mov	r1, r3
 8002814:	4809      	ldr	r0, [pc, #36]	; (800283c <HAL_UART_MspInit+0x1f4>)
 8002816:	f002 fb95 	bl	8004f44 <HAL_GPIO_Init>
}
 800281a:	bf00      	nop
 800281c:	37e8      	adds	r7, #232	; 0xe8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40011000 	.word	0x40011000
 8002828:	58024400 	.word	0x58024400
 800282c:	58020400 	.word	0x58020400
 8002830:	2400a720 	.word	0x2400a720
 8002834:	40020010 	.word	0x40020010
 8002838:	40004800 	.word	0x40004800
 800283c:	58020c00 	.word	0x58020c00

08002840 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002840:	f8df d05c 	ldr.w	sp, [pc, #92]	; 80028a0 <LoopFillZerobss_RAM_D2+0x12>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002844:	f7fe f9a8 	bl	8000b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002848:	4816      	ldr	r0, [pc, #88]	; (80028a4 <LoopFillZerobss_RAM_D2+0x16>)
  ldr r1, =_edata
 800284a:	4917      	ldr	r1, [pc, #92]	; (80028a8 <LoopFillZerobss_RAM_D2+0x1a>)
  ldr r2, =_sidata
 800284c:	4a17      	ldr	r2, [pc, #92]	; (80028ac <LoopFillZerobss_RAM_D2+0x1e>)
  movs r3, #0
 800284e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002850:	e002      	b.n	8002858 <LoopCopyDataInit>

08002852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002856:	3304      	adds	r3, #4

08002858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800285a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800285c:	d3f9      	bcc.n	8002852 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800285e:	4a14      	ldr	r2, [pc, #80]	; (80028b0 <LoopFillZerobss_RAM_D2+0x22>)
  ldr r4, =_ebss
 8002860:	4c14      	ldr	r4, [pc, #80]	; (80028b4 <LoopFillZerobss_RAM_D2+0x26>)
  movs r3, #0
 8002862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002864:	e001      	b.n	800286a <LoopFillZerobss>

08002866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002868:	3204      	adds	r2, #4

0800286a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800286a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800286c:	d3fb      	bcc.n	8002866 <FillZerobss>

  /* Copy the data segment initializers from flash to RAM_D2 */
  movs  r1, #0
 800286e:	2100      	movs	r1, #0
  b  LoopCopyDataInit_RAM_D2
 8002870:	e003      	b.n	800287a <LoopCopyDataInit_RAM_D2>

08002872 <CopyDataInit_RAM_D2>:

CopyDataInit_RAM_D2:
  ldr  r3, =_siRAM_D2
 8002872:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <LoopFillZerobss_RAM_D2+0x2a>)
  ldr  r3, [r3, r1]
 8002874:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002876:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002878:	3104      	adds	r1, #4

0800287a <LoopCopyDataInit_RAM_D2>:

LoopCopyDataInit_RAM_D2:
  ldr  r0, =_sRAM_D2
 800287a:	4810      	ldr	r0, [pc, #64]	; (80028bc <LoopFillZerobss_RAM_D2+0x2e>)
  ldr  r3, =_eRAM_D2
 800287c:	4b10      	ldr	r3, [pc, #64]	; (80028c0 <LoopFillZerobss_RAM_D2+0x32>)
  adds  r2, r0, r1
 800287e:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002880:	429a      	cmp	r2, r3
  bcc  CopyDataInit_RAM_D2
 8002882:	d3f6      	bcc.n	8002872 <CopyDataInit_RAM_D2>
  ldr  r2, =_sbss_RAM_D2
 8002884:	4a0f      	ldr	r2, [pc, #60]	; (80028c4 <LoopFillZerobss_RAM_D2+0x36>)
  b  LoopFillZerobss_RAM_D2
 8002886:	e002      	b.n	800288e <LoopFillZerobss_RAM_D2>

08002888 <FillZerobss_RAM_D2>:


/* Zero fill the bss segment. */
FillZerobss_RAM_D2:
  movs  r3, #0
 8002888:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800288a:	f842 3b04 	str.w	r3, [r2], #4

0800288e <LoopFillZerobss_RAM_D2>:

LoopFillZerobss_RAM_D2:
  ldr  r3, = _ebss_RAM_D2
 800288e:	4b0e      	ldr	r3, [pc, #56]	; (80028c8 <LoopFillZerobss_RAM_D2+0x3a>)
  cmp  r2, r3
 8002890:	429a      	cmp	r2, r3
  bcc  FillZerobss_RAM_D2
 8002892:	d3f9      	bcc.n	8002888 <FillZerobss_RAM_D2>

/* Call static constructors */
    bl __libc_init_array
 8002894:	f00f fb86 	bl	8011fa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002898:	f7fe fd4c 	bl	8001334 <main>
  bx  lr
 800289c:	4770      	bx	lr
 800289e:	0000      	.short	0x0000
  ldr   sp, =_estack      /* set stack pointer */
 80028a0:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 80028a4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80028a8:	2400a2c4 	.word	0x2400a2c4
  ldr r2, =_sidata
 80028ac:	0806370c 	.word	0x0806370c
  ldr r2, =_sbss
 80028b0:	2400a384 	.word	0x2400a384
  ldr r4, =_ebss
 80028b4:	2400e628 	.word	0x2400e628
  ldr  r3, =_siRAM_D2
 80028b8:	0806da90 	.word	0x0806da90
  ldr  r0, =_sRAM_D2
 80028bc:	30000000 	.word	0x30000000
  ldr  r3, =_eRAM_D2
 80028c0:	30000000 	.word	0x30000000
  ldr  r2, =_sbss_RAM_D2
 80028c4:	30000000 	.word	0x30000000
  ldr  r3, = _ebss_RAM_D2
 80028c8:	30000000 	.word	0x30000000

080028cc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028cc:	e7fe      	b.n	80028cc <ADC3_IRQHandler>
	...

080028d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028d6:	2003      	movs	r0, #3
 80028d8:	f000 f9a0 	bl	8002c1c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80028dc:	f005 fa34 	bl	8007d48 <HAL_RCC_GetSysClockFreq>
 80028e0:	4602      	mov	r2, r0
 80028e2:	4b15      	ldr	r3, [pc, #84]	; (8002938 <HAL_Init+0x68>)
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	0a1b      	lsrs	r3, r3, #8
 80028e8:	f003 030f 	and.w	r3, r3, #15
 80028ec:	4913      	ldr	r1, [pc, #76]	; (800293c <HAL_Init+0x6c>)
 80028ee:	5ccb      	ldrb	r3, [r1, r3]
 80028f0:	f003 031f 	and.w	r3, r3, #31
 80028f4:	fa22 f303 	lsr.w	r3, r2, r3
 80028f8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80028fa:	4b0f      	ldr	r3, [pc, #60]	; (8002938 <HAL_Init+0x68>)
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	4a0e      	ldr	r2, [pc, #56]	; (800293c <HAL_Init+0x6c>)
 8002904:	5cd3      	ldrb	r3, [r2, r3]
 8002906:	f003 031f 	and.w	r3, r3, #31
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	fa22 f303 	lsr.w	r3, r2, r3
 8002910:	4a0b      	ldr	r2, [pc, #44]	; (8002940 <HAL_Init+0x70>)
 8002912:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002914:	4a0b      	ldr	r2, [pc, #44]	; (8002944 <HAL_Init+0x74>)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800291a:	2000      	movs	r0, #0
 800291c:	f000 f814 	bl	8002948 <HAL_InitTick>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e002      	b.n	8002930 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800292a:	f7ff fb9f 	bl	800206c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	58024400 	.word	0x58024400
 800293c:	08016cc8 	.word	0x08016cc8
 8002940:	24000004 	.word	0x24000004
 8002944:	24000000 	.word	0x24000000

08002948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002950:	4b15      	ldr	r3, [pc, #84]	; (80029a8 <HAL_InitTick+0x60>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e021      	b.n	80029a0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800295c:	4b13      	ldr	r3, [pc, #76]	; (80029ac <HAL_InitTick+0x64>)
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	4b11      	ldr	r3, [pc, #68]	; (80029a8 <HAL_InitTick+0x60>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	4619      	mov	r1, r3
 8002966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800296a:	fbb3 f3f1 	udiv	r3, r3, r1
 800296e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002972:	4618      	mov	r0, r3
 8002974:	f000 f985 	bl	8002c82 <HAL_SYSTICK_Config>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e00e      	b.n	80029a0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b0f      	cmp	r3, #15
 8002986:	d80a      	bhi.n	800299e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002988:	2200      	movs	r2, #0
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	f04f 30ff 	mov.w	r0, #4294967295
 8002990:	f000 f94f 	bl	8002c32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002994:	4a06      	ldr	r2, [pc, #24]	; (80029b0 <HAL_InitTick+0x68>)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800299a:	2300      	movs	r3, #0
 800299c:	e000      	b.n	80029a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	24000014 	.word	0x24000014
 80029ac:	24000000 	.word	0x24000000
 80029b0:	24000010 	.word	0x24000010

080029b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80029b8:	4b06      	ldr	r3, [pc, #24]	; (80029d4 <HAL_IncTick+0x20>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	461a      	mov	r2, r3
 80029be:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <HAL_IncTick+0x24>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4413      	add	r3, r2
 80029c4:	4a04      	ldr	r2, [pc, #16]	; (80029d8 <HAL_IncTick+0x24>)
 80029c6:	6013      	str	r3, [r2, #0]
}
 80029c8:	bf00      	nop
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	24000014 	.word	0x24000014
 80029d8:	2400a828 	.word	0x2400a828

080029dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  return uwTick;
 80029e0:	4b03      	ldr	r3, [pc, #12]	; (80029f0 <HAL_GetTick+0x14>)
 80029e2:	681b      	ldr	r3, [r3, #0]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	2400a828 	.word	0x2400a828

080029f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029fc:	f7ff ffee 	bl	80029dc <HAL_GetTick>
 8002a00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0c:	d005      	beq.n	8002a1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a0e:	4b0a      	ldr	r3, [pc, #40]	; (8002a38 <HAL_Delay+0x44>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	461a      	mov	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4413      	add	r3, r2
 8002a18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a1a:	bf00      	nop
 8002a1c:	f7ff ffde 	bl	80029dc <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d8f7      	bhi.n	8002a1c <HAL_Delay+0x28>
  {
  }
}
 8002a2c:	bf00      	nop
 8002a2e:	bf00      	nop
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	24000014 	.word	0x24000014

08002a3c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002a40:	4b03      	ldr	r3, [pc, #12]	; (8002a50 <HAL_GetREVID+0x14>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	0c1b      	lsrs	r3, r3, #16
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	5c001000 	.word	0x5c001000

08002a54 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002a5c:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002a64:	4904      	ldr	r1, [pc, #16]	; (8002a78 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	604b      	str	r3, [r1, #4]
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	58000400 	.word	0x58000400

08002a7c <__NVIC_SetPriorityGrouping>:
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <__NVIC_SetPriorityGrouping+0x40>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a98:	4013      	ands	r3, r2
 8002a9a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002aa4:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aaa:	4a04      	ldr	r2, [pc, #16]	; (8002abc <__NVIC_SetPriorityGrouping+0x40>)
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	60d3      	str	r3, [r2, #12]
}
 8002ab0:	bf00      	nop
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	e000ed00 	.word	0xe000ed00
 8002ac0:	05fa0000 	.word	0x05fa0000

08002ac4 <__NVIC_GetPriorityGrouping>:
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ac8:	4b04      	ldr	r3, [pc, #16]	; (8002adc <__NVIC_GetPriorityGrouping+0x18>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	0a1b      	lsrs	r3, r3, #8
 8002ace:	f003 0307 	and.w	r3, r3, #7
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	e000ed00 	.word	0xe000ed00

08002ae0 <__NVIC_EnableIRQ>:
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	db0b      	blt.n	8002b0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002af2:	88fb      	ldrh	r3, [r7, #6]
 8002af4:	f003 021f 	and.w	r2, r3, #31
 8002af8:	4907      	ldr	r1, [pc, #28]	; (8002b18 <__NVIC_EnableIRQ+0x38>)
 8002afa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002afe:	095b      	lsrs	r3, r3, #5
 8002b00:	2001      	movs	r0, #1
 8002b02:	fa00 f202 	lsl.w	r2, r0, r2
 8002b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	e000e100 	.word	0xe000e100

08002b1c <__NVIC_SetPriority>:
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	6039      	str	r1, [r7, #0]
 8002b26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	db0a      	blt.n	8002b46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	490c      	ldr	r1, [pc, #48]	; (8002b68 <__NVIC_SetPriority+0x4c>)
 8002b36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b3a:	0112      	lsls	r2, r2, #4
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	440b      	add	r3, r1
 8002b40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002b44:	e00a      	b.n	8002b5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	4908      	ldr	r1, [pc, #32]	; (8002b6c <__NVIC_SetPriority+0x50>)
 8002b4c:	88fb      	ldrh	r3, [r7, #6]
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	3b04      	subs	r3, #4
 8002b54:	0112      	lsls	r2, r2, #4
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	440b      	add	r3, r1
 8002b5a:	761a      	strb	r2, [r3, #24]
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	e000e100 	.word	0xe000e100
 8002b6c:	e000ed00 	.word	0xe000ed00

08002b70 <NVIC_EncodePriority>:
{
 8002b70:	b480      	push	{r7}
 8002b72:	b089      	sub	sp, #36	; 0x24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f1c3 0307 	rsb	r3, r3, #7
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	bf28      	it	cs
 8002b8e:	2304      	movcs	r3, #4
 8002b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	3304      	adds	r3, #4
 8002b96:	2b06      	cmp	r3, #6
 8002b98:	d902      	bls.n	8002ba0 <NVIC_EncodePriority+0x30>
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3b03      	subs	r3, #3
 8002b9e:	e000      	b.n	8002ba2 <NVIC_EncodePriority+0x32>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43da      	mvns	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	401a      	ands	r2, r3
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc2:	43d9      	mvns	r1, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc8:	4313      	orrs	r3, r2
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3724      	adds	r7, #36	; 0x24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
	...

08002bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002be8:	d301      	bcc.n	8002bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bea:	2301      	movs	r3, #1
 8002bec:	e00f      	b.n	8002c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bee:	4a0a      	ldr	r2, [pc, #40]	; (8002c18 <SysTick_Config+0x40>)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bf6:	210f      	movs	r1, #15
 8002bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bfc:	f7ff ff8e 	bl	8002b1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c00:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <SysTick_Config+0x40>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c06:	4b04      	ldr	r3, [pc, #16]	; (8002c18 <SysTick_Config+0x40>)
 8002c08:	2207      	movs	r2, #7
 8002c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	e000e010 	.word	0xe000e010

08002c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7ff ff29 	bl	8002a7c <__NVIC_SetPriorityGrouping>
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b086      	sub	sp, #24
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	4603      	mov	r3, r0
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	607a      	str	r2, [r7, #4]
 8002c3e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c40:	f7ff ff40 	bl	8002ac4 <__NVIC_GetPriorityGrouping>
 8002c44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	68b9      	ldr	r1, [r7, #8]
 8002c4a:	6978      	ldr	r0, [r7, #20]
 8002c4c:	f7ff ff90 	bl	8002b70 <NVIC_EncodePriority>
 8002c50:	4602      	mov	r2, r0
 8002c52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c56:	4611      	mov	r1, r2
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff ff5f 	bl	8002b1c <__NVIC_SetPriority>
}
 8002c5e:	bf00      	nop
 8002c60:	3718      	adds	r7, #24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b082      	sub	sp, #8
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff ff33 	bl	8002ae0 <__NVIC_EnableIRQ>
}
 8002c7a:	bf00      	nop
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7ff ffa4 	bl	8002bd8 <SysTick_Config>
 8002c90:	4603      	mov	r3, r0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
	...

08002c9c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002ca0:	f3bf 8f5f 	dmb	sy
}
 8002ca4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002ca6:	4b07      	ldr	r3, [pc, #28]	; (8002cc4 <HAL_MPU_Disable+0x28>)
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	4a06      	ldr	r2, [pc, #24]	; (8002cc4 <HAL_MPU_Disable+0x28>)
 8002cac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb0:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002cb2:	4b05      	ldr	r3, [pc, #20]	; (8002cc8 <HAL_MPU_Disable+0x2c>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	605a      	str	r2, [r3, #4]
}
 8002cb8:	bf00      	nop
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	e000ed00 	.word	0xe000ed00
 8002cc8:	e000ed90 	.word	0xe000ed90

08002ccc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002cd4:	4a0b      	ldr	r2, [pc, #44]	; (8002d04 <HAL_MPU_Enable+0x38>)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f043 0301 	orr.w	r3, r3, #1
 8002cdc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002cde:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <HAL_MPU_Enable+0x3c>)
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	4a09      	ldr	r2, [pc, #36]	; (8002d08 <HAL_MPU_Enable+0x3c>)
 8002ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002cea:	f3bf 8f4f 	dsb	sy
}
 8002cee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002cf0:	f3bf 8f6f 	isb	sy
}
 8002cf4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	e000ed90 	.word	0xe000ed90
 8002d08:	e000ed00 	.word	0xe000ed00

08002d0c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	785a      	ldrb	r2, [r3, #1]
 8002d18:	4b1d      	ldr	r3, [pc, #116]	; (8002d90 <HAL_MPU_ConfigRegion+0x84>)
 8002d1a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d029      	beq.n	8002d78 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002d24:	4a1a      	ldr	r2, [pc, #104]	; (8002d90 <HAL_MPU_ConfigRegion+0x84>)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	7b1b      	ldrb	r3, [r3, #12]
 8002d30:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	7adb      	ldrb	r3, [r3, #11]
 8002d36:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d38:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	7a9b      	ldrb	r3, [r3, #10]
 8002d3e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002d40:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	7b5b      	ldrb	r3, [r3, #13]
 8002d46:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002d48:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	7b9b      	ldrb	r3, [r3, #14]
 8002d4e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002d50:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	7bdb      	ldrb	r3, [r3, #15]
 8002d56:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002d58:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	7a5b      	ldrb	r3, [r3, #9]
 8002d5e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002d60:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	7a1b      	ldrb	r3, [r3, #8]
 8002d66:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002d68:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	7812      	ldrb	r2, [r2, #0]
 8002d6e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d70:	4a07      	ldr	r2, [pc, #28]	; (8002d90 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002d72:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d74:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002d76:	e005      	b.n	8002d84 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002d78:	4b05      	ldr	r3, [pc, #20]	; (8002d90 <HAL_MPU_ConfigRegion+0x84>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002d7e:	4b04      	ldr	r3, [pc, #16]	; (8002d90 <HAL_MPU_ConfigRegion+0x84>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	611a      	str	r2, [r3, #16]
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	e000ed90 	.word	0xe000ed90

08002d94 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002d9c:	f7ff fe1e 	bl	80029dc <HAL_GetTick>
 8002da0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e316      	b.n	80033da <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a66      	ldr	r2, [pc, #408]	; (8002f4c <HAL_DMA_Init+0x1b8>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d04a      	beq.n	8002e4c <HAL_DMA_Init+0xb8>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a65      	ldr	r2, [pc, #404]	; (8002f50 <HAL_DMA_Init+0x1bc>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d045      	beq.n	8002e4c <HAL_DMA_Init+0xb8>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a63      	ldr	r2, [pc, #396]	; (8002f54 <HAL_DMA_Init+0x1c0>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d040      	beq.n	8002e4c <HAL_DMA_Init+0xb8>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a62      	ldr	r2, [pc, #392]	; (8002f58 <HAL_DMA_Init+0x1c4>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d03b      	beq.n	8002e4c <HAL_DMA_Init+0xb8>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a60      	ldr	r2, [pc, #384]	; (8002f5c <HAL_DMA_Init+0x1c8>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d036      	beq.n	8002e4c <HAL_DMA_Init+0xb8>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a5f      	ldr	r2, [pc, #380]	; (8002f60 <HAL_DMA_Init+0x1cc>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d031      	beq.n	8002e4c <HAL_DMA_Init+0xb8>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a5d      	ldr	r2, [pc, #372]	; (8002f64 <HAL_DMA_Init+0x1d0>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d02c      	beq.n	8002e4c <HAL_DMA_Init+0xb8>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a5c      	ldr	r2, [pc, #368]	; (8002f68 <HAL_DMA_Init+0x1d4>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d027      	beq.n	8002e4c <HAL_DMA_Init+0xb8>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a5a      	ldr	r2, [pc, #360]	; (8002f6c <HAL_DMA_Init+0x1d8>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d022      	beq.n	8002e4c <HAL_DMA_Init+0xb8>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a59      	ldr	r2, [pc, #356]	; (8002f70 <HAL_DMA_Init+0x1dc>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d01d      	beq.n	8002e4c <HAL_DMA_Init+0xb8>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a57      	ldr	r2, [pc, #348]	; (8002f74 <HAL_DMA_Init+0x1e0>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d018      	beq.n	8002e4c <HAL_DMA_Init+0xb8>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a56      	ldr	r2, [pc, #344]	; (8002f78 <HAL_DMA_Init+0x1e4>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d013      	beq.n	8002e4c <HAL_DMA_Init+0xb8>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a54      	ldr	r2, [pc, #336]	; (8002f7c <HAL_DMA_Init+0x1e8>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d00e      	beq.n	8002e4c <HAL_DMA_Init+0xb8>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a53      	ldr	r2, [pc, #332]	; (8002f80 <HAL_DMA_Init+0x1ec>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d009      	beq.n	8002e4c <HAL_DMA_Init+0xb8>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a51      	ldr	r2, [pc, #324]	; (8002f84 <HAL_DMA_Init+0x1f0>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d004      	beq.n	8002e4c <HAL_DMA_Init+0xb8>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a50      	ldr	r2, [pc, #320]	; (8002f88 <HAL_DMA_Init+0x1f4>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d101      	bne.n	8002e50 <HAL_DMA_Init+0xbc>
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e000      	b.n	8002e52 <HAL_DMA_Init+0xbe>
 8002e50:	2300      	movs	r3, #0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 813b 	beq.w	80030ce <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2202      	movs	r2, #2
 8002e64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a37      	ldr	r2, [pc, #220]	; (8002f4c <HAL_DMA_Init+0x1b8>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d04a      	beq.n	8002f08 <HAL_DMA_Init+0x174>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a36      	ldr	r2, [pc, #216]	; (8002f50 <HAL_DMA_Init+0x1bc>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d045      	beq.n	8002f08 <HAL_DMA_Init+0x174>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a34      	ldr	r2, [pc, #208]	; (8002f54 <HAL_DMA_Init+0x1c0>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d040      	beq.n	8002f08 <HAL_DMA_Init+0x174>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a33      	ldr	r2, [pc, #204]	; (8002f58 <HAL_DMA_Init+0x1c4>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d03b      	beq.n	8002f08 <HAL_DMA_Init+0x174>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a31      	ldr	r2, [pc, #196]	; (8002f5c <HAL_DMA_Init+0x1c8>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d036      	beq.n	8002f08 <HAL_DMA_Init+0x174>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a30      	ldr	r2, [pc, #192]	; (8002f60 <HAL_DMA_Init+0x1cc>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d031      	beq.n	8002f08 <HAL_DMA_Init+0x174>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a2e      	ldr	r2, [pc, #184]	; (8002f64 <HAL_DMA_Init+0x1d0>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d02c      	beq.n	8002f08 <HAL_DMA_Init+0x174>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a2d      	ldr	r2, [pc, #180]	; (8002f68 <HAL_DMA_Init+0x1d4>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d027      	beq.n	8002f08 <HAL_DMA_Init+0x174>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a2b      	ldr	r2, [pc, #172]	; (8002f6c <HAL_DMA_Init+0x1d8>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d022      	beq.n	8002f08 <HAL_DMA_Init+0x174>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a2a      	ldr	r2, [pc, #168]	; (8002f70 <HAL_DMA_Init+0x1dc>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d01d      	beq.n	8002f08 <HAL_DMA_Init+0x174>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a28      	ldr	r2, [pc, #160]	; (8002f74 <HAL_DMA_Init+0x1e0>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d018      	beq.n	8002f08 <HAL_DMA_Init+0x174>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a27      	ldr	r2, [pc, #156]	; (8002f78 <HAL_DMA_Init+0x1e4>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d013      	beq.n	8002f08 <HAL_DMA_Init+0x174>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a25      	ldr	r2, [pc, #148]	; (8002f7c <HAL_DMA_Init+0x1e8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d00e      	beq.n	8002f08 <HAL_DMA_Init+0x174>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a24      	ldr	r2, [pc, #144]	; (8002f80 <HAL_DMA_Init+0x1ec>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d009      	beq.n	8002f08 <HAL_DMA_Init+0x174>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a22      	ldr	r2, [pc, #136]	; (8002f84 <HAL_DMA_Init+0x1f0>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d004      	beq.n	8002f08 <HAL_DMA_Init+0x174>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a21      	ldr	r2, [pc, #132]	; (8002f88 <HAL_DMA_Init+0x1f4>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d108      	bne.n	8002f1a <HAL_DMA_Init+0x186>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0201 	bic.w	r2, r2, #1
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	e007      	b.n	8002f2a <HAL_DMA_Init+0x196>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0201 	bic.w	r2, r2, #1
 8002f28:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002f2a:	e02f      	b.n	8002f8c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f2c:	f7ff fd56 	bl	80029dc <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b05      	cmp	r3, #5
 8002f38:	d928      	bls.n	8002f8c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2203      	movs	r2, #3
 8002f44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e246      	b.n	80033da <HAL_DMA_Init+0x646>
 8002f4c:	40020010 	.word	0x40020010
 8002f50:	40020028 	.word	0x40020028
 8002f54:	40020040 	.word	0x40020040
 8002f58:	40020058 	.word	0x40020058
 8002f5c:	40020070 	.word	0x40020070
 8002f60:	40020088 	.word	0x40020088
 8002f64:	400200a0 	.word	0x400200a0
 8002f68:	400200b8 	.word	0x400200b8
 8002f6c:	40020410 	.word	0x40020410
 8002f70:	40020428 	.word	0x40020428
 8002f74:	40020440 	.word	0x40020440
 8002f78:	40020458 	.word	0x40020458
 8002f7c:	40020470 	.word	0x40020470
 8002f80:	40020488 	.word	0x40020488
 8002f84:	400204a0 	.word	0x400204a0
 8002f88:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1c8      	bne.n	8002f2c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	4b83      	ldr	r3, [pc, #524]	; (80031b4 <HAL_DMA_Init+0x420>)
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002fb2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fbe:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fca:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	2b04      	cmp	r3, #4
 8002fde:	d107      	bne.n	8002ff0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002ff0:	4b71      	ldr	r3, [pc, #452]	; (80031b8 <HAL_DMA_Init+0x424>)
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	4b71      	ldr	r3, [pc, #452]	; (80031bc <HAL_DMA_Init+0x428>)
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ffc:	d328      	bcc.n	8003050 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b28      	cmp	r3, #40	; 0x28
 8003004:	d903      	bls.n	800300e <HAL_DMA_Init+0x27a>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b2e      	cmp	r3, #46	; 0x2e
 800300c:	d917      	bls.n	800303e <HAL_DMA_Init+0x2aa>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2b3e      	cmp	r3, #62	; 0x3e
 8003014:	d903      	bls.n	800301e <HAL_DMA_Init+0x28a>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b42      	cmp	r3, #66	; 0x42
 800301c:	d90f      	bls.n	800303e <HAL_DMA_Init+0x2aa>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2b46      	cmp	r3, #70	; 0x46
 8003024:	d903      	bls.n	800302e <HAL_DMA_Init+0x29a>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b48      	cmp	r3, #72	; 0x48
 800302c:	d907      	bls.n	800303e <HAL_DMA_Init+0x2aa>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b4e      	cmp	r3, #78	; 0x4e
 8003034:	d905      	bls.n	8003042 <HAL_DMA_Init+0x2ae>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b52      	cmp	r3, #82	; 0x52
 800303c:	d801      	bhi.n	8003042 <HAL_DMA_Init+0x2ae>
 800303e:	2301      	movs	r3, #1
 8003040:	e000      	b.n	8003044 <HAL_DMA_Init+0x2b0>
 8003042:	2300      	movs	r3, #0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800304e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	f023 0307 	bic.w	r3, r3, #7
 8003066:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	4313      	orrs	r3, r2
 8003070:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	2b04      	cmp	r3, #4
 8003078:	d117      	bne.n	80030aa <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	4313      	orrs	r3, r2
 8003082:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00e      	beq.n	80030aa <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f001 f9b9 	bl	8004404 <DMA_CheckFifoParam>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d008      	beq.n	80030aa <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2240      	movs	r2, #64	; 0x40
 800309c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e197      	b.n	80033da <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f001 f8f4 	bl	80042a0 <DMA_CalcBaseAndBitshift>
 80030b8:	4603      	mov	r3, r0
 80030ba:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c0:	f003 031f 	and.w	r3, r3, #31
 80030c4:	223f      	movs	r2, #63	; 0x3f
 80030c6:	409a      	lsls	r2, r3
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	609a      	str	r2, [r3, #8]
 80030cc:	e0cd      	b.n	800326a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a3b      	ldr	r2, [pc, #236]	; (80031c0 <HAL_DMA_Init+0x42c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d022      	beq.n	800311e <HAL_DMA_Init+0x38a>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a39      	ldr	r2, [pc, #228]	; (80031c4 <HAL_DMA_Init+0x430>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d01d      	beq.n	800311e <HAL_DMA_Init+0x38a>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a38      	ldr	r2, [pc, #224]	; (80031c8 <HAL_DMA_Init+0x434>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d018      	beq.n	800311e <HAL_DMA_Init+0x38a>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a36      	ldr	r2, [pc, #216]	; (80031cc <HAL_DMA_Init+0x438>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d013      	beq.n	800311e <HAL_DMA_Init+0x38a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a35      	ldr	r2, [pc, #212]	; (80031d0 <HAL_DMA_Init+0x43c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d00e      	beq.n	800311e <HAL_DMA_Init+0x38a>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a33      	ldr	r2, [pc, #204]	; (80031d4 <HAL_DMA_Init+0x440>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d009      	beq.n	800311e <HAL_DMA_Init+0x38a>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a32      	ldr	r2, [pc, #200]	; (80031d8 <HAL_DMA_Init+0x444>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d004      	beq.n	800311e <HAL_DMA_Init+0x38a>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a30      	ldr	r2, [pc, #192]	; (80031dc <HAL_DMA_Init+0x448>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d101      	bne.n	8003122 <HAL_DMA_Init+0x38e>
 800311e:	2301      	movs	r3, #1
 8003120:	e000      	b.n	8003124 <HAL_DMA_Init+0x390>
 8003122:	2300      	movs	r3, #0
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 8097 	beq.w	8003258 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a24      	ldr	r2, [pc, #144]	; (80031c0 <HAL_DMA_Init+0x42c>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d021      	beq.n	8003178 <HAL_DMA_Init+0x3e4>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a22      	ldr	r2, [pc, #136]	; (80031c4 <HAL_DMA_Init+0x430>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d01c      	beq.n	8003178 <HAL_DMA_Init+0x3e4>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a21      	ldr	r2, [pc, #132]	; (80031c8 <HAL_DMA_Init+0x434>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d017      	beq.n	8003178 <HAL_DMA_Init+0x3e4>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a1f      	ldr	r2, [pc, #124]	; (80031cc <HAL_DMA_Init+0x438>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d012      	beq.n	8003178 <HAL_DMA_Init+0x3e4>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a1e      	ldr	r2, [pc, #120]	; (80031d0 <HAL_DMA_Init+0x43c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d00d      	beq.n	8003178 <HAL_DMA_Init+0x3e4>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a1c      	ldr	r2, [pc, #112]	; (80031d4 <HAL_DMA_Init+0x440>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d008      	beq.n	8003178 <HAL_DMA_Init+0x3e4>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a1b      	ldr	r2, [pc, #108]	; (80031d8 <HAL_DMA_Init+0x444>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d003      	beq.n	8003178 <HAL_DMA_Init+0x3e4>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a19      	ldr	r2, [pc, #100]	; (80031dc <HAL_DMA_Init+0x448>)
 8003176:	4293      	cmp	r3, r2
 8003178:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2202      	movs	r2, #2
 8003186:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	4b12      	ldr	r3, [pc, #72]	; (80031e0 <HAL_DMA_Init+0x44c>)
 8003196:	4013      	ands	r3, r2
 8003198:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	2b40      	cmp	r3, #64	; 0x40
 80031a0:	d020      	beq.n	80031e4 <HAL_DMA_Init+0x450>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	2b80      	cmp	r3, #128	; 0x80
 80031a8:	d102      	bne.n	80031b0 <HAL_DMA_Init+0x41c>
 80031aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80031ae:	e01a      	b.n	80031e6 <HAL_DMA_Init+0x452>
 80031b0:	2300      	movs	r3, #0
 80031b2:	e018      	b.n	80031e6 <HAL_DMA_Init+0x452>
 80031b4:	fe10803f 	.word	0xfe10803f
 80031b8:	5c001000 	.word	0x5c001000
 80031bc:	ffff0000 	.word	0xffff0000
 80031c0:	58025408 	.word	0x58025408
 80031c4:	5802541c 	.word	0x5802541c
 80031c8:	58025430 	.word	0x58025430
 80031cc:	58025444 	.word	0x58025444
 80031d0:	58025458 	.word	0x58025458
 80031d4:	5802546c 	.word	0x5802546c
 80031d8:	58025480 	.word	0x58025480
 80031dc:	58025494 	.word	0x58025494
 80031e0:	fffe000f 	.word	0xfffe000f
 80031e4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	68d2      	ldr	r2, [r2, #12]
 80031ea:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80031ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80031f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80031fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003204:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800320c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003214:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	4313      	orrs	r3, r2
 800321a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	461a      	mov	r2, r3
 800322a:	4b6e      	ldr	r3, [pc, #440]	; (80033e4 <HAL_DMA_Init+0x650>)
 800322c:	4413      	add	r3, r2
 800322e:	4a6e      	ldr	r2, [pc, #440]	; (80033e8 <HAL_DMA_Init+0x654>)
 8003230:	fba2 2303 	umull	r2, r3, r2, r3
 8003234:	091b      	lsrs	r3, r3, #4
 8003236:	009a      	lsls	r2, r3, #2
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f001 f82f 	bl	80042a0 <DMA_CalcBaseAndBitshift>
 8003242:	4603      	mov	r3, r0
 8003244:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324a:	f003 031f 	and.w	r3, r3, #31
 800324e:	2201      	movs	r2, #1
 8003250:	409a      	lsls	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	605a      	str	r2, [r3, #4]
 8003256:	e008      	b.n	800326a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2240      	movs	r2, #64	; 0x40
 800325c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2203      	movs	r2, #3
 8003262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e0b7      	b.n	80033da <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a5f      	ldr	r2, [pc, #380]	; (80033ec <HAL_DMA_Init+0x658>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d072      	beq.n	800335a <HAL_DMA_Init+0x5c6>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a5d      	ldr	r2, [pc, #372]	; (80033f0 <HAL_DMA_Init+0x65c>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d06d      	beq.n	800335a <HAL_DMA_Init+0x5c6>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a5c      	ldr	r2, [pc, #368]	; (80033f4 <HAL_DMA_Init+0x660>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d068      	beq.n	800335a <HAL_DMA_Init+0x5c6>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a5a      	ldr	r2, [pc, #360]	; (80033f8 <HAL_DMA_Init+0x664>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d063      	beq.n	800335a <HAL_DMA_Init+0x5c6>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a59      	ldr	r2, [pc, #356]	; (80033fc <HAL_DMA_Init+0x668>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d05e      	beq.n	800335a <HAL_DMA_Init+0x5c6>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a57      	ldr	r2, [pc, #348]	; (8003400 <HAL_DMA_Init+0x66c>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d059      	beq.n	800335a <HAL_DMA_Init+0x5c6>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a56      	ldr	r2, [pc, #344]	; (8003404 <HAL_DMA_Init+0x670>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d054      	beq.n	800335a <HAL_DMA_Init+0x5c6>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a54      	ldr	r2, [pc, #336]	; (8003408 <HAL_DMA_Init+0x674>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d04f      	beq.n	800335a <HAL_DMA_Init+0x5c6>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a53      	ldr	r2, [pc, #332]	; (800340c <HAL_DMA_Init+0x678>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d04a      	beq.n	800335a <HAL_DMA_Init+0x5c6>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a51      	ldr	r2, [pc, #324]	; (8003410 <HAL_DMA_Init+0x67c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d045      	beq.n	800335a <HAL_DMA_Init+0x5c6>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a50      	ldr	r2, [pc, #320]	; (8003414 <HAL_DMA_Init+0x680>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d040      	beq.n	800335a <HAL_DMA_Init+0x5c6>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a4e      	ldr	r2, [pc, #312]	; (8003418 <HAL_DMA_Init+0x684>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d03b      	beq.n	800335a <HAL_DMA_Init+0x5c6>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a4d      	ldr	r2, [pc, #308]	; (800341c <HAL_DMA_Init+0x688>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d036      	beq.n	800335a <HAL_DMA_Init+0x5c6>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a4b      	ldr	r2, [pc, #300]	; (8003420 <HAL_DMA_Init+0x68c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d031      	beq.n	800335a <HAL_DMA_Init+0x5c6>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a4a      	ldr	r2, [pc, #296]	; (8003424 <HAL_DMA_Init+0x690>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d02c      	beq.n	800335a <HAL_DMA_Init+0x5c6>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a48      	ldr	r2, [pc, #288]	; (8003428 <HAL_DMA_Init+0x694>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d027      	beq.n	800335a <HAL_DMA_Init+0x5c6>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a47      	ldr	r2, [pc, #284]	; (800342c <HAL_DMA_Init+0x698>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d022      	beq.n	800335a <HAL_DMA_Init+0x5c6>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a45      	ldr	r2, [pc, #276]	; (8003430 <HAL_DMA_Init+0x69c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d01d      	beq.n	800335a <HAL_DMA_Init+0x5c6>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a44      	ldr	r2, [pc, #272]	; (8003434 <HAL_DMA_Init+0x6a0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d018      	beq.n	800335a <HAL_DMA_Init+0x5c6>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a42      	ldr	r2, [pc, #264]	; (8003438 <HAL_DMA_Init+0x6a4>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d013      	beq.n	800335a <HAL_DMA_Init+0x5c6>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a41      	ldr	r2, [pc, #260]	; (800343c <HAL_DMA_Init+0x6a8>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d00e      	beq.n	800335a <HAL_DMA_Init+0x5c6>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a3f      	ldr	r2, [pc, #252]	; (8003440 <HAL_DMA_Init+0x6ac>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d009      	beq.n	800335a <HAL_DMA_Init+0x5c6>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a3e      	ldr	r2, [pc, #248]	; (8003444 <HAL_DMA_Init+0x6b0>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d004      	beq.n	800335a <HAL_DMA_Init+0x5c6>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a3c      	ldr	r2, [pc, #240]	; (8003448 <HAL_DMA_Init+0x6b4>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d101      	bne.n	800335e <HAL_DMA_Init+0x5ca>
 800335a:	2301      	movs	r3, #1
 800335c:	e000      	b.n	8003360 <HAL_DMA_Init+0x5cc>
 800335e:	2300      	movs	r3, #0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d032      	beq.n	80033ca <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f001 f8c9 	bl	80044fc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	2b80      	cmp	r3, #128	; 0x80
 8003370:	d102      	bne.n	8003378 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003380:	b2d2      	uxtb	r2, r2
 8003382:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800338c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d010      	beq.n	80033b8 <HAL_DMA_Init+0x624>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b08      	cmp	r3, #8
 800339c:	d80c      	bhi.n	80033b8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f001 f946 	bl	8004630 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80033b4:	605a      	str	r2, [r3, #4]
 80033b6:	e008      	b.n	80033ca <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	a7fdabf8 	.word	0xa7fdabf8
 80033e8:	cccccccd 	.word	0xcccccccd
 80033ec:	40020010 	.word	0x40020010
 80033f0:	40020028 	.word	0x40020028
 80033f4:	40020040 	.word	0x40020040
 80033f8:	40020058 	.word	0x40020058
 80033fc:	40020070 	.word	0x40020070
 8003400:	40020088 	.word	0x40020088
 8003404:	400200a0 	.word	0x400200a0
 8003408:	400200b8 	.word	0x400200b8
 800340c:	40020410 	.word	0x40020410
 8003410:	40020428 	.word	0x40020428
 8003414:	40020440 	.word	0x40020440
 8003418:	40020458 	.word	0x40020458
 800341c:	40020470 	.word	0x40020470
 8003420:	40020488 	.word	0x40020488
 8003424:	400204a0 	.word	0x400204a0
 8003428:	400204b8 	.word	0x400204b8
 800342c:	58025408 	.word	0x58025408
 8003430:	5802541c 	.word	0x5802541c
 8003434:	58025430 	.word	0x58025430
 8003438:	58025444 	.word	0x58025444
 800343c:	58025458 	.word	0x58025458
 8003440:	5802546c 	.word	0x5802546c
 8003444:	58025480 	.word	0x58025480
 8003448:	58025494 	.word	0x58025494

0800344c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b08a      	sub	sp, #40	; 0x28
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003454:	2300      	movs	r3, #0
 8003456:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003458:	4b67      	ldr	r3, [pc, #412]	; (80035f8 <HAL_DMA_IRQHandler+0x1ac>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a67      	ldr	r2, [pc, #412]	; (80035fc <HAL_DMA_IRQHandler+0x1b0>)
 800345e:	fba2 2303 	umull	r2, r3, r2, r3
 8003462:	0a9b      	lsrs	r3, r3, #10
 8003464:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003470:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003472:	6a3b      	ldr	r3, [r7, #32]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a5f      	ldr	r2, [pc, #380]	; (8003600 <HAL_DMA_IRQHandler+0x1b4>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d04a      	beq.n	800351e <HAL_DMA_IRQHandler+0xd2>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a5d      	ldr	r2, [pc, #372]	; (8003604 <HAL_DMA_IRQHandler+0x1b8>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d045      	beq.n	800351e <HAL_DMA_IRQHandler+0xd2>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a5c      	ldr	r2, [pc, #368]	; (8003608 <HAL_DMA_IRQHandler+0x1bc>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d040      	beq.n	800351e <HAL_DMA_IRQHandler+0xd2>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a5a      	ldr	r2, [pc, #360]	; (800360c <HAL_DMA_IRQHandler+0x1c0>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d03b      	beq.n	800351e <HAL_DMA_IRQHandler+0xd2>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a59      	ldr	r2, [pc, #356]	; (8003610 <HAL_DMA_IRQHandler+0x1c4>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d036      	beq.n	800351e <HAL_DMA_IRQHandler+0xd2>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a57      	ldr	r2, [pc, #348]	; (8003614 <HAL_DMA_IRQHandler+0x1c8>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d031      	beq.n	800351e <HAL_DMA_IRQHandler+0xd2>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a56      	ldr	r2, [pc, #344]	; (8003618 <HAL_DMA_IRQHandler+0x1cc>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d02c      	beq.n	800351e <HAL_DMA_IRQHandler+0xd2>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a54      	ldr	r2, [pc, #336]	; (800361c <HAL_DMA_IRQHandler+0x1d0>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d027      	beq.n	800351e <HAL_DMA_IRQHandler+0xd2>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a53      	ldr	r2, [pc, #332]	; (8003620 <HAL_DMA_IRQHandler+0x1d4>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d022      	beq.n	800351e <HAL_DMA_IRQHandler+0xd2>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a51      	ldr	r2, [pc, #324]	; (8003624 <HAL_DMA_IRQHandler+0x1d8>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d01d      	beq.n	800351e <HAL_DMA_IRQHandler+0xd2>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a50      	ldr	r2, [pc, #320]	; (8003628 <HAL_DMA_IRQHandler+0x1dc>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d018      	beq.n	800351e <HAL_DMA_IRQHandler+0xd2>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a4e      	ldr	r2, [pc, #312]	; (800362c <HAL_DMA_IRQHandler+0x1e0>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d013      	beq.n	800351e <HAL_DMA_IRQHandler+0xd2>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a4d      	ldr	r2, [pc, #308]	; (8003630 <HAL_DMA_IRQHandler+0x1e4>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d00e      	beq.n	800351e <HAL_DMA_IRQHandler+0xd2>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a4b      	ldr	r2, [pc, #300]	; (8003634 <HAL_DMA_IRQHandler+0x1e8>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d009      	beq.n	800351e <HAL_DMA_IRQHandler+0xd2>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a4a      	ldr	r2, [pc, #296]	; (8003638 <HAL_DMA_IRQHandler+0x1ec>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d004      	beq.n	800351e <HAL_DMA_IRQHandler+0xd2>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a48      	ldr	r2, [pc, #288]	; (800363c <HAL_DMA_IRQHandler+0x1f0>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d101      	bne.n	8003522 <HAL_DMA_IRQHandler+0xd6>
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <HAL_DMA_IRQHandler+0xd8>
 8003522:	2300      	movs	r3, #0
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 842b 	beq.w	8003d80 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352e:	f003 031f 	and.w	r3, r3, #31
 8003532:	2208      	movs	r2, #8
 8003534:	409a      	lsls	r2, r3
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	4013      	ands	r3, r2
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 80a2 	beq.w	8003684 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a2e      	ldr	r2, [pc, #184]	; (8003600 <HAL_DMA_IRQHandler+0x1b4>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d04a      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x194>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a2d      	ldr	r2, [pc, #180]	; (8003604 <HAL_DMA_IRQHandler+0x1b8>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d045      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x194>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a2b      	ldr	r2, [pc, #172]	; (8003608 <HAL_DMA_IRQHandler+0x1bc>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d040      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x194>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a2a      	ldr	r2, [pc, #168]	; (800360c <HAL_DMA_IRQHandler+0x1c0>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d03b      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x194>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a28      	ldr	r2, [pc, #160]	; (8003610 <HAL_DMA_IRQHandler+0x1c4>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d036      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x194>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a27      	ldr	r2, [pc, #156]	; (8003614 <HAL_DMA_IRQHandler+0x1c8>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d031      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x194>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a25      	ldr	r2, [pc, #148]	; (8003618 <HAL_DMA_IRQHandler+0x1cc>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d02c      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x194>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a24      	ldr	r2, [pc, #144]	; (800361c <HAL_DMA_IRQHandler+0x1d0>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d027      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x194>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a22      	ldr	r2, [pc, #136]	; (8003620 <HAL_DMA_IRQHandler+0x1d4>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d022      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x194>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a21      	ldr	r2, [pc, #132]	; (8003624 <HAL_DMA_IRQHandler+0x1d8>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d01d      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x194>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a1f      	ldr	r2, [pc, #124]	; (8003628 <HAL_DMA_IRQHandler+0x1dc>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d018      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x194>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a1e      	ldr	r2, [pc, #120]	; (800362c <HAL_DMA_IRQHandler+0x1e0>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d013      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x194>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a1c      	ldr	r2, [pc, #112]	; (8003630 <HAL_DMA_IRQHandler+0x1e4>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d00e      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x194>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a1b      	ldr	r2, [pc, #108]	; (8003634 <HAL_DMA_IRQHandler+0x1e8>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d009      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x194>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a19      	ldr	r2, [pc, #100]	; (8003638 <HAL_DMA_IRQHandler+0x1ec>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d004      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x194>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a18      	ldr	r2, [pc, #96]	; (800363c <HAL_DMA_IRQHandler+0x1f0>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d12f      	bne.n	8003640 <HAL_DMA_IRQHandler+0x1f4>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0304 	and.w	r3, r3, #4
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	bf14      	ite	ne
 80035ee:	2301      	movne	r3, #1
 80035f0:	2300      	moveq	r3, #0
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	e02e      	b.n	8003654 <HAL_DMA_IRQHandler+0x208>
 80035f6:	bf00      	nop
 80035f8:	24000000 	.word	0x24000000
 80035fc:	1b4e81b5 	.word	0x1b4e81b5
 8003600:	40020010 	.word	0x40020010
 8003604:	40020028 	.word	0x40020028
 8003608:	40020040 	.word	0x40020040
 800360c:	40020058 	.word	0x40020058
 8003610:	40020070 	.word	0x40020070
 8003614:	40020088 	.word	0x40020088
 8003618:	400200a0 	.word	0x400200a0
 800361c:	400200b8 	.word	0x400200b8
 8003620:	40020410 	.word	0x40020410
 8003624:	40020428 	.word	0x40020428
 8003628:	40020440 	.word	0x40020440
 800362c:	40020458 	.word	0x40020458
 8003630:	40020470 	.word	0x40020470
 8003634:	40020488 	.word	0x40020488
 8003638:	400204a0 	.word	0x400204a0
 800363c:	400204b8 	.word	0x400204b8
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0308 	and.w	r3, r3, #8
 800364a:	2b00      	cmp	r3, #0
 800364c:	bf14      	ite	ne
 800364e:	2301      	movne	r3, #1
 8003650:	2300      	moveq	r3, #0
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b00      	cmp	r3, #0
 8003656:	d015      	beq.n	8003684 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 0204 	bic.w	r2, r2, #4
 8003666:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366c:	f003 031f 	and.w	r3, r3, #31
 8003670:	2208      	movs	r2, #8
 8003672:	409a      	lsls	r2, r3
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367c:	f043 0201 	orr.w	r2, r3, #1
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003688:	f003 031f 	and.w	r3, r3, #31
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	fa22 f303 	lsr.w	r3, r2, r3
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d06e      	beq.n	8003778 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a69      	ldr	r2, [pc, #420]	; (8003844 <HAL_DMA_IRQHandler+0x3f8>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d04a      	beq.n	800373a <HAL_DMA_IRQHandler+0x2ee>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a67      	ldr	r2, [pc, #412]	; (8003848 <HAL_DMA_IRQHandler+0x3fc>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d045      	beq.n	800373a <HAL_DMA_IRQHandler+0x2ee>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a66      	ldr	r2, [pc, #408]	; (800384c <HAL_DMA_IRQHandler+0x400>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d040      	beq.n	800373a <HAL_DMA_IRQHandler+0x2ee>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a64      	ldr	r2, [pc, #400]	; (8003850 <HAL_DMA_IRQHandler+0x404>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d03b      	beq.n	800373a <HAL_DMA_IRQHandler+0x2ee>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a63      	ldr	r2, [pc, #396]	; (8003854 <HAL_DMA_IRQHandler+0x408>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d036      	beq.n	800373a <HAL_DMA_IRQHandler+0x2ee>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a61      	ldr	r2, [pc, #388]	; (8003858 <HAL_DMA_IRQHandler+0x40c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d031      	beq.n	800373a <HAL_DMA_IRQHandler+0x2ee>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a60      	ldr	r2, [pc, #384]	; (800385c <HAL_DMA_IRQHandler+0x410>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d02c      	beq.n	800373a <HAL_DMA_IRQHandler+0x2ee>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a5e      	ldr	r2, [pc, #376]	; (8003860 <HAL_DMA_IRQHandler+0x414>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d027      	beq.n	800373a <HAL_DMA_IRQHandler+0x2ee>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a5d      	ldr	r2, [pc, #372]	; (8003864 <HAL_DMA_IRQHandler+0x418>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d022      	beq.n	800373a <HAL_DMA_IRQHandler+0x2ee>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a5b      	ldr	r2, [pc, #364]	; (8003868 <HAL_DMA_IRQHandler+0x41c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d01d      	beq.n	800373a <HAL_DMA_IRQHandler+0x2ee>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a5a      	ldr	r2, [pc, #360]	; (800386c <HAL_DMA_IRQHandler+0x420>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d018      	beq.n	800373a <HAL_DMA_IRQHandler+0x2ee>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a58      	ldr	r2, [pc, #352]	; (8003870 <HAL_DMA_IRQHandler+0x424>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d013      	beq.n	800373a <HAL_DMA_IRQHandler+0x2ee>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a57      	ldr	r2, [pc, #348]	; (8003874 <HAL_DMA_IRQHandler+0x428>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d00e      	beq.n	800373a <HAL_DMA_IRQHandler+0x2ee>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a55      	ldr	r2, [pc, #340]	; (8003878 <HAL_DMA_IRQHandler+0x42c>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d009      	beq.n	800373a <HAL_DMA_IRQHandler+0x2ee>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a54      	ldr	r2, [pc, #336]	; (800387c <HAL_DMA_IRQHandler+0x430>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d004      	beq.n	800373a <HAL_DMA_IRQHandler+0x2ee>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a52      	ldr	r2, [pc, #328]	; (8003880 <HAL_DMA_IRQHandler+0x434>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d10a      	bne.n	8003750 <HAL_DMA_IRQHandler+0x304>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003744:	2b00      	cmp	r3, #0
 8003746:	bf14      	ite	ne
 8003748:	2301      	movne	r3, #1
 800374a:	2300      	moveq	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	e003      	b.n	8003758 <HAL_DMA_IRQHandler+0x30c>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2300      	movs	r3, #0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00d      	beq.n	8003778 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003760:	f003 031f 	and.w	r3, r3, #31
 8003764:	2201      	movs	r2, #1
 8003766:	409a      	lsls	r2, r3
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003770:	f043 0202 	orr.w	r2, r3, #2
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800377c:	f003 031f 	and.w	r3, r3, #31
 8003780:	2204      	movs	r2, #4
 8003782:	409a      	lsls	r2, r3
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	4013      	ands	r3, r2
 8003788:	2b00      	cmp	r3, #0
 800378a:	f000 808f 	beq.w	80038ac <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a2c      	ldr	r2, [pc, #176]	; (8003844 <HAL_DMA_IRQHandler+0x3f8>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d04a      	beq.n	800382e <HAL_DMA_IRQHandler+0x3e2>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a2a      	ldr	r2, [pc, #168]	; (8003848 <HAL_DMA_IRQHandler+0x3fc>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d045      	beq.n	800382e <HAL_DMA_IRQHandler+0x3e2>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a29      	ldr	r2, [pc, #164]	; (800384c <HAL_DMA_IRQHandler+0x400>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d040      	beq.n	800382e <HAL_DMA_IRQHandler+0x3e2>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a27      	ldr	r2, [pc, #156]	; (8003850 <HAL_DMA_IRQHandler+0x404>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d03b      	beq.n	800382e <HAL_DMA_IRQHandler+0x3e2>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a26      	ldr	r2, [pc, #152]	; (8003854 <HAL_DMA_IRQHandler+0x408>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d036      	beq.n	800382e <HAL_DMA_IRQHandler+0x3e2>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a24      	ldr	r2, [pc, #144]	; (8003858 <HAL_DMA_IRQHandler+0x40c>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d031      	beq.n	800382e <HAL_DMA_IRQHandler+0x3e2>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a23      	ldr	r2, [pc, #140]	; (800385c <HAL_DMA_IRQHandler+0x410>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d02c      	beq.n	800382e <HAL_DMA_IRQHandler+0x3e2>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a21      	ldr	r2, [pc, #132]	; (8003860 <HAL_DMA_IRQHandler+0x414>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d027      	beq.n	800382e <HAL_DMA_IRQHandler+0x3e2>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a20      	ldr	r2, [pc, #128]	; (8003864 <HAL_DMA_IRQHandler+0x418>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d022      	beq.n	800382e <HAL_DMA_IRQHandler+0x3e2>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a1e      	ldr	r2, [pc, #120]	; (8003868 <HAL_DMA_IRQHandler+0x41c>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d01d      	beq.n	800382e <HAL_DMA_IRQHandler+0x3e2>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a1d      	ldr	r2, [pc, #116]	; (800386c <HAL_DMA_IRQHandler+0x420>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d018      	beq.n	800382e <HAL_DMA_IRQHandler+0x3e2>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a1b      	ldr	r2, [pc, #108]	; (8003870 <HAL_DMA_IRQHandler+0x424>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d013      	beq.n	800382e <HAL_DMA_IRQHandler+0x3e2>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a1a      	ldr	r2, [pc, #104]	; (8003874 <HAL_DMA_IRQHandler+0x428>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d00e      	beq.n	800382e <HAL_DMA_IRQHandler+0x3e2>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a18      	ldr	r2, [pc, #96]	; (8003878 <HAL_DMA_IRQHandler+0x42c>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d009      	beq.n	800382e <HAL_DMA_IRQHandler+0x3e2>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a17      	ldr	r2, [pc, #92]	; (800387c <HAL_DMA_IRQHandler+0x430>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d004      	beq.n	800382e <HAL_DMA_IRQHandler+0x3e2>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a15      	ldr	r2, [pc, #84]	; (8003880 <HAL_DMA_IRQHandler+0x434>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d12a      	bne.n	8003884 <HAL_DMA_IRQHandler+0x438>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	bf14      	ite	ne
 800383c:	2301      	movne	r3, #1
 800383e:	2300      	moveq	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	e023      	b.n	800388c <HAL_DMA_IRQHandler+0x440>
 8003844:	40020010 	.word	0x40020010
 8003848:	40020028 	.word	0x40020028
 800384c:	40020040 	.word	0x40020040
 8003850:	40020058 	.word	0x40020058
 8003854:	40020070 	.word	0x40020070
 8003858:	40020088 	.word	0x40020088
 800385c:	400200a0 	.word	0x400200a0
 8003860:	400200b8 	.word	0x400200b8
 8003864:	40020410 	.word	0x40020410
 8003868:	40020428 	.word	0x40020428
 800386c:	40020440 	.word	0x40020440
 8003870:	40020458 	.word	0x40020458
 8003874:	40020470 	.word	0x40020470
 8003878:	40020488 	.word	0x40020488
 800387c:	400204a0 	.word	0x400204a0
 8003880:	400204b8 	.word	0x400204b8
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2300      	movs	r3, #0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00d      	beq.n	80038ac <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003894:	f003 031f 	and.w	r3, r3, #31
 8003898:	2204      	movs	r2, #4
 800389a:	409a      	lsls	r2, r3
 800389c:	6a3b      	ldr	r3, [r7, #32]
 800389e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a4:	f043 0204 	orr.w	r2, r3, #4
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b0:	f003 031f 	and.w	r3, r3, #31
 80038b4:	2210      	movs	r2, #16
 80038b6:	409a      	lsls	r2, r3
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	4013      	ands	r3, r2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 80a6 	beq.w	8003a0e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a85      	ldr	r2, [pc, #532]	; (8003adc <HAL_DMA_IRQHandler+0x690>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d04a      	beq.n	8003962 <HAL_DMA_IRQHandler+0x516>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a83      	ldr	r2, [pc, #524]	; (8003ae0 <HAL_DMA_IRQHandler+0x694>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d045      	beq.n	8003962 <HAL_DMA_IRQHandler+0x516>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a82      	ldr	r2, [pc, #520]	; (8003ae4 <HAL_DMA_IRQHandler+0x698>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d040      	beq.n	8003962 <HAL_DMA_IRQHandler+0x516>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a80      	ldr	r2, [pc, #512]	; (8003ae8 <HAL_DMA_IRQHandler+0x69c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d03b      	beq.n	8003962 <HAL_DMA_IRQHandler+0x516>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a7f      	ldr	r2, [pc, #508]	; (8003aec <HAL_DMA_IRQHandler+0x6a0>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d036      	beq.n	8003962 <HAL_DMA_IRQHandler+0x516>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a7d      	ldr	r2, [pc, #500]	; (8003af0 <HAL_DMA_IRQHandler+0x6a4>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d031      	beq.n	8003962 <HAL_DMA_IRQHandler+0x516>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a7c      	ldr	r2, [pc, #496]	; (8003af4 <HAL_DMA_IRQHandler+0x6a8>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d02c      	beq.n	8003962 <HAL_DMA_IRQHandler+0x516>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a7a      	ldr	r2, [pc, #488]	; (8003af8 <HAL_DMA_IRQHandler+0x6ac>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d027      	beq.n	8003962 <HAL_DMA_IRQHandler+0x516>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a79      	ldr	r2, [pc, #484]	; (8003afc <HAL_DMA_IRQHandler+0x6b0>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d022      	beq.n	8003962 <HAL_DMA_IRQHandler+0x516>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a77      	ldr	r2, [pc, #476]	; (8003b00 <HAL_DMA_IRQHandler+0x6b4>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d01d      	beq.n	8003962 <HAL_DMA_IRQHandler+0x516>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a76      	ldr	r2, [pc, #472]	; (8003b04 <HAL_DMA_IRQHandler+0x6b8>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d018      	beq.n	8003962 <HAL_DMA_IRQHandler+0x516>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a74      	ldr	r2, [pc, #464]	; (8003b08 <HAL_DMA_IRQHandler+0x6bc>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d013      	beq.n	8003962 <HAL_DMA_IRQHandler+0x516>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a73      	ldr	r2, [pc, #460]	; (8003b0c <HAL_DMA_IRQHandler+0x6c0>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d00e      	beq.n	8003962 <HAL_DMA_IRQHandler+0x516>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a71      	ldr	r2, [pc, #452]	; (8003b10 <HAL_DMA_IRQHandler+0x6c4>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d009      	beq.n	8003962 <HAL_DMA_IRQHandler+0x516>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a70      	ldr	r2, [pc, #448]	; (8003b14 <HAL_DMA_IRQHandler+0x6c8>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d004      	beq.n	8003962 <HAL_DMA_IRQHandler+0x516>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a6e      	ldr	r2, [pc, #440]	; (8003b18 <HAL_DMA_IRQHandler+0x6cc>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d10a      	bne.n	8003978 <HAL_DMA_IRQHandler+0x52c>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0308 	and.w	r3, r3, #8
 800396c:	2b00      	cmp	r3, #0
 800396e:	bf14      	ite	ne
 8003970:	2301      	movne	r3, #1
 8003972:	2300      	moveq	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	e009      	b.n	800398c <HAL_DMA_IRQHandler+0x540>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0304 	and.w	r3, r3, #4
 8003982:	2b00      	cmp	r3, #0
 8003984:	bf14      	ite	ne
 8003986:	2301      	movne	r3, #1
 8003988:	2300      	moveq	r3, #0
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	d03e      	beq.n	8003a0e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003994:	f003 031f 	and.w	r3, r3, #31
 8003998:	2210      	movs	r2, #16
 800399a:	409a      	lsls	r2, r3
 800399c:	6a3b      	ldr	r3, [r7, #32]
 800399e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d018      	beq.n	80039e0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d108      	bne.n	80039ce <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d024      	beq.n	8003a0e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	4798      	blx	r3
 80039cc:	e01f      	b.n	8003a0e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d01b      	beq.n	8003a0e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	4798      	blx	r3
 80039de:	e016      	b.n	8003a0e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d107      	bne.n	80039fe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 0208 	bic.w	r2, r2, #8
 80039fc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a12:	f003 031f 	and.w	r3, r3, #31
 8003a16:	2220      	movs	r2, #32
 8003a18:	409a      	lsls	r2, r3
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f000 8110 	beq.w	8003c44 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a2c      	ldr	r2, [pc, #176]	; (8003adc <HAL_DMA_IRQHandler+0x690>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d04a      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x678>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a2b      	ldr	r2, [pc, #172]	; (8003ae0 <HAL_DMA_IRQHandler+0x694>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d045      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x678>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a29      	ldr	r2, [pc, #164]	; (8003ae4 <HAL_DMA_IRQHandler+0x698>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d040      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x678>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a28      	ldr	r2, [pc, #160]	; (8003ae8 <HAL_DMA_IRQHandler+0x69c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d03b      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x678>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a26      	ldr	r2, [pc, #152]	; (8003aec <HAL_DMA_IRQHandler+0x6a0>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d036      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x678>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a25      	ldr	r2, [pc, #148]	; (8003af0 <HAL_DMA_IRQHandler+0x6a4>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d031      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x678>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a23      	ldr	r2, [pc, #140]	; (8003af4 <HAL_DMA_IRQHandler+0x6a8>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d02c      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x678>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a22      	ldr	r2, [pc, #136]	; (8003af8 <HAL_DMA_IRQHandler+0x6ac>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d027      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x678>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a20      	ldr	r2, [pc, #128]	; (8003afc <HAL_DMA_IRQHandler+0x6b0>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d022      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x678>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a1f      	ldr	r2, [pc, #124]	; (8003b00 <HAL_DMA_IRQHandler+0x6b4>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d01d      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x678>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a1d      	ldr	r2, [pc, #116]	; (8003b04 <HAL_DMA_IRQHandler+0x6b8>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d018      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x678>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a1c      	ldr	r2, [pc, #112]	; (8003b08 <HAL_DMA_IRQHandler+0x6bc>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d013      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x678>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a1a      	ldr	r2, [pc, #104]	; (8003b0c <HAL_DMA_IRQHandler+0x6c0>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d00e      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x678>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a19      	ldr	r2, [pc, #100]	; (8003b10 <HAL_DMA_IRQHandler+0x6c4>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d009      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x678>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a17      	ldr	r2, [pc, #92]	; (8003b14 <HAL_DMA_IRQHandler+0x6c8>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d004      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x678>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a16      	ldr	r2, [pc, #88]	; (8003b18 <HAL_DMA_IRQHandler+0x6cc>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d12b      	bne.n	8003b1c <HAL_DMA_IRQHandler+0x6d0>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0310 	and.w	r3, r3, #16
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	bf14      	ite	ne
 8003ad2:	2301      	movne	r3, #1
 8003ad4:	2300      	moveq	r3, #0
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	e02a      	b.n	8003b30 <HAL_DMA_IRQHandler+0x6e4>
 8003ada:	bf00      	nop
 8003adc:	40020010 	.word	0x40020010
 8003ae0:	40020028 	.word	0x40020028
 8003ae4:	40020040 	.word	0x40020040
 8003ae8:	40020058 	.word	0x40020058
 8003aec:	40020070 	.word	0x40020070
 8003af0:	40020088 	.word	0x40020088
 8003af4:	400200a0 	.word	0x400200a0
 8003af8:	400200b8 	.word	0x400200b8
 8003afc:	40020410 	.word	0x40020410
 8003b00:	40020428 	.word	0x40020428
 8003b04:	40020440 	.word	0x40020440
 8003b08:	40020458 	.word	0x40020458
 8003b0c:	40020470 	.word	0x40020470
 8003b10:	40020488 	.word	0x40020488
 8003b14:	400204a0 	.word	0x400204a0
 8003b18:	400204b8 	.word	0x400204b8
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	bf14      	ite	ne
 8003b2a:	2301      	movne	r3, #1
 8003b2c:	2300      	moveq	r3, #0
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 8087 	beq.w	8003c44 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b3a:	f003 031f 	and.w	r3, r3, #31
 8003b3e:	2220      	movs	r2, #32
 8003b40:	409a      	lsls	r2, r3
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	d139      	bne.n	8003bc6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 0216 	bic.w	r2, r2, #22
 8003b60:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	695a      	ldr	r2, [r3, #20]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b70:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d103      	bne.n	8003b82 <HAL_DMA_IRQHandler+0x736>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d007      	beq.n	8003b92 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0208 	bic.w	r2, r2, #8
 8003b90:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b96:	f003 031f 	and.w	r3, r3, #31
 8003b9a:	223f      	movs	r2, #63	; 0x3f
 8003b9c:	409a      	lsls	r2, r3
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 834a 	beq.w	8004250 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	4798      	blx	r3
          }
          return;
 8003bc4:	e344      	b.n	8004250 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d018      	beq.n	8003c06 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d108      	bne.n	8003bf4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d02c      	beq.n	8003c44 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	4798      	blx	r3
 8003bf2:	e027      	b.n	8003c44 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d023      	beq.n	8003c44 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	4798      	blx	r3
 8003c04:	e01e      	b.n	8003c44 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10f      	bne.n	8003c34 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 0210 	bic.w	r2, r2, #16
 8003c22:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d003      	beq.n	8003c44 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 8306 	beq.w	800425a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 8088 	beq.w	8003d6c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2204      	movs	r2, #4
 8003c60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a7a      	ldr	r2, [pc, #488]	; (8003e54 <HAL_DMA_IRQHandler+0xa08>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d04a      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x8b8>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a79      	ldr	r2, [pc, #484]	; (8003e58 <HAL_DMA_IRQHandler+0xa0c>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d045      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x8b8>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a77      	ldr	r2, [pc, #476]	; (8003e5c <HAL_DMA_IRQHandler+0xa10>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d040      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x8b8>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a76      	ldr	r2, [pc, #472]	; (8003e60 <HAL_DMA_IRQHandler+0xa14>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d03b      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x8b8>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a74      	ldr	r2, [pc, #464]	; (8003e64 <HAL_DMA_IRQHandler+0xa18>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d036      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x8b8>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a73      	ldr	r2, [pc, #460]	; (8003e68 <HAL_DMA_IRQHandler+0xa1c>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d031      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x8b8>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a71      	ldr	r2, [pc, #452]	; (8003e6c <HAL_DMA_IRQHandler+0xa20>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d02c      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x8b8>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a70      	ldr	r2, [pc, #448]	; (8003e70 <HAL_DMA_IRQHandler+0xa24>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d027      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x8b8>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a6e      	ldr	r2, [pc, #440]	; (8003e74 <HAL_DMA_IRQHandler+0xa28>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d022      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x8b8>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a6d      	ldr	r2, [pc, #436]	; (8003e78 <HAL_DMA_IRQHandler+0xa2c>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d01d      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x8b8>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a6b      	ldr	r2, [pc, #428]	; (8003e7c <HAL_DMA_IRQHandler+0xa30>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d018      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x8b8>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a6a      	ldr	r2, [pc, #424]	; (8003e80 <HAL_DMA_IRQHandler+0xa34>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d013      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x8b8>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a68      	ldr	r2, [pc, #416]	; (8003e84 <HAL_DMA_IRQHandler+0xa38>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d00e      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x8b8>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a67      	ldr	r2, [pc, #412]	; (8003e88 <HAL_DMA_IRQHandler+0xa3c>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d009      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x8b8>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a65      	ldr	r2, [pc, #404]	; (8003e8c <HAL_DMA_IRQHandler+0xa40>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d004      	beq.n	8003d04 <HAL_DMA_IRQHandler+0x8b8>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a64      	ldr	r2, [pc, #400]	; (8003e90 <HAL_DMA_IRQHandler+0xa44>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d108      	bne.n	8003d16 <HAL_DMA_IRQHandler+0x8ca>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0201 	bic.w	r2, r2, #1
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	e007      	b.n	8003d26 <HAL_DMA_IRQHandler+0x8da>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0201 	bic.w	r2, r2, #1
 8003d24:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	60fb      	str	r3, [r7, #12]
 8003d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d307      	bcc.n	8003d42 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1f2      	bne.n	8003d26 <HAL_DMA_IRQHandler+0x8da>
 8003d40:	e000      	b.n	8003d44 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003d42:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d004      	beq.n	8003d64 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2203      	movs	r2, #3
 8003d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003d62:	e003      	b.n	8003d6c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 8272 	beq.w	800425a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	4798      	blx	r3
 8003d7e:	e26c      	b.n	800425a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a43      	ldr	r2, [pc, #268]	; (8003e94 <HAL_DMA_IRQHandler+0xa48>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d022      	beq.n	8003dd0 <HAL_DMA_IRQHandler+0x984>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a42      	ldr	r2, [pc, #264]	; (8003e98 <HAL_DMA_IRQHandler+0xa4c>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d01d      	beq.n	8003dd0 <HAL_DMA_IRQHandler+0x984>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a40      	ldr	r2, [pc, #256]	; (8003e9c <HAL_DMA_IRQHandler+0xa50>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d018      	beq.n	8003dd0 <HAL_DMA_IRQHandler+0x984>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a3f      	ldr	r2, [pc, #252]	; (8003ea0 <HAL_DMA_IRQHandler+0xa54>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d013      	beq.n	8003dd0 <HAL_DMA_IRQHandler+0x984>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a3d      	ldr	r2, [pc, #244]	; (8003ea4 <HAL_DMA_IRQHandler+0xa58>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d00e      	beq.n	8003dd0 <HAL_DMA_IRQHandler+0x984>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a3c      	ldr	r2, [pc, #240]	; (8003ea8 <HAL_DMA_IRQHandler+0xa5c>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d009      	beq.n	8003dd0 <HAL_DMA_IRQHandler+0x984>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a3a      	ldr	r2, [pc, #232]	; (8003eac <HAL_DMA_IRQHandler+0xa60>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d004      	beq.n	8003dd0 <HAL_DMA_IRQHandler+0x984>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a39      	ldr	r2, [pc, #228]	; (8003eb0 <HAL_DMA_IRQHandler+0xa64>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d101      	bne.n	8003dd4 <HAL_DMA_IRQHandler+0x988>
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e000      	b.n	8003dd6 <HAL_DMA_IRQHandler+0x98a>
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f000 823f 	beq.w	800425a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de8:	f003 031f 	and.w	r3, r3, #31
 8003dec:	2204      	movs	r2, #4
 8003dee:	409a      	lsls	r2, r3
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	4013      	ands	r3, r2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 80cd 	beq.w	8003f94 <HAL_DMA_IRQHandler+0xb48>
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f000 80c7 	beq.w	8003f94 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e0a:	f003 031f 	and.w	r3, r3, #31
 8003e0e:	2204      	movs	r2, #4
 8003e10:	409a      	lsls	r2, r3
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d049      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d109      	bne.n	8003e3e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 8210 	beq.w	8004254 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e3c:	e20a      	b.n	8004254 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f000 8206 	beq.w	8004254 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e50:	e200      	b.n	8004254 <HAL_DMA_IRQHandler+0xe08>
 8003e52:	bf00      	nop
 8003e54:	40020010 	.word	0x40020010
 8003e58:	40020028 	.word	0x40020028
 8003e5c:	40020040 	.word	0x40020040
 8003e60:	40020058 	.word	0x40020058
 8003e64:	40020070 	.word	0x40020070
 8003e68:	40020088 	.word	0x40020088
 8003e6c:	400200a0 	.word	0x400200a0
 8003e70:	400200b8 	.word	0x400200b8
 8003e74:	40020410 	.word	0x40020410
 8003e78:	40020428 	.word	0x40020428
 8003e7c:	40020440 	.word	0x40020440
 8003e80:	40020458 	.word	0x40020458
 8003e84:	40020470 	.word	0x40020470
 8003e88:	40020488 	.word	0x40020488
 8003e8c:	400204a0 	.word	0x400204a0
 8003e90:	400204b8 	.word	0x400204b8
 8003e94:	58025408 	.word	0x58025408
 8003e98:	5802541c 	.word	0x5802541c
 8003e9c:	58025430 	.word	0x58025430
 8003ea0:	58025444 	.word	0x58025444
 8003ea4:	58025458 	.word	0x58025458
 8003ea8:	5802546c 	.word	0x5802546c
 8003eac:	58025480 	.word	0x58025480
 8003eb0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	f003 0320 	and.w	r3, r3, #32
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d160      	bne.n	8003f80 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a8c      	ldr	r2, [pc, #560]	; (80040f4 <HAL_DMA_IRQHandler+0xca8>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d04a      	beq.n	8003f5e <HAL_DMA_IRQHandler+0xb12>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a8a      	ldr	r2, [pc, #552]	; (80040f8 <HAL_DMA_IRQHandler+0xcac>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d045      	beq.n	8003f5e <HAL_DMA_IRQHandler+0xb12>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a89      	ldr	r2, [pc, #548]	; (80040fc <HAL_DMA_IRQHandler+0xcb0>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d040      	beq.n	8003f5e <HAL_DMA_IRQHandler+0xb12>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a87      	ldr	r2, [pc, #540]	; (8004100 <HAL_DMA_IRQHandler+0xcb4>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d03b      	beq.n	8003f5e <HAL_DMA_IRQHandler+0xb12>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a86      	ldr	r2, [pc, #536]	; (8004104 <HAL_DMA_IRQHandler+0xcb8>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d036      	beq.n	8003f5e <HAL_DMA_IRQHandler+0xb12>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a84      	ldr	r2, [pc, #528]	; (8004108 <HAL_DMA_IRQHandler+0xcbc>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d031      	beq.n	8003f5e <HAL_DMA_IRQHandler+0xb12>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a83      	ldr	r2, [pc, #524]	; (800410c <HAL_DMA_IRQHandler+0xcc0>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d02c      	beq.n	8003f5e <HAL_DMA_IRQHandler+0xb12>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a81      	ldr	r2, [pc, #516]	; (8004110 <HAL_DMA_IRQHandler+0xcc4>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d027      	beq.n	8003f5e <HAL_DMA_IRQHandler+0xb12>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a80      	ldr	r2, [pc, #512]	; (8004114 <HAL_DMA_IRQHandler+0xcc8>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d022      	beq.n	8003f5e <HAL_DMA_IRQHandler+0xb12>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a7e      	ldr	r2, [pc, #504]	; (8004118 <HAL_DMA_IRQHandler+0xccc>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d01d      	beq.n	8003f5e <HAL_DMA_IRQHandler+0xb12>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a7d      	ldr	r2, [pc, #500]	; (800411c <HAL_DMA_IRQHandler+0xcd0>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d018      	beq.n	8003f5e <HAL_DMA_IRQHandler+0xb12>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a7b      	ldr	r2, [pc, #492]	; (8004120 <HAL_DMA_IRQHandler+0xcd4>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d013      	beq.n	8003f5e <HAL_DMA_IRQHandler+0xb12>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a7a      	ldr	r2, [pc, #488]	; (8004124 <HAL_DMA_IRQHandler+0xcd8>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00e      	beq.n	8003f5e <HAL_DMA_IRQHandler+0xb12>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a78      	ldr	r2, [pc, #480]	; (8004128 <HAL_DMA_IRQHandler+0xcdc>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d009      	beq.n	8003f5e <HAL_DMA_IRQHandler+0xb12>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a77      	ldr	r2, [pc, #476]	; (800412c <HAL_DMA_IRQHandler+0xce0>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d004      	beq.n	8003f5e <HAL_DMA_IRQHandler+0xb12>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a75      	ldr	r2, [pc, #468]	; (8004130 <HAL_DMA_IRQHandler+0xce4>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d108      	bne.n	8003f70 <HAL_DMA_IRQHandler+0xb24>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 0208 	bic.w	r2, r2, #8
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	e007      	b.n	8003f80 <HAL_DMA_IRQHandler+0xb34>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 0204 	bic.w	r2, r2, #4
 8003f7e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f000 8165 	beq.w	8004254 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f92:	e15f      	b.n	8004254 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f98:	f003 031f 	and.w	r3, r3, #31
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	409a      	lsls	r2, r3
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 80c5 	beq.w	8004134 <HAL_DMA_IRQHandler+0xce8>
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 80bf 	beq.w	8004134 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fba:	f003 031f 	and.w	r3, r3, #31
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	409a      	lsls	r2, r3
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d018      	beq.n	8004002 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d109      	bne.n	8003fee <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 813a 	beq.w	8004258 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fec:	e134      	b.n	8004258 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 8130 	beq.w	8004258 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004000:	e12a      	b.n	8004258 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	f003 0320 	and.w	r3, r3, #32
 8004008:	2b00      	cmp	r3, #0
 800400a:	d168      	bne.n	80040de <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a38      	ldr	r2, [pc, #224]	; (80040f4 <HAL_DMA_IRQHandler+0xca8>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d04a      	beq.n	80040ac <HAL_DMA_IRQHandler+0xc60>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a37      	ldr	r2, [pc, #220]	; (80040f8 <HAL_DMA_IRQHandler+0xcac>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d045      	beq.n	80040ac <HAL_DMA_IRQHandler+0xc60>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a35      	ldr	r2, [pc, #212]	; (80040fc <HAL_DMA_IRQHandler+0xcb0>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d040      	beq.n	80040ac <HAL_DMA_IRQHandler+0xc60>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a34      	ldr	r2, [pc, #208]	; (8004100 <HAL_DMA_IRQHandler+0xcb4>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d03b      	beq.n	80040ac <HAL_DMA_IRQHandler+0xc60>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a32      	ldr	r2, [pc, #200]	; (8004104 <HAL_DMA_IRQHandler+0xcb8>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d036      	beq.n	80040ac <HAL_DMA_IRQHandler+0xc60>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a31      	ldr	r2, [pc, #196]	; (8004108 <HAL_DMA_IRQHandler+0xcbc>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d031      	beq.n	80040ac <HAL_DMA_IRQHandler+0xc60>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a2f      	ldr	r2, [pc, #188]	; (800410c <HAL_DMA_IRQHandler+0xcc0>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d02c      	beq.n	80040ac <HAL_DMA_IRQHandler+0xc60>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a2e      	ldr	r2, [pc, #184]	; (8004110 <HAL_DMA_IRQHandler+0xcc4>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d027      	beq.n	80040ac <HAL_DMA_IRQHandler+0xc60>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a2c      	ldr	r2, [pc, #176]	; (8004114 <HAL_DMA_IRQHandler+0xcc8>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d022      	beq.n	80040ac <HAL_DMA_IRQHandler+0xc60>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a2b      	ldr	r2, [pc, #172]	; (8004118 <HAL_DMA_IRQHandler+0xccc>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d01d      	beq.n	80040ac <HAL_DMA_IRQHandler+0xc60>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a29      	ldr	r2, [pc, #164]	; (800411c <HAL_DMA_IRQHandler+0xcd0>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d018      	beq.n	80040ac <HAL_DMA_IRQHandler+0xc60>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a28      	ldr	r2, [pc, #160]	; (8004120 <HAL_DMA_IRQHandler+0xcd4>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d013      	beq.n	80040ac <HAL_DMA_IRQHandler+0xc60>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a26      	ldr	r2, [pc, #152]	; (8004124 <HAL_DMA_IRQHandler+0xcd8>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d00e      	beq.n	80040ac <HAL_DMA_IRQHandler+0xc60>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a25      	ldr	r2, [pc, #148]	; (8004128 <HAL_DMA_IRQHandler+0xcdc>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d009      	beq.n	80040ac <HAL_DMA_IRQHandler+0xc60>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a23      	ldr	r2, [pc, #140]	; (800412c <HAL_DMA_IRQHandler+0xce0>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d004      	beq.n	80040ac <HAL_DMA_IRQHandler+0xc60>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a22      	ldr	r2, [pc, #136]	; (8004130 <HAL_DMA_IRQHandler+0xce4>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d108      	bne.n	80040be <HAL_DMA_IRQHandler+0xc72>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 0214 	bic.w	r2, r2, #20
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	e007      	b.n	80040ce <HAL_DMA_IRQHandler+0xc82>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 020a 	bic.w	r2, r2, #10
 80040cc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f000 80b8 	beq.w	8004258 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040f0:	e0b2      	b.n	8004258 <HAL_DMA_IRQHandler+0xe0c>
 80040f2:	bf00      	nop
 80040f4:	40020010 	.word	0x40020010
 80040f8:	40020028 	.word	0x40020028
 80040fc:	40020040 	.word	0x40020040
 8004100:	40020058 	.word	0x40020058
 8004104:	40020070 	.word	0x40020070
 8004108:	40020088 	.word	0x40020088
 800410c:	400200a0 	.word	0x400200a0
 8004110:	400200b8 	.word	0x400200b8
 8004114:	40020410 	.word	0x40020410
 8004118:	40020428 	.word	0x40020428
 800411c:	40020440 	.word	0x40020440
 8004120:	40020458 	.word	0x40020458
 8004124:	40020470 	.word	0x40020470
 8004128:	40020488 	.word	0x40020488
 800412c:	400204a0 	.word	0x400204a0
 8004130:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004138:	f003 031f 	and.w	r3, r3, #31
 800413c:	2208      	movs	r2, #8
 800413e:	409a      	lsls	r2, r3
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	4013      	ands	r3, r2
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 8088 	beq.w	800425a <HAL_DMA_IRQHandler+0xe0e>
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	f003 0308 	and.w	r3, r3, #8
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 8082 	beq.w	800425a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a41      	ldr	r2, [pc, #260]	; (8004260 <HAL_DMA_IRQHandler+0xe14>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d04a      	beq.n	80041f6 <HAL_DMA_IRQHandler+0xdaa>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a3f      	ldr	r2, [pc, #252]	; (8004264 <HAL_DMA_IRQHandler+0xe18>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d045      	beq.n	80041f6 <HAL_DMA_IRQHandler+0xdaa>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a3e      	ldr	r2, [pc, #248]	; (8004268 <HAL_DMA_IRQHandler+0xe1c>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d040      	beq.n	80041f6 <HAL_DMA_IRQHandler+0xdaa>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a3c      	ldr	r2, [pc, #240]	; (800426c <HAL_DMA_IRQHandler+0xe20>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d03b      	beq.n	80041f6 <HAL_DMA_IRQHandler+0xdaa>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a3b      	ldr	r2, [pc, #236]	; (8004270 <HAL_DMA_IRQHandler+0xe24>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d036      	beq.n	80041f6 <HAL_DMA_IRQHandler+0xdaa>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a39      	ldr	r2, [pc, #228]	; (8004274 <HAL_DMA_IRQHandler+0xe28>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d031      	beq.n	80041f6 <HAL_DMA_IRQHandler+0xdaa>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a38      	ldr	r2, [pc, #224]	; (8004278 <HAL_DMA_IRQHandler+0xe2c>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d02c      	beq.n	80041f6 <HAL_DMA_IRQHandler+0xdaa>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a36      	ldr	r2, [pc, #216]	; (800427c <HAL_DMA_IRQHandler+0xe30>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d027      	beq.n	80041f6 <HAL_DMA_IRQHandler+0xdaa>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a35      	ldr	r2, [pc, #212]	; (8004280 <HAL_DMA_IRQHandler+0xe34>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d022      	beq.n	80041f6 <HAL_DMA_IRQHandler+0xdaa>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a33      	ldr	r2, [pc, #204]	; (8004284 <HAL_DMA_IRQHandler+0xe38>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d01d      	beq.n	80041f6 <HAL_DMA_IRQHandler+0xdaa>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a32      	ldr	r2, [pc, #200]	; (8004288 <HAL_DMA_IRQHandler+0xe3c>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d018      	beq.n	80041f6 <HAL_DMA_IRQHandler+0xdaa>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a30      	ldr	r2, [pc, #192]	; (800428c <HAL_DMA_IRQHandler+0xe40>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d013      	beq.n	80041f6 <HAL_DMA_IRQHandler+0xdaa>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a2f      	ldr	r2, [pc, #188]	; (8004290 <HAL_DMA_IRQHandler+0xe44>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d00e      	beq.n	80041f6 <HAL_DMA_IRQHandler+0xdaa>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a2d      	ldr	r2, [pc, #180]	; (8004294 <HAL_DMA_IRQHandler+0xe48>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d009      	beq.n	80041f6 <HAL_DMA_IRQHandler+0xdaa>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a2c      	ldr	r2, [pc, #176]	; (8004298 <HAL_DMA_IRQHandler+0xe4c>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d004      	beq.n	80041f6 <HAL_DMA_IRQHandler+0xdaa>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a2a      	ldr	r2, [pc, #168]	; (800429c <HAL_DMA_IRQHandler+0xe50>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d108      	bne.n	8004208 <HAL_DMA_IRQHandler+0xdbc>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 021c 	bic.w	r2, r2, #28
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	e007      	b.n	8004218 <HAL_DMA_IRQHandler+0xdcc>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 020e 	bic.w	r2, r2, #14
 8004216:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800421c:	f003 031f 	and.w	r3, r3, #31
 8004220:	2201      	movs	r2, #1
 8004222:	409a      	lsls	r2, r3
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004242:	2b00      	cmp	r3, #0
 8004244:	d009      	beq.n	800425a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	4798      	blx	r3
 800424e:	e004      	b.n	800425a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004250:	bf00      	nop
 8004252:	e002      	b.n	800425a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004254:	bf00      	nop
 8004256:	e000      	b.n	800425a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004258:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800425a:	3728      	adds	r7, #40	; 0x28
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	40020010 	.word	0x40020010
 8004264:	40020028 	.word	0x40020028
 8004268:	40020040 	.word	0x40020040
 800426c:	40020058 	.word	0x40020058
 8004270:	40020070 	.word	0x40020070
 8004274:	40020088 	.word	0x40020088
 8004278:	400200a0 	.word	0x400200a0
 800427c:	400200b8 	.word	0x400200b8
 8004280:	40020410 	.word	0x40020410
 8004284:	40020428 	.word	0x40020428
 8004288:	40020440 	.word	0x40020440
 800428c:	40020458 	.word	0x40020458
 8004290:	40020470 	.word	0x40020470
 8004294:	40020488 	.word	0x40020488
 8004298:	400204a0 	.word	0x400204a0
 800429c:	400204b8 	.word	0x400204b8

080042a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a42      	ldr	r2, [pc, #264]	; (80043b8 <DMA_CalcBaseAndBitshift+0x118>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d04a      	beq.n	8004348 <DMA_CalcBaseAndBitshift+0xa8>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a41      	ldr	r2, [pc, #260]	; (80043bc <DMA_CalcBaseAndBitshift+0x11c>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d045      	beq.n	8004348 <DMA_CalcBaseAndBitshift+0xa8>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a3f      	ldr	r2, [pc, #252]	; (80043c0 <DMA_CalcBaseAndBitshift+0x120>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d040      	beq.n	8004348 <DMA_CalcBaseAndBitshift+0xa8>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a3e      	ldr	r2, [pc, #248]	; (80043c4 <DMA_CalcBaseAndBitshift+0x124>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d03b      	beq.n	8004348 <DMA_CalcBaseAndBitshift+0xa8>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a3c      	ldr	r2, [pc, #240]	; (80043c8 <DMA_CalcBaseAndBitshift+0x128>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d036      	beq.n	8004348 <DMA_CalcBaseAndBitshift+0xa8>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a3b      	ldr	r2, [pc, #236]	; (80043cc <DMA_CalcBaseAndBitshift+0x12c>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d031      	beq.n	8004348 <DMA_CalcBaseAndBitshift+0xa8>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a39      	ldr	r2, [pc, #228]	; (80043d0 <DMA_CalcBaseAndBitshift+0x130>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d02c      	beq.n	8004348 <DMA_CalcBaseAndBitshift+0xa8>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a38      	ldr	r2, [pc, #224]	; (80043d4 <DMA_CalcBaseAndBitshift+0x134>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d027      	beq.n	8004348 <DMA_CalcBaseAndBitshift+0xa8>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a36      	ldr	r2, [pc, #216]	; (80043d8 <DMA_CalcBaseAndBitshift+0x138>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d022      	beq.n	8004348 <DMA_CalcBaseAndBitshift+0xa8>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a35      	ldr	r2, [pc, #212]	; (80043dc <DMA_CalcBaseAndBitshift+0x13c>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d01d      	beq.n	8004348 <DMA_CalcBaseAndBitshift+0xa8>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a33      	ldr	r2, [pc, #204]	; (80043e0 <DMA_CalcBaseAndBitshift+0x140>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d018      	beq.n	8004348 <DMA_CalcBaseAndBitshift+0xa8>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a32      	ldr	r2, [pc, #200]	; (80043e4 <DMA_CalcBaseAndBitshift+0x144>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d013      	beq.n	8004348 <DMA_CalcBaseAndBitshift+0xa8>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a30      	ldr	r2, [pc, #192]	; (80043e8 <DMA_CalcBaseAndBitshift+0x148>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d00e      	beq.n	8004348 <DMA_CalcBaseAndBitshift+0xa8>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a2f      	ldr	r2, [pc, #188]	; (80043ec <DMA_CalcBaseAndBitshift+0x14c>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d009      	beq.n	8004348 <DMA_CalcBaseAndBitshift+0xa8>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a2d      	ldr	r2, [pc, #180]	; (80043f0 <DMA_CalcBaseAndBitshift+0x150>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d004      	beq.n	8004348 <DMA_CalcBaseAndBitshift+0xa8>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a2c      	ldr	r2, [pc, #176]	; (80043f4 <DMA_CalcBaseAndBitshift+0x154>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d101      	bne.n	800434c <DMA_CalcBaseAndBitshift+0xac>
 8004348:	2301      	movs	r3, #1
 800434a:	e000      	b.n	800434e <DMA_CalcBaseAndBitshift+0xae>
 800434c:	2300      	movs	r3, #0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d024      	beq.n	800439c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	b2db      	uxtb	r3, r3
 8004358:	3b10      	subs	r3, #16
 800435a:	4a27      	ldr	r2, [pc, #156]	; (80043f8 <DMA_CalcBaseAndBitshift+0x158>)
 800435c:	fba2 2303 	umull	r2, r3, r2, r3
 8004360:	091b      	lsrs	r3, r3, #4
 8004362:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f003 0307 	and.w	r3, r3, #7
 800436a:	4a24      	ldr	r2, [pc, #144]	; (80043fc <DMA_CalcBaseAndBitshift+0x15c>)
 800436c:	5cd3      	ldrb	r3, [r2, r3]
 800436e:	461a      	mov	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2b03      	cmp	r3, #3
 8004378:	d908      	bls.n	800438c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	461a      	mov	r2, r3
 8004380:	4b1f      	ldr	r3, [pc, #124]	; (8004400 <DMA_CalcBaseAndBitshift+0x160>)
 8004382:	4013      	ands	r3, r2
 8004384:	1d1a      	adds	r2, r3, #4
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	659a      	str	r2, [r3, #88]	; 0x58
 800438a:	e00d      	b.n	80043a8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	461a      	mov	r2, r3
 8004392:	4b1b      	ldr	r3, [pc, #108]	; (8004400 <DMA_CalcBaseAndBitshift+0x160>)
 8004394:	4013      	ands	r3, r2
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	6593      	str	r3, [r2, #88]	; 0x58
 800439a:	e005      	b.n	80043a8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3714      	adds	r7, #20
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr
 80043b8:	40020010 	.word	0x40020010
 80043bc:	40020028 	.word	0x40020028
 80043c0:	40020040 	.word	0x40020040
 80043c4:	40020058 	.word	0x40020058
 80043c8:	40020070 	.word	0x40020070
 80043cc:	40020088 	.word	0x40020088
 80043d0:	400200a0 	.word	0x400200a0
 80043d4:	400200b8 	.word	0x400200b8
 80043d8:	40020410 	.word	0x40020410
 80043dc:	40020428 	.word	0x40020428
 80043e0:	40020440 	.word	0x40020440
 80043e4:	40020458 	.word	0x40020458
 80043e8:	40020470 	.word	0x40020470
 80043ec:	40020488 	.word	0x40020488
 80043f0:	400204a0 	.word	0x400204a0
 80043f4:	400204b8 	.word	0x400204b8
 80043f8:	aaaaaaab 	.word	0xaaaaaaab
 80043fc:	08016cd8 	.word	0x08016cd8
 8004400:	fffffc00 	.word	0xfffffc00

08004404 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800440c:	2300      	movs	r3, #0
 800440e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d120      	bne.n	800445a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441c:	2b03      	cmp	r3, #3
 800441e:	d858      	bhi.n	80044d2 <DMA_CheckFifoParam+0xce>
 8004420:	a201      	add	r2, pc, #4	; (adr r2, 8004428 <DMA_CheckFifoParam+0x24>)
 8004422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004426:	bf00      	nop
 8004428:	08004439 	.word	0x08004439
 800442c:	0800444b 	.word	0x0800444b
 8004430:	08004439 	.word	0x08004439
 8004434:	080044d3 	.word	0x080044d3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d048      	beq.n	80044d6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004448:	e045      	b.n	80044d6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004452:	d142      	bne.n	80044da <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004458:	e03f      	b.n	80044da <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004462:	d123      	bne.n	80044ac <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004468:	2b03      	cmp	r3, #3
 800446a:	d838      	bhi.n	80044de <DMA_CheckFifoParam+0xda>
 800446c:	a201      	add	r2, pc, #4	; (adr r2, 8004474 <DMA_CheckFifoParam+0x70>)
 800446e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004472:	bf00      	nop
 8004474:	08004485 	.word	0x08004485
 8004478:	0800448b 	.word	0x0800448b
 800447c:	08004485 	.word	0x08004485
 8004480:	0800449d 	.word	0x0800449d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	73fb      	strb	r3, [r7, #15]
        break;
 8004488:	e030      	b.n	80044ec <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d025      	beq.n	80044e2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800449a:	e022      	b.n	80044e2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044a4:	d11f      	bne.n	80044e6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80044aa:	e01c      	b.n	80044e6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d902      	bls.n	80044ba <DMA_CheckFifoParam+0xb6>
 80044b4:	2b03      	cmp	r3, #3
 80044b6:	d003      	beq.n	80044c0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80044b8:	e018      	b.n	80044ec <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	73fb      	strb	r3, [r7, #15]
        break;
 80044be:	e015      	b.n	80044ec <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00e      	beq.n	80044ea <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	73fb      	strb	r3, [r7, #15]
    break;
 80044d0:	e00b      	b.n	80044ea <DMA_CheckFifoParam+0xe6>
        break;
 80044d2:	bf00      	nop
 80044d4:	e00a      	b.n	80044ec <DMA_CheckFifoParam+0xe8>
        break;
 80044d6:	bf00      	nop
 80044d8:	e008      	b.n	80044ec <DMA_CheckFifoParam+0xe8>
        break;
 80044da:	bf00      	nop
 80044dc:	e006      	b.n	80044ec <DMA_CheckFifoParam+0xe8>
        break;
 80044de:	bf00      	nop
 80044e0:	e004      	b.n	80044ec <DMA_CheckFifoParam+0xe8>
        break;
 80044e2:	bf00      	nop
 80044e4:	e002      	b.n	80044ec <DMA_CheckFifoParam+0xe8>
        break;
 80044e6:	bf00      	nop
 80044e8:	e000      	b.n	80044ec <DMA_CheckFifoParam+0xe8>
    break;
 80044ea:	bf00      	nop
    }
  }

  return status;
 80044ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3714      	adds	r7, #20
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop

080044fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a38      	ldr	r2, [pc, #224]	; (80045f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d022      	beq.n	800455a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a36      	ldr	r2, [pc, #216]	; (80045f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d01d      	beq.n	800455a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a35      	ldr	r2, [pc, #212]	; (80045f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d018      	beq.n	800455a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a33      	ldr	r2, [pc, #204]	; (80045fc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d013      	beq.n	800455a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a32      	ldr	r2, [pc, #200]	; (8004600 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d00e      	beq.n	800455a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a30      	ldr	r2, [pc, #192]	; (8004604 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d009      	beq.n	800455a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a2f      	ldr	r2, [pc, #188]	; (8004608 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d004      	beq.n	800455a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a2d      	ldr	r2, [pc, #180]	; (800460c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d101      	bne.n	800455e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800455a:	2301      	movs	r3, #1
 800455c:	e000      	b.n	8004560 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800455e:	2300      	movs	r3, #0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d01a      	beq.n	800459a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	b2db      	uxtb	r3, r3
 800456a:	3b08      	subs	r3, #8
 800456c:	4a28      	ldr	r2, [pc, #160]	; (8004610 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800456e:	fba2 2303 	umull	r2, r3, r2, r3
 8004572:	091b      	lsrs	r3, r3, #4
 8004574:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	4b26      	ldr	r3, [pc, #152]	; (8004614 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800457a:	4413      	add	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	461a      	mov	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a24      	ldr	r2, [pc, #144]	; (8004618 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004588:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f003 031f 	and.w	r3, r3, #31
 8004590:	2201      	movs	r2, #1
 8004592:	409a      	lsls	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004598:	e024      	b.n	80045e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	3b10      	subs	r3, #16
 80045a2:	4a1e      	ldr	r2, [pc, #120]	; (800461c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80045a4:	fba2 2303 	umull	r2, r3, r2, r3
 80045a8:	091b      	lsrs	r3, r3, #4
 80045aa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	4a1c      	ldr	r2, [pc, #112]	; (8004620 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d806      	bhi.n	80045c2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	4a1b      	ldr	r2, [pc, #108]	; (8004624 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d902      	bls.n	80045c2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	3308      	adds	r3, #8
 80045c0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	4b18      	ldr	r3, [pc, #96]	; (8004628 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80045c6:	4413      	add	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	461a      	mov	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a16      	ldr	r2, [pc, #88]	; (800462c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80045d4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f003 031f 	and.w	r3, r3, #31
 80045dc:	2201      	movs	r2, #1
 80045de:	409a      	lsls	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80045e4:	bf00      	nop
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	58025408 	.word	0x58025408
 80045f4:	5802541c 	.word	0x5802541c
 80045f8:	58025430 	.word	0x58025430
 80045fc:	58025444 	.word	0x58025444
 8004600:	58025458 	.word	0x58025458
 8004604:	5802546c 	.word	0x5802546c
 8004608:	58025480 	.word	0x58025480
 800460c:	58025494 	.word	0x58025494
 8004610:	cccccccd 	.word	0xcccccccd
 8004614:	16009600 	.word	0x16009600
 8004618:	58025880 	.word	0x58025880
 800461c:	aaaaaaab 	.word	0xaaaaaaab
 8004620:	400204b8 	.word	0x400204b8
 8004624:	4002040f 	.word	0x4002040f
 8004628:	10008200 	.word	0x10008200
 800462c:	40020880 	.word	0x40020880

08004630 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	b2db      	uxtb	r3, r3
 800463e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d04a      	beq.n	80046dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2b08      	cmp	r3, #8
 800464a:	d847      	bhi.n	80046dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a25      	ldr	r2, [pc, #148]	; (80046e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d022      	beq.n	800469c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a24      	ldr	r2, [pc, #144]	; (80046ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d01d      	beq.n	800469c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a22      	ldr	r2, [pc, #136]	; (80046f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d018      	beq.n	800469c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a21      	ldr	r2, [pc, #132]	; (80046f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d013      	beq.n	800469c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a1f      	ldr	r2, [pc, #124]	; (80046f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d00e      	beq.n	800469c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a1e      	ldr	r2, [pc, #120]	; (80046fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d009      	beq.n	800469c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a1c      	ldr	r2, [pc, #112]	; (8004700 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d004      	beq.n	800469c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a1b      	ldr	r2, [pc, #108]	; (8004704 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d101      	bne.n	80046a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800469c:	2301      	movs	r3, #1
 800469e:	e000      	b.n	80046a2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80046a0:	2300      	movs	r3, #0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00a      	beq.n	80046bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	4b17      	ldr	r3, [pc, #92]	; (8004708 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80046aa:	4413      	add	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	461a      	mov	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a15      	ldr	r2, [pc, #84]	; (800470c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80046b8:	671a      	str	r2, [r3, #112]	; 0x70
 80046ba:	e009      	b.n	80046d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	4b14      	ldr	r3, [pc, #80]	; (8004710 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80046c0:	4413      	add	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	461a      	mov	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a11      	ldr	r2, [pc, #68]	; (8004714 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80046ce:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	3b01      	subs	r3, #1
 80046d4:	2201      	movs	r2, #1
 80046d6:	409a      	lsls	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80046dc:	bf00      	nop
 80046de:	3714      	adds	r7, #20
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr
 80046e8:	58025408 	.word	0x58025408
 80046ec:	5802541c 	.word	0x5802541c
 80046f0:	58025430 	.word	0x58025430
 80046f4:	58025444 	.word	0x58025444
 80046f8:	58025458 	.word	0x58025458
 80046fc:	5802546c 	.word	0x5802546c
 8004700:	58025480 	.word	0x58025480
 8004704:	58025494 	.word	0x58025494
 8004708:	1600963f 	.word	0x1600963f
 800470c:	58025940 	.word	0x58025940
 8004710:	1000823f 	.word	0x1000823f
 8004714:	40020940 	.word	0x40020940

08004718 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e0c6      	b.n	80048b8 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800472e:	2b00      	cmp	r3, #0
 8004730:	d102      	bne.n	8004738 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7fc fb3c 	bl	8000db0 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2223      	movs	r2, #35	; 0x23
 800473c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800473e:	4b60      	ldr	r3, [pc, #384]	; (80048c0 <HAL_ETH_Init+0x1a8>)
 8004740:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004744:	4a5e      	ldr	r2, [pc, #376]	; (80048c0 <HAL_ETH_Init+0x1a8>)
 8004746:	f043 0302 	orr.w	r3, r3, #2
 800474a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800474e:	4b5c      	ldr	r3, [pc, #368]	; (80048c0 <HAL_ETH_Init+0x1a8>)
 8004750:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	60bb      	str	r3, [r7, #8]
 800475a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	7a1b      	ldrb	r3, [r3, #8]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d103      	bne.n	800476c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004764:	2000      	movs	r0, #0
 8004766:	f7fe f975 	bl	8002a54 <HAL_SYSCFG_ETHInterfaceSelect>
 800476a:	e003      	b.n	8004774 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800476c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004770:	f7fe f970 	bl	8002a54 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f042 0201 	orr.w	r2, r2, #1
 8004786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800478a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800478c:	f7fe f926 	bl	80029dc <HAL_GetTick>
 8004790:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004792:	e00f      	b.n	80047b4 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8004794:	f7fe f922 	bl	80029dc <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80047a2:	d907      	bls.n	80047b4 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2204      	movs	r2, #4
 80047a8:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	22e0      	movs	r2, #224	; 0xe0
 80047ae:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e081      	b.n	80048b8 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1e6      	bne.n	8004794 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 fac0 	bl	8004d4c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80047cc:	f003 fc36 	bl	800803c <HAL_RCC_GetHCLKFreq>
 80047d0:	4603      	mov	r3, r0
 80047d2:	4a3c      	ldr	r2, [pc, #240]	; (80048c4 <HAL_ETH_Init+0x1ac>)
 80047d4:	fba2 2303 	umull	r2, r3, r2, r3
 80047d8:	0c9a      	lsrs	r2, r3, #18
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	3a01      	subs	r2, #1
 80047e0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 fa13 	bl	8004c10 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004800:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004804:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	f003 0303 	and.w	r3, r3, #3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d007      	beq.n	8004822 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	22e0      	movs	r2, #224	; 0xe0
 800481c:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e04a      	b.n	80048b8 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	f241 1308 	movw	r3, #4360	; 0x1108
 800482a:	4413      	add	r3, r2
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	4b26      	ldr	r3, [pc, #152]	; (80048c8 <HAL_ETH_Init+0x1b0>)
 8004830:	4013      	ands	r3, r2
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	6952      	ldr	r2, [r2, #20]
 8004836:	0052      	lsls	r2, r2, #1
 8004838:	6879      	ldr	r1, [r7, #4]
 800483a:	6809      	ldr	r1, [r1, #0]
 800483c:	431a      	orrs	r2, r3
 800483e:	f241 1308 	movw	r3, #4360	; 0x1108
 8004842:	440b      	add	r3, r1
 8004844:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 fad8 	bl	8004dfc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 fb1c 	bl	8004e8a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	3305      	adds	r3, #5
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	021a      	lsls	r2, r3, #8
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	3304      	adds	r3, #4
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	4619      	mov	r1, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	3303      	adds	r3, #3
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	061a      	lsls	r2, r3, #24
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	3302      	adds	r3, #2
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	041b      	lsls	r3, r3, #16
 8004884:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	3301      	adds	r3, #1
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004890:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800489e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80048a0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2210      	movs	r2, #16
 80048ae:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2210      	movs	r2, #16
 80048b4:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	58024400 	.word	0x58024400
 80048c4:	431bde83 	.word	0x431bde83
 80048c8:	ffff8001 	.word	0xffff8001

080048cc <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80048de:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	791b      	ldrb	r3, [r3, #4]
 80048e4:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80048e6:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	7b1b      	ldrb	r3, [r3, #12]
 80048ec:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80048ee:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	7b5b      	ldrb	r3, [r3, #13]
 80048f4:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80048f6:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	7b9b      	ldrb	r3, [r3, #14]
 80048fc:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80048fe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	7bdb      	ldrb	r3, [r3, #15]
 8004904:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004906:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	7c12      	ldrb	r2, [r2, #16]
 800490c:	2a00      	cmp	r2, #0
 800490e:	d102      	bne.n	8004916 <ETH_SetMACConfig+0x4a>
 8004910:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004914:	e000      	b.n	8004918 <ETH_SetMACConfig+0x4c>
 8004916:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004918:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	7c52      	ldrb	r2, [r2, #17]
 800491e:	2a00      	cmp	r2, #0
 8004920:	d102      	bne.n	8004928 <ETH_SetMACConfig+0x5c>
 8004922:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004926:	e000      	b.n	800492a <ETH_SetMACConfig+0x5e>
 8004928:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800492a:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	7c9b      	ldrb	r3, [r3, #18]
 8004930:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004932:	431a      	orrs	r2, r3
                                macconf->Speed |
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004938:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800493e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	7f1b      	ldrb	r3, [r3, #28]
 8004944:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8004946:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	7f5b      	ldrb	r3, [r3, #29]
 800494c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800494e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	7f92      	ldrb	r2, [r2, #30]
 8004954:	2a00      	cmp	r2, #0
 8004956:	d102      	bne.n	800495e <ETH_SetMACConfig+0x92>
 8004958:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800495c:	e000      	b.n	8004960 <ETH_SetMACConfig+0x94>
 800495e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004960:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	7fdb      	ldrb	r3, [r3, #31]
 8004966:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004968:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004970:	2a00      	cmp	r2, #0
 8004972:	d102      	bne.n	800497a <ETH_SetMACConfig+0xae>
 8004974:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004978:	e000      	b.n	800497c <ETH_SetMACConfig+0xb0>
 800497a:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800497c:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8004982:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800498a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 800498c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8004992:	4313      	orrs	r3, r2
 8004994:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	4b56      	ldr	r3, [pc, #344]	; (8004af8 <ETH_SetMACConfig+0x22c>)
 800499e:	4013      	ands	r3, r2
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6812      	ldr	r2, [r2, #0]
 80049a4:	68f9      	ldr	r1, [r7, #12]
 80049a6:	430b      	orrs	r3, r1
 80049a8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ae:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80049b6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80049b8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80049c0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80049c2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80049ca:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80049cc:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80049ce:	683a      	ldr	r2, [r7, #0]
 80049d0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80049d4:	2a00      	cmp	r2, #0
 80049d6:	d102      	bne.n	80049de <ETH_SetMACConfig+0x112>
 80049d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80049dc:	e000      	b.n	80049e0 <ETH_SetMACConfig+0x114>
 80049de:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80049e0:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80049e6:	4313      	orrs	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	4b42      	ldr	r3, [pc, #264]	; (8004afc <ETH_SetMACConfig+0x230>)
 80049f2:	4013      	ands	r3, r2
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	6812      	ldr	r2, [r2, #0]
 80049f8:	68f9      	ldr	r1, [r7, #12]
 80049fa:	430b      	orrs	r3, r1
 80049fc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a04:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68da      	ldr	r2, [r3, #12]
 8004a14:	4b3a      	ldr	r3, [pc, #232]	; (8004b00 <ETH_SetMACConfig+0x234>)
 8004a16:	4013      	ands	r3, r2
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	6812      	ldr	r2, [r2, #0]
 8004a1c:	68f9      	ldr	r1, [r7, #12]
 8004a1e:	430b      	orrs	r3, r1
 8004a20:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004a28:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004a2e:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8004a30:	683a      	ldr	r2, [r7, #0]
 8004a32:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004a36:	2a00      	cmp	r2, #0
 8004a38:	d101      	bne.n	8004a3e <ETH_SetMACConfig+0x172>
 8004a3a:	2280      	movs	r2, #128	; 0x80
 8004a3c:	e000      	b.n	8004a40 <ETH_SetMACConfig+0x174>
 8004a3e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004a40:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a46:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a52:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004a56:	4013      	ands	r3, r2
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6812      	ldr	r2, [r2, #0]
 8004a5c:	68f9      	ldr	r1, [r7, #12]
 8004a5e:	430b      	orrs	r3, r1
 8004a60:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004a68:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004a70:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004a72:	4313      	orrs	r3, r2
 8004a74:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7e:	f023 0103 	bic.w	r1, r3, #3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004a96:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004ab2:	2a00      	cmp	r2, #0
 8004ab4:	d101      	bne.n	8004aba <ETH_SetMACConfig+0x1ee>
 8004ab6:	2240      	movs	r2, #64	; 0x40
 8004ab8:	e000      	b.n	8004abc <ETH_SetMACConfig+0x1f0>
 8004aba:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004abc:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004ac4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004ac6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004ace:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004adc:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004aec:	bf00      	nop
 8004aee:	3714      	adds	r7, #20
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	00048083 	.word	0x00048083
 8004afc:	c0f88000 	.word	0xc0f88000
 8004b00:	fffffef0 	.word	0xfffffef0

08004b04 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	4b38      	ldr	r3, [pc, #224]	; (8004bfc <ETH_SetDMAConfig+0xf8>)
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	6812      	ldr	r2, [r2, #0]
 8004b20:	6879      	ldr	r1, [r7, #4]
 8004b22:	6809      	ldr	r1, [r1, #0]
 8004b24:	431a      	orrs	r2, r3
 8004b26:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8004b2a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	791b      	ldrb	r3, [r3, #4]
 8004b30:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004b36:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	7b1b      	ldrb	r3, [r3, #12]
 8004b3c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	f241 0304 	movw	r3, #4100	; 0x1004
 8004b4a:	4413      	add	r3, r2
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	4b2c      	ldr	r3, [pc, #176]	; (8004c00 <ETH_SetDMAConfig+0xfc>)
 8004b50:	4013      	ands	r3, r2
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	6811      	ldr	r1, [r2, #0]
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	f241 0304 	movw	r3, #4100	; 0x1004
 8004b5e:	440b      	add	r3, r1
 8004b60:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	7b5b      	ldrb	r3, [r3, #13]
 8004b66:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	4b22      	ldr	r3, [pc, #136]	; (8004c04 <ETH_SetDMAConfig+0x100>)
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	6811      	ldr	r1, [r2, #0]
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	431a      	orrs	r2, r3
 8004b86:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8004b8a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	7d1b      	ldrb	r3, [r3, #20]
 8004b94:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004b96:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	7f5b      	ldrb	r3, [r3, #29]
 8004b9c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	f241 1304 	movw	r3, #4356	; 0x1104
 8004baa:	4413      	add	r3, r2
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	4b16      	ldr	r3, [pc, #88]	; (8004c08 <ETH_SetDMAConfig+0x104>)
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	6811      	ldr	r1, [r2, #0]
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	f241 1304 	movw	r3, #4356	; 0x1104
 8004bbe:	440b      	add	r3, r1
 8004bc0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	7f1b      	ldrb	r3, [r3, #28]
 8004bc6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	f241 1308 	movw	r3, #4360	; 0x1108
 8004bd8:	4413      	add	r3, r2
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	4b0b      	ldr	r3, [pc, #44]	; (8004c0c <ETH_SetDMAConfig+0x108>)
 8004bde:	4013      	ands	r3, r2
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	6811      	ldr	r1, [r2, #0]
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	431a      	orrs	r2, r3
 8004be8:	f241 1308 	movw	r3, #4360	; 0x1108
 8004bec:	440b      	add	r3, r1
 8004bee:	601a      	str	r2, [r3, #0]
}
 8004bf0:	bf00      	nop
 8004bf2:	3714      	adds	r7, #20
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	ffff87fd 	.word	0xffff87fd
 8004c00:	ffff2ffe 	.word	0xffff2ffe
 8004c04:	fffec000 	.word	0xfffec000
 8004c08:	ffc0efef 	.word	0xffc0efef
 8004c0c:	7fc0ffff 	.word	0x7fc0ffff

08004c10 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b0a4      	sub	sp, #144	; 0x90
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004c22:	2300      	movs	r3, #0
 8004c24:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004c34:	2301      	movs	r3, #1
 8004c36:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004c40:	2300      	movs	r3, #0
 8004c42:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004c46:	2301      	movs	r3, #1
 8004c48:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004c4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c50:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004c52:	2300      	movs	r3, #0
 8004c54:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004c62:	2300      	movs	r3, #0
 8004c64:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004c68:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004c6c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004c74:	2300      	movs	r3, #0
 8004c76:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004c84:	2300      	movs	r3, #0
 8004c86:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004c92:	2300      	movs	r3, #0
 8004c94:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004c96:	2300      	movs	r3, #0
 8004c98:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004ca8:	2320      	movs	r3, #32
 8004caa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004cba:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004cc0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004cc4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004ccc:	2302      	movs	r3, #2
 8004cce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004cea:	2300      	movs	r3, #0
 8004cec:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004cf4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7ff fde6 	bl	80048cc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004d00:	2301      	movs	r3, #1
 8004d02:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004d04:	2301      	movs	r3, #1
 8004d06:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004d12:	2300      	movs	r3, #0
 8004d14:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004d16:	2300      	movs	r3, #0
 8004d18:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004d1a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004d1e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004d20:	2300      	movs	r3, #0
 8004d22:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004d24:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004d28:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8004d30:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004d34:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004d36:	f107 0308 	add.w	r3, r7, #8
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f7ff fee1 	bl	8004b04 <ETH_SetDMAConfig>
}
 8004d42:	bf00      	nop
 8004d44:	3790      	adds	r7, #144	; 0x90
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
	...

08004d4c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004d5c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004d64:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004d66:	f003 f969 	bl	800803c <HAL_RCC_GetHCLKFreq>
 8004d6a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	4a1e      	ldr	r2, [pc, #120]	; (8004de8 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d908      	bls.n	8004d86 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	4a1d      	ldr	r2, [pc, #116]	; (8004dec <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d804      	bhi.n	8004d86 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	e027      	b.n	8004dd6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	4a18      	ldr	r2, [pc, #96]	; (8004dec <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d908      	bls.n	8004da0 <ETH_MAC_MDIO_ClkConfig+0x54>
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	4a17      	ldr	r2, [pc, #92]	; (8004df0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d204      	bcs.n	8004da0 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	e01a      	b.n	8004dd6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	4a13      	ldr	r2, [pc, #76]	; (8004df0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d303      	bcc.n	8004db0 <ETH_MAC_MDIO_ClkConfig+0x64>
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	4a12      	ldr	r2, [pc, #72]	; (8004df4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d911      	bls.n	8004dd4 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	4a10      	ldr	r2, [pc, #64]	; (8004df4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d908      	bls.n	8004dca <ETH_MAC_MDIO_ClkConfig+0x7e>
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	4a0f      	ldr	r2, [pc, #60]	; (8004df8 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d804      	bhi.n	8004dca <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dc6:	60fb      	str	r3, [r7, #12]
 8004dc8:	e005      	b.n	8004dd6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004dd0:	60fb      	str	r3, [r7, #12]
 8004dd2:	e000      	b.n	8004dd6 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004dd4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004de0:	bf00      	nop
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	01312cff 	.word	0x01312cff
 8004dec:	02160ebf 	.word	0x02160ebf
 8004df0:	03938700 	.word	0x03938700
 8004df4:	05f5e0ff 	.word	0x05f5e0ff
 8004df8:	08f0d17f 	.word	0x08f0d17f

08004dfc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004e04:	2300      	movs	r3, #0
 8004e06:	60fb      	str	r3, [r7, #12]
 8004e08:	e01d      	b.n	8004e46 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68d9      	ldr	r1, [r3, #12]
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	4613      	mov	r3, r2
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	4413      	add	r3, r2
 8004e16:	00db      	lsls	r3, r3, #3
 8004e18:	440b      	add	r3, r1
 8004e1a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	2200      	movs	r2, #0
 8004e26:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2200      	movs	r2, #0
 8004e32:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004e34:	68b9      	ldr	r1, [r7, #8]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	3206      	adds	r2, #6
 8004e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	3301      	adds	r3, #1
 8004e44:	60fb      	str	r3, [r7, #12]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2b03      	cmp	r3, #3
 8004e4a:	d9de      	bls.n	8004e0a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	f241 132c 	movw	r3, #4396	; 0x112c
 8004e5a:	4413      	add	r3, r2
 8004e5c:	2203      	movs	r2, #3
 8004e5e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	68d9      	ldr	r1, [r3, #12]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	f241 1314 	movw	r3, #4372	; 0x1114
 8004e6c:	4413      	add	r3, r2
 8004e6e:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68da      	ldr	r2, [r3, #12]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8004e7c:	601a      	str	r2, [r3, #0]
}
 8004e7e:	bf00      	nop
 8004e80:	3714      	adds	r7, #20
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b085      	sub	sp, #20
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004e92:	2300      	movs	r3, #0
 8004e94:	60fb      	str	r3, [r7, #12]
 8004e96:	e024      	b.n	8004ee2 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6919      	ldr	r1, [r3, #16]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	005b      	lsls	r3, r3, #1
 8004ea2:	4413      	add	r3, r2
 8004ea4:	00db      	lsls	r3, r3, #3
 8004ea6:	440b      	add	r3, r1
 8004ea8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	2200      	movs	r2, #0
 8004eae:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	6879      	ldr	r1, [r7, #4]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	3310      	adds	r3, #16
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	440b      	add	r3, r1
 8004eda:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	3301      	adds	r3, #1
 8004ee0:	60fb      	str	r3, [r7, #12]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2b03      	cmp	r3, #3
 8004ee6:	d9d7      	bls.n	8004e98 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	f241 1330 	movw	r3, #4400	; 0x1130
 8004f0e:	4413      	add	r3, r2
 8004f10:	2203      	movs	r2, #3
 8004f12:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6919      	ldr	r1, [r3, #16]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	f241 131c 	movw	r3, #4380	; 0x111c
 8004f20:	4413      	add	r3, r2
 8004f22:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	f241 1328 	movw	r3, #4392	; 0x1128
 8004f34:	4413      	add	r3, r2
 8004f36:	6019      	str	r1, [r3, #0]
}
 8004f38:	bf00      	nop
 8004f3a:	3714      	adds	r7, #20
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b089      	sub	sp, #36	; 0x24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004f52:	4b89      	ldr	r3, [pc, #548]	; (8005178 <HAL_GPIO_Init+0x234>)
 8004f54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f56:	e194      	b.n	8005282 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	2101      	movs	r1, #1
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	fa01 f303 	lsl.w	r3, r1, r3
 8004f64:	4013      	ands	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f000 8186 	beq.w	800527c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d00b      	beq.n	8004f90 <HAL_GPIO_Init+0x4c>
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d007      	beq.n	8004f90 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f84:	2b11      	cmp	r3, #17
 8004f86:	d003      	beq.n	8004f90 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	2b12      	cmp	r3, #18
 8004f8e:	d130      	bne.n	8004ff2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	005b      	lsls	r3, r3, #1
 8004f9a:	2203      	movs	r2, #3
 8004f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa0:	43db      	mvns	r3, r3
 8004fa2:	69ba      	ldr	r2, [r7, #24]
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	68da      	ldr	r2, [r3, #12]
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	005b      	lsls	r3, r3, #1
 8004fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	69ba      	ldr	r2, [r7, #24]
 8004fbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	fa02 f303 	lsl.w	r3, r2, r3
 8004fce:	43db      	mvns	r3, r3
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	091b      	lsrs	r3, r3, #4
 8004fdc:	f003 0201 	and.w	r2, r3, #1
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe6:	69ba      	ldr	r2, [r7, #24]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	005b      	lsls	r3, r3, #1
 8004ffc:	2203      	movs	r2, #3
 8004ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8005002:	43db      	mvns	r3, r3
 8005004:	69ba      	ldr	r2, [r7, #24]
 8005006:	4013      	ands	r3, r2
 8005008:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	689a      	ldr	r2, [r3, #8]
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	005b      	lsls	r3, r3, #1
 8005012:	fa02 f303 	lsl.w	r3, r2, r3
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	4313      	orrs	r3, r2
 800501a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	69ba      	ldr	r2, [r7, #24]
 8005020:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	2b02      	cmp	r3, #2
 8005028:	d003      	beq.n	8005032 <HAL_GPIO_Init+0xee>
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	2b12      	cmp	r3, #18
 8005030:	d123      	bne.n	800507a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	08da      	lsrs	r2, r3, #3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	3208      	adds	r2, #8
 800503a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800503e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	f003 0307 	and.w	r3, r3, #7
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	220f      	movs	r2, #15
 800504a:	fa02 f303 	lsl.w	r3, r2, r3
 800504e:	43db      	mvns	r3, r3
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	4013      	ands	r3, r2
 8005054:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	691a      	ldr	r2, [r3, #16]
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	f003 0307 	and.w	r3, r3, #7
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	fa02 f303 	lsl.w	r3, r2, r3
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	4313      	orrs	r3, r2
 800506a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	08da      	lsrs	r2, r3, #3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	3208      	adds	r2, #8
 8005074:	69b9      	ldr	r1, [r7, #24]
 8005076:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	005b      	lsls	r3, r3, #1
 8005084:	2203      	movs	r2, #3
 8005086:	fa02 f303 	lsl.w	r3, r2, r3
 800508a:	43db      	mvns	r3, r3
 800508c:	69ba      	ldr	r2, [r7, #24]
 800508e:	4013      	ands	r3, r2
 8005090:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f003 0203 	and.w	r2, r3, #3
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	fa02 f303 	lsl.w	r3, r2, r3
 80050a2:	69ba      	ldr	r2, [r7, #24]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f000 80e0 	beq.w	800527c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050bc:	4b2f      	ldr	r3, [pc, #188]	; (800517c <HAL_GPIO_Init+0x238>)
 80050be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050c2:	4a2e      	ldr	r2, [pc, #184]	; (800517c <HAL_GPIO_Init+0x238>)
 80050c4:	f043 0302 	orr.w	r3, r3, #2
 80050c8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80050cc:	4b2b      	ldr	r3, [pc, #172]	; (800517c <HAL_GPIO_Init+0x238>)
 80050ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	60fb      	str	r3, [r7, #12]
 80050d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050da:	4a29      	ldr	r2, [pc, #164]	; (8005180 <HAL_GPIO_Init+0x23c>)
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	089b      	lsrs	r3, r3, #2
 80050e0:	3302      	adds	r3, #2
 80050e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	f003 0303 	and.w	r3, r3, #3
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	220f      	movs	r2, #15
 80050f2:	fa02 f303 	lsl.w	r3, r2, r3
 80050f6:	43db      	mvns	r3, r3
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	4013      	ands	r3, r2
 80050fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a20      	ldr	r2, [pc, #128]	; (8005184 <HAL_GPIO_Init+0x240>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d052      	beq.n	80051ac <HAL_GPIO_Init+0x268>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a1f      	ldr	r2, [pc, #124]	; (8005188 <HAL_GPIO_Init+0x244>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d031      	beq.n	8005172 <HAL_GPIO_Init+0x22e>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a1e      	ldr	r2, [pc, #120]	; (800518c <HAL_GPIO_Init+0x248>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d02b      	beq.n	800516e <HAL_GPIO_Init+0x22a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a1d      	ldr	r2, [pc, #116]	; (8005190 <HAL_GPIO_Init+0x24c>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d025      	beq.n	800516a <HAL_GPIO_Init+0x226>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a1c      	ldr	r2, [pc, #112]	; (8005194 <HAL_GPIO_Init+0x250>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d01f      	beq.n	8005166 <HAL_GPIO_Init+0x222>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a1b      	ldr	r2, [pc, #108]	; (8005198 <HAL_GPIO_Init+0x254>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d019      	beq.n	8005162 <HAL_GPIO_Init+0x21e>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a1a      	ldr	r2, [pc, #104]	; (800519c <HAL_GPIO_Init+0x258>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d013      	beq.n	800515e <HAL_GPIO_Init+0x21a>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a19      	ldr	r2, [pc, #100]	; (80051a0 <HAL_GPIO_Init+0x25c>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d00d      	beq.n	800515a <HAL_GPIO_Init+0x216>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a18      	ldr	r2, [pc, #96]	; (80051a4 <HAL_GPIO_Init+0x260>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d007      	beq.n	8005156 <HAL_GPIO_Init+0x212>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a17      	ldr	r2, [pc, #92]	; (80051a8 <HAL_GPIO_Init+0x264>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d101      	bne.n	8005152 <HAL_GPIO_Init+0x20e>
 800514e:	2309      	movs	r3, #9
 8005150:	e02d      	b.n	80051ae <HAL_GPIO_Init+0x26a>
 8005152:	230a      	movs	r3, #10
 8005154:	e02b      	b.n	80051ae <HAL_GPIO_Init+0x26a>
 8005156:	2308      	movs	r3, #8
 8005158:	e029      	b.n	80051ae <HAL_GPIO_Init+0x26a>
 800515a:	2307      	movs	r3, #7
 800515c:	e027      	b.n	80051ae <HAL_GPIO_Init+0x26a>
 800515e:	2306      	movs	r3, #6
 8005160:	e025      	b.n	80051ae <HAL_GPIO_Init+0x26a>
 8005162:	2305      	movs	r3, #5
 8005164:	e023      	b.n	80051ae <HAL_GPIO_Init+0x26a>
 8005166:	2304      	movs	r3, #4
 8005168:	e021      	b.n	80051ae <HAL_GPIO_Init+0x26a>
 800516a:	2303      	movs	r3, #3
 800516c:	e01f      	b.n	80051ae <HAL_GPIO_Init+0x26a>
 800516e:	2302      	movs	r3, #2
 8005170:	e01d      	b.n	80051ae <HAL_GPIO_Init+0x26a>
 8005172:	2301      	movs	r3, #1
 8005174:	e01b      	b.n	80051ae <HAL_GPIO_Init+0x26a>
 8005176:	bf00      	nop
 8005178:	58000080 	.word	0x58000080
 800517c:	58024400 	.word	0x58024400
 8005180:	58000400 	.word	0x58000400
 8005184:	58020000 	.word	0x58020000
 8005188:	58020400 	.word	0x58020400
 800518c:	58020800 	.word	0x58020800
 8005190:	58020c00 	.word	0x58020c00
 8005194:	58021000 	.word	0x58021000
 8005198:	58021400 	.word	0x58021400
 800519c:	58021800 	.word	0x58021800
 80051a0:	58021c00 	.word	0x58021c00
 80051a4:	58022000 	.word	0x58022000
 80051a8:	58022400 	.word	0x58022400
 80051ac:	2300      	movs	r3, #0
 80051ae:	69fa      	ldr	r2, [r7, #28]
 80051b0:	f002 0203 	and.w	r2, r2, #3
 80051b4:	0092      	lsls	r2, r2, #2
 80051b6:	4093      	lsls	r3, r2
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051be:	4938      	ldr	r1, [pc, #224]	; (80052a0 <HAL_GPIO_Init+0x35c>)
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	089b      	lsrs	r3, r3, #2
 80051c4:	3302      	adds	r3, #2
 80051c6:	69ba      	ldr	r2, [r7, #24]
 80051c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	43db      	mvns	r3, r3
 80051d6:	69ba      	ldr	r2, [r7, #24]
 80051d8:	4013      	ands	r3, r2
 80051da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d003      	beq.n	80051f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	43db      	mvns	r3, r3
 8005200:	69ba      	ldr	r2, [r7, #24]
 8005202:	4013      	ands	r3, r2
 8005204:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d003      	beq.n	800521a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005212:	69ba      	ldr	r2, [r7, #24]
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	4313      	orrs	r3, r2
 8005218:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	43db      	mvns	r3, r3
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	4013      	ands	r3, r2
 8005230:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d003      	beq.n	8005246 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800523e:	69ba      	ldr	r2, [r7, #24]
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	4313      	orrs	r3, r2
 8005244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005246:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800524e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	43db      	mvns	r3, r3
 800525a:	69ba      	ldr	r2, [r7, #24]
 800525c:	4013      	ands	r3, r2
 800525e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d003      	beq.n	8005274 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	4313      	orrs	r3, r2
 8005272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005274:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	3301      	adds	r3, #1
 8005280:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	fa22 f303 	lsr.w	r3, r2, r3
 800528c:	2b00      	cmp	r3, #0
 800528e:	f47f ae63 	bne.w	8004f58 <HAL_GPIO_Init+0x14>
  }
}
 8005292:	bf00      	nop
 8005294:	bf00      	nop
 8005296:	3724      	adds	r7, #36	; 0x24
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	58000400 	.word	0x58000400

080052a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	460b      	mov	r3, r1
 80052ae:	807b      	strh	r3, [r7, #2]
 80052b0:	4613      	mov	r3, r2
 80052b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80052b4:	787b      	ldrb	r3, [r7, #1]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052ba:	887a      	ldrh	r2, [r7, #2]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80052c0:	e003      	b.n	80052ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80052c2:	887b      	ldrh	r3, [r7, #2]
 80052c4:	041a      	lsls	r2, r3, #16
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	619a      	str	r2, [r3, #24]
}
 80052ca:	bf00      	nop
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b082      	sub	sp, #8
 80052da:	af00      	add	r7, sp, #0
 80052dc:	4603      	mov	r3, r0
 80052de:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80052e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052e4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80052e8:	88fb      	ldrh	r3, [r7, #6]
 80052ea:	4013      	ands	r3, r2
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d008      	beq.n	8005302 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80052f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052f4:	88fb      	ldrh	r3, [r7, #6]
 80052f6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80052fa:	88fb      	ldrh	r3, [r7, #6]
 80052fc:	4618      	mov	r0, r3
 80052fe:	f000 f804 	bl	800530a <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005302:	bf00      	nop
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800530a:	b480      	push	{r7}
 800530c:	b083      	sub	sp, #12
 800530e:	af00      	add	r7, sp, #0
 8005310:	4603      	mov	r3, r0
 8005312:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8005320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005322:	b08f      	sub	sp, #60	; 0x3c
 8005324:	af0a      	add	r7, sp, #40	; 0x28
 8005326:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e054      	b.n	80053dc <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	d106      	bne.n	8005352 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f00c fb51 	bl	80119f4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2203      	movs	r2, #3
 8005356:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800535e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005362:	2b00      	cmp	r3, #0
 8005364:	d102      	bne.n	800536c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4618      	mov	r0, r3
 8005372:	f006 fda0 	bl	800beb6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	603b      	str	r3, [r7, #0]
 800537c:	687e      	ldr	r6, [r7, #4]
 800537e:	466d      	mov	r5, sp
 8005380:	f106 0410 	add.w	r4, r6, #16
 8005384:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005386:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005388:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800538a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800538c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005390:	e885 0003 	stmia.w	r5, {r0, r1}
 8005394:	1d33      	adds	r3, r6, #4
 8005396:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005398:	6838      	ldr	r0, [r7, #0]
 800539a:	f006 fd0d 	bl	800bdb8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2101      	movs	r1, #1
 80053a4:	4618      	mov	r0, r3
 80053a6:	f006 fd97 	bl	800bed8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	603b      	str	r3, [r7, #0]
 80053b0:	687e      	ldr	r6, [r7, #4]
 80053b2:	466d      	mov	r5, sp
 80053b4:	f106 0410 	add.w	r4, r6, #16
 80053b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80053c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80053c8:	1d33      	adds	r3, r6, #4
 80053ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053cc:	6838      	ldr	r0, [r7, #0]
 80053ce:	f006 fee1 	bl	800c194 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3714      	adds	r7, #20
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080053e4 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80053e4:	b590      	push	{r4, r7, lr}
 80053e6:	b089      	sub	sp, #36	; 0x24
 80053e8:	af04      	add	r7, sp, #16
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	4608      	mov	r0, r1
 80053ee:	4611      	mov	r1, r2
 80053f0:	461a      	mov	r2, r3
 80053f2:	4603      	mov	r3, r0
 80053f4:	70fb      	strb	r3, [r7, #3]
 80053f6:	460b      	mov	r3, r1
 80053f8:	70bb      	strb	r3, [r7, #2]
 80053fa:	4613      	mov	r3, r2
 80053fc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005404:	2b01      	cmp	r3, #1
 8005406:	d101      	bne.n	800540c <HAL_HCD_HC_Init+0x28>
 8005408:	2302      	movs	r3, #2
 800540a:	e076      	b.n	80054fa <HAL_HCD_HC_Init+0x116>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8005414:	78fb      	ldrb	r3, [r7, #3]
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	212c      	movs	r1, #44	; 0x2c
 800541a:	fb01 f303 	mul.w	r3, r1, r3
 800541e:	4413      	add	r3, r2
 8005420:	333d      	adds	r3, #61	; 0x3d
 8005422:	2200      	movs	r2, #0
 8005424:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8005426:	78fb      	ldrb	r3, [r7, #3]
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	212c      	movs	r1, #44	; 0x2c
 800542c:	fb01 f303 	mul.w	r3, r1, r3
 8005430:	4413      	add	r3, r2
 8005432:	3338      	adds	r3, #56	; 0x38
 8005434:	787a      	ldrb	r2, [r7, #1]
 8005436:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8005438:	78fb      	ldrb	r3, [r7, #3]
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	212c      	movs	r1, #44	; 0x2c
 800543e:	fb01 f303 	mul.w	r3, r1, r3
 8005442:	4413      	add	r3, r2
 8005444:	3340      	adds	r3, #64	; 0x40
 8005446:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005448:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800544a:	78fb      	ldrb	r3, [r7, #3]
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	212c      	movs	r1, #44	; 0x2c
 8005450:	fb01 f303 	mul.w	r3, r1, r3
 8005454:	4413      	add	r3, r2
 8005456:	3339      	adds	r3, #57	; 0x39
 8005458:	78fa      	ldrb	r2, [r7, #3]
 800545a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800545c:	78fb      	ldrb	r3, [r7, #3]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	212c      	movs	r1, #44	; 0x2c
 8005462:	fb01 f303 	mul.w	r3, r1, r3
 8005466:	4413      	add	r3, r2
 8005468:	333f      	adds	r3, #63	; 0x3f
 800546a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800546e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8005470:	78fb      	ldrb	r3, [r7, #3]
 8005472:	78ba      	ldrb	r2, [r7, #2]
 8005474:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005478:	b2d0      	uxtb	r0, r2
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	212c      	movs	r1, #44	; 0x2c
 800547e:	fb01 f303 	mul.w	r3, r1, r3
 8005482:	4413      	add	r3, r2
 8005484:	333a      	adds	r3, #58	; 0x3a
 8005486:	4602      	mov	r2, r0
 8005488:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800548a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800548e:	2b00      	cmp	r3, #0
 8005490:	da09      	bge.n	80054a6 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005492:	78fb      	ldrb	r3, [r7, #3]
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	212c      	movs	r1, #44	; 0x2c
 8005498:	fb01 f303 	mul.w	r3, r1, r3
 800549c:	4413      	add	r3, r2
 800549e:	333b      	adds	r3, #59	; 0x3b
 80054a0:	2201      	movs	r2, #1
 80054a2:	701a      	strb	r2, [r3, #0]
 80054a4:	e008      	b.n	80054b8 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80054a6:	78fb      	ldrb	r3, [r7, #3]
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	212c      	movs	r1, #44	; 0x2c
 80054ac:	fb01 f303 	mul.w	r3, r1, r3
 80054b0:	4413      	add	r3, r2
 80054b2:	333b      	adds	r3, #59	; 0x3b
 80054b4:	2200      	movs	r2, #0
 80054b6:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80054b8:	78fb      	ldrb	r3, [r7, #3]
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	212c      	movs	r1, #44	; 0x2c
 80054be:	fb01 f303 	mul.w	r3, r1, r3
 80054c2:	4413      	add	r3, r2
 80054c4:	333c      	adds	r3, #60	; 0x3c
 80054c6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80054ca:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6818      	ldr	r0, [r3, #0]
 80054d0:	787c      	ldrb	r4, [r7, #1]
 80054d2:	78ba      	ldrb	r2, [r7, #2]
 80054d4:	78f9      	ldrb	r1, [r7, #3]
 80054d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80054d8:	9302      	str	r3, [sp, #8]
 80054da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80054de:	9301      	str	r3, [sp, #4]
 80054e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	4623      	mov	r3, r4
 80054e8:	f006 ffa6 	bl	800c438 <USB_HC_Init>
 80054ec:	4603      	mov	r3, r0
 80054ee:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80054f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd90      	pop	{r4, r7, pc}

08005502 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005502:	b580      	push	{r7, lr}
 8005504:	b084      	sub	sp, #16
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
 800550a:	460b      	mov	r3, r1
 800550c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800550e:	2300      	movs	r3, #0
 8005510:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005518:	2b01      	cmp	r3, #1
 800551a:	d101      	bne.n	8005520 <HAL_HCD_HC_Halt+0x1e>
 800551c:	2302      	movs	r3, #2
 800551e:	e00f      	b.n	8005540 <HAL_HCD_HC_Halt+0x3e>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	78fa      	ldrb	r2, [r7, #3]
 800552e:	4611      	mov	r1, r2
 8005530:	4618      	mov	r0, r3
 8005532:	f007 f9e2 	bl	800c8fa <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800553e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005540:	4618      	mov	r0, r3
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	4608      	mov	r0, r1
 8005552:	4611      	mov	r1, r2
 8005554:	461a      	mov	r2, r3
 8005556:	4603      	mov	r3, r0
 8005558:	70fb      	strb	r3, [r7, #3]
 800555a:	460b      	mov	r3, r1
 800555c:	70bb      	strb	r3, [r7, #2]
 800555e:	4613      	mov	r3, r2
 8005560:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8005562:	78fb      	ldrb	r3, [r7, #3]
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	212c      	movs	r1, #44	; 0x2c
 8005568:	fb01 f303 	mul.w	r3, r1, r3
 800556c:	4413      	add	r3, r2
 800556e:	333b      	adds	r3, #59	; 0x3b
 8005570:	78ba      	ldrb	r2, [r7, #2]
 8005572:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005574:	78fb      	ldrb	r3, [r7, #3]
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	212c      	movs	r1, #44	; 0x2c
 800557a:	fb01 f303 	mul.w	r3, r1, r3
 800557e:	4413      	add	r3, r2
 8005580:	333f      	adds	r3, #63	; 0x3f
 8005582:	787a      	ldrb	r2, [r7, #1]
 8005584:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005586:	7c3b      	ldrb	r3, [r7, #16]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d112      	bne.n	80055b2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800558c:	78fb      	ldrb	r3, [r7, #3]
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	212c      	movs	r1, #44	; 0x2c
 8005592:	fb01 f303 	mul.w	r3, r1, r3
 8005596:	4413      	add	r3, r2
 8005598:	3342      	adds	r3, #66	; 0x42
 800559a:	2203      	movs	r2, #3
 800559c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800559e:	78fb      	ldrb	r3, [r7, #3]
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	212c      	movs	r1, #44	; 0x2c
 80055a4:	fb01 f303 	mul.w	r3, r1, r3
 80055a8:	4413      	add	r3, r2
 80055aa:	333d      	adds	r3, #61	; 0x3d
 80055ac:	7f3a      	ldrb	r2, [r7, #28]
 80055ae:	701a      	strb	r2, [r3, #0]
 80055b0:	e008      	b.n	80055c4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80055b2:	78fb      	ldrb	r3, [r7, #3]
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	212c      	movs	r1, #44	; 0x2c
 80055b8:	fb01 f303 	mul.w	r3, r1, r3
 80055bc:	4413      	add	r3, r2
 80055be:	3342      	adds	r3, #66	; 0x42
 80055c0:	2202      	movs	r2, #2
 80055c2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80055c4:	787b      	ldrb	r3, [r7, #1]
 80055c6:	2b03      	cmp	r3, #3
 80055c8:	f200 80c6 	bhi.w	8005758 <HAL_HCD_HC_SubmitRequest+0x210>
 80055cc:	a201      	add	r2, pc, #4	; (adr r2, 80055d4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80055ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d2:	bf00      	nop
 80055d4:	080055e5 	.word	0x080055e5
 80055d8:	08005745 	.word	0x08005745
 80055dc:	08005649 	.word	0x08005649
 80055e0:	080056c7 	.word	0x080056c7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80055e4:	7c3b      	ldrb	r3, [r7, #16]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	f040 80b8 	bne.w	800575c <HAL_HCD_HC_SubmitRequest+0x214>
 80055ec:	78bb      	ldrb	r3, [r7, #2]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f040 80b4 	bne.w	800575c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80055f4:	8b3b      	ldrh	r3, [r7, #24]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d108      	bne.n	800560c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80055fa:	78fb      	ldrb	r3, [r7, #3]
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	212c      	movs	r1, #44	; 0x2c
 8005600:	fb01 f303 	mul.w	r3, r1, r3
 8005604:	4413      	add	r3, r2
 8005606:	3355      	adds	r3, #85	; 0x55
 8005608:	2201      	movs	r2, #1
 800560a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800560c:	78fb      	ldrb	r3, [r7, #3]
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	212c      	movs	r1, #44	; 0x2c
 8005612:	fb01 f303 	mul.w	r3, r1, r3
 8005616:	4413      	add	r3, r2
 8005618:	3355      	adds	r3, #85	; 0x55
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d109      	bne.n	8005634 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005620:	78fb      	ldrb	r3, [r7, #3]
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	212c      	movs	r1, #44	; 0x2c
 8005626:	fb01 f303 	mul.w	r3, r1, r3
 800562a:	4413      	add	r3, r2
 800562c:	3342      	adds	r3, #66	; 0x42
 800562e:	2200      	movs	r2, #0
 8005630:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005632:	e093      	b.n	800575c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005634:	78fb      	ldrb	r3, [r7, #3]
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	212c      	movs	r1, #44	; 0x2c
 800563a:	fb01 f303 	mul.w	r3, r1, r3
 800563e:	4413      	add	r3, r2
 8005640:	3342      	adds	r3, #66	; 0x42
 8005642:	2202      	movs	r2, #2
 8005644:	701a      	strb	r2, [r3, #0]
      break;
 8005646:	e089      	b.n	800575c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8005648:	78bb      	ldrb	r3, [r7, #2]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d11d      	bne.n	800568a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800564e:	78fb      	ldrb	r3, [r7, #3]
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	212c      	movs	r1, #44	; 0x2c
 8005654:	fb01 f303 	mul.w	r3, r1, r3
 8005658:	4413      	add	r3, r2
 800565a:	3355      	adds	r3, #85	; 0x55
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d109      	bne.n	8005676 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005662:	78fb      	ldrb	r3, [r7, #3]
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	212c      	movs	r1, #44	; 0x2c
 8005668:	fb01 f303 	mul.w	r3, r1, r3
 800566c:	4413      	add	r3, r2
 800566e:	3342      	adds	r3, #66	; 0x42
 8005670:	2200      	movs	r2, #0
 8005672:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005674:	e073      	b.n	800575e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005676:	78fb      	ldrb	r3, [r7, #3]
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	212c      	movs	r1, #44	; 0x2c
 800567c:	fb01 f303 	mul.w	r3, r1, r3
 8005680:	4413      	add	r3, r2
 8005682:	3342      	adds	r3, #66	; 0x42
 8005684:	2202      	movs	r2, #2
 8005686:	701a      	strb	r2, [r3, #0]
      break;
 8005688:	e069      	b.n	800575e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800568a:	78fb      	ldrb	r3, [r7, #3]
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	212c      	movs	r1, #44	; 0x2c
 8005690:	fb01 f303 	mul.w	r3, r1, r3
 8005694:	4413      	add	r3, r2
 8005696:	3354      	adds	r3, #84	; 0x54
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d109      	bne.n	80056b2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800569e:	78fb      	ldrb	r3, [r7, #3]
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	212c      	movs	r1, #44	; 0x2c
 80056a4:	fb01 f303 	mul.w	r3, r1, r3
 80056a8:	4413      	add	r3, r2
 80056aa:	3342      	adds	r3, #66	; 0x42
 80056ac:	2200      	movs	r2, #0
 80056ae:	701a      	strb	r2, [r3, #0]
      break;
 80056b0:	e055      	b.n	800575e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80056b2:	78fb      	ldrb	r3, [r7, #3]
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	212c      	movs	r1, #44	; 0x2c
 80056b8:	fb01 f303 	mul.w	r3, r1, r3
 80056bc:	4413      	add	r3, r2
 80056be:	3342      	adds	r3, #66	; 0x42
 80056c0:	2202      	movs	r2, #2
 80056c2:	701a      	strb	r2, [r3, #0]
      break;
 80056c4:	e04b      	b.n	800575e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80056c6:	78bb      	ldrb	r3, [r7, #2]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d11d      	bne.n	8005708 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80056cc:	78fb      	ldrb	r3, [r7, #3]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	212c      	movs	r1, #44	; 0x2c
 80056d2:	fb01 f303 	mul.w	r3, r1, r3
 80056d6:	4413      	add	r3, r2
 80056d8:	3355      	adds	r3, #85	; 0x55
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d109      	bne.n	80056f4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80056e0:	78fb      	ldrb	r3, [r7, #3]
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	212c      	movs	r1, #44	; 0x2c
 80056e6:	fb01 f303 	mul.w	r3, r1, r3
 80056ea:	4413      	add	r3, r2
 80056ec:	3342      	adds	r3, #66	; 0x42
 80056ee:	2200      	movs	r2, #0
 80056f0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80056f2:	e034      	b.n	800575e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80056f4:	78fb      	ldrb	r3, [r7, #3]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	212c      	movs	r1, #44	; 0x2c
 80056fa:	fb01 f303 	mul.w	r3, r1, r3
 80056fe:	4413      	add	r3, r2
 8005700:	3342      	adds	r3, #66	; 0x42
 8005702:	2202      	movs	r2, #2
 8005704:	701a      	strb	r2, [r3, #0]
      break;
 8005706:	e02a      	b.n	800575e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005708:	78fb      	ldrb	r3, [r7, #3]
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	212c      	movs	r1, #44	; 0x2c
 800570e:	fb01 f303 	mul.w	r3, r1, r3
 8005712:	4413      	add	r3, r2
 8005714:	3354      	adds	r3, #84	; 0x54
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d109      	bne.n	8005730 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800571c:	78fb      	ldrb	r3, [r7, #3]
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	212c      	movs	r1, #44	; 0x2c
 8005722:	fb01 f303 	mul.w	r3, r1, r3
 8005726:	4413      	add	r3, r2
 8005728:	3342      	adds	r3, #66	; 0x42
 800572a:	2200      	movs	r2, #0
 800572c:	701a      	strb	r2, [r3, #0]
      break;
 800572e:	e016      	b.n	800575e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005730:	78fb      	ldrb	r3, [r7, #3]
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	212c      	movs	r1, #44	; 0x2c
 8005736:	fb01 f303 	mul.w	r3, r1, r3
 800573a:	4413      	add	r3, r2
 800573c:	3342      	adds	r3, #66	; 0x42
 800573e:	2202      	movs	r2, #2
 8005740:	701a      	strb	r2, [r3, #0]
      break;
 8005742:	e00c      	b.n	800575e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005744:	78fb      	ldrb	r3, [r7, #3]
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	212c      	movs	r1, #44	; 0x2c
 800574a:	fb01 f303 	mul.w	r3, r1, r3
 800574e:	4413      	add	r3, r2
 8005750:	3342      	adds	r3, #66	; 0x42
 8005752:	2200      	movs	r2, #0
 8005754:	701a      	strb	r2, [r3, #0]
      break;
 8005756:	e002      	b.n	800575e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8005758:	bf00      	nop
 800575a:	e000      	b.n	800575e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800575c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800575e:	78fb      	ldrb	r3, [r7, #3]
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	212c      	movs	r1, #44	; 0x2c
 8005764:	fb01 f303 	mul.w	r3, r1, r3
 8005768:	4413      	add	r3, r2
 800576a:	3344      	adds	r3, #68	; 0x44
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005770:	78fb      	ldrb	r3, [r7, #3]
 8005772:	8b3a      	ldrh	r2, [r7, #24]
 8005774:	6879      	ldr	r1, [r7, #4]
 8005776:	202c      	movs	r0, #44	; 0x2c
 8005778:	fb00 f303 	mul.w	r3, r0, r3
 800577c:	440b      	add	r3, r1
 800577e:	334c      	adds	r3, #76	; 0x4c
 8005780:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005782:	78fb      	ldrb	r3, [r7, #3]
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	212c      	movs	r1, #44	; 0x2c
 8005788:	fb01 f303 	mul.w	r3, r1, r3
 800578c:	4413      	add	r3, r2
 800578e:	3360      	adds	r3, #96	; 0x60
 8005790:	2200      	movs	r2, #0
 8005792:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005794:	78fb      	ldrb	r3, [r7, #3]
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	212c      	movs	r1, #44	; 0x2c
 800579a:	fb01 f303 	mul.w	r3, r1, r3
 800579e:	4413      	add	r3, r2
 80057a0:	3350      	adds	r3, #80	; 0x50
 80057a2:	2200      	movs	r2, #0
 80057a4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80057a6:	78fb      	ldrb	r3, [r7, #3]
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	212c      	movs	r1, #44	; 0x2c
 80057ac:	fb01 f303 	mul.w	r3, r1, r3
 80057b0:	4413      	add	r3, r2
 80057b2:	3339      	adds	r3, #57	; 0x39
 80057b4:	78fa      	ldrb	r2, [r7, #3]
 80057b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80057b8:	78fb      	ldrb	r3, [r7, #3]
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	212c      	movs	r1, #44	; 0x2c
 80057be:	fb01 f303 	mul.w	r3, r1, r3
 80057c2:	4413      	add	r3, r2
 80057c4:	3361      	adds	r3, #97	; 0x61
 80057c6:	2200      	movs	r2, #0
 80057c8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6818      	ldr	r0, [r3, #0]
 80057ce:	78fb      	ldrb	r3, [r7, #3]
 80057d0:	222c      	movs	r2, #44	; 0x2c
 80057d2:	fb02 f303 	mul.w	r3, r2, r3
 80057d6:	3338      	adds	r3, #56	; 0x38
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	18d1      	adds	r1, r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	461a      	mov	r2, r3
 80057e4:	f006 ff36 	bl	800c654 <USB_HC_StartXfer>
 80057e8:	4603      	mov	r3, r0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop

080057f4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b086      	sub	sp, #24
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4618      	mov	r0, r3
 800580c:	f006 fc7f 	bl	800c10e <USB_GetMode>
 8005810:	4603      	mov	r3, r0
 8005812:	2b01      	cmp	r3, #1
 8005814:	f040 80ef 	bne.w	80059f6 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4618      	mov	r0, r3
 800581e:	f006 fc63 	bl	800c0e8 <USB_ReadInterrupts>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 80e5 	beq.w	80059f4 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4618      	mov	r0, r3
 8005830:	f006 fc5a 	bl	800c0e8 <USB_ReadInterrupts>
 8005834:	4603      	mov	r3, r0
 8005836:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800583a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800583e:	d104      	bne.n	800584a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005848:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4618      	mov	r0, r3
 8005850:	f006 fc4a 	bl	800c0e8 <USB_ReadInterrupts>
 8005854:	4603      	mov	r3, r0
 8005856:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800585a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800585e:	d104      	bne.n	800586a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005868:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4618      	mov	r0, r3
 8005870:	f006 fc3a 	bl	800c0e8 <USB_ReadInterrupts>
 8005874:	4603      	mov	r3, r0
 8005876:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800587a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800587e:	d104      	bne.n	800588a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005888:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4618      	mov	r0, r3
 8005890:	f006 fc2a 	bl	800c0e8 <USB_ReadInterrupts>
 8005894:	4603      	mov	r3, r0
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b02      	cmp	r3, #2
 800589c:	d103      	bne.n	80058a6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2202      	movs	r2, #2
 80058a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4618      	mov	r0, r3
 80058ac:	f006 fc1c 	bl	800c0e8 <USB_ReadInterrupts>
 80058b0:	4603      	mov	r3, r0
 80058b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058ba:	d115      	bne.n	80058e8 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80058c4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d108      	bne.n	80058e8 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f00c f93a 	bl	8011b50 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2101      	movs	r1, #1
 80058e2:	4618      	mov	r0, r3
 80058e4:	f006 fd0c 	bl	800c300 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f006 fbfb 	bl	800c0e8 <USB_ReadInterrupts>
 80058f2:	4603      	mov	r3, r0
 80058f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058fc:	d102      	bne.n	8005904 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f001 f9e3 	bl	8006cca <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4618      	mov	r0, r3
 800590a:	f006 fbed 	bl	800c0e8 <USB_ReadInterrupts>
 800590e:	4603      	mov	r3, r0
 8005910:	f003 0308 	and.w	r3, r3, #8
 8005914:	2b08      	cmp	r3, #8
 8005916:	d106      	bne.n	8005926 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f00c f8fd 	bl	8011b18 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2208      	movs	r2, #8
 8005924:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4618      	mov	r0, r3
 800592c:	f006 fbdc 	bl	800c0e8 <USB_ReadInterrupts>
 8005930:	4603      	mov	r3, r0
 8005932:	f003 0310 	and.w	r3, r3, #16
 8005936:	2b10      	cmp	r3, #16
 8005938:	d101      	bne.n	800593e <HAL_HCD_IRQHandler+0x14a>
 800593a:	2301      	movs	r3, #1
 800593c:	e000      	b.n	8005940 <HAL_HCD_IRQHandler+0x14c>
 800593e:	2300      	movs	r3, #0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d012      	beq.n	800596a <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	699a      	ldr	r2, [r3, #24]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f022 0210 	bic.w	r2, r2, #16
 8005952:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f001 f8e6 	bl	8006b26 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	699a      	ldr	r2, [r3, #24]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f042 0210 	orr.w	r2, r2, #16
 8005968:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4618      	mov	r0, r3
 8005970:	f006 fbba 	bl	800c0e8 <USB_ReadInterrupts>
 8005974:	4603      	mov	r3, r0
 8005976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800597a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800597e:	d13a      	bne.n	80059f6 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4618      	mov	r0, r3
 8005986:	f006 ffa7 	bl	800c8d8 <USB_HC_ReadInterrupt>
 800598a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800598c:	2300      	movs	r3, #0
 800598e:	617b      	str	r3, [r7, #20]
 8005990:	e025      	b.n	80059de <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	f003 030f 	and.w	r3, r3, #15
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	fa22 f303 	lsr.w	r3, r2, r3
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d018      	beq.n	80059d8 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	015a      	lsls	r2, r3, #5
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	4413      	add	r3, r2
 80059ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059bc:	d106      	bne.n	80059cc <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	4619      	mov	r1, r3
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 f88f 	bl	8005ae8 <HCD_HC_IN_IRQHandler>
 80059ca:	e005      	b.n	80059d8 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	4619      	mov	r1, r3
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 fcaa 	bl	800632c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	3301      	adds	r3, #1
 80059dc:	617b      	str	r3, [r7, #20]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d3d4      	bcc.n	8005992 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80059f0:	615a      	str	r2, [r3, #20]
 80059f2:	e000      	b.n	80059f6 <HAL_HCD_IRQHandler+0x202>
      return;
 80059f4:	bf00      	nop
    }
  }
}
 80059f6:	3718      	adds	r7, #24
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d101      	bne.n	8005a12 <HAL_HCD_Start+0x16>
 8005a0e:	2302      	movs	r3, #2
 8005a10:	e013      	b.n	8005a3a <HAL_HCD_Start+0x3e>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f006 fa38 	bl	800be94 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2101      	movs	r1, #1
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f006 fca2 	bl	800c374 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3708      	adds	r7, #8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b082      	sub	sp, #8
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d101      	bne.n	8005a58 <HAL_HCD_Stop+0x16>
 8005a54:	2302      	movs	r3, #2
 8005a56:	e00d      	b.n	8005a74 <HAL_HCD_Stop+0x32>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4618      	mov	r0, r3
 8005a66:	f007 f8a1 	bl	800cbac <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3708      	adds	r7, #8
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	460b      	mov	r3, r1
 8005a86:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005a88:	78fb      	ldrb	r3, [r7, #3]
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	212c      	movs	r1, #44	; 0x2c
 8005a8e:	fb01 f303 	mul.w	r3, r1, r3
 8005a92:	4413      	add	r3, r2
 8005a94:	3360      	adds	r3, #96	; 0x60
 8005a96:	781b      	ldrb	r3, [r3, #0]
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	460b      	mov	r3, r1
 8005aae:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005ab0:	78fb      	ldrb	r3, [r7, #3]
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	212c      	movs	r1, #44	; 0x2c
 8005ab6:	fb01 f303 	mul.w	r3, r1, r3
 8005aba:	4413      	add	r3, r2
 8005abc:	3350      	adds	r3, #80	; 0x50
 8005abe:	681b      	ldr	r3, [r3, #0]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f006 fc9b 	bl	800c414 <USB_GetCurrentFrame>
 8005ade:	4603      	mov	r3, r0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3708      	adds	r7, #8
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	460b      	mov	r3, r1
 8005af2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005afe:	78fb      	ldrb	r3, [r7, #3]
 8005b00:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	015a      	lsls	r2, r3, #5
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	4413      	add	r3, r2
 8005b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f003 0304 	and.w	r3, r3, #4
 8005b14:	2b04      	cmp	r3, #4
 8005b16:	d119      	bne.n	8005b4c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b24:	461a      	mov	r2, r3
 8005b26:	2304      	movs	r3, #4
 8005b28:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	015a      	lsls	r2, r3, #5
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	4413      	add	r3, r2
 8005b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	0151      	lsls	r1, r2, #5
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	440a      	add	r2, r1
 8005b40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b44:	f043 0302 	orr.w	r3, r3, #2
 8005b48:	60d3      	str	r3, [r2, #12]
 8005b4a:	e101      	b.n	8005d50 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	015a      	lsls	r2, r3, #5
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b62:	d12b      	bne.n	8005bbc <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b70:	461a      	mov	r2, r3
 8005b72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b76:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	212c      	movs	r1, #44	; 0x2c
 8005b7e:	fb01 f303 	mul.w	r3, r1, r3
 8005b82:	4413      	add	r3, r2
 8005b84:	3361      	adds	r3, #97	; 0x61
 8005b86:	2207      	movs	r2, #7
 8005b88:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	015a      	lsls	r2, r3, #5
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	4413      	add	r3, r2
 8005b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	0151      	lsls	r1, r2, #5
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	440a      	add	r2, r1
 8005ba0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ba4:	f043 0302 	orr.w	r3, r3, #2
 8005ba8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	b2d2      	uxtb	r2, r2
 8005bb2:	4611      	mov	r1, r2
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f006 fea0 	bl	800c8fa <USB_HC_Halt>
 8005bba:	e0c9      	b.n	8005d50 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f003 0320 	and.w	r3, r3, #32
 8005bce:	2b20      	cmp	r3, #32
 8005bd0:	d109      	bne.n	8005be6 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	015a      	lsls	r2, r3, #5
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	4413      	add	r3, r2
 8005bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bde:	461a      	mov	r2, r3
 8005be0:	2320      	movs	r3, #32
 8005be2:	6093      	str	r3, [r2, #8]
 8005be4:	e0b4      	b.n	8005d50 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	015a      	lsls	r2, r3, #5
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	4413      	add	r3, r2
 8005bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f003 0308 	and.w	r3, r3, #8
 8005bf8:	2b08      	cmp	r3, #8
 8005bfa:	d133      	bne.n	8005c64 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	015a      	lsls	r2, r3, #5
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	4413      	add	r3, r2
 8005c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	0151      	lsls	r1, r2, #5
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	440a      	add	r2, r1
 8005c12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c16:	f043 0302 	orr.w	r3, r3, #2
 8005c1a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	212c      	movs	r1, #44	; 0x2c
 8005c22:	fb01 f303 	mul.w	r3, r1, r3
 8005c26:	4413      	add	r3, r2
 8005c28:	3361      	adds	r3, #97	; 0x61
 8005c2a:	2205      	movs	r2, #5
 8005c2c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	015a      	lsls	r2, r3, #5
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	4413      	add	r3, r2
 8005c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	2310      	movs	r3, #16
 8005c3e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	015a      	lsls	r2, r3, #5
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	4413      	add	r3, r2
 8005c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	2308      	movs	r3, #8
 8005c50:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	b2d2      	uxtb	r2, r2
 8005c5a:	4611      	mov	r1, r2
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f006 fe4c 	bl	800c8fa <USB_HC_Halt>
 8005c62:	e075      	b.n	8005d50 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c7a:	d134      	bne.n	8005ce6 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	015a      	lsls	r2, r3, #5
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	4413      	add	r3, r2
 8005c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	0151      	lsls	r1, r2, #5
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	440a      	add	r2, r1
 8005c92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c96:	f043 0302 	orr.w	r3, r3, #2
 8005c9a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	212c      	movs	r1, #44	; 0x2c
 8005ca2:	fb01 f303 	mul.w	r3, r1, r3
 8005ca6:	4413      	add	r3, r2
 8005ca8:	3361      	adds	r3, #97	; 0x61
 8005caa:	2208      	movs	r2, #8
 8005cac:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	015a      	lsls	r2, r3, #5
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cba:	461a      	mov	r2, r3
 8005cbc:	2310      	movs	r3, #16
 8005cbe:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	015a      	lsls	r2, r3, #5
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ccc:	461a      	mov	r2, r3
 8005cce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cd2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	b2d2      	uxtb	r2, r2
 8005cdc:	4611      	mov	r1, r2
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f006 fe0b 	bl	800c8fa <USB_HC_Halt>
 8005ce4:	e034      	b.n	8005d50 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	015a      	lsls	r2, r3, #5
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	4413      	add	r3, r2
 8005cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf8:	2b80      	cmp	r3, #128	; 0x80
 8005cfa:	d129      	bne.n	8005d50 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	0151      	lsls	r1, r2, #5
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	440a      	add	r2, r1
 8005d12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d16:	f043 0302 	orr.w	r3, r3, #2
 8005d1a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	212c      	movs	r1, #44	; 0x2c
 8005d22:	fb01 f303 	mul.w	r3, r1, r3
 8005d26:	4413      	add	r3, r2
 8005d28:	3361      	adds	r3, #97	; 0x61
 8005d2a:	2206      	movs	r2, #6
 8005d2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	b2d2      	uxtb	r2, r2
 8005d36:	4611      	mov	r1, r2
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f006 fdde 	bl	800c8fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	015a      	lsls	r2, r3, #5
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	4413      	add	r3, r2
 8005d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	2380      	movs	r3, #128	; 0x80
 8005d4e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	015a      	lsls	r2, r3, #5
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d66:	d122      	bne.n	8005dae <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	015a      	lsls	r2, r3, #5
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	4413      	add	r3, r2
 8005d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	0151      	lsls	r1, r2, #5
 8005d7a:	693a      	ldr	r2, [r7, #16]
 8005d7c:	440a      	add	r2, r1
 8005d7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d82:	f043 0302 	orr.w	r3, r3, #2
 8005d86:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	b2d2      	uxtb	r2, r2
 8005d90:	4611      	mov	r1, r2
 8005d92:	4618      	mov	r0, r3
 8005d94:	f006 fdb1 	bl	800c8fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	015a      	lsls	r2, r3, #5
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	4413      	add	r3, r2
 8005da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da4:	461a      	mov	r2, r3
 8005da6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005daa:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005dac:	e2ba      	b.n	8006324 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	f040 811b 	bne.w	8005ffc <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d019      	beq.n	8005e02 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	212c      	movs	r1, #44	; 0x2c
 8005dd4:	fb01 f303 	mul.w	r3, r1, r3
 8005dd8:	4413      	add	r3, r2
 8005dda:	3348      	adds	r3, #72	; 0x48
 8005ddc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	0159      	lsls	r1, r3, #5
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	440b      	add	r3, r1
 8005de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005df0:	1ad2      	subs	r2, r2, r3
 8005df2:	6879      	ldr	r1, [r7, #4]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	202c      	movs	r0, #44	; 0x2c
 8005df8:	fb00 f303 	mul.w	r3, r0, r3
 8005dfc:	440b      	add	r3, r1
 8005dfe:	3350      	adds	r3, #80	; 0x50
 8005e00:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	212c      	movs	r1, #44	; 0x2c
 8005e08:	fb01 f303 	mul.w	r3, r1, r3
 8005e0c:	4413      	add	r3, r2
 8005e0e:	3361      	adds	r3, #97	; 0x61
 8005e10:	2201      	movs	r2, #1
 8005e12:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	212c      	movs	r1, #44	; 0x2c
 8005e1a:	fb01 f303 	mul.w	r3, r1, r3
 8005e1e:	4413      	add	r3, r2
 8005e20:	335c      	adds	r3, #92	; 0x5c
 8005e22:	2200      	movs	r2, #0
 8005e24:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	015a      	lsls	r2, r3, #5
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e32:	461a      	mov	r2, r3
 8005e34:	2301      	movs	r3, #1
 8005e36:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	212c      	movs	r1, #44	; 0x2c
 8005e3e:	fb01 f303 	mul.w	r3, r1, r3
 8005e42:	4413      	add	r3, r2
 8005e44:	333f      	adds	r3, #63	; 0x3f
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d009      	beq.n	8005e60 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	212c      	movs	r1, #44	; 0x2c
 8005e52:	fb01 f303 	mul.w	r3, r1, r3
 8005e56:	4413      	add	r3, r2
 8005e58:	333f      	adds	r3, #63	; 0x3f
 8005e5a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d121      	bne.n	8005ea4 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	0151      	lsls	r1, r2, #5
 8005e72:	693a      	ldr	r2, [r7, #16]
 8005e74:	440a      	add	r2, r1
 8005e76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e7a:	f043 0302 	orr.w	r3, r3, #2
 8005e7e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	b2d2      	uxtb	r2, r2
 8005e88:	4611      	mov	r1, r2
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f006 fd35 	bl	800c8fa <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	2310      	movs	r3, #16
 8005ea0:	6093      	str	r3, [r2, #8]
 8005ea2:	e066      	b.n	8005f72 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	212c      	movs	r1, #44	; 0x2c
 8005eaa:	fb01 f303 	mul.w	r3, r1, r3
 8005eae:	4413      	add	r3, r2
 8005eb0:	333f      	adds	r3, #63	; 0x3f
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	2b03      	cmp	r3, #3
 8005eb6:	d127      	bne.n	8005f08 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	015a      	lsls	r2, r3, #5
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	0151      	lsls	r1, r2, #5
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	440a      	add	r2, r1
 8005ece:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ed2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ed6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	212c      	movs	r1, #44	; 0x2c
 8005ede:	fb01 f303 	mul.w	r3, r1, r3
 8005ee2:	4413      	add	r3, r2
 8005ee4:	3360      	adds	r3, #96	; 0x60
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	b2d9      	uxtb	r1, r3
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	202c      	movs	r0, #44	; 0x2c
 8005ef4:	fb00 f303 	mul.w	r3, r0, r3
 8005ef8:	4413      	add	r3, r2
 8005efa:	3360      	adds	r3, #96	; 0x60
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	461a      	mov	r2, r3
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f00b fe33 	bl	8011b6c <HAL_HCD_HC_NotifyURBChange_Callback>
 8005f06:	e034      	b.n	8005f72 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	212c      	movs	r1, #44	; 0x2c
 8005f0e:	fb01 f303 	mul.w	r3, r1, r3
 8005f12:	4413      	add	r3, r2
 8005f14:	333f      	adds	r3, #63	; 0x3f
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d12a      	bne.n	8005f72 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	212c      	movs	r1, #44	; 0x2c
 8005f22:	fb01 f303 	mul.w	r3, r1, r3
 8005f26:	4413      	add	r3, r2
 8005f28:	3360      	adds	r3, #96	; 0x60
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	212c      	movs	r1, #44	; 0x2c
 8005f34:	fb01 f303 	mul.w	r3, r1, r3
 8005f38:	4413      	add	r3, r2
 8005f3a:	3354      	adds	r3, #84	; 0x54
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	f083 0301 	eor.w	r3, r3, #1
 8005f42:	b2d8      	uxtb	r0, r3
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	212c      	movs	r1, #44	; 0x2c
 8005f4a:	fb01 f303 	mul.w	r3, r1, r3
 8005f4e:	4413      	add	r3, r2
 8005f50:	3354      	adds	r3, #84	; 0x54
 8005f52:	4602      	mov	r2, r0
 8005f54:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	b2d9      	uxtb	r1, r3
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	202c      	movs	r0, #44	; 0x2c
 8005f60:	fb00 f303 	mul.w	r3, r0, r3
 8005f64:	4413      	add	r3, r2
 8005f66:	3360      	adds	r3, #96	; 0x60
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f00b fdfd 	bl	8011b6c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d12b      	bne.n	8005fd2 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	212c      	movs	r1, #44	; 0x2c
 8005f80:	fb01 f303 	mul.w	r3, r1, r3
 8005f84:	4413      	add	r3, r2
 8005f86:	3348      	adds	r3, #72	; 0x48
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	6879      	ldr	r1, [r7, #4]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	202c      	movs	r0, #44	; 0x2c
 8005f90:	fb00 f202 	mul.w	r2, r0, r2
 8005f94:	440a      	add	r2, r1
 8005f96:	3240      	adds	r2, #64	; 0x40
 8005f98:	8812      	ldrh	r2, [r2, #0]
 8005f9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	f000 81be 	beq.w	8006324 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	212c      	movs	r1, #44	; 0x2c
 8005fae:	fb01 f303 	mul.w	r3, r1, r3
 8005fb2:	4413      	add	r3, r2
 8005fb4:	3354      	adds	r3, #84	; 0x54
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	f083 0301 	eor.w	r3, r3, #1
 8005fbc:	b2d8      	uxtb	r0, r3
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	212c      	movs	r1, #44	; 0x2c
 8005fc4:	fb01 f303 	mul.w	r3, r1, r3
 8005fc8:	4413      	add	r3, r2
 8005fca:	3354      	adds	r3, #84	; 0x54
 8005fcc:	4602      	mov	r2, r0
 8005fce:	701a      	strb	r2, [r3, #0]
}
 8005fd0:	e1a8      	b.n	8006324 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	212c      	movs	r1, #44	; 0x2c
 8005fd8:	fb01 f303 	mul.w	r3, r1, r3
 8005fdc:	4413      	add	r3, r2
 8005fde:	3354      	adds	r3, #84	; 0x54
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	f083 0301 	eor.w	r3, r3, #1
 8005fe6:	b2d8      	uxtb	r0, r3
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	212c      	movs	r1, #44	; 0x2c
 8005fee:	fb01 f303 	mul.w	r3, r1, r3
 8005ff2:	4413      	add	r3, r2
 8005ff4:	3354      	adds	r3, #84	; 0x54
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	701a      	strb	r2, [r3, #0]
}
 8005ffa:	e193      	b.n	8006324 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	015a      	lsls	r2, r3, #5
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	4413      	add	r3, r2
 8006004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f003 0302 	and.w	r3, r3, #2
 800600e:	2b02      	cmp	r3, #2
 8006010:	f040 8106 	bne.w	8006220 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	015a      	lsls	r2, r3, #5
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	4413      	add	r3, r2
 800601c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	0151      	lsls	r1, r2, #5
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	440a      	add	r2, r1
 800602a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800602e:	f023 0302 	bic.w	r3, r3, #2
 8006032:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	212c      	movs	r1, #44	; 0x2c
 800603a:	fb01 f303 	mul.w	r3, r1, r3
 800603e:	4413      	add	r3, r2
 8006040:	3361      	adds	r3, #97	; 0x61
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d109      	bne.n	800605c <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	212c      	movs	r1, #44	; 0x2c
 800604e:	fb01 f303 	mul.w	r3, r1, r3
 8006052:	4413      	add	r3, r2
 8006054:	3360      	adds	r3, #96	; 0x60
 8006056:	2201      	movs	r2, #1
 8006058:	701a      	strb	r2, [r3, #0]
 800605a:	e0c9      	b.n	80061f0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	212c      	movs	r1, #44	; 0x2c
 8006062:	fb01 f303 	mul.w	r3, r1, r3
 8006066:	4413      	add	r3, r2
 8006068:	3361      	adds	r3, #97	; 0x61
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	2b05      	cmp	r3, #5
 800606e:	d109      	bne.n	8006084 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	212c      	movs	r1, #44	; 0x2c
 8006076:	fb01 f303 	mul.w	r3, r1, r3
 800607a:	4413      	add	r3, r2
 800607c:	3360      	adds	r3, #96	; 0x60
 800607e:	2205      	movs	r2, #5
 8006080:	701a      	strb	r2, [r3, #0]
 8006082:	e0b5      	b.n	80061f0 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	212c      	movs	r1, #44	; 0x2c
 800608a:	fb01 f303 	mul.w	r3, r1, r3
 800608e:	4413      	add	r3, r2
 8006090:	3361      	adds	r3, #97	; 0x61
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	2b06      	cmp	r3, #6
 8006096:	d009      	beq.n	80060ac <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	212c      	movs	r1, #44	; 0x2c
 800609e:	fb01 f303 	mul.w	r3, r1, r3
 80060a2:	4413      	add	r3, r2
 80060a4:	3361      	adds	r3, #97	; 0x61
 80060a6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80060a8:	2b08      	cmp	r3, #8
 80060aa:	d150      	bne.n	800614e <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	212c      	movs	r1, #44	; 0x2c
 80060b2:	fb01 f303 	mul.w	r3, r1, r3
 80060b6:	4413      	add	r3, r2
 80060b8:	335c      	adds	r3, #92	; 0x5c
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	1c5a      	adds	r2, r3, #1
 80060be:	6879      	ldr	r1, [r7, #4]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	202c      	movs	r0, #44	; 0x2c
 80060c4:	fb00 f303 	mul.w	r3, r0, r3
 80060c8:	440b      	add	r3, r1
 80060ca:	335c      	adds	r3, #92	; 0x5c
 80060cc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	212c      	movs	r1, #44	; 0x2c
 80060d4:	fb01 f303 	mul.w	r3, r1, r3
 80060d8:	4413      	add	r3, r2
 80060da:	335c      	adds	r3, #92	; 0x5c
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d912      	bls.n	8006108 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	212c      	movs	r1, #44	; 0x2c
 80060e8:	fb01 f303 	mul.w	r3, r1, r3
 80060ec:	4413      	add	r3, r2
 80060ee:	335c      	adds	r3, #92	; 0x5c
 80060f0:	2200      	movs	r2, #0
 80060f2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	212c      	movs	r1, #44	; 0x2c
 80060fa:	fb01 f303 	mul.w	r3, r1, r3
 80060fe:	4413      	add	r3, r2
 8006100:	3360      	adds	r3, #96	; 0x60
 8006102:	2204      	movs	r2, #4
 8006104:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006106:	e073      	b.n	80061f0 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	212c      	movs	r1, #44	; 0x2c
 800610e:	fb01 f303 	mul.w	r3, r1, r3
 8006112:	4413      	add	r3, r2
 8006114:	3360      	adds	r3, #96	; 0x60
 8006116:	2202      	movs	r2, #2
 8006118:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	015a      	lsls	r2, r3, #5
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	4413      	add	r3, r2
 8006122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006130:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006138:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	015a      	lsls	r2, r3, #5
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	4413      	add	r3, r2
 8006142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006146:	461a      	mov	r2, r3
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800614c:	e050      	b.n	80061f0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	212c      	movs	r1, #44	; 0x2c
 8006154:	fb01 f303 	mul.w	r3, r1, r3
 8006158:	4413      	add	r3, r2
 800615a:	3361      	adds	r3, #97	; 0x61
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	2b03      	cmp	r3, #3
 8006160:	d122      	bne.n	80061a8 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	212c      	movs	r1, #44	; 0x2c
 8006168:	fb01 f303 	mul.w	r3, r1, r3
 800616c:	4413      	add	r3, r2
 800616e:	3360      	adds	r3, #96	; 0x60
 8006170:	2202      	movs	r2, #2
 8006172:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	015a      	lsls	r2, r3, #5
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	4413      	add	r3, r2
 800617c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800618a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006192:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	015a      	lsls	r2, r3, #5
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	4413      	add	r3, r2
 800619c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061a0:	461a      	mov	r2, r3
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	6013      	str	r3, [r2, #0]
 80061a6:	e023      	b.n	80061f0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	212c      	movs	r1, #44	; 0x2c
 80061ae:	fb01 f303 	mul.w	r3, r1, r3
 80061b2:	4413      	add	r3, r2
 80061b4:	3361      	adds	r3, #97	; 0x61
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	2b07      	cmp	r3, #7
 80061ba:	d119      	bne.n	80061f0 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	212c      	movs	r1, #44	; 0x2c
 80061c2:	fb01 f303 	mul.w	r3, r1, r3
 80061c6:	4413      	add	r3, r2
 80061c8:	335c      	adds	r3, #92	; 0x5c
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	1c5a      	adds	r2, r3, #1
 80061ce:	6879      	ldr	r1, [r7, #4]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	202c      	movs	r0, #44	; 0x2c
 80061d4:	fb00 f303 	mul.w	r3, r0, r3
 80061d8:	440b      	add	r3, r1
 80061da:	335c      	adds	r3, #92	; 0x5c
 80061dc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	212c      	movs	r1, #44	; 0x2c
 80061e4:	fb01 f303 	mul.w	r3, r1, r3
 80061e8:	4413      	add	r3, r2
 80061ea:	3360      	adds	r3, #96	; 0x60
 80061ec:	2204      	movs	r2, #4
 80061ee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061fc:	461a      	mov	r2, r3
 80061fe:	2302      	movs	r3, #2
 8006200:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	b2d9      	uxtb	r1, r3
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	202c      	movs	r0, #44	; 0x2c
 800620c:	fb00 f303 	mul.w	r3, r0, r3
 8006210:	4413      	add	r3, r2
 8006212:	3360      	adds	r3, #96	; 0x60
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	461a      	mov	r2, r3
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f00b fca7 	bl	8011b6c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800621e:	e081      	b.n	8006324 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	015a      	lsls	r2, r3, #5
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	4413      	add	r3, r2
 8006228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f003 0310 	and.w	r3, r3, #16
 8006232:	2b10      	cmp	r3, #16
 8006234:	d176      	bne.n	8006324 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	212c      	movs	r1, #44	; 0x2c
 800623c:	fb01 f303 	mul.w	r3, r1, r3
 8006240:	4413      	add	r3, r2
 8006242:	333f      	adds	r3, #63	; 0x3f
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	2b03      	cmp	r3, #3
 8006248:	d121      	bne.n	800628e <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	212c      	movs	r1, #44	; 0x2c
 8006250:	fb01 f303 	mul.w	r3, r1, r3
 8006254:	4413      	add	r3, r2
 8006256:	335c      	adds	r3, #92	; 0x5c
 8006258:	2200      	movs	r2, #0
 800625a:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	015a      	lsls	r2, r3, #5
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	4413      	add	r3, r2
 8006264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	0151      	lsls	r1, r2, #5
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	440a      	add	r2, r1
 8006272:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006276:	f043 0302 	orr.w	r3, r3, #2
 800627a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	b2d2      	uxtb	r2, r2
 8006284:	4611      	mov	r1, r2
 8006286:	4618      	mov	r0, r3
 8006288:	f006 fb37 	bl	800c8fa <USB_HC_Halt>
 800628c:	e041      	b.n	8006312 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	212c      	movs	r1, #44	; 0x2c
 8006294:	fb01 f303 	mul.w	r3, r1, r3
 8006298:	4413      	add	r3, r2
 800629a:	333f      	adds	r3, #63	; 0x3f
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d009      	beq.n	80062b6 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	212c      	movs	r1, #44	; 0x2c
 80062a8:	fb01 f303 	mul.w	r3, r1, r3
 80062ac:	4413      	add	r3, r2
 80062ae:	333f      	adds	r3, #63	; 0x3f
 80062b0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d12d      	bne.n	8006312 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	212c      	movs	r1, #44	; 0x2c
 80062bc:	fb01 f303 	mul.w	r3, r1, r3
 80062c0:	4413      	add	r3, r2
 80062c2:	335c      	adds	r3, #92	; 0x5c
 80062c4:	2200      	movs	r2, #0
 80062c6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d120      	bne.n	8006312 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	212c      	movs	r1, #44	; 0x2c
 80062d6:	fb01 f303 	mul.w	r3, r1, r3
 80062da:	4413      	add	r3, r2
 80062dc:	3361      	adds	r3, #97	; 0x61
 80062de:	2203      	movs	r2, #3
 80062e0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	015a      	lsls	r2, r3, #5
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	4413      	add	r3, r2
 80062ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	0151      	lsls	r1, r2, #5
 80062f4:	693a      	ldr	r2, [r7, #16]
 80062f6:	440a      	add	r2, r1
 80062f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062fc:	f043 0302 	orr.w	r3, r3, #2
 8006300:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	b2d2      	uxtb	r2, r2
 800630a:	4611      	mov	r1, r2
 800630c:	4618      	mov	r0, r3
 800630e:	f006 faf4 	bl	800c8fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	4413      	add	r3, r2
 800631a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800631e:	461a      	mov	r2, r3
 8006320:	2310      	movs	r3, #16
 8006322:	6093      	str	r3, [r2, #8]
}
 8006324:	bf00      	nop
 8006326:	3718      	adds	r7, #24
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b088      	sub	sp, #32
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	460b      	mov	r3, r1
 8006336:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8006342:	78fb      	ldrb	r3, [r7, #3]
 8006344:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	015a      	lsls	r2, r3, #5
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	4413      	add	r3, r2
 800634e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	f003 0304 	and.w	r3, r3, #4
 8006358:	2b04      	cmp	r3, #4
 800635a:	d119      	bne.n	8006390 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	015a      	lsls	r2, r3, #5
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	4413      	add	r3, r2
 8006364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006368:	461a      	mov	r2, r3
 800636a:	2304      	movs	r3, #4
 800636c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	015a      	lsls	r2, r3, #5
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	4413      	add	r3, r2
 8006376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	0151      	lsls	r1, r2, #5
 8006380:	69ba      	ldr	r2, [r7, #24]
 8006382:	440a      	add	r2, r1
 8006384:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006388:	f043 0302 	orr.w	r3, r3, #2
 800638c:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800638e:	e3c6      	b.n	8006b1e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	015a      	lsls	r2, r3, #5
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	4413      	add	r3, r2
 8006398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	f003 0320 	and.w	r3, r3, #32
 80063a2:	2b20      	cmp	r3, #32
 80063a4:	d13e      	bne.n	8006424 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b2:	461a      	mov	r2, r3
 80063b4:	2320      	movs	r3, #32
 80063b6:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	212c      	movs	r1, #44	; 0x2c
 80063be:	fb01 f303 	mul.w	r3, r1, r3
 80063c2:	4413      	add	r3, r2
 80063c4:	333d      	adds	r3, #61	; 0x3d
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	f040 83a8 	bne.w	8006b1e <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	212c      	movs	r1, #44	; 0x2c
 80063d4:	fb01 f303 	mul.w	r3, r1, r3
 80063d8:	4413      	add	r3, r2
 80063da:	333d      	adds	r3, #61	; 0x3d
 80063dc:	2200      	movs	r2, #0
 80063de:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	212c      	movs	r1, #44	; 0x2c
 80063e6:	fb01 f303 	mul.w	r3, r1, r3
 80063ea:	4413      	add	r3, r2
 80063ec:	3360      	adds	r3, #96	; 0x60
 80063ee:	2202      	movs	r2, #2
 80063f0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	015a      	lsls	r2, r3, #5
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	4413      	add	r3, r2
 80063fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	697a      	ldr	r2, [r7, #20]
 8006402:	0151      	lsls	r1, r2, #5
 8006404:	69ba      	ldr	r2, [r7, #24]
 8006406:	440a      	add	r2, r1
 8006408:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800640c:	f043 0302 	orr.w	r3, r3, #2
 8006410:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	b2d2      	uxtb	r2, r2
 800641a:	4611      	mov	r1, r2
 800641c:	4618      	mov	r0, r3
 800641e:	f006 fa6c 	bl	800c8fa <USB_HC_Halt>
}
 8006422:	e37c      	b.n	8006b1e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	015a      	lsls	r2, r3, #5
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	4413      	add	r3, r2
 800642c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006436:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800643a:	d122      	bne.n	8006482 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	015a      	lsls	r2, r3, #5
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	4413      	add	r3, r2
 8006444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	697a      	ldr	r2, [r7, #20]
 800644c:	0151      	lsls	r1, r2, #5
 800644e:	69ba      	ldr	r2, [r7, #24]
 8006450:	440a      	add	r2, r1
 8006452:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006456:	f043 0302 	orr.w	r3, r3, #2
 800645a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	b2d2      	uxtb	r2, r2
 8006464:	4611      	mov	r1, r2
 8006466:	4618      	mov	r0, r3
 8006468:	f006 fa47 	bl	800c8fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	015a      	lsls	r2, r3, #5
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	4413      	add	r3, r2
 8006474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006478:	461a      	mov	r2, r3
 800647a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800647e:	6093      	str	r3, [r2, #8]
}
 8006480:	e34d      	b.n	8006b1e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	015a      	lsls	r2, r3, #5
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	4413      	add	r3, r2
 800648a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	f003 0301 	and.w	r3, r3, #1
 8006494:	2b01      	cmp	r3, #1
 8006496:	d150      	bne.n	800653a <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	212c      	movs	r1, #44	; 0x2c
 800649e:	fb01 f303 	mul.w	r3, r1, r3
 80064a2:	4413      	add	r3, r2
 80064a4:	335c      	adds	r3, #92	; 0x5c
 80064a6:	2200      	movs	r2, #0
 80064a8:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	015a      	lsls	r2, r3, #5
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	4413      	add	r3, r2
 80064b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064bc:	2b40      	cmp	r3, #64	; 0x40
 80064be:	d111      	bne.n	80064e4 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	212c      	movs	r1, #44	; 0x2c
 80064c6:	fb01 f303 	mul.w	r3, r1, r3
 80064ca:	4413      	add	r3, r2
 80064cc:	333d      	adds	r3, #61	; 0x3d
 80064ce:	2201      	movs	r2, #1
 80064d0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	015a      	lsls	r2, r3, #5
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	4413      	add	r3, r2
 80064da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064de:	461a      	mov	r2, r3
 80064e0:	2340      	movs	r3, #64	; 0x40
 80064e2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	015a      	lsls	r2, r3, #5
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	4413      	add	r3, r2
 80064ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	0151      	lsls	r1, r2, #5
 80064f6:	69ba      	ldr	r2, [r7, #24]
 80064f8:	440a      	add	r2, r1
 80064fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064fe:	f043 0302 	orr.w	r3, r3, #2
 8006502:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	b2d2      	uxtb	r2, r2
 800650c:	4611      	mov	r1, r2
 800650e:	4618      	mov	r0, r3
 8006510:	f006 f9f3 	bl	800c8fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	015a      	lsls	r2, r3, #5
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	4413      	add	r3, r2
 800651c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006520:	461a      	mov	r2, r3
 8006522:	2301      	movs	r3, #1
 8006524:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	212c      	movs	r1, #44	; 0x2c
 800652c:	fb01 f303 	mul.w	r3, r1, r3
 8006530:	4413      	add	r3, r2
 8006532:	3361      	adds	r3, #97	; 0x61
 8006534:	2201      	movs	r2, #1
 8006536:	701a      	strb	r2, [r3, #0]
}
 8006538:	e2f1      	b.n	8006b1e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	015a      	lsls	r2, r3, #5
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	4413      	add	r3, r2
 8006542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654c:	2b40      	cmp	r3, #64	; 0x40
 800654e:	d13c      	bne.n	80065ca <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	212c      	movs	r1, #44	; 0x2c
 8006556:	fb01 f303 	mul.w	r3, r1, r3
 800655a:	4413      	add	r3, r2
 800655c:	3361      	adds	r3, #97	; 0x61
 800655e:	2204      	movs	r2, #4
 8006560:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	212c      	movs	r1, #44	; 0x2c
 8006568:	fb01 f303 	mul.w	r3, r1, r3
 800656c:	4413      	add	r3, r2
 800656e:	333d      	adds	r3, #61	; 0x3d
 8006570:	2201      	movs	r2, #1
 8006572:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	212c      	movs	r1, #44	; 0x2c
 800657a:	fb01 f303 	mul.w	r3, r1, r3
 800657e:	4413      	add	r3, r2
 8006580:	335c      	adds	r3, #92	; 0x5c
 8006582:	2200      	movs	r2, #0
 8006584:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	015a      	lsls	r2, r3, #5
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	4413      	add	r3, r2
 800658e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	0151      	lsls	r1, r2, #5
 8006598:	69ba      	ldr	r2, [r7, #24]
 800659a:	440a      	add	r2, r1
 800659c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065a0:	f043 0302 	orr.w	r3, r3, #2
 80065a4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	697a      	ldr	r2, [r7, #20]
 80065ac:	b2d2      	uxtb	r2, r2
 80065ae:	4611      	mov	r1, r2
 80065b0:	4618      	mov	r0, r3
 80065b2:	f006 f9a2 	bl	800c8fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	015a      	lsls	r2, r3, #5
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	4413      	add	r3, r2
 80065be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065c2:	461a      	mov	r2, r3
 80065c4:	2340      	movs	r3, #64	; 0x40
 80065c6:	6093      	str	r3, [r2, #8]
}
 80065c8:	e2a9      	b.n	8006b1e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	015a      	lsls	r2, r3, #5
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	4413      	add	r3, r2
 80065d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	f003 0308 	and.w	r3, r3, #8
 80065dc:	2b08      	cmp	r3, #8
 80065de:	d12a      	bne.n	8006636 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	015a      	lsls	r2, r3, #5
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	4413      	add	r3, r2
 80065e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ec:	461a      	mov	r2, r3
 80065ee:	2308      	movs	r3, #8
 80065f0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	015a      	lsls	r2, r3, #5
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	4413      	add	r3, r2
 80065fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	697a      	ldr	r2, [r7, #20]
 8006602:	0151      	lsls	r1, r2, #5
 8006604:	69ba      	ldr	r2, [r7, #24]
 8006606:	440a      	add	r2, r1
 8006608:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800660c:	f043 0302 	orr.w	r3, r3, #2
 8006610:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	b2d2      	uxtb	r2, r2
 800661a:	4611      	mov	r1, r2
 800661c:	4618      	mov	r0, r3
 800661e:	f006 f96c 	bl	800c8fa <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	212c      	movs	r1, #44	; 0x2c
 8006628:	fb01 f303 	mul.w	r3, r1, r3
 800662c:	4413      	add	r3, r2
 800662e:	3361      	adds	r3, #97	; 0x61
 8006630:	2205      	movs	r2, #5
 8006632:	701a      	strb	r2, [r3, #0]
}
 8006634:	e273      	b.n	8006b1e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	015a      	lsls	r2, r3, #5
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	4413      	add	r3, r2
 800663e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	f003 0310 	and.w	r3, r3, #16
 8006648:	2b10      	cmp	r3, #16
 800664a:	d150      	bne.n	80066ee <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	212c      	movs	r1, #44	; 0x2c
 8006652:	fb01 f303 	mul.w	r3, r1, r3
 8006656:	4413      	add	r3, r2
 8006658:	335c      	adds	r3, #92	; 0x5c
 800665a:	2200      	movs	r2, #0
 800665c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	212c      	movs	r1, #44	; 0x2c
 8006664:	fb01 f303 	mul.w	r3, r1, r3
 8006668:	4413      	add	r3, r2
 800666a:	3361      	adds	r3, #97	; 0x61
 800666c:	2203      	movs	r2, #3
 800666e:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	212c      	movs	r1, #44	; 0x2c
 8006676:	fb01 f303 	mul.w	r3, r1, r3
 800667a:	4413      	add	r3, r2
 800667c:	333d      	adds	r3, #61	; 0x3d
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d112      	bne.n	80066aa <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	212c      	movs	r1, #44	; 0x2c
 800668a:	fb01 f303 	mul.w	r3, r1, r3
 800668e:	4413      	add	r3, r2
 8006690:	333c      	adds	r3, #60	; 0x3c
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d108      	bne.n	80066aa <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	212c      	movs	r1, #44	; 0x2c
 800669e:	fb01 f303 	mul.w	r3, r1, r3
 80066a2:	4413      	add	r3, r2
 80066a4:	333d      	adds	r3, #61	; 0x3d
 80066a6:	2201      	movs	r2, #1
 80066a8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	697a      	ldr	r2, [r7, #20]
 80066ba:	0151      	lsls	r1, r2, #5
 80066bc:	69ba      	ldr	r2, [r7, #24]
 80066be:	440a      	add	r2, r1
 80066c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066c4:	f043 0302 	orr.w	r3, r3, #2
 80066c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	b2d2      	uxtb	r2, r2
 80066d2:	4611      	mov	r1, r2
 80066d4:	4618      	mov	r0, r3
 80066d6:	f006 f910 	bl	800c8fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	015a      	lsls	r2, r3, #5
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	4413      	add	r3, r2
 80066e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e6:	461a      	mov	r2, r3
 80066e8:	2310      	movs	r3, #16
 80066ea:	6093      	str	r3, [r2, #8]
}
 80066ec:	e217      	b.n	8006b1e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	015a      	lsls	r2, r3, #5
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	4413      	add	r3, r2
 80066f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006700:	2b80      	cmp	r3, #128	; 0x80
 8006702:	d174      	bne.n	80067ee <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d121      	bne.n	8006750 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	212c      	movs	r1, #44	; 0x2c
 8006712:	fb01 f303 	mul.w	r3, r1, r3
 8006716:	4413      	add	r3, r2
 8006718:	3361      	adds	r3, #97	; 0x61
 800671a:	2206      	movs	r2, #6
 800671c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	015a      	lsls	r2, r3, #5
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	4413      	add	r3, r2
 8006726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	697a      	ldr	r2, [r7, #20]
 800672e:	0151      	lsls	r1, r2, #5
 8006730:	69ba      	ldr	r2, [r7, #24]
 8006732:	440a      	add	r2, r1
 8006734:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006738:	f043 0302 	orr.w	r3, r3, #2
 800673c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	697a      	ldr	r2, [r7, #20]
 8006744:	b2d2      	uxtb	r2, r2
 8006746:	4611      	mov	r1, r2
 8006748:	4618      	mov	r0, r3
 800674a:	f006 f8d6 	bl	800c8fa <USB_HC_Halt>
 800674e:	e044      	b.n	80067da <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	212c      	movs	r1, #44	; 0x2c
 8006756:	fb01 f303 	mul.w	r3, r1, r3
 800675a:	4413      	add	r3, r2
 800675c:	335c      	adds	r3, #92	; 0x5c
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	1c5a      	adds	r2, r3, #1
 8006762:	6879      	ldr	r1, [r7, #4]
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	202c      	movs	r0, #44	; 0x2c
 8006768:	fb00 f303 	mul.w	r3, r0, r3
 800676c:	440b      	add	r3, r1
 800676e:	335c      	adds	r3, #92	; 0x5c
 8006770:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	212c      	movs	r1, #44	; 0x2c
 8006778:	fb01 f303 	mul.w	r3, r1, r3
 800677c:	4413      	add	r3, r2
 800677e:	335c      	adds	r3, #92	; 0x5c
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2b02      	cmp	r3, #2
 8006784:	d920      	bls.n	80067c8 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	212c      	movs	r1, #44	; 0x2c
 800678c:	fb01 f303 	mul.w	r3, r1, r3
 8006790:	4413      	add	r3, r2
 8006792:	335c      	adds	r3, #92	; 0x5c
 8006794:	2200      	movs	r2, #0
 8006796:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	212c      	movs	r1, #44	; 0x2c
 800679e:	fb01 f303 	mul.w	r3, r1, r3
 80067a2:	4413      	add	r3, r2
 80067a4:	3360      	adds	r3, #96	; 0x60
 80067a6:	2204      	movs	r2, #4
 80067a8:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	b2d9      	uxtb	r1, r3
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	202c      	movs	r0, #44	; 0x2c
 80067b4:	fb00 f303 	mul.w	r3, r0, r3
 80067b8:	4413      	add	r3, r2
 80067ba:	3360      	adds	r3, #96	; 0x60
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	461a      	mov	r2, r3
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f00b f9d3 	bl	8011b6c <HAL_HCD_HC_NotifyURBChange_Callback>
 80067c6:	e008      	b.n	80067da <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	212c      	movs	r1, #44	; 0x2c
 80067ce:	fb01 f303 	mul.w	r3, r1, r3
 80067d2:	4413      	add	r3, r2
 80067d4:	3360      	adds	r3, #96	; 0x60
 80067d6:	2202      	movs	r2, #2
 80067d8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	015a      	lsls	r2, r3, #5
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	4413      	add	r3, r2
 80067e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067e6:	461a      	mov	r2, r3
 80067e8:	2380      	movs	r3, #128	; 0x80
 80067ea:	6093      	str	r3, [r2, #8]
}
 80067ec:	e197      	b.n	8006b1e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	015a      	lsls	r2, r3, #5
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	4413      	add	r3, r2
 80067f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006800:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006804:	d134      	bne.n	8006870 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	015a      	lsls	r2, r3, #5
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	4413      	add	r3, r2
 800680e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	0151      	lsls	r1, r2, #5
 8006818:	69ba      	ldr	r2, [r7, #24]
 800681a:	440a      	add	r2, r1
 800681c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006820:	f043 0302 	orr.w	r3, r3, #2
 8006824:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	b2d2      	uxtb	r2, r2
 800682e:	4611      	mov	r1, r2
 8006830:	4618      	mov	r0, r3
 8006832:	f006 f862 	bl	800c8fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	015a      	lsls	r2, r3, #5
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	4413      	add	r3, r2
 800683e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006842:	461a      	mov	r2, r3
 8006844:	2310      	movs	r3, #16
 8006846:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	4413      	add	r3, r2
 8006850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006854:	461a      	mov	r2, r3
 8006856:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800685a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	212c      	movs	r1, #44	; 0x2c
 8006862:	fb01 f303 	mul.w	r3, r1, r3
 8006866:	4413      	add	r3, r2
 8006868:	3361      	adds	r3, #97	; 0x61
 800686a:	2208      	movs	r2, #8
 800686c:	701a      	strb	r2, [r3, #0]
}
 800686e:	e156      	b.n	8006b1e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	015a      	lsls	r2, r3, #5
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	4413      	add	r3, r2
 8006878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	f003 0302 	and.w	r3, r3, #2
 8006882:	2b02      	cmp	r3, #2
 8006884:	f040 814b 	bne.w	8006b1e <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	015a      	lsls	r2, r3, #5
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	4413      	add	r3, r2
 8006890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	0151      	lsls	r1, r2, #5
 800689a:	69ba      	ldr	r2, [r7, #24]
 800689c:	440a      	add	r2, r1
 800689e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068a2:	f023 0302 	bic.w	r3, r3, #2
 80068a6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	212c      	movs	r1, #44	; 0x2c
 80068ae:	fb01 f303 	mul.w	r3, r1, r3
 80068b2:	4413      	add	r3, r2
 80068b4:	3361      	adds	r3, #97	; 0x61
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d179      	bne.n	80069b0 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	212c      	movs	r1, #44	; 0x2c
 80068c2:	fb01 f303 	mul.w	r3, r1, r3
 80068c6:	4413      	add	r3, r2
 80068c8:	3360      	adds	r3, #96	; 0x60
 80068ca:	2201      	movs	r2, #1
 80068cc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	212c      	movs	r1, #44	; 0x2c
 80068d4:	fb01 f303 	mul.w	r3, r1, r3
 80068d8:	4413      	add	r3, r2
 80068da:	333f      	adds	r3, #63	; 0x3f
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d00a      	beq.n	80068f8 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	212c      	movs	r1, #44	; 0x2c
 80068e8:	fb01 f303 	mul.w	r3, r1, r3
 80068ec:	4413      	add	r3, r2
 80068ee:	333f      	adds	r3, #63	; 0x3f
 80068f0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80068f2:	2b03      	cmp	r3, #3
 80068f4:	f040 80fc 	bne.w	8006af0 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d142      	bne.n	8006986 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	212c      	movs	r1, #44	; 0x2c
 8006906:	fb01 f303 	mul.w	r3, r1, r3
 800690a:	4413      	add	r3, r2
 800690c:	334c      	adds	r3, #76	; 0x4c
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	f000 80ed 	beq.w	8006af0 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	212c      	movs	r1, #44	; 0x2c
 800691c:	fb01 f303 	mul.w	r3, r1, r3
 8006920:	4413      	add	r3, r2
 8006922:	334c      	adds	r3, #76	; 0x4c
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	6879      	ldr	r1, [r7, #4]
 8006928:	697a      	ldr	r2, [r7, #20]
 800692a:	202c      	movs	r0, #44	; 0x2c
 800692c:	fb00 f202 	mul.w	r2, r0, r2
 8006930:	440a      	add	r2, r1
 8006932:	3240      	adds	r2, #64	; 0x40
 8006934:	8812      	ldrh	r2, [r2, #0]
 8006936:	4413      	add	r3, r2
 8006938:	3b01      	subs	r3, #1
 800693a:	6879      	ldr	r1, [r7, #4]
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	202c      	movs	r0, #44	; 0x2c
 8006940:	fb00 f202 	mul.w	r2, r0, r2
 8006944:	440a      	add	r2, r1
 8006946:	3240      	adds	r2, #64	; 0x40
 8006948:	8812      	ldrh	r2, [r2, #0]
 800694a:	fbb3 f3f2 	udiv	r3, r3, r2
 800694e:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f003 0301 	and.w	r3, r3, #1
 8006956:	2b00      	cmp	r3, #0
 8006958:	f000 80ca 	beq.w	8006af0 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	212c      	movs	r1, #44	; 0x2c
 8006962:	fb01 f303 	mul.w	r3, r1, r3
 8006966:	4413      	add	r3, r2
 8006968:	3355      	adds	r3, #85	; 0x55
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	f083 0301 	eor.w	r3, r3, #1
 8006970:	b2d8      	uxtb	r0, r3
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	212c      	movs	r1, #44	; 0x2c
 8006978:	fb01 f303 	mul.w	r3, r1, r3
 800697c:	4413      	add	r3, r2
 800697e:	3355      	adds	r3, #85	; 0x55
 8006980:	4602      	mov	r2, r0
 8006982:	701a      	strb	r2, [r3, #0]
 8006984:	e0b4      	b.n	8006af0 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	212c      	movs	r1, #44	; 0x2c
 800698c:	fb01 f303 	mul.w	r3, r1, r3
 8006990:	4413      	add	r3, r2
 8006992:	3355      	adds	r3, #85	; 0x55
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	f083 0301 	eor.w	r3, r3, #1
 800699a:	b2d8      	uxtb	r0, r3
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	212c      	movs	r1, #44	; 0x2c
 80069a2:	fb01 f303 	mul.w	r3, r1, r3
 80069a6:	4413      	add	r3, r2
 80069a8:	3355      	adds	r3, #85	; 0x55
 80069aa:	4602      	mov	r2, r0
 80069ac:	701a      	strb	r2, [r3, #0]
 80069ae:	e09f      	b.n	8006af0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	212c      	movs	r1, #44	; 0x2c
 80069b6:	fb01 f303 	mul.w	r3, r1, r3
 80069ba:	4413      	add	r3, r2
 80069bc:	3361      	adds	r3, #97	; 0x61
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	2b03      	cmp	r3, #3
 80069c2:	d109      	bne.n	80069d8 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	212c      	movs	r1, #44	; 0x2c
 80069ca:	fb01 f303 	mul.w	r3, r1, r3
 80069ce:	4413      	add	r3, r2
 80069d0:	3360      	adds	r3, #96	; 0x60
 80069d2:	2202      	movs	r2, #2
 80069d4:	701a      	strb	r2, [r3, #0]
 80069d6:	e08b      	b.n	8006af0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	212c      	movs	r1, #44	; 0x2c
 80069de:	fb01 f303 	mul.w	r3, r1, r3
 80069e2:	4413      	add	r3, r2
 80069e4:	3361      	adds	r3, #97	; 0x61
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	2b04      	cmp	r3, #4
 80069ea:	d109      	bne.n	8006a00 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	212c      	movs	r1, #44	; 0x2c
 80069f2:	fb01 f303 	mul.w	r3, r1, r3
 80069f6:	4413      	add	r3, r2
 80069f8:	3360      	adds	r3, #96	; 0x60
 80069fa:	2202      	movs	r2, #2
 80069fc:	701a      	strb	r2, [r3, #0]
 80069fe:	e077      	b.n	8006af0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	212c      	movs	r1, #44	; 0x2c
 8006a06:	fb01 f303 	mul.w	r3, r1, r3
 8006a0a:	4413      	add	r3, r2
 8006a0c:	3361      	adds	r3, #97	; 0x61
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	2b05      	cmp	r3, #5
 8006a12:	d109      	bne.n	8006a28 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	212c      	movs	r1, #44	; 0x2c
 8006a1a:	fb01 f303 	mul.w	r3, r1, r3
 8006a1e:	4413      	add	r3, r2
 8006a20:	3360      	adds	r3, #96	; 0x60
 8006a22:	2205      	movs	r2, #5
 8006a24:	701a      	strb	r2, [r3, #0]
 8006a26:	e063      	b.n	8006af0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	212c      	movs	r1, #44	; 0x2c
 8006a2e:	fb01 f303 	mul.w	r3, r1, r3
 8006a32:	4413      	add	r3, r2
 8006a34:	3361      	adds	r3, #97	; 0x61
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	2b06      	cmp	r3, #6
 8006a3a:	d009      	beq.n	8006a50 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	212c      	movs	r1, #44	; 0x2c
 8006a42:	fb01 f303 	mul.w	r3, r1, r3
 8006a46:	4413      	add	r3, r2
 8006a48:	3361      	adds	r3, #97	; 0x61
 8006a4a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006a4c:	2b08      	cmp	r3, #8
 8006a4e:	d14f      	bne.n	8006af0 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	212c      	movs	r1, #44	; 0x2c
 8006a56:	fb01 f303 	mul.w	r3, r1, r3
 8006a5a:	4413      	add	r3, r2
 8006a5c:	335c      	adds	r3, #92	; 0x5c
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	1c5a      	adds	r2, r3, #1
 8006a62:	6879      	ldr	r1, [r7, #4]
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	202c      	movs	r0, #44	; 0x2c
 8006a68:	fb00 f303 	mul.w	r3, r0, r3
 8006a6c:	440b      	add	r3, r1
 8006a6e:	335c      	adds	r3, #92	; 0x5c
 8006a70:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	212c      	movs	r1, #44	; 0x2c
 8006a78:	fb01 f303 	mul.w	r3, r1, r3
 8006a7c:	4413      	add	r3, r2
 8006a7e:	335c      	adds	r3, #92	; 0x5c
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d912      	bls.n	8006aac <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	212c      	movs	r1, #44	; 0x2c
 8006a8c:	fb01 f303 	mul.w	r3, r1, r3
 8006a90:	4413      	add	r3, r2
 8006a92:	335c      	adds	r3, #92	; 0x5c
 8006a94:	2200      	movs	r2, #0
 8006a96:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	212c      	movs	r1, #44	; 0x2c
 8006a9e:	fb01 f303 	mul.w	r3, r1, r3
 8006aa2:	4413      	add	r3, r2
 8006aa4:	3360      	adds	r3, #96	; 0x60
 8006aa6:	2204      	movs	r2, #4
 8006aa8:	701a      	strb	r2, [r3, #0]
 8006aaa:	e021      	b.n	8006af0 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	212c      	movs	r1, #44	; 0x2c
 8006ab2:	fb01 f303 	mul.w	r3, r1, r3
 8006ab6:	4413      	add	r3, r2
 8006ab8:	3360      	adds	r3, #96	; 0x60
 8006aba:	2202      	movs	r2, #2
 8006abc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	015a      	lsls	r2, r3, #5
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ad4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006adc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	015a      	lsls	r2, r3, #5
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aea:	461a      	mov	r2, r3
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	015a      	lsls	r2, r3, #5
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	4413      	add	r3, r2
 8006af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006afc:	461a      	mov	r2, r3
 8006afe:	2302      	movs	r3, #2
 8006b00:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	b2d9      	uxtb	r1, r3
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	202c      	movs	r0, #44	; 0x2c
 8006b0c:	fb00 f303 	mul.w	r3, r0, r3
 8006b10:	4413      	add	r3, r2
 8006b12:	3360      	adds	r3, #96	; 0x60
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	461a      	mov	r2, r3
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f00b f827 	bl	8011b6c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006b1e:	bf00      	nop
 8006b20:	3720      	adds	r7, #32
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b08a      	sub	sp, #40	; 0x28
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b36:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	f003 030f 	and.w	r3, r3, #15
 8006b46:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	0c5b      	lsrs	r3, r3, #17
 8006b4c:	f003 030f 	and.w	r3, r3, #15
 8006b50:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	091b      	lsrs	r3, r3, #4
 8006b56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b5a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d004      	beq.n	8006b6c <HCD_RXQLVL_IRQHandler+0x46>
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	2b05      	cmp	r3, #5
 8006b66:	f000 80a9 	beq.w	8006cbc <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006b6a:	e0aa      	b.n	8006cc2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f000 80a6 	beq.w	8006cc0 <HCD_RXQLVL_IRQHandler+0x19a>
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	212c      	movs	r1, #44	; 0x2c
 8006b7a:	fb01 f303 	mul.w	r3, r1, r3
 8006b7e:	4413      	add	r3, r2
 8006b80:	3344      	adds	r3, #68	; 0x44
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	f000 809b 	beq.w	8006cc0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	212c      	movs	r1, #44	; 0x2c
 8006b90:	fb01 f303 	mul.w	r3, r1, r3
 8006b94:	4413      	add	r3, r2
 8006b96:	3350      	adds	r3, #80	; 0x50
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	441a      	add	r2, r3
 8006b9e:	6879      	ldr	r1, [r7, #4]
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	202c      	movs	r0, #44	; 0x2c
 8006ba4:	fb00 f303 	mul.w	r3, r0, r3
 8006ba8:	440b      	add	r3, r1
 8006baa:	334c      	adds	r3, #76	; 0x4c
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d87a      	bhi.n	8006ca8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6818      	ldr	r0, [r3, #0]
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	212c      	movs	r1, #44	; 0x2c
 8006bbc:	fb01 f303 	mul.w	r3, r1, r3
 8006bc0:	4413      	add	r3, r2
 8006bc2:	3344      	adds	r3, #68	; 0x44
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	693a      	ldr	r2, [r7, #16]
 8006bc8:	b292      	uxth	r2, r2
 8006bca:	4619      	mov	r1, r3
 8006bcc:	f005 fa34 	bl	800c038 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	212c      	movs	r1, #44	; 0x2c
 8006bd6:	fb01 f303 	mul.w	r3, r1, r3
 8006bda:	4413      	add	r3, r2
 8006bdc:	3344      	adds	r3, #68	; 0x44
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	441a      	add	r2, r3
 8006be4:	6879      	ldr	r1, [r7, #4]
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	202c      	movs	r0, #44	; 0x2c
 8006bea:	fb00 f303 	mul.w	r3, r0, r3
 8006bee:	440b      	add	r3, r1
 8006bf0:	3344      	adds	r3, #68	; 0x44
 8006bf2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	212c      	movs	r1, #44	; 0x2c
 8006bfa:	fb01 f303 	mul.w	r3, r1, r3
 8006bfe:	4413      	add	r3, r2
 8006c00:	3350      	adds	r3, #80	; 0x50
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	441a      	add	r2, r3
 8006c08:	6879      	ldr	r1, [r7, #4]
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	202c      	movs	r0, #44	; 0x2c
 8006c0e:	fb00 f303 	mul.w	r3, r0, r3
 8006c12:	440b      	add	r3, r1
 8006c14:	3350      	adds	r3, #80	; 0x50
 8006c16:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	015a      	lsls	r2, r3, #5
 8006c1c:	6a3b      	ldr	r3, [r7, #32]
 8006c1e:	4413      	add	r3, r2
 8006c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	0cdb      	lsrs	r3, r3, #19
 8006c28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c2c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	212c      	movs	r1, #44	; 0x2c
 8006c34:	fb01 f303 	mul.w	r3, r1, r3
 8006c38:	4413      	add	r3, r2
 8006c3a:	3340      	adds	r3, #64	; 0x40
 8006c3c:	881b      	ldrh	r3, [r3, #0]
 8006c3e:	461a      	mov	r2, r3
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d13c      	bne.n	8006cc0 <HCD_RXQLVL_IRQHandler+0x19a>
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d039      	beq.n	8006cc0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	6a3b      	ldr	r3, [r7, #32]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006c62:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c6a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	015a      	lsls	r2, r3, #5
 8006c70:	6a3b      	ldr	r3, [r7, #32]
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c78:	461a      	mov	r2, r3
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	212c      	movs	r1, #44	; 0x2c
 8006c84:	fb01 f303 	mul.w	r3, r1, r3
 8006c88:	4413      	add	r3, r2
 8006c8a:	3354      	adds	r3, #84	; 0x54
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	f083 0301 	eor.w	r3, r3, #1
 8006c92:	b2d8      	uxtb	r0, r3
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	212c      	movs	r1, #44	; 0x2c
 8006c9a:	fb01 f303 	mul.w	r3, r1, r3
 8006c9e:	4413      	add	r3, r2
 8006ca0:	3354      	adds	r3, #84	; 0x54
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	701a      	strb	r2, [r3, #0]
      break;
 8006ca6:	e00b      	b.n	8006cc0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	212c      	movs	r1, #44	; 0x2c
 8006cae:	fb01 f303 	mul.w	r3, r1, r3
 8006cb2:	4413      	add	r3, r2
 8006cb4:	3360      	adds	r3, #96	; 0x60
 8006cb6:	2204      	movs	r2, #4
 8006cb8:	701a      	strb	r2, [r3, #0]
      break;
 8006cba:	e001      	b.n	8006cc0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8006cbc:	bf00      	nop
 8006cbe:	e000      	b.n	8006cc2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8006cc0:	bf00      	nop
  }
}
 8006cc2:	bf00      	nop
 8006cc4:	3728      	adds	r7, #40	; 0x28
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b086      	sub	sp, #24
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006cf6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f003 0302 	and.w	r3, r3, #2
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	d10b      	bne.n	8006d1a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f003 0301 	and.w	r3, r3, #1
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d102      	bne.n	8006d12 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f00a ff11 	bl	8011b34 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	f043 0302 	orr.w	r3, r3, #2
 8006d18:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f003 0308 	and.w	r3, r3, #8
 8006d20:	2b08      	cmp	r3, #8
 8006d22:	d132      	bne.n	8006d8a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	f043 0308 	orr.w	r3, r3, #8
 8006d2a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f003 0304 	and.w	r3, r3, #4
 8006d32:	2b04      	cmp	r3, #4
 8006d34:	d126      	bne.n	8006d84 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	699b      	ldr	r3, [r3, #24]
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d113      	bne.n	8006d66 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006d44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d48:	d106      	bne.n	8006d58 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2102      	movs	r1, #2
 8006d50:	4618      	mov	r0, r3
 8006d52:	f005 fad5 	bl	800c300 <USB_InitFSLSPClkSel>
 8006d56:	e011      	b.n	8006d7c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2101      	movs	r1, #1
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f005 face 	bl	800c300 <USB_InitFSLSPClkSel>
 8006d64:	e00a      	b.n	8006d7c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d106      	bne.n	8006d7c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d74:	461a      	mov	r2, r3
 8006d76:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006d7a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f00a ff03 	bl	8011b88 <HAL_HCD_PortEnabled_Callback>
 8006d82:	e002      	b.n	8006d8a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f00a ff0d 	bl	8011ba4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f003 0320 	and.w	r3, r3, #32
 8006d90:	2b20      	cmp	r3, #32
 8006d92:	d103      	bne.n	8006d9c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	f043 0320 	orr.w	r3, r3, #32
 8006d9a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006da2:	461a      	mov	r2, r3
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	6013      	str	r3, [r2, #0]
}
 8006da8:	bf00      	nop
 8006daa:	3718      	adds	r7, #24
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8006db8:	4a08      	ldr	r2, [pc, #32]	; (8006ddc <HAL_HSEM_FastTake+0x2c>)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	3320      	adds	r3, #32
 8006dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dc2:	4a07      	ldr	r2, [pc, #28]	; (8006de0 <HAL_HSEM_FastTake+0x30>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d101      	bne.n	8006dcc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	e000      	b.n	8006dce <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	370c      	adds	r7, #12
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr
 8006dda:	bf00      	nop
 8006ddc:	58026400 	.word	0x58026400
 8006de0:	80000300 	.word	0x80000300

08006de4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8006dee:	4906      	ldr	r1, [pc, #24]	; (8006e08 <HAL_HSEM_Release+0x24>)
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr
 8006e08:	58026400 	.word	0x58026400

08006e0c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8006e14:	4b05      	ldr	r3, [pc, #20]	; (8006e2c <HAL_HSEM_ActivateNotification+0x20>)
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	4904      	ldr	r1, [pc, #16]	; (8006e2c <HAL_HSEM_ActivateNotification+0x20>)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	600b      	str	r3, [r1, #0]
#endif
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr
 8006e2c:	58026500 	.word	0x58026500

08006e30 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8006e36:	4b0a      	ldr	r3, [pc, #40]	; (8006e60 <HAL_HSEM_IRQHandler+0x30>)
 8006e38:	68db      	ldr	r3, [r3, #12]
 8006e3a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8006e3c:	4b08      	ldr	r3, [pc, #32]	; (8006e60 <HAL_HSEM_IRQHandler+0x30>)
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	43db      	mvns	r3, r3
 8006e44:	4906      	ldr	r1, [pc, #24]	; (8006e60 <HAL_HSEM_IRQHandler+0x30>)
 8006e46:	4013      	ands	r3, r2
 8006e48:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8006e4a:	4a05      	ldr	r2, [pc, #20]	; (8006e60 <HAL_HSEM_IRQHandler+0x30>)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f00a faf3 	bl	801143c <HAL_HSEM_FreeCallback>
}
 8006e56:	bf00      	nop
 8006e58:	3708      	adds	r7, #8
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	58026500 	.word	0x58026500

08006e64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e07f      	b.n	8006f76 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d106      	bne.n	8006e90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f7fa f9c6 	bl	800121c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2224      	movs	r2, #36	; 0x24
 8006e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f022 0201 	bic.w	r2, r2, #1
 8006ea6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685a      	ldr	r2, [r3, #4]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006eb4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	689a      	ldr	r2, [r3, #8]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ec4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d107      	bne.n	8006ede <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	689a      	ldr	r2, [r3, #8]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006eda:	609a      	str	r2, [r3, #8]
 8006edc:	e006      	b.n	8006eec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	689a      	ldr	r2, [r3, #8]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006eea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d104      	bne.n	8006efe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006efc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	6859      	ldr	r1, [r3, #4]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	4b1d      	ldr	r3, [pc, #116]	; (8006f80 <HAL_I2C_Init+0x11c>)
 8006f0a:	430b      	orrs	r3, r1
 8006f0c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68da      	ldr	r2, [r3, #12]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	691a      	ldr	r2, [r3, #16]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	ea42 0103 	orr.w	r1, r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	021a      	lsls	r2, r3, #8
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	430a      	orrs	r2, r1
 8006f36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	69d9      	ldr	r1, [r3, #28]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6a1a      	ldr	r2, [r3, #32]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	430a      	orrs	r2, r1
 8006f46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f042 0201 	orr.w	r2, r2, #1
 8006f56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2220      	movs	r2, #32
 8006f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3708      	adds	r7, #8
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	02008000 	.word	0x02008000

08006f84 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d005      	beq.n	8006fb0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	68f9      	ldr	r1, [r7, #12]
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	4798      	blx	r3
  }
}
 8006fb0:	bf00      	nop
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	2b20      	cmp	r3, #32
 8006fcc:	d138      	bne.n	8007040 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d101      	bne.n	8006fdc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006fd8:	2302      	movs	r3, #2
 8006fda:	e032      	b.n	8007042 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2224      	movs	r2, #36	; 0x24
 8006fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f022 0201 	bic.w	r2, r2, #1
 8006ffa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800700a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6819      	ldr	r1, [r3, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	683a      	ldr	r2, [r7, #0]
 8007018:	430a      	orrs	r2, r1
 800701a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f042 0201 	orr.w	r2, r2, #1
 800702a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2220      	movs	r2, #32
 8007030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800703c:	2300      	movs	r3, #0
 800703e:	e000      	b.n	8007042 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007040:	2302      	movs	r3, #2
  }
}
 8007042:	4618      	mov	r0, r3
 8007044:	370c      	adds	r7, #12
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800704e:	b480      	push	{r7}
 8007050:	b085      	sub	sp, #20
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
 8007056:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800705e:	b2db      	uxtb	r3, r3
 8007060:	2b20      	cmp	r3, #32
 8007062:	d139      	bne.n	80070d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800706a:	2b01      	cmp	r3, #1
 800706c:	d101      	bne.n	8007072 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800706e:	2302      	movs	r3, #2
 8007070:	e033      	b.n	80070da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2201      	movs	r2, #1
 8007076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2224      	movs	r2, #36	; 0x24
 800707e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f022 0201 	bic.w	r2, r2, #1
 8007090:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80070a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	021b      	lsls	r3, r3, #8
 80070a6:	68fa      	ldr	r2, [r7, #12]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f042 0201 	orr.w	r2, r2, #1
 80070c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2220      	movs	r2, #32
 80070c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80070d4:	2300      	movs	r3, #0
 80070d6:	e000      	b.n	80070da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80070d8:	2302      	movs	r3, #2
  }
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3714      	adds	r7, #20
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
	...

080070e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80070f0:	4b29      	ldr	r3, [pc, #164]	; (8007198 <HAL_PWREx_ConfigSupply+0xb0>)
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	f003 0307 	and.w	r3, r3, #7
 80070f8:	2b06      	cmp	r3, #6
 80070fa:	d00a      	beq.n	8007112 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80070fc:	4b26      	ldr	r3, [pc, #152]	; (8007198 <HAL_PWREx_ConfigSupply+0xb0>)
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	429a      	cmp	r2, r3
 8007108:	d001      	beq.n	800710e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e040      	b.n	8007190 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800710e:	2300      	movs	r3, #0
 8007110:	e03e      	b.n	8007190 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007112:	4b21      	ldr	r3, [pc, #132]	; (8007198 <HAL_PWREx_ConfigSupply+0xb0>)
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800711a:	491f      	ldr	r1, [pc, #124]	; (8007198 <HAL_PWREx_ConfigSupply+0xb0>)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4313      	orrs	r3, r2
 8007120:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007122:	f7fb fc5b 	bl	80029dc <HAL_GetTick>
 8007126:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007128:	e009      	b.n	800713e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800712a:	f7fb fc57 	bl	80029dc <HAL_GetTick>
 800712e:	4602      	mov	r2, r0
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	1ad3      	subs	r3, r2, r3
 8007134:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007138:	d901      	bls.n	800713e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e028      	b.n	8007190 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800713e:	4b16      	ldr	r3, [pc, #88]	; (8007198 <HAL_PWREx_ConfigSupply+0xb0>)
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007146:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800714a:	d1ee      	bne.n	800712a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2b1e      	cmp	r3, #30
 8007150:	d008      	beq.n	8007164 <HAL_PWREx_ConfigSupply+0x7c>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2b2e      	cmp	r3, #46	; 0x2e
 8007156:	d005      	beq.n	8007164 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2b1d      	cmp	r3, #29
 800715c:	d002      	beq.n	8007164 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2b2d      	cmp	r3, #45	; 0x2d
 8007162:	d114      	bne.n	800718e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007164:	f7fb fc3a 	bl	80029dc <HAL_GetTick>
 8007168:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800716a:	e009      	b.n	8007180 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800716c:	f7fb fc36 	bl	80029dc <HAL_GetTick>
 8007170:	4602      	mov	r2, r0
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800717a:	d901      	bls.n	8007180 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	e007      	b.n	8007190 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007180:	4b05      	ldr	r3, [pc, #20]	; (8007198 <HAL_PWREx_ConfigSupply+0xb0>)
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800718c:	d1ee      	bne.n	800716c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3710      	adds	r7, #16
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	58024800 	.word	0x58024800

0800719c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800719c:	b480      	push	{r7}
 800719e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80071a0:	4b05      	ldr	r3, [pc, #20]	; (80071b8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	4a04      	ldr	r2, [pc, #16]	; (80071b8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80071a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071aa:	60d3      	str	r3, [r2, #12]
}
 80071ac:	bf00      	nop
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	58024800 	.word	0x58024800

080071bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b08c      	sub	sp, #48	; 0x30
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d101      	bne.n	80071ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e3ff      	b.n	80079ce <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	f000 8087 	beq.w	80072ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071dc:	4b99      	ldr	r3, [pc, #612]	; (8007444 <HAL_RCC_OscConfig+0x288>)
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80071e6:	4b97      	ldr	r3, [pc, #604]	; (8007444 <HAL_RCC_OscConfig+0x288>)
 80071e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ea:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80071ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ee:	2b10      	cmp	r3, #16
 80071f0:	d007      	beq.n	8007202 <HAL_RCC_OscConfig+0x46>
 80071f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f4:	2b18      	cmp	r3, #24
 80071f6:	d110      	bne.n	800721a <HAL_RCC_OscConfig+0x5e>
 80071f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fa:	f003 0303 	and.w	r3, r3, #3
 80071fe:	2b02      	cmp	r3, #2
 8007200:	d10b      	bne.n	800721a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007202:	4b90      	ldr	r3, [pc, #576]	; (8007444 <HAL_RCC_OscConfig+0x288>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800720a:	2b00      	cmp	r3, #0
 800720c:	d06c      	beq.n	80072e8 <HAL_RCC_OscConfig+0x12c>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d168      	bne.n	80072e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e3d9      	b.n	80079ce <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007222:	d106      	bne.n	8007232 <HAL_RCC_OscConfig+0x76>
 8007224:	4b87      	ldr	r3, [pc, #540]	; (8007444 <HAL_RCC_OscConfig+0x288>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a86      	ldr	r2, [pc, #536]	; (8007444 <HAL_RCC_OscConfig+0x288>)
 800722a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800722e:	6013      	str	r3, [r2, #0]
 8007230:	e02e      	b.n	8007290 <HAL_RCC_OscConfig+0xd4>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d10c      	bne.n	8007254 <HAL_RCC_OscConfig+0x98>
 800723a:	4b82      	ldr	r3, [pc, #520]	; (8007444 <HAL_RCC_OscConfig+0x288>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a81      	ldr	r2, [pc, #516]	; (8007444 <HAL_RCC_OscConfig+0x288>)
 8007240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007244:	6013      	str	r3, [r2, #0]
 8007246:	4b7f      	ldr	r3, [pc, #508]	; (8007444 <HAL_RCC_OscConfig+0x288>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a7e      	ldr	r2, [pc, #504]	; (8007444 <HAL_RCC_OscConfig+0x288>)
 800724c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007250:	6013      	str	r3, [r2, #0]
 8007252:	e01d      	b.n	8007290 <HAL_RCC_OscConfig+0xd4>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800725c:	d10c      	bne.n	8007278 <HAL_RCC_OscConfig+0xbc>
 800725e:	4b79      	ldr	r3, [pc, #484]	; (8007444 <HAL_RCC_OscConfig+0x288>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a78      	ldr	r2, [pc, #480]	; (8007444 <HAL_RCC_OscConfig+0x288>)
 8007264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007268:	6013      	str	r3, [r2, #0]
 800726a:	4b76      	ldr	r3, [pc, #472]	; (8007444 <HAL_RCC_OscConfig+0x288>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a75      	ldr	r2, [pc, #468]	; (8007444 <HAL_RCC_OscConfig+0x288>)
 8007270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007274:	6013      	str	r3, [r2, #0]
 8007276:	e00b      	b.n	8007290 <HAL_RCC_OscConfig+0xd4>
 8007278:	4b72      	ldr	r3, [pc, #456]	; (8007444 <HAL_RCC_OscConfig+0x288>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a71      	ldr	r2, [pc, #452]	; (8007444 <HAL_RCC_OscConfig+0x288>)
 800727e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007282:	6013      	str	r3, [r2, #0]
 8007284:	4b6f      	ldr	r3, [pc, #444]	; (8007444 <HAL_RCC_OscConfig+0x288>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a6e      	ldr	r2, [pc, #440]	; (8007444 <HAL_RCC_OscConfig+0x288>)
 800728a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800728e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d013      	beq.n	80072c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007298:	f7fb fba0 	bl	80029dc <HAL_GetTick>
 800729c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800729e:	e008      	b.n	80072b2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80072a0:	f7fb fb9c 	bl	80029dc <HAL_GetTick>
 80072a4:	4602      	mov	r2, r0
 80072a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a8:	1ad3      	subs	r3, r2, r3
 80072aa:	2b64      	cmp	r3, #100	; 0x64
 80072ac:	d901      	bls.n	80072b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	e38d      	b.n	80079ce <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80072b2:	4b64      	ldr	r3, [pc, #400]	; (8007444 <HAL_RCC_OscConfig+0x288>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d0f0      	beq.n	80072a0 <HAL_RCC_OscConfig+0xe4>
 80072be:	e014      	b.n	80072ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072c0:	f7fb fb8c 	bl	80029dc <HAL_GetTick>
 80072c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80072c6:	e008      	b.n	80072da <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80072c8:	f7fb fb88 	bl	80029dc <HAL_GetTick>
 80072cc:	4602      	mov	r2, r0
 80072ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d0:	1ad3      	subs	r3, r2, r3
 80072d2:	2b64      	cmp	r3, #100	; 0x64
 80072d4:	d901      	bls.n	80072da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80072d6:	2303      	movs	r3, #3
 80072d8:	e379      	b.n	80079ce <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80072da:	4b5a      	ldr	r3, [pc, #360]	; (8007444 <HAL_RCC_OscConfig+0x288>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1f0      	bne.n	80072c8 <HAL_RCC_OscConfig+0x10c>
 80072e6:	e000      	b.n	80072ea <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0302 	and.w	r3, r3, #2
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f000 80ae 	beq.w	8007454 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072f8:	4b52      	ldr	r3, [pc, #328]	; (8007444 <HAL_RCC_OscConfig+0x288>)
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007300:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007302:	4b50      	ldr	r3, [pc, #320]	; (8007444 <HAL_RCC_OscConfig+0x288>)
 8007304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007306:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007308:	6a3b      	ldr	r3, [r7, #32]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d007      	beq.n	800731e <HAL_RCC_OscConfig+0x162>
 800730e:	6a3b      	ldr	r3, [r7, #32]
 8007310:	2b18      	cmp	r3, #24
 8007312:	d13a      	bne.n	800738a <HAL_RCC_OscConfig+0x1ce>
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	f003 0303 	and.w	r3, r3, #3
 800731a:	2b00      	cmp	r3, #0
 800731c:	d135      	bne.n	800738a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800731e:	4b49      	ldr	r3, [pc, #292]	; (8007444 <HAL_RCC_OscConfig+0x288>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 0304 	and.w	r3, r3, #4
 8007326:	2b00      	cmp	r3, #0
 8007328:	d005      	beq.n	8007336 <HAL_RCC_OscConfig+0x17a>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d101      	bne.n	8007336 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e34b      	b.n	80079ce <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007336:	f7fb fb81 	bl	8002a3c <HAL_GetREVID>
 800733a:	4603      	mov	r3, r0
 800733c:	f241 0203 	movw	r2, #4099	; 0x1003
 8007340:	4293      	cmp	r3, r2
 8007342:	d817      	bhi.n	8007374 <HAL_RCC_OscConfig+0x1b8>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	2b40      	cmp	r3, #64	; 0x40
 800734a:	d108      	bne.n	800735e <HAL_RCC_OscConfig+0x1a2>
 800734c:	4b3d      	ldr	r3, [pc, #244]	; (8007444 <HAL_RCC_OscConfig+0x288>)
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007354:	4a3b      	ldr	r2, [pc, #236]	; (8007444 <HAL_RCC_OscConfig+0x288>)
 8007356:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800735a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800735c:	e07a      	b.n	8007454 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800735e:	4b39      	ldr	r3, [pc, #228]	; (8007444 <HAL_RCC_OscConfig+0x288>)
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	031b      	lsls	r3, r3, #12
 800736c:	4935      	ldr	r1, [pc, #212]	; (8007444 <HAL_RCC_OscConfig+0x288>)
 800736e:	4313      	orrs	r3, r2
 8007370:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007372:	e06f      	b.n	8007454 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007374:	4b33      	ldr	r3, [pc, #204]	; (8007444 <HAL_RCC_OscConfig+0x288>)
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	061b      	lsls	r3, r3, #24
 8007382:	4930      	ldr	r1, [pc, #192]	; (8007444 <HAL_RCC_OscConfig+0x288>)
 8007384:	4313      	orrs	r3, r2
 8007386:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007388:	e064      	b.n	8007454 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d045      	beq.n	800741e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007392:	4b2c      	ldr	r3, [pc, #176]	; (8007444 <HAL_RCC_OscConfig+0x288>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f023 0219 	bic.w	r2, r3, #25
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	4929      	ldr	r1, [pc, #164]	; (8007444 <HAL_RCC_OscConfig+0x288>)
 80073a0:	4313      	orrs	r3, r2
 80073a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073a4:	f7fb fb1a 	bl	80029dc <HAL_GetTick>
 80073a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80073aa:	e008      	b.n	80073be <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80073ac:	f7fb fb16 	bl	80029dc <HAL_GetTick>
 80073b0:	4602      	mov	r2, r0
 80073b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d901      	bls.n	80073be <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80073ba:	2303      	movs	r3, #3
 80073bc:	e307      	b.n	80079ce <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80073be:	4b21      	ldr	r3, [pc, #132]	; (8007444 <HAL_RCC_OscConfig+0x288>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 0304 	and.w	r3, r3, #4
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d0f0      	beq.n	80073ac <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073ca:	f7fb fb37 	bl	8002a3c <HAL_GetREVID>
 80073ce:	4603      	mov	r3, r0
 80073d0:	f241 0203 	movw	r2, #4099	; 0x1003
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d817      	bhi.n	8007408 <HAL_RCC_OscConfig+0x24c>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	2b40      	cmp	r3, #64	; 0x40
 80073de:	d108      	bne.n	80073f2 <HAL_RCC_OscConfig+0x236>
 80073e0:	4b18      	ldr	r3, [pc, #96]	; (8007444 <HAL_RCC_OscConfig+0x288>)
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80073e8:	4a16      	ldr	r2, [pc, #88]	; (8007444 <HAL_RCC_OscConfig+0x288>)
 80073ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073ee:	6053      	str	r3, [r2, #4]
 80073f0:	e030      	b.n	8007454 <HAL_RCC_OscConfig+0x298>
 80073f2:	4b14      	ldr	r3, [pc, #80]	; (8007444 <HAL_RCC_OscConfig+0x288>)
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	031b      	lsls	r3, r3, #12
 8007400:	4910      	ldr	r1, [pc, #64]	; (8007444 <HAL_RCC_OscConfig+0x288>)
 8007402:	4313      	orrs	r3, r2
 8007404:	604b      	str	r3, [r1, #4]
 8007406:	e025      	b.n	8007454 <HAL_RCC_OscConfig+0x298>
 8007408:	4b0e      	ldr	r3, [pc, #56]	; (8007444 <HAL_RCC_OscConfig+0x288>)
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	691b      	ldr	r3, [r3, #16]
 8007414:	061b      	lsls	r3, r3, #24
 8007416:	490b      	ldr	r1, [pc, #44]	; (8007444 <HAL_RCC_OscConfig+0x288>)
 8007418:	4313      	orrs	r3, r2
 800741a:	604b      	str	r3, [r1, #4]
 800741c:	e01a      	b.n	8007454 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800741e:	4b09      	ldr	r3, [pc, #36]	; (8007444 <HAL_RCC_OscConfig+0x288>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a08      	ldr	r2, [pc, #32]	; (8007444 <HAL_RCC_OscConfig+0x288>)
 8007424:	f023 0301 	bic.w	r3, r3, #1
 8007428:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800742a:	f7fb fad7 	bl	80029dc <HAL_GetTick>
 800742e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007430:	e00a      	b.n	8007448 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007432:	f7fb fad3 	bl	80029dc <HAL_GetTick>
 8007436:	4602      	mov	r2, r0
 8007438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743a:	1ad3      	subs	r3, r2, r3
 800743c:	2b02      	cmp	r3, #2
 800743e:	d903      	bls.n	8007448 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8007440:	2303      	movs	r3, #3
 8007442:	e2c4      	b.n	80079ce <HAL_RCC_OscConfig+0x812>
 8007444:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007448:	4ba4      	ldr	r3, [pc, #656]	; (80076dc <HAL_RCC_OscConfig+0x520>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 0304 	and.w	r3, r3, #4
 8007450:	2b00      	cmp	r3, #0
 8007452:	d1ee      	bne.n	8007432 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 0310 	and.w	r3, r3, #16
 800745c:	2b00      	cmp	r3, #0
 800745e:	f000 80a9 	beq.w	80075b4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007462:	4b9e      	ldr	r3, [pc, #632]	; (80076dc <HAL_RCC_OscConfig+0x520>)
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800746a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800746c:	4b9b      	ldr	r3, [pc, #620]	; (80076dc <HAL_RCC_OscConfig+0x520>)
 800746e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007470:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	2b08      	cmp	r3, #8
 8007476:	d007      	beq.n	8007488 <HAL_RCC_OscConfig+0x2cc>
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	2b18      	cmp	r3, #24
 800747c:	d13a      	bne.n	80074f4 <HAL_RCC_OscConfig+0x338>
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	f003 0303 	and.w	r3, r3, #3
 8007484:	2b01      	cmp	r3, #1
 8007486:	d135      	bne.n	80074f4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007488:	4b94      	ldr	r3, [pc, #592]	; (80076dc <HAL_RCC_OscConfig+0x520>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007490:	2b00      	cmp	r3, #0
 8007492:	d005      	beq.n	80074a0 <HAL_RCC_OscConfig+0x2e4>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	69db      	ldr	r3, [r3, #28]
 8007498:	2b80      	cmp	r3, #128	; 0x80
 800749a:	d001      	beq.n	80074a0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	e296      	b.n	80079ce <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80074a0:	f7fb facc 	bl	8002a3c <HAL_GetREVID>
 80074a4:	4603      	mov	r3, r0
 80074a6:	f241 0203 	movw	r2, #4099	; 0x1003
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d817      	bhi.n	80074de <HAL_RCC_OscConfig+0x322>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a1b      	ldr	r3, [r3, #32]
 80074b2:	2b20      	cmp	r3, #32
 80074b4:	d108      	bne.n	80074c8 <HAL_RCC_OscConfig+0x30c>
 80074b6:	4b89      	ldr	r3, [pc, #548]	; (80076dc <HAL_RCC_OscConfig+0x520>)
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80074be:	4a87      	ldr	r2, [pc, #540]	; (80076dc <HAL_RCC_OscConfig+0x520>)
 80074c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074c4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80074c6:	e075      	b.n	80075b4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80074c8:	4b84      	ldr	r3, [pc, #528]	; (80076dc <HAL_RCC_OscConfig+0x520>)
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a1b      	ldr	r3, [r3, #32]
 80074d4:	069b      	lsls	r3, r3, #26
 80074d6:	4981      	ldr	r1, [pc, #516]	; (80076dc <HAL_RCC_OscConfig+0x520>)
 80074d8:	4313      	orrs	r3, r2
 80074da:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80074dc:	e06a      	b.n	80075b4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80074de:	4b7f      	ldr	r3, [pc, #508]	; (80076dc <HAL_RCC_OscConfig+0x520>)
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a1b      	ldr	r3, [r3, #32]
 80074ea:	061b      	lsls	r3, r3, #24
 80074ec:	497b      	ldr	r1, [pc, #492]	; (80076dc <HAL_RCC_OscConfig+0x520>)
 80074ee:	4313      	orrs	r3, r2
 80074f0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80074f2:	e05f      	b.n	80075b4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	69db      	ldr	r3, [r3, #28]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d042      	beq.n	8007582 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80074fc:	4b77      	ldr	r3, [pc, #476]	; (80076dc <HAL_RCC_OscConfig+0x520>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a76      	ldr	r2, [pc, #472]	; (80076dc <HAL_RCC_OscConfig+0x520>)
 8007502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007506:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007508:	f7fb fa68 	bl	80029dc <HAL_GetTick>
 800750c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800750e:	e008      	b.n	8007522 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007510:	f7fb fa64 	bl	80029dc <HAL_GetTick>
 8007514:	4602      	mov	r2, r0
 8007516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	2b02      	cmp	r3, #2
 800751c:	d901      	bls.n	8007522 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800751e:	2303      	movs	r3, #3
 8007520:	e255      	b.n	80079ce <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007522:	4b6e      	ldr	r3, [pc, #440]	; (80076dc <HAL_RCC_OscConfig+0x520>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800752a:	2b00      	cmp	r3, #0
 800752c:	d0f0      	beq.n	8007510 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800752e:	f7fb fa85 	bl	8002a3c <HAL_GetREVID>
 8007532:	4603      	mov	r3, r0
 8007534:	f241 0203 	movw	r2, #4099	; 0x1003
 8007538:	4293      	cmp	r3, r2
 800753a:	d817      	bhi.n	800756c <HAL_RCC_OscConfig+0x3b0>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6a1b      	ldr	r3, [r3, #32]
 8007540:	2b20      	cmp	r3, #32
 8007542:	d108      	bne.n	8007556 <HAL_RCC_OscConfig+0x39a>
 8007544:	4b65      	ldr	r3, [pc, #404]	; (80076dc <HAL_RCC_OscConfig+0x520>)
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800754c:	4a63      	ldr	r2, [pc, #396]	; (80076dc <HAL_RCC_OscConfig+0x520>)
 800754e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007552:	6053      	str	r3, [r2, #4]
 8007554:	e02e      	b.n	80075b4 <HAL_RCC_OscConfig+0x3f8>
 8007556:	4b61      	ldr	r3, [pc, #388]	; (80076dc <HAL_RCC_OscConfig+0x520>)
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6a1b      	ldr	r3, [r3, #32]
 8007562:	069b      	lsls	r3, r3, #26
 8007564:	495d      	ldr	r1, [pc, #372]	; (80076dc <HAL_RCC_OscConfig+0x520>)
 8007566:	4313      	orrs	r3, r2
 8007568:	604b      	str	r3, [r1, #4]
 800756a:	e023      	b.n	80075b4 <HAL_RCC_OscConfig+0x3f8>
 800756c:	4b5b      	ldr	r3, [pc, #364]	; (80076dc <HAL_RCC_OscConfig+0x520>)
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6a1b      	ldr	r3, [r3, #32]
 8007578:	061b      	lsls	r3, r3, #24
 800757a:	4958      	ldr	r1, [pc, #352]	; (80076dc <HAL_RCC_OscConfig+0x520>)
 800757c:	4313      	orrs	r3, r2
 800757e:	60cb      	str	r3, [r1, #12]
 8007580:	e018      	b.n	80075b4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007582:	4b56      	ldr	r3, [pc, #344]	; (80076dc <HAL_RCC_OscConfig+0x520>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a55      	ldr	r2, [pc, #340]	; (80076dc <HAL_RCC_OscConfig+0x520>)
 8007588:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800758c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800758e:	f7fb fa25 	bl	80029dc <HAL_GetTick>
 8007592:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007594:	e008      	b.n	80075a8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007596:	f7fb fa21 	bl	80029dc <HAL_GetTick>
 800759a:	4602      	mov	r2, r0
 800759c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d901      	bls.n	80075a8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80075a4:	2303      	movs	r3, #3
 80075a6:	e212      	b.n	80079ce <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80075a8:	4b4c      	ldr	r3, [pc, #304]	; (80076dc <HAL_RCC_OscConfig+0x520>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1f0      	bne.n	8007596 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 0308 	and.w	r3, r3, #8
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d036      	beq.n	800762e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	695b      	ldr	r3, [r3, #20]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d019      	beq.n	80075fc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80075c8:	4b44      	ldr	r3, [pc, #272]	; (80076dc <HAL_RCC_OscConfig+0x520>)
 80075ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075cc:	4a43      	ldr	r2, [pc, #268]	; (80076dc <HAL_RCC_OscConfig+0x520>)
 80075ce:	f043 0301 	orr.w	r3, r3, #1
 80075d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075d4:	f7fb fa02 	bl	80029dc <HAL_GetTick>
 80075d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80075da:	e008      	b.n	80075ee <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80075dc:	f7fb f9fe 	bl	80029dc <HAL_GetTick>
 80075e0:	4602      	mov	r2, r0
 80075e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	2b02      	cmp	r3, #2
 80075e8:	d901      	bls.n	80075ee <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80075ea:	2303      	movs	r3, #3
 80075ec:	e1ef      	b.n	80079ce <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80075ee:	4b3b      	ldr	r3, [pc, #236]	; (80076dc <HAL_RCC_OscConfig+0x520>)
 80075f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075f2:	f003 0302 	and.w	r3, r3, #2
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d0f0      	beq.n	80075dc <HAL_RCC_OscConfig+0x420>
 80075fa:	e018      	b.n	800762e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80075fc:	4b37      	ldr	r3, [pc, #220]	; (80076dc <HAL_RCC_OscConfig+0x520>)
 80075fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007600:	4a36      	ldr	r2, [pc, #216]	; (80076dc <HAL_RCC_OscConfig+0x520>)
 8007602:	f023 0301 	bic.w	r3, r3, #1
 8007606:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007608:	f7fb f9e8 	bl	80029dc <HAL_GetTick>
 800760c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800760e:	e008      	b.n	8007622 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007610:	f7fb f9e4 	bl	80029dc <HAL_GetTick>
 8007614:	4602      	mov	r2, r0
 8007616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	2b02      	cmp	r3, #2
 800761c:	d901      	bls.n	8007622 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800761e:	2303      	movs	r3, #3
 8007620:	e1d5      	b.n	80079ce <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007622:	4b2e      	ldr	r3, [pc, #184]	; (80076dc <HAL_RCC_OscConfig+0x520>)
 8007624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007626:	f003 0302 	and.w	r3, r3, #2
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1f0      	bne.n	8007610 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f003 0320 	and.w	r3, r3, #32
 8007636:	2b00      	cmp	r3, #0
 8007638:	d036      	beq.n	80076a8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d019      	beq.n	8007676 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007642:	4b26      	ldr	r3, [pc, #152]	; (80076dc <HAL_RCC_OscConfig+0x520>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a25      	ldr	r2, [pc, #148]	; (80076dc <HAL_RCC_OscConfig+0x520>)
 8007648:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800764c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800764e:	f7fb f9c5 	bl	80029dc <HAL_GetTick>
 8007652:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007654:	e008      	b.n	8007668 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007656:	f7fb f9c1 	bl	80029dc <HAL_GetTick>
 800765a:	4602      	mov	r2, r0
 800765c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	2b02      	cmp	r3, #2
 8007662:	d901      	bls.n	8007668 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8007664:	2303      	movs	r3, #3
 8007666:	e1b2      	b.n	80079ce <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007668:	4b1c      	ldr	r3, [pc, #112]	; (80076dc <HAL_RCC_OscConfig+0x520>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007670:	2b00      	cmp	r3, #0
 8007672:	d0f0      	beq.n	8007656 <HAL_RCC_OscConfig+0x49a>
 8007674:	e018      	b.n	80076a8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007676:	4b19      	ldr	r3, [pc, #100]	; (80076dc <HAL_RCC_OscConfig+0x520>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a18      	ldr	r2, [pc, #96]	; (80076dc <HAL_RCC_OscConfig+0x520>)
 800767c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007680:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007682:	f7fb f9ab 	bl	80029dc <HAL_GetTick>
 8007686:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007688:	e008      	b.n	800769c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800768a:	f7fb f9a7 	bl	80029dc <HAL_GetTick>
 800768e:	4602      	mov	r2, r0
 8007690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007692:	1ad3      	subs	r3, r2, r3
 8007694:	2b02      	cmp	r3, #2
 8007696:	d901      	bls.n	800769c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8007698:	2303      	movs	r3, #3
 800769a:	e198      	b.n	80079ce <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800769c:	4b0f      	ldr	r3, [pc, #60]	; (80076dc <HAL_RCC_OscConfig+0x520>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d1f0      	bne.n	800768a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 0304 	and.w	r3, r3, #4
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f000 8085 	beq.w	80077c0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80076b6:	4b0a      	ldr	r3, [pc, #40]	; (80076e0 <HAL_RCC_OscConfig+0x524>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a09      	ldr	r2, [pc, #36]	; (80076e0 <HAL_RCC_OscConfig+0x524>)
 80076bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80076c2:	f7fb f98b 	bl	80029dc <HAL_GetTick>
 80076c6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076c8:	e00c      	b.n	80076e4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80076ca:	f7fb f987 	bl	80029dc <HAL_GetTick>
 80076ce:	4602      	mov	r2, r0
 80076d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d2:	1ad3      	subs	r3, r2, r3
 80076d4:	2b64      	cmp	r3, #100	; 0x64
 80076d6:	d905      	bls.n	80076e4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80076d8:	2303      	movs	r3, #3
 80076da:	e178      	b.n	80079ce <HAL_RCC_OscConfig+0x812>
 80076dc:	58024400 	.word	0x58024400
 80076e0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076e4:	4b96      	ldr	r3, [pc, #600]	; (8007940 <HAL_RCC_OscConfig+0x784>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d0ec      	beq.n	80076ca <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d106      	bne.n	8007706 <HAL_RCC_OscConfig+0x54a>
 80076f8:	4b92      	ldr	r3, [pc, #584]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 80076fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076fc:	4a91      	ldr	r2, [pc, #580]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 80076fe:	f043 0301 	orr.w	r3, r3, #1
 8007702:	6713      	str	r3, [r2, #112]	; 0x70
 8007704:	e02d      	b.n	8007762 <HAL_RCC_OscConfig+0x5a6>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10c      	bne.n	8007728 <HAL_RCC_OscConfig+0x56c>
 800770e:	4b8d      	ldr	r3, [pc, #564]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 8007710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007712:	4a8c      	ldr	r2, [pc, #560]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 8007714:	f023 0301 	bic.w	r3, r3, #1
 8007718:	6713      	str	r3, [r2, #112]	; 0x70
 800771a:	4b8a      	ldr	r3, [pc, #552]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 800771c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800771e:	4a89      	ldr	r2, [pc, #548]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 8007720:	f023 0304 	bic.w	r3, r3, #4
 8007724:	6713      	str	r3, [r2, #112]	; 0x70
 8007726:	e01c      	b.n	8007762 <HAL_RCC_OscConfig+0x5a6>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	2b05      	cmp	r3, #5
 800772e:	d10c      	bne.n	800774a <HAL_RCC_OscConfig+0x58e>
 8007730:	4b84      	ldr	r3, [pc, #528]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 8007732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007734:	4a83      	ldr	r2, [pc, #524]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 8007736:	f043 0304 	orr.w	r3, r3, #4
 800773a:	6713      	str	r3, [r2, #112]	; 0x70
 800773c:	4b81      	ldr	r3, [pc, #516]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 800773e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007740:	4a80      	ldr	r2, [pc, #512]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 8007742:	f043 0301 	orr.w	r3, r3, #1
 8007746:	6713      	str	r3, [r2, #112]	; 0x70
 8007748:	e00b      	b.n	8007762 <HAL_RCC_OscConfig+0x5a6>
 800774a:	4b7e      	ldr	r3, [pc, #504]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 800774c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800774e:	4a7d      	ldr	r2, [pc, #500]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 8007750:	f023 0301 	bic.w	r3, r3, #1
 8007754:	6713      	str	r3, [r2, #112]	; 0x70
 8007756:	4b7b      	ldr	r3, [pc, #492]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 8007758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800775a:	4a7a      	ldr	r2, [pc, #488]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 800775c:	f023 0304 	bic.w	r3, r3, #4
 8007760:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d015      	beq.n	8007796 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800776a:	f7fb f937 	bl	80029dc <HAL_GetTick>
 800776e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007770:	e00a      	b.n	8007788 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007772:	f7fb f933 	bl	80029dc <HAL_GetTick>
 8007776:	4602      	mov	r2, r0
 8007778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777a:	1ad3      	subs	r3, r2, r3
 800777c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007780:	4293      	cmp	r3, r2
 8007782:	d901      	bls.n	8007788 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8007784:	2303      	movs	r3, #3
 8007786:	e122      	b.n	80079ce <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007788:	4b6e      	ldr	r3, [pc, #440]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 800778a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800778c:	f003 0302 	and.w	r3, r3, #2
 8007790:	2b00      	cmp	r3, #0
 8007792:	d0ee      	beq.n	8007772 <HAL_RCC_OscConfig+0x5b6>
 8007794:	e014      	b.n	80077c0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007796:	f7fb f921 	bl	80029dc <HAL_GetTick>
 800779a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800779c:	e00a      	b.n	80077b4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800779e:	f7fb f91d 	bl	80029dc <HAL_GetTick>
 80077a2:	4602      	mov	r2, r0
 80077a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d901      	bls.n	80077b4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80077b0:	2303      	movs	r3, #3
 80077b2:	e10c      	b.n	80079ce <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80077b4:	4b63      	ldr	r3, [pc, #396]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 80077b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077b8:	f003 0302 	and.w	r3, r3, #2
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d1ee      	bne.n	800779e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 8101 	beq.w	80079cc <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80077ca:	4b5e      	ldr	r3, [pc, #376]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077d2:	2b18      	cmp	r3, #24
 80077d4:	f000 80bc 	beq.w	8007950 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077dc:	2b02      	cmp	r3, #2
 80077de:	f040 8095 	bne.w	800790c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077e2:	4b58      	ldr	r3, [pc, #352]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a57      	ldr	r2, [pc, #348]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 80077e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ee:	f7fb f8f5 	bl	80029dc <HAL_GetTick>
 80077f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80077f4:	e008      	b.n	8007808 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80077f6:	f7fb f8f1 	bl	80029dc <HAL_GetTick>
 80077fa:	4602      	mov	r2, r0
 80077fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fe:	1ad3      	subs	r3, r2, r3
 8007800:	2b02      	cmp	r3, #2
 8007802:	d901      	bls.n	8007808 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8007804:	2303      	movs	r3, #3
 8007806:	e0e2      	b.n	80079ce <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007808:	4b4e      	ldr	r3, [pc, #312]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007810:	2b00      	cmp	r3, #0
 8007812:	d1f0      	bne.n	80077f6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007814:	4b4b      	ldr	r3, [pc, #300]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 8007816:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007818:	4b4b      	ldr	r3, [pc, #300]	; (8007948 <HAL_RCC_OscConfig+0x78c>)
 800781a:	4013      	ands	r3, r2
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007824:	0112      	lsls	r2, r2, #4
 8007826:	430a      	orrs	r2, r1
 8007828:	4946      	ldr	r1, [pc, #280]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 800782a:	4313      	orrs	r3, r2
 800782c:	628b      	str	r3, [r1, #40]	; 0x28
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007832:	3b01      	subs	r3, #1
 8007834:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800783c:	3b01      	subs	r3, #1
 800783e:	025b      	lsls	r3, r3, #9
 8007840:	b29b      	uxth	r3, r3
 8007842:	431a      	orrs	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007848:	3b01      	subs	r3, #1
 800784a:	041b      	lsls	r3, r3, #16
 800784c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007850:	431a      	orrs	r2, r3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007856:	3b01      	subs	r3, #1
 8007858:	061b      	lsls	r3, r3, #24
 800785a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800785e:	4939      	ldr	r1, [pc, #228]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 8007860:	4313      	orrs	r3, r2
 8007862:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007864:	4b37      	ldr	r3, [pc, #220]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 8007866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007868:	4a36      	ldr	r2, [pc, #216]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 800786a:	f023 0301 	bic.w	r3, r3, #1
 800786e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007870:	4b34      	ldr	r3, [pc, #208]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 8007872:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007874:	4b35      	ldr	r3, [pc, #212]	; (800794c <HAL_RCC_OscConfig+0x790>)
 8007876:	4013      	ands	r3, r2
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800787c:	00d2      	lsls	r2, r2, #3
 800787e:	4931      	ldr	r1, [pc, #196]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 8007880:	4313      	orrs	r3, r2
 8007882:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007884:	4b2f      	ldr	r3, [pc, #188]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 8007886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007888:	f023 020c 	bic.w	r2, r3, #12
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007890:	492c      	ldr	r1, [pc, #176]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 8007892:	4313      	orrs	r3, r2
 8007894:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007896:	4b2b      	ldr	r3, [pc, #172]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 8007898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789a:	f023 0202 	bic.w	r2, r3, #2
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078a2:	4928      	ldr	r1, [pc, #160]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 80078a4:	4313      	orrs	r3, r2
 80078a6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80078a8:	4b26      	ldr	r3, [pc, #152]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 80078aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ac:	4a25      	ldr	r2, [pc, #148]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 80078ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078b4:	4b23      	ldr	r3, [pc, #140]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 80078b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b8:	4a22      	ldr	r2, [pc, #136]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 80078ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80078c0:	4b20      	ldr	r3, [pc, #128]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 80078c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c4:	4a1f      	ldr	r2, [pc, #124]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 80078c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80078ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80078cc:	4b1d      	ldr	r3, [pc, #116]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 80078ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d0:	4a1c      	ldr	r2, [pc, #112]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 80078d2:	f043 0301 	orr.w	r3, r3, #1
 80078d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80078d8:	4b1a      	ldr	r3, [pc, #104]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a19      	ldr	r2, [pc, #100]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 80078de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078e4:	f7fb f87a 	bl	80029dc <HAL_GetTick>
 80078e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80078ea:	e008      	b.n	80078fe <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078ec:	f7fb f876 	bl	80029dc <HAL_GetTick>
 80078f0:	4602      	mov	r2, r0
 80078f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f4:	1ad3      	subs	r3, r2, r3
 80078f6:	2b02      	cmp	r3, #2
 80078f8:	d901      	bls.n	80078fe <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80078fa:	2303      	movs	r3, #3
 80078fc:	e067      	b.n	80079ce <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80078fe:	4b11      	ldr	r3, [pc, #68]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007906:	2b00      	cmp	r3, #0
 8007908:	d0f0      	beq.n	80078ec <HAL_RCC_OscConfig+0x730>
 800790a:	e05f      	b.n	80079cc <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800790c:	4b0d      	ldr	r3, [pc, #52]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a0c      	ldr	r2, [pc, #48]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 8007912:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007916:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007918:	f7fb f860 	bl	80029dc <HAL_GetTick>
 800791c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800791e:	e008      	b.n	8007932 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007920:	f7fb f85c 	bl	80029dc <HAL_GetTick>
 8007924:	4602      	mov	r2, r0
 8007926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007928:	1ad3      	subs	r3, r2, r3
 800792a:	2b02      	cmp	r3, #2
 800792c:	d901      	bls.n	8007932 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800792e:	2303      	movs	r3, #3
 8007930:	e04d      	b.n	80079ce <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007932:	4b04      	ldr	r3, [pc, #16]	; (8007944 <HAL_RCC_OscConfig+0x788>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800793a:	2b00      	cmp	r3, #0
 800793c:	d1f0      	bne.n	8007920 <HAL_RCC_OscConfig+0x764>
 800793e:	e045      	b.n	80079cc <HAL_RCC_OscConfig+0x810>
 8007940:	58024800 	.word	0x58024800
 8007944:	58024400 	.word	0x58024400
 8007948:	fffffc0c 	.word	0xfffffc0c
 800794c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007950:	4b21      	ldr	r3, [pc, #132]	; (80079d8 <HAL_RCC_OscConfig+0x81c>)
 8007952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007954:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007956:	4b20      	ldr	r3, [pc, #128]	; (80079d8 <HAL_RCC_OscConfig+0x81c>)
 8007958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007960:	2b01      	cmp	r3, #1
 8007962:	d031      	beq.n	80079c8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	f003 0203 	and.w	r2, r3, #3
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800796e:	429a      	cmp	r2, r3
 8007970:	d12a      	bne.n	80079c8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	091b      	lsrs	r3, r3, #4
 8007976:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800797e:	429a      	cmp	r2, r3
 8007980:	d122      	bne.n	80079c8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800798e:	429a      	cmp	r2, r3
 8007990:	d11a      	bne.n	80079c8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	0a5b      	lsrs	r3, r3, #9
 8007996:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800799e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d111      	bne.n	80079c8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	0c1b      	lsrs	r3, r3, #16
 80079a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d108      	bne.n	80079c8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	0e1b      	lsrs	r3, r3, #24
 80079ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079c2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d001      	beq.n	80079cc <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	e000      	b.n	80079ce <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3730      	adds	r7, #48	; 0x30
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	58024400 	.word	0x58024400

080079dc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b086      	sub	sp, #24
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d101      	bne.n	80079f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	e19c      	b.n	8007d2a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80079f0:	4b8a      	ldr	r3, [pc, #552]	; (8007c1c <HAL_RCC_ClockConfig+0x240>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 030f 	and.w	r3, r3, #15
 80079f8:	683a      	ldr	r2, [r7, #0]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d910      	bls.n	8007a20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079fe:	4b87      	ldr	r3, [pc, #540]	; (8007c1c <HAL_RCC_ClockConfig+0x240>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f023 020f 	bic.w	r2, r3, #15
 8007a06:	4985      	ldr	r1, [pc, #532]	; (8007c1c <HAL_RCC_ClockConfig+0x240>)
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a0e:	4b83      	ldr	r3, [pc, #524]	; (8007c1c <HAL_RCC_ClockConfig+0x240>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 030f 	and.w	r3, r3, #15
 8007a16:	683a      	ldr	r2, [r7, #0]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d001      	beq.n	8007a20 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e184      	b.n	8007d2a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 0304 	and.w	r3, r3, #4
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d010      	beq.n	8007a4e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	691a      	ldr	r2, [r3, #16]
 8007a30:	4b7b      	ldr	r3, [pc, #492]	; (8007c20 <HAL_RCC_ClockConfig+0x244>)
 8007a32:	699b      	ldr	r3, [r3, #24]
 8007a34:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d908      	bls.n	8007a4e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007a3c:	4b78      	ldr	r3, [pc, #480]	; (8007c20 <HAL_RCC_ClockConfig+0x244>)
 8007a3e:	699b      	ldr	r3, [r3, #24]
 8007a40:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	691b      	ldr	r3, [r3, #16]
 8007a48:	4975      	ldr	r1, [pc, #468]	; (8007c20 <HAL_RCC_ClockConfig+0x244>)
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f003 0308 	and.w	r3, r3, #8
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d010      	beq.n	8007a7c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	695a      	ldr	r2, [r3, #20]
 8007a5e:	4b70      	ldr	r3, [pc, #448]	; (8007c20 <HAL_RCC_ClockConfig+0x244>)
 8007a60:	69db      	ldr	r3, [r3, #28]
 8007a62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d908      	bls.n	8007a7c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007a6a:	4b6d      	ldr	r3, [pc, #436]	; (8007c20 <HAL_RCC_ClockConfig+0x244>)
 8007a6c:	69db      	ldr	r3, [r3, #28]
 8007a6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	695b      	ldr	r3, [r3, #20]
 8007a76:	496a      	ldr	r1, [pc, #424]	; (8007c20 <HAL_RCC_ClockConfig+0x244>)
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 0310 	and.w	r3, r3, #16
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d010      	beq.n	8007aaa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	699a      	ldr	r2, [r3, #24]
 8007a8c:	4b64      	ldr	r3, [pc, #400]	; (8007c20 <HAL_RCC_ClockConfig+0x244>)
 8007a8e:	69db      	ldr	r3, [r3, #28]
 8007a90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d908      	bls.n	8007aaa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007a98:	4b61      	ldr	r3, [pc, #388]	; (8007c20 <HAL_RCC_ClockConfig+0x244>)
 8007a9a:	69db      	ldr	r3, [r3, #28]
 8007a9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	699b      	ldr	r3, [r3, #24]
 8007aa4:	495e      	ldr	r1, [pc, #376]	; (8007c20 <HAL_RCC_ClockConfig+0x244>)
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f003 0320 	and.w	r3, r3, #32
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d010      	beq.n	8007ad8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	69da      	ldr	r2, [r3, #28]
 8007aba:	4b59      	ldr	r3, [pc, #356]	; (8007c20 <HAL_RCC_ClockConfig+0x244>)
 8007abc:	6a1b      	ldr	r3, [r3, #32]
 8007abe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d908      	bls.n	8007ad8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007ac6:	4b56      	ldr	r3, [pc, #344]	; (8007c20 <HAL_RCC_ClockConfig+0x244>)
 8007ac8:	6a1b      	ldr	r3, [r3, #32]
 8007aca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	69db      	ldr	r3, [r3, #28]
 8007ad2:	4953      	ldr	r1, [pc, #332]	; (8007c20 <HAL_RCC_ClockConfig+0x244>)
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 0302 	and.w	r3, r3, #2
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d010      	beq.n	8007b06 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	68da      	ldr	r2, [r3, #12]
 8007ae8:	4b4d      	ldr	r3, [pc, #308]	; (8007c20 <HAL_RCC_ClockConfig+0x244>)
 8007aea:	699b      	ldr	r3, [r3, #24]
 8007aec:	f003 030f 	and.w	r3, r3, #15
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d908      	bls.n	8007b06 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007af4:	4b4a      	ldr	r3, [pc, #296]	; (8007c20 <HAL_RCC_ClockConfig+0x244>)
 8007af6:	699b      	ldr	r3, [r3, #24]
 8007af8:	f023 020f 	bic.w	r2, r3, #15
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	4947      	ldr	r1, [pc, #284]	; (8007c20 <HAL_RCC_ClockConfig+0x244>)
 8007b02:	4313      	orrs	r3, r2
 8007b04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 0301 	and.w	r3, r3, #1
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d055      	beq.n	8007bbe <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007b12:	4b43      	ldr	r3, [pc, #268]	; (8007c20 <HAL_RCC_ClockConfig+0x244>)
 8007b14:	699b      	ldr	r3, [r3, #24]
 8007b16:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	4940      	ldr	r1, [pc, #256]	; (8007c20 <HAL_RCC_ClockConfig+0x244>)
 8007b20:	4313      	orrs	r3, r2
 8007b22:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	2b02      	cmp	r3, #2
 8007b2a:	d107      	bne.n	8007b3c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007b2c:	4b3c      	ldr	r3, [pc, #240]	; (8007c20 <HAL_RCC_ClockConfig+0x244>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d121      	bne.n	8007b7c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e0f6      	b.n	8007d2a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	2b03      	cmp	r3, #3
 8007b42:	d107      	bne.n	8007b54 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007b44:	4b36      	ldr	r3, [pc, #216]	; (8007c20 <HAL_RCC_ClockConfig+0x244>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d115      	bne.n	8007b7c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	e0ea      	b.n	8007d2a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d107      	bne.n	8007b6c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007b5c:	4b30      	ldr	r3, [pc, #192]	; (8007c20 <HAL_RCC_ClockConfig+0x244>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d109      	bne.n	8007b7c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	e0de      	b.n	8007d2a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b6c:	4b2c      	ldr	r3, [pc, #176]	; (8007c20 <HAL_RCC_ClockConfig+0x244>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f003 0304 	and.w	r3, r3, #4
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d101      	bne.n	8007b7c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e0d6      	b.n	8007d2a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007b7c:	4b28      	ldr	r3, [pc, #160]	; (8007c20 <HAL_RCC_ClockConfig+0x244>)
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	f023 0207 	bic.w	r2, r3, #7
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	4925      	ldr	r1, [pc, #148]	; (8007c20 <HAL_RCC_ClockConfig+0x244>)
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b8e:	f7fa ff25 	bl	80029dc <HAL_GetTick>
 8007b92:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b94:	e00a      	b.n	8007bac <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b96:	f7fa ff21 	bl	80029dc <HAL_GetTick>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	1ad3      	subs	r3, r2, r3
 8007ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d901      	bls.n	8007bac <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	e0be      	b.n	8007d2a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bac:	4b1c      	ldr	r3, [pc, #112]	; (8007c20 <HAL_RCC_ClockConfig+0x244>)
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	00db      	lsls	r3, r3, #3
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d1eb      	bne.n	8007b96 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f003 0302 	and.w	r3, r3, #2
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d010      	beq.n	8007bec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	68da      	ldr	r2, [r3, #12]
 8007bce:	4b14      	ldr	r3, [pc, #80]	; (8007c20 <HAL_RCC_ClockConfig+0x244>)
 8007bd0:	699b      	ldr	r3, [r3, #24]
 8007bd2:	f003 030f 	and.w	r3, r3, #15
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d208      	bcs.n	8007bec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007bda:	4b11      	ldr	r3, [pc, #68]	; (8007c20 <HAL_RCC_ClockConfig+0x244>)
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	f023 020f 	bic.w	r2, r3, #15
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	490e      	ldr	r1, [pc, #56]	; (8007c20 <HAL_RCC_ClockConfig+0x244>)
 8007be8:	4313      	orrs	r3, r2
 8007bea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007bec:	4b0b      	ldr	r3, [pc, #44]	; (8007c1c <HAL_RCC_ClockConfig+0x240>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f003 030f 	and.w	r3, r3, #15
 8007bf4:	683a      	ldr	r2, [r7, #0]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d214      	bcs.n	8007c24 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bfa:	4b08      	ldr	r3, [pc, #32]	; (8007c1c <HAL_RCC_ClockConfig+0x240>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f023 020f 	bic.w	r2, r3, #15
 8007c02:	4906      	ldr	r1, [pc, #24]	; (8007c1c <HAL_RCC_ClockConfig+0x240>)
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c0a:	4b04      	ldr	r3, [pc, #16]	; (8007c1c <HAL_RCC_ClockConfig+0x240>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 030f 	and.w	r3, r3, #15
 8007c12:	683a      	ldr	r2, [r7, #0]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d005      	beq.n	8007c24 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e086      	b.n	8007d2a <HAL_RCC_ClockConfig+0x34e>
 8007c1c:	52002000 	.word	0x52002000
 8007c20:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f003 0304 	and.w	r3, r3, #4
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d010      	beq.n	8007c52 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	691a      	ldr	r2, [r3, #16]
 8007c34:	4b3f      	ldr	r3, [pc, #252]	; (8007d34 <HAL_RCC_ClockConfig+0x358>)
 8007c36:	699b      	ldr	r3, [r3, #24]
 8007c38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d208      	bcs.n	8007c52 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007c40:	4b3c      	ldr	r3, [pc, #240]	; (8007d34 <HAL_RCC_ClockConfig+0x358>)
 8007c42:	699b      	ldr	r3, [r3, #24]
 8007c44:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	4939      	ldr	r1, [pc, #228]	; (8007d34 <HAL_RCC_ClockConfig+0x358>)
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f003 0308 	and.w	r3, r3, #8
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d010      	beq.n	8007c80 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	695a      	ldr	r2, [r3, #20]
 8007c62:	4b34      	ldr	r3, [pc, #208]	; (8007d34 <HAL_RCC_ClockConfig+0x358>)
 8007c64:	69db      	ldr	r3, [r3, #28]
 8007c66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d208      	bcs.n	8007c80 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007c6e:	4b31      	ldr	r3, [pc, #196]	; (8007d34 <HAL_RCC_ClockConfig+0x358>)
 8007c70:	69db      	ldr	r3, [r3, #28]
 8007c72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	695b      	ldr	r3, [r3, #20]
 8007c7a:	492e      	ldr	r1, [pc, #184]	; (8007d34 <HAL_RCC_ClockConfig+0x358>)
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 0310 	and.w	r3, r3, #16
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d010      	beq.n	8007cae <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	699a      	ldr	r2, [r3, #24]
 8007c90:	4b28      	ldr	r3, [pc, #160]	; (8007d34 <HAL_RCC_ClockConfig+0x358>)
 8007c92:	69db      	ldr	r3, [r3, #28]
 8007c94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d208      	bcs.n	8007cae <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007c9c:	4b25      	ldr	r3, [pc, #148]	; (8007d34 <HAL_RCC_ClockConfig+0x358>)
 8007c9e:	69db      	ldr	r3, [r3, #28]
 8007ca0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	699b      	ldr	r3, [r3, #24]
 8007ca8:	4922      	ldr	r1, [pc, #136]	; (8007d34 <HAL_RCC_ClockConfig+0x358>)
 8007caa:	4313      	orrs	r3, r2
 8007cac:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 0320 	and.w	r3, r3, #32
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d010      	beq.n	8007cdc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	69da      	ldr	r2, [r3, #28]
 8007cbe:	4b1d      	ldr	r3, [pc, #116]	; (8007d34 <HAL_RCC_ClockConfig+0x358>)
 8007cc0:	6a1b      	ldr	r3, [r3, #32]
 8007cc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d208      	bcs.n	8007cdc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007cca:	4b1a      	ldr	r3, [pc, #104]	; (8007d34 <HAL_RCC_ClockConfig+0x358>)
 8007ccc:	6a1b      	ldr	r3, [r3, #32]
 8007cce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	69db      	ldr	r3, [r3, #28]
 8007cd6:	4917      	ldr	r1, [pc, #92]	; (8007d34 <HAL_RCC_ClockConfig+0x358>)
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007cdc:	f000 f834 	bl	8007d48 <HAL_RCC_GetSysClockFreq>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	4b14      	ldr	r3, [pc, #80]	; (8007d34 <HAL_RCC_ClockConfig+0x358>)
 8007ce4:	699b      	ldr	r3, [r3, #24]
 8007ce6:	0a1b      	lsrs	r3, r3, #8
 8007ce8:	f003 030f 	and.w	r3, r3, #15
 8007cec:	4912      	ldr	r1, [pc, #72]	; (8007d38 <HAL_RCC_ClockConfig+0x35c>)
 8007cee:	5ccb      	ldrb	r3, [r1, r3]
 8007cf0:	f003 031f 	and.w	r3, r3, #31
 8007cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8007cf8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007cfa:	4b0e      	ldr	r3, [pc, #56]	; (8007d34 <HAL_RCC_ClockConfig+0x358>)
 8007cfc:	699b      	ldr	r3, [r3, #24]
 8007cfe:	f003 030f 	and.w	r3, r3, #15
 8007d02:	4a0d      	ldr	r2, [pc, #52]	; (8007d38 <HAL_RCC_ClockConfig+0x35c>)
 8007d04:	5cd3      	ldrb	r3, [r2, r3]
 8007d06:	f003 031f 	and.w	r3, r3, #31
 8007d0a:	693a      	ldr	r2, [r7, #16]
 8007d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d10:	4a0a      	ldr	r2, [pc, #40]	; (8007d3c <HAL_RCC_ClockConfig+0x360>)
 8007d12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007d14:	4a0a      	ldr	r2, [pc, #40]	; (8007d40 <HAL_RCC_ClockConfig+0x364>)
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007d1a:	4b0a      	ldr	r3, [pc, #40]	; (8007d44 <HAL_RCC_ClockConfig+0x368>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f7fa fe12 	bl	8002948 <HAL_InitTick>
 8007d24:	4603      	mov	r3, r0
 8007d26:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3718      	adds	r7, #24
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	58024400 	.word	0x58024400
 8007d38:	08016cc8 	.word	0x08016cc8
 8007d3c:	24000004 	.word	0x24000004
 8007d40:	24000000 	.word	0x24000000
 8007d44:	24000010 	.word	0x24000010

08007d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b089      	sub	sp, #36	; 0x24
 8007d4c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d4e:	4bb3      	ldr	r3, [pc, #716]	; (800801c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d56:	2b18      	cmp	r3, #24
 8007d58:	f200 8155 	bhi.w	8008006 <HAL_RCC_GetSysClockFreq+0x2be>
 8007d5c:	a201      	add	r2, pc, #4	; (adr r2, 8007d64 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d62:	bf00      	nop
 8007d64:	08007dc9 	.word	0x08007dc9
 8007d68:	08008007 	.word	0x08008007
 8007d6c:	08008007 	.word	0x08008007
 8007d70:	08008007 	.word	0x08008007
 8007d74:	08008007 	.word	0x08008007
 8007d78:	08008007 	.word	0x08008007
 8007d7c:	08008007 	.word	0x08008007
 8007d80:	08008007 	.word	0x08008007
 8007d84:	08007def 	.word	0x08007def
 8007d88:	08008007 	.word	0x08008007
 8007d8c:	08008007 	.word	0x08008007
 8007d90:	08008007 	.word	0x08008007
 8007d94:	08008007 	.word	0x08008007
 8007d98:	08008007 	.word	0x08008007
 8007d9c:	08008007 	.word	0x08008007
 8007da0:	08008007 	.word	0x08008007
 8007da4:	08007df5 	.word	0x08007df5
 8007da8:	08008007 	.word	0x08008007
 8007dac:	08008007 	.word	0x08008007
 8007db0:	08008007 	.word	0x08008007
 8007db4:	08008007 	.word	0x08008007
 8007db8:	08008007 	.word	0x08008007
 8007dbc:	08008007 	.word	0x08008007
 8007dc0:	08008007 	.word	0x08008007
 8007dc4:	08007dfb 	.word	0x08007dfb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007dc8:	4b94      	ldr	r3, [pc, #592]	; (800801c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 0320 	and.w	r3, r3, #32
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d009      	beq.n	8007de8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007dd4:	4b91      	ldr	r3, [pc, #580]	; (800801c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	08db      	lsrs	r3, r3, #3
 8007dda:	f003 0303 	and.w	r3, r3, #3
 8007dde:	4a90      	ldr	r2, [pc, #576]	; (8008020 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007de0:	fa22 f303 	lsr.w	r3, r2, r3
 8007de4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007de6:	e111      	b.n	800800c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007de8:	4b8d      	ldr	r3, [pc, #564]	; (8008020 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007dea:	61bb      	str	r3, [r7, #24]
    break;
 8007dec:	e10e      	b.n	800800c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007dee:	4b8d      	ldr	r3, [pc, #564]	; (8008024 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007df0:	61bb      	str	r3, [r7, #24]
    break;
 8007df2:	e10b      	b.n	800800c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007df4:	4b8c      	ldr	r3, [pc, #560]	; (8008028 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007df6:	61bb      	str	r3, [r7, #24]
    break;
 8007df8:	e108      	b.n	800800c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007dfa:	4b88      	ldr	r3, [pc, #544]	; (800801c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dfe:	f003 0303 	and.w	r3, r3, #3
 8007e02:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007e04:	4b85      	ldr	r3, [pc, #532]	; (800801c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e08:	091b      	lsrs	r3, r3, #4
 8007e0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e0e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007e10:	4b82      	ldr	r3, [pc, #520]	; (800801c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e14:	f003 0301 	and.w	r3, r3, #1
 8007e18:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007e1a:	4b80      	ldr	r3, [pc, #512]	; (800801c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e1e:	08db      	lsrs	r3, r3, #3
 8007e20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e24:	68fa      	ldr	r2, [r7, #12]
 8007e26:	fb02 f303 	mul.w	r3, r2, r3
 8007e2a:	ee07 3a90 	vmov	s15, r3
 8007e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e32:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f000 80e1 	beq.w	8008000 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	f000 8083 	beq.w	8007f4c <HAL_RCC_GetSysClockFreq+0x204>
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	2b02      	cmp	r3, #2
 8007e4a:	f200 80a1 	bhi.w	8007f90 <HAL_RCC_GetSysClockFreq+0x248>
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d003      	beq.n	8007e5c <HAL_RCC_GetSysClockFreq+0x114>
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d056      	beq.n	8007f08 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007e5a:	e099      	b.n	8007f90 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e5c:	4b6f      	ldr	r3, [pc, #444]	; (800801c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f003 0320 	and.w	r3, r3, #32
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d02d      	beq.n	8007ec4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e68:	4b6c      	ldr	r3, [pc, #432]	; (800801c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	08db      	lsrs	r3, r3, #3
 8007e6e:	f003 0303 	and.w	r3, r3, #3
 8007e72:	4a6b      	ldr	r2, [pc, #428]	; (8008020 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007e74:	fa22 f303 	lsr.w	r3, r2, r3
 8007e78:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	ee07 3a90 	vmov	s15, r3
 8007e80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	ee07 3a90 	vmov	s15, r3
 8007e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e92:	4b62      	ldr	r3, [pc, #392]	; (800801c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e9a:	ee07 3a90 	vmov	s15, r3
 8007e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ea2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ea6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800802c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007eb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ebe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007ec2:	e087      	b.n	8007fd4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	ee07 3a90 	vmov	s15, r3
 8007eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ece:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008030 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ed6:	4b51      	ldr	r3, [pc, #324]	; (800801c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ede:	ee07 3a90 	vmov	s15, r3
 8007ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ee6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007eea:	eddf 5a50 	vldr	s11, [pc, #320]	; 800802c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f06:	e065      	b.n	8007fd4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	ee07 3a90 	vmov	s15, r3
 8007f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f12:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008034 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f1a:	4b40      	ldr	r3, [pc, #256]	; (800801c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f22:	ee07 3a90 	vmov	s15, r3
 8007f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f2e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800802c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f4a:	e043      	b.n	8007fd4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	ee07 3a90 	vmov	s15, r3
 8007f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f56:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008038 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f5e:	4b2f      	ldr	r3, [pc, #188]	; (800801c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f66:	ee07 3a90 	vmov	s15, r3
 8007f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f72:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800802c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f8e:	e021      	b.n	8007fd4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	ee07 3a90 	vmov	s15, r3
 8007f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f9a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008034 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fa2:	4b1e      	ldr	r3, [pc, #120]	; (800801c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007faa:	ee07 3a90 	vmov	s15, r3
 8007fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007fb6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800802c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fd2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007fd4:	4b11      	ldr	r3, [pc, #68]	; (800801c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fd8:	0a5b      	lsrs	r3, r3, #9
 8007fda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fde:	3301      	adds	r3, #1
 8007fe0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	ee07 3a90 	vmov	s15, r3
 8007fe8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007fec:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ff0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ff4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ff8:	ee17 3a90 	vmov	r3, s15
 8007ffc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007ffe:	e005      	b.n	800800c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008000:	2300      	movs	r3, #0
 8008002:	61bb      	str	r3, [r7, #24]
    break;
 8008004:	e002      	b.n	800800c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008006:	4b07      	ldr	r3, [pc, #28]	; (8008024 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008008:	61bb      	str	r3, [r7, #24]
    break;
 800800a:	bf00      	nop
  }

  return sysclockfreq;
 800800c:	69bb      	ldr	r3, [r7, #24]
}
 800800e:	4618      	mov	r0, r3
 8008010:	3724      	adds	r7, #36	; 0x24
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr
 800801a:	bf00      	nop
 800801c:	58024400 	.word	0x58024400
 8008020:	03d09000 	.word	0x03d09000
 8008024:	003d0900 	.word	0x003d0900
 8008028:	007a1200 	.word	0x007a1200
 800802c:	46000000 	.word	0x46000000
 8008030:	4c742400 	.word	0x4c742400
 8008034:	4a742400 	.word	0x4a742400
 8008038:	4af42400 	.word	0x4af42400

0800803c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008042:	f7ff fe81 	bl	8007d48 <HAL_RCC_GetSysClockFreq>
 8008046:	4602      	mov	r2, r0
 8008048:	4b10      	ldr	r3, [pc, #64]	; (800808c <HAL_RCC_GetHCLKFreq+0x50>)
 800804a:	699b      	ldr	r3, [r3, #24]
 800804c:	0a1b      	lsrs	r3, r3, #8
 800804e:	f003 030f 	and.w	r3, r3, #15
 8008052:	490f      	ldr	r1, [pc, #60]	; (8008090 <HAL_RCC_GetHCLKFreq+0x54>)
 8008054:	5ccb      	ldrb	r3, [r1, r3]
 8008056:	f003 031f 	and.w	r3, r3, #31
 800805a:	fa22 f303 	lsr.w	r3, r2, r3
 800805e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008060:	4b0a      	ldr	r3, [pc, #40]	; (800808c <HAL_RCC_GetHCLKFreq+0x50>)
 8008062:	699b      	ldr	r3, [r3, #24]
 8008064:	f003 030f 	and.w	r3, r3, #15
 8008068:	4a09      	ldr	r2, [pc, #36]	; (8008090 <HAL_RCC_GetHCLKFreq+0x54>)
 800806a:	5cd3      	ldrb	r3, [r2, r3]
 800806c:	f003 031f 	and.w	r3, r3, #31
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	fa22 f303 	lsr.w	r3, r2, r3
 8008076:	4a07      	ldr	r2, [pc, #28]	; (8008094 <HAL_RCC_GetHCLKFreq+0x58>)
 8008078:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800807a:	4a07      	ldr	r2, [pc, #28]	; (8008098 <HAL_RCC_GetHCLKFreq+0x5c>)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008080:	4b04      	ldr	r3, [pc, #16]	; (8008094 <HAL_RCC_GetHCLKFreq+0x58>)
 8008082:	681b      	ldr	r3, [r3, #0]
}
 8008084:	4618      	mov	r0, r3
 8008086:	3708      	adds	r7, #8
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	58024400 	.word	0x58024400
 8008090:	08016cc8 	.word	0x08016cc8
 8008094:	24000004 	.word	0x24000004
 8008098:	24000000 	.word	0x24000000

0800809c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80080a0:	f7ff ffcc 	bl	800803c <HAL_RCC_GetHCLKFreq>
 80080a4:	4602      	mov	r2, r0
 80080a6:	4b06      	ldr	r3, [pc, #24]	; (80080c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80080a8:	69db      	ldr	r3, [r3, #28]
 80080aa:	091b      	lsrs	r3, r3, #4
 80080ac:	f003 0307 	and.w	r3, r3, #7
 80080b0:	4904      	ldr	r1, [pc, #16]	; (80080c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80080b2:	5ccb      	ldrb	r3, [r1, r3]
 80080b4:	f003 031f 	and.w	r3, r3, #31
 80080b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80080bc:	4618      	mov	r0, r3
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	58024400 	.word	0x58024400
 80080c4:	08016cc8 	.word	0x08016cc8

080080c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80080cc:	f7ff ffb6 	bl	800803c <HAL_RCC_GetHCLKFreq>
 80080d0:	4602      	mov	r2, r0
 80080d2:	4b06      	ldr	r3, [pc, #24]	; (80080ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80080d4:	69db      	ldr	r3, [r3, #28]
 80080d6:	0a1b      	lsrs	r3, r3, #8
 80080d8:	f003 0307 	and.w	r3, r3, #7
 80080dc:	4904      	ldr	r1, [pc, #16]	; (80080f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80080de:	5ccb      	ldrb	r3, [r1, r3]
 80080e0:	f003 031f 	and.w	r3, r3, #31
 80080e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	bd80      	pop	{r7, pc}
 80080ec:	58024400 	.word	0x58024400
 80080f0:	08016cc8 	.word	0x08016cc8

080080f4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b086      	sub	sp, #24
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80080fc:	2300      	movs	r3, #0
 80080fe:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008100:	2300      	movs	r3, #0
 8008102:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800810c:	2b00      	cmp	r3, #0
 800810e:	d03f      	beq.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008114:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008118:	d02a      	beq.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800811a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800811e:	d824      	bhi.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008120:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008124:	d018      	beq.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008126:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800812a:	d81e      	bhi.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800812c:	2b00      	cmp	r3, #0
 800812e:	d003      	beq.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008130:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008134:	d007      	beq.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008136:	e018      	b.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008138:	4bab      	ldr	r3, [pc, #684]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800813a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813c:	4aaa      	ldr	r2, [pc, #680]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800813e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008142:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008144:	e015      	b.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	3304      	adds	r3, #4
 800814a:	2102      	movs	r1, #2
 800814c:	4618      	mov	r0, r3
 800814e:	f001 f9cf 	bl	80094f0 <RCCEx_PLL2_Config>
 8008152:	4603      	mov	r3, r0
 8008154:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008156:	e00c      	b.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	3324      	adds	r3, #36	; 0x24
 800815c:	2102      	movs	r1, #2
 800815e:	4618      	mov	r0, r3
 8008160:	f001 fa78 	bl	8009654 <RCCEx_PLL3_Config>
 8008164:	4603      	mov	r3, r0
 8008166:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008168:	e003      	b.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	75fb      	strb	r3, [r7, #23]
      break;
 800816e:	e000      	b.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008170:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008172:	7dfb      	ldrb	r3, [r7, #23]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d109      	bne.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008178:	4b9b      	ldr	r3, [pc, #620]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800817a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800817c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008184:	4998      	ldr	r1, [pc, #608]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008186:	4313      	orrs	r3, r2
 8008188:	650b      	str	r3, [r1, #80]	; 0x50
 800818a:	e001      	b.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800818c:	7dfb      	ldrb	r3, [r7, #23]
 800818e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008198:	2b00      	cmp	r3, #0
 800819a:	d03d      	beq.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081a0:	2b04      	cmp	r3, #4
 80081a2:	d826      	bhi.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80081a4:	a201      	add	r2, pc, #4	; (adr r2, 80081ac <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80081a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081aa:	bf00      	nop
 80081ac:	080081c1 	.word	0x080081c1
 80081b0:	080081cf 	.word	0x080081cf
 80081b4:	080081e1 	.word	0x080081e1
 80081b8:	080081f9 	.word	0x080081f9
 80081bc:	080081f9 	.word	0x080081f9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081c0:	4b89      	ldr	r3, [pc, #548]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80081c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c4:	4a88      	ldr	r2, [pc, #544]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80081c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80081cc:	e015      	b.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	3304      	adds	r3, #4
 80081d2:	2100      	movs	r1, #0
 80081d4:	4618      	mov	r0, r3
 80081d6:	f001 f98b 	bl	80094f0 <RCCEx_PLL2_Config>
 80081da:	4603      	mov	r3, r0
 80081dc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80081de:	e00c      	b.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	3324      	adds	r3, #36	; 0x24
 80081e4:	2100      	movs	r1, #0
 80081e6:	4618      	mov	r0, r3
 80081e8:	f001 fa34 	bl	8009654 <RCCEx_PLL3_Config>
 80081ec:	4603      	mov	r3, r0
 80081ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80081f0:	e003      	b.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	75fb      	strb	r3, [r7, #23]
      break;
 80081f6:	e000      	b.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80081f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081fa:	7dfb      	ldrb	r3, [r7, #23]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d109      	bne.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008200:	4b79      	ldr	r3, [pc, #484]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008204:	f023 0207 	bic.w	r2, r3, #7
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800820c:	4976      	ldr	r1, [pc, #472]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800820e:	4313      	orrs	r3, r2
 8008210:	650b      	str	r3, [r1, #80]	; 0x50
 8008212:	e001      	b.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008214:	7dfb      	ldrb	r3, [r7, #23]
 8008216:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008220:	2b00      	cmp	r3, #0
 8008222:	d042      	beq.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800822c:	d02b      	beq.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800822e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008232:	d825      	bhi.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008234:	2bc0      	cmp	r3, #192	; 0xc0
 8008236:	d028      	beq.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008238:	2bc0      	cmp	r3, #192	; 0xc0
 800823a:	d821      	bhi.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800823c:	2b80      	cmp	r3, #128	; 0x80
 800823e:	d016      	beq.n	800826e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008240:	2b80      	cmp	r3, #128	; 0x80
 8008242:	d81d      	bhi.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008244:	2b00      	cmp	r3, #0
 8008246:	d002      	beq.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008248:	2b40      	cmp	r3, #64	; 0x40
 800824a:	d007      	beq.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800824c:	e018      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800824e:	4b66      	ldr	r3, [pc, #408]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008252:	4a65      	ldr	r2, [pc, #404]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008258:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800825a:	e017      	b.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	3304      	adds	r3, #4
 8008260:	2100      	movs	r1, #0
 8008262:	4618      	mov	r0, r3
 8008264:	f001 f944 	bl	80094f0 <RCCEx_PLL2_Config>
 8008268:	4603      	mov	r3, r0
 800826a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800826c:	e00e      	b.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	3324      	adds	r3, #36	; 0x24
 8008272:	2100      	movs	r1, #0
 8008274:	4618      	mov	r0, r3
 8008276:	f001 f9ed 	bl	8009654 <RCCEx_PLL3_Config>
 800827a:	4603      	mov	r3, r0
 800827c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800827e:	e005      	b.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	75fb      	strb	r3, [r7, #23]
      break;
 8008284:	e002      	b.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008286:	bf00      	nop
 8008288:	e000      	b.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800828a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800828c:	7dfb      	ldrb	r3, [r7, #23]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d109      	bne.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008292:	4b55      	ldr	r3, [pc, #340]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008296:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800829e:	4952      	ldr	r1, [pc, #328]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80082a0:	4313      	orrs	r3, r2
 80082a2:	650b      	str	r3, [r1, #80]	; 0x50
 80082a4:	e001      	b.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082a6:	7dfb      	ldrb	r3, [r7, #23]
 80082a8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d049      	beq.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80082bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80082c0:	d030      	beq.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80082c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80082c6:	d82a      	bhi.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80082c8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80082cc:	d02c      	beq.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80082ce:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80082d2:	d824      	bhi.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80082d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082d8:	d018      	beq.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x218>
 80082da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082de:	d81e      	bhi.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d003      	beq.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80082e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082e8:	d007      	beq.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x206>
 80082ea:	e018      	b.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082ec:	4b3e      	ldr	r3, [pc, #248]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80082ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f0:	4a3d      	ldr	r2, [pc, #244]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80082f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80082f8:	e017      	b.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	3304      	adds	r3, #4
 80082fe:	2100      	movs	r1, #0
 8008300:	4618      	mov	r0, r3
 8008302:	f001 f8f5 	bl	80094f0 <RCCEx_PLL2_Config>
 8008306:	4603      	mov	r3, r0
 8008308:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800830a:	e00e      	b.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	3324      	adds	r3, #36	; 0x24
 8008310:	2100      	movs	r1, #0
 8008312:	4618      	mov	r0, r3
 8008314:	f001 f99e 	bl	8009654 <RCCEx_PLL3_Config>
 8008318:	4603      	mov	r3, r0
 800831a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800831c:	e005      	b.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	75fb      	strb	r3, [r7, #23]
      break;
 8008322:	e002      	b.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008324:	bf00      	nop
 8008326:	e000      	b.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008328:	bf00      	nop
    }

    if(ret == HAL_OK)
 800832a:	7dfb      	ldrb	r3, [r7, #23]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d10a      	bne.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008330:	4b2d      	ldr	r3, [pc, #180]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008334:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800833e:	492a      	ldr	r1, [pc, #168]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008340:	4313      	orrs	r3, r2
 8008342:	658b      	str	r3, [r1, #88]	; 0x58
 8008344:	e001      	b.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008346:	7dfb      	ldrb	r3, [r7, #23]
 8008348:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008352:	2b00      	cmp	r3, #0
 8008354:	d04c      	beq.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800835c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008360:	d030      	beq.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008362:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008366:	d82a      	bhi.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008368:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800836c:	d02c      	beq.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800836e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008372:	d824      	bhi.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008374:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008378:	d018      	beq.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800837a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800837e:	d81e      	bhi.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008380:	2b00      	cmp	r3, #0
 8008382:	d003      	beq.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008384:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008388:	d007      	beq.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800838a:	e018      	b.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800838c:	4b16      	ldr	r3, [pc, #88]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800838e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008390:	4a15      	ldr	r2, [pc, #84]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008392:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008396:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008398:	e017      	b.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	3304      	adds	r3, #4
 800839e:	2100      	movs	r1, #0
 80083a0:	4618      	mov	r0, r3
 80083a2:	f001 f8a5 	bl	80094f0 <RCCEx_PLL2_Config>
 80083a6:	4603      	mov	r3, r0
 80083a8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80083aa:	e00e      	b.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	3324      	adds	r3, #36	; 0x24
 80083b0:	2100      	movs	r1, #0
 80083b2:	4618      	mov	r0, r3
 80083b4:	f001 f94e 	bl	8009654 <RCCEx_PLL3_Config>
 80083b8:	4603      	mov	r3, r0
 80083ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80083bc:	e005      	b.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	75fb      	strb	r3, [r7, #23]
      break;
 80083c2:	e002      	b.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80083c4:	bf00      	nop
 80083c6:	e000      	b.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80083c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083ca:	7dfb      	ldrb	r3, [r7, #23]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10d      	bne.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80083d0:	4b05      	ldr	r3, [pc, #20]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083d4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80083de:	4902      	ldr	r1, [pc, #8]	; (80083e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083e0:	4313      	orrs	r3, r2
 80083e2:	658b      	str	r3, [r1, #88]	; 0x58
 80083e4:	e004      	b.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80083e6:	bf00      	nop
 80083e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083ec:	7dfb      	ldrb	r3, [r7, #23]
 80083ee:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d032      	beq.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008400:	2b30      	cmp	r3, #48	; 0x30
 8008402:	d01c      	beq.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008404:	2b30      	cmp	r3, #48	; 0x30
 8008406:	d817      	bhi.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008408:	2b20      	cmp	r3, #32
 800840a:	d00c      	beq.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800840c:	2b20      	cmp	r3, #32
 800840e:	d813      	bhi.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008410:	2b00      	cmp	r3, #0
 8008412:	d016      	beq.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008414:	2b10      	cmp	r3, #16
 8008416:	d10f      	bne.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008418:	4baf      	ldr	r3, [pc, #700]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800841a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841c:	4aae      	ldr	r2, [pc, #696]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800841e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008422:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008424:	e00e      	b.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	3304      	adds	r3, #4
 800842a:	2102      	movs	r1, #2
 800842c:	4618      	mov	r0, r3
 800842e:	f001 f85f 	bl	80094f0 <RCCEx_PLL2_Config>
 8008432:	4603      	mov	r3, r0
 8008434:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008436:	e005      	b.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	75fb      	strb	r3, [r7, #23]
      break;
 800843c:	e002      	b.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800843e:	bf00      	nop
 8008440:	e000      	b.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8008442:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008444:	7dfb      	ldrb	r3, [r7, #23]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d109      	bne.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800844a:	4ba3      	ldr	r3, [pc, #652]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800844c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800844e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008456:	49a0      	ldr	r1, [pc, #640]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008458:	4313      	orrs	r3, r2
 800845a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800845c:	e001      	b.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800845e:	7dfb      	ldrb	r3, [r7, #23]
 8008460:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800846a:	2b00      	cmp	r3, #0
 800846c:	d047      	beq.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008472:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008476:	d030      	beq.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8008478:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800847c:	d82a      	bhi.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800847e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008482:	d02c      	beq.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8008484:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008488:	d824      	bhi.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800848a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800848e:	d018      	beq.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8008490:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008494:	d81e      	bhi.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008496:	2b00      	cmp	r3, #0
 8008498:	d003      	beq.n	80084a2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800849a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800849e:	d007      	beq.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80084a0:	e018      	b.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084a2:	4b8d      	ldr	r3, [pc, #564]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80084a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a6:	4a8c      	ldr	r2, [pc, #560]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80084a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80084ae:	e017      	b.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	3304      	adds	r3, #4
 80084b4:	2100      	movs	r1, #0
 80084b6:	4618      	mov	r0, r3
 80084b8:	f001 f81a 	bl	80094f0 <RCCEx_PLL2_Config>
 80084bc:	4603      	mov	r3, r0
 80084be:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80084c0:	e00e      	b.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	3324      	adds	r3, #36	; 0x24
 80084c6:	2100      	movs	r1, #0
 80084c8:	4618      	mov	r0, r3
 80084ca:	f001 f8c3 	bl	8009654 <RCCEx_PLL3_Config>
 80084ce:	4603      	mov	r3, r0
 80084d0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80084d2:	e005      	b.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	75fb      	strb	r3, [r7, #23]
      break;
 80084d8:	e002      	b.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80084da:	bf00      	nop
 80084dc:	e000      	b.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80084de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084e0:	7dfb      	ldrb	r3, [r7, #23]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d109      	bne.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80084e6:	4b7c      	ldr	r3, [pc, #496]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80084e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084ea:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084f2:	4979      	ldr	r1, [pc, #484]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80084f4:	4313      	orrs	r3, r2
 80084f6:	650b      	str	r3, [r1, #80]	; 0x50
 80084f8:	e001      	b.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084fa:	7dfb      	ldrb	r3, [r7, #23]
 80084fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008506:	2b00      	cmp	r3, #0
 8008508:	d049      	beq.n	800859e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800850e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008512:	d02e      	beq.n	8008572 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8008514:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008518:	d828      	bhi.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800851a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800851e:	d02a      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8008520:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008524:	d822      	bhi.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008526:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800852a:	d026      	beq.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800852c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008530:	d81c      	bhi.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008532:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008536:	d010      	beq.n	800855a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8008538:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800853c:	d816      	bhi.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800853e:	2b00      	cmp	r3, #0
 8008540:	d01d      	beq.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8008542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008546:	d111      	bne.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	3304      	adds	r3, #4
 800854c:	2101      	movs	r1, #1
 800854e:	4618      	mov	r0, r3
 8008550:	f000 ffce 	bl	80094f0 <RCCEx_PLL2_Config>
 8008554:	4603      	mov	r3, r0
 8008556:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008558:	e012      	b.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	3324      	adds	r3, #36	; 0x24
 800855e:	2101      	movs	r1, #1
 8008560:	4618      	mov	r0, r3
 8008562:	f001 f877 	bl	8009654 <RCCEx_PLL3_Config>
 8008566:	4603      	mov	r3, r0
 8008568:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800856a:	e009      	b.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800856c:	2301      	movs	r3, #1
 800856e:	75fb      	strb	r3, [r7, #23]
      break;
 8008570:	e006      	b.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008572:	bf00      	nop
 8008574:	e004      	b.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008576:	bf00      	nop
 8008578:	e002      	b.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800857a:	bf00      	nop
 800857c:	e000      	b.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800857e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008580:	7dfb      	ldrb	r3, [r7, #23]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d109      	bne.n	800859a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008586:	4b54      	ldr	r3, [pc, #336]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800858a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008592:	4951      	ldr	r1, [pc, #324]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008594:	4313      	orrs	r3, r2
 8008596:	650b      	str	r3, [r1, #80]	; 0x50
 8008598:	e001      	b.n	800859e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800859a:	7dfb      	ldrb	r3, [r7, #23]
 800859c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d04b      	beq.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80085b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085b4:	d02e      	beq.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80085b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085ba:	d828      	bhi.n	800860e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80085bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085c0:	d02a      	beq.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80085c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085c6:	d822      	bhi.n	800860e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80085c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80085cc:	d026      	beq.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x528>
 80085ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80085d2:	d81c      	bhi.n	800860e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80085d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085d8:	d010      	beq.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x508>
 80085da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085de:	d816      	bhi.n	800860e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d01d      	beq.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80085e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085e8:	d111      	bne.n	800860e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	3304      	adds	r3, #4
 80085ee:	2101      	movs	r1, #1
 80085f0:	4618      	mov	r0, r3
 80085f2:	f000 ff7d 	bl	80094f0 <RCCEx_PLL2_Config>
 80085f6:	4603      	mov	r3, r0
 80085f8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80085fa:	e012      	b.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	3324      	adds	r3, #36	; 0x24
 8008600:	2101      	movs	r1, #1
 8008602:	4618      	mov	r0, r3
 8008604:	f001 f826 	bl	8009654 <RCCEx_PLL3_Config>
 8008608:	4603      	mov	r3, r0
 800860a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800860c:	e009      	b.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	75fb      	strb	r3, [r7, #23]
      break;
 8008612:	e006      	b.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008614:	bf00      	nop
 8008616:	e004      	b.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008618:	bf00      	nop
 800861a:	e002      	b.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800861c:	bf00      	nop
 800861e:	e000      	b.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008620:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008622:	7dfb      	ldrb	r3, [r7, #23]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d10a      	bne.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008628:	4b2b      	ldr	r3, [pc, #172]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800862a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800862c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008636:	4928      	ldr	r1, [pc, #160]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008638:	4313      	orrs	r3, r2
 800863a:	658b      	str	r3, [r1, #88]	; 0x58
 800863c:	e001      	b.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800863e:	7dfb      	ldrb	r3, [r7, #23]
 8008640:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800864a:	2b00      	cmp	r3, #0
 800864c:	d02f      	beq.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008652:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008656:	d00e      	beq.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8008658:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800865c:	d814      	bhi.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800865e:	2b00      	cmp	r3, #0
 8008660:	d015      	beq.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008662:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008666:	d10f      	bne.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008668:	4b1b      	ldr	r3, [pc, #108]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800866a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800866c:	4a1a      	ldr	r2, [pc, #104]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800866e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008672:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008674:	e00c      	b.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	3304      	adds	r3, #4
 800867a:	2101      	movs	r1, #1
 800867c:	4618      	mov	r0, r3
 800867e:	f000 ff37 	bl	80094f0 <RCCEx_PLL2_Config>
 8008682:	4603      	mov	r3, r0
 8008684:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008686:	e003      	b.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008688:	2301      	movs	r3, #1
 800868a:	75fb      	strb	r3, [r7, #23]
      break;
 800868c:	e000      	b.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800868e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008690:	7dfb      	ldrb	r3, [r7, #23]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d109      	bne.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008696:	4b10      	ldr	r3, [pc, #64]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800869a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086a2:	490d      	ldr	r1, [pc, #52]	; (80086d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80086a4:	4313      	orrs	r3, r2
 80086a6:	650b      	str	r3, [r1, #80]	; 0x50
 80086a8:	e001      	b.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086aa:	7dfb      	ldrb	r3, [r7, #23]
 80086ac:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d033      	beq.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086be:	2b03      	cmp	r3, #3
 80086c0:	d81c      	bhi.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x608>
 80086c2:	a201      	add	r2, pc, #4	; (adr r2, 80086c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80086c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c8:	08008703 	.word	0x08008703
 80086cc:	080086dd 	.word	0x080086dd
 80086d0:	080086eb 	.word	0x080086eb
 80086d4:	08008703 	.word	0x08008703
 80086d8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086dc:	4bb8      	ldr	r3, [pc, #736]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80086de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e0:	4ab7      	ldr	r2, [pc, #732]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80086e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80086e8:	e00c      	b.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	3304      	adds	r3, #4
 80086ee:	2102      	movs	r1, #2
 80086f0:	4618      	mov	r0, r3
 80086f2:	f000 fefd 	bl	80094f0 <RCCEx_PLL2_Config>
 80086f6:	4603      	mov	r3, r0
 80086f8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80086fa:	e003      	b.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80086fc:	2301      	movs	r3, #1
 80086fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008700:	e000      	b.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008702:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008704:	7dfb      	ldrb	r3, [r7, #23]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d109      	bne.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800870a:	4bad      	ldr	r3, [pc, #692]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800870c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800870e:	f023 0203 	bic.w	r2, r3, #3
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008716:	49aa      	ldr	r1, [pc, #680]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008718:	4313      	orrs	r3, r2
 800871a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800871c:	e001      	b.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800871e:	7dfb      	ldrb	r3, [r7, #23]
 8008720:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800872a:	2b00      	cmp	r3, #0
 800872c:	f000 8086 	beq.w	800883c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008730:	4ba4      	ldr	r3, [pc, #656]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4aa3      	ldr	r2, [pc, #652]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800873a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800873c:	f7fa f94e 	bl	80029dc <HAL_GetTick>
 8008740:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008742:	e009      	b.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008744:	f7fa f94a 	bl	80029dc <HAL_GetTick>
 8008748:	4602      	mov	r2, r0
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	2b64      	cmp	r3, #100	; 0x64
 8008750:	d902      	bls.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008752:	2303      	movs	r3, #3
 8008754:	75fb      	strb	r3, [r7, #23]
        break;
 8008756:	e005      	b.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008758:	4b9a      	ldr	r3, [pc, #616]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008760:	2b00      	cmp	r3, #0
 8008762:	d0ef      	beq.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008764:	7dfb      	ldrb	r3, [r7, #23]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d166      	bne.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800876a:	4b95      	ldr	r3, [pc, #596]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800876c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008774:	4053      	eors	r3, r2
 8008776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800877a:	2b00      	cmp	r3, #0
 800877c:	d013      	beq.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800877e:	4b90      	ldr	r3, [pc, #576]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008786:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008788:	4b8d      	ldr	r3, [pc, #564]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800878a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800878c:	4a8c      	ldr	r2, [pc, #560]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800878e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008792:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008794:	4b8a      	ldr	r3, [pc, #552]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008798:	4a89      	ldr	r2, [pc, #548]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800879a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800879e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80087a0:	4a87      	ldr	r2, [pc, #540]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80087ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087b0:	d115      	bne.n	80087de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087b2:	f7fa f913 	bl	80029dc <HAL_GetTick>
 80087b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80087b8:	e00b      	b.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087ba:	f7fa f90f 	bl	80029dc <HAL_GetTick>
 80087be:	4602      	mov	r2, r0
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	1ad3      	subs	r3, r2, r3
 80087c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d902      	bls.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80087cc:	2303      	movs	r3, #3
 80087ce:	75fb      	strb	r3, [r7, #23]
            break;
 80087d0:	e005      	b.n	80087de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80087d2:	4b7b      	ldr	r3, [pc, #492]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80087d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087d6:	f003 0302 	and.w	r3, r3, #2
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d0ed      	beq.n	80087ba <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80087de:	7dfb      	ldrb	r3, [r7, #23]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d126      	bne.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80087ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087f2:	d10d      	bne.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80087f4:	4b72      	ldr	r3, [pc, #456]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80087f6:	691b      	ldr	r3, [r3, #16]
 80087f8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008802:	0919      	lsrs	r1, r3, #4
 8008804:	4b70      	ldr	r3, [pc, #448]	; (80089c8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8008806:	400b      	ands	r3, r1
 8008808:	496d      	ldr	r1, [pc, #436]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800880a:	4313      	orrs	r3, r2
 800880c:	610b      	str	r3, [r1, #16]
 800880e:	e005      	b.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008810:	4b6b      	ldr	r3, [pc, #428]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008812:	691b      	ldr	r3, [r3, #16]
 8008814:	4a6a      	ldr	r2, [pc, #424]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008816:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800881a:	6113      	str	r3, [r2, #16]
 800881c:	4b68      	ldr	r3, [pc, #416]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800881e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008826:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800882a:	4965      	ldr	r1, [pc, #404]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800882c:	4313      	orrs	r3, r2
 800882e:	670b      	str	r3, [r1, #112]	; 0x70
 8008830:	e004      	b.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008832:	7dfb      	ldrb	r3, [r7, #23]
 8008834:	75bb      	strb	r3, [r7, #22]
 8008836:	e001      	b.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008838:	7dfb      	ldrb	r3, [r7, #23]
 800883a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f003 0301 	and.w	r3, r3, #1
 8008844:	2b00      	cmp	r3, #0
 8008846:	d07e      	beq.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800884c:	2b28      	cmp	r3, #40	; 0x28
 800884e:	d867      	bhi.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008850:	a201      	add	r2, pc, #4	; (adr r2, 8008858 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008856:	bf00      	nop
 8008858:	08008927 	.word	0x08008927
 800885c:	08008921 	.word	0x08008921
 8008860:	08008921 	.word	0x08008921
 8008864:	08008921 	.word	0x08008921
 8008868:	08008921 	.word	0x08008921
 800886c:	08008921 	.word	0x08008921
 8008870:	08008921 	.word	0x08008921
 8008874:	08008921 	.word	0x08008921
 8008878:	080088fd 	.word	0x080088fd
 800887c:	08008921 	.word	0x08008921
 8008880:	08008921 	.word	0x08008921
 8008884:	08008921 	.word	0x08008921
 8008888:	08008921 	.word	0x08008921
 800888c:	08008921 	.word	0x08008921
 8008890:	08008921 	.word	0x08008921
 8008894:	08008921 	.word	0x08008921
 8008898:	0800890f 	.word	0x0800890f
 800889c:	08008921 	.word	0x08008921
 80088a0:	08008921 	.word	0x08008921
 80088a4:	08008921 	.word	0x08008921
 80088a8:	08008921 	.word	0x08008921
 80088ac:	08008921 	.word	0x08008921
 80088b0:	08008921 	.word	0x08008921
 80088b4:	08008921 	.word	0x08008921
 80088b8:	08008927 	.word	0x08008927
 80088bc:	08008921 	.word	0x08008921
 80088c0:	08008921 	.word	0x08008921
 80088c4:	08008921 	.word	0x08008921
 80088c8:	08008921 	.word	0x08008921
 80088cc:	08008921 	.word	0x08008921
 80088d0:	08008921 	.word	0x08008921
 80088d4:	08008921 	.word	0x08008921
 80088d8:	08008927 	.word	0x08008927
 80088dc:	08008921 	.word	0x08008921
 80088e0:	08008921 	.word	0x08008921
 80088e4:	08008921 	.word	0x08008921
 80088e8:	08008921 	.word	0x08008921
 80088ec:	08008921 	.word	0x08008921
 80088f0:	08008921 	.word	0x08008921
 80088f4:	08008921 	.word	0x08008921
 80088f8:	08008927 	.word	0x08008927
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	3304      	adds	r3, #4
 8008900:	2101      	movs	r1, #1
 8008902:	4618      	mov	r0, r3
 8008904:	f000 fdf4 	bl	80094f0 <RCCEx_PLL2_Config>
 8008908:	4603      	mov	r3, r0
 800890a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800890c:	e00c      	b.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	3324      	adds	r3, #36	; 0x24
 8008912:	2101      	movs	r1, #1
 8008914:	4618      	mov	r0, r3
 8008916:	f000 fe9d 	bl	8009654 <RCCEx_PLL3_Config>
 800891a:	4603      	mov	r3, r0
 800891c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800891e:	e003      	b.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	75fb      	strb	r3, [r7, #23]
      break;
 8008924:	e000      	b.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8008926:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008928:	7dfb      	ldrb	r3, [r7, #23]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d109      	bne.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800892e:	4b24      	ldr	r3, [pc, #144]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008932:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800893a:	4921      	ldr	r1, [pc, #132]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800893c:	4313      	orrs	r3, r2
 800893e:	654b      	str	r3, [r1, #84]	; 0x54
 8008940:	e001      	b.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008942:	7dfb      	ldrb	r3, [r7, #23]
 8008944:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f003 0302 	and.w	r3, r3, #2
 800894e:	2b00      	cmp	r3, #0
 8008950:	d03e      	beq.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008956:	2b05      	cmp	r3, #5
 8008958:	d820      	bhi.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800895a:	a201      	add	r2, pc, #4	; (adr r2, 8008960 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800895c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008960:	080089a3 	.word	0x080089a3
 8008964:	08008979 	.word	0x08008979
 8008968:	0800898b 	.word	0x0800898b
 800896c:	080089a3 	.word	0x080089a3
 8008970:	080089a3 	.word	0x080089a3
 8008974:	080089a3 	.word	0x080089a3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	3304      	adds	r3, #4
 800897c:	2101      	movs	r1, #1
 800897e:	4618      	mov	r0, r3
 8008980:	f000 fdb6 	bl	80094f0 <RCCEx_PLL2_Config>
 8008984:	4603      	mov	r3, r0
 8008986:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008988:	e00c      	b.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	3324      	adds	r3, #36	; 0x24
 800898e:	2101      	movs	r1, #1
 8008990:	4618      	mov	r0, r3
 8008992:	f000 fe5f 	bl	8009654 <RCCEx_PLL3_Config>
 8008996:	4603      	mov	r3, r0
 8008998:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800899a:	e003      	b.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	75fb      	strb	r3, [r7, #23]
      break;
 80089a0:	e000      	b.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80089a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089a4:	7dfb      	ldrb	r3, [r7, #23]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d110      	bne.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80089aa:	4b05      	ldr	r3, [pc, #20]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80089ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089ae:	f023 0207 	bic.w	r2, r3, #7
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089b6:	4902      	ldr	r1, [pc, #8]	; (80089c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80089b8:	4313      	orrs	r3, r2
 80089ba:	654b      	str	r3, [r1, #84]	; 0x54
 80089bc:	e008      	b.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80089be:	bf00      	nop
 80089c0:	58024400 	.word	0x58024400
 80089c4:	58024800 	.word	0x58024800
 80089c8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089cc:	7dfb      	ldrb	r3, [r7, #23]
 80089ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f003 0304 	and.w	r3, r3, #4
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d039      	beq.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089e2:	2b05      	cmp	r3, #5
 80089e4:	d820      	bhi.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80089e6:	a201      	add	r2, pc, #4	; (adr r2, 80089ec <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80089e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ec:	08008a2f 	.word	0x08008a2f
 80089f0:	08008a05 	.word	0x08008a05
 80089f4:	08008a17 	.word	0x08008a17
 80089f8:	08008a2f 	.word	0x08008a2f
 80089fc:	08008a2f 	.word	0x08008a2f
 8008a00:	08008a2f 	.word	0x08008a2f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	3304      	adds	r3, #4
 8008a08:	2101      	movs	r1, #1
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f000 fd70 	bl	80094f0 <RCCEx_PLL2_Config>
 8008a10:	4603      	mov	r3, r0
 8008a12:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008a14:	e00c      	b.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	3324      	adds	r3, #36	; 0x24
 8008a1a:	2101      	movs	r1, #1
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f000 fe19 	bl	8009654 <RCCEx_PLL3_Config>
 8008a22:	4603      	mov	r3, r0
 8008a24:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008a26:	e003      	b.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	75fb      	strb	r3, [r7, #23]
      break;
 8008a2c:	e000      	b.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8008a2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a30:	7dfb      	ldrb	r3, [r7, #23]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d10a      	bne.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008a36:	4bb7      	ldr	r3, [pc, #732]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a3a:	f023 0207 	bic.w	r2, r3, #7
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a44:	49b3      	ldr	r1, [pc, #716]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008a46:	4313      	orrs	r3, r2
 8008a48:	658b      	str	r3, [r1, #88]	; 0x58
 8008a4a:	e001      	b.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a4c:	7dfb      	ldrb	r3, [r7, #23]
 8008a4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 0320 	and.w	r3, r3, #32
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d04b      	beq.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a66:	d02e      	beq.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8008a68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a6c:	d828      	bhi.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a72:	d02a      	beq.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a78:	d822      	bhi.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008a7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008a7e:	d026      	beq.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008a80:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008a84:	d81c      	bhi.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008a86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a8a:	d010      	beq.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8008a8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a90:	d816      	bhi.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d01d      	beq.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008a96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a9a:	d111      	bne.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	3304      	adds	r3, #4
 8008aa0:	2100      	movs	r1, #0
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f000 fd24 	bl	80094f0 <RCCEx_PLL2_Config>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008aac:	e012      	b.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	3324      	adds	r3, #36	; 0x24
 8008ab2:	2102      	movs	r1, #2
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f000 fdcd 	bl	8009654 <RCCEx_PLL3_Config>
 8008aba:	4603      	mov	r3, r0
 8008abc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008abe:	e009      	b.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ac4:	e006      	b.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008ac6:	bf00      	nop
 8008ac8:	e004      	b.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008aca:	bf00      	nop
 8008acc:	e002      	b.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008ace:	bf00      	nop
 8008ad0:	e000      	b.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008ad2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ad4:	7dfb      	ldrb	r3, [r7, #23]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d10a      	bne.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008ada:	4b8e      	ldr	r3, [pc, #568]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ade:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ae8:	498a      	ldr	r1, [pc, #552]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008aea:	4313      	orrs	r3, r2
 8008aec:	654b      	str	r3, [r1, #84]	; 0x54
 8008aee:	e001      	b.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008af0:	7dfb      	ldrb	r3, [r7, #23]
 8008af2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d04b      	beq.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008b06:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008b0a:	d02e      	beq.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8008b0c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008b10:	d828      	bhi.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008b12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b16:	d02a      	beq.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008b18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b1c:	d822      	bhi.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008b1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008b22:	d026      	beq.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008b24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008b28:	d81c      	bhi.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008b2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b2e:	d010      	beq.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8008b30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b34:	d816      	bhi.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d01d      	beq.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8008b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b3e:	d111      	bne.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	3304      	adds	r3, #4
 8008b44:	2100      	movs	r1, #0
 8008b46:	4618      	mov	r0, r3
 8008b48:	f000 fcd2 	bl	80094f0 <RCCEx_PLL2_Config>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008b50:	e012      	b.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	3324      	adds	r3, #36	; 0x24
 8008b56:	2102      	movs	r1, #2
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f000 fd7b 	bl	8009654 <RCCEx_PLL3_Config>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008b62:	e009      	b.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b64:	2301      	movs	r3, #1
 8008b66:	75fb      	strb	r3, [r7, #23]
      break;
 8008b68:	e006      	b.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008b6a:	bf00      	nop
 8008b6c:	e004      	b.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008b6e:	bf00      	nop
 8008b70:	e002      	b.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008b72:	bf00      	nop
 8008b74:	e000      	b.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008b76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b78:	7dfb      	ldrb	r3, [r7, #23]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d10a      	bne.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008b7e:	4b65      	ldr	r3, [pc, #404]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b82:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008b8c:	4961      	ldr	r1, [pc, #388]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	658b      	str	r3, [r1, #88]	; 0x58
 8008b92:	e001      	b.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b94:	7dfb      	ldrb	r3, [r7, #23]
 8008b96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d04b      	beq.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008baa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008bae:	d02e      	beq.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8008bb0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008bb4:	d828      	bhi.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008bb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bba:	d02a      	beq.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8008bbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bc0:	d822      	bhi.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008bc2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008bc6:	d026      	beq.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008bc8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008bcc:	d81c      	bhi.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008bce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bd2:	d010      	beq.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8008bd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008bd8:	d816      	bhi.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d01d      	beq.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008be2:	d111      	bne.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	3304      	adds	r3, #4
 8008be8:	2100      	movs	r1, #0
 8008bea:	4618      	mov	r0, r3
 8008bec:	f000 fc80 	bl	80094f0 <RCCEx_PLL2_Config>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008bf4:	e012      	b.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	3324      	adds	r3, #36	; 0x24
 8008bfa:	2102      	movs	r1, #2
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f000 fd29 	bl	8009654 <RCCEx_PLL3_Config>
 8008c02:	4603      	mov	r3, r0
 8008c04:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008c06:	e009      	b.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	75fb      	strb	r3, [r7, #23]
      break;
 8008c0c:	e006      	b.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008c0e:	bf00      	nop
 8008c10:	e004      	b.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008c12:	bf00      	nop
 8008c14:	e002      	b.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008c16:	bf00      	nop
 8008c18:	e000      	b.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008c1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c1c:	7dfb      	ldrb	r3, [r7, #23]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d10a      	bne.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008c22:	4b3c      	ldr	r3, [pc, #240]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008c30:	4938      	ldr	r1, [pc, #224]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008c32:	4313      	orrs	r3, r2
 8008c34:	658b      	str	r3, [r1, #88]	; 0x58
 8008c36:	e001      	b.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c38:	7dfb      	ldrb	r3, [r7, #23]
 8008c3a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f003 0308 	and.w	r3, r3, #8
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d01a      	beq.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c52:	d10a      	bne.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	3324      	adds	r3, #36	; 0x24
 8008c58:	2102      	movs	r1, #2
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f000 fcfa 	bl	8009654 <RCCEx_PLL3_Config>
 8008c60:	4603      	mov	r3, r0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d001      	beq.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008c6a:	4b2a      	ldr	r3, [pc, #168]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c6e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c78:	4926      	ldr	r1, [pc, #152]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f003 0310 	and.w	r3, r3, #16
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d01a      	beq.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c94:	d10a      	bne.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	3324      	adds	r3, #36	; 0x24
 8008c9a:	2102      	movs	r1, #2
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f000 fcd9 	bl	8009654 <RCCEx_PLL3_Config>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d001      	beq.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008cac:	4b19      	ldr	r3, [pc, #100]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008cba:	4916      	ldr	r1, [pc, #88]	; (8008d14 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d036      	beq.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008cd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cd6:	d01f      	beq.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008cd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cdc:	d817      	bhi.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d003      	beq.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8008ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ce6:	d009      	beq.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8008ce8:	e011      	b.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	3304      	adds	r3, #4
 8008cee:	2100      	movs	r1, #0
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f000 fbfd 	bl	80094f0 <RCCEx_PLL2_Config>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008cfa:	e00e      	b.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	3324      	adds	r3, #36	; 0x24
 8008d00:	2102      	movs	r1, #2
 8008d02:	4618      	mov	r0, r3
 8008d04:	f000 fca6 	bl	8009654 <RCCEx_PLL3_Config>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008d0c:	e005      	b.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	75fb      	strb	r3, [r7, #23]
      break;
 8008d12:	e002      	b.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8008d14:	58024400 	.word	0x58024400
      break;
 8008d18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d1a:	7dfb      	ldrb	r3, [r7, #23]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d10a      	bne.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008d20:	4b93      	ldr	r3, [pc, #588]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008d2e:	4990      	ldr	r1, [pc, #576]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d30:	4313      	orrs	r3, r2
 8008d32:	658b      	str	r3, [r1, #88]	; 0x58
 8008d34:	e001      	b.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d36:	7dfb      	ldrb	r3, [r7, #23]
 8008d38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d033      	beq.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d4c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008d50:	d01c      	beq.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8008d52:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008d56:	d816      	bhi.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8008d58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d5c:	d003      	beq.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8008d5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d62:	d007      	beq.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8008d64:	e00f      	b.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d66:	4b82      	ldr	r3, [pc, #520]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d6a:	4a81      	ldr	r2, [pc, #516]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008d72:	e00c      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	3324      	adds	r3, #36	; 0x24
 8008d78:	2101      	movs	r1, #1
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f000 fc6a 	bl	8009654 <RCCEx_PLL3_Config>
 8008d80:	4603      	mov	r3, r0
 8008d82:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008d84:	e003      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	75fb      	strb	r3, [r7, #23]
      break;
 8008d8a:	e000      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8008d8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d8e:	7dfb      	ldrb	r3, [r7, #23]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d10a      	bne.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008d94:	4b76      	ldr	r3, [pc, #472]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008da2:	4973      	ldr	r1, [pc, #460]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008da4:	4313      	orrs	r3, r2
 8008da6:	654b      	str	r3, [r1, #84]	; 0x54
 8008da8:	e001      	b.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008daa:	7dfb      	ldrb	r3, [r7, #23]
 8008dac:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d029      	beq.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d003      	beq.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8008dc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dc6:	d007      	beq.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8008dc8:	e00f      	b.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dca:	4b69      	ldr	r3, [pc, #420]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dce:	4a68      	ldr	r2, [pc, #416]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dd4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008dd6:	e00b      	b.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	3304      	adds	r3, #4
 8008ddc:	2102      	movs	r1, #2
 8008dde:	4618      	mov	r0, r3
 8008de0:	f000 fb86 	bl	80094f0 <RCCEx_PLL2_Config>
 8008de4:	4603      	mov	r3, r0
 8008de6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008de8:	e002      	b.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	75fb      	strb	r3, [r7, #23]
      break;
 8008dee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008df0:	7dfb      	ldrb	r3, [r7, #23]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d109      	bne.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008df6:	4b5e      	ldr	r3, [pc, #376]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dfa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e02:	495b      	ldr	r1, [pc, #364]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008e04:	4313      	orrs	r3, r2
 8008e06:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008e08:	e001      	b.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e0a:	7dfb      	ldrb	r3, [r7, #23]
 8008e0c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00a      	beq.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	3324      	adds	r3, #36	; 0x24
 8008e1e:	2102      	movs	r1, #2
 8008e20:	4618      	mov	r0, r3
 8008e22:	f000 fc17 	bl	8009654 <RCCEx_PLL3_Config>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d001      	beq.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d030      	beq.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e44:	d017      	beq.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8008e46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e4a:	d811      	bhi.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e50:	d013      	beq.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008e52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e56:	d80b      	bhi.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d010      	beq.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008e5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e60:	d106      	bne.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e62:	4b43      	ldr	r3, [pc, #268]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e66:	4a42      	ldr	r2, [pc, #264]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008e6e:	e007      	b.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e70:	2301      	movs	r3, #1
 8008e72:	75fb      	strb	r3, [r7, #23]
      break;
 8008e74:	e004      	b.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008e76:	bf00      	nop
 8008e78:	e002      	b.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008e7a:	bf00      	nop
 8008e7c:	e000      	b.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008e7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e80:	7dfb      	ldrb	r3, [r7, #23]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d109      	bne.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008e86:	4b3a      	ldr	r3, [pc, #232]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e92:	4937      	ldr	r1, [pc, #220]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008e94:	4313      	orrs	r3, r2
 8008e96:	654b      	str	r3, [r1, #84]	; 0x54
 8008e98:	e001      	b.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e9a:	7dfb      	ldrb	r3, [r7, #23]
 8008e9c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d008      	beq.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008eaa:	4b31      	ldr	r3, [pc, #196]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eb6:	492e      	ldr	r1, [pc, #184]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d009      	beq.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008ec8:	4b29      	ldr	r3, [pc, #164]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008eca:	691b      	ldr	r3, [r3, #16]
 8008ecc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008ed6:	4926      	ldr	r1, [pc, #152]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d008      	beq.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008ee8:	4b21      	ldr	r3, [pc, #132]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ef4:	491e      	ldr	r1, [pc, #120]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d00d      	beq.n	8008f22 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008f06:	4b1a      	ldr	r3, [pc, #104]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f08:	691b      	ldr	r3, [r3, #16]
 8008f0a:	4a19      	ldr	r2, [pc, #100]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f10:	6113      	str	r3, [r2, #16]
 8008f12:	4b17      	ldr	r3, [pc, #92]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f14:	691a      	ldr	r2, [r3, #16]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008f1c:	4914      	ldr	r1, [pc, #80]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	da08      	bge.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008f2a:	4b11      	ldr	r3, [pc, #68]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f2e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f36:	490e      	ldr	r1, [pc, #56]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d009      	beq.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008f48:	4b09      	ldr	r3, [pc, #36]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f56:	4906      	ldr	r1, [pc, #24]	; (8008f70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008f5c:	7dbb      	ldrb	r3, [r7, #22]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d101      	bne.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8008f62:	2300      	movs	r3, #0
 8008f64:	e000      	b.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8008f66:	2301      	movs	r3, #1
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3718      	adds	r7, #24
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	58024400 	.word	0x58024400

08008f74 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008f78:	f7ff f860 	bl	800803c <HAL_RCC_GetHCLKFreq>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	4b06      	ldr	r3, [pc, #24]	; (8008f98 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008f80:	6a1b      	ldr	r3, [r3, #32]
 8008f82:	091b      	lsrs	r3, r3, #4
 8008f84:	f003 0307 	and.w	r3, r3, #7
 8008f88:	4904      	ldr	r1, [pc, #16]	; (8008f9c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008f8a:	5ccb      	ldrb	r3, [r1, r3]
 8008f8c:	f003 031f 	and.w	r3, r3, #31
 8008f90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	58024400 	.word	0x58024400
 8008f9c:	08016cc8 	.word	0x08016cc8

08008fa0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b089      	sub	sp, #36	; 0x24
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008fa8:	4ba1      	ldr	r3, [pc, #644]	; (8009230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fac:	f003 0303 	and.w	r3, r3, #3
 8008fb0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008fb2:	4b9f      	ldr	r3, [pc, #636]	; (8009230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb6:	0b1b      	lsrs	r3, r3, #12
 8008fb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fbc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008fbe:	4b9c      	ldr	r3, [pc, #624]	; (8009230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc2:	091b      	lsrs	r3, r3, #4
 8008fc4:	f003 0301 	and.w	r3, r3, #1
 8008fc8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008fca:	4b99      	ldr	r3, [pc, #612]	; (8009230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fce:	08db      	lsrs	r3, r3, #3
 8008fd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008fd4:	693a      	ldr	r2, [r7, #16]
 8008fd6:	fb02 f303 	mul.w	r3, r2, r3
 8008fda:	ee07 3a90 	vmov	s15, r3
 8008fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fe2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	f000 8111 	beq.w	8009210 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	2b02      	cmp	r3, #2
 8008ff2:	f000 8083 	beq.w	80090fc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	2b02      	cmp	r3, #2
 8008ffa:	f200 80a1 	bhi.w	8009140 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008ffe:	69bb      	ldr	r3, [r7, #24]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d003      	beq.n	800900c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009004:	69bb      	ldr	r3, [r7, #24]
 8009006:	2b01      	cmp	r3, #1
 8009008:	d056      	beq.n	80090b8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800900a:	e099      	b.n	8009140 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800900c:	4b88      	ldr	r3, [pc, #544]	; (8009230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f003 0320 	and.w	r3, r3, #32
 8009014:	2b00      	cmp	r3, #0
 8009016:	d02d      	beq.n	8009074 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009018:	4b85      	ldr	r3, [pc, #532]	; (8009230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	08db      	lsrs	r3, r3, #3
 800901e:	f003 0303 	and.w	r3, r3, #3
 8009022:	4a84      	ldr	r2, [pc, #528]	; (8009234 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009024:	fa22 f303 	lsr.w	r3, r2, r3
 8009028:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	ee07 3a90 	vmov	s15, r3
 8009030:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	ee07 3a90 	vmov	s15, r3
 800903a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800903e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009042:	4b7b      	ldr	r3, [pc, #492]	; (8009230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800904a:	ee07 3a90 	vmov	s15, r3
 800904e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009052:	ed97 6a03 	vldr	s12, [r7, #12]
 8009056:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009238 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800905a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800905e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009062:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800906a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800906e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009072:	e087      	b.n	8009184 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	ee07 3a90 	vmov	s15, r3
 800907a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800907e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800923c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009086:	4b6a      	ldr	r3, [pc, #424]	; (8009230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800908a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800908e:	ee07 3a90 	vmov	s15, r3
 8009092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009096:	ed97 6a03 	vldr	s12, [r7, #12]
 800909a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009238 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800909e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80090b6:	e065      	b.n	8009184 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	ee07 3a90 	vmov	s15, r3
 80090be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009240 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80090c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090ca:	4b59      	ldr	r3, [pc, #356]	; (8009230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090d2:	ee07 3a90 	vmov	s15, r3
 80090d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090da:	ed97 6a03 	vldr	s12, [r7, #12]
 80090de:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009238 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80090e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80090fa:	e043      	b.n	8009184 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	ee07 3a90 	vmov	s15, r3
 8009102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009106:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009244 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800910a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800910e:	4b48      	ldr	r3, [pc, #288]	; (8009230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009116:	ee07 3a90 	vmov	s15, r3
 800911a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800911e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009122:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009238 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800912a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800912e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800913a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800913e:	e021      	b.n	8009184 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	ee07 3a90 	vmov	s15, r3
 8009146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800914a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009240 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800914e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009152:	4b37      	ldr	r3, [pc, #220]	; (8009230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800915a:	ee07 3a90 	vmov	s15, r3
 800915e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009162:	ed97 6a03 	vldr	s12, [r7, #12]
 8009166:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009238 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800916a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800916e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800917a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800917e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009182:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009184:	4b2a      	ldr	r3, [pc, #168]	; (8009230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009188:	0a5b      	lsrs	r3, r3, #9
 800918a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800918e:	ee07 3a90 	vmov	s15, r3
 8009192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009196:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800919a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800919e:	edd7 6a07 	vldr	s13, [r7, #28]
 80091a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091aa:	ee17 2a90 	vmov	r2, s15
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80091b2:	4b1f      	ldr	r3, [pc, #124]	; (8009230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b6:	0c1b      	lsrs	r3, r3, #16
 80091b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091bc:	ee07 3a90 	vmov	s15, r3
 80091c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80091d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091d8:	ee17 2a90 	vmov	r2, s15
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80091e0:	4b13      	ldr	r3, [pc, #76]	; (8009230 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091e4:	0e1b      	lsrs	r3, r3, #24
 80091e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091ea:	ee07 3a90 	vmov	s15, r3
 80091ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80091fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009202:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009206:	ee17 2a90 	vmov	r2, s15
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800920e:	e008      	b.n	8009222 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2200      	movs	r2, #0
 800921a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	609a      	str	r2, [r3, #8]
}
 8009222:	bf00      	nop
 8009224:	3724      	adds	r7, #36	; 0x24
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr
 800922e:	bf00      	nop
 8009230:	58024400 	.word	0x58024400
 8009234:	03d09000 	.word	0x03d09000
 8009238:	46000000 	.word	0x46000000
 800923c:	4c742400 	.word	0x4c742400
 8009240:	4a742400 	.word	0x4a742400
 8009244:	4af42400 	.word	0x4af42400

08009248 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009248:	b480      	push	{r7}
 800924a:	b089      	sub	sp, #36	; 0x24
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009250:	4ba1      	ldr	r3, [pc, #644]	; (80094d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009254:	f003 0303 	and.w	r3, r3, #3
 8009258:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800925a:	4b9f      	ldr	r3, [pc, #636]	; (80094d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800925c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800925e:	0d1b      	lsrs	r3, r3, #20
 8009260:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009264:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009266:	4b9c      	ldr	r3, [pc, #624]	; (80094d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800926a:	0a1b      	lsrs	r3, r3, #8
 800926c:	f003 0301 	and.w	r3, r3, #1
 8009270:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009272:	4b99      	ldr	r3, [pc, #612]	; (80094d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009276:	08db      	lsrs	r3, r3, #3
 8009278:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800927c:	693a      	ldr	r2, [r7, #16]
 800927e:	fb02 f303 	mul.w	r3, r2, r3
 8009282:	ee07 3a90 	vmov	s15, r3
 8009286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800928a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	2b00      	cmp	r3, #0
 8009292:	f000 8111 	beq.w	80094b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	2b02      	cmp	r3, #2
 800929a:	f000 8083 	beq.w	80093a4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	2b02      	cmp	r3, #2
 80092a2:	f200 80a1 	bhi.w	80093e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80092a6:	69bb      	ldr	r3, [r7, #24]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d003      	beq.n	80092b4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80092ac:	69bb      	ldr	r3, [r7, #24]
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d056      	beq.n	8009360 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80092b2:	e099      	b.n	80093e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092b4:	4b88      	ldr	r3, [pc, #544]	; (80094d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f003 0320 	and.w	r3, r3, #32
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d02d      	beq.n	800931c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80092c0:	4b85      	ldr	r3, [pc, #532]	; (80094d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	08db      	lsrs	r3, r3, #3
 80092c6:	f003 0303 	and.w	r3, r3, #3
 80092ca:	4a84      	ldr	r2, [pc, #528]	; (80094dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80092cc:	fa22 f303 	lsr.w	r3, r2, r3
 80092d0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	ee07 3a90 	vmov	s15, r3
 80092d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	ee07 3a90 	vmov	s15, r3
 80092e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092ea:	4b7b      	ldr	r3, [pc, #492]	; (80094d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092f2:	ee07 3a90 	vmov	s15, r3
 80092f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80092fe:	eddf 5a78 	vldr	s11, [pc, #480]	; 80094e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800930a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800930e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009316:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800931a:	e087      	b.n	800942c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	ee07 3a90 	vmov	s15, r3
 8009322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009326:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80094e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800932a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800932e:	4b6a      	ldr	r3, [pc, #424]	; (80094d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009336:	ee07 3a90 	vmov	s15, r3
 800933a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800933e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009342:	eddf 5a67 	vldr	s11, [pc, #412]	; 80094e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800934a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800934e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800935a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800935e:	e065      	b.n	800942c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	ee07 3a90 	vmov	s15, r3
 8009366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800936a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80094e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800936e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009372:	4b59      	ldr	r3, [pc, #356]	; (80094d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800937a:	ee07 3a90 	vmov	s15, r3
 800937e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009382:	ed97 6a03 	vldr	s12, [r7, #12]
 8009386:	eddf 5a56 	vldr	s11, [pc, #344]	; 80094e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800938a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800938e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800939a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800939e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80093a2:	e043      	b.n	800942c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	ee07 3a90 	vmov	s15, r3
 80093aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80094ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80093b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093b6:	4b48      	ldr	r3, [pc, #288]	; (80094d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093be:	ee07 3a90 	vmov	s15, r3
 80093c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80093ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 80094e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80093ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80093e6:	e021      	b.n	800942c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	ee07 3a90 	vmov	s15, r3
 80093ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80094e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80093f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093fa:	4b37      	ldr	r3, [pc, #220]	; (80094d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009402:	ee07 3a90 	vmov	s15, r3
 8009406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800940a:	ed97 6a03 	vldr	s12, [r7, #12]
 800940e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80094e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800941a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800941e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009426:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800942a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800942c:	4b2a      	ldr	r3, [pc, #168]	; (80094d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800942e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009430:	0a5b      	lsrs	r3, r3, #9
 8009432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009436:	ee07 3a90 	vmov	s15, r3
 800943a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800943e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009442:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009446:	edd7 6a07 	vldr	s13, [r7, #28]
 800944a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800944e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009452:	ee17 2a90 	vmov	r2, s15
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800945a:	4b1f      	ldr	r3, [pc, #124]	; (80094d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800945c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800945e:	0c1b      	lsrs	r3, r3, #16
 8009460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009464:	ee07 3a90 	vmov	s15, r3
 8009468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800946c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009470:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009474:	edd7 6a07 	vldr	s13, [r7, #28]
 8009478:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800947c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009480:	ee17 2a90 	vmov	r2, s15
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009488:	4b13      	ldr	r3, [pc, #76]	; (80094d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800948a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800948c:	0e1b      	lsrs	r3, r3, #24
 800948e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009492:	ee07 3a90 	vmov	s15, r3
 8009496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800949a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800949e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80094a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094ae:	ee17 2a90 	vmov	r2, s15
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80094b6:	e008      	b.n	80094ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2200      	movs	r2, #0
 80094bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	609a      	str	r2, [r3, #8]
}
 80094ca:	bf00      	nop
 80094cc:	3724      	adds	r7, #36	; 0x24
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr
 80094d6:	bf00      	nop
 80094d8:	58024400 	.word	0x58024400
 80094dc:	03d09000 	.word	0x03d09000
 80094e0:	46000000 	.word	0x46000000
 80094e4:	4c742400 	.word	0x4c742400
 80094e8:	4a742400 	.word	0x4a742400
 80094ec:	4af42400 	.word	0x4af42400

080094f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80094fa:	2300      	movs	r3, #0
 80094fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80094fe:	4b53      	ldr	r3, [pc, #332]	; (800964c <RCCEx_PLL2_Config+0x15c>)
 8009500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009502:	f003 0303 	and.w	r3, r3, #3
 8009506:	2b03      	cmp	r3, #3
 8009508:	d101      	bne.n	800950e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800950a:	2301      	movs	r3, #1
 800950c:	e099      	b.n	8009642 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800950e:	4b4f      	ldr	r3, [pc, #316]	; (800964c <RCCEx_PLL2_Config+0x15c>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a4e      	ldr	r2, [pc, #312]	; (800964c <RCCEx_PLL2_Config+0x15c>)
 8009514:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009518:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800951a:	f7f9 fa5f 	bl	80029dc <HAL_GetTick>
 800951e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009520:	e008      	b.n	8009534 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009522:	f7f9 fa5b 	bl	80029dc <HAL_GetTick>
 8009526:	4602      	mov	r2, r0
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	1ad3      	subs	r3, r2, r3
 800952c:	2b02      	cmp	r3, #2
 800952e:	d901      	bls.n	8009534 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009530:	2303      	movs	r3, #3
 8009532:	e086      	b.n	8009642 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009534:	4b45      	ldr	r3, [pc, #276]	; (800964c <RCCEx_PLL2_Config+0x15c>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800953c:	2b00      	cmp	r3, #0
 800953e:	d1f0      	bne.n	8009522 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009540:	4b42      	ldr	r3, [pc, #264]	; (800964c <RCCEx_PLL2_Config+0x15c>)
 8009542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009544:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	031b      	lsls	r3, r3, #12
 800954e:	493f      	ldr	r1, [pc, #252]	; (800964c <RCCEx_PLL2_Config+0x15c>)
 8009550:	4313      	orrs	r3, r2
 8009552:	628b      	str	r3, [r1, #40]	; 0x28
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	3b01      	subs	r3, #1
 800955a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	3b01      	subs	r3, #1
 8009564:	025b      	lsls	r3, r3, #9
 8009566:	b29b      	uxth	r3, r3
 8009568:	431a      	orrs	r2, r3
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	68db      	ldr	r3, [r3, #12]
 800956e:	3b01      	subs	r3, #1
 8009570:	041b      	lsls	r3, r3, #16
 8009572:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009576:	431a      	orrs	r2, r3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	691b      	ldr	r3, [r3, #16]
 800957c:	3b01      	subs	r3, #1
 800957e:	061b      	lsls	r3, r3, #24
 8009580:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009584:	4931      	ldr	r1, [pc, #196]	; (800964c <RCCEx_PLL2_Config+0x15c>)
 8009586:	4313      	orrs	r3, r2
 8009588:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800958a:	4b30      	ldr	r3, [pc, #192]	; (800964c <RCCEx_PLL2_Config+0x15c>)
 800958c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800958e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	695b      	ldr	r3, [r3, #20]
 8009596:	492d      	ldr	r1, [pc, #180]	; (800964c <RCCEx_PLL2_Config+0x15c>)
 8009598:	4313      	orrs	r3, r2
 800959a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800959c:	4b2b      	ldr	r3, [pc, #172]	; (800964c <RCCEx_PLL2_Config+0x15c>)
 800959e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a0:	f023 0220 	bic.w	r2, r3, #32
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	699b      	ldr	r3, [r3, #24]
 80095a8:	4928      	ldr	r1, [pc, #160]	; (800964c <RCCEx_PLL2_Config+0x15c>)
 80095aa:	4313      	orrs	r3, r2
 80095ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80095ae:	4b27      	ldr	r3, [pc, #156]	; (800964c <RCCEx_PLL2_Config+0x15c>)
 80095b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b2:	4a26      	ldr	r2, [pc, #152]	; (800964c <RCCEx_PLL2_Config+0x15c>)
 80095b4:	f023 0310 	bic.w	r3, r3, #16
 80095b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80095ba:	4b24      	ldr	r3, [pc, #144]	; (800964c <RCCEx_PLL2_Config+0x15c>)
 80095bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80095be:	4b24      	ldr	r3, [pc, #144]	; (8009650 <RCCEx_PLL2_Config+0x160>)
 80095c0:	4013      	ands	r3, r2
 80095c2:	687a      	ldr	r2, [r7, #4]
 80095c4:	69d2      	ldr	r2, [r2, #28]
 80095c6:	00d2      	lsls	r2, r2, #3
 80095c8:	4920      	ldr	r1, [pc, #128]	; (800964c <RCCEx_PLL2_Config+0x15c>)
 80095ca:	4313      	orrs	r3, r2
 80095cc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80095ce:	4b1f      	ldr	r3, [pc, #124]	; (800964c <RCCEx_PLL2_Config+0x15c>)
 80095d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d2:	4a1e      	ldr	r2, [pc, #120]	; (800964c <RCCEx_PLL2_Config+0x15c>)
 80095d4:	f043 0310 	orr.w	r3, r3, #16
 80095d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d106      	bne.n	80095ee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80095e0:	4b1a      	ldr	r3, [pc, #104]	; (800964c <RCCEx_PLL2_Config+0x15c>)
 80095e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e4:	4a19      	ldr	r2, [pc, #100]	; (800964c <RCCEx_PLL2_Config+0x15c>)
 80095e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80095ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80095ec:	e00f      	b.n	800960e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d106      	bne.n	8009602 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80095f4:	4b15      	ldr	r3, [pc, #84]	; (800964c <RCCEx_PLL2_Config+0x15c>)
 80095f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f8:	4a14      	ldr	r2, [pc, #80]	; (800964c <RCCEx_PLL2_Config+0x15c>)
 80095fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80095fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009600:	e005      	b.n	800960e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009602:	4b12      	ldr	r3, [pc, #72]	; (800964c <RCCEx_PLL2_Config+0x15c>)
 8009604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009606:	4a11      	ldr	r2, [pc, #68]	; (800964c <RCCEx_PLL2_Config+0x15c>)
 8009608:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800960c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800960e:	4b0f      	ldr	r3, [pc, #60]	; (800964c <RCCEx_PLL2_Config+0x15c>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4a0e      	ldr	r2, [pc, #56]	; (800964c <RCCEx_PLL2_Config+0x15c>)
 8009614:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009618:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800961a:	f7f9 f9df 	bl	80029dc <HAL_GetTick>
 800961e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009620:	e008      	b.n	8009634 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009622:	f7f9 f9db 	bl	80029dc <HAL_GetTick>
 8009626:	4602      	mov	r2, r0
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	1ad3      	subs	r3, r2, r3
 800962c:	2b02      	cmp	r3, #2
 800962e:	d901      	bls.n	8009634 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009630:	2303      	movs	r3, #3
 8009632:	e006      	b.n	8009642 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009634:	4b05      	ldr	r3, [pc, #20]	; (800964c <RCCEx_PLL2_Config+0x15c>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800963c:	2b00      	cmp	r3, #0
 800963e:	d0f0      	beq.n	8009622 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009640:	7bfb      	ldrb	r3, [r7, #15]
}
 8009642:	4618      	mov	r0, r3
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop
 800964c:	58024400 	.word	0x58024400
 8009650:	ffff0007 	.word	0xffff0007

08009654 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800965e:	2300      	movs	r3, #0
 8009660:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009662:	4b53      	ldr	r3, [pc, #332]	; (80097b0 <RCCEx_PLL3_Config+0x15c>)
 8009664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009666:	f003 0303 	and.w	r3, r3, #3
 800966a:	2b03      	cmp	r3, #3
 800966c:	d101      	bne.n	8009672 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800966e:	2301      	movs	r3, #1
 8009670:	e099      	b.n	80097a6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009672:	4b4f      	ldr	r3, [pc, #316]	; (80097b0 <RCCEx_PLL3_Config+0x15c>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a4e      	ldr	r2, [pc, #312]	; (80097b0 <RCCEx_PLL3_Config+0x15c>)
 8009678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800967c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800967e:	f7f9 f9ad 	bl	80029dc <HAL_GetTick>
 8009682:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009684:	e008      	b.n	8009698 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009686:	f7f9 f9a9 	bl	80029dc <HAL_GetTick>
 800968a:	4602      	mov	r2, r0
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	1ad3      	subs	r3, r2, r3
 8009690:	2b02      	cmp	r3, #2
 8009692:	d901      	bls.n	8009698 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009694:	2303      	movs	r3, #3
 8009696:	e086      	b.n	80097a6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009698:	4b45      	ldr	r3, [pc, #276]	; (80097b0 <RCCEx_PLL3_Config+0x15c>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d1f0      	bne.n	8009686 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80096a4:	4b42      	ldr	r3, [pc, #264]	; (80097b0 <RCCEx_PLL3_Config+0x15c>)
 80096a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096a8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	051b      	lsls	r3, r3, #20
 80096b2:	493f      	ldr	r1, [pc, #252]	; (80097b0 <RCCEx_PLL3_Config+0x15c>)
 80096b4:	4313      	orrs	r3, r2
 80096b6:	628b      	str	r3, [r1, #40]	; 0x28
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	3b01      	subs	r3, #1
 80096be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	3b01      	subs	r3, #1
 80096c8:	025b      	lsls	r3, r3, #9
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	431a      	orrs	r2, r3
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	68db      	ldr	r3, [r3, #12]
 80096d2:	3b01      	subs	r3, #1
 80096d4:	041b      	lsls	r3, r3, #16
 80096d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80096da:	431a      	orrs	r2, r3
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	691b      	ldr	r3, [r3, #16]
 80096e0:	3b01      	subs	r3, #1
 80096e2:	061b      	lsls	r3, r3, #24
 80096e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80096e8:	4931      	ldr	r1, [pc, #196]	; (80097b0 <RCCEx_PLL3_Config+0x15c>)
 80096ea:	4313      	orrs	r3, r2
 80096ec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80096ee:	4b30      	ldr	r3, [pc, #192]	; (80097b0 <RCCEx_PLL3_Config+0x15c>)
 80096f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	695b      	ldr	r3, [r3, #20]
 80096fa:	492d      	ldr	r1, [pc, #180]	; (80097b0 <RCCEx_PLL3_Config+0x15c>)
 80096fc:	4313      	orrs	r3, r2
 80096fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009700:	4b2b      	ldr	r3, [pc, #172]	; (80097b0 <RCCEx_PLL3_Config+0x15c>)
 8009702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009704:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	699b      	ldr	r3, [r3, #24]
 800970c:	4928      	ldr	r1, [pc, #160]	; (80097b0 <RCCEx_PLL3_Config+0x15c>)
 800970e:	4313      	orrs	r3, r2
 8009710:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009712:	4b27      	ldr	r3, [pc, #156]	; (80097b0 <RCCEx_PLL3_Config+0x15c>)
 8009714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009716:	4a26      	ldr	r2, [pc, #152]	; (80097b0 <RCCEx_PLL3_Config+0x15c>)
 8009718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800971c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800971e:	4b24      	ldr	r3, [pc, #144]	; (80097b0 <RCCEx_PLL3_Config+0x15c>)
 8009720:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009722:	4b24      	ldr	r3, [pc, #144]	; (80097b4 <RCCEx_PLL3_Config+0x160>)
 8009724:	4013      	ands	r3, r2
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	69d2      	ldr	r2, [r2, #28]
 800972a:	00d2      	lsls	r2, r2, #3
 800972c:	4920      	ldr	r1, [pc, #128]	; (80097b0 <RCCEx_PLL3_Config+0x15c>)
 800972e:	4313      	orrs	r3, r2
 8009730:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009732:	4b1f      	ldr	r3, [pc, #124]	; (80097b0 <RCCEx_PLL3_Config+0x15c>)
 8009734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009736:	4a1e      	ldr	r2, [pc, #120]	; (80097b0 <RCCEx_PLL3_Config+0x15c>)
 8009738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800973c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d106      	bne.n	8009752 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009744:	4b1a      	ldr	r3, [pc, #104]	; (80097b0 <RCCEx_PLL3_Config+0x15c>)
 8009746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009748:	4a19      	ldr	r2, [pc, #100]	; (80097b0 <RCCEx_PLL3_Config+0x15c>)
 800974a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800974e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009750:	e00f      	b.n	8009772 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	2b01      	cmp	r3, #1
 8009756:	d106      	bne.n	8009766 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009758:	4b15      	ldr	r3, [pc, #84]	; (80097b0 <RCCEx_PLL3_Config+0x15c>)
 800975a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800975c:	4a14      	ldr	r2, [pc, #80]	; (80097b0 <RCCEx_PLL3_Config+0x15c>)
 800975e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009762:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009764:	e005      	b.n	8009772 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009766:	4b12      	ldr	r3, [pc, #72]	; (80097b0 <RCCEx_PLL3_Config+0x15c>)
 8009768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800976a:	4a11      	ldr	r2, [pc, #68]	; (80097b0 <RCCEx_PLL3_Config+0x15c>)
 800976c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009770:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009772:	4b0f      	ldr	r3, [pc, #60]	; (80097b0 <RCCEx_PLL3_Config+0x15c>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a0e      	ldr	r2, [pc, #56]	; (80097b0 <RCCEx_PLL3_Config+0x15c>)
 8009778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800977c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800977e:	f7f9 f92d 	bl	80029dc <HAL_GetTick>
 8009782:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009784:	e008      	b.n	8009798 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009786:	f7f9 f929 	bl	80029dc <HAL_GetTick>
 800978a:	4602      	mov	r2, r0
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	1ad3      	subs	r3, r2, r3
 8009790:	2b02      	cmp	r3, #2
 8009792:	d901      	bls.n	8009798 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009794:	2303      	movs	r3, #3
 8009796:	e006      	b.n	80097a6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009798:	4b05      	ldr	r3, [pc, #20]	; (80097b0 <RCCEx_PLL3_Config+0x15c>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d0f0      	beq.n	8009786 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80097a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3710      	adds	r7, #16
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop
 80097b0:	58024400 	.word	0x58024400
 80097b4:	ffff0007 	.word	0xffff0007

080097b8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 80097c0:	2300      	movs	r3, #0
 80097c2:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d101      	bne.n	80097ce <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 80097ca:	2301      	movs	r3, #1
 80097cc:	e0eb      	b.n	80099a6 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2200      	movs	r2, #0
 80097d2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a75      	ldr	r2, [pc, #468]	; (80099b0 <HAL_SPI_Init+0x1f8>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d00f      	beq.n	80097fe <HAL_SPI_Init+0x46>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a74      	ldr	r2, [pc, #464]	; (80099b4 <HAL_SPI_Init+0x1fc>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d00a      	beq.n	80097fe <HAL_SPI_Init+0x46>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a72      	ldr	r2, [pc, #456]	; (80099b8 <HAL_SPI_Init+0x200>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d005      	beq.n	80097fe <HAL_SPI_Init+0x46>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	2b0f      	cmp	r3, #15
 80097f8:	d901      	bls.n	80097fe <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 80097fa:	2301      	movs	r3, #1
 80097fc:	e0d3      	b.n	80099a6 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 fb9c 	bl	8009f3c <SPI_GetPacketSize>
 8009804:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4a69      	ldr	r2, [pc, #420]	; (80099b0 <HAL_SPI_Init+0x1f8>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d00c      	beq.n	800982a <HAL_SPI_Init+0x72>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a67      	ldr	r2, [pc, #412]	; (80099b4 <HAL_SPI_Init+0x1fc>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d007      	beq.n	800982a <HAL_SPI_Init+0x72>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4a66      	ldr	r2, [pc, #408]	; (80099b8 <HAL_SPI_Init+0x200>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d002      	beq.n	800982a <HAL_SPI_Init+0x72>
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	2b08      	cmp	r3, #8
 8009828:	d811      	bhi.n	800984e <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800982e:	4a60      	ldr	r2, [pc, #384]	; (80099b0 <HAL_SPI_Init+0x1f8>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d009      	beq.n	8009848 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4a5e      	ldr	r2, [pc, #376]	; (80099b4 <HAL_SPI_Init+0x1fc>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d004      	beq.n	8009848 <HAL_SPI_Init+0x90>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a5d      	ldr	r2, [pc, #372]	; (80099b8 <HAL_SPI_Init+0x200>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d104      	bne.n	8009852 <HAL_SPI_Init+0x9a>
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	2b10      	cmp	r3, #16
 800984c:	d901      	bls.n	8009852 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800984e:	2301      	movs	r3, #1
 8009850:	e0a9      	b.n	80099a6 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009858:	b2db      	uxtb	r3, r3
 800985a:	2b00      	cmp	r3, #0
 800985c:	d106      	bne.n	800986c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2200      	movs	r2, #0
 8009862:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f7f8 fb74 	bl	8001f54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2202      	movs	r2, #2
 8009870:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f022 0201 	bic.w	r2, r2, #1
 8009882:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	699b      	ldr	r3, [r3, #24]
 8009888:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800988c:	d119      	bne.n	80098c2 <HAL_SPI_Init+0x10a>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009896:	d103      	bne.n	80098a0 <HAL_SPI_Init+0xe8>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800989c:	2b00      	cmp	r3, #0
 800989e:	d008      	beq.n	80098b2 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d10c      	bne.n	80098c2 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098b0:	d107      	bne.n	80098c2 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80098c0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	69da      	ldr	r2, [r3, #28]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ca:	431a      	orrs	r2, r3
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	431a      	orrs	r2, r3
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098d4:	ea42 0103 	orr.w	r1, r2, r3
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	68da      	ldr	r2, [r3, #12]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	430a      	orrs	r2, r1
 80098e2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ec:	431a      	orrs	r2, r3
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098f2:	431a      	orrs	r2, r3
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	699b      	ldr	r3, [r3, #24]
 80098f8:	431a      	orrs	r2, r3
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	431a      	orrs	r2, r3
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	695b      	ldr	r3, [r3, #20]
 8009904:	431a      	orrs	r2, r3
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6a1b      	ldr	r3, [r3, #32]
 800990a:	431a      	orrs	r2, r3
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	431a      	orrs	r2, r3
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009916:	431a      	orrs	r2, r3
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	689b      	ldr	r3, [r3, #8]
 800991c:	431a      	orrs	r2, r3
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009922:	ea42 0103 	orr.w	r1, r2, r3
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	430a      	orrs	r2, r1
 8009930:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d113      	bne.n	8009962 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800994c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	689b      	ldr	r3, [r3, #8]
 8009954:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009960:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f022 0201 	bic.w	r2, r2, #1
 8009970:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800997a:	2b00      	cmp	r3, #0
 800997c:	d00a      	beq.n	8009994 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	68db      	ldr	r3, [r3, #12]
 8009984:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	430a      	orrs	r2, r1
 8009992:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2201      	movs	r2, #1
 80099a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3710      	adds	r7, #16
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	40013000 	.word	0x40013000
 80099b4:	40003800 	.word	0x40003800
 80099b8:	40003c00 	.word	0x40003c00

080099bc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b08a      	sub	sp, #40	; 0x28
 80099c0:	af02      	add	r7, sp, #8
 80099c2:	60f8      	str	r0, [r7, #12]
 80099c4:	60b9      	str	r1, [r7, #8]
 80099c6:	603b      	str	r3, [r7, #0]
 80099c8:	4613      	mov	r3, r2
 80099ca:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	3320      	adds	r3, #32
 80099d2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80099d4:	2300      	movs	r3, #0
 80099d6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d101      	bne.n	80099e6 <HAL_SPI_Transmit+0x2a>
 80099e2:	2302      	movs	r3, #2
 80099e4:	e1d7      	b.n	8009d96 <HAL_SPI_Transmit+0x3da>
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2201      	movs	r2, #1
 80099ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80099ee:	f7f8 fff5 	bl	80029dc <HAL_GetTick>
 80099f2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d007      	beq.n	8009a10 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8009a00:	2302      	movs	r3, #2
 8009a02:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2200      	movs	r2, #0
 8009a08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009a0c:	7efb      	ldrb	r3, [r7, #27]
 8009a0e:	e1c2      	b.n	8009d96 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d002      	beq.n	8009a1c <HAL_SPI_Transmit+0x60>
 8009a16:	88fb      	ldrh	r3, [r7, #6]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d107      	bne.n	8009a2c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2200      	movs	r2, #0
 8009a24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009a28:	7efb      	ldrb	r3, [r7, #27]
 8009a2a:	e1b4      	b.n	8009d96 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2203      	movs	r2, #3
 8009a30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2200      	movs	r2, #0
 8009a38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	68ba      	ldr	r2, [r7, #8]
 8009a40:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	88fa      	ldrh	r2, [r7, #6]
 8009a46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	88fa      	ldrh	r2, [r7, #6]
 8009a4e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2200      	movs	r2, #0
 8009a56:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2200      	movs	r2, #0
 8009a64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2200      	movs	r2, #0
 8009a72:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	689b      	ldr	r3, [r3, #8]
 8009a78:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8009a7c:	d107      	bne.n	8009a8e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	685a      	ldr	r2, [r3, #4]
 8009a94:	4b96      	ldr	r3, [pc, #600]	; (8009cf0 <HAL_SPI_Transmit+0x334>)
 8009a96:	4013      	ands	r3, r2
 8009a98:	88f9      	ldrh	r1, [r7, #6]
 8009a9a:	68fa      	ldr	r2, [r7, #12]
 8009a9c:	6812      	ldr	r2, [r2, #0]
 8009a9e:	430b      	orrs	r3, r1
 8009aa0:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f042 0201 	orr.w	r2, r2, #1
 8009ab0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009aba:	d107      	bne.n	8009acc <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009aca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	68db      	ldr	r3, [r3, #12]
 8009ad0:	2b0f      	cmp	r3, #15
 8009ad2:	d947      	bls.n	8009b64 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009ad4:	e03f      	b.n	8009b56 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	695b      	ldr	r3, [r3, #20]
 8009adc:	f003 0302 	and.w	r3, r3, #2
 8009ae0:	2b02      	cmp	r3, #2
 8009ae2:	d114      	bne.n	8009b0e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	6812      	ldr	r2, [r2, #0]
 8009aee:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009af4:	1d1a      	adds	r2, r3, #4
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	3b01      	subs	r3, #1
 8009b04:	b29a      	uxth	r2, r3
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009b0c:	e023      	b.n	8009b56 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b0e:	f7f8 ff65 	bl	80029dc <HAL_GetTick>
 8009b12:	4602      	mov	r2, r0
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	1ad3      	subs	r3, r2, r3
 8009b18:	683a      	ldr	r2, [r7, #0]
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d803      	bhi.n	8009b26 <HAL_SPI_Transmit+0x16a>
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b24:	d102      	bne.n	8009b2c <HAL_SPI_Transmit+0x170>
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d114      	bne.n	8009b56 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009b2c:	68f8      	ldr	r0, [r7, #12]
 8009b2e:	f000 f937 	bl	8009da0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	2200      	movs	r2, #0
 8009b36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b40:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8009b52:	2301      	movs	r3, #1
 8009b54:	e11f      	b.n	8009d96 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d1b9      	bne.n	8009ad6 <HAL_SPI_Transmit+0x11a>
 8009b62:	e0f2      	b.n	8009d4a <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	68db      	ldr	r3, [r3, #12]
 8009b68:	2b07      	cmp	r3, #7
 8009b6a:	f240 80e7 	bls.w	8009d3c <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009b6e:	e05d      	b.n	8009c2c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	695b      	ldr	r3, [r3, #20]
 8009b76:	f003 0302 	and.w	r3, r3, #2
 8009b7a:	2b02      	cmp	r3, #2
 8009b7c:	d132      	bne.n	8009be4 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009b84:	b29b      	uxth	r3, r3
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d918      	bls.n	8009bbc <HAL_SPI_Transmit+0x200>
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d014      	beq.n	8009bbc <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	6812      	ldr	r2, [r2, #0]
 8009b9c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ba2:	1d1a      	adds	r2, r3, #4
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009bae:	b29b      	uxth	r3, r3
 8009bb0:	3b02      	subs	r3, #2
 8009bb2:	b29a      	uxth	r2, r3
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009bba:	e037      	b.n	8009c2c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bc0:	881a      	ldrh	r2, [r3, #0]
 8009bc2:	69fb      	ldr	r3, [r7, #28]
 8009bc4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bca:	1c9a      	adds	r2, r3, #2
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	3b01      	subs	r3, #1
 8009bda:	b29a      	uxth	r2, r3
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009be2:	e023      	b.n	8009c2c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009be4:	f7f8 fefa 	bl	80029dc <HAL_GetTick>
 8009be8:	4602      	mov	r2, r0
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	1ad3      	subs	r3, r2, r3
 8009bee:	683a      	ldr	r2, [r7, #0]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d803      	bhi.n	8009bfc <HAL_SPI_Transmit+0x240>
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bfa:	d102      	bne.n	8009c02 <HAL_SPI_Transmit+0x246>
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d114      	bne.n	8009c2c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009c02:	68f8      	ldr	r0, [r7, #12]
 8009c04:	f000 f8cc 	bl	8009da0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c16:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2201      	movs	r2, #1
 8009c24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	e0b4      	b.n	8009d96 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d19b      	bne.n	8009b70 <HAL_SPI_Transmit+0x1b4>
 8009c38:	e087      	b.n	8009d4a <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	695b      	ldr	r3, [r3, #20]
 8009c40:	f003 0302 	and.w	r3, r3, #2
 8009c44:	2b02      	cmp	r3, #2
 8009c46:	d155      	bne.n	8009cf4 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009c4e:	b29b      	uxth	r3, r3
 8009c50:	2b03      	cmp	r3, #3
 8009c52:	d918      	bls.n	8009c86 <HAL_SPI_Transmit+0x2ca>
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c58:	2b40      	cmp	r3, #64	; 0x40
 8009c5a:	d914      	bls.n	8009c86 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	6812      	ldr	r2, [r2, #0]
 8009c66:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c6c:	1d1a      	adds	r2, r3, #4
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	3b04      	subs	r3, #4
 8009c7c:	b29a      	uxth	r2, r3
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009c84:	e05a      	b.n	8009d3c <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d917      	bls.n	8009cc2 <HAL_SPI_Transmit+0x306>
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d013      	beq.n	8009cc2 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c9e:	881a      	ldrh	r2, [r3, #0]
 8009ca0:	69fb      	ldr	r3, [r7, #28]
 8009ca2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ca8:	1c9a      	adds	r2, r3, #2
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009cb4:	b29b      	uxth	r3, r3
 8009cb6:	3b02      	subs	r3, #2
 8009cb8:	b29a      	uxth	r2, r3
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009cc0:	e03c      	b.n	8009d3c <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	3320      	adds	r3, #32
 8009ccc:	7812      	ldrb	r2, [r2, #0]
 8009cce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cd4:	1c5a      	adds	r2, r3, #1
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009ce0:	b29b      	uxth	r3, r3
 8009ce2:	3b01      	subs	r3, #1
 8009ce4:	b29a      	uxth	r2, r3
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009cec:	e026      	b.n	8009d3c <HAL_SPI_Transmit+0x380>
 8009cee:	bf00      	nop
 8009cf0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009cf4:	f7f8 fe72 	bl	80029dc <HAL_GetTick>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	1ad3      	subs	r3, r2, r3
 8009cfe:	683a      	ldr	r2, [r7, #0]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d803      	bhi.n	8009d0c <HAL_SPI_Transmit+0x350>
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d0a:	d102      	bne.n	8009d12 <HAL_SPI_Transmit+0x356>
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d114      	bne.n	8009d3c <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009d12:	68f8      	ldr	r0, [r7, #12]
 8009d14:	f000 f844 	bl	8009da0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2201      	movs	r2, #1
 8009d34:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	e02c      	b.n	8009d96 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009d42:	b29b      	uxth	r3, r3
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	f47f af78 	bne.w	8009c3a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	9300      	str	r3, [sp, #0]
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	2200      	movs	r2, #0
 8009d52:	2108      	movs	r1, #8
 8009d54:	68f8      	ldr	r0, [r7, #12]
 8009d56:	f000 f8c3 	bl	8009ee0 <SPI_WaitOnFlagUntilTimeout>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d007      	beq.n	8009d70 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d66:	f043 0220 	orr.w	r2, r3, #32
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009d70:	68f8      	ldr	r0, [r7, #12]
 8009d72:	f000 f815 	bl	8009da0 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2201      	movs	r2, #1
 8009d82:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d001      	beq.n	8009d94 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8009d90:	2301      	movs	r3, #1
 8009d92:	e000      	b.n	8009d96 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8009d94:	7efb      	ldrb	r3, [r7, #27]
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3720      	adds	r7, #32
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop

08009da0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b085      	sub	sp, #20
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	695b      	ldr	r3, [r3, #20]
 8009dae:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	699a      	ldr	r2, [r3, #24]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f042 0208 	orr.w	r2, r2, #8
 8009dbe:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	699a      	ldr	r2, [r3, #24]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f042 0210 	orr.w	r2, r2, #16
 8009dce:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	681a      	ldr	r2, [r3, #0]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f022 0201 	bic.w	r2, r2, #1
 8009dde:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	6919      	ldr	r1, [r3, #16]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	4b3c      	ldr	r3, [pc, #240]	; (8009edc <SPI_CloseTransfer+0x13c>)
 8009dec:	400b      	ands	r3, r1
 8009dee:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	689a      	ldr	r2, [r3, #8]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009dfe:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	2b04      	cmp	r3, #4
 8009e0a:	d014      	beq.n	8009e36 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f003 0320 	and.w	r3, r3, #32
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d00f      	beq.n	8009e36 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e1c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	699a      	ldr	r2, [r3, #24]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f042 0220 	orr.w	r2, r2, #32
 8009e34:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	2b03      	cmp	r3, #3
 8009e40:	d014      	beq.n	8009e6c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d00f      	beq.n	8009e6c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e52:	f043 0204 	orr.w	r2, r3, #4
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	699a      	ldr	r2, [r3, #24]
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e6a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d00f      	beq.n	8009e96 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e7c:	f043 0201 	orr.w	r2, r3, #1
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	699a      	ldr	r2, [r3, #24]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e94:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d00f      	beq.n	8009ec0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ea6:	f043 0208 	orr.w	r2, r3, #8
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	699a      	ldr	r2, [r3, #24]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ebe:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8009ed0:	bf00      	nop
 8009ed2:	3714      	adds	r7, #20
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr
 8009edc:	fffffc90 	.word	0xfffffc90

08009ee0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b084      	sub	sp, #16
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	60f8      	str	r0, [r7, #12]
 8009ee8:	60b9      	str	r1, [r7, #8]
 8009eea:	603b      	str	r3, [r7, #0]
 8009eec:	4613      	mov	r3, r2
 8009eee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009ef0:	e010      	b.n	8009f14 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ef2:	f7f8 fd73 	bl	80029dc <HAL_GetTick>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	1ad3      	subs	r3, r2, r3
 8009efc:	69ba      	ldr	r2, [r7, #24]
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d803      	bhi.n	8009f0a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009f02:	69bb      	ldr	r3, [r7, #24]
 8009f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f08:	d102      	bne.n	8009f10 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009f0a:	69bb      	ldr	r3, [r7, #24]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d101      	bne.n	8009f14 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009f10:	2303      	movs	r3, #3
 8009f12:	e00f      	b.n	8009f34 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	695a      	ldr	r2, [r3, #20]
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	4013      	ands	r3, r2
 8009f1e:	68ba      	ldr	r2, [r7, #8]
 8009f20:	429a      	cmp	r2, r3
 8009f22:	bf0c      	ite	eq
 8009f24:	2301      	moveq	r3, #1
 8009f26:	2300      	movne	r3, #0
 8009f28:	b2db      	uxtb	r3, r3
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	79fb      	ldrb	r3, [r7, #7]
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d0df      	beq.n	8009ef2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009f32:	2300      	movs	r3, #0
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3710      	adds	r7, #16
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b085      	sub	sp, #20
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f48:	095b      	lsrs	r3, r3, #5
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	68db      	ldr	r3, [r3, #12]
 8009f52:	3301      	adds	r3, #1
 8009f54:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	3307      	adds	r3, #7
 8009f5a:	08db      	lsrs	r3, r3, #3
 8009f5c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	68fa      	ldr	r2, [r7, #12]
 8009f62:	fb02 f303 	mul.w	r3, r2, r3
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3714      	adds	r7, #20
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr

08009f72 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009f72:	b580      	push	{r7, lr}
 8009f74:	b082      	sub	sp, #8
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d101      	bne.n	8009f84 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009f80:	2301      	movs	r3, #1
 8009f82:	e049      	b.n	800a018 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f8a:	b2db      	uxtb	r3, r3
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d106      	bne.n	8009f9e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f7f8 fa5f 	bl	800245c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2202      	movs	r2, #2
 8009fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	3304      	adds	r3, #4
 8009fae:	4619      	mov	r1, r3
 8009fb0:	4610      	mov	r0, r2
 8009fb2:	f000 fa4d 	bl	800a450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2201      	movs	r2, #1
 8009fba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2201      	movs	r2, #1
 8009fca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2201      	movs	r2, #1
 8009fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2201      	movs	r2, #1
 8009fea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2201      	movs	r2, #1
 800a002:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2201      	movs	r2, #1
 800a00a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2201      	movs	r2, #1
 800a012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a016:	2300      	movs	r3, #0
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3708      	adds	r7, #8
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d109      	bne.n	800a044 <HAL_TIM_PWM_Start+0x24>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a036:	b2db      	uxtb	r3, r3
 800a038:	2b01      	cmp	r3, #1
 800a03a:	bf14      	ite	ne
 800a03c:	2301      	movne	r3, #1
 800a03e:	2300      	moveq	r3, #0
 800a040:	b2db      	uxtb	r3, r3
 800a042:	e03c      	b.n	800a0be <HAL_TIM_PWM_Start+0x9e>
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	2b04      	cmp	r3, #4
 800a048:	d109      	bne.n	800a05e <HAL_TIM_PWM_Start+0x3e>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a050:	b2db      	uxtb	r3, r3
 800a052:	2b01      	cmp	r3, #1
 800a054:	bf14      	ite	ne
 800a056:	2301      	movne	r3, #1
 800a058:	2300      	moveq	r3, #0
 800a05a:	b2db      	uxtb	r3, r3
 800a05c:	e02f      	b.n	800a0be <HAL_TIM_PWM_Start+0x9e>
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	2b08      	cmp	r3, #8
 800a062:	d109      	bne.n	800a078 <HAL_TIM_PWM_Start+0x58>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a06a:	b2db      	uxtb	r3, r3
 800a06c:	2b01      	cmp	r3, #1
 800a06e:	bf14      	ite	ne
 800a070:	2301      	movne	r3, #1
 800a072:	2300      	moveq	r3, #0
 800a074:	b2db      	uxtb	r3, r3
 800a076:	e022      	b.n	800a0be <HAL_TIM_PWM_Start+0x9e>
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	2b0c      	cmp	r3, #12
 800a07c:	d109      	bne.n	800a092 <HAL_TIM_PWM_Start+0x72>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a084:	b2db      	uxtb	r3, r3
 800a086:	2b01      	cmp	r3, #1
 800a088:	bf14      	ite	ne
 800a08a:	2301      	movne	r3, #1
 800a08c:	2300      	moveq	r3, #0
 800a08e:	b2db      	uxtb	r3, r3
 800a090:	e015      	b.n	800a0be <HAL_TIM_PWM_Start+0x9e>
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	2b10      	cmp	r3, #16
 800a096:	d109      	bne.n	800a0ac <HAL_TIM_PWM_Start+0x8c>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a09e:	b2db      	uxtb	r3, r3
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	bf14      	ite	ne
 800a0a4:	2301      	movne	r3, #1
 800a0a6:	2300      	moveq	r3, #0
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	e008      	b.n	800a0be <HAL_TIM_PWM_Start+0x9e>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	bf14      	ite	ne
 800a0b8:	2301      	movne	r3, #1
 800a0ba:	2300      	moveq	r3, #0
 800a0bc:	b2db      	uxtb	r3, r3
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d001      	beq.n	800a0c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	e09c      	b.n	800a200 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d104      	bne.n	800a0d6 <HAL_TIM_PWM_Start+0xb6>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2202      	movs	r2, #2
 800a0d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a0d4:	e023      	b.n	800a11e <HAL_TIM_PWM_Start+0xfe>
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	2b04      	cmp	r3, #4
 800a0da:	d104      	bne.n	800a0e6 <HAL_TIM_PWM_Start+0xc6>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2202      	movs	r2, #2
 800a0e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a0e4:	e01b      	b.n	800a11e <HAL_TIM_PWM_Start+0xfe>
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	2b08      	cmp	r3, #8
 800a0ea:	d104      	bne.n	800a0f6 <HAL_TIM_PWM_Start+0xd6>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2202      	movs	r2, #2
 800a0f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a0f4:	e013      	b.n	800a11e <HAL_TIM_PWM_Start+0xfe>
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	2b0c      	cmp	r3, #12
 800a0fa:	d104      	bne.n	800a106 <HAL_TIM_PWM_Start+0xe6>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2202      	movs	r2, #2
 800a100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a104:	e00b      	b.n	800a11e <HAL_TIM_PWM_Start+0xfe>
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	2b10      	cmp	r3, #16
 800a10a:	d104      	bne.n	800a116 <HAL_TIM_PWM_Start+0xf6>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2202      	movs	r2, #2
 800a110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a114:	e003      	b.n	800a11e <HAL_TIM_PWM_Start+0xfe>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2202      	movs	r2, #2
 800a11a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	2201      	movs	r2, #1
 800a124:	6839      	ldr	r1, [r7, #0]
 800a126:	4618      	mov	r0, r3
 800a128:	f000 fcfa 	bl	800ab20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a35      	ldr	r2, [pc, #212]	; (800a208 <HAL_TIM_PWM_Start+0x1e8>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d013      	beq.n	800a15e <HAL_TIM_PWM_Start+0x13e>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4a34      	ldr	r2, [pc, #208]	; (800a20c <HAL_TIM_PWM_Start+0x1ec>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d00e      	beq.n	800a15e <HAL_TIM_PWM_Start+0x13e>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a32      	ldr	r2, [pc, #200]	; (800a210 <HAL_TIM_PWM_Start+0x1f0>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d009      	beq.n	800a15e <HAL_TIM_PWM_Start+0x13e>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a31      	ldr	r2, [pc, #196]	; (800a214 <HAL_TIM_PWM_Start+0x1f4>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d004      	beq.n	800a15e <HAL_TIM_PWM_Start+0x13e>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a2f      	ldr	r2, [pc, #188]	; (800a218 <HAL_TIM_PWM_Start+0x1f8>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d101      	bne.n	800a162 <HAL_TIM_PWM_Start+0x142>
 800a15e:	2301      	movs	r3, #1
 800a160:	e000      	b.n	800a164 <HAL_TIM_PWM_Start+0x144>
 800a162:	2300      	movs	r3, #0
 800a164:	2b00      	cmp	r3, #0
 800a166:	d007      	beq.n	800a178 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a176:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a22      	ldr	r2, [pc, #136]	; (800a208 <HAL_TIM_PWM_Start+0x1e8>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d01d      	beq.n	800a1be <HAL_TIM_PWM_Start+0x19e>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a18a:	d018      	beq.n	800a1be <HAL_TIM_PWM_Start+0x19e>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a22      	ldr	r2, [pc, #136]	; (800a21c <HAL_TIM_PWM_Start+0x1fc>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d013      	beq.n	800a1be <HAL_TIM_PWM_Start+0x19e>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a21      	ldr	r2, [pc, #132]	; (800a220 <HAL_TIM_PWM_Start+0x200>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d00e      	beq.n	800a1be <HAL_TIM_PWM_Start+0x19e>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4a1f      	ldr	r2, [pc, #124]	; (800a224 <HAL_TIM_PWM_Start+0x204>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d009      	beq.n	800a1be <HAL_TIM_PWM_Start+0x19e>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4a17      	ldr	r2, [pc, #92]	; (800a20c <HAL_TIM_PWM_Start+0x1ec>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d004      	beq.n	800a1be <HAL_TIM_PWM_Start+0x19e>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a1b      	ldr	r2, [pc, #108]	; (800a228 <HAL_TIM_PWM_Start+0x208>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d115      	bne.n	800a1ea <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	689a      	ldr	r2, [r3, #8]
 800a1c4:	4b19      	ldr	r3, [pc, #100]	; (800a22c <HAL_TIM_PWM_Start+0x20c>)
 800a1c6:	4013      	ands	r3, r2
 800a1c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2b06      	cmp	r3, #6
 800a1ce:	d015      	beq.n	800a1fc <HAL_TIM_PWM_Start+0x1dc>
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1d6:	d011      	beq.n	800a1fc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	681a      	ldr	r2, [r3, #0]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f042 0201 	orr.w	r2, r2, #1
 800a1e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1e8:	e008      	b.n	800a1fc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	681a      	ldr	r2, [r3, #0]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f042 0201 	orr.w	r2, r2, #1
 800a1f8:	601a      	str	r2, [r3, #0]
 800a1fa:	e000      	b.n	800a1fe <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a1fe:	2300      	movs	r3, #0
}
 800a200:	4618      	mov	r0, r3
 800a202:	3710      	adds	r7, #16
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}
 800a208:	40010000 	.word	0x40010000
 800a20c:	40010400 	.word	0x40010400
 800a210:	40014000 	.word	0x40014000
 800a214:	40014400 	.word	0x40014400
 800a218:	40014800 	.word	0x40014800
 800a21c:	40000400 	.word	0x40000400
 800a220:	40000800 	.word	0x40000800
 800a224:	40000c00 	.word	0x40000c00
 800a228:	40001800 	.word	0x40001800
 800a22c:	00010007 	.word	0x00010007

0800a230 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b084      	sub	sp, #16
 800a234:	af00      	add	r7, sp, #0
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	60b9      	str	r1, [r7, #8]
 800a23a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a242:	2b01      	cmp	r3, #1
 800a244:	d101      	bne.n	800a24a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a246:	2302      	movs	r3, #2
 800a248:	e0fd      	b.n	800a446 <HAL_TIM_PWM_ConfigChannel+0x216>
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2201      	movs	r2, #1
 800a24e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2b14      	cmp	r3, #20
 800a256:	f200 80f0 	bhi.w	800a43a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800a25a:	a201      	add	r2, pc, #4	; (adr r2, 800a260 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a25c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a260:	0800a2b5 	.word	0x0800a2b5
 800a264:	0800a43b 	.word	0x0800a43b
 800a268:	0800a43b 	.word	0x0800a43b
 800a26c:	0800a43b 	.word	0x0800a43b
 800a270:	0800a2f5 	.word	0x0800a2f5
 800a274:	0800a43b 	.word	0x0800a43b
 800a278:	0800a43b 	.word	0x0800a43b
 800a27c:	0800a43b 	.word	0x0800a43b
 800a280:	0800a337 	.word	0x0800a337
 800a284:	0800a43b 	.word	0x0800a43b
 800a288:	0800a43b 	.word	0x0800a43b
 800a28c:	0800a43b 	.word	0x0800a43b
 800a290:	0800a377 	.word	0x0800a377
 800a294:	0800a43b 	.word	0x0800a43b
 800a298:	0800a43b 	.word	0x0800a43b
 800a29c:	0800a43b 	.word	0x0800a43b
 800a2a0:	0800a3b9 	.word	0x0800a3b9
 800a2a4:	0800a43b 	.word	0x0800a43b
 800a2a8:	0800a43b 	.word	0x0800a43b
 800a2ac:	0800a43b 	.word	0x0800a43b
 800a2b0:	0800a3f9 	.word	0x0800a3f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	68b9      	ldr	r1, [r7, #8]
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f000 f962 	bl	800a584 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	699a      	ldr	r2, [r3, #24]
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f042 0208 	orr.w	r2, r2, #8
 800a2ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	699a      	ldr	r2, [r3, #24]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f022 0204 	bic.w	r2, r2, #4
 800a2de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	6999      	ldr	r1, [r3, #24]
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	691a      	ldr	r2, [r3, #16]
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	430a      	orrs	r2, r1
 800a2f0:	619a      	str	r2, [r3, #24]
      break;
 800a2f2:	e0a3      	b.n	800a43c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	68b9      	ldr	r1, [r7, #8]
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f000 f9d2 	bl	800a6a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	699a      	ldr	r2, [r3, #24]
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a30e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	699a      	ldr	r2, [r3, #24]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a31e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	6999      	ldr	r1, [r3, #24]
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	691b      	ldr	r3, [r3, #16]
 800a32a:	021a      	lsls	r2, r3, #8
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	430a      	orrs	r2, r1
 800a332:	619a      	str	r2, [r3, #24]
      break;
 800a334:	e082      	b.n	800a43c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	68b9      	ldr	r1, [r7, #8]
 800a33c:	4618      	mov	r0, r3
 800a33e:	f000 fa3b 	bl	800a7b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	69da      	ldr	r2, [r3, #28]
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f042 0208 	orr.w	r2, r2, #8
 800a350:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	69da      	ldr	r2, [r3, #28]
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f022 0204 	bic.w	r2, r2, #4
 800a360:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	69d9      	ldr	r1, [r3, #28]
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	691a      	ldr	r2, [r3, #16]
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	430a      	orrs	r2, r1
 800a372:	61da      	str	r2, [r3, #28]
      break;
 800a374:	e062      	b.n	800a43c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	68b9      	ldr	r1, [r7, #8]
 800a37c:	4618      	mov	r0, r3
 800a37e:	f000 faa1 	bl	800a8c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	69da      	ldr	r2, [r3, #28]
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a390:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	69da      	ldr	r2, [r3, #28]
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a3a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	69d9      	ldr	r1, [r3, #28]
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	691b      	ldr	r3, [r3, #16]
 800a3ac:	021a      	lsls	r2, r3, #8
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	430a      	orrs	r2, r1
 800a3b4:	61da      	str	r2, [r3, #28]
      break;
 800a3b6:	e041      	b.n	800a43c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	68b9      	ldr	r1, [r7, #8]
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f000 fae8 	bl	800a994 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f042 0208 	orr.w	r2, r2, #8
 800a3d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f022 0204 	bic.w	r2, r2, #4
 800a3e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	691a      	ldr	r2, [r3, #16]
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	430a      	orrs	r2, r1
 800a3f4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a3f6:	e021      	b.n	800a43c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	68b9      	ldr	r1, [r7, #8]
 800a3fe:	4618      	mov	r0, r3
 800a400:	f000 fb2a 	bl	800aa58 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a412:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a422:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	691b      	ldr	r3, [r3, #16]
 800a42e:	021a      	lsls	r2, r3, #8
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	430a      	orrs	r2, r1
 800a436:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a438:	e000      	b.n	800a43c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800a43a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2200      	movs	r2, #0
 800a440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a444:	2300      	movs	r3, #0
}
 800a446:	4618      	mov	r0, r3
 800a448:	3710      	adds	r7, #16
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}
 800a44e:	bf00      	nop

0800a450 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a450:	b480      	push	{r7}
 800a452:	b085      	sub	sp, #20
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	4a40      	ldr	r2, [pc, #256]	; (800a564 <TIM_Base_SetConfig+0x114>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d013      	beq.n	800a490 <TIM_Base_SetConfig+0x40>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a46e:	d00f      	beq.n	800a490 <TIM_Base_SetConfig+0x40>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	4a3d      	ldr	r2, [pc, #244]	; (800a568 <TIM_Base_SetConfig+0x118>)
 800a474:	4293      	cmp	r3, r2
 800a476:	d00b      	beq.n	800a490 <TIM_Base_SetConfig+0x40>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	4a3c      	ldr	r2, [pc, #240]	; (800a56c <TIM_Base_SetConfig+0x11c>)
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d007      	beq.n	800a490 <TIM_Base_SetConfig+0x40>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	4a3b      	ldr	r2, [pc, #236]	; (800a570 <TIM_Base_SetConfig+0x120>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d003      	beq.n	800a490 <TIM_Base_SetConfig+0x40>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	4a3a      	ldr	r2, [pc, #232]	; (800a574 <TIM_Base_SetConfig+0x124>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d108      	bne.n	800a4a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a496:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	685b      	ldr	r3, [r3, #4]
 800a49c:	68fa      	ldr	r2, [r7, #12]
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	4a2f      	ldr	r2, [pc, #188]	; (800a564 <TIM_Base_SetConfig+0x114>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d01f      	beq.n	800a4ea <TIM_Base_SetConfig+0x9a>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4b0:	d01b      	beq.n	800a4ea <TIM_Base_SetConfig+0x9a>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	4a2c      	ldr	r2, [pc, #176]	; (800a568 <TIM_Base_SetConfig+0x118>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d017      	beq.n	800a4ea <TIM_Base_SetConfig+0x9a>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	4a2b      	ldr	r2, [pc, #172]	; (800a56c <TIM_Base_SetConfig+0x11c>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d013      	beq.n	800a4ea <TIM_Base_SetConfig+0x9a>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	4a2a      	ldr	r2, [pc, #168]	; (800a570 <TIM_Base_SetConfig+0x120>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d00f      	beq.n	800a4ea <TIM_Base_SetConfig+0x9a>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	4a29      	ldr	r2, [pc, #164]	; (800a574 <TIM_Base_SetConfig+0x124>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d00b      	beq.n	800a4ea <TIM_Base_SetConfig+0x9a>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	4a28      	ldr	r2, [pc, #160]	; (800a578 <TIM_Base_SetConfig+0x128>)
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d007      	beq.n	800a4ea <TIM_Base_SetConfig+0x9a>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	4a27      	ldr	r2, [pc, #156]	; (800a57c <TIM_Base_SetConfig+0x12c>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d003      	beq.n	800a4ea <TIM_Base_SetConfig+0x9a>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	4a26      	ldr	r2, [pc, #152]	; (800a580 <TIM_Base_SetConfig+0x130>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d108      	bne.n	800a4fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	68db      	ldr	r3, [r3, #12]
 800a4f6:	68fa      	ldr	r2, [r7, #12]
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	695b      	ldr	r3, [r3, #20]
 800a506:	4313      	orrs	r3, r2
 800a508:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	68fa      	ldr	r2, [r7, #12]
 800a50e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	689a      	ldr	r2, [r3, #8]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	681a      	ldr	r2, [r3, #0]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	4a10      	ldr	r2, [pc, #64]	; (800a564 <TIM_Base_SetConfig+0x114>)
 800a524:	4293      	cmp	r3, r2
 800a526:	d00f      	beq.n	800a548 <TIM_Base_SetConfig+0xf8>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	4a12      	ldr	r2, [pc, #72]	; (800a574 <TIM_Base_SetConfig+0x124>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d00b      	beq.n	800a548 <TIM_Base_SetConfig+0xf8>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	4a11      	ldr	r2, [pc, #68]	; (800a578 <TIM_Base_SetConfig+0x128>)
 800a534:	4293      	cmp	r3, r2
 800a536:	d007      	beq.n	800a548 <TIM_Base_SetConfig+0xf8>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	4a10      	ldr	r2, [pc, #64]	; (800a57c <TIM_Base_SetConfig+0x12c>)
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d003      	beq.n	800a548 <TIM_Base_SetConfig+0xf8>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	4a0f      	ldr	r2, [pc, #60]	; (800a580 <TIM_Base_SetConfig+0x130>)
 800a544:	4293      	cmp	r3, r2
 800a546:	d103      	bne.n	800a550 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	691a      	ldr	r2, [r3, #16]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2201      	movs	r2, #1
 800a554:	615a      	str	r2, [r3, #20]
}
 800a556:	bf00      	nop
 800a558:	3714      	adds	r7, #20
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr
 800a562:	bf00      	nop
 800a564:	40010000 	.word	0x40010000
 800a568:	40000400 	.word	0x40000400
 800a56c:	40000800 	.word	0x40000800
 800a570:	40000c00 	.word	0x40000c00
 800a574:	40010400 	.word	0x40010400
 800a578:	40014000 	.word	0x40014000
 800a57c:	40014400 	.word	0x40014400
 800a580:	40014800 	.word	0x40014800

0800a584 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a584:	b480      	push	{r7}
 800a586:	b087      	sub	sp, #28
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6a1b      	ldr	r3, [r3, #32]
 800a592:	f023 0201 	bic.w	r2, r3, #1
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6a1b      	ldr	r3, [r3, #32]
 800a59e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	699b      	ldr	r3, [r3, #24]
 800a5aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a5ac:	68fa      	ldr	r2, [r7, #12]
 800a5ae:	4b37      	ldr	r3, [pc, #220]	; (800a68c <TIM_OC1_SetConfig+0x108>)
 800a5b0:	4013      	ands	r3, r2
 800a5b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f023 0303 	bic.w	r3, r3, #3
 800a5ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	68fa      	ldr	r2, [r7, #12]
 800a5c2:	4313      	orrs	r3, r2
 800a5c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	f023 0302 	bic.w	r3, r3, #2
 800a5cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	689b      	ldr	r3, [r3, #8]
 800a5d2:	697a      	ldr	r2, [r7, #20]
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	4a2d      	ldr	r2, [pc, #180]	; (800a690 <TIM_OC1_SetConfig+0x10c>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d00f      	beq.n	800a600 <TIM_OC1_SetConfig+0x7c>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	4a2c      	ldr	r2, [pc, #176]	; (800a694 <TIM_OC1_SetConfig+0x110>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d00b      	beq.n	800a600 <TIM_OC1_SetConfig+0x7c>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	4a2b      	ldr	r2, [pc, #172]	; (800a698 <TIM_OC1_SetConfig+0x114>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d007      	beq.n	800a600 <TIM_OC1_SetConfig+0x7c>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	4a2a      	ldr	r2, [pc, #168]	; (800a69c <TIM_OC1_SetConfig+0x118>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d003      	beq.n	800a600 <TIM_OC1_SetConfig+0x7c>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	4a29      	ldr	r2, [pc, #164]	; (800a6a0 <TIM_OC1_SetConfig+0x11c>)
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d10c      	bne.n	800a61a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	f023 0308 	bic.w	r3, r3, #8
 800a606:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	68db      	ldr	r3, [r3, #12]
 800a60c:	697a      	ldr	r2, [r7, #20]
 800a60e:	4313      	orrs	r3, r2
 800a610:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	f023 0304 	bic.w	r3, r3, #4
 800a618:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	4a1c      	ldr	r2, [pc, #112]	; (800a690 <TIM_OC1_SetConfig+0x10c>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d00f      	beq.n	800a642 <TIM_OC1_SetConfig+0xbe>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	4a1b      	ldr	r2, [pc, #108]	; (800a694 <TIM_OC1_SetConfig+0x110>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d00b      	beq.n	800a642 <TIM_OC1_SetConfig+0xbe>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	4a1a      	ldr	r2, [pc, #104]	; (800a698 <TIM_OC1_SetConfig+0x114>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d007      	beq.n	800a642 <TIM_OC1_SetConfig+0xbe>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	4a19      	ldr	r2, [pc, #100]	; (800a69c <TIM_OC1_SetConfig+0x118>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d003      	beq.n	800a642 <TIM_OC1_SetConfig+0xbe>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	4a18      	ldr	r2, [pc, #96]	; (800a6a0 <TIM_OC1_SetConfig+0x11c>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d111      	bne.n	800a666 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a648:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a64a:	693b      	ldr	r3, [r7, #16]
 800a64c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a650:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	695b      	ldr	r3, [r3, #20]
 800a656:	693a      	ldr	r2, [r7, #16]
 800a658:	4313      	orrs	r3, r2
 800a65a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	699b      	ldr	r3, [r3, #24]
 800a660:	693a      	ldr	r2, [r7, #16]
 800a662:	4313      	orrs	r3, r2
 800a664:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	693a      	ldr	r2, [r7, #16]
 800a66a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	68fa      	ldr	r2, [r7, #12]
 800a670:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	685a      	ldr	r2, [r3, #4]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	697a      	ldr	r2, [r7, #20]
 800a67e:	621a      	str	r2, [r3, #32]
}
 800a680:	bf00      	nop
 800a682:	371c      	adds	r7, #28
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr
 800a68c:	fffeff8f 	.word	0xfffeff8f
 800a690:	40010000 	.word	0x40010000
 800a694:	40010400 	.word	0x40010400
 800a698:	40014000 	.word	0x40014000
 800a69c:	40014400 	.word	0x40014400
 800a6a0:	40014800 	.word	0x40014800

0800a6a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b087      	sub	sp, #28
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6a1b      	ldr	r3, [r3, #32]
 800a6b2:	f023 0210 	bic.w	r2, r3, #16
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6a1b      	ldr	r3, [r3, #32]
 800a6be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	699b      	ldr	r3, [r3, #24]
 800a6ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a6cc:	68fa      	ldr	r2, [r7, #12]
 800a6ce:	4b34      	ldr	r3, [pc, #208]	; (800a7a0 <TIM_OC2_SetConfig+0xfc>)
 800a6d0:	4013      	ands	r3, r2
 800a6d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	021b      	lsls	r3, r3, #8
 800a6e2:	68fa      	ldr	r2, [r7, #12]
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	f023 0320 	bic.w	r3, r3, #32
 800a6ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	011b      	lsls	r3, r3, #4
 800a6f6:	697a      	ldr	r2, [r7, #20]
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	4a29      	ldr	r2, [pc, #164]	; (800a7a4 <TIM_OC2_SetConfig+0x100>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d003      	beq.n	800a70c <TIM_OC2_SetConfig+0x68>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	4a28      	ldr	r2, [pc, #160]	; (800a7a8 <TIM_OC2_SetConfig+0x104>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d10d      	bne.n	800a728 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a712:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	68db      	ldr	r3, [r3, #12]
 800a718:	011b      	lsls	r3, r3, #4
 800a71a:	697a      	ldr	r2, [r7, #20]
 800a71c:	4313      	orrs	r3, r2
 800a71e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a726:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	4a1e      	ldr	r2, [pc, #120]	; (800a7a4 <TIM_OC2_SetConfig+0x100>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d00f      	beq.n	800a750 <TIM_OC2_SetConfig+0xac>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	4a1d      	ldr	r2, [pc, #116]	; (800a7a8 <TIM_OC2_SetConfig+0x104>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d00b      	beq.n	800a750 <TIM_OC2_SetConfig+0xac>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	4a1c      	ldr	r2, [pc, #112]	; (800a7ac <TIM_OC2_SetConfig+0x108>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d007      	beq.n	800a750 <TIM_OC2_SetConfig+0xac>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	4a1b      	ldr	r2, [pc, #108]	; (800a7b0 <TIM_OC2_SetConfig+0x10c>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d003      	beq.n	800a750 <TIM_OC2_SetConfig+0xac>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	4a1a      	ldr	r2, [pc, #104]	; (800a7b4 <TIM_OC2_SetConfig+0x110>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d113      	bne.n	800a778 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a756:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a75e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	695b      	ldr	r3, [r3, #20]
 800a764:	009b      	lsls	r3, r3, #2
 800a766:	693a      	ldr	r2, [r7, #16]
 800a768:	4313      	orrs	r3, r2
 800a76a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	699b      	ldr	r3, [r3, #24]
 800a770:	009b      	lsls	r3, r3, #2
 800a772:	693a      	ldr	r2, [r7, #16]
 800a774:	4313      	orrs	r3, r2
 800a776:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	693a      	ldr	r2, [r7, #16]
 800a77c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	68fa      	ldr	r2, [r7, #12]
 800a782:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	685a      	ldr	r2, [r3, #4]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	697a      	ldr	r2, [r7, #20]
 800a790:	621a      	str	r2, [r3, #32]
}
 800a792:	bf00      	nop
 800a794:	371c      	adds	r7, #28
 800a796:	46bd      	mov	sp, r7
 800a798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79c:	4770      	bx	lr
 800a79e:	bf00      	nop
 800a7a0:	feff8fff 	.word	0xfeff8fff
 800a7a4:	40010000 	.word	0x40010000
 800a7a8:	40010400 	.word	0x40010400
 800a7ac:	40014000 	.word	0x40014000
 800a7b0:	40014400 	.word	0x40014400
 800a7b4:	40014800 	.word	0x40014800

0800a7b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b087      	sub	sp, #28
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6a1b      	ldr	r3, [r3, #32]
 800a7c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6a1b      	ldr	r3, [r3, #32]
 800a7d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	685b      	ldr	r3, [r3, #4]
 800a7d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	69db      	ldr	r3, [r3, #28]
 800a7de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f023 0303 	bic.w	r3, r3, #3
 800a7ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	68fa      	ldr	r2, [r7, #12]
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	689b      	ldr	r3, [r3, #8]
 800a806:	021b      	lsls	r3, r3, #8
 800a808:	697a      	ldr	r2, [r7, #20]
 800a80a:	4313      	orrs	r3, r2
 800a80c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	4a27      	ldr	r2, [pc, #156]	; (800a8b0 <TIM_OC3_SetConfig+0xf8>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d003      	beq.n	800a81e <TIM_OC3_SetConfig+0x66>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	4a26      	ldr	r2, [pc, #152]	; (800a8b4 <TIM_OC3_SetConfig+0xfc>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d10d      	bne.n	800a83a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a824:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	68db      	ldr	r3, [r3, #12]
 800a82a:	021b      	lsls	r3, r3, #8
 800a82c:	697a      	ldr	r2, [r7, #20]
 800a82e:	4313      	orrs	r3, r2
 800a830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	4a1c      	ldr	r2, [pc, #112]	; (800a8b0 <TIM_OC3_SetConfig+0xf8>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d00f      	beq.n	800a862 <TIM_OC3_SetConfig+0xaa>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	4a1b      	ldr	r2, [pc, #108]	; (800a8b4 <TIM_OC3_SetConfig+0xfc>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d00b      	beq.n	800a862 <TIM_OC3_SetConfig+0xaa>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	4a1a      	ldr	r2, [pc, #104]	; (800a8b8 <TIM_OC3_SetConfig+0x100>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d007      	beq.n	800a862 <TIM_OC3_SetConfig+0xaa>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	4a19      	ldr	r2, [pc, #100]	; (800a8bc <TIM_OC3_SetConfig+0x104>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d003      	beq.n	800a862 <TIM_OC3_SetConfig+0xaa>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	4a18      	ldr	r2, [pc, #96]	; (800a8c0 <TIM_OC3_SetConfig+0x108>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d113      	bne.n	800a88a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	695b      	ldr	r3, [r3, #20]
 800a876:	011b      	lsls	r3, r3, #4
 800a878:	693a      	ldr	r2, [r7, #16]
 800a87a:	4313      	orrs	r3, r2
 800a87c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	699b      	ldr	r3, [r3, #24]
 800a882:	011b      	lsls	r3, r3, #4
 800a884:	693a      	ldr	r2, [r7, #16]
 800a886:	4313      	orrs	r3, r2
 800a888:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	693a      	ldr	r2, [r7, #16]
 800a88e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	68fa      	ldr	r2, [r7, #12]
 800a894:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	685a      	ldr	r2, [r3, #4]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	697a      	ldr	r2, [r7, #20]
 800a8a2:	621a      	str	r2, [r3, #32]
}
 800a8a4:	bf00      	nop
 800a8a6:	371c      	adds	r7, #28
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr
 800a8b0:	40010000 	.word	0x40010000
 800a8b4:	40010400 	.word	0x40010400
 800a8b8:	40014000 	.word	0x40014000
 800a8bc:	40014400 	.word	0x40014400
 800a8c0:	40014800 	.word	0x40014800

0800a8c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b087      	sub	sp, #28
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6a1b      	ldr	r3, [r3, #32]
 800a8d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6a1b      	ldr	r3, [r3, #32]
 800a8de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	69db      	ldr	r3, [r3, #28]
 800a8ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a8fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	021b      	lsls	r3, r3, #8
 800a902:	68fa      	ldr	r2, [r7, #12]
 800a904:	4313      	orrs	r3, r2
 800a906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a90e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	689b      	ldr	r3, [r3, #8]
 800a914:	031b      	lsls	r3, r3, #12
 800a916:	693a      	ldr	r2, [r7, #16]
 800a918:	4313      	orrs	r3, r2
 800a91a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	4a18      	ldr	r2, [pc, #96]	; (800a980 <TIM_OC4_SetConfig+0xbc>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d00f      	beq.n	800a944 <TIM_OC4_SetConfig+0x80>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	4a17      	ldr	r2, [pc, #92]	; (800a984 <TIM_OC4_SetConfig+0xc0>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d00b      	beq.n	800a944 <TIM_OC4_SetConfig+0x80>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	4a16      	ldr	r2, [pc, #88]	; (800a988 <TIM_OC4_SetConfig+0xc4>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d007      	beq.n	800a944 <TIM_OC4_SetConfig+0x80>
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	4a15      	ldr	r2, [pc, #84]	; (800a98c <TIM_OC4_SetConfig+0xc8>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d003      	beq.n	800a944 <TIM_OC4_SetConfig+0x80>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	4a14      	ldr	r2, [pc, #80]	; (800a990 <TIM_OC4_SetConfig+0xcc>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d109      	bne.n	800a958 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a94a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	695b      	ldr	r3, [r3, #20]
 800a950:	019b      	lsls	r3, r3, #6
 800a952:	697a      	ldr	r2, [r7, #20]
 800a954:	4313      	orrs	r3, r2
 800a956:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	697a      	ldr	r2, [r7, #20]
 800a95c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	68fa      	ldr	r2, [r7, #12]
 800a962:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	685a      	ldr	r2, [r3, #4]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	693a      	ldr	r2, [r7, #16]
 800a970:	621a      	str	r2, [r3, #32]
}
 800a972:	bf00      	nop
 800a974:	371c      	adds	r7, #28
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr
 800a97e:	bf00      	nop
 800a980:	40010000 	.word	0x40010000
 800a984:	40010400 	.word	0x40010400
 800a988:	40014000 	.word	0x40014000
 800a98c:	40014400 	.word	0x40014400
 800a990:	40014800 	.word	0x40014800

0800a994 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a994:	b480      	push	{r7}
 800a996:	b087      	sub	sp, #28
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6a1b      	ldr	r3, [r3, #32]
 800a9a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6a1b      	ldr	r3, [r3, #32]
 800a9ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	68fa      	ldr	r2, [r7, #12]
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a9d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	689b      	ldr	r3, [r3, #8]
 800a9da:	041b      	lsls	r3, r3, #16
 800a9dc:	693a      	ldr	r2, [r7, #16]
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	4a17      	ldr	r2, [pc, #92]	; (800aa44 <TIM_OC5_SetConfig+0xb0>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d00f      	beq.n	800aa0a <TIM_OC5_SetConfig+0x76>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	4a16      	ldr	r2, [pc, #88]	; (800aa48 <TIM_OC5_SetConfig+0xb4>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d00b      	beq.n	800aa0a <TIM_OC5_SetConfig+0x76>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	4a15      	ldr	r2, [pc, #84]	; (800aa4c <TIM_OC5_SetConfig+0xb8>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d007      	beq.n	800aa0a <TIM_OC5_SetConfig+0x76>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	4a14      	ldr	r2, [pc, #80]	; (800aa50 <TIM_OC5_SetConfig+0xbc>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d003      	beq.n	800aa0a <TIM_OC5_SetConfig+0x76>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	4a13      	ldr	r2, [pc, #76]	; (800aa54 <TIM_OC5_SetConfig+0xc0>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d109      	bne.n	800aa1e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	695b      	ldr	r3, [r3, #20]
 800aa16:	021b      	lsls	r3, r3, #8
 800aa18:	697a      	ldr	r2, [r7, #20]
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	697a      	ldr	r2, [r7, #20]
 800aa22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	68fa      	ldr	r2, [r7, #12]
 800aa28:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	685a      	ldr	r2, [r3, #4]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	693a      	ldr	r2, [r7, #16]
 800aa36:	621a      	str	r2, [r3, #32]
}
 800aa38:	bf00      	nop
 800aa3a:	371c      	adds	r7, #28
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr
 800aa44:	40010000 	.word	0x40010000
 800aa48:	40010400 	.word	0x40010400
 800aa4c:	40014000 	.word	0x40014000
 800aa50:	40014400 	.word	0x40014400
 800aa54:	40014800 	.word	0x40014800

0800aa58 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b087      	sub	sp, #28
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6a1b      	ldr	r3, [r3, #32]
 800aa66:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6a1b      	ldr	r3, [r3, #32]
 800aa72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	021b      	lsls	r3, r3, #8
 800aa8e:	68fa      	ldr	r2, [r7, #12]
 800aa90:	4313      	orrs	r3, r2
 800aa92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aa9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	689b      	ldr	r3, [r3, #8]
 800aaa0:	051b      	lsls	r3, r3, #20
 800aaa2:	693a      	ldr	r2, [r7, #16]
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	4a18      	ldr	r2, [pc, #96]	; (800ab0c <TIM_OC6_SetConfig+0xb4>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d00f      	beq.n	800aad0 <TIM_OC6_SetConfig+0x78>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	4a17      	ldr	r2, [pc, #92]	; (800ab10 <TIM_OC6_SetConfig+0xb8>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d00b      	beq.n	800aad0 <TIM_OC6_SetConfig+0x78>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	4a16      	ldr	r2, [pc, #88]	; (800ab14 <TIM_OC6_SetConfig+0xbc>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d007      	beq.n	800aad0 <TIM_OC6_SetConfig+0x78>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	4a15      	ldr	r2, [pc, #84]	; (800ab18 <TIM_OC6_SetConfig+0xc0>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d003      	beq.n	800aad0 <TIM_OC6_SetConfig+0x78>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	4a14      	ldr	r2, [pc, #80]	; (800ab1c <TIM_OC6_SetConfig+0xc4>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d109      	bne.n	800aae4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800aad6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	695b      	ldr	r3, [r3, #20]
 800aadc:	029b      	lsls	r3, r3, #10
 800aade:	697a      	ldr	r2, [r7, #20]
 800aae0:	4313      	orrs	r3, r2
 800aae2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	697a      	ldr	r2, [r7, #20]
 800aae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	68fa      	ldr	r2, [r7, #12]
 800aaee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	685a      	ldr	r2, [r3, #4]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	693a      	ldr	r2, [r7, #16]
 800aafc:	621a      	str	r2, [r3, #32]
}
 800aafe:	bf00      	nop
 800ab00:	371c      	adds	r7, #28
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr
 800ab0a:	bf00      	nop
 800ab0c:	40010000 	.word	0x40010000
 800ab10:	40010400 	.word	0x40010400
 800ab14:	40014000 	.word	0x40014000
 800ab18:	40014400 	.word	0x40014400
 800ab1c:	40014800 	.word	0x40014800

0800ab20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b087      	sub	sp, #28
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	60f8      	str	r0, [r7, #12]
 800ab28:	60b9      	str	r1, [r7, #8]
 800ab2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	f003 031f 	and.w	r3, r3, #31
 800ab32:	2201      	movs	r2, #1
 800ab34:	fa02 f303 	lsl.w	r3, r2, r3
 800ab38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	6a1a      	ldr	r2, [r3, #32]
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	43db      	mvns	r3, r3
 800ab42:	401a      	ands	r2, r3
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	6a1a      	ldr	r2, [r3, #32]
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	f003 031f 	and.w	r3, r3, #31
 800ab52:	6879      	ldr	r1, [r7, #4]
 800ab54:	fa01 f303 	lsl.w	r3, r1, r3
 800ab58:	431a      	orrs	r2, r3
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	621a      	str	r2, [r3, #32]
}
 800ab5e:	bf00      	nop
 800ab60:	371c      	adds	r7, #28
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr
	...

0800ab6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b085      	sub	sp, #20
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d101      	bne.n	800ab84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ab80:	2302      	movs	r3, #2
 800ab82:	e068      	b.n	800ac56 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2201      	movs	r2, #1
 800ab88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2202      	movs	r2, #2
 800ab90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	689b      	ldr	r3, [r3, #8]
 800aba2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4a2e      	ldr	r2, [pc, #184]	; (800ac64 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d004      	beq.n	800abb8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	4a2d      	ldr	r2, [pc, #180]	; (800ac68 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d108      	bne.n	800abca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800abbe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	68fa      	ldr	r2, [r7, #12]
 800abc6:	4313      	orrs	r3, r2
 800abc8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abd0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	68fa      	ldr	r2, [r7, #12]
 800abd8:	4313      	orrs	r3, r2
 800abda:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	68fa      	ldr	r2, [r7, #12]
 800abe2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	4a1e      	ldr	r2, [pc, #120]	; (800ac64 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d01d      	beq.n	800ac2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abf6:	d018      	beq.n	800ac2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	4a1b      	ldr	r2, [pc, #108]	; (800ac6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d013      	beq.n	800ac2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4a1a      	ldr	r2, [pc, #104]	; (800ac70 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d00e      	beq.n	800ac2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	4a18      	ldr	r2, [pc, #96]	; (800ac74 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d009      	beq.n	800ac2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4a13      	ldr	r2, [pc, #76]	; (800ac68 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d004      	beq.n	800ac2a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4a14      	ldr	r2, [pc, #80]	; (800ac78 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d10c      	bne.n	800ac44 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	689b      	ldr	r3, [r3, #8]
 800ac36:	68ba      	ldr	r2, [r7, #8]
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	68ba      	ldr	r2, [r7, #8]
 800ac42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2201      	movs	r2, #1
 800ac48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac54:	2300      	movs	r3, #0
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3714      	adds	r7, #20
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr
 800ac62:	bf00      	nop
 800ac64:	40010000 	.word	0x40010000
 800ac68:	40010400 	.word	0x40010400
 800ac6c:	40000400 	.word	0x40000400
 800ac70:	40000800 	.word	0x40000800
 800ac74:	40000c00 	.word	0x40000c00
 800ac78:	40001800 	.word	0x40001800

0800ac7c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b085      	sub	sp, #20
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ac86:	2300      	movs	r3, #0
 800ac88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac90:	2b01      	cmp	r3, #1
 800ac92:	d101      	bne.n	800ac98 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ac94:	2302      	movs	r3, #2
 800ac96:	e065      	b.n	800ad64 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	68db      	ldr	r3, [r3, #12]
 800acaa:	4313      	orrs	r3, r2
 800acac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	689b      	ldr	r3, [r3, #8]
 800acb8:	4313      	orrs	r3, r2
 800acba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	4313      	orrs	r3, r2
 800acc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4313      	orrs	r3, r2
 800acd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	691b      	ldr	r3, [r3, #16]
 800ace2:	4313      	orrs	r3, r2
 800ace4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	695b      	ldr	r3, [r3, #20]
 800acf0:	4313      	orrs	r3, r2
 800acf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acfe:	4313      	orrs	r3, r2
 800ad00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	699b      	ldr	r3, [r3, #24]
 800ad0c:	041b      	lsls	r3, r3, #16
 800ad0e:	4313      	orrs	r3, r2
 800ad10:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	4a16      	ldr	r2, [pc, #88]	; (800ad70 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d004      	beq.n	800ad26 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4a14      	ldr	r2, [pc, #80]	; (800ad74 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d115      	bne.n	800ad52 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad30:	051b      	lsls	r3, r3, #20
 800ad32:	4313      	orrs	r3, r2
 800ad34:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	69db      	ldr	r3, [r3, #28]
 800ad40:	4313      	orrs	r3, r2
 800ad42:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	6a1b      	ldr	r3, [r3, #32]
 800ad4e:	4313      	orrs	r3, r2
 800ad50:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	68fa      	ldr	r2, [r7, #12]
 800ad58:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad62:	2300      	movs	r3, #0
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3714      	adds	r7, #20
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr
 800ad70:	40010000 	.word	0x40010000
 800ad74:	40010400 	.word	0x40010400

0800ad78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b082      	sub	sp, #8
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d101      	bne.n	800ad8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad86:	2301      	movs	r3, #1
 800ad88:	e042      	b.n	800ae10 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d106      	bne.n	800ada2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2200      	movs	r2, #0
 800ad98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f7f7 fc53 	bl	8002648 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2224      	movs	r2, #36	; 0x24
 800ada6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f022 0201 	bic.w	r2, r2, #1
 800adb8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 f82c 	bl	800ae18 <UART_SetConfig>
 800adc0:	4603      	mov	r3, r0
 800adc2:	2b01      	cmp	r3, #1
 800adc4:	d101      	bne.n	800adca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800adc6:	2301      	movs	r3, #1
 800adc8:	e022      	b.n	800ae10 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adce:	2b00      	cmp	r3, #0
 800add0:	d002      	beq.n	800add8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 fd80 	bl	800b8d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	685a      	ldr	r2, [r3, #4]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ade6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	689a      	ldr	r2, [r3, #8]
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800adf6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	681a      	ldr	r2, [r3, #0]
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f042 0201 	orr.w	r2, r2, #1
 800ae06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f000 fe07 	bl	800ba1c <UART_CheckIdleState>
 800ae0e:	4603      	mov	r3, r0
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3708      	adds	r7, #8
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}

0800ae18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae18:	b5b0      	push	{r4, r5, r7, lr}
 800ae1a:	b08e      	sub	sp, #56	; 0x38
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ae20:	2300      	movs	r3, #0
 800ae22:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	689a      	ldr	r2, [r3, #8]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	691b      	ldr	r3, [r3, #16]
 800ae2e:	431a      	orrs	r2, r3
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	695b      	ldr	r3, [r3, #20]
 800ae34:	431a      	orrs	r2, r3
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	69db      	ldr	r3, [r3, #28]
 800ae3a:	4313      	orrs	r3, r2
 800ae3c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	4bbf      	ldr	r3, [pc, #764]	; (800b144 <UART_SetConfig+0x32c>)
 800ae46:	4013      	ands	r3, r2
 800ae48:	687a      	ldr	r2, [r7, #4]
 800ae4a:	6812      	ldr	r2, [r2, #0]
 800ae4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ae4e:	430b      	orrs	r3, r1
 800ae50:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	68da      	ldr	r2, [r3, #12]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	430a      	orrs	r2, r1
 800ae66:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	699b      	ldr	r3, [r3, #24]
 800ae6c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	4ab5      	ldr	r2, [pc, #724]	; (800b148 <UART_SetConfig+0x330>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d004      	beq.n	800ae82 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6a1b      	ldr	r3, [r3, #32]
 800ae7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	689a      	ldr	r2, [r3, #8]
 800ae88:	4bb0      	ldr	r3, [pc, #704]	; (800b14c <UART_SetConfig+0x334>)
 800ae8a:	4013      	ands	r3, r2
 800ae8c:	687a      	ldr	r2, [r7, #4]
 800ae8e:	6812      	ldr	r2, [r2, #0]
 800ae90:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ae92:	430b      	orrs	r3, r1
 800ae94:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae9c:	f023 010f 	bic.w	r1, r3, #15
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	430a      	orrs	r2, r1
 800aeaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4aa7      	ldr	r2, [pc, #668]	; (800b150 <UART_SetConfig+0x338>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d176      	bne.n	800afa4 <UART_SetConfig+0x18c>
 800aeb6:	4ba7      	ldr	r3, [pc, #668]	; (800b154 <UART_SetConfig+0x33c>)
 800aeb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aebe:	2b28      	cmp	r3, #40	; 0x28
 800aec0:	d86c      	bhi.n	800af9c <UART_SetConfig+0x184>
 800aec2:	a201      	add	r2, pc, #4	; (adr r2, 800aec8 <UART_SetConfig+0xb0>)
 800aec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aec8:	0800af6d 	.word	0x0800af6d
 800aecc:	0800af9d 	.word	0x0800af9d
 800aed0:	0800af9d 	.word	0x0800af9d
 800aed4:	0800af9d 	.word	0x0800af9d
 800aed8:	0800af9d 	.word	0x0800af9d
 800aedc:	0800af9d 	.word	0x0800af9d
 800aee0:	0800af9d 	.word	0x0800af9d
 800aee4:	0800af9d 	.word	0x0800af9d
 800aee8:	0800af75 	.word	0x0800af75
 800aeec:	0800af9d 	.word	0x0800af9d
 800aef0:	0800af9d 	.word	0x0800af9d
 800aef4:	0800af9d 	.word	0x0800af9d
 800aef8:	0800af9d 	.word	0x0800af9d
 800aefc:	0800af9d 	.word	0x0800af9d
 800af00:	0800af9d 	.word	0x0800af9d
 800af04:	0800af9d 	.word	0x0800af9d
 800af08:	0800af7d 	.word	0x0800af7d
 800af0c:	0800af9d 	.word	0x0800af9d
 800af10:	0800af9d 	.word	0x0800af9d
 800af14:	0800af9d 	.word	0x0800af9d
 800af18:	0800af9d 	.word	0x0800af9d
 800af1c:	0800af9d 	.word	0x0800af9d
 800af20:	0800af9d 	.word	0x0800af9d
 800af24:	0800af9d 	.word	0x0800af9d
 800af28:	0800af85 	.word	0x0800af85
 800af2c:	0800af9d 	.word	0x0800af9d
 800af30:	0800af9d 	.word	0x0800af9d
 800af34:	0800af9d 	.word	0x0800af9d
 800af38:	0800af9d 	.word	0x0800af9d
 800af3c:	0800af9d 	.word	0x0800af9d
 800af40:	0800af9d 	.word	0x0800af9d
 800af44:	0800af9d 	.word	0x0800af9d
 800af48:	0800af8d 	.word	0x0800af8d
 800af4c:	0800af9d 	.word	0x0800af9d
 800af50:	0800af9d 	.word	0x0800af9d
 800af54:	0800af9d 	.word	0x0800af9d
 800af58:	0800af9d 	.word	0x0800af9d
 800af5c:	0800af9d 	.word	0x0800af9d
 800af60:	0800af9d 	.word	0x0800af9d
 800af64:	0800af9d 	.word	0x0800af9d
 800af68:	0800af95 	.word	0x0800af95
 800af6c:	2301      	movs	r3, #1
 800af6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af72:	e222      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800af74:	2304      	movs	r3, #4
 800af76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af7a:	e21e      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800af7c:	2308      	movs	r3, #8
 800af7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af82:	e21a      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800af84:	2310      	movs	r3, #16
 800af86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af8a:	e216      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800af8c:	2320      	movs	r3, #32
 800af8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af92:	e212      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800af94:	2340      	movs	r3, #64	; 0x40
 800af96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af9a:	e20e      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800af9c:	2380      	movs	r3, #128	; 0x80
 800af9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afa2:	e20a      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4a6b      	ldr	r2, [pc, #428]	; (800b158 <UART_SetConfig+0x340>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d130      	bne.n	800b010 <UART_SetConfig+0x1f8>
 800afae:	4b69      	ldr	r3, [pc, #420]	; (800b154 <UART_SetConfig+0x33c>)
 800afb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afb2:	f003 0307 	and.w	r3, r3, #7
 800afb6:	2b05      	cmp	r3, #5
 800afb8:	d826      	bhi.n	800b008 <UART_SetConfig+0x1f0>
 800afba:	a201      	add	r2, pc, #4	; (adr r2, 800afc0 <UART_SetConfig+0x1a8>)
 800afbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afc0:	0800afd9 	.word	0x0800afd9
 800afc4:	0800afe1 	.word	0x0800afe1
 800afc8:	0800afe9 	.word	0x0800afe9
 800afcc:	0800aff1 	.word	0x0800aff1
 800afd0:	0800aff9 	.word	0x0800aff9
 800afd4:	0800b001 	.word	0x0800b001
 800afd8:	2300      	movs	r3, #0
 800afda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afde:	e1ec      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800afe0:	2304      	movs	r3, #4
 800afe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afe6:	e1e8      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800afe8:	2308      	movs	r3, #8
 800afea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afee:	e1e4      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800aff0:	2310      	movs	r3, #16
 800aff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aff6:	e1e0      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800aff8:	2320      	movs	r3, #32
 800affa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800affe:	e1dc      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b000:	2340      	movs	r3, #64	; 0x40
 800b002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b006:	e1d8      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b008:	2380      	movs	r3, #128	; 0x80
 800b00a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b00e:	e1d4      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	4a51      	ldr	r2, [pc, #324]	; (800b15c <UART_SetConfig+0x344>)
 800b016:	4293      	cmp	r3, r2
 800b018:	d130      	bne.n	800b07c <UART_SetConfig+0x264>
 800b01a:	4b4e      	ldr	r3, [pc, #312]	; (800b154 <UART_SetConfig+0x33c>)
 800b01c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b01e:	f003 0307 	and.w	r3, r3, #7
 800b022:	2b05      	cmp	r3, #5
 800b024:	d826      	bhi.n	800b074 <UART_SetConfig+0x25c>
 800b026:	a201      	add	r2, pc, #4	; (adr r2, 800b02c <UART_SetConfig+0x214>)
 800b028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b02c:	0800b045 	.word	0x0800b045
 800b030:	0800b04d 	.word	0x0800b04d
 800b034:	0800b055 	.word	0x0800b055
 800b038:	0800b05d 	.word	0x0800b05d
 800b03c:	0800b065 	.word	0x0800b065
 800b040:	0800b06d 	.word	0x0800b06d
 800b044:	2300      	movs	r3, #0
 800b046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b04a:	e1b6      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b04c:	2304      	movs	r3, #4
 800b04e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b052:	e1b2      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b054:	2308      	movs	r3, #8
 800b056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b05a:	e1ae      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b05c:	2310      	movs	r3, #16
 800b05e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b062:	e1aa      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b064:	2320      	movs	r3, #32
 800b066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b06a:	e1a6      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b06c:	2340      	movs	r3, #64	; 0x40
 800b06e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b072:	e1a2      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b074:	2380      	movs	r3, #128	; 0x80
 800b076:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b07a:	e19e      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4a37      	ldr	r2, [pc, #220]	; (800b160 <UART_SetConfig+0x348>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d130      	bne.n	800b0e8 <UART_SetConfig+0x2d0>
 800b086:	4b33      	ldr	r3, [pc, #204]	; (800b154 <UART_SetConfig+0x33c>)
 800b088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b08a:	f003 0307 	and.w	r3, r3, #7
 800b08e:	2b05      	cmp	r3, #5
 800b090:	d826      	bhi.n	800b0e0 <UART_SetConfig+0x2c8>
 800b092:	a201      	add	r2, pc, #4	; (adr r2, 800b098 <UART_SetConfig+0x280>)
 800b094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b098:	0800b0b1 	.word	0x0800b0b1
 800b09c:	0800b0b9 	.word	0x0800b0b9
 800b0a0:	0800b0c1 	.word	0x0800b0c1
 800b0a4:	0800b0c9 	.word	0x0800b0c9
 800b0a8:	0800b0d1 	.word	0x0800b0d1
 800b0ac:	0800b0d9 	.word	0x0800b0d9
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0b6:	e180      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b0b8:	2304      	movs	r3, #4
 800b0ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0be:	e17c      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b0c0:	2308      	movs	r3, #8
 800b0c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0c6:	e178      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b0c8:	2310      	movs	r3, #16
 800b0ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0ce:	e174      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b0d0:	2320      	movs	r3, #32
 800b0d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0d6:	e170      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b0d8:	2340      	movs	r3, #64	; 0x40
 800b0da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0de:	e16c      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b0e0:	2380      	movs	r3, #128	; 0x80
 800b0e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0e6:	e168      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	4a1d      	ldr	r2, [pc, #116]	; (800b164 <UART_SetConfig+0x34c>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d142      	bne.n	800b178 <UART_SetConfig+0x360>
 800b0f2:	4b18      	ldr	r3, [pc, #96]	; (800b154 <UART_SetConfig+0x33c>)
 800b0f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0f6:	f003 0307 	and.w	r3, r3, #7
 800b0fa:	2b05      	cmp	r3, #5
 800b0fc:	d838      	bhi.n	800b170 <UART_SetConfig+0x358>
 800b0fe:	a201      	add	r2, pc, #4	; (adr r2, 800b104 <UART_SetConfig+0x2ec>)
 800b100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b104:	0800b11d 	.word	0x0800b11d
 800b108:	0800b125 	.word	0x0800b125
 800b10c:	0800b12d 	.word	0x0800b12d
 800b110:	0800b135 	.word	0x0800b135
 800b114:	0800b13d 	.word	0x0800b13d
 800b118:	0800b169 	.word	0x0800b169
 800b11c:	2300      	movs	r3, #0
 800b11e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b122:	e14a      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b124:	2304      	movs	r3, #4
 800b126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b12a:	e146      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b12c:	2308      	movs	r3, #8
 800b12e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b132:	e142      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b134:	2310      	movs	r3, #16
 800b136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b13a:	e13e      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b13c:	2320      	movs	r3, #32
 800b13e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b142:	e13a      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b144:	cfff69f3 	.word	0xcfff69f3
 800b148:	58000c00 	.word	0x58000c00
 800b14c:	11fff4ff 	.word	0x11fff4ff
 800b150:	40011000 	.word	0x40011000
 800b154:	58024400 	.word	0x58024400
 800b158:	40004400 	.word	0x40004400
 800b15c:	40004800 	.word	0x40004800
 800b160:	40004c00 	.word	0x40004c00
 800b164:	40005000 	.word	0x40005000
 800b168:	2340      	movs	r3, #64	; 0x40
 800b16a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b16e:	e124      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b170:	2380      	movs	r3, #128	; 0x80
 800b172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b176:	e120      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	4acc      	ldr	r2, [pc, #816]	; (800b4b0 <UART_SetConfig+0x698>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	d176      	bne.n	800b270 <UART_SetConfig+0x458>
 800b182:	4bcc      	ldr	r3, [pc, #816]	; (800b4b4 <UART_SetConfig+0x69c>)
 800b184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b186:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b18a:	2b28      	cmp	r3, #40	; 0x28
 800b18c:	d86c      	bhi.n	800b268 <UART_SetConfig+0x450>
 800b18e:	a201      	add	r2, pc, #4	; (adr r2, 800b194 <UART_SetConfig+0x37c>)
 800b190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b194:	0800b239 	.word	0x0800b239
 800b198:	0800b269 	.word	0x0800b269
 800b19c:	0800b269 	.word	0x0800b269
 800b1a0:	0800b269 	.word	0x0800b269
 800b1a4:	0800b269 	.word	0x0800b269
 800b1a8:	0800b269 	.word	0x0800b269
 800b1ac:	0800b269 	.word	0x0800b269
 800b1b0:	0800b269 	.word	0x0800b269
 800b1b4:	0800b241 	.word	0x0800b241
 800b1b8:	0800b269 	.word	0x0800b269
 800b1bc:	0800b269 	.word	0x0800b269
 800b1c0:	0800b269 	.word	0x0800b269
 800b1c4:	0800b269 	.word	0x0800b269
 800b1c8:	0800b269 	.word	0x0800b269
 800b1cc:	0800b269 	.word	0x0800b269
 800b1d0:	0800b269 	.word	0x0800b269
 800b1d4:	0800b249 	.word	0x0800b249
 800b1d8:	0800b269 	.word	0x0800b269
 800b1dc:	0800b269 	.word	0x0800b269
 800b1e0:	0800b269 	.word	0x0800b269
 800b1e4:	0800b269 	.word	0x0800b269
 800b1e8:	0800b269 	.word	0x0800b269
 800b1ec:	0800b269 	.word	0x0800b269
 800b1f0:	0800b269 	.word	0x0800b269
 800b1f4:	0800b251 	.word	0x0800b251
 800b1f8:	0800b269 	.word	0x0800b269
 800b1fc:	0800b269 	.word	0x0800b269
 800b200:	0800b269 	.word	0x0800b269
 800b204:	0800b269 	.word	0x0800b269
 800b208:	0800b269 	.word	0x0800b269
 800b20c:	0800b269 	.word	0x0800b269
 800b210:	0800b269 	.word	0x0800b269
 800b214:	0800b259 	.word	0x0800b259
 800b218:	0800b269 	.word	0x0800b269
 800b21c:	0800b269 	.word	0x0800b269
 800b220:	0800b269 	.word	0x0800b269
 800b224:	0800b269 	.word	0x0800b269
 800b228:	0800b269 	.word	0x0800b269
 800b22c:	0800b269 	.word	0x0800b269
 800b230:	0800b269 	.word	0x0800b269
 800b234:	0800b261 	.word	0x0800b261
 800b238:	2301      	movs	r3, #1
 800b23a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b23e:	e0bc      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b240:	2304      	movs	r3, #4
 800b242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b246:	e0b8      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b248:	2308      	movs	r3, #8
 800b24a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b24e:	e0b4      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b250:	2310      	movs	r3, #16
 800b252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b256:	e0b0      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b258:	2320      	movs	r3, #32
 800b25a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b25e:	e0ac      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b260:	2340      	movs	r3, #64	; 0x40
 800b262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b266:	e0a8      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b268:	2380      	movs	r3, #128	; 0x80
 800b26a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b26e:	e0a4      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	4a90      	ldr	r2, [pc, #576]	; (800b4b8 <UART_SetConfig+0x6a0>)
 800b276:	4293      	cmp	r3, r2
 800b278:	d130      	bne.n	800b2dc <UART_SetConfig+0x4c4>
 800b27a:	4b8e      	ldr	r3, [pc, #568]	; (800b4b4 <UART_SetConfig+0x69c>)
 800b27c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b27e:	f003 0307 	and.w	r3, r3, #7
 800b282:	2b05      	cmp	r3, #5
 800b284:	d826      	bhi.n	800b2d4 <UART_SetConfig+0x4bc>
 800b286:	a201      	add	r2, pc, #4	; (adr r2, 800b28c <UART_SetConfig+0x474>)
 800b288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b28c:	0800b2a5 	.word	0x0800b2a5
 800b290:	0800b2ad 	.word	0x0800b2ad
 800b294:	0800b2b5 	.word	0x0800b2b5
 800b298:	0800b2bd 	.word	0x0800b2bd
 800b29c:	0800b2c5 	.word	0x0800b2c5
 800b2a0:	0800b2cd 	.word	0x0800b2cd
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2aa:	e086      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b2ac:	2304      	movs	r3, #4
 800b2ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2b2:	e082      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b2b4:	2308      	movs	r3, #8
 800b2b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2ba:	e07e      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b2bc:	2310      	movs	r3, #16
 800b2be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2c2:	e07a      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b2c4:	2320      	movs	r3, #32
 800b2c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2ca:	e076      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b2cc:	2340      	movs	r3, #64	; 0x40
 800b2ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2d2:	e072      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b2d4:	2380      	movs	r3, #128	; 0x80
 800b2d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2da:	e06e      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	4a76      	ldr	r2, [pc, #472]	; (800b4bc <UART_SetConfig+0x6a4>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d130      	bne.n	800b348 <UART_SetConfig+0x530>
 800b2e6:	4b73      	ldr	r3, [pc, #460]	; (800b4b4 <UART_SetConfig+0x69c>)
 800b2e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2ea:	f003 0307 	and.w	r3, r3, #7
 800b2ee:	2b05      	cmp	r3, #5
 800b2f0:	d826      	bhi.n	800b340 <UART_SetConfig+0x528>
 800b2f2:	a201      	add	r2, pc, #4	; (adr r2, 800b2f8 <UART_SetConfig+0x4e0>)
 800b2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2f8:	0800b311 	.word	0x0800b311
 800b2fc:	0800b319 	.word	0x0800b319
 800b300:	0800b321 	.word	0x0800b321
 800b304:	0800b329 	.word	0x0800b329
 800b308:	0800b331 	.word	0x0800b331
 800b30c:	0800b339 	.word	0x0800b339
 800b310:	2300      	movs	r3, #0
 800b312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b316:	e050      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b318:	2304      	movs	r3, #4
 800b31a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b31e:	e04c      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b320:	2308      	movs	r3, #8
 800b322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b326:	e048      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b328:	2310      	movs	r3, #16
 800b32a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b32e:	e044      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b330:	2320      	movs	r3, #32
 800b332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b336:	e040      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b338:	2340      	movs	r3, #64	; 0x40
 800b33a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b33e:	e03c      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b340:	2380      	movs	r3, #128	; 0x80
 800b342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b346:	e038      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	4a5c      	ldr	r2, [pc, #368]	; (800b4c0 <UART_SetConfig+0x6a8>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d130      	bne.n	800b3b4 <UART_SetConfig+0x59c>
 800b352:	4b58      	ldr	r3, [pc, #352]	; (800b4b4 <UART_SetConfig+0x69c>)
 800b354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b356:	f003 0307 	and.w	r3, r3, #7
 800b35a:	2b05      	cmp	r3, #5
 800b35c:	d826      	bhi.n	800b3ac <UART_SetConfig+0x594>
 800b35e:	a201      	add	r2, pc, #4	; (adr r2, 800b364 <UART_SetConfig+0x54c>)
 800b360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b364:	0800b37d 	.word	0x0800b37d
 800b368:	0800b385 	.word	0x0800b385
 800b36c:	0800b38d 	.word	0x0800b38d
 800b370:	0800b395 	.word	0x0800b395
 800b374:	0800b39d 	.word	0x0800b39d
 800b378:	0800b3a5 	.word	0x0800b3a5
 800b37c:	2302      	movs	r3, #2
 800b37e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b382:	e01a      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b384:	2304      	movs	r3, #4
 800b386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b38a:	e016      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b38c:	2308      	movs	r3, #8
 800b38e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b392:	e012      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b394:	2310      	movs	r3, #16
 800b396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b39a:	e00e      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b39c:	2320      	movs	r3, #32
 800b39e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3a2:	e00a      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b3a4:	2340      	movs	r3, #64	; 0x40
 800b3a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3aa:	e006      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b3ac:	2380      	movs	r3, #128	; 0x80
 800b3ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3b2:	e002      	b.n	800b3ba <UART_SetConfig+0x5a2>
 800b3b4:	2380      	movs	r3, #128	; 0x80
 800b3b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4a40      	ldr	r2, [pc, #256]	; (800b4c0 <UART_SetConfig+0x6a8>)
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	f040 80ef 	bne.w	800b5a4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b3c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b3ca:	2b20      	cmp	r3, #32
 800b3cc:	dc46      	bgt.n	800b45c <UART_SetConfig+0x644>
 800b3ce:	2b02      	cmp	r3, #2
 800b3d0:	f2c0 8081 	blt.w	800b4d6 <UART_SetConfig+0x6be>
 800b3d4:	3b02      	subs	r3, #2
 800b3d6:	2b1e      	cmp	r3, #30
 800b3d8:	d87d      	bhi.n	800b4d6 <UART_SetConfig+0x6be>
 800b3da:	a201      	add	r2, pc, #4	; (adr r2, 800b3e0 <UART_SetConfig+0x5c8>)
 800b3dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3e0:	0800b463 	.word	0x0800b463
 800b3e4:	0800b4d7 	.word	0x0800b4d7
 800b3e8:	0800b46b 	.word	0x0800b46b
 800b3ec:	0800b4d7 	.word	0x0800b4d7
 800b3f0:	0800b4d7 	.word	0x0800b4d7
 800b3f4:	0800b4d7 	.word	0x0800b4d7
 800b3f8:	0800b47b 	.word	0x0800b47b
 800b3fc:	0800b4d7 	.word	0x0800b4d7
 800b400:	0800b4d7 	.word	0x0800b4d7
 800b404:	0800b4d7 	.word	0x0800b4d7
 800b408:	0800b4d7 	.word	0x0800b4d7
 800b40c:	0800b4d7 	.word	0x0800b4d7
 800b410:	0800b4d7 	.word	0x0800b4d7
 800b414:	0800b4d7 	.word	0x0800b4d7
 800b418:	0800b48b 	.word	0x0800b48b
 800b41c:	0800b4d7 	.word	0x0800b4d7
 800b420:	0800b4d7 	.word	0x0800b4d7
 800b424:	0800b4d7 	.word	0x0800b4d7
 800b428:	0800b4d7 	.word	0x0800b4d7
 800b42c:	0800b4d7 	.word	0x0800b4d7
 800b430:	0800b4d7 	.word	0x0800b4d7
 800b434:	0800b4d7 	.word	0x0800b4d7
 800b438:	0800b4d7 	.word	0x0800b4d7
 800b43c:	0800b4d7 	.word	0x0800b4d7
 800b440:	0800b4d7 	.word	0x0800b4d7
 800b444:	0800b4d7 	.word	0x0800b4d7
 800b448:	0800b4d7 	.word	0x0800b4d7
 800b44c:	0800b4d7 	.word	0x0800b4d7
 800b450:	0800b4d7 	.word	0x0800b4d7
 800b454:	0800b4d7 	.word	0x0800b4d7
 800b458:	0800b4c9 	.word	0x0800b4c9
 800b45c:	2b40      	cmp	r3, #64	; 0x40
 800b45e:	d036      	beq.n	800b4ce <UART_SetConfig+0x6b6>
 800b460:	e039      	b.n	800b4d6 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b462:	f7fd fd87 	bl	8008f74 <HAL_RCCEx_GetD3PCLK1Freq>
 800b466:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b468:	e03b      	b.n	800b4e2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b46a:	f107 0314 	add.w	r3, r7, #20
 800b46e:	4618      	mov	r0, r3
 800b470:	f7fd fd96 	bl	8008fa0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b474:	69bb      	ldr	r3, [r7, #24]
 800b476:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b478:	e033      	b.n	800b4e2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b47a:	f107 0308 	add.w	r3, r7, #8
 800b47e:	4618      	mov	r0, r3
 800b480:	f7fd fee2 	bl	8009248 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b488:	e02b      	b.n	800b4e2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b48a:	4b0a      	ldr	r3, [pc, #40]	; (800b4b4 <UART_SetConfig+0x69c>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f003 0320 	and.w	r3, r3, #32
 800b492:	2b00      	cmp	r3, #0
 800b494:	d009      	beq.n	800b4aa <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b496:	4b07      	ldr	r3, [pc, #28]	; (800b4b4 <UART_SetConfig+0x69c>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	08db      	lsrs	r3, r3, #3
 800b49c:	f003 0303 	and.w	r3, r3, #3
 800b4a0:	4a08      	ldr	r2, [pc, #32]	; (800b4c4 <UART_SetConfig+0x6ac>)
 800b4a2:	fa22 f303 	lsr.w	r3, r2, r3
 800b4a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b4a8:	e01b      	b.n	800b4e2 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800b4aa:	4b06      	ldr	r3, [pc, #24]	; (800b4c4 <UART_SetConfig+0x6ac>)
 800b4ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b4ae:	e018      	b.n	800b4e2 <UART_SetConfig+0x6ca>
 800b4b0:	40011400 	.word	0x40011400
 800b4b4:	58024400 	.word	0x58024400
 800b4b8:	40007800 	.word	0x40007800
 800b4bc:	40007c00 	.word	0x40007c00
 800b4c0:	58000c00 	.word	0x58000c00
 800b4c4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b4c8:	4bc4      	ldr	r3, [pc, #784]	; (800b7dc <UART_SetConfig+0x9c4>)
 800b4ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b4cc:	e009      	b.n	800b4e2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b4ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b4d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b4d4:	e005      	b.n	800b4e2 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b4da:	2301      	movs	r3, #1
 800b4dc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b4e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	f000 81da 	beq.w	800b89e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ee:	4abc      	ldr	r2, [pc, #752]	; (800b7e0 <UART_SetConfig+0x9c8>)
 800b4f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4f4:	461a      	mov	r2, r3
 800b4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b4fc:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	685a      	ldr	r2, [r3, #4]
 800b502:	4613      	mov	r3, r2
 800b504:	005b      	lsls	r3, r3, #1
 800b506:	4413      	add	r3, r2
 800b508:	6a3a      	ldr	r2, [r7, #32]
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d305      	bcc.n	800b51a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	685b      	ldr	r3, [r3, #4]
 800b512:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b514:	6a3a      	ldr	r2, [r7, #32]
 800b516:	429a      	cmp	r2, r3
 800b518:	d903      	bls.n	800b522 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800b51a:	2301      	movs	r3, #1
 800b51c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b520:	e1bd      	b.n	800b89e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b524:	4618      	mov	r0, r3
 800b526:	f04f 0100 	mov.w	r1, #0
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b52e:	4aac      	ldr	r2, [pc, #688]	; (800b7e0 <UART_SetConfig+0x9c8>)
 800b530:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b534:	b29a      	uxth	r2, r3
 800b536:	f04f 0300 	mov.w	r3, #0
 800b53a:	f7f5 f8f5 	bl	8000728 <__aeabi_uldivmod>
 800b53e:	4602      	mov	r2, r0
 800b540:	460b      	mov	r3, r1
 800b542:	4610      	mov	r0, r2
 800b544:	4619      	mov	r1, r3
 800b546:	f04f 0200 	mov.w	r2, #0
 800b54a:	f04f 0300 	mov.w	r3, #0
 800b54e:	020b      	lsls	r3, r1, #8
 800b550:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b554:	0202      	lsls	r2, r0, #8
 800b556:	6879      	ldr	r1, [r7, #4]
 800b558:	6849      	ldr	r1, [r1, #4]
 800b55a:	0849      	lsrs	r1, r1, #1
 800b55c:	4608      	mov	r0, r1
 800b55e:	f04f 0100 	mov.w	r1, #0
 800b562:	1814      	adds	r4, r2, r0
 800b564:	eb43 0501 	adc.w	r5, r3, r1
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	685b      	ldr	r3, [r3, #4]
 800b56c:	461a      	mov	r2, r3
 800b56e:	f04f 0300 	mov.w	r3, #0
 800b572:	4620      	mov	r0, r4
 800b574:	4629      	mov	r1, r5
 800b576:	f7f5 f8d7 	bl	8000728 <__aeabi_uldivmod>
 800b57a:	4602      	mov	r2, r0
 800b57c:	460b      	mov	r3, r1
 800b57e:	4613      	mov	r3, r2
 800b580:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b584:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b588:	d308      	bcc.n	800b59c <UART_SetConfig+0x784>
 800b58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b58c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b590:	d204      	bcs.n	800b59c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b598:	60da      	str	r2, [r3, #12]
 800b59a:	e180      	b.n	800b89e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800b59c:	2301      	movs	r3, #1
 800b59e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b5a2:	e17c      	b.n	800b89e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	69db      	ldr	r3, [r3, #28]
 800b5a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5ac:	f040 80bf 	bne.w	800b72e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800b5b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b5b4:	2b20      	cmp	r3, #32
 800b5b6:	dc49      	bgt.n	800b64c <UART_SetConfig+0x834>
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	db7c      	blt.n	800b6b6 <UART_SetConfig+0x89e>
 800b5bc:	2b20      	cmp	r3, #32
 800b5be:	d87a      	bhi.n	800b6b6 <UART_SetConfig+0x89e>
 800b5c0:	a201      	add	r2, pc, #4	; (adr r2, 800b5c8 <UART_SetConfig+0x7b0>)
 800b5c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5c6:	bf00      	nop
 800b5c8:	0800b653 	.word	0x0800b653
 800b5cc:	0800b65b 	.word	0x0800b65b
 800b5d0:	0800b6b7 	.word	0x0800b6b7
 800b5d4:	0800b6b7 	.word	0x0800b6b7
 800b5d8:	0800b663 	.word	0x0800b663
 800b5dc:	0800b6b7 	.word	0x0800b6b7
 800b5e0:	0800b6b7 	.word	0x0800b6b7
 800b5e4:	0800b6b7 	.word	0x0800b6b7
 800b5e8:	0800b673 	.word	0x0800b673
 800b5ec:	0800b6b7 	.word	0x0800b6b7
 800b5f0:	0800b6b7 	.word	0x0800b6b7
 800b5f4:	0800b6b7 	.word	0x0800b6b7
 800b5f8:	0800b6b7 	.word	0x0800b6b7
 800b5fc:	0800b6b7 	.word	0x0800b6b7
 800b600:	0800b6b7 	.word	0x0800b6b7
 800b604:	0800b6b7 	.word	0x0800b6b7
 800b608:	0800b683 	.word	0x0800b683
 800b60c:	0800b6b7 	.word	0x0800b6b7
 800b610:	0800b6b7 	.word	0x0800b6b7
 800b614:	0800b6b7 	.word	0x0800b6b7
 800b618:	0800b6b7 	.word	0x0800b6b7
 800b61c:	0800b6b7 	.word	0x0800b6b7
 800b620:	0800b6b7 	.word	0x0800b6b7
 800b624:	0800b6b7 	.word	0x0800b6b7
 800b628:	0800b6b7 	.word	0x0800b6b7
 800b62c:	0800b6b7 	.word	0x0800b6b7
 800b630:	0800b6b7 	.word	0x0800b6b7
 800b634:	0800b6b7 	.word	0x0800b6b7
 800b638:	0800b6b7 	.word	0x0800b6b7
 800b63c:	0800b6b7 	.word	0x0800b6b7
 800b640:	0800b6b7 	.word	0x0800b6b7
 800b644:	0800b6b7 	.word	0x0800b6b7
 800b648:	0800b6a9 	.word	0x0800b6a9
 800b64c:	2b40      	cmp	r3, #64	; 0x40
 800b64e:	d02e      	beq.n	800b6ae <UART_SetConfig+0x896>
 800b650:	e031      	b.n	800b6b6 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b652:	f7fc fd23 	bl	800809c <HAL_RCC_GetPCLK1Freq>
 800b656:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b658:	e033      	b.n	800b6c2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b65a:	f7fc fd35 	bl	80080c8 <HAL_RCC_GetPCLK2Freq>
 800b65e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b660:	e02f      	b.n	800b6c2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b662:	f107 0314 	add.w	r3, r7, #20
 800b666:	4618      	mov	r0, r3
 800b668:	f7fd fc9a 	bl	8008fa0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b66c:	69bb      	ldr	r3, [r7, #24]
 800b66e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b670:	e027      	b.n	800b6c2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b672:	f107 0308 	add.w	r3, r7, #8
 800b676:	4618      	mov	r0, r3
 800b678:	f7fd fde6 	bl	8009248 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b680:	e01f      	b.n	800b6c2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b682:	4b58      	ldr	r3, [pc, #352]	; (800b7e4 <UART_SetConfig+0x9cc>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f003 0320 	and.w	r3, r3, #32
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d009      	beq.n	800b6a2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b68e:	4b55      	ldr	r3, [pc, #340]	; (800b7e4 <UART_SetConfig+0x9cc>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	08db      	lsrs	r3, r3, #3
 800b694:	f003 0303 	and.w	r3, r3, #3
 800b698:	4a53      	ldr	r2, [pc, #332]	; (800b7e8 <UART_SetConfig+0x9d0>)
 800b69a:	fa22 f303 	lsr.w	r3, r2, r3
 800b69e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b6a0:	e00f      	b.n	800b6c2 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800b6a2:	4b51      	ldr	r3, [pc, #324]	; (800b7e8 <UART_SetConfig+0x9d0>)
 800b6a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6a6:	e00c      	b.n	800b6c2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b6a8:	4b4c      	ldr	r3, [pc, #304]	; (800b7dc <UART_SetConfig+0x9c4>)
 800b6aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6ac:	e009      	b.n	800b6c2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b6ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b6b4:	e005      	b.n	800b6c2 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b6c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	f000 80ea 	beq.w	800b89e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ce:	4a44      	ldr	r2, [pc, #272]	; (800b7e0 <UART_SetConfig+0x9c8>)
 800b6d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6d4:	461a      	mov	r2, r3
 800b6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6dc:	005a      	lsls	r2, r3, #1
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	685b      	ldr	r3, [r3, #4]
 800b6e2:	085b      	lsrs	r3, r3, #1
 800b6e4:	441a      	add	r2, r3
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6ee:	b29b      	uxth	r3, r3
 800b6f0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6f4:	2b0f      	cmp	r3, #15
 800b6f6:	d916      	bls.n	800b726 <UART_SetConfig+0x90e>
 800b6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6fe:	d212      	bcs.n	800b726 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b702:	b29b      	uxth	r3, r3
 800b704:	f023 030f 	bic.w	r3, r3, #15
 800b708:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b70c:	085b      	lsrs	r3, r3, #1
 800b70e:	b29b      	uxth	r3, r3
 800b710:	f003 0307 	and.w	r3, r3, #7
 800b714:	b29a      	uxth	r2, r3
 800b716:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b718:	4313      	orrs	r3, r2
 800b71a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b722:	60da      	str	r2, [r3, #12]
 800b724:	e0bb      	b.n	800b89e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800b726:	2301      	movs	r3, #1
 800b728:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b72c:	e0b7      	b.n	800b89e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b72e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b732:	2b20      	cmp	r3, #32
 800b734:	dc4a      	bgt.n	800b7cc <UART_SetConfig+0x9b4>
 800b736:	2b00      	cmp	r3, #0
 800b738:	f2c0 8086 	blt.w	800b848 <UART_SetConfig+0xa30>
 800b73c:	2b20      	cmp	r3, #32
 800b73e:	f200 8083 	bhi.w	800b848 <UART_SetConfig+0xa30>
 800b742:	a201      	add	r2, pc, #4	; (adr r2, 800b748 <UART_SetConfig+0x930>)
 800b744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b748:	0800b7d3 	.word	0x0800b7d3
 800b74c:	0800b7ed 	.word	0x0800b7ed
 800b750:	0800b849 	.word	0x0800b849
 800b754:	0800b849 	.word	0x0800b849
 800b758:	0800b7f5 	.word	0x0800b7f5
 800b75c:	0800b849 	.word	0x0800b849
 800b760:	0800b849 	.word	0x0800b849
 800b764:	0800b849 	.word	0x0800b849
 800b768:	0800b805 	.word	0x0800b805
 800b76c:	0800b849 	.word	0x0800b849
 800b770:	0800b849 	.word	0x0800b849
 800b774:	0800b849 	.word	0x0800b849
 800b778:	0800b849 	.word	0x0800b849
 800b77c:	0800b849 	.word	0x0800b849
 800b780:	0800b849 	.word	0x0800b849
 800b784:	0800b849 	.word	0x0800b849
 800b788:	0800b815 	.word	0x0800b815
 800b78c:	0800b849 	.word	0x0800b849
 800b790:	0800b849 	.word	0x0800b849
 800b794:	0800b849 	.word	0x0800b849
 800b798:	0800b849 	.word	0x0800b849
 800b79c:	0800b849 	.word	0x0800b849
 800b7a0:	0800b849 	.word	0x0800b849
 800b7a4:	0800b849 	.word	0x0800b849
 800b7a8:	0800b849 	.word	0x0800b849
 800b7ac:	0800b849 	.word	0x0800b849
 800b7b0:	0800b849 	.word	0x0800b849
 800b7b4:	0800b849 	.word	0x0800b849
 800b7b8:	0800b849 	.word	0x0800b849
 800b7bc:	0800b849 	.word	0x0800b849
 800b7c0:	0800b849 	.word	0x0800b849
 800b7c4:	0800b849 	.word	0x0800b849
 800b7c8:	0800b83b 	.word	0x0800b83b
 800b7cc:	2b40      	cmp	r3, #64	; 0x40
 800b7ce:	d037      	beq.n	800b840 <UART_SetConfig+0xa28>
 800b7d0:	e03a      	b.n	800b848 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b7d2:	f7fc fc63 	bl	800809c <HAL_RCC_GetPCLK1Freq>
 800b7d6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b7d8:	e03c      	b.n	800b854 <UART_SetConfig+0xa3c>
 800b7da:	bf00      	nop
 800b7dc:	003d0900 	.word	0x003d0900
 800b7e0:	08016ce0 	.word	0x08016ce0
 800b7e4:	58024400 	.word	0x58024400
 800b7e8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b7ec:	f7fc fc6c 	bl	80080c8 <HAL_RCC_GetPCLK2Freq>
 800b7f0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b7f2:	e02f      	b.n	800b854 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7f4:	f107 0314 	add.w	r3, r7, #20
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f7fd fbd1 	bl	8008fa0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b7fe:	69bb      	ldr	r3, [r7, #24]
 800b800:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b802:	e027      	b.n	800b854 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b804:	f107 0308 	add.w	r3, r7, #8
 800b808:	4618      	mov	r0, r3
 800b80a:	f7fd fd1d 	bl	8009248 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b812:	e01f      	b.n	800b854 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b814:	4b2c      	ldr	r3, [pc, #176]	; (800b8c8 <UART_SetConfig+0xab0>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f003 0320 	and.w	r3, r3, #32
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d009      	beq.n	800b834 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b820:	4b29      	ldr	r3, [pc, #164]	; (800b8c8 <UART_SetConfig+0xab0>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	08db      	lsrs	r3, r3, #3
 800b826:	f003 0303 	and.w	r3, r3, #3
 800b82a:	4a28      	ldr	r2, [pc, #160]	; (800b8cc <UART_SetConfig+0xab4>)
 800b82c:	fa22 f303 	lsr.w	r3, r2, r3
 800b830:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b832:	e00f      	b.n	800b854 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800b834:	4b25      	ldr	r3, [pc, #148]	; (800b8cc <UART_SetConfig+0xab4>)
 800b836:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b838:	e00c      	b.n	800b854 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b83a:	4b25      	ldr	r3, [pc, #148]	; (800b8d0 <UART_SetConfig+0xab8>)
 800b83c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b83e:	e009      	b.n	800b854 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b840:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b844:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b846:	e005      	b.n	800b854 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800b848:	2300      	movs	r3, #0
 800b84a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b84c:	2301      	movs	r3, #1
 800b84e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b852:	bf00      	nop
    }

    if (pclk != 0U)
 800b854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b856:	2b00      	cmp	r3, #0
 800b858:	d021      	beq.n	800b89e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b85e:	4a1d      	ldr	r2, [pc, #116]	; (800b8d4 <UART_SetConfig+0xabc>)
 800b860:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b864:	461a      	mov	r2, r3
 800b866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b868:	fbb3 f2f2 	udiv	r2, r3, r2
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	685b      	ldr	r3, [r3, #4]
 800b870:	085b      	lsrs	r3, r3, #1
 800b872:	441a      	add	r2, r3
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	fbb2 f3f3 	udiv	r3, r2, r3
 800b87c:	b29b      	uxth	r3, r3
 800b87e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b882:	2b0f      	cmp	r3, #15
 800b884:	d908      	bls.n	800b898 <UART_SetConfig+0xa80>
 800b886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b88c:	d204      	bcs.n	800b898 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b894:	60da      	str	r2, [r3, #12]
 800b896:	e002      	b.n	800b89e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800b898:	2301      	movs	r3, #1
 800b89a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2201      	movs	r2, #1
 800b8a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2201      	movs	r2, #1
 800b8aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b8ba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3738      	adds	r7, #56	; 0x38
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bdb0      	pop	{r4, r5, r7, pc}
 800b8c6:	bf00      	nop
 800b8c8:	58024400 	.word	0x58024400
 800b8cc:	03d09000 	.word	0x03d09000
 800b8d0:	003d0900 	.word	0x003d0900
 800b8d4:	08016ce0 	.word	0x08016ce0

0800b8d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b083      	sub	sp, #12
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8e4:	f003 0301 	and.w	r3, r3, #1
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d00a      	beq.n	800b902 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	685b      	ldr	r3, [r3, #4]
 800b8f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	430a      	orrs	r2, r1
 800b900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b906:	f003 0302 	and.w	r3, r3, #2
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d00a      	beq.n	800b924 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	685b      	ldr	r3, [r3, #4]
 800b914:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	430a      	orrs	r2, r1
 800b922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b928:	f003 0304 	and.w	r3, r3, #4
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d00a      	beq.n	800b946 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	430a      	orrs	r2, r1
 800b944:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b94a:	f003 0308 	and.w	r3, r3, #8
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d00a      	beq.n	800b968 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	685b      	ldr	r3, [r3, #4]
 800b958:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	430a      	orrs	r2, r1
 800b966:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b96c:	f003 0310 	and.w	r3, r3, #16
 800b970:	2b00      	cmp	r3, #0
 800b972:	d00a      	beq.n	800b98a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	689b      	ldr	r3, [r3, #8]
 800b97a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	430a      	orrs	r2, r1
 800b988:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b98e:	f003 0320 	and.w	r3, r3, #32
 800b992:	2b00      	cmp	r3, #0
 800b994:	d00a      	beq.n	800b9ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	689b      	ldr	r3, [r3, #8]
 800b99c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	430a      	orrs	r2, r1
 800b9aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d01a      	beq.n	800b9ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	685b      	ldr	r3, [r3, #4]
 800b9be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	430a      	orrs	r2, r1
 800b9cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b9d6:	d10a      	bne.n	800b9ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	685b      	ldr	r3, [r3, #4]
 800b9de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	430a      	orrs	r2, r1
 800b9ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d00a      	beq.n	800ba10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	685b      	ldr	r3, [r3, #4]
 800ba00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	430a      	orrs	r2, r1
 800ba0e:	605a      	str	r2, [r3, #4]
  }
}
 800ba10:	bf00      	nop
 800ba12:	370c      	adds	r7, #12
 800ba14:	46bd      	mov	sp, r7
 800ba16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1a:	4770      	bx	lr

0800ba1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b086      	sub	sp, #24
 800ba20:	af02      	add	r7, sp, #8
 800ba22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2200      	movs	r2, #0
 800ba28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ba2c:	f7f6 ffd6 	bl	80029dc <HAL_GetTick>
 800ba30:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f003 0308 	and.w	r3, r3, #8
 800ba3c:	2b08      	cmp	r3, #8
 800ba3e:	d10e      	bne.n	800ba5e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ba44:	9300      	str	r3, [sp, #0]
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	2200      	movs	r2, #0
 800ba4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 f82f 	bl	800bab2 <UART_WaitOnFlagUntilTimeout>
 800ba54:	4603      	mov	r3, r0
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d001      	beq.n	800ba5e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba5a:	2303      	movs	r3, #3
 800ba5c:	e025      	b.n	800baaa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f003 0304 	and.w	r3, r3, #4
 800ba68:	2b04      	cmp	r3, #4
 800ba6a:	d10e      	bne.n	800ba8a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ba70:	9300      	str	r3, [sp, #0]
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	2200      	movs	r2, #0
 800ba76:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f000 f819 	bl	800bab2 <UART_WaitOnFlagUntilTimeout>
 800ba80:	4603      	mov	r3, r0
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d001      	beq.n	800ba8a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba86:	2303      	movs	r3, #3
 800ba88:	e00f      	b.n	800baaa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2220      	movs	r2, #32
 800ba8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2220      	movs	r2, #32
 800ba96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2200      	movs	r2, #0
 800baa4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800baa8:	2300      	movs	r3, #0
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3710      	adds	r7, #16
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}

0800bab2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bab2:	b580      	push	{r7, lr}
 800bab4:	b084      	sub	sp, #16
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	60f8      	str	r0, [r7, #12]
 800baba:	60b9      	str	r1, [r7, #8]
 800babc:	603b      	str	r3, [r7, #0]
 800babe:	4613      	mov	r3, r2
 800bac0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bac2:	e062      	b.n	800bb8a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bac4:	69bb      	ldr	r3, [r7, #24]
 800bac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baca:	d05e      	beq.n	800bb8a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bacc:	f7f6 ff86 	bl	80029dc <HAL_GetTick>
 800bad0:	4602      	mov	r2, r0
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	1ad3      	subs	r3, r2, r3
 800bad6:	69ba      	ldr	r2, [r7, #24]
 800bad8:	429a      	cmp	r2, r3
 800bada:	d302      	bcc.n	800bae2 <UART_WaitOnFlagUntilTimeout+0x30>
 800badc:	69bb      	ldr	r3, [r7, #24]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d11d      	bne.n	800bb1e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	681a      	ldr	r2, [r3, #0]
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800baf0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	689a      	ldr	r2, [r3, #8]
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f022 0201 	bic.w	r2, r2, #1
 800bb00:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2220      	movs	r2, #32
 800bb06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2220      	movs	r2, #32
 800bb0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	2200      	movs	r2, #0
 800bb16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800bb1a:	2303      	movs	r3, #3
 800bb1c:	e045      	b.n	800bbaa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f003 0304 	and.w	r3, r3, #4
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d02e      	beq.n	800bb8a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	69db      	ldr	r3, [r3, #28]
 800bb32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb3a:	d126      	bne.n	800bb8a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bb44:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	681a      	ldr	r2, [r3, #0]
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bb54:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	689a      	ldr	r2, [r3, #8]
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f022 0201 	bic.w	r2, r2, #1
 800bb64:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	2220      	movs	r2, #32
 800bb6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	2220      	movs	r2, #32
 800bb72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	2220      	movs	r2, #32
 800bb7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	2200      	movs	r2, #0
 800bb82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800bb86:	2303      	movs	r3, #3
 800bb88:	e00f      	b.n	800bbaa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	69da      	ldr	r2, [r3, #28]
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	4013      	ands	r3, r2
 800bb94:	68ba      	ldr	r2, [r7, #8]
 800bb96:	429a      	cmp	r2, r3
 800bb98:	bf0c      	ite	eq
 800bb9a:	2301      	moveq	r3, #1
 800bb9c:	2300      	movne	r3, #0
 800bb9e:	b2db      	uxtb	r3, r3
 800bba0:	461a      	mov	r2, r3
 800bba2:	79fb      	ldrb	r3, [r7, #7]
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d08d      	beq.n	800bac4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bba8:	2300      	movs	r3, #0
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3710      	adds	r7, #16
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}

0800bbb2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bbb2:	b480      	push	{r7}
 800bbb4:	b085      	sub	sp, #20
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bbc0:	2b01      	cmp	r3, #1
 800bbc2:	d101      	bne.n	800bbc8 <HAL_UARTEx_DisableFifoMode+0x16>
 800bbc4:	2302      	movs	r3, #2
 800bbc6:	e027      	b.n	800bc18 <HAL_UARTEx_DisableFifoMode+0x66>
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2201      	movs	r2, #1
 800bbcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2224      	movs	r2, #36	; 0x24
 800bbd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	681a      	ldr	r2, [r3, #0]
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f022 0201 	bic.w	r2, r2, #1
 800bbee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bbf6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	68fa      	ldr	r2, [r7, #12]
 800bc04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2220      	movs	r2, #32
 800bc0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2200      	movs	r2, #0
 800bc12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bc16:	2300      	movs	r3, #0
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3714      	adds	r7, #20
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc22:	4770      	bx	lr

0800bc24 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b084      	sub	sp, #16
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bc34:	2b01      	cmp	r3, #1
 800bc36:	d101      	bne.n	800bc3c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bc38:	2302      	movs	r3, #2
 800bc3a:	e02d      	b.n	800bc98 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2201      	movs	r2, #1
 800bc40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2224      	movs	r2, #36	; 0x24
 800bc48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	681a      	ldr	r2, [r3, #0]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f022 0201 	bic.w	r2, r2, #1
 800bc62:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	689b      	ldr	r3, [r3, #8]
 800bc6a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	683a      	ldr	r2, [r7, #0]
 800bc74:	430a      	orrs	r2, r1
 800bc76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f000 f84f 	bl	800bd1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	68fa      	ldr	r2, [r7, #12]
 800bc84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2220      	movs	r2, #32
 800bc8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2200      	movs	r2, #0
 800bc92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bc96:	2300      	movs	r3, #0
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3710      	adds	r7, #16
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}

0800bca0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b084      	sub	sp, #16
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bcb0:	2b01      	cmp	r3, #1
 800bcb2:	d101      	bne.n	800bcb8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bcb4:	2302      	movs	r3, #2
 800bcb6:	e02d      	b.n	800bd14 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2201      	movs	r2, #1
 800bcbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2224      	movs	r2, #36	; 0x24
 800bcc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	681a      	ldr	r2, [r3, #0]
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f022 0201 	bic.w	r2, r2, #1
 800bcde:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	689b      	ldr	r3, [r3, #8]
 800bce6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	683a      	ldr	r2, [r7, #0]
 800bcf0:	430a      	orrs	r2, r1
 800bcf2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f000 f811 	bl	800bd1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	68fa      	ldr	r2, [r7, #12]
 800bd00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2220      	movs	r2, #32
 800bd06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bd12:	2300      	movs	r3, #0
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3710      	adds	r7, #16
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd80      	pop	{r7, pc}

0800bd1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b085      	sub	sp, #20
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d108      	bne.n	800bd3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2201      	movs	r2, #1
 800bd30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2201      	movs	r2, #1
 800bd38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bd3c:	e031      	b.n	800bda2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bd3e:	2310      	movs	r3, #16
 800bd40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bd42:	2310      	movs	r3, #16
 800bd44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	689b      	ldr	r3, [r3, #8]
 800bd4c:	0e5b      	lsrs	r3, r3, #25
 800bd4e:	b2db      	uxtb	r3, r3
 800bd50:	f003 0307 	and.w	r3, r3, #7
 800bd54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	689b      	ldr	r3, [r3, #8]
 800bd5c:	0f5b      	lsrs	r3, r3, #29
 800bd5e:	b2db      	uxtb	r3, r3
 800bd60:	f003 0307 	and.w	r3, r3, #7
 800bd64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bd66:	7bbb      	ldrb	r3, [r7, #14]
 800bd68:	7b3a      	ldrb	r2, [r7, #12]
 800bd6a:	4911      	ldr	r1, [pc, #68]	; (800bdb0 <UARTEx_SetNbDataToProcess+0x94>)
 800bd6c:	5c8a      	ldrb	r2, [r1, r2]
 800bd6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bd72:	7b3a      	ldrb	r2, [r7, #12]
 800bd74:	490f      	ldr	r1, [pc, #60]	; (800bdb4 <UARTEx_SetNbDataToProcess+0x98>)
 800bd76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bd78:	fb93 f3f2 	sdiv	r3, r3, r2
 800bd7c:	b29a      	uxth	r2, r3
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bd84:	7bfb      	ldrb	r3, [r7, #15]
 800bd86:	7b7a      	ldrb	r2, [r7, #13]
 800bd88:	4909      	ldr	r1, [pc, #36]	; (800bdb0 <UARTEx_SetNbDataToProcess+0x94>)
 800bd8a:	5c8a      	ldrb	r2, [r1, r2]
 800bd8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bd90:	7b7a      	ldrb	r2, [r7, #13]
 800bd92:	4908      	ldr	r1, [pc, #32]	; (800bdb4 <UARTEx_SetNbDataToProcess+0x98>)
 800bd94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bd96:	fb93 f3f2 	sdiv	r3, r3, r2
 800bd9a:	b29a      	uxth	r2, r3
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bda2:	bf00      	nop
 800bda4:	3714      	adds	r7, #20
 800bda6:	46bd      	mov	sp, r7
 800bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdac:	4770      	bx	lr
 800bdae:	bf00      	nop
 800bdb0:	08016cf8 	.word	0x08016cf8
 800bdb4:	08016d00 	.word	0x08016d00

0800bdb8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bdb8:	b084      	sub	sp, #16
 800bdba:	b580      	push	{r7, lr}
 800bdbc:	b084      	sub	sp, #16
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	6078      	str	r0, [r7, #4]
 800bdc2:	f107 001c 	add.w	r0, r7, #28
 800bdc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bdca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdcc:	2b01      	cmp	r3, #1
 800bdce:	d120      	bne.n	800be12 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdd4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	68da      	ldr	r2, [r3, #12]
 800bde0:	4b2a      	ldr	r3, [pc, #168]	; (800be8c <USB_CoreInit+0xd4>)
 800bde2:	4013      	ands	r3, r2
 800bde4:	687a      	ldr	r2, [r7, #4]
 800bde6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	68db      	ldr	r3, [r3, #12]
 800bdec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bdf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdf6:	2b01      	cmp	r3, #1
 800bdf8:	d105      	bne.n	800be06 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	68db      	ldr	r3, [r3, #12]
 800bdfe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f000 f990 	bl	800c12c <USB_CoreReset>
 800be0c:	4603      	mov	r3, r0
 800be0e:	73fb      	strb	r3, [r7, #15]
 800be10:	e01a      	b.n	800be48 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	68db      	ldr	r3, [r3, #12]
 800be16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f000 f984 	bl	800c12c <USB_CoreReset>
 800be24:	4603      	mov	r3, r0
 800be26:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800be28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d106      	bne.n	800be3c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be32:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	639a      	str	r2, [r3, #56]	; 0x38
 800be3a:	e005      	b.n	800be48 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800be48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be4a:	2b01      	cmp	r3, #1
 800be4c:	d116      	bne.n	800be7c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be52:	b29a      	uxth	r2, r3
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800be5c:	4b0c      	ldr	r3, [pc, #48]	; (800be90 <USB_CoreInit+0xd8>)
 800be5e:	4313      	orrs	r3, r2
 800be60:	687a      	ldr	r2, [r7, #4]
 800be62:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	689b      	ldr	r3, [r3, #8]
 800be68:	f043 0206 	orr.w	r2, r3, #6
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	689b      	ldr	r3, [r3, #8]
 800be74:	f043 0220 	orr.w	r2, r3, #32
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800be7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be7e:	4618      	mov	r0, r3
 800be80:	3710      	adds	r7, #16
 800be82:	46bd      	mov	sp, r7
 800be84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800be88:	b004      	add	sp, #16
 800be8a:	4770      	bx	lr
 800be8c:	ffbdffbf 	.word	0xffbdffbf
 800be90:	03ee0000 	.word	0x03ee0000

0800be94 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800be94:	b480      	push	{r7}
 800be96:	b083      	sub	sp, #12
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	689b      	ldr	r3, [r3, #8]
 800bea0:	f043 0201 	orr.w	r2, r3, #1
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bea8:	2300      	movs	r3, #0
}
 800beaa:	4618      	mov	r0, r3
 800beac:	370c      	adds	r7, #12
 800beae:	46bd      	mov	sp, r7
 800beb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb4:	4770      	bx	lr

0800beb6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800beb6:	b480      	push	{r7}
 800beb8:	b083      	sub	sp, #12
 800beba:	af00      	add	r7, sp, #0
 800bebc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	689b      	ldr	r3, [r3, #8]
 800bec2:	f023 0201 	bic.w	r2, r3, #1
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800beca:	2300      	movs	r3, #0
}
 800becc:	4618      	mov	r0, r3
 800bece:	370c      	adds	r7, #12
 800bed0:	46bd      	mov	sp, r7
 800bed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed6:	4770      	bx	lr

0800bed8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b082      	sub	sp, #8
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
 800bee0:	460b      	mov	r3, r1
 800bee2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	68db      	ldr	r3, [r3, #12]
 800bee8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bef0:	78fb      	ldrb	r3, [r7, #3]
 800bef2:	2b01      	cmp	r3, #1
 800bef4:	d106      	bne.n	800bf04 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	68db      	ldr	r3, [r3, #12]
 800befa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	60da      	str	r2, [r3, #12]
 800bf02:	e00b      	b.n	800bf1c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800bf04:	78fb      	ldrb	r3, [r7, #3]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d106      	bne.n	800bf18 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	68db      	ldr	r3, [r3, #12]
 800bf0e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	60da      	str	r2, [r3, #12]
 800bf16:	e001      	b.n	800bf1c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800bf18:	2301      	movs	r3, #1
 800bf1a:	e003      	b.n	800bf24 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800bf1c:	2032      	movs	r0, #50	; 0x32
 800bf1e:	f7f6 fd69 	bl	80029f4 <HAL_Delay>

  return HAL_OK;
 800bf22:	2300      	movs	r3, #0
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	3708      	adds	r7, #8
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}

0800bf2c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b085      	sub	sp, #20
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800bf36:	2300      	movs	r3, #0
 800bf38:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	019b      	lsls	r3, r3, #6
 800bf3e:	f043 0220 	orr.w	r2, r3, #32
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	3301      	adds	r3, #1
 800bf4a:	60fb      	str	r3, [r7, #12]
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	4a09      	ldr	r2, [pc, #36]	; (800bf74 <USB_FlushTxFifo+0x48>)
 800bf50:	4293      	cmp	r3, r2
 800bf52:	d901      	bls.n	800bf58 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800bf54:	2303      	movs	r3, #3
 800bf56:	e006      	b.n	800bf66 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	691b      	ldr	r3, [r3, #16]
 800bf5c:	f003 0320 	and.w	r3, r3, #32
 800bf60:	2b20      	cmp	r3, #32
 800bf62:	d0f0      	beq.n	800bf46 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800bf64:	2300      	movs	r3, #0
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3714      	adds	r7, #20
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf70:	4770      	bx	lr
 800bf72:	bf00      	nop
 800bf74:	00030d40 	.word	0x00030d40

0800bf78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b085      	sub	sp, #20
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800bf80:	2300      	movs	r3, #0
 800bf82:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2210      	movs	r2, #16
 800bf88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	3301      	adds	r3, #1
 800bf8e:	60fb      	str	r3, [r7, #12]
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	4a09      	ldr	r2, [pc, #36]	; (800bfb8 <USB_FlushRxFifo+0x40>)
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d901      	bls.n	800bf9c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800bf98:	2303      	movs	r3, #3
 800bf9a:	e006      	b.n	800bfaa <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	691b      	ldr	r3, [r3, #16]
 800bfa0:	f003 0310 	and.w	r3, r3, #16
 800bfa4:	2b10      	cmp	r3, #16
 800bfa6:	d0f0      	beq.n	800bf8a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800bfa8:	2300      	movs	r3, #0
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	3714      	adds	r7, #20
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb4:	4770      	bx	lr
 800bfb6:	bf00      	nop
 800bfb8:	00030d40 	.word	0x00030d40

0800bfbc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bfbc:	b480      	push	{r7}
 800bfbe:	b089      	sub	sp, #36	; 0x24
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	60f8      	str	r0, [r7, #12]
 800bfc4:	60b9      	str	r1, [r7, #8]
 800bfc6:	4611      	mov	r1, r2
 800bfc8:	461a      	mov	r2, r3
 800bfca:	460b      	mov	r3, r1
 800bfcc:	71fb      	strb	r3, [r7, #7]
 800bfce:	4613      	mov	r3, r2
 800bfd0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800bfda:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d123      	bne.n	800c02a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bfe2:	88bb      	ldrh	r3, [r7, #4]
 800bfe4:	3303      	adds	r3, #3
 800bfe6:	089b      	lsrs	r3, r3, #2
 800bfe8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bfea:	2300      	movs	r3, #0
 800bfec:	61bb      	str	r3, [r7, #24]
 800bfee:	e018      	b.n	800c022 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bff0:	79fb      	ldrb	r3, [r7, #7]
 800bff2:	031a      	lsls	r2, r3, #12
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	4413      	add	r3, r2
 800bff8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bffc:	461a      	mov	r2, r3
 800bffe:	69fb      	ldr	r3, [r7, #28]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c004:	69fb      	ldr	r3, [r7, #28]
 800c006:	3301      	adds	r3, #1
 800c008:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c00a:	69fb      	ldr	r3, [r7, #28]
 800c00c:	3301      	adds	r3, #1
 800c00e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c010:	69fb      	ldr	r3, [r7, #28]
 800c012:	3301      	adds	r3, #1
 800c014:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c016:	69fb      	ldr	r3, [r7, #28]
 800c018:	3301      	adds	r3, #1
 800c01a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c01c:	69bb      	ldr	r3, [r7, #24]
 800c01e:	3301      	adds	r3, #1
 800c020:	61bb      	str	r3, [r7, #24]
 800c022:	69ba      	ldr	r2, [r7, #24]
 800c024:	693b      	ldr	r3, [r7, #16]
 800c026:	429a      	cmp	r2, r3
 800c028:	d3e2      	bcc.n	800bff0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c02a:	2300      	movs	r3, #0
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3724      	adds	r7, #36	; 0x24
 800c030:	46bd      	mov	sp, r7
 800c032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c036:	4770      	bx	lr

0800c038 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c038:	b480      	push	{r7}
 800c03a:	b08b      	sub	sp, #44	; 0x2c
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	60f8      	str	r0, [r7, #12]
 800c040:	60b9      	str	r1, [r7, #8]
 800c042:	4613      	mov	r3, r2
 800c044:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c04e:	88fb      	ldrh	r3, [r7, #6]
 800c050:	089b      	lsrs	r3, r3, #2
 800c052:	b29b      	uxth	r3, r3
 800c054:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c056:	88fb      	ldrh	r3, [r7, #6]
 800c058:	f003 0303 	and.w	r3, r3, #3
 800c05c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c05e:	2300      	movs	r3, #0
 800c060:	623b      	str	r3, [r7, #32]
 800c062:	e014      	b.n	800c08e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c064:	69bb      	ldr	r3, [r7, #24]
 800c066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c06a:	681a      	ldr	r2, [r3, #0]
 800c06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c06e:	601a      	str	r2, [r3, #0]
    pDest++;
 800c070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c072:	3301      	adds	r3, #1
 800c074:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c078:	3301      	adds	r3, #1
 800c07a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07e:	3301      	adds	r3, #1
 800c080:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c084:	3301      	adds	r3, #1
 800c086:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c088:	6a3b      	ldr	r3, [r7, #32]
 800c08a:	3301      	adds	r3, #1
 800c08c:	623b      	str	r3, [r7, #32]
 800c08e:	6a3a      	ldr	r2, [r7, #32]
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	429a      	cmp	r2, r3
 800c094:	d3e6      	bcc.n	800c064 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c096:	8bfb      	ldrh	r3, [r7, #30]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d01e      	beq.n	800c0da <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c09c:	2300      	movs	r3, #0
 800c09e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c0a0:	69bb      	ldr	r3, [r7, #24]
 800c0a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c0a6:	461a      	mov	r2, r3
 800c0a8:	f107 0310 	add.w	r3, r7, #16
 800c0ac:	6812      	ldr	r2, [r2, #0]
 800c0ae:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c0b0:	693a      	ldr	r2, [r7, #16]
 800c0b2:	6a3b      	ldr	r3, [r7, #32]
 800c0b4:	b2db      	uxtb	r3, r3
 800c0b6:	00db      	lsls	r3, r3, #3
 800c0b8:	fa22 f303 	lsr.w	r3, r2, r3
 800c0bc:	b2da      	uxtb	r2, r3
 800c0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c0:	701a      	strb	r2, [r3, #0]
      i++;
 800c0c2:	6a3b      	ldr	r3, [r7, #32]
 800c0c4:	3301      	adds	r3, #1
 800c0c6:	623b      	str	r3, [r7, #32]
      pDest++;
 800c0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ca:	3301      	adds	r3, #1
 800c0cc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c0ce:	8bfb      	ldrh	r3, [r7, #30]
 800c0d0:	3b01      	subs	r3, #1
 800c0d2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c0d4:	8bfb      	ldrh	r3, [r7, #30]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d1ea      	bne.n	800c0b0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	372c      	adds	r7, #44	; 0x2c
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e6:	4770      	bx	lr

0800c0e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b085      	sub	sp, #20
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	695b      	ldr	r3, [r3, #20]
 800c0f4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	699b      	ldr	r3, [r3, #24]
 800c0fa:	68fa      	ldr	r2, [r7, #12]
 800c0fc:	4013      	ands	r3, r2
 800c0fe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c100:	68fb      	ldr	r3, [r7, #12]
}
 800c102:	4618      	mov	r0, r3
 800c104:	3714      	adds	r7, #20
 800c106:	46bd      	mov	sp, r7
 800c108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10c:	4770      	bx	lr

0800c10e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c10e:	b480      	push	{r7}
 800c110:	b083      	sub	sp, #12
 800c112:	af00      	add	r7, sp, #0
 800c114:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	695b      	ldr	r3, [r3, #20]
 800c11a:	f003 0301 	and.w	r3, r3, #1
}
 800c11e:	4618      	mov	r0, r3
 800c120:	370c      	adds	r7, #12
 800c122:	46bd      	mov	sp, r7
 800c124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c128:	4770      	bx	lr
	...

0800c12c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c12c:	b480      	push	{r7}
 800c12e:	b085      	sub	sp, #20
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800c134:	2300      	movs	r3, #0
 800c136:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	3301      	adds	r3, #1
 800c13c:	60fb      	str	r3, [r7, #12]
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	4a13      	ldr	r2, [pc, #76]	; (800c190 <USB_CoreReset+0x64>)
 800c142:	4293      	cmp	r3, r2
 800c144:	d901      	bls.n	800c14a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c146:	2303      	movs	r3, #3
 800c148:	e01b      	b.n	800c182 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	691b      	ldr	r3, [r3, #16]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	daf2      	bge.n	800c138 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c152:	2300      	movs	r3, #0
 800c154:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	691b      	ldr	r3, [r3, #16]
 800c15a:	f043 0201 	orr.w	r2, r3, #1
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	3301      	adds	r3, #1
 800c166:	60fb      	str	r3, [r7, #12]
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	4a09      	ldr	r2, [pc, #36]	; (800c190 <USB_CoreReset+0x64>)
 800c16c:	4293      	cmp	r3, r2
 800c16e:	d901      	bls.n	800c174 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c170:	2303      	movs	r3, #3
 800c172:	e006      	b.n	800c182 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	691b      	ldr	r3, [r3, #16]
 800c178:	f003 0301 	and.w	r3, r3, #1
 800c17c:	2b01      	cmp	r3, #1
 800c17e:	d0f0      	beq.n	800c162 <USB_CoreReset+0x36>

  return HAL_OK;
 800c180:	2300      	movs	r3, #0
}
 800c182:	4618      	mov	r0, r3
 800c184:	3714      	adds	r7, #20
 800c186:	46bd      	mov	sp, r7
 800c188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18c:	4770      	bx	lr
 800c18e:	bf00      	nop
 800c190:	00030d40 	.word	0x00030d40

0800c194 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c194:	b084      	sub	sp, #16
 800c196:	b580      	push	{r7, lr}
 800c198:	b084      	sub	sp, #16
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	6078      	str	r0, [r7, #4]
 800c19e:	f107 001c 	add.w	r0, r7, #28
 800c1a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c1b0:	461a      	mov	r2, r3
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ba:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d018      	beq.n	800c20c <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800c1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1dc:	2b01      	cmp	r3, #1
 800c1de:	d10a      	bne.n	800c1f6 <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	68ba      	ldr	r2, [r7, #8]
 800c1ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c1ee:	f043 0304 	orr.w	r3, r3, #4
 800c1f2:	6013      	str	r3, [r2, #0]
 800c1f4:	e014      	b.n	800c220 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	68ba      	ldr	r2, [r7, #8]
 800c200:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c204:	f023 0304 	bic.w	r3, r3, #4
 800c208:	6013      	str	r3, [r2, #0]
 800c20a:	e009      	b.n	800c220 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	68ba      	ldr	r2, [r7, #8]
 800c216:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c21a:	f023 0304 	bic.w	r3, r3, #4
 800c21e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800c220:	2110      	movs	r1, #16
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f7ff fe82 	bl	800bf2c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f7ff fea5 	bl	800bf78 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800c22e:	2300      	movs	r3, #0
 800c230:	60fb      	str	r3, [r7, #12]
 800c232:	e015      	b.n	800c260 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	015a      	lsls	r2, r3, #5
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	4413      	add	r3, r2
 800c23c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c240:	461a      	mov	r2, r3
 800c242:	f04f 33ff 	mov.w	r3, #4294967295
 800c246:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	015a      	lsls	r2, r3, #5
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	4413      	add	r3, r2
 800c250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c254:	461a      	mov	r2, r3
 800c256:	2300      	movs	r3, #0
 800c258:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	3301      	adds	r3, #1
 800c25e:	60fb      	str	r3, [r7, #12]
 800c260:	6a3b      	ldr	r3, [r7, #32]
 800c262:	68fa      	ldr	r2, [r7, #12]
 800c264:	429a      	cmp	r2, r3
 800c266:	d3e5      	bcc.n	800c234 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800c268:	2101      	movs	r1, #1
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f000 f882 	bl	800c374 <USB_DriveVbus>

  HAL_Delay(200U);
 800c270:	20c8      	movs	r0, #200	; 0xc8
 800c272:	f7f6 fbbf 	bl	80029f4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2200      	movs	r2, #0
 800c27a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f04f 32ff 	mov.w	r2, #4294967295
 800c282:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d00b      	beq.n	800c2a8 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c296:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	4a14      	ldr	r2, [pc, #80]	; (800c2ec <USB_HostInit+0x158>)
 800c29c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	4a13      	ldr	r2, [pc, #76]	; (800c2f0 <USB_HostInit+0x15c>)
 800c2a2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800c2a6:	e009      	b.n	800c2bc <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2280      	movs	r2, #128	; 0x80
 800c2ac:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	4a10      	ldr	r2, [pc, #64]	; (800c2f4 <USB_HostInit+0x160>)
 800c2b2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	4a10      	ldr	r2, [pc, #64]	; (800c2f8 <USB_HostInit+0x164>)
 800c2b8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d105      	bne.n	800c2ce <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	699b      	ldr	r3, [r3, #24]
 800c2c6:	f043 0210 	orr.w	r2, r3, #16
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	699a      	ldr	r2, [r3, #24]
 800c2d2:	4b0a      	ldr	r3, [pc, #40]	; (800c2fc <USB_HostInit+0x168>)
 800c2d4:	4313      	orrs	r3, r2
 800c2d6:	687a      	ldr	r2, [r7, #4]
 800c2d8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800c2da:	2300      	movs	r3, #0
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3710      	adds	r7, #16
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c2e6:	b004      	add	sp, #16
 800c2e8:	4770      	bx	lr
 800c2ea:	bf00      	nop
 800c2ec:	01000200 	.word	0x01000200
 800c2f0:	00e00300 	.word	0x00e00300
 800c2f4:	00600080 	.word	0x00600080
 800c2f8:	004000e0 	.word	0x004000e0
 800c2fc:	a3200008 	.word	0xa3200008

0800c300 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800c300:	b480      	push	{r7}
 800c302:	b085      	sub	sp, #20
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	460b      	mov	r3, r1
 800c30a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	68fa      	ldr	r2, [r7, #12]
 800c31a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c31e:	f023 0303 	bic.w	r3, r3, #3
 800c322:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c32a:	681a      	ldr	r2, [r3, #0]
 800c32c:	78fb      	ldrb	r3, [r7, #3]
 800c32e:	f003 0303 	and.w	r3, r3, #3
 800c332:	68f9      	ldr	r1, [r7, #12]
 800c334:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c338:	4313      	orrs	r3, r2
 800c33a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800c33c:	78fb      	ldrb	r3, [r7, #3]
 800c33e:	2b01      	cmp	r3, #1
 800c340:	d107      	bne.n	800c352 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c348:	461a      	mov	r2, r3
 800c34a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800c34e:	6053      	str	r3, [r2, #4]
 800c350:	e009      	b.n	800c366 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800c352:	78fb      	ldrb	r3, [r7, #3]
 800c354:	2b02      	cmp	r3, #2
 800c356:	d106      	bne.n	800c366 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c35e:	461a      	mov	r2, r3
 800c360:	f241 7370 	movw	r3, #6000	; 0x1770
 800c364:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800c366:	2300      	movs	r3, #0
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3714      	adds	r7, #20
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	4770      	bx	lr

0800c374 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800c374:	b480      	push	{r7}
 800c376:	b085      	sub	sp, #20
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	460b      	mov	r3, r1
 800c37e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c384:	2300      	movs	r3, #0
 800c386:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c398:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d109      	bne.n	800c3b8 <USB_DriveVbus+0x44>
 800c3a4:	78fb      	ldrb	r3, [r7, #3]
 800c3a6:	2b01      	cmp	r3, #1
 800c3a8:	d106      	bne.n	800c3b8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	68fa      	ldr	r2, [r7, #12]
 800c3ae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c3b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c3b6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c3be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3c2:	d109      	bne.n	800c3d8 <USB_DriveVbus+0x64>
 800c3c4:	78fb      	ldrb	r3, [r7, #3]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d106      	bne.n	800c3d8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	68fa      	ldr	r2, [r7, #12]
 800c3ce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c3d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c3d6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800c3d8:	2300      	movs	r3, #0
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3714      	adds	r7, #20
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e4:	4770      	bx	lr

0800c3e6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c3e6:	b480      	push	{r7}
 800c3e8:	b085      	sub	sp, #20
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	0c5b      	lsrs	r3, r3, #17
 800c404:	f003 0303 	and.w	r3, r3, #3
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3714      	adds	r7, #20
 800c40c:	46bd      	mov	sp, r7
 800c40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c412:	4770      	bx	lr

0800c414 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800c414:	b480      	push	{r7}
 800c416:	b085      	sub	sp, #20
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c426:	689b      	ldr	r3, [r3, #8]
 800c428:	b29b      	uxth	r3, r3
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3714      	adds	r7, #20
 800c42e:	46bd      	mov	sp, r7
 800c430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c434:	4770      	bx	lr
	...

0800c438 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b088      	sub	sp, #32
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
 800c440:	4608      	mov	r0, r1
 800c442:	4611      	mov	r1, r2
 800c444:	461a      	mov	r2, r3
 800c446:	4603      	mov	r3, r0
 800c448:	70fb      	strb	r3, [r7, #3]
 800c44a:	460b      	mov	r3, r1
 800c44c:	70bb      	strb	r3, [r7, #2]
 800c44e:	4613      	mov	r3, r2
 800c450:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800c452:	2300      	movs	r3, #0
 800c454:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800c45a:	78fb      	ldrb	r3, [r7, #3]
 800c45c:	015a      	lsls	r2, r3, #5
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	4413      	add	r3, r2
 800c462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c466:	461a      	mov	r2, r3
 800c468:	f04f 33ff 	mov.w	r3, #4294967295
 800c46c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800c46e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c472:	2b03      	cmp	r3, #3
 800c474:	d87e      	bhi.n	800c574 <USB_HC_Init+0x13c>
 800c476:	a201      	add	r2, pc, #4	; (adr r2, 800c47c <USB_HC_Init+0x44>)
 800c478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c47c:	0800c48d 	.word	0x0800c48d
 800c480:	0800c537 	.word	0x0800c537
 800c484:	0800c48d 	.word	0x0800c48d
 800c488:	0800c4f9 	.word	0x0800c4f9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c48c:	78fb      	ldrb	r3, [r7, #3]
 800c48e:	015a      	lsls	r2, r3, #5
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	4413      	add	r3, r2
 800c494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c498:	461a      	mov	r2, r3
 800c49a:	f240 439d 	movw	r3, #1181	; 0x49d
 800c49e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800c4a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	da10      	bge.n	800c4ca <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c4a8:	78fb      	ldrb	r3, [r7, #3]
 800c4aa:	015a      	lsls	r2, r3, #5
 800c4ac:	693b      	ldr	r3, [r7, #16]
 800c4ae:	4413      	add	r3, r2
 800c4b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c4b4:	68db      	ldr	r3, [r3, #12]
 800c4b6:	78fa      	ldrb	r2, [r7, #3]
 800c4b8:	0151      	lsls	r1, r2, #5
 800c4ba:	693a      	ldr	r2, [r7, #16]
 800c4bc:	440a      	add	r2, r1
 800c4be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c4c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c4c6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800c4c8:	e057      	b.n	800c57a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d051      	beq.n	800c57a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800c4d6:	78fb      	ldrb	r3, [r7, #3]
 800c4d8:	015a      	lsls	r2, r3, #5
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	4413      	add	r3, r2
 800c4de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c4e2:	68db      	ldr	r3, [r3, #12]
 800c4e4:	78fa      	ldrb	r2, [r7, #3]
 800c4e6:	0151      	lsls	r1, r2, #5
 800c4e8:	693a      	ldr	r2, [r7, #16]
 800c4ea:	440a      	add	r2, r1
 800c4ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c4f0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c4f4:	60d3      	str	r3, [r2, #12]
      break;
 800c4f6:	e040      	b.n	800c57a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c4f8:	78fb      	ldrb	r3, [r7, #3]
 800c4fa:	015a      	lsls	r2, r3, #5
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	4413      	add	r3, r2
 800c500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c504:	461a      	mov	r2, r3
 800c506:	f240 639d 	movw	r3, #1693	; 0x69d
 800c50a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c50c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c510:	2b00      	cmp	r3, #0
 800c512:	da34      	bge.n	800c57e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c514:	78fb      	ldrb	r3, [r7, #3]
 800c516:	015a      	lsls	r2, r3, #5
 800c518:	693b      	ldr	r3, [r7, #16]
 800c51a:	4413      	add	r3, r2
 800c51c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c520:	68db      	ldr	r3, [r3, #12]
 800c522:	78fa      	ldrb	r2, [r7, #3]
 800c524:	0151      	lsls	r1, r2, #5
 800c526:	693a      	ldr	r2, [r7, #16]
 800c528:	440a      	add	r2, r1
 800c52a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c52e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c532:	60d3      	str	r3, [r2, #12]
      }

      break;
 800c534:	e023      	b.n	800c57e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c536:	78fb      	ldrb	r3, [r7, #3]
 800c538:	015a      	lsls	r2, r3, #5
 800c53a:	693b      	ldr	r3, [r7, #16]
 800c53c:	4413      	add	r3, r2
 800c53e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c542:	461a      	mov	r2, r3
 800c544:	f240 2325 	movw	r3, #549	; 0x225
 800c548:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c54a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	da17      	bge.n	800c582 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800c552:	78fb      	ldrb	r3, [r7, #3]
 800c554:	015a      	lsls	r2, r3, #5
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	4413      	add	r3, r2
 800c55a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c55e:	68db      	ldr	r3, [r3, #12]
 800c560:	78fa      	ldrb	r2, [r7, #3]
 800c562:	0151      	lsls	r1, r2, #5
 800c564:	693a      	ldr	r2, [r7, #16]
 800c566:	440a      	add	r2, r1
 800c568:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c56c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800c570:	60d3      	str	r3, [r2, #12]
      }
      break;
 800c572:	e006      	b.n	800c582 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800c574:	2301      	movs	r3, #1
 800c576:	77fb      	strb	r3, [r7, #31]
      break;
 800c578:	e004      	b.n	800c584 <USB_HC_Init+0x14c>
      break;
 800c57a:	bf00      	nop
 800c57c:	e002      	b.n	800c584 <USB_HC_Init+0x14c>
      break;
 800c57e:	bf00      	nop
 800c580:	e000      	b.n	800c584 <USB_HC_Init+0x14c>
      break;
 800c582:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c58a:	699a      	ldr	r2, [r3, #24]
 800c58c:	78fb      	ldrb	r3, [r7, #3]
 800c58e:	f003 030f 	and.w	r3, r3, #15
 800c592:	2101      	movs	r1, #1
 800c594:	fa01 f303 	lsl.w	r3, r1, r3
 800c598:	6939      	ldr	r1, [r7, #16]
 800c59a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c59e:	4313      	orrs	r3, r2
 800c5a0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	699b      	ldr	r3, [r3, #24]
 800c5a6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800c5ae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	da03      	bge.n	800c5be <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800c5b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c5ba:	61bb      	str	r3, [r7, #24]
 800c5bc:	e001      	b.n	800c5c2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f7ff ff0f 	bl	800c3e6 <USB_GetHostSpeed>
 800c5c8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800c5ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c5ce:	2b02      	cmp	r3, #2
 800c5d0:	d106      	bne.n	800c5e0 <USB_HC_Init+0x1a8>
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	2b02      	cmp	r3, #2
 800c5d6:	d003      	beq.n	800c5e0 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800c5d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c5dc:	617b      	str	r3, [r7, #20]
 800c5de:	e001      	b.n	800c5e4 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c5e4:	787b      	ldrb	r3, [r7, #1]
 800c5e6:	059b      	lsls	r3, r3, #22
 800c5e8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c5ec:	78bb      	ldrb	r3, [r7, #2]
 800c5ee:	02db      	lsls	r3, r3, #11
 800c5f0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c5f4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c5f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c5fa:	049b      	lsls	r3, r3, #18
 800c5fc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c600:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c602:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c604:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c608:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c60a:	69bb      	ldr	r3, [r7, #24]
 800c60c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c60e:	78fb      	ldrb	r3, [r7, #3]
 800c610:	0159      	lsls	r1, r3, #5
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	440b      	add	r3, r1
 800c616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c61a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c61c:	697b      	ldr	r3, [r7, #20]
 800c61e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c620:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800c622:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c626:	2b03      	cmp	r3, #3
 800c628:	d10f      	bne.n	800c64a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800c62a:	78fb      	ldrb	r3, [r7, #3]
 800c62c:	015a      	lsls	r2, r3, #5
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	4413      	add	r3, r2
 800c632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	78fa      	ldrb	r2, [r7, #3]
 800c63a:	0151      	lsls	r1, r2, #5
 800c63c:	693a      	ldr	r2, [r7, #16]
 800c63e:	440a      	add	r2, r1
 800c640:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c644:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c648:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800c64a:	7ffb      	ldrb	r3, [r7, #31]
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3720      	adds	r7, #32
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}

0800c654 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b08c      	sub	sp, #48	; 0x30
 800c658:	af02      	add	r7, sp, #8
 800c65a:	60f8      	str	r0, [r7, #12]
 800c65c:	60b9      	str	r1, [r7, #8]
 800c65e:	4613      	mov	r3, r2
 800c660:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	785b      	ldrb	r3, [r3, #1]
 800c66a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800c66c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c670:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d02d      	beq.n	800c6da <USB_HC_StartXfer+0x86>
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	791b      	ldrb	r3, [r3, #4]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d129      	bne.n	800c6da <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800c686:	79fb      	ldrb	r3, [r7, #7]
 800c688:	2b01      	cmp	r3, #1
 800c68a:	d117      	bne.n	800c6bc <USB_HC_StartXfer+0x68>
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	79db      	ldrb	r3, [r3, #7]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d003      	beq.n	800c69c <USB_HC_StartXfer+0x48>
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	79db      	ldrb	r3, [r3, #7]
 800c698:	2b02      	cmp	r3, #2
 800c69a:	d10f      	bne.n	800c6bc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800c69c:	69fb      	ldr	r3, [r7, #28]
 800c69e:	015a      	lsls	r2, r3, #5
 800c6a0:	6a3b      	ldr	r3, [r7, #32]
 800c6a2:	4413      	add	r3, r2
 800c6a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6a8:	68db      	ldr	r3, [r3, #12]
 800c6aa:	69fa      	ldr	r2, [r7, #28]
 800c6ac:	0151      	lsls	r1, r2, #5
 800c6ae:	6a3a      	ldr	r2, [r7, #32]
 800c6b0:	440a      	add	r2, r1
 800c6b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c6b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6ba:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800c6bc:	79fb      	ldrb	r3, [r7, #7]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d10b      	bne.n	800c6da <USB_HC_StartXfer+0x86>
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	795b      	ldrb	r3, [r3, #5]
 800c6c6:	2b01      	cmp	r3, #1
 800c6c8:	d107      	bne.n	800c6da <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	785b      	ldrb	r3, [r3, #1]
 800c6ce:	4619      	mov	r1, r3
 800c6d0:	68f8      	ldr	r0, [r7, #12]
 800c6d2:	f000 fa2f 	bl	800cb34 <USB_DoPing>
      return HAL_OK;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	e0f8      	b.n	800c8cc <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	695b      	ldr	r3, [r3, #20]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d018      	beq.n	800c714 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	695b      	ldr	r3, [r3, #20]
 800c6e6:	68ba      	ldr	r2, [r7, #8]
 800c6e8:	8912      	ldrh	r2, [r2, #8]
 800c6ea:	4413      	add	r3, r2
 800c6ec:	3b01      	subs	r3, #1
 800c6ee:	68ba      	ldr	r2, [r7, #8]
 800c6f0:	8912      	ldrh	r2, [r2, #8]
 800c6f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800c6f6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800c6f8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c6fa:	8b7b      	ldrh	r3, [r7, #26]
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	d90b      	bls.n	800c718 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800c700:	8b7b      	ldrh	r3, [r7, #26]
 800c702:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c704:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c706:	68ba      	ldr	r2, [r7, #8]
 800c708:	8912      	ldrh	r2, [r2, #8]
 800c70a:	fb02 f203 	mul.w	r2, r2, r3
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	611a      	str	r2, [r3, #16]
 800c712:	e001      	b.n	800c718 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800c714:	2301      	movs	r3, #1
 800c716:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	78db      	ldrb	r3, [r3, #3]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d007      	beq.n	800c730 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c720:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c722:	68ba      	ldr	r2, [r7, #8]
 800c724:	8912      	ldrh	r2, [r2, #8]
 800c726:	fb02 f203 	mul.w	r2, r2, r3
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	611a      	str	r2, [r3, #16]
 800c72e:	e003      	b.n	800c738 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	695a      	ldr	r2, [r3, #20]
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	691b      	ldr	r3, [r3, #16]
 800c73c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c740:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c742:	04d9      	lsls	r1, r3, #19
 800c744:	4b63      	ldr	r3, [pc, #396]	; (800c8d4 <USB_HC_StartXfer+0x280>)
 800c746:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c748:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	7a9b      	ldrb	r3, [r3, #10]
 800c74e:	075b      	lsls	r3, r3, #29
 800c750:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c754:	69f9      	ldr	r1, [r7, #28]
 800c756:	0148      	lsls	r0, r1, #5
 800c758:	6a39      	ldr	r1, [r7, #32]
 800c75a:	4401      	add	r1, r0
 800c75c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c760:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c762:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800c764:	79fb      	ldrb	r3, [r7, #7]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d009      	beq.n	800c77e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	68d9      	ldr	r1, [r3, #12]
 800c76e:	69fb      	ldr	r3, [r7, #28]
 800c770:	015a      	lsls	r2, r3, #5
 800c772:	6a3b      	ldr	r3, [r7, #32]
 800c774:	4413      	add	r3, r2
 800c776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c77a:	460a      	mov	r2, r1
 800c77c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800c77e:	6a3b      	ldr	r3, [r7, #32]
 800c780:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c784:	689b      	ldr	r3, [r3, #8]
 800c786:	f003 0301 	and.w	r3, r3, #1
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	bf0c      	ite	eq
 800c78e:	2301      	moveq	r3, #1
 800c790:	2300      	movne	r3, #0
 800c792:	b2db      	uxtb	r3, r3
 800c794:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800c796:	69fb      	ldr	r3, [r7, #28]
 800c798:	015a      	lsls	r2, r3, #5
 800c79a:	6a3b      	ldr	r3, [r7, #32]
 800c79c:	4413      	add	r3, r2
 800c79e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	69fa      	ldr	r2, [r7, #28]
 800c7a6:	0151      	lsls	r1, r2, #5
 800c7a8:	6a3a      	ldr	r2, [r7, #32]
 800c7aa:	440a      	add	r2, r1
 800c7ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c7b0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c7b4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800c7b6:	69fb      	ldr	r3, [r7, #28]
 800c7b8:	015a      	lsls	r2, r3, #5
 800c7ba:	6a3b      	ldr	r3, [r7, #32]
 800c7bc:	4413      	add	r3, r2
 800c7be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7c2:	681a      	ldr	r2, [r3, #0]
 800c7c4:	7e7b      	ldrb	r3, [r7, #25]
 800c7c6:	075b      	lsls	r3, r3, #29
 800c7c8:	69f9      	ldr	r1, [r7, #28]
 800c7ca:	0148      	lsls	r0, r1, #5
 800c7cc:	6a39      	ldr	r1, [r7, #32]
 800c7ce:	4401      	add	r1, r0
 800c7d0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800c7d4:	4313      	orrs	r3, r2
 800c7d6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800c7d8:	69fb      	ldr	r3, [r7, #28]
 800c7da:	015a      	lsls	r2, r3, #5
 800c7dc:	6a3b      	ldr	r3, [r7, #32]
 800c7de:	4413      	add	r3, r2
 800c7e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c7e8:	693b      	ldr	r3, [r7, #16]
 800c7ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c7ee:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	78db      	ldrb	r3, [r3, #3]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d004      	beq.n	800c802 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800c7f8:	693b      	ldr	r3, [r7, #16]
 800c7fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c7fe:	613b      	str	r3, [r7, #16]
 800c800:	e003      	b.n	800c80a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800c802:	693b      	ldr	r3, [r7, #16]
 800c804:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c808:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c80a:	693b      	ldr	r3, [r7, #16]
 800c80c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c810:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800c812:	69fb      	ldr	r3, [r7, #28]
 800c814:	015a      	lsls	r2, r3, #5
 800c816:	6a3b      	ldr	r3, [r7, #32]
 800c818:	4413      	add	r3, r2
 800c81a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c81e:	461a      	mov	r2, r3
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800c824:	79fb      	ldrb	r3, [r7, #7]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d001      	beq.n	800c82e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800c82a:	2300      	movs	r3, #0
 800c82c:	e04e      	b.n	800c8cc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	78db      	ldrb	r3, [r3, #3]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d149      	bne.n	800c8ca <USB_HC_StartXfer+0x276>
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	695b      	ldr	r3, [r3, #20]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d045      	beq.n	800c8ca <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	79db      	ldrb	r3, [r3, #7]
 800c842:	2b03      	cmp	r3, #3
 800c844:	d830      	bhi.n	800c8a8 <USB_HC_StartXfer+0x254>
 800c846:	a201      	add	r2, pc, #4	; (adr r2, 800c84c <USB_HC_StartXfer+0x1f8>)
 800c848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c84c:	0800c85d 	.word	0x0800c85d
 800c850:	0800c881 	.word	0x0800c881
 800c854:	0800c85d 	.word	0x0800c85d
 800c858:	0800c881 	.word	0x0800c881
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	695b      	ldr	r3, [r3, #20]
 800c860:	3303      	adds	r3, #3
 800c862:	089b      	lsrs	r3, r3, #2
 800c864:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800c866:	8afa      	ldrh	r2, [r7, #22]
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c86c:	b29b      	uxth	r3, r3
 800c86e:	429a      	cmp	r2, r3
 800c870:	d91c      	bls.n	800c8ac <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	699b      	ldr	r3, [r3, #24]
 800c876:	f043 0220 	orr.w	r2, r3, #32
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	619a      	str	r2, [r3, #24]
        }
        break;
 800c87e:	e015      	b.n	800c8ac <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	695b      	ldr	r3, [r3, #20]
 800c884:	3303      	adds	r3, #3
 800c886:	089b      	lsrs	r3, r3, #2
 800c888:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800c88a:	8afa      	ldrh	r2, [r7, #22]
 800c88c:	6a3b      	ldr	r3, [r7, #32]
 800c88e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c892:	691b      	ldr	r3, [r3, #16]
 800c894:	b29b      	uxth	r3, r3
 800c896:	429a      	cmp	r2, r3
 800c898:	d90a      	bls.n	800c8b0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	699b      	ldr	r3, [r3, #24]
 800c89e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	619a      	str	r2, [r3, #24]
        }
        break;
 800c8a6:	e003      	b.n	800c8b0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800c8a8:	bf00      	nop
 800c8aa:	e002      	b.n	800c8b2 <USB_HC_StartXfer+0x25e>
        break;
 800c8ac:	bf00      	nop
 800c8ae:	e000      	b.n	800c8b2 <USB_HC_StartXfer+0x25e>
        break;
 800c8b0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	68d9      	ldr	r1, [r3, #12]
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	785a      	ldrb	r2, [r3, #1]
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	695b      	ldr	r3, [r3, #20]
 800c8be:	b29b      	uxth	r3, r3
 800c8c0:	2000      	movs	r0, #0
 800c8c2:	9000      	str	r0, [sp, #0]
 800c8c4:	68f8      	ldr	r0, [r7, #12]
 800c8c6:	f7ff fb79 	bl	800bfbc <USB_WritePacket>
  }

  return HAL_OK;
 800c8ca:	2300      	movs	r3, #0
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3728      	adds	r7, #40	; 0x28
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}
 800c8d4:	1ff80000 	.word	0x1ff80000

0800c8d8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b085      	sub	sp, #20
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c8ea:	695b      	ldr	r3, [r3, #20]
 800c8ec:	b29b      	uxth	r3, r3
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	3714      	adds	r7, #20
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f8:	4770      	bx	lr

0800c8fa <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800c8fa:	b480      	push	{r7}
 800c8fc:	b089      	sub	sp, #36	; 0x24
 800c8fe:	af00      	add	r7, sp, #0
 800c900:	6078      	str	r0, [r7, #4]
 800c902:	460b      	mov	r3, r1
 800c904:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800c90a:	78fb      	ldrb	r3, [r7, #3]
 800c90c:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800c90e:	2300      	movs	r3, #0
 800c910:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	015a      	lsls	r2, r3, #5
 800c916:	69bb      	ldr	r3, [r7, #24]
 800c918:	4413      	add	r3, r2
 800c91a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	0c9b      	lsrs	r3, r3, #18
 800c922:	f003 0303 	and.w	r3, r3, #3
 800c926:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	015a      	lsls	r2, r3, #5
 800c92c:	69bb      	ldr	r3, [r7, #24]
 800c92e:	4413      	add	r3, r2
 800c930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	0fdb      	lsrs	r3, r3, #31
 800c938:	f003 0301 	and.w	r3, r3, #1
 800c93c:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	689b      	ldr	r3, [r3, #8]
 800c942:	f003 0320 	and.w	r3, r3, #32
 800c946:	2b20      	cmp	r3, #32
 800c948:	d104      	bne.n	800c954 <USB_HC_Halt+0x5a>
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d101      	bne.n	800c954 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800c950:	2300      	movs	r3, #0
 800c952:	e0e8      	b.n	800cb26 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800c954:	693b      	ldr	r3, [r7, #16]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d002      	beq.n	800c960 <USB_HC_Halt+0x66>
 800c95a:	693b      	ldr	r3, [r7, #16]
 800c95c:	2b02      	cmp	r3, #2
 800c95e:	d173      	bne.n	800ca48 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c960:	697b      	ldr	r3, [r7, #20]
 800c962:	015a      	lsls	r2, r3, #5
 800c964:	69bb      	ldr	r3, [r7, #24]
 800c966:	4413      	add	r3, r2
 800c968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	697a      	ldr	r2, [r7, #20]
 800c970:	0151      	lsls	r1, r2, #5
 800c972:	69ba      	ldr	r2, [r7, #24]
 800c974:	440a      	add	r2, r1
 800c976:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c97a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c97e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	689b      	ldr	r3, [r3, #8]
 800c984:	f003 0320 	and.w	r3, r3, #32
 800c988:	2b00      	cmp	r3, #0
 800c98a:	f040 80cb 	bne.w	800cb24 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c992:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c996:	2b00      	cmp	r3, #0
 800c998:	d143      	bne.n	800ca22 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c99a:	697b      	ldr	r3, [r7, #20]
 800c99c:	015a      	lsls	r2, r3, #5
 800c99e:	69bb      	ldr	r3, [r7, #24]
 800c9a0:	4413      	add	r3, r2
 800c9a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	697a      	ldr	r2, [r7, #20]
 800c9aa:	0151      	lsls	r1, r2, #5
 800c9ac:	69ba      	ldr	r2, [r7, #24]
 800c9ae:	440a      	add	r2, r1
 800c9b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c9b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c9b8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	015a      	lsls	r2, r3, #5
 800c9be:	69bb      	ldr	r3, [r7, #24]
 800c9c0:	4413      	add	r3, r2
 800c9c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	697a      	ldr	r2, [r7, #20]
 800c9ca:	0151      	lsls	r1, r2, #5
 800c9cc:	69ba      	ldr	r2, [r7, #24]
 800c9ce:	440a      	add	r2, r1
 800c9d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c9d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c9d8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	015a      	lsls	r2, r3, #5
 800c9de:	69bb      	ldr	r3, [r7, #24]
 800c9e0:	4413      	add	r3, r2
 800c9e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	697a      	ldr	r2, [r7, #20]
 800c9ea:	0151      	lsls	r1, r2, #5
 800c9ec:	69ba      	ldr	r2, [r7, #24]
 800c9ee:	440a      	add	r2, r1
 800c9f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c9f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c9f8:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800c9fa:	69fb      	ldr	r3, [r7, #28]
 800c9fc:	3301      	adds	r3, #1
 800c9fe:	61fb      	str	r3, [r7, #28]
 800ca00:	69fb      	ldr	r3, [r7, #28]
 800ca02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ca06:	d81d      	bhi.n	800ca44 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	015a      	lsls	r2, r3, #5
 800ca0c:	69bb      	ldr	r3, [r7, #24]
 800ca0e:	4413      	add	r3, r2
 800ca10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca1e:	d0ec      	beq.n	800c9fa <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ca20:	e080      	b.n	800cb24 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	015a      	lsls	r2, r3, #5
 800ca26:	69bb      	ldr	r3, [r7, #24]
 800ca28:	4413      	add	r3, r2
 800ca2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	697a      	ldr	r2, [r7, #20]
 800ca32:	0151      	lsls	r1, r2, #5
 800ca34:	69ba      	ldr	r2, [r7, #24]
 800ca36:	440a      	add	r2, r1
 800ca38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ca3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ca40:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ca42:	e06f      	b.n	800cb24 <USB_HC_Halt+0x22a>
            break;
 800ca44:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ca46:	e06d      	b.n	800cb24 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	015a      	lsls	r2, r3, #5
 800ca4c:	69bb      	ldr	r3, [r7, #24]
 800ca4e:	4413      	add	r3, r2
 800ca50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	697a      	ldr	r2, [r7, #20]
 800ca58:	0151      	lsls	r1, r2, #5
 800ca5a:	69ba      	ldr	r2, [r7, #24]
 800ca5c:	440a      	add	r2, r1
 800ca5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ca62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ca66:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ca68:	69bb      	ldr	r3, [r7, #24]
 800ca6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ca6e:	691b      	ldr	r3, [r3, #16]
 800ca70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d143      	bne.n	800cb00 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	015a      	lsls	r2, r3, #5
 800ca7c:	69bb      	ldr	r3, [r7, #24]
 800ca7e:	4413      	add	r3, r2
 800ca80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	697a      	ldr	r2, [r7, #20]
 800ca88:	0151      	lsls	r1, r2, #5
 800ca8a:	69ba      	ldr	r2, [r7, #24]
 800ca8c:	440a      	add	r2, r1
 800ca8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ca92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ca96:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ca98:	697b      	ldr	r3, [r7, #20]
 800ca9a:	015a      	lsls	r2, r3, #5
 800ca9c:	69bb      	ldr	r3, [r7, #24]
 800ca9e:	4413      	add	r3, r2
 800caa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	697a      	ldr	r2, [r7, #20]
 800caa8:	0151      	lsls	r1, r2, #5
 800caaa:	69ba      	ldr	r2, [r7, #24]
 800caac:	440a      	add	r2, r1
 800caae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cab2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cab6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	015a      	lsls	r2, r3, #5
 800cabc:	69bb      	ldr	r3, [r7, #24]
 800cabe:	4413      	add	r3, r2
 800cac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	697a      	ldr	r2, [r7, #20]
 800cac8:	0151      	lsls	r1, r2, #5
 800caca:	69ba      	ldr	r2, [r7, #24]
 800cacc:	440a      	add	r2, r1
 800cace:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cad2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cad6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800cad8:	69fb      	ldr	r3, [r7, #28]
 800cada:	3301      	adds	r3, #1
 800cadc:	61fb      	str	r3, [r7, #28]
 800cade:	69fb      	ldr	r3, [r7, #28]
 800cae0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cae4:	d81d      	bhi.n	800cb22 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	015a      	lsls	r2, r3, #5
 800caea:	69bb      	ldr	r3, [r7, #24]
 800caec:	4413      	add	r3, r2
 800caee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800caf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cafc:	d0ec      	beq.n	800cad8 <USB_HC_Halt+0x1de>
 800cafe:	e011      	b.n	800cb24 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cb00:	697b      	ldr	r3, [r7, #20]
 800cb02:	015a      	lsls	r2, r3, #5
 800cb04:	69bb      	ldr	r3, [r7, #24]
 800cb06:	4413      	add	r3, r2
 800cb08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	697a      	ldr	r2, [r7, #20]
 800cb10:	0151      	lsls	r1, r2, #5
 800cb12:	69ba      	ldr	r2, [r7, #24]
 800cb14:	440a      	add	r2, r1
 800cb16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cb1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cb1e:	6013      	str	r3, [r2, #0]
 800cb20:	e000      	b.n	800cb24 <USB_HC_Halt+0x22a>
          break;
 800cb22:	bf00      	nop
    }
  }

  return HAL_OK;
 800cb24:	2300      	movs	r3, #0
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3724      	adds	r7, #36	; 0x24
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb30:	4770      	bx	lr
	...

0800cb34 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800cb34:	b480      	push	{r7}
 800cb36:	b087      	sub	sp, #28
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
 800cb3c:	460b      	mov	r3, r1
 800cb3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800cb44:	78fb      	ldrb	r3, [r7, #3]
 800cb46:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800cb48:	2301      	movs	r3, #1
 800cb4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	04da      	lsls	r2, r3, #19
 800cb50:	4b15      	ldr	r3, [pc, #84]	; (800cba8 <USB_DoPing+0x74>)
 800cb52:	4013      	ands	r3, r2
 800cb54:	693a      	ldr	r2, [r7, #16]
 800cb56:	0151      	lsls	r1, r2, #5
 800cb58:	697a      	ldr	r2, [r7, #20]
 800cb5a:	440a      	add	r2, r1
 800cb5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cb60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cb64:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	015a      	lsls	r2, r3, #5
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	4413      	add	r3, r2
 800cb6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cb7c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800cb7e:	68bb      	ldr	r3, [r7, #8]
 800cb80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cb84:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800cb86:	693b      	ldr	r3, [r7, #16]
 800cb88:	015a      	lsls	r2, r3, #5
 800cb8a:	697b      	ldr	r3, [r7, #20]
 800cb8c:	4413      	add	r3, r2
 800cb8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb92:	461a      	mov	r2, r3
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800cb98:	2300      	movs	r3, #0
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	371c      	adds	r7, #28
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba4:	4770      	bx	lr
 800cba6:	bf00      	nop
 800cba8:	1ff80000 	.word	0x1ff80000

0800cbac <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b086      	sub	sp, #24
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f7ff f97a 	bl	800beb6 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800cbc2:	2110      	movs	r1, #16
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	f7ff f9b1 	bl	800bf2c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f7ff f9d4 	bl	800bf78 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	613b      	str	r3, [r7, #16]
 800cbd4:	e01f      	b.n	800cc16 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	015a      	lsls	r2, r3, #5
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	4413      	add	r3, r2
 800cbde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800cbe6:	68bb      	ldr	r3, [r7, #8]
 800cbe8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cbec:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cbf4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cbfc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800cbfe:	693b      	ldr	r3, [r7, #16]
 800cc00:	015a      	lsls	r2, r3, #5
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	4413      	add	r3, r2
 800cc06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc0a:	461a      	mov	r2, r3
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	3301      	adds	r3, #1
 800cc14:	613b      	str	r3, [r7, #16]
 800cc16:	693b      	ldr	r3, [r7, #16]
 800cc18:	2b0f      	cmp	r3, #15
 800cc1a:	d9dc      	bls.n	800cbd6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	613b      	str	r3, [r7, #16]
 800cc20:	e034      	b.n	800cc8c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800cc22:	693b      	ldr	r3, [r7, #16]
 800cc24:	015a      	lsls	r2, r3, #5
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	4413      	add	r3, r2
 800cc2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cc38:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cc40:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cc48:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800cc4a:	693b      	ldr	r3, [r7, #16]
 800cc4c:	015a      	lsls	r2, r3, #5
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	4413      	add	r3, r2
 800cc52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc56:	461a      	mov	r2, r3
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800cc5c:	697b      	ldr	r3, [r7, #20]
 800cc5e:	3301      	adds	r3, #1
 800cc60:	617b      	str	r3, [r7, #20]
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cc68:	d80c      	bhi.n	800cc84 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	015a      	lsls	r2, r3, #5
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	4413      	add	r3, r2
 800cc72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc80:	d0ec      	beq.n	800cc5c <USB_StopHost+0xb0>
 800cc82:	e000      	b.n	800cc86 <USB_StopHost+0xda>
        break;
 800cc84:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800cc86:	693b      	ldr	r3, [r7, #16]
 800cc88:	3301      	adds	r3, #1
 800cc8a:	613b      	str	r3, [r7, #16]
 800cc8c:	693b      	ldr	r3, [r7, #16]
 800cc8e:	2b0f      	cmp	r3, #15
 800cc90:	d9c7      	bls.n	800cc22 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cc98:	461a      	mov	r2, r3
 800cc9a:	f04f 33ff 	mov.w	r3, #4294967295
 800cc9e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f04f 32ff 	mov.w	r2, #4294967295
 800cca6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f7ff f8f3 	bl	800be94 <USB_EnableGlobalInt>

  return HAL_OK;
 800ccae:	2300      	movs	r3, #0
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3718      	adds	r7, #24
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}

0800ccb8 <DEV_SPI_WRite>:
	HAL_Delay(xms);
}


void DEV_SPI_WRite(UBYTE _dat)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b082      	sub	sp, #8
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&DEV_SPI, (uint8_t *)&_dat, 1, 500);
 800ccc2:	1df9      	adds	r1, r7, #7
 800ccc4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800ccc8:	2201      	movs	r2, #1
 800ccca:	4803      	ldr	r0, [pc, #12]	; (800ccd8 <DEV_SPI_WRite+0x20>)
 800cccc:	f7fc fe76 	bl	80099bc <HAL_SPI_Transmit>
}
 800ccd0:	bf00      	nop
 800ccd2:	3708      	adds	r7, #8
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}
 800ccd8:	2400a5bc 	.word	0x2400a5bc

0800ccdc <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	af00      	add	r7, sp, #0
    DEV_Digital_Write(DEV_DC_PIN, 1);
 800cce0:	2201      	movs	r2, #1
 800cce2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cce6:	480a      	ldr	r0, [pc, #40]	; (800cd10 <DEV_Module_Init+0x34>)
 800cce8:	f7f8 fadc 	bl	80052a4 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_CS_PIN, 1);
 800ccec:	2201      	movs	r2, #1
 800ccee:	2140      	movs	r1, #64	; 0x40
 800ccf0:	4807      	ldr	r0, [pc, #28]	; (800cd10 <DEV_Module_Init+0x34>)
 800ccf2:	f7f8 fad7 	bl	80052a4 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_RST_PIN, 1);
 800ccf6:	2201      	movs	r2, #1
 800ccf8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ccfc:	4805      	ldr	r0, [pc, #20]	; (800cd14 <DEV_Module_Init+0x38>)
 800ccfe:	f7f8 fad1 	bl	80052a4 <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&DEV_BL_TIM, DEV_BL_CH);
 800cd02:	2100      	movs	r1, #0
 800cd04:	4804      	ldr	r0, [pc, #16]	; (800cd18 <DEV_Module_Init+0x3c>)
 800cd06:	f7fd f98b 	bl	800a020 <HAL_TIM_PWM_Start>
		return 0;
 800cd0a:	2300      	movs	r3, #0
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	bd80      	pop	{r7, pc}
 800cd10:	58021800 	.word	0x58021800
 800cd14:	58021400 	.word	0x58021400
 800cd18:	2400a644 	.word	0x2400a644

0800cd1c <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 800cd1c:	b590      	push	{r4, r7, lr}
 800cd1e:	b083      	sub	sp, #12
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	4604      	mov	r4, r0
 800cd24:	4608      	mov	r0, r1
 800cd26:	4611      	mov	r1, r2
 800cd28:	461a      	mov	r2, r3
 800cd2a:	4623      	mov	r3, r4
 800cd2c:	80fb      	strh	r3, [r7, #6]
 800cd2e:	4603      	mov	r3, r0
 800cd30:	80bb      	strh	r3, [r7, #4]
 800cd32:	460b      	mov	r3, r1
 800cd34:	807b      	strh	r3, [r7, #2]
 800cd36:	4613      	mov	r3, r2
 800cd38:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 800cd3a:	4a1c      	ldr	r2, [pc, #112]	; (800cdac <Paint_NewImage+0x90>)
 800cd3c:	88fb      	ldrh	r3, [r7, #6]
 800cd3e:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 800cd40:	4a1a      	ldr	r2, [pc, #104]	; (800cdac <Paint_NewImage+0x90>)
 800cd42:	88bb      	ldrh	r3, [r7, #4]
 800cd44:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 800cd46:	4a19      	ldr	r2, [pc, #100]	; (800cdac <Paint_NewImage+0x90>)
 800cd48:	883b      	ldrh	r3, [r7, #0]
 800cd4a:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 800cd4c:	4a17      	ldr	r2, [pc, #92]	; (800cdac <Paint_NewImage+0x90>)
 800cd4e:	88fb      	ldrh	r3, [r7, #6]
 800cd50:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 800cd52:	4a16      	ldr	r2, [pc, #88]	; (800cdac <Paint_NewImage+0x90>)
 800cd54:	88bb      	ldrh	r3, [r7, #4]
 800cd56:	8293      	strh	r3, [r2, #20]
    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
 800cd58:	4b14      	ldr	r3, [pc, #80]	; (800cdac <Paint_NewImage+0x90>)
 800cd5a:	8a5b      	ldrh	r3, [r3, #18]
 800cd5c:	b29b      	uxth	r3, r3
 800cd5e:	4619      	mov	r1, r3
 800cd60:	4b12      	ldr	r3, [pc, #72]	; (800cdac <Paint_NewImage+0x90>)
 800cd62:	8a9b      	ldrh	r3, [r3, #20]
 800cd64:	b29b      	uxth	r3, r3
 800cd66:	461a      	mov	r2, r3
 800cd68:	4811      	ldr	r0, [pc, #68]	; (800cdb0 <Paint_NewImage+0x94>)
 800cd6a:	f006 f9cb 	bl	8013104 <iprintf>
   
    Paint.Rotate = Rotate;
 800cd6e:	4a0f      	ldr	r2, [pc, #60]	; (800cdac <Paint_NewImage+0x90>)
 800cd70:	887b      	ldrh	r3, [r7, #2]
 800cd72:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 800cd74:	4b0d      	ldr	r3, [pc, #52]	; (800cdac <Paint_NewImage+0x90>)
 800cd76:	2200      	movs	r2, #0
 800cd78:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 800cd7a:	887b      	ldrh	r3, [r7, #2]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d002      	beq.n	800cd86 <Paint_NewImage+0x6a>
 800cd80:	887b      	ldrh	r3, [r7, #2]
 800cd82:	2bb4      	cmp	r3, #180	; 0xb4
 800cd84:	d106      	bne.n	800cd94 <Paint_NewImage+0x78>
        Paint.Width = Width;
 800cd86:	4a09      	ldr	r2, [pc, #36]	; (800cdac <Paint_NewImage+0x90>)
 800cd88:	88fb      	ldrh	r3, [r7, #6]
 800cd8a:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 800cd8c:	4a07      	ldr	r2, [pc, #28]	; (800cdac <Paint_NewImage+0x90>)
 800cd8e:	88bb      	ldrh	r3, [r7, #4]
 800cd90:	80d3      	strh	r3, [r2, #6]
 800cd92:	e006      	b.n	800cda2 <Paint_NewImage+0x86>
    } else {
        Paint.Width = Height;
 800cd94:	4a05      	ldr	r2, [pc, #20]	; (800cdac <Paint_NewImage+0x90>)
 800cd96:	88bb      	ldrh	r3, [r7, #4]
 800cd98:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 800cd9a:	4a04      	ldr	r2, [pc, #16]	; (800cdac <Paint_NewImage+0x90>)
 800cd9c:	88fb      	ldrh	r3, [r7, #6]
 800cd9e:	80d3      	strh	r3, [r2, #6]
    }
}
 800cda0:	bf00      	nop
 800cda2:	bf00      	nop
 800cda4:	370c      	adds	r7, #12
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd90      	pop	{r4, r7, pc}
 800cdaa:	bf00      	nop
 800cdac:	2400a830 	.word	0x2400a830
 800cdb0:	080167c0 	.word	0x080167c0

0800cdb4 <Paint_SetClearFuntion>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 800cdb4:	b480      	push	{r7}
 800cdb6:	b083      	sub	sp, #12
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 800cdbc:	4a04      	ldr	r2, [pc, #16]	; (800cdd0 <Paint_SetClearFuntion+0x1c>)
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6013      	str	r3, [r2, #0]
}
 800cdc2:	bf00      	nop
 800cdc4:	370c      	adds	r7, #12
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdcc:	4770      	bx	lr
 800cdce:	bf00      	nop
 800cdd0:	2400a848 	.word	0x2400a848

0800cdd4 <Paint_SetDisplayFuntion>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b083      	sub	sp, #12
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 800cddc:	4a04      	ldr	r2, [pc, #16]	; (800cdf0 <Paint_SetDisplayFuntion+0x1c>)
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6013      	str	r3, [r2, #0]
}
 800cde2:	bf00      	nop
 800cde4:	370c      	adds	r7, #12
 800cde6:	46bd      	mov	sp, r7
 800cde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdec:	4770      	bx	lr
 800cdee:	bf00      	nop
 800cdf0:	2400a82c 	.word	0x2400a82c

0800cdf4 <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b084      	sub	sp, #16
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	80fb      	strh	r3, [r7, #6]
 800cdfe:	460b      	mov	r3, r1
 800ce00:	80bb      	strh	r3, [r7, #4]
 800ce02:	4613      	mov	r3, r2
 800ce04:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 800ce06:	4b50      	ldr	r3, [pc, #320]	; (800cf48 <Paint_SetPixel+0x154>)
 800ce08:	889b      	ldrh	r3, [r3, #4]
 800ce0a:	b29b      	uxth	r3, r3
 800ce0c:	88fa      	ldrh	r2, [r7, #6]
 800ce0e:	429a      	cmp	r2, r3
 800ce10:	d805      	bhi.n	800ce1e <Paint_SetPixel+0x2a>
 800ce12:	4b4d      	ldr	r3, [pc, #308]	; (800cf48 <Paint_SetPixel+0x154>)
 800ce14:	88db      	ldrh	r3, [r3, #6]
 800ce16:	b29b      	uxth	r3, r3
 800ce18:	88ba      	ldrh	r2, [r7, #4]
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	d903      	bls.n	800ce26 <Paint_SetPixel+0x32>
        Debug("Exceeding display boundaries\r\n");
 800ce1e:	484b      	ldr	r0, [pc, #300]	; (800cf4c <Paint_SetPixel+0x158>)
 800ce20:	f006 f9f6 	bl	8013210 <puts>
        return;
 800ce24:	e08c      	b.n	800cf40 <Paint_SetPixel+0x14c>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 800ce26:	4b48      	ldr	r3, [pc, #288]	; (800cf48 <Paint_SetPixel+0x154>)
 800ce28:	89db      	ldrh	r3, [r3, #14]
 800ce2a:	b29b      	uxth	r3, r3
 800ce2c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800ce30:	d02d      	beq.n	800ce8e <Paint_SetPixel+0x9a>
 800ce32:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800ce36:	f300 8080 	bgt.w	800cf3a <Paint_SetPixel+0x146>
 800ce3a:	2bb4      	cmp	r3, #180	; 0xb4
 800ce3c:	d016      	beq.n	800ce6c <Paint_SetPixel+0x78>
 800ce3e:	2bb4      	cmp	r3, #180	; 0xb4
 800ce40:	dc7b      	bgt.n	800cf3a <Paint_SetPixel+0x146>
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d002      	beq.n	800ce4c <Paint_SetPixel+0x58>
 800ce46:	2b5a      	cmp	r3, #90	; 0x5a
 800ce48:	d005      	beq.n	800ce56 <Paint_SetPixel+0x62>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 800ce4a:	e076      	b.n	800cf3a <Paint_SetPixel+0x146>
        X = Xpoint;
 800ce4c:	88fb      	ldrh	r3, [r7, #6]
 800ce4e:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 800ce50:	88bb      	ldrh	r3, [r7, #4]
 800ce52:	81bb      	strh	r3, [r7, #12]
        break;
 800ce54:	e026      	b.n	800cea4 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Ypoint - 1;
 800ce56:	4b3c      	ldr	r3, [pc, #240]	; (800cf48 <Paint_SetPixel+0x154>)
 800ce58:	891b      	ldrh	r3, [r3, #8]
 800ce5a:	b29a      	uxth	r2, r3
 800ce5c:	88bb      	ldrh	r3, [r7, #4]
 800ce5e:	1ad3      	subs	r3, r2, r3
 800ce60:	b29b      	uxth	r3, r3
 800ce62:	3b01      	subs	r3, #1
 800ce64:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 800ce66:	88fb      	ldrh	r3, [r7, #6]
 800ce68:	81bb      	strh	r3, [r7, #12]
        break;
 800ce6a:	e01b      	b.n	800cea4 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Xpoint - 1;
 800ce6c:	4b36      	ldr	r3, [pc, #216]	; (800cf48 <Paint_SetPixel+0x154>)
 800ce6e:	891b      	ldrh	r3, [r3, #8]
 800ce70:	b29a      	uxth	r2, r3
 800ce72:	88fb      	ldrh	r3, [r7, #6]
 800ce74:	1ad3      	subs	r3, r2, r3
 800ce76:	b29b      	uxth	r3, r3
 800ce78:	3b01      	subs	r3, #1
 800ce7a:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 800ce7c:	4b32      	ldr	r3, [pc, #200]	; (800cf48 <Paint_SetPixel+0x154>)
 800ce7e:	895b      	ldrh	r3, [r3, #10]
 800ce80:	b29a      	uxth	r2, r3
 800ce82:	88bb      	ldrh	r3, [r7, #4]
 800ce84:	1ad3      	subs	r3, r2, r3
 800ce86:	b29b      	uxth	r3, r3
 800ce88:	3b01      	subs	r3, #1
 800ce8a:	81bb      	strh	r3, [r7, #12]
        break;
 800ce8c:	e00a      	b.n	800cea4 <Paint_SetPixel+0xb0>
        X = Ypoint;
 800ce8e:	88bb      	ldrh	r3, [r7, #4]
 800ce90:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 800ce92:	4b2d      	ldr	r3, [pc, #180]	; (800cf48 <Paint_SetPixel+0x154>)
 800ce94:	895b      	ldrh	r3, [r3, #10]
 800ce96:	b29a      	uxth	r2, r3
 800ce98:	88fb      	ldrh	r3, [r7, #6]
 800ce9a:	1ad3      	subs	r3, r2, r3
 800ce9c:	b29b      	uxth	r3, r3
 800ce9e:	3b01      	subs	r3, #1
 800cea0:	81bb      	strh	r3, [r7, #12]
        break;
 800cea2:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 800cea4:	4b28      	ldr	r3, [pc, #160]	; (800cf48 <Paint_SetPixel+0x154>)
 800cea6:	8a1b      	ldrh	r3, [r3, #16]
 800cea8:	b29b      	uxth	r3, r3
 800ceaa:	2b03      	cmp	r3, #3
 800ceac:	d847      	bhi.n	800cf3e <Paint_SetPixel+0x14a>
 800ceae:	a201      	add	r2, pc, #4	; (adr r2, 800ceb4 <Paint_SetPixel+0xc0>)
 800ceb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceb4:	0800cf0b 	.word	0x0800cf0b
 800ceb8:	0800cec5 	.word	0x0800cec5
 800cebc:	0800ced7 	.word	0x0800ced7
 800cec0:	0800cee9 	.word	0x0800cee9
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 800cec4:	4b20      	ldr	r3, [pc, #128]	; (800cf48 <Paint_SetPixel+0x154>)
 800cec6:	891b      	ldrh	r3, [r3, #8]
 800cec8:	b29a      	uxth	r2, r3
 800ceca:	89fb      	ldrh	r3, [r7, #14]
 800cecc:	1ad3      	subs	r3, r2, r3
 800cece:	b29b      	uxth	r3, r3
 800ced0:	3b01      	subs	r3, #1
 800ced2:	81fb      	strh	r3, [r7, #14]
        break;
 800ced4:	e01a      	b.n	800cf0c <Paint_SetPixel+0x118>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 800ced6:	4b1c      	ldr	r3, [pc, #112]	; (800cf48 <Paint_SetPixel+0x154>)
 800ced8:	895b      	ldrh	r3, [r3, #10]
 800ceda:	b29a      	uxth	r2, r3
 800cedc:	89bb      	ldrh	r3, [r7, #12]
 800cede:	1ad3      	subs	r3, r2, r3
 800cee0:	b29b      	uxth	r3, r3
 800cee2:	3b01      	subs	r3, #1
 800cee4:	81bb      	strh	r3, [r7, #12]
        break;
 800cee6:	e011      	b.n	800cf0c <Paint_SetPixel+0x118>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 800cee8:	4b17      	ldr	r3, [pc, #92]	; (800cf48 <Paint_SetPixel+0x154>)
 800ceea:	891b      	ldrh	r3, [r3, #8]
 800ceec:	b29a      	uxth	r2, r3
 800ceee:	89fb      	ldrh	r3, [r7, #14]
 800cef0:	1ad3      	subs	r3, r2, r3
 800cef2:	b29b      	uxth	r3, r3
 800cef4:	3b01      	subs	r3, #1
 800cef6:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 800cef8:	4b13      	ldr	r3, [pc, #76]	; (800cf48 <Paint_SetPixel+0x154>)
 800cefa:	895b      	ldrh	r3, [r3, #10]
 800cefc:	b29a      	uxth	r2, r3
 800cefe:	89bb      	ldrh	r3, [r7, #12]
 800cf00:	1ad3      	subs	r3, r2, r3
 800cf02:	b29b      	uxth	r3, r3
 800cf04:	3b01      	subs	r3, #1
 800cf06:	81bb      	strh	r3, [r7, #12]
        break;
 800cf08:	e000      	b.n	800cf0c <Paint_SetPixel+0x118>
        break;
 800cf0a:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 800cf0c:	4b0e      	ldr	r3, [pc, #56]	; (800cf48 <Paint_SetPixel+0x154>)
 800cf0e:	891b      	ldrh	r3, [r3, #8]
 800cf10:	b29b      	uxth	r3, r3
 800cf12:	89fa      	ldrh	r2, [r7, #14]
 800cf14:	429a      	cmp	r2, r3
 800cf16:	d805      	bhi.n	800cf24 <Paint_SetPixel+0x130>
 800cf18:	4b0b      	ldr	r3, [pc, #44]	; (800cf48 <Paint_SetPixel+0x154>)
 800cf1a:	895b      	ldrh	r3, [r3, #10]
 800cf1c:	b29b      	uxth	r3, r3
 800cf1e:	89ba      	ldrh	r2, [r7, #12]
 800cf20:	429a      	cmp	r2, r3
 800cf22:	d903      	bls.n	800cf2c <Paint_SetPixel+0x138>
        Debug("Exceeding display boundaries\r\n");
 800cf24:	4809      	ldr	r0, [pc, #36]	; (800cf4c <Paint_SetPixel+0x158>)
 800cf26:	f006 f973 	bl	8013210 <puts>
        return;
 800cf2a:	e009      	b.n	800cf40 <Paint_SetPixel+0x14c>
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 800cf2c:	4b08      	ldr	r3, [pc, #32]	; (800cf50 <Paint_SetPixel+0x15c>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	887a      	ldrh	r2, [r7, #2]
 800cf32:	89b9      	ldrh	r1, [r7, #12]
 800cf34:	89f8      	ldrh	r0, [r7, #14]
 800cf36:	4798      	blx	r3
 800cf38:	e002      	b.n	800cf40 <Paint_SetPixel+0x14c>
        return;
 800cf3a:	bf00      	nop
 800cf3c:	e000      	b.n	800cf40 <Paint_SetPixel+0x14c>
        return;
 800cf3e:	bf00      	nop
}
 800cf40:	3710      	adds	r7, #16
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}
 800cf46:	bf00      	nop
 800cf48:	2400a830 	.word	0x2400a830
 800cf4c:	080168c0 	.word	0x080168c0
 800cf50:	2400a82c 	.word	0x2400a82c

0800cf54 <Paint_Clear>:
function:	Clear the color of the picture
parameter:
    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{	
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b082      	sub	sp, #8
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	80fb      	strh	r3, [r7, #6]
	CLEAR(Color);
 800cf5e:	4b04      	ldr	r3, [pc, #16]	; (800cf70 <Paint_Clear+0x1c>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	88fa      	ldrh	r2, [r7, #6]
 800cf64:	4610      	mov	r0, r2
 800cf66:	4798      	blx	r3
}
 800cf68:	bf00      	nop
 800cf6a:	3708      	adds	r7, #8
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}
 800cf70:	2400a848 	.word	0x2400a848

0800cf74 <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b088      	sub	sp, #32
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	607b      	str	r3, [r7, #4]
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	81fb      	strh	r3, [r7, #14]
 800cf80:	460b      	mov	r3, r1
 800cf82:	81bb      	strh	r3, [r7, #12]
 800cf84:	4613      	mov	r3, r2
 800cf86:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800cf88:	4b3f      	ldr	r3, [pc, #252]	; (800d088 <Paint_DrawChar+0x114>)
 800cf8a:	889b      	ldrh	r3, [r3, #4]
 800cf8c:	b29b      	uxth	r3, r3
 800cf8e:	89fa      	ldrh	r2, [r7, #14]
 800cf90:	429a      	cmp	r2, r3
 800cf92:	d805      	bhi.n	800cfa0 <Paint_DrawChar+0x2c>
 800cf94:	4b3c      	ldr	r3, [pc, #240]	; (800d088 <Paint_DrawChar+0x114>)
 800cf96:	88db      	ldrh	r3, [r3, #6]
 800cf98:	b29b      	uxth	r3, r3
 800cf9a:	89ba      	ldrh	r2, [r7, #12]
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	d903      	bls.n	800cfa8 <Paint_DrawChar+0x34>
    {
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 800cfa0:	483a      	ldr	r0, [pc, #232]	; (800d08c <Paint_DrawChar+0x118>)
 800cfa2:	f006 f935 	bl	8013210 <puts>
        return;
 800cfa6:	e06b      	b.n	800d080 <Paint_DrawChar+0x10c>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 800cfa8:	7afb      	ldrb	r3, [r7, #11]
 800cfaa:	3b20      	subs	r3, #32
 800cfac:	687a      	ldr	r2, [r7, #4]
 800cfae:	88d2      	ldrh	r2, [r2, #6]
 800cfb0:	fb02 f303 	mul.w	r3, r2, r3
 800cfb4:	687a      	ldr	r2, [r7, #4]
 800cfb6:	8892      	ldrh	r2, [r2, #4]
 800cfb8:	08d2      	lsrs	r2, r2, #3
 800cfba:	b292      	uxth	r2, r2
 800cfbc:	4611      	mov	r1, r2
 800cfbe:	687a      	ldr	r2, [r7, #4]
 800cfc0:	8892      	ldrh	r2, [r2, #4]
 800cfc2:	f002 0207 	and.w	r2, r2, #7
 800cfc6:	b292      	uxth	r2, r2
 800cfc8:	2a00      	cmp	r2, #0
 800cfca:	bf14      	ite	ne
 800cfcc:	2201      	movne	r2, #1
 800cfce:	2200      	moveq	r2, #0
 800cfd0:	b2d2      	uxtb	r2, r2
 800cfd2:	440a      	add	r2, r1
 800cfd4:	fb02 f303 	mul.w	r3, r2, r3
 800cfd8:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681a      	ldr	r2, [r3, #0]
 800cfde:	697b      	ldr	r3, [r7, #20]
 800cfe0:	4413      	add	r3, r2
 800cfe2:	61fb      	str	r3, [r7, #28]

    for (Page = 0; Page < Font->Height; Page ++ )
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	837b      	strh	r3, [r7, #26]
 800cfe8:	e045      	b.n	800d076 <Paint_DrawChar+0x102>
    {
        for (Column = 0; Column < Font->Width; Column ++ )
 800cfea:	2300      	movs	r3, #0
 800cfec:	833b      	strh	r3, [r7, #24]
 800cfee:	e030      	b.n	800d052 <Paint_DrawChar+0xde>
                }
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            }
            else
            {
                if (*ptr & (0x80 >> (Column % 8)))
 800cff0:	69fb      	ldr	r3, [r7, #28]
 800cff2:	781b      	ldrb	r3, [r3, #0]
 800cff4:	4619      	mov	r1, r3
 800cff6:	8b3b      	ldrh	r3, [r7, #24]
 800cff8:	f003 0307 	and.w	r3, r3, #7
 800cffc:	2280      	movs	r2, #128	; 0x80
 800cffe:	fa42 f303 	asr.w	r3, r2, r3
 800d002:	400b      	ands	r3, r1
 800d004:	2b00      	cmp	r3, #0
 800d006:	d00c      	beq.n	800d022 <Paint_DrawChar+0xae>
                {

//                    if (!renderCompleteFrame)
//                    {
                    	Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800d008:	89fa      	ldrh	r2, [r7, #14]
 800d00a:	8b3b      	ldrh	r3, [r7, #24]
 800d00c:	4413      	add	r3, r2
 800d00e:	b298      	uxth	r0, r3
 800d010:	89ba      	ldrh	r2, [r7, #12]
 800d012:	8b7b      	ldrh	r3, [r7, #26]
 800d014:	4413      	add	r3, r2
 800d016:	b29b      	uxth	r3, r3
 800d018:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800d01a:	4619      	mov	r1, r3
 800d01c:	f7ff feea 	bl	800cdf4 <Paint_SetPixel>
 800d020:	e00b      	b.n	800d03a <Paint_DrawChar+0xc6>
                }
                else
                {
//                	if (!renderCompleteFrame)
//                	{
                		Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 800d022:	89fa      	ldrh	r2, [r7, #14]
 800d024:	8b3b      	ldrh	r3, [r7, #24]
 800d026:	4413      	add	r3, r2
 800d028:	b298      	uxth	r0, r3
 800d02a:	89ba      	ldrh	r2, [r7, #12]
 800d02c:	8b7b      	ldrh	r3, [r7, #26]
 800d02e:	4413      	add	r3, r2
 800d030:	b29b      	uxth	r3, r3
 800d032:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d034:	4619      	mov	r1, r3
 800d036:	f7ff fedd 	bl	800cdf4 <Paint_SetPixel>
//                	}
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 800d03a:	8b3b      	ldrh	r3, [r7, #24]
 800d03c:	f003 0307 	and.w	r3, r3, #7
 800d040:	b29b      	uxth	r3, r3
 800d042:	2b07      	cmp	r3, #7
 800d044:	d102      	bne.n	800d04c <Paint_DrawChar+0xd8>
            {
                ptr++;
 800d046:	69fb      	ldr	r3, [r7, #28]
 800d048:	3301      	adds	r3, #1
 800d04a:	61fb      	str	r3, [r7, #28]
        for (Column = 0; Column < Font->Width; Column ++ )
 800d04c:	8b3b      	ldrh	r3, [r7, #24]
 800d04e:	3301      	adds	r3, #1
 800d050:	833b      	strh	r3, [r7, #24]
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	889b      	ldrh	r3, [r3, #4]
 800d056:	8b3a      	ldrh	r2, [r7, #24]
 800d058:	429a      	cmp	r2, r3
 800d05a:	d3c9      	bcc.n	800cff0 <Paint_DrawChar+0x7c>
            }
        }// Write a line
        if (Font->Width % 8 != 0)
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	889b      	ldrh	r3, [r3, #4]
 800d060:	f003 0307 	and.w	r3, r3, #7
 800d064:	b29b      	uxth	r3, r3
 800d066:	2b00      	cmp	r3, #0
 800d068:	d002      	beq.n	800d070 <Paint_DrawChar+0xfc>
        {
            ptr++;
 800d06a:	69fb      	ldr	r3, [r7, #28]
 800d06c:	3301      	adds	r3, #1
 800d06e:	61fb      	str	r3, [r7, #28]
    for (Page = 0; Page < Font->Height; Page ++ )
 800d070:	8b7b      	ldrh	r3, [r7, #26]
 800d072:	3301      	adds	r3, #1
 800d074:	837b      	strh	r3, [r7, #26]
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	88db      	ldrh	r3, [r3, #6]
 800d07a:	8b7a      	ldrh	r2, [r7, #26]
 800d07c:	429a      	cmp	r2, r3
 800d07e:	d3b4      	bcc.n	800cfea <Paint_DrawChar+0x76>
        }
    }// Write all
}
 800d080:	3720      	adds	r7, #32
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}
 800d086:	bf00      	nop
 800d088:	2400a830 	.word	0x2400a830
 800d08c:	080169dc 	.word	0x080169dc

0800d090 <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b088      	sub	sp, #32
 800d094:	af02      	add	r7, sp, #8
 800d096:	60ba      	str	r2, [r7, #8]
 800d098:	607b      	str	r3, [r7, #4]
 800d09a:	4603      	mov	r3, r0
 800d09c:	81fb      	strh	r3, [r7, #14]
 800d09e:	460b      	mov	r3, r1
 800d0a0:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 800d0a2:	89fb      	ldrh	r3, [r7, #14]
 800d0a4:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 800d0a6:	89bb      	ldrh	r3, [r7, #12]
 800d0a8:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 800d0aa:	4b23      	ldr	r3, [pc, #140]	; (800d138 <Paint_DrawString_EN+0xa8>)
 800d0ac:	889b      	ldrh	r3, [r3, #4]
 800d0ae:	b29b      	uxth	r3, r3
 800d0b0:	89fa      	ldrh	r2, [r7, #14]
 800d0b2:	429a      	cmp	r2, r3
 800d0b4:	d805      	bhi.n	800d0c2 <Paint_DrawString_EN+0x32>
 800d0b6:	4b20      	ldr	r3, [pc, #128]	; (800d138 <Paint_DrawString_EN+0xa8>)
 800d0b8:	88db      	ldrh	r3, [r3, #6]
 800d0ba:	b29b      	uxth	r3, r3
 800d0bc:	89ba      	ldrh	r2, [r7, #12]
 800d0be:	429a      	cmp	r2, r3
 800d0c0:	d933      	bls.n	800d12a <Paint_DrawString_EN+0x9a>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 800d0c2:	481e      	ldr	r0, [pc, #120]	; (800d13c <Paint_DrawString_EN+0xac>)
 800d0c4:	f006 f8a4 	bl	8013210 <puts>
        return;
 800d0c8:	e033      	b.n	800d132 <Paint_DrawString_EN+0xa2>
    }

    while (* pString != '\0')
    {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width )
 800d0ca:	8afb      	ldrh	r3, [r7, #22]
 800d0cc:	687a      	ldr	r2, [r7, #4]
 800d0ce:	8892      	ldrh	r2, [r2, #4]
 800d0d0:	4413      	add	r3, r2
 800d0d2:	4a19      	ldr	r2, [pc, #100]	; (800d138 <Paint_DrawString_EN+0xa8>)
 800d0d4:	8892      	ldrh	r2, [r2, #4]
 800d0d6:	b292      	uxth	r2, r2
 800d0d8:	4293      	cmp	r3, r2
 800d0da:	dd06      	ble.n	800d0ea <Paint_DrawString_EN+0x5a>
        {
            Xpoint = Xstart;
 800d0dc:	89fb      	ldrh	r3, [r7, #14]
 800d0de:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	88da      	ldrh	r2, [r3, #6]
 800d0e4:	8abb      	ldrh	r3, [r7, #20]
 800d0e6:	4413      	add	r3, r2
 800d0e8:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height )
 800d0ea:	8abb      	ldrh	r3, [r7, #20]
 800d0ec:	687a      	ldr	r2, [r7, #4]
 800d0ee:	88d2      	ldrh	r2, [r2, #6]
 800d0f0:	4413      	add	r3, r2
 800d0f2:	4a11      	ldr	r2, [pc, #68]	; (800d138 <Paint_DrawString_EN+0xa8>)
 800d0f4:	88d2      	ldrh	r2, [r2, #6]
 800d0f6:	b292      	uxth	r2, r2
 800d0f8:	4293      	cmp	r3, r2
 800d0fa:	dd03      	ble.n	800d104 <Paint_DrawString_EN+0x74>
        {
            Xpoint = Xstart;
 800d0fc:	89fb      	ldrh	r3, [r7, #14]
 800d0fe:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 800d100:	89bb      	ldrh	r3, [r7, #12]
 800d102:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 800d104:	68bb      	ldr	r3, [r7, #8]
 800d106:	781a      	ldrb	r2, [r3, #0]
 800d108:	8ab9      	ldrh	r1, [r7, #20]
 800d10a:	8af8      	ldrh	r0, [r7, #22]
 800d10c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d10e:	9301      	str	r3, [sp, #4]
 800d110:	8c3b      	ldrh	r3, [r7, #32]
 800d112:	9300      	str	r3, [sp, #0]
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f7ff ff2d 	bl	800cf74 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	3301      	adds	r3, #1
 800d11e:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	889a      	ldrh	r2, [r3, #4]
 800d124:	8afb      	ldrh	r3, [r7, #22]
 800d126:	4413      	add	r3, r2
 800d128:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0')
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	781b      	ldrb	r3, [r3, #0]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d1cb      	bne.n	800d0ca <Paint_DrawString_EN+0x3a>
    }
}
 800d132:	3718      	adds	r7, #24
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}
 800d138:	2400a830 	.word	0x2400a830
 800d13c:	08016a1c 	.word	0x08016a1c

0800d140 <Paint_DrawFloatNum>:
    Font             ：A structure pointer that displays a character size
    Color            : Select the background color of the English character
******************************************************************************/
void Paint_DrawFloatNum(UWORD Xpoint, UWORD Ypoint, double Nummber,  UBYTE Decimal_Point, 
                        sFONT* Font,  UWORD Color_Background, UWORD Color_Foreground)
{
 800d140:	b590      	push	{r4, r7, lr}
 800d142:	b0cb      	sub	sp, #300	; 0x12c
 800d144:	af02      	add	r7, sp, #8
 800d146:	4604      	mov	r4, r0
 800d148:	4608      	mov	r0, r1
 800d14a:	f107 0108 	add.w	r1, r7, #8
 800d14e:	ed81 0b00 	vstr	d0, [r1]
 800d152:	4611      	mov	r1, r2
 800d154:	1d3a      	adds	r2, r7, #4
 800d156:	6013      	str	r3, [r2, #0]
 800d158:	f107 0316 	add.w	r3, r7, #22
 800d15c:	4622      	mov	r2, r4
 800d15e:	801a      	strh	r2, [r3, #0]
 800d160:	f107 0314 	add.w	r3, r7, #20
 800d164:	4602      	mov	r2, r0
 800d166:	801a      	strh	r2, [r3, #0]
 800d168:	f107 0313 	add.w	r3, r7, #19
 800d16c:	460a      	mov	r2, r1
 800d16e:	701a      	strb	r2, [r3, #0]
    char Str[ARRAY_LEN] = "";
 800d170:	f107 031c 	add.w	r3, r7, #28
 800d174:	2200      	movs	r2, #0
 800d176:	601a      	str	r2, [r3, #0]
 800d178:	3304      	adds	r3, #4
 800d17a:	22fb      	movs	r2, #251	; 0xfb
 800d17c:	2100      	movs	r1, #0
 800d17e:	4618      	mov	r0, r3
 800d180:	f004 ff6c 	bl	801205c <memset>
    sprintf(Str,"%.*lf",Decimal_Point+2,Nummber);
 800d184:	f107 0313 	add.w	r3, r7, #19
 800d188:	781b      	ldrb	r3, [r3, #0]
 800d18a:	1c99      	adds	r1, r3, #2
 800d18c:	f107 001c 	add.w	r0, r7, #28
 800d190:	f107 0308 	add.w	r3, r7, #8
 800d194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d198:	e9cd 2300 	strd	r2, r3, [sp]
 800d19c:	460a      	mov	r2, r1
 800d19e:	4930      	ldr	r1, [pc, #192]	; (800d260 <Paint_DrawFloatNum+0x120>)
 800d1a0:	f006 f854 	bl	801324c <siprintf>
    char * pStr= (char *)malloc((strlen(Str))*sizeof(char));
 800d1a4:	f107 031c 	add.w	r3, r7, #28
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	f7f3 f8a3 	bl	80002f4 <strlen>
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f004 ff1b 	bl	8011fec <malloc>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    memcpy(pStr,Str,(strlen(Str)-2));
 800d1bc:	f107 031c 	add.w	r3, r7, #28
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f7f3 f897 	bl	80002f4 <strlen>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	1e9a      	subs	r2, r3, #2
 800d1ca:	f107 031c 	add.w	r3, r7, #28
 800d1ce:	4619      	mov	r1, r3
 800d1d0:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800d1d4:	f004 ff1a 	bl	801200c <memcpy>
    * (pStr+strlen(Str)-2)='\0';
 800d1d8:	f107 031c 	add.w	r3, r7, #28
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f7f3 f889 	bl	80002f4 <strlen>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	3b02      	subs	r3, #2
 800d1e6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800d1ea:	4413      	add	r3, r2
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	701a      	strb	r2, [r3, #0]
    if((*(pStr+strlen(Str)-3))=='.')
 800d1f0:	f107 031c 	add.w	r3, r7, #28
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f7f3 f87d 	bl	80002f4 <strlen>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	3b03      	subs	r3, #3
 800d1fe:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800d202:	4413      	add	r3, r2
 800d204:	781b      	ldrb	r3, [r3, #0]
 800d206:	2b2e      	cmp	r3, #46	; 0x2e
 800d208:	d10b      	bne.n	800d222 <Paint_DrawFloatNum+0xe2>
    {
      *(pStr+strlen(Str)-3)='\0';
 800d20a:	f107 031c 	add.w	r3, r7, #28
 800d20e:	4618      	mov	r0, r3
 800d210:	f7f3 f870 	bl	80002f4 <strlen>
 800d214:	4603      	mov	r3, r0
 800d216:	3b03      	subs	r3, #3
 800d218:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800d21c:	4413      	add	r3, r2
 800d21e:	2200      	movs	r2, #0
 800d220:	701a      	strb	r2, [r3, #0]
    }
    //show
    Paint_DrawString_EN(Xpoint, Ypoint, (const char*)pStr, Font, Color_Foreground, Color_Background);
 800d222:	1d3b      	adds	r3, r7, #4
 800d224:	f107 0214 	add.w	r2, r7, #20
 800d228:	8811      	ldrh	r1, [r2, #0]
 800d22a:	f107 0216 	add.w	r2, r7, #22
 800d22e:	8810      	ldrh	r0, [r2, #0]
 800d230:	f8b7 2130 	ldrh.w	r2, [r7, #304]	; 0x130
 800d234:	9201      	str	r2, [sp, #4]
 800d236:	f8b7 2134 	ldrh.w	r2, [r7, #308]	; 0x134
 800d23a:	9200      	str	r2, [sp, #0]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800d242:	f7ff ff25 	bl	800d090 <Paint_DrawString_EN>
    free(pStr);
 800d246:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800d24a:	f004 fed7 	bl	8011ffc <free>
    pStr=NULL;
 800d24e:	2300      	movs	r3, #0
 800d250:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
}
 800d254:	bf00      	nop
 800d256:	f507 7792 	add.w	r7, r7, #292	; 0x124
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd90      	pop	{r4, r7, pc}
 800d25e:	bf00      	nop
 800d260:	08016aa0 	.word	0x08016aa0

0800d264 <Paint_DrawImage>:
    yStart           : Y starting coordinates
    xEnd             ：Image width
    yEnd             : Image height
******************************************************************************/
void Paint_DrawImage(const unsigned char *image, UWORD xStart, UWORD yStart, UWORD W_Image, UWORD H_Image) 
{
 800d264:	b590      	push	{r4, r7, lr}
 800d266:	b087      	sub	sp, #28
 800d268:	af00      	add	r7, sp, #0
 800d26a:	60f8      	str	r0, [r7, #12]
 800d26c:	4608      	mov	r0, r1
 800d26e:	4611      	mov	r1, r2
 800d270:	461a      	mov	r2, r3
 800d272:	4603      	mov	r3, r0
 800d274:	817b      	strh	r3, [r7, #10]
 800d276:	460b      	mov	r3, r1
 800d278:	813b      	strh	r3, [r7, #8]
 800d27a:	4613      	mov	r3, r2
 800d27c:	80fb      	strh	r3, [r7, #6]
	int i,j;
	for(j = 0; j < H_Image; j++)
 800d27e:	2300      	movs	r3, #0
 800d280:	613b      	str	r3, [r7, #16]
 800d282:	e049      	b.n	800d318 <Paint_DrawImage+0xb4>
	{
		for(i = 0; i < W_Image; i++)
 800d284:	2300      	movs	r3, #0
 800d286:	617b      	str	r3, [r7, #20]
 800d288:	e03f      	b.n	800d30a <Paint_DrawImage+0xa6>
		{
			if(xStart+i < Paint.WidthMemory  &&  yStart+j < Paint.HeightMemory)//Exceeded part does not display
 800d28a:	897a      	ldrh	r2, [r7, #10]
 800d28c:	697b      	ldr	r3, [r7, #20]
 800d28e:	4413      	add	r3, r2
 800d290:	4a26      	ldr	r2, [pc, #152]	; (800d32c <Paint_DrawImage+0xc8>)
 800d292:	8912      	ldrh	r2, [r2, #8]
 800d294:	b292      	uxth	r2, r2
 800d296:	4293      	cmp	r3, r2
 800d298:	da34      	bge.n	800d304 <Paint_DrawImage+0xa0>
 800d29a:	893a      	ldrh	r2, [r7, #8]
 800d29c:	693b      	ldr	r3, [r7, #16]
 800d29e:	4413      	add	r3, r2
 800d2a0:	4a22      	ldr	r2, [pc, #136]	; (800d32c <Paint_DrawImage+0xc8>)
 800d2a2:	8952      	ldrh	r2, [r2, #10]
 800d2a4:	b292      	uxth	r2, r2
 800d2a6:	4293      	cmp	r3, r2
 800d2a8:	da2c      	bge.n	800d304 <Paint_DrawImage+0xa0>
			{
				Paint_SetPixel(xStart + i, yStart + j, (*(image + j*W_Image*2 + i*2+1))<<8 | (*(image + j*W_Image*2 + i*2)));
 800d2aa:	697b      	ldr	r3, [r7, #20]
 800d2ac:	b29a      	uxth	r2, r3
 800d2ae:	897b      	ldrh	r3, [r7, #10]
 800d2b0:	4413      	add	r3, r2
 800d2b2:	b298      	uxth	r0, r3
 800d2b4:	693b      	ldr	r3, [r7, #16]
 800d2b6:	b29a      	uxth	r2, r3
 800d2b8:	893b      	ldrh	r3, [r7, #8]
 800d2ba:	4413      	add	r3, r2
 800d2bc:	b29c      	uxth	r4, r3
 800d2be:	88fb      	ldrh	r3, [r7, #6]
 800d2c0:	693a      	ldr	r2, [r7, #16]
 800d2c2:	fb02 f303 	mul.w	r3, r2, r3
 800d2c6:	005b      	lsls	r3, r3, #1
 800d2c8:	461a      	mov	r2, r3
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	005b      	lsls	r3, r3, #1
 800d2ce:	4413      	add	r3, r2
 800d2d0:	3301      	adds	r3, #1
 800d2d2:	68fa      	ldr	r2, [r7, #12]
 800d2d4:	4413      	add	r3, r2
 800d2d6:	781b      	ldrb	r3, [r3, #0]
 800d2d8:	021b      	lsls	r3, r3, #8
 800d2da:	b21a      	sxth	r2, r3
 800d2dc:	88fb      	ldrh	r3, [r7, #6]
 800d2de:	6939      	ldr	r1, [r7, #16]
 800d2e0:	fb01 f303 	mul.w	r3, r1, r3
 800d2e4:	005b      	lsls	r3, r3, #1
 800d2e6:	4619      	mov	r1, r3
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	005b      	lsls	r3, r3, #1
 800d2ec:	440b      	add	r3, r1
 800d2ee:	68f9      	ldr	r1, [r7, #12]
 800d2f0:	440b      	add	r3, r1
 800d2f2:	781b      	ldrb	r3, [r3, #0]
 800d2f4:	b21b      	sxth	r3, r3
 800d2f6:	4313      	orrs	r3, r2
 800d2f8:	b21b      	sxth	r3, r3
 800d2fa:	b29b      	uxth	r3, r3
 800d2fc:	461a      	mov	r2, r3
 800d2fe:	4621      	mov	r1, r4
 800d300:	f7ff fd78 	bl	800cdf4 <Paint_SetPixel>
		for(i = 0; i < W_Image; i++)
 800d304:	697b      	ldr	r3, [r7, #20]
 800d306:	3301      	adds	r3, #1
 800d308:	617b      	str	r3, [r7, #20]
 800d30a:	88fb      	ldrh	r3, [r7, #6]
 800d30c:	697a      	ldr	r2, [r7, #20]
 800d30e:	429a      	cmp	r2, r3
 800d310:	dbbb      	blt.n	800d28a <Paint_DrawImage+0x26>
	for(j = 0; j < H_Image; j++)
 800d312:	693b      	ldr	r3, [r7, #16]
 800d314:	3301      	adds	r3, #1
 800d316:	613b      	str	r3, [r7, #16]
 800d318:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d31a:	693a      	ldr	r2, [r7, #16]
 800d31c:	429a      	cmp	r2, r3
 800d31e:	dbb1      	blt.n	800d284 <Paint_DrawImage+0x20>
			//Using arrays is a property of sequential storage, accessing the original array by algorithm
			//j*W_Image*2 			   Y offset
			//i*2              	   X offset
		}
	}
}
 800d320:	bf00      	nop
 800d322:	bf00      	nop
 800d324:	371c      	adds	r7, #28
 800d326:	46bd      	mov	sp, r7
 800d328:	bd90      	pop	{r4, r7, pc}
 800d32a:	bf00      	nop
 800d32c:	2400a830 	.word	0x2400a830

0800d330 <LCD_1IN8_Reset>:
/*******************************************************************************
function:
			Hardware reset
*******************************************************************************/
static void LCD_1IN8_Reset(void)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	af00      	add	r7, sp, #0
    LCD_1IN8_RST_1;
 800d334:	2201      	movs	r2, #1
 800d336:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d33a:	480d      	ldr	r0, [pc, #52]	; (800d370 <LCD_1IN8_Reset+0x40>)
 800d33c:	f7f7 ffb2 	bl	80052a4 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 800d340:	2064      	movs	r0, #100	; 0x64
 800d342:	f7f5 fb57 	bl	80029f4 <HAL_Delay>
    LCD_1IN8_RST_0;
 800d346:	2200      	movs	r2, #0
 800d348:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d34c:	4808      	ldr	r0, [pc, #32]	; (800d370 <LCD_1IN8_Reset+0x40>)
 800d34e:	f7f7 ffa9 	bl	80052a4 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 800d352:	2064      	movs	r0, #100	; 0x64
 800d354:	f7f5 fb4e 	bl	80029f4 <HAL_Delay>
    LCD_1IN8_RST_1;
 800d358:	2201      	movs	r2, #1
 800d35a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d35e:	4804      	ldr	r0, [pc, #16]	; (800d370 <LCD_1IN8_Reset+0x40>)
 800d360:	f7f7 ffa0 	bl	80052a4 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 800d364:	2064      	movs	r0, #100	; 0x64
 800d366:	f7f5 fb45 	bl	80029f4 <HAL_Delay>
}
 800d36a:	bf00      	nop
 800d36c:	bd80      	pop	{r7, pc}
 800d36e:	bf00      	nop
 800d370:	58021400 	.word	0x58021400

0800d374 <LCD_1IN8_WriteReg>:
/*******************************************************************************
function:
		Write register address and data
*******************************************************************************/
static void LCD_1IN8_WriteReg(uint8_t Reg)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b082      	sub	sp, #8
 800d378:	af00      	add	r7, sp, #0
 800d37a:	4603      	mov	r3, r0
 800d37c:	71fb      	strb	r3, [r7, #7]
    LCD_1IN8_DC_0;
 800d37e:	2200      	movs	r2, #0
 800d380:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d384:	4807      	ldr	r0, [pc, #28]	; (800d3a4 <LCD_1IN8_WriteReg+0x30>)
 800d386:	f7f7 ff8d 	bl	80052a4 <HAL_GPIO_WritePin>
    LCD_1IN8_CS_0;
 800d38a:	2200      	movs	r2, #0
 800d38c:	2140      	movs	r1, #64	; 0x40
 800d38e:	4805      	ldr	r0, [pc, #20]	; (800d3a4 <LCD_1IN8_WriteReg+0x30>)
 800d390:	f7f7 ff88 	bl	80052a4 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Reg);
 800d394:	79fb      	ldrb	r3, [r7, #7]
 800d396:	4618      	mov	r0, r3
 800d398:	f7ff fc8e 	bl	800ccb8 <DEV_SPI_WRite>
    //LCD_1IN8_CS_1;
}
 800d39c:	bf00      	nop
 800d39e:	3708      	adds	r7, #8
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}
 800d3a4:	58021800 	.word	0x58021800

0800d3a8 <LCD_1IN8_WriteData_8Bit>:

static void LCD_1IN8_WriteData_8Bit(uint8_t Data)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b082      	sub	sp, #8
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	71fb      	strb	r3, [r7, #7]
    LCD_1IN8_DC_1;
 800d3b2:	2201      	movs	r2, #1
 800d3b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d3b8:	480a      	ldr	r0, [pc, #40]	; (800d3e4 <LCD_1IN8_WriteData_8Bit+0x3c>)
 800d3ba:	f7f7 ff73 	bl	80052a4 <HAL_GPIO_WritePin>
    LCD_1IN8_CS_0;
 800d3be:	2200      	movs	r2, #0
 800d3c0:	2140      	movs	r1, #64	; 0x40
 800d3c2:	4808      	ldr	r0, [pc, #32]	; (800d3e4 <LCD_1IN8_WriteData_8Bit+0x3c>)
 800d3c4:	f7f7 ff6e 	bl	80052a4 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Data);
 800d3c8:	79fb      	ldrb	r3, [r7, #7]
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f7ff fc74 	bl	800ccb8 <DEV_SPI_WRite>
    LCD_1IN8_CS_1;
 800d3d0:	2201      	movs	r2, #1
 800d3d2:	2140      	movs	r1, #64	; 0x40
 800d3d4:	4803      	ldr	r0, [pc, #12]	; (800d3e4 <LCD_1IN8_WriteData_8Bit+0x3c>)
 800d3d6:	f7f7 ff65 	bl	80052a4 <HAL_GPIO_WritePin>
}
 800d3da:	bf00      	nop
 800d3dc:	3708      	adds	r7, #8
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}
 800d3e2:	bf00      	nop
 800d3e4:	58021800 	.word	0x58021800

0800d3e8 <LCD_1IN8_WriteData_NLen16Bit>:
    DEV_SPI_WRITE(Data & 0XFF);
    //LCD_1IN8_CS_1;
}*/

void LCD_1IN8_WriteData_NLen16Bit(uint16_t Data,uint32_t DataLen)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b084      	sub	sp, #16
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	6039      	str	r1, [r7, #0]
 800d3f2:	80fb      	strh	r3, [r7, #6]
    uint32_t i;
    LCD_1IN8_DC_1;
 800d3f4:	2201      	movs	r2, #1
 800d3f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d3fa:	480f      	ldr	r0, [pc, #60]	; (800d438 <LCD_1IN8_WriteData_NLen16Bit+0x50>)
 800d3fc:	f7f7 ff52 	bl	80052a4 <HAL_GPIO_WritePin>
    //LCD_1IN8_CS_0;
    for(i = 0; i < DataLen; i++) {
 800d400:	2300      	movs	r3, #0
 800d402:	60fb      	str	r3, [r7, #12]
 800d404:	e00e      	b.n	800d424 <LCD_1IN8_WriteData_NLen16Bit+0x3c>
        DEV_SPI_WRITE( (uint8_t)(Data >> 8) );
 800d406:	88fb      	ldrh	r3, [r7, #6]
 800d408:	0a1b      	lsrs	r3, r3, #8
 800d40a:	b29b      	uxth	r3, r3
 800d40c:	b2db      	uxtb	r3, r3
 800d40e:	4618      	mov	r0, r3
 800d410:	f7ff fc52 	bl	800ccb8 <DEV_SPI_WRite>
        DEV_SPI_WRITE( (uint8_t)(Data & 0XFF) );
 800d414:	88fb      	ldrh	r3, [r7, #6]
 800d416:	b2db      	uxtb	r3, r3
 800d418:	4618      	mov	r0, r3
 800d41a:	f7ff fc4d 	bl	800ccb8 <DEV_SPI_WRite>
    for(i = 0; i < DataLen; i++) {
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	3301      	adds	r3, #1
 800d422:	60fb      	str	r3, [r7, #12]
 800d424:	68fa      	ldr	r2, [r7, #12]
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	429a      	cmp	r2, r3
 800d42a:	d3ec      	bcc.n	800d406 <LCD_1IN8_WriteData_NLen16Bit+0x1e>
    }
    //LCD_1IN8_CS_1;
}
 800d42c:	bf00      	nop
 800d42e:	bf00      	nop
 800d430:	3710      	adds	r7, #16
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}
 800d436:	bf00      	nop
 800d438:	58021800 	.word	0x58021800

0800d43c <LCD_1IN8_InitReg>:
/*******************************************************************************
function:
		Common register initialization
*******************************************************************************/
static void LCD_1IN8_InitReg(void)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	af00      	add	r7, sp, #0
    //ST7735R Frame Rate
    LCD_1IN8_WriteReg(0xB1);
 800d440:	20b1      	movs	r0, #177	; 0xb1
 800d442:	f7ff ff97 	bl	800d374 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 800d446:	2001      	movs	r0, #1
 800d448:	f7ff ffae 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 800d44c:	202c      	movs	r0, #44	; 0x2c
 800d44e:	f7ff ffab 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 800d452:	202d      	movs	r0, #45	; 0x2d
 800d454:	f7ff ffa8 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB2);
 800d458:	20b2      	movs	r0, #178	; 0xb2
 800d45a:	f7ff ff8b 	bl	800d374 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 800d45e:	2001      	movs	r0, #1
 800d460:	f7ff ffa2 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 800d464:	202c      	movs	r0, #44	; 0x2c
 800d466:	f7ff ff9f 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 800d46a:	202d      	movs	r0, #45	; 0x2d
 800d46c:	f7ff ff9c 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB3);
 800d470:	20b3      	movs	r0, #179	; 0xb3
 800d472:	f7ff ff7f 	bl	800d374 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 800d476:	2001      	movs	r0, #1
 800d478:	f7ff ff96 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 800d47c:	202c      	movs	r0, #44	; 0x2c
 800d47e:	f7ff ff93 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 800d482:	202d      	movs	r0, #45	; 0x2d
 800d484:	f7ff ff90 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x01);
 800d488:	2001      	movs	r0, #1
 800d48a:	f7ff ff8d 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 800d48e:	202c      	movs	r0, #44	; 0x2c
 800d490:	f7ff ff8a 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 800d494:	202d      	movs	r0, #45	; 0x2d
 800d496:	f7ff ff87 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB4); //Column inversion
 800d49a:	20b4      	movs	r0, #180	; 0xb4
 800d49c:	f7ff ff6a 	bl	800d374 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x07);
 800d4a0:	2007      	movs	r0, #7
 800d4a2:	f7ff ff81 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>

    //ST7735R Power Sequence
    LCD_1IN8_WriteReg(0xC0);
 800d4a6:	20c0      	movs	r0, #192	; 0xc0
 800d4a8:	f7ff ff64 	bl	800d374 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0xA2);
 800d4ac:	20a2      	movs	r0, #162	; 0xa2
 800d4ae:	f7ff ff7b 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x02);
 800d4b2:	2002      	movs	r0, #2
 800d4b4:	f7ff ff78 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x84);
 800d4b8:	2084      	movs	r0, #132	; 0x84
 800d4ba:	f7ff ff75 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteReg(0xC1);
 800d4be:	20c1      	movs	r0, #193	; 0xc1
 800d4c0:	f7ff ff58 	bl	800d374 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0xC5);
 800d4c4:	20c5      	movs	r0, #197	; 0xc5
 800d4c6:	f7ff ff6f 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC2);
 800d4ca:	20c2      	movs	r0, #194	; 0xc2
 800d4cc:	f7ff ff52 	bl	800d374 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0A);
 800d4d0:	200a      	movs	r0, #10
 800d4d2:	f7ff ff69 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 800d4d6:	2000      	movs	r0, #0
 800d4d8:	f7ff ff66 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC3);
 800d4dc:	20c3      	movs	r0, #195	; 0xc3
 800d4de:	f7ff ff49 	bl	800d374 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x8A);
 800d4e2:	208a      	movs	r0, #138	; 0x8a
 800d4e4:	f7ff ff60 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2A);
 800d4e8:	202a      	movs	r0, #42	; 0x2a
 800d4ea:	f7ff ff5d 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteReg(0xC4);
 800d4ee:	20c4      	movs	r0, #196	; 0xc4
 800d4f0:	f7ff ff40 	bl	800d374 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x8A);
 800d4f4:	208a      	movs	r0, #138	; 0x8a
 800d4f6:	f7ff ff57 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0xEE);
 800d4fa:	20ee      	movs	r0, #238	; 0xee
 800d4fc:	f7ff ff54 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC5); //VCOM
 800d500:	20c5      	movs	r0, #197	; 0xc5
 800d502:	f7ff ff37 	bl	800d374 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0E);
 800d506:	200e      	movs	r0, #14
 800d508:	f7ff ff4e 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>

    //ST7735R Gamma Sequence
    LCD_1IN8_WriteReg(0xe0);
 800d50c:	20e0      	movs	r0, #224	; 0xe0
 800d50e:	f7ff ff31 	bl	800d374 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0f);
 800d512:	200f      	movs	r0, #15
 800d514:	f7ff ff48 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1a);
 800d518:	201a      	movs	r0, #26
 800d51a:	f7ff ff45 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x0f);
 800d51e:	200f      	movs	r0, #15
 800d520:	f7ff ff42 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x18);
 800d524:	2018      	movs	r0, #24
 800d526:	f7ff ff3f 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2f);
 800d52a:	202f      	movs	r0, #47	; 0x2f
 800d52c:	f7ff ff3c 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x28);
 800d530:	2028      	movs	r0, #40	; 0x28
 800d532:	f7ff ff39 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x20);
 800d536:	2020      	movs	r0, #32
 800d538:	f7ff ff36 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x22);
 800d53c:	2022      	movs	r0, #34	; 0x22
 800d53e:	f7ff ff33 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1f);
 800d542:	201f      	movs	r0, #31
 800d544:	f7ff ff30 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1b);
 800d548:	201b      	movs	r0, #27
 800d54a:	f7ff ff2d 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x23);
 800d54e:	2023      	movs	r0, #35	; 0x23
 800d550:	f7ff ff2a 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x37);
 800d554:	2037      	movs	r0, #55	; 0x37
 800d556:	f7ff ff27 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 800d55a:	2000      	movs	r0, #0
 800d55c:	f7ff ff24 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x07);
 800d560:	2007      	movs	r0, #7
 800d562:	f7ff ff21 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x02);
 800d566:	2002      	movs	r0, #2
 800d568:	f7ff ff1e 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x10);
 800d56c:	2010      	movs	r0, #16
 800d56e:	f7ff ff1b 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xe1);
 800d572:	20e1      	movs	r0, #225	; 0xe1
 800d574:	f7ff fefe 	bl	800d374 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0f);
 800d578:	200f      	movs	r0, #15
 800d57a:	f7ff ff15 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1b);
 800d57e:	201b      	movs	r0, #27
 800d580:	f7ff ff12 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x0f);
 800d584:	200f      	movs	r0, #15
 800d586:	f7ff ff0f 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x17);
 800d58a:	2017      	movs	r0, #23
 800d58c:	f7ff ff0c 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x33);
 800d590:	2033      	movs	r0, #51	; 0x33
 800d592:	f7ff ff09 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2c);
 800d596:	202c      	movs	r0, #44	; 0x2c
 800d598:	f7ff ff06 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x29);
 800d59c:	2029      	movs	r0, #41	; 0x29
 800d59e:	f7ff ff03 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2e);
 800d5a2:	202e      	movs	r0, #46	; 0x2e
 800d5a4:	f7ff ff00 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x30);
 800d5a8:	2030      	movs	r0, #48	; 0x30
 800d5aa:	f7ff fefd 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x30);
 800d5ae:	2030      	movs	r0, #48	; 0x30
 800d5b0:	f7ff fefa 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x39);
 800d5b4:	2039      	movs	r0, #57	; 0x39
 800d5b6:	f7ff fef7 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x3f);
 800d5ba:	203f      	movs	r0, #63	; 0x3f
 800d5bc:	f7ff fef4 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 800d5c0:	2000      	movs	r0, #0
 800d5c2:	f7ff fef1 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x07);
 800d5c6:	2007      	movs	r0, #7
 800d5c8:	f7ff feee 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x03);
 800d5cc:	2003      	movs	r0, #3
 800d5ce:	f7ff feeb 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x10);
 800d5d2:	2010      	movs	r0, #16
 800d5d4:	f7ff fee8 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xF0); //Enable test command
 800d5d8:	20f0      	movs	r0, #240	; 0xf0
 800d5da:	f7ff fecb 	bl	800d374 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 800d5de:	2001      	movs	r0, #1
 800d5e0:	f7ff fee2 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xF6); //Disable ram power save mode
 800d5e4:	20f6      	movs	r0, #246	; 0xf6
 800d5e6:	f7ff fec5 	bl	800d374 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x00);
 800d5ea:	2000      	movs	r0, #0
 800d5ec:	f7ff fedc 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0x3A); //65k mode
 800d5f0:	203a      	movs	r0, #58	; 0x3a
 800d5f2:	f7ff febf 	bl	800d374 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x05);
 800d5f6:	2005      	movs	r0, #5
 800d5f8:	f7ff fed6 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>

}
 800d5fc:	bf00      	nop
 800d5fe:	bd80      	pop	{r7, pc}

0800d600 <LCD_1IN8_SetGramScanWay>:
parameter:
		Scan_dir   :   Scan direction
		Colorchose :   RGB or GBR color format
********************************************************************************/
void LCD_1IN8_SetGramScanWay(LCD_1IN8_SCAN_DIR Scan_dir)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b084      	sub	sp, #16
 800d604:	af00      	add	r7, sp, #0
 800d606:	4603      	mov	r3, r0
 800d608:	71fb      	strb	r3, [r7, #7]
    //Get the screen scan direction
    sLCD_1IN8_DIS.LCD_1IN8_Scan_Dir = Scan_dir;
 800d60a:	4a34      	ldr	r2, [pc, #208]	; (800d6dc <LCD_1IN8_SetGramScanWay+0xdc>)
 800d60c:	79fb      	ldrb	r3, [r7, #7]
 800d60e:	7113      	strb	r3, [r2, #4]

	//Get GRAM and LCD width and height
	if(Scan_dir == L2R_U2D || Scan_dir == L2R_D2U || Scan_dir == R2L_U2D || Scan_dir == R2L_D2U)
 800d610:	79fb      	ldrb	r3, [r7, #7]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d008      	beq.n	800d628 <LCD_1IN8_SetGramScanWay+0x28>
 800d616:	79fb      	ldrb	r3, [r7, #7]
 800d618:	2b01      	cmp	r3, #1
 800d61a:	d005      	beq.n	800d628 <LCD_1IN8_SetGramScanWay+0x28>
 800d61c:	79fb      	ldrb	r3, [r7, #7]
 800d61e:	2b02      	cmp	r3, #2
 800d620:	d002      	beq.n	800d628 <LCD_1IN8_SetGramScanWay+0x28>
 800d622:	79fb      	ldrb	r3, [r7, #7]
 800d624:	2b03      	cmp	r3, #3
 800d626:	d10c      	bne.n	800d642 <LCD_1IN8_SetGramScanWay+0x42>
	{
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Column	= LCD_1IN8_HEIGHT ;
 800d628:	4b2c      	ldr	r3, [pc, #176]	; (800d6dc <LCD_1IN8_SetGramScanWay+0xdc>)
 800d62a:	2280      	movs	r2, #128	; 0x80
 800d62c:	801a      	strh	r2, [r3, #0]
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Page = LCD_1IN8_WIDTH ;
 800d62e:	4b2b      	ldr	r3, [pc, #172]	; (800d6dc <LCD_1IN8_SetGramScanWay+0xdc>)
 800d630:	22a0      	movs	r2, #160	; 0xa0
 800d632:	805a      	strh	r2, [r3, #2]
		sLCD_1IN8_DIS.LCD_1IN8_X_Adjust = LCD_1IN8_X;
 800d634:	4b29      	ldr	r3, [pc, #164]	; (800d6dc <LCD_1IN8_SetGramScanWay+0xdc>)
 800d636:	2202      	movs	r2, #2
 800d638:	80da      	strh	r2, [r3, #6]
		sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust = LCD_1IN8_Y;
 800d63a:	4b28      	ldr	r3, [pc, #160]	; (800d6dc <LCD_1IN8_SetGramScanWay+0xdc>)
 800d63c:	2201      	movs	r2, #1
 800d63e:	811a      	strh	r2, [r3, #8]
 800d640:	e00b      	b.n	800d65a <LCD_1IN8_SetGramScanWay+0x5a>
	}
	else
	{
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Column	= LCD_1IN8_WIDTH ;
 800d642:	4b26      	ldr	r3, [pc, #152]	; (800d6dc <LCD_1IN8_SetGramScanWay+0xdc>)
 800d644:	22a0      	movs	r2, #160	; 0xa0
 800d646:	801a      	strh	r2, [r3, #0]
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Page = LCD_1IN8_HEIGHT ;	
 800d648:	4b24      	ldr	r3, [pc, #144]	; (800d6dc <LCD_1IN8_SetGramScanWay+0xdc>)
 800d64a:	2280      	movs	r2, #128	; 0x80
 800d64c:	805a      	strh	r2, [r3, #2]
		sLCD_1IN8_DIS.LCD_1IN8_X_Adjust = LCD_1IN8_Y;
 800d64e:	4b23      	ldr	r3, [pc, #140]	; (800d6dc <LCD_1IN8_SetGramScanWay+0xdc>)
 800d650:	2201      	movs	r2, #1
 800d652:	80da      	strh	r2, [r3, #6]
		sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust = LCD_1IN8_X;
 800d654:	4b21      	ldr	r3, [pc, #132]	; (800d6dc <LCD_1IN8_SetGramScanWay+0xdc>)
 800d656:	2202      	movs	r2, #2
 800d658:	811a      	strh	r2, [r3, #8]
	}

    // Gets the scan direction of GRAM
    uint16_t MemoryAccessReg_Data=0;  //0x36
 800d65a:	2300      	movs	r3, #0
 800d65c:	81fb      	strh	r3, [r7, #14]
    switch (Scan_dir) {
 800d65e:	79fb      	ldrb	r3, [r7, #7]
 800d660:	2b07      	cmp	r3, #7
 800d662:	d82b      	bhi.n	800d6bc <LCD_1IN8_SetGramScanWay+0xbc>
 800d664:	a201      	add	r2, pc, #4	; (adr r2, 800d66c <LCD_1IN8_SetGramScanWay+0x6c>)
 800d666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d66a:	bf00      	nop
 800d66c:	0800d68d 	.word	0x0800d68d
 800d670:	0800d693 	.word	0x0800d693
 800d674:	0800d699 	.word	0x0800d699
 800d678:	0800d69f 	.word	0x0800d69f
 800d67c:	0800d6a5 	.word	0x0800d6a5
 800d680:	0800d6ab 	.word	0x0800d6ab
 800d684:	0800d6b1 	.word	0x0800d6b1
 800d688:	0800d6b7 	.word	0x0800d6b7
    case L2R_U2D:
        MemoryAccessReg_Data = 0X00 | 0x00;//x Scan direction | y Scan direction
 800d68c:	2300      	movs	r3, #0
 800d68e:	81fb      	strh	r3, [r7, #14]
        break;
 800d690:	e014      	b.n	800d6bc <LCD_1IN8_SetGramScanWay+0xbc>
    case L2R_D2U:
        MemoryAccessReg_Data = 0x00 | 0x80;//0xC8 | 0X10
 800d692:	2380      	movs	r3, #128	; 0x80
 800d694:	81fb      	strh	r3, [r7, #14]
        break;
 800d696:	e011      	b.n	800d6bc <LCD_1IN8_SetGramScanWay+0xbc>
    case R2L_U2D:	//0X04
        MemoryAccessReg_Data = 0x40 | 0x00;
 800d698:	2340      	movs	r3, #64	; 0x40
 800d69a:	81fb      	strh	r3, [r7, #14]
        break;
 800d69c:	e00e      	b.n	800d6bc <LCD_1IN8_SetGramScanWay+0xbc>
    case R2L_D2U:	//0X0C
        MemoryAccessReg_Data = 0x40 | 0x80;
 800d69e:	23c0      	movs	r3, #192	; 0xc0
 800d6a0:	81fb      	strh	r3, [r7, #14]
        break;
 800d6a2:	e00b      	b.n	800d6bc <LCD_1IN8_SetGramScanWay+0xbc>
    case U2D_L2R:	//0X02
        MemoryAccessReg_Data = 0X00 | 0X00 | 0x20;
 800d6a4:	2320      	movs	r3, #32
 800d6a6:	81fb      	strh	r3, [r7, #14]
        break;
 800d6a8:	e008      	b.n	800d6bc <LCD_1IN8_SetGramScanWay+0xbc>
    case U2D_R2L:	//0X06
        MemoryAccessReg_Data = 0x00 | 0X40 | 0x20;
 800d6aa:	2360      	movs	r3, #96	; 0x60
 800d6ac:	81fb      	strh	r3, [r7, #14]
        break;
 800d6ae:	e005      	b.n	800d6bc <LCD_1IN8_SetGramScanWay+0xbc>
    case D2U_L2R:	//0X0A
        MemoryAccessReg_Data = 0x80 | 0x00 | 0x20;
 800d6b0:	23a0      	movs	r3, #160	; 0xa0
 800d6b2:	81fb      	strh	r3, [r7, #14]
        break;
 800d6b4:	e002      	b.n	800d6bc <LCD_1IN8_SetGramScanWay+0xbc>
    case D2U_R2L:	//0X0E
        MemoryAccessReg_Data = 0x40 | 0x80 | 0x20;
 800d6b6:	23e0      	movs	r3, #224	; 0xe0
 800d6b8:	81fb      	strh	r3, [r7, #14]
        break;
 800d6ba:	bf00      	nop
    }

    // Set the read / write scan direction of the frame memory
    LCD_1IN8_WriteReg(0x36); //MX, MY, RGB mode
 800d6bc:	2036      	movs	r0, #54	; 0x36
 800d6be:	f7ff fe59 	bl	800d374 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit( MemoryAccessReg_Data & 0xf7);	//RGB color filter panel
 800d6c2:	89fb      	ldrh	r3, [r7, #14]
 800d6c4:	b2db      	uxtb	r3, r3
 800d6c6:	f023 0308 	bic.w	r3, r3, #8
 800d6ca:	b2db      	uxtb	r3, r3
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f7ff fe6b 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>

}
 800d6d2:	bf00      	nop
 800d6d4:	3710      	adds	r7, #16
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}
 800d6da:	bf00      	nop
 800d6dc:	2400a84c 	.word	0x2400a84c

0800d6e0 <LCD_1IN8_Init>:
/********************************************************************************
function:
			initialization
********************************************************************************/
void LCD_1IN8_Init( LCD_1IN8_SCAN_DIR LCD_1IN8_ScanDir )
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b082      	sub	sp, #8
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	71fb      	strb	r3, [r7, #7]

    //Hardware reset
    LCD_1IN8_Reset();
 800d6ea:	f7ff fe21 	bl	800d330 <LCD_1IN8_Reset>

    //Set the initialization register
    LCD_1IN8_InitReg();
 800d6ee:	f7ff fea5 	bl	800d43c <LCD_1IN8_InitReg>

    //Set the display scan and color transfer modes
    LCD_1IN8_SetGramScanWay( LCD_1IN8_ScanDir );
 800d6f2:	79fb      	ldrb	r3, [r7, #7]
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f7ff ff83 	bl	800d600 <LCD_1IN8_SetGramScanWay>
    DEV_Delay_ms(200);
 800d6fa:	20c8      	movs	r0, #200	; 0xc8
 800d6fc:	f7f5 f97a 	bl	80029f4 <HAL_Delay>

    //sleep out
    LCD_1IN8_WriteReg(0x11);
 800d700:	2011      	movs	r0, #17
 800d702:	f7ff fe37 	bl	800d374 <LCD_1IN8_WriteReg>
    DEV_Delay_ms(120);
 800d706:	2078      	movs	r0, #120	; 0x78
 800d708:	f7f5 f974 	bl	80029f4 <HAL_Delay>

    //Turn on the LCD display
    LCD_1IN8_WriteReg(0x29);
 800d70c:	2029      	movs	r0, #41	; 0x29
 800d70e:	f7ff fe31 	bl	800d374 <LCD_1IN8_WriteReg>
}
 800d712:	bf00      	nop
 800d714:	3708      	adds	r7, #8
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}
	...

0800d71c <LCD_1IN8_SetWindows>:
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_1IN8_SetWindows( POINT Xstart, POINT Ystart, POINT Xend, POINT Yend )
{
 800d71c:	b590      	push	{r4, r7, lr}
 800d71e:	b083      	sub	sp, #12
 800d720:	af00      	add	r7, sp, #0
 800d722:	4604      	mov	r4, r0
 800d724:	4608      	mov	r0, r1
 800d726:	4611      	mov	r1, r2
 800d728:	461a      	mov	r2, r3
 800d72a:	4623      	mov	r3, r4
 800d72c:	80fb      	strh	r3, [r7, #6]
 800d72e:	4603      	mov	r3, r0
 800d730:	80bb      	strh	r3, [r7, #4]
 800d732:	460b      	mov	r3, r1
 800d734:	807b      	strh	r3, [r7, #2]
 800d736:	4613      	mov	r3, r2
 800d738:	803b      	strh	r3, [r7, #0]

    //set the X coordinates
    LCD_1IN8_WriteReg ( 0x2A );
 800d73a:	202a      	movs	r0, #42	; 0x2a
 800d73c:	f7ff fe1a 	bl	800d374 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit ( 0x00 );						//Set the horizontal starting point to the high octet
 800d740:	2000      	movs	r0, #0
 800d742:	f7ff fe31 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (Xstart & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_X_Adjust);			//Set the horizontal starting point to the low octet
 800d746:	88fb      	ldrh	r3, [r7, #6]
 800d748:	b2da      	uxtb	r2, r3
 800d74a:	4b1e      	ldr	r3, [pc, #120]	; (800d7c4 <LCD_1IN8_SetWindows+0xa8>)
 800d74c:	88db      	ldrh	r3, [r3, #6]
 800d74e:	b2db      	uxtb	r3, r3
 800d750:	4413      	add	r3, r2
 800d752:	b2db      	uxtb	r3, r3
 800d754:	4618      	mov	r0, r3
 800d756:	f7ff fe27 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( 0x00 );				//Set the horizontal end to the high octet
 800d75a:	2000      	movs	r0, #0
 800d75c:	f7ff fe24 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (( Xend - 1 ) & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_X_Adjust);	//Set the horizontal end to the low octet
 800d760:	887b      	ldrh	r3, [r7, #2]
 800d762:	b2da      	uxtb	r2, r3
 800d764:	4b17      	ldr	r3, [pc, #92]	; (800d7c4 <LCD_1IN8_SetWindows+0xa8>)
 800d766:	88db      	ldrh	r3, [r3, #6]
 800d768:	b2db      	uxtb	r3, r3
 800d76a:	4413      	add	r3, r2
 800d76c:	b2db      	uxtb	r3, r3
 800d76e:	3b01      	subs	r3, #1
 800d770:	b2db      	uxtb	r3, r3
 800d772:	4618      	mov	r0, r3
 800d774:	f7ff fe18 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>

    //set the Y coordinates
    LCD_1IN8_WriteReg ( 0x2B );
 800d778:	202b      	movs	r0, #43	; 0x2b
 800d77a:	f7ff fdfb 	bl	800d374 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit ( 0x00 );
 800d77e:	2000      	movs	r0, #0
 800d780:	f7ff fe12 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (Ystart & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust);
 800d784:	88bb      	ldrh	r3, [r7, #4]
 800d786:	b2da      	uxtb	r2, r3
 800d788:	4b0e      	ldr	r3, [pc, #56]	; (800d7c4 <LCD_1IN8_SetWindows+0xa8>)
 800d78a:	891b      	ldrh	r3, [r3, #8]
 800d78c:	b2db      	uxtb	r3, r3
 800d78e:	4413      	add	r3, r2
 800d790:	b2db      	uxtb	r3, r3
 800d792:	4618      	mov	r0, r3
 800d794:	f7ff fe08 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( 0x00 );
 800d798:	2000      	movs	r0, #0
 800d79a:	f7ff fe05 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( ( (Yend - 1) & 0xff )+ sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust);
 800d79e:	883b      	ldrh	r3, [r7, #0]
 800d7a0:	b2da      	uxtb	r2, r3
 800d7a2:	4b08      	ldr	r3, [pc, #32]	; (800d7c4 <LCD_1IN8_SetWindows+0xa8>)
 800d7a4:	891b      	ldrh	r3, [r3, #8]
 800d7a6:	b2db      	uxtb	r3, r3
 800d7a8:	4413      	add	r3, r2
 800d7aa:	b2db      	uxtb	r3, r3
 800d7ac:	3b01      	subs	r3, #1
 800d7ae:	b2db      	uxtb	r3, r3
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f7ff fdf9 	bl	800d3a8 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0x2C);
 800d7b6:	202c      	movs	r0, #44	; 0x2c
 800d7b8:	f7ff fddc 	bl	800d374 <LCD_1IN8_WriteReg>

}
 800d7bc:	bf00      	nop
 800d7be:	370c      	adds	r7, #12
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	bd90      	pop	{r4, r7, pc}
 800d7c4:	2400a84c 	.word	0x2400a84c

0800d7c8 <LCD_1IN8_SetCursor>:
parameter:
		xStart :   X direction Start coordinates
		xEnd   :   X direction end coordinates
********************************************************************************/
void LCD_1IN8_SetCursor ( POINT Xpoint, POINT Ypoint )
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b082      	sub	sp, #8
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	460a      	mov	r2, r1
 800d7d2:	80fb      	strh	r3, [r7, #6]
 800d7d4:	4613      	mov	r3, r2
 800d7d6:	80bb      	strh	r3, [r7, #4]
    LCD_1IN8_SetWindows ( Xpoint, Ypoint, Xpoint , Ypoint );
 800d7d8:	88bb      	ldrh	r3, [r7, #4]
 800d7da:	88fa      	ldrh	r2, [r7, #6]
 800d7dc:	88b9      	ldrh	r1, [r7, #4]
 800d7de:	88f8      	ldrh	r0, [r7, #6]
 800d7e0:	f7ff ff9c 	bl	800d71c <LCD_1IN8_SetWindows>
}
 800d7e4:	bf00      	nop
 800d7e6:	3708      	adds	r7, #8
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}

0800d7ec <LCD_1IN8_SetColor>:
parameter:
		Color  :   Set show color
********************************************************************************/
//static void LCD_1IN8_SetColor( LENGTH Dis_Width, LENGTH Dis_Height, COLOR Color ){
void LCD_1IN8_SetColor( COLOR Color ,POINT Xpoint, POINT Ypoint)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b082      	sub	sp, #8
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	80fb      	strh	r3, [r7, #6]
 800d7f6:	460b      	mov	r3, r1
 800d7f8:	80bb      	strh	r3, [r7, #4]
 800d7fa:	4613      	mov	r3, r2
 800d7fc:	807b      	strh	r3, [r7, #2]
    LCD_1IN8_WriteData_NLen16Bit(Color ,(uint32_t)Xpoint * (uint32_t)Ypoint);
 800d7fe:	88bb      	ldrh	r3, [r7, #4]
 800d800:	887a      	ldrh	r2, [r7, #2]
 800d802:	fb02 f203 	mul.w	r2, r2, r3
 800d806:	88fb      	ldrh	r3, [r7, #6]
 800d808:	4611      	mov	r1, r2
 800d80a:	4618      	mov	r0, r3
 800d80c:	f7ff fdec 	bl	800d3e8 <LCD_1IN8_WriteData_NLen16Bit>
}
 800d810:	bf00      	nop
 800d812:	3708      	adds	r7, #8
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}

0800d818 <LCD_1IN8_DrawPaint>:
		Xpoint :   The x coordinate of the point
		Ypoint :   The y coordinate of the point
		Color  :   Set the color
********************************************************************************/
void LCD_1IN8_DrawPaint ( POINT Xpoint, POINT Ypoint, COLOR Color )
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b082      	sub	sp, #8
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	4603      	mov	r3, r0
 800d820:	80fb      	strh	r3, [r7, #6]
 800d822:	460b      	mov	r3, r1
 800d824:	80bb      	strh	r3, [r7, #4]
 800d826:	4613      	mov	r3, r2
 800d828:	807b      	strh	r3, [r7, #2]
    if ( ( Xpoint <= sLCD_1IN8_DIS.LCD_1IN8_Dis_Column ) && ( Ypoint <= sLCD_1IN8_DIS.LCD_1IN8_Dis_Page ) )
 800d82a:	4b1b      	ldr	r3, [pc, #108]	; (800d898 <LCD_1IN8_DrawPaint+0x80>)
 800d82c:	881b      	ldrh	r3, [r3, #0]
 800d82e:	88fa      	ldrh	r2, [r7, #6]
 800d830:	429a      	cmp	r2, r3
 800d832:	d82d      	bhi.n	800d890 <LCD_1IN8_DrawPaint+0x78>
 800d834:	4b18      	ldr	r3, [pc, #96]	; (800d898 <LCD_1IN8_DrawPaint+0x80>)
 800d836:	885b      	ldrh	r3, [r3, #2]
 800d838:	88ba      	ldrh	r2, [r7, #4]
 800d83a:	429a      	cmp	r2, r3
 800d83c:	d828      	bhi.n	800d890 <LCD_1IN8_DrawPaint+0x78>
    {
    	if (!renderCompleteFrame)
 800d83e:	4b17      	ldr	r3, [pc, #92]	; (800d89c <LCD_1IN8_DrawPaint+0x84>)
 800d840:	781b      	ldrb	r3, [r3, #0]
 800d842:	f083 0301 	eor.w	r3, r3, #1
 800d846:	b2db      	uxtb	r3, r3
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d00c      	beq.n	800d866 <LCD_1IN8_DrawPaint+0x4e>
    	{
    		LCD_1IN8_SetCursor (Xpoint, Ypoint);
 800d84c:	88ba      	ldrh	r2, [r7, #4]
 800d84e:	88fb      	ldrh	r3, [r7, #6]
 800d850:	4611      	mov	r1, r2
 800d852:	4618      	mov	r0, r3
 800d854:	f7ff ffb8 	bl	800d7c8 <LCD_1IN8_SetCursor>
    		LCD_1IN8_SetColor ( Color , 1 , 1);
 800d858:	887b      	ldrh	r3, [r7, #2]
 800d85a:	2201      	movs	r2, #1
 800d85c:	2101      	movs	r1, #1
 800d85e:	4618      	mov	r0, r3
 800d860:	f7ff ffc4 	bl	800d7ec <LCD_1IN8_SetColor>
    	{
    		nextFrameToDraw[(SCREEN_WIDTH * Ypoint + Xpoint) * 2] = (uint8_t)((Color & 0xFF00) >> 8 );
    		nextFrameToDraw[(SCREEN_WIDTH * Ypoint + Xpoint) * 2 + 1] = (uint8_t)((Color & 0x00FF));
    	}
    }
}
 800d864:	e014      	b.n	800d890 <LCD_1IN8_DrawPaint+0x78>
    		nextFrameToDraw[(SCREEN_WIDTH * Ypoint + Xpoint) * 2] = (uint8_t)((Color & 0xFF00) >> 8 );
 800d866:	887b      	ldrh	r3, [r7, #2]
 800d868:	0a1b      	lsrs	r3, r3, #8
 800d86a:	b299      	uxth	r1, r3
 800d86c:	88bb      	ldrh	r3, [r7, #4]
 800d86e:	01da      	lsls	r2, r3, #7
 800d870:	88fb      	ldrh	r3, [r7, #6]
 800d872:	4413      	add	r3, r2
 800d874:	005b      	lsls	r3, r3, #1
 800d876:	b2c9      	uxtb	r1, r1
 800d878:	4a09      	ldr	r2, [pc, #36]	; (800d8a0 <LCD_1IN8_DrawPaint+0x88>)
 800d87a:	54d1      	strb	r1, [r2, r3]
    		nextFrameToDraw[(SCREEN_WIDTH * Ypoint + Xpoint) * 2 + 1] = (uint8_t)((Color & 0x00FF));
 800d87c:	88bb      	ldrh	r3, [r7, #4]
 800d87e:	01da      	lsls	r2, r3, #7
 800d880:	88fb      	ldrh	r3, [r7, #6]
 800d882:	4413      	add	r3, r2
 800d884:	005b      	lsls	r3, r3, #1
 800d886:	3301      	adds	r3, #1
 800d888:	887a      	ldrh	r2, [r7, #2]
 800d88a:	b2d1      	uxtb	r1, r2
 800d88c:	4a04      	ldr	r2, [pc, #16]	; (800d8a0 <LCD_1IN8_DrawPaint+0x88>)
 800d88e:	54d1      	strb	r1, [r2, r3]
}
 800d890:	bf00      	nop
 800d892:	3708      	adds	r7, #8
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}
 800d898:	2400a84c 	.word	0x2400a84c
 800d89c:	2400a3a8 	.word	0x2400a3a8
 800d8a0:	24000070 	.word	0x24000070

0800d8a4 <LCD_1IN8_Clear>:
/********************************************************************************
function:
			Clear screen
********************************************************************************/
void LCD_1IN8_Clear(COLOR  Color)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b084      	sub	sp, #16
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	80fb      	strh	r3, [r7, #6]
    UWORD i,j;
    LCD_1IN8_SetWindows(0, 0, sLCD_1IN8_DIS.LCD_1IN8_Dis_Column, sLCD_1IN8_DIS.LCD_1IN8_Dis_Page);
 800d8ae:	4b1a      	ldr	r3, [pc, #104]	; (800d918 <LCD_1IN8_Clear+0x74>)
 800d8b0:	881a      	ldrh	r2, [r3, #0]
 800d8b2:	4b19      	ldr	r3, [pc, #100]	; (800d918 <LCD_1IN8_Clear+0x74>)
 800d8b4:	885b      	ldrh	r3, [r3, #2]
 800d8b6:	2100      	movs	r1, #0
 800d8b8:	2000      	movs	r0, #0
 800d8ba:	f7ff ff2f 	bl	800d71c <LCD_1IN8_SetWindows>
    LCD_1IN8_DC_1;
 800d8be:	2201      	movs	r2, #1
 800d8c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d8c4:	4815      	ldr	r0, [pc, #84]	; (800d91c <LCD_1IN8_Clear+0x78>)
 800d8c6:	f7f7 fced 	bl	80052a4 <HAL_GPIO_WritePin>
    for(i=0;i<sLCD_1IN8_DIS.LCD_1IN8_Dis_Column;i++)
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	81fb      	strh	r3, [r7, #14]
 800d8ce:	e019      	b.n	800d904 <LCD_1IN8_Clear+0x60>
	{
		for(j=0;j<sLCD_1IN8_DIS.LCD_1IN8_Dis_Page;j++)
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	81bb      	strh	r3, [r7, #12]
 800d8d4:	e00e      	b.n	800d8f4 <LCD_1IN8_Clear+0x50>
		{
			//LCD_1IN8_WriteData_NLen16Bit(Image[i*LCD_1IN8_WIDTH+j],1);
			DEV_SPI_WRITE( (uint8_t)(Color & 0XFF) );
 800d8d6:	88fb      	ldrh	r3, [r7, #6]
 800d8d8:	b2db      	uxtb	r3, r3
 800d8da:	4618      	mov	r0, r3
 800d8dc:	f7ff f9ec 	bl	800ccb8 <DEV_SPI_WRite>
			DEV_SPI_WRITE( (uint8_t)(Color >> 8) );
 800d8e0:	88fb      	ldrh	r3, [r7, #6]
 800d8e2:	0a1b      	lsrs	r3, r3, #8
 800d8e4:	b29b      	uxth	r3, r3
 800d8e6:	b2db      	uxtb	r3, r3
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	f7ff f9e5 	bl	800ccb8 <DEV_SPI_WRite>
		for(j=0;j<sLCD_1IN8_DIS.LCD_1IN8_Dis_Page;j++)
 800d8ee:	89bb      	ldrh	r3, [r7, #12]
 800d8f0:	3301      	adds	r3, #1
 800d8f2:	81bb      	strh	r3, [r7, #12]
 800d8f4:	4b08      	ldr	r3, [pc, #32]	; (800d918 <LCD_1IN8_Clear+0x74>)
 800d8f6:	885b      	ldrh	r3, [r3, #2]
 800d8f8:	89ba      	ldrh	r2, [r7, #12]
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	d3eb      	bcc.n	800d8d6 <LCD_1IN8_Clear+0x32>
    for(i=0;i<sLCD_1IN8_DIS.LCD_1IN8_Dis_Column;i++)
 800d8fe:	89fb      	ldrh	r3, [r7, #14]
 800d900:	3301      	adds	r3, #1
 800d902:	81fb      	strh	r3, [r7, #14]
 800d904:	4b04      	ldr	r3, [pc, #16]	; (800d918 <LCD_1IN8_Clear+0x74>)
 800d906:	881b      	ldrh	r3, [r3, #0]
 800d908:	89fa      	ldrh	r2, [r7, #14]
 800d90a:	429a      	cmp	r2, r3
 800d90c:	d3e0      	bcc.n	800d8d0 <LCD_1IN8_Clear+0x2c>
			
		}
	}
}
 800d90e:	bf00      	nop
 800d910:	bf00      	nop
 800d912:	3710      	adds	r7, #16
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}
 800d918:	2400a84c 	.word	0x2400a84c
 800d91c:	58021800 	.word	0x58021800

0800d920 <LCD_1IN8_SetBackLight>:
	Setting backlight
parameter	:
	  value : Range 0~1000   Duty cycle is value/1000	
*******************************************************************************/
void LCD_1IN8_SetBackLight(UWORD Value)
{
 800d920:	b480      	push	{r7}
 800d922:	b083      	sub	sp, #12
 800d924:	af00      	add	r7, sp, #0
 800d926:	4603      	mov	r3, r0
 800d928:	80fb      	strh	r3, [r7, #6]
	 DEV_Set_PWM(Value);
 800d92a:	4a04      	ldr	r2, [pc, #16]	; (800d93c <LCD_1IN8_SetBackLight+0x1c>)
 800d92c:	88fb      	ldrh	r3, [r7, #6]
 800d92e:	6353      	str	r3, [r2, #52]	; 0x34
}
 800d930:	bf00      	nop
 800d932:	370c      	adds	r7, #12
 800d934:	46bd      	mov	sp, r7
 800d936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93a:	4770      	bx	lr
 800d93c:	40010000 	.word	0x40010000

0800d940 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800d940:	b590      	push	{r4, r7, lr}
 800d942:	b089      	sub	sp, #36	; 0x24
 800d944:	af04      	add	r7, sp, #16
 800d946:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800d948:	2301      	movs	r3, #1
 800d94a:	2202      	movs	r2, #2
 800d94c:	2102      	movs	r1, #2
 800d94e:	6878      	ldr	r0, [r7, #4]
 800d950:	f000 fcb8 	bl	800e2c4 <USBH_FindInterface>
 800d954:	4603      	mov	r3, r0
 800d956:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800d958:	7bfb      	ldrb	r3, [r7, #15]
 800d95a:	2bff      	cmp	r3, #255	; 0xff
 800d95c:	d002      	beq.n	800d964 <USBH_CDC_InterfaceInit+0x24>
 800d95e:	7bfb      	ldrb	r3, [r7, #15]
 800d960:	2b01      	cmp	r3, #1
 800d962:	d901      	bls.n	800d968 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800d964:	2302      	movs	r3, #2
 800d966:	e15a      	b.n	800dc1e <USBH_CDC_InterfaceInit+0x2de>
  }

  status = USBH_SelectInterface(phost, interface);
 800d968:	7bfb      	ldrb	r3, [r7, #15]
 800d96a:	4619      	mov	r1, r3
 800d96c:	6878      	ldr	r0, [r7, #4]
 800d96e:	f000 fc89 	bl	800e284 <USBH_SelectInterface>
 800d972:	4603      	mov	r3, r0
 800d974:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800d976:	7bbb      	ldrb	r3, [r7, #14]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d001      	beq.n	800d980 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800d97c:	2302      	movs	r3, #2
 800d97e:	e14e      	b.n	800dc1e <USBH_CDC_InterfaceInit+0x2de>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800d980:	687a      	ldr	r2, [r7, #4]
 800d982:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800d986:	4413      	add	r3, r2
 800d988:	681c      	ldr	r4, [r3, #0]
 800d98a:	2050      	movs	r0, #80	; 0x50
 800d98c:	f004 fb2e 	bl	8011fec <malloc>
 800d990:	4603      	mov	r3, r0
 800d992:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d994:	687a      	ldr	r2, [r7, #4]
 800d996:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800d99a:	4413      	add	r3, r2
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	69db      	ldr	r3, [r3, #28]
 800d9a0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d101      	bne.n	800d9ac <USBH_CDC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800d9a8:	2302      	movs	r3, #2
 800d9aa:	e138      	b.n	800dc1e <USBH_CDC_InterfaceInit+0x2de>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800d9ac:	2250      	movs	r2, #80	; 0x50
 800d9ae:	2100      	movs	r1, #0
 800d9b0:	68b8      	ldr	r0, [r7, #8]
 800d9b2:	f004 fb53 	bl	801205c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800d9b6:	7bfb      	ldrb	r3, [r7, #15]
 800d9b8:	687a      	ldr	r2, [r7, #4]
 800d9ba:	211a      	movs	r1, #26
 800d9bc:	fb01 f303 	mul.w	r3, r1, r3
 800d9c0:	441a      	add	r2, r3
 800d9c2:	f643 138e 	movw	r3, #14734	; 0x398e
 800d9c6:	4413      	add	r3, r2
 800d9c8:	781b      	ldrb	r3, [r3, #0]
 800d9ca:	b25b      	sxtb	r3, r3
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	da17      	bge.n	800da00 <USBH_CDC_InterfaceInit+0xc0>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d9d0:	7bfb      	ldrb	r3, [r7, #15]
 800d9d2:	687a      	ldr	r2, [r7, #4]
 800d9d4:	211a      	movs	r1, #26
 800d9d6:	fb01 f303 	mul.w	r3, r1, r3
 800d9da:	441a      	add	r2, r3
 800d9dc:	f643 138e 	movw	r3, #14734	; 0x398e
 800d9e0:	4413      	add	r3, r2
 800d9e2:	781a      	ldrb	r2, [r3, #0]
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d9e8:	7bfb      	ldrb	r3, [r7, #15]
 800d9ea:	687a      	ldr	r2, [r7, #4]
 800d9ec:	211a      	movs	r1, #26
 800d9ee:	fb01 f303 	mul.w	r3, r1, r3
 800d9f2:	441a      	add	r2, r3
 800d9f4:	f643 1390 	movw	r3, #14736	; 0x3990
 800d9f8:	4413      	add	r3, r2
 800d9fa:	881a      	ldrh	r2, [r3, #0]
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	785b      	ldrb	r3, [r3, #1]
 800da04:	4619      	mov	r1, r3
 800da06:	6878      	ldr	r0, [r7, #4]
 800da08:	f001 f80f 	bl	800ea2a <USBH_AllocPipe>
 800da0c:	4603      	mov	r3, r0
 800da0e:	461a      	mov	r2, r3
 800da10:	68bb      	ldr	r3, [r7, #8]
 800da12:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	7819      	ldrb	r1, [r3, #0]
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	7858      	ldrb	r0, [r3, #1]
 800da1c:	687a      	ldr	r2, [r7, #4]
 800da1e:	f643 135c 	movw	r3, #14684	; 0x395c
 800da22:	4413      	add	r3, r2
 800da24:	781c      	ldrb	r4, [r3, #0]
 800da26:	687a      	ldr	r2, [r7, #4]
 800da28:	f643 135d 	movw	r3, #14685	; 0x395d
 800da2c:	4413      	add	r3, r2
 800da2e:	781b      	ldrb	r3, [r3, #0]
 800da30:	68ba      	ldr	r2, [r7, #8]
 800da32:	8952      	ldrh	r2, [r2, #10]
 800da34:	9202      	str	r2, [sp, #8]
 800da36:	2203      	movs	r2, #3
 800da38:	9201      	str	r2, [sp, #4]
 800da3a:	9300      	str	r3, [sp, #0]
 800da3c:	4623      	mov	r3, r4
 800da3e:	4602      	mov	r2, r0
 800da40:	6878      	ldr	r0, [r7, #4]
 800da42:	f000 ffc3 	bl	800e9cc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800da46:	68bb      	ldr	r3, [r7, #8]
 800da48:	781b      	ldrb	r3, [r3, #0]
 800da4a:	2200      	movs	r2, #0
 800da4c:	4619      	mov	r1, r3
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	f004 f9f8 	bl	8011e44 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800da54:	2300      	movs	r3, #0
 800da56:	2200      	movs	r2, #0
 800da58:	210a      	movs	r1, #10
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	f000 fc32 	bl	800e2c4 <USBH_FindInterface>
 800da60:	4603      	mov	r3, r0
 800da62:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800da64:	7bfb      	ldrb	r3, [r7, #15]
 800da66:	2bff      	cmp	r3, #255	; 0xff
 800da68:	d002      	beq.n	800da70 <USBH_CDC_InterfaceInit+0x130>
 800da6a:	7bfb      	ldrb	r3, [r7, #15]
 800da6c:	2b01      	cmp	r3, #1
 800da6e:	d901      	bls.n	800da74 <USBH_CDC_InterfaceInit+0x134>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800da70:	2302      	movs	r3, #2
 800da72:	e0d4      	b.n	800dc1e <USBH_CDC_InterfaceInit+0x2de>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800da74:	7bfb      	ldrb	r3, [r7, #15]
 800da76:	687a      	ldr	r2, [r7, #4]
 800da78:	211a      	movs	r1, #26
 800da7a:	fb01 f303 	mul.w	r3, r1, r3
 800da7e:	441a      	add	r2, r3
 800da80:	f643 138e 	movw	r3, #14734	; 0x398e
 800da84:	4413      	add	r3, r2
 800da86:	781b      	ldrb	r3, [r3, #0]
 800da88:	b25b      	sxtb	r3, r3
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	da18      	bge.n	800dac0 <USBH_CDC_InterfaceInit+0x180>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800da8e:	7bfb      	ldrb	r3, [r7, #15]
 800da90:	687a      	ldr	r2, [r7, #4]
 800da92:	211a      	movs	r1, #26
 800da94:	fb01 f303 	mul.w	r3, r1, r3
 800da98:	441a      	add	r2, r3
 800da9a:	f643 138e 	movw	r3, #14734	; 0x398e
 800da9e:	4413      	add	r3, r2
 800daa0:	781a      	ldrb	r2, [r3, #0]
 800daa2:	68bb      	ldr	r3, [r7, #8]
 800daa4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800daa6:	7bfb      	ldrb	r3, [r7, #15]
 800daa8:	687a      	ldr	r2, [r7, #4]
 800daaa:	211a      	movs	r1, #26
 800daac:	fb01 f303 	mul.w	r3, r1, r3
 800dab0:	441a      	add	r2, r3
 800dab2:	f643 1390 	movw	r3, #14736	; 0x3990
 800dab6:	4413      	add	r3, r2
 800dab8:	881a      	ldrh	r2, [r3, #0]
 800daba:	68bb      	ldr	r3, [r7, #8]
 800dabc:	835a      	strh	r2, [r3, #26]
 800dabe:	e017      	b.n	800daf0 <USBH_CDC_InterfaceInit+0x1b0>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800dac0:	7bfb      	ldrb	r3, [r7, #15]
 800dac2:	687a      	ldr	r2, [r7, #4]
 800dac4:	211a      	movs	r1, #26
 800dac6:	fb01 f303 	mul.w	r3, r1, r3
 800daca:	441a      	add	r2, r3
 800dacc:	f643 138e 	movw	r3, #14734	; 0x398e
 800dad0:	4413      	add	r3, r2
 800dad2:	781a      	ldrb	r2, [r3, #0]
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800dad8:	7bfb      	ldrb	r3, [r7, #15]
 800dada:	687a      	ldr	r2, [r7, #4]
 800dadc:	211a      	movs	r1, #26
 800dade:	fb01 f303 	mul.w	r3, r1, r3
 800dae2:	441a      	add	r2, r3
 800dae4:	f643 1390 	movw	r3, #14736	; 0x3990
 800dae8:	4413      	add	r3, r2
 800daea:	881a      	ldrh	r2, [r3, #0]
 800daec:	68bb      	ldr	r3, [r7, #8]
 800daee:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800daf0:	7bfb      	ldrb	r3, [r7, #15]
 800daf2:	687a      	ldr	r2, [r7, #4]
 800daf4:	211a      	movs	r1, #26
 800daf6:	fb01 f303 	mul.w	r3, r1, r3
 800dafa:	441a      	add	r2, r3
 800dafc:	f643 1396 	movw	r3, #14742	; 0x3996
 800db00:	4413      	add	r3, r2
 800db02:	781b      	ldrb	r3, [r3, #0]
 800db04:	b25b      	sxtb	r3, r3
 800db06:	2b00      	cmp	r3, #0
 800db08:	da18      	bge.n	800db3c <USBH_CDC_InterfaceInit+0x1fc>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800db0a:	7bfb      	ldrb	r3, [r7, #15]
 800db0c:	687a      	ldr	r2, [r7, #4]
 800db0e:	211a      	movs	r1, #26
 800db10:	fb01 f303 	mul.w	r3, r1, r3
 800db14:	441a      	add	r2, r3
 800db16:	f643 1396 	movw	r3, #14742	; 0x3996
 800db1a:	4413      	add	r3, r2
 800db1c:	781a      	ldrb	r2, [r3, #0]
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800db22:	7bfb      	ldrb	r3, [r7, #15]
 800db24:	687a      	ldr	r2, [r7, #4]
 800db26:	211a      	movs	r1, #26
 800db28:	fb01 f303 	mul.w	r3, r1, r3
 800db2c:	441a      	add	r2, r3
 800db2e:	f643 1398 	movw	r3, #14744	; 0x3998
 800db32:	4413      	add	r3, r2
 800db34:	881a      	ldrh	r2, [r3, #0]
 800db36:	68bb      	ldr	r3, [r7, #8]
 800db38:	835a      	strh	r2, [r3, #26]
 800db3a:	e017      	b.n	800db6c <USBH_CDC_InterfaceInit+0x22c>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800db3c:	7bfb      	ldrb	r3, [r7, #15]
 800db3e:	687a      	ldr	r2, [r7, #4]
 800db40:	211a      	movs	r1, #26
 800db42:	fb01 f303 	mul.w	r3, r1, r3
 800db46:	441a      	add	r2, r3
 800db48:	f643 1396 	movw	r3, #14742	; 0x3996
 800db4c:	4413      	add	r3, r2
 800db4e:	781a      	ldrb	r2, [r3, #0]
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800db54:	7bfb      	ldrb	r3, [r7, #15]
 800db56:	687a      	ldr	r2, [r7, #4]
 800db58:	211a      	movs	r1, #26
 800db5a:	fb01 f303 	mul.w	r3, r1, r3
 800db5e:	441a      	add	r2, r3
 800db60:	f643 1398 	movw	r3, #14744	; 0x3998
 800db64:	4413      	add	r3, r2
 800db66:	881a      	ldrh	r2, [r3, #0]
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800db6c:	68bb      	ldr	r3, [r7, #8]
 800db6e:	7b9b      	ldrb	r3, [r3, #14]
 800db70:	4619      	mov	r1, r3
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f000 ff59 	bl	800ea2a <USBH_AllocPipe>
 800db78:	4603      	mov	r3, r0
 800db7a:	461a      	mov	r2, r3
 800db7c:	68bb      	ldr	r3, [r7, #8]
 800db7e:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	7bdb      	ldrb	r3, [r3, #15]
 800db84:	4619      	mov	r1, r3
 800db86:	6878      	ldr	r0, [r7, #4]
 800db88:	f000 ff4f 	bl	800ea2a <USBH_AllocPipe>
 800db8c:	4603      	mov	r3, r0
 800db8e:	461a      	mov	r2, r3
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800db94:	68bb      	ldr	r3, [r7, #8]
 800db96:	7b59      	ldrb	r1, [r3, #13]
 800db98:	68bb      	ldr	r3, [r7, #8]
 800db9a:	7b98      	ldrb	r0, [r3, #14]
 800db9c:	687a      	ldr	r2, [r7, #4]
 800db9e:	f643 135c 	movw	r3, #14684	; 0x395c
 800dba2:	4413      	add	r3, r2
 800dba4:	781c      	ldrb	r4, [r3, #0]
 800dba6:	687a      	ldr	r2, [r7, #4]
 800dba8:	f643 135d 	movw	r3, #14685	; 0x395d
 800dbac:	4413      	add	r3, r2
 800dbae:	781b      	ldrb	r3, [r3, #0]
 800dbb0:	68ba      	ldr	r2, [r7, #8]
 800dbb2:	8b12      	ldrh	r2, [r2, #24]
 800dbb4:	9202      	str	r2, [sp, #8]
 800dbb6:	2202      	movs	r2, #2
 800dbb8:	9201      	str	r2, [sp, #4]
 800dbba:	9300      	str	r3, [sp, #0]
 800dbbc:	4623      	mov	r3, r4
 800dbbe:	4602      	mov	r2, r0
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f000 ff03 	bl	800e9cc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	7b19      	ldrb	r1, [r3, #12]
 800dbca:	68bb      	ldr	r3, [r7, #8]
 800dbcc:	7bd8      	ldrb	r0, [r3, #15]
 800dbce:	687a      	ldr	r2, [r7, #4]
 800dbd0:	f643 135c 	movw	r3, #14684	; 0x395c
 800dbd4:	4413      	add	r3, r2
 800dbd6:	781c      	ldrb	r4, [r3, #0]
 800dbd8:	687a      	ldr	r2, [r7, #4]
 800dbda:	f643 135d 	movw	r3, #14685	; 0x395d
 800dbde:	4413      	add	r3, r2
 800dbe0:	781b      	ldrb	r3, [r3, #0]
 800dbe2:	68ba      	ldr	r2, [r7, #8]
 800dbe4:	8b52      	ldrh	r2, [r2, #26]
 800dbe6:	9202      	str	r2, [sp, #8]
 800dbe8:	2202      	movs	r2, #2
 800dbea:	9201      	str	r2, [sp, #4]
 800dbec:	9300      	str	r3, [sp, #0]
 800dbee:	4623      	mov	r3, r4
 800dbf0:	4602      	mov	r2, r0
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f000 feea 	bl	800e9cc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800dbf8:	68bb      	ldr	r3, [r7, #8]
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800dc00:	68bb      	ldr	r3, [r7, #8]
 800dc02:	7b5b      	ldrb	r3, [r3, #13]
 800dc04:	2200      	movs	r2, #0
 800dc06:	4619      	mov	r1, r3
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f004 f91b 	bl	8011e44 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	7b1b      	ldrb	r3, [r3, #12]
 800dc12:	2200      	movs	r2, #0
 800dc14:	4619      	mov	r1, r3
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	f004 f914 	bl	8011e44 <USBH_LL_SetToggle>

  return USBH_OK;
 800dc1c:	2300      	movs	r3, #0
}
 800dc1e:	4618      	mov	r0, r3
 800dc20:	3714      	adds	r7, #20
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd90      	pop	{r4, r7, pc}

0800dc26 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800dc26:	b580      	push	{r7, lr}
 800dc28:	b084      	sub	sp, #16
 800dc2a:	af00      	add	r7, sp, #0
 800dc2c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800dc2e:	687a      	ldr	r2, [r7, #4]
 800dc30:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800dc34:	4413      	add	r3, r2
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	69db      	ldr	r3, [r3, #28]
 800dc3a:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	781b      	ldrb	r3, [r3, #0]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d00e      	beq.n	800dc62 <USBH_CDC_InterfaceDeInit+0x3c>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	781b      	ldrb	r3, [r3, #0]
 800dc48:	4619      	mov	r1, r3
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f000 fedd 	bl	800ea0a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	781b      	ldrb	r3, [r3, #0]
 800dc54:	4619      	mov	r1, r3
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f000 ff09 	bl	800ea6e <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	2200      	movs	r2, #0
 800dc60:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	7b1b      	ldrb	r3, [r3, #12]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d00e      	beq.n	800dc88 <USBH_CDC_InterfaceDeInit+0x62>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	7b1b      	ldrb	r3, [r3, #12]
 800dc6e:	4619      	mov	r1, r3
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f000 feca 	bl	800ea0a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	7b1b      	ldrb	r3, [r3, #12]
 800dc7a:	4619      	mov	r1, r3
 800dc7c:	6878      	ldr	r0, [r7, #4]
 800dc7e:	f000 fef6 	bl	800ea6e <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	2200      	movs	r2, #0
 800dc86:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	7b5b      	ldrb	r3, [r3, #13]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d00e      	beq.n	800dcae <USBH_CDC_InterfaceDeInit+0x88>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	7b5b      	ldrb	r3, [r3, #13]
 800dc94:	4619      	mov	r1, r3
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f000 feb7 	bl	800ea0a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	7b5b      	ldrb	r3, [r3, #13]
 800dca0:	4619      	mov	r1, r3
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f000 fee3 	bl	800ea6e <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	2200      	movs	r2, #0
 800dcac:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800dcae:	687a      	ldr	r2, [r7, #4]
 800dcb0:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800dcb4:	4413      	add	r3, r2
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	69db      	ldr	r3, [r3, #28]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d00f      	beq.n	800dcde <USBH_CDC_InterfaceDeInit+0xb8>
  {
    USBH_free(phost->pActiveClass->pData);
 800dcbe:	687a      	ldr	r2, [r7, #4]
 800dcc0:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800dcc4:	4413      	add	r3, r2
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	69db      	ldr	r3, [r3, #28]
 800dcca:	4618      	mov	r0, r3
 800dccc:	f004 f996 	bl	8011ffc <free>
    phost->pActiveClass->pData = 0U;
 800dcd0:	687a      	ldr	r2, [r7, #4]
 800dcd2:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800dcd6:	4413      	add	r3, r2
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	2200      	movs	r2, #0
 800dcdc:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800dcde:	2300      	movs	r3, #0
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	3710      	adds	r7, #16
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}

0800dce8 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b084      	sub	sp, #16
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800dcf0:	687a      	ldr	r2, [r7, #4]
 800dcf2:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800dcf6:	4413      	add	r3, r2
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	69db      	ldr	r3, [r3, #28]
 800dcfc:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	3340      	adds	r3, #64	; 0x40
 800dd02:	4619      	mov	r1, r3
 800dd04:	6878      	ldr	r0, [r7, #4]
 800dd06:	f000 f8b6 	bl	800de76 <GetLineCoding>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800dd0e:	7afb      	ldrb	r3, [r7, #11]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d107      	bne.n	800dd24 <USBH_CDC_ClassRequest+0x3c>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800dd14:	687a      	ldr	r2, [r7, #4]
 800dd16:	f643 2314 	movw	r3, #14868	; 0x3a14
 800dd1a:	4413      	add	r3, r2
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	2102      	movs	r1, #2
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800dd24:	7afb      	ldrb	r3, [r7, #11]
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3710      	adds	r7, #16
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}
	...

0800dd30 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b084      	sub	sp, #16
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800dd38:	2301      	movs	r3, #1
 800dd3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800dd40:	687a      	ldr	r2, [r7, #4]
 800dd42:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800dd46:	4413      	add	r3, r2
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	69db      	ldr	r3, [r3, #28]
 800dd4c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800dd4e:	68bb      	ldr	r3, [r7, #8]
 800dd50:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800dd54:	2b04      	cmp	r3, #4
 800dd56:	d877      	bhi.n	800de48 <USBH_CDC_Process+0x118>
 800dd58:	a201      	add	r2, pc, #4	; (adr r2, 800dd60 <USBH_CDC_Process+0x30>)
 800dd5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd5e:	bf00      	nop
 800dd60:	0800dd75 	.word	0x0800dd75
 800dd64:	0800dd7b 	.word	0x0800dd7b
 800dd68:	0800ddab 	.word	0x0800ddab
 800dd6c:	0800de1f 	.word	0x0800de1f
 800dd70:	0800de2d 	.word	0x0800de2d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800dd74:	2300      	movs	r3, #0
 800dd76:	73fb      	strb	r3, [r7, #15]
      break;
 800dd78:	e06d      	b.n	800de56 <USBH_CDC_Process+0x126>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dd7e:	4619      	mov	r1, r3
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f000 f897 	bl	800deb4 <SetLineCoding>
 800dd86:	4603      	mov	r3, r0
 800dd88:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800dd8a:	7bbb      	ldrb	r3, [r7, #14]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d104      	bne.n	800dd9a <USBH_CDC_Process+0x6a>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800dd90:	68bb      	ldr	r3, [r7, #8]
 800dd92:	2202      	movs	r2, #2
 800dd94:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800dd98:	e058      	b.n	800de4c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800dd9a:	7bbb      	ldrb	r3, [r7, #14]
 800dd9c:	2b01      	cmp	r3, #1
 800dd9e:	d055      	beq.n	800de4c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800dda0:	68bb      	ldr	r3, [r7, #8]
 800dda2:	2204      	movs	r2, #4
 800dda4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800dda8:	e050      	b.n	800de4c <USBH_CDC_Process+0x11c>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	3340      	adds	r3, #64	; 0x40
 800ddae:	4619      	mov	r1, r3
 800ddb0:	6878      	ldr	r0, [r7, #4]
 800ddb2:	f000 f860 	bl	800de76 <GetLineCoding>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ddba:	7bbb      	ldrb	r3, [r7, #14]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d126      	bne.n	800de0e <USBH_CDC_Process+0xde>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ddd2:	791b      	ldrb	r3, [r3, #4]
 800ddd4:	429a      	cmp	r2, r3
 800ddd6:	d13b      	bne.n	800de50 <USBH_CDC_Process+0x120>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800ddde:	68bb      	ldr	r3, [r7, #8]
 800dde0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dde2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800dde4:	429a      	cmp	r2, r3
 800dde6:	d133      	bne.n	800de50 <USBH_CDC_Process+0x120>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ddf2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ddf4:	429a      	cmp	r2, r3
 800ddf6:	d12b      	bne.n	800de50 <USBH_CDC_Process+0x120>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800ddf8:	68bb      	ldr	r3, [r7, #8]
 800ddfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ddfc:	68bb      	ldr	r3, [r7, #8]
 800ddfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de00:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800de02:	429a      	cmp	r2, r3
 800de04:	d124      	bne.n	800de50 <USBH_CDC_Process+0x120>
        {
          USBH_CDC_LineCodingChanged(phost);
 800de06:	6878      	ldr	r0, [r7, #4]
 800de08:	f000 f95c 	bl	800e0c4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800de0c:	e020      	b.n	800de50 <USBH_CDC_Process+0x120>
        if (req_status != USBH_BUSY)
 800de0e:	7bbb      	ldrb	r3, [r7, #14]
 800de10:	2b01      	cmp	r3, #1
 800de12:	d01d      	beq.n	800de50 <USBH_CDC_Process+0x120>
          CDC_Handle->state = CDC_ERROR_STATE;
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	2204      	movs	r2, #4
 800de18:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800de1c:	e018      	b.n	800de50 <USBH_CDC_Process+0x120>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800de1e:	6878      	ldr	r0, [r7, #4]
 800de20:	f000 f867 	bl	800def2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800de24:	6878      	ldr	r0, [r7, #4]
 800de26:	f000 f8dc 	bl	800dfe2 <CDC_ProcessReception>
      break;
 800de2a:	e014      	b.n	800de56 <USBH_CDC_Process+0x126>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800de2c:	2100      	movs	r1, #0
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f000 fb49 	bl	800e4c6 <USBH_ClrFeature>
 800de34:	4603      	mov	r3, r0
 800de36:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800de38:	7bbb      	ldrb	r3, [r7, #14]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d10a      	bne.n	800de54 <USBH_CDC_Process+0x124>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800de3e:	68bb      	ldr	r3, [r7, #8]
 800de40:	2200      	movs	r2, #0
 800de42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800de46:	e005      	b.n	800de54 <USBH_CDC_Process+0x124>

    default:
      break;
 800de48:	bf00      	nop
 800de4a:	e004      	b.n	800de56 <USBH_CDC_Process+0x126>
      break;
 800de4c:	bf00      	nop
 800de4e:	e002      	b.n	800de56 <USBH_CDC_Process+0x126>
      break;
 800de50:	bf00      	nop
 800de52:	e000      	b.n	800de56 <USBH_CDC_Process+0x126>
      break;
 800de54:	bf00      	nop

  }

  return status;
 800de56:	7bfb      	ldrb	r3, [r7, #15]
}
 800de58:	4618      	mov	r0, r3
 800de5a:	3710      	adds	r7, #16
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}

0800de60 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800de60:	b480      	push	{r7}
 800de62:	b083      	sub	sp, #12
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800de68:	2300      	movs	r3, #0
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	370c      	adds	r7, #12
 800de6e:	46bd      	mov	sp, r7
 800de70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de74:	4770      	bx	lr

0800de76 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800de76:	b580      	push	{r7, lr}
 800de78:	b082      	sub	sp, #8
 800de7a:	af00      	add	r7, sp, #0
 800de7c:	6078      	str	r0, [r7, #4]
 800de7e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	22a1      	movs	r2, #161	; 0xa1
 800de84:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	2221      	movs	r2, #33	; 0x21
 800de8a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2200      	movs	r2, #0
 800de90:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2200      	movs	r2, #0
 800de96:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2207      	movs	r2, #7
 800de9c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	2207      	movs	r2, #7
 800dea2:	4619      	mov	r1, r3
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f000 fb32 	bl	800e50e <USBH_CtlReq>
 800deaa:	4603      	mov	r3, r0
}
 800deac:	4618      	mov	r0, r3
 800deae:	3708      	adds	r7, #8
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}

0800deb4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b082      	sub	sp, #8
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
 800debc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	2221      	movs	r2, #33	; 0x21
 800dec2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2220      	movs	r2, #32
 800dec8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	2200      	movs	r2, #0
 800dece:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	2200      	movs	r2, #0
 800ded4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	2207      	movs	r2, #7
 800deda:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	2207      	movs	r2, #7
 800dee0:	4619      	mov	r1, r3
 800dee2:	6878      	ldr	r0, [r7, #4]
 800dee4:	f000 fb13 	bl	800e50e <USBH_CtlReq>
 800dee8:	4603      	mov	r3, r0
}
 800deea:	4618      	mov	r0, r3
 800deec:	3708      	adds	r7, #8
 800deee:	46bd      	mov	sp, r7
 800def0:	bd80      	pop	{r7, pc}

0800def2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800def2:	b580      	push	{r7, lr}
 800def4:	b086      	sub	sp, #24
 800def6:	af02      	add	r7, sp, #8
 800def8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800defa:	687a      	ldr	r2, [r7, #4]
 800defc:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800df00:	4413      	add	r3, r2
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	69db      	ldr	r3, [r3, #28]
 800df06:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800df08:	2300      	movs	r3, #0
 800df0a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800df12:	2b01      	cmp	r3, #1
 800df14:	d002      	beq.n	800df1c <CDC_ProcessTransmission+0x2a>
 800df16:	2b02      	cmp	r3, #2
 800df18:	d023      	beq.n	800df62 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800df1a:	e05e      	b.n	800dfda <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df20:	68fa      	ldr	r2, [r7, #12]
 800df22:	8b12      	ldrh	r2, [r2, #24]
 800df24:	4293      	cmp	r3, r2
 800df26:	d90b      	bls.n	800df40 <CDC_ProcessTransmission+0x4e>
        USBH_BulkSendData(phost,
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	69d9      	ldr	r1, [r3, #28]
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	8b1a      	ldrh	r2, [r3, #24]
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	7b5b      	ldrb	r3, [r3, #13]
 800df34:	2001      	movs	r0, #1
 800df36:	9000      	str	r0, [sp, #0]
 800df38:	6878      	ldr	r0, [r7, #4]
 800df3a:	f000 fd02 	bl	800e942 <USBH_BulkSendData>
 800df3e:	e00b      	b.n	800df58 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800df48:	b29a      	uxth	r2, r3
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	7b5b      	ldrb	r3, [r3, #13]
 800df4e:	2001      	movs	r0, #1
 800df50:	9000      	str	r0, [sp, #0]
 800df52:	6878      	ldr	r0, [r7, #4]
 800df54:	f000 fcf5 	bl	800e942 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	2202      	movs	r2, #2
 800df5c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800df60:	e03b      	b.n	800dfda <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	7b5b      	ldrb	r3, [r3, #13]
 800df66:	4619      	mov	r1, r3
 800df68:	6878      	ldr	r0, [r7, #4]
 800df6a:	f003 ff3d 	bl	8011de8 <USBH_LL_GetURBState>
 800df6e:	4603      	mov	r3, r0
 800df70:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800df72:	7afb      	ldrb	r3, [r7, #11]
 800df74:	2b01      	cmp	r3, #1
 800df76:	d128      	bne.n	800dfca <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df7c:	68fa      	ldr	r2, [r7, #12]
 800df7e:	8b12      	ldrh	r2, [r2, #24]
 800df80:	4293      	cmp	r3, r2
 800df82:	d90e      	bls.n	800dfa2 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df88:	68fa      	ldr	r2, [r7, #12]
 800df8a:	8b12      	ldrh	r2, [r2, #24]
 800df8c:	1a9a      	subs	r2, r3, r2
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	69db      	ldr	r3, [r3, #28]
 800df96:	68fa      	ldr	r2, [r7, #12]
 800df98:	8b12      	ldrh	r2, [r2, #24]
 800df9a:	441a      	add	r2, r3
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	61da      	str	r2, [r3, #28]
 800dfa0:	e002      	b.n	800dfa8 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d004      	beq.n	800dfba <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	2201      	movs	r2, #1
 800dfb4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800dfb8:	e00e      	b.n	800dfd8 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800dfc2:	6878      	ldr	r0, [r7, #4]
 800dfc4:	f000 f86a 	bl	800e09c <USBH_CDC_TransmitCallback>
      break;
 800dfc8:	e006      	b.n	800dfd8 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 800dfca:	7afb      	ldrb	r3, [r7, #11]
 800dfcc:	2b02      	cmp	r3, #2
 800dfce:	d103      	bne.n	800dfd8 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	2201      	movs	r2, #1
 800dfd4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800dfd8:	bf00      	nop
  }
}
 800dfda:	bf00      	nop
 800dfdc:	3710      	adds	r7, #16
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}

0800dfe2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800dfe2:	b580      	push	{r7, lr}
 800dfe4:	b086      	sub	sp, #24
 800dfe6:	af00      	add	r7, sp, #0
 800dfe8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800dfea:	687a      	ldr	r2, [r7, #4]
 800dfec:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800dff0:	4413      	add	r3, r2
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	69db      	ldr	r3, [r3, #28]
 800dff6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800dff8:	2300      	movs	r3, #0
 800dffa:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800dffc:	697b      	ldr	r3, [r7, #20]
 800dffe:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800e002:	2b03      	cmp	r3, #3
 800e004:	d002      	beq.n	800e00c <CDC_ProcessReception+0x2a>
 800e006:	2b04      	cmp	r3, #4
 800e008:	d00e      	beq.n	800e028 <CDC_ProcessReception+0x46>
#endif
      }
      break;

    default:
      break;
 800e00a:	e043      	b.n	800e094 <CDC_ProcessReception+0xb2>
      USBH_BulkReceiveData(phost,
 800e00c:	697b      	ldr	r3, [r7, #20]
 800e00e:	6a19      	ldr	r1, [r3, #32]
 800e010:	697b      	ldr	r3, [r7, #20]
 800e012:	8b5a      	ldrh	r2, [r3, #26]
 800e014:	697b      	ldr	r3, [r7, #20]
 800e016:	7b1b      	ldrb	r3, [r3, #12]
 800e018:	6878      	ldr	r0, [r7, #4]
 800e01a:	f000 fcb9 	bl	800e990 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800e01e:	697b      	ldr	r3, [r7, #20]
 800e020:	2204      	movs	r2, #4
 800e022:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800e026:	e035      	b.n	800e094 <CDC_ProcessReception+0xb2>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800e028:	697b      	ldr	r3, [r7, #20]
 800e02a:	7b1b      	ldrb	r3, [r3, #12]
 800e02c:	4619      	mov	r1, r3
 800e02e:	6878      	ldr	r0, [r7, #4]
 800e030:	f003 feda 	bl	8011de8 <USBH_LL_GetURBState>
 800e034:	4603      	mov	r3, r0
 800e036:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800e038:	7cfb      	ldrb	r3, [r7, #19]
 800e03a:	2b01      	cmp	r3, #1
 800e03c:	d129      	bne.n	800e092 <CDC_ProcessReception+0xb0>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	7b1b      	ldrb	r3, [r3, #12]
 800e042:	4619      	mov	r1, r3
 800e044:	6878      	ldr	r0, [r7, #4]
 800e046:	f003 fe35 	bl	8011cb4 <USBH_LL_GetLastXferSize>
 800e04a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800e04c:	697b      	ldr	r3, [r7, #20]
 800e04e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e050:	68fa      	ldr	r2, [r7, #12]
 800e052:	429a      	cmp	r2, r3
 800e054:	d016      	beq.n	800e084 <CDC_ProcessReception+0xa2>
 800e056:	697b      	ldr	r3, [r7, #20]
 800e058:	8b5b      	ldrh	r3, [r3, #26]
 800e05a:	461a      	mov	r2, r3
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	4293      	cmp	r3, r2
 800e060:	d910      	bls.n	800e084 <CDC_ProcessReception+0xa2>
          CDC_Handle->RxDataLength -= length ;
 800e062:	697b      	ldr	r3, [r7, #20]
 800e064:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	1ad2      	subs	r2, r2, r3
 800e06a:	697b      	ldr	r3, [r7, #20]
 800e06c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800e06e:	697b      	ldr	r3, [r7, #20]
 800e070:	6a1a      	ldr	r2, [r3, #32]
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	441a      	add	r2, r3
 800e076:	697b      	ldr	r3, [r7, #20]
 800e078:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800e07a:	697b      	ldr	r3, [r7, #20]
 800e07c:	2203      	movs	r2, #3
 800e07e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800e082:	e006      	b.n	800e092 <CDC_ProcessReception+0xb0>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800e084:	697b      	ldr	r3, [r7, #20]
 800e086:	2200      	movs	r2, #0
 800e088:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f000 f80f 	bl	800e0b0 <USBH_CDC_ReceiveCallback>
      break;
 800e092:	bf00      	nop
  }
}
 800e094:	bf00      	nop
 800e096:	3718      	adds	r7, #24
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd80      	pop	{r7, pc}

0800e09c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800e09c:	b480      	push	{r7}
 800e09e:	b083      	sub	sp, #12
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e0a4:	bf00      	nop
 800e0a6:	370c      	adds	r7, #12
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ae:	4770      	bx	lr

0800e0b0 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800e0b0:	b480      	push	{r7}
 800e0b2:	b083      	sub	sp, #12
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e0b8:	bf00      	nop
 800e0ba:	370c      	adds	r7, #12
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c2:	4770      	bx	lr

0800e0c4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800e0c4:	b480      	push	{r7}
 800e0c6:	b083      	sub	sp, #12
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e0cc:	bf00      	nop
 800e0ce:	370c      	adds	r7, #12
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d6:	4770      	bx	lr

0800e0d8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b084      	sub	sp, #16
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	60f8      	str	r0, [r7, #12]
 800e0e0:	60b9      	str	r1, [r7, #8]
 800e0e2:	4613      	mov	r3, r2
 800e0e4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d101      	bne.n	800e0f0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800e0ec:	2302      	movs	r3, #2
 800e0ee:	e038      	b.n	800e162 <USBH_Init+0x8a>
  }

  /* Set DRiver ID */
  phost->id = id;
 800e0f0:	68fa      	ldr	r2, [r7, #12]
 800e0f2:	f643 230c 	movw	r3, #14860	; 0x3a0c
 800e0f6:	4413      	add	r3, r2
 800e0f8:	79fa      	ldrb	r2, [r7, #7]
 800e0fa:	701a      	strb	r2, [r3, #0]

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800e0fc:	68fa      	ldr	r2, [r7, #12]
 800e0fe:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800e102:	4413      	add	r3, r2
 800e104:	2200      	movs	r2, #0
 800e106:	601a      	str	r2, [r3, #0]
  phost->ClassNumber = 0U;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	f503 5367 	add.w	r3, r3, #14784	; 0x39c0
 800e10e:	2200      	movs	r2, #0
 800e110:	601a      	str	r2, [r3, #0]

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800e112:	68f8      	ldr	r0, [r7, #12]
 800e114:	f000 f829 	bl	800e16a <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800e118:	68fa      	ldr	r2, [r7, #12]
 800e11a:	f643 1363 	movw	r3, #14691	; 0x3963
 800e11e:	4413      	add	r3, r2
 800e120:	2200      	movs	r2, #0
 800e122:	701a      	strb	r2, [r3, #0]
  phost->device.is_connected = 0U;
 800e124:	68fa      	ldr	r2, [r7, #12]
 800e126:	f643 1360 	movw	r3, #14688	; 0x3960
 800e12a:	4413      	add	r3, r2
 800e12c:	2200      	movs	r2, #0
 800e12e:	701a      	strb	r2, [r3, #0]
  phost->device.is_disconnected = 0U;
 800e130:	68fa      	ldr	r2, [r7, #12]
 800e132:	f643 1361 	movw	r3, #14689	; 0x3961
 800e136:	4413      	add	r3, r2
 800e138:	2200      	movs	r2, #0
 800e13a:	701a      	strb	r2, [r3, #0]
  phost->device.is_ReEnumerated = 0U;
 800e13c:	68fa      	ldr	r2, [r7, #12]
 800e13e:	f643 1362 	movw	r3, #14690	; 0x3962
 800e142:	4413      	add	r3, r2
 800e144:	2200      	movs	r2, #0
 800e146:	701a      	strb	r2, [r3, #0]

  /* Assign User process */
  if (pUsrFunc != NULL)
 800e148:	68bb      	ldr	r3, [r7, #8]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d005      	beq.n	800e15a <USBH_Init+0x82>
  {
    phost->pUser = pUsrFunc;
 800e14e:	68fa      	ldr	r2, [r7, #12]
 800e150:	f643 2314 	movw	r3, #14868	; 0x3a14
 800e154:	4413      	add	r3, r2
 800e156:	68ba      	ldr	r2, [r7, #8]
 800e158:	601a      	str	r2, [r3, #0]

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800e15a:	68f8      	ldr	r0, [r7, #12]
 800e15c:	f003 fd30 	bl	8011bc0 <USBH_LL_Init>

  return USBH_OK;
 800e160:	2300      	movs	r3, #0
}
 800e162:	4618      	mov	r0, r3
 800e164:	3710      	adds	r7, #16
 800e166:	46bd      	mov	sp, r7
 800e168:	bd80      	pop	{r7, pc}

0800e16a <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800e16a:	b480      	push	{r7}
 800e16c:	b085      	sub	sp, #20
 800e16e:	af00      	add	r7, sp, #0
 800e170:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800e172:	2300      	movs	r3, #0
 800e174:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e176:	2300      	movs	r3, #0
 800e178:	60fb      	str	r3, [r7, #12]
 800e17a:	e00a      	b.n	800e192 <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 800e17c:	687a      	ldr	r2, [r7, #4]
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 800e184:	009b      	lsls	r3, r3, #2
 800e186:	4413      	add	r3, r2
 800e188:	2200      	movs	r2, #0
 800e18a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	3301      	adds	r3, #1
 800e190:	60fb      	str	r3, [r7, #12]
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	2b0e      	cmp	r3, #14
 800e196:	d9f1      	bls.n	800e17c <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e198:	2300      	movs	r3, #0
 800e19a:	60fb      	str	r3, [r7, #12]
 800e19c:	e009      	b.n	800e1b2 <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 800e19e:	687a      	ldr	r2, [r7, #4]
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	4413      	add	r3, r2
 800e1a4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	3301      	adds	r3, #1
 800e1b0:	60fb      	str	r3, [r7, #12]
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
 800e1b8:	d3f1      	bcc.n	800e19e <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2200      	movs	r2, #0
 800e1be:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	2201      	movs	r2, #1
 800e1ca:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800e1cc:	687a      	ldr	r2, [r7, #4]
 800e1ce:	f643 2304 	movw	r3, #14852	; 0x3a04
 800e1d2:	4413      	add	r3, r2
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	601a      	str	r2, [r3, #0]

  phost->Control.state = CTRL_SETUP;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2201      	movs	r2, #1
 800e1dc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	2240      	movs	r2, #64	; 0x40
 800e1e2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800e1ea:	687a      	ldr	r2, [r7, #4]
 800e1ec:	f643 135c 	movw	r3, #14684	; 0x395c
 800e1f0:	4413      	add	r3, r2
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	701a      	strb	r2, [r3, #0]
  phost->device.speed = USBH_SPEED_FULL;
 800e1f6:	687a      	ldr	r2, [r7, #4]
 800e1f8:	f643 135d 	movw	r3, #14685	; 0x395d
 800e1fc:	4413      	add	r3, r2
 800e1fe:	2201      	movs	r2, #1
 800e200:	701a      	strb	r2, [r3, #0]
  phost->device.RstCnt = 0U;
 800e202:	687a      	ldr	r2, [r7, #4]
 800e204:	f643 135f 	movw	r3, #14687	; 0x395f
 800e208:	4413      	add	r3, r2
 800e20a:	2200      	movs	r2, #0
 800e20c:	701a      	strb	r2, [r3, #0]
  phost->device.EnumCnt = 0U;
 800e20e:	687a      	ldr	r2, [r7, #4]
 800e210:	f643 135e 	movw	r3, #14686	; 0x395e
 800e214:	4413      	add	r3, r2
 800e216:	2200      	movs	r2, #0
 800e218:	701a      	strb	r2, [r3, #0]

  return USBH_OK;
 800e21a:	2300      	movs	r3, #0
}
 800e21c:	4618      	mov	r0, r3
 800e21e:	3714      	adds	r7, #20
 800e220:	46bd      	mov	sp, r7
 800e222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e226:	4770      	bx	lr

0800e228 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800e228:	b480      	push	{r7}
 800e22a:	b085      	sub	sp, #20
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
 800e230:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800e232:	2300      	movs	r3, #0
 800e234:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800e236:	683b      	ldr	r3, [r7, #0]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d01a      	beq.n	800e272 <USBH_RegisterClass+0x4a>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	f503 5367 	add.w	r3, r3, #14784	; 0x39c0
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d111      	bne.n	800e26c <USBH_RegisterClass+0x44>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f503 5367 	add.w	r3, r3, #14784	; 0x39c0
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	1c59      	adds	r1, r3, #1
 800e252:	687a      	ldr	r2, [r7, #4]
 800e254:	f502 5267 	add.w	r2, r2, #14784	; 0x39c0
 800e258:	6011      	str	r1, [r2, #0]
 800e25a:	687a      	ldr	r2, [r7, #4]
 800e25c:	f603 636e 	addw	r3, r3, #3694	; 0xe6e
 800e260:	6839      	ldr	r1, [r7, #0]
 800e262:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800e266:	2300      	movs	r3, #0
 800e268:	73fb      	strb	r3, [r7, #15]
 800e26a:	e004      	b.n	800e276 <USBH_RegisterClass+0x4e>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800e26c:	2302      	movs	r3, #2
 800e26e:	73fb      	strb	r3, [r7, #15]
 800e270:	e001      	b.n	800e276 <USBH_RegisterClass+0x4e>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800e272:	2302      	movs	r3, #2
 800e274:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e276:	7bfb      	ldrb	r3, [r7, #15]
}
 800e278:	4618      	mov	r0, r3
 800e27a:	3714      	adds	r7, #20
 800e27c:	46bd      	mov	sp, r7
 800e27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e282:	4770      	bx	lr

0800e284 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800e284:	b480      	push	{r7}
 800e286:	b085      	sub	sp, #20
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
 800e28c:	460b      	mov	r3, r1
 800e28e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800e290:	2300      	movs	r3, #0
 800e292:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800e294:	687a      	ldr	r2, [r7, #4]
 800e296:	f643 137c 	movw	r3, #14716	; 0x397c
 800e29a:	4413      	add	r3, r2
 800e29c:	781b      	ldrb	r3, [r3, #0]
 800e29e:	78fa      	ldrb	r2, [r7, #3]
 800e2a0:	429a      	cmp	r2, r3
 800e2a2:	d206      	bcs.n	800e2b2 <USBH_SelectInterface+0x2e>
  {
    phost->device.current_interface = interface;
 800e2a4:	687a      	ldr	r2, [r7, #4]
 800e2a6:	f643 1364 	movw	r3, #14692	; 0x3964
 800e2aa:	4413      	add	r3, r2
 800e2ac:	78fa      	ldrb	r2, [r7, #3]
 800e2ae:	701a      	strb	r2, [r3, #0]
 800e2b0:	e001      	b.n	800e2b6 <USBH_SelectInterface+0x32>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800e2b2:	2302      	movs	r3, #2
 800e2b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e2b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	3714      	adds	r7, #20
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c2:	4770      	bx	lr

0800e2c4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800e2c4:	b480      	push	{r7}
 800e2c6:	b087      	sub	sp, #28
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
 800e2cc:	4608      	mov	r0, r1
 800e2ce:	4611      	mov	r1, r2
 800e2d0:	461a      	mov	r2, r3
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	70fb      	strb	r3, [r7, #3]
 800e2d6:	460b      	mov	r3, r1
 800e2d8:	70bb      	strb	r3, [r7, #2]
 800e2da:	4613      	mov	r3, r2
 800e2dc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800e2de:	2300      	movs	r3, #0
 800e2e0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800e2e6:	687a      	ldr	r2, [r7, #4]
 800e2e8:	f643 1378 	movw	r3, #14712	; 0x3978
 800e2ec:	4413      	add	r3, r2
 800e2ee:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e2f0:	e025      	b.n	800e33e <USBH_FindInterface+0x7a>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800e2f2:	7dfb      	ldrb	r3, [r7, #23]
 800e2f4:	221a      	movs	r2, #26
 800e2f6:	fb02 f303 	mul.w	r3, r2, r3
 800e2fa:	3308      	adds	r3, #8
 800e2fc:	68fa      	ldr	r2, [r7, #12]
 800e2fe:	4413      	add	r3, r2
 800e300:	3302      	adds	r3, #2
 800e302:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e304:	693b      	ldr	r3, [r7, #16]
 800e306:	795b      	ldrb	r3, [r3, #5]
 800e308:	78fa      	ldrb	r2, [r7, #3]
 800e30a:	429a      	cmp	r2, r3
 800e30c:	d002      	beq.n	800e314 <USBH_FindInterface+0x50>
 800e30e:	78fb      	ldrb	r3, [r7, #3]
 800e310:	2bff      	cmp	r3, #255	; 0xff
 800e312:	d111      	bne.n	800e338 <USBH_FindInterface+0x74>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e314:	693b      	ldr	r3, [r7, #16]
 800e316:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e318:	78ba      	ldrb	r2, [r7, #2]
 800e31a:	429a      	cmp	r2, r3
 800e31c:	d002      	beq.n	800e324 <USBH_FindInterface+0x60>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e31e:	78bb      	ldrb	r3, [r7, #2]
 800e320:	2bff      	cmp	r3, #255	; 0xff
 800e322:	d109      	bne.n	800e338 <USBH_FindInterface+0x74>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e324:	693b      	ldr	r3, [r7, #16]
 800e326:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e328:	787a      	ldrb	r2, [r7, #1]
 800e32a:	429a      	cmp	r2, r3
 800e32c:	d002      	beq.n	800e334 <USBH_FindInterface+0x70>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e32e:	787b      	ldrb	r3, [r7, #1]
 800e330:	2bff      	cmp	r3, #255	; 0xff
 800e332:	d101      	bne.n	800e338 <USBH_FindInterface+0x74>
    {
      return  if_ix;
 800e334:	7dfb      	ldrb	r3, [r7, #23]
 800e336:	e006      	b.n	800e346 <USBH_FindInterface+0x82>
    }
    if_ix++;
 800e338:	7dfb      	ldrb	r3, [r7, #23]
 800e33a:	3301      	adds	r3, #1
 800e33c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e33e:	7dfb      	ldrb	r3, [r7, #23]
 800e340:	2b01      	cmp	r3, #1
 800e342:	d9d6      	bls.n	800e2f2 <USBH_FindInterface+0x2e>
  }
  return 0xFFU;
 800e344:	23ff      	movs	r3, #255	; 0xff
}
 800e346:	4618      	mov	r0, r3
 800e348:	371c      	adds	r7, #28
 800e34a:	46bd      	mov	sp, r7
 800e34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e350:	4770      	bx	lr

0800e352 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800e352:	b580      	push	{r7, lr}
 800e354:	b082      	sub	sp, #8
 800e356:	af00      	add	r7, sp, #0
 800e358:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800e35a:	6878      	ldr	r0, [r7, #4]
 800e35c:	f003 fc70 	bl	8011c40 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800e360:	2101      	movs	r1, #1
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	f003 fd55 	bl	8011e12 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800e368:	2300      	movs	r3, #0
}
 800e36a:	4618      	mov	r0, r3
 800e36c:	3708      	adds	r7, #8
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}

0800e372 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800e372:	b480      	push	{r7}
 800e374:	b083      	sub	sp, #12
 800e376:	af00      	add	r7, sp, #0
 800e378:	6078      	str	r0, [r7, #4]
 800e37a:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800e37c:	687a      	ldr	r2, [r7, #4]
 800e37e:	f643 2304 	movw	r3, #14852	; 0x3a04
 800e382:	4413      	add	r3, r2
 800e384:	683a      	ldr	r2, [r7, #0]
 800e386:	601a      	str	r2, [r3, #0]
}
 800e388:	bf00      	nop
 800e38a:	370c      	adds	r7, #12
 800e38c:	46bd      	mov	sp, r7
 800e38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e392:	4770      	bx	lr

0800e394 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b082      	sub	sp, #8
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800e39c:	687a      	ldr	r2, [r7, #4]
 800e39e:	f643 2304 	movw	r3, #14852	; 0x3a04
 800e3a2:	4413      	add	r3, r2
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	1c5a      	adds	r2, r3, #1
 800e3a8:	6879      	ldr	r1, [r7, #4]
 800e3aa:	f643 2304 	movw	r3, #14852	; 0x3a04
 800e3ae:	440b      	add	r3, r1
 800e3b0:	601a      	str	r2, [r3, #0]
  USBH_HandleSof(phost);
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f000 f804 	bl	800e3c0 <USBH_HandleSof>
}
 800e3b8:	bf00      	nop
 800e3ba:	3708      	adds	r7, #8
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bd80      	pop	{r7, pc}

0800e3c0 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b082      	sub	sp, #8
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	781b      	ldrb	r3, [r3, #0]
 800e3cc:	b2db      	uxtb	r3, r3
 800e3ce:	2b0b      	cmp	r3, #11
 800e3d0:	d10e      	bne.n	800e3f0 <USBH_HandleSof+0x30>
 800e3d2:	687a      	ldr	r2, [r7, #4]
 800e3d4:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800e3d8:	4413      	add	r3, r2
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d007      	beq.n	800e3f0 <USBH_HandleSof+0x30>
  {
    phost->pActiveClass->SOFProcess(phost);
 800e3e0:	687a      	ldr	r2, [r7, #4]
 800e3e2:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800e3e6:	4413      	add	r3, r2
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	699b      	ldr	r3, [r3, #24]
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	4798      	blx	r3
  }
}
 800e3f0:	bf00      	nop
 800e3f2:	3708      	adds	r7, #8
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}

0800e3f8 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800e3f8:	b480      	push	{r7}
 800e3fa:	b083      	sub	sp, #12
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800e400:	687a      	ldr	r2, [r7, #4]
 800e402:	f643 1363 	movw	r3, #14691	; 0x3963
 800e406:	4413      	add	r3, r2
 800e408:	2201      	movs	r2, #1
 800e40a:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800e40c:	bf00      	nop
}
 800e40e:	370c      	adds	r7, #12
 800e410:	46bd      	mov	sp, r7
 800e412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e416:	4770      	bx	lr

0800e418 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800e418:	b480      	push	{r7}
 800e41a:	b083      	sub	sp, #12
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800e420:	687a      	ldr	r2, [r7, #4]
 800e422:	f643 1363 	movw	r3, #14691	; 0x3963
 800e426:	4413      	add	r3, r2
 800e428:	2200      	movs	r2, #0
 800e42a:	701a      	strb	r2, [r3, #0]

  return;
 800e42c:	bf00      	nop
}
 800e42e:	370c      	adds	r7, #12
 800e430:	46bd      	mov	sp, r7
 800e432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e436:	4770      	bx	lr

0800e438 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800e438:	b480      	push	{r7}
 800e43a:	b083      	sub	sp, #12
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800e440:	687a      	ldr	r2, [r7, #4]
 800e442:	f643 1360 	movw	r3, #14688	; 0x3960
 800e446:	4413      	add	r3, r2
 800e448:	2201      	movs	r2, #1
 800e44a:	701a      	strb	r2, [r3, #0]
  phost->device.is_disconnected = 0U;
 800e44c:	687a      	ldr	r2, [r7, #4]
 800e44e:	f643 1361 	movw	r3, #14689	; 0x3961
 800e452:	4413      	add	r3, r2
 800e454:	2200      	movs	r2, #0
 800e456:	701a      	strb	r2, [r3, #0]
  phost->device.is_ReEnumerated = 0U;
 800e458:	687a      	ldr	r2, [r7, #4]
 800e45a:	f643 1362 	movw	r3, #14690	; 0x3962
 800e45e:	4413      	add	r3, r2
 800e460:	2200      	movs	r2, #0
 800e462:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800e464:	2300      	movs	r3, #0
}
 800e466:	4618      	mov	r0, r3
 800e468:	370c      	adds	r7, #12
 800e46a:	46bd      	mov	sp, r7
 800e46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e470:	4770      	bx	lr

0800e472 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800e472:	b580      	push	{r7, lr}
 800e474:	b082      	sub	sp, #8
 800e476:	af00      	add	r7, sp, #0
 800e478:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800e47a:	687a      	ldr	r2, [r7, #4]
 800e47c:	f643 1361 	movw	r3, #14689	; 0x3961
 800e480:	4413      	add	r3, r2
 800e482:	2201      	movs	r2, #1
 800e484:	701a      	strb	r2, [r3, #0]
  phost->device.is_connected = 0U;
 800e486:	687a      	ldr	r2, [r7, #4]
 800e488:	f643 1360 	movw	r3, #14688	; 0x3960
 800e48c:	4413      	add	r3, r2
 800e48e:	2200      	movs	r2, #0
 800e490:	701a      	strb	r2, [r3, #0]
  phost->device.PortEnabled = 0U;
 800e492:	687a      	ldr	r2, [r7, #4]
 800e494:	f643 1363 	movw	r3, #14691	; 0x3963
 800e498:	4413      	add	r3, r2
 800e49a:	2200      	movs	r2, #0
 800e49c:	701a      	strb	r2, [r3, #0]

  /* Stop Host */
  USBH_LL_Stop(phost);
 800e49e:	6878      	ldr	r0, [r7, #4]
 800e4a0:	f003 fbeb 	bl	8011c7a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	791b      	ldrb	r3, [r3, #4]
 800e4a8:	4619      	mov	r1, r3
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f000 fadf 	bl	800ea6e <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	795b      	ldrb	r3, [r3, #5]
 800e4b4:	4619      	mov	r1, r3
 800e4b6:	6878      	ldr	r0, [r7, #4]
 800e4b8:	f000 fad9 	bl	800ea6e <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800e4bc:	2300      	movs	r3, #0
}
 800e4be:	4618      	mov	r0, r3
 800e4c0:	3708      	adds	r7, #8
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	bd80      	pop	{r7, pc}

0800e4c6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800e4c6:	b580      	push	{r7, lr}
 800e4c8:	b082      	sub	sp, #8
 800e4ca:	af00      	add	r7, sp, #0
 800e4cc:	6078      	str	r0, [r7, #4]
 800e4ce:	460b      	mov	r3, r1
 800e4d0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	789b      	ldrb	r3, [r3, #2]
 800e4d6:	2b01      	cmp	r3, #1
 800e4d8:	d10f      	bne.n	800e4fa <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	2202      	movs	r2, #2
 800e4de:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2201      	movs	r2, #1
 800e4e4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800e4ec:	78fb      	ldrb	r3, [r7, #3]
 800e4ee:	b29a      	uxth	r2, r3
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	2100      	movs	r1, #0
 800e4fe:	6878      	ldr	r0, [r7, #4]
 800e500:	f000 f805 	bl	800e50e <USBH_CtlReq>
 800e504:	4603      	mov	r3, r0
}
 800e506:	4618      	mov	r0, r3
 800e508:	3708      	adds	r7, #8
 800e50a:	46bd      	mov	sp, r7
 800e50c:	bd80      	pop	{r7, pc}

0800e50e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800e50e:	b580      	push	{r7, lr}
 800e510:	b086      	sub	sp, #24
 800e512:	af00      	add	r7, sp, #0
 800e514:	60f8      	str	r0, [r7, #12]
 800e516:	60b9      	str	r1, [r7, #8]
 800e518:	4613      	mov	r3, r2
 800e51a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800e51c:	2301      	movs	r3, #1
 800e51e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	789b      	ldrb	r3, [r3, #2]
 800e524:	2b01      	cmp	r3, #1
 800e526:	d002      	beq.n	800e52e <USBH_CtlReq+0x20>
 800e528:	2b02      	cmp	r3, #2
 800e52a:	d00f      	beq.n	800e54c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800e52c:	e027      	b.n	800e57e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	68ba      	ldr	r2, [r7, #8]
 800e532:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	88fa      	ldrh	r2, [r7, #6]
 800e538:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	2201      	movs	r2, #1
 800e53e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	2202      	movs	r2, #2
 800e544:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800e546:	2301      	movs	r3, #1
 800e548:	75fb      	strb	r3, [r7, #23]
      break;
 800e54a:	e018      	b.n	800e57e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800e54c:	68f8      	ldr	r0, [r7, #12]
 800e54e:	f000 f81b 	bl	800e588 <USBH_HandleControl>
 800e552:	4603      	mov	r3, r0
 800e554:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800e556:	7dfb      	ldrb	r3, [r7, #23]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d002      	beq.n	800e562 <USBH_CtlReq+0x54>
 800e55c:	7dfb      	ldrb	r3, [r7, #23]
 800e55e:	2b03      	cmp	r3, #3
 800e560:	d106      	bne.n	800e570 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	2201      	movs	r2, #1
 800e566:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	2200      	movs	r2, #0
 800e56c:	761a      	strb	r2, [r3, #24]
      break;
 800e56e:	e005      	b.n	800e57c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800e570:	7dfb      	ldrb	r3, [r7, #23]
 800e572:	2b02      	cmp	r3, #2
 800e574:	d102      	bne.n	800e57c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	2201      	movs	r2, #1
 800e57a:	709a      	strb	r2, [r3, #2]
      break;
 800e57c:	bf00      	nop
  }
  return status;
 800e57e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e580:	4618      	mov	r0, r3
 800e582:	3718      	adds	r7, #24
 800e584:	46bd      	mov	sp, r7
 800e586:	bd80      	pop	{r7, pc}

0800e588 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b086      	sub	sp, #24
 800e58c:	af02      	add	r7, sp, #8
 800e58e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800e590:	2301      	movs	r3, #1
 800e592:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e594:	2300      	movs	r3, #0
 800e596:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	7e1b      	ldrb	r3, [r3, #24]
 800e59c:	3b01      	subs	r3, #1
 800e59e:	2b0a      	cmp	r3, #10
 800e5a0:	f200 8160 	bhi.w	800e864 <USBH_HandleControl+0x2dc>
 800e5a4:	a201      	add	r2, pc, #4	; (adr r2, 800e5ac <USBH_HandleControl+0x24>)
 800e5a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5aa:	bf00      	nop
 800e5ac:	0800e5d9 	.word	0x0800e5d9
 800e5b0:	0800e5f3 	.word	0x0800e5f3
 800e5b4:	0800e65d 	.word	0x0800e65d
 800e5b8:	0800e687 	.word	0x0800e687
 800e5bc:	0800e6bf 	.word	0x0800e6bf
 800e5c0:	0800e6ed 	.word	0x0800e6ed
 800e5c4:	0800e73f 	.word	0x0800e73f
 800e5c8:	0800e765 	.word	0x0800e765
 800e5cc:	0800e7a1 	.word	0x0800e7a1
 800e5d0:	0800e7cb 	.word	0x0800e7cb
 800e5d4:	0800e809 	.word	0x0800e809
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	f103 0110 	add.w	r1, r3, #16
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	795b      	ldrb	r3, [r3, #5]
 800e5e2:	461a      	mov	r2, r3
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f000 f94d 	bl	800e884 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	2202      	movs	r2, #2
 800e5ee:	761a      	strb	r2, [r3, #24]
      break;
 800e5f0:	e143      	b.n	800e87a <USBH_HandleControl+0x2f2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	795b      	ldrb	r3, [r3, #5]
 800e5f6:	4619      	mov	r1, r3
 800e5f8:	6878      	ldr	r0, [r7, #4]
 800e5fa:	f003 fbf5 	bl	8011de8 <USBH_LL_GetURBState>
 800e5fe:	4603      	mov	r3, r0
 800e600:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800e602:	7bbb      	ldrb	r3, [r7, #14]
 800e604:	2b01      	cmp	r3, #1
 800e606:	d11e      	bne.n	800e646 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	7c1b      	ldrb	r3, [r3, #16]
 800e60c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e610:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	8adb      	ldrh	r3, [r3, #22]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d00a      	beq.n	800e630 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800e61a:	7b7b      	ldrb	r3, [r7, #13]
 800e61c:	2b80      	cmp	r3, #128	; 0x80
 800e61e:	d103      	bne.n	800e628 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	2203      	movs	r2, #3
 800e624:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e626:	e11f      	b.n	800e868 <USBH_HandleControl+0x2e0>
            phost->Control.state = CTRL_DATA_OUT;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2205      	movs	r2, #5
 800e62c:	761a      	strb	r2, [r3, #24]
      break;
 800e62e:	e11b      	b.n	800e868 <USBH_HandleControl+0x2e0>
          if (direction == USB_D2H)
 800e630:	7b7b      	ldrb	r3, [r7, #13]
 800e632:	2b80      	cmp	r3, #128	; 0x80
 800e634:	d103      	bne.n	800e63e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	2209      	movs	r2, #9
 800e63a:	761a      	strb	r2, [r3, #24]
      break;
 800e63c:	e114      	b.n	800e868 <USBH_HandleControl+0x2e0>
            phost->Control.state = CTRL_STATUS_IN;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	2207      	movs	r2, #7
 800e642:	761a      	strb	r2, [r3, #24]
      break;
 800e644:	e110      	b.n	800e868 <USBH_HandleControl+0x2e0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800e646:	7bbb      	ldrb	r3, [r7, #14]
 800e648:	2b04      	cmp	r3, #4
 800e64a:	d003      	beq.n	800e654 <USBH_HandleControl+0xcc>
 800e64c:	7bbb      	ldrb	r3, [r7, #14]
 800e64e:	2b02      	cmp	r3, #2
 800e650:	f040 810a 	bne.w	800e868 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	220b      	movs	r2, #11
 800e658:	761a      	strb	r2, [r3, #24]
      break;
 800e65a:	e105      	b.n	800e868 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800e65c:	687a      	ldr	r2, [r7, #4]
 800e65e:	f643 2304 	movw	r3, #14852	; 0x3a04
 800e662:	4413      	add	r3, r2
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	b29a      	uxth	r2, r3
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	6899      	ldr	r1, [r3, #8]
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	899a      	ldrh	r2, [r3, #12]
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	791b      	ldrb	r3, [r3, #4]
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	f000 f944 	bl	800e906 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	2204      	movs	r2, #4
 800e682:	761a      	strb	r2, [r3, #24]
      break;
 800e684:	e0f9      	b.n	800e87a <USBH_HandleControl+0x2f2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	791b      	ldrb	r3, [r3, #4]
 800e68a:	4619      	mov	r1, r3
 800e68c:	6878      	ldr	r0, [r7, #4]
 800e68e:	f003 fbab 	bl	8011de8 <USBH_LL_GetURBState>
 800e692:	4603      	mov	r3, r0
 800e694:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800e696:	7bbb      	ldrb	r3, [r7, #14]
 800e698:	2b01      	cmp	r3, #1
 800e69a:	d102      	bne.n	800e6a2 <USBH_HandleControl+0x11a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2209      	movs	r2, #9
 800e6a0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800e6a2:	7bbb      	ldrb	r3, [r7, #14]
 800e6a4:	2b05      	cmp	r3, #5
 800e6a6:	d102      	bne.n	800e6ae <USBH_HandleControl+0x126>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800e6a8:	2303      	movs	r3, #3
 800e6aa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e6ac:	e0de      	b.n	800e86c <USBH_HandleControl+0x2e4>
        if (URB_Status == USBH_URB_ERROR)
 800e6ae:	7bbb      	ldrb	r3, [r7, #14]
 800e6b0:	2b04      	cmp	r3, #4
 800e6b2:	f040 80db 	bne.w	800e86c <USBH_HandleControl+0x2e4>
          phost->Control.state = CTRL_ERROR;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	220b      	movs	r2, #11
 800e6ba:	761a      	strb	r2, [r3, #24]
      break;
 800e6bc:	e0d6      	b.n	800e86c <USBH_HandleControl+0x2e4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	6899      	ldr	r1, [r3, #8]
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	899a      	ldrh	r2, [r3, #12]
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	795b      	ldrb	r3, [r3, #5]
 800e6ca:	2001      	movs	r0, #1
 800e6cc:	9000      	str	r0, [sp, #0]
 800e6ce:	6878      	ldr	r0, [r7, #4]
 800e6d0:	f000 f8f2 	bl	800e8b8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800e6d4:	687a      	ldr	r2, [r7, #4]
 800e6d6:	f643 2304 	movw	r3, #14852	; 0x3a04
 800e6da:	4413      	add	r3, r2
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	b29a      	uxth	r2, r3
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	2206      	movs	r2, #6
 800e6e8:	761a      	strb	r2, [r3, #24]
      break;
 800e6ea:	e0c6      	b.n	800e87a <USBH_HandleControl+0x2f2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	795b      	ldrb	r3, [r3, #5]
 800e6f0:	4619      	mov	r1, r3
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f003 fb78 	bl	8011de8 <USBH_LL_GetURBState>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e6fc:	7bbb      	ldrb	r3, [r7, #14]
 800e6fe:	2b01      	cmp	r3, #1
 800e700:	d103      	bne.n	800e70a <USBH_HandleControl+0x182>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	2207      	movs	r2, #7
 800e706:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e708:	e0b2      	b.n	800e870 <USBH_HandleControl+0x2e8>
      else if (URB_Status == USBH_URB_STALL)
 800e70a:	7bbb      	ldrb	r3, [r7, #14]
 800e70c:	2b05      	cmp	r3, #5
 800e70e:	d105      	bne.n	800e71c <USBH_HandleControl+0x194>
        phost->Control.state = CTRL_STALLED;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	220c      	movs	r2, #12
 800e714:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800e716:	2303      	movs	r3, #3
 800e718:	73fb      	strb	r3, [r7, #15]
      break;
 800e71a:	e0a9      	b.n	800e870 <USBH_HandleControl+0x2e8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e71c:	7bbb      	ldrb	r3, [r7, #14]
 800e71e:	2b02      	cmp	r3, #2
 800e720:	d103      	bne.n	800e72a <USBH_HandleControl+0x1a2>
        phost->Control.state = CTRL_DATA_OUT;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	2205      	movs	r2, #5
 800e726:	761a      	strb	r2, [r3, #24]
      break;
 800e728:	e0a2      	b.n	800e870 <USBH_HandleControl+0x2e8>
        if (URB_Status == USBH_URB_ERROR)
 800e72a:	7bbb      	ldrb	r3, [r7, #14]
 800e72c:	2b04      	cmp	r3, #4
 800e72e:	f040 809f 	bne.w	800e870 <USBH_HandleControl+0x2e8>
          phost->Control.state = CTRL_ERROR;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	220b      	movs	r2, #11
 800e736:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800e738:	2302      	movs	r3, #2
 800e73a:	73fb      	strb	r3, [r7, #15]
      break;
 800e73c:	e098      	b.n	800e870 <USBH_HandleControl+0x2e8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	791b      	ldrb	r3, [r3, #4]
 800e742:	2200      	movs	r2, #0
 800e744:	2100      	movs	r1, #0
 800e746:	6878      	ldr	r0, [r7, #4]
 800e748:	f000 f8dd 	bl	800e906 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e74c:	687a      	ldr	r2, [r7, #4]
 800e74e:	f643 2304 	movw	r3, #14852	; 0x3a04
 800e752:	4413      	add	r3, r2
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	b29a      	uxth	r2, r3
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2208      	movs	r2, #8
 800e760:	761a      	strb	r2, [r3, #24]

      break;
 800e762:	e08a      	b.n	800e87a <USBH_HandleControl+0x2f2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	791b      	ldrb	r3, [r3, #4]
 800e768:	4619      	mov	r1, r3
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	f003 fb3c 	bl	8011de8 <USBH_LL_GetURBState>
 800e770:	4603      	mov	r3, r0
 800e772:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e774:	7bbb      	ldrb	r3, [r7, #14]
 800e776:	2b01      	cmp	r3, #1
 800e778:	d105      	bne.n	800e786 <USBH_HandleControl+0x1fe>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	220d      	movs	r2, #13
 800e77e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800e780:	2300      	movs	r3, #0
 800e782:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e784:	e076      	b.n	800e874 <USBH_HandleControl+0x2ec>
      else if (URB_Status == USBH_URB_ERROR)
 800e786:	7bbb      	ldrb	r3, [r7, #14]
 800e788:	2b04      	cmp	r3, #4
 800e78a:	d103      	bne.n	800e794 <USBH_HandleControl+0x20c>
        phost->Control.state = CTRL_ERROR;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	220b      	movs	r2, #11
 800e790:	761a      	strb	r2, [r3, #24]
      break;
 800e792:	e06f      	b.n	800e874 <USBH_HandleControl+0x2ec>
        if (URB_Status == USBH_URB_STALL)
 800e794:	7bbb      	ldrb	r3, [r7, #14]
 800e796:	2b05      	cmp	r3, #5
 800e798:	d16c      	bne.n	800e874 <USBH_HandleControl+0x2ec>
          status = USBH_NOT_SUPPORTED;
 800e79a:	2303      	movs	r3, #3
 800e79c:	73fb      	strb	r3, [r7, #15]
      break;
 800e79e:	e069      	b.n	800e874 <USBH_HandleControl+0x2ec>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	795b      	ldrb	r3, [r3, #5]
 800e7a4:	2201      	movs	r2, #1
 800e7a6:	9200      	str	r2, [sp, #0]
 800e7a8:	2200      	movs	r2, #0
 800e7aa:	2100      	movs	r1, #0
 800e7ac:	6878      	ldr	r0, [r7, #4]
 800e7ae:	f000 f883 	bl	800e8b8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e7b2:	687a      	ldr	r2, [r7, #4]
 800e7b4:	f643 2304 	movw	r3, #14852	; 0x3a04
 800e7b8:	4413      	add	r3, r2
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	b29a      	uxth	r2, r3
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	220a      	movs	r2, #10
 800e7c6:	761a      	strb	r2, [r3, #24]
      break;
 800e7c8:	e057      	b.n	800e87a <USBH_HandleControl+0x2f2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	795b      	ldrb	r3, [r3, #5]
 800e7ce:	4619      	mov	r1, r3
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f003 fb09 	bl	8011de8 <USBH_LL_GetURBState>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800e7da:	7bbb      	ldrb	r3, [r7, #14]
 800e7dc:	2b01      	cmp	r3, #1
 800e7de:	d105      	bne.n	800e7ec <USBH_HandleControl+0x264>
      {
        status = USBH_OK;
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	220d      	movs	r2, #13
 800e7e8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e7ea:	e045      	b.n	800e878 <USBH_HandleControl+0x2f0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e7ec:	7bbb      	ldrb	r3, [r7, #14]
 800e7ee:	2b02      	cmp	r3, #2
 800e7f0:	d103      	bne.n	800e7fa <USBH_HandleControl+0x272>
        phost->Control.state = CTRL_STATUS_OUT;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	2209      	movs	r2, #9
 800e7f6:	761a      	strb	r2, [r3, #24]
      break;
 800e7f8:	e03e      	b.n	800e878 <USBH_HandleControl+0x2f0>
        if (URB_Status == USBH_URB_ERROR)
 800e7fa:	7bbb      	ldrb	r3, [r7, #14]
 800e7fc:	2b04      	cmp	r3, #4
 800e7fe:	d13b      	bne.n	800e878 <USBH_HandleControl+0x2f0>
          phost->Control.state = CTRL_ERROR;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	220b      	movs	r2, #11
 800e804:	761a      	strb	r2, [r3, #24]
      break;
 800e806:	e037      	b.n	800e878 <USBH_HandleControl+0x2f0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	7e5b      	ldrb	r3, [r3, #25]
 800e80c:	3301      	adds	r3, #1
 800e80e:	b2da      	uxtb	r2, r3
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	765a      	strb	r2, [r3, #25]
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	7e5b      	ldrb	r3, [r3, #25]
 800e818:	2b02      	cmp	r3, #2
 800e81a:	d806      	bhi.n	800e82a <USBH_HandleControl+0x2a2>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	2201      	movs	r2, #1
 800e820:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	2201      	movs	r2, #1
 800e826:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800e828:	e027      	b.n	800e87a <USBH_HandleControl+0x2f2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e82a:	687a      	ldr	r2, [r7, #4]
 800e82c:	f643 2314 	movw	r3, #14868	; 0x3a14
 800e830:	4413      	add	r3, r2
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	2106      	movs	r1, #6
 800e836:	6878      	ldr	r0, [r7, #4]
 800e838:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	2200      	movs	r2, #0
 800e83e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	795b      	ldrb	r3, [r3, #5]
 800e844:	4619      	mov	r1, r3
 800e846:	6878      	ldr	r0, [r7, #4]
 800e848:	f000 f911 	bl	800ea6e <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	791b      	ldrb	r3, [r3, #4]
 800e850:	4619      	mov	r1, r3
 800e852:	6878      	ldr	r0, [r7, #4]
 800e854:	f000 f90b 	bl	800ea6e <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	2200      	movs	r2, #0
 800e85c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800e85e:	2302      	movs	r3, #2
 800e860:	73fb      	strb	r3, [r7, #15]
      break;
 800e862:	e00a      	b.n	800e87a <USBH_HandleControl+0x2f2>

    default:
      break;
 800e864:	bf00      	nop
 800e866:	e008      	b.n	800e87a <USBH_HandleControl+0x2f2>
      break;
 800e868:	bf00      	nop
 800e86a:	e006      	b.n	800e87a <USBH_HandleControl+0x2f2>
      break;
 800e86c:	bf00      	nop
 800e86e:	e004      	b.n	800e87a <USBH_HandleControl+0x2f2>
      break;
 800e870:	bf00      	nop
 800e872:	e002      	b.n	800e87a <USBH_HandleControl+0x2f2>
      break;
 800e874:	bf00      	nop
 800e876:	e000      	b.n	800e87a <USBH_HandleControl+0x2f2>
      break;
 800e878:	bf00      	nop
  }

  return status;
 800e87a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e87c:	4618      	mov	r0, r3
 800e87e:	3710      	adds	r7, #16
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}

0800e884 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b088      	sub	sp, #32
 800e888:	af04      	add	r7, sp, #16
 800e88a:	60f8      	str	r0, [r7, #12]
 800e88c:	60b9      	str	r1, [r7, #8]
 800e88e:	4613      	mov	r3, r2
 800e890:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e892:	79f9      	ldrb	r1, [r7, #7]
 800e894:	2300      	movs	r3, #0
 800e896:	9303      	str	r3, [sp, #12]
 800e898:	2308      	movs	r3, #8
 800e89a:	9302      	str	r3, [sp, #8]
 800e89c:	68bb      	ldr	r3, [r7, #8]
 800e89e:	9301      	str	r3, [sp, #4]
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	9300      	str	r3, [sp, #0]
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	68f8      	ldr	r0, [r7, #12]
 800e8aa:	f003 fa6a 	bl	8011d82 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800e8ae:	2300      	movs	r3, #0
}
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	3710      	adds	r7, #16
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}

0800e8b8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b088      	sub	sp, #32
 800e8bc:	af04      	add	r7, sp, #16
 800e8be:	60f8      	str	r0, [r7, #12]
 800e8c0:	60b9      	str	r1, [r7, #8]
 800e8c2:	4611      	mov	r1, r2
 800e8c4:	461a      	mov	r2, r3
 800e8c6:	460b      	mov	r3, r1
 800e8c8:	80fb      	strh	r3, [r7, #6]
 800e8ca:	4613      	mov	r3, r2
 800e8cc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e8ce:	68fa      	ldr	r2, [r7, #12]
 800e8d0:	f643 135d 	movw	r3, #14685	; 0x395d
 800e8d4:	4413      	add	r3, r2
 800e8d6:	781b      	ldrb	r3, [r3, #0]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d001      	beq.n	800e8e0 <USBH_CtlSendData+0x28>
  {
    do_ping = 0U;
 800e8dc:	2300      	movs	r3, #0
 800e8de:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e8e0:	7979      	ldrb	r1, [r7, #5]
 800e8e2:	7e3b      	ldrb	r3, [r7, #24]
 800e8e4:	9303      	str	r3, [sp, #12]
 800e8e6:	88fb      	ldrh	r3, [r7, #6]
 800e8e8:	9302      	str	r3, [sp, #8]
 800e8ea:	68bb      	ldr	r3, [r7, #8]
 800e8ec:	9301      	str	r3, [sp, #4]
 800e8ee:	2301      	movs	r3, #1
 800e8f0:	9300      	str	r3, [sp, #0]
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	68f8      	ldr	r0, [r7, #12]
 800e8f8:	f003 fa43 	bl	8011d82 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e8fc:	2300      	movs	r3, #0
}
 800e8fe:	4618      	mov	r0, r3
 800e900:	3710      	adds	r7, #16
 800e902:	46bd      	mov	sp, r7
 800e904:	bd80      	pop	{r7, pc}

0800e906 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800e906:	b580      	push	{r7, lr}
 800e908:	b088      	sub	sp, #32
 800e90a:	af04      	add	r7, sp, #16
 800e90c:	60f8      	str	r0, [r7, #12]
 800e90e:	60b9      	str	r1, [r7, #8]
 800e910:	4611      	mov	r1, r2
 800e912:	461a      	mov	r2, r3
 800e914:	460b      	mov	r3, r1
 800e916:	80fb      	strh	r3, [r7, #6]
 800e918:	4613      	mov	r3, r2
 800e91a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e91c:	7979      	ldrb	r1, [r7, #5]
 800e91e:	2300      	movs	r3, #0
 800e920:	9303      	str	r3, [sp, #12]
 800e922:	88fb      	ldrh	r3, [r7, #6]
 800e924:	9302      	str	r3, [sp, #8]
 800e926:	68bb      	ldr	r3, [r7, #8]
 800e928:	9301      	str	r3, [sp, #4]
 800e92a:	2301      	movs	r3, #1
 800e92c:	9300      	str	r3, [sp, #0]
 800e92e:	2300      	movs	r3, #0
 800e930:	2201      	movs	r2, #1
 800e932:	68f8      	ldr	r0, [r7, #12]
 800e934:	f003 fa25 	bl	8011d82 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800e938:	2300      	movs	r3, #0

}
 800e93a:	4618      	mov	r0, r3
 800e93c:	3710      	adds	r7, #16
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}

0800e942 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800e942:	b580      	push	{r7, lr}
 800e944:	b088      	sub	sp, #32
 800e946:	af04      	add	r7, sp, #16
 800e948:	60f8      	str	r0, [r7, #12]
 800e94a:	60b9      	str	r1, [r7, #8]
 800e94c:	4611      	mov	r1, r2
 800e94e:	461a      	mov	r2, r3
 800e950:	460b      	mov	r3, r1
 800e952:	80fb      	strh	r3, [r7, #6]
 800e954:	4613      	mov	r3, r2
 800e956:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e958:	68fa      	ldr	r2, [r7, #12]
 800e95a:	f643 135d 	movw	r3, #14685	; 0x395d
 800e95e:	4413      	add	r3, r2
 800e960:	781b      	ldrb	r3, [r3, #0]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d001      	beq.n	800e96a <USBH_BulkSendData+0x28>
  {
    do_ping = 0U;
 800e966:	2300      	movs	r3, #0
 800e968:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e96a:	7979      	ldrb	r1, [r7, #5]
 800e96c:	7e3b      	ldrb	r3, [r7, #24]
 800e96e:	9303      	str	r3, [sp, #12]
 800e970:	88fb      	ldrh	r3, [r7, #6]
 800e972:	9302      	str	r3, [sp, #8]
 800e974:	68bb      	ldr	r3, [r7, #8]
 800e976:	9301      	str	r3, [sp, #4]
 800e978:	2301      	movs	r3, #1
 800e97a:	9300      	str	r3, [sp, #0]
 800e97c:	2302      	movs	r3, #2
 800e97e:	2200      	movs	r2, #0
 800e980:	68f8      	ldr	r0, [r7, #12]
 800e982:	f003 f9fe 	bl	8011d82 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800e986:	2300      	movs	r3, #0
}
 800e988:	4618      	mov	r0, r3
 800e98a:	3710      	adds	r7, #16
 800e98c:	46bd      	mov	sp, r7
 800e98e:	bd80      	pop	{r7, pc}

0800e990 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b088      	sub	sp, #32
 800e994:	af04      	add	r7, sp, #16
 800e996:	60f8      	str	r0, [r7, #12]
 800e998:	60b9      	str	r1, [r7, #8]
 800e99a:	4611      	mov	r1, r2
 800e99c:	461a      	mov	r2, r3
 800e99e:	460b      	mov	r3, r1
 800e9a0:	80fb      	strh	r3, [r7, #6]
 800e9a2:	4613      	mov	r3, r2
 800e9a4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e9a6:	7979      	ldrb	r1, [r7, #5]
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	9303      	str	r3, [sp, #12]
 800e9ac:	88fb      	ldrh	r3, [r7, #6]
 800e9ae:	9302      	str	r3, [sp, #8]
 800e9b0:	68bb      	ldr	r3, [r7, #8]
 800e9b2:	9301      	str	r3, [sp, #4]
 800e9b4:	2301      	movs	r3, #1
 800e9b6:	9300      	str	r3, [sp, #0]
 800e9b8:	2302      	movs	r3, #2
 800e9ba:	2201      	movs	r2, #1
 800e9bc:	68f8      	ldr	r0, [r7, #12]
 800e9be:	f003 f9e0 	bl	8011d82 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800e9c2:	2300      	movs	r3, #0
}
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	3710      	adds	r7, #16
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}

0800e9cc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b086      	sub	sp, #24
 800e9d0:	af04      	add	r7, sp, #16
 800e9d2:	6078      	str	r0, [r7, #4]
 800e9d4:	4608      	mov	r0, r1
 800e9d6:	4611      	mov	r1, r2
 800e9d8:	461a      	mov	r2, r3
 800e9da:	4603      	mov	r3, r0
 800e9dc:	70fb      	strb	r3, [r7, #3]
 800e9de:	460b      	mov	r3, r1
 800e9e0:	70bb      	strb	r3, [r7, #2]
 800e9e2:	4613      	mov	r3, r2
 800e9e4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e9e6:	7878      	ldrb	r0, [r7, #1]
 800e9e8:	78ba      	ldrb	r2, [r7, #2]
 800e9ea:	78f9      	ldrb	r1, [r7, #3]
 800e9ec:	8b3b      	ldrh	r3, [r7, #24]
 800e9ee:	9302      	str	r3, [sp, #8]
 800e9f0:	7d3b      	ldrb	r3, [r7, #20]
 800e9f2:	9301      	str	r3, [sp, #4]
 800e9f4:	7c3b      	ldrb	r3, [r7, #16]
 800e9f6:	9300      	str	r3, [sp, #0]
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	6878      	ldr	r0, [r7, #4]
 800e9fc:	f003 f96f 	bl	8011cde <USBH_LL_OpenPipe>

  return USBH_OK;
 800ea00:	2300      	movs	r3, #0
}
 800ea02:	4618      	mov	r0, r3
 800ea04:	3708      	adds	r7, #8
 800ea06:	46bd      	mov	sp, r7
 800ea08:	bd80      	pop	{r7, pc}

0800ea0a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ea0a:	b580      	push	{r7, lr}
 800ea0c:	b082      	sub	sp, #8
 800ea0e:	af00      	add	r7, sp, #0
 800ea10:	6078      	str	r0, [r7, #4]
 800ea12:	460b      	mov	r3, r1
 800ea14:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800ea16:	78fb      	ldrb	r3, [r7, #3]
 800ea18:	4619      	mov	r1, r3
 800ea1a:	6878      	ldr	r0, [r7, #4]
 800ea1c:	f003 f990 	bl	8011d40 <USBH_LL_ClosePipe>

  return USBH_OK;
 800ea20:	2300      	movs	r3, #0
}
 800ea22:	4618      	mov	r0, r3
 800ea24:	3708      	adds	r7, #8
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}

0800ea2a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ea2a:	b580      	push	{r7, lr}
 800ea2c:	b084      	sub	sp, #16
 800ea2e:	af00      	add	r7, sp, #0
 800ea30:	6078      	str	r0, [r7, #4]
 800ea32:	460b      	mov	r3, r1
 800ea34:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ea36:	6878      	ldr	r0, [r7, #4]
 800ea38:	f000 f839 	bl	800eaae <USBH_GetFreePipe>
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ea40:	89fb      	ldrh	r3, [r7, #14]
 800ea42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ea46:	4293      	cmp	r3, r2
 800ea48:	d00b      	beq.n	800ea62 <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800ea4a:	78fa      	ldrb	r2, [r7, #3]
 800ea4c:	89fb      	ldrh	r3, [r7, #14]
 800ea4e:	f003 030f 	and.w	r3, r3, #15
 800ea52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ea56:	6879      	ldr	r1, [r7, #4]
 800ea58:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 800ea5c:	009b      	lsls	r3, r3, #2
 800ea5e:	440b      	add	r3, r1
 800ea60:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ea62:	89fb      	ldrh	r3, [r7, #14]
 800ea64:	b2db      	uxtb	r3, r3
}
 800ea66:	4618      	mov	r0, r3
 800ea68:	3710      	adds	r7, #16
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	bd80      	pop	{r7, pc}

0800ea6e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ea6e:	b480      	push	{r7}
 800ea70:	b083      	sub	sp, #12
 800ea72:	af00      	add	r7, sp, #0
 800ea74:	6078      	str	r0, [r7, #4]
 800ea76:	460b      	mov	r3, r1
 800ea78:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800ea7a:	78fb      	ldrb	r3, [r7, #3]
 800ea7c:	2b0a      	cmp	r3, #10
 800ea7e:	d80f      	bhi.n	800eaa0 <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ea80:	78fb      	ldrb	r3, [r7, #3]
 800ea82:	687a      	ldr	r2, [r7, #4]
 800ea84:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 800ea88:	009b      	lsls	r3, r3, #2
 800ea8a:	4413      	add	r3, r2
 800ea8c:	685a      	ldr	r2, [r3, #4]
 800ea8e:	78fb      	ldrb	r3, [r7, #3]
 800ea90:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ea94:	6879      	ldr	r1, [r7, #4]
 800ea96:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 800ea9a:	009b      	lsls	r3, r3, #2
 800ea9c:	440b      	add	r3, r1
 800ea9e:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800eaa0:	2300      	movs	r3, #0
}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	370c      	adds	r7, #12
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaac:	4770      	bx	lr

0800eaae <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800eaae:	b480      	push	{r7}
 800eab0:	b085      	sub	sp, #20
 800eab2:	af00      	add	r7, sp, #0
 800eab4:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800eab6:	2300      	movs	r3, #0
 800eab8:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800eaba:	2300      	movs	r3, #0
 800eabc:	73fb      	strb	r3, [r7, #15]
 800eabe:	e010      	b.n	800eae2 <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800eac0:	7bfb      	ldrb	r3, [r7, #15]
 800eac2:	687a      	ldr	r2, [r7, #4]
 800eac4:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 800eac8:	009b      	lsls	r3, r3, #2
 800eaca:	4413      	add	r3, r2
 800eacc:	685b      	ldr	r3, [r3, #4]
 800eace:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d102      	bne.n	800eadc <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 800ead6:	7bfb      	ldrb	r3, [r7, #15]
 800ead8:	b29b      	uxth	r3, r3
 800eada:	e007      	b.n	800eaec <USBH_GetFreePipe+0x3e>
  for (idx = 0U ; idx < 11U ; idx++)
 800eadc:	7bfb      	ldrb	r3, [r7, #15]
 800eade:	3301      	adds	r3, #1
 800eae0:	73fb      	strb	r3, [r7, #15]
 800eae2:	7bfb      	ldrb	r3, [r7, #15]
 800eae4:	2b0a      	cmp	r3, #10
 800eae6:	d9eb      	bls.n	800eac0 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800eae8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800eaec:	4618      	mov	r0, r3
 800eaee:	3714      	adds	r7, #20
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf6:	4770      	bx	lr

0800eaf8 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 800eaf8:	b480      	push	{r7}
 800eafa:	b083      	sub	sp, #12
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	687a      	ldr	r2, [r7, #4]
 800eb04:	605a      	str	r2, [r3, #4]
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	685a      	ldr	r2, [r3, #4]
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	601a      	str	r2, [r3, #0]
}
 800eb0e:	bf00      	nop
 800eb10:	370c      	adds	r7, #12
 800eb12:	46bd      	mov	sp, r7
 800eb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb18:	4770      	bx	lr

0800eb1a <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 800eb1a:	b480      	push	{r7}
 800eb1c:	b083      	sub	sp, #12
 800eb1e:	af00      	add	r7, sp, #0
 800eb20:	6078      	str	r0, [r7, #4]
 800eb22:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	685a      	ldr	r2, [r3, #4]
 800eb28:	683b      	ldr	r3, [r7, #0]
 800eb2a:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	687a      	ldr	r2, [r7, #4]
 800eb30:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	683a      	ldr	r2, [r7, #0]
 800eb38:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 800eb3a:	683b      	ldr	r3, [r7, #0]
 800eb3c:	685b      	ldr	r3, [r3, #4]
 800eb3e:	683a      	ldr	r2, [r7, #0]
 800eb40:	601a      	str	r2, [r3, #0]
}
 800eb42:	bf00      	nop
 800eb44:	370c      	adds	r7, #12
 800eb46:	46bd      	mov	sp, r7
 800eb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4c:	4770      	bx	lr

0800eb4e <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 800eb4e:	b580      	push	{r7, lr}
 800eb50:	b082      	sub	sp, #8
 800eb52:	af00      	add	r7, sp, #0
 800eb54:	6078      	str	r0, [r7, #4]
 800eb56:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 800eb58:	6839      	ldr	r1, [r7, #0]
 800eb5a:	6878      	ldr	r0, [r7, #4]
 800eb5c:	f7ff ffdd 	bl	800eb1a <metal_list_add_before>
}
 800eb60:	bf00      	nop
 800eb62:	3708      	adds	r7, #8
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}

0800eb68 <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b082      	sub	sp, #8
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
 800eb70:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
 800eb72:	6839      	ldr	r1, [r7, #0]
 800eb74:	6878      	ldr	r0, [r7, #4]
 800eb76:	f001 ff89 	bl	8010a8c <metal_machine_cache_flush>
}
 800eb7a:	bf00      	nop
 800eb7c:	3708      	adds	r7, #8
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}

0800eb82 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 800eb82:	b580      	push	{r7, lr}
 800eb84:	b082      	sub	sp, #8
 800eb86:	af00      	add	r7, sp, #0
 800eb88:	6078      	str	r0, [r7, #4]
 800eb8a:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 800eb8c:	6839      	ldr	r1, [r7, #0]
 800eb8e:	6878      	ldr	r0, [r7, #4]
 800eb90:	f001 ff87 	bl	8010aa2 <metal_machine_cache_invalidate>
}
 800eb94:	bf00      	nop
 800eb96:	3708      	adds	r7, #8
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bd80      	pop	{r7, pc}

0800eb9c <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b082      	sub	sp, #8
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
 800eba4:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
 800eba6:	6839      	ldr	r1, [r7, #0]
 800eba8:	6878      	ldr	r0, [r7, #4]
 800ebaa:	f7ff ffdd 	bl	800eb68 <__metal_cache_flush>
}
 800ebae:	bf00      	nop
 800ebb0:	3708      	adds	r7, #8
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	bd80      	pop	{r7, pc}

0800ebb6 <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 800ebb6:	b580      	push	{r7, lr}
 800ebb8:	b082      	sub	sp, #8
 800ebba:	af00      	add	r7, sp, #0
 800ebbc:	6078      	str	r0, [r7, #4]
 800ebbe:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 800ebc0:	6839      	ldr	r1, [r7, #0]
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	f7ff ffdd 	bl	800eb82 <__metal_cache_invalidate>
}
 800ebc8:	bf00      	nop
 800ebca:	3708      	adds	r7, #8
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	bd80      	pop	{r7, pc}

0800ebd0 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b082      	sub	sp, #8
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d008      	beq.n	800ebf0 <metal_bus_register+0x20>
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d004      	beq.n	800ebf0 <metal_bus_register+0x20>
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	781b      	ldrb	r3, [r3, #0]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d102      	bne.n	800ebf6 <metal_bus_register+0x26>
		return -EINVAL;
 800ebf0:	f06f 0315 	mvn.w	r3, #21
 800ebf4:	e026      	b.n	800ec44 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	2100      	movs	r1, #0
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	f000 f82b 	bl	800ec58 <metal_bus_find>
 800ec02:	4603      	mov	r3, r0
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d102      	bne.n	800ec0e <metal_bus_register+0x3e>
		return -EEXIST;
 800ec08:	f06f 0310 	mvn.w	r3, #16
 800ec0c:	e01a      	b.n	800ec44 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	331c      	adds	r3, #28
 800ec12:	4618      	mov	r0, r3
 800ec14:	f7ff ff70 	bl	800eaf8 <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	3324      	adds	r3, #36	; 0x24
 800ec1c:	4619      	mov	r1, r3
 800ec1e:	480b      	ldr	r0, [pc, #44]	; (800ec4c <metal_bus_register+0x7c>)
 800ec20:	f7ff ff95 	bl	800eb4e <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 800ec24:	4b0a      	ldr	r3, [pc, #40]	; (800ec50 <metal_bus_register+0x80>)
 800ec26:	781b      	ldrb	r3, [r3, #0]
 800ec28:	2b06      	cmp	r3, #6
 800ec2a:	d90a      	bls.n	800ec42 <metal_bus_register+0x72>
 800ec2c:	4b08      	ldr	r3, [pc, #32]	; (800ec50 <metal_bus_register+0x80>)
 800ec2e:	685b      	ldr	r3, [r3, #4]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d006      	beq.n	800ec42 <metal_bus_register+0x72>
 800ec34:	4b06      	ldr	r3, [pc, #24]	; (800ec50 <metal_bus_register+0x80>)
 800ec36:	685b      	ldr	r3, [r3, #4]
 800ec38:	687a      	ldr	r2, [r7, #4]
 800ec3a:	6812      	ldr	r2, [r2, #0]
 800ec3c:	4905      	ldr	r1, [pc, #20]	; (800ec54 <metal_bus_register+0x84>)
 800ec3e:	2007      	movs	r0, #7
 800ec40:	4798      	blx	r3
	return 0;
 800ec42:	2300      	movs	r3, #0
}
 800ec44:	4618      	mov	r0, r3
 800ec46:	3708      	adds	r7, #8
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	bd80      	pop	{r7, pc}
 800ec4c:	2400a860 	.word	0x2400a860
 800ec50:	2400a858 	.word	0x2400a858
 800ec54:	08016ab8 	.word	0x08016ab8

0800ec58 <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b084      	sub	sp, #16
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
 800ec60:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 800ec62:	4b13      	ldr	r3, [pc, #76]	; (800ecb0 <metal_bus_find+0x58>)
 800ec64:	689b      	ldr	r3, [r3, #8]
 800ec66:	60fb      	str	r3, [r7, #12]
 800ec68:	e017      	b.n	800ec9a <metal_bus_find+0x42>
		bus = metal_container_of(node, struct metal_bus, node);
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	3b24      	subs	r3, #36	; 0x24
 800ec6e:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) != 0)
 800ec70:	68bb      	ldr	r3, [r7, #8]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	6879      	ldr	r1, [r7, #4]
 800ec76:	4618      	mov	r0, r3
 800ec78:	f7f1 fb32 	bl	80002e0 <strcmp>
 800ec7c:	4603      	mov	r3, r0
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d003      	beq.n	800ec8a <metal_bus_find+0x32>
	metal_list_for_each(&_metal.common.bus_list, node) {
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	60fb      	str	r3, [r7, #12]
 800ec88:	e007      	b.n	800ec9a <metal_bus_find+0x42>
			continue;
		if (result)
 800ec8a:	683b      	ldr	r3, [r7, #0]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d002      	beq.n	800ec96 <metal_bus_find+0x3e>
			*result = bus;
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	68ba      	ldr	r2, [r7, #8]
 800ec94:	601a      	str	r2, [r3, #0]
		return 0;
 800ec96:	2300      	movs	r3, #0
 800ec98:	e005      	b.n	800eca6 <metal_bus_find+0x4e>
	metal_list_for_each(&_metal.common.bus_list, node) {
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	4a05      	ldr	r2, [pc, #20]	; (800ecb4 <metal_bus_find+0x5c>)
 800ec9e:	4293      	cmp	r3, r2
 800eca0:	d1e3      	bne.n	800ec6a <metal_bus_find+0x12>
	}
	return -ENOENT;
 800eca2:	f06f 0301 	mvn.w	r3, #1
}
 800eca6:	4618      	mov	r0, r3
 800eca8:	3710      	adds	r7, #16
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}
 800ecae:	bf00      	nop
 800ecb0:	2400a858 	.word	0x2400a858
 800ecb4:	2400a860 	.word	0x2400a860

0800ecb8 <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b086      	sub	sp, #24
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	60f8      	str	r0, [r7, #12]
 800ecc0:	60b9      	str	r1, [r7, #8]
 800ecc2:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d00d      	beq.n	800ece6 <metal_device_open+0x2e>
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	781b      	ldrb	r3, [r3, #0]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d009      	beq.n	800ece6 <metal_device_open+0x2e>
 800ecd2:	68bb      	ldr	r3, [r7, #8]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d006      	beq.n	800ece6 <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
 800ecd8:	68bb      	ldr	r3, [r7, #8]
 800ecda:	781b      	ldrb	r3, [r3, #0]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d002      	beq.n	800ece6 <metal_device_open+0x2e>
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d102      	bne.n	800ecec <metal_device_open+0x34>
	    !device)
		return -EINVAL;
 800ece6:	f06f 0315 	mvn.w	r3, #21
 800ecea:	e01f      	b.n	800ed2c <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
 800ecec:	f107 0310 	add.w	r3, r7, #16
 800ecf0:	4619      	mov	r1, r3
 800ecf2:	68f8      	ldr	r0, [r7, #12]
 800ecf4:	f7ff ffb0 	bl	800ec58 <metal_bus_find>
 800ecf8:	6178      	str	r0, [r7, #20]
	if (error)
 800ecfa:	697b      	ldr	r3, [r7, #20]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d001      	beq.n	800ed04 <metal_device_open+0x4c>
		return error;
 800ed00:	697b      	ldr	r3, [r7, #20]
 800ed02:	e013      	b.n	800ed2c <metal_device_open+0x74>

	if (!bus->ops.dev_open)
 800ed04:	693b      	ldr	r3, [r7, #16]
 800ed06:	689b      	ldr	r3, [r3, #8]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d102      	bne.n	800ed12 <metal_device_open+0x5a>
		return -ENODEV;
 800ed0c:	f06f 0312 	mvn.w	r3, #18
 800ed10:	e00c      	b.n	800ed2c <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 800ed12:	693b      	ldr	r3, [r7, #16]
 800ed14:	689b      	ldr	r3, [r3, #8]
 800ed16:	6938      	ldr	r0, [r7, #16]
 800ed18:	687a      	ldr	r2, [r7, #4]
 800ed1a:	68b9      	ldr	r1, [r7, #8]
 800ed1c:	4798      	blx	r3
 800ed1e:	6178      	str	r0, [r7, #20]
	if (error)
 800ed20:	697b      	ldr	r3, [r7, #20]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d001      	beq.n	800ed2a <metal_device_open+0x72>
		return error;
 800ed26:	697b      	ldr	r3, [r7, #20]
 800ed28:	e000      	b.n	800ed2c <metal_device_open+0x74>

	return 0;
 800ed2a:	2300      	movs	r3, #0
}
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	3718      	adds	r7, #24
 800ed30:	46bd      	mov	sp, r7
 800ed32:	bd80      	pop	{r7, pc}

0800ed34 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b082      	sub	sp, #8
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d008      	beq.n	800ed56 <metal_register_generic_device+0x22>
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	781b      	ldrb	r3, [r3, #0]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d003      	beq.n	800ed56 <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
 800ed52:	2b02      	cmp	r3, #2
 800ed54:	d902      	bls.n	800ed5c <metal_register_generic_device+0x28>
		return -EINVAL;
 800ed56:	f06f 0315 	mvn.w	r3, #21
 800ed5a:	e009      	b.n	800ed70 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	4a06      	ldr	r2, [pc, #24]	; (800ed78 <metal_register_generic_device+0x44>)
 800ed60:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	336c      	adds	r3, #108	; 0x6c
 800ed66:	4619      	mov	r1, r3
 800ed68:	4804      	ldr	r0, [pc, #16]	; (800ed7c <metal_register_generic_device+0x48>)
 800ed6a:	f7ff fef0 	bl	800eb4e <metal_list_add_tail>
			    &device->node);
	return 0;
 800ed6e:	2300      	movs	r3, #0
}
 800ed70:	4618      	mov	r0, r3
 800ed72:	3708      	adds	r7, #8
 800ed74:	46bd      	mov	sp, r7
 800ed76:	bd80      	pop	{r7, pc}
 800ed78:	24000040 	.word	0x24000040
 800ed7c:	2400a870 	.word	0x2400a870

0800ed80 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b086      	sub	sp, #24
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	60f8      	str	r0, [r7, #12]
 800ed88:	60b9      	str	r1, [r7, #8]
 800ed8a:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 800ed8c:	4b12      	ldr	r3, [pc, #72]	; (800edd8 <metal_generic_dev_open+0x58>)
 800ed8e:	699b      	ldr	r3, [r3, #24]
 800ed90:	617b      	str	r3, [r7, #20]
 800ed92:	e017      	b.n	800edc4 <metal_generic_dev_open+0x44>
		dev = metal_container_of(node, struct metal_device, node);
 800ed94:	697b      	ldr	r3, [r7, #20]
 800ed96:	3b6c      	subs	r3, #108	; 0x6c
 800ed98:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) != 0)
 800ed9a:	693b      	ldr	r3, [r7, #16]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	68b9      	ldr	r1, [r7, #8]
 800eda0:	4618      	mov	r0, r3
 800eda2:	f7f1 fa9d 	bl	80002e0 <strcmp>
 800eda6:	4603      	mov	r3, r0
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d003      	beq.n	800edb4 <metal_generic_dev_open+0x34>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	617b      	str	r3, [r7, #20]
 800edb2:	e007      	b.n	800edc4 <metal_generic_dev_open+0x44>
			continue;
		*device = dev;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	693a      	ldr	r2, [r7, #16]
 800edb8:	601a      	str	r2, [r3, #0]
		return metal_generic_dev_sys_open(dev);
 800edba:	6938      	ldr	r0, [r7, #16]
 800edbc:	f000 f88c 	bl	800eed8 <metal_generic_dev_sys_open>
 800edc0:	4603      	mov	r3, r0
 800edc2:	e005      	b.n	800edd0 <metal_generic_dev_open+0x50>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 800edc4:	697b      	ldr	r3, [r7, #20]
 800edc6:	4a05      	ldr	r2, [pc, #20]	; (800eddc <metal_generic_dev_open+0x5c>)
 800edc8:	4293      	cmp	r3, r2
 800edca:	d1e3      	bne.n	800ed94 <metal_generic_dev_open+0x14>
	}

	return -ENODEV;
 800edcc:	f06f 0312 	mvn.w	r3, #18
}
 800edd0:	4618      	mov	r0, r3
 800edd2:	3718      	adds	r7, #24
 800edd4:	46bd      	mov	sp, r7
 800edd6:	bd80      	pop	{r7, pc}
 800edd8:	2400a858 	.word	0x2400a858
 800eddc:	2400a870 	.word	0x2400a870

0800ede0 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b086      	sub	sp, #24
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	60f8      	str	r0, [r7, #12]
 800ede8:	60b9      	str	r1, [r7, #8]
 800edea:	607a      	str	r2, [r7, #4]
 800edec:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	int i;

	if (sg_out != sg_in)
 800edee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	429a      	cmp	r2, r3
 800edf4:	d009      	beq.n	800ee0a <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 800edf6:	6a3a      	ldr	r2, [r7, #32]
 800edf8:	4613      	mov	r3, r2
 800edfa:	005b      	lsls	r3, r3, #1
 800edfc:	4413      	add	r3, r2
 800edfe:	009b      	lsls	r3, r3, #2
 800ee00:	461a      	mov	r2, r3
 800ee02:	6839      	ldr	r1, [r7, #0]
 800ee04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee06:	f003 f901 	bl	801200c <memcpy>
	for (i = 0; i < nents_in; i++) {
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	617b      	str	r3, [r7, #20]
 800ee0e:	e02f      	b.n	800ee70 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2b02      	cmp	r3, #2
 800ee14:	d114      	bne.n	800ee40 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 800ee16:	697a      	ldr	r2, [r7, #20]
 800ee18:	4613      	mov	r3, r2
 800ee1a:	005b      	lsls	r3, r3, #1
 800ee1c:	4413      	add	r3, r2
 800ee1e:	009b      	lsls	r3, r3, #2
 800ee20:	461a      	mov	r2, r3
 800ee22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee24:	4413      	add	r3, r2
 800ee26:	6818      	ldr	r0, [r3, #0]
 800ee28:	697a      	ldr	r2, [r7, #20]
 800ee2a:	4613      	mov	r3, r2
 800ee2c:	005b      	lsls	r3, r3, #1
 800ee2e:	4413      	add	r3, r2
 800ee30:	009b      	lsls	r3, r3, #2
 800ee32:	461a      	mov	r2, r3
 800ee34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee36:	4413      	add	r3, r2
 800ee38:	689b      	ldr	r3, [r3, #8]
 800ee3a:	4619      	mov	r1, r3
 800ee3c:	f7ff feae 	bl	800eb9c <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 800ee40:	697a      	ldr	r2, [r7, #20]
 800ee42:	4613      	mov	r3, r2
 800ee44:	005b      	lsls	r3, r3, #1
 800ee46:	4413      	add	r3, r2
 800ee48:	009b      	lsls	r3, r3, #2
 800ee4a:	461a      	mov	r2, r3
 800ee4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee4e:	4413      	add	r3, r2
 800ee50:	6818      	ldr	r0, [r3, #0]
 800ee52:	697a      	ldr	r2, [r7, #20]
 800ee54:	4613      	mov	r3, r2
 800ee56:	005b      	lsls	r3, r3, #1
 800ee58:	4413      	add	r3, r2
 800ee5a:	009b      	lsls	r3, r3, #2
 800ee5c:	461a      	mov	r2, r3
 800ee5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee60:	4413      	add	r3, r2
 800ee62:	689b      	ldr	r3, [r3, #8]
 800ee64:	4619      	mov	r1, r3
 800ee66:	f7ff fea6 	bl	800ebb6 <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
 800ee6a:	697b      	ldr	r3, [r7, #20]
 800ee6c:	3301      	adds	r3, #1
 800ee6e:	617b      	str	r3, [r7, #20]
 800ee70:	697a      	ldr	r2, [r7, #20]
 800ee72:	6a3b      	ldr	r3, [r7, #32]
 800ee74:	429a      	cmp	r2, r3
 800ee76:	dbcb      	blt.n	800ee10 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
 800ee78:	6a3b      	ldr	r3, [r7, #32]
}
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	3718      	adds	r7, #24
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd80      	pop	{r7, pc}

0800ee82 <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 800ee82:	b580      	push	{r7, lr}
 800ee84:	b086      	sub	sp, #24
 800ee86:	af00      	add	r7, sp, #0
 800ee88:	60f8      	str	r0, [r7, #12]
 800ee8a:	60b9      	str	r1, [r7, #8]
 800ee8c:	607a      	str	r2, [r7, #4]
 800ee8e:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	(void)dir;
	int i;

	for (i = 0; i < nents; i++) {
 800ee90:	2300      	movs	r3, #0
 800ee92:	617b      	str	r3, [r7, #20]
 800ee94:	e017      	b.n	800eec6 <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 800ee96:	697a      	ldr	r2, [r7, #20]
 800ee98:	4613      	mov	r3, r2
 800ee9a:	005b      	lsls	r3, r3, #1
 800ee9c:	4413      	add	r3, r2
 800ee9e:	009b      	lsls	r3, r3, #2
 800eea0:	461a      	mov	r2, r3
 800eea2:	683b      	ldr	r3, [r7, #0]
 800eea4:	4413      	add	r3, r2
 800eea6:	6818      	ldr	r0, [r3, #0]
 800eea8:	697a      	ldr	r2, [r7, #20]
 800eeaa:	4613      	mov	r3, r2
 800eeac:	005b      	lsls	r3, r3, #1
 800eeae:	4413      	add	r3, r2
 800eeb0:	009b      	lsls	r3, r3, #2
 800eeb2:	461a      	mov	r2, r3
 800eeb4:	683b      	ldr	r3, [r7, #0]
 800eeb6:	4413      	add	r3, r2
 800eeb8:	689b      	ldr	r3, [r3, #8]
 800eeba:	4619      	mov	r1, r3
 800eebc:	f7ff fe7b 	bl	800ebb6 <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
 800eec0:	697b      	ldr	r3, [r7, #20]
 800eec2:	3301      	adds	r3, #1
 800eec4:	617b      	str	r3, [r7, #20]
 800eec6:	697a      	ldr	r2, [r7, #20]
 800eec8:	6a3b      	ldr	r3, [r7, #32]
 800eeca:	429a      	cmp	r2, r3
 800eecc:	dbe3      	blt.n	800ee96 <metal_generic_dev_dma_unmap+0x14>
	}
}
 800eece:	bf00      	nop
 800eed0:	bf00      	nop
 800eed2:	3718      	adds	r7, #24
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}

0800eed8 <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b084      	sub	sp, #16
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 800eee0:	2300      	movs	r3, #0
 800eee2:	60fb      	str	r3, [r7, #12]
 800eee4:	e013      	b.n	800ef0e <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
 800eee6:	68fa      	ldr	r2, [r7, #12]
 800eee8:	4613      	mov	r3, r2
 800eeea:	005b      	lsls	r3, r3, #1
 800eeec:	4413      	add	r3, r2
 800eeee:	011b      	lsls	r3, r3, #4
 800eef0:	3308      	adds	r3, #8
 800eef2:	687a      	ldr	r2, [r7, #4]
 800eef4:	4413      	add	r3, r2
 800eef6:	3304      	adds	r3, #4
 800eef8:	60bb      	str	r3, [r7, #8]
		if (!io->size)
 800eefa:	68bb      	ldr	r3, [r7, #8]
 800eefc:	689b      	ldr	r3, [r3, #8]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d00b      	beq.n	800ef1a <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
 800ef02:	68b8      	ldr	r0, [r7, #8]
 800ef04:	f000 f81e 	bl	800ef44 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	3301      	adds	r3, #1
 800ef0c:	60fb      	str	r3, [r7, #12]
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	689b      	ldr	r3, [r3, #8]
 800ef12:	68fa      	ldr	r2, [r7, #12]
 800ef14:	429a      	cmp	r2, r3
 800ef16:	d3e6      	bcc.n	800eee6 <metal_generic_dev_sys_open+0xe>
 800ef18:	e000      	b.n	800ef1c <metal_generic_dev_sys_open+0x44>
			break;
 800ef1a:	bf00      	nop
	}

	return 0;
 800ef1c:	2300      	movs	r3, #0
}
 800ef1e:	4618      	mov	r0, r3
 800ef20:	3710      	adds	r7, #16
 800ef22:	46bd      	mov	sp, r7
 800ef24:	bd80      	pop	{r7, pc}
	...

0800ef28 <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b082      	sub	sp, #8
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 800ef30:	4803      	ldr	r0, [pc, #12]	; (800ef40 <metal_sys_init+0x18>)
 800ef32:	f7ff fe4d 	bl	800ebd0 <metal_bus_register>
	return 0;
 800ef36:	2300      	movs	r3, #0
}
 800ef38:	4618      	mov	r0, r3
 800ef3a:	3708      	adds	r7, #8
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}
 800ef40:	24000040 	.word	0x24000040

0800ef44 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b086      	sub	sp, #24
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = (size_t *)io->virt;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	60fb      	str	r3, [r7, #12]
	psize = io->size;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	689b      	ldr	r3, [r3, #8]
 800ef56:	613b      	str	r3, [r7, #16]
	if (psize) {
 800ef58:	693b      	ldr	r3, [r7, #16]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d02c      	beq.n	800efb8 <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	68db      	ldr	r3, [r3, #12]
 800ef62:	693a      	ldr	r2, [r7, #16]
 800ef64:	fa22 f303 	lsr.w	r3, r2, r3
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d005      	beq.n	800ef78 <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	68db      	ldr	r3, [r3, #12]
 800ef70:	2201      	movs	r2, #1
 800ef72:	fa02 f303 	lsl.w	r3, r2, r3
 800ef76:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 800ef78:	2300      	movs	r3, #0
 800ef7a:	617b      	str	r3, [r7, #20]
 800ef7c:	e013      	b.n	800efa6 <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	685a      	ldr	r2, [r3, #4]
 800ef82:	697b      	ldr	r3, [r7, #20]
 800ef84:	009b      	lsls	r3, r3, #2
 800ef86:	4413      	add	r3, r2
 800ef88:	6819      	ldr	r1, [r3, #0]
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	695b      	ldr	r3, [r3, #20]
 800ef8e:	693a      	ldr	r2, [r7, #16]
 800ef90:	68f8      	ldr	r0, [r7, #12]
 800ef92:	f001 fd91 	bl	8010ab8 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 800ef96:	693b      	ldr	r3, [r7, #16]
 800ef98:	009b      	lsls	r3, r3, #2
 800ef9a:	68fa      	ldr	r2, [r7, #12]
 800ef9c:	4413      	add	r3, r2
 800ef9e:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 800efa0:	697b      	ldr	r3, [r7, #20]
 800efa2:	3301      	adds	r3, #1
 800efa4:	617b      	str	r3, [r7, #20]
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	689a      	ldr	r2, [r3, #8]
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	68db      	ldr	r3, [r3, #12]
 800efae:	fa22 f303 	lsr.w	r3, r2, r3
 800efb2:	697a      	ldr	r2, [r7, #20]
 800efb4:	429a      	cmp	r2, r3
 800efb6:	d9e2      	bls.n	800ef7e <metal_sys_io_mem_map+0x3a>
		}
	}
}
 800efb8:	bf00      	nop
 800efba:	3718      	adds	r7, #24
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bd80      	pop	{r7, pc}

0800efc0 <metal_list_init>:
{
 800efc0:	b480      	push	{r7}
 800efc2:	b083      	sub	sp, #12
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	687a      	ldr	r2, [r7, #4]
 800efcc:	605a      	str	r2, [r3, #4]
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	685a      	ldr	r2, [r3, #4]
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	601a      	str	r2, [r3, #0]
}
 800efd6:	bf00      	nop
 800efd8:	370c      	adds	r7, #12
 800efda:	46bd      	mov	sp, r7
 800efdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe0:	4770      	bx	lr
	...

0800efe4 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b084      	sub	sp, #16
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
	int error = 0;
 800efec:	2300      	movs	r3, #0
 800efee:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
 800eff0:	2220      	movs	r2, #32
 800eff2:	2100      	movs	r1, #0
 800eff4:	4810      	ldr	r0, [pc, #64]	; (800f038 <metal_init+0x54>)
 800eff6:	f003 f831 	bl	801205c <memset>

	_metal.common.log_handler   = params->log_handler;
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	4a0e      	ldr	r2, [pc, #56]	; (800f038 <metal_init+0x54>)
 800f000:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	791a      	ldrb	r2, [r3, #4]
 800f006:	4b0c      	ldr	r3, [pc, #48]	; (800f038 <metal_init+0x54>)
 800f008:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
 800f00a:	480c      	ldr	r0, [pc, #48]	; (800f03c <metal_init+0x58>)
 800f00c:	f7ff ffd8 	bl	800efc0 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 800f010:	480b      	ldr	r0, [pc, #44]	; (800f040 <metal_init+0x5c>)
 800f012:	f7ff ffd5 	bl	800efc0 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 800f016:	480b      	ldr	r0, [pc, #44]	; (800f044 <metal_init+0x60>)
 800f018:	f7ff ffd2 	bl	800efc0 <metal_list_init>

	error = metal_sys_init(params);
 800f01c:	6878      	ldr	r0, [r7, #4]
 800f01e:	f7ff ff83 	bl	800ef28 <metal_sys_init>
 800f022:	60f8      	str	r0, [r7, #12]
	if (error)
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d001      	beq.n	800f02e <metal_init+0x4a>
		return error;
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	e000      	b.n	800f030 <metal_init+0x4c>

	return error;
 800f02e:	68fb      	ldr	r3, [r7, #12]
}
 800f030:	4618      	mov	r0, r3
 800f032:	3710      	adds	r7, #16
 800f034:	46bd      	mov	sp, r7
 800f036:	bd80      	pop	{r7, pc}
 800f038:	2400a858 	.word	0x2400a858
 800f03c:	2400a860 	.word	0x2400a860
 800f040:	2400a868 	.word	0x2400a868
 800f044:	2400a870 	.word	0x2400a870

0800f048 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 800f048:	b480      	push	{r7}
 800f04a:	b083      	sub	sp, #12
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
 800f050:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	681b      	ldr	r3, [r3, #0]
		? (uint8_t *)io->virt + offset
		: NULL);
 800f056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f05a:	d009      	beq.n	800f070 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	689b      	ldr	r3, [r3, #8]
 800f060:	683a      	ldr	r2, [r7, #0]
 800f062:	429a      	cmp	r2, r3
 800f064:	d804      	bhi.n	800f070 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	681a      	ldr	r2, [r3, #0]
		: NULL);
 800f06a:	683b      	ldr	r3, [r7, #0]
 800f06c:	4413      	add	r3, r2
 800f06e:	e000      	b.n	800f072 <metal_io_virt+0x2a>
 800f070:	2300      	movs	r3, #0
}
 800f072:	4618      	mov	r0, r3
 800f074:	370c      	adds	r7, #12
 800f076:	46bd      	mov	sp, r7
 800f078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07c:	4770      	bx	lr

0800f07e <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 800f07e:	b5b0      	push	{r4, r5, r7, lr}
 800f080:	b08a      	sub	sp, #40	; 0x28
 800f082:	af00      	add	r7, sp, #0
 800f084:	60f8      	str	r0, [r7, #12]
 800f086:	60b9      	str	r1, [r7, #8]
 800f088:	607a      	str	r2, [r7, #4]
 800f08a:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {NULL, NULL, NULL, NULL, NULL, NULL};
 800f08c:	f107 0310 	add.w	r3, r7, #16
 800f090:	2200      	movs	r2, #0
 800f092:	601a      	str	r2, [r3, #0]
 800f094:	605a      	str	r2, [r3, #4]
 800f096:	609a      	str	r2, [r3, #8]
 800f098:	60da      	str	r2, [r3, #12]
 800f09a:	611a      	str	r2, [r3, #16]
 800f09c:	615a      	str	r2, [r3, #20]

	io->virt = virt;
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	68ba      	ldr	r2, [r7, #8]
 800f0a2:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	687a      	ldr	r2, [r7, #4]
 800f0a8:	605a      	str	r2, [r3, #4]
	io->size = size;
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	683a      	ldr	r2, [r7, #0]
 800f0ae:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f0b4:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 800f0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0b8:	2b1f      	cmp	r3, #31
 800f0ba:	d904      	bls.n	800f0c6 <metal_io_init+0x48>
		/* avoid overflow */
		io->page_mask = -1UL;
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	f04f 32ff 	mov.w	r2, #4294967295
 800f0c2:	611a      	str	r2, [r3, #16]
 800f0c4:	e006      	b.n	800f0d4 <metal_io_init+0x56>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 800f0c6:	2201      	movs	r2, #1
 800f0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ca:	fa02 f303 	lsl.w	r3, r2, r3
 800f0ce:	1e5a      	subs	r2, r3, #1
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f0d8:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
 800f0da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d00b      	beq.n	800f0f8 <metal_io_init+0x7a>
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f0e4:	f103 0418 	add.w	r4, r3, #24
 800f0e8:	4615      	mov	r5, r2
 800f0ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f0ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f0ee:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f0f2:	e884 0003 	stmia.w	r4, {r0, r1}
 800f0f6:	e00a      	b.n	800f10e <metal_io_init+0x90>
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	f103 0418 	add.w	r4, r3, #24
 800f0fe:	f107 0510 	add.w	r5, r7, #16
 800f102:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f104:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f106:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f10a:	e884 0003 	stmia.w	r4, {r0, r1}
	metal_sys_io_mem_map(io);
 800f10e:	68f8      	ldr	r0, [r7, #12]
 800f110:	f7ff ff18 	bl	800ef44 <metal_sys_io_mem_map>
}
 800f114:	bf00      	nop
 800f116:	3728      	adds	r7, #40	; 0x28
 800f118:	46bd      	mov	sp, r7
 800f11a:	bdb0      	pop	{r4, r5, r7, pc}

0800f11c <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 800f11c:	b590      	push	{r4, r7, lr}
 800f11e:	b08b      	sub	sp, #44	; 0x2c
 800f120:	af02      	add	r7, sp, #8
 800f122:	60f8      	str	r0, [r7, #12]
 800f124:	60b9      	str	r1, [r7, #8]
 800f126:	607a      	str	r2, [r7, #4]
 800f128:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 800f12a:	68b9      	ldr	r1, [r7, #8]
 800f12c:	68f8      	ldr	r0, [r7, #12]
 800f12e:	f7ff ff8b 	bl	800f048 <metal_io_virt>
 800f132:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	689b      	ldr	r3, [r3, #8]
 800f13c:	68ba      	ldr	r2, [r7, #8]
 800f13e:	429a      	cmp	r2, r3
 800f140:	d902      	bls.n	800f148 <metal_io_block_read+0x2c>
		return -ERANGE;
 800f142:	f06f 0321 	mvn.w	r3, #33	; 0x21
 800f146:	e05c      	b.n	800f202 <metal_io_block_read+0xe6>
	if ((offset + len) > io->size)
 800f148:	683a      	ldr	r2, [r7, #0]
 800f14a:	68bb      	ldr	r3, [r7, #8]
 800f14c:	441a      	add	r2, r3
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	689b      	ldr	r3, [r3, #8]
 800f152:	429a      	cmp	r2, r3
 800f154:	d904      	bls.n	800f160 <metal_io_block_read+0x44>
		len = io->size - offset;
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	689a      	ldr	r2, [r3, #8]
 800f15a:	68bb      	ldr	r3, [r7, #8]
 800f15c:	1ad3      	subs	r3, r2, r3
 800f15e:	603b      	str	r3, [r7, #0]
	retlen = len;
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	6a1b      	ldr	r3, [r3, #32]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d00a      	beq.n	800f182 <metal_io_block_read+0x66>
		retlen = (*io->ops.block_read)(
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	6a1c      	ldr	r4, [r3, #32]
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	9300      	str	r3, [sp, #0]
 800f174:	2305      	movs	r3, #5
 800f176:	687a      	ldr	r2, [r7, #4]
 800f178:	68b9      	ldr	r1, [r7, #8]
 800f17a:	68f8      	ldr	r0, [r7, #12]
 800f17c:	47a0      	blx	r4
 800f17e:	6178      	str	r0, [r7, #20]
 800f180:	e03e      	b.n	800f200 <metal_io_block_read+0xe4>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 800f182:	f3bf 8f5b 	dmb	ish
		while ( len && (
 800f186:	e00c      	b.n	800f1a2 <metal_io_block_read+0x86>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 800f188:	69fb      	ldr	r3, [r7, #28]
 800f18a:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 800f18c:	69bb      	ldr	r3, [r7, #24]
 800f18e:	701a      	strb	r2, [r3, #0]
			dest++;
 800f190:	69bb      	ldr	r3, [r7, #24]
 800f192:	3301      	adds	r3, #1
 800f194:	61bb      	str	r3, [r7, #24]
			ptr++;
 800f196:	69fb      	ldr	r3, [r7, #28]
 800f198:	3301      	adds	r3, #1
 800f19a:	61fb      	str	r3, [r7, #28]
			len--;
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	3b01      	subs	r3, #1
 800f1a0:	603b      	str	r3, [r7, #0]
		while ( len && (
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d017      	beq.n	800f1d8 <metal_io_block_read+0xbc>
			((uintptr_t)dest % sizeof(int)) ||
 800f1a8:	69bb      	ldr	r3, [r7, #24]
 800f1aa:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d1ea      	bne.n	800f188 <metal_io_block_read+0x6c>
			((uintptr_t)ptr % sizeof(int)))) {
 800f1b2:	69fb      	ldr	r3, [r7, #28]
 800f1b4:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d1e5      	bne.n	800f188 <metal_io_block_read+0x6c>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 800f1bc:	e00c      	b.n	800f1d8 <metal_io_block_read+0xbc>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 800f1be:	69fb      	ldr	r3, [r7, #28]
 800f1c0:	681a      	ldr	r2, [r3, #0]
 800f1c2:	69bb      	ldr	r3, [r7, #24]
 800f1c4:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 800f1c6:	69bb      	ldr	r3, [r7, #24]
 800f1c8:	3304      	adds	r3, #4
 800f1ca:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
 800f1cc:	69fb      	ldr	r3, [r7, #28]
 800f1ce:	3304      	adds	r3, #4
 800f1d0:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
 800f1d2:	683b      	ldr	r3, [r7, #0]
 800f1d4:	3b04      	subs	r3, #4
 800f1d6:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	2b03      	cmp	r3, #3
 800f1dc:	dcef      	bgt.n	800f1be <metal_io_block_read+0xa2>
		for (; len != 0; dest++, ptr++, len--)
 800f1de:	e00c      	b.n	800f1fa <metal_io_block_read+0xde>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 800f1e0:	69fb      	ldr	r3, [r7, #28]
 800f1e2:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 800f1e4:	69bb      	ldr	r3, [r7, #24]
 800f1e6:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
 800f1e8:	69bb      	ldr	r3, [r7, #24]
 800f1ea:	3301      	adds	r3, #1
 800f1ec:	61bb      	str	r3, [r7, #24]
 800f1ee:	69fb      	ldr	r3, [r7, #28]
 800f1f0:	3301      	adds	r3, #1
 800f1f2:	61fb      	str	r3, [r7, #28]
 800f1f4:	683b      	ldr	r3, [r7, #0]
 800f1f6:	3b01      	subs	r3, #1
 800f1f8:	603b      	str	r3, [r7, #0]
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d1ef      	bne.n	800f1e0 <metal_io_block_read+0xc4>
	}
	return retlen;
 800f200:	697b      	ldr	r3, [r7, #20]
}
 800f202:	4618      	mov	r0, r3
 800f204:	3724      	adds	r7, #36	; 0x24
 800f206:	46bd      	mov	sp, r7
 800f208:	bd90      	pop	{r4, r7, pc}

0800f20a <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 800f20a:	b590      	push	{r4, r7, lr}
 800f20c:	b08b      	sub	sp, #44	; 0x2c
 800f20e:	af02      	add	r7, sp, #8
 800f210:	60f8      	str	r0, [r7, #12]
 800f212:	60b9      	str	r1, [r7, #8]
 800f214:	607a      	str	r2, [r7, #4]
 800f216:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 800f218:	68b9      	ldr	r1, [r7, #8]
 800f21a:	68f8      	ldr	r0, [r7, #12]
 800f21c:	f7ff ff14 	bl	800f048 <metal_io_virt>
 800f220:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	689b      	ldr	r3, [r3, #8]
 800f22a:	68ba      	ldr	r2, [r7, #8]
 800f22c:	429a      	cmp	r2, r3
 800f22e:	d902      	bls.n	800f236 <metal_io_block_write+0x2c>
		return -ERANGE;
 800f230:	f06f 0321 	mvn.w	r3, #33	; 0x21
 800f234:	e05b      	b.n	800f2ee <metal_io_block_write+0xe4>
	if ((offset + len) > io->size)
 800f236:	683a      	ldr	r2, [r7, #0]
 800f238:	68bb      	ldr	r3, [r7, #8]
 800f23a:	441a      	add	r2, r3
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	689b      	ldr	r3, [r3, #8]
 800f240:	429a      	cmp	r2, r3
 800f242:	d904      	bls.n	800f24e <metal_io_block_write+0x44>
		len = io->size - offset;
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	689a      	ldr	r2, [r3, #8]
 800f248:	68bb      	ldr	r3, [r7, #8]
 800f24a:	1ad3      	subs	r3, r2, r3
 800f24c:	603b      	str	r3, [r7, #0]
	retlen = len;
 800f24e:	683b      	ldr	r3, [r7, #0]
 800f250:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f256:	2b00      	cmp	r3, #0
 800f258:	d017      	beq.n	800f28a <metal_io_block_write+0x80>
		retlen = (*io->ops.block_write)(
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	9300      	str	r3, [sp, #0]
 800f262:	2305      	movs	r3, #5
 800f264:	687a      	ldr	r2, [r7, #4]
 800f266:	68b9      	ldr	r1, [r7, #8]
 800f268:	68f8      	ldr	r0, [r7, #12]
 800f26a:	47a0      	blx	r4
 800f26c:	6178      	str	r0, [r7, #20]
 800f26e:	e03d      	b.n	800f2ec <metal_io_block_write+0xe2>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 800f270:	69bb      	ldr	r3, [r7, #24]
 800f272:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 800f274:	69fb      	ldr	r3, [r7, #28]
 800f276:	701a      	strb	r2, [r3, #0]
			ptr++;
 800f278:	69fb      	ldr	r3, [r7, #28]
 800f27a:	3301      	adds	r3, #1
 800f27c:	61fb      	str	r3, [r7, #28]
			source++;
 800f27e:	69bb      	ldr	r3, [r7, #24]
 800f280:	3301      	adds	r3, #1
 800f282:	61bb      	str	r3, [r7, #24]
			len--;
 800f284:	683b      	ldr	r3, [r7, #0]
 800f286:	3b01      	subs	r3, #1
 800f288:	603b      	str	r3, [r7, #0]
		while ( len && (
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d017      	beq.n	800f2c0 <metal_io_block_write+0xb6>
			((uintptr_t)ptr % sizeof(int)) ||
 800f290:	69fb      	ldr	r3, [r7, #28]
 800f292:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 800f296:	2b00      	cmp	r3, #0
 800f298:	d1ea      	bne.n	800f270 <metal_io_block_write+0x66>
			((uintptr_t)source % sizeof(int)))) {
 800f29a:	69bb      	ldr	r3, [r7, #24]
 800f29c:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d1e5      	bne.n	800f270 <metal_io_block_write+0x66>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 800f2a4:	e00c      	b.n	800f2c0 <metal_io_block_write+0xb6>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 800f2a6:	69bb      	ldr	r3, [r7, #24]
 800f2a8:	681a      	ldr	r2, [r3, #0]
 800f2aa:	69fb      	ldr	r3, [r7, #28]
 800f2ac:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 800f2ae:	69fb      	ldr	r3, [r7, #28]
 800f2b0:	3304      	adds	r3, #4
 800f2b2:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
 800f2b4:	69bb      	ldr	r3, [r7, #24]
 800f2b6:	3304      	adds	r3, #4
 800f2b8:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
 800f2ba:	683b      	ldr	r3, [r7, #0]
 800f2bc:	3b04      	subs	r3, #4
 800f2be:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	2b03      	cmp	r3, #3
 800f2c4:	dcef      	bgt.n	800f2a6 <metal_io_block_write+0x9c>
		for (; len != 0; ptr++, source++, len--)
 800f2c6:	e00c      	b.n	800f2e2 <metal_io_block_write+0xd8>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 800f2c8:	69bb      	ldr	r3, [r7, #24]
 800f2ca:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 800f2cc:	69fb      	ldr	r3, [r7, #28]
 800f2ce:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
 800f2d0:	69fb      	ldr	r3, [r7, #28]
 800f2d2:	3301      	adds	r3, #1
 800f2d4:	61fb      	str	r3, [r7, #28]
 800f2d6:	69bb      	ldr	r3, [r7, #24]
 800f2d8:	3301      	adds	r3, #1
 800f2da:	61bb      	str	r3, [r7, #24]
 800f2dc:	683b      	ldr	r3, [r7, #0]
 800f2de:	3b01      	subs	r3, #1
 800f2e0:	603b      	str	r3, [r7, #0]
 800f2e2:	683b      	ldr	r3, [r7, #0]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d1ef      	bne.n	800f2c8 <metal_io_block_write+0xbe>
		atomic_thread_fence(memory_order_seq_cst);
 800f2e8:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 800f2ec:	697b      	ldr	r3, [r7, #20]
}
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	3724      	adds	r7, #36	; 0x24
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd90      	pop	{r4, r7, pc}

0800f2f6 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
 800f2f6:	b590      	push	{r4, r7, lr}
 800f2f8:	b08b      	sub	sp, #44	; 0x2c
 800f2fa:	af02      	add	r7, sp, #8
 800f2fc:	60f8      	str	r0, [r7, #12]
 800f2fe:	60b9      	str	r1, [r7, #8]
 800f300:	603b      	str	r3, [r7, #0]
 800f302:	4613      	mov	r3, r2
 800f304:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = metal_io_virt(io, offset);
 800f306:	68b9      	ldr	r1, [r7, #8]
 800f308:	68f8      	ldr	r0, [r7, #12]
 800f30a:	f7ff fe9d 	bl	800f048 <metal_io_virt>
 800f30e:	61f8      	str	r0, [r7, #28]
	int retlen = len;
 800f310:	683b      	ldr	r3, [r7, #0]
 800f312:	613b      	str	r3, [r7, #16]

	if (offset > io->size)
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	689b      	ldr	r3, [r3, #8]
 800f318:	68ba      	ldr	r2, [r7, #8]
 800f31a:	429a      	cmp	r2, r3
 800f31c:	d902      	bls.n	800f324 <metal_io_block_set+0x2e>
		return -ERANGE;
 800f31e:	f06f 0321 	mvn.w	r3, #33	; 0x21
 800f322:	e05d      	b.n	800f3e0 <metal_io_block_set+0xea>
	if ((offset + len) > io->size)
 800f324:	683a      	ldr	r2, [r7, #0]
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	441a      	add	r2, r3
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	689b      	ldr	r3, [r3, #8]
 800f32e:	429a      	cmp	r2, r3
 800f330:	d904      	bls.n	800f33c <metal_io_block_set+0x46>
		len = io->size - offset;
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	689a      	ldr	r2, [r3, #8]
 800f336:	68bb      	ldr	r3, [r7, #8]
 800f338:	1ad3      	subs	r3, r2, r3
 800f33a:	603b      	str	r3, [r7, #0]
	retlen = len;
 800f33c:	683b      	ldr	r3, [r7, #0]
 800f33e:	613b      	str	r3, [r7, #16]
	if (io->ops.block_set) {
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f344:	2b00      	cmp	r3, #0
 800f346:	d009      	beq.n	800f35c <metal_io_block_set+0x66>
		(*io->ops.block_set)(
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800f34c:	79fa      	ldrb	r2, [r7, #7]
 800f34e:	683b      	ldr	r3, [r7, #0]
 800f350:	9300      	str	r3, [sp, #0]
 800f352:	2305      	movs	r3, #5
 800f354:	68b9      	ldr	r1, [r7, #8]
 800f356:	68f8      	ldr	r0, [r7, #12]
 800f358:	47a0      	blx	r4
 800f35a:	e040      	b.n	800f3de <metal_io_block_set+0xe8>
			io, offset, value, memory_order_seq_cst, len);
	} else {
		unsigned int cint = value;
 800f35c:	79fb      	ldrb	r3, [r7, #7]
 800f35e:	61bb      	str	r3, [r7, #24]
		unsigned int i;

		for (i = 1; i < sizeof(int); i++)
 800f360:	2301      	movs	r3, #1
 800f362:	617b      	str	r3, [r7, #20]
 800f364:	e00a      	b.n	800f37c <metal_io_block_set+0x86>
			cint |= ((unsigned int)value << (8 * i));
 800f366:	79fa      	ldrb	r2, [r7, #7]
 800f368:	697b      	ldr	r3, [r7, #20]
 800f36a:	00db      	lsls	r3, r3, #3
 800f36c:	fa02 f303 	lsl.w	r3, r2, r3
 800f370:	69ba      	ldr	r2, [r7, #24]
 800f372:	4313      	orrs	r3, r2
 800f374:	61bb      	str	r3, [r7, #24]
		for (i = 1; i < sizeof(int); i++)
 800f376:	697b      	ldr	r3, [r7, #20]
 800f378:	3301      	adds	r3, #1
 800f37a:	617b      	str	r3, [r7, #20]
 800f37c:	697b      	ldr	r3, [r7, #20]
 800f37e:	2b03      	cmp	r3, #3
 800f380:	d9f1      	bls.n	800f366 <metal_io_block_set+0x70>

		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 800f382:	e008      	b.n	800f396 <metal_io_block_set+0xa0>
			*(unsigned char *)ptr = (unsigned char) value;
 800f384:	69fb      	ldr	r3, [r7, #28]
 800f386:	79fa      	ldrb	r2, [r7, #7]
 800f388:	701a      	strb	r2, [r3, #0]
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 800f38a:	69fb      	ldr	r3, [r7, #28]
 800f38c:	3301      	adds	r3, #1
 800f38e:	61fb      	str	r3, [r7, #28]
 800f390:	683b      	ldr	r3, [r7, #0]
 800f392:	3b01      	subs	r3, #1
 800f394:	603b      	str	r3, [r7, #0]
 800f396:	683b      	ldr	r3, [r7, #0]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d00e      	beq.n	800f3ba <metal_io_block_set+0xc4>
 800f39c:	69fb      	ldr	r3, [r7, #28]
 800f39e:	f003 0303 	and.w	r3, r3, #3
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d1ee      	bne.n	800f384 <metal_io_block_set+0x8e>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 800f3a6:	e008      	b.n	800f3ba <metal_io_block_set+0xc4>
						len -= sizeof(int))
			*(unsigned int *)ptr = cint;
 800f3a8:	69fb      	ldr	r3, [r7, #28]
 800f3aa:	69ba      	ldr	r2, [r7, #24]
 800f3ac:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 800f3ae:	69fb      	ldr	r3, [r7, #28]
 800f3b0:	3304      	adds	r3, #4
 800f3b2:	61fb      	str	r3, [r7, #28]
						len -= sizeof(int))
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	3b04      	subs	r3, #4
 800f3b8:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 800f3ba:	683b      	ldr	r3, [r7, #0]
 800f3bc:	2b03      	cmp	r3, #3
 800f3be:	dcf3      	bgt.n	800f3a8 <metal_io_block_set+0xb2>
		for (; len != 0; ptr++, len--)
 800f3c0:	e008      	b.n	800f3d4 <metal_io_block_set+0xde>
			*(unsigned char *)ptr = (unsigned char) value;
 800f3c2:	69fb      	ldr	r3, [r7, #28]
 800f3c4:	79fa      	ldrb	r2, [r7, #7]
 800f3c6:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, len--)
 800f3c8:	69fb      	ldr	r3, [r7, #28]
 800f3ca:	3301      	adds	r3, #1
 800f3cc:	61fb      	str	r3, [r7, #28]
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	3b01      	subs	r3, #1
 800f3d2:	603b      	str	r3, [r7, #0]
 800f3d4:	683b      	ldr	r3, [r7, #0]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d1f3      	bne.n	800f3c2 <metal_io_block_set+0xcc>
		atomic_thread_fence(memory_order_seq_cst);
 800f3da:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 800f3de:	693b      	ldr	r3, [r7, #16]
}
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	3724      	adds	r7, #36	; 0x24
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bd90      	pop	{r4, r7, pc}

0800f3e8 <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 800f3e8:	b40e      	push	{r1, r2, r3}
 800f3ea:	b480      	push	{r7}
 800f3ec:	b082      	sub	sp, #8
 800f3ee:	af00      	add	r7, sp, #0
 800f3f0:	4603      	mov	r3, r0
 800f3f2:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 800f3f4:	bf00      	nop
 800f3f6:	3708      	adds	r7, #8
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fe:	b003      	add	sp, #12
 800f400:	4770      	bx	lr

0800f402 <metal_io_virt>:
{
 800f402:	b480      	push	{r7}
 800f404:	b083      	sub	sp, #12
 800f406:	af00      	add	r7, sp, #0
 800f408:	6078      	str	r0, [r7, #4]
 800f40a:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
		: NULL);
 800f410:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f414:	d009      	beq.n	800f42a <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	689b      	ldr	r3, [r3, #8]
 800f41a:	683a      	ldr	r2, [r7, #0]
 800f41c:	429a      	cmp	r2, r3
 800f41e:	d804      	bhi.n	800f42a <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	681a      	ldr	r2, [r3, #0]
		: NULL);
 800f424:	683b      	ldr	r3, [r7, #0]
 800f426:	4413      	add	r3, r2
 800f428:	e000      	b.n	800f42c <metal_io_virt+0x2a>
 800f42a:	2300      	movs	r3, #0
}
 800f42c:	4618      	mov	r0, r3
 800f42e:	370c      	adds	r7, #12
 800f430:	46bd      	mov	sp, r7
 800f432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f436:	4770      	bx	lr

0800f438 <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 800f438:	b480      	push	{r7}
 800f43a:	b085      	sub	sp, #20
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
 800f440:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	683a      	ldr	r2, [r7, #0]
 800f448:	1ad3      	subs	r3, r2, r3
 800f44a:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	689b      	ldr	r3, [r3, #8]
 800f450:	68fa      	ldr	r2, [r7, #12]
 800f452:	429a      	cmp	r2, r3
 800f454:	d201      	bcs.n	800f45a <metal_io_virt_to_offset+0x22>
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	e001      	b.n	800f45e <metal_io_virt_to_offset+0x26>
 800f45a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f45e:	4618      	mov	r0, r3
 800f460:	3714      	adds	r7, #20
 800f462:	46bd      	mov	sp, r7
 800f464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f468:	4770      	bx	lr
	...

0800f46c <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 800f46c:	b590      	push	{r4, r7, lr}
 800f46e:	b08d      	sub	sp, #52	; 0x34
 800f470:	af00      	add	r7, sp, #0
 800f472:	60f8      	str	r0, [r7, #12]
 800f474:	60b9      	str	r1, [r7, #8]
 800f476:	603b      	str	r3, [r7, #0]
 800f478:	4613      	mov	r3, r2
 800f47a:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
 800f47c:	68b9      	ldr	r1, [r7, #8]
 800f47e:	68f8      	ldr	r0, [r7, #12]
 800f480:	f7ff ffbf 	bl	800f402 <metal_io_virt>
 800f484:	62f8      	str	r0, [r7, #44]	; 0x2c

	if (io->ops.read)
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	699b      	ldr	r3, [r3, #24]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d009      	beq.n	800f4a2 <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	699c      	ldr	r4, [r3, #24]
 800f492:	79fa      	ldrb	r2, [r7, #7]
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	68b9      	ldr	r1, [r7, #8]
 800f498:	68f8      	ldr	r0, [r7, #12]
 800f49a:	47a0      	blx	r4
 800f49c:	4602      	mov	r2, r0
 800f49e:	460b      	mov	r3, r1
 800f4a0:	e057      	b.n	800f552 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uchar) == width)
 800f4a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d011      	beq.n	800f4cc <metal_io_read+0x60>
 800f4a8:	683b      	ldr	r3, [r7, #0]
 800f4aa:	2b01      	cmp	r3, #1
 800f4ac:	d10e      	bne.n	800f4cc <metal_io_read+0x60>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 800f4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800f4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4b4:	f3bf 8f5b 	dmb	ish
 800f4b8:	781b      	ldrb	r3, [r3, #0]
 800f4ba:	f3bf 8f5b 	dmb	ish
 800f4be:	b2db      	uxtb	r3, r3
 800f4c0:	76fb      	strb	r3, [r7, #27]
 800f4c2:	7efb      	ldrb	r3, [r7, #27]
 800f4c4:	b2da      	uxtb	r2, r3
 800f4c6:	f04f 0300 	mov.w	r3, #0
 800f4ca:	e042      	b.n	800f552 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ushort) == width)
 800f4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d011      	beq.n	800f4f6 <metal_io_read+0x8a>
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	2b02      	cmp	r3, #2
 800f4d6:	d10e      	bne.n	800f4f6 <metal_io_read+0x8a>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 800f4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4da:	627b      	str	r3, [r7, #36]	; 0x24
 800f4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4de:	f3bf 8f5b 	dmb	ish
 800f4e2:	881b      	ldrh	r3, [r3, #0]
 800f4e4:	f3bf 8f5b 	dmb	ish
 800f4e8:	b29b      	uxth	r3, r3
 800f4ea:	833b      	strh	r3, [r7, #24]
 800f4ec:	8b3b      	ldrh	r3, [r7, #24]
 800f4ee:	b29a      	uxth	r2, r3
 800f4f0:	f04f 0300 	mov.w	r3, #0
 800f4f4:	e02d      	b.n	800f552 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uint) == width)
 800f4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d010      	beq.n	800f51e <metal_io_read+0xb2>
 800f4fc:	683b      	ldr	r3, [r7, #0]
 800f4fe:	2b04      	cmp	r3, #4
 800f500:	d10d      	bne.n	800f51e <metal_io_read+0xb2>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 800f502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f504:	623b      	str	r3, [r7, #32]
 800f506:	6a3b      	ldr	r3, [r7, #32]
 800f508:	f3bf 8f5b 	dmb	ish
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	f3bf 8f5b 	dmb	ish
 800f512:	617b      	str	r3, [r7, #20]
 800f514:	697b      	ldr	r3, [r7, #20]
 800f516:	461a      	mov	r2, r3
 800f518:	f04f 0300 	mov.w	r3, #0
 800f51c:	e019      	b.n	800f552 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ulong) == width)
 800f51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f520:	2b00      	cmp	r3, #0
 800f522:	d010      	beq.n	800f546 <metal_io_read+0xda>
 800f524:	683b      	ldr	r3, [r7, #0]
 800f526:	2b04      	cmp	r3, #4
 800f528:	d10d      	bne.n	800f546 <metal_io_read+0xda>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 800f52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f52c:	61fb      	str	r3, [r7, #28]
 800f52e:	69fb      	ldr	r3, [r7, #28]
 800f530:	f3bf 8f5b 	dmb	ish
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	f3bf 8f5b 	dmb	ish
 800f53a:	613b      	str	r3, [r7, #16]
 800f53c:	693b      	ldr	r3, [r7, #16]
 800f53e:	461a      	mov	r2, r3
 800f540:	f04f 0300 	mov.w	r3, #0
 800f544:	e005      	b.n	800f552 <metal_io_read+0xe6>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
 800f546:	4b05      	ldr	r3, [pc, #20]	; (800f55c <metal_io_read+0xf0>)
 800f548:	4a05      	ldr	r2, [pc, #20]	; (800f560 <metal_io_read+0xf4>)
 800f54a:	21f0      	movs	r1, #240	; 0xf0
 800f54c:	4805      	ldr	r0, [pc, #20]	; (800f564 <metal_io_read+0xf8>)
 800f54e:	f002 fcf3 	bl	8011f38 <__assert_func>
	return 0; /* quiet compiler */
}
 800f552:	4610      	mov	r0, r2
 800f554:	4619      	mov	r1, r3
 800f556:	3734      	adds	r7, #52	; 0x34
 800f558:	46bd      	mov	sp, r7
 800f55a:	bd90      	pop	{r4, r7, pc}
 800f55c:	08016b74 	.word	0x08016b74
 800f560:	08063228 	.word	0x08063228
 800f564:	08016b78 	.word	0x08016b78

0800f568 <metal_io_write>:
 *			to inline cleanly.
 */
static inline void
metal_io_write(struct metal_io_region *io, unsigned long offset,
	       uint64_t value, memory_order order, int width)
{
 800f568:	b590      	push	{r4, r7, lr}
 800f56a:	b08f      	sub	sp, #60	; 0x3c
 800f56c:	af02      	add	r7, sp, #8
 800f56e:	60f8      	str	r0, [r7, #12]
 800f570:	60b9      	str	r1, [r7, #8]
 800f572:	e9c7 2300 	strd	r2, r3, [r7]
	void *ptr = metal_io_virt(io, offset);
 800f576:	68b9      	ldr	r1, [r7, #8]
 800f578:	68f8      	ldr	r0, [r7, #12]
 800f57a:	f7ff ff42 	bl	800f402 <metal_io_virt>
 800f57e:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (io->ops.write)
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	69db      	ldr	r3, [r3, #28]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d00c      	beq.n	800f5a2 <metal_io_write+0x3a>
		(*io->ops.write)(io, offset, value, order, width);
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	69dc      	ldr	r4, [r3, #28]
 800f58c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f58e:	9301      	str	r3, [sp, #4]
 800f590:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800f594:	9300      	str	r3, [sp, #0]
 800f596:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f59a:	68b9      	ldr	r1, [r7, #8]
 800f59c:	68f8      	ldr	r0, [r7, #12]
 800f59e:	47a0      	blx	r4
	else if (ptr && sizeof(atomic_ullong) == width)
		atomic_store_explicit((atomic_ullong *)ptr, value, order);
#endif
	else
		metal_assert (0);
}
 800f5a0:	e04e      	b.n	800f640 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uchar) == width)
 800f5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d00e      	beq.n	800f5c6 <metal_io_write+0x5e>
 800f5a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5aa:	2b01      	cmp	r3, #1
 800f5ac:	d10b      	bne.n	800f5c6 <metal_io_write+0x5e>
		atomic_store_explicit((atomic_uchar *)ptr, value, order);
 800f5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800f5b2:	783b      	ldrb	r3, [r7, #0]
 800f5b4:	76fb      	strb	r3, [r7, #27]
 800f5b6:	7efa      	ldrb	r2, [r7, #27]
 800f5b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ba:	f3bf 8f5b 	dmb	ish
 800f5be:	701a      	strb	r2, [r3, #0]
 800f5c0:	f3bf 8f5b 	dmb	ish
 800f5c4:	e03c      	b.n	800f640 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ushort) == width)
 800f5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d00e      	beq.n	800f5ea <metal_io_write+0x82>
 800f5cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5ce:	2b02      	cmp	r3, #2
 800f5d0:	d10b      	bne.n	800f5ea <metal_io_write+0x82>
		atomic_store_explicit((atomic_ushort *)ptr, value, order);
 800f5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5d4:	627b      	str	r3, [r7, #36]	; 0x24
 800f5d6:	883b      	ldrh	r3, [r7, #0]
 800f5d8:	833b      	strh	r3, [r7, #24]
 800f5da:	8b3a      	ldrh	r2, [r7, #24]
 800f5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5de:	f3bf 8f5b 	dmb	ish
 800f5e2:	801a      	strh	r2, [r3, #0]
 800f5e4:	f3bf 8f5b 	dmb	ish
 800f5e8:	e02a      	b.n	800f640 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uint) == width)
 800f5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d00e      	beq.n	800f60e <metal_io_write+0xa6>
 800f5f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5f2:	2b04      	cmp	r3, #4
 800f5f4:	d10b      	bne.n	800f60e <metal_io_write+0xa6>
		atomic_store_explicit((atomic_uint *)ptr, value, order);
 800f5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5f8:	623b      	str	r3, [r7, #32]
 800f5fa:	683b      	ldr	r3, [r7, #0]
 800f5fc:	617b      	str	r3, [r7, #20]
 800f5fe:	697a      	ldr	r2, [r7, #20]
 800f600:	6a3b      	ldr	r3, [r7, #32]
 800f602:	f3bf 8f5b 	dmb	ish
 800f606:	601a      	str	r2, [r3, #0]
 800f608:	f3bf 8f5b 	dmb	ish
 800f60c:	e018      	b.n	800f640 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ulong) == width)
 800f60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f610:	2b00      	cmp	r3, #0
 800f612:	d00e      	beq.n	800f632 <metal_io_write+0xca>
 800f614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f616:	2b04      	cmp	r3, #4
 800f618:	d10b      	bne.n	800f632 <metal_io_write+0xca>
		atomic_store_explicit((atomic_ulong *)ptr, value, order);
 800f61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f61c:	61fb      	str	r3, [r7, #28]
 800f61e:	683b      	ldr	r3, [r7, #0]
 800f620:	613b      	str	r3, [r7, #16]
 800f622:	693a      	ldr	r2, [r7, #16]
 800f624:	69fb      	ldr	r3, [r7, #28]
 800f626:	f3bf 8f5b 	dmb	ish
 800f62a:	601a      	str	r2, [r3, #0]
 800f62c:	f3bf 8f5b 	dmb	ish
 800f630:	e006      	b.n	800f640 <metal_io_write+0xd8>
		metal_assert (0);
 800f632:	4b05      	ldr	r3, [pc, #20]	; (800f648 <metal_io_write+0xe0>)
 800f634:	4a05      	ldr	r2, [pc, #20]	; (800f64c <metal_io_write+0xe4>)
 800f636:	f44f 7189 	mov.w	r1, #274	; 0x112
 800f63a:	4805      	ldr	r0, [pc, #20]	; (800f650 <metal_io_write+0xe8>)
 800f63c:	f002 fc7c 	bl	8011f38 <__assert_func>
}
 800f640:	bf00      	nop
 800f642:	3734      	adds	r7, #52	; 0x34
 800f644:	46bd      	mov	sp, r7
 800f646:	bd90      	pop	{r4, r7, pc}
 800f648:	08016b74 	.word	0x08016b74
 800f64c:	08063238 	.word	0x08063238
 800f650:	08016b78 	.word	0x08016b78

0800f654 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b082      	sub	sp, #8
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
	return (malloc(size));
 800f65c:	6878      	ldr	r0, [r7, #4]
 800f65e:	f002 fcc5 	bl	8011fec <malloc>
 800f662:	4603      	mov	r3, r0
}
 800f664:	4618      	mov	r0, r3
 800f666:	3708      	adds	r7, #8
 800f668:	46bd      	mov	sp, r7
 800f66a:	bd80      	pop	{r7, pc}

0800f66c <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b082      	sub	sp, #8
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
	free(ptr);
 800f674:	6878      	ldr	r0, [r7, #4]
 800f676:	f002 fcc1 	bl	8011ffc <free>
}
 800f67a:	bf00      	nop
 800f67c:	3708      	adds	r7, #8
 800f67e:	46bd      	mov	sp, r7
 800f680:	bd80      	pop	{r7, pc}

0800f682 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 800f682:	b580      	push	{r7, lr}
 800f684:	b084      	sub	sp, #16
 800f686:	af00      	add	r7, sp, #0
 800f688:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	3307      	adds	r3, #7
 800f68e:	00db      	lsls	r3, r3, #3
 800f690:	60fb      	str	r3, [r7, #12]
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
 800f692:	68f8      	ldr	r0, [r7, #12]
 800f694:	f7ff ffde 	bl	800f654 <metal_allocate_memory>
 800f698:	60b8      	str	r0, [r7, #8]

	if (vqs) {
 800f69a:	68bb      	ldr	r3, [r7, #8]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d004      	beq.n	800f6aa <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
 800f6a0:	68fa      	ldr	r2, [r7, #12]
 800f6a2:	2100      	movs	r1, #0
 800f6a4:	68b8      	ldr	r0, [r7, #8]
 800f6a6:	f002 fcd9 	bl	801205c <memset>
	}

	return vqs;
 800f6aa:	68bb      	ldr	r3, [r7, #8]
}
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	3710      	adds	r7, #16
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	bd80      	pop	{r7, pc}

0800f6b4 <rproc_virtio_virtqueue_notify>:
#include <openamp/virtqueue.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b086      	sub	sp, #24
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	891b      	ldrh	r3, [r3, #8]
 800f6c0:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 800f6c8:	693b      	ldr	r3, [r7, #16]
 800f6ca:	3b18      	subs	r3, #24
 800f6cc:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id <= vdev->vrings_num);
 800f6ce:	693b      	ldr	r3, [r7, #16]
 800f6d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6d2:	697a      	ldr	r2, [r7, #20]
 800f6d4:	429a      	cmp	r2, r3
 800f6d6:	d905      	bls.n	800f6e4 <rproc_virtio_virtqueue_notify+0x30>
 800f6d8:	4b0d      	ldr	r3, [pc, #52]	; (800f710 <rproc_virtio_virtqueue_notify+0x5c>)
 800f6da:	4a0e      	ldr	r2, [pc, #56]	; (800f714 <rproc_virtio_virtqueue_notify+0x60>)
 800f6dc:	2133      	movs	r1, #51	; 0x33
 800f6de:	480e      	ldr	r0, [pc, #56]	; (800f718 <rproc_virtio_virtqueue_notify+0x64>)
 800f6e0:	f002 fc2a 	bl	8011f38 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 800f6e4:	693b      	ldr	r3, [r7, #16]
 800f6e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f6e8:	697a      	ldr	r2, [r7, #20]
 800f6ea:	4613      	mov	r3, r2
 800f6ec:	005b      	lsls	r3, r3, #1
 800f6ee:	4413      	add	r3, r2
 800f6f0:	00db      	lsls	r3, r3, #3
 800f6f2:	440b      	add	r3, r1
 800f6f4:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	691b      	ldr	r3, [r3, #16]
 800f6fa:	68fa      	ldr	r2, [r7, #12]
 800f6fc:	6810      	ldr	r0, [r2, #0]
 800f6fe:	68ba      	ldr	r2, [r7, #8]
 800f700:	6912      	ldr	r2, [r2, #16]
 800f702:	4611      	mov	r1, r2
 800f704:	4798      	blx	r3
}
 800f706:	bf00      	nop
 800f708:	3718      	adds	r7, #24
 800f70a:	46bd      	mov	sp, r7
 800f70c:	bd80      	pop	{r7, pc}
 800f70e:	bf00      	nop
 800f710:	08016bc0 	.word	0x08016bc0
 800f714:	08063208 	.word	0x08063208
 800f718:	08016bdc 	.word	0x08016bdc

0800f71c <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b086      	sub	sp, #24
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	3b18      	subs	r3, #24
 800f728:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 800f72a:	697b      	ldr	r3, [r7, #20]
 800f72c:	689b      	ldr	r3, [r3, #8]
 800f72e:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 800f730:	697b      	ldr	r3, [r7, #20]
 800f732:	68db      	ldr	r3, [r3, #12]
 800f734:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
 800f736:	693b      	ldr	r3, [r7, #16]
 800f738:	3318      	adds	r3, #24
 800f73a:	4619      	mov	r1, r3
 800f73c:	68f8      	ldr	r0, [r7, #12]
 800f73e:	f7ff fe7b 	bl	800f438 <metal_io_virt_to_offset>
 800f742:	4601      	mov	r1, r0
 800f744:	2301      	movs	r3, #1
 800f746:	2205      	movs	r2, #5
 800f748:	68f8      	ldr	r0, [r7, #12]
 800f74a:	f7ff fe8f 	bl	800f46c <metal_io_read>
 800f74e:	4602      	mov	r2, r0
 800f750:	460b      	mov	r3, r1
 800f752:	4613      	mov	r3, r2
 800f754:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 800f756:	7afb      	ldrb	r3, [r7, #11]
}
 800f758:	4618      	mov	r0, r3
 800f75a:	3718      	adds	r7, #24
 800f75c:	46bd      	mov	sp, r7
 800f75e:	bd80      	pop	{r7, pc}

0800f760 <rproc_virtio_set_status>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_status(struct virtio_device *vdev,
				    unsigned char status)
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b088      	sub	sp, #32
 800f764:	af02      	add	r7, sp, #8
 800f766:	6078      	str	r0, [r7, #4]
 800f768:	460b      	mov	r3, r1
 800f76a:	70fb      	strb	r3, [r7, #3]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	3b18      	subs	r3, #24
 800f770:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 800f772:	697b      	ldr	r3, [r7, #20]
 800f774:	689b      	ldr	r3, [r3, #8]
 800f776:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 800f778:	697b      	ldr	r3, [r7, #20]
 800f77a:	68db      	ldr	r3, [r3, #12]
 800f77c:	60fb      	str	r3, [r7, #12]
	metal_io_write8(io,
 800f77e:	693b      	ldr	r3, [r7, #16]
 800f780:	3318      	adds	r3, #24
 800f782:	4619      	mov	r1, r3
 800f784:	68f8      	ldr	r0, [r7, #12]
 800f786:	f7ff fe57 	bl	800f438 <metal_io_virt_to_offset>
 800f78a:	4601      	mov	r1, r0
 800f78c:	78fa      	ldrb	r2, [r7, #3]
 800f78e:	f04f 0300 	mov.w	r3, #0
 800f792:	2001      	movs	r0, #1
 800f794:	9001      	str	r0, [sp, #4]
 800f796:	2005      	movs	r0, #5
 800f798:	9000      	str	r0, [sp, #0]
 800f79a:	68f8      	ldr	r0, [r7, #12]
 800f79c:	f7ff fee4 	bl	800f568 <metal_io_write>
			metal_io_virt_to_offset(io, &vdev_rsc->status),
			status);
	rpvdev->notify(rpvdev->priv, vdev->index);
 800f7a0:	697b      	ldr	r3, [r7, #20]
 800f7a2:	691b      	ldr	r3, [r3, #16]
 800f7a4:	697a      	ldr	r2, [r7, #20]
 800f7a6:	6810      	ldr	r0, [r2, #0]
 800f7a8:	687a      	ldr	r2, [r7, #4]
 800f7aa:	6812      	ldr	r2, [r2, #0]
 800f7ac:	4611      	mov	r1, r2
 800f7ae:	4798      	blx	r3
}
 800f7b0:	bf00      	nop
 800f7b2:	3718      	adds	r7, #24
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	bd80      	pop	{r7, pc}

0800f7b8 <rproc_virtio_get_features>:
#endif

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	b086      	sub	sp, #24
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	3b18      	subs	r3, #24
 800f7c4:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 800f7c6:	697b      	ldr	r3, [r7, #20]
 800f7c8:	689b      	ldr	r3, [r3, #8]
 800f7ca:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 800f7cc:	697b      	ldr	r3, [r7, #20]
 800f7ce:	68db      	ldr	r3, [r3, #12]
 800f7d0:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we get features based on the role ? */
	features = metal_io_read32(io,
 800f7d2:	693b      	ldr	r3, [r7, #16]
 800f7d4:	330c      	adds	r3, #12
 800f7d6:	4619      	mov	r1, r3
 800f7d8:	68f8      	ldr	r0, [r7, #12]
 800f7da:	f7ff fe2d 	bl	800f438 <metal_io_virt_to_offset>
 800f7de:	4601      	mov	r1, r0
 800f7e0:	2304      	movs	r3, #4
 800f7e2:	2205      	movs	r2, #5
 800f7e4:	68f8      	ldr	r0, [r7, #12]
 800f7e6:	f7ff fe41 	bl	800f46c <metal_io_read>
 800f7ea:	4602      	mov	r2, r0
 800f7ec:	460b      	mov	r3, r1
 800f7ee:	4613      	mov	r3, r2
 800f7f0:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 800f7f2:	68bb      	ldr	r3, [r7, #8]
}
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	3718      	adds	r7, #24
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	bd80      	pop	{r7, pc}

0800f7fc <rproc_virtio_set_features>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_features(struct virtio_device *vdev,
				      uint32_t features)
{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b088      	sub	sp, #32
 800f800:	af02      	add	r7, sp, #8
 800f802:	6078      	str	r0, [r7, #4]
 800f804:	6039      	str	r1, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	3b18      	subs	r3, #24
 800f80a:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 800f80c:	697b      	ldr	r3, [r7, #20]
 800f80e:	689b      	ldr	r3, [r3, #8]
 800f810:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 800f812:	697b      	ldr	r3, [r7, #20]
 800f814:	68db      	ldr	r3, [r3, #12]
 800f816:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we set features based on the role ? */
	metal_io_write32(io,
 800f818:	693b      	ldr	r3, [r7, #16]
 800f81a:	330c      	adds	r3, #12
 800f81c:	4619      	mov	r1, r3
 800f81e:	68f8      	ldr	r0, [r7, #12]
 800f820:	f7ff fe0a 	bl	800f438 <metal_io_virt_to_offset>
 800f824:	4601      	mov	r1, r0
 800f826:	683b      	ldr	r3, [r7, #0]
 800f828:	461a      	mov	r2, r3
 800f82a:	f04f 0300 	mov.w	r3, #0
 800f82e:	2004      	movs	r0, #4
 800f830:	9001      	str	r0, [sp, #4]
 800f832:	2005      	movs	r0, #5
 800f834:	9000      	str	r0, [sp, #0]
 800f836:	68f8      	ldr	r0, [r7, #12]
 800f838:	f7ff fe96 	bl	800f568 <metal_io_write>
			 metal_io_virt_to_offset(io, &vdev_rsc->dfeatures),
			 features);
	rpvdev->notify(rpvdev->priv, vdev->index);
 800f83c:	697b      	ldr	r3, [r7, #20]
 800f83e:	691b      	ldr	r3, [r3, #16]
 800f840:	697a      	ldr	r2, [r7, #20]
 800f842:	6810      	ldr	r0, [r2, #0]
 800f844:	687a      	ldr	r2, [r7, #4]
 800f846:	6812      	ldr	r2, [r2, #0]
 800f848:	4611      	mov	r1, r2
 800f84a:	4798      	blx	r3
}
 800f84c:	bf00      	nop
 800f84e:	3718      	adds	r7, #24
 800f850:	46bd      	mov	sp, r7
 800f852:	bd80      	pop	{r7, pc}

0800f854 <rproc_virtio_negotiate_features>:
#endif

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 800f854:	b480      	push	{r7}
 800f856:	b083      	sub	sp, #12
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
 800f85c:	6039      	str	r1, [r7, #0]
	(void)vdev;
	(void)features;

	return 0;
 800f85e:	2300      	movs	r3, #0
}
 800f860:	4618      	mov	r0, r3
 800f862:	370c      	adds	r7, #12
 800f864:	46bd      	mov	sp, r7
 800f866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86a:	4770      	bx	lr

0800f86c <rproc_virtio_read_config>:

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 800f86c:	b480      	push	{r7}
 800f86e:	b085      	sub	sp, #20
 800f870:	af00      	add	r7, sp, #0
 800f872:	60f8      	str	r0, [r7, #12]
 800f874:	60b9      	str	r1, [r7, #8]
 800f876:	607a      	str	r2, [r7, #4]
 800f878:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 800f87a:	bf00      	nop
 800f87c:	3714      	adds	r7, #20
 800f87e:	46bd      	mov	sp, r7
 800f880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f884:	4770      	bx	lr

0800f886 <rproc_virtio_write_config>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_write_config(struct virtio_device *vdev,
				      uint32_t offset, void *src, int length)
{
 800f886:	b480      	push	{r7}
 800f888:	b085      	sub	sp, #20
 800f88a:	af00      	add	r7, sp, #0
 800f88c:	60f8      	str	r0, [r7, #12]
 800f88e:	60b9      	str	r1, [r7, #8]
 800f890:	607a      	str	r2, [r7, #4]
 800f892:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)src;
	(void)length;
}
 800f894:	bf00      	nop
 800f896:	3714      	adds	r7, #20
 800f898:	46bd      	mov	sp, r7
 800f89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f89e:	4770      	bx	lr

0800f8a0 <rproc_virtio_reset_device>:

static void rproc_virtio_reset_device(struct virtio_device *vdev)
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b082      	sub	sp, #8
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
	if (vdev->role == VIRTIO_DEV_MASTER)
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	699b      	ldr	r3, [r3, #24]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d103      	bne.n	800f8b8 <rproc_virtio_reset_device+0x18>
		rproc_virtio_set_status(vdev,
 800f8b0:	2140      	movs	r1, #64	; 0x40
 800f8b2:	6878      	ldr	r0, [r7, #4]
 800f8b4:	f7ff ff54 	bl	800f760 <rproc_virtio_set_status>
					VIRTIO_CONFIG_STATUS_NEEDS_RESET);
}
 800f8b8:	bf00      	nop
 800f8ba:	3708      	adds	r7, #8
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	bd80      	pop	{r7, pc}

0800f8c0 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b08e      	sub	sp, #56	; 0x38
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	60f8      	str	r0, [r7, #12]
 800f8c8:	60b9      	str	r1, [r7, #8]
 800f8ca:	607a      	str	r2, [r7, #4]
 800f8cc:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 800f8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8d4:	7e5b      	ldrb	r3, [r3, #25]
 800f8d6:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 800f8d8:	2050      	movs	r0, #80	; 0x50
 800f8da:	f7ff febb 	bl	800f654 <metal_allocate_memory>
 800f8de:	6278      	str	r0, [r7, #36]	; 0x24
	if (!rpvdev)
 800f8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d101      	bne.n	800f8ea <rproc_virtio_create_vdev+0x2a>
		return NULL;
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	e092      	b.n	800fa10 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 800f8ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f8ec:	4613      	mov	r3, r2
 800f8ee:	005b      	lsls	r3, r3, #1
 800f8f0:	4413      	add	r3, r2
 800f8f2:	00db      	lsls	r3, r3, #3
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	f7ff fead 	bl	800f654 <metal_allocate_memory>
 800f8fa:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
 800f8fc:	6a3b      	ldr	r3, [r7, #32]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	f000 8081 	beq.w	800fa06 <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 800f904:	2250      	movs	r2, #80	; 0x50
 800f906:	2100      	movs	r1, #0
 800f908:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f90a:	f002 fba7 	bl	801205c <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 800f90e:	2218      	movs	r2, #24
 800f910:	2100      	movs	r1, #0
 800f912:	6a38      	ldr	r0, [r7, #32]
 800f914:	f002 fba2 	bl	801205c <memset>
	vdev = &rpvdev->vdev;
 800f918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f91a:	3318      	adds	r3, #24
 800f91c:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
 800f91e:	2300      	movs	r3, #0
 800f920:	637b      	str	r3, [r7, #52]	; 0x34
 800f922:	e025      	b.n	800f970 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 800f924:	2300      	movs	r3, #0
 800f926:	633b      	str	r3, [r7, #48]	; 0x30

		vring_rsc = &vdev_rsc->vring[i];
 800f928:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f92a:	4613      	mov	r3, r2
 800f92c:	009b      	lsls	r3, r3, #2
 800f92e:	4413      	add	r3, r2
 800f930:	009b      	lsls	r3, r3, #2
 800f932:	3318      	adds	r3, #24
 800f934:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f936:	4413      	add	r3, r2
 800f938:	3304      	adds	r3, #4
 800f93a:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d102      	bne.n	800f948 <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
 800f942:	69bb      	ldr	r3, [r7, #24]
 800f944:	689b      	ldr	r3, [r3, #8]
 800f946:	633b      	str	r3, [r7, #48]	; 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
 800f948:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f94a:	f7ff fe9a 	bl	800f682 <virtqueue_allocate>
 800f94e:	6178      	str	r0, [r7, #20]
		if (!vq)
 800f950:	697b      	ldr	r3, [r7, #20]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d031      	beq.n	800f9ba <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
 800f956:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f958:	4613      	mov	r3, r2
 800f95a:	005b      	lsls	r3, r3, #1
 800f95c:	4413      	add	r3, r2
 800f95e:	00db      	lsls	r3, r3, #3
 800f960:	461a      	mov	r2, r3
 800f962:	6a3b      	ldr	r3, [r7, #32]
 800f964:	4413      	add	r3, r2
 800f966:	697a      	ldr	r2, [r7, #20]
 800f968:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
 800f96a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f96c:	3301      	adds	r3, #1
 800f96e:	637b      	str	r3, [r7, #52]	; 0x34
 800f970:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f974:	429a      	cmp	r2, r3
 800f976:	d3d5      	bcc.n	800f924 <rproc_virtio_create_vdev+0x64>
	}

	/* FIXME commended as seems not nedded, already stored in vdev */
	//rpvdev->notifyid = notifyid;
	rpvdev->notify = notify;
 800f978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f97a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f97c:	611a      	str	r2, [r3, #16]
	rpvdev->priv = priv;
 800f97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f980:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f982:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
 800f984:	69fb      	ldr	r3, [r7, #28]
 800f986:	6a3a      	ldr	r2, [r7, #32]
 800f988:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 800f98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f98c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f98e:	609a      	str	r2, [r3, #8]
	rpvdev->vdev_rsc_io = rsc_io;
 800f990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f992:	683a      	ldr	r2, [r7, #0]
 800f994:	60da      	str	r2, [r3, #12]

	vdev->index = notifyid;
 800f996:	69fb      	ldr	r3, [r7, #28]
 800f998:	68ba      	ldr	r2, [r7, #8]
 800f99a:	601a      	str	r2, [r3, #0]
	vdev->role = role;
 800f99c:	69fb      	ldr	r3, [r7, #28]
 800f99e:	68fa      	ldr	r2, [r7, #12]
 800f9a0:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
 800f9a2:	69fb      	ldr	r3, [r7, #28]
 800f9a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f9a6:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
 800f9a8:	69fb      	ldr	r3, [r7, #28]
 800f9aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f9ac:	629a      	str	r2, [r3, #40]	; 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 800f9ae:	69fb      	ldr	r3, [r7, #28]
 800f9b0:	4a19      	ldr	r2, [pc, #100]	; (800fa18 <rproc_virtio_create_vdev+0x158>)
 800f9b2:	621a      	str	r2, [r3, #32]
	/* TODO: Shall we set features here ? */

	return &rpvdev->vdev;
 800f9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9b6:	3318      	adds	r3, #24
 800f9b8:	e02a      	b.n	800fa10 <rproc_virtio_create_vdev+0x150>
			goto err1;
 800f9ba:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
 800f9bc:	2300      	movs	r3, #0
 800f9be:	637b      	str	r3, [r7, #52]	; 0x34
 800f9c0:	e019      	b.n	800f9f6 <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
 800f9c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f9c4:	4613      	mov	r3, r2
 800f9c6:	005b      	lsls	r3, r3, #1
 800f9c8:	4413      	add	r3, r2
 800f9ca:	00db      	lsls	r3, r3, #3
 800f9cc:	461a      	mov	r2, r3
 800f9ce:	6a3b      	ldr	r3, [r7, #32]
 800f9d0:	4413      	add	r3, r2
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d00b      	beq.n	800f9f0 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
 800f9d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f9da:	4613      	mov	r3, r2
 800f9dc:	005b      	lsls	r3, r3, #1
 800f9de:	4413      	add	r3, r2
 800f9e0:	00db      	lsls	r3, r3, #3
 800f9e2:	461a      	mov	r2, r3
 800f9e4:	6a3b      	ldr	r3, [r7, #32]
 800f9e6:	4413      	add	r3, r2
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	f7ff fe3e 	bl	800f66c <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
 800f9f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9f2:	3301      	adds	r3, #1
 800f9f4:	637b      	str	r3, [r7, #52]	; 0x34
 800f9f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9fa:	429a      	cmp	r2, r3
 800f9fc:	d3e1      	bcc.n	800f9c2 <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
 800f9fe:	6a38      	ldr	r0, [r7, #32]
 800fa00:	f7ff fe34 	bl	800f66c <metal_free_memory>
 800fa04:	e000      	b.n	800fa08 <rproc_virtio_create_vdev+0x148>
		goto err0;
 800fa06:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
 800fa08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fa0a:	f7ff fe2f 	bl	800f66c <metal_free_memory>
	return NULL;
 800fa0e:	2300      	movs	r3, #0
}
 800fa10:	4618      	mov	r0, r3
 800fa12:	3738      	adds	r7, #56	; 0x38
 800fa14:	46bd      	mov	sp, r7
 800fa16:	bd80      	pop	{r7, pc}
 800fa18:	080631e4 	.word	0x080631e4

0800fa1c <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 800fa1c:	b480      	push	{r7}
 800fa1e:	b087      	sub	sp, #28
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	60f8      	str	r0, [r7, #12]
 800fa24:	60b9      	str	r1, [r7, #8]
 800fa26:	607a      	str	r2, [r7, #4]
 800fa28:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa2e:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
 800fa30:	68ba      	ldr	r2, [r7, #8]
 800fa32:	697b      	ldr	r3, [r7, #20]
 800fa34:	429a      	cmp	r2, r3
 800fa36:	d302      	bcc.n	800fa3e <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
 800fa38:	f06f 0301 	mvn.w	r3, #1
 800fa3c:	e019      	b.n	800fa72 <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800fa42:	68ba      	ldr	r2, [r7, #8]
 800fa44:	4613      	mov	r3, r2
 800fa46:	005b      	lsls	r3, r3, #1
 800fa48:	4413      	add	r3, r2
 800fa4a:	00db      	lsls	r3, r3, #3
 800fa4c:	440b      	add	r3, r1
 800fa4e:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
 800fa50:	693b      	ldr	r3, [r7, #16]
 800fa52:	6a3a      	ldr	r2, [r7, #32]
 800fa54:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
 800fa56:	693b      	ldr	r3, [r7, #16]
 800fa58:	687a      	ldr	r2, [r7, #4]
 800fa5a:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
 800fa5c:	693b      	ldr	r3, [r7, #16]
 800fa5e:	683a      	ldr	r2, [r7, #0]
 800fa60:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
 800fa62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa64:	b29a      	uxth	r2, r3
 800fa66:	693b      	ldr	r3, [r7, #16]
 800fa68:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
 800fa6a:	693b      	ldr	r3, [r7, #16]
 800fa6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fa6e:	609a      	str	r2, [r3, #8]

	return 0;
 800fa70:	2300      	movs	r3, #0
}
 800fa72:	4618      	mov	r0, r3
 800fa74:	371c      	adds	r7, #28
 800fa76:	46bd      	mov	sp, r7
 800fa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7c:	4770      	bx	lr

0800fa7e <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 800fa7e:	b580      	push	{r7, lr}
 800fa80:	b086      	sub	sp, #24
 800fa82:	af00      	add	r7, sp, #0
 800fa84:	6078      	str	r0, [r7, #4]
 800fa86:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d102      	bne.n	800fa94 <rproc_virtio_notified+0x16>
		return -EINVAL;
 800fa8e:	f06f 0315 	mvn.w	r3, #21
 800fa92:	e02c      	b.n	800faee <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->index == notifyid)
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	683a      	ldr	r2, [r7, #0]
 800fa9a:	429a      	cmp	r2, r3
 800fa9c:	d101      	bne.n	800faa2 <rproc_virtio_notified+0x24>
		return 0;
 800fa9e:	2300      	movs	r3, #0
 800faa0:	e025      	b.n	800faee <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800faa6:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
 800faa8:	2300      	movs	r3, #0
 800faaa:	617b      	str	r3, [r7, #20]
 800faac:	e01a      	b.n	800fae4 <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800fab2:	697a      	ldr	r2, [r7, #20]
 800fab4:	4613      	mov	r3, r2
 800fab6:	005b      	lsls	r3, r3, #1
 800fab8:	4413      	add	r3, r2
 800faba:	00db      	lsls	r3, r3, #3
 800fabc:	440b      	add	r3, r1
 800fabe:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	691b      	ldr	r3, [r3, #16]
 800fac4:	683a      	ldr	r2, [r7, #0]
 800fac6:	429a      	cmp	r2, r3
 800fac8:	d003      	beq.n	800fad2 <rproc_virtio_notified+0x54>
 800faca:	683b      	ldr	r3, [r7, #0]
 800facc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fad0:	d105      	bne.n	800fade <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
 800fad8:	68b8      	ldr	r0, [r7, #8]
 800fada:	f001 fb58 	bl	801118e <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
 800fade:	697b      	ldr	r3, [r7, #20]
 800fae0:	3301      	adds	r3, #1
 800fae2:	617b      	str	r3, [r7, #20]
 800fae4:	697a      	ldr	r2, [r7, #20]
 800fae6:	693b      	ldr	r3, [r7, #16]
 800fae8:	429a      	cmp	r2, r3
 800faea:	d3e0      	bcc.n	800faae <rproc_virtio_notified+0x30>
		}
	}
	return 0;
 800faec:	2300      	movs	r3, #0
}
 800faee:	4618      	mov	r0, r3
 800faf0:	3718      	adds	r7, #24
 800faf2:	46bd      	mov	sp, r7
 800faf4:	bd80      	pop	{r7, pc}

0800faf6 <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 800faf6:	b580      	push	{r7, lr}
 800faf8:	b084      	sub	sp, #16
 800fafa:	af00      	add	r7, sp, #0
 800fafc:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	699b      	ldr	r3, [r3, #24]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d00a      	beq.n	800fb1c <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 800fb06:	6878      	ldr	r0, [r7, #4]
 800fb08:	f7ff fe08 	bl	800f71c <rproc_virtio_get_status>
 800fb0c:	4603      	mov	r3, r0
 800fb0e:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 800fb10:	7bfb      	ldrb	r3, [r7, #15]
 800fb12:	f003 0304 	and.w	r3, r3, #4
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d102      	bne.n	800fb20 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
 800fb1a:	e7f4      	b.n	800fb06 <rproc_virtio_wait_remote_ready+0x10>
		return;
 800fb1c:	bf00      	nop
 800fb1e:	e000      	b.n	800fb22 <rproc_virtio_wait_remote_ready+0x2c>
			return;
 800fb20:	bf00      	nop
	}
}
 800fb22:	3710      	adds	r7, #16
 800fb24:	46bd      	mov	sp, r7
 800fb26:	bd80      	pop	{r7, pc}

0800fb28 <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->w);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 800fb28:	b480      	push	{r7}
 800fb2a:	b083      	sub	sp, #12
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 800fb30:	bf00      	nop
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	2201      	movs	r2, #1
 800fb36:	4611      	mov	r1, r2
 800fb38:	f3bf 8f5b 	dmb	ish
 800fb3c:	e8d3 2f4f 	ldrexb	r2, [r3]
 800fb40:	e8c3 1f40 	strexb	r0, r1, [r3]
 800fb44:	2800      	cmp	r0, #0
 800fb46:	d1f9      	bne.n	800fb3c <__metal_mutex_acquire+0x14>
 800fb48:	f3bf 8f5b 	dmb	ish
 800fb4c:	b2d3      	uxtb	r3, r2
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d1ef      	bne.n	800fb32 <__metal_mutex_acquire+0xa>
		;
	}
}
 800fb52:	bf00      	nop
 800fb54:	bf00      	nop
 800fb56:	370c      	adds	r7, #12
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5e:	4770      	bx	lr

0800fb60 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 800fb60:	b480      	push	{r7}
 800fb62:	b083      	sub	sp, #12
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	f3bf 8f5b 	dmb	ish
 800fb6e:	2200      	movs	r2, #0
 800fb70:	701a      	strb	r2, [r3, #0]
 800fb72:	f3bf 8f5b 	dmb	ish
}
 800fb76:	bf00      	nop
 800fb78:	370c      	adds	r7, #12
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb80:	4770      	bx	lr

0800fb82 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 800fb82:	b580      	push	{r7, lr}
 800fb84:	b082      	sub	sp, #8
 800fb86:	af00      	add	r7, sp, #0
 800fb88:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 800fb8a:	6878      	ldr	r0, [r7, #4]
 800fb8c:	f7ff ffcc 	bl	800fb28 <__metal_mutex_acquire>
}
 800fb90:	bf00      	nop
 800fb92:	3708      	adds	r7, #8
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd80      	pop	{r7, pc}

0800fb98 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b082      	sub	sp, #8
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 800fba0:	6878      	ldr	r0, [r7, #4]
 800fba2:	f7ff ffdd 	bl	800fb60 <__metal_mutex_release>
}
 800fba6:	bf00      	nop
 800fba8:	3708      	adds	r7, #8
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	bd80      	pop	{r7, pc}

0800fbae <metal_list_add_before>:
{
 800fbae:	b480      	push	{r7}
 800fbb0:	b083      	sub	sp, #12
 800fbb2:	af00      	add	r7, sp, #0
 800fbb4:	6078      	str	r0, [r7, #4]
 800fbb6:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	685a      	ldr	r2, [r3, #4]
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 800fbc0:	683b      	ldr	r3, [r7, #0]
 800fbc2:	687a      	ldr	r2, [r7, #4]
 800fbc4:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 800fbc6:	683b      	ldr	r3, [r7, #0]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	683a      	ldr	r2, [r7, #0]
 800fbcc:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	685b      	ldr	r3, [r3, #4]
 800fbd2:	683a      	ldr	r2, [r7, #0]
 800fbd4:	601a      	str	r2, [r3, #0]
}
 800fbd6:	bf00      	nop
 800fbd8:	370c      	adds	r7, #12
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe0:	4770      	bx	lr

0800fbe2 <metal_list_add_tail>:
{
 800fbe2:	b580      	push	{r7, lr}
 800fbe4:	b082      	sub	sp, #8
 800fbe6:	af00      	add	r7, sp, #0
 800fbe8:	6078      	str	r0, [r7, #4]
 800fbea:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 800fbec:	6839      	ldr	r1, [r7, #0]
 800fbee:	6878      	ldr	r0, [r7, #4]
 800fbf0:	f7ff ffdd 	bl	800fbae <metal_list_add_before>
}
 800fbf4:	bf00      	nop
 800fbf6:	3708      	adds	r7, #8
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	bd80      	pop	{r7, pc}

0800fbfc <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 800fbfc:	b480      	push	{r7}
 800fbfe:	b083      	sub	sp, #12
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	687a      	ldr	r2, [r7, #4]
 800fc0a:	6852      	ldr	r2, [r2, #4]
 800fc0c:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	685b      	ldr	r3, [r3, #4]
 800fc12:	687a      	ldr	r2, [r7, #4]
 800fc14:	6812      	ldr	r2, [r2, #0]
 800fc16:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	687a      	ldr	r2, [r7, #4]
 800fc1c:	605a      	str	r2, [r3, #4]
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	685a      	ldr	r2, [r3, #4]
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	601a      	str	r2, [r3, #0]
}
 800fc26:	bf00      	nop
 800fc28:	370c      	adds	r7, #12
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc30:	4770      	bx	lr

0800fc32 <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 800fc32:	b480      	push	{r7}
 800fc34:	b083      	sub	sp, #12
 800fc36:	af00      	add	r7, sp, #0
 800fc38:	6078      	str	r0, [r7, #4]
 800fc3a:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 800fc3c:	683b      	ldr	r3, [r7, #0]
 800fc3e:	095b      	lsrs	r3, r3, #5
 800fc40:	009a      	lsls	r2, r3, #2
 800fc42:	6879      	ldr	r1, [r7, #4]
 800fc44:	440a      	add	r2, r1
 800fc46:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 800fc48:	683a      	ldr	r2, [r7, #0]
 800fc4a:	f002 021f 	and.w	r2, r2, #31
 800fc4e:	2001      	movs	r0, #1
 800fc50:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 800fc54:	009b      	lsls	r3, r3, #2
 800fc56:	6878      	ldr	r0, [r7, #4]
 800fc58:	4403      	add	r3, r0
 800fc5a:	430a      	orrs	r2, r1
 800fc5c:	601a      	str	r2, [r3, #0]
}
 800fc5e:	bf00      	nop
 800fc60:	370c      	adds	r7, #12
 800fc62:	46bd      	mov	sp, r7
 800fc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc68:	4770      	bx	lr

0800fc6a <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 800fc6a:	b480      	push	{r7}
 800fc6c:	b083      	sub	sp, #12
 800fc6e:	af00      	add	r7, sp, #0
 800fc70:	6078      	str	r0, [r7, #4]
 800fc72:	6039      	str	r1, [r7, #0]
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 800fc74:	683b      	ldr	r3, [r7, #0]
 800fc76:	095b      	lsrs	r3, r3, #5
 800fc78:	009b      	lsls	r3, r3, #2
 800fc7a:	687a      	ldr	r2, [r7, #4]
 800fc7c:	4413      	add	r3, r2
 800fc7e:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 800fc80:	683b      	ldr	r3, [r7, #0]
 800fc82:	f003 031f 	and.w	r3, r3, #31
 800fc86:	2101      	movs	r1, #1
 800fc88:	fa01 f303 	lsl.w	r3, r1, r3
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 800fc8c:	4013      	ands	r3, r2
}
 800fc8e:	4618      	mov	r0, r3
 800fc90:	370c      	adds	r7, #12
 800fc92:	46bd      	mov	sp, r7
 800fc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc98:	4770      	bx	lr

0800fc9a <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 800fc9a:	b480      	push	{r7}
 800fc9c:	b083      	sub	sp, #12
 800fc9e:	af00      	add	r7, sp, #0
 800fca0:	6078      	str	r0, [r7, #4]
 800fca2:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 800fca4:	683b      	ldr	r3, [r7, #0]
 800fca6:	095b      	lsrs	r3, r3, #5
 800fca8:	009a      	lsls	r2, r3, #2
 800fcaa:	6879      	ldr	r1, [r7, #4]
 800fcac:	440a      	add	r2, r1
 800fcae:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 800fcb0:	683a      	ldr	r2, [r7, #0]
 800fcb2:	f002 021f 	and.w	r2, r2, #31
 800fcb6:	2001      	movs	r0, #1
 800fcb8:	fa00 f202 	lsl.w	r2, r0, r2
 800fcbc:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 800fcbe:	009b      	lsls	r3, r3, #2
 800fcc0:	6878      	ldr	r0, [r7, #4]
 800fcc2:	4403      	add	r3, r0
 800fcc4:	400a      	ands	r2, r1
 800fcc6:	601a      	str	r2, [r3, #0]
}
 800fcc8:	bf00      	nop
 800fcca:	370c      	adds	r7, #12
 800fccc:	46bd      	mov	sp, r7
 800fcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd2:	4770      	bx	lr

0800fcd4 <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b082      	sub	sp, #8
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
 800fcdc:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
 800fcde:	6839      	ldr	r1, [r7, #0]
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f7ff ffc2 	bl	800fc6a <metal_bitmap_is_bit_set>
 800fce6:	4603      	mov	r3, r0
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	bf0c      	ite	eq
 800fcec:	2301      	moveq	r3, #1
 800fcee:	2300      	movne	r3, #0
 800fcf0:	b2db      	uxtb	r3, r3
}
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	3708      	adds	r7, #8
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	bd80      	pop	{r7, pc}

0800fcfa <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 800fcfa:	b580      	push	{r7, lr}
 800fcfc:	b086      	sub	sp, #24
 800fcfe:	af00      	add	r7, sp, #0
 800fd00:	60f8      	str	r0, [r7, #12]
 800fd02:	60b9      	str	r1, [r7, #8]
 800fd04:	607a      	str	r2, [r7, #4]
	unsigned int bit;
	for (bit = start;
 800fd06:	68bb      	ldr	r3, [r7, #8]
 800fd08:	617b      	str	r3, [r7, #20]
 800fd0a:	e002      	b.n	800fd12 <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 800fd0c:	697b      	ldr	r3, [r7, #20]
 800fd0e:	3301      	adds	r3, #1
 800fd10:	617b      	str	r3, [r7, #20]
	for (bit = start;
 800fd12:	697a      	ldr	r2, [r7, #20]
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	429a      	cmp	r2, r3
 800fd18:	d207      	bcs.n	800fd2a <metal_bitmap_next_clear_bit+0x30>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 800fd1a:	697b      	ldr	r3, [r7, #20]
 800fd1c:	4619      	mov	r1, r3
 800fd1e:	68f8      	ldr	r0, [r7, #12]
 800fd20:	f7ff ffd8 	bl	800fcd4 <metal_bitmap_is_bit_clear>
 800fd24:	4603      	mov	r3, r0
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d0f0      	beq.n	800fd0c <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
 800fd2a:	697b      	ldr	r3, [r7, #20]
}
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	3718      	adds	r7, #24
 800fd30:	46bd      	mov	sp, r7
 800fd32:	bd80      	pop	{r7, pc}

0800fd34 <rpmsg_init_ept>:
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b084      	sub	sp, #16
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	60f8      	str	r0, [r7, #12]
 800fd3c:	60b9      	str	r1, [r7, #8]
 800fd3e:	607a      	str	r2, [r7, #4]
 800fd40:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	2220      	movs	r2, #32
 800fd46:	68b9      	ldr	r1, [r7, #8]
 800fd48:	4618      	mov	r0, r3
 800fd4a:	f003 fab1 	bl	80132b0 <strncpy>
	ept->addr = src;
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	687a      	ldr	r2, [r7, #4]
 800fd52:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	683a      	ldr	r2, [r7, #0]
 800fd58:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	69ba      	ldr	r2, [r7, #24]
 800fd5e:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	69fa      	ldr	r2, [r7, #28]
 800fd64:	631a      	str	r2, [r3, #48]	; 0x30
}
 800fd66:	bf00      	nop
 800fd68:	3710      	adds	r7, #16
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	bd80      	pop	{r7, pc}

0800fd6e <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 800fd6e:	b580      	push	{r7, lr}
 800fd70:	b084      	sub	sp, #16
 800fd72:	af00      	add	r7, sp, #0
 800fd74:	6078      	str	r0, [r7, #4]
 800fd76:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
 800fd78:	f04f 33ff 	mov.w	r3, #4294967295
 800fd7c:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 800fd7e:	683b      	ldr	r3, [r7, #0]
 800fd80:	461a      	mov	r2, r3
 800fd82:	2100      	movs	r1, #0
 800fd84:	6878      	ldr	r0, [r7, #4]
 800fd86:	f7ff ffb8 	bl	800fcfa <metal_bitmap_next_clear_bit>
 800fd8a:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
 800fd8c:	683b      	ldr	r3, [r7, #0]
 800fd8e:	68ba      	ldr	r2, [r7, #8]
 800fd90:	429a      	cmp	r2, r3
 800fd92:	d206      	bcs.n	800fda2 <rpmsg_get_address+0x34>
		addr = nextbit;
 800fd94:	68bb      	ldr	r3, [r7, #8]
 800fd96:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
 800fd98:	68bb      	ldr	r3, [r7, #8]
 800fd9a:	4619      	mov	r1, r3
 800fd9c:	6878      	ldr	r0, [r7, #4]
 800fd9e:	f7ff ff48 	bl	800fc32 <metal_bitmap_set_bit>
	}

	return addr;
 800fda2:	68fb      	ldr	r3, [r7, #12]
}
 800fda4:	4618      	mov	r0, r3
 800fda6:	3710      	adds	r7, #16
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	bd80      	pop	{r7, pc}

0800fdac <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b084      	sub	sp, #16
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	60f8      	str	r0, [r7, #12]
 800fdb4:	60b9      	str	r1, [r7, #8]
 800fdb6:	607a      	str	r2, [r7, #4]
	if (addr < size)
 800fdb8:	687a      	ldr	r2, [r7, #4]
 800fdba:	68bb      	ldr	r3, [r7, #8]
 800fdbc:	429a      	cmp	r2, r3
 800fdbe:	da03      	bge.n	800fdc8 <rpmsg_release_address+0x1c>
		metal_bitmap_clear_bit(bitmap, addr);
 800fdc0:	6879      	ldr	r1, [r7, #4]
 800fdc2:	68f8      	ldr	r0, [r7, #12]
 800fdc4:	f7ff ff69 	bl	800fc9a <metal_bitmap_clear_bit>
}
 800fdc8:	bf00      	nop
 800fdca:	3710      	adds	r7, #16
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	bd80      	pop	{r7, pc}

0800fdd0 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b084      	sub	sp, #16
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	60f8      	str	r0, [r7, #12]
 800fdd8:	60b9      	str	r1, [r7, #8]
 800fdda:	607a      	str	r2, [r7, #4]
	if (addr < size)
 800fddc:	687a      	ldr	r2, [r7, #4]
 800fdde:	68bb      	ldr	r3, [r7, #8]
 800fde0:	429a      	cmp	r2, r3
 800fde2:	da05      	bge.n	800fdf0 <rpmsg_is_address_set+0x20>
		return metal_bitmap_is_bit_set(bitmap, addr);
 800fde4:	6879      	ldr	r1, [r7, #4]
 800fde6:	68f8      	ldr	r0, [r7, #12]
 800fde8:	f7ff ff3f 	bl	800fc6a <metal_bitmap_is_bit_set>
 800fdec:	4603      	mov	r3, r0
 800fdee:	e000      	b.n	800fdf2 <rpmsg_is_address_set+0x22>
	else
		return RPMSG_ERR_PARAM;
 800fdf0:	4b02      	ldr	r3, [pc, #8]	; (800fdfc <rpmsg_is_address_set+0x2c>)
}
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	3710      	adds	r7, #16
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	bd80      	pop	{r7, pc}
 800fdfa:	bf00      	nop
 800fdfc:	fffff82d 	.word	0xfffff82d

0800fe00 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	b084      	sub	sp, #16
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	60f8      	str	r0, [r7, #12]
 800fe08:	60b9      	str	r1, [r7, #8]
 800fe0a:	607a      	str	r2, [r7, #4]
	if (addr < size) {
 800fe0c:	687a      	ldr	r2, [r7, #4]
 800fe0e:	68bb      	ldr	r3, [r7, #8]
 800fe10:	429a      	cmp	r2, r3
 800fe12:	da05      	bge.n	800fe20 <rpmsg_set_address+0x20>
		metal_bitmap_set_bit(bitmap, addr);
 800fe14:	6879      	ldr	r1, [r7, #4]
 800fe16:	68f8      	ldr	r0, [r7, #12]
 800fe18:	f7ff ff0b 	bl	800fc32 <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	e000      	b.n	800fe22 <rpmsg_set_address+0x22>
	} else {
		return RPMSG_ERR_PARAM;
 800fe20:	4b02      	ldr	r3, [pc, #8]	; (800fe2c <rpmsg_set_address+0x2c>)
	}
}
 800fe22:	4618      	mov	r0, r3
 800fe24:	3710      	adds	r7, #16
 800fe26:	46bd      	mov	sp, r7
 800fe28:	bd80      	pop	{r7, pc}
 800fe2a:	bf00      	nop
 800fe2c:	fffff82d 	.word	0xfffff82d

0800fe30 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 800fe30:	b590      	push	{r4, r7, lr}
 800fe32:	b089      	sub	sp, #36	; 0x24
 800fe34:	af02      	add	r7, sp, #8
 800fe36:	60f8      	str	r0, [r7, #12]
 800fe38:	60b9      	str	r1, [r7, #8]
 800fe3a:	607a      	str	r2, [r7, #4]
 800fe3c:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d00a      	beq.n	800fe5a <rpmsg_send_offchannel_raw+0x2a>
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	6a1b      	ldr	r3, [r3, #32]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d006      	beq.n	800fe5a <rpmsg_send_offchannel_raw+0x2a>
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d003      	beq.n	800fe5a <rpmsg_send_offchannel_raw+0x2a>
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe58:	d101      	bne.n	800fe5e <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
 800fe5a:	4b0d      	ldr	r3, [pc, #52]	; (800fe90 <rpmsg_send_offchannel_raw+0x60>)
 800fe5c:	e014      	b.n	800fe88 <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	6a1b      	ldr	r3, [r3, #32]
 800fe62:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
 800fe64:	697b      	ldr	r3, [r7, #20]
 800fe66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d00c      	beq.n	800fe86 <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 800fe6c:	697b      	ldr	r3, [r7, #20]
 800fe6e:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800fe70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe72:	9301      	str	r3, [sp, #4]
 800fe74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe76:	9300      	str	r3, [sp, #0]
 800fe78:	683b      	ldr	r3, [r7, #0]
 800fe7a:	687a      	ldr	r2, [r7, #4]
 800fe7c:	68b9      	ldr	r1, [r7, #8]
 800fe7e:	6978      	ldr	r0, [r7, #20]
 800fe80:	47a0      	blx	r4
 800fe82:	4603      	mov	r3, r0
 800fe84:	e000      	b.n	800fe88 <rpmsg_send_offchannel_raw+0x58>
						      size, wait);

	return RPMSG_ERR_PARAM;
 800fe86:	4b02      	ldr	r3, [pc, #8]	; (800fe90 <rpmsg_send_offchannel_raw+0x60>)
}
 800fe88:	4618      	mov	r0, r3
 800fe8a:	371c      	adds	r7, #28
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	bd90      	pop	{r4, r7, pc}
 800fe90:	fffff82d 	.word	0xfffff82d

0800fe94 <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b090      	sub	sp, #64	; 0x40
 800fe98:	af02      	add	r7, sp, #8
 800fe9a:	6078      	str	r0, [r7, #4]
 800fe9c:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 800fe9e:	683b      	ldr	r3, [r7, #0]
 800fea0:	633b      	str	r3, [r7, #48]	; 0x30
	ns_msg.addr = ept->addr;
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fea6:	62fb      	str	r3, [r7, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 800fea8:	6879      	ldr	r1, [r7, #4]
 800feaa:	f107 030c 	add.w	r3, r7, #12
 800feae:	2220      	movs	r2, #32
 800feb0:	4618      	mov	r0, r3
 800feb2:	f003 f9fd 	bl	80132b0 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800feba:	f107 030c 	add.w	r3, r7, #12
 800febe:	2201      	movs	r2, #1
 800fec0:	9201      	str	r2, [sp, #4]
 800fec2:	2228      	movs	r2, #40	; 0x28
 800fec4:	9200      	str	r2, [sp, #0]
 800fec6:	2235      	movs	r2, #53	; 0x35
 800fec8:	6878      	ldr	r0, [r7, #4]
 800feca:	f7ff ffb1 	bl	800fe30 <rpmsg_send_offchannel_raw>
 800fece:	6378      	str	r0, [r7, #52]	; 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 800fed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	da01      	bge.n	800feda <rpmsg_send_ns_message+0x46>
		return ret;
 800fed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fed8:	e000      	b.n	800fedc <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
 800feda:	2300      	movs	r3, #0
}
 800fedc:	4618      	mov	r0, r3
 800fede:	3738      	adds	r7, #56	; 0x38
 800fee0:	46bd      	mov	sp, r7
 800fee2:	bd80      	pop	{r7, pc}

0800fee4 <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b088      	sub	sp, #32
 800fee8:	af00      	add	r7, sp, #0
 800feea:	60f8      	str	r0, [r7, #12]
 800feec:	60b9      	str	r1, [r7, #8]
 800feee:	607a      	str	r2, [r7, #4]
 800fef0:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	61fb      	str	r3, [r7, #28]
 800fef8:	e04b      	b.n	800ff92 <rpmsg_get_endpoint+0xae>
		int name_match = 0;
 800fefa:	2300      	movs	r3, #0
 800fefc:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 800fefe:	69fb      	ldr	r3, [r7, #28]
 800ff00:	3b34      	subs	r3, #52	; 0x34
 800ff02:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff0a:	d006      	beq.n	800ff1a <rpmsg_get_endpoint+0x36>
 800ff0c:	697b      	ldr	r3, [r7, #20]
 800ff0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff10:	687a      	ldr	r2, [r7, #4]
 800ff12:	429a      	cmp	r2, r3
 800ff14:	d101      	bne.n	800ff1a <rpmsg_get_endpoint+0x36>
			return ept;
 800ff16:	697b      	ldr	r3, [r7, #20]
 800ff18:	e040      	b.n	800ff9c <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 800ff1a:	697b      	ldr	r3, [r7, #20]
 800ff1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff1e:	687a      	ldr	r2, [r7, #4]
 800ff20:	429a      	cmp	r2, r3
 800ff22:	d106      	bne.n	800ff32 <rpmsg_get_endpoint+0x4e>
 800ff24:	697b      	ldr	r3, [r7, #20]
 800ff26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff28:	683a      	ldr	r2, [r7, #0]
 800ff2a:	429a      	cmp	r2, r3
 800ff2c:	d101      	bne.n	800ff32 <rpmsg_get_endpoint+0x4e>
			return ept;
 800ff2e:	697b      	ldr	r3, [r7, #20]
 800ff30:	e034      	b.n	800ff9c <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
 800ff32:	68bb      	ldr	r3, [r7, #8]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d00c      	beq.n	800ff52 <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
 800ff38:	697b      	ldr	r3, [r7, #20]
 800ff3a:	2220      	movs	r2, #32
 800ff3c:	68b9      	ldr	r1, [r7, #8]
 800ff3e:	4618      	mov	r0, r3
 800ff40:	f003 f9a4 	bl	801328c <strncmp>
 800ff44:	4603      	mov	r3, r0
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	bf0c      	ite	eq
 800ff4a:	2301      	moveq	r3, #1
 800ff4c:	2300      	movne	r3, #0
 800ff4e:	b2db      	uxtb	r3, r3
 800ff50:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
 800ff52:	68bb      	ldr	r3, [r7, #8]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d018      	beq.n	800ff8a <rpmsg_get_endpoint+0xa6>
 800ff58:	69bb      	ldr	r3, [r7, #24]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d015      	beq.n	800ff8a <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address*/
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 800ff5e:	683b      	ldr	r3, [r7, #0]
 800ff60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff64:	d006      	beq.n	800ff74 <rpmsg_get_endpoint+0x90>
 800ff66:	697b      	ldr	r3, [r7, #20]
 800ff68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff6a:	683a      	ldr	r2, [r7, #0]
 800ff6c:	429a      	cmp	r2, r3
 800ff6e:	d101      	bne.n	800ff74 <rpmsg_get_endpoint+0x90>
			return ept;
 800ff70:	697b      	ldr	r3, [r7, #20]
 800ff72:	e013      	b.n	800ff9c <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept*/
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff7a:	d107      	bne.n	800ff8c <rpmsg_get_endpoint+0xa8>
 800ff7c:	697b      	ldr	r3, [r7, #20]
 800ff7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff84:	d102      	bne.n	800ff8c <rpmsg_get_endpoint+0xa8>
			return ept;
 800ff86:	697b      	ldr	r3, [r7, #20]
 800ff88:	e008      	b.n	800ff9c <rpmsg_get_endpoint+0xb8>
			continue;
 800ff8a:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
 800ff8c:	69fb      	ldr	r3, [r7, #28]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	61fb      	str	r3, [r7, #28]
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	69fa      	ldr	r2, [r7, #28]
 800ff96:	429a      	cmp	r2, r3
 800ff98:	d1af      	bne.n	800fefa <rpmsg_get_endpoint+0x16>
	}
	return NULL;
 800ff9a:	2300      	movs	r3, #0
}
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	3720      	adds	r7, #32
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	bd80      	pop	{r7, pc}

0800ffa4 <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b084      	sub	sp, #16
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d016      	beq.n	800ffe0 <rpmsg_unregister_endpoint+0x3c>
		return;

	rdev = ept->rdev;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	6a1b      	ldr	r3, [r3, #32]
 800ffb6:	60fb      	str	r3, [r7, #12]

	if (ept->addr != RPMSG_ADDR_ANY)
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffc0:	d008      	beq.n	800ffd4 <rpmsg_unregister_endpoint+0x30>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	f103 0048 	add.w	r0, r3, #72	; 0x48
				      ept->addr);
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 800ffcc:	461a      	mov	r2, r3
 800ffce:	2180      	movs	r1, #128	; 0x80
 800ffd0:	f7ff feec 	bl	800fdac <rpmsg_release_address>
	metal_list_del(&ept->node);
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	3334      	adds	r3, #52	; 0x34
 800ffd8:	4618      	mov	r0, r3
 800ffda:	f7ff fe0f 	bl	800fbfc <metal_list_del>
 800ffde:	e000      	b.n	800ffe2 <rpmsg_unregister_endpoint+0x3e>
		return;
 800ffe0:	bf00      	nop
}
 800ffe2:	3710      	adds	r7, #16
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	bd80      	pop	{r7, pc}

0800ffe8 <rpmsg_register_endpoint>:

int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept)
{
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b082      	sub	sp, #8
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
 800fff0:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
 800fff2:	683b      	ldr	r3, [r7, #0]
 800fff4:	687a      	ldr	r2, [r7, #4]
 800fff6:	621a      	str	r2, [r3, #32]

	metal_list_add_tail(&rdev->endpoints, &ept->node);
 800fff8:	687a      	ldr	r2, [r7, #4]
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	3334      	adds	r3, #52	; 0x34
 800fffe:	4619      	mov	r1, r3
 8010000:	4610      	mov	r0, r2
 8010002:	f7ff fdee 	bl	800fbe2 <metal_list_add_tail>
	return RPMSG_SUCCESS;
 8010006:	2300      	movs	r3, #0
}
 8010008:	4618      	mov	r0, r3
 801000a:	3708      	adds	r7, #8
 801000c:	46bd      	mov	sp, r7
 801000e:	bd80      	pop	{r7, pc}

08010010 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 8010010:	b580      	push	{r7, lr}
 8010012:	b088      	sub	sp, #32
 8010014:	af02      	add	r7, sp, #8
 8010016:	60f8      	str	r0, [r7, #12]
 8010018:	60b9      	str	r1, [r7, #8]
 801001a:	607a      	str	r2, [r7, #4]
 801001c:	603b      	str	r3, [r7, #0]
	int status;
	uint32_t addr = src;
 801001e:	683b      	ldr	r3, [r7, #0]
 8010020:	613b      	str	r3, [r7, #16]

	if (!ept)
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d101      	bne.n	801002c <rpmsg_create_ept+0x1c>
		return RPMSG_ERR_PARAM;
 8010028:	4b37      	ldr	r3, [pc, #220]	; (8010108 <rpmsg_create_ept+0xf8>)
 801002a:	e068      	b.n	80100fe <rpmsg_create_ept+0xee>

	metal_mutex_acquire(&rdev->lock);
 801002c:	68bb      	ldr	r3, [r7, #8]
 801002e:	3358      	adds	r3, #88	; 0x58
 8010030:	4618      	mov	r0, r3
 8010032:	f7ff fda6 	bl	800fb82 <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 8010036:	683b      	ldr	r3, [r7, #0]
 8010038:	f1b3 3fff 	cmp.w	r3, #4294967295
 801003c:	d018      	beq.n	8010070 <rpmsg_create_ept+0x60>
		status = rpmsg_is_address_set(rdev->bitmap,
 801003e:	68bb      	ldr	r3, [r7, #8]
 8010040:	3348      	adds	r3, #72	; 0x48
 8010042:	683a      	ldr	r2, [r7, #0]
 8010044:	2180      	movs	r1, #128	; 0x80
 8010046:	4618      	mov	r0, r3
 8010048:	f7ff fec2 	bl	800fdd0 <rpmsg_is_address_set>
 801004c:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 801004e:	697b      	ldr	r3, [r7, #20]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d107      	bne.n	8010064 <rpmsg_create_ept+0x54>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8010054:	68bb      	ldr	r3, [r7, #8]
 8010056:	3348      	adds	r3, #72	; 0x48
 8010058:	683a      	ldr	r2, [r7, #0]
 801005a:	2180      	movs	r1, #128	; 0x80
 801005c:	4618      	mov	r0, r3
 801005e:	f7ff fecf 	bl	800fe00 <rpmsg_set_address>
 8010062:	e00c      	b.n	801007e <rpmsg_create_ept+0x6e>
					  src);
		} else if (status > 0) {
 8010064:	697b      	ldr	r3, [r7, #20]
 8010066:	2b00      	cmp	r3, #0
 8010068:	dd40      	ble.n	80100ec <rpmsg_create_ept+0xdc>
			status = RPMSG_SUCCESS;
 801006a:	2300      	movs	r3, #0
 801006c:	617b      	str	r3, [r7, #20]
			goto ret_status;
 801006e:	e040      	b.n	80100f2 <rpmsg_create_ept+0xe2>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 8010070:	68bb      	ldr	r3, [r7, #8]
 8010072:	3348      	adds	r3, #72	; 0x48
 8010074:	2180      	movs	r1, #128	; 0x80
 8010076:	4618      	mov	r0, r3
 8010078:	f7ff fe79 	bl	800fd6e <rpmsg_get_address>
 801007c:	6138      	str	r0, [r7, #16]
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 801007e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010080:	9301      	str	r3, [sp, #4]
 8010082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010084:	9300      	str	r3, [sp, #0]
 8010086:	6a3b      	ldr	r3, [r7, #32]
 8010088:	693a      	ldr	r2, [r7, #16]
 801008a:	6879      	ldr	r1, [r7, #4]
 801008c:	68f8      	ldr	r0, [r7, #12]
 801008e:	f7ff fe51 	bl	800fd34 <rpmsg_init_ept>

	status = rpmsg_register_endpoint(rdev, ept);
 8010092:	68f9      	ldr	r1, [r7, #12]
 8010094:	68b8      	ldr	r0, [r7, #8]
 8010096:	f7ff ffa7 	bl	800ffe8 <rpmsg_register_endpoint>
 801009a:	6178      	str	r0, [r7, #20]
	if (status < 0)
 801009c:	697b      	ldr	r3, [r7, #20]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	da06      	bge.n	80100b0 <rpmsg_create_ept+0xa0>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE, addr);
 80100a2:	68bb      	ldr	r3, [r7, #8]
 80100a4:	3348      	adds	r3, #72	; 0x48
 80100a6:	693a      	ldr	r2, [r7, #16]
 80100a8:	2180      	movs	r1, #128	; 0x80
 80100aa:	4618      	mov	r0, r3
 80100ac:	f7ff fe7e 	bl	800fdac <rpmsg_release_address>

	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
 80100b0:	697b      	ldr	r3, [r7, #20]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d11c      	bne.n	80100f0 <rpmsg_create_ept+0xe0>
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100be:	d117      	bne.n	80100f0 <rpmsg_create_ept+0xe0>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 80100c0:	68bb      	ldr	r3, [r7, #8]
 80100c2:	3358      	adds	r3, #88	; 0x58
 80100c4:	4618      	mov	r0, r3
 80100c6:	f7ff fd67 	bl	800fb98 <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 80100ca:	2100      	movs	r1, #0
 80100cc:	68f8      	ldr	r0, [r7, #12]
 80100ce:	f7ff fee1 	bl	800fe94 <rpmsg_send_ns_message>
 80100d2:	6178      	str	r0, [r7, #20]
		metal_mutex_acquire(&rdev->lock);
 80100d4:	68bb      	ldr	r3, [r7, #8]
 80100d6:	3358      	adds	r3, #88	; 0x58
 80100d8:	4618      	mov	r0, r3
 80100da:	f7ff fd52 	bl	800fb82 <metal_mutex_acquire>
		if (status)
 80100de:	697b      	ldr	r3, [r7, #20]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d005      	beq.n	80100f0 <rpmsg_create_ept+0xe0>
			rpmsg_unregister_endpoint(ept);
 80100e4:	68f8      	ldr	r0, [r7, #12]
 80100e6:	f7ff ff5d 	bl	800ffa4 <rpmsg_unregister_endpoint>
 80100ea:	e002      	b.n	80100f2 <rpmsg_create_ept+0xe2>
			goto ret_status;
 80100ec:	bf00      	nop
 80100ee:	e000      	b.n	80100f2 <rpmsg_create_ept+0xe2>
	}

ret_status:
 80100f0:	bf00      	nop
	metal_mutex_release(&rdev->lock);
 80100f2:	68bb      	ldr	r3, [r7, #8]
 80100f4:	3358      	adds	r3, #88	; 0x58
 80100f6:	4618      	mov	r0, r3
 80100f8:	f7ff fd4e 	bl	800fb98 <metal_mutex_release>
	return status;
 80100fc:	697b      	ldr	r3, [r7, #20]
}
 80100fe:	4618      	mov	r0, r3
 8010100:	3718      	adds	r7, #24
 8010102:	46bd      	mov	sp, r7
 8010104:	bd80      	pop	{r7, pc}
 8010106:	bf00      	nop
 8010108:	fffff82d 	.word	0xfffff82d

0801010c <__metal_cache_invalidate>:
{
 801010c:	b580      	push	{r7, lr}
 801010e:	b082      	sub	sp, #8
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
 8010114:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8010116:	6839      	ldr	r1, [r7, #0]
 8010118:	6878      	ldr	r0, [r7, #4]
 801011a:	f000 fcc2 	bl	8010aa2 <metal_machine_cache_invalidate>
}
 801011e:	bf00      	nop
 8010120:	3708      	adds	r7, #8
 8010122:	46bd      	mov	sp, r7
 8010124:	bd80      	pop	{r7, pc}

08010126 <metal_cache_invalidate>:
{
 8010126:	b580      	push	{r7, lr}
 8010128:	b082      	sub	sp, #8
 801012a:	af00      	add	r7, sp, #0
 801012c:	6078      	str	r0, [r7, #4]
 801012e:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8010130:	6839      	ldr	r1, [r7, #0]
 8010132:	6878      	ldr	r0, [r7, #4]
 8010134:	f7ff ffea 	bl	801010c <__metal_cache_invalidate>
}
 8010138:	bf00      	nop
 801013a:	3708      	adds	r7, #8
 801013c:	46bd      	mov	sp, r7
 801013e:	bd80      	pop	{r7, pc}

08010140 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 8010140:	b480      	push	{r7}
 8010142:	b083      	sub	sp, #12
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
 8010148:	2300      	movs	r3, #0
}
 801014a:	4618      	mov	r0, r3
 801014c:	370c      	adds	r7, #12
 801014e:	46bd      	mov	sp, r7
 8010150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010154:	4770      	bx	lr

08010156 <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 8010156:	b580      	push	{r7, lr}
 8010158:	b082      	sub	sp, #8
 801015a:	af00      	add	r7, sp, #0
 801015c:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
 801015e:	6878      	ldr	r0, [r7, #4]
 8010160:	f7ff ffee 	bl	8010140 <__metal_sleep_usec>
 8010164:	4603      	mov	r3, r0
}
 8010166:	4618      	mov	r0, r3
 8010168:	3708      	adds	r7, #8
 801016a:	46bd      	mov	sp, r7
 801016c:	bd80      	pop	{r7, pc}

0801016e <metal_list_init>:
{
 801016e:	b480      	push	{r7}
 8010170:	b083      	sub	sp, #12
 8010172:	af00      	add	r7, sp, #0
 8010174:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	687a      	ldr	r2, [r7, #4]
 801017a:	605a      	str	r2, [r3, #4]
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	685a      	ldr	r2, [r3, #4]
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	601a      	str	r2, [r3, #0]
}
 8010184:	bf00      	nop
 8010186:	370c      	adds	r7, #12
 8010188:	46bd      	mov	sp, r7
 801018a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018e:	4770      	bx	lr

08010190 <metal_io_virt_to_offset>:
{
 8010190:	b480      	push	{r7}
 8010192:	b085      	sub	sp, #20
 8010194:	af00      	add	r7, sp, #0
 8010196:	6078      	str	r0, [r7, #4]
 8010198:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	683a      	ldr	r2, [r7, #0]
 80101a0:	1ad3      	subs	r3, r2, r3
 80101a2:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	689b      	ldr	r3, [r3, #8]
 80101a8:	68fa      	ldr	r2, [r7, #12]
 80101aa:	429a      	cmp	r2, r3
 80101ac:	d201      	bcs.n	80101b2 <metal_io_virt_to_offset+0x22>
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	e001      	b.n	80101b6 <metal_io_virt_to_offset+0x26>
 80101b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80101b6:	4618      	mov	r0, r3
 80101b8:	3714      	adds	r7, #20
 80101ba:	46bd      	mov	sp, r7
 80101bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c0:	4770      	bx	lr

080101c2 <__metal_mutex_init>:
{
 80101c2:	b480      	push	{r7}
 80101c4:	b085      	sub	sp, #20
 80101c6:	af00      	add	r7, sp, #0
 80101c8:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, 0);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	60fb      	str	r3, [r7, #12]
 80101ce:	2300      	movs	r3, #0
 80101d0:	60bb      	str	r3, [r7, #8]
 80101d2:	68bb      	ldr	r3, [r7, #8]
 80101d4:	461a      	mov	r2, r3
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	f3bf 8f5b 	dmb	ish
 80101dc:	601a      	str	r2, [r3, #0]
 80101de:	f3bf 8f5b 	dmb	ish
}
 80101e2:	bf00      	nop
 80101e4:	3714      	adds	r7, #20
 80101e6:	46bd      	mov	sp, r7
 80101e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ec:	4770      	bx	lr

080101ee <__metal_mutex_acquire>:
{
 80101ee:	b480      	push	{r7}
 80101f0:	b083      	sub	sp, #12
 80101f2:	af00      	add	r7, sp, #0
 80101f4:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 80101f6:	bf00      	nop
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	2201      	movs	r2, #1
 80101fc:	4611      	mov	r1, r2
 80101fe:	f3bf 8f5b 	dmb	ish
 8010202:	e8d3 2f4f 	ldrexb	r2, [r3]
 8010206:	e8c3 1f40 	strexb	r0, r1, [r3]
 801020a:	2800      	cmp	r0, #0
 801020c:	d1f9      	bne.n	8010202 <__metal_mutex_acquire+0x14>
 801020e:	f3bf 8f5b 	dmb	ish
 8010212:	b2d3      	uxtb	r3, r2
 8010214:	2b00      	cmp	r3, #0
 8010216:	d1ef      	bne.n	80101f8 <__metal_mutex_acquire+0xa>
}
 8010218:	bf00      	nop
 801021a:	bf00      	nop
 801021c:	370c      	adds	r7, #12
 801021e:	46bd      	mov	sp, r7
 8010220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010224:	4770      	bx	lr

08010226 <__metal_mutex_release>:
{
 8010226:	b480      	push	{r7}
 8010228:	b083      	sub	sp, #12
 801022a:	af00      	add	r7, sp, #0
 801022c:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	f3bf 8f5b 	dmb	ish
 8010234:	2200      	movs	r2, #0
 8010236:	701a      	strb	r2, [r3, #0]
 8010238:	f3bf 8f5b 	dmb	ish
}
 801023c:	bf00      	nop
 801023e:	370c      	adds	r7, #12
 8010240:	46bd      	mov	sp, r7
 8010242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010246:	4770      	bx	lr

08010248 <metal_mutex_init>:
{
 8010248:	b580      	push	{r7, lr}
 801024a:	b082      	sub	sp, #8
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
 8010250:	6878      	ldr	r0, [r7, #4]
 8010252:	f7ff ffb6 	bl	80101c2 <__metal_mutex_init>
}
 8010256:	bf00      	nop
 8010258:	3708      	adds	r7, #8
 801025a:	46bd      	mov	sp, r7
 801025c:	bd80      	pop	{r7, pc}

0801025e <metal_mutex_acquire>:
{
 801025e:	b580      	push	{r7, lr}
 8010260:	b082      	sub	sp, #8
 8010262:	af00      	add	r7, sp, #0
 8010264:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 8010266:	6878      	ldr	r0, [r7, #4]
 8010268:	f7ff ffc1 	bl	80101ee <__metal_mutex_acquire>
}
 801026c:	bf00      	nop
 801026e:	3708      	adds	r7, #8
 8010270:	46bd      	mov	sp, r7
 8010272:	bd80      	pop	{r7, pc}

08010274 <metal_mutex_release>:
{
 8010274:	b580      	push	{r7, lr}
 8010276:	b082      	sub	sp, #8
 8010278:	af00      	add	r7, sp, #0
 801027a:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 801027c:	6878      	ldr	r0, [r7, #4]
 801027e:	f7ff ffd2 	bl	8010226 <__metal_mutex_release>
}
 8010282:	bf00      	nop
 8010284:	3708      	adds	r7, #8
 8010286:	46bd      	mov	sp, r7
 8010288:	bd80      	pop	{r7, pc}

0801028a <rpmsg_init_ept>:
{
 801028a:	b580      	push	{r7, lr}
 801028c:	b084      	sub	sp, #16
 801028e:	af00      	add	r7, sp, #0
 8010290:	60f8      	str	r0, [r7, #12]
 8010292:	60b9      	str	r1, [r7, #8]
 8010294:	607a      	str	r2, [r7, #4]
 8010296:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	2220      	movs	r2, #32
 801029c:	68b9      	ldr	r1, [r7, #8]
 801029e:	4618      	mov	r0, r3
 80102a0:	f003 f806 	bl	80132b0 <strncpy>
	ept->addr = src;
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	687a      	ldr	r2, [r7, #4]
 80102a8:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	683a      	ldr	r2, [r7, #0]
 80102ae:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	69ba      	ldr	r2, [r7, #24]
 80102b4:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	69fa      	ldr	r2, [r7, #28]
 80102ba:	631a      	str	r2, [r3, #48]	; 0x30
}
 80102bc:	bf00      	nop
 80102be:	3710      	adds	r7, #16
 80102c0:	46bd      	mov	sp, r7
 80102c2:	bd80      	pop	{r7, pc}

080102c4 <rpmsg_virtio_get_role>:

#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER
static inline unsigned int
	rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 80102c4:	b480      	push	{r7}
 80102c6:	b083      	sub	sp, #12
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80102d0:	699b      	ldr	r3, [r3, #24]
}
 80102d2:	4618      	mov	r0, r3
 80102d4:	370c      	adds	r7, #12
 80102d6:	46bd      	mov	sp, r7
 80102d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102dc:	4770      	bx	lr

080102de <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 80102de:	b580      	push	{r7, lr}
 80102e0:	b082      	sub	sp, #8
 80102e2:	af00      	add	r7, sp, #0
 80102e4:	6078      	str	r0, [r7, #4]
 80102e6:	460b      	mov	r3, r1
 80102e8:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80102ee:	6a1b      	ldr	r3, [r3, #32]
 80102f0:	685b      	ldr	r3, [r3, #4]
 80102f2:	687a      	ldr	r2, [r7, #4]
 80102f4:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80102f6:	78f9      	ldrb	r1, [r7, #3]
 80102f8:	4610      	mov	r0, r2
 80102fa:	4798      	blx	r3
}
 80102fc:	bf00      	nop
 80102fe:	3708      	adds	r7, #8
 8010300:	46bd      	mov	sp, r7
 8010302:	bd80      	pop	{r7, pc}

08010304 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 8010304:	b580      	push	{r7, lr}
 8010306:	b082      	sub	sp, #8
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010310:	6a1b      	ldr	r3, [r3, #32]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	687a      	ldr	r2, [r7, #4]
 8010316:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8010318:	4610      	mov	r0, r2
 801031a:	4798      	blx	r3
 801031c:	4603      	mov	r3, r0
}
 801031e:	4618      	mov	r0, r3
 8010320:	3708      	adds	r7, #8
 8010322:	46bd      	mov	sp, r7
 8010324:	bd80      	pop	{r7, pc}

08010326 <rpmsg_virtio_get_features>:

static inline uint32_t
	rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 8010326:	b580      	push	{r7, lr}
 8010328:	b082      	sub	sp, #8
 801032a:	af00      	add	r7, sp, #0
 801032c:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010332:	6a1b      	ldr	r3, [r3, #32]
 8010334:	689b      	ldr	r3, [r3, #8]
 8010336:	687a      	ldr	r2, [r7, #4]
 8010338:	6e52      	ldr	r2, [r2, #100]	; 0x64
 801033a:	4610      	mov	r0, r2
 801033c:	4798      	blx	r3
 801033e:	4603      	mov	r3, r0
}
 8010340:	4618      	mov	r0, r3
 8010342:	3708      	adds	r7, #8
 8010344:	46bd      	mov	sp, r7
 8010346:	bd80      	pop	{r7, pc}

08010348 <rpmsg_virtio_create_virtqueues>:
static inline int
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b086      	sub	sp, #24
 801034c:	af02      	add	r7, sp, #8
 801034e:	60f8      	str	r0, [r7, #12]
 8010350:	60b9      	str	r1, [r7, #8]
 8010352:	607a      	str	r2, [r7, #4]
 8010354:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	6e58      	ldr	r0, [r3, #100]	; 0x64
 801035a:	68b9      	ldr	r1, [r7, #8]
 801035c:	69bb      	ldr	r3, [r7, #24]
 801035e:	9300      	str	r3, [sp, #0]
 8010360:	683b      	ldr	r3, [r7, #0]
 8010362:	687a      	ldr	r2, [r7, #4]
 8010364:	f000 fbf2 	bl	8010b4c <virtio_create_virtqueues>
 8010368:	4603      	mov	r3, r0
					callbacks);
}
 801036a:	4618      	mov	r0, r3
 801036c:	3710      	adds	r7, #16
 801036e:	46bd      	mov	sp, r7
 8010370:	bd80      	pop	{r7, pc}

08010372 <rpmsg_get_ept_from_addr>:
int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 8010372:	b580      	push	{r7, lr}
 8010374:	b082      	sub	sp, #8
 8010376:	af00      	add	r7, sp, #0
 8010378:	6078      	str	r0, [r7, #4]
 801037a:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 801037c:	f04f 33ff 	mov.w	r3, #4294967295
 8010380:	683a      	ldr	r2, [r7, #0]
 8010382:	2100      	movs	r1, #0
 8010384:	6878      	ldr	r0, [r7, #4]
 8010386:	f7ff fdad 	bl	800fee4 <rpmsg_get_endpoint>
 801038a:	4603      	mov	r3, r0
}
 801038c:	4618      	mov	r0, r3
 801038e:	3708      	adds	r7, #8
 8010390:	46bd      	mov	sp, r7
 8010392:	bd80      	pop	{r7, pc}

08010394 <rpmsg_virtio_shm_pool_get_buffer>:

#ifndef VIRTIO_SLAVE_ONLY
metal_weak void *
rpmsg_virtio_shm_pool_get_buffer(struct rpmsg_virtio_shm_pool *shpool,
				 size_t size)
{
 8010394:	b480      	push	{r7}
 8010396:	b085      	sub	sp, #20
 8010398:	af00      	add	r7, sp, #0
 801039a:	6078      	str	r0, [r7, #4]
 801039c:	6039      	str	r1, [r7, #0]
	void *buffer;

	if (shpool->avail < size)
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	685b      	ldr	r3, [r3, #4]
 80103a2:	683a      	ldr	r2, [r7, #0]
 80103a4:	429a      	cmp	r2, r3
 80103a6:	d901      	bls.n	80103ac <rpmsg_virtio_shm_pool_get_buffer+0x18>
		return NULL;
 80103a8:	2300      	movs	r3, #0
 80103aa:	e00f      	b.n	80103cc <rpmsg_virtio_shm_pool_get_buffer+0x38>
	buffer =  (void *)((char *)shpool->base + shpool->size - shpool->avail);
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	681a      	ldr	r2, [r3, #0]
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	6899      	ldr	r1, [r3, #8]
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	685b      	ldr	r3, [r3, #4]
 80103b8:	1acb      	subs	r3, r1, r3
 80103ba:	4413      	add	r3, r2
 80103bc:	60fb      	str	r3, [r7, #12]
	shpool->avail -= size;
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	685a      	ldr	r2, [r3, #4]
 80103c2:	683b      	ldr	r3, [r7, #0]
 80103c4:	1ad2      	subs	r2, r2, r3
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	605a      	str	r2, [r3, #4]

	return buffer;
 80103ca:	68fb      	ldr	r3, [r7, #12]
}
 80103cc:	4618      	mov	r0, r3
 80103ce:	3714      	adds	r7, #20
 80103d0:	46bd      	mov	sp, r7
 80103d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d6:	4770      	bx	lr

080103d8 <rpmsg_virtio_init_shm_pool>:
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 80103d8:	b480      	push	{r7}
 80103da:	b085      	sub	sp, #20
 80103dc:	af00      	add	r7, sp, #0
 80103de:	60f8      	str	r0, [r7, #12]
 80103e0:	60b9      	str	r1, [r7, #8]
 80103e2:	607a      	str	r2, [r7, #4]
	if (!shpool)
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d01d      	beq.n	8010426 <rpmsg_virtio_init_shm_pool+0x4e>
		return;
	shpool->base = shb;
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	68ba      	ldr	r2, [r7, #8]
 80103ee:	601a      	str	r2, [r3, #0]
	shpool->size = WORD_ALIGN(size);
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	f003 0303 	and.w	r3, r3, #3
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d004      	beq.n	8010404 <rpmsg_virtio_init_shm_pool+0x2c>
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	f023 0303 	bic.w	r3, r3, #3
 8010400:	3304      	adds	r3, #4
 8010402:	e000      	b.n	8010406 <rpmsg_virtio_init_shm_pool+0x2e>
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	68fa      	ldr	r2, [r7, #12]
 8010408:	6093      	str	r3, [r2, #8]
	shpool->avail = WORD_ALIGN(size);
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	f003 0303 	and.w	r3, r3, #3
 8010410:	2b00      	cmp	r3, #0
 8010412:	d004      	beq.n	801041e <rpmsg_virtio_init_shm_pool+0x46>
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	f023 0303 	bic.w	r3, r3, #3
 801041a:	3304      	adds	r3, #4
 801041c:	e000      	b.n	8010420 <rpmsg_virtio_init_shm_pool+0x48>
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	68fa      	ldr	r2, [r7, #12]
 8010422:	6053      	str	r3, [r2, #4]
 8010424:	e000      	b.n	8010428 <rpmsg_virtio_init_shm_pool+0x50>
		return;
 8010426:	bf00      	nop
}
 8010428:	3714      	adds	r7, #20
 801042a:	46bd      	mov	sp, r7
 801042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010430:	4770      	bx	lr

08010432 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8010432:	b580      	push	{r7, lr}
 8010434:	b08a      	sub	sp, #40	; 0x28
 8010436:	af02      	add	r7, sp, #8
 8010438:	60f8      	str	r0, [r7, #12]
 801043a:	60b9      	str	r1, [r7, #8]
 801043c:	607a      	str	r2, [r7, #4]
 801043e:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8010440:	68f8      	ldr	r0, [r7, #12]
 8010442:	f7ff ff3f 	bl	80102c4 <rpmsg_virtio_get_role>
 8010446:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8010448:	69fb      	ldr	r3, [r7, #28]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d10d      	bne.n	801046a <rpmsg_virtio_return_buffer+0x38>
		struct virtqueue_buf vqbuf;

		(void)idx;
		/* Initialize buffer node */
		vqbuf.buf = buffer;
 801044e:	68bb      	ldr	r3, [r7, #8]
 8010450:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	61bb      	str	r3, [r7, #24]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	6e98      	ldr	r0, [r3, #104]	; 0x68
 801045a:	f107 0114 	add.w	r1, r7, #20
 801045e:	68bb      	ldr	r3, [r7, #8]
 8010460:	9300      	str	r3, [sp, #0]
 8010462:	2301      	movs	r3, #1
 8010464:	2200      	movs	r2, #0
 8010466:	f000 fcc0 	bl	8010dea <virtqueue_add_buffer>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 801046a:	bf00      	nop
 801046c:	3720      	adds	r7, #32
 801046e:	46bd      	mov	sp, r7
 8010470:	bd80      	pop	{r7, pc}

08010472 <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8010472:	b580      	push	{r7, lr}
 8010474:	b08a      	sub	sp, #40	; 0x28
 8010476:	af02      	add	r7, sp, #8
 8010478:	60f8      	str	r0, [r7, #12]
 801047a:	60b9      	str	r1, [r7, #8]
 801047c:	607a      	str	r2, [r7, #4]
 801047e:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8010480:	68f8      	ldr	r0, [r7, #12]
 8010482:	f7ff ff1f 	bl	80102c4 <rpmsg_virtio_get_role>
 8010486:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8010488:	69fb      	ldr	r3, [r7, #28]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d10f      	bne.n	80104ae <rpmsg_virtio_enqueue_buffer+0x3c>
		struct virtqueue_buf vqbuf;
		(void)idx;

		/* Initialize buffer node */
		vqbuf.buf = buffer;
 801048e:	68bb      	ldr	r3, [r7, #8]
 8010490:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	61bb      	str	r3, [r7, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 801049a:	f107 0114 	add.w	r1, r7, #20
 801049e:	68bb      	ldr	r3, [r7, #8]
 80104a0:	9300      	str	r3, [sp, #0]
 80104a2:	2301      	movs	r3, #1
 80104a4:	2200      	movs	r2, #0
 80104a6:	f000 fca0 	bl	8010dea <virtqueue_add_buffer>
 80104aa:	4603      	mov	r3, r0
 80104ac:	e000      	b.n	80104b0 <rpmsg_virtio_enqueue_buffer+0x3e>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 80104ae:	2300      	movs	r3, #0
}
 80104b0:	4618      	mov	r0, r3
 80104b2:	3720      	adds	r7, #32
 80104b4:	46bd      	mov	sp, r7
 80104b6:	bd80      	pop	{r7, pc}

080104b8 <rpmsg_virtio_get_tx_buffer>:
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b086      	sub	sp, #24
 80104bc:	af00      	add	r7, sp, #0
 80104be:	60f8      	str	r0, [r7, #12]
 80104c0:	60b9      	str	r1, [r7, #8]
 80104c2:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 80104c4:	68f8      	ldr	r0, [r7, #12]
 80104c6:	f7ff fefd 	bl	80102c4 <rpmsg_virtio_get_role>
 80104ca:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 80104cc:	2300      	movs	r3, #0
 80104ce:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 80104d0:	693b      	ldr	r3, [r7, #16]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d116      	bne.n	8010504 <rpmsg_virtio_get_tx_buffer+0x4c>
		data = virtqueue_get_buffer(rvdev->svq, (uint32_t *)len, idx);
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104da:	687a      	ldr	r2, [r7, #4]
 80104dc:	68b9      	ldr	r1, [r7, #8]
 80104de:	4618      	mov	r0, r3
 80104e0:	f000 fcc7 	bl	8010e72 <virtqueue_get_buffer>
 80104e4:	6178      	str	r0, [r7, #20]
		if (data == NULL) {
 80104e6:	697b      	ldr	r3, [r7, #20]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d10b      	bne.n	8010504 <rpmsg_virtio_get_tx_buffer+0x4c>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80104f4:	4618      	mov	r0, r3
 80104f6:	f7ff ff4d 	bl	8010394 <rpmsg_virtio_shm_pool_get_buffer>
 80104fa:	6178      	str	r0, [r7, #20]
							RPMSG_BUFFER_SIZE);
			*len = RPMSG_BUFFER_SIZE;
 80104fc:	68bb      	ldr	r3, [r7, #8]
 80104fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010502:	601a      	str	r2, [r3, #0]
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
						      (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 8010504:	697b      	ldr	r3, [r7, #20]
}
 8010506:	4618      	mov	r0, r3
 8010508:	3718      	adds	r7, #24
 801050a:	46bd      	mov	sp, r7
 801050c:	bd80      	pop	{r7, pc}

0801050e <rpmsg_virtio_get_rx_buffer>:
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 801050e:	b580      	push	{r7, lr}
 8010510:	b086      	sub	sp, #24
 8010512:	af00      	add	r7, sp, #0
 8010514:	60f8      	str	r0, [r7, #12]
 8010516:	60b9      	str	r1, [r7, #8]
 8010518:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 801051a:	68f8      	ldr	r0, [r7, #12]
 801051c:	f7ff fed2 	bl	80102c4 <rpmsg_virtio_get_role>
 8010520:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 8010522:	2300      	movs	r3, #0
 8010524:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8010526:	693b      	ldr	r3, [r7, #16]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d107      	bne.n	801053c <rpmsg_virtio_get_rx_buffer+0x2e>
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010530:	687a      	ldr	r2, [r7, #4]
 8010532:	68b9      	ldr	r1, [r7, #8]
 8010534:	4618      	mov	r0, r3
 8010536:	f000 fc9c 	bl	8010e72 <virtqueue_get_buffer>
 801053a:	6178      	str	r0, [r7, #20]
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
						   (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	if (data) {
 801053c:	697b      	ldr	r3, [r7, #20]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d005      	beq.n	801054e <rpmsg_virtio_get_rx_buffer+0x40>
		/* FIX ME: library should not worry about if it needs
		 * to flush/invalidate cache, it is shared memory.
		 * The shared memory should be mapped properly before
		 * using it.
		 */
		metal_cache_invalidate(data, (unsigned int)(*len));
 8010542:	68bb      	ldr	r3, [r7, #8]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	4619      	mov	r1, r3
 8010548:	6978      	ldr	r0, [r7, #20]
 801054a:	f7ff fdec 	bl	8010126 <metal_cache_invalidate>
	}

	return data;
 801054e:	697b      	ldr	r3, [r7, #20]
}
 8010550:	4618      	mov	r0, r3
 8010552:	3718      	adds	r7, #24
 8010554:	46bd      	mov	sp, r7
 8010556:	bd80      	pop	{r7, pc}

08010558 <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b084      	sub	sp, #16
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8010560:	6878      	ldr	r0, [r7, #4]
 8010562:	f7ff feaf 	bl	80102c4 <rpmsg_virtio_get_role>
 8010566:	60b8      	str	r0, [r7, #8]
	int length = 0;
 8010568:	2300      	movs	r3, #0
 801056a:	60fb      	str	r3, [r7, #12]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 801056c:	68bb      	ldr	r3, [r7, #8]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d102      	bne.n	8010578 <_rpmsg_virtio_get_buffer_size+0x20>
		/*
		 * If device role is Remote then buffers are provided by us
		 * (RPMSG Master), so just provide the macro.
		 */
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
 8010572:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8010576:	60fb      	str	r3, [r7, #12]
		    (int)virtqueue_get_desc_size(rvdev->svq) -
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 8010578:	68fb      	ldr	r3, [r7, #12]
}
 801057a:	4618      	mov	r0, r3
 801057c:	3710      	adds	r7, #16
 801057e:	46bd      	mov	sp, r7
 8010580:	bd80      	pop	{r7, pc}
	...

08010584 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 8010584:	b580      	push	{r7, lr}
 8010586:	b090      	sub	sp, #64	; 0x40
 8010588:	af00      	add	r7, sp, #0
 801058a:	60f8      	str	r0, [r7, #12]
 801058c:	60b9      	str	r1, [r7, #8]
 801058e:	607a      	str	r2, [r7, #4]
 8010590:	603b      	str	r3, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 8010592:	2300      	movs	r3, #0
 8010594:	63fb      	str	r3, [r7, #60]	; 0x3c
	unsigned short idx;
	int tick_count = 0;
 8010596:	2300      	movs	r3, #0
 8010598:	63bb      	str	r3, [r7, #56]	; 0x38
	unsigned long buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	637b      	str	r3, [r7, #52]	; 0x34

	status = rpmsg_virtio_get_status(rvdev);
 801059e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80105a0:	f7ff feb0 	bl	8010304 <rpmsg_virtio_get_status>
 80105a4:	4603      	mov	r3, r0
 80105a6:	633b      	str	r3, [r7, #48]	; 0x30
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 80105a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105aa:	f003 0304 	and.w	r3, r3, #4
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d101      	bne.n	80105b6 <rpmsg_virtio_send_offchannel_raw+0x32>
		return RPMSG_ERR_DEV_STATE;
 80105b2:	4b45      	ldr	r3, [pc, #276]	; (80106c8 <rpmsg_virtio_send_offchannel_raw+0x144>)
 80105b4:	e083      	b.n	80106be <rpmsg_virtio_send_offchannel_raw+0x13a>
	}

	if (wait)
 80105b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d003      	beq.n	80105c4 <rpmsg_virtio_send_offchannel_raw+0x40>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 80105bc:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80105c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80105c2:	e001      	b.n	80105c8 <rpmsg_virtio_send_offchannel_raw+0x44>
	else
		tick_count = 0;
 80105c4:	2300      	movs	r3, #0
 80105c6:	63bb      	str	r3, [r7, #56]	; 0x38

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	3358      	adds	r3, #88	; 0x58
 80105cc:	4618      	mov	r0, r3
 80105ce:	f7ff fe46 	bl	801025e <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 80105d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80105d4:	f7ff ffc0 	bl	8010558 <_rpmsg_virtio_get_buffer_size>
 80105d8:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (size <= avail_size)
 80105da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80105dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105de:	429a      	cmp	r2, r3
 80105e0:	dc08      	bgt.n	80105f4 <rpmsg_virtio_send_offchannel_raw+0x70>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 80105e2:	f107 0216 	add.w	r2, r7, #22
 80105e6:	f107 0310 	add.w	r3, r7, #16
 80105ea:	4619      	mov	r1, r3
 80105ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80105ee:	f7ff ff63 	bl	80104b8 <rpmsg_virtio_get_tx_buffer>
 80105f2:	63f8      	str	r0, [r7, #60]	; 0x3c
							    &idx);
		metal_mutex_release(&rdev->lock);
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	3358      	adds	r3, #88	; 0x58
 80105f8:	4618      	mov	r0, r3
 80105fa:	f7ff fe3b 	bl	8010274 <metal_mutex_release>
		if (buffer || !tick_count)
 80105fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010600:	2b00      	cmp	r3, #0
 8010602:	d10e      	bne.n	8010622 <rpmsg_virtio_send_offchannel_raw+0x9e>
 8010604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010606:	2b00      	cmp	r3, #0
 8010608:	d00b      	beq.n	8010622 <rpmsg_virtio_send_offchannel_raw+0x9e>
			break;
		if (avail_size != 0)
 801060a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801060c:	2b00      	cmp	r3, #0
 801060e:	d001      	beq.n	8010614 <rpmsg_virtio_send_offchannel_raw+0x90>
			return RPMSG_ERR_BUFF_SIZE;
 8010610:	4b2e      	ldr	r3, [pc, #184]	; (80106cc <rpmsg_virtio_send_offchannel_raw+0x148>)
 8010612:	e054      	b.n	80106be <rpmsg_virtio_send_offchannel_raw+0x13a>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 8010614:	200a      	movs	r0, #10
 8010616:	f7ff fd9e 	bl	8010156 <metal_sleep_usec>
		tick_count--;
 801061a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801061c:	3b01      	subs	r3, #1
 801061e:	63bb      	str	r3, [r7, #56]	; 0x38
	while (1) {
 8010620:	e7d2      	b.n	80105c8 <rpmsg_virtio_send_offchannel_raw+0x44>
	}
	if (!buffer)
 8010622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010624:	2b00      	cmp	r3, #0
 8010626:	d101      	bne.n	801062c <rpmsg_virtio_send_offchannel_raw+0xa8>
		return RPMSG_ERR_NO_BUFF;
 8010628:	4b29      	ldr	r3, [pc, #164]	; (80106d0 <rpmsg_virtio_send_offchannel_raw+0x14c>)
 801062a:	e048      	b.n	80106be <rpmsg_virtio_send_offchannel_raw+0x13a>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	61fb      	str	r3, [r7, #28]
	rp_hdr.src = src;
 8010630:	68bb      	ldr	r3, [r7, #8]
 8010632:	61bb      	str	r3, [r7, #24]
	rp_hdr.len = size;
 8010634:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010636:	b29b      	uxth	r3, r3
 8010638:	84bb      	strh	r3, [r7, #36]	; 0x24
	rp_hdr.reserved = 0;
 801063a:	2300      	movs	r3, #0
 801063c:	623b      	str	r3, [r7, #32]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 801063e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010642:	62bb      	str	r3, [r7, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 8010644:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010646:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010648:	f7ff fda2 	bl	8010190 <metal_io_virt_to_offset>
 801064c:	4601      	mov	r1, r0
 801064e:	f107 0218 	add.w	r2, r7, #24
 8010652:	2310      	movs	r3, #16
 8010654:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010656:	f7fe fdd8 	bl	800f20a <metal_io_block_write>
 801065a:	6338      	str	r0, [r7, #48]	; 0x30
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
 801065c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801065e:	2b10      	cmp	r3, #16
 8010660:	d000      	beq.n	8010664 <rpmsg_virtio_send_offchannel_raw+0xe0>
 8010662:	e7fe      	b.n	8010662 <rpmsg_virtio_send_offchannel_raw+0xde>

	status = metal_io_block_write(io,
 8010664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010666:	3310      	adds	r3, #16
 8010668:	4619      	mov	r1, r3
 801066a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801066c:	f7ff fd90 	bl	8010190 <metal_io_virt_to_offset>
 8010670:	4601      	mov	r1, r0
 8010672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010674:	683a      	ldr	r2, [r7, #0]
 8010676:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010678:	f7fe fdc7 	bl	800f20a <metal_io_block_write>
 801067c:	6338      	str	r0, [r7, #48]	; 0x30
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
 801067e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010680:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010682:	429a      	cmp	r2, r3
 8010684:	d000      	beq.n	8010688 <rpmsg_virtio_send_offchannel_raw+0x104>
 8010686:	e7fe      	b.n	8010686 <rpmsg_virtio_send_offchannel_raw+0x102>
	metal_mutex_acquire(&rdev->lock);
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	3358      	adds	r3, #88	; 0x58
 801068c:	4618      	mov	r0, r3
 801068e:	f7ff fde6 	bl	801025e <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 8010692:	693a      	ldr	r2, [r7, #16]
 8010694:	8afb      	ldrh	r3, [r7, #22]
 8010696:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010698:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801069a:	f7ff feea 	bl	8010472 <rpmsg_virtio_enqueue_buffer>
 801069e:	6338      	str	r0, [r7, #48]	; 0x30
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
 80106a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d000      	beq.n	80106a8 <rpmsg_virtio_send_offchannel_raw+0x124>
 80106a6:	e7fe      	b.n	80106a6 <rpmsg_virtio_send_offchannel_raw+0x122>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 80106a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106ac:	4618      	mov	r0, r3
 80106ae:	f000 fc5a 	bl	8010f66 <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	3358      	adds	r3, #88	; 0x58
 80106b6:	4618      	mov	r0, r3
 80106b8:	f7ff fddc 	bl	8010274 <metal_mutex_release>

	return size;
 80106bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80106be:	4618      	mov	r0, r3
 80106c0:	3740      	adds	r7, #64	; 0x40
 80106c2:	46bd      	mov	sp, r7
 80106c4:	bd80      	pop	{r7, pc}
 80106c6:	bf00      	nop
 80106c8:	fffff82c 	.word	0xfffff82c
 80106cc:	fffff82b 	.word	0xfffff82b
 80106d0:	fffff82e 	.word	0xfffff82e

080106d4 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 80106d4:	b480      	push	{r7}
 80106d6:	b083      	sub	sp, #12
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
	(void)vq;
}
 80106dc:	bf00      	nop
 80106de:	370c      	adds	r7, #12
 80106e0:	46bd      	mov	sp, r7
 80106e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e6:	4770      	bx	lr

080106e8 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 80106e8:	b590      	push	{r4, r7, lr}
 80106ea:	b08d      	sub	sp, #52	; 0x34
 80106ec:	af02      	add	r7, sp, #8
 80106ee:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 80106f6:	6a3b      	ldr	r3, [r7, #32]
 80106f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106fa:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
 80106fc:	69fb      	ldr	r3, [r7, #28]
 80106fe:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	unsigned long len;
	unsigned short idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 8010700:	69bb      	ldr	r3, [r7, #24]
 8010702:	3358      	adds	r3, #88	; 0x58
 8010704:	4618      	mov	r0, r3
 8010706:	f7ff fdaa 	bl	801025e <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = (struct rpmsg_hdr *)rpmsg_virtio_get_rx_buffer(rvdev,
 801070a:	f107 020a 	add.w	r2, r7, #10
 801070e:	f107 030c 	add.w	r3, r7, #12
 8010712:	4619      	mov	r1, r3
 8010714:	69f8      	ldr	r0, [r7, #28]
 8010716:	f7ff fefa 	bl	801050e <rpmsg_virtio_get_rx_buffer>
 801071a:	6278      	str	r0, [r7, #36]	; 0x24
								&len, &idx);

	metal_mutex_release(&rdev->lock);
 801071c:	69bb      	ldr	r3, [r7, #24]
 801071e:	3358      	adds	r3, #88	; 0x58
 8010720:	4618      	mov	r0, r3
 8010722:	f7ff fda7 	bl	8010274 <metal_mutex_release>

	while (rp_hdr) {
 8010726:	e04c      	b.n	80107c2 <rpmsg_virtio_rx_callback+0xda>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 8010728:	69bb      	ldr	r3, [r7, #24]
 801072a:	3358      	adds	r3, #88	; 0x58
 801072c:	4618      	mov	r0, r3
 801072e:	f7ff fd96 	bl	801025e <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 8010732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010734:	685b      	ldr	r3, [r3, #4]
 8010736:	4619      	mov	r1, r3
 8010738:	69b8      	ldr	r0, [r7, #24]
 801073a:	f7ff fe1a 	bl	8010372 <rpmsg_get_ept_from_addr>
 801073e:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
 8010740:	69bb      	ldr	r3, [r7, #24]
 8010742:	3358      	adds	r3, #88	; 0x58
 8010744:	4618      	mov	r0, r3
 8010746:	f7ff fd95 	bl	8010274 <metal_mutex_release>

		if (!ept)
 801074a:	697b      	ldr	r3, [r7, #20]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d03c      	beq.n	80107ca <rpmsg_virtio_rx_callback+0xe2>
			/* Fatal error no endpoint for the given dst addr. */
			return;

		if (ept->dest_addr == RPMSG_ADDR_ANY) {
 8010750:	697b      	ldr	r3, [r7, #20]
 8010752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010758:	d103      	bne.n	8010762 <rpmsg_virtio_rx_callback+0x7a>
			/*
			 * First message received from the remote side,
			 * update channel destination address
			 */
			ept->dest_addr = rp_hdr->src;
 801075a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801075c:	681a      	ldr	r2, [r3, #0]
 801075e:	697b      	ldr	r3, [r7, #20]
 8010760:	629a      	str	r2, [r3, #40]	; 0x28
		}
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 8010762:	697b      	ldr	r3, [r7, #20]
 8010764:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8010766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010768:	f103 0110 	add.w	r1, r3, #16
				   rp_hdr->len, ept->addr, ept->priv);
 801076c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801076e:	899b      	ldrh	r3, [r3, #12]
 8010770:	b29b      	uxth	r3, r3
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 8010772:	4618      	mov	r0, r3
 8010774:	697b      	ldr	r3, [r7, #20]
 8010776:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010778:	697b      	ldr	r3, [r7, #20]
 801077a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801077c:	9300      	str	r3, [sp, #0]
 801077e:	4613      	mov	r3, r2
 8010780:	4602      	mov	r2, r0
 8010782:	6978      	ldr	r0, [r7, #20]
 8010784:	47a0      	blx	r4
 8010786:	6138      	str	r0, [r7, #16]

		RPMSG_ASSERT(status == RPMSG_SUCCESS,
 8010788:	693b      	ldr	r3, [r7, #16]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d000      	beq.n	8010790 <rpmsg_virtio_rx_callback+0xa8>
 801078e:	e7fe      	b.n	801078e <rpmsg_virtio_rx_callback+0xa6>
			     "unexpected callback status\n");
		metal_mutex_acquire(&rdev->lock);
 8010790:	69bb      	ldr	r3, [r7, #24]
 8010792:	3358      	adds	r3, #88	; 0x58
 8010794:	4618      	mov	r0, r3
 8010796:	f7ff fd62 	bl	801025e <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 801079a:	68fa      	ldr	r2, [r7, #12]
 801079c:	897b      	ldrh	r3, [r7, #10]
 801079e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80107a0:	69f8      	ldr	r0, [r7, #28]
 80107a2:	f7ff fe46 	bl	8010432 <rpmsg_virtio_return_buffer>

		rp_hdr = (struct rpmsg_hdr *)
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 80107a6:	f107 020a 	add.w	r2, r7, #10
 80107aa:	f107 030c 	add.w	r3, r7, #12
 80107ae:	4619      	mov	r1, r3
 80107b0:	69f8      	ldr	r0, [r7, #28]
 80107b2:	f7ff feac 	bl	801050e <rpmsg_virtio_get_rx_buffer>
 80107b6:	6278      	str	r0, [r7, #36]	; 0x24
		metal_mutex_release(&rdev->lock);
 80107b8:	69bb      	ldr	r3, [r7, #24]
 80107ba:	3358      	adds	r3, #88	; 0x58
 80107bc:	4618      	mov	r0, r3
 80107be:	f7ff fd59 	bl	8010274 <metal_mutex_release>
	while (rp_hdr) {
 80107c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d1af      	bne.n	8010728 <rpmsg_virtio_rx_callback+0x40>
 80107c8:	e000      	b.n	80107cc <rpmsg_virtio_rx_callback+0xe4>
			return;
 80107ca:	bf00      	nop
	}
}
 80107cc:	372c      	adds	r7, #44	; 0x2c
 80107ce:	46bd      	mov	sp, r7
 80107d0:	bd90      	pop	{r4, r7, pc}

080107d2 <rpmsg_virtio_ns_callback>:
#pragma push
#pragma O0
#endif
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 80107d2:	b580      	push	{r7, lr}
 80107d4:	b092      	sub	sp, #72	; 0x48
 80107d6:	af00      	add	r7, sp, #0
 80107d8:	60f8      	str	r0, [r7, #12]
 80107da:	60b9      	str	r1, [r7, #8]
 80107dc:	607a      	str	r2, [r7, #4]
 80107de:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	6a1b      	ldr	r3, [r3, #32]
 80107e4:	647b      	str	r3, [r7, #68]	; 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 80107e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107e8:	643b      	str	r3, [r7, #64]	; 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
 80107ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80107ee:	63fb      	str	r3, [r7, #60]	; 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = (struct rpmsg_ns_msg *)data;
 80107f0:	68bb      	ldr	r3, [r7, #8]
 80107f2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (len != sizeof(*ns_msg))
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	2b28      	cmp	r3, #40	; 0x28
 80107f8:	d001      	beq.n	80107fe <rpmsg_virtio_ns_callback+0x2c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 80107fa:	2300      	movs	r3, #0
 80107fc:	e057      	b.n	80108ae <rpmsg_virtio_ns_callback+0xdc>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 80107fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	metal_io_block_read(io,
 8010800:	4619      	mov	r1, r3
 8010802:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010804:	f7ff fcc4 	bl	8010190 <metal_io_virt_to_offset>
 8010808:	4601      	mov	r1, r0
 801080a:	f107 0210 	add.w	r2, r7, #16
 801080e:	2320      	movs	r3, #32
 8010810:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010812:	f7fe fc83 	bl	800f11c <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
 8010816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010818:	6a1b      	ldr	r3, [r3, #32]
 801081a:	637b      	str	r3, [r7, #52]	; 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 801081c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801081e:	3358      	adds	r3, #88	; 0x58
 8010820:	4618      	mov	r0, r3
 8010822:	f7ff fd1c 	bl	801025e <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 8010826:	f107 0110 	add.w	r1, r7, #16
 801082a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801082c:	f04f 32ff 	mov.w	r2, #4294967295
 8010830:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010832:	f7ff fb57 	bl	800fee4 <rpmsg_get_endpoint>
 8010836:	6338      	str	r0, [r7, #48]	; 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 8010838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801083a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801083c:	f003 0301 	and.w	r3, r3, #1
 8010840:	2b00      	cmp	r3, #0
 8010842:	d017      	beq.n	8010874 <rpmsg_virtio_ns_callback+0xa2>
		if (_ept)
 8010844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010846:	2b00      	cmp	r3, #0
 8010848:	d003      	beq.n	8010852 <rpmsg_virtio_ns_callback+0x80>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 801084a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801084c:	f04f 32ff 	mov.w	r2, #4294967295
 8010850:	629a      	str	r2, [r3, #40]	; 0x28
		metal_mutex_release(&rdev->lock);
 8010852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010854:	3358      	adds	r3, #88	; 0x58
 8010856:	4618      	mov	r0, r3
 8010858:	f7ff fd0c 	bl	8010274 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 801085c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801085e:	2b00      	cmp	r3, #0
 8010860:	d024      	beq.n	80108ac <rpmsg_virtio_ns_callback+0xda>
 8010862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010866:	2b00      	cmp	r3, #0
 8010868:	d020      	beq.n	80108ac <rpmsg_virtio_ns_callback+0xda>
			_ept->ns_unbind_cb(ept);
 801086a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801086e:	68f8      	ldr	r0, [r7, #12]
 8010870:	4798      	blx	r3
 8010872:	e01b      	b.n	80108ac <rpmsg_virtio_ns_callback+0xda>
	} else {
		if (!_ept) {
 8010874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010876:	2b00      	cmp	r3, #0
 8010878:	d110      	bne.n	801089c <rpmsg_virtio_ns_callback+0xca>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 801087a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801087c:	3358      	adds	r3, #88	; 0x58
 801087e:	4618      	mov	r0, r3
 8010880:	f7ff fcf8 	bl	8010274 <metal_mutex_release>
			if (rdev->ns_bind_cb)
 8010884:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010888:	2b00      	cmp	r3, #0
 801088a:	d00f      	beq.n	80108ac <rpmsg_virtio_ns_callback+0xda>
				rdev->ns_bind_cb(rdev, name, dest);
 801088c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801088e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010890:	f107 0110 	add.w	r1, r7, #16
 8010894:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010896:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010898:	4798      	blx	r3
 801089a:	e007      	b.n	80108ac <rpmsg_virtio_ns_callback+0xda>
		} else {
			_ept->dest_addr = dest;
 801089c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801089e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80108a0:	629a      	str	r2, [r3, #40]	; 0x28
			metal_mutex_release(&rdev->lock);
 80108a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80108a4:	3358      	adds	r3, #88	; 0x58
 80108a6:	4618      	mov	r0, r3
 80108a8:	f7ff fce4 	bl	8010274 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 80108ac:	2300      	movs	r3, #0
}
 80108ae:	4618      	mov	r0, r3
 80108b0:	3748      	adds	r7, #72	; 0x48
 80108b2:	46bd      	mov	sp, r7
 80108b4:	bd80      	pop	{r7, pc}
	...

080108b8 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 80108b8:	b580      	push	{r7, lr}
 80108ba:	b094      	sub	sp, #80	; 0x50
 80108bc:	af02      	add	r7, sp, #8
 80108be:	60f8      	str	r0, [r7, #12]
 80108c0:	60b9      	str	r1, [r7, #8]
 80108c2:	607a      	str	r2, [r7, #4]
 80108c4:	603b      	str	r3, [r7, #0]
	vqcallback callback[RPMSG_NUM_VRINGS];
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	63bb      	str	r3, [r7, #56]	; 0x38
	memset(rdev, 0, sizeof(*rdev));
 80108ca:	2264      	movs	r2, #100	; 0x64
 80108cc:	2100      	movs	r1, #0
 80108ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80108d0:	f001 fbc4 	bl	801205c <memset>
	metal_mutex_init(&rdev->lock);
 80108d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108d6:	3358      	adds	r3, #88	; 0x58
 80108d8:	4618      	mov	r0, r3
 80108da:	f7ff fcb5 	bl	8010248 <metal_mutex_init>
	rvdev->vdev = vdev;
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	68ba      	ldr	r2, [r7, #8]
 80108e2:	665a      	str	r2, [r3, #100]	; 0x64
	rdev->ns_bind_cb = ns_bind_cb;
 80108e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108e6:	687a      	ldr	r2, [r7, #4]
 80108e8:	65da      	str	r2, [r3, #92]	; 0x5c
	vdev->priv = rvdev;
 80108ea:	68bb      	ldr	r3, [r7, #8]
 80108ec:	68fa      	ldr	r2, [r7, #12]
 80108ee:	625a      	str	r2, [r3, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 80108f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108f2:	4a5d      	ldr	r2, [pc, #372]	; (8010a68 <rpmsg_init_vdev+0x1b0>)
 80108f4:	661a      	str	r2, [r3, #96]	; 0x60
	role = rpmsg_virtio_get_role(rvdev);
 80108f6:	68f8      	ldr	r0, [r7, #12]
 80108f8:	f7ff fce4 	bl	80102c4 <rpmsg_virtio_get_role>
 80108fc:	6378      	str	r0, [r7, #52]	; 0x34

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 80108fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010900:	2b00      	cmp	r3, #0
 8010902:	d120      	bne.n	8010946 <rpmsg_init_vdev+0x8e>
		/*
		 * Since device is RPMSG Remote so we need to manage the
		 * shared buffers. Create shared memory pool to handle buffers.
		 */
		if (!shpool)
 8010904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010906:	2b00      	cmp	r3, #0
 8010908:	d101      	bne.n	801090e <rpmsg_init_vdev+0x56>
			return RPMSG_ERR_PARAM;
 801090a:	4b58      	ldr	r3, [pc, #352]	; (8010a6c <rpmsg_init_vdev+0x1b4>)
 801090c:	e0a7      	b.n	8010a5e <rpmsg_init_vdev+0x1a6>
		if (!shpool->size)
 801090e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010910:	689b      	ldr	r3, [r3, #8]
 8010912:	2b00      	cmp	r3, #0
 8010914:	d101      	bne.n	801091a <rpmsg_init_vdev+0x62>
			return RPMSG_ERR_NO_BUFF;
 8010916:	4b56      	ldr	r3, [pc, #344]	; (8010a70 <rpmsg_init_vdev+0x1b8>)
 8010918:	e0a1      	b.n	8010a5e <rpmsg_init_vdev+0x1a6>
		rvdev->shpool = shpool;
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801091e:	675a      	str	r2, [r3, #116]	; 0x74

		vq_names[0] = "rx_vq";
 8010920:	4b54      	ldr	r3, [pc, #336]	; (8010a74 <rpmsg_init_vdev+0x1bc>)
 8010922:	623b      	str	r3, [r7, #32]
		vq_names[1] = "tx_vq";
 8010924:	4b54      	ldr	r3, [pc, #336]	; (8010a78 <rpmsg_init_vdev+0x1c0>)
 8010926:	627b      	str	r3, [r7, #36]	; 0x24
		callback[0] = rpmsg_virtio_rx_callback;
 8010928:	4b54      	ldr	r3, [pc, #336]	; (8010a7c <rpmsg_init_vdev+0x1c4>)
 801092a:	61bb      	str	r3, [r7, #24]
		callback[1] = rpmsg_virtio_tx_callback;
 801092c:	4b54      	ldr	r3, [pc, #336]	; (8010a80 <rpmsg_init_vdev+0x1c8>)
 801092e:	61fb      	str	r3, [r7, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
 8010930:	68bb      	ldr	r3, [r7, #8]
 8010932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010934:	681a      	ldr	r2, [r3, #0]
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	669a      	str	r2, [r3, #104]	; 0x68
		rvdev->svq  = vdev->vrings_info[1].vq;
 801093a:	68bb      	ldr	r3, [r7, #8]
 801093c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801093e:	3318      	adds	r3, #24
 8010940:	681a      	ldr	r2, [r3, #0]
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	66da      	str	r2, [r3, #108]	; 0x6c
		callback[1] = rpmsg_virtio_rx_callback;
		rvdev->rvq  = vdev->vrings_info[1].vq;
		rvdev->svq  = vdev->vrings_info[0].vq;
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	683a      	ldr	r2, [r7, #0]
 801094a:	671a      	str	r2, [r3, #112]	; 0x70
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 801094c:	f107 0220 	add.w	r2, r7, #32
 8010950:	f107 0318 	add.w	r3, r7, #24
 8010954:	9300      	str	r3, [sp, #0]
 8010956:	4613      	mov	r3, r2
 8010958:	2202      	movs	r2, #2
 801095a:	2100      	movs	r1, #0
 801095c:	68f8      	ldr	r0, [r7, #12]
 801095e:	f7ff fcf3 	bl	8010348 <rpmsg_virtio_create_virtqueues>
 8010962:	6478      	str	r0, [r7, #68]	; 0x44
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 8010964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010966:	2b00      	cmp	r3, #0
 8010968:	d001      	beq.n	801096e <rpmsg_init_vdev+0xb6>
		return status;
 801096a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801096c:	e077      	b.n	8010a5e <rpmsg_init_vdev+0x1a6>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 801096e:	2300      	movs	r3, #0
 8010970:	643b      	str	r3, [r7, #64]	; 0x40
 8010972:	e00f      	b.n	8010994 <rpmsg_init_vdev+0xdc>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 8010974:	68bb      	ldr	r3, [r7, #8]
 8010976:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010978:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801097a:	4613      	mov	r3, r2
 801097c:	005b      	lsls	r3, r3, #1
 801097e:	4413      	add	r3, r2
 8010980:	00db      	lsls	r3, r3, #3
 8010982:	440b      	add	r3, r1
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	62bb      	str	r3, [r7, #40]	; 0x28
		vq->shm_io = shm_io;
 8010988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801098a:	683a      	ldr	r2, [r7, #0]
 801098c:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 801098e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010990:	3301      	adds	r3, #1
 8010992:	643b      	str	r3, [r7, #64]	; 0x40
 8010994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010996:	2b01      	cmp	r3, #1
 8010998:	d9ec      	bls.n	8010974 <rpmsg_init_vdev+0xbc>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 801099a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801099c:	2b00      	cmp	r3, #0
 801099e:	d137      	bne.n	8010a10 <rpmsg_init_vdev+0x158>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
 80109a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80109a4:	617b      	str	r3, [r7, #20]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 80109a6:	2300      	movs	r3, #0
 80109a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80109aa:	e02a      	b.n	8010a02 <rpmsg_init_vdev+0x14a>
			/* Initialize TX virtqueue buffers for remote device */
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
 80109ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80109b0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80109b2:	f7ff fcef 	bl	8010394 <rpmsg_virtio_shm_pool_get_buffer>
 80109b6:	6338      	str	r0, [r7, #48]	; 0x30
							RPMSG_BUFFER_SIZE);

			if (!buffer) {
 80109b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d101      	bne.n	80109c2 <rpmsg_init_vdev+0x10a>
				return RPMSG_ERR_NO_BUFF;
 80109be:	4b2c      	ldr	r3, [pc, #176]	; (8010a70 <rpmsg_init_vdev+0x1b8>)
 80109c0:	e04d      	b.n	8010a5e <rpmsg_init_vdev+0x1a6>
			}

			vqbuf.buf = buffer;
 80109c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109c4:	613b      	str	r3, [r7, #16]

			metal_io_block_set(shm_io,
 80109c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80109c8:	6838      	ldr	r0, [r7, #0]
 80109ca:	f7ff fbe1 	bl	8010190 <metal_io_virt_to_offset>
 80109ce:	4601      	mov	r1, r0
 80109d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80109d4:	2200      	movs	r2, #0
 80109d6:	6838      	ldr	r0, [r7, #0]
 80109d8:	f7fe fc8d 	bl	800f2f6 <metal_io_block_set>
					   metal_io_virt_to_offset(shm_io,
								   buffer),
					   0x00, RPMSG_BUFFER_SIZE);
			status =
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80109e0:	f107 0110 	add.w	r1, r7, #16
 80109e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109e6:	9300      	str	r3, [sp, #0]
 80109e8:	2301      	movs	r3, #1
 80109ea:	2200      	movs	r2, #0
 80109ec:	f000 f9fd 	bl	8010dea <virtqueue_add_buffer>
 80109f0:	6478      	str	r0, [r7, #68]	; 0x44
						     buffer);

			if (status != RPMSG_SUCCESS) {
 80109f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d001      	beq.n	80109fc <rpmsg_init_vdev+0x144>
				return status;
 80109f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109fa:	e030      	b.n	8010a5e <rpmsg_init_vdev+0x1a6>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 80109fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109fe:	3301      	adds	r3, #1
 8010a00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010a06:	895b      	ldrh	r3, [r3, #10]
 8010a08:	461a      	mov	r2, r3
 8010a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a0c:	4293      	cmp	r3, r2
 8010a0e:	d3cd      	bcc.n	80109ac <rpmsg_init_vdev+0xf4>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 8010a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a12:	4618      	mov	r0, r3
 8010a14:	f7ff fbab 	bl	801016e <metal_list_init>

	dev_features = rpmsg_virtio_get_features(rvdev);
 8010a18:	68f8      	ldr	r0, [r7, #12]
 8010a1a:	f7ff fc84 	bl	8010326 <rpmsg_virtio_get_features>
 8010a1e:	62f8      	str	r0, [r7, #44]	; 0x2c

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
 8010a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a22:	f003 0301 	and.w	r3, r3, #1
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d011      	beq.n	8010a4e <rpmsg_init_vdev+0x196>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 8010a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a2c:	f103 0008 	add.w	r0, r3, #8
 8010a30:	2300      	movs	r3, #0
 8010a32:	9301      	str	r3, [sp, #4]
 8010a34:	4b13      	ldr	r3, [pc, #76]	; (8010a84 <rpmsg_init_vdev+0x1cc>)
 8010a36:	9300      	str	r3, [sp, #0]
 8010a38:	2335      	movs	r3, #53	; 0x35
 8010a3a:	2235      	movs	r2, #53	; 0x35
 8010a3c:	4912      	ldr	r1, [pc, #72]	; (8010a88 <rpmsg_init_vdev+0x1d0>)
 8010a3e:	f7ff fc24 	bl	801028a <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 8010a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a44:	3308      	adds	r3, #8
 8010a46:	4619      	mov	r1, r3
 8010a48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010a4a:	f7ff facd 	bl	800ffe8 <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
 8010a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d103      	bne.n	8010a5c <rpmsg_init_vdev+0x1a4>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
 8010a54:	2104      	movs	r1, #4
 8010a56:	68f8      	ldr	r0, [r7, #12]
 8010a58:	f7ff fc41 	bl	80102de <rpmsg_virtio_set_status>
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 8010a5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8010a5e:	4618      	mov	r0, r3
 8010a60:	3748      	adds	r7, #72	; 0x48
 8010a62:	46bd      	mov	sp, r7
 8010a64:	bd80      	pop	{r7, pc}
 8010a66:	bf00      	nop
 8010a68:	08010585 	.word	0x08010585
 8010a6c:	fffff82d 	.word	0xfffff82d
 8010a70:	fffff82e 	.word	0xfffff82e
 8010a74:	08016c60 	.word	0x08016c60
 8010a78:	08016c68 	.word	0x08016c68
 8010a7c:	080106e9 	.word	0x080106e9
 8010a80:	080106d5 	.word	0x080106d5
 8010a84:	080107d3 	.word	0x080107d3
 8010a88:	08016c70 	.word	0x08016c70

08010a8c <metal_machine_cache_flush>:
{
  return 0;
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 8010a8c:	b480      	push	{r7}
 8010a8e:	b083      	sub	sp, #12
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
 8010a94:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 8010a96:	bf00      	nop
 8010a98:	370c      	adds	r7, #12
 8010a9a:	46bd      	mov	sp, r7
 8010a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa0:	4770      	bx	lr

08010aa2 <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 8010aa2:	b480      	push	{r7}
 8010aa4:	b083      	sub	sp, #12
 8010aa6:	af00      	add	r7, sp, #0
 8010aa8:	6078      	str	r0, [r7, #4]
 8010aaa:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 8010aac:	bf00      	nop
 8010aae:	370c      	adds	r7, #12
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab6:	4770      	bx	lr

08010ab8 <metal_machine_io_mem_map>:
{
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
 8010ab8:	b480      	push	{r7}
 8010aba:	b085      	sub	sp, #20
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	60f8      	str	r0, [r7, #12]
 8010ac0:	60b9      	str	r1, [r7, #8]
 8010ac2:	607a      	str	r2, [r7, #4]
 8010ac4:	603b      	str	r3, [r7, #0]
	(void)va;
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 8010ac6:	68fb      	ldr	r3, [r7, #12]
}
 8010ac8:	4618      	mov	r0, r3
 8010aca:	3714      	adds	r7, #20
 8010acc:	46bd      	mov	sp, r7
 8010ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad2:	4770      	bx	lr

08010ad4 <vring_size>:
 */
#define vring_used_event(vr)	((vr)->avail->ring[(vr)->num])
#define vring_avail_event(vr)	((vr)->used->ring[(vr)->num].id & 0xFFFF)

static inline int vring_size(unsigned int num, unsigned long align)
{
 8010ad4:	b480      	push	{r7}
 8010ad6:	b085      	sub	sp, #20
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
 8010adc:	6039      	str	r1, [r7, #0]
	int size;

	size = num * sizeof(struct vring_desc);
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	011b      	lsls	r3, r3, #4
 8010ae2:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	3303      	adds	r3, #3
 8010ae8:	005a      	lsls	r2, r3, #1
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	4413      	add	r3, r2
 8010aee:	60fb      	str	r3, [r7, #12]
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
 8010af0:	68fa      	ldr	r2, [r7, #12]
 8010af2:	683b      	ldr	r3, [r7, #0]
 8010af4:	4413      	add	r3, r2
 8010af6:	1e5a      	subs	r2, r3, #1
 8010af8:	683b      	ldr	r3, [r7, #0]
 8010afa:	425b      	negs	r3, r3
 8010afc:	4013      	ands	r3, r2
 8010afe:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	00da      	lsls	r2, r3, #3
	size += sizeof(struct vring_used) +
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	4413      	add	r3, r2
 8010b08:	3306      	adds	r3, #6
 8010b0a:	60fb      	str	r3, [r7, #12]

	return size;
 8010b0c:	68fb      	ldr	r3, [r7, #12]
}
 8010b0e:	4618      	mov	r0, r3
 8010b10:	3714      	adds	r7, #20
 8010b12:	46bd      	mov	sp, r7
 8010b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b18:	4770      	bx	lr

08010b1a <metal_io_virt_to_offset>:
{
 8010b1a:	b480      	push	{r7}
 8010b1c:	b085      	sub	sp, #20
 8010b1e:	af00      	add	r7, sp, #0
 8010b20:	6078      	str	r0, [r7, #4]
 8010b22:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	683a      	ldr	r2, [r7, #0]
 8010b2a:	1ad3      	subs	r3, r2, r3
 8010b2c:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	689b      	ldr	r3, [r3, #8]
 8010b32:	68fa      	ldr	r2, [r7, #12]
 8010b34:	429a      	cmp	r2, r3
 8010b36:	d201      	bcs.n	8010b3c <metal_io_virt_to_offset+0x22>
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	e001      	b.n	8010b40 <metal_io_virt_to_offset+0x26>
 8010b3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010b40:	4618      	mov	r0, r3
 8010b42:	3714      	adds	r7, #20
 8010b44:	46bd      	mov	sp, r7
 8010b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b4a:	4770      	bx	lr

08010b4c <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 8010b4c:	b590      	push	{r4, r7, lr}
 8010b4e:	b091      	sub	sp, #68	; 0x44
 8010b50:	af04      	add	r7, sp, #16
 8010b52:	60f8      	str	r0, [r7, #12]
 8010b54:	60b9      	str	r1, [r7, #8]
 8010b56:	607a      	str	r2, [r7, #4]
 8010b58:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b5e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (nvqs > num_vrings)
 8010b60:	687a      	ldr	r2, [r7, #4]
 8010b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b64:	429a      	cmp	r2, r3
 8010b66:	d902      	bls.n	8010b6e <virtio_create_virtqueues+0x22>
		return -ERROR_VQUEUE_INVLD_PARAM;
 8010b68:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 8010b6c:	e053      	b.n	8010c16 <virtio_create_virtqueues+0xca>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 8010b6e:	2300      	movs	r3, #0
 8010b70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010b72:	e04b      	b.n	8010c0c <virtio_create_virtqueues+0xc0>
		vring_info = &vdev->vrings_info[i];
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010b78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010b7a:	4613      	mov	r3, r2
 8010b7c:	005b      	lsls	r3, r3, #1
 8010b7e:	4413      	add	r3, r2
 8010b80:	00db      	lsls	r3, r3, #3
 8010b82:	440b      	add	r3, r1
 8010b84:	627b      	str	r3, [r7, #36]	; 0x24

		vring_alloc = &vring_info->info;
 8010b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b88:	3304      	adds	r3, #4
 8010b8a:	623b      	str	r3, [r7, #32]
#ifndef VIRTIO_SLAVE_ONLY
		if (vdev->role == VIRTIO_DEV_MASTER) {
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	699b      	ldr	r3, [r3, #24]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d118      	bne.n	8010bc6 <virtio_create_virtqueues+0x7a>
			size_t offset;
			struct metal_io_region *io = vring_info->io;
 8010b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b96:	695b      	ldr	r3, [r3, #20]
 8010b98:	61fb      	str	r3, [r7, #28]

			offset = metal_io_virt_to_offset(io,
 8010b9a:	6a3b      	ldr	r3, [r7, #32]
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	4619      	mov	r1, r3
 8010ba0:	69f8      	ldr	r0, [r7, #28]
 8010ba2:	f7ff ffba 	bl	8010b1a <metal_io_virt_to_offset>
 8010ba6:	61b8      	str	r0, [r7, #24]
							 vring_alloc->vaddr);
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
 8010ba8:	6a3b      	ldr	r3, [r7, #32]
 8010baa:	891b      	ldrh	r3, [r3, #8]
			metal_io_block_set(io, offset, 0,
 8010bac:	461a      	mov	r2, r3
 8010bae:	6a3b      	ldr	r3, [r7, #32]
 8010bb0:	685b      	ldr	r3, [r3, #4]
 8010bb2:	4619      	mov	r1, r3
 8010bb4:	4610      	mov	r0, r2
 8010bb6:	f7ff ff8d 	bl	8010ad4 <vring_size>
 8010bba:	4603      	mov	r3, r0
 8010bbc:	2200      	movs	r2, #0
 8010bbe:	69b9      	ldr	r1, [r7, #24]
 8010bc0:	69f8      	ldr	r0, [r7, #28]
 8010bc2:	f7fe fb98 	bl	800f2f6 <metal_io_block_set>
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8010bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bc8:	b298      	uxth	r0, r3
 8010bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bcc:	009b      	lsls	r3, r3, #2
 8010bce:	683a      	ldr	r2, [r7, #0]
 8010bd0:	4413      	add	r3, r2
 8010bd2:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
 8010bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bd6:	009b      	lsls	r3, r3, #2
 8010bd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010bda:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8010bdc:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
 8010bde:	68fa      	ldr	r2, [r7, #12]
 8010be0:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8010be2:	6a12      	ldr	r2, [r2, #32]
 8010be4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010be6:	6809      	ldr	r1, [r1, #0]
 8010be8:	9102      	str	r1, [sp, #8]
 8010bea:	9201      	str	r2, [sp, #4]
 8010bec:	9300      	str	r3, [sp, #0]
 8010bee:	6a3b      	ldr	r3, [r7, #32]
 8010bf0:	4622      	mov	r2, r4
 8010bf2:	4601      	mov	r1, r0
 8010bf4:	68f8      	ldr	r0, [r7, #12]
 8010bf6:	f000 f8c4 	bl	8010d82 <virtqueue_create>
 8010bfa:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
 8010bfc:	697b      	ldr	r3, [r7, #20]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d001      	beq.n	8010c06 <virtio_create_virtqueues+0xba>
			return ret;
 8010c02:	697b      	ldr	r3, [r7, #20]
 8010c04:	e007      	b.n	8010c16 <virtio_create_virtqueues+0xca>
	for (i = 0; i < nvqs; i++) {
 8010c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c08:	3301      	adds	r3, #1
 8010c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010c0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	429a      	cmp	r2, r3
 8010c12:	d3af      	bcc.n	8010b74 <virtio_create_virtqueues+0x28>
	}
	return 0;
 8010c14:	2300      	movs	r3, #0
}
 8010c16:	4618      	mov	r0, r3
 8010c18:	3734      	adds	r7, #52	; 0x34
 8010c1a:	46bd      	mov	sp, r7
 8010c1c:	bd90      	pop	{r4, r7, pc}

08010c1e <vring_init>:

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 8010c1e:	b480      	push	{r7}
 8010c20:	b085      	sub	sp, #20
 8010c22:	af00      	add	r7, sp, #0
 8010c24:	60f8      	str	r0, [r7, #12]
 8010c26:	60b9      	str	r1, [r7, #8]
 8010c28:	607a      	str	r2, [r7, #4]
 8010c2a:	603b      	str	r3, [r7, #0]
	vr->num = num;
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	68ba      	ldr	r2, [r7, #8]
 8010c30:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	687a      	ldr	r2, [r7, #4]
 8010c36:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 8010c38:	68bb      	ldr	r3, [r7, #8]
 8010c3a:	011b      	lsls	r3, r3, #4
 8010c3c:	687a      	ldr	r2, [r7, #4]
 8010c3e:	441a      	add	r2, r3
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	689a      	ldr	r2, [r3, #8]
 8010c48:	68bb      	ldr	r3, [r7, #8]
 8010c4a:	005b      	lsls	r3, r3, #1
 8010c4c:	4413      	add	r3, r2
 8010c4e:	3304      	adds	r3, #4
 8010c50:	461a      	mov	r2, r3
 8010c52:	683b      	ldr	r3, [r7, #0]
 8010c54:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
 8010c56:	1c5a      	adds	r2, r3, #1
 8010c58:	683b      	ldr	r3, [r7, #0]
 8010c5a:	425b      	negs	r3, r3
 8010c5c:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
 8010c5e:	461a      	mov	r2, r3
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	60da      	str	r2, [r3, #12]
}
 8010c64:	bf00      	nop
 8010c66:	3714      	adds	r7, #20
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6e:	4770      	bx	lr

08010c70 <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 8010c70:	b480      	push	{r7}
 8010c72:	b083      	sub	sp, #12
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	4603      	mov	r3, r0
 8010c78:	80fb      	strh	r3, [r7, #6]
 8010c7a:	460b      	mov	r3, r1
 8010c7c:	80bb      	strh	r3, [r7, #4]
 8010c7e:	4613      	mov	r3, r2
 8010c80:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
 8010c82:	88ba      	ldrh	r2, [r7, #4]
 8010c84:	88fb      	ldrh	r3, [r7, #6]
 8010c86:	1ad3      	subs	r3, r2, r3
 8010c88:	b29b      	uxth	r3, r3
 8010c8a:	3b01      	subs	r3, #1
 8010c8c:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
 8010c8e:	88b9      	ldrh	r1, [r7, #4]
 8010c90:	887b      	ldrh	r3, [r7, #2]
 8010c92:	1acb      	subs	r3, r1, r3
 8010c94:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
 8010c96:	429a      	cmp	r2, r3
 8010c98:	bf34      	ite	cc
 8010c9a:	2301      	movcc	r3, #1
 8010c9c:	2300      	movcs	r3, #0
 8010c9e:	b2db      	uxtb	r3, r3
}
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	370c      	adds	r7, #12
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010caa:	4770      	bx	lr

08010cac <metal_io_virt_to_offset>:
{
 8010cac:	b480      	push	{r7}
 8010cae:	b085      	sub	sp, #20
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
 8010cb4:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	683a      	ldr	r2, [r7, #0]
 8010cbc:	1ad3      	subs	r3, r2, r3
 8010cbe:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	689b      	ldr	r3, [r3, #8]
 8010cc4:	68fa      	ldr	r2, [r7, #12]
 8010cc6:	429a      	cmp	r2, r3
 8010cc8:	d201      	bcs.n	8010cce <metal_io_virt_to_offset+0x22>
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	e001      	b.n	8010cd2 <metal_io_virt_to_offset+0x26>
 8010cce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	3714      	adds	r7, #20
 8010cd6:	46bd      	mov	sp, r7
 8010cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cdc:	4770      	bx	lr

08010cde <metal_io_phys>:
{
 8010cde:	b480      	push	{r7}
 8010ce0:	b085      	sub	sp, #20
 8010ce2:	af00      	add	r7, sp, #0
 8010ce4:	6078      	str	r0, [r7, #4]
 8010ce6:	6039      	str	r1, [r7, #0]
	unsigned long page = (io->page_shift >=
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	68db      	ldr	r3, [r3, #12]
			     0 : offset >> io->page_shift);
 8010cec:	2b1f      	cmp	r3, #31
 8010cee:	d805      	bhi.n	8010cfc <metal_io_phys+0x1e>
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	68db      	ldr	r3, [r3, #12]
 8010cf4:	683a      	ldr	r2, [r7, #0]
 8010cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8010cfa:	e000      	b.n	8010cfe <metal_io_phys+0x20>
 8010cfc:	2300      	movs	r3, #0
	unsigned long page = (io->page_shift >=
 8010cfe:	60fb      	str	r3, [r7, #12]
	return (io->physmap != NULL && offset <= io->size
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	685b      	ldr	r3, [r3, #4]
		: METAL_BAD_PHYS);
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d010      	beq.n	8010d2a <metal_io_phys+0x4c>
	return (io->physmap != NULL && offset <= io->size
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	689b      	ldr	r3, [r3, #8]
 8010d0c:	683a      	ldr	r2, [r7, #0]
 8010d0e:	429a      	cmp	r2, r3
 8010d10:	d80b      	bhi.n	8010d2a <metal_io_phys+0x4c>
		? io->physmap[page] + (offset & io->page_mask)
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	685a      	ldr	r2, [r3, #4]
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	009b      	lsls	r3, r3, #2
 8010d1a:	4413      	add	r3, r2
 8010d1c:	681a      	ldr	r2, [r3, #0]
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	6919      	ldr	r1, [r3, #16]
 8010d22:	683b      	ldr	r3, [r7, #0]
 8010d24:	400b      	ands	r3, r1
		: METAL_BAD_PHYS);
 8010d26:	4413      	add	r3, r2
 8010d28:	e001      	b.n	8010d2e <metal_io_phys+0x50>
 8010d2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010d2e:	4618      	mov	r0, r3
 8010d30:	3714      	adds	r7, #20
 8010d32:	46bd      	mov	sp, r7
 8010d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d38:	4770      	bx	lr

08010d3a <metal_io_virt_to_phys>:
{
 8010d3a:	b580      	push	{r7, lr}
 8010d3c:	b082      	sub	sp, #8
 8010d3e:	af00      	add	r7, sp, #0
 8010d40:	6078      	str	r0, [r7, #4]
 8010d42:	6039      	str	r1, [r7, #0]
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
 8010d44:	6839      	ldr	r1, [r7, #0]
 8010d46:	6878      	ldr	r0, [r7, #4]
 8010d48:	f7ff ffb0 	bl	8010cac <metal_io_virt_to_offset>
 8010d4c:	4603      	mov	r3, r0
 8010d4e:	4619      	mov	r1, r3
 8010d50:	6878      	ldr	r0, [r7, #4]
 8010d52:	f7ff ffc4 	bl	8010cde <metal_io_phys>
 8010d56:	4603      	mov	r3, r0
}
 8010d58:	4618      	mov	r0, r3
 8010d5a:	3708      	adds	r7, #8
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	bd80      	pop	{r7, pc}

08010d60 <virtqueue_virt_to_phys>:
}

/* Default implementation of V2P based on libmetal */
static inline metal_phys_addr_t virtqueue_virt_to_phys(struct virtqueue *vq,
						       void *buf)
{
 8010d60:	b580      	push	{r7, lr}
 8010d62:	b084      	sub	sp, #16
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	6078      	str	r0, [r7, #4]
 8010d68:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d6e:	60fb      	str	r3, [r7, #12]

	return metal_io_virt_to_phys(io, buf);
 8010d70:	6839      	ldr	r1, [r7, #0]
 8010d72:	68f8      	ldr	r0, [r7, #12]
 8010d74:	f7ff ffe1 	bl	8010d3a <metal_io_virt_to_phys>
 8010d78:	4603      	mov	r3, r0
}
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	3710      	adds	r7, #16
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	bd80      	pop	{r7, pc}

08010d82 <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 8010d82:	b580      	push	{r7, lr}
 8010d84:	b086      	sub	sp, #24
 8010d86:	af00      	add	r7, sp, #0
 8010d88:	60f8      	str	r0, [r7, #12]
 8010d8a:	607a      	str	r2, [r7, #4]
 8010d8c:	603b      	str	r3, [r7, #0]
 8010d8e:	460b      	mov	r3, r1
 8010d90:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
 8010d92:	2300      	movs	r3, #0
 8010d94:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 8010d96:	697b      	ldr	r3, [r7, #20]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d121      	bne.n	8010de0 <virtqueue_create+0x5e>
		vq->vq_dev = virt_dev;
 8010d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d9e:	68fa      	ldr	r2, [r7, #12]
 8010da0:	601a      	str	r2, [r3, #0]
		vq->vq_name =  name;
 8010da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010da4:	687a      	ldr	r2, [r7, #4]
 8010da6:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
 8010da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010daa:	897a      	ldrh	r2, [r7, #10]
 8010dac:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
 8010dae:	683b      	ldr	r3, [r7, #0]
 8010db0:	891a      	ldrh	r2, [r3, #8]
 8010db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010db4:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 8010db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010db8:	895a      	ldrh	r2, [r3, #10]
 8010dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dbc:	851a      	strh	r2, [r3, #40]	; 0x28
		vq->callback = callback;
 8010dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dc0:	6a3a      	ldr	r2, [r7, #32]
 8010dc2:	611a      	str	r2, [r3, #16]
		vq->notify = notify;
 8010dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010dc8:	615a      	str	r2, [r3, #20]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
 8010dca:	683b      	ldr	r3, [r7, #0]
 8010dcc:	6819      	ldr	r1, [r3, #0]
 8010dce:	683b      	ldr	r3, [r7, #0]
 8010dd0:	685b      	ldr	r3, [r3, #4]
 8010dd2:	461a      	mov	r2, r3
 8010dd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010dd6:	f000 f97a 	bl	80110ce <vq_ring_init>

		/* Disable callbacks - will be enabled by the application
		 * once initialization is completed.
		 */
		virtqueue_disable_cb(vq);
 8010dda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ddc:	f000 f899 	bl	8010f12 <virtqueue_disable_cb>
	}

	return (status);
 8010de0:	697b      	ldr	r3, [r7, #20]
}
 8010de2:	4618      	mov	r0, r3
 8010de4:	3718      	adds	r7, #24
 8010de6:	46bd      	mov	sp, r7
 8010de8:	bd80      	pop	{r7, pc}

08010dea <virtqueue_add_buffer>:
 *
 * @return                  - Function status
 */
int virtqueue_add_buffer(struct virtqueue *vq, struct virtqueue_buf *buf_list,
			 int readable, int writable, void *cookie)
{
 8010dea:	b580      	push	{r7, lr}
 8010dec:	b08a      	sub	sp, #40	; 0x28
 8010dee:	af02      	add	r7, sp, #8
 8010df0:	60f8      	str	r0, [r7, #12]
 8010df2:	60b9      	str	r1, [r7, #8]
 8010df4:	607a      	str	r2, [r7, #4]
 8010df6:	603b      	str	r3, [r7, #0]
	struct vq_desc_extra *dxp = NULL;
 8010df8:	2300      	movs	r3, #0
 8010dfa:	61fb      	str	r3, [r7, #28]
	int status = VQUEUE_SUCCESS;
 8010dfc:	2300      	movs	r3, #0
 8010dfe:	61bb      	str	r3, [r7, #24]
	uint16_t head_idx;
	uint16_t idx;
	int needed;

	needed = readable + writable;
 8010e00:	687a      	ldr	r2, [r7, #4]
 8010e02:	683b      	ldr	r3, [r7, #0]
 8010e04:	4413      	add	r3, r2
 8010e06:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(needed < 1, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(vq->vq_free_cnt == 0, status, ERROR_VRING_FULL);

	VQUEUE_BUSY(vq);

	if (status == VQUEUE_SUCCESS) {
 8010e08:	69bb      	ldr	r3, [r7, #24]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d12c      	bne.n	8010e68 <virtqueue_add_buffer+0x7e>
		VQASSERT(vq, cookie != NULL, "enqueuing with no cookie");

		head_idx = vq->vq_desc_head_idx;
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8010e12:	827b      	strh	r3, [r7, #18]
		VQ_RING_ASSERT_VALID_IDX(vq, head_idx);
		dxp = &vq->vq_descx[head_idx];
 8010e14:	8a7b      	ldrh	r3, [r7, #18]
 8010e16:	3307      	adds	r3, #7
 8010e18:	00db      	lsls	r3, r3, #3
 8010e1a:	68fa      	ldr	r2, [r7, #12]
 8010e1c:	4413      	add	r3, r2
 8010e1e:	61fb      	str	r3, [r7, #28]

		VQASSERT(vq, dxp->cookie == NULL,
			 "cookie already exists for index");

		dxp->cookie = cookie;
 8010e20:	69fb      	ldr	r3, [r7, #28]
 8010e22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e24:	601a      	str	r2, [r3, #0]
		dxp->ndescs = needed;
 8010e26:	697b      	ldr	r3, [r7, #20]
 8010e28:	b29a      	uxth	r2, r3
 8010e2a:	69fb      	ldr	r3, [r7, #28]
 8010e2c:	809a      	strh	r2, [r3, #4]

		/* Enqueue buffer onto the ring. */
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	69d9      	ldr	r1, [r3, #28]
 8010e32:	8a7a      	ldrh	r2, [r7, #18]
 8010e34:	683b      	ldr	r3, [r7, #0]
 8010e36:	9301      	str	r3, [sp, #4]
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	9300      	str	r3, [sp, #0]
 8010e3c:	68bb      	ldr	r3, [r7, #8]
 8010e3e:	68f8      	ldr	r0, [r7, #12]
 8010e40:	f000 f8a7 	bl	8010f92 <vq_ring_add_buffer>
 8010e44:	4603      	mov	r3, r0
 8010e46:	823b      	strh	r3, [r7, #16]
					 buf_list, readable, writable);

		vq->vq_desc_head_idx = idx;
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	8a3a      	ldrh	r2, [r7, #16]
 8010e4c:	861a      	strh	r2, [r3, #48]	; 0x30
		vq->vq_free_cnt -= needed;
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010e52:	697b      	ldr	r3, [r7, #20]
 8010e54:	b29b      	uxth	r3, r3
 8010e56:	1ad3      	subs	r3, r2, r3
 8010e58:	b29a      	uxth	r2, r3
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	851a      	strh	r2, [r3, #40]	; 0x28

		/*
		 * Update vring_avail control block fields so that other
		 * side can get buffer using it.
		 */
		vq_ring_update_avail(vq, head_idx);
 8010e5e:	8a7b      	ldrh	r3, [r7, #18]
 8010e60:	4619      	mov	r1, r3
 8010e62:	68f8      	ldr	r0, [r7, #12]
 8010e64:	f000 f966 	bl	8011134 <vq_ring_update_avail>
	}

	VQUEUE_IDLE(vq);

	return status;
 8010e68:	69bb      	ldr	r3, [r7, #24]
}
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	3720      	adds	r7, #32
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	bd80      	pop	{r7, pc}

08010e72 <virtqueue_get_buffer>:
 * @param idx           - index of the buffer
 *
 * @return              - Pointer to used buffer
 */
void *virtqueue_get_buffer(struct virtqueue *vq, uint32_t *len, uint16_t *idx)
{
 8010e72:	b580      	push	{r7, lr}
 8010e74:	b088      	sub	sp, #32
 8010e76:	af00      	add	r7, sp, #0
 8010e78:	60f8      	str	r0, [r7, #12]
 8010e7a:	60b9      	str	r1, [r7, #8]
 8010e7c:	607a      	str	r2, [r7, #4]
	struct vring_used_elem *uep;
	void *cookie;
	uint16_t used_idx, desc_idx;

	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d006      	beq.n	8010e92 <virtqueue_get_buffer+0x20>
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e8c:	885b      	ldrh	r3, [r3, #2]
 8010e8e:	429a      	cmp	r2, r3
 8010e90:	d101      	bne.n	8010e96 <virtqueue_get_buffer+0x24>
		return (NULL);
 8010e92:	2300      	movs	r3, #0
 8010e94:	e039      	b.n	8010f0a <virtqueue_get_buffer+0x98>

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e9a:	1c5a      	adds	r2, r3, #1
 8010e9c:	b291      	uxth	r1, r2
 8010e9e:	68fa      	ldr	r2, [r7, #12]
 8010ea0:	8651      	strh	r1, [r2, #50]	; 0x32
 8010ea2:	b21a      	sxth	r2, r3
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	895b      	ldrh	r3, [r3, #10]
 8010ea8:	3b01      	subs	r3, #1
 8010eaa:	b29b      	uxth	r3, r3
 8010eac:	b21b      	sxth	r3, r3
 8010eae:	4013      	ands	r3, r2
 8010eb0:	b21b      	sxth	r3, r3
 8010eb2:	83fb      	strh	r3, [r7, #30]
	uep = &vq->vq_ring.used->ring[used_idx];
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010eb8:	8bfb      	ldrh	r3, [r7, #30]
 8010eba:	00db      	lsls	r3, r3, #3
 8010ebc:	4413      	add	r3, r2
 8010ebe:	3304      	adds	r3, #4
 8010ec0:	61bb      	str	r3, [r7, #24]

	atomic_thread_fence(memory_order_seq_cst);
 8010ec2:	f3bf 8f5b 	dmb	ish

	desc_idx = (uint16_t)uep->id;
 8010ec6:	69bb      	ldr	r3, [r7, #24]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	82fb      	strh	r3, [r7, #22]
	if (len)
 8010ecc:	68bb      	ldr	r3, [r7, #8]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d003      	beq.n	8010eda <virtqueue_get_buffer+0x68>
		*len = uep->len;
 8010ed2:	69bb      	ldr	r3, [r7, #24]
 8010ed4:	685a      	ldr	r2, [r3, #4]
 8010ed6:	68bb      	ldr	r3, [r7, #8]
 8010ed8:	601a      	str	r2, [r3, #0]

	vq_ring_free_chain(vq, desc_idx);
 8010eda:	8afb      	ldrh	r3, [r7, #22]
 8010edc:	4619      	mov	r1, r3
 8010ede:	68f8      	ldr	r0, [r7, #12]
 8010ee0:	f000 f8ae 	bl	8011040 <vq_ring_free_chain>

	cookie = vq->vq_descx[desc_idx].cookie;
 8010ee4:	8afa      	ldrh	r2, [r7, #22]
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	3207      	adds	r2, #7
 8010eea:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8010eee:	613b      	str	r3, [r7, #16]
	vq->vq_descx[desc_idx].cookie = NULL;
 8010ef0:	8afa      	ldrh	r2, [r7, #22]
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	3207      	adds	r2, #7
 8010ef6:	2100      	movs	r1, #0
 8010ef8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

	if (idx)
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d002      	beq.n	8010f08 <virtqueue_get_buffer+0x96>
		*idx = used_idx;
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	8bfa      	ldrh	r2, [r7, #30]
 8010f06:	801a      	strh	r2, [r3, #0]
	VQUEUE_IDLE(vq);

	return cookie;
 8010f08:	693b      	ldr	r3, [r7, #16]
}
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	3720      	adds	r7, #32
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	bd80      	pop	{r7, pc}

08010f12 <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 8010f12:	b480      	push	{r7}
 8010f14:	b083      	sub	sp, #12
 8010f16:	af00      	add	r7, sp, #0
 8010f18:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	68db      	ldr	r3, [r3, #12]
 8010f1e:	f003 0302 	and.w	r3, r3, #2
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d010      	beq.n	8010f48 <virtqueue_disable_cb+0x36>
		vring_used_event(&vq->vq_ring) =
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	895b      	ldrh	r3, [r3, #10]
 8010f2e:	1ad3      	subs	r3, r2, r3
 8010f30:	b299      	uxth	r1, r3
		vring_used_event(&vq->vq_ring) =
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	6a1a      	ldr	r2, [r3, #32]
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	699b      	ldr	r3, [r3, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8010f3a:	3901      	subs	r1, #1
 8010f3c:	b289      	uxth	r1, r1
		vring_used_event(&vq->vq_ring) =
 8010f3e:	005b      	lsls	r3, r3, #1
 8010f40:	4413      	add	r3, r2
 8010f42:	460a      	mov	r2, r1
 8010f44:	809a      	strh	r2, [r3, #4]
	} else {
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
	}

	VQUEUE_IDLE(vq);
}
 8010f46:	e008      	b.n	8010f5a <virtqueue_disable_cb+0x48>
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	6a1b      	ldr	r3, [r3, #32]
 8010f4c:	881a      	ldrh	r2, [r3, #0]
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	6a1b      	ldr	r3, [r3, #32]
 8010f52:	f042 0201 	orr.w	r2, r2, #1
 8010f56:	b292      	uxth	r2, r2
 8010f58:	801a      	strh	r2, [r3, #0]
}
 8010f5a:	bf00      	nop
 8010f5c:	370c      	adds	r7, #12
 8010f5e:	46bd      	mov	sp, r7
 8010f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f64:	4770      	bx	lr

08010f66 <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 8010f66:	b580      	push	{r7, lr}
 8010f68:	b082      	sub	sp, #8
 8010f6a:	af00      	add	r7, sp, #0
 8010f6c:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 8010f6e:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify_host(vq))
 8010f72:	6878      	ldr	r0, [r7, #4]
 8010f74:	f000 f91d 	bl	80111b2 <vq_ring_must_notify_host>
 8010f78:	4603      	mov	r3, r0
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d002      	beq.n	8010f84 <virtqueue_kick+0x1e>
		vq_ring_notify_host(vq);
 8010f7e:	6878      	ldr	r0, [r7, #4]
 8010f80:	f000 f94d 	bl	801121e <vq_ring_notify_host>

	vq->vq_queued_cnt = 0;
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	2200      	movs	r2, #0
 8010f88:	855a      	strh	r2, [r3, #42]	; 0x2a

	VQUEUE_IDLE(vq);
}
 8010f8a:	bf00      	nop
 8010f8c:	3708      	adds	r7, #8
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	bd80      	pop	{r7, pc}

08010f92 <vq_ring_add_buffer>:
 */
static uint16_t vq_ring_add_buffer(struct virtqueue *vq,
				   struct vring_desc *desc, uint16_t head_idx,
				   struct virtqueue_buf *buf_list, int readable,
				   int writable)
{
 8010f92:	b580      	push	{r7, lr}
 8010f94:	b088      	sub	sp, #32
 8010f96:	af00      	add	r7, sp, #0
 8010f98:	60f8      	str	r0, [r7, #12]
 8010f9a:	60b9      	str	r1, [r7, #8]
 8010f9c:	603b      	str	r3, [r7, #0]
 8010f9e:	4613      	mov	r3, r2
 8010fa0:	80fb      	strh	r3, [r7, #6]
	int i, needed;
	uint16_t idx;

	(void)vq;

	needed = readable + writable;
 8010fa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fa6:	4413      	add	r3, r2
 8010fa8:	617b      	str	r3, [r7, #20]

	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 8010faa:	2300      	movs	r3, #0
 8010fac:	61fb      	str	r3, [r7, #28]
 8010fae:	88fb      	ldrh	r3, [r7, #6]
 8010fb0:	837b      	strh	r3, [r7, #26]
 8010fb2:	e03c      	b.n	801102e <vq_ring_add_buffer+0x9c>
		VQASSERT(vq, idx != VQ_RING_DESC_CHAIN_END,
			 "premature end of free desc chain");

		dp = &desc[idx];
 8010fb4:	8b7b      	ldrh	r3, [r7, #26]
 8010fb6:	011b      	lsls	r3, r3, #4
 8010fb8:	68ba      	ldr	r2, [r7, #8]
 8010fba:	4413      	add	r3, r2
 8010fbc:	613b      	str	r3, [r7, #16]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
 8010fbe:	69fb      	ldr	r3, [r7, #28]
 8010fc0:	00db      	lsls	r3, r3, #3
 8010fc2:	683a      	ldr	r2, [r7, #0]
 8010fc4:	4413      	add	r3, r2
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	4619      	mov	r1, r3
 8010fca:	68f8      	ldr	r0, [r7, #12]
 8010fcc:	f7ff fec8 	bl	8010d60 <virtqueue_virt_to_phys>
 8010fd0:	4603      	mov	r3, r0
 8010fd2:	461a      	mov	r2, r3
 8010fd4:	f04f 0300 	mov.w	r3, #0
 8010fd8:	6939      	ldr	r1, [r7, #16]
 8010fda:	e9c1 2300 	strd	r2, r3, [r1]
		dp->len = buf_list[i].len;
 8010fde:	69fb      	ldr	r3, [r7, #28]
 8010fe0:	00db      	lsls	r3, r3, #3
 8010fe2:	683a      	ldr	r2, [r7, #0]
 8010fe4:	4413      	add	r3, r2
 8010fe6:	685b      	ldr	r3, [r3, #4]
 8010fe8:	461a      	mov	r2, r3
 8010fea:	693b      	ldr	r3, [r7, #16]
 8010fec:	609a      	str	r2, [r3, #8]
		dp->flags = 0;
 8010fee:	693b      	ldr	r3, [r7, #16]
 8010ff0:	2200      	movs	r2, #0
 8010ff2:	819a      	strh	r2, [r3, #12]

		if (i < needed - 1)
 8010ff4:	697b      	ldr	r3, [r7, #20]
 8010ff6:	3b01      	subs	r3, #1
 8010ff8:	69fa      	ldr	r2, [r7, #28]
 8010ffa:	429a      	cmp	r2, r3
 8010ffc:	da06      	bge.n	801100c <vq_ring_add_buffer+0x7a>
			dp->flags |= VRING_DESC_F_NEXT;
 8010ffe:	693b      	ldr	r3, [r7, #16]
 8011000:	899b      	ldrh	r3, [r3, #12]
 8011002:	f043 0301 	orr.w	r3, r3, #1
 8011006:	b29a      	uxth	r2, r3
 8011008:	693b      	ldr	r3, [r7, #16]
 801100a:	819a      	strh	r2, [r3, #12]

		/*
		 * Readable buffers are inserted  into vring before the
		 * writable buffers.
		 */
		if (i >= readable)
 801100c:	69fa      	ldr	r2, [r7, #28]
 801100e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011010:	429a      	cmp	r2, r3
 8011012:	db06      	blt.n	8011022 <vq_ring_add_buffer+0x90>
			dp->flags |= VRING_DESC_F_WRITE;
 8011014:	693b      	ldr	r3, [r7, #16]
 8011016:	899b      	ldrh	r3, [r3, #12]
 8011018:	f043 0302 	orr.w	r3, r3, #2
 801101c:	b29a      	uxth	r2, r3
 801101e:	693b      	ldr	r3, [r7, #16]
 8011020:	819a      	strh	r2, [r3, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 8011022:	69fb      	ldr	r3, [r7, #28]
 8011024:	3301      	adds	r3, #1
 8011026:	61fb      	str	r3, [r7, #28]
 8011028:	693b      	ldr	r3, [r7, #16]
 801102a:	89db      	ldrh	r3, [r3, #14]
 801102c:	837b      	strh	r3, [r7, #26]
 801102e:	69fa      	ldr	r2, [r7, #28]
 8011030:	697b      	ldr	r3, [r7, #20]
 8011032:	429a      	cmp	r2, r3
 8011034:	dbbe      	blt.n	8010fb4 <vq_ring_add_buffer+0x22>
	}

	return (idx);
 8011036:	8b7b      	ldrh	r3, [r7, #26]
}
 8011038:	4618      	mov	r0, r3
 801103a:	3720      	adds	r7, #32
 801103c:	46bd      	mov	sp, r7
 801103e:	bd80      	pop	{r7, pc}

08011040 <vq_ring_free_chain>:
 *
 * vq_ring_free_chain
 *
 */
static void vq_ring_free_chain(struct virtqueue *vq, uint16_t desc_idx)
{
 8011040:	b480      	push	{r7}
 8011042:	b085      	sub	sp, #20
 8011044:	af00      	add	r7, sp, #0
 8011046:	6078      	str	r0, [r7, #4]
 8011048:	460b      	mov	r3, r1
 801104a:	807b      	strh	r3, [r7, #2]
	struct vring_desc *dp;
	struct vq_desc_extra *dxp;

	VQ_RING_ASSERT_VALID_IDX(vq, desc_idx);
	dp = &vq->vq_ring.desc[desc_idx];
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	69da      	ldr	r2, [r3, #28]
 8011050:	887b      	ldrh	r3, [r7, #2]
 8011052:	011b      	lsls	r3, r3, #4
 8011054:	4413      	add	r3, r2
 8011056:	60fb      	str	r3, [r7, #12]
	dxp = &vq->vq_descx[desc_idx];
 8011058:	887b      	ldrh	r3, [r7, #2]
 801105a:	3307      	adds	r3, #7
 801105c:	00db      	lsls	r3, r3, #3
 801105e:	687a      	ldr	r2, [r7, #4]
 8011060:	4413      	add	r3, r2
 8011062:	60bb      	str	r3, [r7, #8]

	if (vq->vq_free_cnt == 0) {
		VQ_RING_ASSERT_CHAIN_TERM(vq);
	}

	vq->vq_free_cnt += dxp->ndescs;
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011068:	68bb      	ldr	r3, [r7, #8]
 801106a:	889b      	ldrh	r3, [r3, #4]
 801106c:	4413      	add	r3, r2
 801106e:	b29a      	uxth	r2, r3
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	851a      	strh	r2, [r3, #40]	; 0x28
	dxp->ndescs--;
 8011074:	68bb      	ldr	r3, [r7, #8]
 8011076:	889b      	ldrh	r3, [r3, #4]
 8011078:	3b01      	subs	r3, #1
 801107a:	b29a      	uxth	r2, r3
 801107c:	68bb      	ldr	r3, [r7, #8]
 801107e:	809a      	strh	r2, [r3, #4]

	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	899b      	ldrh	r3, [r3, #12]
 8011084:	f003 0304 	and.w	r3, r3, #4
 8011088:	2b00      	cmp	r3, #0
 801108a:	d113      	bne.n	80110b4 <vq_ring_free_chain+0x74>
		while (dp->flags & VRING_DESC_F_NEXT) {
 801108c:	e00c      	b.n	80110a8 <vq_ring_free_chain+0x68>
			VQ_RING_ASSERT_VALID_IDX(vq, dp->next);
			dp = &vq->vq_ring.desc[dp->next];
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	69da      	ldr	r2, [r3, #28]
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	89db      	ldrh	r3, [r3, #14]
 8011096:	011b      	lsls	r3, r3, #4
 8011098:	4413      	add	r3, r2
 801109a:	60fb      	str	r3, [r7, #12]
			dxp->ndescs--;
 801109c:	68bb      	ldr	r3, [r7, #8]
 801109e:	889b      	ldrh	r3, [r3, #4]
 80110a0:	3b01      	subs	r3, #1
 80110a2:	b29a      	uxth	r2, r3
 80110a4:	68bb      	ldr	r3, [r7, #8]
 80110a6:	809a      	strh	r2, [r3, #4]
		while (dp->flags & VRING_DESC_F_NEXT) {
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	899b      	ldrh	r3, [r3, #12]
 80110ac:	f003 0301 	and.w	r3, r3, #1
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d1ec      	bne.n	801108e <vq_ring_free_chain+0x4e>
	/*
	 * We must append the existing free chain, if any, to the end of
	 * newly freed chain. If the virtqueue was completely used, then
	 * head would be VQ_RING_DESC_CHAIN_END (ASSERTed above).
	 */
	dp->next = vq->vq_desc_head_idx;
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	81da      	strh	r2, [r3, #14]
	vq->vq_desc_head_idx = desc_idx;
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	887a      	ldrh	r2, [r7, #2]
 80110c0:	861a      	strh	r2, [r3, #48]	; 0x30
}
 80110c2:	bf00      	nop
 80110c4:	3714      	adds	r7, #20
 80110c6:	46bd      	mov	sp, r7
 80110c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110cc:	4770      	bx	lr

080110ce <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 80110ce:	b580      	push	{r7, lr}
 80110d0:	b088      	sub	sp, #32
 80110d2:	af00      	add	r7, sp, #0
 80110d4:	60f8      	str	r0, [r7, #12]
 80110d6:	60b9      	str	r1, [r7, #8]
 80110d8:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	895b      	ldrh	r3, [r3, #10]
 80110de:	61bb      	str	r3, [r7, #24]
	vr = &vq->vq_ring;
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	3318      	adds	r3, #24
 80110e4:	617b      	str	r3, [r7, #20]

	vring_init(vr, size, (unsigned char *)ring_mem, alignment);
 80110e6:	69b9      	ldr	r1, [r7, #24]
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	68ba      	ldr	r2, [r7, #8]
 80110ec:	6978      	ldr	r0, [r7, #20]
 80110ee:	f7ff fd96 	bl	8010c1e <vring_init>

	for (i = 0; i < size - 1; i++)
 80110f2:	2300      	movs	r3, #0
 80110f4:	61fb      	str	r3, [r7, #28]
 80110f6:	e00c      	b.n	8011112 <vq_ring_init+0x44>
		vr->desc[i].next = i + 1;
 80110f8:	69fb      	ldr	r3, [r7, #28]
 80110fa:	b29a      	uxth	r2, r3
 80110fc:	697b      	ldr	r3, [r7, #20]
 80110fe:	6859      	ldr	r1, [r3, #4]
 8011100:	69fb      	ldr	r3, [r7, #28]
 8011102:	011b      	lsls	r3, r3, #4
 8011104:	440b      	add	r3, r1
 8011106:	3201      	adds	r2, #1
 8011108:	b292      	uxth	r2, r2
 801110a:	81da      	strh	r2, [r3, #14]
	for (i = 0; i < size - 1; i++)
 801110c:	69fb      	ldr	r3, [r7, #28]
 801110e:	3301      	adds	r3, #1
 8011110:	61fb      	str	r3, [r7, #28]
 8011112:	69bb      	ldr	r3, [r7, #24]
 8011114:	3b01      	subs	r3, #1
 8011116:	69fa      	ldr	r2, [r7, #28]
 8011118:	429a      	cmp	r2, r3
 801111a:	dbed      	blt.n	80110f8 <vq_ring_init+0x2a>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 801111c:	697b      	ldr	r3, [r7, #20]
 801111e:	685a      	ldr	r2, [r3, #4]
 8011120:	69fb      	ldr	r3, [r7, #28]
 8011122:	011b      	lsls	r3, r3, #4
 8011124:	4413      	add	r3, r2
 8011126:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801112a:	81da      	strh	r2, [r3, #14]
}
 801112c:	bf00      	nop
 801112e:	3720      	adds	r7, #32
 8011130:	46bd      	mov	sp, r7
 8011132:	bd80      	pop	{r7, pc}

08011134 <vq_ring_update_avail>:
 *
 * vq_ring_update_avail
 *
 */
static void vq_ring_update_avail(struct virtqueue *vq, uint16_t desc_idx)
{
 8011134:	b480      	push	{r7}
 8011136:	b085      	sub	sp, #20
 8011138:	af00      	add	r7, sp, #0
 801113a:	6078      	str	r0, [r7, #4]
 801113c:	460b      	mov	r3, r1
 801113e:	807b      	strh	r3, [r7, #2]
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	6a1b      	ldr	r3, [r3, #32]
 8011144:	885b      	ldrh	r3, [r3, #2]
 8011146:	b21a      	sxth	r2, r3
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	895b      	ldrh	r3, [r3, #10]
 801114c:	3b01      	subs	r3, #1
 801114e:	b29b      	uxth	r3, r3
 8011150:	b21b      	sxth	r3, r3
 8011152:	4013      	ands	r3, r2
 8011154:	b21b      	sxth	r3, r3
 8011156:	81fb      	strh	r3, [r7, #14]
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	6a1a      	ldr	r2, [r3, #32]
 801115c:	89fb      	ldrh	r3, [r7, #14]
 801115e:	005b      	lsls	r3, r3, #1
 8011160:	4413      	add	r3, r2
 8011162:	887a      	ldrh	r2, [r7, #2]
 8011164:	809a      	strh	r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 8011166:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	6a1b      	ldr	r3, [r3, #32]
 801116e:	885a      	ldrh	r2, [r3, #2]
 8011170:	3201      	adds	r2, #1
 8011172:	b292      	uxth	r2, r2
 8011174:	805a      	strh	r2, [r3, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801117a:	3301      	adds	r3, #1
 801117c:	b29a      	uxth	r2, r3
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8011182:	bf00      	nop
 8011184:	3714      	adds	r7, #20
 8011186:	46bd      	mov	sp, r7
 8011188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801118c:	4770      	bx	lr

0801118e <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 801118e:	b580      	push	{r7, lr}
 8011190:	b082      	sub	sp, #8
 8011192:	af00      	add	r7, sp, #0
 8011194:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
 8011196:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	691b      	ldr	r3, [r3, #16]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d003      	beq.n	80111aa <virtqueue_notification+0x1c>
		vq->callback(vq);
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	691b      	ldr	r3, [r3, #16]
 80111a6:	6878      	ldr	r0, [r7, #4]
 80111a8:	4798      	blx	r3
}
 80111aa:	bf00      	nop
 80111ac:	3708      	adds	r7, #8
 80111ae:	46bd      	mov	sp, r7
 80111b0:	bd80      	pop	{r7, pc}

080111b2 <vq_ring_must_notify_host>:
 *
 * vq_ring_must_notify_host
 *
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
 80111b2:	b580      	push	{r7, lr}
 80111b4:	b084      	sub	sp, #16
 80111b6:	af00      	add	r7, sp, #0
 80111b8:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	68db      	ldr	r3, [r3, #12]
 80111be:	f003 0302 	and.w	r3, r3, #2
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d01d      	beq.n	8011202 <vq_ring_must_notify_host+0x50>
		new_idx = vq->vq_ring.avail->idx;
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	6a1b      	ldr	r3, [r3, #32]
 80111ca:	885b      	ldrh	r3, [r3, #2]
 80111cc:	81fb      	strh	r3, [r7, #14]
		prev_idx = new_idx - vq->vq_queued_cnt;
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80111d2:	89fa      	ldrh	r2, [r7, #14]
 80111d4:	1ad3      	subs	r3, r2, r3
 80111d6:	81bb      	strh	r3, [r7, #12]
		event_idx = vring_avail_event(&vq->vq_ring);
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	699b      	ldr	r3, [r3, #24]
 80111e0:	00db      	lsls	r3, r3, #3
 80111e2:	4413      	add	r3, r2
 80111e4:	685b      	ldr	r3, [r3, #4]
 80111e6:	817b      	strh	r3, [r7, #10]

		return (vring_need_event(event_idx, new_idx, prev_idx) != 0);
 80111e8:	89ba      	ldrh	r2, [r7, #12]
 80111ea:	89f9      	ldrh	r1, [r7, #14]
 80111ec:	897b      	ldrh	r3, [r7, #10]
 80111ee:	4618      	mov	r0, r3
 80111f0:	f7ff fd3e 	bl	8010c70 <vring_need_event>
 80111f4:	4603      	mov	r3, r0
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	bf14      	ite	ne
 80111fa:	2301      	movne	r3, #1
 80111fc:	2300      	moveq	r3, #0
 80111fe:	b2db      	uxtb	r3, r3
 8011200:	e009      	b.n	8011216 <vq_ring_must_notify_host+0x64>
	}

	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011206:	881b      	ldrh	r3, [r3, #0]
 8011208:	f003 0301 	and.w	r3, r3, #1
 801120c:	2b00      	cmp	r3, #0
 801120e:	bf0c      	ite	eq
 8011210:	2301      	moveq	r3, #1
 8011212:	2300      	movne	r3, #0
 8011214:	b2db      	uxtb	r3, r3
}
 8011216:	4618      	mov	r0, r3
 8011218:	3710      	adds	r7, #16
 801121a:	46bd      	mov	sp, r7
 801121c:	bd80      	pop	{r7, pc}

0801121e <vq_ring_notify_host>:
 *
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
 801121e:	b580      	push	{r7, lr}
 8011220:	b082      	sub	sp, #8
 8011222:	af00      	add	r7, sp, #0
 8011224:	6078      	str	r0, [r7, #4]
	if (vq->notify)
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	695b      	ldr	r3, [r3, #20]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d003      	beq.n	8011236 <vq_ring_notify_host+0x18>
		vq->notify(vq);
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	695b      	ldr	r3, [r3, #20]
 8011232:	6878      	ldr	r0, [r7, #4]
 8011234:	4798      	blx	r3
}
 8011236:	bf00      	nop
 8011238:	3708      	adds	r7, #8
 801123a:	46bd      	mov	sp, r7
 801123c:	bd80      	pop	{r7, pc}
	...

08011240 <screenInit>:
tIMAGE_DATA safeairBarImageArray[5];

uint8_t nextFrameToDraw[40960] = {0xFF};

void screenInit(void)
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b082      	sub	sp, #8
 8011244:	af02      	add	r7, sp, #8
	isPortrait = true;
 8011246:	4b63      	ldr	r3, [pc, #396]	; (80113d4 <screenInit+0x194>)
 8011248:	2201      	movs	r2, #1
 801124a:	701a      	strb	r2, [r3, #0]
	DEV_Module_Init();
 801124c:	f7fb fd46 	bl	800ccdc <DEV_Module_Init>
	LCD_1IN8_SetBackLight(1000);
 8011250:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011254:	f7fc fb64 	bl	800d920 <LCD_1IN8_SetBackLight>

	if (isPortrait)
 8011258:	4b5e      	ldr	r3, [pc, #376]	; (80113d4 <screenInit+0x194>)
 801125a:	781b      	ldrb	r3, [r3, #0]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d00d      	beq.n	801127c <screenInit+0x3c>
	{
		LCD_1IN8_Init(L2R_U2D);
 8011260:	2000      	movs	r0, #0
 8011262:	f7fc fa3d 	bl	800d6e0 <LCD_1IN8_Init>
		LCD_1IN8_Clear(BLACK);
 8011266:	2000      	movs	r0, #0
 8011268:	f7fc fb1c 	bl	800d8a4 <LCD_1IN8_Clear>
		Paint_NewImage(LCD_1IN8_HEIGHT,LCD_1IN8_WIDTH, 0, WHITE);
 801126c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011270:	2200      	movs	r2, #0
 8011272:	21a0      	movs	r1, #160	; 0xa0
 8011274:	2080      	movs	r0, #128	; 0x80
 8011276:	f7fb fd51 	bl	800cd1c <Paint_NewImage>
 801127a:	e00c      	b.n	8011296 <screenInit+0x56>
	}
	else
	{
		LCD_1IN8_Init(U2D_R2L);
 801127c:	2005      	movs	r0, #5
 801127e:	f7fc fa2f 	bl	800d6e0 <LCD_1IN8_Init>
		LCD_1IN8_Clear(BLACK);
 8011282:	2000      	movs	r0, #0
 8011284:	f7fc fb0e 	bl	800d8a4 <LCD_1IN8_Clear>
		Paint_NewImage(LCD_1IN8_WIDTH,LCD_1IN8_HEIGHT, 0, WHITE);
 8011288:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801128c:	2200      	movs	r2, #0
 801128e:	2180      	movs	r1, #128	; 0x80
 8011290:	20a0      	movs	r0, #160	; 0xa0
 8011292:	f7fb fd43 	bl	800cd1c <Paint_NewImage>
	}

	Paint_SetClearFuntion(LCD_1IN8_Clear);
 8011296:	4850      	ldr	r0, [pc, #320]	; (80113d8 <screenInit+0x198>)
 8011298:	f7fb fd8c 	bl	800cdb4 <Paint_SetClearFuntion>
	Paint_SetDisplayFuntion(LCD_1IN8_DrawPaint);
 801129c:	484f      	ldr	r0, [pc, #316]	; (80113dc <screenInit+0x19c>)
 801129e:	f7fb fd99 	bl	800cdd4 <Paint_SetDisplayFuntion>

//	printf("Paint_Clear\r\n");
	Paint_Clear(WHITE);
 80112a2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80112a6:	f7fb fe55 	bl	800cf54 <Paint_Clear>
	DEV_Delay_ms(1000);
 80112aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80112ae:	f7f1 fba1 	bl	80029f4 <HAL_Delay>

	if (isPortrait)
 80112b2:	4b48      	ldr	r3, [pc, #288]	; (80113d4 <screenInit+0x194>)
 80112b4:	781b      	ldrb	r3, [r3, #0]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d042      	beq.n	8011340 <screenInit+0x100>
	{
		Paint_DrawImage(gImage_Rain, 0, 0, 128, 128);
 80112ba:	2380      	movs	r3, #128	; 0x80
 80112bc:	9300      	str	r3, [sp, #0]
 80112be:	2380      	movs	r3, #128	; 0x80
 80112c0:	2200      	movs	r2, #0
 80112c2:	2100      	movs	r1, #0
 80112c4:	4846      	ldr	r0, [pc, #280]	; (80113e0 <screenInit+0x1a0>)
 80112c6:	f7fb ffcd 	bl	800d264 <Paint_DrawImage>
		Paint_DrawString_EN(1, 130, "Version", &Font12, WHITE,  BLACK);
 80112ca:	2300      	movs	r3, #0
 80112cc:	9301      	str	r3, [sp, #4]
 80112ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80112d2:	9300      	str	r3, [sp, #0]
 80112d4:	4b43      	ldr	r3, [pc, #268]	; (80113e4 <screenInit+0x1a4>)
 80112d6:	4a44      	ldr	r2, [pc, #272]	; (80113e8 <screenInit+0x1a8>)
 80112d8:	2182      	movs	r1, #130	; 0x82
 80112da:	2001      	movs	r0, #1
 80112dc:	f7fb fed8 	bl	800d090 <Paint_DrawString_EN>
		Paint_DrawFloatNum (1, 142 , versionID, 2,  &Font12, BLACK, WHITE);
 80112e0:	4b42      	ldr	r3, [pc, #264]	; (80113ec <screenInit+0x1ac>)
 80112e2:	edd3 7a00 	vldr	s15, [r3]
 80112e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80112ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80112ee:	9301      	str	r3, [sp, #4]
 80112f0:	2300      	movs	r3, #0
 80112f2:	9300      	str	r3, [sp, #0]
 80112f4:	4b3b      	ldr	r3, [pc, #236]	; (80113e4 <screenInit+0x1a4>)
 80112f6:	2202      	movs	r2, #2
 80112f8:	eeb0 0b47 	vmov.f64	d0, d7
 80112fc:	218e      	movs	r1, #142	; 0x8e
 80112fe:	2001      	movs	r0, #1
 8011300:	f7fb ff1e 	bl	800d140 <Paint_DrawFloatNum>
		Paint_DrawString_EN(70, 130, "BuildID", &Font12, WHITE,  BLACK);
 8011304:	2300      	movs	r3, #0
 8011306:	9301      	str	r3, [sp, #4]
 8011308:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801130c:	9300      	str	r3, [sp, #0]
 801130e:	4b35      	ldr	r3, [pc, #212]	; (80113e4 <screenInit+0x1a4>)
 8011310:	4a37      	ldr	r2, [pc, #220]	; (80113f0 <screenInit+0x1b0>)
 8011312:	2182      	movs	r1, #130	; 0x82
 8011314:	2046      	movs	r0, #70	; 0x46
 8011316:	f7fb febb 	bl	800d090 <Paint_DrawString_EN>
		Paint_DrawFloatNum (70, 142 , buildID, 2,  &Font12, BLACK, WHITE);
 801131a:	4b36      	ldr	r3, [pc, #216]	; (80113f4 <screenInit+0x1b4>)
 801131c:	edd3 7a00 	vldr	s15, [r3]
 8011320:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8011324:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011328:	9301      	str	r3, [sp, #4]
 801132a:	2300      	movs	r3, #0
 801132c:	9300      	str	r3, [sp, #0]
 801132e:	4b2d      	ldr	r3, [pc, #180]	; (80113e4 <screenInit+0x1a4>)
 8011330:	2202      	movs	r2, #2
 8011332:	eeb0 0b47 	vmov.f64	d0, d7
 8011336:	218e      	movs	r1, #142	; 0x8e
 8011338:	2046      	movs	r0, #70	; 0x46
 801133a:	f7fb ff01 	bl	800d140 <Paint_DrawFloatNum>
 801133e:	e041      	b.n	80113c4 <screenInit+0x184>
	}
	else
	{
		Paint_DrawImage(gImage_Rain, 16, 0, 128, 128);
 8011340:	2380      	movs	r3, #128	; 0x80
 8011342:	9300      	str	r3, [sp, #0]
 8011344:	2380      	movs	r3, #128	; 0x80
 8011346:	2200      	movs	r2, #0
 8011348:	2110      	movs	r1, #16
 801134a:	4825      	ldr	r0, [pc, #148]	; (80113e0 <screenInit+0x1a0>)
 801134c:	f7fb ff8a 	bl	800d264 <Paint_DrawImage>
		Paint_DrawString_EN(1, 98, "Version", &Font12, WHITE,  BLACK);
 8011350:	2300      	movs	r3, #0
 8011352:	9301      	str	r3, [sp, #4]
 8011354:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011358:	9300      	str	r3, [sp, #0]
 801135a:	4b22      	ldr	r3, [pc, #136]	; (80113e4 <screenInit+0x1a4>)
 801135c:	4a22      	ldr	r2, [pc, #136]	; (80113e8 <screenInit+0x1a8>)
 801135e:	2162      	movs	r1, #98	; 0x62
 8011360:	2001      	movs	r0, #1
 8011362:	f7fb fe95 	bl	800d090 <Paint_DrawString_EN>
		Paint_DrawFloatNum (1, 110 , versionID, 2,  &Font12, BLACK, WHITE);
 8011366:	4b21      	ldr	r3, [pc, #132]	; (80113ec <screenInit+0x1ac>)
 8011368:	edd3 7a00 	vldr	s15, [r3]
 801136c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8011370:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011374:	9301      	str	r3, [sp, #4]
 8011376:	2300      	movs	r3, #0
 8011378:	9300      	str	r3, [sp, #0]
 801137a:	4b1a      	ldr	r3, [pc, #104]	; (80113e4 <screenInit+0x1a4>)
 801137c:	2202      	movs	r2, #2
 801137e:	eeb0 0b47 	vmov.f64	d0, d7
 8011382:	216e      	movs	r1, #110	; 0x6e
 8011384:	2001      	movs	r0, #1
 8011386:	f7fb fedb 	bl	800d140 <Paint_DrawFloatNum>
		Paint_DrawString_EN(104, 98, "BuildID", &Font12, WHITE,  BLACK);
 801138a:	2300      	movs	r3, #0
 801138c:	9301      	str	r3, [sp, #4]
 801138e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011392:	9300      	str	r3, [sp, #0]
 8011394:	4b13      	ldr	r3, [pc, #76]	; (80113e4 <screenInit+0x1a4>)
 8011396:	4a16      	ldr	r2, [pc, #88]	; (80113f0 <screenInit+0x1b0>)
 8011398:	2162      	movs	r1, #98	; 0x62
 801139a:	2068      	movs	r0, #104	; 0x68
 801139c:	f7fb fe78 	bl	800d090 <Paint_DrawString_EN>
		Paint_DrawFloatNum (124, 110 , buildID, 2,  &Font12, BLACK, WHITE);
 80113a0:	4b14      	ldr	r3, [pc, #80]	; (80113f4 <screenInit+0x1b4>)
 80113a2:	edd3 7a00 	vldr	s15, [r3]
 80113a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80113aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80113ae:	9301      	str	r3, [sp, #4]
 80113b0:	2300      	movs	r3, #0
 80113b2:	9300      	str	r3, [sp, #0]
 80113b4:	4b0b      	ldr	r3, [pc, #44]	; (80113e4 <screenInit+0x1a4>)
 80113b6:	2202      	movs	r2, #2
 80113b8:	eeb0 0b47 	vmov.f64	d0, d7
 80113bc:	216e      	movs	r1, #110	; 0x6e
 80113be:	207c      	movs	r0, #124	; 0x7c
 80113c0:	f7fb febe 	bl	800d140 <Paint_DrawFloatNum>
	}


	HAL_Delay(1000);
 80113c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80113c8:	f7f1 fb14 	bl	80029f4 <HAL_Delay>
}
 80113cc:	bf00      	nop
 80113ce:	46bd      	mov	sp, r7
 80113d0:	bd80      	pop	{r7, pc}
 80113d2:	bf00      	nop
 80113d4:	2400006c 	.word	0x2400006c
 80113d8:	0800d8a5 	.word	0x0800d8a5
 80113dc:	0800d819 	.word	0x0800d819
 80113e0:	0801717c 	.word	0x0801717c
 80113e4:	24000018 	.word	0x24000018
 80113e8:	08016c74 	.word	0x08016c74
 80113ec:	24000008 	.word	0x24000008
 80113f0:	08016c7c 	.word	0x08016c7c
 80113f4:	2400000c 	.word	0x2400000c

080113f8 <screenClear>:

void screenClear(void)
{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	af00      	add	r7, sp, #0
	if (isPortrait)
 80113fc:	4b0e      	ldr	r3, [pc, #56]	; (8011438 <screenClear+0x40>)
 80113fe:	781b      	ldrb	r3, [r3, #0]
 8011400:	2b00      	cmp	r3, #0
 8011402:	d007      	beq.n	8011414 <screenClear+0x1c>
	{
		Paint_NewImage(LCD_1IN8_HEIGHT,LCD_1IN8_WIDTH, 0, WHITE);
 8011404:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011408:	2200      	movs	r2, #0
 801140a:	21a0      	movs	r1, #160	; 0xa0
 801140c:	2080      	movs	r0, #128	; 0x80
 801140e:	f7fb fc85 	bl	800cd1c <Paint_NewImage>
 8011412:	e006      	b.n	8011422 <screenClear+0x2a>
	}
	else
	{
		Paint_NewImage(LCD_1IN8_WIDTH,LCD_1IN8_HEIGHT, 0, WHITE);
 8011414:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011418:	2200      	movs	r2, #0
 801141a:	2180      	movs	r1, #128	; 0x80
 801141c:	20a0      	movs	r0, #160	; 0xa0
 801141e:	f7fb fc7d 	bl	800cd1c <Paint_NewImage>
	}

	Paint_Clear(WHITE);
 8011422:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8011426:	f7fb fd95 	bl	800cf54 <Paint_Clear>
	DEV_Delay_ms(1000);
 801142a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801142e:	f7f1 fae1 	bl	80029f4 <HAL_Delay>
}
 8011432:	bf00      	nop
 8011434:	bd80      	pop	{r7, pc}
 8011436:	bf00      	nop
 8011438:	2400006c 	.word	0x2400006c

0801143c <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 801143c:	b580      	push	{r7, lr}
 801143e:	b082      	sub	sp, #8
 8011440:	af00      	add	r7, sp, #0
 8011442:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 8011444:	4b04      	ldr	r3, [pc, #16]	; (8011458 <HAL_HSEM_FreeCallback+0x1c>)
 8011446:	2201      	movs	r2, #1
 8011448:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM7 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 801144a:	2002      	movs	r0, #2
 801144c:	f7f5 fcde 	bl	8006e0c <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 8011450:	bf00      	nop
 8011452:	3708      	adds	r7, #8
 8011454:	46bd      	mov	sp, r7
 8011456:	bd80      	pop	{r7, pc}
 8011458:	2400a3b0 	.word	0x2400a3b0

0801145c <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
 801145c:	b580      	push	{r7, lr}
 801145e:	b082      	sub	sp, #8
 8011460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MAILBOX_INIT */

  /* USER CODE END MAILBOX_INIT */
  __HAL_RCC_HSEM_CLK_ENABLE();
 8011462:	4b0f      	ldr	r3, [pc, #60]	; (80114a0 <MAILBOX_Init+0x44>)
 8011464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011468:	4a0d      	ldr	r2, [pc, #52]	; (80114a0 <MAILBOX_Init+0x44>)
 801146a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801146e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8011472:	4b0b      	ldr	r3, [pc, #44]	; (80114a0 <MAILBOX_Init+0x44>)
 8011474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801147c:	607b      	str	r3, [r7, #4]
 801147e:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN PRE_MAILBOX_INIT_CM7 */

  /* USER CODE END PRE_MAILBOX_INIT_CM7 */

  /* Enable CM7 receive irq */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 0, 1);
 8011480:	2201      	movs	r2, #1
 8011482:	2100      	movs	r1, #0
 8011484:	207d      	movs	r0, #125	; 0x7d
 8011486:	f7f1 fbd4 	bl	8002c32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 801148a:	207d      	movs	r0, #125	; 0x7d
 801148c:	f7f1 fbeb 	bl	8002c66 <HAL_NVIC_EnableIRQ>
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 8011490:	2002      	movs	r0, #2
 8011492:	f7f5 fcbb 	bl	8006e0c <HAL_HSEM_ActivateNotification>
  /* USER CODE BEGIN POST_MAILBOX_INIT_CM4 */

  /* USER CODE END POST_MAILBOX_INIT_CM4 */
#endif

  return 0;
 8011496:	2300      	movs	r3, #0
}
 8011498:	4618      	mov	r0, r3
 801149a:	3708      	adds	r7, #8
 801149c:	46bd      	mov	sp, r7
 801149e:	bd80      	pop	{r7, pc}
 80114a0:	58024400 	.word	0x58024400

080114a4 <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with IPCC peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
 80114a4:	b580      	push	{r7, lr}
 80114a6:	b082      	sub	sp, #8
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */

  if (msg_received == RX_NEW_MSG)
 80114ac:	4b09      	ldr	r3, [pc, #36]	; (80114d4 <MAILBOX_Poll+0x30>)
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	2b01      	cmp	r3, #1
 80114b2:	d108      	bne.n	80114c6 <MAILBOX_Poll+0x22>

    /* USER CODE BEGIN PRE_NEW_MSG_CM7 */

    /* USER CODE END PRE_NEW_MSG_CM7 */

    rproc_virtio_notified(vdev, VRING0_ID);
 80114b4:	2100      	movs	r1, #0
 80114b6:	6878      	ldr	r0, [r7, #4]
 80114b8:	f7fe fae1 	bl	800fa7e <rproc_virtio_notified>

    /* USER CODE BEGIN POST_NEW_MSG_CM4 */

    /* USER CODE END POST_NEW_MSG_CM4 */
#endif
    msg_received = RX_NO_MSG;
 80114bc:	4b05      	ldr	r3, [pc, #20]	; (80114d4 <MAILBOX_Poll+0x30>)
 80114be:	2200      	movs	r2, #0
 80114c0:	601a      	str	r2, [r3, #0]
    return 0;
 80114c2:	2300      	movs	r3, #0
 80114c4:	e001      	b.n	80114ca <MAILBOX_Poll+0x26>
  }

    /* USER CODE BEGIN NO_MSG */

    /* USER CODE END NO_MSG */
  return -EAGAIN;
 80114c6:	f06f 030a 	mvn.w	r3, #10
}
 80114ca:	4618      	mov	r0, r3
 80114cc:	3708      	adds	r7, #8
 80114ce:	46bd      	mov	sp, r7
 80114d0:	bd80      	pop	{r7, pc}
 80114d2:	bf00      	nop
 80114d4:	2400a3b0 	.word	0x2400a3b0

080114d8 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b082      	sub	sp, #8
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
 80114e0:	6039      	str	r1, [r7, #0]
#ifdef CORE_CM7

  /* USER CODE BEGIN  PRE_MAILBOX_NOTIFY_CM7 */

  /* USER CODE END PRE_MAILBOX_NOTIFY_CM7 */
  HAL_HSEM_FastTake(HSEM_ID_0);
 80114e2:	2000      	movs	r0, #0
 80114e4:	f7f5 fc64 	bl	8006db0 <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_0,0);
 80114e8:	2100      	movs	r1, #0
 80114ea:	2000      	movs	r0, #0
 80114ec:	f7f5 fc7a 	bl	8006de4 <HAL_HSEM_Release>
  /* USER CODE BEGIN  POST_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END POST_MAILBOX_NOTIFY_CM4 */
#endif

  return 0;
 80114f0:	2300      	movs	r3, #0
}
 80114f2:	4618      	mov	r0, r3
 80114f4:	3708      	adds	r7, #8
 80114f6:	46bd      	mov	sp, r7
 80114f8:	bd80      	pop	{r7, pc}

080114fa <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 80114fa:	b480      	push	{r7}
 80114fc:	b083      	sub	sp, #12
 80114fe:	af00      	add	r7, sp, #0
 8011500:	6078      	str	r0, [r7, #4]
 8011502:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
 8011508:	683a      	ldr	r2, [r7, #0]
 801150a:	429a      	cmp	r2, r3
 801150c:	d209      	bcs.n	8011522 <metal_device_io_region+0x28>
 801150e:	683a      	ldr	r2, [r7, #0]
 8011510:	4613      	mov	r3, r2
 8011512:	005b      	lsls	r3, r3, #1
 8011514:	4413      	add	r3, r2
 8011516:	011b      	lsls	r3, r3, #4
 8011518:	3308      	adds	r3, #8
 801151a:	687a      	ldr	r2, [r7, #4]
 801151c:	4413      	add	r3, r2
 801151e:	3304      	adds	r3, #4
 8011520:	e000      	b.n	8011524 <metal_device_io_region+0x2a>
 8011522:	2300      	movs	r3, #0
}
 8011524:	4618      	mov	r0, r3
 8011526:	370c      	adds	r7, #12
 8011528:	46bd      	mov	sp, r7
 801152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801152e:	4770      	bx	lr

08011530 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
 8011530:	b590      	push	{r4, r7, lr}
 8011532:	b08d      	sub	sp, #52	; 0x34
 8011534:	af04      	add	r7, sp, #16
 8011536:	6078      	str	r0, [r7, #4]
  int status = 0;
 8011538:	2300      	movs	r3, #0
 801153a:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
 801153c:	2300      	movs	r3, #0
 801153e:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 8011540:	4a41      	ldr	r2, [pc, #260]	; (8011648 <OPENAMP_shmem_init+0x118>)
 8011542:	f107 0310 	add.w	r3, r7, #16
 8011546:	e892 0003 	ldmia.w	r2, {r0, r1}
 801154a:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
 801154e:	2300      	movs	r3, #0
 8011550:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
 8011552:	2300      	movs	r3, #0
 8011554:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
 8011556:	f107 0310 	add.w	r3, r7, #16
 801155a:	4618      	mov	r0, r3
 801155c:	f7fd fd42 	bl	800efe4 <metal_init>

  status = metal_register_generic_device(&shm_device);
 8011560:	483a      	ldr	r0, [pc, #232]	; (801164c <OPENAMP_shmem_init+0x11c>)
 8011562:	f7fd fbe7 	bl	800ed34 <metal_register_generic_device>
 8011566:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 8011568:	69fb      	ldr	r3, [r7, #28]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d001      	beq.n	8011572 <OPENAMP_shmem_init+0x42>
    return status;
 801156e:	69fb      	ldr	r3, [r7, #28]
 8011570:	e066      	b.n	8011640 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 8011572:	f107 0318 	add.w	r3, r7, #24
 8011576:	461a      	mov	r2, r3
 8011578:	4935      	ldr	r1, [pc, #212]	; (8011650 <OPENAMP_shmem_init+0x120>)
 801157a:	4836      	ldr	r0, [pc, #216]	; (8011654 <OPENAMP_shmem_init+0x124>)
 801157c:	f7fd fb9c 	bl	800ecb8 <metal_device_open>
 8011580:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 8011582:	69fb      	ldr	r3, [r7, #28]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d001      	beq.n	801158c <OPENAMP_shmem_init+0x5c>
    return status;
 8011588:	69fb      	ldr	r3, [r7, #28]
 801158a:	e059      	b.n	8011640 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
 801158c:	4a32      	ldr	r2, [pc, #200]	; (8011658 <OPENAMP_shmem_init+0x128>)
 801158e:	4b33      	ldr	r3, [pc, #204]	; (801165c <OPENAMP_shmem_init+0x12c>)
 8011590:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 8011592:	69bb      	ldr	r3, [r7, #24]
 8011594:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, -1, 0, NULL);
 8011598:	4a31      	ldr	r2, [pc, #196]	; (8011660 <OPENAMP_shmem_init+0x130>)
 801159a:	4b2f      	ldr	r3, [pc, #188]	; (8011658 <OPENAMP_shmem_init+0x128>)
 801159c:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 801159e:	461a      	mov	r2, r3
 80115a0:	2300      	movs	r3, #0
 80115a2:	9302      	str	r3, [sp, #8]
 80115a4:	2300      	movs	r3, #0
 80115a6:	9301      	str	r3, [sp, #4]
 80115a8:	f04f 33ff 	mov.w	r3, #4294967295
 80115ac:	9300      	str	r3, [sp, #0]
 80115ae:	4613      	mov	r3, r2
 80115b0:	4a2a      	ldr	r2, [pc, #168]	; (801165c <OPENAMP_shmem_init+0x12c>)
 80115b2:	4929      	ldr	r1, [pc, #164]	; (8011658 <OPENAMP_shmem_init+0x128>)
 80115b4:	f7fd fd63 	bl	800f07e <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
 80115b8:	69bb      	ldr	r3, [r7, #24]
 80115ba:	2100      	movs	r1, #0
 80115bc:	4618      	mov	r0, r3
 80115be:	f7ff ff9c 	bl	80114fa <metal_device_io_region>
 80115c2:	4603      	mov	r3, r0
 80115c4:	4a27      	ldr	r2, [pc, #156]	; (8011664 <OPENAMP_shmem_init+0x134>)
 80115c6:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
 80115c8:	4b26      	ldr	r3, [pc, #152]	; (8011664 <OPENAMP_shmem_init+0x134>)
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d102      	bne.n	80115d6 <OPENAMP_shmem_init+0xa6>
    return -1;
 80115d0:	f04f 33ff 	mov.w	r3, #4294967295
 80115d4:	e034      	b.n	8011640 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
 80115d6:	f107 0208 	add.w	r2, r7, #8
 80115da:	f107 030c 	add.w	r3, r7, #12
 80115de:	4619      	mov	r1, r3
 80115e0:	6878      	ldr	r0, [r7, #4]
 80115e2:	f000 f905 	bl	80117f0 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	4a1f      	ldr	r2, [pc, #124]	; (8011668 <OPENAMP_shmem_init+0x138>)
 80115ea:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
 80115ec:	4b1e      	ldr	r3, [pc, #120]	; (8011668 <OPENAMP_shmem_init+0x138>)
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d102      	bne.n	80115fa <OPENAMP_shmem_init+0xca>
  {
    return -1;
 80115f4:	f04f 33ff 	mov.w	r3, #4294967295
 80115f8:	e022      	b.n	8011640 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
 80115fa:	69bb      	ldr	r3, [r7, #24]
 80115fc:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8011600:	4b19      	ldr	r3, [pc, #100]	; (8011668 <OPENAMP_shmem_init+0x138>)
 8011602:	6819      	ldr	r1, [r3, #0]
 8011604:	4b18      	ldr	r3, [pc, #96]	; (8011668 <OPENAMP_shmem_init+0x138>)
 8011606:	681a      	ldr	r2, [r3, #0]
 8011608:	68bb      	ldr	r3, [r7, #8]
 801160a:	461c      	mov	r4, r3
 801160c:	2300      	movs	r3, #0
 801160e:	9302      	str	r3, [sp, #8]
 8011610:	2300      	movs	r3, #0
 8011612:	9301      	str	r3, [sp, #4]
 8011614:	f04f 33ff 	mov.w	r3, #4294967295
 8011618:	9300      	str	r3, [sp, #0]
 801161a:	4623      	mov	r3, r4
 801161c:	f7fd fd2f 	bl	800f07e <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
 8011620:	69bb      	ldr	r3, [r7, #24]
 8011622:	2101      	movs	r1, #1
 8011624:	4618      	mov	r0, r3
 8011626:	f7ff ff68 	bl	80114fa <metal_device_io_region>
 801162a:	4603      	mov	r3, r0
 801162c:	4a0f      	ldr	r2, [pc, #60]	; (801166c <OPENAMP_shmem_init+0x13c>)
 801162e:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
 8011630:	4b0e      	ldr	r3, [pc, #56]	; (801166c <OPENAMP_shmem_init+0x13c>)
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	2b00      	cmp	r3, #0
 8011636:	d102      	bne.n	801163e <OPENAMP_shmem_init+0x10e>
    return -1;
 8011638:	f04f 33ff 	mov.w	r3, #4294967295
 801163c:	e000      	b.n	8011640 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
 801163e:	2300      	movs	r3, #0
}
 8011640:	4618      	mov	r0, r3
 8011642:	3724      	adds	r7, #36	; 0x24
 8011644:	46bd      	mov	sp, r7
 8011646:	bd90      	pop	{r4, r7, pc}
 8011648:	08016cbc 	.word	0x08016cbc
 801164c:	2400a070 	.word	0x2400a070
 8011650:	08016ca8 	.word	0x08016ca8
 8011654:	08016cb4 	.word	0x08016cb4
 8011658:	38000400 	.word	0x38000400
 801165c:	2400a444 	.word	0x2400a444
 8011660:	38010000 	.word	0x38010000
 8011664:	2400a3b4 	.word	0x2400a3b4
 8011668:	2400a3bc 	.word	0x2400a3bc
 801166c:	2400a3b8 	.word	0x2400a3b8

08011670 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
 8011670:	b590      	push	{r4, r7, lr}
 8011672:	b08b      	sub	sp, #44	; 0x2c
 8011674:	af04      	add	r7, sp, #16
 8011676:	6078      	str	r0, [r7, #4]
 8011678:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
 801167a:	2300      	movs	r3, #0
 801167c:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
 801167e:	2300      	movs	r3, #0
 8011680:	613b      	str	r3, [r7, #16]
  int status = 0;
 8011682:	2300      	movs	r3, #0
 8011684:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
 8011686:	f7ff fee9 	bl	801145c <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
 801168a:	6878      	ldr	r0, [r7, #4]
 801168c:	f7ff ff50 	bl	8011530 <OPENAMP_shmem_init>
 8011690:	60f8      	str	r0, [r7, #12]
  if(status)
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d001      	beq.n	801169c <MX_OPENAMP_Init+0x2c>
  {
    return status;
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	e06a      	b.n	8011772 <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
 801169c:	6878      	ldr	r0, [r7, #4]
 801169e:	4b37      	ldr	r3, [pc, #220]	; (801177c <MX_OPENAMP_Init+0x10c>)
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	f103 0218 	add.w	r2, r3, #24
 80116a6:	4b36      	ldr	r3, [pc, #216]	; (8011780 <MX_OPENAMP_Init+0x110>)
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	2100      	movs	r1, #0
 80116ac:	9102      	str	r1, [sp, #8]
 80116ae:	4935      	ldr	r1, [pc, #212]	; (8011784 <MX_OPENAMP_Init+0x114>)
 80116b0:	9101      	str	r1, [sp, #4]
 80116b2:	2100      	movs	r1, #0
 80116b4:	9100      	str	r1, [sp, #0]
 80116b6:	21ff      	movs	r1, #255	; 0xff
 80116b8:	f7fe f902 	bl	800f8c0 <rproc_virtio_create_vdev>
 80116bc:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
 80116be:	693b      	ldr	r3, [r7, #16]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d102      	bne.n	80116ca <MX_OPENAMP_Init+0x5a>
  {
    return -1;
 80116c4:	f04f 33ff 	mov.w	r3, #4294967295
 80116c8:	e053      	b.n	8011772 <MX_OPENAMP_Init+0x102>
  }

  rproc_virtio_wait_remote_ready(vdev);
 80116ca:	6938      	ldr	r0, [r7, #16]
 80116cc:	f7fe fa13 	bl	800faf6 <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
 80116d0:	4b2a      	ldr	r3, [pc, #168]	; (801177c <MX_OPENAMP_Init+0x10c>)
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	3334      	adds	r3, #52	; 0x34
 80116d6:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 80116d8:	697b      	ldr	r3, [r7, #20]
 80116da:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 80116dc:	697b      	ldr	r3, [r7, #20]
 80116de:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 80116e0:	461c      	mov	r4, r3
 80116e2:	4b29      	ldr	r3, [pc, #164]	; (8011788 <MX_OPENAMP_Init+0x118>)
 80116e4:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 80116e6:	697a      	ldr	r2, [r7, #20]
 80116e8:	6892      	ldr	r2, [r2, #8]
 80116ea:	6979      	ldr	r1, [r7, #20]
 80116ec:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 80116ee:	9102      	str	r1, [sp, #8]
 80116f0:	9201      	str	r2, [sp, #4]
 80116f2:	9300      	str	r3, [sp, #0]
 80116f4:	4623      	mov	r3, r4
 80116f6:	4602      	mov	r2, r0
 80116f8:	2100      	movs	r1, #0
 80116fa:	6938      	ldr	r0, [r7, #16]
 80116fc:	f7fe f98e 	bl	800fa1c <rproc_virtio_init_vring>
 8011700:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	2b00      	cmp	r3, #0
 8011706:	d001      	beq.n	801170c <MX_OPENAMP_Init+0x9c>
  {
    return status;
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	e032      	b.n	8011772 <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
 801170c:	4b1b      	ldr	r3, [pc, #108]	; (801177c <MX_OPENAMP_Init+0x10c>)
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	3348      	adds	r3, #72	; 0x48
 8011712:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8011714:	697b      	ldr	r3, [r7, #20]
 8011716:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 8011718:	697b      	ldr	r3, [r7, #20]
 801171a:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 801171c:	461c      	mov	r4, r3
 801171e:	4b1a      	ldr	r3, [pc, #104]	; (8011788 <MX_OPENAMP_Init+0x118>)
 8011720:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 8011722:	697a      	ldr	r2, [r7, #20]
 8011724:	6892      	ldr	r2, [r2, #8]
 8011726:	6979      	ldr	r1, [r7, #20]
 8011728:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 801172a:	9102      	str	r1, [sp, #8]
 801172c:	9201      	str	r2, [sp, #4]
 801172e:	9300      	str	r3, [sp, #0]
 8011730:	4623      	mov	r3, r4
 8011732:	4602      	mov	r2, r0
 8011734:	2101      	movs	r1, #1
 8011736:	6938      	ldr	r0, [r7, #16]
 8011738:	f7fe f970 	bl	800fa1c <rproc_virtio_init_vring>
 801173c:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	2b00      	cmp	r3, #0
 8011742:	d001      	beq.n	8011748 <MX_OPENAMP_Init+0xd8>
  {
    return status;
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	e014      	b.n	8011772 <MX_OPENAMP_Init+0x102>

  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 8011748:	4b10      	ldr	r3, [pc, #64]	; (801178c <MX_OPENAMP_Init+0x11c>)
 801174a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801174e:	4619      	mov	r1, r3
                             (size_t)SHM_SIZE);
 8011750:	4a0f      	ldr	r2, [pc, #60]	; (8011790 <MX_OPENAMP_Init+0x120>)
 8011752:	4b0e      	ldr	r3, [pc, #56]	; (801178c <MX_OPENAMP_Init+0x11c>)
 8011754:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 8011756:	461a      	mov	r2, r3
 8011758:	480e      	ldr	r0, [pc, #56]	; (8011794 <MX_OPENAMP_Init+0x124>)
 801175a:	f7fe fe3d 	bl	80103d8 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
 801175e:	4b0a      	ldr	r3, [pc, #40]	; (8011788 <MX_OPENAMP_Init+0x118>)
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	4a0c      	ldr	r2, [pc, #48]	; (8011794 <MX_OPENAMP_Init+0x124>)
 8011764:	9200      	str	r2, [sp, #0]
 8011766:	683a      	ldr	r2, [r7, #0]
 8011768:	6939      	ldr	r1, [r7, #16]
 801176a:	480b      	ldr	r0, [pc, #44]	; (8011798 <MX_OPENAMP_Init+0x128>)
 801176c:	f7ff f8a4 	bl	80108b8 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
 8011770:	2300      	movs	r3, #0
}
 8011772:	4618      	mov	r0, r3
 8011774:	371c      	adds	r7, #28
 8011776:	46bd      	mov	sp, r7
 8011778:	bd90      	pop	{r4, r7, pc}
 801177a:	bf00      	nop
 801177c:	2400a3bc 	.word	0x2400a3bc
 8011780:	2400a3b8 	.word	0x2400a3b8
 8011784:	080114d9 	.word	0x080114d9
 8011788:	2400a3b4 	.word	0x2400a3b4
 801178c:	38000400 	.word	0x38000400
 8011790:	38010000 	.word	0x38010000
 8011794:	2400a3c0 	.word	0x2400a3c0
 8011798:	2400a3cc 	.word	0x2400a3cc

0801179c <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
 801179c:	b580      	push	{r7, lr}
 801179e:	b08a      	sub	sp, #40	; 0x28
 80117a0:	af04      	add	r7, sp, #16
 80117a2:	60f8      	str	r0, [r7, #12]
 80117a4:	60b9      	str	r1, [r7, #8]
 80117a6:	607a      	str	r2, [r7, #4]
 80117a8:	603b      	str	r3, [r7, #0]
  int ret = 0;
 80117aa:	2300      	movs	r3, #0
 80117ac:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
 80117ae:	6a3b      	ldr	r3, [r7, #32]
 80117b0:	9302      	str	r3, [sp, #8]
 80117b2:	683b      	ldr	r3, [r7, #0]
 80117b4:	9301      	str	r3, [sp, #4]
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	9300      	str	r3, [sp, #0]
 80117ba:	f04f 33ff 	mov.w	r3, #4294967295
 80117be:	68ba      	ldr	r2, [r7, #8]
 80117c0:	4904      	ldr	r1, [pc, #16]	; (80117d4 <OPENAMP_create_endpoint+0x38>)
 80117c2:	68f8      	ldr	r0, [r7, #12]
 80117c4:	f7fe fc24 	bl	8010010 <rpmsg_create_ept>
 80117c8:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
 80117ca:	697b      	ldr	r3, [r7, #20]
}
 80117cc:	4618      	mov	r0, r3
 80117ce:	3718      	adds	r7, #24
 80117d0:	46bd      	mov	sp, r7
 80117d2:	bd80      	pop	{r7, pc}
 80117d4:	2400a3cc 	.word	0x2400a3cc

080117d8 <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
 80117dc:	4b03      	ldr	r3, [pc, #12]	; (80117ec <OPENAMP_check_for_message+0x14>)
 80117de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80117e0:	4618      	mov	r0, r3
 80117e2:	f7ff fe5f 	bl	80114a4 <MAILBOX_Poll>
}
 80117e6:	bf00      	nop
 80117e8:	bd80      	pop	{r7, pc}
 80117ea:	bf00      	nop
 80117ec:	2400a3cc 	.word	0x2400a3cc

080117f0 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b084      	sub	sp, #16
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	60f8      	str	r0, [r7, #12]
 80117f8:	60b9      	str	r1, [r7, #8]
 80117fa:	607a      	str	r2, [r7, #4]

    /*
     * Currently the GCC linker doesn't initialize the resource_table global variable at startup
     * it is done here by the master application.
     */
	memset(&resource_table, '\0', sizeof(struct shared_resource_table));
 80117fc:	228c      	movs	r2, #140	; 0x8c
 80117fe:	2100      	movs	r1, #0
 8011800:	481e      	ldr	r0, [pc, #120]	; (801187c <resource_table_init+0x8c>)
 8011802:	f000 fc2b 	bl	801205c <memset>
	resource_table.num = 1;
 8011806:	4b1d      	ldr	r3, [pc, #116]	; (801187c <resource_table_init+0x8c>)
 8011808:	2201      	movs	r2, #1
 801180a:	605a      	str	r2, [r3, #4]
	resource_table.version = 1;
 801180c:	4b1b      	ldr	r3, [pc, #108]	; (801187c <resource_table_init+0x8c>)
 801180e:	2201      	movs	r2, #1
 8011810:	601a      	str	r2, [r3, #0]
	resource_table.offset[0] = offsetof(struct shared_resource_table, vdev);
 8011812:	4b1a      	ldr	r3, [pc, #104]	; (801187c <resource_table_init+0x8c>)
 8011814:	2218      	movs	r2, #24
 8011816:	611a      	str	r2, [r3, #16]

	resource_table.vring0.da = VRING_TX_ADDRESS;
 8011818:	4b19      	ldr	r3, [pc, #100]	; (8011880 <resource_table_init+0x90>)
 801181a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801181e:	4a17      	ldr	r2, [pc, #92]	; (801187c <resource_table_init+0x8c>)
 8011820:	6353      	str	r3, [r2, #52]	; 0x34
	resource_table.vring0.align = VRING_ALIGNMENT;
 8011822:	4b16      	ldr	r3, [pc, #88]	; (801187c <resource_table_init+0x8c>)
 8011824:	2204      	movs	r2, #4
 8011826:	639a      	str	r2, [r3, #56]	; 0x38
	resource_table.vring0.num = VRING_NUM_BUFFS;
 8011828:	4b14      	ldr	r3, [pc, #80]	; (801187c <resource_table_init+0x8c>)
 801182a:	2204      	movs	r2, #4
 801182c:	63da      	str	r2, [r3, #60]	; 0x3c
	resource_table.vring0.notifyid = VRING0_ID;
 801182e:	4b13      	ldr	r3, [pc, #76]	; (801187c <resource_table_init+0x8c>)
 8011830:	2200      	movs	r2, #0
 8011832:	641a      	str	r2, [r3, #64]	; 0x40

	resource_table.vring1.da = VRING_RX_ADDRESS;
 8011834:	4a12      	ldr	r2, [pc, #72]	; (8011880 <resource_table_init+0x90>)
 8011836:	4b11      	ldr	r3, [pc, #68]	; (801187c <resource_table_init+0x8c>)
 8011838:	649a      	str	r2, [r3, #72]	; 0x48
	resource_table.vring1.align = VRING_ALIGNMENT;
 801183a:	4b10      	ldr	r3, [pc, #64]	; (801187c <resource_table_init+0x8c>)
 801183c:	2204      	movs	r2, #4
 801183e:	64da      	str	r2, [r3, #76]	; 0x4c
	resource_table.vring1.num = VRING_NUM_BUFFS;
 8011840:	4b0e      	ldr	r3, [pc, #56]	; (801187c <resource_table_init+0x8c>)
 8011842:	2204      	movs	r2, #4
 8011844:	651a      	str	r2, [r3, #80]	; 0x50
	resource_table.vring1.notifyid = VRING1_ID;
 8011846:	4b0d      	ldr	r3, [pc, #52]	; (801187c <resource_table_init+0x8c>)
 8011848:	2201      	movs	r2, #1
 801184a:	655a      	str	r2, [r3, #84]	; 0x54

	resource_table.vdev.type = RSC_VDEV;
 801184c:	4b0b      	ldr	r3, [pc, #44]	; (801187c <resource_table_init+0x8c>)
 801184e:	2203      	movs	r2, #3
 8011850:	619a      	str	r2, [r3, #24]
	resource_table.vdev.id = VIRTIO_ID_RPMSG_;
 8011852:	4b0a      	ldr	r3, [pc, #40]	; (801187c <resource_table_init+0x8c>)
 8011854:	2207      	movs	r2, #7
 8011856:	61da      	str	r2, [r3, #28]
	resource_table.vdev.num_of_vrings=VRING_COUNT;
 8011858:	4b08      	ldr	r3, [pc, #32]	; (801187c <resource_table_init+0x8c>)
 801185a:	2202      	movs	r2, #2
 801185c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	resource_table.vdev.dfeatures = RPMSG_IPU_C0_FEATURES;
 8011860:	4b06      	ldr	r3, [pc, #24]	; (801187c <resource_table_init+0x8c>)
 8011862:	2201      	movs	r2, #1
 8011864:	625a      	str	r2, [r3, #36]	; 0x24
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	228c      	movs	r2, #140	; 0x8c
 801186a:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
 801186c:	68bb      	ldr	r3, [r7, #8]
 801186e:	4a03      	ldr	r2, [pc, #12]	; (801187c <resource_table_init+0x8c>)
 8011870:	601a      	str	r2, [r3, #0]
}
 8011872:	bf00      	nop
 8011874:	3710      	adds	r7, #16
 8011876:	46bd      	mov	sp, r7
 8011878:	bd80      	pop	{r7, pc}
 801187a:	bf00      	nop
 801187c:	38000000 	.word	0x38000000
 8011880:	38000400 	.word	0x38000400

08011884 <createEmptyFrame>:
uint8_t numberOfDisplayedSafeAirIcons = 0;

uint32_t LCDArraySize = 40960;

void createEmptyFrame(bool isMenuFrame)
{
 8011884:	b580      	push	{r7, lr}
 8011886:	b084      	sub	sp, #16
 8011888:	af00      	add	r7, sp, #0
 801188a:	4603      	mov	r3, r0
 801188c:	71fb      	strb	r3, [r7, #7]
	if (!isMenuFrame)
 801188e:	79fb      	ldrb	r3, [r7, #7]
 8011890:	f083 0301 	eor.w	r3, r3, #1
 8011894:	b2db      	uxtb	r3, r3
 8011896:	2b00      	cmp	r3, #0
 8011898:	d024      	beq.n	80118e4 <createEmptyFrame+0x60>
	{
		memset(nextFrameToDraw,0x00,LCDArraySize);
 801189a:	4b19      	ldr	r3, [pc, #100]	; (8011900 <createEmptyFrame+0x7c>)
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	461a      	mov	r2, r3
 80118a0:	2100      	movs	r1, #0
 80118a2:	4818      	ldr	r0, [pc, #96]	; (8011904 <createEmptyFrame+0x80>)
 80118a4:	f000 fbda 	bl	801205c <memset>

		for (int i = 0 ; i < (LCDArraySize - SCREEN_WIDTH * STATUSBAR_HEIGHT * 2) /2 ; i++)
 80118a8:	2300      	movs	r3, #0
 80118aa:	60fb      	str	r3, [r7, #12]
 80118ac:	e011      	b.n	80118d2 <createEmptyFrame+0x4e>
		{
			nextFrameToDraw[(i + SCREEN_WIDTH * STATUSBAR_HEIGHT) * 2] = BACKGROUND_HIGH_BYTE;
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 80118b4:	005b      	lsls	r3, r3, #1
 80118b6:	4a13      	ldr	r2, [pc, #76]	; (8011904 <createEmptyFrame+0x80>)
 80118b8:	21ff      	movs	r1, #255	; 0xff
 80118ba:	54d1      	strb	r1, [r2, r3]
			nextFrameToDraw[(i + SCREEN_WIDTH * STATUSBAR_HEIGHT) * 2 + 1] = BACKGROUND_LOW_BYTE;
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 80118c2:	005b      	lsls	r3, r3, #1
 80118c4:	3301      	adds	r3, #1
 80118c6:	4a0f      	ldr	r2, [pc, #60]	; (8011904 <createEmptyFrame+0x80>)
 80118c8:	21ff      	movs	r1, #255	; 0xff
 80118ca:	54d1      	strb	r1, [r2, r3]
		for (int i = 0 ; i < (LCDArraySize - SCREEN_WIDTH * STATUSBAR_HEIGHT * 2) /2 ; i++)
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	3301      	adds	r3, #1
 80118d0:	60fb      	str	r3, [r7, #12]
 80118d2:	4b0b      	ldr	r3, [pc, #44]	; (8011900 <createEmptyFrame+0x7c>)
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	f5a3 53c8 	sub.w	r3, r3, #6400	; 0x1900
 80118da:	085a      	lsrs	r2, r3, #1
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	429a      	cmp	r2, r3
 80118e0:	d8e5      	bhi.n	80118ae <createEmptyFrame+0x2a>
	}
	else if (isMenuFrame)
	{
		memset(nextFrameToDraw,0xFF,LCDArraySize);
	}
}
 80118e2:	e009      	b.n	80118f8 <createEmptyFrame+0x74>
	else if (isMenuFrame)
 80118e4:	79fb      	ldrb	r3, [r7, #7]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d006      	beq.n	80118f8 <createEmptyFrame+0x74>
		memset(nextFrameToDraw,0xFF,LCDArraySize);
 80118ea:	4b05      	ldr	r3, [pc, #20]	; (8011900 <createEmptyFrame+0x7c>)
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	461a      	mov	r2, r3
 80118f0:	21ff      	movs	r1, #255	; 0xff
 80118f2:	4804      	ldr	r0, [pc, #16]	; (8011904 <createEmptyFrame+0x80>)
 80118f4:	f000 fbb2 	bl	801205c <memset>
}
 80118f8:	bf00      	nop
 80118fa:	3710      	adds	r7, #16
 80118fc:	46bd      	mov	sp, r7
 80118fe:	bd80      	pop	{r7, pc}
 8011900:	2400a0ec 	.word	0x2400a0ec
 8011904:	24000070 	.word	0x24000070

08011908 <displayNextFrame>:

void displayNextFrame(void)
{
 8011908:	b580      	push	{r7, lr}
 801190a:	af00      	add	r7, sp, #0
//	LCD_1IN8_SetCursor(0, 0);
	if (HAL_GetTick() - lastFrameDisplayed > 30)
 801190c:	f7f1 f866 	bl	80029dc <HAL_GetTick>
 8011910:	4602      	mov	r2, r0
 8011912:	4b0a      	ldr	r3, [pc, #40]	; (801193c <displayNextFrame+0x34>)
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	1ad3      	subs	r3, r2, r3
 8011918:	2b1e      	cmp	r3, #30
 801191a:	d90d      	bls.n	8011938 <displayNextFrame+0x30>
	{
		HAL_SPI_Transmit(&DEV_SPI, (uint8_t *)nextFrameToDraw, LCDArraySize, 1500);
 801191c:	4b08      	ldr	r3, [pc, #32]	; (8011940 <displayNextFrame+0x38>)
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	b29a      	uxth	r2, r3
 8011922:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8011926:	4907      	ldr	r1, [pc, #28]	; (8011944 <displayNextFrame+0x3c>)
 8011928:	4807      	ldr	r0, [pc, #28]	; (8011948 <displayNextFrame+0x40>)
 801192a:	f7f8 f847 	bl	80099bc <HAL_SPI_Transmit>
//		createEmptyFrame();
		lastFrameDisplayed = HAL_GetTick();
 801192e:	f7f1 f855 	bl	80029dc <HAL_GetTick>
 8011932:	4603      	mov	r3, r0
 8011934:	4a01      	ldr	r2, [pc, #4]	; (801193c <displayNextFrame+0x34>)
 8011936:	6013      	str	r3, [r2, #0]
	}
}
 8011938:	bf00      	nop
 801193a:	bd80      	pop	{r7, pc}
 801193c:	2400a3ac 	.word	0x2400a3ac
 8011940:	2400a0ec 	.word	0x2400a0ec
 8011944:	24000070 	.word	0x24000070
 8011948:	2400a5bc 	.word	0x2400a5bc

0801194c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801194c:	b580      	push	{r7, lr}
 801194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8011950:	2201      	movs	r2, #1
 8011952:	490e      	ldr	r1, [pc, #56]	; (801198c <MX_USB_HOST_Init+0x40>)
 8011954:	480e      	ldr	r0, [pc, #56]	; (8011990 <MX_USB_HOST_Init+0x44>)
 8011956:	f7fc fbbf 	bl	800e0d8 <USBH_Init>
 801195a:	4603      	mov	r3, r0
 801195c:	2b00      	cmp	r3, #0
 801195e:	d001      	beq.n	8011964 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8011960:	f7f0 fa9b 	bl	8001e9a <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8011964:	490b      	ldr	r1, [pc, #44]	; (8011994 <MX_USB_HOST_Init+0x48>)
 8011966:	480a      	ldr	r0, [pc, #40]	; (8011990 <MX_USB_HOST_Init+0x44>)
 8011968:	f7fc fc5e 	bl	800e228 <USBH_RegisterClass>
 801196c:	4603      	mov	r3, r0
 801196e:	2b00      	cmp	r3, #0
 8011970:	d001      	beq.n	8011976 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8011972:	f7f0 fa92 	bl	8001e9a <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8011976:	4806      	ldr	r0, [pc, #24]	; (8011990 <MX_USB_HOST_Init+0x44>)
 8011978:	f7fc fceb 	bl	800e352 <USBH_Start>
 801197c:	4603      	mov	r3, r0
 801197e:	2b00      	cmp	r3, #0
 8011980:	d001      	beq.n	8011986 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8011982:	f7f0 fa8a 	bl	8001e9a <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8011986:	bf00      	nop
 8011988:	bd80      	pop	{r7, pc}
 801198a:	bf00      	nop
 801198c:	08011999 	.word	0x08011999
 8011990:	2400a8bc 	.word	0x2400a8bc
 8011994:	24000020 	.word	0x24000020

08011998 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8011998:	b480      	push	{r7}
 801199a:	b083      	sub	sp, #12
 801199c:	af00      	add	r7, sp, #0
 801199e:	6078      	str	r0, [r7, #4]
 80119a0:	460b      	mov	r3, r1
 80119a2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80119a4:	78fb      	ldrb	r3, [r7, #3]
 80119a6:	3b01      	subs	r3, #1
 80119a8:	2b04      	cmp	r3, #4
 80119aa:	d819      	bhi.n	80119e0 <USBH_UserProcess+0x48>
 80119ac:	a201      	add	r2, pc, #4	; (adr r2, 80119b4 <USBH_UserProcess+0x1c>)
 80119ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119b2:	bf00      	nop
 80119b4:	080119e1 	.word	0x080119e1
 80119b8:	080119d1 	.word	0x080119d1
 80119bc:	080119e1 	.word	0x080119e1
 80119c0:	080119d9 	.word	0x080119d9
 80119c4:	080119c9 	.word	0x080119c9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80119c8:	4b09      	ldr	r3, [pc, #36]	; (80119f0 <USBH_UserProcess+0x58>)
 80119ca:	2203      	movs	r2, #3
 80119cc:	701a      	strb	r2, [r3, #0]
  break;
 80119ce:	e008      	b.n	80119e2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80119d0:	4b07      	ldr	r3, [pc, #28]	; (80119f0 <USBH_UserProcess+0x58>)
 80119d2:	2202      	movs	r2, #2
 80119d4:	701a      	strb	r2, [r3, #0]
  break;
 80119d6:	e004      	b.n	80119e2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80119d8:	4b05      	ldr	r3, [pc, #20]	; (80119f0 <USBH_UserProcess+0x58>)
 80119da:	2201      	movs	r2, #1
 80119dc:	701a      	strb	r2, [r3, #0]
  break;
 80119de:	e000      	b.n	80119e2 <USBH_UserProcess+0x4a>

  default:
  break;
 80119e0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80119e2:	bf00      	nop
 80119e4:	370c      	adds	r7, #12
 80119e6:	46bd      	mov	sp, r7
 80119e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ec:	4770      	bx	lr
 80119ee:	bf00      	nop
 80119f0:	2400a448 	.word	0x2400a448

080119f4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80119f4:	b580      	push	{r7, lr}
 80119f6:	b0b8      	sub	sp, #224	; 0xe0
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80119fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8011a00:	2200      	movs	r2, #0
 8011a02:	601a      	str	r2, [r3, #0]
 8011a04:	605a      	str	r2, [r3, #4]
 8011a06:	609a      	str	r2, [r3, #8]
 8011a08:	60da      	str	r2, [r3, #12]
 8011a0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011a0c:	f107 0310 	add.w	r3, r7, #16
 8011a10:	22bc      	movs	r2, #188	; 0xbc
 8011a12:	2100      	movs	r1, #0
 8011a14:	4618      	mov	r0, r3
 8011a16:	f000 fb21 	bl	801205c <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	4a3b      	ldr	r2, [pc, #236]	; (8011b0c <HAL_HCD_MspInit+0x118>)
 8011a20:	4293      	cmp	r3, r2
 8011a22:	d16e      	bne.n	8011b02 <HAL_HCD_MspInit+0x10e>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011a24:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011a28:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8011a2a:	2301      	movs	r3, #1
 8011a2c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8011a2e:	2312      	movs	r3, #18
 8011a30:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8011a32:	2302      	movs	r3, #2
 8011a34:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8011a36:	2303      	movs	r3, #3
 8011a38:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8011a3a:	2302      	movs	r3, #2
 8011a3c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8011a3e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8011a42:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144.0;
 8011a44:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8011a48:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8011a4a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8011a4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011a52:	f107 0310 	add.w	r3, r7, #16
 8011a56:	4618      	mov	r0, r3
 8011a58:	f7f6 fb4c 	bl	80080f4 <HAL_RCCEx_PeriphCLKConfig>
 8011a5c:	4603      	mov	r3, r0
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d001      	beq.n	8011a66 <HAL_HCD_MspInit+0x72>
    {
      Error_Handler();
 8011a62:	f7f0 fa1a 	bl	8001e9a <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8011a66:	f7f5 fb99 	bl	800719c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011a6a:	4b29      	ldr	r3, [pc, #164]	; (8011b10 <HAL_HCD_MspInit+0x11c>)
 8011a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011a70:	4a27      	ldr	r2, [pc, #156]	; (8011b10 <HAL_HCD_MspInit+0x11c>)
 8011a72:	f043 0301 	orr.w	r3, r3, #1
 8011a76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8011a7a:	4b25      	ldr	r3, [pc, #148]	; (8011b10 <HAL_HCD_MspInit+0x11c>)
 8011a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011a80:	f003 0301 	and.w	r3, r3, #1
 8011a84:	60fb      	str	r3, [r7, #12]
 8011a86:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8011a88:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8011a8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011a90:	2302      	movs	r3, #2
 8011a92:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011a96:	2300      	movs	r3, #0
 8011a98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8011aa2:	230a      	movs	r3, #10
 8011aa4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011aa8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8011aac:	4619      	mov	r1, r3
 8011aae:	4819      	ldr	r0, [pc, #100]	; (8011b14 <HAL_HCD_MspInit+0x120>)
 8011ab0:	f7f3 fa48 	bl	8004f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8011ab4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011ab8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011abc:	2300      	movs	r3, #0
 8011abe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011ac8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8011acc:	4619      	mov	r1, r3
 8011ace:	4811      	ldr	r0, [pc, #68]	; (8011b14 <HAL_HCD_MspInit+0x120>)
 8011ad0:	f7f3 fa38 	bl	8004f44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011ad4:	4b0e      	ldr	r3, [pc, #56]	; (8011b10 <HAL_HCD_MspInit+0x11c>)
 8011ad6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8011ada:	4a0d      	ldr	r2, [pc, #52]	; (8011b10 <HAL_HCD_MspInit+0x11c>)
 8011adc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011ae0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8011ae4:	4b0a      	ldr	r3, [pc, #40]	; (8011b10 <HAL_HCD_MspInit+0x11c>)
 8011ae6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8011aea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011aee:	60bb      	str	r3, [r7, #8]
 8011af0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8011af2:	2200      	movs	r2, #0
 8011af4:	2100      	movs	r1, #0
 8011af6:	2065      	movs	r0, #101	; 0x65
 8011af8:	f7f1 f89b 	bl	8002c32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011afc:	2065      	movs	r0, #101	; 0x65
 8011afe:	f7f1 f8b2 	bl	8002c66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011b02:	bf00      	nop
 8011b04:	37e0      	adds	r7, #224	; 0xe0
 8011b06:	46bd      	mov	sp, r7
 8011b08:	bd80      	pop	{r7, pc}
 8011b0a:	bf00      	nop
 8011b0c:	40080000 	.word	0x40080000
 8011b10:	58024400 	.word	0x58024400
 8011b14:	58020000 	.word	0x58020000

08011b18 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8011b18:	b580      	push	{r7, lr}
 8011b1a:	b082      	sub	sp, #8
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011b26:	4618      	mov	r0, r3
 8011b28:	f7fc fc34 	bl	800e394 <USBH_LL_IncTimer>
}
 8011b2c:	bf00      	nop
 8011b2e:	3708      	adds	r7, #8
 8011b30:	46bd      	mov	sp, r7
 8011b32:	bd80      	pop	{r7, pc}

08011b34 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011b34:	b580      	push	{r7, lr}
 8011b36:	b082      	sub	sp, #8
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011b42:	4618      	mov	r0, r3
 8011b44:	f7fc fc78 	bl	800e438 <USBH_LL_Connect>
}
 8011b48:	bf00      	nop
 8011b4a:	3708      	adds	r7, #8
 8011b4c:	46bd      	mov	sp, r7
 8011b4e:	bd80      	pop	{r7, pc}

08011b50 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b082      	sub	sp, #8
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011b5e:	4618      	mov	r0, r3
 8011b60:	f7fc fc87 	bl	800e472 <USBH_LL_Disconnect>
}
 8011b64:	bf00      	nop
 8011b66:	3708      	adds	r7, #8
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	bd80      	pop	{r7, pc}

08011b6c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8011b6c:	b480      	push	{r7}
 8011b6e:	b083      	sub	sp, #12
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
 8011b74:	460b      	mov	r3, r1
 8011b76:	70fb      	strb	r3, [r7, #3]
 8011b78:	4613      	mov	r3, r2
 8011b7a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8011b7c:	bf00      	nop
 8011b7e:	370c      	adds	r7, #12
 8011b80:	46bd      	mov	sp, r7
 8011b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b86:	4770      	bx	lr

08011b88 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b082      	sub	sp, #8
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011b96:	4618      	mov	r0, r3
 8011b98:	f7fc fc2e 	bl	800e3f8 <USBH_LL_PortEnabled>
}
 8011b9c:	bf00      	nop
 8011b9e:	3708      	adds	r7, #8
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	bd80      	pop	{r7, pc}

08011ba4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011ba4:	b580      	push	{r7, lr}
 8011ba6:	b082      	sub	sp, #8
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	f7fc fc30 	bl	800e418 <USBH_LL_PortDisabled>
}
 8011bb8:	bf00      	nop
 8011bba:	3708      	adds	r7, #8
 8011bbc:	46bd      	mov	sp, r7
 8011bbe:	bd80      	pop	{r7, pc}

08011bc0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b082      	sub	sp, #8
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8011bc8:	687a      	ldr	r2, [r7, #4]
 8011bca:	f643 230c 	movw	r3, #14860	; 0x3a0c
 8011bce:	4413      	add	r3, r2
 8011bd0:	781b      	ldrb	r3, [r3, #0]
 8011bd2:	2b01      	cmp	r3, #1
 8011bd4:	d12b      	bne.n	8011c2e <USBH_LL_Init+0x6e>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8011bd6:	4a18      	ldr	r2, [pc, #96]	; (8011c38 <USBH_LL_Init+0x78>)
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8011bde:	687a      	ldr	r2, [r7, #4]
 8011be0:	f643 2310 	movw	r3, #14864	; 0x3a10
 8011be4:	4413      	add	r3, r2
 8011be6:	4a14      	ldr	r2, [pc, #80]	; (8011c38 <USBH_LL_Init+0x78>)
 8011be8:	601a      	str	r2, [r3, #0]

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011bea:	4b13      	ldr	r3, [pc, #76]	; (8011c38 <USBH_LL_Init+0x78>)
 8011bec:	4a13      	ldr	r2, [pc, #76]	; (8011c3c <USBH_LL_Init+0x7c>)
 8011bee:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 8011bf0:	4b11      	ldr	r3, [pc, #68]	; (8011c38 <USBH_LL_Init+0x78>)
 8011bf2:	2210      	movs	r2, #16
 8011bf4:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8011bf6:	4b10      	ldr	r3, [pc, #64]	; (8011c38 <USBH_LL_Init+0x78>)
 8011bf8:	2201      	movs	r2, #1
 8011bfa:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011bfc:	4b0e      	ldr	r3, [pc, #56]	; (8011c38 <USBH_LL_Init+0x78>)
 8011bfe:	2200      	movs	r2, #0
 8011c00:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8011c02:	4b0d      	ldr	r3, [pc, #52]	; (8011c38 <USBH_LL_Init+0x78>)
 8011c04:	2202      	movs	r2, #2
 8011c06:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011c08:	4b0b      	ldr	r3, [pc, #44]	; (8011c38 <USBH_LL_Init+0x78>)
 8011c0a:	2200      	movs	r2, #0
 8011c0c:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8011c0e:	480a      	ldr	r0, [pc, #40]	; (8011c38 <USBH_LL_Init+0x78>)
 8011c10:	f7f3 fb86 	bl	8005320 <HAL_HCD_Init>
 8011c14:	4603      	mov	r3, r0
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d001      	beq.n	8011c1e <USBH_LL_Init+0x5e>
  {
    Error_Handler( );
 8011c1a:	f7f0 f93e 	bl	8001e9a <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8011c1e:	4806      	ldr	r0, [pc, #24]	; (8011c38 <USBH_LL_Init+0x78>)
 8011c20:	f7f3 ff54 	bl	8005acc <HAL_HCD_GetCurrentFrame>
 8011c24:	4603      	mov	r3, r0
 8011c26:	4619      	mov	r1, r3
 8011c28:	6878      	ldr	r0, [r7, #4]
 8011c2a:	f7fc fba2 	bl	800e372 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8011c2e:	2300      	movs	r3, #0
}
 8011c30:	4618      	mov	r0, r3
 8011c32:	3708      	adds	r7, #8
 8011c34:	46bd      	mov	sp, r7
 8011c36:	bd80      	pop	{r7, pc}
 8011c38:	2400e314 	.word	0x2400e314
 8011c3c:	40080000 	.word	0x40080000

08011c40 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8011c40:	b580      	push	{r7, lr}
 8011c42:	b084      	sub	sp, #16
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c48:	2300      	movs	r3, #0
 8011c4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011c4c:	2300      	movs	r3, #0
 8011c4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8011c50:	687a      	ldr	r2, [r7, #4]
 8011c52:	f643 2310 	movw	r3, #14864	; 0x3a10
 8011c56:	4413      	add	r3, r2
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	f7f3 fece 	bl	80059fc <HAL_HCD_Start>
 8011c60:	4603      	mov	r3, r0
 8011c62:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011c64:	7bfb      	ldrb	r3, [r7, #15]
 8011c66:	4618      	mov	r0, r3
 8011c68:	f000 f91e 	bl	8011ea8 <USBH_Get_USB_Status>
 8011c6c:	4603      	mov	r3, r0
 8011c6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c70:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c72:	4618      	mov	r0, r3
 8011c74:	3710      	adds	r7, #16
 8011c76:	46bd      	mov	sp, r7
 8011c78:	bd80      	pop	{r7, pc}

08011c7a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8011c7a:	b580      	push	{r7, lr}
 8011c7c:	b084      	sub	sp, #16
 8011c7e:	af00      	add	r7, sp, #0
 8011c80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c82:	2300      	movs	r3, #0
 8011c84:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011c86:	2300      	movs	r3, #0
 8011c88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8011c8a:	687a      	ldr	r2, [r7, #4]
 8011c8c:	f643 2310 	movw	r3, #14864	; 0x3a10
 8011c90:	4413      	add	r3, r2
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	4618      	mov	r0, r3
 8011c96:	f7f3 fed4 	bl	8005a42 <HAL_HCD_Stop>
 8011c9a:	4603      	mov	r3, r0
 8011c9c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011c9e:	7bfb      	ldrb	r3, [r7, #15]
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	f000 f901 	bl	8011ea8 <USBH_Get_USB_Status>
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011caa:	7bbb      	ldrb	r3, [r7, #14]
}
 8011cac:	4618      	mov	r0, r3
 8011cae:	3710      	adds	r7, #16
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	bd80      	pop	{r7, pc}

08011cb4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b082      	sub	sp, #8
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	6078      	str	r0, [r7, #4]
 8011cbc:	460b      	mov	r3, r1
 8011cbe:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8011cc0:	687a      	ldr	r2, [r7, #4]
 8011cc2:	f643 2310 	movw	r3, #14864	; 0x3a10
 8011cc6:	4413      	add	r3, r2
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	78fa      	ldrb	r2, [r7, #3]
 8011ccc:	4611      	mov	r1, r2
 8011cce:	4618      	mov	r0, r3
 8011cd0:	f7f3 fee8 	bl	8005aa4 <HAL_HCD_HC_GetXferCount>
 8011cd4:	4603      	mov	r3, r0
}
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	3708      	adds	r7, #8
 8011cda:	46bd      	mov	sp, r7
 8011cdc:	bd80      	pop	{r7, pc}

08011cde <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8011cde:	b590      	push	{r4, r7, lr}
 8011ce0:	b089      	sub	sp, #36	; 0x24
 8011ce2:	af04      	add	r7, sp, #16
 8011ce4:	6078      	str	r0, [r7, #4]
 8011ce6:	4608      	mov	r0, r1
 8011ce8:	4611      	mov	r1, r2
 8011cea:	461a      	mov	r2, r3
 8011cec:	4603      	mov	r3, r0
 8011cee:	70fb      	strb	r3, [r7, #3]
 8011cf0:	460b      	mov	r3, r1
 8011cf2:	70bb      	strb	r3, [r7, #2]
 8011cf4:	4613      	mov	r3, r2
 8011cf6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8011d00:	687a      	ldr	r2, [r7, #4]
 8011d02:	f643 2310 	movw	r3, #14864	; 0x3a10
 8011d06:	4413      	add	r3, r2
 8011d08:	6818      	ldr	r0, [r3, #0]
 8011d0a:	787c      	ldrb	r4, [r7, #1]
 8011d0c:	78ba      	ldrb	r2, [r7, #2]
 8011d0e:	78f9      	ldrb	r1, [r7, #3]
 8011d10:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011d12:	9302      	str	r3, [sp, #8]
 8011d14:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011d18:	9301      	str	r3, [sp, #4]
 8011d1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011d1e:	9300      	str	r3, [sp, #0]
 8011d20:	4623      	mov	r3, r4
 8011d22:	f7f3 fb5f 	bl	80053e4 <HAL_HCD_HC_Init>
 8011d26:	4603      	mov	r3, r0
 8011d28:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8011d2a:	7bfb      	ldrb	r3, [r7, #15]
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	f000 f8bb 	bl	8011ea8 <USBH_Get_USB_Status>
 8011d32:	4603      	mov	r3, r0
 8011d34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011d36:	7bbb      	ldrb	r3, [r7, #14]
}
 8011d38:	4618      	mov	r0, r3
 8011d3a:	3714      	adds	r7, #20
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	bd90      	pop	{r4, r7, pc}

08011d40 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011d40:	b580      	push	{r7, lr}
 8011d42:	b084      	sub	sp, #16
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	6078      	str	r0, [r7, #4]
 8011d48:	460b      	mov	r3, r1
 8011d4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d4c:	2300      	movs	r3, #0
 8011d4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011d50:	2300      	movs	r3, #0
 8011d52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8011d54:	687a      	ldr	r2, [r7, #4]
 8011d56:	f643 2310 	movw	r3, #14864	; 0x3a10
 8011d5a:	4413      	add	r3, r2
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	78fa      	ldrb	r2, [r7, #3]
 8011d60:	4611      	mov	r1, r2
 8011d62:	4618      	mov	r0, r3
 8011d64:	f7f3 fbcd 	bl	8005502 <HAL_HCD_HC_Halt>
 8011d68:	4603      	mov	r3, r0
 8011d6a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011d6c:	7bfb      	ldrb	r3, [r7, #15]
 8011d6e:	4618      	mov	r0, r3
 8011d70:	f000 f89a 	bl	8011ea8 <USBH_Get_USB_Status>
 8011d74:	4603      	mov	r3, r0
 8011d76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011d78:	7bbb      	ldrb	r3, [r7, #14]
}
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	3710      	adds	r7, #16
 8011d7e:	46bd      	mov	sp, r7
 8011d80:	bd80      	pop	{r7, pc}

08011d82 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8011d82:	b590      	push	{r4, r7, lr}
 8011d84:	b089      	sub	sp, #36	; 0x24
 8011d86:	af04      	add	r7, sp, #16
 8011d88:	6078      	str	r0, [r7, #4]
 8011d8a:	4608      	mov	r0, r1
 8011d8c:	4611      	mov	r1, r2
 8011d8e:	461a      	mov	r2, r3
 8011d90:	4603      	mov	r3, r0
 8011d92:	70fb      	strb	r3, [r7, #3]
 8011d94:	460b      	mov	r3, r1
 8011d96:	70bb      	strb	r3, [r7, #2]
 8011d98:	4613      	mov	r3, r2
 8011d9a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d9c:	2300      	movs	r3, #0
 8011d9e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011da0:	2300      	movs	r3, #0
 8011da2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8011da4:	687a      	ldr	r2, [r7, #4]
 8011da6:	f643 2310 	movw	r3, #14864	; 0x3a10
 8011daa:	4413      	add	r3, r2
 8011dac:	6818      	ldr	r0, [r3, #0]
 8011dae:	787c      	ldrb	r4, [r7, #1]
 8011db0:	78ba      	ldrb	r2, [r7, #2]
 8011db2:	78f9      	ldrb	r1, [r7, #3]
 8011db4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011db8:	9303      	str	r3, [sp, #12]
 8011dba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011dbc:	9302      	str	r3, [sp, #8]
 8011dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dc0:	9301      	str	r3, [sp, #4]
 8011dc2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011dc6:	9300      	str	r3, [sp, #0]
 8011dc8:	4623      	mov	r3, r4
 8011dca:	f7f3 fbbd 	bl	8005548 <HAL_HCD_HC_SubmitRequest>
 8011dce:	4603      	mov	r3, r0
 8011dd0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8011dd2:	7bfb      	ldrb	r3, [r7, #15]
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	f000 f867 	bl	8011ea8 <USBH_Get_USB_Status>
 8011dda:	4603      	mov	r3, r0
 8011ddc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011dde:	7bbb      	ldrb	r3, [r7, #14]
}
 8011de0:	4618      	mov	r0, r3
 8011de2:	3714      	adds	r7, #20
 8011de4:	46bd      	mov	sp, r7
 8011de6:	bd90      	pop	{r4, r7, pc}

08011de8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b082      	sub	sp, #8
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]
 8011df0:	460b      	mov	r3, r1
 8011df2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8011df4:	687a      	ldr	r2, [r7, #4]
 8011df6:	f643 2310 	movw	r3, #14864	; 0x3a10
 8011dfa:	4413      	add	r3, r2
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	78fa      	ldrb	r2, [r7, #3]
 8011e00:	4611      	mov	r1, r2
 8011e02:	4618      	mov	r0, r3
 8011e04:	f7f3 fe3a 	bl	8005a7c <HAL_HCD_HC_GetURBState>
 8011e08:	4603      	mov	r3, r0
}
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	3708      	adds	r7, #8
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	bd80      	pop	{r7, pc}

08011e12 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8011e12:	b580      	push	{r7, lr}
 8011e14:	b082      	sub	sp, #8
 8011e16:	af00      	add	r7, sp, #0
 8011e18:	6078      	str	r0, [r7, #4]
 8011e1a:	460b      	mov	r3, r1
 8011e1c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8011e1e:	687a      	ldr	r2, [r7, #4]
 8011e20:	f643 230c 	movw	r3, #14860	; 0x3a0c
 8011e24:	4413      	add	r3, r2
 8011e26:	781b      	ldrb	r3, [r3, #0]
 8011e28:	2b01      	cmp	r3, #1
 8011e2a:	d103      	bne.n	8011e34 <USBH_LL_DriverVBUS+0x22>
    MX_DriverVbusFS(state);
 8011e2c:	78fb      	ldrb	r3, [r7, #3]
 8011e2e:	4618      	mov	r0, r3
 8011e30:	f000 f866 	bl	8011f00 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8011e34:	20c8      	movs	r0, #200	; 0xc8
 8011e36:	f7f0 fddd 	bl	80029f4 <HAL_Delay>
  return USBH_OK;
 8011e3a:	2300      	movs	r3, #0
}
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	3708      	adds	r7, #8
 8011e40:	46bd      	mov	sp, r7
 8011e42:	bd80      	pop	{r7, pc}

08011e44 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8011e44:	b480      	push	{r7}
 8011e46:	b085      	sub	sp, #20
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	6078      	str	r0, [r7, #4]
 8011e4c:	460b      	mov	r3, r1
 8011e4e:	70fb      	strb	r3, [r7, #3]
 8011e50:	4613      	mov	r3, r2
 8011e52:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8011e54:	687a      	ldr	r2, [r7, #4]
 8011e56:	f643 2310 	movw	r3, #14864	; 0x3a10
 8011e5a:	4413      	add	r3, r2
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8011e60:	78fb      	ldrb	r3, [r7, #3]
 8011e62:	68fa      	ldr	r2, [r7, #12]
 8011e64:	212c      	movs	r1, #44	; 0x2c
 8011e66:	fb01 f303 	mul.w	r3, r1, r3
 8011e6a:	4413      	add	r3, r2
 8011e6c:	333b      	adds	r3, #59	; 0x3b
 8011e6e:	781b      	ldrb	r3, [r3, #0]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d009      	beq.n	8011e88 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8011e74:	78fb      	ldrb	r3, [r7, #3]
 8011e76:	68fa      	ldr	r2, [r7, #12]
 8011e78:	212c      	movs	r1, #44	; 0x2c
 8011e7a:	fb01 f303 	mul.w	r3, r1, r3
 8011e7e:	4413      	add	r3, r2
 8011e80:	3354      	adds	r3, #84	; 0x54
 8011e82:	78ba      	ldrb	r2, [r7, #2]
 8011e84:	701a      	strb	r2, [r3, #0]
 8011e86:	e008      	b.n	8011e9a <USBH_LL_SetToggle+0x56>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8011e88:	78fb      	ldrb	r3, [r7, #3]
 8011e8a:	68fa      	ldr	r2, [r7, #12]
 8011e8c:	212c      	movs	r1, #44	; 0x2c
 8011e8e:	fb01 f303 	mul.w	r3, r1, r3
 8011e92:	4413      	add	r3, r2
 8011e94:	3355      	adds	r3, #85	; 0x55
 8011e96:	78ba      	ldrb	r2, [r7, #2]
 8011e98:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8011e9a:	2300      	movs	r3, #0
}
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	3714      	adds	r7, #20
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea6:	4770      	bx	lr

08011ea8 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011ea8:	b480      	push	{r7}
 8011eaa:	b085      	sub	sp, #20
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	4603      	mov	r3, r0
 8011eb0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011eb6:	79fb      	ldrb	r3, [r7, #7]
 8011eb8:	2b03      	cmp	r3, #3
 8011eba:	d817      	bhi.n	8011eec <USBH_Get_USB_Status+0x44>
 8011ebc:	a201      	add	r2, pc, #4	; (adr r2, 8011ec4 <USBH_Get_USB_Status+0x1c>)
 8011ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ec2:	bf00      	nop
 8011ec4:	08011ed5 	.word	0x08011ed5
 8011ec8:	08011edb 	.word	0x08011edb
 8011ecc:	08011ee1 	.word	0x08011ee1
 8011ed0:	08011ee7 	.word	0x08011ee7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	73fb      	strb	r3, [r7, #15]
    break;
 8011ed8:	e00b      	b.n	8011ef2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8011eda:	2302      	movs	r3, #2
 8011edc:	73fb      	strb	r3, [r7, #15]
    break;
 8011ede:	e008      	b.n	8011ef2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8011ee0:	2301      	movs	r3, #1
 8011ee2:	73fb      	strb	r3, [r7, #15]
    break;
 8011ee4:	e005      	b.n	8011ef2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8011ee6:	2302      	movs	r3, #2
 8011ee8:	73fb      	strb	r3, [r7, #15]
    break;
 8011eea:	e002      	b.n	8011ef2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8011eec:	2302      	movs	r3, #2
 8011eee:	73fb      	strb	r3, [r7, #15]
    break;
 8011ef0:	bf00      	nop
  }
  return usb_status;
 8011ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	3714      	adds	r7, #20
 8011ef8:	46bd      	mov	sp, r7
 8011efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011efe:	4770      	bx	lr

08011f00 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b084      	sub	sp, #16
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	4603      	mov	r3, r0
 8011f08:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8011f0a:	79fb      	ldrb	r3, [r7, #7]
 8011f0c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8011f0e:	79fb      	ldrb	r3, [r7, #7]
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d102      	bne.n	8011f1a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8011f14:	2301      	movs	r3, #1
 8011f16:	73fb      	strb	r3, [r7, #15]
 8011f18:	e001      	b.n	8011f1e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8011f1a:	2300      	movs	r3, #0
 8011f1c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,(GPIO_PinState)data);
 8011f1e:	7bfb      	ldrb	r3, [r7, #15]
 8011f20:	461a      	mov	r2, r3
 8011f22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011f26:	4803      	ldr	r0, [pc, #12]	; (8011f34 <MX_DriverVbusFS+0x34>)
 8011f28:	f7f3 f9bc 	bl	80052a4 <HAL_GPIO_WritePin>
}
 8011f2c:	bf00      	nop
 8011f2e:	3710      	adds	r7, #16
 8011f30:	46bd      	mov	sp, r7
 8011f32:	bd80      	pop	{r7, pc}
 8011f34:	58020000 	.word	0x58020000

08011f38 <__assert_func>:
 8011f38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011f3a:	4614      	mov	r4, r2
 8011f3c:	461a      	mov	r2, r3
 8011f3e:	4b09      	ldr	r3, [pc, #36]	; (8011f64 <__assert_func+0x2c>)
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	4605      	mov	r5, r0
 8011f44:	68d8      	ldr	r0, [r3, #12]
 8011f46:	b14c      	cbz	r4, 8011f5c <__assert_func+0x24>
 8011f48:	4b07      	ldr	r3, [pc, #28]	; (8011f68 <__assert_func+0x30>)
 8011f4a:	9100      	str	r1, [sp, #0]
 8011f4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011f50:	4906      	ldr	r1, [pc, #24]	; (8011f6c <__assert_func+0x34>)
 8011f52:	462b      	mov	r3, r5
 8011f54:	f000 f814 	bl	8011f80 <fiprintf>
 8011f58:	f002 f8fc 	bl	8014154 <abort>
 8011f5c:	4b04      	ldr	r3, [pc, #16]	; (8011f70 <__assert_func+0x38>)
 8011f5e:	461c      	mov	r4, r3
 8011f60:	e7f3      	b.n	8011f4a <__assert_func+0x12>
 8011f62:	bf00      	nop
 8011f64:	2400a0f0 	.word	0x2400a0f0
 8011f68:	08063247 	.word	0x08063247
 8011f6c:	08063254 	.word	0x08063254
 8011f70:	08063282 	.word	0x08063282

08011f74 <__errno>:
 8011f74:	4b01      	ldr	r3, [pc, #4]	; (8011f7c <__errno+0x8>)
 8011f76:	6818      	ldr	r0, [r3, #0]
 8011f78:	4770      	bx	lr
 8011f7a:	bf00      	nop
 8011f7c:	2400a0f0 	.word	0x2400a0f0

08011f80 <fiprintf>:
 8011f80:	b40e      	push	{r1, r2, r3}
 8011f82:	b503      	push	{r0, r1, lr}
 8011f84:	4601      	mov	r1, r0
 8011f86:	ab03      	add	r3, sp, #12
 8011f88:	4805      	ldr	r0, [pc, #20]	; (8011fa0 <fiprintf+0x20>)
 8011f8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f8e:	6800      	ldr	r0, [r0, #0]
 8011f90:	9301      	str	r3, [sp, #4]
 8011f92:	f000 f93f 	bl	8012214 <_vfiprintf_r>
 8011f96:	b002      	add	sp, #8
 8011f98:	f85d eb04 	ldr.w	lr, [sp], #4
 8011f9c:	b003      	add	sp, #12
 8011f9e:	4770      	bx	lr
 8011fa0:	2400a0f0 	.word	0x2400a0f0

08011fa4 <__libc_init_array>:
 8011fa4:	b570      	push	{r4, r5, r6, lr}
 8011fa6:	4d0d      	ldr	r5, [pc, #52]	; (8011fdc <__libc_init_array+0x38>)
 8011fa8:	4c0d      	ldr	r4, [pc, #52]	; (8011fe0 <__libc_init_array+0x3c>)
 8011faa:	1b64      	subs	r4, r4, r5
 8011fac:	10a4      	asrs	r4, r4, #2
 8011fae:	2600      	movs	r6, #0
 8011fb0:	42a6      	cmp	r6, r4
 8011fb2:	d109      	bne.n	8011fc8 <__libc_init_array+0x24>
 8011fb4:	4d0b      	ldr	r5, [pc, #44]	; (8011fe4 <__libc_init_array+0x40>)
 8011fb6:	4c0c      	ldr	r4, [pc, #48]	; (8011fe8 <__libc_init_array+0x44>)
 8011fb8:	f004 fbea 	bl	8016790 <_init>
 8011fbc:	1b64      	subs	r4, r4, r5
 8011fbe:	10a4      	asrs	r4, r4, #2
 8011fc0:	2600      	movs	r6, #0
 8011fc2:	42a6      	cmp	r6, r4
 8011fc4:	d105      	bne.n	8011fd2 <__libc_init_array+0x2e>
 8011fc6:	bd70      	pop	{r4, r5, r6, pc}
 8011fc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8011fcc:	4798      	blx	r3
 8011fce:	3601      	adds	r6, #1
 8011fd0:	e7ee      	b.n	8011fb0 <__libc_init_array+0xc>
 8011fd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8011fd6:	4798      	blx	r3
 8011fd8:	3601      	adds	r6, #1
 8011fda:	e7f2      	b.n	8011fc2 <__libc_init_array+0x1e>
 8011fdc:	08063704 	.word	0x08063704
 8011fe0:	08063704 	.word	0x08063704
 8011fe4:	08063704 	.word	0x08063704
 8011fe8:	08063708 	.word	0x08063708

08011fec <malloc>:
 8011fec:	4b02      	ldr	r3, [pc, #8]	; (8011ff8 <malloc+0xc>)
 8011fee:	4601      	mov	r1, r0
 8011ff0:	6818      	ldr	r0, [r3, #0]
 8011ff2:	f000 b88b 	b.w	801210c <_malloc_r>
 8011ff6:	bf00      	nop
 8011ff8:	2400a0f0 	.word	0x2400a0f0

08011ffc <free>:
 8011ffc:	4b02      	ldr	r3, [pc, #8]	; (8012008 <free+0xc>)
 8011ffe:	4601      	mov	r1, r0
 8012000:	6818      	ldr	r0, [r3, #0]
 8012002:	f000 b833 	b.w	801206c <_free_r>
 8012006:	bf00      	nop
 8012008:	2400a0f0 	.word	0x2400a0f0

0801200c <memcpy>:
 801200c:	440a      	add	r2, r1
 801200e:	4291      	cmp	r1, r2
 8012010:	f100 33ff 	add.w	r3, r0, #4294967295
 8012014:	d100      	bne.n	8012018 <memcpy+0xc>
 8012016:	4770      	bx	lr
 8012018:	b510      	push	{r4, lr}
 801201a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801201e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012022:	4291      	cmp	r1, r2
 8012024:	d1f9      	bne.n	801201a <memcpy+0xe>
 8012026:	bd10      	pop	{r4, pc}

08012028 <memmove>:
 8012028:	4288      	cmp	r0, r1
 801202a:	b510      	push	{r4, lr}
 801202c:	eb01 0402 	add.w	r4, r1, r2
 8012030:	d902      	bls.n	8012038 <memmove+0x10>
 8012032:	4284      	cmp	r4, r0
 8012034:	4623      	mov	r3, r4
 8012036:	d807      	bhi.n	8012048 <memmove+0x20>
 8012038:	1e43      	subs	r3, r0, #1
 801203a:	42a1      	cmp	r1, r4
 801203c:	d008      	beq.n	8012050 <memmove+0x28>
 801203e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012042:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012046:	e7f8      	b.n	801203a <memmove+0x12>
 8012048:	4402      	add	r2, r0
 801204a:	4601      	mov	r1, r0
 801204c:	428a      	cmp	r2, r1
 801204e:	d100      	bne.n	8012052 <memmove+0x2a>
 8012050:	bd10      	pop	{r4, pc}
 8012052:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012056:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801205a:	e7f7      	b.n	801204c <memmove+0x24>

0801205c <memset>:
 801205c:	4402      	add	r2, r0
 801205e:	4603      	mov	r3, r0
 8012060:	4293      	cmp	r3, r2
 8012062:	d100      	bne.n	8012066 <memset+0xa>
 8012064:	4770      	bx	lr
 8012066:	f803 1b01 	strb.w	r1, [r3], #1
 801206a:	e7f9      	b.n	8012060 <memset+0x4>

0801206c <_free_r>:
 801206c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801206e:	2900      	cmp	r1, #0
 8012070:	d048      	beq.n	8012104 <_free_r+0x98>
 8012072:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012076:	9001      	str	r0, [sp, #4]
 8012078:	2b00      	cmp	r3, #0
 801207a:	f1a1 0404 	sub.w	r4, r1, #4
 801207e:	bfb8      	it	lt
 8012080:	18e4      	addlt	r4, r4, r3
 8012082:	f003 fc1f 	bl	80158c4 <__malloc_lock>
 8012086:	4a20      	ldr	r2, [pc, #128]	; (8012108 <_free_r+0x9c>)
 8012088:	9801      	ldr	r0, [sp, #4]
 801208a:	6813      	ldr	r3, [r2, #0]
 801208c:	4615      	mov	r5, r2
 801208e:	b933      	cbnz	r3, 801209e <_free_r+0x32>
 8012090:	6063      	str	r3, [r4, #4]
 8012092:	6014      	str	r4, [r2, #0]
 8012094:	b003      	add	sp, #12
 8012096:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801209a:	f003 bc19 	b.w	80158d0 <__malloc_unlock>
 801209e:	42a3      	cmp	r3, r4
 80120a0:	d90b      	bls.n	80120ba <_free_r+0x4e>
 80120a2:	6821      	ldr	r1, [r4, #0]
 80120a4:	1862      	adds	r2, r4, r1
 80120a6:	4293      	cmp	r3, r2
 80120a8:	bf04      	itt	eq
 80120aa:	681a      	ldreq	r2, [r3, #0]
 80120ac:	685b      	ldreq	r3, [r3, #4]
 80120ae:	6063      	str	r3, [r4, #4]
 80120b0:	bf04      	itt	eq
 80120b2:	1852      	addeq	r2, r2, r1
 80120b4:	6022      	streq	r2, [r4, #0]
 80120b6:	602c      	str	r4, [r5, #0]
 80120b8:	e7ec      	b.n	8012094 <_free_r+0x28>
 80120ba:	461a      	mov	r2, r3
 80120bc:	685b      	ldr	r3, [r3, #4]
 80120be:	b10b      	cbz	r3, 80120c4 <_free_r+0x58>
 80120c0:	42a3      	cmp	r3, r4
 80120c2:	d9fa      	bls.n	80120ba <_free_r+0x4e>
 80120c4:	6811      	ldr	r1, [r2, #0]
 80120c6:	1855      	adds	r5, r2, r1
 80120c8:	42a5      	cmp	r5, r4
 80120ca:	d10b      	bne.n	80120e4 <_free_r+0x78>
 80120cc:	6824      	ldr	r4, [r4, #0]
 80120ce:	4421      	add	r1, r4
 80120d0:	1854      	adds	r4, r2, r1
 80120d2:	42a3      	cmp	r3, r4
 80120d4:	6011      	str	r1, [r2, #0]
 80120d6:	d1dd      	bne.n	8012094 <_free_r+0x28>
 80120d8:	681c      	ldr	r4, [r3, #0]
 80120da:	685b      	ldr	r3, [r3, #4]
 80120dc:	6053      	str	r3, [r2, #4]
 80120de:	4421      	add	r1, r4
 80120e0:	6011      	str	r1, [r2, #0]
 80120e2:	e7d7      	b.n	8012094 <_free_r+0x28>
 80120e4:	d902      	bls.n	80120ec <_free_r+0x80>
 80120e6:	230c      	movs	r3, #12
 80120e8:	6003      	str	r3, [r0, #0]
 80120ea:	e7d3      	b.n	8012094 <_free_r+0x28>
 80120ec:	6825      	ldr	r5, [r4, #0]
 80120ee:	1961      	adds	r1, r4, r5
 80120f0:	428b      	cmp	r3, r1
 80120f2:	bf04      	itt	eq
 80120f4:	6819      	ldreq	r1, [r3, #0]
 80120f6:	685b      	ldreq	r3, [r3, #4]
 80120f8:	6063      	str	r3, [r4, #4]
 80120fa:	bf04      	itt	eq
 80120fc:	1949      	addeq	r1, r1, r5
 80120fe:	6021      	streq	r1, [r4, #0]
 8012100:	6054      	str	r4, [r2, #4]
 8012102:	e7c7      	b.n	8012094 <_free_r+0x28>
 8012104:	b003      	add	sp, #12
 8012106:	bd30      	pop	{r4, r5, pc}
 8012108:	2400a44c 	.word	0x2400a44c

0801210c <_malloc_r>:
 801210c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801210e:	1ccd      	adds	r5, r1, #3
 8012110:	f025 0503 	bic.w	r5, r5, #3
 8012114:	3508      	adds	r5, #8
 8012116:	2d0c      	cmp	r5, #12
 8012118:	bf38      	it	cc
 801211a:	250c      	movcc	r5, #12
 801211c:	2d00      	cmp	r5, #0
 801211e:	4606      	mov	r6, r0
 8012120:	db01      	blt.n	8012126 <_malloc_r+0x1a>
 8012122:	42a9      	cmp	r1, r5
 8012124:	d903      	bls.n	801212e <_malloc_r+0x22>
 8012126:	230c      	movs	r3, #12
 8012128:	6033      	str	r3, [r6, #0]
 801212a:	2000      	movs	r0, #0
 801212c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801212e:	f003 fbc9 	bl	80158c4 <__malloc_lock>
 8012132:	4921      	ldr	r1, [pc, #132]	; (80121b8 <_malloc_r+0xac>)
 8012134:	680a      	ldr	r2, [r1, #0]
 8012136:	4614      	mov	r4, r2
 8012138:	b99c      	cbnz	r4, 8012162 <_malloc_r+0x56>
 801213a:	4f20      	ldr	r7, [pc, #128]	; (80121bc <_malloc_r+0xb0>)
 801213c:	683b      	ldr	r3, [r7, #0]
 801213e:	b923      	cbnz	r3, 801214a <_malloc_r+0x3e>
 8012140:	4621      	mov	r1, r4
 8012142:	4630      	mov	r0, r6
 8012144:	f001 f86c 	bl	8013220 <_sbrk_r>
 8012148:	6038      	str	r0, [r7, #0]
 801214a:	4629      	mov	r1, r5
 801214c:	4630      	mov	r0, r6
 801214e:	f001 f867 	bl	8013220 <_sbrk_r>
 8012152:	1c43      	adds	r3, r0, #1
 8012154:	d123      	bne.n	801219e <_malloc_r+0x92>
 8012156:	230c      	movs	r3, #12
 8012158:	6033      	str	r3, [r6, #0]
 801215a:	4630      	mov	r0, r6
 801215c:	f003 fbb8 	bl	80158d0 <__malloc_unlock>
 8012160:	e7e3      	b.n	801212a <_malloc_r+0x1e>
 8012162:	6823      	ldr	r3, [r4, #0]
 8012164:	1b5b      	subs	r3, r3, r5
 8012166:	d417      	bmi.n	8012198 <_malloc_r+0x8c>
 8012168:	2b0b      	cmp	r3, #11
 801216a:	d903      	bls.n	8012174 <_malloc_r+0x68>
 801216c:	6023      	str	r3, [r4, #0]
 801216e:	441c      	add	r4, r3
 8012170:	6025      	str	r5, [r4, #0]
 8012172:	e004      	b.n	801217e <_malloc_r+0x72>
 8012174:	6863      	ldr	r3, [r4, #4]
 8012176:	42a2      	cmp	r2, r4
 8012178:	bf0c      	ite	eq
 801217a:	600b      	streq	r3, [r1, #0]
 801217c:	6053      	strne	r3, [r2, #4]
 801217e:	4630      	mov	r0, r6
 8012180:	f003 fba6 	bl	80158d0 <__malloc_unlock>
 8012184:	f104 000b 	add.w	r0, r4, #11
 8012188:	1d23      	adds	r3, r4, #4
 801218a:	f020 0007 	bic.w	r0, r0, #7
 801218e:	1ac2      	subs	r2, r0, r3
 8012190:	d0cc      	beq.n	801212c <_malloc_r+0x20>
 8012192:	1a1b      	subs	r3, r3, r0
 8012194:	50a3      	str	r3, [r4, r2]
 8012196:	e7c9      	b.n	801212c <_malloc_r+0x20>
 8012198:	4622      	mov	r2, r4
 801219a:	6864      	ldr	r4, [r4, #4]
 801219c:	e7cc      	b.n	8012138 <_malloc_r+0x2c>
 801219e:	1cc4      	adds	r4, r0, #3
 80121a0:	f024 0403 	bic.w	r4, r4, #3
 80121a4:	42a0      	cmp	r0, r4
 80121a6:	d0e3      	beq.n	8012170 <_malloc_r+0x64>
 80121a8:	1a21      	subs	r1, r4, r0
 80121aa:	4630      	mov	r0, r6
 80121ac:	f001 f838 	bl	8013220 <_sbrk_r>
 80121b0:	3001      	adds	r0, #1
 80121b2:	d1dd      	bne.n	8012170 <_malloc_r+0x64>
 80121b4:	e7cf      	b.n	8012156 <_malloc_r+0x4a>
 80121b6:	bf00      	nop
 80121b8:	2400a44c 	.word	0x2400a44c
 80121bc:	2400a450 	.word	0x2400a450

080121c0 <__sfputc_r>:
 80121c0:	6893      	ldr	r3, [r2, #8]
 80121c2:	3b01      	subs	r3, #1
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	b410      	push	{r4}
 80121c8:	6093      	str	r3, [r2, #8]
 80121ca:	da08      	bge.n	80121de <__sfputc_r+0x1e>
 80121cc:	6994      	ldr	r4, [r2, #24]
 80121ce:	42a3      	cmp	r3, r4
 80121d0:	db01      	blt.n	80121d6 <__sfputc_r+0x16>
 80121d2:	290a      	cmp	r1, #10
 80121d4:	d103      	bne.n	80121de <__sfputc_r+0x1e>
 80121d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80121da:	f001 befb 	b.w	8013fd4 <__swbuf_r>
 80121de:	6813      	ldr	r3, [r2, #0]
 80121e0:	1c58      	adds	r0, r3, #1
 80121e2:	6010      	str	r0, [r2, #0]
 80121e4:	7019      	strb	r1, [r3, #0]
 80121e6:	4608      	mov	r0, r1
 80121e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80121ec:	4770      	bx	lr

080121ee <__sfputs_r>:
 80121ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121f0:	4606      	mov	r6, r0
 80121f2:	460f      	mov	r7, r1
 80121f4:	4614      	mov	r4, r2
 80121f6:	18d5      	adds	r5, r2, r3
 80121f8:	42ac      	cmp	r4, r5
 80121fa:	d101      	bne.n	8012200 <__sfputs_r+0x12>
 80121fc:	2000      	movs	r0, #0
 80121fe:	e007      	b.n	8012210 <__sfputs_r+0x22>
 8012200:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012204:	463a      	mov	r2, r7
 8012206:	4630      	mov	r0, r6
 8012208:	f7ff ffda 	bl	80121c0 <__sfputc_r>
 801220c:	1c43      	adds	r3, r0, #1
 801220e:	d1f3      	bne.n	80121f8 <__sfputs_r+0xa>
 8012210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012214 <_vfiprintf_r>:
 8012214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012218:	460d      	mov	r5, r1
 801221a:	b09d      	sub	sp, #116	; 0x74
 801221c:	4614      	mov	r4, r2
 801221e:	4698      	mov	r8, r3
 8012220:	4606      	mov	r6, r0
 8012222:	b118      	cbz	r0, 801222c <_vfiprintf_r+0x18>
 8012224:	6983      	ldr	r3, [r0, #24]
 8012226:	b90b      	cbnz	r3, 801222c <_vfiprintf_r+0x18>
 8012228:	f002 fec2 	bl	8014fb0 <__sinit>
 801222c:	4b89      	ldr	r3, [pc, #548]	; (8012454 <_vfiprintf_r+0x240>)
 801222e:	429d      	cmp	r5, r3
 8012230:	d11b      	bne.n	801226a <_vfiprintf_r+0x56>
 8012232:	6875      	ldr	r5, [r6, #4]
 8012234:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012236:	07d9      	lsls	r1, r3, #31
 8012238:	d405      	bmi.n	8012246 <_vfiprintf_r+0x32>
 801223a:	89ab      	ldrh	r3, [r5, #12]
 801223c:	059a      	lsls	r2, r3, #22
 801223e:	d402      	bmi.n	8012246 <_vfiprintf_r+0x32>
 8012240:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012242:	f003 fac6 	bl	80157d2 <__retarget_lock_acquire_recursive>
 8012246:	89ab      	ldrh	r3, [r5, #12]
 8012248:	071b      	lsls	r3, r3, #28
 801224a:	d501      	bpl.n	8012250 <_vfiprintf_r+0x3c>
 801224c:	692b      	ldr	r3, [r5, #16]
 801224e:	b9eb      	cbnz	r3, 801228c <_vfiprintf_r+0x78>
 8012250:	4629      	mov	r1, r5
 8012252:	4630      	mov	r0, r6
 8012254:	f001 ff10 	bl	8014078 <__swsetup_r>
 8012258:	b1c0      	cbz	r0, 801228c <_vfiprintf_r+0x78>
 801225a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801225c:	07dc      	lsls	r4, r3, #31
 801225e:	d50e      	bpl.n	801227e <_vfiprintf_r+0x6a>
 8012260:	f04f 30ff 	mov.w	r0, #4294967295
 8012264:	b01d      	add	sp, #116	; 0x74
 8012266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801226a:	4b7b      	ldr	r3, [pc, #492]	; (8012458 <_vfiprintf_r+0x244>)
 801226c:	429d      	cmp	r5, r3
 801226e:	d101      	bne.n	8012274 <_vfiprintf_r+0x60>
 8012270:	68b5      	ldr	r5, [r6, #8]
 8012272:	e7df      	b.n	8012234 <_vfiprintf_r+0x20>
 8012274:	4b79      	ldr	r3, [pc, #484]	; (801245c <_vfiprintf_r+0x248>)
 8012276:	429d      	cmp	r5, r3
 8012278:	bf08      	it	eq
 801227a:	68f5      	ldreq	r5, [r6, #12]
 801227c:	e7da      	b.n	8012234 <_vfiprintf_r+0x20>
 801227e:	89ab      	ldrh	r3, [r5, #12]
 8012280:	0598      	lsls	r0, r3, #22
 8012282:	d4ed      	bmi.n	8012260 <_vfiprintf_r+0x4c>
 8012284:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012286:	f003 faa5 	bl	80157d4 <__retarget_lock_release_recursive>
 801228a:	e7e9      	b.n	8012260 <_vfiprintf_r+0x4c>
 801228c:	2300      	movs	r3, #0
 801228e:	9309      	str	r3, [sp, #36]	; 0x24
 8012290:	2320      	movs	r3, #32
 8012292:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012296:	f8cd 800c 	str.w	r8, [sp, #12]
 801229a:	2330      	movs	r3, #48	; 0x30
 801229c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012460 <_vfiprintf_r+0x24c>
 80122a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80122a4:	f04f 0901 	mov.w	r9, #1
 80122a8:	4623      	mov	r3, r4
 80122aa:	469a      	mov	sl, r3
 80122ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80122b0:	b10a      	cbz	r2, 80122b6 <_vfiprintf_r+0xa2>
 80122b2:	2a25      	cmp	r2, #37	; 0x25
 80122b4:	d1f9      	bne.n	80122aa <_vfiprintf_r+0x96>
 80122b6:	ebba 0b04 	subs.w	fp, sl, r4
 80122ba:	d00b      	beq.n	80122d4 <_vfiprintf_r+0xc0>
 80122bc:	465b      	mov	r3, fp
 80122be:	4622      	mov	r2, r4
 80122c0:	4629      	mov	r1, r5
 80122c2:	4630      	mov	r0, r6
 80122c4:	f7ff ff93 	bl	80121ee <__sfputs_r>
 80122c8:	3001      	adds	r0, #1
 80122ca:	f000 80aa 	beq.w	8012422 <_vfiprintf_r+0x20e>
 80122ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80122d0:	445a      	add	r2, fp
 80122d2:	9209      	str	r2, [sp, #36]	; 0x24
 80122d4:	f89a 3000 	ldrb.w	r3, [sl]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	f000 80a2 	beq.w	8012422 <_vfiprintf_r+0x20e>
 80122de:	2300      	movs	r3, #0
 80122e0:	f04f 32ff 	mov.w	r2, #4294967295
 80122e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80122e8:	f10a 0a01 	add.w	sl, sl, #1
 80122ec:	9304      	str	r3, [sp, #16]
 80122ee:	9307      	str	r3, [sp, #28]
 80122f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80122f4:	931a      	str	r3, [sp, #104]	; 0x68
 80122f6:	4654      	mov	r4, sl
 80122f8:	2205      	movs	r2, #5
 80122fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122fe:	4858      	ldr	r0, [pc, #352]	; (8012460 <_vfiprintf_r+0x24c>)
 8012300:	f7ee f806 	bl	8000310 <memchr>
 8012304:	9a04      	ldr	r2, [sp, #16]
 8012306:	b9d8      	cbnz	r0, 8012340 <_vfiprintf_r+0x12c>
 8012308:	06d1      	lsls	r1, r2, #27
 801230a:	bf44      	itt	mi
 801230c:	2320      	movmi	r3, #32
 801230e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012312:	0713      	lsls	r3, r2, #28
 8012314:	bf44      	itt	mi
 8012316:	232b      	movmi	r3, #43	; 0x2b
 8012318:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801231c:	f89a 3000 	ldrb.w	r3, [sl]
 8012320:	2b2a      	cmp	r3, #42	; 0x2a
 8012322:	d015      	beq.n	8012350 <_vfiprintf_r+0x13c>
 8012324:	9a07      	ldr	r2, [sp, #28]
 8012326:	4654      	mov	r4, sl
 8012328:	2000      	movs	r0, #0
 801232a:	f04f 0c0a 	mov.w	ip, #10
 801232e:	4621      	mov	r1, r4
 8012330:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012334:	3b30      	subs	r3, #48	; 0x30
 8012336:	2b09      	cmp	r3, #9
 8012338:	d94e      	bls.n	80123d8 <_vfiprintf_r+0x1c4>
 801233a:	b1b0      	cbz	r0, 801236a <_vfiprintf_r+0x156>
 801233c:	9207      	str	r2, [sp, #28]
 801233e:	e014      	b.n	801236a <_vfiprintf_r+0x156>
 8012340:	eba0 0308 	sub.w	r3, r0, r8
 8012344:	fa09 f303 	lsl.w	r3, r9, r3
 8012348:	4313      	orrs	r3, r2
 801234a:	9304      	str	r3, [sp, #16]
 801234c:	46a2      	mov	sl, r4
 801234e:	e7d2      	b.n	80122f6 <_vfiprintf_r+0xe2>
 8012350:	9b03      	ldr	r3, [sp, #12]
 8012352:	1d19      	adds	r1, r3, #4
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	9103      	str	r1, [sp, #12]
 8012358:	2b00      	cmp	r3, #0
 801235a:	bfbb      	ittet	lt
 801235c:	425b      	neglt	r3, r3
 801235e:	f042 0202 	orrlt.w	r2, r2, #2
 8012362:	9307      	strge	r3, [sp, #28]
 8012364:	9307      	strlt	r3, [sp, #28]
 8012366:	bfb8      	it	lt
 8012368:	9204      	strlt	r2, [sp, #16]
 801236a:	7823      	ldrb	r3, [r4, #0]
 801236c:	2b2e      	cmp	r3, #46	; 0x2e
 801236e:	d10c      	bne.n	801238a <_vfiprintf_r+0x176>
 8012370:	7863      	ldrb	r3, [r4, #1]
 8012372:	2b2a      	cmp	r3, #42	; 0x2a
 8012374:	d135      	bne.n	80123e2 <_vfiprintf_r+0x1ce>
 8012376:	9b03      	ldr	r3, [sp, #12]
 8012378:	1d1a      	adds	r2, r3, #4
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	9203      	str	r2, [sp, #12]
 801237e:	2b00      	cmp	r3, #0
 8012380:	bfb8      	it	lt
 8012382:	f04f 33ff 	movlt.w	r3, #4294967295
 8012386:	3402      	adds	r4, #2
 8012388:	9305      	str	r3, [sp, #20]
 801238a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012470 <_vfiprintf_r+0x25c>
 801238e:	7821      	ldrb	r1, [r4, #0]
 8012390:	2203      	movs	r2, #3
 8012392:	4650      	mov	r0, sl
 8012394:	f7ed ffbc 	bl	8000310 <memchr>
 8012398:	b140      	cbz	r0, 80123ac <_vfiprintf_r+0x198>
 801239a:	2340      	movs	r3, #64	; 0x40
 801239c:	eba0 000a 	sub.w	r0, r0, sl
 80123a0:	fa03 f000 	lsl.w	r0, r3, r0
 80123a4:	9b04      	ldr	r3, [sp, #16]
 80123a6:	4303      	orrs	r3, r0
 80123a8:	3401      	adds	r4, #1
 80123aa:	9304      	str	r3, [sp, #16]
 80123ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123b0:	482c      	ldr	r0, [pc, #176]	; (8012464 <_vfiprintf_r+0x250>)
 80123b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80123b6:	2206      	movs	r2, #6
 80123b8:	f7ed ffaa 	bl	8000310 <memchr>
 80123bc:	2800      	cmp	r0, #0
 80123be:	d03f      	beq.n	8012440 <_vfiprintf_r+0x22c>
 80123c0:	4b29      	ldr	r3, [pc, #164]	; (8012468 <_vfiprintf_r+0x254>)
 80123c2:	bb1b      	cbnz	r3, 801240c <_vfiprintf_r+0x1f8>
 80123c4:	9b03      	ldr	r3, [sp, #12]
 80123c6:	3307      	adds	r3, #7
 80123c8:	f023 0307 	bic.w	r3, r3, #7
 80123cc:	3308      	adds	r3, #8
 80123ce:	9303      	str	r3, [sp, #12]
 80123d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123d2:	443b      	add	r3, r7
 80123d4:	9309      	str	r3, [sp, #36]	; 0x24
 80123d6:	e767      	b.n	80122a8 <_vfiprintf_r+0x94>
 80123d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80123dc:	460c      	mov	r4, r1
 80123de:	2001      	movs	r0, #1
 80123e0:	e7a5      	b.n	801232e <_vfiprintf_r+0x11a>
 80123e2:	2300      	movs	r3, #0
 80123e4:	3401      	adds	r4, #1
 80123e6:	9305      	str	r3, [sp, #20]
 80123e8:	4619      	mov	r1, r3
 80123ea:	f04f 0c0a 	mov.w	ip, #10
 80123ee:	4620      	mov	r0, r4
 80123f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80123f4:	3a30      	subs	r2, #48	; 0x30
 80123f6:	2a09      	cmp	r2, #9
 80123f8:	d903      	bls.n	8012402 <_vfiprintf_r+0x1ee>
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d0c5      	beq.n	801238a <_vfiprintf_r+0x176>
 80123fe:	9105      	str	r1, [sp, #20]
 8012400:	e7c3      	b.n	801238a <_vfiprintf_r+0x176>
 8012402:	fb0c 2101 	mla	r1, ip, r1, r2
 8012406:	4604      	mov	r4, r0
 8012408:	2301      	movs	r3, #1
 801240a:	e7f0      	b.n	80123ee <_vfiprintf_r+0x1da>
 801240c:	ab03      	add	r3, sp, #12
 801240e:	9300      	str	r3, [sp, #0]
 8012410:	462a      	mov	r2, r5
 8012412:	4b16      	ldr	r3, [pc, #88]	; (801246c <_vfiprintf_r+0x258>)
 8012414:	a904      	add	r1, sp, #16
 8012416:	4630      	mov	r0, r6
 8012418:	f000 f8be 	bl	8012598 <_printf_float>
 801241c:	4607      	mov	r7, r0
 801241e:	1c78      	adds	r0, r7, #1
 8012420:	d1d6      	bne.n	80123d0 <_vfiprintf_r+0x1bc>
 8012422:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012424:	07d9      	lsls	r1, r3, #31
 8012426:	d405      	bmi.n	8012434 <_vfiprintf_r+0x220>
 8012428:	89ab      	ldrh	r3, [r5, #12]
 801242a:	059a      	lsls	r2, r3, #22
 801242c:	d402      	bmi.n	8012434 <_vfiprintf_r+0x220>
 801242e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012430:	f003 f9d0 	bl	80157d4 <__retarget_lock_release_recursive>
 8012434:	89ab      	ldrh	r3, [r5, #12]
 8012436:	065b      	lsls	r3, r3, #25
 8012438:	f53f af12 	bmi.w	8012260 <_vfiprintf_r+0x4c>
 801243c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801243e:	e711      	b.n	8012264 <_vfiprintf_r+0x50>
 8012440:	ab03      	add	r3, sp, #12
 8012442:	9300      	str	r3, [sp, #0]
 8012444:	462a      	mov	r2, r5
 8012446:	4b09      	ldr	r3, [pc, #36]	; (801246c <_vfiprintf_r+0x258>)
 8012448:	a904      	add	r1, sp, #16
 801244a:	4630      	mov	r0, r6
 801244c:	f000 fb30 	bl	8012ab0 <_printf_i>
 8012450:	e7e4      	b.n	801241c <_vfiprintf_r+0x208>
 8012452:	bf00      	nop
 8012454:	080634e0 	.word	0x080634e0
 8012458:	08063500 	.word	0x08063500
 801245c:	080634c0 	.word	0x080634c0
 8012460:	08063288 	.word	0x08063288
 8012464:	08063292 	.word	0x08063292
 8012468:	08012599 	.word	0x08012599
 801246c:	080121ef 	.word	0x080121ef
 8012470:	0806328e 	.word	0x0806328e

08012474 <__cvt>:
 8012474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012476:	ed2d 8b02 	vpush	{d8}
 801247a:	eeb0 8b40 	vmov.f64	d8, d0
 801247e:	b085      	sub	sp, #20
 8012480:	4617      	mov	r7, r2
 8012482:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8012484:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012486:	ee18 2a90 	vmov	r2, s17
 801248a:	f025 0520 	bic.w	r5, r5, #32
 801248e:	2a00      	cmp	r2, #0
 8012490:	bfb6      	itet	lt
 8012492:	222d      	movlt	r2, #45	; 0x2d
 8012494:	2200      	movge	r2, #0
 8012496:	eeb1 8b40 	vneglt.f64	d8, d0
 801249a:	2d46      	cmp	r5, #70	; 0x46
 801249c:	460c      	mov	r4, r1
 801249e:	701a      	strb	r2, [r3, #0]
 80124a0:	d004      	beq.n	80124ac <__cvt+0x38>
 80124a2:	2d45      	cmp	r5, #69	; 0x45
 80124a4:	d100      	bne.n	80124a8 <__cvt+0x34>
 80124a6:	3401      	adds	r4, #1
 80124a8:	2102      	movs	r1, #2
 80124aa:	e000      	b.n	80124ae <__cvt+0x3a>
 80124ac:	2103      	movs	r1, #3
 80124ae:	ab03      	add	r3, sp, #12
 80124b0:	9301      	str	r3, [sp, #4]
 80124b2:	ab02      	add	r3, sp, #8
 80124b4:	9300      	str	r3, [sp, #0]
 80124b6:	4622      	mov	r2, r4
 80124b8:	4633      	mov	r3, r6
 80124ba:	eeb0 0b48 	vmov.f64	d0, d8
 80124be:	f001 fedb 	bl	8014278 <_dtoa_r>
 80124c2:	2d47      	cmp	r5, #71	; 0x47
 80124c4:	d109      	bne.n	80124da <__cvt+0x66>
 80124c6:	07fb      	lsls	r3, r7, #31
 80124c8:	d407      	bmi.n	80124da <__cvt+0x66>
 80124ca:	9b03      	ldr	r3, [sp, #12]
 80124cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80124ce:	1a1b      	subs	r3, r3, r0
 80124d0:	6013      	str	r3, [r2, #0]
 80124d2:	b005      	add	sp, #20
 80124d4:	ecbd 8b02 	vpop	{d8}
 80124d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124da:	2d46      	cmp	r5, #70	; 0x46
 80124dc:	eb00 0204 	add.w	r2, r0, r4
 80124e0:	d10c      	bne.n	80124fc <__cvt+0x88>
 80124e2:	7803      	ldrb	r3, [r0, #0]
 80124e4:	2b30      	cmp	r3, #48	; 0x30
 80124e6:	d107      	bne.n	80124f8 <__cvt+0x84>
 80124e8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80124ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124f0:	bf1c      	itt	ne
 80124f2:	f1c4 0401 	rsbne	r4, r4, #1
 80124f6:	6034      	strne	r4, [r6, #0]
 80124f8:	6833      	ldr	r3, [r6, #0]
 80124fa:	441a      	add	r2, r3
 80124fc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012504:	bf08      	it	eq
 8012506:	9203      	streq	r2, [sp, #12]
 8012508:	2130      	movs	r1, #48	; 0x30
 801250a:	9b03      	ldr	r3, [sp, #12]
 801250c:	4293      	cmp	r3, r2
 801250e:	d2dc      	bcs.n	80124ca <__cvt+0x56>
 8012510:	1c5c      	adds	r4, r3, #1
 8012512:	9403      	str	r4, [sp, #12]
 8012514:	7019      	strb	r1, [r3, #0]
 8012516:	e7f8      	b.n	801250a <__cvt+0x96>

08012518 <__exponent>:
 8012518:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801251a:	4603      	mov	r3, r0
 801251c:	2900      	cmp	r1, #0
 801251e:	bfb8      	it	lt
 8012520:	4249      	neglt	r1, r1
 8012522:	f803 2b02 	strb.w	r2, [r3], #2
 8012526:	bfb4      	ite	lt
 8012528:	222d      	movlt	r2, #45	; 0x2d
 801252a:	222b      	movge	r2, #43	; 0x2b
 801252c:	2909      	cmp	r1, #9
 801252e:	7042      	strb	r2, [r0, #1]
 8012530:	dd2a      	ble.n	8012588 <__exponent+0x70>
 8012532:	f10d 0407 	add.w	r4, sp, #7
 8012536:	46a4      	mov	ip, r4
 8012538:	270a      	movs	r7, #10
 801253a:	46a6      	mov	lr, r4
 801253c:	460a      	mov	r2, r1
 801253e:	fb91 f6f7 	sdiv	r6, r1, r7
 8012542:	fb07 1516 	mls	r5, r7, r6, r1
 8012546:	3530      	adds	r5, #48	; 0x30
 8012548:	2a63      	cmp	r2, #99	; 0x63
 801254a:	f104 34ff 	add.w	r4, r4, #4294967295
 801254e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8012552:	4631      	mov	r1, r6
 8012554:	dcf1      	bgt.n	801253a <__exponent+0x22>
 8012556:	3130      	adds	r1, #48	; 0x30
 8012558:	f1ae 0502 	sub.w	r5, lr, #2
 801255c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012560:	1c44      	adds	r4, r0, #1
 8012562:	4629      	mov	r1, r5
 8012564:	4561      	cmp	r1, ip
 8012566:	d30a      	bcc.n	801257e <__exponent+0x66>
 8012568:	f10d 0209 	add.w	r2, sp, #9
 801256c:	eba2 020e 	sub.w	r2, r2, lr
 8012570:	4565      	cmp	r5, ip
 8012572:	bf88      	it	hi
 8012574:	2200      	movhi	r2, #0
 8012576:	4413      	add	r3, r2
 8012578:	1a18      	subs	r0, r3, r0
 801257a:	b003      	add	sp, #12
 801257c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801257e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012582:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012586:	e7ed      	b.n	8012564 <__exponent+0x4c>
 8012588:	2330      	movs	r3, #48	; 0x30
 801258a:	3130      	adds	r1, #48	; 0x30
 801258c:	7083      	strb	r3, [r0, #2]
 801258e:	70c1      	strb	r1, [r0, #3]
 8012590:	1d03      	adds	r3, r0, #4
 8012592:	e7f1      	b.n	8012578 <__exponent+0x60>
 8012594:	0000      	movs	r0, r0
	...

08012598 <_printf_float>:
 8012598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801259c:	b08b      	sub	sp, #44	; 0x2c
 801259e:	460c      	mov	r4, r1
 80125a0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80125a4:	4616      	mov	r6, r2
 80125a6:	461f      	mov	r7, r3
 80125a8:	4605      	mov	r5, r0
 80125aa:	f003 f90d 	bl	80157c8 <_localeconv_r>
 80125ae:	f8d0 b000 	ldr.w	fp, [r0]
 80125b2:	4658      	mov	r0, fp
 80125b4:	f7ed fe9e 	bl	80002f4 <strlen>
 80125b8:	2300      	movs	r3, #0
 80125ba:	9308      	str	r3, [sp, #32]
 80125bc:	f8d8 3000 	ldr.w	r3, [r8]
 80125c0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80125c4:	6822      	ldr	r2, [r4, #0]
 80125c6:	3307      	adds	r3, #7
 80125c8:	f023 0307 	bic.w	r3, r3, #7
 80125cc:	f103 0108 	add.w	r1, r3, #8
 80125d0:	f8c8 1000 	str.w	r1, [r8]
 80125d4:	4682      	mov	sl, r0
 80125d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80125da:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80125de:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8012840 <_printf_float+0x2a8>
 80125e2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80125e6:	eeb0 6bc0 	vabs.f64	d6, d0
 80125ea:	eeb4 6b47 	vcmp.f64	d6, d7
 80125ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125f2:	dd24      	ble.n	801263e <_printf_float+0xa6>
 80125f4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80125f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125fc:	d502      	bpl.n	8012604 <_printf_float+0x6c>
 80125fe:	232d      	movs	r3, #45	; 0x2d
 8012600:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012604:	4b90      	ldr	r3, [pc, #576]	; (8012848 <_printf_float+0x2b0>)
 8012606:	4891      	ldr	r0, [pc, #580]	; (801284c <_printf_float+0x2b4>)
 8012608:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801260c:	bf94      	ite	ls
 801260e:	4698      	movls	r8, r3
 8012610:	4680      	movhi	r8, r0
 8012612:	2303      	movs	r3, #3
 8012614:	6123      	str	r3, [r4, #16]
 8012616:	f022 0204 	bic.w	r2, r2, #4
 801261a:	2300      	movs	r3, #0
 801261c:	6022      	str	r2, [r4, #0]
 801261e:	9304      	str	r3, [sp, #16]
 8012620:	9700      	str	r7, [sp, #0]
 8012622:	4633      	mov	r3, r6
 8012624:	aa09      	add	r2, sp, #36	; 0x24
 8012626:	4621      	mov	r1, r4
 8012628:	4628      	mov	r0, r5
 801262a:	f000 f9d3 	bl	80129d4 <_printf_common>
 801262e:	3001      	adds	r0, #1
 8012630:	f040 808a 	bne.w	8012748 <_printf_float+0x1b0>
 8012634:	f04f 30ff 	mov.w	r0, #4294967295
 8012638:	b00b      	add	sp, #44	; 0x2c
 801263a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801263e:	eeb4 0b40 	vcmp.f64	d0, d0
 8012642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012646:	d709      	bvc.n	801265c <_printf_float+0xc4>
 8012648:	ee10 3a90 	vmov	r3, s1
 801264c:	2b00      	cmp	r3, #0
 801264e:	bfbc      	itt	lt
 8012650:	232d      	movlt	r3, #45	; 0x2d
 8012652:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012656:	487e      	ldr	r0, [pc, #504]	; (8012850 <_printf_float+0x2b8>)
 8012658:	4b7e      	ldr	r3, [pc, #504]	; (8012854 <_printf_float+0x2bc>)
 801265a:	e7d5      	b.n	8012608 <_printf_float+0x70>
 801265c:	6863      	ldr	r3, [r4, #4]
 801265e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8012662:	9104      	str	r1, [sp, #16]
 8012664:	1c59      	adds	r1, r3, #1
 8012666:	d13c      	bne.n	80126e2 <_printf_float+0x14a>
 8012668:	2306      	movs	r3, #6
 801266a:	6063      	str	r3, [r4, #4]
 801266c:	2300      	movs	r3, #0
 801266e:	9303      	str	r3, [sp, #12]
 8012670:	ab08      	add	r3, sp, #32
 8012672:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8012676:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801267a:	ab07      	add	r3, sp, #28
 801267c:	6861      	ldr	r1, [r4, #4]
 801267e:	9300      	str	r3, [sp, #0]
 8012680:	6022      	str	r2, [r4, #0]
 8012682:	f10d 031b 	add.w	r3, sp, #27
 8012686:	4628      	mov	r0, r5
 8012688:	f7ff fef4 	bl	8012474 <__cvt>
 801268c:	9b04      	ldr	r3, [sp, #16]
 801268e:	9907      	ldr	r1, [sp, #28]
 8012690:	2b47      	cmp	r3, #71	; 0x47
 8012692:	4680      	mov	r8, r0
 8012694:	d108      	bne.n	80126a8 <_printf_float+0x110>
 8012696:	1cc8      	adds	r0, r1, #3
 8012698:	db02      	blt.n	80126a0 <_printf_float+0x108>
 801269a:	6863      	ldr	r3, [r4, #4]
 801269c:	4299      	cmp	r1, r3
 801269e:	dd41      	ble.n	8012724 <_printf_float+0x18c>
 80126a0:	f1a9 0902 	sub.w	r9, r9, #2
 80126a4:	fa5f f989 	uxtb.w	r9, r9
 80126a8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80126ac:	d820      	bhi.n	80126f0 <_printf_float+0x158>
 80126ae:	3901      	subs	r1, #1
 80126b0:	464a      	mov	r2, r9
 80126b2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80126b6:	9107      	str	r1, [sp, #28]
 80126b8:	f7ff ff2e 	bl	8012518 <__exponent>
 80126bc:	9a08      	ldr	r2, [sp, #32]
 80126be:	9004      	str	r0, [sp, #16]
 80126c0:	1813      	adds	r3, r2, r0
 80126c2:	2a01      	cmp	r2, #1
 80126c4:	6123      	str	r3, [r4, #16]
 80126c6:	dc02      	bgt.n	80126ce <_printf_float+0x136>
 80126c8:	6822      	ldr	r2, [r4, #0]
 80126ca:	07d2      	lsls	r2, r2, #31
 80126cc:	d501      	bpl.n	80126d2 <_printf_float+0x13a>
 80126ce:	3301      	adds	r3, #1
 80126d0:	6123      	str	r3, [r4, #16]
 80126d2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d0a2      	beq.n	8012620 <_printf_float+0x88>
 80126da:	232d      	movs	r3, #45	; 0x2d
 80126dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80126e0:	e79e      	b.n	8012620 <_printf_float+0x88>
 80126e2:	9904      	ldr	r1, [sp, #16]
 80126e4:	2947      	cmp	r1, #71	; 0x47
 80126e6:	d1c1      	bne.n	801266c <_printf_float+0xd4>
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d1bf      	bne.n	801266c <_printf_float+0xd4>
 80126ec:	2301      	movs	r3, #1
 80126ee:	e7bc      	b.n	801266a <_printf_float+0xd2>
 80126f0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80126f4:	d118      	bne.n	8012728 <_printf_float+0x190>
 80126f6:	2900      	cmp	r1, #0
 80126f8:	6863      	ldr	r3, [r4, #4]
 80126fa:	dd0b      	ble.n	8012714 <_printf_float+0x17c>
 80126fc:	6121      	str	r1, [r4, #16]
 80126fe:	b913      	cbnz	r3, 8012706 <_printf_float+0x16e>
 8012700:	6822      	ldr	r2, [r4, #0]
 8012702:	07d0      	lsls	r0, r2, #31
 8012704:	d502      	bpl.n	801270c <_printf_float+0x174>
 8012706:	3301      	adds	r3, #1
 8012708:	440b      	add	r3, r1
 801270a:	6123      	str	r3, [r4, #16]
 801270c:	2300      	movs	r3, #0
 801270e:	65a1      	str	r1, [r4, #88]	; 0x58
 8012710:	9304      	str	r3, [sp, #16]
 8012712:	e7de      	b.n	80126d2 <_printf_float+0x13a>
 8012714:	b913      	cbnz	r3, 801271c <_printf_float+0x184>
 8012716:	6822      	ldr	r2, [r4, #0]
 8012718:	07d2      	lsls	r2, r2, #31
 801271a:	d501      	bpl.n	8012720 <_printf_float+0x188>
 801271c:	3302      	adds	r3, #2
 801271e:	e7f4      	b.n	801270a <_printf_float+0x172>
 8012720:	2301      	movs	r3, #1
 8012722:	e7f2      	b.n	801270a <_printf_float+0x172>
 8012724:	f04f 0967 	mov.w	r9, #103	; 0x67
 8012728:	9b08      	ldr	r3, [sp, #32]
 801272a:	4299      	cmp	r1, r3
 801272c:	db05      	blt.n	801273a <_printf_float+0x1a2>
 801272e:	6823      	ldr	r3, [r4, #0]
 8012730:	6121      	str	r1, [r4, #16]
 8012732:	07d8      	lsls	r0, r3, #31
 8012734:	d5ea      	bpl.n	801270c <_printf_float+0x174>
 8012736:	1c4b      	adds	r3, r1, #1
 8012738:	e7e7      	b.n	801270a <_printf_float+0x172>
 801273a:	2900      	cmp	r1, #0
 801273c:	bfd4      	ite	le
 801273e:	f1c1 0202 	rsble	r2, r1, #2
 8012742:	2201      	movgt	r2, #1
 8012744:	4413      	add	r3, r2
 8012746:	e7e0      	b.n	801270a <_printf_float+0x172>
 8012748:	6823      	ldr	r3, [r4, #0]
 801274a:	055a      	lsls	r2, r3, #21
 801274c:	d407      	bmi.n	801275e <_printf_float+0x1c6>
 801274e:	6923      	ldr	r3, [r4, #16]
 8012750:	4642      	mov	r2, r8
 8012752:	4631      	mov	r1, r6
 8012754:	4628      	mov	r0, r5
 8012756:	47b8      	blx	r7
 8012758:	3001      	adds	r0, #1
 801275a:	d12a      	bne.n	80127b2 <_printf_float+0x21a>
 801275c:	e76a      	b.n	8012634 <_printf_float+0x9c>
 801275e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012762:	f240 80e2 	bls.w	801292a <_printf_float+0x392>
 8012766:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801276a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801276e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012772:	d133      	bne.n	80127dc <_printf_float+0x244>
 8012774:	4a38      	ldr	r2, [pc, #224]	; (8012858 <_printf_float+0x2c0>)
 8012776:	2301      	movs	r3, #1
 8012778:	4631      	mov	r1, r6
 801277a:	4628      	mov	r0, r5
 801277c:	47b8      	blx	r7
 801277e:	3001      	adds	r0, #1
 8012780:	f43f af58 	beq.w	8012634 <_printf_float+0x9c>
 8012784:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012788:	429a      	cmp	r2, r3
 801278a:	db02      	blt.n	8012792 <_printf_float+0x1fa>
 801278c:	6823      	ldr	r3, [r4, #0]
 801278e:	07d8      	lsls	r0, r3, #31
 8012790:	d50f      	bpl.n	80127b2 <_printf_float+0x21a>
 8012792:	4653      	mov	r3, sl
 8012794:	465a      	mov	r2, fp
 8012796:	4631      	mov	r1, r6
 8012798:	4628      	mov	r0, r5
 801279a:	47b8      	blx	r7
 801279c:	3001      	adds	r0, #1
 801279e:	f43f af49 	beq.w	8012634 <_printf_float+0x9c>
 80127a2:	f04f 0800 	mov.w	r8, #0
 80127a6:	f104 091a 	add.w	r9, r4, #26
 80127aa:	9b08      	ldr	r3, [sp, #32]
 80127ac:	3b01      	subs	r3, #1
 80127ae:	4543      	cmp	r3, r8
 80127b0:	dc09      	bgt.n	80127c6 <_printf_float+0x22e>
 80127b2:	6823      	ldr	r3, [r4, #0]
 80127b4:	079b      	lsls	r3, r3, #30
 80127b6:	f100 8108 	bmi.w	80129ca <_printf_float+0x432>
 80127ba:	68e0      	ldr	r0, [r4, #12]
 80127bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127be:	4298      	cmp	r0, r3
 80127c0:	bfb8      	it	lt
 80127c2:	4618      	movlt	r0, r3
 80127c4:	e738      	b.n	8012638 <_printf_float+0xa0>
 80127c6:	2301      	movs	r3, #1
 80127c8:	464a      	mov	r2, r9
 80127ca:	4631      	mov	r1, r6
 80127cc:	4628      	mov	r0, r5
 80127ce:	47b8      	blx	r7
 80127d0:	3001      	adds	r0, #1
 80127d2:	f43f af2f 	beq.w	8012634 <_printf_float+0x9c>
 80127d6:	f108 0801 	add.w	r8, r8, #1
 80127da:	e7e6      	b.n	80127aa <_printf_float+0x212>
 80127dc:	9b07      	ldr	r3, [sp, #28]
 80127de:	2b00      	cmp	r3, #0
 80127e0:	dc3c      	bgt.n	801285c <_printf_float+0x2c4>
 80127e2:	4a1d      	ldr	r2, [pc, #116]	; (8012858 <_printf_float+0x2c0>)
 80127e4:	2301      	movs	r3, #1
 80127e6:	4631      	mov	r1, r6
 80127e8:	4628      	mov	r0, r5
 80127ea:	47b8      	blx	r7
 80127ec:	3001      	adds	r0, #1
 80127ee:	f43f af21 	beq.w	8012634 <_printf_float+0x9c>
 80127f2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80127f6:	4313      	orrs	r3, r2
 80127f8:	d102      	bne.n	8012800 <_printf_float+0x268>
 80127fa:	6823      	ldr	r3, [r4, #0]
 80127fc:	07d9      	lsls	r1, r3, #31
 80127fe:	d5d8      	bpl.n	80127b2 <_printf_float+0x21a>
 8012800:	4653      	mov	r3, sl
 8012802:	465a      	mov	r2, fp
 8012804:	4631      	mov	r1, r6
 8012806:	4628      	mov	r0, r5
 8012808:	47b8      	blx	r7
 801280a:	3001      	adds	r0, #1
 801280c:	f43f af12 	beq.w	8012634 <_printf_float+0x9c>
 8012810:	f04f 0900 	mov.w	r9, #0
 8012814:	f104 0a1a 	add.w	sl, r4, #26
 8012818:	9b07      	ldr	r3, [sp, #28]
 801281a:	425b      	negs	r3, r3
 801281c:	454b      	cmp	r3, r9
 801281e:	dc01      	bgt.n	8012824 <_printf_float+0x28c>
 8012820:	9b08      	ldr	r3, [sp, #32]
 8012822:	e795      	b.n	8012750 <_printf_float+0x1b8>
 8012824:	2301      	movs	r3, #1
 8012826:	4652      	mov	r2, sl
 8012828:	4631      	mov	r1, r6
 801282a:	4628      	mov	r0, r5
 801282c:	47b8      	blx	r7
 801282e:	3001      	adds	r0, #1
 8012830:	f43f af00 	beq.w	8012634 <_printf_float+0x9c>
 8012834:	f109 0901 	add.w	r9, r9, #1
 8012838:	e7ee      	b.n	8012818 <_printf_float+0x280>
 801283a:	bf00      	nop
 801283c:	f3af 8000 	nop.w
 8012840:	ffffffff 	.word	0xffffffff
 8012844:	7fefffff 	.word	0x7fefffff
 8012848:	08063299 	.word	0x08063299
 801284c:	0806329d 	.word	0x0806329d
 8012850:	080632a5 	.word	0x080632a5
 8012854:	080632a1 	.word	0x080632a1
 8012858:	080632a9 	.word	0x080632a9
 801285c:	9a08      	ldr	r2, [sp, #32]
 801285e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012860:	429a      	cmp	r2, r3
 8012862:	bfa8      	it	ge
 8012864:	461a      	movge	r2, r3
 8012866:	2a00      	cmp	r2, #0
 8012868:	4691      	mov	r9, r2
 801286a:	dc38      	bgt.n	80128de <_printf_float+0x346>
 801286c:	2300      	movs	r3, #0
 801286e:	9305      	str	r3, [sp, #20]
 8012870:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012874:	f104 021a 	add.w	r2, r4, #26
 8012878:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801287a:	9905      	ldr	r1, [sp, #20]
 801287c:	9304      	str	r3, [sp, #16]
 801287e:	eba3 0309 	sub.w	r3, r3, r9
 8012882:	428b      	cmp	r3, r1
 8012884:	dc33      	bgt.n	80128ee <_printf_float+0x356>
 8012886:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801288a:	429a      	cmp	r2, r3
 801288c:	db3c      	blt.n	8012908 <_printf_float+0x370>
 801288e:	6823      	ldr	r3, [r4, #0]
 8012890:	07da      	lsls	r2, r3, #31
 8012892:	d439      	bmi.n	8012908 <_printf_float+0x370>
 8012894:	9a08      	ldr	r2, [sp, #32]
 8012896:	9b04      	ldr	r3, [sp, #16]
 8012898:	9907      	ldr	r1, [sp, #28]
 801289a:	1ad3      	subs	r3, r2, r3
 801289c:	eba2 0901 	sub.w	r9, r2, r1
 80128a0:	4599      	cmp	r9, r3
 80128a2:	bfa8      	it	ge
 80128a4:	4699      	movge	r9, r3
 80128a6:	f1b9 0f00 	cmp.w	r9, #0
 80128aa:	dc35      	bgt.n	8012918 <_printf_float+0x380>
 80128ac:	f04f 0800 	mov.w	r8, #0
 80128b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80128b4:	f104 0a1a 	add.w	sl, r4, #26
 80128b8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80128bc:	1a9b      	subs	r3, r3, r2
 80128be:	eba3 0309 	sub.w	r3, r3, r9
 80128c2:	4543      	cmp	r3, r8
 80128c4:	f77f af75 	ble.w	80127b2 <_printf_float+0x21a>
 80128c8:	2301      	movs	r3, #1
 80128ca:	4652      	mov	r2, sl
 80128cc:	4631      	mov	r1, r6
 80128ce:	4628      	mov	r0, r5
 80128d0:	47b8      	blx	r7
 80128d2:	3001      	adds	r0, #1
 80128d4:	f43f aeae 	beq.w	8012634 <_printf_float+0x9c>
 80128d8:	f108 0801 	add.w	r8, r8, #1
 80128dc:	e7ec      	b.n	80128b8 <_printf_float+0x320>
 80128de:	4613      	mov	r3, r2
 80128e0:	4631      	mov	r1, r6
 80128e2:	4642      	mov	r2, r8
 80128e4:	4628      	mov	r0, r5
 80128e6:	47b8      	blx	r7
 80128e8:	3001      	adds	r0, #1
 80128ea:	d1bf      	bne.n	801286c <_printf_float+0x2d4>
 80128ec:	e6a2      	b.n	8012634 <_printf_float+0x9c>
 80128ee:	2301      	movs	r3, #1
 80128f0:	4631      	mov	r1, r6
 80128f2:	4628      	mov	r0, r5
 80128f4:	9204      	str	r2, [sp, #16]
 80128f6:	47b8      	blx	r7
 80128f8:	3001      	adds	r0, #1
 80128fa:	f43f ae9b 	beq.w	8012634 <_printf_float+0x9c>
 80128fe:	9b05      	ldr	r3, [sp, #20]
 8012900:	9a04      	ldr	r2, [sp, #16]
 8012902:	3301      	adds	r3, #1
 8012904:	9305      	str	r3, [sp, #20]
 8012906:	e7b7      	b.n	8012878 <_printf_float+0x2e0>
 8012908:	4653      	mov	r3, sl
 801290a:	465a      	mov	r2, fp
 801290c:	4631      	mov	r1, r6
 801290e:	4628      	mov	r0, r5
 8012910:	47b8      	blx	r7
 8012912:	3001      	adds	r0, #1
 8012914:	d1be      	bne.n	8012894 <_printf_float+0x2fc>
 8012916:	e68d      	b.n	8012634 <_printf_float+0x9c>
 8012918:	9a04      	ldr	r2, [sp, #16]
 801291a:	464b      	mov	r3, r9
 801291c:	4442      	add	r2, r8
 801291e:	4631      	mov	r1, r6
 8012920:	4628      	mov	r0, r5
 8012922:	47b8      	blx	r7
 8012924:	3001      	adds	r0, #1
 8012926:	d1c1      	bne.n	80128ac <_printf_float+0x314>
 8012928:	e684      	b.n	8012634 <_printf_float+0x9c>
 801292a:	9a08      	ldr	r2, [sp, #32]
 801292c:	2a01      	cmp	r2, #1
 801292e:	dc01      	bgt.n	8012934 <_printf_float+0x39c>
 8012930:	07db      	lsls	r3, r3, #31
 8012932:	d537      	bpl.n	80129a4 <_printf_float+0x40c>
 8012934:	2301      	movs	r3, #1
 8012936:	4642      	mov	r2, r8
 8012938:	4631      	mov	r1, r6
 801293a:	4628      	mov	r0, r5
 801293c:	47b8      	blx	r7
 801293e:	3001      	adds	r0, #1
 8012940:	f43f ae78 	beq.w	8012634 <_printf_float+0x9c>
 8012944:	4653      	mov	r3, sl
 8012946:	465a      	mov	r2, fp
 8012948:	4631      	mov	r1, r6
 801294a:	4628      	mov	r0, r5
 801294c:	47b8      	blx	r7
 801294e:	3001      	adds	r0, #1
 8012950:	f43f ae70 	beq.w	8012634 <_printf_float+0x9c>
 8012954:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8012958:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801295c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012960:	d01b      	beq.n	801299a <_printf_float+0x402>
 8012962:	9b08      	ldr	r3, [sp, #32]
 8012964:	f108 0201 	add.w	r2, r8, #1
 8012968:	3b01      	subs	r3, #1
 801296a:	4631      	mov	r1, r6
 801296c:	4628      	mov	r0, r5
 801296e:	47b8      	blx	r7
 8012970:	3001      	adds	r0, #1
 8012972:	d10e      	bne.n	8012992 <_printf_float+0x3fa>
 8012974:	e65e      	b.n	8012634 <_printf_float+0x9c>
 8012976:	2301      	movs	r3, #1
 8012978:	464a      	mov	r2, r9
 801297a:	4631      	mov	r1, r6
 801297c:	4628      	mov	r0, r5
 801297e:	47b8      	blx	r7
 8012980:	3001      	adds	r0, #1
 8012982:	f43f ae57 	beq.w	8012634 <_printf_float+0x9c>
 8012986:	f108 0801 	add.w	r8, r8, #1
 801298a:	9b08      	ldr	r3, [sp, #32]
 801298c:	3b01      	subs	r3, #1
 801298e:	4543      	cmp	r3, r8
 8012990:	dcf1      	bgt.n	8012976 <_printf_float+0x3de>
 8012992:	9b04      	ldr	r3, [sp, #16]
 8012994:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012998:	e6db      	b.n	8012752 <_printf_float+0x1ba>
 801299a:	f04f 0800 	mov.w	r8, #0
 801299e:	f104 091a 	add.w	r9, r4, #26
 80129a2:	e7f2      	b.n	801298a <_printf_float+0x3f2>
 80129a4:	2301      	movs	r3, #1
 80129a6:	4642      	mov	r2, r8
 80129a8:	e7df      	b.n	801296a <_printf_float+0x3d2>
 80129aa:	2301      	movs	r3, #1
 80129ac:	464a      	mov	r2, r9
 80129ae:	4631      	mov	r1, r6
 80129b0:	4628      	mov	r0, r5
 80129b2:	47b8      	blx	r7
 80129b4:	3001      	adds	r0, #1
 80129b6:	f43f ae3d 	beq.w	8012634 <_printf_float+0x9c>
 80129ba:	f108 0801 	add.w	r8, r8, #1
 80129be:	68e3      	ldr	r3, [r4, #12]
 80129c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80129c2:	1a5b      	subs	r3, r3, r1
 80129c4:	4543      	cmp	r3, r8
 80129c6:	dcf0      	bgt.n	80129aa <_printf_float+0x412>
 80129c8:	e6f7      	b.n	80127ba <_printf_float+0x222>
 80129ca:	f04f 0800 	mov.w	r8, #0
 80129ce:	f104 0919 	add.w	r9, r4, #25
 80129d2:	e7f4      	b.n	80129be <_printf_float+0x426>

080129d4 <_printf_common>:
 80129d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80129d8:	4616      	mov	r6, r2
 80129da:	4699      	mov	r9, r3
 80129dc:	688a      	ldr	r2, [r1, #8]
 80129de:	690b      	ldr	r3, [r1, #16]
 80129e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80129e4:	4293      	cmp	r3, r2
 80129e6:	bfb8      	it	lt
 80129e8:	4613      	movlt	r3, r2
 80129ea:	6033      	str	r3, [r6, #0]
 80129ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80129f0:	4607      	mov	r7, r0
 80129f2:	460c      	mov	r4, r1
 80129f4:	b10a      	cbz	r2, 80129fa <_printf_common+0x26>
 80129f6:	3301      	adds	r3, #1
 80129f8:	6033      	str	r3, [r6, #0]
 80129fa:	6823      	ldr	r3, [r4, #0]
 80129fc:	0699      	lsls	r1, r3, #26
 80129fe:	bf42      	ittt	mi
 8012a00:	6833      	ldrmi	r3, [r6, #0]
 8012a02:	3302      	addmi	r3, #2
 8012a04:	6033      	strmi	r3, [r6, #0]
 8012a06:	6825      	ldr	r5, [r4, #0]
 8012a08:	f015 0506 	ands.w	r5, r5, #6
 8012a0c:	d106      	bne.n	8012a1c <_printf_common+0x48>
 8012a0e:	f104 0a19 	add.w	sl, r4, #25
 8012a12:	68e3      	ldr	r3, [r4, #12]
 8012a14:	6832      	ldr	r2, [r6, #0]
 8012a16:	1a9b      	subs	r3, r3, r2
 8012a18:	42ab      	cmp	r3, r5
 8012a1a:	dc26      	bgt.n	8012a6a <_printf_common+0x96>
 8012a1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012a20:	1e13      	subs	r3, r2, #0
 8012a22:	6822      	ldr	r2, [r4, #0]
 8012a24:	bf18      	it	ne
 8012a26:	2301      	movne	r3, #1
 8012a28:	0692      	lsls	r2, r2, #26
 8012a2a:	d42b      	bmi.n	8012a84 <_printf_common+0xb0>
 8012a2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012a30:	4649      	mov	r1, r9
 8012a32:	4638      	mov	r0, r7
 8012a34:	47c0      	blx	r8
 8012a36:	3001      	adds	r0, #1
 8012a38:	d01e      	beq.n	8012a78 <_printf_common+0xa4>
 8012a3a:	6823      	ldr	r3, [r4, #0]
 8012a3c:	68e5      	ldr	r5, [r4, #12]
 8012a3e:	6832      	ldr	r2, [r6, #0]
 8012a40:	f003 0306 	and.w	r3, r3, #6
 8012a44:	2b04      	cmp	r3, #4
 8012a46:	bf08      	it	eq
 8012a48:	1aad      	subeq	r5, r5, r2
 8012a4a:	68a3      	ldr	r3, [r4, #8]
 8012a4c:	6922      	ldr	r2, [r4, #16]
 8012a4e:	bf0c      	ite	eq
 8012a50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012a54:	2500      	movne	r5, #0
 8012a56:	4293      	cmp	r3, r2
 8012a58:	bfc4      	itt	gt
 8012a5a:	1a9b      	subgt	r3, r3, r2
 8012a5c:	18ed      	addgt	r5, r5, r3
 8012a5e:	2600      	movs	r6, #0
 8012a60:	341a      	adds	r4, #26
 8012a62:	42b5      	cmp	r5, r6
 8012a64:	d11a      	bne.n	8012a9c <_printf_common+0xc8>
 8012a66:	2000      	movs	r0, #0
 8012a68:	e008      	b.n	8012a7c <_printf_common+0xa8>
 8012a6a:	2301      	movs	r3, #1
 8012a6c:	4652      	mov	r2, sl
 8012a6e:	4649      	mov	r1, r9
 8012a70:	4638      	mov	r0, r7
 8012a72:	47c0      	blx	r8
 8012a74:	3001      	adds	r0, #1
 8012a76:	d103      	bne.n	8012a80 <_printf_common+0xac>
 8012a78:	f04f 30ff 	mov.w	r0, #4294967295
 8012a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a80:	3501      	adds	r5, #1
 8012a82:	e7c6      	b.n	8012a12 <_printf_common+0x3e>
 8012a84:	18e1      	adds	r1, r4, r3
 8012a86:	1c5a      	adds	r2, r3, #1
 8012a88:	2030      	movs	r0, #48	; 0x30
 8012a8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012a8e:	4422      	add	r2, r4
 8012a90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012a94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012a98:	3302      	adds	r3, #2
 8012a9a:	e7c7      	b.n	8012a2c <_printf_common+0x58>
 8012a9c:	2301      	movs	r3, #1
 8012a9e:	4622      	mov	r2, r4
 8012aa0:	4649      	mov	r1, r9
 8012aa2:	4638      	mov	r0, r7
 8012aa4:	47c0      	blx	r8
 8012aa6:	3001      	adds	r0, #1
 8012aa8:	d0e6      	beq.n	8012a78 <_printf_common+0xa4>
 8012aaa:	3601      	adds	r6, #1
 8012aac:	e7d9      	b.n	8012a62 <_printf_common+0x8e>
	...

08012ab0 <_printf_i>:
 8012ab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012ab4:	460c      	mov	r4, r1
 8012ab6:	4691      	mov	r9, r2
 8012ab8:	7e27      	ldrb	r7, [r4, #24]
 8012aba:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012abc:	2f78      	cmp	r7, #120	; 0x78
 8012abe:	4680      	mov	r8, r0
 8012ac0:	469a      	mov	sl, r3
 8012ac2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012ac6:	d807      	bhi.n	8012ad8 <_printf_i+0x28>
 8012ac8:	2f62      	cmp	r7, #98	; 0x62
 8012aca:	d80a      	bhi.n	8012ae2 <_printf_i+0x32>
 8012acc:	2f00      	cmp	r7, #0
 8012ace:	f000 80d8 	beq.w	8012c82 <_printf_i+0x1d2>
 8012ad2:	2f58      	cmp	r7, #88	; 0x58
 8012ad4:	f000 80a3 	beq.w	8012c1e <_printf_i+0x16e>
 8012ad8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012adc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012ae0:	e03a      	b.n	8012b58 <_printf_i+0xa8>
 8012ae2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012ae6:	2b15      	cmp	r3, #21
 8012ae8:	d8f6      	bhi.n	8012ad8 <_printf_i+0x28>
 8012aea:	a001      	add	r0, pc, #4	; (adr r0, 8012af0 <_printf_i+0x40>)
 8012aec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8012af0:	08012b49 	.word	0x08012b49
 8012af4:	08012b5d 	.word	0x08012b5d
 8012af8:	08012ad9 	.word	0x08012ad9
 8012afc:	08012ad9 	.word	0x08012ad9
 8012b00:	08012ad9 	.word	0x08012ad9
 8012b04:	08012ad9 	.word	0x08012ad9
 8012b08:	08012b5d 	.word	0x08012b5d
 8012b0c:	08012ad9 	.word	0x08012ad9
 8012b10:	08012ad9 	.word	0x08012ad9
 8012b14:	08012ad9 	.word	0x08012ad9
 8012b18:	08012ad9 	.word	0x08012ad9
 8012b1c:	08012c69 	.word	0x08012c69
 8012b20:	08012b8d 	.word	0x08012b8d
 8012b24:	08012c4b 	.word	0x08012c4b
 8012b28:	08012ad9 	.word	0x08012ad9
 8012b2c:	08012ad9 	.word	0x08012ad9
 8012b30:	08012c8b 	.word	0x08012c8b
 8012b34:	08012ad9 	.word	0x08012ad9
 8012b38:	08012b8d 	.word	0x08012b8d
 8012b3c:	08012ad9 	.word	0x08012ad9
 8012b40:	08012ad9 	.word	0x08012ad9
 8012b44:	08012c53 	.word	0x08012c53
 8012b48:	680b      	ldr	r3, [r1, #0]
 8012b4a:	1d1a      	adds	r2, r3, #4
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	600a      	str	r2, [r1, #0]
 8012b50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012b54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012b58:	2301      	movs	r3, #1
 8012b5a:	e0a3      	b.n	8012ca4 <_printf_i+0x1f4>
 8012b5c:	6825      	ldr	r5, [r4, #0]
 8012b5e:	6808      	ldr	r0, [r1, #0]
 8012b60:	062e      	lsls	r6, r5, #24
 8012b62:	f100 0304 	add.w	r3, r0, #4
 8012b66:	d50a      	bpl.n	8012b7e <_printf_i+0xce>
 8012b68:	6805      	ldr	r5, [r0, #0]
 8012b6a:	600b      	str	r3, [r1, #0]
 8012b6c:	2d00      	cmp	r5, #0
 8012b6e:	da03      	bge.n	8012b78 <_printf_i+0xc8>
 8012b70:	232d      	movs	r3, #45	; 0x2d
 8012b72:	426d      	negs	r5, r5
 8012b74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012b78:	485e      	ldr	r0, [pc, #376]	; (8012cf4 <_printf_i+0x244>)
 8012b7a:	230a      	movs	r3, #10
 8012b7c:	e019      	b.n	8012bb2 <_printf_i+0x102>
 8012b7e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8012b82:	6805      	ldr	r5, [r0, #0]
 8012b84:	600b      	str	r3, [r1, #0]
 8012b86:	bf18      	it	ne
 8012b88:	b22d      	sxthne	r5, r5
 8012b8a:	e7ef      	b.n	8012b6c <_printf_i+0xbc>
 8012b8c:	680b      	ldr	r3, [r1, #0]
 8012b8e:	6825      	ldr	r5, [r4, #0]
 8012b90:	1d18      	adds	r0, r3, #4
 8012b92:	6008      	str	r0, [r1, #0]
 8012b94:	0628      	lsls	r0, r5, #24
 8012b96:	d501      	bpl.n	8012b9c <_printf_i+0xec>
 8012b98:	681d      	ldr	r5, [r3, #0]
 8012b9a:	e002      	b.n	8012ba2 <_printf_i+0xf2>
 8012b9c:	0669      	lsls	r1, r5, #25
 8012b9e:	d5fb      	bpl.n	8012b98 <_printf_i+0xe8>
 8012ba0:	881d      	ldrh	r5, [r3, #0]
 8012ba2:	4854      	ldr	r0, [pc, #336]	; (8012cf4 <_printf_i+0x244>)
 8012ba4:	2f6f      	cmp	r7, #111	; 0x6f
 8012ba6:	bf0c      	ite	eq
 8012ba8:	2308      	moveq	r3, #8
 8012baa:	230a      	movne	r3, #10
 8012bac:	2100      	movs	r1, #0
 8012bae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012bb2:	6866      	ldr	r6, [r4, #4]
 8012bb4:	60a6      	str	r6, [r4, #8]
 8012bb6:	2e00      	cmp	r6, #0
 8012bb8:	bfa2      	ittt	ge
 8012bba:	6821      	ldrge	r1, [r4, #0]
 8012bbc:	f021 0104 	bicge.w	r1, r1, #4
 8012bc0:	6021      	strge	r1, [r4, #0]
 8012bc2:	b90d      	cbnz	r5, 8012bc8 <_printf_i+0x118>
 8012bc4:	2e00      	cmp	r6, #0
 8012bc6:	d04d      	beq.n	8012c64 <_printf_i+0x1b4>
 8012bc8:	4616      	mov	r6, r2
 8012bca:	fbb5 f1f3 	udiv	r1, r5, r3
 8012bce:	fb03 5711 	mls	r7, r3, r1, r5
 8012bd2:	5dc7      	ldrb	r7, [r0, r7]
 8012bd4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012bd8:	462f      	mov	r7, r5
 8012bda:	42bb      	cmp	r3, r7
 8012bdc:	460d      	mov	r5, r1
 8012bde:	d9f4      	bls.n	8012bca <_printf_i+0x11a>
 8012be0:	2b08      	cmp	r3, #8
 8012be2:	d10b      	bne.n	8012bfc <_printf_i+0x14c>
 8012be4:	6823      	ldr	r3, [r4, #0]
 8012be6:	07df      	lsls	r7, r3, #31
 8012be8:	d508      	bpl.n	8012bfc <_printf_i+0x14c>
 8012bea:	6923      	ldr	r3, [r4, #16]
 8012bec:	6861      	ldr	r1, [r4, #4]
 8012bee:	4299      	cmp	r1, r3
 8012bf0:	bfde      	ittt	le
 8012bf2:	2330      	movle	r3, #48	; 0x30
 8012bf4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012bf8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012bfc:	1b92      	subs	r2, r2, r6
 8012bfe:	6122      	str	r2, [r4, #16]
 8012c00:	f8cd a000 	str.w	sl, [sp]
 8012c04:	464b      	mov	r3, r9
 8012c06:	aa03      	add	r2, sp, #12
 8012c08:	4621      	mov	r1, r4
 8012c0a:	4640      	mov	r0, r8
 8012c0c:	f7ff fee2 	bl	80129d4 <_printf_common>
 8012c10:	3001      	adds	r0, #1
 8012c12:	d14c      	bne.n	8012cae <_printf_i+0x1fe>
 8012c14:	f04f 30ff 	mov.w	r0, #4294967295
 8012c18:	b004      	add	sp, #16
 8012c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c1e:	4835      	ldr	r0, [pc, #212]	; (8012cf4 <_printf_i+0x244>)
 8012c20:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012c24:	6823      	ldr	r3, [r4, #0]
 8012c26:	680e      	ldr	r6, [r1, #0]
 8012c28:	061f      	lsls	r7, r3, #24
 8012c2a:	f856 5b04 	ldr.w	r5, [r6], #4
 8012c2e:	600e      	str	r6, [r1, #0]
 8012c30:	d514      	bpl.n	8012c5c <_printf_i+0x1ac>
 8012c32:	07d9      	lsls	r1, r3, #31
 8012c34:	bf44      	itt	mi
 8012c36:	f043 0320 	orrmi.w	r3, r3, #32
 8012c3a:	6023      	strmi	r3, [r4, #0]
 8012c3c:	b91d      	cbnz	r5, 8012c46 <_printf_i+0x196>
 8012c3e:	6823      	ldr	r3, [r4, #0]
 8012c40:	f023 0320 	bic.w	r3, r3, #32
 8012c44:	6023      	str	r3, [r4, #0]
 8012c46:	2310      	movs	r3, #16
 8012c48:	e7b0      	b.n	8012bac <_printf_i+0xfc>
 8012c4a:	6823      	ldr	r3, [r4, #0]
 8012c4c:	f043 0320 	orr.w	r3, r3, #32
 8012c50:	6023      	str	r3, [r4, #0]
 8012c52:	2378      	movs	r3, #120	; 0x78
 8012c54:	4828      	ldr	r0, [pc, #160]	; (8012cf8 <_printf_i+0x248>)
 8012c56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012c5a:	e7e3      	b.n	8012c24 <_printf_i+0x174>
 8012c5c:	065e      	lsls	r6, r3, #25
 8012c5e:	bf48      	it	mi
 8012c60:	b2ad      	uxthmi	r5, r5
 8012c62:	e7e6      	b.n	8012c32 <_printf_i+0x182>
 8012c64:	4616      	mov	r6, r2
 8012c66:	e7bb      	b.n	8012be0 <_printf_i+0x130>
 8012c68:	680b      	ldr	r3, [r1, #0]
 8012c6a:	6826      	ldr	r6, [r4, #0]
 8012c6c:	6960      	ldr	r0, [r4, #20]
 8012c6e:	1d1d      	adds	r5, r3, #4
 8012c70:	600d      	str	r5, [r1, #0]
 8012c72:	0635      	lsls	r5, r6, #24
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	d501      	bpl.n	8012c7c <_printf_i+0x1cc>
 8012c78:	6018      	str	r0, [r3, #0]
 8012c7a:	e002      	b.n	8012c82 <_printf_i+0x1d2>
 8012c7c:	0671      	lsls	r1, r6, #25
 8012c7e:	d5fb      	bpl.n	8012c78 <_printf_i+0x1c8>
 8012c80:	8018      	strh	r0, [r3, #0]
 8012c82:	2300      	movs	r3, #0
 8012c84:	6123      	str	r3, [r4, #16]
 8012c86:	4616      	mov	r6, r2
 8012c88:	e7ba      	b.n	8012c00 <_printf_i+0x150>
 8012c8a:	680b      	ldr	r3, [r1, #0]
 8012c8c:	1d1a      	adds	r2, r3, #4
 8012c8e:	600a      	str	r2, [r1, #0]
 8012c90:	681e      	ldr	r6, [r3, #0]
 8012c92:	6862      	ldr	r2, [r4, #4]
 8012c94:	2100      	movs	r1, #0
 8012c96:	4630      	mov	r0, r6
 8012c98:	f7ed fb3a 	bl	8000310 <memchr>
 8012c9c:	b108      	cbz	r0, 8012ca2 <_printf_i+0x1f2>
 8012c9e:	1b80      	subs	r0, r0, r6
 8012ca0:	6060      	str	r0, [r4, #4]
 8012ca2:	6863      	ldr	r3, [r4, #4]
 8012ca4:	6123      	str	r3, [r4, #16]
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012cac:	e7a8      	b.n	8012c00 <_printf_i+0x150>
 8012cae:	6923      	ldr	r3, [r4, #16]
 8012cb0:	4632      	mov	r2, r6
 8012cb2:	4649      	mov	r1, r9
 8012cb4:	4640      	mov	r0, r8
 8012cb6:	47d0      	blx	sl
 8012cb8:	3001      	adds	r0, #1
 8012cba:	d0ab      	beq.n	8012c14 <_printf_i+0x164>
 8012cbc:	6823      	ldr	r3, [r4, #0]
 8012cbe:	079b      	lsls	r3, r3, #30
 8012cc0:	d413      	bmi.n	8012cea <_printf_i+0x23a>
 8012cc2:	68e0      	ldr	r0, [r4, #12]
 8012cc4:	9b03      	ldr	r3, [sp, #12]
 8012cc6:	4298      	cmp	r0, r3
 8012cc8:	bfb8      	it	lt
 8012cca:	4618      	movlt	r0, r3
 8012ccc:	e7a4      	b.n	8012c18 <_printf_i+0x168>
 8012cce:	2301      	movs	r3, #1
 8012cd0:	4632      	mov	r2, r6
 8012cd2:	4649      	mov	r1, r9
 8012cd4:	4640      	mov	r0, r8
 8012cd6:	47d0      	blx	sl
 8012cd8:	3001      	adds	r0, #1
 8012cda:	d09b      	beq.n	8012c14 <_printf_i+0x164>
 8012cdc:	3501      	adds	r5, #1
 8012cde:	68e3      	ldr	r3, [r4, #12]
 8012ce0:	9903      	ldr	r1, [sp, #12]
 8012ce2:	1a5b      	subs	r3, r3, r1
 8012ce4:	42ab      	cmp	r3, r5
 8012ce6:	dcf2      	bgt.n	8012cce <_printf_i+0x21e>
 8012ce8:	e7eb      	b.n	8012cc2 <_printf_i+0x212>
 8012cea:	2500      	movs	r5, #0
 8012cec:	f104 0619 	add.w	r6, r4, #25
 8012cf0:	e7f5      	b.n	8012cde <_printf_i+0x22e>
 8012cf2:	bf00      	nop
 8012cf4:	080632ab 	.word	0x080632ab
 8012cf8:	080632bc 	.word	0x080632bc

08012cfc <_scanf_float>:
 8012cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d00:	b087      	sub	sp, #28
 8012d02:	4617      	mov	r7, r2
 8012d04:	9303      	str	r3, [sp, #12]
 8012d06:	688b      	ldr	r3, [r1, #8]
 8012d08:	1e5a      	subs	r2, r3, #1
 8012d0a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012d0e:	bf83      	ittte	hi
 8012d10:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012d14:	195b      	addhi	r3, r3, r5
 8012d16:	9302      	strhi	r3, [sp, #8]
 8012d18:	2300      	movls	r3, #0
 8012d1a:	bf86      	itte	hi
 8012d1c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012d20:	608b      	strhi	r3, [r1, #8]
 8012d22:	9302      	strls	r3, [sp, #8]
 8012d24:	680b      	ldr	r3, [r1, #0]
 8012d26:	468b      	mov	fp, r1
 8012d28:	2500      	movs	r5, #0
 8012d2a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8012d2e:	f84b 3b1c 	str.w	r3, [fp], #28
 8012d32:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8012d36:	4680      	mov	r8, r0
 8012d38:	460c      	mov	r4, r1
 8012d3a:	465e      	mov	r6, fp
 8012d3c:	46aa      	mov	sl, r5
 8012d3e:	46a9      	mov	r9, r5
 8012d40:	9501      	str	r5, [sp, #4]
 8012d42:	68a2      	ldr	r2, [r4, #8]
 8012d44:	b152      	cbz	r2, 8012d5c <_scanf_float+0x60>
 8012d46:	683b      	ldr	r3, [r7, #0]
 8012d48:	781b      	ldrb	r3, [r3, #0]
 8012d4a:	2b4e      	cmp	r3, #78	; 0x4e
 8012d4c:	d864      	bhi.n	8012e18 <_scanf_float+0x11c>
 8012d4e:	2b40      	cmp	r3, #64	; 0x40
 8012d50:	d83c      	bhi.n	8012dcc <_scanf_float+0xd0>
 8012d52:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8012d56:	b2c8      	uxtb	r0, r1
 8012d58:	280e      	cmp	r0, #14
 8012d5a:	d93a      	bls.n	8012dd2 <_scanf_float+0xd6>
 8012d5c:	f1b9 0f00 	cmp.w	r9, #0
 8012d60:	d003      	beq.n	8012d6a <_scanf_float+0x6e>
 8012d62:	6823      	ldr	r3, [r4, #0]
 8012d64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012d68:	6023      	str	r3, [r4, #0]
 8012d6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012d6e:	f1ba 0f01 	cmp.w	sl, #1
 8012d72:	f200 8113 	bhi.w	8012f9c <_scanf_float+0x2a0>
 8012d76:	455e      	cmp	r6, fp
 8012d78:	f200 8105 	bhi.w	8012f86 <_scanf_float+0x28a>
 8012d7c:	2501      	movs	r5, #1
 8012d7e:	4628      	mov	r0, r5
 8012d80:	b007      	add	sp, #28
 8012d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d86:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8012d8a:	2a0d      	cmp	r2, #13
 8012d8c:	d8e6      	bhi.n	8012d5c <_scanf_float+0x60>
 8012d8e:	a101      	add	r1, pc, #4	; (adr r1, 8012d94 <_scanf_float+0x98>)
 8012d90:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012d94:	08012ed3 	.word	0x08012ed3
 8012d98:	08012d5d 	.word	0x08012d5d
 8012d9c:	08012d5d 	.word	0x08012d5d
 8012da0:	08012d5d 	.word	0x08012d5d
 8012da4:	08012f33 	.word	0x08012f33
 8012da8:	08012f0b 	.word	0x08012f0b
 8012dac:	08012d5d 	.word	0x08012d5d
 8012db0:	08012d5d 	.word	0x08012d5d
 8012db4:	08012ee1 	.word	0x08012ee1
 8012db8:	08012d5d 	.word	0x08012d5d
 8012dbc:	08012d5d 	.word	0x08012d5d
 8012dc0:	08012d5d 	.word	0x08012d5d
 8012dc4:	08012d5d 	.word	0x08012d5d
 8012dc8:	08012e99 	.word	0x08012e99
 8012dcc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8012dd0:	e7db      	b.n	8012d8a <_scanf_float+0x8e>
 8012dd2:	290e      	cmp	r1, #14
 8012dd4:	d8c2      	bhi.n	8012d5c <_scanf_float+0x60>
 8012dd6:	a001      	add	r0, pc, #4	; (adr r0, 8012ddc <_scanf_float+0xe0>)
 8012dd8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8012ddc:	08012e8b 	.word	0x08012e8b
 8012de0:	08012d5d 	.word	0x08012d5d
 8012de4:	08012e8b 	.word	0x08012e8b
 8012de8:	08012f1f 	.word	0x08012f1f
 8012dec:	08012d5d 	.word	0x08012d5d
 8012df0:	08012e39 	.word	0x08012e39
 8012df4:	08012e75 	.word	0x08012e75
 8012df8:	08012e75 	.word	0x08012e75
 8012dfc:	08012e75 	.word	0x08012e75
 8012e00:	08012e75 	.word	0x08012e75
 8012e04:	08012e75 	.word	0x08012e75
 8012e08:	08012e75 	.word	0x08012e75
 8012e0c:	08012e75 	.word	0x08012e75
 8012e10:	08012e75 	.word	0x08012e75
 8012e14:	08012e75 	.word	0x08012e75
 8012e18:	2b6e      	cmp	r3, #110	; 0x6e
 8012e1a:	d809      	bhi.n	8012e30 <_scanf_float+0x134>
 8012e1c:	2b60      	cmp	r3, #96	; 0x60
 8012e1e:	d8b2      	bhi.n	8012d86 <_scanf_float+0x8a>
 8012e20:	2b54      	cmp	r3, #84	; 0x54
 8012e22:	d077      	beq.n	8012f14 <_scanf_float+0x218>
 8012e24:	2b59      	cmp	r3, #89	; 0x59
 8012e26:	d199      	bne.n	8012d5c <_scanf_float+0x60>
 8012e28:	2d07      	cmp	r5, #7
 8012e2a:	d197      	bne.n	8012d5c <_scanf_float+0x60>
 8012e2c:	2508      	movs	r5, #8
 8012e2e:	e029      	b.n	8012e84 <_scanf_float+0x188>
 8012e30:	2b74      	cmp	r3, #116	; 0x74
 8012e32:	d06f      	beq.n	8012f14 <_scanf_float+0x218>
 8012e34:	2b79      	cmp	r3, #121	; 0x79
 8012e36:	e7f6      	b.n	8012e26 <_scanf_float+0x12a>
 8012e38:	6821      	ldr	r1, [r4, #0]
 8012e3a:	05c8      	lsls	r0, r1, #23
 8012e3c:	d51a      	bpl.n	8012e74 <_scanf_float+0x178>
 8012e3e:	9b02      	ldr	r3, [sp, #8]
 8012e40:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8012e44:	6021      	str	r1, [r4, #0]
 8012e46:	f109 0901 	add.w	r9, r9, #1
 8012e4a:	b11b      	cbz	r3, 8012e54 <_scanf_float+0x158>
 8012e4c:	3b01      	subs	r3, #1
 8012e4e:	3201      	adds	r2, #1
 8012e50:	9302      	str	r3, [sp, #8]
 8012e52:	60a2      	str	r2, [r4, #8]
 8012e54:	68a3      	ldr	r3, [r4, #8]
 8012e56:	3b01      	subs	r3, #1
 8012e58:	60a3      	str	r3, [r4, #8]
 8012e5a:	6923      	ldr	r3, [r4, #16]
 8012e5c:	3301      	adds	r3, #1
 8012e5e:	6123      	str	r3, [r4, #16]
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	3b01      	subs	r3, #1
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	607b      	str	r3, [r7, #4]
 8012e68:	f340 8084 	ble.w	8012f74 <_scanf_float+0x278>
 8012e6c:	683b      	ldr	r3, [r7, #0]
 8012e6e:	3301      	adds	r3, #1
 8012e70:	603b      	str	r3, [r7, #0]
 8012e72:	e766      	b.n	8012d42 <_scanf_float+0x46>
 8012e74:	eb1a 0f05 	cmn.w	sl, r5
 8012e78:	f47f af70 	bne.w	8012d5c <_scanf_float+0x60>
 8012e7c:	6822      	ldr	r2, [r4, #0]
 8012e7e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8012e82:	6022      	str	r2, [r4, #0]
 8012e84:	f806 3b01 	strb.w	r3, [r6], #1
 8012e88:	e7e4      	b.n	8012e54 <_scanf_float+0x158>
 8012e8a:	6822      	ldr	r2, [r4, #0]
 8012e8c:	0610      	lsls	r0, r2, #24
 8012e8e:	f57f af65 	bpl.w	8012d5c <_scanf_float+0x60>
 8012e92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012e96:	e7f4      	b.n	8012e82 <_scanf_float+0x186>
 8012e98:	f1ba 0f00 	cmp.w	sl, #0
 8012e9c:	d10e      	bne.n	8012ebc <_scanf_float+0x1c0>
 8012e9e:	f1b9 0f00 	cmp.w	r9, #0
 8012ea2:	d10e      	bne.n	8012ec2 <_scanf_float+0x1c6>
 8012ea4:	6822      	ldr	r2, [r4, #0]
 8012ea6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012eaa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012eae:	d108      	bne.n	8012ec2 <_scanf_float+0x1c6>
 8012eb0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012eb4:	6022      	str	r2, [r4, #0]
 8012eb6:	f04f 0a01 	mov.w	sl, #1
 8012eba:	e7e3      	b.n	8012e84 <_scanf_float+0x188>
 8012ebc:	f1ba 0f02 	cmp.w	sl, #2
 8012ec0:	d055      	beq.n	8012f6e <_scanf_float+0x272>
 8012ec2:	2d01      	cmp	r5, #1
 8012ec4:	d002      	beq.n	8012ecc <_scanf_float+0x1d0>
 8012ec6:	2d04      	cmp	r5, #4
 8012ec8:	f47f af48 	bne.w	8012d5c <_scanf_float+0x60>
 8012ecc:	3501      	adds	r5, #1
 8012ece:	b2ed      	uxtb	r5, r5
 8012ed0:	e7d8      	b.n	8012e84 <_scanf_float+0x188>
 8012ed2:	f1ba 0f01 	cmp.w	sl, #1
 8012ed6:	f47f af41 	bne.w	8012d5c <_scanf_float+0x60>
 8012eda:	f04f 0a02 	mov.w	sl, #2
 8012ede:	e7d1      	b.n	8012e84 <_scanf_float+0x188>
 8012ee0:	b97d      	cbnz	r5, 8012f02 <_scanf_float+0x206>
 8012ee2:	f1b9 0f00 	cmp.w	r9, #0
 8012ee6:	f47f af3c 	bne.w	8012d62 <_scanf_float+0x66>
 8012eea:	6822      	ldr	r2, [r4, #0]
 8012eec:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8012ef0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8012ef4:	f47f af39 	bne.w	8012d6a <_scanf_float+0x6e>
 8012ef8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012efc:	6022      	str	r2, [r4, #0]
 8012efe:	2501      	movs	r5, #1
 8012f00:	e7c0      	b.n	8012e84 <_scanf_float+0x188>
 8012f02:	2d03      	cmp	r5, #3
 8012f04:	d0e2      	beq.n	8012ecc <_scanf_float+0x1d0>
 8012f06:	2d05      	cmp	r5, #5
 8012f08:	e7de      	b.n	8012ec8 <_scanf_float+0x1cc>
 8012f0a:	2d02      	cmp	r5, #2
 8012f0c:	f47f af26 	bne.w	8012d5c <_scanf_float+0x60>
 8012f10:	2503      	movs	r5, #3
 8012f12:	e7b7      	b.n	8012e84 <_scanf_float+0x188>
 8012f14:	2d06      	cmp	r5, #6
 8012f16:	f47f af21 	bne.w	8012d5c <_scanf_float+0x60>
 8012f1a:	2507      	movs	r5, #7
 8012f1c:	e7b2      	b.n	8012e84 <_scanf_float+0x188>
 8012f1e:	6822      	ldr	r2, [r4, #0]
 8012f20:	0591      	lsls	r1, r2, #22
 8012f22:	f57f af1b 	bpl.w	8012d5c <_scanf_float+0x60>
 8012f26:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8012f2a:	6022      	str	r2, [r4, #0]
 8012f2c:	f8cd 9004 	str.w	r9, [sp, #4]
 8012f30:	e7a8      	b.n	8012e84 <_scanf_float+0x188>
 8012f32:	6822      	ldr	r2, [r4, #0]
 8012f34:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8012f38:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8012f3c:	d006      	beq.n	8012f4c <_scanf_float+0x250>
 8012f3e:	0550      	lsls	r0, r2, #21
 8012f40:	f57f af0c 	bpl.w	8012d5c <_scanf_float+0x60>
 8012f44:	f1b9 0f00 	cmp.w	r9, #0
 8012f48:	f43f af0f 	beq.w	8012d6a <_scanf_float+0x6e>
 8012f4c:	0591      	lsls	r1, r2, #22
 8012f4e:	bf58      	it	pl
 8012f50:	9901      	ldrpl	r1, [sp, #4]
 8012f52:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8012f56:	bf58      	it	pl
 8012f58:	eba9 0101 	subpl.w	r1, r9, r1
 8012f5c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8012f60:	bf58      	it	pl
 8012f62:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8012f66:	6022      	str	r2, [r4, #0]
 8012f68:	f04f 0900 	mov.w	r9, #0
 8012f6c:	e78a      	b.n	8012e84 <_scanf_float+0x188>
 8012f6e:	f04f 0a03 	mov.w	sl, #3
 8012f72:	e787      	b.n	8012e84 <_scanf_float+0x188>
 8012f74:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012f78:	4639      	mov	r1, r7
 8012f7a:	4640      	mov	r0, r8
 8012f7c:	4798      	blx	r3
 8012f7e:	2800      	cmp	r0, #0
 8012f80:	f43f aedf 	beq.w	8012d42 <_scanf_float+0x46>
 8012f84:	e6ea      	b.n	8012d5c <_scanf_float+0x60>
 8012f86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012f8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012f8e:	463a      	mov	r2, r7
 8012f90:	4640      	mov	r0, r8
 8012f92:	4798      	blx	r3
 8012f94:	6923      	ldr	r3, [r4, #16]
 8012f96:	3b01      	subs	r3, #1
 8012f98:	6123      	str	r3, [r4, #16]
 8012f9a:	e6ec      	b.n	8012d76 <_scanf_float+0x7a>
 8012f9c:	1e6b      	subs	r3, r5, #1
 8012f9e:	2b06      	cmp	r3, #6
 8012fa0:	d825      	bhi.n	8012fee <_scanf_float+0x2f2>
 8012fa2:	2d02      	cmp	r5, #2
 8012fa4:	d836      	bhi.n	8013014 <_scanf_float+0x318>
 8012fa6:	455e      	cmp	r6, fp
 8012fa8:	f67f aee8 	bls.w	8012d7c <_scanf_float+0x80>
 8012fac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012fb0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8012fb4:	463a      	mov	r2, r7
 8012fb6:	4640      	mov	r0, r8
 8012fb8:	4798      	blx	r3
 8012fba:	6923      	ldr	r3, [r4, #16]
 8012fbc:	3b01      	subs	r3, #1
 8012fbe:	6123      	str	r3, [r4, #16]
 8012fc0:	e7f1      	b.n	8012fa6 <_scanf_float+0x2aa>
 8012fc2:	9802      	ldr	r0, [sp, #8]
 8012fc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012fc8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8012fcc:	9002      	str	r0, [sp, #8]
 8012fce:	463a      	mov	r2, r7
 8012fd0:	4640      	mov	r0, r8
 8012fd2:	4798      	blx	r3
 8012fd4:	6923      	ldr	r3, [r4, #16]
 8012fd6:	3b01      	subs	r3, #1
 8012fd8:	6123      	str	r3, [r4, #16]
 8012fda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012fde:	fa5f fa8a 	uxtb.w	sl, sl
 8012fe2:	f1ba 0f02 	cmp.w	sl, #2
 8012fe6:	d1ec      	bne.n	8012fc2 <_scanf_float+0x2c6>
 8012fe8:	3d03      	subs	r5, #3
 8012fea:	b2ed      	uxtb	r5, r5
 8012fec:	1b76      	subs	r6, r6, r5
 8012fee:	6823      	ldr	r3, [r4, #0]
 8012ff0:	05da      	lsls	r2, r3, #23
 8012ff2:	d52f      	bpl.n	8013054 <_scanf_float+0x358>
 8012ff4:	055b      	lsls	r3, r3, #21
 8012ff6:	d510      	bpl.n	801301a <_scanf_float+0x31e>
 8012ff8:	455e      	cmp	r6, fp
 8012ffa:	f67f aebf 	bls.w	8012d7c <_scanf_float+0x80>
 8012ffe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013002:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013006:	463a      	mov	r2, r7
 8013008:	4640      	mov	r0, r8
 801300a:	4798      	blx	r3
 801300c:	6923      	ldr	r3, [r4, #16]
 801300e:	3b01      	subs	r3, #1
 8013010:	6123      	str	r3, [r4, #16]
 8013012:	e7f1      	b.n	8012ff8 <_scanf_float+0x2fc>
 8013014:	46aa      	mov	sl, r5
 8013016:	9602      	str	r6, [sp, #8]
 8013018:	e7df      	b.n	8012fda <_scanf_float+0x2de>
 801301a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801301e:	6923      	ldr	r3, [r4, #16]
 8013020:	2965      	cmp	r1, #101	; 0x65
 8013022:	f103 33ff 	add.w	r3, r3, #4294967295
 8013026:	f106 35ff 	add.w	r5, r6, #4294967295
 801302a:	6123      	str	r3, [r4, #16]
 801302c:	d00c      	beq.n	8013048 <_scanf_float+0x34c>
 801302e:	2945      	cmp	r1, #69	; 0x45
 8013030:	d00a      	beq.n	8013048 <_scanf_float+0x34c>
 8013032:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013036:	463a      	mov	r2, r7
 8013038:	4640      	mov	r0, r8
 801303a:	4798      	blx	r3
 801303c:	6923      	ldr	r3, [r4, #16]
 801303e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8013042:	3b01      	subs	r3, #1
 8013044:	1eb5      	subs	r5, r6, #2
 8013046:	6123      	str	r3, [r4, #16]
 8013048:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801304c:	463a      	mov	r2, r7
 801304e:	4640      	mov	r0, r8
 8013050:	4798      	blx	r3
 8013052:	462e      	mov	r6, r5
 8013054:	6825      	ldr	r5, [r4, #0]
 8013056:	f015 0510 	ands.w	r5, r5, #16
 801305a:	d14d      	bne.n	80130f8 <_scanf_float+0x3fc>
 801305c:	7035      	strb	r5, [r6, #0]
 801305e:	6823      	ldr	r3, [r4, #0]
 8013060:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013068:	d11a      	bne.n	80130a0 <_scanf_float+0x3a4>
 801306a:	9b01      	ldr	r3, [sp, #4]
 801306c:	454b      	cmp	r3, r9
 801306e:	eba3 0209 	sub.w	r2, r3, r9
 8013072:	d122      	bne.n	80130ba <_scanf_float+0x3be>
 8013074:	2200      	movs	r2, #0
 8013076:	4659      	mov	r1, fp
 8013078:	4640      	mov	r0, r8
 801307a:	f000 ff1f 	bl	8013ebc <_strtod_r>
 801307e:	9b03      	ldr	r3, [sp, #12]
 8013080:	6821      	ldr	r1, [r4, #0]
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	f011 0f02 	tst.w	r1, #2
 8013088:	f103 0204 	add.w	r2, r3, #4
 801308c:	d020      	beq.n	80130d0 <_scanf_float+0x3d4>
 801308e:	9903      	ldr	r1, [sp, #12]
 8013090:	600a      	str	r2, [r1, #0]
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	ed83 0b00 	vstr	d0, [r3]
 8013098:	68e3      	ldr	r3, [r4, #12]
 801309a:	3301      	adds	r3, #1
 801309c:	60e3      	str	r3, [r4, #12]
 801309e:	e66e      	b.n	8012d7e <_scanf_float+0x82>
 80130a0:	9b04      	ldr	r3, [sp, #16]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d0e6      	beq.n	8013074 <_scanf_float+0x378>
 80130a6:	9905      	ldr	r1, [sp, #20]
 80130a8:	230a      	movs	r3, #10
 80130aa:	462a      	mov	r2, r5
 80130ac:	3101      	adds	r1, #1
 80130ae:	4640      	mov	r0, r8
 80130b0:	f000 ff8e 	bl	8013fd0 <_strtol_r>
 80130b4:	9b04      	ldr	r3, [sp, #16]
 80130b6:	9e05      	ldr	r6, [sp, #20]
 80130b8:	1ac2      	subs	r2, r0, r3
 80130ba:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80130be:	429e      	cmp	r6, r3
 80130c0:	bf28      	it	cs
 80130c2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80130c6:	490d      	ldr	r1, [pc, #52]	; (80130fc <_scanf_float+0x400>)
 80130c8:	4630      	mov	r0, r6
 80130ca:	f000 f8bf 	bl	801324c <siprintf>
 80130ce:	e7d1      	b.n	8013074 <_scanf_float+0x378>
 80130d0:	f011 0f04 	tst.w	r1, #4
 80130d4:	9903      	ldr	r1, [sp, #12]
 80130d6:	600a      	str	r2, [r1, #0]
 80130d8:	d1db      	bne.n	8013092 <_scanf_float+0x396>
 80130da:	eeb4 0b40 	vcmp.f64	d0, d0
 80130de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130e2:	681e      	ldr	r6, [r3, #0]
 80130e4:	d705      	bvc.n	80130f2 <_scanf_float+0x3f6>
 80130e6:	4806      	ldr	r0, [pc, #24]	; (8013100 <_scanf_float+0x404>)
 80130e8:	f000 f8aa 	bl	8013240 <nanf>
 80130ec:	ed86 0a00 	vstr	s0, [r6]
 80130f0:	e7d2      	b.n	8013098 <_scanf_float+0x39c>
 80130f2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80130f6:	e7f9      	b.n	80130ec <_scanf_float+0x3f0>
 80130f8:	2500      	movs	r5, #0
 80130fa:	e640      	b.n	8012d7e <_scanf_float+0x82>
 80130fc:	080632cd 	.word	0x080632cd
 8013100:	08063282 	.word	0x08063282

08013104 <iprintf>:
 8013104:	b40f      	push	{r0, r1, r2, r3}
 8013106:	4b0a      	ldr	r3, [pc, #40]	; (8013130 <iprintf+0x2c>)
 8013108:	b513      	push	{r0, r1, r4, lr}
 801310a:	681c      	ldr	r4, [r3, #0]
 801310c:	b124      	cbz	r4, 8013118 <iprintf+0x14>
 801310e:	69a3      	ldr	r3, [r4, #24]
 8013110:	b913      	cbnz	r3, 8013118 <iprintf+0x14>
 8013112:	4620      	mov	r0, r4
 8013114:	f001 ff4c 	bl	8014fb0 <__sinit>
 8013118:	ab05      	add	r3, sp, #20
 801311a:	9a04      	ldr	r2, [sp, #16]
 801311c:	68a1      	ldr	r1, [r4, #8]
 801311e:	9301      	str	r3, [sp, #4]
 8013120:	4620      	mov	r0, r4
 8013122:	f7ff f877 	bl	8012214 <_vfiprintf_r>
 8013126:	b002      	add	sp, #8
 8013128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801312c:	b004      	add	sp, #16
 801312e:	4770      	bx	lr
 8013130:	2400a0f0 	.word	0x2400a0f0

08013134 <_puts_r>:
 8013134:	b570      	push	{r4, r5, r6, lr}
 8013136:	460e      	mov	r6, r1
 8013138:	4605      	mov	r5, r0
 801313a:	b118      	cbz	r0, 8013144 <_puts_r+0x10>
 801313c:	6983      	ldr	r3, [r0, #24]
 801313e:	b90b      	cbnz	r3, 8013144 <_puts_r+0x10>
 8013140:	f001 ff36 	bl	8014fb0 <__sinit>
 8013144:	69ab      	ldr	r3, [r5, #24]
 8013146:	68ac      	ldr	r4, [r5, #8]
 8013148:	b913      	cbnz	r3, 8013150 <_puts_r+0x1c>
 801314a:	4628      	mov	r0, r5
 801314c:	f001 ff30 	bl	8014fb0 <__sinit>
 8013150:	4b2c      	ldr	r3, [pc, #176]	; (8013204 <_puts_r+0xd0>)
 8013152:	429c      	cmp	r4, r3
 8013154:	d120      	bne.n	8013198 <_puts_r+0x64>
 8013156:	686c      	ldr	r4, [r5, #4]
 8013158:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801315a:	07db      	lsls	r3, r3, #31
 801315c:	d405      	bmi.n	801316a <_puts_r+0x36>
 801315e:	89a3      	ldrh	r3, [r4, #12]
 8013160:	0598      	lsls	r0, r3, #22
 8013162:	d402      	bmi.n	801316a <_puts_r+0x36>
 8013164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013166:	f002 fb34 	bl	80157d2 <__retarget_lock_acquire_recursive>
 801316a:	89a3      	ldrh	r3, [r4, #12]
 801316c:	0719      	lsls	r1, r3, #28
 801316e:	d51d      	bpl.n	80131ac <_puts_r+0x78>
 8013170:	6923      	ldr	r3, [r4, #16]
 8013172:	b1db      	cbz	r3, 80131ac <_puts_r+0x78>
 8013174:	3e01      	subs	r6, #1
 8013176:	68a3      	ldr	r3, [r4, #8]
 8013178:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801317c:	3b01      	subs	r3, #1
 801317e:	60a3      	str	r3, [r4, #8]
 8013180:	bb39      	cbnz	r1, 80131d2 <_puts_r+0x9e>
 8013182:	2b00      	cmp	r3, #0
 8013184:	da38      	bge.n	80131f8 <_puts_r+0xc4>
 8013186:	4622      	mov	r2, r4
 8013188:	210a      	movs	r1, #10
 801318a:	4628      	mov	r0, r5
 801318c:	f000 ff22 	bl	8013fd4 <__swbuf_r>
 8013190:	3001      	adds	r0, #1
 8013192:	d011      	beq.n	80131b8 <_puts_r+0x84>
 8013194:	250a      	movs	r5, #10
 8013196:	e011      	b.n	80131bc <_puts_r+0x88>
 8013198:	4b1b      	ldr	r3, [pc, #108]	; (8013208 <_puts_r+0xd4>)
 801319a:	429c      	cmp	r4, r3
 801319c:	d101      	bne.n	80131a2 <_puts_r+0x6e>
 801319e:	68ac      	ldr	r4, [r5, #8]
 80131a0:	e7da      	b.n	8013158 <_puts_r+0x24>
 80131a2:	4b1a      	ldr	r3, [pc, #104]	; (801320c <_puts_r+0xd8>)
 80131a4:	429c      	cmp	r4, r3
 80131a6:	bf08      	it	eq
 80131a8:	68ec      	ldreq	r4, [r5, #12]
 80131aa:	e7d5      	b.n	8013158 <_puts_r+0x24>
 80131ac:	4621      	mov	r1, r4
 80131ae:	4628      	mov	r0, r5
 80131b0:	f000 ff62 	bl	8014078 <__swsetup_r>
 80131b4:	2800      	cmp	r0, #0
 80131b6:	d0dd      	beq.n	8013174 <_puts_r+0x40>
 80131b8:	f04f 35ff 	mov.w	r5, #4294967295
 80131bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80131be:	07da      	lsls	r2, r3, #31
 80131c0:	d405      	bmi.n	80131ce <_puts_r+0x9a>
 80131c2:	89a3      	ldrh	r3, [r4, #12]
 80131c4:	059b      	lsls	r3, r3, #22
 80131c6:	d402      	bmi.n	80131ce <_puts_r+0x9a>
 80131c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80131ca:	f002 fb03 	bl	80157d4 <__retarget_lock_release_recursive>
 80131ce:	4628      	mov	r0, r5
 80131d0:	bd70      	pop	{r4, r5, r6, pc}
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	da04      	bge.n	80131e0 <_puts_r+0xac>
 80131d6:	69a2      	ldr	r2, [r4, #24]
 80131d8:	429a      	cmp	r2, r3
 80131da:	dc06      	bgt.n	80131ea <_puts_r+0xb6>
 80131dc:	290a      	cmp	r1, #10
 80131de:	d004      	beq.n	80131ea <_puts_r+0xb6>
 80131e0:	6823      	ldr	r3, [r4, #0]
 80131e2:	1c5a      	adds	r2, r3, #1
 80131e4:	6022      	str	r2, [r4, #0]
 80131e6:	7019      	strb	r1, [r3, #0]
 80131e8:	e7c5      	b.n	8013176 <_puts_r+0x42>
 80131ea:	4622      	mov	r2, r4
 80131ec:	4628      	mov	r0, r5
 80131ee:	f000 fef1 	bl	8013fd4 <__swbuf_r>
 80131f2:	3001      	adds	r0, #1
 80131f4:	d1bf      	bne.n	8013176 <_puts_r+0x42>
 80131f6:	e7df      	b.n	80131b8 <_puts_r+0x84>
 80131f8:	6823      	ldr	r3, [r4, #0]
 80131fa:	250a      	movs	r5, #10
 80131fc:	1c5a      	adds	r2, r3, #1
 80131fe:	6022      	str	r2, [r4, #0]
 8013200:	701d      	strb	r5, [r3, #0]
 8013202:	e7db      	b.n	80131bc <_puts_r+0x88>
 8013204:	080634e0 	.word	0x080634e0
 8013208:	08063500 	.word	0x08063500
 801320c:	080634c0 	.word	0x080634c0

08013210 <puts>:
 8013210:	4b02      	ldr	r3, [pc, #8]	; (801321c <puts+0xc>)
 8013212:	4601      	mov	r1, r0
 8013214:	6818      	ldr	r0, [r3, #0]
 8013216:	f7ff bf8d 	b.w	8013134 <_puts_r>
 801321a:	bf00      	nop
 801321c:	2400a0f0 	.word	0x2400a0f0

08013220 <_sbrk_r>:
 8013220:	b538      	push	{r3, r4, r5, lr}
 8013222:	4d06      	ldr	r5, [pc, #24]	; (801323c <_sbrk_r+0x1c>)
 8013224:	2300      	movs	r3, #0
 8013226:	4604      	mov	r4, r0
 8013228:	4608      	mov	r0, r1
 801322a:	602b      	str	r3, [r5, #0]
 801322c:	f7ef f842 	bl	80022b4 <_sbrk>
 8013230:	1c43      	adds	r3, r0, #1
 8013232:	d102      	bne.n	801323a <_sbrk_r+0x1a>
 8013234:	682b      	ldr	r3, [r5, #0]
 8013236:	b103      	cbz	r3, 801323a <_sbrk_r+0x1a>
 8013238:	6023      	str	r3, [r4, #0]
 801323a:	bd38      	pop	{r3, r4, r5, pc}
 801323c:	2400e624 	.word	0x2400e624

08013240 <nanf>:
 8013240:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013248 <nanf+0x8>
 8013244:	4770      	bx	lr
 8013246:	bf00      	nop
 8013248:	7fc00000 	.word	0x7fc00000

0801324c <siprintf>:
 801324c:	b40e      	push	{r1, r2, r3}
 801324e:	b500      	push	{lr}
 8013250:	b09c      	sub	sp, #112	; 0x70
 8013252:	ab1d      	add	r3, sp, #116	; 0x74
 8013254:	9002      	str	r0, [sp, #8]
 8013256:	9006      	str	r0, [sp, #24]
 8013258:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801325c:	4809      	ldr	r0, [pc, #36]	; (8013284 <siprintf+0x38>)
 801325e:	9107      	str	r1, [sp, #28]
 8013260:	9104      	str	r1, [sp, #16]
 8013262:	4909      	ldr	r1, [pc, #36]	; (8013288 <siprintf+0x3c>)
 8013264:	f853 2b04 	ldr.w	r2, [r3], #4
 8013268:	9105      	str	r1, [sp, #20]
 801326a:	6800      	ldr	r0, [r0, #0]
 801326c:	9301      	str	r3, [sp, #4]
 801326e:	a902      	add	r1, sp, #8
 8013270:	f003 f880 	bl	8016374 <_svfiprintf_r>
 8013274:	9b02      	ldr	r3, [sp, #8]
 8013276:	2200      	movs	r2, #0
 8013278:	701a      	strb	r2, [r3, #0]
 801327a:	b01c      	add	sp, #112	; 0x70
 801327c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013280:	b003      	add	sp, #12
 8013282:	4770      	bx	lr
 8013284:	2400a0f0 	.word	0x2400a0f0
 8013288:	ffff0208 	.word	0xffff0208

0801328c <strncmp>:
 801328c:	b510      	push	{r4, lr}
 801328e:	b16a      	cbz	r2, 80132ac <strncmp+0x20>
 8013290:	3901      	subs	r1, #1
 8013292:	1884      	adds	r4, r0, r2
 8013294:	f810 3b01 	ldrb.w	r3, [r0], #1
 8013298:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801329c:	4293      	cmp	r3, r2
 801329e:	d103      	bne.n	80132a8 <strncmp+0x1c>
 80132a0:	42a0      	cmp	r0, r4
 80132a2:	d001      	beq.n	80132a8 <strncmp+0x1c>
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d1f5      	bne.n	8013294 <strncmp+0x8>
 80132a8:	1a98      	subs	r0, r3, r2
 80132aa:	bd10      	pop	{r4, pc}
 80132ac:	4610      	mov	r0, r2
 80132ae:	e7fc      	b.n	80132aa <strncmp+0x1e>

080132b0 <strncpy>:
 80132b0:	b510      	push	{r4, lr}
 80132b2:	3901      	subs	r1, #1
 80132b4:	4603      	mov	r3, r0
 80132b6:	b132      	cbz	r2, 80132c6 <strncpy+0x16>
 80132b8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80132bc:	f803 4b01 	strb.w	r4, [r3], #1
 80132c0:	3a01      	subs	r2, #1
 80132c2:	2c00      	cmp	r4, #0
 80132c4:	d1f7      	bne.n	80132b6 <strncpy+0x6>
 80132c6:	441a      	add	r2, r3
 80132c8:	2100      	movs	r1, #0
 80132ca:	4293      	cmp	r3, r2
 80132cc:	d100      	bne.n	80132d0 <strncpy+0x20>
 80132ce:	bd10      	pop	{r4, pc}
 80132d0:	f803 1b01 	strb.w	r1, [r3], #1
 80132d4:	e7f9      	b.n	80132ca <strncpy+0x1a>

080132d6 <sulp>:
 80132d6:	b570      	push	{r4, r5, r6, lr}
 80132d8:	4604      	mov	r4, r0
 80132da:	460d      	mov	r5, r1
 80132dc:	4616      	mov	r6, r2
 80132de:	ec45 4b10 	vmov	d0, r4, r5
 80132e2:	f002 fe67 	bl	8015fb4 <__ulp>
 80132e6:	b17e      	cbz	r6, 8013308 <sulp+0x32>
 80132e8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80132ec:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	dd09      	ble.n	8013308 <sulp+0x32>
 80132f4:	051b      	lsls	r3, r3, #20
 80132f6:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 80132fa:	2000      	movs	r0, #0
 80132fc:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8013300:	ec41 0b17 	vmov	d7, r0, r1
 8013304:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013308:	bd70      	pop	{r4, r5, r6, pc}
 801330a:	0000      	movs	r0, r0
 801330c:	0000      	movs	r0, r0
	...

08013310 <_strtod_l>:
 8013310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013314:	ed2d 8b0c 	vpush	{d8-d13}
 8013318:	b09d      	sub	sp, #116	; 0x74
 801331a:	461f      	mov	r7, r3
 801331c:	2300      	movs	r3, #0
 801331e:	9318      	str	r3, [sp, #96]	; 0x60
 8013320:	4ba6      	ldr	r3, [pc, #664]	; (80135bc <_strtod_l+0x2ac>)
 8013322:	9213      	str	r2, [sp, #76]	; 0x4c
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	9308      	str	r3, [sp, #32]
 8013328:	4604      	mov	r4, r0
 801332a:	4618      	mov	r0, r3
 801332c:	468a      	mov	sl, r1
 801332e:	f7ec ffe1 	bl	80002f4 <strlen>
 8013332:	f04f 0800 	mov.w	r8, #0
 8013336:	4605      	mov	r5, r0
 8013338:	f04f 0900 	mov.w	r9, #0
 801333c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8013340:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013342:	781a      	ldrb	r2, [r3, #0]
 8013344:	2a2b      	cmp	r2, #43	; 0x2b
 8013346:	d04d      	beq.n	80133e4 <_strtod_l+0xd4>
 8013348:	d83a      	bhi.n	80133c0 <_strtod_l+0xb0>
 801334a:	2a0d      	cmp	r2, #13
 801334c:	d833      	bhi.n	80133b6 <_strtod_l+0xa6>
 801334e:	2a08      	cmp	r2, #8
 8013350:	d833      	bhi.n	80133ba <_strtod_l+0xaa>
 8013352:	2a00      	cmp	r2, #0
 8013354:	d03d      	beq.n	80133d2 <_strtod_l+0xc2>
 8013356:	2300      	movs	r3, #0
 8013358:	930b      	str	r3, [sp, #44]	; 0x2c
 801335a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801335c:	7833      	ldrb	r3, [r6, #0]
 801335e:	2b30      	cmp	r3, #48	; 0x30
 8013360:	f040 80b6 	bne.w	80134d0 <_strtod_l+0x1c0>
 8013364:	7873      	ldrb	r3, [r6, #1]
 8013366:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801336a:	2b58      	cmp	r3, #88	; 0x58
 801336c:	d16d      	bne.n	801344a <_strtod_l+0x13a>
 801336e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013370:	9301      	str	r3, [sp, #4]
 8013372:	ab18      	add	r3, sp, #96	; 0x60
 8013374:	9702      	str	r7, [sp, #8]
 8013376:	9300      	str	r3, [sp, #0]
 8013378:	4a91      	ldr	r2, [pc, #580]	; (80135c0 <_strtod_l+0x2b0>)
 801337a:	ab19      	add	r3, sp, #100	; 0x64
 801337c:	a917      	add	r1, sp, #92	; 0x5c
 801337e:	4620      	mov	r0, r4
 8013380:	f001 ff1a 	bl	80151b8 <__gethex>
 8013384:	f010 0507 	ands.w	r5, r0, #7
 8013388:	4607      	mov	r7, r0
 801338a:	d005      	beq.n	8013398 <_strtod_l+0x88>
 801338c:	2d06      	cmp	r5, #6
 801338e:	d12b      	bne.n	80133e8 <_strtod_l+0xd8>
 8013390:	3601      	adds	r6, #1
 8013392:	2300      	movs	r3, #0
 8013394:	9617      	str	r6, [sp, #92]	; 0x5c
 8013396:	930b      	str	r3, [sp, #44]	; 0x2c
 8013398:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801339a:	2b00      	cmp	r3, #0
 801339c:	f040 856e 	bne.w	8013e7c <_strtod_l+0xb6c>
 80133a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80133a2:	b1e3      	cbz	r3, 80133de <_strtod_l+0xce>
 80133a4:	ec49 8b17 	vmov	d7, r8, r9
 80133a8:	eeb1 0b47 	vneg.f64	d0, d7
 80133ac:	b01d      	add	sp, #116	; 0x74
 80133ae:	ecbd 8b0c 	vpop	{d8-d13}
 80133b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133b6:	2a20      	cmp	r2, #32
 80133b8:	d1cd      	bne.n	8013356 <_strtod_l+0x46>
 80133ba:	3301      	adds	r3, #1
 80133bc:	9317      	str	r3, [sp, #92]	; 0x5c
 80133be:	e7bf      	b.n	8013340 <_strtod_l+0x30>
 80133c0:	2a2d      	cmp	r2, #45	; 0x2d
 80133c2:	d1c8      	bne.n	8013356 <_strtod_l+0x46>
 80133c4:	2201      	movs	r2, #1
 80133c6:	920b      	str	r2, [sp, #44]	; 0x2c
 80133c8:	1c5a      	adds	r2, r3, #1
 80133ca:	9217      	str	r2, [sp, #92]	; 0x5c
 80133cc:	785b      	ldrb	r3, [r3, #1]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d1c3      	bne.n	801335a <_strtod_l+0x4a>
 80133d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80133d4:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80133d8:	2b00      	cmp	r3, #0
 80133da:	f040 854d 	bne.w	8013e78 <_strtod_l+0xb68>
 80133de:	ec49 8b10 	vmov	d0, r8, r9
 80133e2:	e7e3      	b.n	80133ac <_strtod_l+0x9c>
 80133e4:	2200      	movs	r2, #0
 80133e6:	e7ee      	b.n	80133c6 <_strtod_l+0xb6>
 80133e8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80133ea:	b13a      	cbz	r2, 80133fc <_strtod_l+0xec>
 80133ec:	2135      	movs	r1, #53	; 0x35
 80133ee:	a81a      	add	r0, sp, #104	; 0x68
 80133f0:	f002 feec 	bl	80161cc <__copybits>
 80133f4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80133f6:	4620      	mov	r0, r4
 80133f8:	f002 fab0 	bl	801595c <_Bfree>
 80133fc:	3d01      	subs	r5, #1
 80133fe:	2d05      	cmp	r5, #5
 8013400:	d807      	bhi.n	8013412 <_strtod_l+0x102>
 8013402:	e8df f005 	tbb	[pc, r5]
 8013406:	0b0e      	.short	0x0b0e
 8013408:	030e1d18 	.word	0x030e1d18
 801340c:	f04f 0900 	mov.w	r9, #0
 8013410:	46c8      	mov	r8, r9
 8013412:	073b      	lsls	r3, r7, #28
 8013414:	d5c0      	bpl.n	8013398 <_strtod_l+0x88>
 8013416:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 801341a:	e7bd      	b.n	8013398 <_strtod_l+0x88>
 801341c:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8013420:	e7f7      	b.n	8013412 <_strtod_l+0x102>
 8013422:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 8013426:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013428:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801342c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013430:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8013434:	e7ed      	b.n	8013412 <_strtod_l+0x102>
 8013436:	f8df 918c 	ldr.w	r9, [pc, #396]	; 80135c4 <_strtod_l+0x2b4>
 801343a:	f04f 0800 	mov.w	r8, #0
 801343e:	e7e8      	b.n	8013412 <_strtod_l+0x102>
 8013440:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8013444:	f04f 38ff 	mov.w	r8, #4294967295
 8013448:	e7e3      	b.n	8013412 <_strtod_l+0x102>
 801344a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801344c:	1c5a      	adds	r2, r3, #1
 801344e:	9217      	str	r2, [sp, #92]	; 0x5c
 8013450:	785b      	ldrb	r3, [r3, #1]
 8013452:	2b30      	cmp	r3, #48	; 0x30
 8013454:	d0f9      	beq.n	801344a <_strtod_l+0x13a>
 8013456:	2b00      	cmp	r3, #0
 8013458:	d09e      	beq.n	8013398 <_strtod_l+0x88>
 801345a:	2301      	movs	r3, #1
 801345c:	9306      	str	r3, [sp, #24]
 801345e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013460:	930c      	str	r3, [sp, #48]	; 0x30
 8013462:	2300      	movs	r3, #0
 8013464:	9304      	str	r3, [sp, #16]
 8013466:	930a      	str	r3, [sp, #40]	; 0x28
 8013468:	461e      	mov	r6, r3
 801346a:	220a      	movs	r2, #10
 801346c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801346e:	f890 b000 	ldrb.w	fp, [r0]
 8013472:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 8013476:	b2d9      	uxtb	r1, r3
 8013478:	2909      	cmp	r1, #9
 801347a:	d92b      	bls.n	80134d4 <_strtod_l+0x1c4>
 801347c:	9908      	ldr	r1, [sp, #32]
 801347e:	462a      	mov	r2, r5
 8013480:	f7ff ff04 	bl	801328c <strncmp>
 8013484:	2800      	cmp	r0, #0
 8013486:	d035      	beq.n	80134f4 <_strtod_l+0x1e4>
 8013488:	2000      	movs	r0, #0
 801348a:	465a      	mov	r2, fp
 801348c:	4633      	mov	r3, r6
 801348e:	4683      	mov	fp, r0
 8013490:	4601      	mov	r1, r0
 8013492:	2a65      	cmp	r2, #101	; 0x65
 8013494:	d001      	beq.n	801349a <_strtod_l+0x18a>
 8013496:	2a45      	cmp	r2, #69	; 0x45
 8013498:	d118      	bne.n	80134cc <_strtod_l+0x1bc>
 801349a:	b91b      	cbnz	r3, 80134a4 <_strtod_l+0x194>
 801349c:	9b06      	ldr	r3, [sp, #24]
 801349e:	4303      	orrs	r3, r0
 80134a0:	d097      	beq.n	80133d2 <_strtod_l+0xc2>
 80134a2:	2300      	movs	r3, #0
 80134a4:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 80134a8:	f10a 0201 	add.w	r2, sl, #1
 80134ac:	9217      	str	r2, [sp, #92]	; 0x5c
 80134ae:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80134b2:	2a2b      	cmp	r2, #43	; 0x2b
 80134b4:	d077      	beq.n	80135a6 <_strtod_l+0x296>
 80134b6:	2a2d      	cmp	r2, #45	; 0x2d
 80134b8:	d07d      	beq.n	80135b6 <_strtod_l+0x2a6>
 80134ba:	f04f 0e00 	mov.w	lr, #0
 80134be:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80134c2:	2d09      	cmp	r5, #9
 80134c4:	f240 8084 	bls.w	80135d0 <_strtod_l+0x2c0>
 80134c8:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80134cc:	2500      	movs	r5, #0
 80134ce:	e09f      	b.n	8013610 <_strtod_l+0x300>
 80134d0:	2300      	movs	r3, #0
 80134d2:	e7c3      	b.n	801345c <_strtod_l+0x14c>
 80134d4:	2e08      	cmp	r6, #8
 80134d6:	bfd5      	itete	le
 80134d8:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80134da:	9904      	ldrgt	r1, [sp, #16]
 80134dc:	fb02 3301 	mlale	r3, r2, r1, r3
 80134e0:	fb02 3301 	mlagt	r3, r2, r1, r3
 80134e4:	f100 0001 	add.w	r0, r0, #1
 80134e8:	bfd4      	ite	le
 80134ea:	930a      	strle	r3, [sp, #40]	; 0x28
 80134ec:	9304      	strgt	r3, [sp, #16]
 80134ee:	3601      	adds	r6, #1
 80134f0:	9017      	str	r0, [sp, #92]	; 0x5c
 80134f2:	e7bb      	b.n	801346c <_strtod_l+0x15c>
 80134f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80134f6:	195a      	adds	r2, r3, r5
 80134f8:	9217      	str	r2, [sp, #92]	; 0x5c
 80134fa:	5d5a      	ldrb	r2, [r3, r5]
 80134fc:	b3ae      	cbz	r6, 801356a <_strtod_l+0x25a>
 80134fe:	4683      	mov	fp, r0
 8013500:	4633      	mov	r3, r6
 8013502:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8013506:	2909      	cmp	r1, #9
 8013508:	d912      	bls.n	8013530 <_strtod_l+0x220>
 801350a:	2101      	movs	r1, #1
 801350c:	e7c1      	b.n	8013492 <_strtod_l+0x182>
 801350e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013510:	1c5a      	adds	r2, r3, #1
 8013512:	9217      	str	r2, [sp, #92]	; 0x5c
 8013514:	785a      	ldrb	r2, [r3, #1]
 8013516:	3001      	adds	r0, #1
 8013518:	2a30      	cmp	r2, #48	; 0x30
 801351a:	d0f8      	beq.n	801350e <_strtod_l+0x1fe>
 801351c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8013520:	2b08      	cmp	r3, #8
 8013522:	f200 84b0 	bhi.w	8013e86 <_strtod_l+0xb76>
 8013526:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013528:	930c      	str	r3, [sp, #48]	; 0x30
 801352a:	4683      	mov	fp, r0
 801352c:	2000      	movs	r0, #0
 801352e:	4603      	mov	r3, r0
 8013530:	3a30      	subs	r2, #48	; 0x30
 8013532:	f100 0101 	add.w	r1, r0, #1
 8013536:	d012      	beq.n	801355e <_strtod_l+0x24e>
 8013538:	448b      	add	fp, r1
 801353a:	eb00 0c03 	add.w	ip, r0, r3
 801353e:	4619      	mov	r1, r3
 8013540:	250a      	movs	r5, #10
 8013542:	4561      	cmp	r1, ip
 8013544:	d113      	bne.n	801356e <_strtod_l+0x25e>
 8013546:	1819      	adds	r1, r3, r0
 8013548:	2908      	cmp	r1, #8
 801354a:	f103 0301 	add.w	r3, r3, #1
 801354e:	4403      	add	r3, r0
 8013550:	dc1d      	bgt.n	801358e <_strtod_l+0x27e>
 8013552:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013554:	210a      	movs	r1, #10
 8013556:	fb01 2200 	mla	r2, r1, r0, r2
 801355a:	920a      	str	r2, [sp, #40]	; 0x28
 801355c:	2100      	movs	r1, #0
 801355e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013560:	1c50      	adds	r0, r2, #1
 8013562:	9017      	str	r0, [sp, #92]	; 0x5c
 8013564:	7852      	ldrb	r2, [r2, #1]
 8013566:	4608      	mov	r0, r1
 8013568:	e7cb      	b.n	8013502 <_strtod_l+0x1f2>
 801356a:	4630      	mov	r0, r6
 801356c:	e7d4      	b.n	8013518 <_strtod_l+0x208>
 801356e:	2908      	cmp	r1, #8
 8013570:	dc04      	bgt.n	801357c <_strtod_l+0x26c>
 8013572:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8013574:	436f      	muls	r7, r5
 8013576:	970a      	str	r7, [sp, #40]	; 0x28
 8013578:	3101      	adds	r1, #1
 801357a:	e7e2      	b.n	8013542 <_strtod_l+0x232>
 801357c:	f101 0e01 	add.w	lr, r1, #1
 8013580:	f1be 0f10 	cmp.w	lr, #16
 8013584:	bfde      	ittt	le
 8013586:	9f04      	ldrle	r7, [sp, #16]
 8013588:	436f      	mulle	r7, r5
 801358a:	9704      	strle	r7, [sp, #16]
 801358c:	e7f4      	b.n	8013578 <_strtod_l+0x268>
 801358e:	2b10      	cmp	r3, #16
 8013590:	bfdf      	itttt	le
 8013592:	9804      	ldrle	r0, [sp, #16]
 8013594:	210a      	movle	r1, #10
 8013596:	fb01 2200 	mlale	r2, r1, r0, r2
 801359a:	9204      	strle	r2, [sp, #16]
 801359c:	e7de      	b.n	801355c <_strtod_l+0x24c>
 801359e:	f04f 0b00 	mov.w	fp, #0
 80135a2:	2101      	movs	r1, #1
 80135a4:	e77a      	b.n	801349c <_strtod_l+0x18c>
 80135a6:	f04f 0e00 	mov.w	lr, #0
 80135aa:	f10a 0202 	add.w	r2, sl, #2
 80135ae:	9217      	str	r2, [sp, #92]	; 0x5c
 80135b0:	f89a 2002 	ldrb.w	r2, [sl, #2]
 80135b4:	e783      	b.n	80134be <_strtod_l+0x1ae>
 80135b6:	f04f 0e01 	mov.w	lr, #1
 80135ba:	e7f6      	b.n	80135aa <_strtod_l+0x29a>
 80135bc:	0806358c 	.word	0x0806358c
 80135c0:	080632d4 	.word	0x080632d4
 80135c4:	7ff00000 	.word	0x7ff00000
 80135c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80135ca:	1c55      	adds	r5, r2, #1
 80135cc:	9517      	str	r5, [sp, #92]	; 0x5c
 80135ce:	7852      	ldrb	r2, [r2, #1]
 80135d0:	2a30      	cmp	r2, #48	; 0x30
 80135d2:	d0f9      	beq.n	80135c8 <_strtod_l+0x2b8>
 80135d4:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80135d8:	2d08      	cmp	r5, #8
 80135da:	f63f af77 	bhi.w	80134cc <_strtod_l+0x1bc>
 80135de:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80135e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80135e4:	9208      	str	r2, [sp, #32]
 80135e6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80135e8:	1c55      	adds	r5, r2, #1
 80135ea:	9517      	str	r5, [sp, #92]	; 0x5c
 80135ec:	7852      	ldrb	r2, [r2, #1]
 80135ee:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 80135f2:	2f09      	cmp	r7, #9
 80135f4:	d937      	bls.n	8013666 <_strtod_l+0x356>
 80135f6:	9f08      	ldr	r7, [sp, #32]
 80135f8:	1bed      	subs	r5, r5, r7
 80135fa:	2d08      	cmp	r5, #8
 80135fc:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8013600:	dc02      	bgt.n	8013608 <_strtod_l+0x2f8>
 8013602:	4565      	cmp	r5, ip
 8013604:	bfa8      	it	ge
 8013606:	4665      	movge	r5, ip
 8013608:	f1be 0f00 	cmp.w	lr, #0
 801360c:	d000      	beq.n	8013610 <_strtod_l+0x300>
 801360e:	426d      	negs	r5, r5
 8013610:	2b00      	cmp	r3, #0
 8013612:	d14f      	bne.n	80136b4 <_strtod_l+0x3a4>
 8013614:	9b06      	ldr	r3, [sp, #24]
 8013616:	4303      	orrs	r3, r0
 8013618:	f47f aebe 	bne.w	8013398 <_strtod_l+0x88>
 801361c:	2900      	cmp	r1, #0
 801361e:	f47f aed8 	bne.w	80133d2 <_strtod_l+0xc2>
 8013622:	2a69      	cmp	r2, #105	; 0x69
 8013624:	d027      	beq.n	8013676 <_strtod_l+0x366>
 8013626:	dc24      	bgt.n	8013672 <_strtod_l+0x362>
 8013628:	2a49      	cmp	r2, #73	; 0x49
 801362a:	d024      	beq.n	8013676 <_strtod_l+0x366>
 801362c:	2a4e      	cmp	r2, #78	; 0x4e
 801362e:	f47f aed0 	bne.w	80133d2 <_strtod_l+0xc2>
 8013632:	499b      	ldr	r1, [pc, #620]	; (80138a0 <_strtod_l+0x590>)
 8013634:	a817      	add	r0, sp, #92	; 0x5c
 8013636:	f002 f817 	bl	8015668 <__match>
 801363a:	2800      	cmp	r0, #0
 801363c:	f43f aec9 	beq.w	80133d2 <_strtod_l+0xc2>
 8013640:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013642:	781b      	ldrb	r3, [r3, #0]
 8013644:	2b28      	cmp	r3, #40	; 0x28
 8013646:	d12d      	bne.n	80136a4 <_strtod_l+0x394>
 8013648:	4996      	ldr	r1, [pc, #600]	; (80138a4 <_strtod_l+0x594>)
 801364a:	aa1a      	add	r2, sp, #104	; 0x68
 801364c:	a817      	add	r0, sp, #92	; 0x5c
 801364e:	f002 f81f 	bl	8015690 <__hexnan>
 8013652:	2805      	cmp	r0, #5
 8013654:	d126      	bne.n	80136a4 <_strtod_l+0x394>
 8013656:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013658:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 801365c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8013660:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8013664:	e698      	b.n	8013398 <_strtod_l+0x88>
 8013666:	250a      	movs	r5, #10
 8013668:	fb05 250c 	mla	r5, r5, ip, r2
 801366c:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8013670:	e7b9      	b.n	80135e6 <_strtod_l+0x2d6>
 8013672:	2a6e      	cmp	r2, #110	; 0x6e
 8013674:	e7db      	b.n	801362e <_strtod_l+0x31e>
 8013676:	498c      	ldr	r1, [pc, #560]	; (80138a8 <_strtod_l+0x598>)
 8013678:	a817      	add	r0, sp, #92	; 0x5c
 801367a:	f001 fff5 	bl	8015668 <__match>
 801367e:	2800      	cmp	r0, #0
 8013680:	f43f aea7 	beq.w	80133d2 <_strtod_l+0xc2>
 8013684:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013686:	4989      	ldr	r1, [pc, #548]	; (80138ac <_strtod_l+0x59c>)
 8013688:	3b01      	subs	r3, #1
 801368a:	a817      	add	r0, sp, #92	; 0x5c
 801368c:	9317      	str	r3, [sp, #92]	; 0x5c
 801368e:	f001 ffeb 	bl	8015668 <__match>
 8013692:	b910      	cbnz	r0, 801369a <_strtod_l+0x38a>
 8013694:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013696:	3301      	adds	r3, #1
 8013698:	9317      	str	r3, [sp, #92]	; 0x5c
 801369a:	f8df 9224 	ldr.w	r9, [pc, #548]	; 80138c0 <_strtod_l+0x5b0>
 801369e:	f04f 0800 	mov.w	r8, #0
 80136a2:	e679      	b.n	8013398 <_strtod_l+0x88>
 80136a4:	4882      	ldr	r0, [pc, #520]	; (80138b0 <_strtod_l+0x5a0>)
 80136a6:	f002 ff67 	bl	8016578 <nan>
 80136aa:	ed8d 0b04 	vstr	d0, [sp, #16]
 80136ae:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80136b2:	e671      	b.n	8013398 <_strtod_l+0x88>
 80136b4:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 80136b8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80136bc:	eba5 020b 	sub.w	r2, r5, fp
 80136c0:	2e00      	cmp	r6, #0
 80136c2:	bf08      	it	eq
 80136c4:	461e      	moveq	r6, r3
 80136c6:	2b10      	cmp	r3, #16
 80136c8:	ed8d 7b08 	vstr	d7, [sp, #32]
 80136cc:	9206      	str	r2, [sp, #24]
 80136ce:	461a      	mov	r2, r3
 80136d0:	bfa8      	it	ge
 80136d2:	2210      	movge	r2, #16
 80136d4:	2b09      	cmp	r3, #9
 80136d6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80136da:	dd0e      	ble.n	80136fa <_strtod_l+0x3ea>
 80136dc:	4975      	ldr	r1, [pc, #468]	; (80138b4 <_strtod_l+0x5a4>)
 80136de:	eddd 7a04 	vldr	s15, [sp, #16]
 80136e2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80136e6:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 80136ea:	ed9d 5b08 	vldr	d5, [sp, #32]
 80136ee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80136f2:	eea5 7b06 	vfma.f64	d7, d5, d6
 80136f6:	ec59 8b17 	vmov	r8, r9, d7
 80136fa:	2b0f      	cmp	r3, #15
 80136fc:	dc37      	bgt.n	801376e <_strtod_l+0x45e>
 80136fe:	9906      	ldr	r1, [sp, #24]
 8013700:	2900      	cmp	r1, #0
 8013702:	f43f ae49 	beq.w	8013398 <_strtod_l+0x88>
 8013706:	dd23      	ble.n	8013750 <_strtod_l+0x440>
 8013708:	2916      	cmp	r1, #22
 801370a:	dc0b      	bgt.n	8013724 <_strtod_l+0x414>
 801370c:	4b69      	ldr	r3, [pc, #420]	; (80138b4 <_strtod_l+0x5a4>)
 801370e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8013712:	ed93 7b00 	vldr	d7, [r3]
 8013716:	ec49 8b16 	vmov	d6, r8, r9
 801371a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801371e:	ec59 8b17 	vmov	r8, r9, d7
 8013722:	e639      	b.n	8013398 <_strtod_l+0x88>
 8013724:	9806      	ldr	r0, [sp, #24]
 8013726:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801372a:	4281      	cmp	r1, r0
 801372c:	db1f      	blt.n	801376e <_strtod_l+0x45e>
 801372e:	4a61      	ldr	r2, [pc, #388]	; (80138b4 <_strtod_l+0x5a4>)
 8013730:	f1c3 030f 	rsb	r3, r3, #15
 8013734:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8013738:	ed91 7b00 	vldr	d7, [r1]
 801373c:	ec49 8b16 	vmov	d6, r8, r9
 8013740:	1ac3      	subs	r3, r0, r3
 8013742:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8013746:	ee27 7b06 	vmul.f64	d7, d7, d6
 801374a:	ed92 6b00 	vldr	d6, [r2]
 801374e:	e7e4      	b.n	801371a <_strtod_l+0x40a>
 8013750:	9906      	ldr	r1, [sp, #24]
 8013752:	3116      	adds	r1, #22
 8013754:	db0b      	blt.n	801376e <_strtod_l+0x45e>
 8013756:	4b57      	ldr	r3, [pc, #348]	; (80138b4 <_strtod_l+0x5a4>)
 8013758:	ebab 0505 	sub.w	r5, fp, r5
 801375c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8013760:	ed95 7b00 	vldr	d7, [r5]
 8013764:	ec49 8b16 	vmov	d6, r8, r9
 8013768:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801376c:	e7d7      	b.n	801371e <_strtod_l+0x40e>
 801376e:	9906      	ldr	r1, [sp, #24]
 8013770:	1a9a      	subs	r2, r3, r2
 8013772:	440a      	add	r2, r1
 8013774:	2a00      	cmp	r2, #0
 8013776:	dd74      	ble.n	8013862 <_strtod_l+0x552>
 8013778:	f012 000f 	ands.w	r0, r2, #15
 801377c:	d00a      	beq.n	8013794 <_strtod_l+0x484>
 801377e:	494d      	ldr	r1, [pc, #308]	; (80138b4 <_strtod_l+0x5a4>)
 8013780:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8013784:	ed91 7b00 	vldr	d7, [r1]
 8013788:	ec49 8b16 	vmov	d6, r8, r9
 801378c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013790:	ec59 8b17 	vmov	r8, r9, d7
 8013794:	f032 020f 	bics.w	r2, r2, #15
 8013798:	d04f      	beq.n	801383a <_strtod_l+0x52a>
 801379a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801379e:	dd22      	ble.n	80137e6 <_strtod_l+0x4d6>
 80137a0:	2500      	movs	r5, #0
 80137a2:	462e      	mov	r6, r5
 80137a4:	950a      	str	r5, [sp, #40]	; 0x28
 80137a6:	462f      	mov	r7, r5
 80137a8:	2322      	movs	r3, #34	; 0x22
 80137aa:	f8df 9114 	ldr.w	r9, [pc, #276]	; 80138c0 <_strtod_l+0x5b0>
 80137ae:	6023      	str	r3, [r4, #0]
 80137b0:	f04f 0800 	mov.w	r8, #0
 80137b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	f43f adee 	beq.w	8013398 <_strtod_l+0x88>
 80137bc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80137be:	4620      	mov	r0, r4
 80137c0:	f002 f8cc 	bl	801595c <_Bfree>
 80137c4:	4639      	mov	r1, r7
 80137c6:	4620      	mov	r0, r4
 80137c8:	f002 f8c8 	bl	801595c <_Bfree>
 80137cc:	4631      	mov	r1, r6
 80137ce:	4620      	mov	r0, r4
 80137d0:	f002 f8c4 	bl	801595c <_Bfree>
 80137d4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80137d6:	4620      	mov	r0, r4
 80137d8:	f002 f8c0 	bl	801595c <_Bfree>
 80137dc:	4629      	mov	r1, r5
 80137de:	4620      	mov	r0, r4
 80137e0:	f002 f8bc 	bl	801595c <_Bfree>
 80137e4:	e5d8      	b.n	8013398 <_strtod_l+0x88>
 80137e6:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80137ea:	2000      	movs	r0, #0
 80137ec:	4f32      	ldr	r7, [pc, #200]	; (80138b8 <_strtod_l+0x5a8>)
 80137ee:	1112      	asrs	r2, r2, #4
 80137f0:	4601      	mov	r1, r0
 80137f2:	2a01      	cmp	r2, #1
 80137f4:	dc24      	bgt.n	8013840 <_strtod_l+0x530>
 80137f6:	b108      	cbz	r0, 80137fc <_strtod_l+0x4ec>
 80137f8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80137fc:	4a2e      	ldr	r2, [pc, #184]	; (80138b8 <_strtod_l+0x5a8>)
 80137fe:	482f      	ldr	r0, [pc, #188]	; (80138bc <_strtod_l+0x5ac>)
 8013800:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8013804:	ed91 7b00 	vldr	d7, [r1]
 8013808:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801380c:	ec49 8b16 	vmov	d6, r8, r9
 8013810:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013814:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013818:	9905      	ldr	r1, [sp, #20]
 801381a:	4a29      	ldr	r2, [pc, #164]	; (80138c0 <_strtod_l+0x5b0>)
 801381c:	400a      	ands	r2, r1
 801381e:	4282      	cmp	r2, r0
 8013820:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8013824:	d8bc      	bhi.n	80137a0 <_strtod_l+0x490>
 8013826:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801382a:	4282      	cmp	r2, r0
 801382c:	bf86      	itte	hi
 801382e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80138c4 <_strtod_l+0x5b4>
 8013832:	f04f 38ff 	movhi.w	r8, #4294967295
 8013836:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801383a:	2200      	movs	r2, #0
 801383c:	9204      	str	r2, [sp, #16]
 801383e:	e07f      	b.n	8013940 <_strtod_l+0x630>
 8013840:	f012 0f01 	tst.w	r2, #1
 8013844:	d00a      	beq.n	801385c <_strtod_l+0x54c>
 8013846:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 801384a:	ed90 7b00 	vldr	d7, [r0]
 801384e:	ed9d 6b04 	vldr	d6, [sp, #16]
 8013852:	ee26 7b07 	vmul.f64	d7, d6, d7
 8013856:	ed8d 7b04 	vstr	d7, [sp, #16]
 801385a:	2001      	movs	r0, #1
 801385c:	3101      	adds	r1, #1
 801385e:	1052      	asrs	r2, r2, #1
 8013860:	e7c7      	b.n	80137f2 <_strtod_l+0x4e2>
 8013862:	d0ea      	beq.n	801383a <_strtod_l+0x52a>
 8013864:	4252      	negs	r2, r2
 8013866:	f012 000f 	ands.w	r0, r2, #15
 801386a:	d00a      	beq.n	8013882 <_strtod_l+0x572>
 801386c:	4911      	ldr	r1, [pc, #68]	; (80138b4 <_strtod_l+0x5a4>)
 801386e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8013872:	ed91 7b00 	vldr	d7, [r1]
 8013876:	ec49 8b16 	vmov	d6, r8, r9
 801387a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801387e:	ec59 8b17 	vmov	r8, r9, d7
 8013882:	1112      	asrs	r2, r2, #4
 8013884:	d0d9      	beq.n	801383a <_strtod_l+0x52a>
 8013886:	2a1f      	cmp	r2, #31
 8013888:	dd1e      	ble.n	80138c8 <_strtod_l+0x5b8>
 801388a:	2500      	movs	r5, #0
 801388c:	462e      	mov	r6, r5
 801388e:	950a      	str	r5, [sp, #40]	; 0x28
 8013890:	462f      	mov	r7, r5
 8013892:	2322      	movs	r3, #34	; 0x22
 8013894:	f04f 0800 	mov.w	r8, #0
 8013898:	f04f 0900 	mov.w	r9, #0
 801389c:	6023      	str	r3, [r4, #0]
 801389e:	e789      	b.n	80137b4 <_strtod_l+0x4a4>
 80138a0:	080632a6 	.word	0x080632a6
 80138a4:	080632e8 	.word	0x080632e8
 80138a8:	0806329e 	.word	0x0806329e
 80138ac:	0806342c 	.word	0x0806342c
 80138b0:	08063282 	.word	0x08063282
 80138b4:	08063628 	.word	0x08063628
 80138b8:	08063600 	.word	0x08063600
 80138bc:	7ca00000 	.word	0x7ca00000
 80138c0:	7ff00000 	.word	0x7ff00000
 80138c4:	7fefffff 	.word	0x7fefffff
 80138c8:	f012 0110 	ands.w	r1, r2, #16
 80138cc:	bf18      	it	ne
 80138ce:	216a      	movne	r1, #106	; 0x6a
 80138d0:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80138d4:	9104      	str	r1, [sp, #16]
 80138d6:	49c0      	ldr	r1, [pc, #768]	; (8013bd8 <_strtod_l+0x8c8>)
 80138d8:	2000      	movs	r0, #0
 80138da:	07d7      	lsls	r7, r2, #31
 80138dc:	d508      	bpl.n	80138f0 <_strtod_l+0x5e0>
 80138de:	ed9d 6b08 	vldr	d6, [sp, #32]
 80138e2:	ed91 7b00 	vldr	d7, [r1]
 80138e6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80138ea:	ed8d 7b08 	vstr	d7, [sp, #32]
 80138ee:	2001      	movs	r0, #1
 80138f0:	1052      	asrs	r2, r2, #1
 80138f2:	f101 0108 	add.w	r1, r1, #8
 80138f6:	d1f0      	bne.n	80138da <_strtod_l+0x5ca>
 80138f8:	b108      	cbz	r0, 80138fe <_strtod_l+0x5ee>
 80138fa:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80138fe:	9a04      	ldr	r2, [sp, #16]
 8013900:	b1ba      	cbz	r2, 8013932 <_strtod_l+0x622>
 8013902:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8013906:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 801390a:	2a00      	cmp	r2, #0
 801390c:	4649      	mov	r1, r9
 801390e:	dd10      	ble.n	8013932 <_strtod_l+0x622>
 8013910:	2a1f      	cmp	r2, #31
 8013912:	f340 8132 	ble.w	8013b7a <_strtod_l+0x86a>
 8013916:	2a34      	cmp	r2, #52	; 0x34
 8013918:	bfde      	ittt	le
 801391a:	3a20      	suble	r2, #32
 801391c:	f04f 30ff 	movle.w	r0, #4294967295
 8013920:	fa00 f202 	lslle.w	r2, r0, r2
 8013924:	f04f 0800 	mov.w	r8, #0
 8013928:	bfcc      	ite	gt
 801392a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801392e:	ea02 0901 	andle.w	r9, r2, r1
 8013932:	ec49 8b17 	vmov	d7, r8, r9
 8013936:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801393a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801393e:	d0a4      	beq.n	801388a <_strtod_l+0x57a>
 8013940:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013942:	9200      	str	r2, [sp, #0]
 8013944:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013946:	4632      	mov	r2, r6
 8013948:	4620      	mov	r0, r4
 801394a:	f002 f873 	bl	8015a34 <__s2b>
 801394e:	900a      	str	r0, [sp, #40]	; 0x28
 8013950:	2800      	cmp	r0, #0
 8013952:	f43f af25 	beq.w	80137a0 <_strtod_l+0x490>
 8013956:	9b06      	ldr	r3, [sp, #24]
 8013958:	ebab 0505 	sub.w	r5, fp, r5
 801395c:	2b00      	cmp	r3, #0
 801395e:	bfb4      	ite	lt
 8013960:	462b      	movlt	r3, r5
 8013962:	2300      	movge	r3, #0
 8013964:	930c      	str	r3, [sp, #48]	; 0x30
 8013966:	9b06      	ldr	r3, [sp, #24]
 8013968:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8013bc0 <_strtod_l+0x8b0>
 801396c:	ed9f ab96 	vldr	d10, [pc, #600]	; 8013bc8 <_strtod_l+0x8b8>
 8013970:	ed9f bb97 	vldr	d11, [pc, #604]	; 8013bd0 <_strtod_l+0x8c0>
 8013974:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013978:	2500      	movs	r5, #0
 801397a:	9312      	str	r3, [sp, #72]	; 0x48
 801397c:	462e      	mov	r6, r5
 801397e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013980:	4620      	mov	r0, r4
 8013982:	6859      	ldr	r1, [r3, #4]
 8013984:	f001 ffaa 	bl	80158dc <_Balloc>
 8013988:	4607      	mov	r7, r0
 801398a:	2800      	cmp	r0, #0
 801398c:	f43f af0c 	beq.w	80137a8 <_strtod_l+0x498>
 8013990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013992:	691a      	ldr	r2, [r3, #16]
 8013994:	3202      	adds	r2, #2
 8013996:	f103 010c 	add.w	r1, r3, #12
 801399a:	0092      	lsls	r2, r2, #2
 801399c:	300c      	adds	r0, #12
 801399e:	f7fe fb35 	bl	801200c <memcpy>
 80139a2:	ec49 8b10 	vmov	d0, r8, r9
 80139a6:	aa1a      	add	r2, sp, #104	; 0x68
 80139a8:	a919      	add	r1, sp, #100	; 0x64
 80139aa:	4620      	mov	r0, r4
 80139ac:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80139b0:	f002 fb7c 	bl	80160ac <__d2b>
 80139b4:	9018      	str	r0, [sp, #96]	; 0x60
 80139b6:	2800      	cmp	r0, #0
 80139b8:	f43f aef6 	beq.w	80137a8 <_strtod_l+0x498>
 80139bc:	2101      	movs	r1, #1
 80139be:	4620      	mov	r0, r4
 80139c0:	f002 f8d2 	bl	8015b68 <__i2b>
 80139c4:	4606      	mov	r6, r0
 80139c6:	2800      	cmp	r0, #0
 80139c8:	f43f aeee 	beq.w	80137a8 <_strtod_l+0x498>
 80139cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80139ce:	991a      	ldr	r1, [sp, #104]	; 0x68
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	bfab      	itete	ge
 80139d4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80139d6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80139d8:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 80139dc:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 80139e0:	bfac      	ite	ge
 80139e2:	eb03 0b02 	addge.w	fp, r3, r2
 80139e6:	eba2 0a03 	sublt.w	sl, r2, r3
 80139ea:	9a04      	ldr	r2, [sp, #16]
 80139ec:	1a9b      	subs	r3, r3, r2
 80139ee:	440b      	add	r3, r1
 80139f0:	4a7a      	ldr	r2, [pc, #488]	; (8013bdc <_strtod_l+0x8cc>)
 80139f2:	3b01      	subs	r3, #1
 80139f4:	4293      	cmp	r3, r2
 80139f6:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80139fa:	f280 80d1 	bge.w	8013ba0 <_strtod_l+0x890>
 80139fe:	1ad2      	subs	r2, r2, r3
 8013a00:	2a1f      	cmp	r2, #31
 8013a02:	eba1 0102 	sub.w	r1, r1, r2
 8013a06:	f04f 0001 	mov.w	r0, #1
 8013a0a:	f300 80bd 	bgt.w	8013b88 <_strtod_l+0x878>
 8013a0e:	fa00 f302 	lsl.w	r3, r0, r2
 8013a12:	930e      	str	r3, [sp, #56]	; 0x38
 8013a14:	2300      	movs	r3, #0
 8013a16:	930d      	str	r3, [sp, #52]	; 0x34
 8013a18:	eb0b 0301 	add.w	r3, fp, r1
 8013a1c:	9a04      	ldr	r2, [sp, #16]
 8013a1e:	459b      	cmp	fp, r3
 8013a20:	448a      	add	sl, r1
 8013a22:	4492      	add	sl, r2
 8013a24:	465a      	mov	r2, fp
 8013a26:	bfa8      	it	ge
 8013a28:	461a      	movge	r2, r3
 8013a2a:	4552      	cmp	r2, sl
 8013a2c:	bfa8      	it	ge
 8013a2e:	4652      	movge	r2, sl
 8013a30:	2a00      	cmp	r2, #0
 8013a32:	bfc2      	ittt	gt
 8013a34:	1a9b      	subgt	r3, r3, r2
 8013a36:	ebaa 0a02 	subgt.w	sl, sl, r2
 8013a3a:	ebab 0b02 	subgt.w	fp, fp, r2
 8013a3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013a40:	2a00      	cmp	r2, #0
 8013a42:	dd18      	ble.n	8013a76 <_strtod_l+0x766>
 8013a44:	4631      	mov	r1, r6
 8013a46:	4620      	mov	r0, r4
 8013a48:	9315      	str	r3, [sp, #84]	; 0x54
 8013a4a:	f002 f949 	bl	8015ce0 <__pow5mult>
 8013a4e:	4606      	mov	r6, r0
 8013a50:	2800      	cmp	r0, #0
 8013a52:	f43f aea9 	beq.w	80137a8 <_strtod_l+0x498>
 8013a56:	4601      	mov	r1, r0
 8013a58:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013a5a:	4620      	mov	r0, r4
 8013a5c:	f002 f89a 	bl	8015b94 <__multiply>
 8013a60:	9014      	str	r0, [sp, #80]	; 0x50
 8013a62:	2800      	cmp	r0, #0
 8013a64:	f43f aea0 	beq.w	80137a8 <_strtod_l+0x498>
 8013a68:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013a6a:	4620      	mov	r0, r4
 8013a6c:	f001 ff76 	bl	801595c <_Bfree>
 8013a70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013a72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013a74:	9218      	str	r2, [sp, #96]	; 0x60
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	f300 8097 	bgt.w	8013baa <_strtod_l+0x89a>
 8013a7c:	9b06      	ldr	r3, [sp, #24]
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	dd08      	ble.n	8013a94 <_strtod_l+0x784>
 8013a82:	4639      	mov	r1, r7
 8013a84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013a86:	4620      	mov	r0, r4
 8013a88:	f002 f92a 	bl	8015ce0 <__pow5mult>
 8013a8c:	4607      	mov	r7, r0
 8013a8e:	2800      	cmp	r0, #0
 8013a90:	f43f ae8a 	beq.w	80137a8 <_strtod_l+0x498>
 8013a94:	f1ba 0f00 	cmp.w	sl, #0
 8013a98:	dd08      	ble.n	8013aac <_strtod_l+0x79c>
 8013a9a:	4639      	mov	r1, r7
 8013a9c:	4652      	mov	r2, sl
 8013a9e:	4620      	mov	r0, r4
 8013aa0:	f002 f978 	bl	8015d94 <__lshift>
 8013aa4:	4607      	mov	r7, r0
 8013aa6:	2800      	cmp	r0, #0
 8013aa8:	f43f ae7e 	beq.w	80137a8 <_strtod_l+0x498>
 8013aac:	f1bb 0f00 	cmp.w	fp, #0
 8013ab0:	dd08      	ble.n	8013ac4 <_strtod_l+0x7b4>
 8013ab2:	4631      	mov	r1, r6
 8013ab4:	465a      	mov	r2, fp
 8013ab6:	4620      	mov	r0, r4
 8013ab8:	f002 f96c 	bl	8015d94 <__lshift>
 8013abc:	4606      	mov	r6, r0
 8013abe:	2800      	cmp	r0, #0
 8013ac0:	f43f ae72 	beq.w	80137a8 <_strtod_l+0x498>
 8013ac4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013ac6:	463a      	mov	r2, r7
 8013ac8:	4620      	mov	r0, r4
 8013aca:	f002 f9eb 	bl	8015ea4 <__mdiff>
 8013ace:	4605      	mov	r5, r0
 8013ad0:	2800      	cmp	r0, #0
 8013ad2:	f43f ae69 	beq.w	80137a8 <_strtod_l+0x498>
 8013ad6:	2300      	movs	r3, #0
 8013ad8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8013adc:	60c3      	str	r3, [r0, #12]
 8013ade:	4631      	mov	r1, r6
 8013ae0:	f002 f9c4 	bl	8015e6c <__mcmp>
 8013ae4:	2800      	cmp	r0, #0
 8013ae6:	da7f      	bge.n	8013be8 <_strtod_l+0x8d8>
 8013ae8:	ea5a 0308 	orrs.w	r3, sl, r8
 8013aec:	f040 80a5 	bne.w	8013c3a <_strtod_l+0x92a>
 8013af0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	f040 80a0 	bne.w	8013c3a <_strtod_l+0x92a>
 8013afa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013afe:	0d1b      	lsrs	r3, r3, #20
 8013b00:	051b      	lsls	r3, r3, #20
 8013b02:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013b06:	f240 8098 	bls.w	8013c3a <_strtod_l+0x92a>
 8013b0a:	696b      	ldr	r3, [r5, #20]
 8013b0c:	b91b      	cbnz	r3, 8013b16 <_strtod_l+0x806>
 8013b0e:	692b      	ldr	r3, [r5, #16]
 8013b10:	2b01      	cmp	r3, #1
 8013b12:	f340 8092 	ble.w	8013c3a <_strtod_l+0x92a>
 8013b16:	4629      	mov	r1, r5
 8013b18:	2201      	movs	r2, #1
 8013b1a:	4620      	mov	r0, r4
 8013b1c:	f002 f93a 	bl	8015d94 <__lshift>
 8013b20:	4631      	mov	r1, r6
 8013b22:	4605      	mov	r5, r0
 8013b24:	f002 f9a2 	bl	8015e6c <__mcmp>
 8013b28:	2800      	cmp	r0, #0
 8013b2a:	f340 8086 	ble.w	8013c3a <_strtod_l+0x92a>
 8013b2e:	9904      	ldr	r1, [sp, #16]
 8013b30:	4a2b      	ldr	r2, [pc, #172]	; (8013be0 <_strtod_l+0x8d0>)
 8013b32:	464b      	mov	r3, r9
 8013b34:	2900      	cmp	r1, #0
 8013b36:	f000 80a1 	beq.w	8013c7c <_strtod_l+0x96c>
 8013b3a:	ea02 0109 	and.w	r1, r2, r9
 8013b3e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013b42:	f300 809b 	bgt.w	8013c7c <_strtod_l+0x96c>
 8013b46:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013b4a:	f77f aea2 	ble.w	8013892 <_strtod_l+0x582>
 8013b4e:	4a25      	ldr	r2, [pc, #148]	; (8013be4 <_strtod_l+0x8d4>)
 8013b50:	2300      	movs	r3, #0
 8013b52:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8013b56:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 8013b5a:	ec49 8b17 	vmov	d7, r8, r9
 8013b5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013b62:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013b66:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8013b6a:	4313      	orrs	r3, r2
 8013b6c:	bf08      	it	eq
 8013b6e:	2322      	moveq	r3, #34	; 0x22
 8013b70:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8013b74:	bf08      	it	eq
 8013b76:	6023      	streq	r3, [r4, #0]
 8013b78:	e620      	b.n	80137bc <_strtod_l+0x4ac>
 8013b7a:	f04f 31ff 	mov.w	r1, #4294967295
 8013b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8013b82:	ea02 0808 	and.w	r8, r2, r8
 8013b86:	e6d4      	b.n	8013932 <_strtod_l+0x622>
 8013b88:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8013b8c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8013b90:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8013b94:	33e2      	adds	r3, #226	; 0xe2
 8013b96:	fa00 f303 	lsl.w	r3, r0, r3
 8013b9a:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 8013b9e:	e73b      	b.n	8013a18 <_strtod_l+0x708>
 8013ba0:	2000      	movs	r0, #0
 8013ba2:	2301      	movs	r3, #1
 8013ba4:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8013ba8:	e736      	b.n	8013a18 <_strtod_l+0x708>
 8013baa:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013bac:	461a      	mov	r2, r3
 8013bae:	4620      	mov	r0, r4
 8013bb0:	f002 f8f0 	bl	8015d94 <__lshift>
 8013bb4:	9018      	str	r0, [sp, #96]	; 0x60
 8013bb6:	2800      	cmp	r0, #0
 8013bb8:	f47f af60 	bne.w	8013a7c <_strtod_l+0x76c>
 8013bbc:	e5f4      	b.n	80137a8 <_strtod_l+0x498>
 8013bbe:	bf00      	nop
 8013bc0:	94a03595 	.word	0x94a03595
 8013bc4:	3fcfffff 	.word	0x3fcfffff
 8013bc8:	94a03595 	.word	0x94a03595
 8013bcc:	3fdfffff 	.word	0x3fdfffff
 8013bd0:	35afe535 	.word	0x35afe535
 8013bd4:	3fe00000 	.word	0x3fe00000
 8013bd8:	08063300 	.word	0x08063300
 8013bdc:	fffffc02 	.word	0xfffffc02
 8013be0:	7ff00000 	.word	0x7ff00000
 8013be4:	39500000 	.word	0x39500000
 8013be8:	46cb      	mov	fp, r9
 8013bea:	d165      	bne.n	8013cb8 <_strtod_l+0x9a8>
 8013bec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013bf0:	f1ba 0f00 	cmp.w	sl, #0
 8013bf4:	d02a      	beq.n	8013c4c <_strtod_l+0x93c>
 8013bf6:	4aaa      	ldr	r2, [pc, #680]	; (8013ea0 <_strtod_l+0xb90>)
 8013bf8:	4293      	cmp	r3, r2
 8013bfa:	d12b      	bne.n	8013c54 <_strtod_l+0x944>
 8013bfc:	9b04      	ldr	r3, [sp, #16]
 8013bfe:	4641      	mov	r1, r8
 8013c00:	b1fb      	cbz	r3, 8013c42 <_strtod_l+0x932>
 8013c02:	4aa8      	ldr	r2, [pc, #672]	; (8013ea4 <_strtod_l+0xb94>)
 8013c04:	ea09 0202 	and.w	r2, r9, r2
 8013c08:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8013c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8013c10:	d81a      	bhi.n	8013c48 <_strtod_l+0x938>
 8013c12:	0d12      	lsrs	r2, r2, #20
 8013c14:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013c18:	fa00 f303 	lsl.w	r3, r0, r3
 8013c1c:	4299      	cmp	r1, r3
 8013c1e:	d119      	bne.n	8013c54 <_strtod_l+0x944>
 8013c20:	4ba1      	ldr	r3, [pc, #644]	; (8013ea8 <_strtod_l+0xb98>)
 8013c22:	459b      	cmp	fp, r3
 8013c24:	d102      	bne.n	8013c2c <_strtod_l+0x91c>
 8013c26:	3101      	adds	r1, #1
 8013c28:	f43f adbe 	beq.w	80137a8 <_strtod_l+0x498>
 8013c2c:	4b9d      	ldr	r3, [pc, #628]	; (8013ea4 <_strtod_l+0xb94>)
 8013c2e:	ea0b 0303 	and.w	r3, fp, r3
 8013c32:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8013c36:	f04f 0800 	mov.w	r8, #0
 8013c3a:	9b04      	ldr	r3, [sp, #16]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d186      	bne.n	8013b4e <_strtod_l+0x83e>
 8013c40:	e5bc      	b.n	80137bc <_strtod_l+0x4ac>
 8013c42:	f04f 33ff 	mov.w	r3, #4294967295
 8013c46:	e7e9      	b.n	8013c1c <_strtod_l+0x90c>
 8013c48:	4603      	mov	r3, r0
 8013c4a:	e7e7      	b.n	8013c1c <_strtod_l+0x90c>
 8013c4c:	ea53 0308 	orrs.w	r3, r3, r8
 8013c50:	f43f af6d 	beq.w	8013b2e <_strtod_l+0x81e>
 8013c54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013c56:	b1db      	cbz	r3, 8013c90 <_strtod_l+0x980>
 8013c58:	ea13 0f0b 	tst.w	r3, fp
 8013c5c:	d0ed      	beq.n	8013c3a <_strtod_l+0x92a>
 8013c5e:	9a04      	ldr	r2, [sp, #16]
 8013c60:	4640      	mov	r0, r8
 8013c62:	4649      	mov	r1, r9
 8013c64:	f1ba 0f00 	cmp.w	sl, #0
 8013c68:	d016      	beq.n	8013c98 <_strtod_l+0x988>
 8013c6a:	f7ff fb34 	bl	80132d6 <sulp>
 8013c6e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8013c72:	ee37 7b00 	vadd.f64	d7, d7, d0
 8013c76:	ec59 8b17 	vmov	r8, r9, d7
 8013c7a:	e7de      	b.n	8013c3a <_strtod_l+0x92a>
 8013c7c:	4013      	ands	r3, r2
 8013c7e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013c82:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8013c86:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8013c8a:	f04f 38ff 	mov.w	r8, #4294967295
 8013c8e:	e7d4      	b.n	8013c3a <_strtod_l+0x92a>
 8013c90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013c92:	ea13 0f08 	tst.w	r3, r8
 8013c96:	e7e1      	b.n	8013c5c <_strtod_l+0x94c>
 8013c98:	f7ff fb1d 	bl	80132d6 <sulp>
 8013c9c:	ed9d 7b08 	vldr	d7, [sp, #32]
 8013ca0:	ee37 7b40 	vsub.f64	d7, d7, d0
 8013ca4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013ca8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cb0:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8013cb4:	d1c1      	bne.n	8013c3a <_strtod_l+0x92a>
 8013cb6:	e5ec      	b.n	8013892 <_strtod_l+0x582>
 8013cb8:	4631      	mov	r1, r6
 8013cba:	4628      	mov	r0, r5
 8013cbc:	f002 fa52 	bl	8016164 <__ratio>
 8013cc0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8013cc4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8013cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ccc:	d867      	bhi.n	8013d9e <_strtod_l+0xa8e>
 8013cce:	f1ba 0f00 	cmp.w	sl, #0
 8013cd2:	d044      	beq.n	8013d5e <_strtod_l+0xa4e>
 8013cd4:	4b75      	ldr	r3, [pc, #468]	; (8013eac <_strtod_l+0xb9c>)
 8013cd6:	2200      	movs	r2, #0
 8013cd8:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8013cdc:	4971      	ldr	r1, [pc, #452]	; (8013ea4 <_strtod_l+0xb94>)
 8013cde:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8013eb8 <_strtod_l+0xba8>
 8013ce2:	ea0b 0001 	and.w	r0, fp, r1
 8013ce6:	4560      	cmp	r0, ip
 8013ce8:	900d      	str	r0, [sp, #52]	; 0x34
 8013cea:	f040 808b 	bne.w	8013e04 <_strtod_l+0xaf4>
 8013cee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013cf2:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8013cf6:	ec49 8b10 	vmov	d0, r8, r9
 8013cfa:	ec43 2b1c 	vmov	d12, r2, r3
 8013cfe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8013d02:	f002 f957 	bl	8015fb4 <__ulp>
 8013d06:	ec49 8b1d 	vmov	d13, r8, r9
 8013d0a:	eeac db00 	vfma.f64	d13, d12, d0
 8013d0e:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 8013d12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013d14:	4963      	ldr	r1, [pc, #396]	; (8013ea4 <_strtod_l+0xb94>)
 8013d16:	4a66      	ldr	r2, [pc, #408]	; (8013eb0 <_strtod_l+0xba0>)
 8013d18:	4019      	ands	r1, r3
 8013d1a:	4291      	cmp	r1, r2
 8013d1c:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8013d20:	d947      	bls.n	8013db2 <_strtod_l+0xaa2>
 8013d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d24:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8013d28:	4293      	cmp	r3, r2
 8013d2a:	d103      	bne.n	8013d34 <_strtod_l+0xa24>
 8013d2c:	9b08      	ldr	r3, [sp, #32]
 8013d2e:	3301      	adds	r3, #1
 8013d30:	f43f ad3a 	beq.w	80137a8 <_strtod_l+0x498>
 8013d34:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8013ea8 <_strtod_l+0xb98>
 8013d38:	f04f 38ff 	mov.w	r8, #4294967295
 8013d3c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013d3e:	4620      	mov	r0, r4
 8013d40:	f001 fe0c 	bl	801595c <_Bfree>
 8013d44:	4639      	mov	r1, r7
 8013d46:	4620      	mov	r0, r4
 8013d48:	f001 fe08 	bl	801595c <_Bfree>
 8013d4c:	4631      	mov	r1, r6
 8013d4e:	4620      	mov	r0, r4
 8013d50:	f001 fe04 	bl	801595c <_Bfree>
 8013d54:	4629      	mov	r1, r5
 8013d56:	4620      	mov	r0, r4
 8013d58:	f001 fe00 	bl	801595c <_Bfree>
 8013d5c:	e60f      	b.n	801397e <_strtod_l+0x66e>
 8013d5e:	f1b8 0f00 	cmp.w	r8, #0
 8013d62:	d112      	bne.n	8013d8a <_strtod_l+0xa7a>
 8013d64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013d68:	b9b3      	cbnz	r3, 8013d98 <_strtod_l+0xa88>
 8013d6a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8013d6e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8013d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d76:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8013d7a:	d401      	bmi.n	8013d80 <_strtod_l+0xa70>
 8013d7c:	ee20 8b08 	vmul.f64	d8, d0, d8
 8013d80:	eeb1 7b48 	vneg.f64	d7, d8
 8013d84:	ec53 2b17 	vmov	r2, r3, d7
 8013d88:	e7a8      	b.n	8013cdc <_strtod_l+0x9cc>
 8013d8a:	f1b8 0f01 	cmp.w	r8, #1
 8013d8e:	d103      	bne.n	8013d98 <_strtod_l+0xa88>
 8013d90:	f1b9 0f00 	cmp.w	r9, #0
 8013d94:	f43f ad7d 	beq.w	8013892 <_strtod_l+0x582>
 8013d98:	4b46      	ldr	r3, [pc, #280]	; (8013eb4 <_strtod_l+0xba4>)
 8013d9a:	2200      	movs	r2, #0
 8013d9c:	e79c      	b.n	8013cd8 <_strtod_l+0x9c8>
 8013d9e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8013da2:	ee20 8b08 	vmul.f64	d8, d0, d8
 8013da6:	f1ba 0f00 	cmp.w	sl, #0
 8013daa:	d0e9      	beq.n	8013d80 <_strtod_l+0xa70>
 8013dac:	ec53 2b18 	vmov	r2, r3, d8
 8013db0:	e794      	b.n	8013cdc <_strtod_l+0x9cc>
 8013db2:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8013db6:	9b04      	ldr	r3, [sp, #16]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d1bf      	bne.n	8013d3c <_strtod_l+0xa2c>
 8013dbc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013dc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013dc2:	0d1b      	lsrs	r3, r3, #20
 8013dc4:	051b      	lsls	r3, r3, #20
 8013dc6:	429a      	cmp	r2, r3
 8013dc8:	d1b8      	bne.n	8013d3c <_strtod_l+0xa2c>
 8013dca:	ec51 0b18 	vmov	r0, r1, d8
 8013dce:	f7ec fcc3 	bl	8000758 <__aeabi_d2lz>
 8013dd2:	f7ec fc7b 	bl	80006cc <__aeabi_l2d>
 8013dd6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013dda:	ec41 0b17 	vmov	d7, r0, r1
 8013dde:	ea43 0308 	orr.w	r3, r3, r8
 8013de2:	ea53 030a 	orrs.w	r3, r3, sl
 8013de6:	ee38 8b47 	vsub.f64	d8, d8, d7
 8013dea:	d03e      	beq.n	8013e6a <_strtod_l+0xb5a>
 8013dec:	eeb4 8bca 	vcmpe.f64	d8, d10
 8013df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013df4:	f53f ace2 	bmi.w	80137bc <_strtod_l+0x4ac>
 8013df8:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8013dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e00:	dd9c      	ble.n	8013d3c <_strtod_l+0xa2c>
 8013e02:	e4db      	b.n	80137bc <_strtod_l+0x4ac>
 8013e04:	9904      	ldr	r1, [sp, #16]
 8013e06:	b301      	cbz	r1, 8013e4a <_strtod_l+0xb3a>
 8013e08:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013e0a:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8013e0e:	d81c      	bhi.n	8013e4a <_strtod_l+0xb3a>
 8013e10:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8013e98 <_strtod_l+0xb88>
 8013e14:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8013e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e1c:	d811      	bhi.n	8013e42 <_strtod_l+0xb32>
 8013e1e:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8013e22:	ee18 3a10 	vmov	r3, s16
 8013e26:	2b01      	cmp	r3, #1
 8013e28:	bf38      	it	cc
 8013e2a:	2301      	movcc	r3, #1
 8013e2c:	ee08 3a10 	vmov	s16, r3
 8013e30:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8013e34:	f1ba 0f00 	cmp.w	sl, #0
 8013e38:	d114      	bne.n	8013e64 <_strtod_l+0xb54>
 8013e3a:	eeb1 7b48 	vneg.f64	d7, d8
 8013e3e:	ec53 2b17 	vmov	r2, r3, d7
 8013e42:	980d      	ldr	r0, [sp, #52]	; 0x34
 8013e44:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8013e48:	1a0b      	subs	r3, r1, r0
 8013e4a:	ed9d 0b08 	vldr	d0, [sp, #32]
 8013e4e:	ec43 2b1c 	vmov	d12, r2, r3
 8013e52:	f002 f8af 	bl	8015fb4 <__ulp>
 8013e56:	ed9d 7b08 	vldr	d7, [sp, #32]
 8013e5a:	eeac 7b00 	vfma.f64	d7, d12, d0
 8013e5e:	ec59 8b17 	vmov	r8, r9, d7
 8013e62:	e7a8      	b.n	8013db6 <_strtod_l+0xaa6>
 8013e64:	ec53 2b18 	vmov	r2, r3, d8
 8013e68:	e7eb      	b.n	8013e42 <_strtod_l+0xb32>
 8013e6a:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8013e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e72:	f57f af63 	bpl.w	8013d3c <_strtod_l+0xa2c>
 8013e76:	e4a1      	b.n	80137bc <_strtod_l+0x4ac>
 8013e78:	2300      	movs	r3, #0
 8013e7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8013e7c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013e7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013e80:	6013      	str	r3, [r2, #0]
 8013e82:	f7ff ba8d 	b.w	80133a0 <_strtod_l+0x90>
 8013e86:	2a65      	cmp	r2, #101	; 0x65
 8013e88:	f43f ab89 	beq.w	801359e <_strtod_l+0x28e>
 8013e8c:	2a45      	cmp	r2, #69	; 0x45
 8013e8e:	f43f ab86 	beq.w	801359e <_strtod_l+0x28e>
 8013e92:	2101      	movs	r1, #1
 8013e94:	f7ff bbbe 	b.w	8013614 <_strtod_l+0x304>
 8013e98:	ffc00000 	.word	0xffc00000
 8013e9c:	41dfffff 	.word	0x41dfffff
 8013ea0:	000fffff 	.word	0x000fffff
 8013ea4:	7ff00000 	.word	0x7ff00000
 8013ea8:	7fefffff 	.word	0x7fefffff
 8013eac:	3ff00000 	.word	0x3ff00000
 8013eb0:	7c9fffff 	.word	0x7c9fffff
 8013eb4:	bff00000 	.word	0xbff00000
 8013eb8:	7fe00000 	.word	0x7fe00000

08013ebc <_strtod_r>:
 8013ebc:	4b01      	ldr	r3, [pc, #4]	; (8013ec4 <_strtod_r+0x8>)
 8013ebe:	f7ff ba27 	b.w	8013310 <_strtod_l>
 8013ec2:	bf00      	nop
 8013ec4:	2400a158 	.word	0x2400a158

08013ec8 <_strtol_l.isra.0>:
 8013ec8:	2b01      	cmp	r3, #1
 8013eca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ece:	d001      	beq.n	8013ed4 <_strtol_l.isra.0+0xc>
 8013ed0:	2b24      	cmp	r3, #36	; 0x24
 8013ed2:	d906      	bls.n	8013ee2 <_strtol_l.isra.0+0x1a>
 8013ed4:	f7fe f84e 	bl	8011f74 <__errno>
 8013ed8:	2316      	movs	r3, #22
 8013eda:	6003      	str	r3, [r0, #0]
 8013edc:	2000      	movs	r0, #0
 8013ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ee2:	4f3a      	ldr	r7, [pc, #232]	; (8013fcc <_strtol_l.isra.0+0x104>)
 8013ee4:	468e      	mov	lr, r1
 8013ee6:	4676      	mov	r6, lr
 8013ee8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8013eec:	5de5      	ldrb	r5, [r4, r7]
 8013eee:	f015 0508 	ands.w	r5, r5, #8
 8013ef2:	d1f8      	bne.n	8013ee6 <_strtol_l.isra.0+0x1e>
 8013ef4:	2c2d      	cmp	r4, #45	; 0x2d
 8013ef6:	d134      	bne.n	8013f62 <_strtol_l.isra.0+0x9a>
 8013ef8:	f89e 4000 	ldrb.w	r4, [lr]
 8013efc:	f04f 0801 	mov.w	r8, #1
 8013f00:	f106 0e02 	add.w	lr, r6, #2
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d05c      	beq.n	8013fc2 <_strtol_l.isra.0+0xfa>
 8013f08:	2b10      	cmp	r3, #16
 8013f0a:	d10c      	bne.n	8013f26 <_strtol_l.isra.0+0x5e>
 8013f0c:	2c30      	cmp	r4, #48	; 0x30
 8013f0e:	d10a      	bne.n	8013f26 <_strtol_l.isra.0+0x5e>
 8013f10:	f89e 4000 	ldrb.w	r4, [lr]
 8013f14:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8013f18:	2c58      	cmp	r4, #88	; 0x58
 8013f1a:	d14d      	bne.n	8013fb8 <_strtol_l.isra.0+0xf0>
 8013f1c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8013f20:	2310      	movs	r3, #16
 8013f22:	f10e 0e02 	add.w	lr, lr, #2
 8013f26:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8013f2a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013f2e:	2600      	movs	r6, #0
 8013f30:	fbbc f9f3 	udiv	r9, ip, r3
 8013f34:	4635      	mov	r5, r6
 8013f36:	fb03 ca19 	mls	sl, r3, r9, ip
 8013f3a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8013f3e:	2f09      	cmp	r7, #9
 8013f40:	d818      	bhi.n	8013f74 <_strtol_l.isra.0+0xac>
 8013f42:	463c      	mov	r4, r7
 8013f44:	42a3      	cmp	r3, r4
 8013f46:	dd24      	ble.n	8013f92 <_strtol_l.isra.0+0xca>
 8013f48:	2e00      	cmp	r6, #0
 8013f4a:	db1f      	blt.n	8013f8c <_strtol_l.isra.0+0xc4>
 8013f4c:	45a9      	cmp	r9, r5
 8013f4e:	d31d      	bcc.n	8013f8c <_strtol_l.isra.0+0xc4>
 8013f50:	d101      	bne.n	8013f56 <_strtol_l.isra.0+0x8e>
 8013f52:	45a2      	cmp	sl, r4
 8013f54:	db1a      	blt.n	8013f8c <_strtol_l.isra.0+0xc4>
 8013f56:	fb05 4503 	mla	r5, r5, r3, r4
 8013f5a:	2601      	movs	r6, #1
 8013f5c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8013f60:	e7eb      	b.n	8013f3a <_strtol_l.isra.0+0x72>
 8013f62:	2c2b      	cmp	r4, #43	; 0x2b
 8013f64:	bf08      	it	eq
 8013f66:	f89e 4000 	ldrbeq.w	r4, [lr]
 8013f6a:	46a8      	mov	r8, r5
 8013f6c:	bf08      	it	eq
 8013f6e:	f106 0e02 	addeq.w	lr, r6, #2
 8013f72:	e7c7      	b.n	8013f04 <_strtol_l.isra.0+0x3c>
 8013f74:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8013f78:	2f19      	cmp	r7, #25
 8013f7a:	d801      	bhi.n	8013f80 <_strtol_l.isra.0+0xb8>
 8013f7c:	3c37      	subs	r4, #55	; 0x37
 8013f7e:	e7e1      	b.n	8013f44 <_strtol_l.isra.0+0x7c>
 8013f80:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8013f84:	2f19      	cmp	r7, #25
 8013f86:	d804      	bhi.n	8013f92 <_strtol_l.isra.0+0xca>
 8013f88:	3c57      	subs	r4, #87	; 0x57
 8013f8a:	e7db      	b.n	8013f44 <_strtol_l.isra.0+0x7c>
 8013f8c:	f04f 36ff 	mov.w	r6, #4294967295
 8013f90:	e7e4      	b.n	8013f5c <_strtol_l.isra.0+0x94>
 8013f92:	2e00      	cmp	r6, #0
 8013f94:	da05      	bge.n	8013fa2 <_strtol_l.isra.0+0xda>
 8013f96:	2322      	movs	r3, #34	; 0x22
 8013f98:	6003      	str	r3, [r0, #0]
 8013f9a:	4665      	mov	r5, ip
 8013f9c:	b942      	cbnz	r2, 8013fb0 <_strtol_l.isra.0+0xe8>
 8013f9e:	4628      	mov	r0, r5
 8013fa0:	e79d      	b.n	8013ede <_strtol_l.isra.0+0x16>
 8013fa2:	f1b8 0f00 	cmp.w	r8, #0
 8013fa6:	d000      	beq.n	8013faa <_strtol_l.isra.0+0xe2>
 8013fa8:	426d      	negs	r5, r5
 8013faa:	2a00      	cmp	r2, #0
 8013fac:	d0f7      	beq.n	8013f9e <_strtol_l.isra.0+0xd6>
 8013fae:	b10e      	cbz	r6, 8013fb4 <_strtol_l.isra.0+0xec>
 8013fb0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8013fb4:	6011      	str	r1, [r2, #0]
 8013fb6:	e7f2      	b.n	8013f9e <_strtol_l.isra.0+0xd6>
 8013fb8:	2430      	movs	r4, #48	; 0x30
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d1b3      	bne.n	8013f26 <_strtol_l.isra.0+0x5e>
 8013fbe:	2308      	movs	r3, #8
 8013fc0:	e7b1      	b.n	8013f26 <_strtol_l.isra.0+0x5e>
 8013fc2:	2c30      	cmp	r4, #48	; 0x30
 8013fc4:	d0a4      	beq.n	8013f10 <_strtol_l.isra.0+0x48>
 8013fc6:	230a      	movs	r3, #10
 8013fc8:	e7ad      	b.n	8013f26 <_strtol_l.isra.0+0x5e>
 8013fca:	bf00      	nop
 8013fcc:	08063329 	.word	0x08063329

08013fd0 <_strtol_r>:
 8013fd0:	f7ff bf7a 	b.w	8013ec8 <_strtol_l.isra.0>

08013fd4 <__swbuf_r>:
 8013fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fd6:	460e      	mov	r6, r1
 8013fd8:	4614      	mov	r4, r2
 8013fda:	4605      	mov	r5, r0
 8013fdc:	b118      	cbz	r0, 8013fe6 <__swbuf_r+0x12>
 8013fde:	6983      	ldr	r3, [r0, #24]
 8013fe0:	b90b      	cbnz	r3, 8013fe6 <__swbuf_r+0x12>
 8013fe2:	f000 ffe5 	bl	8014fb0 <__sinit>
 8013fe6:	4b21      	ldr	r3, [pc, #132]	; (801406c <__swbuf_r+0x98>)
 8013fe8:	429c      	cmp	r4, r3
 8013fea:	d12b      	bne.n	8014044 <__swbuf_r+0x70>
 8013fec:	686c      	ldr	r4, [r5, #4]
 8013fee:	69a3      	ldr	r3, [r4, #24]
 8013ff0:	60a3      	str	r3, [r4, #8]
 8013ff2:	89a3      	ldrh	r3, [r4, #12]
 8013ff4:	071a      	lsls	r2, r3, #28
 8013ff6:	d52f      	bpl.n	8014058 <__swbuf_r+0x84>
 8013ff8:	6923      	ldr	r3, [r4, #16]
 8013ffa:	b36b      	cbz	r3, 8014058 <__swbuf_r+0x84>
 8013ffc:	6923      	ldr	r3, [r4, #16]
 8013ffe:	6820      	ldr	r0, [r4, #0]
 8014000:	1ac0      	subs	r0, r0, r3
 8014002:	6963      	ldr	r3, [r4, #20]
 8014004:	b2f6      	uxtb	r6, r6
 8014006:	4283      	cmp	r3, r0
 8014008:	4637      	mov	r7, r6
 801400a:	dc04      	bgt.n	8014016 <__swbuf_r+0x42>
 801400c:	4621      	mov	r1, r4
 801400e:	4628      	mov	r0, r5
 8014010:	f000 ff3a 	bl	8014e88 <_fflush_r>
 8014014:	bb30      	cbnz	r0, 8014064 <__swbuf_r+0x90>
 8014016:	68a3      	ldr	r3, [r4, #8]
 8014018:	3b01      	subs	r3, #1
 801401a:	60a3      	str	r3, [r4, #8]
 801401c:	6823      	ldr	r3, [r4, #0]
 801401e:	1c5a      	adds	r2, r3, #1
 8014020:	6022      	str	r2, [r4, #0]
 8014022:	701e      	strb	r6, [r3, #0]
 8014024:	6963      	ldr	r3, [r4, #20]
 8014026:	3001      	adds	r0, #1
 8014028:	4283      	cmp	r3, r0
 801402a:	d004      	beq.n	8014036 <__swbuf_r+0x62>
 801402c:	89a3      	ldrh	r3, [r4, #12]
 801402e:	07db      	lsls	r3, r3, #31
 8014030:	d506      	bpl.n	8014040 <__swbuf_r+0x6c>
 8014032:	2e0a      	cmp	r6, #10
 8014034:	d104      	bne.n	8014040 <__swbuf_r+0x6c>
 8014036:	4621      	mov	r1, r4
 8014038:	4628      	mov	r0, r5
 801403a:	f000 ff25 	bl	8014e88 <_fflush_r>
 801403e:	b988      	cbnz	r0, 8014064 <__swbuf_r+0x90>
 8014040:	4638      	mov	r0, r7
 8014042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014044:	4b0a      	ldr	r3, [pc, #40]	; (8014070 <__swbuf_r+0x9c>)
 8014046:	429c      	cmp	r4, r3
 8014048:	d101      	bne.n	801404e <__swbuf_r+0x7a>
 801404a:	68ac      	ldr	r4, [r5, #8]
 801404c:	e7cf      	b.n	8013fee <__swbuf_r+0x1a>
 801404e:	4b09      	ldr	r3, [pc, #36]	; (8014074 <__swbuf_r+0xa0>)
 8014050:	429c      	cmp	r4, r3
 8014052:	bf08      	it	eq
 8014054:	68ec      	ldreq	r4, [r5, #12]
 8014056:	e7ca      	b.n	8013fee <__swbuf_r+0x1a>
 8014058:	4621      	mov	r1, r4
 801405a:	4628      	mov	r0, r5
 801405c:	f000 f80c 	bl	8014078 <__swsetup_r>
 8014060:	2800      	cmp	r0, #0
 8014062:	d0cb      	beq.n	8013ffc <__swbuf_r+0x28>
 8014064:	f04f 37ff 	mov.w	r7, #4294967295
 8014068:	e7ea      	b.n	8014040 <__swbuf_r+0x6c>
 801406a:	bf00      	nop
 801406c:	080634e0 	.word	0x080634e0
 8014070:	08063500 	.word	0x08063500
 8014074:	080634c0 	.word	0x080634c0

08014078 <__swsetup_r>:
 8014078:	4b32      	ldr	r3, [pc, #200]	; (8014144 <__swsetup_r+0xcc>)
 801407a:	b570      	push	{r4, r5, r6, lr}
 801407c:	681d      	ldr	r5, [r3, #0]
 801407e:	4606      	mov	r6, r0
 8014080:	460c      	mov	r4, r1
 8014082:	b125      	cbz	r5, 801408e <__swsetup_r+0x16>
 8014084:	69ab      	ldr	r3, [r5, #24]
 8014086:	b913      	cbnz	r3, 801408e <__swsetup_r+0x16>
 8014088:	4628      	mov	r0, r5
 801408a:	f000 ff91 	bl	8014fb0 <__sinit>
 801408e:	4b2e      	ldr	r3, [pc, #184]	; (8014148 <__swsetup_r+0xd0>)
 8014090:	429c      	cmp	r4, r3
 8014092:	d10f      	bne.n	80140b4 <__swsetup_r+0x3c>
 8014094:	686c      	ldr	r4, [r5, #4]
 8014096:	89a3      	ldrh	r3, [r4, #12]
 8014098:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801409c:	0719      	lsls	r1, r3, #28
 801409e:	d42c      	bmi.n	80140fa <__swsetup_r+0x82>
 80140a0:	06dd      	lsls	r5, r3, #27
 80140a2:	d411      	bmi.n	80140c8 <__swsetup_r+0x50>
 80140a4:	2309      	movs	r3, #9
 80140a6:	6033      	str	r3, [r6, #0]
 80140a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80140ac:	81a3      	strh	r3, [r4, #12]
 80140ae:	f04f 30ff 	mov.w	r0, #4294967295
 80140b2:	e03e      	b.n	8014132 <__swsetup_r+0xba>
 80140b4:	4b25      	ldr	r3, [pc, #148]	; (801414c <__swsetup_r+0xd4>)
 80140b6:	429c      	cmp	r4, r3
 80140b8:	d101      	bne.n	80140be <__swsetup_r+0x46>
 80140ba:	68ac      	ldr	r4, [r5, #8]
 80140bc:	e7eb      	b.n	8014096 <__swsetup_r+0x1e>
 80140be:	4b24      	ldr	r3, [pc, #144]	; (8014150 <__swsetup_r+0xd8>)
 80140c0:	429c      	cmp	r4, r3
 80140c2:	bf08      	it	eq
 80140c4:	68ec      	ldreq	r4, [r5, #12]
 80140c6:	e7e6      	b.n	8014096 <__swsetup_r+0x1e>
 80140c8:	0758      	lsls	r0, r3, #29
 80140ca:	d512      	bpl.n	80140f2 <__swsetup_r+0x7a>
 80140cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80140ce:	b141      	cbz	r1, 80140e2 <__swsetup_r+0x6a>
 80140d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80140d4:	4299      	cmp	r1, r3
 80140d6:	d002      	beq.n	80140de <__swsetup_r+0x66>
 80140d8:	4630      	mov	r0, r6
 80140da:	f7fd ffc7 	bl	801206c <_free_r>
 80140de:	2300      	movs	r3, #0
 80140e0:	6363      	str	r3, [r4, #52]	; 0x34
 80140e2:	89a3      	ldrh	r3, [r4, #12]
 80140e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80140e8:	81a3      	strh	r3, [r4, #12]
 80140ea:	2300      	movs	r3, #0
 80140ec:	6063      	str	r3, [r4, #4]
 80140ee:	6923      	ldr	r3, [r4, #16]
 80140f0:	6023      	str	r3, [r4, #0]
 80140f2:	89a3      	ldrh	r3, [r4, #12]
 80140f4:	f043 0308 	orr.w	r3, r3, #8
 80140f8:	81a3      	strh	r3, [r4, #12]
 80140fa:	6923      	ldr	r3, [r4, #16]
 80140fc:	b94b      	cbnz	r3, 8014112 <__swsetup_r+0x9a>
 80140fe:	89a3      	ldrh	r3, [r4, #12]
 8014100:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014108:	d003      	beq.n	8014112 <__swsetup_r+0x9a>
 801410a:	4621      	mov	r1, r4
 801410c:	4630      	mov	r0, r6
 801410e:	f001 fb87 	bl	8015820 <__smakebuf_r>
 8014112:	89a0      	ldrh	r0, [r4, #12]
 8014114:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014118:	f010 0301 	ands.w	r3, r0, #1
 801411c:	d00a      	beq.n	8014134 <__swsetup_r+0xbc>
 801411e:	2300      	movs	r3, #0
 8014120:	60a3      	str	r3, [r4, #8]
 8014122:	6963      	ldr	r3, [r4, #20]
 8014124:	425b      	negs	r3, r3
 8014126:	61a3      	str	r3, [r4, #24]
 8014128:	6923      	ldr	r3, [r4, #16]
 801412a:	b943      	cbnz	r3, 801413e <__swsetup_r+0xc6>
 801412c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014130:	d1ba      	bne.n	80140a8 <__swsetup_r+0x30>
 8014132:	bd70      	pop	{r4, r5, r6, pc}
 8014134:	0781      	lsls	r1, r0, #30
 8014136:	bf58      	it	pl
 8014138:	6963      	ldrpl	r3, [r4, #20]
 801413a:	60a3      	str	r3, [r4, #8]
 801413c:	e7f4      	b.n	8014128 <__swsetup_r+0xb0>
 801413e:	2000      	movs	r0, #0
 8014140:	e7f7      	b.n	8014132 <__swsetup_r+0xba>
 8014142:	bf00      	nop
 8014144:	2400a0f0 	.word	0x2400a0f0
 8014148:	080634e0 	.word	0x080634e0
 801414c:	08063500 	.word	0x08063500
 8014150:	080634c0 	.word	0x080634c0

08014154 <abort>:
 8014154:	b508      	push	{r3, lr}
 8014156:	2006      	movs	r0, #6
 8014158:	f002 fa3e 	bl	80165d8 <raise>
 801415c:	2001      	movs	r0, #1
 801415e:	f7ee f832 	bl	80021c6 <_exit>

08014162 <quorem>:
 8014162:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014166:	6903      	ldr	r3, [r0, #16]
 8014168:	690c      	ldr	r4, [r1, #16]
 801416a:	42a3      	cmp	r3, r4
 801416c:	4607      	mov	r7, r0
 801416e:	f2c0 8081 	blt.w	8014274 <quorem+0x112>
 8014172:	3c01      	subs	r4, #1
 8014174:	f101 0814 	add.w	r8, r1, #20
 8014178:	f100 0514 	add.w	r5, r0, #20
 801417c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014180:	9301      	str	r3, [sp, #4]
 8014182:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014186:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801418a:	3301      	adds	r3, #1
 801418c:	429a      	cmp	r2, r3
 801418e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014192:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014196:	fbb2 f6f3 	udiv	r6, r2, r3
 801419a:	d331      	bcc.n	8014200 <quorem+0x9e>
 801419c:	f04f 0e00 	mov.w	lr, #0
 80141a0:	4640      	mov	r0, r8
 80141a2:	46ac      	mov	ip, r5
 80141a4:	46f2      	mov	sl, lr
 80141a6:	f850 2b04 	ldr.w	r2, [r0], #4
 80141aa:	b293      	uxth	r3, r2
 80141ac:	fb06 e303 	mla	r3, r6, r3, lr
 80141b0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80141b4:	b29b      	uxth	r3, r3
 80141b6:	ebaa 0303 	sub.w	r3, sl, r3
 80141ba:	0c12      	lsrs	r2, r2, #16
 80141bc:	f8dc a000 	ldr.w	sl, [ip]
 80141c0:	fb06 e202 	mla	r2, r6, r2, lr
 80141c4:	fa13 f38a 	uxtah	r3, r3, sl
 80141c8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80141cc:	fa1f fa82 	uxth.w	sl, r2
 80141d0:	f8dc 2000 	ldr.w	r2, [ip]
 80141d4:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80141d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80141dc:	b29b      	uxth	r3, r3
 80141de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80141e2:	4581      	cmp	r9, r0
 80141e4:	f84c 3b04 	str.w	r3, [ip], #4
 80141e8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80141ec:	d2db      	bcs.n	80141a6 <quorem+0x44>
 80141ee:	f855 300b 	ldr.w	r3, [r5, fp]
 80141f2:	b92b      	cbnz	r3, 8014200 <quorem+0x9e>
 80141f4:	9b01      	ldr	r3, [sp, #4]
 80141f6:	3b04      	subs	r3, #4
 80141f8:	429d      	cmp	r5, r3
 80141fa:	461a      	mov	r2, r3
 80141fc:	d32e      	bcc.n	801425c <quorem+0xfa>
 80141fe:	613c      	str	r4, [r7, #16]
 8014200:	4638      	mov	r0, r7
 8014202:	f001 fe33 	bl	8015e6c <__mcmp>
 8014206:	2800      	cmp	r0, #0
 8014208:	db24      	blt.n	8014254 <quorem+0xf2>
 801420a:	3601      	adds	r6, #1
 801420c:	4628      	mov	r0, r5
 801420e:	f04f 0c00 	mov.w	ip, #0
 8014212:	f858 2b04 	ldr.w	r2, [r8], #4
 8014216:	f8d0 e000 	ldr.w	lr, [r0]
 801421a:	b293      	uxth	r3, r2
 801421c:	ebac 0303 	sub.w	r3, ip, r3
 8014220:	0c12      	lsrs	r2, r2, #16
 8014222:	fa13 f38e 	uxtah	r3, r3, lr
 8014226:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801422a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801422e:	b29b      	uxth	r3, r3
 8014230:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014234:	45c1      	cmp	r9, r8
 8014236:	f840 3b04 	str.w	r3, [r0], #4
 801423a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801423e:	d2e8      	bcs.n	8014212 <quorem+0xb0>
 8014240:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014244:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014248:	b922      	cbnz	r2, 8014254 <quorem+0xf2>
 801424a:	3b04      	subs	r3, #4
 801424c:	429d      	cmp	r5, r3
 801424e:	461a      	mov	r2, r3
 8014250:	d30a      	bcc.n	8014268 <quorem+0x106>
 8014252:	613c      	str	r4, [r7, #16]
 8014254:	4630      	mov	r0, r6
 8014256:	b003      	add	sp, #12
 8014258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801425c:	6812      	ldr	r2, [r2, #0]
 801425e:	3b04      	subs	r3, #4
 8014260:	2a00      	cmp	r2, #0
 8014262:	d1cc      	bne.n	80141fe <quorem+0x9c>
 8014264:	3c01      	subs	r4, #1
 8014266:	e7c7      	b.n	80141f8 <quorem+0x96>
 8014268:	6812      	ldr	r2, [r2, #0]
 801426a:	3b04      	subs	r3, #4
 801426c:	2a00      	cmp	r2, #0
 801426e:	d1f0      	bne.n	8014252 <quorem+0xf0>
 8014270:	3c01      	subs	r4, #1
 8014272:	e7eb      	b.n	801424c <quorem+0xea>
 8014274:	2000      	movs	r0, #0
 8014276:	e7ee      	b.n	8014256 <quorem+0xf4>

08014278 <_dtoa_r>:
 8014278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801427c:	ec59 8b10 	vmov	r8, r9, d0
 8014280:	b095      	sub	sp, #84	; 0x54
 8014282:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014284:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8014286:	9107      	str	r1, [sp, #28]
 8014288:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801428c:	4606      	mov	r6, r0
 801428e:	9209      	str	r2, [sp, #36]	; 0x24
 8014290:	9310      	str	r3, [sp, #64]	; 0x40
 8014292:	b975      	cbnz	r5, 80142b2 <_dtoa_r+0x3a>
 8014294:	2010      	movs	r0, #16
 8014296:	f7fd fea9 	bl	8011fec <malloc>
 801429a:	4602      	mov	r2, r0
 801429c:	6270      	str	r0, [r6, #36]	; 0x24
 801429e:	b920      	cbnz	r0, 80142aa <_dtoa_r+0x32>
 80142a0:	4bab      	ldr	r3, [pc, #684]	; (8014550 <_dtoa_r+0x2d8>)
 80142a2:	21ea      	movs	r1, #234	; 0xea
 80142a4:	48ab      	ldr	r0, [pc, #684]	; (8014554 <_dtoa_r+0x2dc>)
 80142a6:	f7fd fe47 	bl	8011f38 <__assert_func>
 80142aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80142ae:	6005      	str	r5, [r0, #0]
 80142b0:	60c5      	str	r5, [r0, #12]
 80142b2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80142b4:	6819      	ldr	r1, [r3, #0]
 80142b6:	b151      	cbz	r1, 80142ce <_dtoa_r+0x56>
 80142b8:	685a      	ldr	r2, [r3, #4]
 80142ba:	604a      	str	r2, [r1, #4]
 80142bc:	2301      	movs	r3, #1
 80142be:	4093      	lsls	r3, r2
 80142c0:	608b      	str	r3, [r1, #8]
 80142c2:	4630      	mov	r0, r6
 80142c4:	f001 fb4a 	bl	801595c <_Bfree>
 80142c8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80142ca:	2200      	movs	r2, #0
 80142cc:	601a      	str	r2, [r3, #0]
 80142ce:	f1b9 0300 	subs.w	r3, r9, #0
 80142d2:	bfbb      	ittet	lt
 80142d4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80142d8:	9303      	strlt	r3, [sp, #12]
 80142da:	2300      	movge	r3, #0
 80142dc:	2201      	movlt	r2, #1
 80142de:	bfac      	ite	ge
 80142e0:	6023      	strge	r3, [r4, #0]
 80142e2:	6022      	strlt	r2, [r4, #0]
 80142e4:	4b9c      	ldr	r3, [pc, #624]	; (8014558 <_dtoa_r+0x2e0>)
 80142e6:	9c03      	ldr	r4, [sp, #12]
 80142e8:	43a3      	bics	r3, r4
 80142ea:	d11a      	bne.n	8014322 <_dtoa_r+0xaa>
 80142ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80142ee:	f242 730f 	movw	r3, #9999	; 0x270f
 80142f2:	6013      	str	r3, [r2, #0]
 80142f4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80142f8:	ea53 0308 	orrs.w	r3, r3, r8
 80142fc:	f000 8512 	beq.w	8014d24 <_dtoa_r+0xaac>
 8014300:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014302:	b953      	cbnz	r3, 801431a <_dtoa_r+0xa2>
 8014304:	4b95      	ldr	r3, [pc, #596]	; (801455c <_dtoa_r+0x2e4>)
 8014306:	e01f      	b.n	8014348 <_dtoa_r+0xd0>
 8014308:	4b95      	ldr	r3, [pc, #596]	; (8014560 <_dtoa_r+0x2e8>)
 801430a:	9300      	str	r3, [sp, #0]
 801430c:	3308      	adds	r3, #8
 801430e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8014310:	6013      	str	r3, [r2, #0]
 8014312:	9800      	ldr	r0, [sp, #0]
 8014314:	b015      	add	sp, #84	; 0x54
 8014316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801431a:	4b90      	ldr	r3, [pc, #576]	; (801455c <_dtoa_r+0x2e4>)
 801431c:	9300      	str	r3, [sp, #0]
 801431e:	3303      	adds	r3, #3
 8014320:	e7f5      	b.n	801430e <_dtoa_r+0x96>
 8014322:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014326:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801432a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801432e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8014332:	d10b      	bne.n	801434c <_dtoa_r+0xd4>
 8014334:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014336:	2301      	movs	r3, #1
 8014338:	6013      	str	r3, [r2, #0]
 801433a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801433c:	2b00      	cmp	r3, #0
 801433e:	f000 84ee 	beq.w	8014d1e <_dtoa_r+0xaa6>
 8014342:	4888      	ldr	r0, [pc, #544]	; (8014564 <_dtoa_r+0x2ec>)
 8014344:	6018      	str	r0, [r3, #0]
 8014346:	1e43      	subs	r3, r0, #1
 8014348:	9300      	str	r3, [sp, #0]
 801434a:	e7e2      	b.n	8014312 <_dtoa_r+0x9a>
 801434c:	a913      	add	r1, sp, #76	; 0x4c
 801434e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8014352:	aa12      	add	r2, sp, #72	; 0x48
 8014354:	4630      	mov	r0, r6
 8014356:	f001 fea9 	bl	80160ac <__d2b>
 801435a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801435e:	4605      	mov	r5, r0
 8014360:	9812      	ldr	r0, [sp, #72]	; 0x48
 8014362:	2900      	cmp	r1, #0
 8014364:	d047      	beq.n	80143f6 <_dtoa_r+0x17e>
 8014366:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8014368:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801436c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014370:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8014374:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014378:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801437c:	2400      	movs	r4, #0
 801437e:	ec43 2b16 	vmov	d6, r2, r3
 8014382:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8014386:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8014538 <_dtoa_r+0x2c0>
 801438a:	ee36 7b47 	vsub.f64	d7, d6, d7
 801438e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8014540 <_dtoa_r+0x2c8>
 8014392:	eea7 6b05 	vfma.f64	d6, d7, d5
 8014396:	eeb0 7b46 	vmov.f64	d7, d6
 801439a:	ee06 1a90 	vmov	s13, r1
 801439e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80143a2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8014548 <_dtoa_r+0x2d0>
 80143a6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80143aa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80143ae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80143b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143b6:	ee16 ba90 	vmov	fp, s13
 80143ba:	9411      	str	r4, [sp, #68]	; 0x44
 80143bc:	d508      	bpl.n	80143d0 <_dtoa_r+0x158>
 80143be:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80143c2:	eeb4 6b47 	vcmp.f64	d6, d7
 80143c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143ca:	bf18      	it	ne
 80143cc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80143d0:	f1bb 0f16 	cmp.w	fp, #22
 80143d4:	d832      	bhi.n	801443c <_dtoa_r+0x1c4>
 80143d6:	4b64      	ldr	r3, [pc, #400]	; (8014568 <_dtoa_r+0x2f0>)
 80143d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80143dc:	ed93 7b00 	vldr	d7, [r3]
 80143e0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80143e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80143e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143ec:	d501      	bpl.n	80143f2 <_dtoa_r+0x17a>
 80143ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 80143f2:	2300      	movs	r3, #0
 80143f4:	e023      	b.n	801443e <_dtoa_r+0x1c6>
 80143f6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80143f8:	4401      	add	r1, r0
 80143fa:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80143fe:	2b20      	cmp	r3, #32
 8014400:	bfc3      	ittte	gt
 8014402:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014406:	fa04 f303 	lslgt.w	r3, r4, r3
 801440a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 801440e:	f1c3 0320 	rsble	r3, r3, #32
 8014412:	bfc6      	itte	gt
 8014414:	fa28 f804 	lsrgt.w	r8, r8, r4
 8014418:	ea43 0308 	orrgt.w	r3, r3, r8
 801441c:	fa08 f303 	lslle.w	r3, r8, r3
 8014420:	ee07 3a90 	vmov	s15, r3
 8014424:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8014428:	3901      	subs	r1, #1
 801442a:	ed8d 7b00 	vstr	d7, [sp]
 801442e:	9c01      	ldr	r4, [sp, #4]
 8014430:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014434:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8014438:	2401      	movs	r4, #1
 801443a:	e7a0      	b.n	801437e <_dtoa_r+0x106>
 801443c:	2301      	movs	r3, #1
 801443e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014440:	1a43      	subs	r3, r0, r1
 8014442:	1e5a      	subs	r2, r3, #1
 8014444:	bf45      	ittet	mi
 8014446:	f1c3 0301 	rsbmi	r3, r3, #1
 801444a:	9305      	strmi	r3, [sp, #20]
 801444c:	2300      	movpl	r3, #0
 801444e:	2300      	movmi	r3, #0
 8014450:	9206      	str	r2, [sp, #24]
 8014452:	bf54      	ite	pl
 8014454:	9305      	strpl	r3, [sp, #20]
 8014456:	9306      	strmi	r3, [sp, #24]
 8014458:	f1bb 0f00 	cmp.w	fp, #0
 801445c:	db18      	blt.n	8014490 <_dtoa_r+0x218>
 801445e:	9b06      	ldr	r3, [sp, #24]
 8014460:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8014464:	445b      	add	r3, fp
 8014466:	9306      	str	r3, [sp, #24]
 8014468:	2300      	movs	r3, #0
 801446a:	9a07      	ldr	r2, [sp, #28]
 801446c:	2a09      	cmp	r2, #9
 801446e:	d849      	bhi.n	8014504 <_dtoa_r+0x28c>
 8014470:	2a05      	cmp	r2, #5
 8014472:	bfc4      	itt	gt
 8014474:	3a04      	subgt	r2, #4
 8014476:	9207      	strgt	r2, [sp, #28]
 8014478:	9a07      	ldr	r2, [sp, #28]
 801447a:	f1a2 0202 	sub.w	r2, r2, #2
 801447e:	bfcc      	ite	gt
 8014480:	2400      	movgt	r4, #0
 8014482:	2401      	movle	r4, #1
 8014484:	2a03      	cmp	r2, #3
 8014486:	d848      	bhi.n	801451a <_dtoa_r+0x2a2>
 8014488:	e8df f002 	tbb	[pc, r2]
 801448c:	3a2c2e0b 	.word	0x3a2c2e0b
 8014490:	9b05      	ldr	r3, [sp, #20]
 8014492:	2200      	movs	r2, #0
 8014494:	eba3 030b 	sub.w	r3, r3, fp
 8014498:	9305      	str	r3, [sp, #20]
 801449a:	920e      	str	r2, [sp, #56]	; 0x38
 801449c:	f1cb 0300 	rsb	r3, fp, #0
 80144a0:	e7e3      	b.n	801446a <_dtoa_r+0x1f2>
 80144a2:	2200      	movs	r2, #0
 80144a4:	9208      	str	r2, [sp, #32]
 80144a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80144a8:	2a00      	cmp	r2, #0
 80144aa:	dc39      	bgt.n	8014520 <_dtoa_r+0x2a8>
 80144ac:	f04f 0a01 	mov.w	sl, #1
 80144b0:	46d1      	mov	r9, sl
 80144b2:	4652      	mov	r2, sl
 80144b4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80144b8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80144ba:	2100      	movs	r1, #0
 80144bc:	6079      	str	r1, [r7, #4]
 80144be:	2004      	movs	r0, #4
 80144c0:	f100 0c14 	add.w	ip, r0, #20
 80144c4:	4594      	cmp	ip, r2
 80144c6:	6879      	ldr	r1, [r7, #4]
 80144c8:	d92f      	bls.n	801452a <_dtoa_r+0x2b2>
 80144ca:	4630      	mov	r0, r6
 80144cc:	930c      	str	r3, [sp, #48]	; 0x30
 80144ce:	f001 fa05 	bl	80158dc <_Balloc>
 80144d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80144d4:	9000      	str	r0, [sp, #0]
 80144d6:	4602      	mov	r2, r0
 80144d8:	2800      	cmp	r0, #0
 80144da:	d149      	bne.n	8014570 <_dtoa_r+0x2f8>
 80144dc:	4b23      	ldr	r3, [pc, #140]	; (801456c <_dtoa_r+0x2f4>)
 80144de:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80144e2:	e6df      	b.n	80142a4 <_dtoa_r+0x2c>
 80144e4:	2201      	movs	r2, #1
 80144e6:	e7dd      	b.n	80144a4 <_dtoa_r+0x22c>
 80144e8:	2200      	movs	r2, #0
 80144ea:	9208      	str	r2, [sp, #32]
 80144ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80144ee:	eb0b 0a02 	add.w	sl, fp, r2
 80144f2:	f10a 0901 	add.w	r9, sl, #1
 80144f6:	464a      	mov	r2, r9
 80144f8:	2a01      	cmp	r2, #1
 80144fa:	bfb8      	it	lt
 80144fc:	2201      	movlt	r2, #1
 80144fe:	e7db      	b.n	80144b8 <_dtoa_r+0x240>
 8014500:	2201      	movs	r2, #1
 8014502:	e7f2      	b.n	80144ea <_dtoa_r+0x272>
 8014504:	2401      	movs	r4, #1
 8014506:	2200      	movs	r2, #0
 8014508:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801450c:	f04f 3aff 	mov.w	sl, #4294967295
 8014510:	2100      	movs	r1, #0
 8014512:	46d1      	mov	r9, sl
 8014514:	2212      	movs	r2, #18
 8014516:	9109      	str	r1, [sp, #36]	; 0x24
 8014518:	e7ce      	b.n	80144b8 <_dtoa_r+0x240>
 801451a:	2201      	movs	r2, #1
 801451c:	9208      	str	r2, [sp, #32]
 801451e:	e7f5      	b.n	801450c <_dtoa_r+0x294>
 8014520:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8014524:	46d1      	mov	r9, sl
 8014526:	4652      	mov	r2, sl
 8014528:	e7c6      	b.n	80144b8 <_dtoa_r+0x240>
 801452a:	3101      	adds	r1, #1
 801452c:	6079      	str	r1, [r7, #4]
 801452e:	0040      	lsls	r0, r0, #1
 8014530:	e7c6      	b.n	80144c0 <_dtoa_r+0x248>
 8014532:	bf00      	nop
 8014534:	f3af 8000 	nop.w
 8014538:	636f4361 	.word	0x636f4361
 801453c:	3fd287a7 	.word	0x3fd287a7
 8014540:	8b60c8b3 	.word	0x8b60c8b3
 8014544:	3fc68a28 	.word	0x3fc68a28
 8014548:	509f79fb 	.word	0x509f79fb
 801454c:	3fd34413 	.word	0x3fd34413
 8014550:	08063436 	.word	0x08063436
 8014554:	0806344d 	.word	0x0806344d
 8014558:	7ff00000 	.word	0x7ff00000
 801455c:	08063432 	.word	0x08063432
 8014560:	08063429 	.word	0x08063429
 8014564:	080632aa 	.word	0x080632aa
 8014568:	08063628 	.word	0x08063628
 801456c:	080634ac 	.word	0x080634ac
 8014570:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8014572:	9900      	ldr	r1, [sp, #0]
 8014574:	6011      	str	r1, [r2, #0]
 8014576:	f1b9 0f0e 	cmp.w	r9, #14
 801457a:	d872      	bhi.n	8014662 <_dtoa_r+0x3ea>
 801457c:	2c00      	cmp	r4, #0
 801457e:	d070      	beq.n	8014662 <_dtoa_r+0x3ea>
 8014580:	f1bb 0f00 	cmp.w	fp, #0
 8014584:	f340 80a6 	ble.w	80146d4 <_dtoa_r+0x45c>
 8014588:	49ca      	ldr	r1, [pc, #808]	; (80148b4 <_dtoa_r+0x63c>)
 801458a:	f00b 020f 	and.w	r2, fp, #15
 801458e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8014592:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8014596:	ed92 7b00 	vldr	d7, [r2]
 801459a:	ea4f 112b 	mov.w	r1, fp, asr #4
 801459e:	f000 808d 	beq.w	80146bc <_dtoa_r+0x444>
 80145a2:	4ac5      	ldr	r2, [pc, #788]	; (80148b8 <_dtoa_r+0x640>)
 80145a4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80145a8:	ed92 6b08 	vldr	d6, [r2, #32]
 80145ac:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80145b0:	ed8d 6b02 	vstr	d6, [sp, #8]
 80145b4:	f001 010f 	and.w	r1, r1, #15
 80145b8:	2203      	movs	r2, #3
 80145ba:	48bf      	ldr	r0, [pc, #764]	; (80148b8 <_dtoa_r+0x640>)
 80145bc:	2900      	cmp	r1, #0
 80145be:	d17f      	bne.n	80146c0 <_dtoa_r+0x448>
 80145c0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80145c4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80145c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80145cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80145ce:	2900      	cmp	r1, #0
 80145d0:	f000 80b2 	beq.w	8014738 <_dtoa_r+0x4c0>
 80145d4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80145d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80145dc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80145e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145e4:	f140 80a8 	bpl.w	8014738 <_dtoa_r+0x4c0>
 80145e8:	f1b9 0f00 	cmp.w	r9, #0
 80145ec:	f000 80a4 	beq.w	8014738 <_dtoa_r+0x4c0>
 80145f0:	f1ba 0f00 	cmp.w	sl, #0
 80145f4:	dd31      	ble.n	801465a <_dtoa_r+0x3e2>
 80145f6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80145fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80145fe:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014602:	f10b 37ff 	add.w	r7, fp, #4294967295
 8014606:	3201      	adds	r2, #1
 8014608:	4650      	mov	r0, sl
 801460a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801460e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8014612:	ee07 2a90 	vmov	s15, r2
 8014616:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801461a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801461e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8014622:	9c03      	ldr	r4, [sp, #12]
 8014624:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8014628:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801462c:	2800      	cmp	r0, #0
 801462e:	f040 8086 	bne.w	801473e <_dtoa_r+0x4c6>
 8014632:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8014636:	ee36 6b47 	vsub.f64	d6, d6, d7
 801463a:	ec42 1b17 	vmov	d7, r1, r2
 801463e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014646:	f300 8272 	bgt.w	8014b2e <_dtoa_r+0x8b6>
 801464a:	eeb1 7b47 	vneg.f64	d7, d7
 801464e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014656:	f100 8267 	bmi.w	8014b28 <_dtoa_r+0x8b0>
 801465a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 801465e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8014662:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014664:	2a00      	cmp	r2, #0
 8014666:	f2c0 8129 	blt.w	80148bc <_dtoa_r+0x644>
 801466a:	f1bb 0f0e 	cmp.w	fp, #14
 801466e:	f300 8125 	bgt.w	80148bc <_dtoa_r+0x644>
 8014672:	4b90      	ldr	r3, [pc, #576]	; (80148b4 <_dtoa_r+0x63c>)
 8014674:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014678:	ed93 6b00 	vldr	d6, [r3]
 801467c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801467e:	2b00      	cmp	r3, #0
 8014680:	f280 80c3 	bge.w	801480a <_dtoa_r+0x592>
 8014684:	f1b9 0f00 	cmp.w	r9, #0
 8014688:	f300 80bf 	bgt.w	801480a <_dtoa_r+0x592>
 801468c:	f040 824c 	bne.w	8014b28 <_dtoa_r+0x8b0>
 8014690:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8014694:	ee26 6b07 	vmul.f64	d6, d6, d7
 8014698:	ed9d 7b02 	vldr	d7, [sp, #8]
 801469c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80146a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146a4:	464c      	mov	r4, r9
 80146a6:	464f      	mov	r7, r9
 80146a8:	f280 8222 	bge.w	8014af0 <_dtoa_r+0x878>
 80146ac:	f8dd 8000 	ldr.w	r8, [sp]
 80146b0:	2331      	movs	r3, #49	; 0x31
 80146b2:	f808 3b01 	strb.w	r3, [r8], #1
 80146b6:	f10b 0b01 	add.w	fp, fp, #1
 80146ba:	e21e      	b.n	8014afa <_dtoa_r+0x882>
 80146bc:	2202      	movs	r2, #2
 80146be:	e77c      	b.n	80145ba <_dtoa_r+0x342>
 80146c0:	07cc      	lsls	r4, r1, #31
 80146c2:	d504      	bpl.n	80146ce <_dtoa_r+0x456>
 80146c4:	ed90 6b00 	vldr	d6, [r0]
 80146c8:	3201      	adds	r2, #1
 80146ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 80146ce:	1049      	asrs	r1, r1, #1
 80146d0:	3008      	adds	r0, #8
 80146d2:	e773      	b.n	80145bc <_dtoa_r+0x344>
 80146d4:	d02e      	beq.n	8014734 <_dtoa_r+0x4bc>
 80146d6:	f1cb 0100 	rsb	r1, fp, #0
 80146da:	4a76      	ldr	r2, [pc, #472]	; (80148b4 <_dtoa_r+0x63c>)
 80146dc:	f001 000f 	and.w	r0, r1, #15
 80146e0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80146e4:	ed92 7b00 	vldr	d7, [r2]
 80146e8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80146ec:	ee26 7b07 	vmul.f64	d7, d6, d7
 80146f0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80146f4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80146f8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80146fc:	486e      	ldr	r0, [pc, #440]	; (80148b8 <_dtoa_r+0x640>)
 80146fe:	1109      	asrs	r1, r1, #4
 8014700:	2400      	movs	r4, #0
 8014702:	2202      	movs	r2, #2
 8014704:	b939      	cbnz	r1, 8014716 <_dtoa_r+0x49e>
 8014706:	2c00      	cmp	r4, #0
 8014708:	f43f af60 	beq.w	80145cc <_dtoa_r+0x354>
 801470c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014710:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014714:	e75a      	b.n	80145cc <_dtoa_r+0x354>
 8014716:	07cf      	lsls	r7, r1, #31
 8014718:	d509      	bpl.n	801472e <_dtoa_r+0x4b6>
 801471a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801471e:	ed90 7b00 	vldr	d7, [r0]
 8014722:	ee26 7b07 	vmul.f64	d7, d6, d7
 8014726:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801472a:	3201      	adds	r2, #1
 801472c:	2401      	movs	r4, #1
 801472e:	1049      	asrs	r1, r1, #1
 8014730:	3008      	adds	r0, #8
 8014732:	e7e7      	b.n	8014704 <_dtoa_r+0x48c>
 8014734:	2202      	movs	r2, #2
 8014736:	e749      	b.n	80145cc <_dtoa_r+0x354>
 8014738:	465f      	mov	r7, fp
 801473a:	4648      	mov	r0, r9
 801473c:	e765      	b.n	801460a <_dtoa_r+0x392>
 801473e:	ec42 1b17 	vmov	d7, r1, r2
 8014742:	4a5c      	ldr	r2, [pc, #368]	; (80148b4 <_dtoa_r+0x63c>)
 8014744:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8014748:	ed12 4b02 	vldr	d4, [r2, #-8]
 801474c:	9a00      	ldr	r2, [sp, #0]
 801474e:	1814      	adds	r4, r2, r0
 8014750:	9a08      	ldr	r2, [sp, #32]
 8014752:	b352      	cbz	r2, 80147aa <_dtoa_r+0x532>
 8014754:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8014758:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801475c:	f8dd 8000 	ldr.w	r8, [sp]
 8014760:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8014764:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8014768:	ee35 7b47 	vsub.f64	d7, d5, d7
 801476c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8014770:	ee14 2a90 	vmov	r2, s9
 8014774:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8014778:	3230      	adds	r2, #48	; 0x30
 801477a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801477e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014786:	f808 2b01 	strb.w	r2, [r8], #1
 801478a:	d439      	bmi.n	8014800 <_dtoa_r+0x588>
 801478c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8014790:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8014794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014798:	d472      	bmi.n	8014880 <_dtoa_r+0x608>
 801479a:	45a0      	cmp	r8, r4
 801479c:	f43f af5d 	beq.w	801465a <_dtoa_r+0x3e2>
 80147a0:	ee27 7b03 	vmul.f64	d7, d7, d3
 80147a4:	ee26 6b03 	vmul.f64	d6, d6, d3
 80147a8:	e7e0      	b.n	801476c <_dtoa_r+0x4f4>
 80147aa:	f8dd 8000 	ldr.w	r8, [sp]
 80147ae:	ee27 7b04 	vmul.f64	d7, d7, d4
 80147b2:	4621      	mov	r1, r4
 80147b4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80147b8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80147bc:	ee14 2a90 	vmov	r2, s9
 80147c0:	3230      	adds	r2, #48	; 0x30
 80147c2:	f808 2b01 	strb.w	r2, [r8], #1
 80147c6:	45a0      	cmp	r8, r4
 80147c8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80147cc:	ee36 6b45 	vsub.f64	d6, d6, d5
 80147d0:	d118      	bne.n	8014804 <_dtoa_r+0x58c>
 80147d2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80147d6:	ee37 4b05 	vadd.f64	d4, d7, d5
 80147da:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80147de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147e2:	dc4d      	bgt.n	8014880 <_dtoa_r+0x608>
 80147e4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80147e8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80147ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147f0:	f57f af33 	bpl.w	801465a <_dtoa_r+0x3e2>
 80147f4:	4688      	mov	r8, r1
 80147f6:	3901      	subs	r1, #1
 80147f8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80147fc:	2b30      	cmp	r3, #48	; 0x30
 80147fe:	d0f9      	beq.n	80147f4 <_dtoa_r+0x57c>
 8014800:	46bb      	mov	fp, r7
 8014802:	e02a      	b.n	801485a <_dtoa_r+0x5e2>
 8014804:	ee26 6b03 	vmul.f64	d6, d6, d3
 8014808:	e7d6      	b.n	80147b8 <_dtoa_r+0x540>
 801480a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801480e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8014812:	f8dd 8000 	ldr.w	r8, [sp]
 8014816:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801481a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801481e:	ee15 3a10 	vmov	r3, s10
 8014822:	3330      	adds	r3, #48	; 0x30
 8014824:	f808 3b01 	strb.w	r3, [r8], #1
 8014828:	9b00      	ldr	r3, [sp, #0]
 801482a:	eba8 0303 	sub.w	r3, r8, r3
 801482e:	4599      	cmp	r9, r3
 8014830:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8014834:	eea3 7b46 	vfms.f64	d7, d3, d6
 8014838:	d133      	bne.n	80148a2 <_dtoa_r+0x62a>
 801483a:	ee37 7b07 	vadd.f64	d7, d7, d7
 801483e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014846:	dc1a      	bgt.n	801487e <_dtoa_r+0x606>
 8014848:	eeb4 7b46 	vcmp.f64	d7, d6
 801484c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014850:	d103      	bne.n	801485a <_dtoa_r+0x5e2>
 8014852:	ee15 3a10 	vmov	r3, s10
 8014856:	07d9      	lsls	r1, r3, #31
 8014858:	d411      	bmi.n	801487e <_dtoa_r+0x606>
 801485a:	4629      	mov	r1, r5
 801485c:	4630      	mov	r0, r6
 801485e:	f001 f87d 	bl	801595c <_Bfree>
 8014862:	2300      	movs	r3, #0
 8014864:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014866:	f888 3000 	strb.w	r3, [r8]
 801486a:	f10b 0301 	add.w	r3, fp, #1
 801486e:	6013      	str	r3, [r2, #0]
 8014870:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014872:	2b00      	cmp	r3, #0
 8014874:	f43f ad4d 	beq.w	8014312 <_dtoa_r+0x9a>
 8014878:	f8c3 8000 	str.w	r8, [r3]
 801487c:	e549      	b.n	8014312 <_dtoa_r+0x9a>
 801487e:	465f      	mov	r7, fp
 8014880:	4643      	mov	r3, r8
 8014882:	4698      	mov	r8, r3
 8014884:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014888:	2a39      	cmp	r2, #57	; 0x39
 801488a:	d106      	bne.n	801489a <_dtoa_r+0x622>
 801488c:	9a00      	ldr	r2, [sp, #0]
 801488e:	429a      	cmp	r2, r3
 8014890:	d1f7      	bne.n	8014882 <_dtoa_r+0x60a>
 8014892:	9900      	ldr	r1, [sp, #0]
 8014894:	2230      	movs	r2, #48	; 0x30
 8014896:	3701      	adds	r7, #1
 8014898:	700a      	strb	r2, [r1, #0]
 801489a:	781a      	ldrb	r2, [r3, #0]
 801489c:	3201      	adds	r2, #1
 801489e:	701a      	strb	r2, [r3, #0]
 80148a0:	e7ae      	b.n	8014800 <_dtoa_r+0x588>
 80148a2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80148a6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80148aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148ae:	d1b2      	bne.n	8014816 <_dtoa_r+0x59e>
 80148b0:	e7d3      	b.n	801485a <_dtoa_r+0x5e2>
 80148b2:	bf00      	nop
 80148b4:	08063628 	.word	0x08063628
 80148b8:	08063600 	.word	0x08063600
 80148bc:	9908      	ldr	r1, [sp, #32]
 80148be:	2900      	cmp	r1, #0
 80148c0:	f000 80d1 	beq.w	8014a66 <_dtoa_r+0x7ee>
 80148c4:	9907      	ldr	r1, [sp, #28]
 80148c6:	2901      	cmp	r1, #1
 80148c8:	f300 80b4 	bgt.w	8014a34 <_dtoa_r+0x7bc>
 80148cc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80148ce:	2900      	cmp	r1, #0
 80148d0:	f000 80ac 	beq.w	8014a2c <_dtoa_r+0x7b4>
 80148d4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80148d8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80148dc:	461c      	mov	r4, r3
 80148de:	930a      	str	r3, [sp, #40]	; 0x28
 80148e0:	9b05      	ldr	r3, [sp, #20]
 80148e2:	4413      	add	r3, r2
 80148e4:	9305      	str	r3, [sp, #20]
 80148e6:	9b06      	ldr	r3, [sp, #24]
 80148e8:	2101      	movs	r1, #1
 80148ea:	4413      	add	r3, r2
 80148ec:	4630      	mov	r0, r6
 80148ee:	9306      	str	r3, [sp, #24]
 80148f0:	f001 f93a 	bl	8015b68 <__i2b>
 80148f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80148f6:	4607      	mov	r7, r0
 80148f8:	f1b8 0f00 	cmp.w	r8, #0
 80148fc:	dd0d      	ble.n	801491a <_dtoa_r+0x6a2>
 80148fe:	9a06      	ldr	r2, [sp, #24]
 8014900:	2a00      	cmp	r2, #0
 8014902:	dd0a      	ble.n	801491a <_dtoa_r+0x6a2>
 8014904:	4542      	cmp	r2, r8
 8014906:	9905      	ldr	r1, [sp, #20]
 8014908:	bfa8      	it	ge
 801490a:	4642      	movge	r2, r8
 801490c:	1a89      	subs	r1, r1, r2
 801490e:	9105      	str	r1, [sp, #20]
 8014910:	9906      	ldr	r1, [sp, #24]
 8014912:	eba8 0802 	sub.w	r8, r8, r2
 8014916:	1a8a      	subs	r2, r1, r2
 8014918:	9206      	str	r2, [sp, #24]
 801491a:	b303      	cbz	r3, 801495e <_dtoa_r+0x6e6>
 801491c:	9a08      	ldr	r2, [sp, #32]
 801491e:	2a00      	cmp	r2, #0
 8014920:	f000 80a6 	beq.w	8014a70 <_dtoa_r+0x7f8>
 8014924:	2c00      	cmp	r4, #0
 8014926:	dd13      	ble.n	8014950 <_dtoa_r+0x6d8>
 8014928:	4639      	mov	r1, r7
 801492a:	4622      	mov	r2, r4
 801492c:	4630      	mov	r0, r6
 801492e:	930c      	str	r3, [sp, #48]	; 0x30
 8014930:	f001 f9d6 	bl	8015ce0 <__pow5mult>
 8014934:	462a      	mov	r2, r5
 8014936:	4601      	mov	r1, r0
 8014938:	4607      	mov	r7, r0
 801493a:	4630      	mov	r0, r6
 801493c:	f001 f92a 	bl	8015b94 <__multiply>
 8014940:	4629      	mov	r1, r5
 8014942:	900a      	str	r0, [sp, #40]	; 0x28
 8014944:	4630      	mov	r0, r6
 8014946:	f001 f809 	bl	801595c <_Bfree>
 801494a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801494c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801494e:	4615      	mov	r5, r2
 8014950:	1b1a      	subs	r2, r3, r4
 8014952:	d004      	beq.n	801495e <_dtoa_r+0x6e6>
 8014954:	4629      	mov	r1, r5
 8014956:	4630      	mov	r0, r6
 8014958:	f001 f9c2 	bl	8015ce0 <__pow5mult>
 801495c:	4605      	mov	r5, r0
 801495e:	2101      	movs	r1, #1
 8014960:	4630      	mov	r0, r6
 8014962:	f001 f901 	bl	8015b68 <__i2b>
 8014966:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014968:	2b00      	cmp	r3, #0
 801496a:	4604      	mov	r4, r0
 801496c:	f340 8082 	ble.w	8014a74 <_dtoa_r+0x7fc>
 8014970:	461a      	mov	r2, r3
 8014972:	4601      	mov	r1, r0
 8014974:	4630      	mov	r0, r6
 8014976:	f001 f9b3 	bl	8015ce0 <__pow5mult>
 801497a:	9b07      	ldr	r3, [sp, #28]
 801497c:	2b01      	cmp	r3, #1
 801497e:	4604      	mov	r4, r0
 8014980:	dd7b      	ble.n	8014a7a <_dtoa_r+0x802>
 8014982:	2300      	movs	r3, #0
 8014984:	930a      	str	r3, [sp, #40]	; 0x28
 8014986:	6922      	ldr	r2, [r4, #16]
 8014988:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801498c:	6910      	ldr	r0, [r2, #16]
 801498e:	f001 f89b 	bl	8015ac8 <__hi0bits>
 8014992:	f1c0 0020 	rsb	r0, r0, #32
 8014996:	9b06      	ldr	r3, [sp, #24]
 8014998:	4418      	add	r0, r3
 801499a:	f010 001f 	ands.w	r0, r0, #31
 801499e:	f000 808d 	beq.w	8014abc <_dtoa_r+0x844>
 80149a2:	f1c0 0220 	rsb	r2, r0, #32
 80149a6:	2a04      	cmp	r2, #4
 80149a8:	f340 8086 	ble.w	8014ab8 <_dtoa_r+0x840>
 80149ac:	f1c0 001c 	rsb	r0, r0, #28
 80149b0:	9b05      	ldr	r3, [sp, #20]
 80149b2:	4403      	add	r3, r0
 80149b4:	9305      	str	r3, [sp, #20]
 80149b6:	9b06      	ldr	r3, [sp, #24]
 80149b8:	4403      	add	r3, r0
 80149ba:	4480      	add	r8, r0
 80149bc:	9306      	str	r3, [sp, #24]
 80149be:	9b05      	ldr	r3, [sp, #20]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	dd05      	ble.n	80149d0 <_dtoa_r+0x758>
 80149c4:	4629      	mov	r1, r5
 80149c6:	461a      	mov	r2, r3
 80149c8:	4630      	mov	r0, r6
 80149ca:	f001 f9e3 	bl	8015d94 <__lshift>
 80149ce:	4605      	mov	r5, r0
 80149d0:	9b06      	ldr	r3, [sp, #24]
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	dd05      	ble.n	80149e2 <_dtoa_r+0x76a>
 80149d6:	4621      	mov	r1, r4
 80149d8:	461a      	mov	r2, r3
 80149da:	4630      	mov	r0, r6
 80149dc:	f001 f9da 	bl	8015d94 <__lshift>
 80149e0:	4604      	mov	r4, r0
 80149e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d06b      	beq.n	8014ac0 <_dtoa_r+0x848>
 80149e8:	4621      	mov	r1, r4
 80149ea:	4628      	mov	r0, r5
 80149ec:	f001 fa3e 	bl	8015e6c <__mcmp>
 80149f0:	2800      	cmp	r0, #0
 80149f2:	da65      	bge.n	8014ac0 <_dtoa_r+0x848>
 80149f4:	2300      	movs	r3, #0
 80149f6:	4629      	mov	r1, r5
 80149f8:	220a      	movs	r2, #10
 80149fa:	4630      	mov	r0, r6
 80149fc:	f000 ffd0 	bl	80159a0 <__multadd>
 8014a00:	9b08      	ldr	r3, [sp, #32]
 8014a02:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014a06:	4605      	mov	r5, r0
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	f000 8192 	beq.w	8014d32 <_dtoa_r+0xaba>
 8014a0e:	4639      	mov	r1, r7
 8014a10:	2300      	movs	r3, #0
 8014a12:	220a      	movs	r2, #10
 8014a14:	4630      	mov	r0, r6
 8014a16:	f000 ffc3 	bl	80159a0 <__multadd>
 8014a1a:	f1ba 0f00 	cmp.w	sl, #0
 8014a1e:	4607      	mov	r7, r0
 8014a20:	f300 808e 	bgt.w	8014b40 <_dtoa_r+0x8c8>
 8014a24:	9b07      	ldr	r3, [sp, #28]
 8014a26:	2b02      	cmp	r3, #2
 8014a28:	dc51      	bgt.n	8014ace <_dtoa_r+0x856>
 8014a2a:	e089      	b.n	8014b40 <_dtoa_r+0x8c8>
 8014a2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014a2e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8014a32:	e751      	b.n	80148d8 <_dtoa_r+0x660>
 8014a34:	f109 34ff 	add.w	r4, r9, #4294967295
 8014a38:	42a3      	cmp	r3, r4
 8014a3a:	bfbf      	itttt	lt
 8014a3c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8014a3e:	1ae3      	sublt	r3, r4, r3
 8014a40:	18d2      	addlt	r2, r2, r3
 8014a42:	4613      	movlt	r3, r2
 8014a44:	bfb7      	itett	lt
 8014a46:	930e      	strlt	r3, [sp, #56]	; 0x38
 8014a48:	1b1c      	subge	r4, r3, r4
 8014a4a:	4623      	movlt	r3, r4
 8014a4c:	2400      	movlt	r4, #0
 8014a4e:	f1b9 0f00 	cmp.w	r9, #0
 8014a52:	bfb5      	itete	lt
 8014a54:	9a05      	ldrlt	r2, [sp, #20]
 8014a56:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8014a5a:	eba2 0809 	sublt.w	r8, r2, r9
 8014a5e:	464a      	movge	r2, r9
 8014a60:	bfb8      	it	lt
 8014a62:	2200      	movlt	r2, #0
 8014a64:	e73b      	b.n	80148de <_dtoa_r+0x666>
 8014a66:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8014a6a:	9f08      	ldr	r7, [sp, #32]
 8014a6c:	461c      	mov	r4, r3
 8014a6e:	e743      	b.n	80148f8 <_dtoa_r+0x680>
 8014a70:	461a      	mov	r2, r3
 8014a72:	e76f      	b.n	8014954 <_dtoa_r+0x6dc>
 8014a74:	9b07      	ldr	r3, [sp, #28]
 8014a76:	2b01      	cmp	r3, #1
 8014a78:	dc18      	bgt.n	8014aac <_dtoa_r+0x834>
 8014a7a:	9b02      	ldr	r3, [sp, #8]
 8014a7c:	b9b3      	cbnz	r3, 8014aac <_dtoa_r+0x834>
 8014a7e:	9b03      	ldr	r3, [sp, #12]
 8014a80:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8014a84:	b9a2      	cbnz	r2, 8014ab0 <_dtoa_r+0x838>
 8014a86:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8014a8a:	0d12      	lsrs	r2, r2, #20
 8014a8c:	0512      	lsls	r2, r2, #20
 8014a8e:	b18a      	cbz	r2, 8014ab4 <_dtoa_r+0x83c>
 8014a90:	9b05      	ldr	r3, [sp, #20]
 8014a92:	3301      	adds	r3, #1
 8014a94:	9305      	str	r3, [sp, #20]
 8014a96:	9b06      	ldr	r3, [sp, #24]
 8014a98:	3301      	adds	r3, #1
 8014a9a:	9306      	str	r3, [sp, #24]
 8014a9c:	2301      	movs	r3, #1
 8014a9e:	930a      	str	r3, [sp, #40]	; 0x28
 8014aa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	f47f af6f 	bne.w	8014986 <_dtoa_r+0x70e>
 8014aa8:	2001      	movs	r0, #1
 8014aaa:	e774      	b.n	8014996 <_dtoa_r+0x71e>
 8014aac:	2300      	movs	r3, #0
 8014aae:	e7f6      	b.n	8014a9e <_dtoa_r+0x826>
 8014ab0:	9b02      	ldr	r3, [sp, #8]
 8014ab2:	e7f4      	b.n	8014a9e <_dtoa_r+0x826>
 8014ab4:	920a      	str	r2, [sp, #40]	; 0x28
 8014ab6:	e7f3      	b.n	8014aa0 <_dtoa_r+0x828>
 8014ab8:	d081      	beq.n	80149be <_dtoa_r+0x746>
 8014aba:	4610      	mov	r0, r2
 8014abc:	301c      	adds	r0, #28
 8014abe:	e777      	b.n	80149b0 <_dtoa_r+0x738>
 8014ac0:	f1b9 0f00 	cmp.w	r9, #0
 8014ac4:	dc37      	bgt.n	8014b36 <_dtoa_r+0x8be>
 8014ac6:	9b07      	ldr	r3, [sp, #28]
 8014ac8:	2b02      	cmp	r3, #2
 8014aca:	dd34      	ble.n	8014b36 <_dtoa_r+0x8be>
 8014acc:	46ca      	mov	sl, r9
 8014ace:	f1ba 0f00 	cmp.w	sl, #0
 8014ad2:	d10d      	bne.n	8014af0 <_dtoa_r+0x878>
 8014ad4:	4621      	mov	r1, r4
 8014ad6:	4653      	mov	r3, sl
 8014ad8:	2205      	movs	r2, #5
 8014ada:	4630      	mov	r0, r6
 8014adc:	f000 ff60 	bl	80159a0 <__multadd>
 8014ae0:	4601      	mov	r1, r0
 8014ae2:	4604      	mov	r4, r0
 8014ae4:	4628      	mov	r0, r5
 8014ae6:	f001 f9c1 	bl	8015e6c <__mcmp>
 8014aea:	2800      	cmp	r0, #0
 8014aec:	f73f adde 	bgt.w	80146ac <_dtoa_r+0x434>
 8014af0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014af2:	f8dd 8000 	ldr.w	r8, [sp]
 8014af6:	ea6f 0b03 	mvn.w	fp, r3
 8014afa:	f04f 0900 	mov.w	r9, #0
 8014afe:	4621      	mov	r1, r4
 8014b00:	4630      	mov	r0, r6
 8014b02:	f000 ff2b 	bl	801595c <_Bfree>
 8014b06:	2f00      	cmp	r7, #0
 8014b08:	f43f aea7 	beq.w	801485a <_dtoa_r+0x5e2>
 8014b0c:	f1b9 0f00 	cmp.w	r9, #0
 8014b10:	d005      	beq.n	8014b1e <_dtoa_r+0x8a6>
 8014b12:	45b9      	cmp	r9, r7
 8014b14:	d003      	beq.n	8014b1e <_dtoa_r+0x8a6>
 8014b16:	4649      	mov	r1, r9
 8014b18:	4630      	mov	r0, r6
 8014b1a:	f000 ff1f 	bl	801595c <_Bfree>
 8014b1e:	4639      	mov	r1, r7
 8014b20:	4630      	mov	r0, r6
 8014b22:	f000 ff1b 	bl	801595c <_Bfree>
 8014b26:	e698      	b.n	801485a <_dtoa_r+0x5e2>
 8014b28:	2400      	movs	r4, #0
 8014b2a:	4627      	mov	r7, r4
 8014b2c:	e7e0      	b.n	8014af0 <_dtoa_r+0x878>
 8014b2e:	46bb      	mov	fp, r7
 8014b30:	4604      	mov	r4, r0
 8014b32:	4607      	mov	r7, r0
 8014b34:	e5ba      	b.n	80146ac <_dtoa_r+0x434>
 8014b36:	9b08      	ldr	r3, [sp, #32]
 8014b38:	46ca      	mov	sl, r9
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	f000 8100 	beq.w	8014d40 <_dtoa_r+0xac8>
 8014b40:	f1b8 0f00 	cmp.w	r8, #0
 8014b44:	dd05      	ble.n	8014b52 <_dtoa_r+0x8da>
 8014b46:	4639      	mov	r1, r7
 8014b48:	4642      	mov	r2, r8
 8014b4a:	4630      	mov	r0, r6
 8014b4c:	f001 f922 	bl	8015d94 <__lshift>
 8014b50:	4607      	mov	r7, r0
 8014b52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d05d      	beq.n	8014c14 <_dtoa_r+0x99c>
 8014b58:	6879      	ldr	r1, [r7, #4]
 8014b5a:	4630      	mov	r0, r6
 8014b5c:	f000 febe 	bl	80158dc <_Balloc>
 8014b60:	4680      	mov	r8, r0
 8014b62:	b928      	cbnz	r0, 8014b70 <_dtoa_r+0x8f8>
 8014b64:	4b82      	ldr	r3, [pc, #520]	; (8014d70 <_dtoa_r+0xaf8>)
 8014b66:	4602      	mov	r2, r0
 8014b68:	f240 21ea 	movw	r1, #746	; 0x2ea
 8014b6c:	f7ff bb9a 	b.w	80142a4 <_dtoa_r+0x2c>
 8014b70:	693a      	ldr	r2, [r7, #16]
 8014b72:	3202      	adds	r2, #2
 8014b74:	0092      	lsls	r2, r2, #2
 8014b76:	f107 010c 	add.w	r1, r7, #12
 8014b7a:	300c      	adds	r0, #12
 8014b7c:	f7fd fa46 	bl	801200c <memcpy>
 8014b80:	2201      	movs	r2, #1
 8014b82:	4641      	mov	r1, r8
 8014b84:	4630      	mov	r0, r6
 8014b86:	f001 f905 	bl	8015d94 <__lshift>
 8014b8a:	9b00      	ldr	r3, [sp, #0]
 8014b8c:	3301      	adds	r3, #1
 8014b8e:	9305      	str	r3, [sp, #20]
 8014b90:	9b00      	ldr	r3, [sp, #0]
 8014b92:	4453      	add	r3, sl
 8014b94:	9309      	str	r3, [sp, #36]	; 0x24
 8014b96:	9b02      	ldr	r3, [sp, #8]
 8014b98:	f003 0301 	and.w	r3, r3, #1
 8014b9c:	46b9      	mov	r9, r7
 8014b9e:	9308      	str	r3, [sp, #32]
 8014ba0:	4607      	mov	r7, r0
 8014ba2:	9b05      	ldr	r3, [sp, #20]
 8014ba4:	4621      	mov	r1, r4
 8014ba6:	3b01      	subs	r3, #1
 8014ba8:	4628      	mov	r0, r5
 8014baa:	9302      	str	r3, [sp, #8]
 8014bac:	f7ff fad9 	bl	8014162 <quorem>
 8014bb0:	4603      	mov	r3, r0
 8014bb2:	3330      	adds	r3, #48	; 0x30
 8014bb4:	9006      	str	r0, [sp, #24]
 8014bb6:	4649      	mov	r1, r9
 8014bb8:	4628      	mov	r0, r5
 8014bba:	930a      	str	r3, [sp, #40]	; 0x28
 8014bbc:	f001 f956 	bl	8015e6c <__mcmp>
 8014bc0:	463a      	mov	r2, r7
 8014bc2:	4682      	mov	sl, r0
 8014bc4:	4621      	mov	r1, r4
 8014bc6:	4630      	mov	r0, r6
 8014bc8:	f001 f96c 	bl	8015ea4 <__mdiff>
 8014bcc:	68c2      	ldr	r2, [r0, #12]
 8014bce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014bd0:	4680      	mov	r8, r0
 8014bd2:	bb0a      	cbnz	r2, 8014c18 <_dtoa_r+0x9a0>
 8014bd4:	4601      	mov	r1, r0
 8014bd6:	4628      	mov	r0, r5
 8014bd8:	f001 f948 	bl	8015e6c <__mcmp>
 8014bdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014bde:	4602      	mov	r2, r0
 8014be0:	4641      	mov	r1, r8
 8014be2:	4630      	mov	r0, r6
 8014be4:	920e      	str	r2, [sp, #56]	; 0x38
 8014be6:	930a      	str	r3, [sp, #40]	; 0x28
 8014be8:	f000 feb8 	bl	801595c <_Bfree>
 8014bec:	9b07      	ldr	r3, [sp, #28]
 8014bee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014bf0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8014bf4:	ea43 0102 	orr.w	r1, r3, r2
 8014bf8:	9b08      	ldr	r3, [sp, #32]
 8014bfa:	430b      	orrs	r3, r1
 8014bfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014bfe:	d10d      	bne.n	8014c1c <_dtoa_r+0x9a4>
 8014c00:	2b39      	cmp	r3, #57	; 0x39
 8014c02:	d029      	beq.n	8014c58 <_dtoa_r+0x9e0>
 8014c04:	f1ba 0f00 	cmp.w	sl, #0
 8014c08:	dd01      	ble.n	8014c0e <_dtoa_r+0x996>
 8014c0a:	9b06      	ldr	r3, [sp, #24]
 8014c0c:	3331      	adds	r3, #49	; 0x31
 8014c0e:	9a02      	ldr	r2, [sp, #8]
 8014c10:	7013      	strb	r3, [r2, #0]
 8014c12:	e774      	b.n	8014afe <_dtoa_r+0x886>
 8014c14:	4638      	mov	r0, r7
 8014c16:	e7b8      	b.n	8014b8a <_dtoa_r+0x912>
 8014c18:	2201      	movs	r2, #1
 8014c1a:	e7e1      	b.n	8014be0 <_dtoa_r+0x968>
 8014c1c:	f1ba 0f00 	cmp.w	sl, #0
 8014c20:	db06      	blt.n	8014c30 <_dtoa_r+0x9b8>
 8014c22:	9907      	ldr	r1, [sp, #28]
 8014c24:	ea41 0a0a 	orr.w	sl, r1, sl
 8014c28:	9908      	ldr	r1, [sp, #32]
 8014c2a:	ea5a 0101 	orrs.w	r1, sl, r1
 8014c2e:	d120      	bne.n	8014c72 <_dtoa_r+0x9fa>
 8014c30:	2a00      	cmp	r2, #0
 8014c32:	ddec      	ble.n	8014c0e <_dtoa_r+0x996>
 8014c34:	4629      	mov	r1, r5
 8014c36:	2201      	movs	r2, #1
 8014c38:	4630      	mov	r0, r6
 8014c3a:	9305      	str	r3, [sp, #20]
 8014c3c:	f001 f8aa 	bl	8015d94 <__lshift>
 8014c40:	4621      	mov	r1, r4
 8014c42:	4605      	mov	r5, r0
 8014c44:	f001 f912 	bl	8015e6c <__mcmp>
 8014c48:	2800      	cmp	r0, #0
 8014c4a:	9b05      	ldr	r3, [sp, #20]
 8014c4c:	dc02      	bgt.n	8014c54 <_dtoa_r+0x9dc>
 8014c4e:	d1de      	bne.n	8014c0e <_dtoa_r+0x996>
 8014c50:	07da      	lsls	r2, r3, #31
 8014c52:	d5dc      	bpl.n	8014c0e <_dtoa_r+0x996>
 8014c54:	2b39      	cmp	r3, #57	; 0x39
 8014c56:	d1d8      	bne.n	8014c0a <_dtoa_r+0x992>
 8014c58:	9a02      	ldr	r2, [sp, #8]
 8014c5a:	2339      	movs	r3, #57	; 0x39
 8014c5c:	7013      	strb	r3, [r2, #0]
 8014c5e:	4643      	mov	r3, r8
 8014c60:	4698      	mov	r8, r3
 8014c62:	3b01      	subs	r3, #1
 8014c64:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8014c68:	2a39      	cmp	r2, #57	; 0x39
 8014c6a:	d051      	beq.n	8014d10 <_dtoa_r+0xa98>
 8014c6c:	3201      	adds	r2, #1
 8014c6e:	701a      	strb	r2, [r3, #0]
 8014c70:	e745      	b.n	8014afe <_dtoa_r+0x886>
 8014c72:	2a00      	cmp	r2, #0
 8014c74:	dd03      	ble.n	8014c7e <_dtoa_r+0xa06>
 8014c76:	2b39      	cmp	r3, #57	; 0x39
 8014c78:	d0ee      	beq.n	8014c58 <_dtoa_r+0x9e0>
 8014c7a:	3301      	adds	r3, #1
 8014c7c:	e7c7      	b.n	8014c0e <_dtoa_r+0x996>
 8014c7e:	9a05      	ldr	r2, [sp, #20]
 8014c80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014c82:	f802 3c01 	strb.w	r3, [r2, #-1]
 8014c86:	428a      	cmp	r2, r1
 8014c88:	d02b      	beq.n	8014ce2 <_dtoa_r+0xa6a>
 8014c8a:	4629      	mov	r1, r5
 8014c8c:	2300      	movs	r3, #0
 8014c8e:	220a      	movs	r2, #10
 8014c90:	4630      	mov	r0, r6
 8014c92:	f000 fe85 	bl	80159a0 <__multadd>
 8014c96:	45b9      	cmp	r9, r7
 8014c98:	4605      	mov	r5, r0
 8014c9a:	f04f 0300 	mov.w	r3, #0
 8014c9e:	f04f 020a 	mov.w	r2, #10
 8014ca2:	4649      	mov	r1, r9
 8014ca4:	4630      	mov	r0, r6
 8014ca6:	d107      	bne.n	8014cb8 <_dtoa_r+0xa40>
 8014ca8:	f000 fe7a 	bl	80159a0 <__multadd>
 8014cac:	4681      	mov	r9, r0
 8014cae:	4607      	mov	r7, r0
 8014cb0:	9b05      	ldr	r3, [sp, #20]
 8014cb2:	3301      	adds	r3, #1
 8014cb4:	9305      	str	r3, [sp, #20]
 8014cb6:	e774      	b.n	8014ba2 <_dtoa_r+0x92a>
 8014cb8:	f000 fe72 	bl	80159a0 <__multadd>
 8014cbc:	4639      	mov	r1, r7
 8014cbe:	4681      	mov	r9, r0
 8014cc0:	2300      	movs	r3, #0
 8014cc2:	220a      	movs	r2, #10
 8014cc4:	4630      	mov	r0, r6
 8014cc6:	f000 fe6b 	bl	80159a0 <__multadd>
 8014cca:	4607      	mov	r7, r0
 8014ccc:	e7f0      	b.n	8014cb0 <_dtoa_r+0xa38>
 8014cce:	f1ba 0f00 	cmp.w	sl, #0
 8014cd2:	9a00      	ldr	r2, [sp, #0]
 8014cd4:	bfcc      	ite	gt
 8014cd6:	46d0      	movgt	r8, sl
 8014cd8:	f04f 0801 	movle.w	r8, #1
 8014cdc:	4490      	add	r8, r2
 8014cde:	f04f 0900 	mov.w	r9, #0
 8014ce2:	4629      	mov	r1, r5
 8014ce4:	2201      	movs	r2, #1
 8014ce6:	4630      	mov	r0, r6
 8014ce8:	9302      	str	r3, [sp, #8]
 8014cea:	f001 f853 	bl	8015d94 <__lshift>
 8014cee:	4621      	mov	r1, r4
 8014cf0:	4605      	mov	r5, r0
 8014cf2:	f001 f8bb 	bl	8015e6c <__mcmp>
 8014cf6:	2800      	cmp	r0, #0
 8014cf8:	dcb1      	bgt.n	8014c5e <_dtoa_r+0x9e6>
 8014cfa:	d102      	bne.n	8014d02 <_dtoa_r+0xa8a>
 8014cfc:	9b02      	ldr	r3, [sp, #8]
 8014cfe:	07db      	lsls	r3, r3, #31
 8014d00:	d4ad      	bmi.n	8014c5e <_dtoa_r+0x9e6>
 8014d02:	4643      	mov	r3, r8
 8014d04:	4698      	mov	r8, r3
 8014d06:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014d0a:	2a30      	cmp	r2, #48	; 0x30
 8014d0c:	d0fa      	beq.n	8014d04 <_dtoa_r+0xa8c>
 8014d0e:	e6f6      	b.n	8014afe <_dtoa_r+0x886>
 8014d10:	9a00      	ldr	r2, [sp, #0]
 8014d12:	429a      	cmp	r2, r3
 8014d14:	d1a4      	bne.n	8014c60 <_dtoa_r+0x9e8>
 8014d16:	f10b 0b01 	add.w	fp, fp, #1
 8014d1a:	2331      	movs	r3, #49	; 0x31
 8014d1c:	e778      	b.n	8014c10 <_dtoa_r+0x998>
 8014d1e:	4b15      	ldr	r3, [pc, #84]	; (8014d74 <_dtoa_r+0xafc>)
 8014d20:	f7ff bb12 	b.w	8014348 <_dtoa_r+0xd0>
 8014d24:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	f47f aaee 	bne.w	8014308 <_dtoa_r+0x90>
 8014d2c:	4b12      	ldr	r3, [pc, #72]	; (8014d78 <_dtoa_r+0xb00>)
 8014d2e:	f7ff bb0b 	b.w	8014348 <_dtoa_r+0xd0>
 8014d32:	f1ba 0f00 	cmp.w	sl, #0
 8014d36:	dc03      	bgt.n	8014d40 <_dtoa_r+0xac8>
 8014d38:	9b07      	ldr	r3, [sp, #28]
 8014d3a:	2b02      	cmp	r3, #2
 8014d3c:	f73f aec7 	bgt.w	8014ace <_dtoa_r+0x856>
 8014d40:	f8dd 8000 	ldr.w	r8, [sp]
 8014d44:	4621      	mov	r1, r4
 8014d46:	4628      	mov	r0, r5
 8014d48:	f7ff fa0b 	bl	8014162 <quorem>
 8014d4c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8014d50:	f808 3b01 	strb.w	r3, [r8], #1
 8014d54:	9a00      	ldr	r2, [sp, #0]
 8014d56:	eba8 0202 	sub.w	r2, r8, r2
 8014d5a:	4592      	cmp	sl, r2
 8014d5c:	ddb7      	ble.n	8014cce <_dtoa_r+0xa56>
 8014d5e:	4629      	mov	r1, r5
 8014d60:	2300      	movs	r3, #0
 8014d62:	220a      	movs	r2, #10
 8014d64:	4630      	mov	r0, r6
 8014d66:	f000 fe1b 	bl	80159a0 <__multadd>
 8014d6a:	4605      	mov	r5, r0
 8014d6c:	e7ea      	b.n	8014d44 <_dtoa_r+0xacc>
 8014d6e:	bf00      	nop
 8014d70:	080634ac 	.word	0x080634ac
 8014d74:	080632a9 	.word	0x080632a9
 8014d78:	08063429 	.word	0x08063429

08014d7c <__sflush_r>:
 8014d7c:	898a      	ldrh	r2, [r1, #12]
 8014d7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d82:	4605      	mov	r5, r0
 8014d84:	0710      	lsls	r0, r2, #28
 8014d86:	460c      	mov	r4, r1
 8014d88:	d458      	bmi.n	8014e3c <__sflush_r+0xc0>
 8014d8a:	684b      	ldr	r3, [r1, #4]
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	dc05      	bgt.n	8014d9c <__sflush_r+0x20>
 8014d90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	dc02      	bgt.n	8014d9c <__sflush_r+0x20>
 8014d96:	2000      	movs	r0, #0
 8014d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014d9e:	2e00      	cmp	r6, #0
 8014da0:	d0f9      	beq.n	8014d96 <__sflush_r+0x1a>
 8014da2:	2300      	movs	r3, #0
 8014da4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014da8:	682f      	ldr	r7, [r5, #0]
 8014daa:	602b      	str	r3, [r5, #0]
 8014dac:	d032      	beq.n	8014e14 <__sflush_r+0x98>
 8014dae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014db0:	89a3      	ldrh	r3, [r4, #12]
 8014db2:	075a      	lsls	r2, r3, #29
 8014db4:	d505      	bpl.n	8014dc2 <__sflush_r+0x46>
 8014db6:	6863      	ldr	r3, [r4, #4]
 8014db8:	1ac0      	subs	r0, r0, r3
 8014dba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014dbc:	b10b      	cbz	r3, 8014dc2 <__sflush_r+0x46>
 8014dbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014dc0:	1ac0      	subs	r0, r0, r3
 8014dc2:	2300      	movs	r3, #0
 8014dc4:	4602      	mov	r2, r0
 8014dc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014dc8:	6a21      	ldr	r1, [r4, #32]
 8014dca:	4628      	mov	r0, r5
 8014dcc:	47b0      	blx	r6
 8014dce:	1c43      	adds	r3, r0, #1
 8014dd0:	89a3      	ldrh	r3, [r4, #12]
 8014dd2:	d106      	bne.n	8014de2 <__sflush_r+0x66>
 8014dd4:	6829      	ldr	r1, [r5, #0]
 8014dd6:	291d      	cmp	r1, #29
 8014dd8:	d82c      	bhi.n	8014e34 <__sflush_r+0xb8>
 8014dda:	4a2a      	ldr	r2, [pc, #168]	; (8014e84 <__sflush_r+0x108>)
 8014ddc:	40ca      	lsrs	r2, r1
 8014dde:	07d6      	lsls	r6, r2, #31
 8014de0:	d528      	bpl.n	8014e34 <__sflush_r+0xb8>
 8014de2:	2200      	movs	r2, #0
 8014de4:	6062      	str	r2, [r4, #4]
 8014de6:	04d9      	lsls	r1, r3, #19
 8014de8:	6922      	ldr	r2, [r4, #16]
 8014dea:	6022      	str	r2, [r4, #0]
 8014dec:	d504      	bpl.n	8014df8 <__sflush_r+0x7c>
 8014dee:	1c42      	adds	r2, r0, #1
 8014df0:	d101      	bne.n	8014df6 <__sflush_r+0x7a>
 8014df2:	682b      	ldr	r3, [r5, #0]
 8014df4:	b903      	cbnz	r3, 8014df8 <__sflush_r+0x7c>
 8014df6:	6560      	str	r0, [r4, #84]	; 0x54
 8014df8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014dfa:	602f      	str	r7, [r5, #0]
 8014dfc:	2900      	cmp	r1, #0
 8014dfe:	d0ca      	beq.n	8014d96 <__sflush_r+0x1a>
 8014e00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014e04:	4299      	cmp	r1, r3
 8014e06:	d002      	beq.n	8014e0e <__sflush_r+0x92>
 8014e08:	4628      	mov	r0, r5
 8014e0a:	f7fd f92f 	bl	801206c <_free_r>
 8014e0e:	2000      	movs	r0, #0
 8014e10:	6360      	str	r0, [r4, #52]	; 0x34
 8014e12:	e7c1      	b.n	8014d98 <__sflush_r+0x1c>
 8014e14:	6a21      	ldr	r1, [r4, #32]
 8014e16:	2301      	movs	r3, #1
 8014e18:	4628      	mov	r0, r5
 8014e1a:	47b0      	blx	r6
 8014e1c:	1c41      	adds	r1, r0, #1
 8014e1e:	d1c7      	bne.n	8014db0 <__sflush_r+0x34>
 8014e20:	682b      	ldr	r3, [r5, #0]
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d0c4      	beq.n	8014db0 <__sflush_r+0x34>
 8014e26:	2b1d      	cmp	r3, #29
 8014e28:	d001      	beq.n	8014e2e <__sflush_r+0xb2>
 8014e2a:	2b16      	cmp	r3, #22
 8014e2c:	d101      	bne.n	8014e32 <__sflush_r+0xb6>
 8014e2e:	602f      	str	r7, [r5, #0]
 8014e30:	e7b1      	b.n	8014d96 <__sflush_r+0x1a>
 8014e32:	89a3      	ldrh	r3, [r4, #12]
 8014e34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014e38:	81a3      	strh	r3, [r4, #12]
 8014e3a:	e7ad      	b.n	8014d98 <__sflush_r+0x1c>
 8014e3c:	690f      	ldr	r7, [r1, #16]
 8014e3e:	2f00      	cmp	r7, #0
 8014e40:	d0a9      	beq.n	8014d96 <__sflush_r+0x1a>
 8014e42:	0793      	lsls	r3, r2, #30
 8014e44:	680e      	ldr	r6, [r1, #0]
 8014e46:	bf08      	it	eq
 8014e48:	694b      	ldreq	r3, [r1, #20]
 8014e4a:	600f      	str	r7, [r1, #0]
 8014e4c:	bf18      	it	ne
 8014e4e:	2300      	movne	r3, #0
 8014e50:	eba6 0807 	sub.w	r8, r6, r7
 8014e54:	608b      	str	r3, [r1, #8]
 8014e56:	f1b8 0f00 	cmp.w	r8, #0
 8014e5a:	dd9c      	ble.n	8014d96 <__sflush_r+0x1a>
 8014e5c:	6a21      	ldr	r1, [r4, #32]
 8014e5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014e60:	4643      	mov	r3, r8
 8014e62:	463a      	mov	r2, r7
 8014e64:	4628      	mov	r0, r5
 8014e66:	47b0      	blx	r6
 8014e68:	2800      	cmp	r0, #0
 8014e6a:	dc06      	bgt.n	8014e7a <__sflush_r+0xfe>
 8014e6c:	89a3      	ldrh	r3, [r4, #12]
 8014e6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014e72:	81a3      	strh	r3, [r4, #12]
 8014e74:	f04f 30ff 	mov.w	r0, #4294967295
 8014e78:	e78e      	b.n	8014d98 <__sflush_r+0x1c>
 8014e7a:	4407      	add	r7, r0
 8014e7c:	eba8 0800 	sub.w	r8, r8, r0
 8014e80:	e7e9      	b.n	8014e56 <__sflush_r+0xda>
 8014e82:	bf00      	nop
 8014e84:	20400001 	.word	0x20400001

08014e88 <_fflush_r>:
 8014e88:	b538      	push	{r3, r4, r5, lr}
 8014e8a:	690b      	ldr	r3, [r1, #16]
 8014e8c:	4605      	mov	r5, r0
 8014e8e:	460c      	mov	r4, r1
 8014e90:	b913      	cbnz	r3, 8014e98 <_fflush_r+0x10>
 8014e92:	2500      	movs	r5, #0
 8014e94:	4628      	mov	r0, r5
 8014e96:	bd38      	pop	{r3, r4, r5, pc}
 8014e98:	b118      	cbz	r0, 8014ea2 <_fflush_r+0x1a>
 8014e9a:	6983      	ldr	r3, [r0, #24]
 8014e9c:	b90b      	cbnz	r3, 8014ea2 <_fflush_r+0x1a>
 8014e9e:	f000 f887 	bl	8014fb0 <__sinit>
 8014ea2:	4b14      	ldr	r3, [pc, #80]	; (8014ef4 <_fflush_r+0x6c>)
 8014ea4:	429c      	cmp	r4, r3
 8014ea6:	d11b      	bne.n	8014ee0 <_fflush_r+0x58>
 8014ea8:	686c      	ldr	r4, [r5, #4]
 8014eaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d0ef      	beq.n	8014e92 <_fflush_r+0xa>
 8014eb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014eb4:	07d0      	lsls	r0, r2, #31
 8014eb6:	d404      	bmi.n	8014ec2 <_fflush_r+0x3a>
 8014eb8:	0599      	lsls	r1, r3, #22
 8014eba:	d402      	bmi.n	8014ec2 <_fflush_r+0x3a>
 8014ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014ebe:	f000 fc88 	bl	80157d2 <__retarget_lock_acquire_recursive>
 8014ec2:	4628      	mov	r0, r5
 8014ec4:	4621      	mov	r1, r4
 8014ec6:	f7ff ff59 	bl	8014d7c <__sflush_r>
 8014eca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014ecc:	07da      	lsls	r2, r3, #31
 8014ece:	4605      	mov	r5, r0
 8014ed0:	d4e0      	bmi.n	8014e94 <_fflush_r+0xc>
 8014ed2:	89a3      	ldrh	r3, [r4, #12]
 8014ed4:	059b      	lsls	r3, r3, #22
 8014ed6:	d4dd      	bmi.n	8014e94 <_fflush_r+0xc>
 8014ed8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014eda:	f000 fc7b 	bl	80157d4 <__retarget_lock_release_recursive>
 8014ede:	e7d9      	b.n	8014e94 <_fflush_r+0xc>
 8014ee0:	4b05      	ldr	r3, [pc, #20]	; (8014ef8 <_fflush_r+0x70>)
 8014ee2:	429c      	cmp	r4, r3
 8014ee4:	d101      	bne.n	8014eea <_fflush_r+0x62>
 8014ee6:	68ac      	ldr	r4, [r5, #8]
 8014ee8:	e7df      	b.n	8014eaa <_fflush_r+0x22>
 8014eea:	4b04      	ldr	r3, [pc, #16]	; (8014efc <_fflush_r+0x74>)
 8014eec:	429c      	cmp	r4, r3
 8014eee:	bf08      	it	eq
 8014ef0:	68ec      	ldreq	r4, [r5, #12]
 8014ef2:	e7da      	b.n	8014eaa <_fflush_r+0x22>
 8014ef4:	080634e0 	.word	0x080634e0
 8014ef8:	08063500 	.word	0x08063500
 8014efc:	080634c0 	.word	0x080634c0

08014f00 <std>:
 8014f00:	2300      	movs	r3, #0
 8014f02:	b510      	push	{r4, lr}
 8014f04:	4604      	mov	r4, r0
 8014f06:	e9c0 3300 	strd	r3, r3, [r0]
 8014f0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014f0e:	6083      	str	r3, [r0, #8]
 8014f10:	8181      	strh	r1, [r0, #12]
 8014f12:	6643      	str	r3, [r0, #100]	; 0x64
 8014f14:	81c2      	strh	r2, [r0, #14]
 8014f16:	6183      	str	r3, [r0, #24]
 8014f18:	4619      	mov	r1, r3
 8014f1a:	2208      	movs	r2, #8
 8014f1c:	305c      	adds	r0, #92	; 0x5c
 8014f1e:	f7fd f89d 	bl	801205c <memset>
 8014f22:	4b05      	ldr	r3, [pc, #20]	; (8014f38 <std+0x38>)
 8014f24:	6263      	str	r3, [r4, #36]	; 0x24
 8014f26:	4b05      	ldr	r3, [pc, #20]	; (8014f3c <std+0x3c>)
 8014f28:	62a3      	str	r3, [r4, #40]	; 0x28
 8014f2a:	4b05      	ldr	r3, [pc, #20]	; (8014f40 <std+0x40>)
 8014f2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014f2e:	4b05      	ldr	r3, [pc, #20]	; (8014f44 <std+0x44>)
 8014f30:	6224      	str	r4, [r4, #32]
 8014f32:	6323      	str	r3, [r4, #48]	; 0x30
 8014f34:	bd10      	pop	{r4, pc}
 8014f36:	bf00      	nop
 8014f38:	08016611 	.word	0x08016611
 8014f3c:	08016633 	.word	0x08016633
 8014f40:	0801666b 	.word	0x0801666b
 8014f44:	0801668f 	.word	0x0801668f

08014f48 <_cleanup_r>:
 8014f48:	4901      	ldr	r1, [pc, #4]	; (8014f50 <_cleanup_r+0x8>)
 8014f4a:	f000 b8af 	b.w	80150ac <_fwalk_reent>
 8014f4e:	bf00      	nop
 8014f50:	08014e89 	.word	0x08014e89

08014f54 <__sfmoreglue>:
 8014f54:	b570      	push	{r4, r5, r6, lr}
 8014f56:	1e4a      	subs	r2, r1, #1
 8014f58:	2568      	movs	r5, #104	; 0x68
 8014f5a:	4355      	muls	r5, r2
 8014f5c:	460e      	mov	r6, r1
 8014f5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014f62:	f7fd f8d3 	bl	801210c <_malloc_r>
 8014f66:	4604      	mov	r4, r0
 8014f68:	b140      	cbz	r0, 8014f7c <__sfmoreglue+0x28>
 8014f6a:	2100      	movs	r1, #0
 8014f6c:	e9c0 1600 	strd	r1, r6, [r0]
 8014f70:	300c      	adds	r0, #12
 8014f72:	60a0      	str	r0, [r4, #8]
 8014f74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014f78:	f7fd f870 	bl	801205c <memset>
 8014f7c:	4620      	mov	r0, r4
 8014f7e:	bd70      	pop	{r4, r5, r6, pc}

08014f80 <__sfp_lock_acquire>:
 8014f80:	4801      	ldr	r0, [pc, #4]	; (8014f88 <__sfp_lock_acquire+0x8>)
 8014f82:	f000 bc26 	b.w	80157d2 <__retarget_lock_acquire_recursive>
 8014f86:	bf00      	nop
 8014f88:	2400e620 	.word	0x2400e620

08014f8c <__sfp_lock_release>:
 8014f8c:	4801      	ldr	r0, [pc, #4]	; (8014f94 <__sfp_lock_release+0x8>)
 8014f8e:	f000 bc21 	b.w	80157d4 <__retarget_lock_release_recursive>
 8014f92:	bf00      	nop
 8014f94:	2400e620 	.word	0x2400e620

08014f98 <__sinit_lock_acquire>:
 8014f98:	4801      	ldr	r0, [pc, #4]	; (8014fa0 <__sinit_lock_acquire+0x8>)
 8014f9a:	f000 bc1a 	b.w	80157d2 <__retarget_lock_acquire_recursive>
 8014f9e:	bf00      	nop
 8014fa0:	2400e61b 	.word	0x2400e61b

08014fa4 <__sinit_lock_release>:
 8014fa4:	4801      	ldr	r0, [pc, #4]	; (8014fac <__sinit_lock_release+0x8>)
 8014fa6:	f000 bc15 	b.w	80157d4 <__retarget_lock_release_recursive>
 8014faa:	bf00      	nop
 8014fac:	2400e61b 	.word	0x2400e61b

08014fb0 <__sinit>:
 8014fb0:	b510      	push	{r4, lr}
 8014fb2:	4604      	mov	r4, r0
 8014fb4:	f7ff fff0 	bl	8014f98 <__sinit_lock_acquire>
 8014fb8:	69a3      	ldr	r3, [r4, #24]
 8014fba:	b11b      	cbz	r3, 8014fc4 <__sinit+0x14>
 8014fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014fc0:	f7ff bff0 	b.w	8014fa4 <__sinit_lock_release>
 8014fc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014fc8:	6523      	str	r3, [r4, #80]	; 0x50
 8014fca:	4b13      	ldr	r3, [pc, #76]	; (8015018 <__sinit+0x68>)
 8014fcc:	4a13      	ldr	r2, [pc, #76]	; (801501c <__sinit+0x6c>)
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	62a2      	str	r2, [r4, #40]	; 0x28
 8014fd2:	42a3      	cmp	r3, r4
 8014fd4:	bf04      	itt	eq
 8014fd6:	2301      	moveq	r3, #1
 8014fd8:	61a3      	streq	r3, [r4, #24]
 8014fda:	4620      	mov	r0, r4
 8014fdc:	f000 f820 	bl	8015020 <__sfp>
 8014fe0:	6060      	str	r0, [r4, #4]
 8014fe2:	4620      	mov	r0, r4
 8014fe4:	f000 f81c 	bl	8015020 <__sfp>
 8014fe8:	60a0      	str	r0, [r4, #8]
 8014fea:	4620      	mov	r0, r4
 8014fec:	f000 f818 	bl	8015020 <__sfp>
 8014ff0:	2200      	movs	r2, #0
 8014ff2:	60e0      	str	r0, [r4, #12]
 8014ff4:	2104      	movs	r1, #4
 8014ff6:	6860      	ldr	r0, [r4, #4]
 8014ff8:	f7ff ff82 	bl	8014f00 <std>
 8014ffc:	68a0      	ldr	r0, [r4, #8]
 8014ffe:	2201      	movs	r2, #1
 8015000:	2109      	movs	r1, #9
 8015002:	f7ff ff7d 	bl	8014f00 <std>
 8015006:	68e0      	ldr	r0, [r4, #12]
 8015008:	2202      	movs	r2, #2
 801500a:	2112      	movs	r1, #18
 801500c:	f7ff ff78 	bl	8014f00 <std>
 8015010:	2301      	movs	r3, #1
 8015012:	61a3      	str	r3, [r4, #24]
 8015014:	e7d2      	b.n	8014fbc <__sinit+0xc>
 8015016:	bf00      	nop
 8015018:	08063284 	.word	0x08063284
 801501c:	08014f49 	.word	0x08014f49

08015020 <__sfp>:
 8015020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015022:	4607      	mov	r7, r0
 8015024:	f7ff ffac 	bl	8014f80 <__sfp_lock_acquire>
 8015028:	4b1e      	ldr	r3, [pc, #120]	; (80150a4 <__sfp+0x84>)
 801502a:	681e      	ldr	r6, [r3, #0]
 801502c:	69b3      	ldr	r3, [r6, #24]
 801502e:	b913      	cbnz	r3, 8015036 <__sfp+0x16>
 8015030:	4630      	mov	r0, r6
 8015032:	f7ff ffbd 	bl	8014fb0 <__sinit>
 8015036:	3648      	adds	r6, #72	; 0x48
 8015038:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801503c:	3b01      	subs	r3, #1
 801503e:	d503      	bpl.n	8015048 <__sfp+0x28>
 8015040:	6833      	ldr	r3, [r6, #0]
 8015042:	b30b      	cbz	r3, 8015088 <__sfp+0x68>
 8015044:	6836      	ldr	r6, [r6, #0]
 8015046:	e7f7      	b.n	8015038 <__sfp+0x18>
 8015048:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801504c:	b9d5      	cbnz	r5, 8015084 <__sfp+0x64>
 801504e:	4b16      	ldr	r3, [pc, #88]	; (80150a8 <__sfp+0x88>)
 8015050:	60e3      	str	r3, [r4, #12]
 8015052:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015056:	6665      	str	r5, [r4, #100]	; 0x64
 8015058:	f000 fbba 	bl	80157d0 <__retarget_lock_init_recursive>
 801505c:	f7ff ff96 	bl	8014f8c <__sfp_lock_release>
 8015060:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015064:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015068:	6025      	str	r5, [r4, #0]
 801506a:	61a5      	str	r5, [r4, #24]
 801506c:	2208      	movs	r2, #8
 801506e:	4629      	mov	r1, r5
 8015070:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015074:	f7fc fff2 	bl	801205c <memset>
 8015078:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801507c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015080:	4620      	mov	r0, r4
 8015082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015084:	3468      	adds	r4, #104	; 0x68
 8015086:	e7d9      	b.n	801503c <__sfp+0x1c>
 8015088:	2104      	movs	r1, #4
 801508a:	4638      	mov	r0, r7
 801508c:	f7ff ff62 	bl	8014f54 <__sfmoreglue>
 8015090:	4604      	mov	r4, r0
 8015092:	6030      	str	r0, [r6, #0]
 8015094:	2800      	cmp	r0, #0
 8015096:	d1d5      	bne.n	8015044 <__sfp+0x24>
 8015098:	f7ff ff78 	bl	8014f8c <__sfp_lock_release>
 801509c:	230c      	movs	r3, #12
 801509e:	603b      	str	r3, [r7, #0]
 80150a0:	e7ee      	b.n	8015080 <__sfp+0x60>
 80150a2:	bf00      	nop
 80150a4:	08063284 	.word	0x08063284
 80150a8:	ffff0001 	.word	0xffff0001

080150ac <_fwalk_reent>:
 80150ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80150b0:	4606      	mov	r6, r0
 80150b2:	4688      	mov	r8, r1
 80150b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80150b8:	2700      	movs	r7, #0
 80150ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80150be:	f1b9 0901 	subs.w	r9, r9, #1
 80150c2:	d505      	bpl.n	80150d0 <_fwalk_reent+0x24>
 80150c4:	6824      	ldr	r4, [r4, #0]
 80150c6:	2c00      	cmp	r4, #0
 80150c8:	d1f7      	bne.n	80150ba <_fwalk_reent+0xe>
 80150ca:	4638      	mov	r0, r7
 80150cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80150d0:	89ab      	ldrh	r3, [r5, #12]
 80150d2:	2b01      	cmp	r3, #1
 80150d4:	d907      	bls.n	80150e6 <_fwalk_reent+0x3a>
 80150d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80150da:	3301      	adds	r3, #1
 80150dc:	d003      	beq.n	80150e6 <_fwalk_reent+0x3a>
 80150de:	4629      	mov	r1, r5
 80150e0:	4630      	mov	r0, r6
 80150e2:	47c0      	blx	r8
 80150e4:	4307      	orrs	r7, r0
 80150e6:	3568      	adds	r5, #104	; 0x68
 80150e8:	e7e9      	b.n	80150be <_fwalk_reent+0x12>

080150ea <rshift>:
 80150ea:	6903      	ldr	r3, [r0, #16]
 80150ec:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80150f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80150f4:	ea4f 1261 	mov.w	r2, r1, asr #5
 80150f8:	f100 0414 	add.w	r4, r0, #20
 80150fc:	dd45      	ble.n	801518a <rshift+0xa0>
 80150fe:	f011 011f 	ands.w	r1, r1, #31
 8015102:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015106:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801510a:	d10c      	bne.n	8015126 <rshift+0x3c>
 801510c:	f100 0710 	add.w	r7, r0, #16
 8015110:	4629      	mov	r1, r5
 8015112:	42b1      	cmp	r1, r6
 8015114:	d334      	bcc.n	8015180 <rshift+0x96>
 8015116:	1a9b      	subs	r3, r3, r2
 8015118:	009b      	lsls	r3, r3, #2
 801511a:	1eea      	subs	r2, r5, #3
 801511c:	4296      	cmp	r6, r2
 801511e:	bf38      	it	cc
 8015120:	2300      	movcc	r3, #0
 8015122:	4423      	add	r3, r4
 8015124:	e015      	b.n	8015152 <rshift+0x68>
 8015126:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801512a:	f1c1 0820 	rsb	r8, r1, #32
 801512e:	40cf      	lsrs	r7, r1
 8015130:	f105 0e04 	add.w	lr, r5, #4
 8015134:	46a1      	mov	r9, r4
 8015136:	4576      	cmp	r6, lr
 8015138:	46f4      	mov	ip, lr
 801513a:	d815      	bhi.n	8015168 <rshift+0x7e>
 801513c:	1a9b      	subs	r3, r3, r2
 801513e:	009a      	lsls	r2, r3, #2
 8015140:	3a04      	subs	r2, #4
 8015142:	3501      	adds	r5, #1
 8015144:	42ae      	cmp	r6, r5
 8015146:	bf38      	it	cc
 8015148:	2200      	movcc	r2, #0
 801514a:	18a3      	adds	r3, r4, r2
 801514c:	50a7      	str	r7, [r4, r2]
 801514e:	b107      	cbz	r7, 8015152 <rshift+0x68>
 8015150:	3304      	adds	r3, #4
 8015152:	1b1a      	subs	r2, r3, r4
 8015154:	42a3      	cmp	r3, r4
 8015156:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801515a:	bf08      	it	eq
 801515c:	2300      	moveq	r3, #0
 801515e:	6102      	str	r2, [r0, #16]
 8015160:	bf08      	it	eq
 8015162:	6143      	streq	r3, [r0, #20]
 8015164:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015168:	f8dc c000 	ldr.w	ip, [ip]
 801516c:	fa0c fc08 	lsl.w	ip, ip, r8
 8015170:	ea4c 0707 	orr.w	r7, ip, r7
 8015174:	f849 7b04 	str.w	r7, [r9], #4
 8015178:	f85e 7b04 	ldr.w	r7, [lr], #4
 801517c:	40cf      	lsrs	r7, r1
 801517e:	e7da      	b.n	8015136 <rshift+0x4c>
 8015180:	f851 cb04 	ldr.w	ip, [r1], #4
 8015184:	f847 cf04 	str.w	ip, [r7, #4]!
 8015188:	e7c3      	b.n	8015112 <rshift+0x28>
 801518a:	4623      	mov	r3, r4
 801518c:	e7e1      	b.n	8015152 <rshift+0x68>

0801518e <__hexdig_fun>:
 801518e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015192:	2b09      	cmp	r3, #9
 8015194:	d802      	bhi.n	801519c <__hexdig_fun+0xe>
 8015196:	3820      	subs	r0, #32
 8015198:	b2c0      	uxtb	r0, r0
 801519a:	4770      	bx	lr
 801519c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80151a0:	2b05      	cmp	r3, #5
 80151a2:	d801      	bhi.n	80151a8 <__hexdig_fun+0x1a>
 80151a4:	3847      	subs	r0, #71	; 0x47
 80151a6:	e7f7      	b.n	8015198 <__hexdig_fun+0xa>
 80151a8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80151ac:	2b05      	cmp	r3, #5
 80151ae:	d801      	bhi.n	80151b4 <__hexdig_fun+0x26>
 80151b0:	3827      	subs	r0, #39	; 0x27
 80151b2:	e7f1      	b.n	8015198 <__hexdig_fun+0xa>
 80151b4:	2000      	movs	r0, #0
 80151b6:	4770      	bx	lr

080151b8 <__gethex>:
 80151b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151bc:	ed2d 8b02 	vpush	{d8}
 80151c0:	b089      	sub	sp, #36	; 0x24
 80151c2:	ee08 0a10 	vmov	s16, r0
 80151c6:	9304      	str	r3, [sp, #16]
 80151c8:	4bbc      	ldr	r3, [pc, #752]	; (80154bc <__gethex+0x304>)
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	9301      	str	r3, [sp, #4]
 80151ce:	4618      	mov	r0, r3
 80151d0:	468b      	mov	fp, r1
 80151d2:	4690      	mov	r8, r2
 80151d4:	f7eb f88e 	bl	80002f4 <strlen>
 80151d8:	9b01      	ldr	r3, [sp, #4]
 80151da:	f8db 2000 	ldr.w	r2, [fp]
 80151de:	4403      	add	r3, r0
 80151e0:	4682      	mov	sl, r0
 80151e2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80151e6:	9305      	str	r3, [sp, #20]
 80151e8:	1c93      	adds	r3, r2, #2
 80151ea:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80151ee:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80151f2:	32fe      	adds	r2, #254	; 0xfe
 80151f4:	18d1      	adds	r1, r2, r3
 80151f6:	461f      	mov	r7, r3
 80151f8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80151fc:	9100      	str	r1, [sp, #0]
 80151fe:	2830      	cmp	r0, #48	; 0x30
 8015200:	d0f8      	beq.n	80151f4 <__gethex+0x3c>
 8015202:	f7ff ffc4 	bl	801518e <__hexdig_fun>
 8015206:	4604      	mov	r4, r0
 8015208:	2800      	cmp	r0, #0
 801520a:	d13a      	bne.n	8015282 <__gethex+0xca>
 801520c:	9901      	ldr	r1, [sp, #4]
 801520e:	4652      	mov	r2, sl
 8015210:	4638      	mov	r0, r7
 8015212:	f7fe f83b 	bl	801328c <strncmp>
 8015216:	4605      	mov	r5, r0
 8015218:	2800      	cmp	r0, #0
 801521a:	d168      	bne.n	80152ee <__gethex+0x136>
 801521c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8015220:	eb07 060a 	add.w	r6, r7, sl
 8015224:	f7ff ffb3 	bl	801518e <__hexdig_fun>
 8015228:	2800      	cmp	r0, #0
 801522a:	d062      	beq.n	80152f2 <__gethex+0x13a>
 801522c:	4633      	mov	r3, r6
 801522e:	7818      	ldrb	r0, [r3, #0]
 8015230:	2830      	cmp	r0, #48	; 0x30
 8015232:	461f      	mov	r7, r3
 8015234:	f103 0301 	add.w	r3, r3, #1
 8015238:	d0f9      	beq.n	801522e <__gethex+0x76>
 801523a:	f7ff ffa8 	bl	801518e <__hexdig_fun>
 801523e:	2301      	movs	r3, #1
 8015240:	fab0 f480 	clz	r4, r0
 8015244:	0964      	lsrs	r4, r4, #5
 8015246:	4635      	mov	r5, r6
 8015248:	9300      	str	r3, [sp, #0]
 801524a:	463a      	mov	r2, r7
 801524c:	4616      	mov	r6, r2
 801524e:	3201      	adds	r2, #1
 8015250:	7830      	ldrb	r0, [r6, #0]
 8015252:	f7ff ff9c 	bl	801518e <__hexdig_fun>
 8015256:	2800      	cmp	r0, #0
 8015258:	d1f8      	bne.n	801524c <__gethex+0x94>
 801525a:	9901      	ldr	r1, [sp, #4]
 801525c:	4652      	mov	r2, sl
 801525e:	4630      	mov	r0, r6
 8015260:	f7fe f814 	bl	801328c <strncmp>
 8015264:	b980      	cbnz	r0, 8015288 <__gethex+0xd0>
 8015266:	b94d      	cbnz	r5, 801527c <__gethex+0xc4>
 8015268:	eb06 050a 	add.w	r5, r6, sl
 801526c:	462a      	mov	r2, r5
 801526e:	4616      	mov	r6, r2
 8015270:	3201      	adds	r2, #1
 8015272:	7830      	ldrb	r0, [r6, #0]
 8015274:	f7ff ff8b 	bl	801518e <__hexdig_fun>
 8015278:	2800      	cmp	r0, #0
 801527a:	d1f8      	bne.n	801526e <__gethex+0xb6>
 801527c:	1bad      	subs	r5, r5, r6
 801527e:	00ad      	lsls	r5, r5, #2
 8015280:	e004      	b.n	801528c <__gethex+0xd4>
 8015282:	2400      	movs	r4, #0
 8015284:	4625      	mov	r5, r4
 8015286:	e7e0      	b.n	801524a <__gethex+0x92>
 8015288:	2d00      	cmp	r5, #0
 801528a:	d1f7      	bne.n	801527c <__gethex+0xc4>
 801528c:	7833      	ldrb	r3, [r6, #0]
 801528e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015292:	2b50      	cmp	r3, #80	; 0x50
 8015294:	d13b      	bne.n	801530e <__gethex+0x156>
 8015296:	7873      	ldrb	r3, [r6, #1]
 8015298:	2b2b      	cmp	r3, #43	; 0x2b
 801529a:	d02c      	beq.n	80152f6 <__gethex+0x13e>
 801529c:	2b2d      	cmp	r3, #45	; 0x2d
 801529e:	d02e      	beq.n	80152fe <__gethex+0x146>
 80152a0:	1c71      	adds	r1, r6, #1
 80152a2:	f04f 0900 	mov.w	r9, #0
 80152a6:	7808      	ldrb	r0, [r1, #0]
 80152a8:	f7ff ff71 	bl	801518e <__hexdig_fun>
 80152ac:	1e43      	subs	r3, r0, #1
 80152ae:	b2db      	uxtb	r3, r3
 80152b0:	2b18      	cmp	r3, #24
 80152b2:	d82c      	bhi.n	801530e <__gethex+0x156>
 80152b4:	f1a0 0210 	sub.w	r2, r0, #16
 80152b8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80152bc:	f7ff ff67 	bl	801518e <__hexdig_fun>
 80152c0:	1e43      	subs	r3, r0, #1
 80152c2:	b2db      	uxtb	r3, r3
 80152c4:	2b18      	cmp	r3, #24
 80152c6:	d91d      	bls.n	8015304 <__gethex+0x14c>
 80152c8:	f1b9 0f00 	cmp.w	r9, #0
 80152cc:	d000      	beq.n	80152d0 <__gethex+0x118>
 80152ce:	4252      	negs	r2, r2
 80152d0:	4415      	add	r5, r2
 80152d2:	f8cb 1000 	str.w	r1, [fp]
 80152d6:	b1e4      	cbz	r4, 8015312 <__gethex+0x15a>
 80152d8:	9b00      	ldr	r3, [sp, #0]
 80152da:	2b00      	cmp	r3, #0
 80152dc:	bf14      	ite	ne
 80152de:	2700      	movne	r7, #0
 80152e0:	2706      	moveq	r7, #6
 80152e2:	4638      	mov	r0, r7
 80152e4:	b009      	add	sp, #36	; 0x24
 80152e6:	ecbd 8b02 	vpop	{d8}
 80152ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152ee:	463e      	mov	r6, r7
 80152f0:	4625      	mov	r5, r4
 80152f2:	2401      	movs	r4, #1
 80152f4:	e7ca      	b.n	801528c <__gethex+0xd4>
 80152f6:	f04f 0900 	mov.w	r9, #0
 80152fa:	1cb1      	adds	r1, r6, #2
 80152fc:	e7d3      	b.n	80152a6 <__gethex+0xee>
 80152fe:	f04f 0901 	mov.w	r9, #1
 8015302:	e7fa      	b.n	80152fa <__gethex+0x142>
 8015304:	230a      	movs	r3, #10
 8015306:	fb03 0202 	mla	r2, r3, r2, r0
 801530a:	3a10      	subs	r2, #16
 801530c:	e7d4      	b.n	80152b8 <__gethex+0x100>
 801530e:	4631      	mov	r1, r6
 8015310:	e7df      	b.n	80152d2 <__gethex+0x11a>
 8015312:	1bf3      	subs	r3, r6, r7
 8015314:	3b01      	subs	r3, #1
 8015316:	4621      	mov	r1, r4
 8015318:	2b07      	cmp	r3, #7
 801531a:	dc0b      	bgt.n	8015334 <__gethex+0x17c>
 801531c:	ee18 0a10 	vmov	r0, s16
 8015320:	f000 fadc 	bl	80158dc <_Balloc>
 8015324:	4604      	mov	r4, r0
 8015326:	b940      	cbnz	r0, 801533a <__gethex+0x182>
 8015328:	4b65      	ldr	r3, [pc, #404]	; (80154c0 <__gethex+0x308>)
 801532a:	4602      	mov	r2, r0
 801532c:	21de      	movs	r1, #222	; 0xde
 801532e:	4865      	ldr	r0, [pc, #404]	; (80154c4 <__gethex+0x30c>)
 8015330:	f7fc fe02 	bl	8011f38 <__assert_func>
 8015334:	3101      	adds	r1, #1
 8015336:	105b      	asrs	r3, r3, #1
 8015338:	e7ee      	b.n	8015318 <__gethex+0x160>
 801533a:	f100 0914 	add.w	r9, r0, #20
 801533e:	f04f 0b00 	mov.w	fp, #0
 8015342:	f1ca 0301 	rsb	r3, sl, #1
 8015346:	f8cd 9008 	str.w	r9, [sp, #8]
 801534a:	f8cd b000 	str.w	fp, [sp]
 801534e:	9306      	str	r3, [sp, #24]
 8015350:	42b7      	cmp	r7, r6
 8015352:	d340      	bcc.n	80153d6 <__gethex+0x21e>
 8015354:	9802      	ldr	r0, [sp, #8]
 8015356:	9b00      	ldr	r3, [sp, #0]
 8015358:	f840 3b04 	str.w	r3, [r0], #4
 801535c:	eba0 0009 	sub.w	r0, r0, r9
 8015360:	1080      	asrs	r0, r0, #2
 8015362:	0146      	lsls	r6, r0, #5
 8015364:	6120      	str	r0, [r4, #16]
 8015366:	4618      	mov	r0, r3
 8015368:	f000 fbae 	bl	8015ac8 <__hi0bits>
 801536c:	1a30      	subs	r0, r6, r0
 801536e:	f8d8 6000 	ldr.w	r6, [r8]
 8015372:	42b0      	cmp	r0, r6
 8015374:	dd63      	ble.n	801543e <__gethex+0x286>
 8015376:	1b87      	subs	r7, r0, r6
 8015378:	4639      	mov	r1, r7
 801537a:	4620      	mov	r0, r4
 801537c:	f000 ff49 	bl	8016212 <__any_on>
 8015380:	4682      	mov	sl, r0
 8015382:	b1a8      	cbz	r0, 80153b0 <__gethex+0x1f8>
 8015384:	1e7b      	subs	r3, r7, #1
 8015386:	1159      	asrs	r1, r3, #5
 8015388:	f003 021f 	and.w	r2, r3, #31
 801538c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015390:	f04f 0a01 	mov.w	sl, #1
 8015394:	fa0a f202 	lsl.w	r2, sl, r2
 8015398:	420a      	tst	r2, r1
 801539a:	d009      	beq.n	80153b0 <__gethex+0x1f8>
 801539c:	4553      	cmp	r3, sl
 801539e:	dd05      	ble.n	80153ac <__gethex+0x1f4>
 80153a0:	1eb9      	subs	r1, r7, #2
 80153a2:	4620      	mov	r0, r4
 80153a4:	f000 ff35 	bl	8016212 <__any_on>
 80153a8:	2800      	cmp	r0, #0
 80153aa:	d145      	bne.n	8015438 <__gethex+0x280>
 80153ac:	f04f 0a02 	mov.w	sl, #2
 80153b0:	4639      	mov	r1, r7
 80153b2:	4620      	mov	r0, r4
 80153b4:	f7ff fe99 	bl	80150ea <rshift>
 80153b8:	443d      	add	r5, r7
 80153ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80153be:	42ab      	cmp	r3, r5
 80153c0:	da4c      	bge.n	801545c <__gethex+0x2a4>
 80153c2:	ee18 0a10 	vmov	r0, s16
 80153c6:	4621      	mov	r1, r4
 80153c8:	f000 fac8 	bl	801595c <_Bfree>
 80153cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80153ce:	2300      	movs	r3, #0
 80153d0:	6013      	str	r3, [r2, #0]
 80153d2:	27a3      	movs	r7, #163	; 0xa3
 80153d4:	e785      	b.n	80152e2 <__gethex+0x12a>
 80153d6:	1e73      	subs	r3, r6, #1
 80153d8:	9a05      	ldr	r2, [sp, #20]
 80153da:	9303      	str	r3, [sp, #12]
 80153dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80153e0:	4293      	cmp	r3, r2
 80153e2:	d019      	beq.n	8015418 <__gethex+0x260>
 80153e4:	f1bb 0f20 	cmp.w	fp, #32
 80153e8:	d107      	bne.n	80153fa <__gethex+0x242>
 80153ea:	9b02      	ldr	r3, [sp, #8]
 80153ec:	9a00      	ldr	r2, [sp, #0]
 80153ee:	f843 2b04 	str.w	r2, [r3], #4
 80153f2:	9302      	str	r3, [sp, #8]
 80153f4:	2300      	movs	r3, #0
 80153f6:	9300      	str	r3, [sp, #0]
 80153f8:	469b      	mov	fp, r3
 80153fa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80153fe:	f7ff fec6 	bl	801518e <__hexdig_fun>
 8015402:	9b00      	ldr	r3, [sp, #0]
 8015404:	f000 000f 	and.w	r0, r0, #15
 8015408:	fa00 f00b 	lsl.w	r0, r0, fp
 801540c:	4303      	orrs	r3, r0
 801540e:	9300      	str	r3, [sp, #0]
 8015410:	f10b 0b04 	add.w	fp, fp, #4
 8015414:	9b03      	ldr	r3, [sp, #12]
 8015416:	e00d      	b.n	8015434 <__gethex+0x27c>
 8015418:	9b03      	ldr	r3, [sp, #12]
 801541a:	9a06      	ldr	r2, [sp, #24]
 801541c:	4413      	add	r3, r2
 801541e:	42bb      	cmp	r3, r7
 8015420:	d3e0      	bcc.n	80153e4 <__gethex+0x22c>
 8015422:	4618      	mov	r0, r3
 8015424:	9901      	ldr	r1, [sp, #4]
 8015426:	9307      	str	r3, [sp, #28]
 8015428:	4652      	mov	r2, sl
 801542a:	f7fd ff2f 	bl	801328c <strncmp>
 801542e:	9b07      	ldr	r3, [sp, #28]
 8015430:	2800      	cmp	r0, #0
 8015432:	d1d7      	bne.n	80153e4 <__gethex+0x22c>
 8015434:	461e      	mov	r6, r3
 8015436:	e78b      	b.n	8015350 <__gethex+0x198>
 8015438:	f04f 0a03 	mov.w	sl, #3
 801543c:	e7b8      	b.n	80153b0 <__gethex+0x1f8>
 801543e:	da0a      	bge.n	8015456 <__gethex+0x29e>
 8015440:	1a37      	subs	r7, r6, r0
 8015442:	4621      	mov	r1, r4
 8015444:	ee18 0a10 	vmov	r0, s16
 8015448:	463a      	mov	r2, r7
 801544a:	f000 fca3 	bl	8015d94 <__lshift>
 801544e:	1bed      	subs	r5, r5, r7
 8015450:	4604      	mov	r4, r0
 8015452:	f100 0914 	add.w	r9, r0, #20
 8015456:	f04f 0a00 	mov.w	sl, #0
 801545a:	e7ae      	b.n	80153ba <__gethex+0x202>
 801545c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015460:	42a8      	cmp	r0, r5
 8015462:	dd72      	ble.n	801554a <__gethex+0x392>
 8015464:	1b45      	subs	r5, r0, r5
 8015466:	42ae      	cmp	r6, r5
 8015468:	dc36      	bgt.n	80154d8 <__gethex+0x320>
 801546a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801546e:	2b02      	cmp	r3, #2
 8015470:	d02a      	beq.n	80154c8 <__gethex+0x310>
 8015472:	2b03      	cmp	r3, #3
 8015474:	d02c      	beq.n	80154d0 <__gethex+0x318>
 8015476:	2b01      	cmp	r3, #1
 8015478:	d115      	bne.n	80154a6 <__gethex+0x2ee>
 801547a:	42ae      	cmp	r6, r5
 801547c:	d113      	bne.n	80154a6 <__gethex+0x2ee>
 801547e:	2e01      	cmp	r6, #1
 8015480:	d10b      	bne.n	801549a <__gethex+0x2e2>
 8015482:	9a04      	ldr	r2, [sp, #16]
 8015484:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015488:	6013      	str	r3, [r2, #0]
 801548a:	2301      	movs	r3, #1
 801548c:	6123      	str	r3, [r4, #16]
 801548e:	f8c9 3000 	str.w	r3, [r9]
 8015492:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015494:	2762      	movs	r7, #98	; 0x62
 8015496:	601c      	str	r4, [r3, #0]
 8015498:	e723      	b.n	80152e2 <__gethex+0x12a>
 801549a:	1e71      	subs	r1, r6, #1
 801549c:	4620      	mov	r0, r4
 801549e:	f000 feb8 	bl	8016212 <__any_on>
 80154a2:	2800      	cmp	r0, #0
 80154a4:	d1ed      	bne.n	8015482 <__gethex+0x2ca>
 80154a6:	ee18 0a10 	vmov	r0, s16
 80154aa:	4621      	mov	r1, r4
 80154ac:	f000 fa56 	bl	801595c <_Bfree>
 80154b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80154b2:	2300      	movs	r3, #0
 80154b4:	6013      	str	r3, [r2, #0]
 80154b6:	2750      	movs	r7, #80	; 0x50
 80154b8:	e713      	b.n	80152e2 <__gethex+0x12a>
 80154ba:	bf00      	nop
 80154bc:	0806358c 	.word	0x0806358c
 80154c0:	080634ac 	.word	0x080634ac
 80154c4:	08063520 	.word	0x08063520
 80154c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d1eb      	bne.n	80154a6 <__gethex+0x2ee>
 80154ce:	e7d8      	b.n	8015482 <__gethex+0x2ca>
 80154d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d1d5      	bne.n	8015482 <__gethex+0x2ca>
 80154d6:	e7e6      	b.n	80154a6 <__gethex+0x2ee>
 80154d8:	1e6f      	subs	r7, r5, #1
 80154da:	f1ba 0f00 	cmp.w	sl, #0
 80154de:	d131      	bne.n	8015544 <__gethex+0x38c>
 80154e0:	b127      	cbz	r7, 80154ec <__gethex+0x334>
 80154e2:	4639      	mov	r1, r7
 80154e4:	4620      	mov	r0, r4
 80154e6:	f000 fe94 	bl	8016212 <__any_on>
 80154ea:	4682      	mov	sl, r0
 80154ec:	117b      	asrs	r3, r7, #5
 80154ee:	2101      	movs	r1, #1
 80154f0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80154f4:	f007 071f 	and.w	r7, r7, #31
 80154f8:	fa01 f707 	lsl.w	r7, r1, r7
 80154fc:	421f      	tst	r7, r3
 80154fe:	4629      	mov	r1, r5
 8015500:	4620      	mov	r0, r4
 8015502:	bf18      	it	ne
 8015504:	f04a 0a02 	orrne.w	sl, sl, #2
 8015508:	1b76      	subs	r6, r6, r5
 801550a:	f7ff fdee 	bl	80150ea <rshift>
 801550e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8015512:	2702      	movs	r7, #2
 8015514:	f1ba 0f00 	cmp.w	sl, #0
 8015518:	d048      	beq.n	80155ac <__gethex+0x3f4>
 801551a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801551e:	2b02      	cmp	r3, #2
 8015520:	d015      	beq.n	801554e <__gethex+0x396>
 8015522:	2b03      	cmp	r3, #3
 8015524:	d017      	beq.n	8015556 <__gethex+0x39e>
 8015526:	2b01      	cmp	r3, #1
 8015528:	d109      	bne.n	801553e <__gethex+0x386>
 801552a:	f01a 0f02 	tst.w	sl, #2
 801552e:	d006      	beq.n	801553e <__gethex+0x386>
 8015530:	f8d9 0000 	ldr.w	r0, [r9]
 8015534:	ea4a 0a00 	orr.w	sl, sl, r0
 8015538:	f01a 0f01 	tst.w	sl, #1
 801553c:	d10e      	bne.n	801555c <__gethex+0x3a4>
 801553e:	f047 0710 	orr.w	r7, r7, #16
 8015542:	e033      	b.n	80155ac <__gethex+0x3f4>
 8015544:	f04f 0a01 	mov.w	sl, #1
 8015548:	e7d0      	b.n	80154ec <__gethex+0x334>
 801554a:	2701      	movs	r7, #1
 801554c:	e7e2      	b.n	8015514 <__gethex+0x35c>
 801554e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015550:	f1c3 0301 	rsb	r3, r3, #1
 8015554:	9315      	str	r3, [sp, #84]	; 0x54
 8015556:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015558:	2b00      	cmp	r3, #0
 801555a:	d0f0      	beq.n	801553e <__gethex+0x386>
 801555c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015560:	f104 0314 	add.w	r3, r4, #20
 8015564:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8015568:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801556c:	f04f 0c00 	mov.w	ip, #0
 8015570:	4618      	mov	r0, r3
 8015572:	f853 2b04 	ldr.w	r2, [r3], #4
 8015576:	f1b2 3fff 	cmp.w	r2, #4294967295
 801557a:	d01c      	beq.n	80155b6 <__gethex+0x3fe>
 801557c:	3201      	adds	r2, #1
 801557e:	6002      	str	r2, [r0, #0]
 8015580:	2f02      	cmp	r7, #2
 8015582:	f104 0314 	add.w	r3, r4, #20
 8015586:	d13f      	bne.n	8015608 <__gethex+0x450>
 8015588:	f8d8 2000 	ldr.w	r2, [r8]
 801558c:	3a01      	subs	r2, #1
 801558e:	42b2      	cmp	r2, r6
 8015590:	d10a      	bne.n	80155a8 <__gethex+0x3f0>
 8015592:	1171      	asrs	r1, r6, #5
 8015594:	2201      	movs	r2, #1
 8015596:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801559a:	f006 061f 	and.w	r6, r6, #31
 801559e:	fa02 f606 	lsl.w	r6, r2, r6
 80155a2:	421e      	tst	r6, r3
 80155a4:	bf18      	it	ne
 80155a6:	4617      	movne	r7, r2
 80155a8:	f047 0720 	orr.w	r7, r7, #32
 80155ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80155ae:	601c      	str	r4, [r3, #0]
 80155b0:	9b04      	ldr	r3, [sp, #16]
 80155b2:	601d      	str	r5, [r3, #0]
 80155b4:	e695      	b.n	80152e2 <__gethex+0x12a>
 80155b6:	4299      	cmp	r1, r3
 80155b8:	f843 cc04 	str.w	ip, [r3, #-4]
 80155bc:	d8d8      	bhi.n	8015570 <__gethex+0x3b8>
 80155be:	68a3      	ldr	r3, [r4, #8]
 80155c0:	459b      	cmp	fp, r3
 80155c2:	db19      	blt.n	80155f8 <__gethex+0x440>
 80155c4:	6861      	ldr	r1, [r4, #4]
 80155c6:	ee18 0a10 	vmov	r0, s16
 80155ca:	3101      	adds	r1, #1
 80155cc:	f000 f986 	bl	80158dc <_Balloc>
 80155d0:	4681      	mov	r9, r0
 80155d2:	b918      	cbnz	r0, 80155dc <__gethex+0x424>
 80155d4:	4b1a      	ldr	r3, [pc, #104]	; (8015640 <__gethex+0x488>)
 80155d6:	4602      	mov	r2, r0
 80155d8:	2184      	movs	r1, #132	; 0x84
 80155da:	e6a8      	b.n	801532e <__gethex+0x176>
 80155dc:	6922      	ldr	r2, [r4, #16]
 80155de:	3202      	adds	r2, #2
 80155e0:	f104 010c 	add.w	r1, r4, #12
 80155e4:	0092      	lsls	r2, r2, #2
 80155e6:	300c      	adds	r0, #12
 80155e8:	f7fc fd10 	bl	801200c <memcpy>
 80155ec:	4621      	mov	r1, r4
 80155ee:	ee18 0a10 	vmov	r0, s16
 80155f2:	f000 f9b3 	bl	801595c <_Bfree>
 80155f6:	464c      	mov	r4, r9
 80155f8:	6923      	ldr	r3, [r4, #16]
 80155fa:	1c5a      	adds	r2, r3, #1
 80155fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015600:	6122      	str	r2, [r4, #16]
 8015602:	2201      	movs	r2, #1
 8015604:	615a      	str	r2, [r3, #20]
 8015606:	e7bb      	b.n	8015580 <__gethex+0x3c8>
 8015608:	6922      	ldr	r2, [r4, #16]
 801560a:	455a      	cmp	r2, fp
 801560c:	dd0b      	ble.n	8015626 <__gethex+0x46e>
 801560e:	2101      	movs	r1, #1
 8015610:	4620      	mov	r0, r4
 8015612:	f7ff fd6a 	bl	80150ea <rshift>
 8015616:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801561a:	3501      	adds	r5, #1
 801561c:	42ab      	cmp	r3, r5
 801561e:	f6ff aed0 	blt.w	80153c2 <__gethex+0x20a>
 8015622:	2701      	movs	r7, #1
 8015624:	e7c0      	b.n	80155a8 <__gethex+0x3f0>
 8015626:	f016 061f 	ands.w	r6, r6, #31
 801562a:	d0fa      	beq.n	8015622 <__gethex+0x46a>
 801562c:	449a      	add	sl, r3
 801562e:	f1c6 0620 	rsb	r6, r6, #32
 8015632:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8015636:	f000 fa47 	bl	8015ac8 <__hi0bits>
 801563a:	42b0      	cmp	r0, r6
 801563c:	dbe7      	blt.n	801560e <__gethex+0x456>
 801563e:	e7f0      	b.n	8015622 <__gethex+0x46a>
 8015640:	080634ac 	.word	0x080634ac

08015644 <L_shift>:
 8015644:	f1c2 0208 	rsb	r2, r2, #8
 8015648:	0092      	lsls	r2, r2, #2
 801564a:	b570      	push	{r4, r5, r6, lr}
 801564c:	f1c2 0620 	rsb	r6, r2, #32
 8015650:	6843      	ldr	r3, [r0, #4]
 8015652:	6804      	ldr	r4, [r0, #0]
 8015654:	fa03 f506 	lsl.w	r5, r3, r6
 8015658:	432c      	orrs	r4, r5
 801565a:	40d3      	lsrs	r3, r2
 801565c:	6004      	str	r4, [r0, #0]
 801565e:	f840 3f04 	str.w	r3, [r0, #4]!
 8015662:	4288      	cmp	r0, r1
 8015664:	d3f4      	bcc.n	8015650 <L_shift+0xc>
 8015666:	bd70      	pop	{r4, r5, r6, pc}

08015668 <__match>:
 8015668:	b530      	push	{r4, r5, lr}
 801566a:	6803      	ldr	r3, [r0, #0]
 801566c:	3301      	adds	r3, #1
 801566e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015672:	b914      	cbnz	r4, 801567a <__match+0x12>
 8015674:	6003      	str	r3, [r0, #0]
 8015676:	2001      	movs	r0, #1
 8015678:	bd30      	pop	{r4, r5, pc}
 801567a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801567e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015682:	2d19      	cmp	r5, #25
 8015684:	bf98      	it	ls
 8015686:	3220      	addls	r2, #32
 8015688:	42a2      	cmp	r2, r4
 801568a:	d0f0      	beq.n	801566e <__match+0x6>
 801568c:	2000      	movs	r0, #0
 801568e:	e7f3      	b.n	8015678 <__match+0x10>

08015690 <__hexnan>:
 8015690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015694:	680b      	ldr	r3, [r1, #0]
 8015696:	6801      	ldr	r1, [r0, #0]
 8015698:	115e      	asrs	r6, r3, #5
 801569a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801569e:	f013 031f 	ands.w	r3, r3, #31
 80156a2:	b087      	sub	sp, #28
 80156a4:	bf18      	it	ne
 80156a6:	3604      	addne	r6, #4
 80156a8:	2500      	movs	r5, #0
 80156aa:	1f37      	subs	r7, r6, #4
 80156ac:	4682      	mov	sl, r0
 80156ae:	4690      	mov	r8, r2
 80156b0:	9301      	str	r3, [sp, #4]
 80156b2:	f846 5c04 	str.w	r5, [r6, #-4]
 80156b6:	46b9      	mov	r9, r7
 80156b8:	463c      	mov	r4, r7
 80156ba:	9502      	str	r5, [sp, #8]
 80156bc:	46ab      	mov	fp, r5
 80156be:	784a      	ldrb	r2, [r1, #1]
 80156c0:	1c4b      	adds	r3, r1, #1
 80156c2:	9303      	str	r3, [sp, #12]
 80156c4:	b342      	cbz	r2, 8015718 <__hexnan+0x88>
 80156c6:	4610      	mov	r0, r2
 80156c8:	9105      	str	r1, [sp, #20]
 80156ca:	9204      	str	r2, [sp, #16]
 80156cc:	f7ff fd5f 	bl	801518e <__hexdig_fun>
 80156d0:	2800      	cmp	r0, #0
 80156d2:	d14f      	bne.n	8015774 <__hexnan+0xe4>
 80156d4:	9a04      	ldr	r2, [sp, #16]
 80156d6:	9905      	ldr	r1, [sp, #20]
 80156d8:	2a20      	cmp	r2, #32
 80156da:	d818      	bhi.n	801570e <__hexnan+0x7e>
 80156dc:	9b02      	ldr	r3, [sp, #8]
 80156de:	459b      	cmp	fp, r3
 80156e0:	dd13      	ble.n	801570a <__hexnan+0x7a>
 80156e2:	454c      	cmp	r4, r9
 80156e4:	d206      	bcs.n	80156f4 <__hexnan+0x64>
 80156e6:	2d07      	cmp	r5, #7
 80156e8:	dc04      	bgt.n	80156f4 <__hexnan+0x64>
 80156ea:	462a      	mov	r2, r5
 80156ec:	4649      	mov	r1, r9
 80156ee:	4620      	mov	r0, r4
 80156f0:	f7ff ffa8 	bl	8015644 <L_shift>
 80156f4:	4544      	cmp	r4, r8
 80156f6:	d950      	bls.n	801579a <__hexnan+0x10a>
 80156f8:	2300      	movs	r3, #0
 80156fa:	f1a4 0904 	sub.w	r9, r4, #4
 80156fe:	f844 3c04 	str.w	r3, [r4, #-4]
 8015702:	f8cd b008 	str.w	fp, [sp, #8]
 8015706:	464c      	mov	r4, r9
 8015708:	461d      	mov	r5, r3
 801570a:	9903      	ldr	r1, [sp, #12]
 801570c:	e7d7      	b.n	80156be <__hexnan+0x2e>
 801570e:	2a29      	cmp	r2, #41	; 0x29
 8015710:	d156      	bne.n	80157c0 <__hexnan+0x130>
 8015712:	3102      	adds	r1, #2
 8015714:	f8ca 1000 	str.w	r1, [sl]
 8015718:	f1bb 0f00 	cmp.w	fp, #0
 801571c:	d050      	beq.n	80157c0 <__hexnan+0x130>
 801571e:	454c      	cmp	r4, r9
 8015720:	d206      	bcs.n	8015730 <__hexnan+0xa0>
 8015722:	2d07      	cmp	r5, #7
 8015724:	dc04      	bgt.n	8015730 <__hexnan+0xa0>
 8015726:	462a      	mov	r2, r5
 8015728:	4649      	mov	r1, r9
 801572a:	4620      	mov	r0, r4
 801572c:	f7ff ff8a 	bl	8015644 <L_shift>
 8015730:	4544      	cmp	r4, r8
 8015732:	d934      	bls.n	801579e <__hexnan+0x10e>
 8015734:	f1a8 0204 	sub.w	r2, r8, #4
 8015738:	4623      	mov	r3, r4
 801573a:	f853 1b04 	ldr.w	r1, [r3], #4
 801573e:	f842 1f04 	str.w	r1, [r2, #4]!
 8015742:	429f      	cmp	r7, r3
 8015744:	d2f9      	bcs.n	801573a <__hexnan+0xaa>
 8015746:	1b3b      	subs	r3, r7, r4
 8015748:	f023 0303 	bic.w	r3, r3, #3
 801574c:	3304      	adds	r3, #4
 801574e:	3401      	adds	r4, #1
 8015750:	3e03      	subs	r6, #3
 8015752:	42b4      	cmp	r4, r6
 8015754:	bf88      	it	hi
 8015756:	2304      	movhi	r3, #4
 8015758:	4443      	add	r3, r8
 801575a:	2200      	movs	r2, #0
 801575c:	f843 2b04 	str.w	r2, [r3], #4
 8015760:	429f      	cmp	r7, r3
 8015762:	d2fb      	bcs.n	801575c <__hexnan+0xcc>
 8015764:	683b      	ldr	r3, [r7, #0]
 8015766:	b91b      	cbnz	r3, 8015770 <__hexnan+0xe0>
 8015768:	4547      	cmp	r7, r8
 801576a:	d127      	bne.n	80157bc <__hexnan+0x12c>
 801576c:	2301      	movs	r3, #1
 801576e:	603b      	str	r3, [r7, #0]
 8015770:	2005      	movs	r0, #5
 8015772:	e026      	b.n	80157c2 <__hexnan+0x132>
 8015774:	3501      	adds	r5, #1
 8015776:	2d08      	cmp	r5, #8
 8015778:	f10b 0b01 	add.w	fp, fp, #1
 801577c:	dd06      	ble.n	801578c <__hexnan+0xfc>
 801577e:	4544      	cmp	r4, r8
 8015780:	d9c3      	bls.n	801570a <__hexnan+0x7a>
 8015782:	2300      	movs	r3, #0
 8015784:	f844 3c04 	str.w	r3, [r4, #-4]
 8015788:	2501      	movs	r5, #1
 801578a:	3c04      	subs	r4, #4
 801578c:	6822      	ldr	r2, [r4, #0]
 801578e:	f000 000f 	and.w	r0, r0, #15
 8015792:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8015796:	6022      	str	r2, [r4, #0]
 8015798:	e7b7      	b.n	801570a <__hexnan+0x7a>
 801579a:	2508      	movs	r5, #8
 801579c:	e7b5      	b.n	801570a <__hexnan+0x7a>
 801579e:	9b01      	ldr	r3, [sp, #4]
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d0df      	beq.n	8015764 <__hexnan+0xd4>
 80157a4:	f04f 32ff 	mov.w	r2, #4294967295
 80157a8:	f1c3 0320 	rsb	r3, r3, #32
 80157ac:	fa22 f303 	lsr.w	r3, r2, r3
 80157b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80157b4:	401a      	ands	r2, r3
 80157b6:	f846 2c04 	str.w	r2, [r6, #-4]
 80157ba:	e7d3      	b.n	8015764 <__hexnan+0xd4>
 80157bc:	3f04      	subs	r7, #4
 80157be:	e7d1      	b.n	8015764 <__hexnan+0xd4>
 80157c0:	2004      	movs	r0, #4
 80157c2:	b007      	add	sp, #28
 80157c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080157c8 <_localeconv_r>:
 80157c8:	4800      	ldr	r0, [pc, #0]	; (80157cc <_localeconv_r+0x4>)
 80157ca:	4770      	bx	lr
 80157cc:	2400a248 	.word	0x2400a248

080157d0 <__retarget_lock_init_recursive>:
 80157d0:	4770      	bx	lr

080157d2 <__retarget_lock_acquire_recursive>:
 80157d2:	4770      	bx	lr

080157d4 <__retarget_lock_release_recursive>:
 80157d4:	4770      	bx	lr

080157d6 <__swhatbuf_r>:
 80157d6:	b570      	push	{r4, r5, r6, lr}
 80157d8:	460e      	mov	r6, r1
 80157da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80157de:	2900      	cmp	r1, #0
 80157e0:	b096      	sub	sp, #88	; 0x58
 80157e2:	4614      	mov	r4, r2
 80157e4:	461d      	mov	r5, r3
 80157e6:	da07      	bge.n	80157f8 <__swhatbuf_r+0x22>
 80157e8:	2300      	movs	r3, #0
 80157ea:	602b      	str	r3, [r5, #0]
 80157ec:	89b3      	ldrh	r3, [r6, #12]
 80157ee:	061a      	lsls	r2, r3, #24
 80157f0:	d410      	bmi.n	8015814 <__swhatbuf_r+0x3e>
 80157f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80157f6:	e00e      	b.n	8015816 <__swhatbuf_r+0x40>
 80157f8:	466a      	mov	r2, sp
 80157fa:	f000 ff7b 	bl	80166f4 <_fstat_r>
 80157fe:	2800      	cmp	r0, #0
 8015800:	dbf2      	blt.n	80157e8 <__swhatbuf_r+0x12>
 8015802:	9a01      	ldr	r2, [sp, #4]
 8015804:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015808:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801580c:	425a      	negs	r2, r3
 801580e:	415a      	adcs	r2, r3
 8015810:	602a      	str	r2, [r5, #0]
 8015812:	e7ee      	b.n	80157f2 <__swhatbuf_r+0x1c>
 8015814:	2340      	movs	r3, #64	; 0x40
 8015816:	2000      	movs	r0, #0
 8015818:	6023      	str	r3, [r4, #0]
 801581a:	b016      	add	sp, #88	; 0x58
 801581c:	bd70      	pop	{r4, r5, r6, pc}
	...

08015820 <__smakebuf_r>:
 8015820:	898b      	ldrh	r3, [r1, #12]
 8015822:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015824:	079d      	lsls	r5, r3, #30
 8015826:	4606      	mov	r6, r0
 8015828:	460c      	mov	r4, r1
 801582a:	d507      	bpl.n	801583c <__smakebuf_r+0x1c>
 801582c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015830:	6023      	str	r3, [r4, #0]
 8015832:	6123      	str	r3, [r4, #16]
 8015834:	2301      	movs	r3, #1
 8015836:	6163      	str	r3, [r4, #20]
 8015838:	b002      	add	sp, #8
 801583a:	bd70      	pop	{r4, r5, r6, pc}
 801583c:	ab01      	add	r3, sp, #4
 801583e:	466a      	mov	r2, sp
 8015840:	f7ff ffc9 	bl	80157d6 <__swhatbuf_r>
 8015844:	9900      	ldr	r1, [sp, #0]
 8015846:	4605      	mov	r5, r0
 8015848:	4630      	mov	r0, r6
 801584a:	f7fc fc5f 	bl	801210c <_malloc_r>
 801584e:	b948      	cbnz	r0, 8015864 <__smakebuf_r+0x44>
 8015850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015854:	059a      	lsls	r2, r3, #22
 8015856:	d4ef      	bmi.n	8015838 <__smakebuf_r+0x18>
 8015858:	f023 0303 	bic.w	r3, r3, #3
 801585c:	f043 0302 	orr.w	r3, r3, #2
 8015860:	81a3      	strh	r3, [r4, #12]
 8015862:	e7e3      	b.n	801582c <__smakebuf_r+0xc>
 8015864:	4b0d      	ldr	r3, [pc, #52]	; (801589c <__smakebuf_r+0x7c>)
 8015866:	62b3      	str	r3, [r6, #40]	; 0x28
 8015868:	89a3      	ldrh	r3, [r4, #12]
 801586a:	6020      	str	r0, [r4, #0]
 801586c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015870:	81a3      	strh	r3, [r4, #12]
 8015872:	9b00      	ldr	r3, [sp, #0]
 8015874:	6163      	str	r3, [r4, #20]
 8015876:	9b01      	ldr	r3, [sp, #4]
 8015878:	6120      	str	r0, [r4, #16]
 801587a:	b15b      	cbz	r3, 8015894 <__smakebuf_r+0x74>
 801587c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015880:	4630      	mov	r0, r6
 8015882:	f000 ff49 	bl	8016718 <_isatty_r>
 8015886:	b128      	cbz	r0, 8015894 <__smakebuf_r+0x74>
 8015888:	89a3      	ldrh	r3, [r4, #12]
 801588a:	f023 0303 	bic.w	r3, r3, #3
 801588e:	f043 0301 	orr.w	r3, r3, #1
 8015892:	81a3      	strh	r3, [r4, #12]
 8015894:	89a0      	ldrh	r0, [r4, #12]
 8015896:	4305      	orrs	r5, r0
 8015898:	81a5      	strh	r5, [r4, #12]
 801589a:	e7cd      	b.n	8015838 <__smakebuf_r+0x18>
 801589c:	08014f49 	.word	0x08014f49

080158a0 <__ascii_mbtowc>:
 80158a0:	b082      	sub	sp, #8
 80158a2:	b901      	cbnz	r1, 80158a6 <__ascii_mbtowc+0x6>
 80158a4:	a901      	add	r1, sp, #4
 80158a6:	b142      	cbz	r2, 80158ba <__ascii_mbtowc+0x1a>
 80158a8:	b14b      	cbz	r3, 80158be <__ascii_mbtowc+0x1e>
 80158aa:	7813      	ldrb	r3, [r2, #0]
 80158ac:	600b      	str	r3, [r1, #0]
 80158ae:	7812      	ldrb	r2, [r2, #0]
 80158b0:	1e10      	subs	r0, r2, #0
 80158b2:	bf18      	it	ne
 80158b4:	2001      	movne	r0, #1
 80158b6:	b002      	add	sp, #8
 80158b8:	4770      	bx	lr
 80158ba:	4610      	mov	r0, r2
 80158bc:	e7fb      	b.n	80158b6 <__ascii_mbtowc+0x16>
 80158be:	f06f 0001 	mvn.w	r0, #1
 80158c2:	e7f8      	b.n	80158b6 <__ascii_mbtowc+0x16>

080158c4 <__malloc_lock>:
 80158c4:	4801      	ldr	r0, [pc, #4]	; (80158cc <__malloc_lock+0x8>)
 80158c6:	f7ff bf84 	b.w	80157d2 <__retarget_lock_acquire_recursive>
 80158ca:	bf00      	nop
 80158cc:	2400e61c 	.word	0x2400e61c

080158d0 <__malloc_unlock>:
 80158d0:	4801      	ldr	r0, [pc, #4]	; (80158d8 <__malloc_unlock+0x8>)
 80158d2:	f7ff bf7f 	b.w	80157d4 <__retarget_lock_release_recursive>
 80158d6:	bf00      	nop
 80158d8:	2400e61c 	.word	0x2400e61c

080158dc <_Balloc>:
 80158dc:	b570      	push	{r4, r5, r6, lr}
 80158de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80158e0:	4604      	mov	r4, r0
 80158e2:	460d      	mov	r5, r1
 80158e4:	b976      	cbnz	r6, 8015904 <_Balloc+0x28>
 80158e6:	2010      	movs	r0, #16
 80158e8:	f7fc fb80 	bl	8011fec <malloc>
 80158ec:	4602      	mov	r2, r0
 80158ee:	6260      	str	r0, [r4, #36]	; 0x24
 80158f0:	b920      	cbnz	r0, 80158fc <_Balloc+0x20>
 80158f2:	4b18      	ldr	r3, [pc, #96]	; (8015954 <_Balloc+0x78>)
 80158f4:	4818      	ldr	r0, [pc, #96]	; (8015958 <_Balloc+0x7c>)
 80158f6:	2166      	movs	r1, #102	; 0x66
 80158f8:	f7fc fb1e 	bl	8011f38 <__assert_func>
 80158fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015900:	6006      	str	r6, [r0, #0]
 8015902:	60c6      	str	r6, [r0, #12]
 8015904:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015906:	68f3      	ldr	r3, [r6, #12]
 8015908:	b183      	cbz	r3, 801592c <_Balloc+0x50>
 801590a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801590c:	68db      	ldr	r3, [r3, #12]
 801590e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015912:	b9b8      	cbnz	r0, 8015944 <_Balloc+0x68>
 8015914:	2101      	movs	r1, #1
 8015916:	fa01 f605 	lsl.w	r6, r1, r5
 801591a:	1d72      	adds	r2, r6, #5
 801591c:	0092      	lsls	r2, r2, #2
 801591e:	4620      	mov	r0, r4
 8015920:	f000 fc98 	bl	8016254 <_calloc_r>
 8015924:	b160      	cbz	r0, 8015940 <_Balloc+0x64>
 8015926:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801592a:	e00e      	b.n	801594a <_Balloc+0x6e>
 801592c:	2221      	movs	r2, #33	; 0x21
 801592e:	2104      	movs	r1, #4
 8015930:	4620      	mov	r0, r4
 8015932:	f000 fc8f 	bl	8016254 <_calloc_r>
 8015936:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015938:	60f0      	str	r0, [r6, #12]
 801593a:	68db      	ldr	r3, [r3, #12]
 801593c:	2b00      	cmp	r3, #0
 801593e:	d1e4      	bne.n	801590a <_Balloc+0x2e>
 8015940:	2000      	movs	r0, #0
 8015942:	bd70      	pop	{r4, r5, r6, pc}
 8015944:	6802      	ldr	r2, [r0, #0]
 8015946:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801594a:	2300      	movs	r3, #0
 801594c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015950:	e7f7      	b.n	8015942 <_Balloc+0x66>
 8015952:	bf00      	nop
 8015954:	08063436 	.word	0x08063436
 8015958:	080635a0 	.word	0x080635a0

0801595c <_Bfree>:
 801595c:	b570      	push	{r4, r5, r6, lr}
 801595e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015960:	4605      	mov	r5, r0
 8015962:	460c      	mov	r4, r1
 8015964:	b976      	cbnz	r6, 8015984 <_Bfree+0x28>
 8015966:	2010      	movs	r0, #16
 8015968:	f7fc fb40 	bl	8011fec <malloc>
 801596c:	4602      	mov	r2, r0
 801596e:	6268      	str	r0, [r5, #36]	; 0x24
 8015970:	b920      	cbnz	r0, 801597c <_Bfree+0x20>
 8015972:	4b09      	ldr	r3, [pc, #36]	; (8015998 <_Bfree+0x3c>)
 8015974:	4809      	ldr	r0, [pc, #36]	; (801599c <_Bfree+0x40>)
 8015976:	218a      	movs	r1, #138	; 0x8a
 8015978:	f7fc fade 	bl	8011f38 <__assert_func>
 801597c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015980:	6006      	str	r6, [r0, #0]
 8015982:	60c6      	str	r6, [r0, #12]
 8015984:	b13c      	cbz	r4, 8015996 <_Bfree+0x3a>
 8015986:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015988:	6862      	ldr	r2, [r4, #4]
 801598a:	68db      	ldr	r3, [r3, #12]
 801598c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015990:	6021      	str	r1, [r4, #0]
 8015992:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015996:	bd70      	pop	{r4, r5, r6, pc}
 8015998:	08063436 	.word	0x08063436
 801599c:	080635a0 	.word	0x080635a0

080159a0 <__multadd>:
 80159a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159a4:	690e      	ldr	r6, [r1, #16]
 80159a6:	4607      	mov	r7, r0
 80159a8:	4698      	mov	r8, r3
 80159aa:	460c      	mov	r4, r1
 80159ac:	f101 0014 	add.w	r0, r1, #20
 80159b0:	2300      	movs	r3, #0
 80159b2:	6805      	ldr	r5, [r0, #0]
 80159b4:	b2a9      	uxth	r1, r5
 80159b6:	fb02 8101 	mla	r1, r2, r1, r8
 80159ba:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80159be:	0c2d      	lsrs	r5, r5, #16
 80159c0:	fb02 c505 	mla	r5, r2, r5, ip
 80159c4:	b289      	uxth	r1, r1
 80159c6:	3301      	adds	r3, #1
 80159c8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80159cc:	429e      	cmp	r6, r3
 80159ce:	f840 1b04 	str.w	r1, [r0], #4
 80159d2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80159d6:	dcec      	bgt.n	80159b2 <__multadd+0x12>
 80159d8:	f1b8 0f00 	cmp.w	r8, #0
 80159dc:	d022      	beq.n	8015a24 <__multadd+0x84>
 80159de:	68a3      	ldr	r3, [r4, #8]
 80159e0:	42b3      	cmp	r3, r6
 80159e2:	dc19      	bgt.n	8015a18 <__multadd+0x78>
 80159e4:	6861      	ldr	r1, [r4, #4]
 80159e6:	4638      	mov	r0, r7
 80159e8:	3101      	adds	r1, #1
 80159ea:	f7ff ff77 	bl	80158dc <_Balloc>
 80159ee:	4605      	mov	r5, r0
 80159f0:	b928      	cbnz	r0, 80159fe <__multadd+0x5e>
 80159f2:	4602      	mov	r2, r0
 80159f4:	4b0d      	ldr	r3, [pc, #52]	; (8015a2c <__multadd+0x8c>)
 80159f6:	480e      	ldr	r0, [pc, #56]	; (8015a30 <__multadd+0x90>)
 80159f8:	21b5      	movs	r1, #181	; 0xb5
 80159fa:	f7fc fa9d 	bl	8011f38 <__assert_func>
 80159fe:	6922      	ldr	r2, [r4, #16]
 8015a00:	3202      	adds	r2, #2
 8015a02:	f104 010c 	add.w	r1, r4, #12
 8015a06:	0092      	lsls	r2, r2, #2
 8015a08:	300c      	adds	r0, #12
 8015a0a:	f7fc faff 	bl	801200c <memcpy>
 8015a0e:	4621      	mov	r1, r4
 8015a10:	4638      	mov	r0, r7
 8015a12:	f7ff ffa3 	bl	801595c <_Bfree>
 8015a16:	462c      	mov	r4, r5
 8015a18:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8015a1c:	3601      	adds	r6, #1
 8015a1e:	f8c3 8014 	str.w	r8, [r3, #20]
 8015a22:	6126      	str	r6, [r4, #16]
 8015a24:	4620      	mov	r0, r4
 8015a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a2a:	bf00      	nop
 8015a2c:	080634ac 	.word	0x080634ac
 8015a30:	080635a0 	.word	0x080635a0

08015a34 <__s2b>:
 8015a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015a38:	460c      	mov	r4, r1
 8015a3a:	4615      	mov	r5, r2
 8015a3c:	461f      	mov	r7, r3
 8015a3e:	2209      	movs	r2, #9
 8015a40:	3308      	adds	r3, #8
 8015a42:	4606      	mov	r6, r0
 8015a44:	fb93 f3f2 	sdiv	r3, r3, r2
 8015a48:	2100      	movs	r1, #0
 8015a4a:	2201      	movs	r2, #1
 8015a4c:	429a      	cmp	r2, r3
 8015a4e:	db09      	blt.n	8015a64 <__s2b+0x30>
 8015a50:	4630      	mov	r0, r6
 8015a52:	f7ff ff43 	bl	80158dc <_Balloc>
 8015a56:	b940      	cbnz	r0, 8015a6a <__s2b+0x36>
 8015a58:	4602      	mov	r2, r0
 8015a5a:	4b19      	ldr	r3, [pc, #100]	; (8015ac0 <__s2b+0x8c>)
 8015a5c:	4819      	ldr	r0, [pc, #100]	; (8015ac4 <__s2b+0x90>)
 8015a5e:	21ce      	movs	r1, #206	; 0xce
 8015a60:	f7fc fa6a 	bl	8011f38 <__assert_func>
 8015a64:	0052      	lsls	r2, r2, #1
 8015a66:	3101      	adds	r1, #1
 8015a68:	e7f0      	b.n	8015a4c <__s2b+0x18>
 8015a6a:	9b08      	ldr	r3, [sp, #32]
 8015a6c:	6143      	str	r3, [r0, #20]
 8015a6e:	2d09      	cmp	r5, #9
 8015a70:	f04f 0301 	mov.w	r3, #1
 8015a74:	6103      	str	r3, [r0, #16]
 8015a76:	dd16      	ble.n	8015aa6 <__s2b+0x72>
 8015a78:	f104 0909 	add.w	r9, r4, #9
 8015a7c:	46c8      	mov	r8, r9
 8015a7e:	442c      	add	r4, r5
 8015a80:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015a84:	4601      	mov	r1, r0
 8015a86:	3b30      	subs	r3, #48	; 0x30
 8015a88:	220a      	movs	r2, #10
 8015a8a:	4630      	mov	r0, r6
 8015a8c:	f7ff ff88 	bl	80159a0 <__multadd>
 8015a90:	45a0      	cmp	r8, r4
 8015a92:	d1f5      	bne.n	8015a80 <__s2b+0x4c>
 8015a94:	f1a5 0408 	sub.w	r4, r5, #8
 8015a98:	444c      	add	r4, r9
 8015a9a:	1b2d      	subs	r5, r5, r4
 8015a9c:	1963      	adds	r3, r4, r5
 8015a9e:	42bb      	cmp	r3, r7
 8015aa0:	db04      	blt.n	8015aac <__s2b+0x78>
 8015aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015aa6:	340a      	adds	r4, #10
 8015aa8:	2509      	movs	r5, #9
 8015aaa:	e7f6      	b.n	8015a9a <__s2b+0x66>
 8015aac:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015ab0:	4601      	mov	r1, r0
 8015ab2:	3b30      	subs	r3, #48	; 0x30
 8015ab4:	220a      	movs	r2, #10
 8015ab6:	4630      	mov	r0, r6
 8015ab8:	f7ff ff72 	bl	80159a0 <__multadd>
 8015abc:	e7ee      	b.n	8015a9c <__s2b+0x68>
 8015abe:	bf00      	nop
 8015ac0:	080634ac 	.word	0x080634ac
 8015ac4:	080635a0 	.word	0x080635a0

08015ac8 <__hi0bits>:
 8015ac8:	0c03      	lsrs	r3, r0, #16
 8015aca:	041b      	lsls	r3, r3, #16
 8015acc:	b9d3      	cbnz	r3, 8015b04 <__hi0bits+0x3c>
 8015ace:	0400      	lsls	r0, r0, #16
 8015ad0:	2310      	movs	r3, #16
 8015ad2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015ad6:	bf04      	itt	eq
 8015ad8:	0200      	lsleq	r0, r0, #8
 8015ada:	3308      	addeq	r3, #8
 8015adc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015ae0:	bf04      	itt	eq
 8015ae2:	0100      	lsleq	r0, r0, #4
 8015ae4:	3304      	addeq	r3, #4
 8015ae6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015aea:	bf04      	itt	eq
 8015aec:	0080      	lsleq	r0, r0, #2
 8015aee:	3302      	addeq	r3, #2
 8015af0:	2800      	cmp	r0, #0
 8015af2:	db05      	blt.n	8015b00 <__hi0bits+0x38>
 8015af4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015af8:	f103 0301 	add.w	r3, r3, #1
 8015afc:	bf08      	it	eq
 8015afe:	2320      	moveq	r3, #32
 8015b00:	4618      	mov	r0, r3
 8015b02:	4770      	bx	lr
 8015b04:	2300      	movs	r3, #0
 8015b06:	e7e4      	b.n	8015ad2 <__hi0bits+0xa>

08015b08 <__lo0bits>:
 8015b08:	6803      	ldr	r3, [r0, #0]
 8015b0a:	f013 0207 	ands.w	r2, r3, #7
 8015b0e:	4601      	mov	r1, r0
 8015b10:	d00b      	beq.n	8015b2a <__lo0bits+0x22>
 8015b12:	07da      	lsls	r2, r3, #31
 8015b14:	d424      	bmi.n	8015b60 <__lo0bits+0x58>
 8015b16:	0798      	lsls	r0, r3, #30
 8015b18:	bf49      	itett	mi
 8015b1a:	085b      	lsrmi	r3, r3, #1
 8015b1c:	089b      	lsrpl	r3, r3, #2
 8015b1e:	2001      	movmi	r0, #1
 8015b20:	600b      	strmi	r3, [r1, #0]
 8015b22:	bf5c      	itt	pl
 8015b24:	600b      	strpl	r3, [r1, #0]
 8015b26:	2002      	movpl	r0, #2
 8015b28:	4770      	bx	lr
 8015b2a:	b298      	uxth	r0, r3
 8015b2c:	b9b0      	cbnz	r0, 8015b5c <__lo0bits+0x54>
 8015b2e:	0c1b      	lsrs	r3, r3, #16
 8015b30:	2010      	movs	r0, #16
 8015b32:	f013 0fff 	tst.w	r3, #255	; 0xff
 8015b36:	bf04      	itt	eq
 8015b38:	0a1b      	lsreq	r3, r3, #8
 8015b3a:	3008      	addeq	r0, #8
 8015b3c:	071a      	lsls	r2, r3, #28
 8015b3e:	bf04      	itt	eq
 8015b40:	091b      	lsreq	r3, r3, #4
 8015b42:	3004      	addeq	r0, #4
 8015b44:	079a      	lsls	r2, r3, #30
 8015b46:	bf04      	itt	eq
 8015b48:	089b      	lsreq	r3, r3, #2
 8015b4a:	3002      	addeq	r0, #2
 8015b4c:	07da      	lsls	r2, r3, #31
 8015b4e:	d403      	bmi.n	8015b58 <__lo0bits+0x50>
 8015b50:	085b      	lsrs	r3, r3, #1
 8015b52:	f100 0001 	add.w	r0, r0, #1
 8015b56:	d005      	beq.n	8015b64 <__lo0bits+0x5c>
 8015b58:	600b      	str	r3, [r1, #0]
 8015b5a:	4770      	bx	lr
 8015b5c:	4610      	mov	r0, r2
 8015b5e:	e7e8      	b.n	8015b32 <__lo0bits+0x2a>
 8015b60:	2000      	movs	r0, #0
 8015b62:	4770      	bx	lr
 8015b64:	2020      	movs	r0, #32
 8015b66:	4770      	bx	lr

08015b68 <__i2b>:
 8015b68:	b510      	push	{r4, lr}
 8015b6a:	460c      	mov	r4, r1
 8015b6c:	2101      	movs	r1, #1
 8015b6e:	f7ff feb5 	bl	80158dc <_Balloc>
 8015b72:	4602      	mov	r2, r0
 8015b74:	b928      	cbnz	r0, 8015b82 <__i2b+0x1a>
 8015b76:	4b05      	ldr	r3, [pc, #20]	; (8015b8c <__i2b+0x24>)
 8015b78:	4805      	ldr	r0, [pc, #20]	; (8015b90 <__i2b+0x28>)
 8015b7a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8015b7e:	f7fc f9db 	bl	8011f38 <__assert_func>
 8015b82:	2301      	movs	r3, #1
 8015b84:	6144      	str	r4, [r0, #20]
 8015b86:	6103      	str	r3, [r0, #16]
 8015b88:	bd10      	pop	{r4, pc}
 8015b8a:	bf00      	nop
 8015b8c:	080634ac 	.word	0x080634ac
 8015b90:	080635a0 	.word	0x080635a0

08015b94 <__multiply>:
 8015b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b98:	4614      	mov	r4, r2
 8015b9a:	690a      	ldr	r2, [r1, #16]
 8015b9c:	6923      	ldr	r3, [r4, #16]
 8015b9e:	429a      	cmp	r2, r3
 8015ba0:	bfb8      	it	lt
 8015ba2:	460b      	movlt	r3, r1
 8015ba4:	460d      	mov	r5, r1
 8015ba6:	bfbc      	itt	lt
 8015ba8:	4625      	movlt	r5, r4
 8015baa:	461c      	movlt	r4, r3
 8015bac:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8015bb0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8015bb4:	68ab      	ldr	r3, [r5, #8]
 8015bb6:	6869      	ldr	r1, [r5, #4]
 8015bb8:	eb0a 0709 	add.w	r7, sl, r9
 8015bbc:	42bb      	cmp	r3, r7
 8015bbe:	b085      	sub	sp, #20
 8015bc0:	bfb8      	it	lt
 8015bc2:	3101      	addlt	r1, #1
 8015bc4:	f7ff fe8a 	bl	80158dc <_Balloc>
 8015bc8:	b930      	cbnz	r0, 8015bd8 <__multiply+0x44>
 8015bca:	4602      	mov	r2, r0
 8015bcc:	4b42      	ldr	r3, [pc, #264]	; (8015cd8 <__multiply+0x144>)
 8015bce:	4843      	ldr	r0, [pc, #268]	; (8015cdc <__multiply+0x148>)
 8015bd0:	f240 115d 	movw	r1, #349	; 0x15d
 8015bd4:	f7fc f9b0 	bl	8011f38 <__assert_func>
 8015bd8:	f100 0614 	add.w	r6, r0, #20
 8015bdc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8015be0:	4633      	mov	r3, r6
 8015be2:	2200      	movs	r2, #0
 8015be4:	4543      	cmp	r3, r8
 8015be6:	d31e      	bcc.n	8015c26 <__multiply+0x92>
 8015be8:	f105 0c14 	add.w	ip, r5, #20
 8015bec:	f104 0314 	add.w	r3, r4, #20
 8015bf0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8015bf4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8015bf8:	9202      	str	r2, [sp, #8]
 8015bfa:	ebac 0205 	sub.w	r2, ip, r5
 8015bfe:	3a15      	subs	r2, #21
 8015c00:	f022 0203 	bic.w	r2, r2, #3
 8015c04:	3204      	adds	r2, #4
 8015c06:	f105 0115 	add.w	r1, r5, #21
 8015c0a:	458c      	cmp	ip, r1
 8015c0c:	bf38      	it	cc
 8015c0e:	2204      	movcc	r2, #4
 8015c10:	9201      	str	r2, [sp, #4]
 8015c12:	9a02      	ldr	r2, [sp, #8]
 8015c14:	9303      	str	r3, [sp, #12]
 8015c16:	429a      	cmp	r2, r3
 8015c18:	d808      	bhi.n	8015c2c <__multiply+0x98>
 8015c1a:	2f00      	cmp	r7, #0
 8015c1c:	dc55      	bgt.n	8015cca <__multiply+0x136>
 8015c1e:	6107      	str	r7, [r0, #16]
 8015c20:	b005      	add	sp, #20
 8015c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c26:	f843 2b04 	str.w	r2, [r3], #4
 8015c2a:	e7db      	b.n	8015be4 <__multiply+0x50>
 8015c2c:	f8b3 a000 	ldrh.w	sl, [r3]
 8015c30:	f1ba 0f00 	cmp.w	sl, #0
 8015c34:	d020      	beq.n	8015c78 <__multiply+0xe4>
 8015c36:	f105 0e14 	add.w	lr, r5, #20
 8015c3a:	46b1      	mov	r9, r6
 8015c3c:	2200      	movs	r2, #0
 8015c3e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8015c42:	f8d9 b000 	ldr.w	fp, [r9]
 8015c46:	b2a1      	uxth	r1, r4
 8015c48:	fa1f fb8b 	uxth.w	fp, fp
 8015c4c:	fb0a b101 	mla	r1, sl, r1, fp
 8015c50:	4411      	add	r1, r2
 8015c52:	f8d9 2000 	ldr.w	r2, [r9]
 8015c56:	0c24      	lsrs	r4, r4, #16
 8015c58:	0c12      	lsrs	r2, r2, #16
 8015c5a:	fb0a 2404 	mla	r4, sl, r4, r2
 8015c5e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8015c62:	b289      	uxth	r1, r1
 8015c64:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8015c68:	45f4      	cmp	ip, lr
 8015c6a:	f849 1b04 	str.w	r1, [r9], #4
 8015c6e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8015c72:	d8e4      	bhi.n	8015c3e <__multiply+0xaa>
 8015c74:	9901      	ldr	r1, [sp, #4]
 8015c76:	5072      	str	r2, [r6, r1]
 8015c78:	9a03      	ldr	r2, [sp, #12]
 8015c7a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015c7e:	3304      	adds	r3, #4
 8015c80:	f1b9 0f00 	cmp.w	r9, #0
 8015c84:	d01f      	beq.n	8015cc6 <__multiply+0x132>
 8015c86:	6834      	ldr	r4, [r6, #0]
 8015c88:	f105 0114 	add.w	r1, r5, #20
 8015c8c:	46b6      	mov	lr, r6
 8015c8e:	f04f 0a00 	mov.w	sl, #0
 8015c92:	880a      	ldrh	r2, [r1, #0]
 8015c94:	f8be b002 	ldrh.w	fp, [lr, #2]
 8015c98:	fb09 b202 	mla	r2, r9, r2, fp
 8015c9c:	4492      	add	sl, r2
 8015c9e:	b2a4      	uxth	r4, r4
 8015ca0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8015ca4:	f84e 4b04 	str.w	r4, [lr], #4
 8015ca8:	f851 4b04 	ldr.w	r4, [r1], #4
 8015cac:	f8be 2000 	ldrh.w	r2, [lr]
 8015cb0:	0c24      	lsrs	r4, r4, #16
 8015cb2:	fb09 2404 	mla	r4, r9, r4, r2
 8015cb6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8015cba:	458c      	cmp	ip, r1
 8015cbc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8015cc0:	d8e7      	bhi.n	8015c92 <__multiply+0xfe>
 8015cc2:	9a01      	ldr	r2, [sp, #4]
 8015cc4:	50b4      	str	r4, [r6, r2]
 8015cc6:	3604      	adds	r6, #4
 8015cc8:	e7a3      	b.n	8015c12 <__multiply+0x7e>
 8015cca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d1a5      	bne.n	8015c1e <__multiply+0x8a>
 8015cd2:	3f01      	subs	r7, #1
 8015cd4:	e7a1      	b.n	8015c1a <__multiply+0x86>
 8015cd6:	bf00      	nop
 8015cd8:	080634ac 	.word	0x080634ac
 8015cdc:	080635a0 	.word	0x080635a0

08015ce0 <__pow5mult>:
 8015ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ce4:	4615      	mov	r5, r2
 8015ce6:	f012 0203 	ands.w	r2, r2, #3
 8015cea:	4606      	mov	r6, r0
 8015cec:	460f      	mov	r7, r1
 8015cee:	d007      	beq.n	8015d00 <__pow5mult+0x20>
 8015cf0:	4c25      	ldr	r4, [pc, #148]	; (8015d88 <__pow5mult+0xa8>)
 8015cf2:	3a01      	subs	r2, #1
 8015cf4:	2300      	movs	r3, #0
 8015cf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015cfa:	f7ff fe51 	bl	80159a0 <__multadd>
 8015cfe:	4607      	mov	r7, r0
 8015d00:	10ad      	asrs	r5, r5, #2
 8015d02:	d03d      	beq.n	8015d80 <__pow5mult+0xa0>
 8015d04:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015d06:	b97c      	cbnz	r4, 8015d28 <__pow5mult+0x48>
 8015d08:	2010      	movs	r0, #16
 8015d0a:	f7fc f96f 	bl	8011fec <malloc>
 8015d0e:	4602      	mov	r2, r0
 8015d10:	6270      	str	r0, [r6, #36]	; 0x24
 8015d12:	b928      	cbnz	r0, 8015d20 <__pow5mult+0x40>
 8015d14:	4b1d      	ldr	r3, [pc, #116]	; (8015d8c <__pow5mult+0xac>)
 8015d16:	481e      	ldr	r0, [pc, #120]	; (8015d90 <__pow5mult+0xb0>)
 8015d18:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015d1c:	f7fc f90c 	bl	8011f38 <__assert_func>
 8015d20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015d24:	6004      	str	r4, [r0, #0]
 8015d26:	60c4      	str	r4, [r0, #12]
 8015d28:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015d2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015d30:	b94c      	cbnz	r4, 8015d46 <__pow5mult+0x66>
 8015d32:	f240 2171 	movw	r1, #625	; 0x271
 8015d36:	4630      	mov	r0, r6
 8015d38:	f7ff ff16 	bl	8015b68 <__i2b>
 8015d3c:	2300      	movs	r3, #0
 8015d3e:	f8c8 0008 	str.w	r0, [r8, #8]
 8015d42:	4604      	mov	r4, r0
 8015d44:	6003      	str	r3, [r0, #0]
 8015d46:	f04f 0900 	mov.w	r9, #0
 8015d4a:	07eb      	lsls	r3, r5, #31
 8015d4c:	d50a      	bpl.n	8015d64 <__pow5mult+0x84>
 8015d4e:	4639      	mov	r1, r7
 8015d50:	4622      	mov	r2, r4
 8015d52:	4630      	mov	r0, r6
 8015d54:	f7ff ff1e 	bl	8015b94 <__multiply>
 8015d58:	4639      	mov	r1, r7
 8015d5a:	4680      	mov	r8, r0
 8015d5c:	4630      	mov	r0, r6
 8015d5e:	f7ff fdfd 	bl	801595c <_Bfree>
 8015d62:	4647      	mov	r7, r8
 8015d64:	106d      	asrs	r5, r5, #1
 8015d66:	d00b      	beq.n	8015d80 <__pow5mult+0xa0>
 8015d68:	6820      	ldr	r0, [r4, #0]
 8015d6a:	b938      	cbnz	r0, 8015d7c <__pow5mult+0x9c>
 8015d6c:	4622      	mov	r2, r4
 8015d6e:	4621      	mov	r1, r4
 8015d70:	4630      	mov	r0, r6
 8015d72:	f7ff ff0f 	bl	8015b94 <__multiply>
 8015d76:	6020      	str	r0, [r4, #0]
 8015d78:	f8c0 9000 	str.w	r9, [r0]
 8015d7c:	4604      	mov	r4, r0
 8015d7e:	e7e4      	b.n	8015d4a <__pow5mult+0x6a>
 8015d80:	4638      	mov	r0, r7
 8015d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015d86:	bf00      	nop
 8015d88:	080636f0 	.word	0x080636f0
 8015d8c:	08063436 	.word	0x08063436
 8015d90:	080635a0 	.word	0x080635a0

08015d94 <__lshift>:
 8015d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d98:	460c      	mov	r4, r1
 8015d9a:	6849      	ldr	r1, [r1, #4]
 8015d9c:	6923      	ldr	r3, [r4, #16]
 8015d9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015da2:	68a3      	ldr	r3, [r4, #8]
 8015da4:	4607      	mov	r7, r0
 8015da6:	4691      	mov	r9, r2
 8015da8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015dac:	f108 0601 	add.w	r6, r8, #1
 8015db0:	42b3      	cmp	r3, r6
 8015db2:	db0b      	blt.n	8015dcc <__lshift+0x38>
 8015db4:	4638      	mov	r0, r7
 8015db6:	f7ff fd91 	bl	80158dc <_Balloc>
 8015dba:	4605      	mov	r5, r0
 8015dbc:	b948      	cbnz	r0, 8015dd2 <__lshift+0x3e>
 8015dbe:	4602      	mov	r2, r0
 8015dc0:	4b28      	ldr	r3, [pc, #160]	; (8015e64 <__lshift+0xd0>)
 8015dc2:	4829      	ldr	r0, [pc, #164]	; (8015e68 <__lshift+0xd4>)
 8015dc4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8015dc8:	f7fc f8b6 	bl	8011f38 <__assert_func>
 8015dcc:	3101      	adds	r1, #1
 8015dce:	005b      	lsls	r3, r3, #1
 8015dd0:	e7ee      	b.n	8015db0 <__lshift+0x1c>
 8015dd2:	2300      	movs	r3, #0
 8015dd4:	f100 0114 	add.w	r1, r0, #20
 8015dd8:	f100 0210 	add.w	r2, r0, #16
 8015ddc:	4618      	mov	r0, r3
 8015dde:	4553      	cmp	r3, sl
 8015de0:	db33      	blt.n	8015e4a <__lshift+0xb6>
 8015de2:	6920      	ldr	r0, [r4, #16]
 8015de4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015de8:	f104 0314 	add.w	r3, r4, #20
 8015dec:	f019 091f 	ands.w	r9, r9, #31
 8015df0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015df4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015df8:	d02b      	beq.n	8015e52 <__lshift+0xbe>
 8015dfa:	f1c9 0e20 	rsb	lr, r9, #32
 8015dfe:	468a      	mov	sl, r1
 8015e00:	2200      	movs	r2, #0
 8015e02:	6818      	ldr	r0, [r3, #0]
 8015e04:	fa00 f009 	lsl.w	r0, r0, r9
 8015e08:	4302      	orrs	r2, r0
 8015e0a:	f84a 2b04 	str.w	r2, [sl], #4
 8015e0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015e12:	459c      	cmp	ip, r3
 8015e14:	fa22 f20e 	lsr.w	r2, r2, lr
 8015e18:	d8f3      	bhi.n	8015e02 <__lshift+0x6e>
 8015e1a:	ebac 0304 	sub.w	r3, ip, r4
 8015e1e:	3b15      	subs	r3, #21
 8015e20:	f023 0303 	bic.w	r3, r3, #3
 8015e24:	3304      	adds	r3, #4
 8015e26:	f104 0015 	add.w	r0, r4, #21
 8015e2a:	4584      	cmp	ip, r0
 8015e2c:	bf38      	it	cc
 8015e2e:	2304      	movcc	r3, #4
 8015e30:	50ca      	str	r2, [r1, r3]
 8015e32:	b10a      	cbz	r2, 8015e38 <__lshift+0xa4>
 8015e34:	f108 0602 	add.w	r6, r8, #2
 8015e38:	3e01      	subs	r6, #1
 8015e3a:	4638      	mov	r0, r7
 8015e3c:	612e      	str	r6, [r5, #16]
 8015e3e:	4621      	mov	r1, r4
 8015e40:	f7ff fd8c 	bl	801595c <_Bfree>
 8015e44:	4628      	mov	r0, r5
 8015e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8015e4e:	3301      	adds	r3, #1
 8015e50:	e7c5      	b.n	8015dde <__lshift+0x4a>
 8015e52:	3904      	subs	r1, #4
 8015e54:	f853 2b04 	ldr.w	r2, [r3], #4
 8015e58:	f841 2f04 	str.w	r2, [r1, #4]!
 8015e5c:	459c      	cmp	ip, r3
 8015e5e:	d8f9      	bhi.n	8015e54 <__lshift+0xc0>
 8015e60:	e7ea      	b.n	8015e38 <__lshift+0xa4>
 8015e62:	bf00      	nop
 8015e64:	080634ac 	.word	0x080634ac
 8015e68:	080635a0 	.word	0x080635a0

08015e6c <__mcmp>:
 8015e6c:	b530      	push	{r4, r5, lr}
 8015e6e:	6902      	ldr	r2, [r0, #16]
 8015e70:	690c      	ldr	r4, [r1, #16]
 8015e72:	1b12      	subs	r2, r2, r4
 8015e74:	d10e      	bne.n	8015e94 <__mcmp+0x28>
 8015e76:	f100 0314 	add.w	r3, r0, #20
 8015e7a:	3114      	adds	r1, #20
 8015e7c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015e80:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015e84:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015e88:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015e8c:	42a5      	cmp	r5, r4
 8015e8e:	d003      	beq.n	8015e98 <__mcmp+0x2c>
 8015e90:	d305      	bcc.n	8015e9e <__mcmp+0x32>
 8015e92:	2201      	movs	r2, #1
 8015e94:	4610      	mov	r0, r2
 8015e96:	bd30      	pop	{r4, r5, pc}
 8015e98:	4283      	cmp	r3, r0
 8015e9a:	d3f3      	bcc.n	8015e84 <__mcmp+0x18>
 8015e9c:	e7fa      	b.n	8015e94 <__mcmp+0x28>
 8015e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8015ea2:	e7f7      	b.n	8015e94 <__mcmp+0x28>

08015ea4 <__mdiff>:
 8015ea4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ea8:	460c      	mov	r4, r1
 8015eaa:	4606      	mov	r6, r0
 8015eac:	4611      	mov	r1, r2
 8015eae:	4620      	mov	r0, r4
 8015eb0:	4617      	mov	r7, r2
 8015eb2:	f7ff ffdb 	bl	8015e6c <__mcmp>
 8015eb6:	1e05      	subs	r5, r0, #0
 8015eb8:	d110      	bne.n	8015edc <__mdiff+0x38>
 8015eba:	4629      	mov	r1, r5
 8015ebc:	4630      	mov	r0, r6
 8015ebe:	f7ff fd0d 	bl	80158dc <_Balloc>
 8015ec2:	b930      	cbnz	r0, 8015ed2 <__mdiff+0x2e>
 8015ec4:	4b39      	ldr	r3, [pc, #228]	; (8015fac <__mdiff+0x108>)
 8015ec6:	4602      	mov	r2, r0
 8015ec8:	f240 2132 	movw	r1, #562	; 0x232
 8015ecc:	4838      	ldr	r0, [pc, #224]	; (8015fb0 <__mdiff+0x10c>)
 8015ece:	f7fc f833 	bl	8011f38 <__assert_func>
 8015ed2:	2301      	movs	r3, #1
 8015ed4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015ed8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015edc:	bfa4      	itt	ge
 8015ede:	463b      	movge	r3, r7
 8015ee0:	4627      	movge	r7, r4
 8015ee2:	4630      	mov	r0, r6
 8015ee4:	6879      	ldr	r1, [r7, #4]
 8015ee6:	bfa6      	itte	ge
 8015ee8:	461c      	movge	r4, r3
 8015eea:	2500      	movge	r5, #0
 8015eec:	2501      	movlt	r5, #1
 8015eee:	f7ff fcf5 	bl	80158dc <_Balloc>
 8015ef2:	b920      	cbnz	r0, 8015efe <__mdiff+0x5a>
 8015ef4:	4b2d      	ldr	r3, [pc, #180]	; (8015fac <__mdiff+0x108>)
 8015ef6:	4602      	mov	r2, r0
 8015ef8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015efc:	e7e6      	b.n	8015ecc <__mdiff+0x28>
 8015efe:	693e      	ldr	r6, [r7, #16]
 8015f00:	60c5      	str	r5, [r0, #12]
 8015f02:	6925      	ldr	r5, [r4, #16]
 8015f04:	f107 0114 	add.w	r1, r7, #20
 8015f08:	f104 0914 	add.w	r9, r4, #20
 8015f0c:	f100 0e14 	add.w	lr, r0, #20
 8015f10:	f107 0210 	add.w	r2, r7, #16
 8015f14:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8015f18:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8015f1c:	46f2      	mov	sl, lr
 8015f1e:	2700      	movs	r7, #0
 8015f20:	f859 3b04 	ldr.w	r3, [r9], #4
 8015f24:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015f28:	fa1f f883 	uxth.w	r8, r3
 8015f2c:	fa17 f78b 	uxtah	r7, r7, fp
 8015f30:	0c1b      	lsrs	r3, r3, #16
 8015f32:	eba7 0808 	sub.w	r8, r7, r8
 8015f36:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015f3a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015f3e:	fa1f f888 	uxth.w	r8, r8
 8015f42:	141f      	asrs	r7, r3, #16
 8015f44:	454d      	cmp	r5, r9
 8015f46:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015f4a:	f84a 3b04 	str.w	r3, [sl], #4
 8015f4e:	d8e7      	bhi.n	8015f20 <__mdiff+0x7c>
 8015f50:	1b2b      	subs	r3, r5, r4
 8015f52:	3b15      	subs	r3, #21
 8015f54:	f023 0303 	bic.w	r3, r3, #3
 8015f58:	3304      	adds	r3, #4
 8015f5a:	3415      	adds	r4, #21
 8015f5c:	42a5      	cmp	r5, r4
 8015f5e:	bf38      	it	cc
 8015f60:	2304      	movcc	r3, #4
 8015f62:	4419      	add	r1, r3
 8015f64:	4473      	add	r3, lr
 8015f66:	469e      	mov	lr, r3
 8015f68:	460d      	mov	r5, r1
 8015f6a:	4565      	cmp	r5, ip
 8015f6c:	d30e      	bcc.n	8015f8c <__mdiff+0xe8>
 8015f6e:	f10c 0203 	add.w	r2, ip, #3
 8015f72:	1a52      	subs	r2, r2, r1
 8015f74:	f022 0203 	bic.w	r2, r2, #3
 8015f78:	3903      	subs	r1, #3
 8015f7a:	458c      	cmp	ip, r1
 8015f7c:	bf38      	it	cc
 8015f7e:	2200      	movcc	r2, #0
 8015f80:	441a      	add	r2, r3
 8015f82:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8015f86:	b17b      	cbz	r3, 8015fa8 <__mdiff+0x104>
 8015f88:	6106      	str	r6, [r0, #16]
 8015f8a:	e7a5      	b.n	8015ed8 <__mdiff+0x34>
 8015f8c:	f855 8b04 	ldr.w	r8, [r5], #4
 8015f90:	fa17 f488 	uxtah	r4, r7, r8
 8015f94:	1422      	asrs	r2, r4, #16
 8015f96:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8015f9a:	b2a4      	uxth	r4, r4
 8015f9c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8015fa0:	f84e 4b04 	str.w	r4, [lr], #4
 8015fa4:	1417      	asrs	r7, r2, #16
 8015fa6:	e7e0      	b.n	8015f6a <__mdiff+0xc6>
 8015fa8:	3e01      	subs	r6, #1
 8015faa:	e7ea      	b.n	8015f82 <__mdiff+0xde>
 8015fac:	080634ac 	.word	0x080634ac
 8015fb0:	080635a0 	.word	0x080635a0

08015fb4 <__ulp>:
 8015fb4:	b082      	sub	sp, #8
 8015fb6:	ed8d 0b00 	vstr	d0, [sp]
 8015fba:	9b01      	ldr	r3, [sp, #4]
 8015fbc:	4912      	ldr	r1, [pc, #72]	; (8016008 <__ulp+0x54>)
 8015fbe:	4019      	ands	r1, r3
 8015fc0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8015fc4:	2900      	cmp	r1, #0
 8015fc6:	dd05      	ble.n	8015fd4 <__ulp+0x20>
 8015fc8:	2200      	movs	r2, #0
 8015fca:	460b      	mov	r3, r1
 8015fcc:	ec43 2b10 	vmov	d0, r2, r3
 8015fd0:	b002      	add	sp, #8
 8015fd2:	4770      	bx	lr
 8015fd4:	4249      	negs	r1, r1
 8015fd6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8015fda:	ea4f 5021 	mov.w	r0, r1, asr #20
 8015fde:	f04f 0200 	mov.w	r2, #0
 8015fe2:	f04f 0300 	mov.w	r3, #0
 8015fe6:	da04      	bge.n	8015ff2 <__ulp+0x3e>
 8015fe8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8015fec:	fa41 f300 	asr.w	r3, r1, r0
 8015ff0:	e7ec      	b.n	8015fcc <__ulp+0x18>
 8015ff2:	f1a0 0114 	sub.w	r1, r0, #20
 8015ff6:	291e      	cmp	r1, #30
 8015ff8:	bfda      	itte	le
 8015ffa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8015ffe:	fa20 f101 	lsrle.w	r1, r0, r1
 8016002:	2101      	movgt	r1, #1
 8016004:	460a      	mov	r2, r1
 8016006:	e7e1      	b.n	8015fcc <__ulp+0x18>
 8016008:	7ff00000 	.word	0x7ff00000

0801600c <__b2d>:
 801600c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801600e:	6905      	ldr	r5, [r0, #16]
 8016010:	f100 0714 	add.w	r7, r0, #20
 8016014:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016018:	1f2e      	subs	r6, r5, #4
 801601a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801601e:	4620      	mov	r0, r4
 8016020:	f7ff fd52 	bl	8015ac8 <__hi0bits>
 8016024:	f1c0 0320 	rsb	r3, r0, #32
 8016028:	280a      	cmp	r0, #10
 801602a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80160a8 <__b2d+0x9c>
 801602e:	600b      	str	r3, [r1, #0]
 8016030:	dc14      	bgt.n	801605c <__b2d+0x50>
 8016032:	f1c0 0e0b 	rsb	lr, r0, #11
 8016036:	fa24 f10e 	lsr.w	r1, r4, lr
 801603a:	42b7      	cmp	r7, r6
 801603c:	ea41 030c 	orr.w	r3, r1, ip
 8016040:	bf34      	ite	cc
 8016042:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016046:	2100      	movcs	r1, #0
 8016048:	3015      	adds	r0, #21
 801604a:	fa04 f000 	lsl.w	r0, r4, r0
 801604e:	fa21 f10e 	lsr.w	r1, r1, lr
 8016052:	ea40 0201 	orr.w	r2, r0, r1
 8016056:	ec43 2b10 	vmov	d0, r2, r3
 801605a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801605c:	42b7      	cmp	r7, r6
 801605e:	bf3a      	itte	cc
 8016060:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016064:	f1a5 0608 	subcc.w	r6, r5, #8
 8016068:	2100      	movcs	r1, #0
 801606a:	380b      	subs	r0, #11
 801606c:	d017      	beq.n	801609e <__b2d+0x92>
 801606e:	f1c0 0c20 	rsb	ip, r0, #32
 8016072:	fa04 f500 	lsl.w	r5, r4, r0
 8016076:	42be      	cmp	r6, r7
 8016078:	fa21 f40c 	lsr.w	r4, r1, ip
 801607c:	ea45 0504 	orr.w	r5, r5, r4
 8016080:	bf8c      	ite	hi
 8016082:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016086:	2400      	movls	r4, #0
 8016088:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801608c:	fa01 f000 	lsl.w	r0, r1, r0
 8016090:	fa24 f40c 	lsr.w	r4, r4, ip
 8016094:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8016098:	ea40 0204 	orr.w	r2, r0, r4
 801609c:	e7db      	b.n	8016056 <__b2d+0x4a>
 801609e:	ea44 030c 	orr.w	r3, r4, ip
 80160a2:	460a      	mov	r2, r1
 80160a4:	e7d7      	b.n	8016056 <__b2d+0x4a>
 80160a6:	bf00      	nop
 80160a8:	3ff00000 	.word	0x3ff00000

080160ac <__d2b>:
 80160ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80160b0:	4689      	mov	r9, r1
 80160b2:	2101      	movs	r1, #1
 80160b4:	ec57 6b10 	vmov	r6, r7, d0
 80160b8:	4690      	mov	r8, r2
 80160ba:	f7ff fc0f 	bl	80158dc <_Balloc>
 80160be:	4604      	mov	r4, r0
 80160c0:	b930      	cbnz	r0, 80160d0 <__d2b+0x24>
 80160c2:	4602      	mov	r2, r0
 80160c4:	4b25      	ldr	r3, [pc, #148]	; (801615c <__d2b+0xb0>)
 80160c6:	4826      	ldr	r0, [pc, #152]	; (8016160 <__d2b+0xb4>)
 80160c8:	f240 310a 	movw	r1, #778	; 0x30a
 80160cc:	f7fb ff34 	bl	8011f38 <__assert_func>
 80160d0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80160d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80160d8:	bb35      	cbnz	r5, 8016128 <__d2b+0x7c>
 80160da:	2e00      	cmp	r6, #0
 80160dc:	9301      	str	r3, [sp, #4]
 80160de:	d028      	beq.n	8016132 <__d2b+0x86>
 80160e0:	4668      	mov	r0, sp
 80160e2:	9600      	str	r6, [sp, #0]
 80160e4:	f7ff fd10 	bl	8015b08 <__lo0bits>
 80160e8:	9900      	ldr	r1, [sp, #0]
 80160ea:	b300      	cbz	r0, 801612e <__d2b+0x82>
 80160ec:	9a01      	ldr	r2, [sp, #4]
 80160ee:	f1c0 0320 	rsb	r3, r0, #32
 80160f2:	fa02 f303 	lsl.w	r3, r2, r3
 80160f6:	430b      	orrs	r3, r1
 80160f8:	40c2      	lsrs	r2, r0
 80160fa:	6163      	str	r3, [r4, #20]
 80160fc:	9201      	str	r2, [sp, #4]
 80160fe:	9b01      	ldr	r3, [sp, #4]
 8016100:	61a3      	str	r3, [r4, #24]
 8016102:	2b00      	cmp	r3, #0
 8016104:	bf14      	ite	ne
 8016106:	2202      	movne	r2, #2
 8016108:	2201      	moveq	r2, #1
 801610a:	6122      	str	r2, [r4, #16]
 801610c:	b1d5      	cbz	r5, 8016144 <__d2b+0x98>
 801610e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016112:	4405      	add	r5, r0
 8016114:	f8c9 5000 	str.w	r5, [r9]
 8016118:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801611c:	f8c8 0000 	str.w	r0, [r8]
 8016120:	4620      	mov	r0, r4
 8016122:	b003      	add	sp, #12
 8016124:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016128:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801612c:	e7d5      	b.n	80160da <__d2b+0x2e>
 801612e:	6161      	str	r1, [r4, #20]
 8016130:	e7e5      	b.n	80160fe <__d2b+0x52>
 8016132:	a801      	add	r0, sp, #4
 8016134:	f7ff fce8 	bl	8015b08 <__lo0bits>
 8016138:	9b01      	ldr	r3, [sp, #4]
 801613a:	6163      	str	r3, [r4, #20]
 801613c:	2201      	movs	r2, #1
 801613e:	6122      	str	r2, [r4, #16]
 8016140:	3020      	adds	r0, #32
 8016142:	e7e3      	b.n	801610c <__d2b+0x60>
 8016144:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016148:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801614c:	f8c9 0000 	str.w	r0, [r9]
 8016150:	6918      	ldr	r0, [r3, #16]
 8016152:	f7ff fcb9 	bl	8015ac8 <__hi0bits>
 8016156:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801615a:	e7df      	b.n	801611c <__d2b+0x70>
 801615c:	080634ac 	.word	0x080634ac
 8016160:	080635a0 	.word	0x080635a0

08016164 <__ratio>:
 8016164:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016168:	468a      	mov	sl, r1
 801616a:	4669      	mov	r1, sp
 801616c:	4683      	mov	fp, r0
 801616e:	f7ff ff4d 	bl	801600c <__b2d>
 8016172:	a901      	add	r1, sp, #4
 8016174:	4650      	mov	r0, sl
 8016176:	ec59 8b10 	vmov	r8, r9, d0
 801617a:	ee10 6a10 	vmov	r6, s0
 801617e:	f7ff ff45 	bl	801600c <__b2d>
 8016182:	f8db 3010 	ldr.w	r3, [fp, #16]
 8016186:	f8da 2010 	ldr.w	r2, [sl, #16]
 801618a:	eba3 0c02 	sub.w	ip, r3, r2
 801618e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016192:	1a9b      	subs	r3, r3, r2
 8016194:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016198:	ec55 4b10 	vmov	r4, r5, d0
 801619c:	2b00      	cmp	r3, #0
 801619e:	ee10 0a10 	vmov	r0, s0
 80161a2:	bfce      	itee	gt
 80161a4:	464a      	movgt	r2, r9
 80161a6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80161aa:	462a      	movle	r2, r5
 80161ac:	464f      	mov	r7, r9
 80161ae:	4629      	mov	r1, r5
 80161b0:	bfcc      	ite	gt
 80161b2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80161b6:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80161ba:	ec47 6b17 	vmov	d7, r6, r7
 80161be:	ec41 0b16 	vmov	d6, r0, r1
 80161c2:	ee87 0b06 	vdiv.f64	d0, d7, d6
 80161c6:	b003      	add	sp, #12
 80161c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080161cc <__copybits>:
 80161cc:	3901      	subs	r1, #1
 80161ce:	b570      	push	{r4, r5, r6, lr}
 80161d0:	1149      	asrs	r1, r1, #5
 80161d2:	6914      	ldr	r4, [r2, #16]
 80161d4:	3101      	adds	r1, #1
 80161d6:	f102 0314 	add.w	r3, r2, #20
 80161da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80161de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80161e2:	1f05      	subs	r5, r0, #4
 80161e4:	42a3      	cmp	r3, r4
 80161e6:	d30c      	bcc.n	8016202 <__copybits+0x36>
 80161e8:	1aa3      	subs	r3, r4, r2
 80161ea:	3b11      	subs	r3, #17
 80161ec:	f023 0303 	bic.w	r3, r3, #3
 80161f0:	3211      	adds	r2, #17
 80161f2:	42a2      	cmp	r2, r4
 80161f4:	bf88      	it	hi
 80161f6:	2300      	movhi	r3, #0
 80161f8:	4418      	add	r0, r3
 80161fa:	2300      	movs	r3, #0
 80161fc:	4288      	cmp	r0, r1
 80161fe:	d305      	bcc.n	801620c <__copybits+0x40>
 8016200:	bd70      	pop	{r4, r5, r6, pc}
 8016202:	f853 6b04 	ldr.w	r6, [r3], #4
 8016206:	f845 6f04 	str.w	r6, [r5, #4]!
 801620a:	e7eb      	b.n	80161e4 <__copybits+0x18>
 801620c:	f840 3b04 	str.w	r3, [r0], #4
 8016210:	e7f4      	b.n	80161fc <__copybits+0x30>

08016212 <__any_on>:
 8016212:	f100 0214 	add.w	r2, r0, #20
 8016216:	6900      	ldr	r0, [r0, #16]
 8016218:	114b      	asrs	r3, r1, #5
 801621a:	4298      	cmp	r0, r3
 801621c:	b510      	push	{r4, lr}
 801621e:	db11      	blt.n	8016244 <__any_on+0x32>
 8016220:	dd0a      	ble.n	8016238 <__any_on+0x26>
 8016222:	f011 011f 	ands.w	r1, r1, #31
 8016226:	d007      	beq.n	8016238 <__any_on+0x26>
 8016228:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801622c:	fa24 f001 	lsr.w	r0, r4, r1
 8016230:	fa00 f101 	lsl.w	r1, r0, r1
 8016234:	428c      	cmp	r4, r1
 8016236:	d10b      	bne.n	8016250 <__any_on+0x3e>
 8016238:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801623c:	4293      	cmp	r3, r2
 801623e:	d803      	bhi.n	8016248 <__any_on+0x36>
 8016240:	2000      	movs	r0, #0
 8016242:	bd10      	pop	{r4, pc}
 8016244:	4603      	mov	r3, r0
 8016246:	e7f7      	b.n	8016238 <__any_on+0x26>
 8016248:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801624c:	2900      	cmp	r1, #0
 801624e:	d0f5      	beq.n	801623c <__any_on+0x2a>
 8016250:	2001      	movs	r0, #1
 8016252:	e7f6      	b.n	8016242 <__any_on+0x30>

08016254 <_calloc_r>:
 8016254:	b513      	push	{r0, r1, r4, lr}
 8016256:	434a      	muls	r2, r1
 8016258:	4611      	mov	r1, r2
 801625a:	9201      	str	r2, [sp, #4]
 801625c:	f7fb ff56 	bl	801210c <_malloc_r>
 8016260:	4604      	mov	r4, r0
 8016262:	b118      	cbz	r0, 801626c <_calloc_r+0x18>
 8016264:	9a01      	ldr	r2, [sp, #4]
 8016266:	2100      	movs	r1, #0
 8016268:	f7fb fef8 	bl	801205c <memset>
 801626c:	4620      	mov	r0, r4
 801626e:	b002      	add	sp, #8
 8016270:	bd10      	pop	{r4, pc}

08016272 <_realloc_r>:
 8016272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016274:	4607      	mov	r7, r0
 8016276:	4614      	mov	r4, r2
 8016278:	460e      	mov	r6, r1
 801627a:	b921      	cbnz	r1, 8016286 <_realloc_r+0x14>
 801627c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016280:	4611      	mov	r1, r2
 8016282:	f7fb bf43 	b.w	801210c <_malloc_r>
 8016286:	b922      	cbnz	r2, 8016292 <_realloc_r+0x20>
 8016288:	f7fb fef0 	bl	801206c <_free_r>
 801628c:	4625      	mov	r5, r4
 801628e:	4628      	mov	r0, r5
 8016290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016292:	f000 fa63 	bl	801675c <_malloc_usable_size_r>
 8016296:	42a0      	cmp	r0, r4
 8016298:	d20f      	bcs.n	80162ba <_realloc_r+0x48>
 801629a:	4621      	mov	r1, r4
 801629c:	4638      	mov	r0, r7
 801629e:	f7fb ff35 	bl	801210c <_malloc_r>
 80162a2:	4605      	mov	r5, r0
 80162a4:	2800      	cmp	r0, #0
 80162a6:	d0f2      	beq.n	801628e <_realloc_r+0x1c>
 80162a8:	4631      	mov	r1, r6
 80162aa:	4622      	mov	r2, r4
 80162ac:	f7fb feae 	bl	801200c <memcpy>
 80162b0:	4631      	mov	r1, r6
 80162b2:	4638      	mov	r0, r7
 80162b4:	f7fb feda 	bl	801206c <_free_r>
 80162b8:	e7e9      	b.n	801628e <_realloc_r+0x1c>
 80162ba:	4635      	mov	r5, r6
 80162bc:	e7e7      	b.n	801628e <_realloc_r+0x1c>

080162be <__ssputs_r>:
 80162be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80162c2:	688e      	ldr	r6, [r1, #8]
 80162c4:	429e      	cmp	r6, r3
 80162c6:	4682      	mov	sl, r0
 80162c8:	460c      	mov	r4, r1
 80162ca:	4690      	mov	r8, r2
 80162cc:	461f      	mov	r7, r3
 80162ce:	d838      	bhi.n	8016342 <__ssputs_r+0x84>
 80162d0:	898a      	ldrh	r2, [r1, #12]
 80162d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80162d6:	d032      	beq.n	801633e <__ssputs_r+0x80>
 80162d8:	6825      	ldr	r5, [r4, #0]
 80162da:	6909      	ldr	r1, [r1, #16]
 80162dc:	eba5 0901 	sub.w	r9, r5, r1
 80162e0:	6965      	ldr	r5, [r4, #20]
 80162e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80162e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80162ea:	3301      	adds	r3, #1
 80162ec:	444b      	add	r3, r9
 80162ee:	106d      	asrs	r5, r5, #1
 80162f0:	429d      	cmp	r5, r3
 80162f2:	bf38      	it	cc
 80162f4:	461d      	movcc	r5, r3
 80162f6:	0553      	lsls	r3, r2, #21
 80162f8:	d531      	bpl.n	801635e <__ssputs_r+0xa0>
 80162fa:	4629      	mov	r1, r5
 80162fc:	f7fb ff06 	bl	801210c <_malloc_r>
 8016300:	4606      	mov	r6, r0
 8016302:	b950      	cbnz	r0, 801631a <__ssputs_r+0x5c>
 8016304:	230c      	movs	r3, #12
 8016306:	f8ca 3000 	str.w	r3, [sl]
 801630a:	89a3      	ldrh	r3, [r4, #12]
 801630c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016310:	81a3      	strh	r3, [r4, #12]
 8016312:	f04f 30ff 	mov.w	r0, #4294967295
 8016316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801631a:	6921      	ldr	r1, [r4, #16]
 801631c:	464a      	mov	r2, r9
 801631e:	f7fb fe75 	bl	801200c <memcpy>
 8016322:	89a3      	ldrh	r3, [r4, #12]
 8016324:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801632c:	81a3      	strh	r3, [r4, #12]
 801632e:	6126      	str	r6, [r4, #16]
 8016330:	6165      	str	r5, [r4, #20]
 8016332:	444e      	add	r6, r9
 8016334:	eba5 0509 	sub.w	r5, r5, r9
 8016338:	6026      	str	r6, [r4, #0]
 801633a:	60a5      	str	r5, [r4, #8]
 801633c:	463e      	mov	r6, r7
 801633e:	42be      	cmp	r6, r7
 8016340:	d900      	bls.n	8016344 <__ssputs_r+0x86>
 8016342:	463e      	mov	r6, r7
 8016344:	4632      	mov	r2, r6
 8016346:	6820      	ldr	r0, [r4, #0]
 8016348:	4641      	mov	r1, r8
 801634a:	f7fb fe6d 	bl	8012028 <memmove>
 801634e:	68a3      	ldr	r3, [r4, #8]
 8016350:	6822      	ldr	r2, [r4, #0]
 8016352:	1b9b      	subs	r3, r3, r6
 8016354:	4432      	add	r2, r6
 8016356:	60a3      	str	r3, [r4, #8]
 8016358:	6022      	str	r2, [r4, #0]
 801635a:	2000      	movs	r0, #0
 801635c:	e7db      	b.n	8016316 <__ssputs_r+0x58>
 801635e:	462a      	mov	r2, r5
 8016360:	f7ff ff87 	bl	8016272 <_realloc_r>
 8016364:	4606      	mov	r6, r0
 8016366:	2800      	cmp	r0, #0
 8016368:	d1e1      	bne.n	801632e <__ssputs_r+0x70>
 801636a:	6921      	ldr	r1, [r4, #16]
 801636c:	4650      	mov	r0, sl
 801636e:	f7fb fe7d 	bl	801206c <_free_r>
 8016372:	e7c7      	b.n	8016304 <__ssputs_r+0x46>

08016374 <_svfiprintf_r>:
 8016374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016378:	4698      	mov	r8, r3
 801637a:	898b      	ldrh	r3, [r1, #12]
 801637c:	061b      	lsls	r3, r3, #24
 801637e:	b09d      	sub	sp, #116	; 0x74
 8016380:	4607      	mov	r7, r0
 8016382:	460d      	mov	r5, r1
 8016384:	4614      	mov	r4, r2
 8016386:	d50e      	bpl.n	80163a6 <_svfiprintf_r+0x32>
 8016388:	690b      	ldr	r3, [r1, #16]
 801638a:	b963      	cbnz	r3, 80163a6 <_svfiprintf_r+0x32>
 801638c:	2140      	movs	r1, #64	; 0x40
 801638e:	f7fb febd 	bl	801210c <_malloc_r>
 8016392:	6028      	str	r0, [r5, #0]
 8016394:	6128      	str	r0, [r5, #16]
 8016396:	b920      	cbnz	r0, 80163a2 <_svfiprintf_r+0x2e>
 8016398:	230c      	movs	r3, #12
 801639a:	603b      	str	r3, [r7, #0]
 801639c:	f04f 30ff 	mov.w	r0, #4294967295
 80163a0:	e0d1      	b.n	8016546 <_svfiprintf_r+0x1d2>
 80163a2:	2340      	movs	r3, #64	; 0x40
 80163a4:	616b      	str	r3, [r5, #20]
 80163a6:	2300      	movs	r3, #0
 80163a8:	9309      	str	r3, [sp, #36]	; 0x24
 80163aa:	2320      	movs	r3, #32
 80163ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80163b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80163b4:	2330      	movs	r3, #48	; 0x30
 80163b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8016560 <_svfiprintf_r+0x1ec>
 80163ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80163be:	f04f 0901 	mov.w	r9, #1
 80163c2:	4623      	mov	r3, r4
 80163c4:	469a      	mov	sl, r3
 80163c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80163ca:	b10a      	cbz	r2, 80163d0 <_svfiprintf_r+0x5c>
 80163cc:	2a25      	cmp	r2, #37	; 0x25
 80163ce:	d1f9      	bne.n	80163c4 <_svfiprintf_r+0x50>
 80163d0:	ebba 0b04 	subs.w	fp, sl, r4
 80163d4:	d00b      	beq.n	80163ee <_svfiprintf_r+0x7a>
 80163d6:	465b      	mov	r3, fp
 80163d8:	4622      	mov	r2, r4
 80163da:	4629      	mov	r1, r5
 80163dc:	4638      	mov	r0, r7
 80163de:	f7ff ff6e 	bl	80162be <__ssputs_r>
 80163e2:	3001      	adds	r0, #1
 80163e4:	f000 80aa 	beq.w	801653c <_svfiprintf_r+0x1c8>
 80163e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80163ea:	445a      	add	r2, fp
 80163ec:	9209      	str	r2, [sp, #36]	; 0x24
 80163ee:	f89a 3000 	ldrb.w	r3, [sl]
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	f000 80a2 	beq.w	801653c <_svfiprintf_r+0x1c8>
 80163f8:	2300      	movs	r3, #0
 80163fa:	f04f 32ff 	mov.w	r2, #4294967295
 80163fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016402:	f10a 0a01 	add.w	sl, sl, #1
 8016406:	9304      	str	r3, [sp, #16]
 8016408:	9307      	str	r3, [sp, #28]
 801640a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801640e:	931a      	str	r3, [sp, #104]	; 0x68
 8016410:	4654      	mov	r4, sl
 8016412:	2205      	movs	r2, #5
 8016414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016418:	4851      	ldr	r0, [pc, #324]	; (8016560 <_svfiprintf_r+0x1ec>)
 801641a:	f7e9 ff79 	bl	8000310 <memchr>
 801641e:	9a04      	ldr	r2, [sp, #16]
 8016420:	b9d8      	cbnz	r0, 801645a <_svfiprintf_r+0xe6>
 8016422:	06d0      	lsls	r0, r2, #27
 8016424:	bf44      	itt	mi
 8016426:	2320      	movmi	r3, #32
 8016428:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801642c:	0711      	lsls	r1, r2, #28
 801642e:	bf44      	itt	mi
 8016430:	232b      	movmi	r3, #43	; 0x2b
 8016432:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016436:	f89a 3000 	ldrb.w	r3, [sl]
 801643a:	2b2a      	cmp	r3, #42	; 0x2a
 801643c:	d015      	beq.n	801646a <_svfiprintf_r+0xf6>
 801643e:	9a07      	ldr	r2, [sp, #28]
 8016440:	4654      	mov	r4, sl
 8016442:	2000      	movs	r0, #0
 8016444:	f04f 0c0a 	mov.w	ip, #10
 8016448:	4621      	mov	r1, r4
 801644a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801644e:	3b30      	subs	r3, #48	; 0x30
 8016450:	2b09      	cmp	r3, #9
 8016452:	d94e      	bls.n	80164f2 <_svfiprintf_r+0x17e>
 8016454:	b1b0      	cbz	r0, 8016484 <_svfiprintf_r+0x110>
 8016456:	9207      	str	r2, [sp, #28]
 8016458:	e014      	b.n	8016484 <_svfiprintf_r+0x110>
 801645a:	eba0 0308 	sub.w	r3, r0, r8
 801645e:	fa09 f303 	lsl.w	r3, r9, r3
 8016462:	4313      	orrs	r3, r2
 8016464:	9304      	str	r3, [sp, #16]
 8016466:	46a2      	mov	sl, r4
 8016468:	e7d2      	b.n	8016410 <_svfiprintf_r+0x9c>
 801646a:	9b03      	ldr	r3, [sp, #12]
 801646c:	1d19      	adds	r1, r3, #4
 801646e:	681b      	ldr	r3, [r3, #0]
 8016470:	9103      	str	r1, [sp, #12]
 8016472:	2b00      	cmp	r3, #0
 8016474:	bfbb      	ittet	lt
 8016476:	425b      	neglt	r3, r3
 8016478:	f042 0202 	orrlt.w	r2, r2, #2
 801647c:	9307      	strge	r3, [sp, #28]
 801647e:	9307      	strlt	r3, [sp, #28]
 8016480:	bfb8      	it	lt
 8016482:	9204      	strlt	r2, [sp, #16]
 8016484:	7823      	ldrb	r3, [r4, #0]
 8016486:	2b2e      	cmp	r3, #46	; 0x2e
 8016488:	d10c      	bne.n	80164a4 <_svfiprintf_r+0x130>
 801648a:	7863      	ldrb	r3, [r4, #1]
 801648c:	2b2a      	cmp	r3, #42	; 0x2a
 801648e:	d135      	bne.n	80164fc <_svfiprintf_r+0x188>
 8016490:	9b03      	ldr	r3, [sp, #12]
 8016492:	1d1a      	adds	r2, r3, #4
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	9203      	str	r2, [sp, #12]
 8016498:	2b00      	cmp	r3, #0
 801649a:	bfb8      	it	lt
 801649c:	f04f 33ff 	movlt.w	r3, #4294967295
 80164a0:	3402      	adds	r4, #2
 80164a2:	9305      	str	r3, [sp, #20]
 80164a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8016570 <_svfiprintf_r+0x1fc>
 80164a8:	7821      	ldrb	r1, [r4, #0]
 80164aa:	2203      	movs	r2, #3
 80164ac:	4650      	mov	r0, sl
 80164ae:	f7e9 ff2f 	bl	8000310 <memchr>
 80164b2:	b140      	cbz	r0, 80164c6 <_svfiprintf_r+0x152>
 80164b4:	2340      	movs	r3, #64	; 0x40
 80164b6:	eba0 000a 	sub.w	r0, r0, sl
 80164ba:	fa03 f000 	lsl.w	r0, r3, r0
 80164be:	9b04      	ldr	r3, [sp, #16]
 80164c0:	4303      	orrs	r3, r0
 80164c2:	3401      	adds	r4, #1
 80164c4:	9304      	str	r3, [sp, #16]
 80164c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80164ca:	4826      	ldr	r0, [pc, #152]	; (8016564 <_svfiprintf_r+0x1f0>)
 80164cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80164d0:	2206      	movs	r2, #6
 80164d2:	f7e9 ff1d 	bl	8000310 <memchr>
 80164d6:	2800      	cmp	r0, #0
 80164d8:	d038      	beq.n	801654c <_svfiprintf_r+0x1d8>
 80164da:	4b23      	ldr	r3, [pc, #140]	; (8016568 <_svfiprintf_r+0x1f4>)
 80164dc:	bb1b      	cbnz	r3, 8016526 <_svfiprintf_r+0x1b2>
 80164de:	9b03      	ldr	r3, [sp, #12]
 80164e0:	3307      	adds	r3, #7
 80164e2:	f023 0307 	bic.w	r3, r3, #7
 80164e6:	3308      	adds	r3, #8
 80164e8:	9303      	str	r3, [sp, #12]
 80164ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164ec:	4433      	add	r3, r6
 80164ee:	9309      	str	r3, [sp, #36]	; 0x24
 80164f0:	e767      	b.n	80163c2 <_svfiprintf_r+0x4e>
 80164f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80164f6:	460c      	mov	r4, r1
 80164f8:	2001      	movs	r0, #1
 80164fa:	e7a5      	b.n	8016448 <_svfiprintf_r+0xd4>
 80164fc:	2300      	movs	r3, #0
 80164fe:	3401      	adds	r4, #1
 8016500:	9305      	str	r3, [sp, #20]
 8016502:	4619      	mov	r1, r3
 8016504:	f04f 0c0a 	mov.w	ip, #10
 8016508:	4620      	mov	r0, r4
 801650a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801650e:	3a30      	subs	r2, #48	; 0x30
 8016510:	2a09      	cmp	r2, #9
 8016512:	d903      	bls.n	801651c <_svfiprintf_r+0x1a8>
 8016514:	2b00      	cmp	r3, #0
 8016516:	d0c5      	beq.n	80164a4 <_svfiprintf_r+0x130>
 8016518:	9105      	str	r1, [sp, #20]
 801651a:	e7c3      	b.n	80164a4 <_svfiprintf_r+0x130>
 801651c:	fb0c 2101 	mla	r1, ip, r1, r2
 8016520:	4604      	mov	r4, r0
 8016522:	2301      	movs	r3, #1
 8016524:	e7f0      	b.n	8016508 <_svfiprintf_r+0x194>
 8016526:	ab03      	add	r3, sp, #12
 8016528:	9300      	str	r3, [sp, #0]
 801652a:	462a      	mov	r2, r5
 801652c:	4b0f      	ldr	r3, [pc, #60]	; (801656c <_svfiprintf_r+0x1f8>)
 801652e:	a904      	add	r1, sp, #16
 8016530:	4638      	mov	r0, r7
 8016532:	f7fc f831 	bl	8012598 <_printf_float>
 8016536:	1c42      	adds	r2, r0, #1
 8016538:	4606      	mov	r6, r0
 801653a:	d1d6      	bne.n	80164ea <_svfiprintf_r+0x176>
 801653c:	89ab      	ldrh	r3, [r5, #12]
 801653e:	065b      	lsls	r3, r3, #25
 8016540:	f53f af2c 	bmi.w	801639c <_svfiprintf_r+0x28>
 8016544:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016546:	b01d      	add	sp, #116	; 0x74
 8016548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801654c:	ab03      	add	r3, sp, #12
 801654e:	9300      	str	r3, [sp, #0]
 8016550:	462a      	mov	r2, r5
 8016552:	4b06      	ldr	r3, [pc, #24]	; (801656c <_svfiprintf_r+0x1f8>)
 8016554:	a904      	add	r1, sp, #16
 8016556:	4638      	mov	r0, r7
 8016558:	f7fc faaa 	bl	8012ab0 <_printf_i>
 801655c:	e7eb      	b.n	8016536 <_svfiprintf_r+0x1c2>
 801655e:	bf00      	nop
 8016560:	08063288 	.word	0x08063288
 8016564:	08063292 	.word	0x08063292
 8016568:	08012599 	.word	0x08012599
 801656c:	080162bf 	.word	0x080162bf
 8016570:	0806328e 	.word	0x0806328e
 8016574:	00000000 	.word	0x00000000

08016578 <nan>:
 8016578:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016580 <nan+0x8>
 801657c:	4770      	bx	lr
 801657e:	bf00      	nop
 8016580:	00000000 	.word	0x00000000
 8016584:	7ff80000 	.word	0x7ff80000

08016588 <_raise_r>:
 8016588:	291f      	cmp	r1, #31
 801658a:	b538      	push	{r3, r4, r5, lr}
 801658c:	4604      	mov	r4, r0
 801658e:	460d      	mov	r5, r1
 8016590:	d904      	bls.n	801659c <_raise_r+0x14>
 8016592:	2316      	movs	r3, #22
 8016594:	6003      	str	r3, [r0, #0]
 8016596:	f04f 30ff 	mov.w	r0, #4294967295
 801659a:	bd38      	pop	{r3, r4, r5, pc}
 801659c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801659e:	b112      	cbz	r2, 80165a6 <_raise_r+0x1e>
 80165a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80165a4:	b94b      	cbnz	r3, 80165ba <_raise_r+0x32>
 80165a6:	4620      	mov	r0, r4
 80165a8:	f000 f830 	bl	801660c <_getpid_r>
 80165ac:	462a      	mov	r2, r5
 80165ae:	4601      	mov	r1, r0
 80165b0:	4620      	mov	r0, r4
 80165b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80165b6:	f000 b817 	b.w	80165e8 <_kill_r>
 80165ba:	2b01      	cmp	r3, #1
 80165bc:	d00a      	beq.n	80165d4 <_raise_r+0x4c>
 80165be:	1c59      	adds	r1, r3, #1
 80165c0:	d103      	bne.n	80165ca <_raise_r+0x42>
 80165c2:	2316      	movs	r3, #22
 80165c4:	6003      	str	r3, [r0, #0]
 80165c6:	2001      	movs	r0, #1
 80165c8:	e7e7      	b.n	801659a <_raise_r+0x12>
 80165ca:	2400      	movs	r4, #0
 80165cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80165d0:	4628      	mov	r0, r5
 80165d2:	4798      	blx	r3
 80165d4:	2000      	movs	r0, #0
 80165d6:	e7e0      	b.n	801659a <_raise_r+0x12>

080165d8 <raise>:
 80165d8:	4b02      	ldr	r3, [pc, #8]	; (80165e4 <raise+0xc>)
 80165da:	4601      	mov	r1, r0
 80165dc:	6818      	ldr	r0, [r3, #0]
 80165de:	f7ff bfd3 	b.w	8016588 <_raise_r>
 80165e2:	bf00      	nop
 80165e4:	2400a0f0 	.word	0x2400a0f0

080165e8 <_kill_r>:
 80165e8:	b538      	push	{r3, r4, r5, lr}
 80165ea:	4d07      	ldr	r5, [pc, #28]	; (8016608 <_kill_r+0x20>)
 80165ec:	2300      	movs	r3, #0
 80165ee:	4604      	mov	r4, r0
 80165f0:	4608      	mov	r0, r1
 80165f2:	4611      	mov	r1, r2
 80165f4:	602b      	str	r3, [r5, #0]
 80165f6:	f7eb fdd6 	bl	80021a6 <_kill>
 80165fa:	1c43      	adds	r3, r0, #1
 80165fc:	d102      	bne.n	8016604 <_kill_r+0x1c>
 80165fe:	682b      	ldr	r3, [r5, #0]
 8016600:	b103      	cbz	r3, 8016604 <_kill_r+0x1c>
 8016602:	6023      	str	r3, [r4, #0]
 8016604:	bd38      	pop	{r3, r4, r5, pc}
 8016606:	bf00      	nop
 8016608:	2400e624 	.word	0x2400e624

0801660c <_getpid_r>:
 801660c:	f7eb bdc3 	b.w	8002196 <_getpid>

08016610 <__sread>:
 8016610:	b510      	push	{r4, lr}
 8016612:	460c      	mov	r4, r1
 8016614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016618:	f000 f8a8 	bl	801676c <_read_r>
 801661c:	2800      	cmp	r0, #0
 801661e:	bfab      	itete	ge
 8016620:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016622:	89a3      	ldrhlt	r3, [r4, #12]
 8016624:	181b      	addge	r3, r3, r0
 8016626:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801662a:	bfac      	ite	ge
 801662c:	6563      	strge	r3, [r4, #84]	; 0x54
 801662e:	81a3      	strhlt	r3, [r4, #12]
 8016630:	bd10      	pop	{r4, pc}

08016632 <__swrite>:
 8016632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016636:	461f      	mov	r7, r3
 8016638:	898b      	ldrh	r3, [r1, #12]
 801663a:	05db      	lsls	r3, r3, #23
 801663c:	4605      	mov	r5, r0
 801663e:	460c      	mov	r4, r1
 8016640:	4616      	mov	r6, r2
 8016642:	d505      	bpl.n	8016650 <__swrite+0x1e>
 8016644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016648:	2302      	movs	r3, #2
 801664a:	2200      	movs	r2, #0
 801664c:	f000 f874 	bl	8016738 <_lseek_r>
 8016650:	89a3      	ldrh	r3, [r4, #12]
 8016652:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016656:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801665a:	81a3      	strh	r3, [r4, #12]
 801665c:	4632      	mov	r2, r6
 801665e:	463b      	mov	r3, r7
 8016660:	4628      	mov	r0, r5
 8016662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016666:	f000 b823 	b.w	80166b0 <_write_r>

0801666a <__sseek>:
 801666a:	b510      	push	{r4, lr}
 801666c:	460c      	mov	r4, r1
 801666e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016672:	f000 f861 	bl	8016738 <_lseek_r>
 8016676:	1c43      	adds	r3, r0, #1
 8016678:	89a3      	ldrh	r3, [r4, #12]
 801667a:	bf15      	itete	ne
 801667c:	6560      	strne	r0, [r4, #84]	; 0x54
 801667e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016682:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016686:	81a3      	strheq	r3, [r4, #12]
 8016688:	bf18      	it	ne
 801668a:	81a3      	strhne	r3, [r4, #12]
 801668c:	bd10      	pop	{r4, pc}

0801668e <__sclose>:
 801668e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016692:	f000 b81f 	b.w	80166d4 <_close_r>

08016696 <__ascii_wctomb>:
 8016696:	b149      	cbz	r1, 80166ac <__ascii_wctomb+0x16>
 8016698:	2aff      	cmp	r2, #255	; 0xff
 801669a:	bf85      	ittet	hi
 801669c:	238a      	movhi	r3, #138	; 0x8a
 801669e:	6003      	strhi	r3, [r0, #0]
 80166a0:	700a      	strbls	r2, [r1, #0]
 80166a2:	f04f 30ff 	movhi.w	r0, #4294967295
 80166a6:	bf98      	it	ls
 80166a8:	2001      	movls	r0, #1
 80166aa:	4770      	bx	lr
 80166ac:	4608      	mov	r0, r1
 80166ae:	4770      	bx	lr

080166b0 <_write_r>:
 80166b0:	b538      	push	{r3, r4, r5, lr}
 80166b2:	4d07      	ldr	r5, [pc, #28]	; (80166d0 <_write_r+0x20>)
 80166b4:	4604      	mov	r4, r0
 80166b6:	4608      	mov	r0, r1
 80166b8:	4611      	mov	r1, r2
 80166ba:	2200      	movs	r2, #0
 80166bc:	602a      	str	r2, [r5, #0]
 80166be:	461a      	mov	r2, r3
 80166c0:	f7eb fda8 	bl	8002214 <_write>
 80166c4:	1c43      	adds	r3, r0, #1
 80166c6:	d102      	bne.n	80166ce <_write_r+0x1e>
 80166c8:	682b      	ldr	r3, [r5, #0]
 80166ca:	b103      	cbz	r3, 80166ce <_write_r+0x1e>
 80166cc:	6023      	str	r3, [r4, #0]
 80166ce:	bd38      	pop	{r3, r4, r5, pc}
 80166d0:	2400e624 	.word	0x2400e624

080166d4 <_close_r>:
 80166d4:	b538      	push	{r3, r4, r5, lr}
 80166d6:	4d06      	ldr	r5, [pc, #24]	; (80166f0 <_close_r+0x1c>)
 80166d8:	2300      	movs	r3, #0
 80166da:	4604      	mov	r4, r0
 80166dc:	4608      	mov	r0, r1
 80166de:	602b      	str	r3, [r5, #0]
 80166e0:	f7eb fdb4 	bl	800224c <_close>
 80166e4:	1c43      	adds	r3, r0, #1
 80166e6:	d102      	bne.n	80166ee <_close_r+0x1a>
 80166e8:	682b      	ldr	r3, [r5, #0]
 80166ea:	b103      	cbz	r3, 80166ee <_close_r+0x1a>
 80166ec:	6023      	str	r3, [r4, #0]
 80166ee:	bd38      	pop	{r3, r4, r5, pc}
 80166f0:	2400e624 	.word	0x2400e624

080166f4 <_fstat_r>:
 80166f4:	b538      	push	{r3, r4, r5, lr}
 80166f6:	4d07      	ldr	r5, [pc, #28]	; (8016714 <_fstat_r+0x20>)
 80166f8:	2300      	movs	r3, #0
 80166fa:	4604      	mov	r4, r0
 80166fc:	4608      	mov	r0, r1
 80166fe:	4611      	mov	r1, r2
 8016700:	602b      	str	r3, [r5, #0]
 8016702:	f7eb fdaf 	bl	8002264 <_fstat>
 8016706:	1c43      	adds	r3, r0, #1
 8016708:	d102      	bne.n	8016710 <_fstat_r+0x1c>
 801670a:	682b      	ldr	r3, [r5, #0]
 801670c:	b103      	cbz	r3, 8016710 <_fstat_r+0x1c>
 801670e:	6023      	str	r3, [r4, #0]
 8016710:	bd38      	pop	{r3, r4, r5, pc}
 8016712:	bf00      	nop
 8016714:	2400e624 	.word	0x2400e624

08016718 <_isatty_r>:
 8016718:	b538      	push	{r3, r4, r5, lr}
 801671a:	4d06      	ldr	r5, [pc, #24]	; (8016734 <_isatty_r+0x1c>)
 801671c:	2300      	movs	r3, #0
 801671e:	4604      	mov	r4, r0
 8016720:	4608      	mov	r0, r1
 8016722:	602b      	str	r3, [r5, #0]
 8016724:	f7eb fdae 	bl	8002284 <_isatty>
 8016728:	1c43      	adds	r3, r0, #1
 801672a:	d102      	bne.n	8016732 <_isatty_r+0x1a>
 801672c:	682b      	ldr	r3, [r5, #0]
 801672e:	b103      	cbz	r3, 8016732 <_isatty_r+0x1a>
 8016730:	6023      	str	r3, [r4, #0]
 8016732:	bd38      	pop	{r3, r4, r5, pc}
 8016734:	2400e624 	.word	0x2400e624

08016738 <_lseek_r>:
 8016738:	b538      	push	{r3, r4, r5, lr}
 801673a:	4d07      	ldr	r5, [pc, #28]	; (8016758 <_lseek_r+0x20>)
 801673c:	4604      	mov	r4, r0
 801673e:	4608      	mov	r0, r1
 8016740:	4611      	mov	r1, r2
 8016742:	2200      	movs	r2, #0
 8016744:	602a      	str	r2, [r5, #0]
 8016746:	461a      	mov	r2, r3
 8016748:	f7eb fda7 	bl	800229a <_lseek>
 801674c:	1c43      	adds	r3, r0, #1
 801674e:	d102      	bne.n	8016756 <_lseek_r+0x1e>
 8016750:	682b      	ldr	r3, [r5, #0]
 8016752:	b103      	cbz	r3, 8016756 <_lseek_r+0x1e>
 8016754:	6023      	str	r3, [r4, #0]
 8016756:	bd38      	pop	{r3, r4, r5, pc}
 8016758:	2400e624 	.word	0x2400e624

0801675c <_malloc_usable_size_r>:
 801675c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016760:	1f18      	subs	r0, r3, #4
 8016762:	2b00      	cmp	r3, #0
 8016764:	bfbc      	itt	lt
 8016766:	580b      	ldrlt	r3, [r1, r0]
 8016768:	18c0      	addlt	r0, r0, r3
 801676a:	4770      	bx	lr

0801676c <_read_r>:
 801676c:	b538      	push	{r3, r4, r5, lr}
 801676e:	4d07      	ldr	r5, [pc, #28]	; (801678c <_read_r+0x20>)
 8016770:	4604      	mov	r4, r0
 8016772:	4608      	mov	r0, r1
 8016774:	4611      	mov	r1, r2
 8016776:	2200      	movs	r2, #0
 8016778:	602a      	str	r2, [r5, #0]
 801677a:	461a      	mov	r2, r3
 801677c:	f7eb fd2d 	bl	80021da <_read>
 8016780:	1c43      	adds	r3, r0, #1
 8016782:	d102      	bne.n	801678a <_read_r+0x1e>
 8016784:	682b      	ldr	r3, [r5, #0]
 8016786:	b103      	cbz	r3, 801678a <_read_r+0x1e>
 8016788:	6023      	str	r3, [r4, #0]
 801678a:	bd38      	pop	{r3, r4, r5, pc}
 801678c:	2400e624 	.word	0x2400e624

08016790 <_init>:
 8016790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016792:	bf00      	nop
 8016794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016796:	bc08      	pop	{r3}
 8016798:	469e      	mov	lr, r3
 801679a:	4770      	bx	lr

0801679c <_fini>:
 801679c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801679e:	bf00      	nop
 80167a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80167a2:	bc08      	pop	{r3}
 80167a4:	469e      	mov	lr, r3
 80167a6:	4770      	bx	lr
