
SelfDriving_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021020  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009840  080212c0  080212c0  000312c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802ab00  0802ab00  0004a3bc  2**0
                  CONTENTS
  4 .ARM          00000008  0802ab00  0802ab00  0003ab00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802ab08  0802ab08  0004a3bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802ab08  0802ab08  0003ab08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802ab0c  0802ab0c  0003ab0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000a2fc  24000000  0802ab10  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  2400a2fc  08034e0c  0004a2fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  2400a35c  08034e6c  0004a35c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000a4a4  2400a3bc  08034ecc  0004a3bc  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24014860  08034ecc  00054860  2**0
                  ALLOC
 13 .data_RAM_D2  00000000  30000000  30000000  0004a3bc  2**0
                  CONTENTS
 14 .bss_RAM_D2   00000000  30000000  30000000  0004a3bc  2**0
                  CONTENTS
 15 .openamp_section 0000008c  38000000  08034ecc  00050000  2**2
                  ALLOC
 16 .ARM.attributes 0000002e  00000000  00000000  0004a3bc  2**0
                  CONTENTS, READONLY
 17 .debug_info   000a5260  00000000  00000000  0004a3ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000dac1  00000000  00000000  000ef64a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002eb0  00000000  00000000  000fd110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00002a00  00000000  00000000  000fffc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0005412e  00000000  00000000  001029c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0005fc9f  00000000  00000000  00156aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    0019f974  00000000  00000000  001b678d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000053  00000000  00000000  00356101  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000d3ec  00000000  00000000  00356154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400a3bc 	.word	0x2400a3bc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080212a8 	.word	0x080212a8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400a3c0 	.word	0x2400a3c0
 80002dc:	080212a8 	.word	0x080212a8

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	; 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295
 8000738:	f04f 30ff 	movne.w	r0, #4294967295
 800073c:	f000 b9a6 	b.w	8000a8c <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f83e 	bl	80007c8 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9d08      	ldr	r5, [sp, #32]
 80007ce:	4604      	mov	r4, r0
 80007d0:	468c      	mov	ip, r1
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	f040 8083 	bne.w	80008de <__udivmoddi4+0x116>
 80007d8:	428a      	cmp	r2, r1
 80007da:	4617      	mov	r7, r2
 80007dc:	d947      	bls.n	800086e <__udivmoddi4+0xa6>
 80007de:	fab2 f282 	clz	r2, r2
 80007e2:	b142      	cbz	r2, 80007f6 <__udivmoddi4+0x2e>
 80007e4:	f1c2 0020 	rsb	r0, r2, #32
 80007e8:	fa24 f000 	lsr.w	r0, r4, r0
 80007ec:	4091      	lsls	r1, r2
 80007ee:	4097      	lsls	r7, r2
 80007f0:	ea40 0c01 	orr.w	ip, r0, r1
 80007f4:	4094      	lsls	r4, r2
 80007f6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80007fa:	0c23      	lsrs	r3, r4, #16
 80007fc:	fbbc f6f8 	udiv	r6, ip, r8
 8000800:	fa1f fe87 	uxth.w	lr, r7
 8000804:	fb08 c116 	mls	r1, r8, r6, ip
 8000808:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800080c:	fb06 f10e 	mul.w	r1, r6, lr
 8000810:	4299      	cmp	r1, r3
 8000812:	d909      	bls.n	8000828 <__udivmoddi4+0x60>
 8000814:	18fb      	adds	r3, r7, r3
 8000816:	f106 30ff 	add.w	r0, r6, #4294967295
 800081a:	f080 8119 	bcs.w	8000a50 <__udivmoddi4+0x288>
 800081e:	4299      	cmp	r1, r3
 8000820:	f240 8116 	bls.w	8000a50 <__udivmoddi4+0x288>
 8000824:	3e02      	subs	r6, #2
 8000826:	443b      	add	r3, r7
 8000828:	1a5b      	subs	r3, r3, r1
 800082a:	b2a4      	uxth	r4, r4
 800082c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000830:	fb08 3310 	mls	r3, r8, r0, r3
 8000834:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000838:	fb00 fe0e 	mul.w	lr, r0, lr
 800083c:	45a6      	cmp	lr, r4
 800083e:	d909      	bls.n	8000854 <__udivmoddi4+0x8c>
 8000840:	193c      	adds	r4, r7, r4
 8000842:	f100 33ff 	add.w	r3, r0, #4294967295
 8000846:	f080 8105 	bcs.w	8000a54 <__udivmoddi4+0x28c>
 800084a:	45a6      	cmp	lr, r4
 800084c:	f240 8102 	bls.w	8000a54 <__udivmoddi4+0x28c>
 8000850:	3802      	subs	r0, #2
 8000852:	443c      	add	r4, r7
 8000854:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000858:	eba4 040e 	sub.w	r4, r4, lr
 800085c:	2600      	movs	r6, #0
 800085e:	b11d      	cbz	r5, 8000868 <__udivmoddi4+0xa0>
 8000860:	40d4      	lsrs	r4, r2
 8000862:	2300      	movs	r3, #0
 8000864:	e9c5 4300 	strd	r4, r3, [r5]
 8000868:	4631      	mov	r1, r6
 800086a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086e:	b902      	cbnz	r2, 8000872 <__udivmoddi4+0xaa>
 8000870:	deff      	udf	#255	; 0xff
 8000872:	fab2 f282 	clz	r2, r2
 8000876:	2a00      	cmp	r2, #0
 8000878:	d150      	bne.n	800091c <__udivmoddi4+0x154>
 800087a:	1bcb      	subs	r3, r1, r7
 800087c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000880:	fa1f f887 	uxth.w	r8, r7
 8000884:	2601      	movs	r6, #1
 8000886:	fbb3 fcfe 	udiv	ip, r3, lr
 800088a:	0c21      	lsrs	r1, r4, #16
 800088c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000890:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000894:	fb08 f30c 	mul.w	r3, r8, ip
 8000898:	428b      	cmp	r3, r1
 800089a:	d907      	bls.n	80008ac <__udivmoddi4+0xe4>
 800089c:	1879      	adds	r1, r7, r1
 800089e:	f10c 30ff 	add.w	r0, ip, #4294967295
 80008a2:	d202      	bcs.n	80008aa <__udivmoddi4+0xe2>
 80008a4:	428b      	cmp	r3, r1
 80008a6:	f200 80e9 	bhi.w	8000a7c <__udivmoddi4+0x2b4>
 80008aa:	4684      	mov	ip, r0
 80008ac:	1ac9      	subs	r1, r1, r3
 80008ae:	b2a3      	uxth	r3, r4
 80008b0:	fbb1 f0fe 	udiv	r0, r1, lr
 80008b4:	fb0e 1110 	mls	r1, lr, r0, r1
 80008b8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80008bc:	fb08 f800 	mul.w	r8, r8, r0
 80008c0:	45a0      	cmp	r8, r4
 80008c2:	d907      	bls.n	80008d4 <__udivmoddi4+0x10c>
 80008c4:	193c      	adds	r4, r7, r4
 80008c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x10a>
 80008cc:	45a0      	cmp	r8, r4
 80008ce:	f200 80d9 	bhi.w	8000a84 <__udivmoddi4+0x2bc>
 80008d2:	4618      	mov	r0, r3
 80008d4:	eba4 0408 	sub.w	r4, r4, r8
 80008d8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008dc:	e7bf      	b.n	800085e <__udivmoddi4+0x96>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d909      	bls.n	80008f6 <__udivmoddi4+0x12e>
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	f000 80b1 	beq.w	8000a4a <__udivmoddi4+0x282>
 80008e8:	2600      	movs	r6, #0
 80008ea:	e9c5 0100 	strd	r0, r1, [r5]
 80008ee:	4630      	mov	r0, r6
 80008f0:	4631      	mov	r1, r6
 80008f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008f6:	fab3 f683 	clz	r6, r3
 80008fa:	2e00      	cmp	r6, #0
 80008fc:	d14a      	bne.n	8000994 <__udivmoddi4+0x1cc>
 80008fe:	428b      	cmp	r3, r1
 8000900:	d302      	bcc.n	8000908 <__udivmoddi4+0x140>
 8000902:	4282      	cmp	r2, r0
 8000904:	f200 80b8 	bhi.w	8000a78 <__udivmoddi4+0x2b0>
 8000908:	1a84      	subs	r4, r0, r2
 800090a:	eb61 0103 	sbc.w	r1, r1, r3
 800090e:	2001      	movs	r0, #1
 8000910:	468c      	mov	ip, r1
 8000912:	2d00      	cmp	r5, #0
 8000914:	d0a8      	beq.n	8000868 <__udivmoddi4+0xa0>
 8000916:	e9c5 4c00 	strd	r4, ip, [r5]
 800091a:	e7a5      	b.n	8000868 <__udivmoddi4+0xa0>
 800091c:	f1c2 0320 	rsb	r3, r2, #32
 8000920:	fa20 f603 	lsr.w	r6, r0, r3
 8000924:	4097      	lsls	r7, r2
 8000926:	fa01 f002 	lsl.w	r0, r1, r2
 800092a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800092e:	40d9      	lsrs	r1, r3
 8000930:	4330      	orrs	r0, r6
 8000932:	0c03      	lsrs	r3, r0, #16
 8000934:	fbb1 f6fe 	udiv	r6, r1, lr
 8000938:	fa1f f887 	uxth.w	r8, r7
 800093c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000940:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000944:	fb06 f108 	mul.w	r1, r6, r8
 8000948:	4299      	cmp	r1, r3
 800094a:	fa04 f402 	lsl.w	r4, r4, r2
 800094e:	d909      	bls.n	8000964 <__udivmoddi4+0x19c>
 8000950:	18fb      	adds	r3, r7, r3
 8000952:	f106 3cff 	add.w	ip, r6, #4294967295
 8000956:	f080 808d 	bcs.w	8000a74 <__udivmoddi4+0x2ac>
 800095a:	4299      	cmp	r1, r3
 800095c:	f240 808a 	bls.w	8000a74 <__udivmoddi4+0x2ac>
 8000960:	3e02      	subs	r6, #2
 8000962:	443b      	add	r3, r7
 8000964:	1a5b      	subs	r3, r3, r1
 8000966:	b281      	uxth	r1, r0
 8000968:	fbb3 f0fe 	udiv	r0, r3, lr
 800096c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000970:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000974:	fb00 f308 	mul.w	r3, r0, r8
 8000978:	428b      	cmp	r3, r1
 800097a:	d907      	bls.n	800098c <__udivmoddi4+0x1c4>
 800097c:	1879      	adds	r1, r7, r1
 800097e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000982:	d273      	bcs.n	8000a6c <__udivmoddi4+0x2a4>
 8000984:	428b      	cmp	r3, r1
 8000986:	d971      	bls.n	8000a6c <__udivmoddi4+0x2a4>
 8000988:	3802      	subs	r0, #2
 800098a:	4439      	add	r1, r7
 800098c:	1acb      	subs	r3, r1, r3
 800098e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000992:	e778      	b.n	8000886 <__udivmoddi4+0xbe>
 8000994:	f1c6 0c20 	rsb	ip, r6, #32
 8000998:	fa03 f406 	lsl.w	r4, r3, r6
 800099c:	fa22 f30c 	lsr.w	r3, r2, ip
 80009a0:	431c      	orrs	r4, r3
 80009a2:	fa20 f70c 	lsr.w	r7, r0, ip
 80009a6:	fa01 f306 	lsl.w	r3, r1, r6
 80009aa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80009ae:	fa21 f10c 	lsr.w	r1, r1, ip
 80009b2:	431f      	orrs	r7, r3
 80009b4:	0c3b      	lsrs	r3, r7, #16
 80009b6:	fbb1 f9fe 	udiv	r9, r1, lr
 80009ba:	fa1f f884 	uxth.w	r8, r4
 80009be:	fb0e 1119 	mls	r1, lr, r9, r1
 80009c2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80009c6:	fb09 fa08 	mul.w	sl, r9, r8
 80009ca:	458a      	cmp	sl, r1
 80009cc:	fa02 f206 	lsl.w	r2, r2, r6
 80009d0:	fa00 f306 	lsl.w	r3, r0, r6
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x220>
 80009d6:	1861      	adds	r1, r4, r1
 80009d8:	f109 30ff 	add.w	r0, r9, #4294967295
 80009dc:	d248      	bcs.n	8000a70 <__udivmoddi4+0x2a8>
 80009de:	458a      	cmp	sl, r1
 80009e0:	d946      	bls.n	8000a70 <__udivmoddi4+0x2a8>
 80009e2:	f1a9 0902 	sub.w	r9, r9, #2
 80009e6:	4421      	add	r1, r4
 80009e8:	eba1 010a 	sub.w	r1, r1, sl
 80009ec:	b2bf      	uxth	r7, r7
 80009ee:	fbb1 f0fe 	udiv	r0, r1, lr
 80009f2:	fb0e 1110 	mls	r1, lr, r0, r1
 80009f6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80009fa:	fb00 f808 	mul.w	r8, r0, r8
 80009fe:	45b8      	cmp	r8, r7
 8000a00:	d907      	bls.n	8000a12 <__udivmoddi4+0x24a>
 8000a02:	19e7      	adds	r7, r4, r7
 8000a04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a08:	d22e      	bcs.n	8000a68 <__udivmoddi4+0x2a0>
 8000a0a:	45b8      	cmp	r8, r7
 8000a0c:	d92c      	bls.n	8000a68 <__udivmoddi4+0x2a0>
 8000a0e:	3802      	subs	r0, #2
 8000a10:	4427      	add	r7, r4
 8000a12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a16:	eba7 0708 	sub.w	r7, r7, r8
 8000a1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000a1e:	454f      	cmp	r7, r9
 8000a20:	46c6      	mov	lr, r8
 8000a22:	4649      	mov	r1, r9
 8000a24:	d31a      	bcc.n	8000a5c <__udivmoddi4+0x294>
 8000a26:	d017      	beq.n	8000a58 <__udivmoddi4+0x290>
 8000a28:	b15d      	cbz	r5, 8000a42 <__udivmoddi4+0x27a>
 8000a2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000a2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000a32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a36:	40f2      	lsrs	r2, r6
 8000a38:	ea4c 0202 	orr.w	r2, ip, r2
 8000a3c:	40f7      	lsrs	r7, r6
 8000a3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000a42:	2600      	movs	r6, #0
 8000a44:	4631      	mov	r1, r6
 8000a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a4a:	462e      	mov	r6, r5
 8000a4c:	4628      	mov	r0, r5
 8000a4e:	e70b      	b.n	8000868 <__udivmoddi4+0xa0>
 8000a50:	4606      	mov	r6, r0
 8000a52:	e6e9      	b.n	8000828 <__udivmoddi4+0x60>
 8000a54:	4618      	mov	r0, r3
 8000a56:	e6fd      	b.n	8000854 <__udivmoddi4+0x8c>
 8000a58:	4543      	cmp	r3, r8
 8000a5a:	d2e5      	bcs.n	8000a28 <__udivmoddi4+0x260>
 8000a5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a60:	eb69 0104 	sbc.w	r1, r9, r4
 8000a64:	3801      	subs	r0, #1
 8000a66:	e7df      	b.n	8000a28 <__udivmoddi4+0x260>
 8000a68:	4608      	mov	r0, r1
 8000a6a:	e7d2      	b.n	8000a12 <__udivmoddi4+0x24a>
 8000a6c:	4660      	mov	r0, ip
 8000a6e:	e78d      	b.n	800098c <__udivmoddi4+0x1c4>
 8000a70:	4681      	mov	r9, r0
 8000a72:	e7b9      	b.n	80009e8 <__udivmoddi4+0x220>
 8000a74:	4666      	mov	r6, ip
 8000a76:	e775      	b.n	8000964 <__udivmoddi4+0x19c>
 8000a78:	4630      	mov	r0, r6
 8000a7a:	e74a      	b.n	8000912 <__udivmoddi4+0x14a>
 8000a7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a80:	4439      	add	r1, r7
 8000a82:	e713      	b.n	80008ac <__udivmoddi4+0xe4>
 8000a84:	3802      	subs	r0, #2
 8000a86:	443c      	add	r4, r7
 8000a88:	e724      	b.n	80008d4 <__udivmoddi4+0x10c>
 8000a8a:	bf00      	nop

08000a8c <__aeabi_idiv0>:
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop

08000a90 <rpmsg_recv_callback>:

uint32_t receivedDataPointer = 0;

int rpmsg_recv_callback(struct rpmsg_endpoint *ept, void *data,
		size_t len, uint32_t src, void *priv)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
 8000a9c:	603b      	str	r3, [r7, #0]
	received_data = *((unsigned int *) data);
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a09      	ldr	r2, [pc, #36]	; (8000ac8 <rpmsg_recv_callback+0x38>)
 8000aa4:	6013      	str	r3, [r2, #0]
	receivedDataPointer = (uint32_t)((unsigned int *) data);
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	4a08      	ldr	r2, [pc, #32]	; (8000acc <rpmsg_recv_callback+0x3c>)
 8000aaa:	6013      	str	r3, [r2, #0]
	message_received=1;
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <rpmsg_recv_callback+0x40>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	601a      	str	r2, [r3, #0]
	parseRecievedMessages((uint8_t)received_data);
 8000ab2:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <rpmsg_recv_callback+0x38>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 f853 	bl	8000b64 <parseRecievedMessages>
	return 0;
 8000abe:	2300      	movs	r3, #0
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	2400b090 	.word	0x2400b090
 8000acc:	2400a3d8 	.word	0x2400a3d8
 8000ad0:	2400b0d8 	.word	0x2400b0d8

08000ad4 <receive_message>:
}
#endif

#ifdef CORE_CM7
unsigned int receive_message(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	while (message_received == 0 && service_created == 1)
 8000ad8:	e001      	b.n	8000ade <receive_message+0xa>
	{
		OPENAMP_check_for_message();
 8000ada:	f018 fc03 	bl	80192e4 <OPENAMP_check_for_message>
	while (message_received == 0 && service_created == 1)
 8000ade:	4b07      	ldr	r3, [pc, #28]	; (8000afc <receive_message+0x28>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d103      	bne.n	8000aee <receive_message+0x1a>
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <receive_message+0x2c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d0f5      	beq.n	8000ada <receive_message+0x6>
	}
	message_received = 0;
 8000aee:	4b03      	ldr	r3, [pc, #12]	; (8000afc <receive_message+0x28>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]

	return received_data;
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <receive_message+0x30>)
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	2400b0d8 	.word	0x2400b0d8
 8000b00:	2400b094 	.word	0x2400b094
 8000b04:	2400b090 	.word	0x2400b090

08000b08 <service_destroy_cb>:
void service_destroy_cb(struct rpmsg_endpoint *ept)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	/* this function is called while remote endpoint as been destroyed, the
	 * service is no more available
	 */
	service_created = 0;
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <service_destroy_cb+0x1c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	2400b094 	.word	0x2400b094

08000b28 <new_service_cb>:

void new_service_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af02      	add	r7, sp, #8
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
	/* create a endpoint for rmpsg communication */
	OPENAMP_create_endpoint(&rp_endpoint, name, dest, rpmsg_recv_callback,
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <new_service_cb+0x2c>)
 8000b36:	9300      	str	r3, [sp, #0]
 8000b38:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <new_service_cb+0x30>)
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	4807      	ldr	r0, [pc, #28]	; (8000b5c <new_service_cb+0x34>)
 8000b40:	f018 fbb2 	bl	80192a8 <OPENAMP_create_endpoint>
			service_destroy_cb);
	service_created = 1;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <new_service_cb+0x38>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	601a      	str	r2, [r3, #0]
}
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	08000b09 	.word	0x08000b09
 8000b58:	08000a91 	.word	0x08000a91
 8000b5c:	2400b098 	.word	0x2400b098
 8000b60:	2400b094 	.word	0x2400b094

08000b64 <parseRecievedMessages>:
#ifdef CORE_CM7
#include "GUI_Paint.h"
#endif

void parseRecievedMessages(uint8_t opCode)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
	switch (opCode)
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d108      	bne.n	8000b86 <parseRecievedMessages+0x22>
	{
#ifdef CORE_CM7
		case (1):
		{
			memcpy(receivedAnglesData, (uint32_t *)receivedDataPointer, sizeof(tANGLESMESSAGES));
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <parseRecievedMessages+0x2c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a06      	ldr	r2, [pc, #24]	; (8000b94 <parseRecievedMessages+0x30>)
 8000b7a:	6812      	ldr	r2, [r2, #0]
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	221c      	movs	r2, #28
 8000b80:	4618      	mov	r0, r3
 8000b82:	f01b fd8d 	bl	801c6a0 <memcpy>
		default:
		{

		}
	}
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	2400b08c 	.word	0x2400b08c
 8000b94:	2400a3d8 	.word	0x2400a3d8

08000b98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b9c:	4b3f      	ldr	r3, [pc, #252]	; (8000c9c <SystemInit+0x104>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba2:	4a3e      	ldr	r2, [pc, #248]	; (8000c9c <SystemInit+0x104>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000bac:	4b3b      	ldr	r3, [pc, #236]	; (8000c9c <SystemInit+0x104>)
 8000bae:	691b      	ldr	r3, [r3, #16]
 8000bb0:	4a3a      	ldr	r2, [pc, #232]	; (8000c9c <SystemInit+0x104>)
 8000bb2:	f043 0310 	orr.w	r3, r3, #16
 8000bb6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bb8:	4b39      	ldr	r3, [pc, #228]	; (8000ca0 <SystemInit+0x108>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f003 030f 	and.w	r3, r3, #15
 8000bc0:	2b06      	cmp	r3, #6
 8000bc2:	d807      	bhi.n	8000bd4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bc4:	4b36      	ldr	r3, [pc, #216]	; (8000ca0 <SystemInit+0x108>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f023 030f 	bic.w	r3, r3, #15
 8000bcc:	4a34      	ldr	r2, [pc, #208]	; (8000ca0 <SystemInit+0x108>)
 8000bce:	f043 0307 	orr.w	r3, r3, #7
 8000bd2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bd4:	4b33      	ldr	r3, [pc, #204]	; (8000ca4 <SystemInit+0x10c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a32      	ldr	r2, [pc, #200]	; (8000ca4 <SystemInit+0x10c>)
 8000bda:	f043 0301 	orr.w	r3, r3, #1
 8000bde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000be0:	4b30      	ldr	r3, [pc, #192]	; (8000ca4 <SystemInit+0x10c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000be6:	4b2f      	ldr	r3, [pc, #188]	; (8000ca4 <SystemInit+0x10c>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	492e      	ldr	r1, [pc, #184]	; (8000ca4 <SystemInit+0x10c>)
 8000bec:	4b2e      	ldr	r3, [pc, #184]	; (8000ca8 <SystemInit+0x110>)
 8000bee:	4013      	ands	r3, r2
 8000bf0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bf2:	4b2b      	ldr	r3, [pc, #172]	; (8000ca0 <SystemInit+0x108>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f003 0308 	and.w	r3, r3, #8
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d007      	beq.n	8000c0e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bfe:	4b28      	ldr	r3, [pc, #160]	; (8000ca0 <SystemInit+0x108>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f023 030f 	bic.w	r3, r3, #15
 8000c06:	4a26      	ldr	r2, [pc, #152]	; (8000ca0 <SystemInit+0x108>)
 8000c08:	f043 0307 	orr.w	r3, r3, #7
 8000c0c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c0e:	4b25      	ldr	r3, [pc, #148]	; (8000ca4 <SystemInit+0x10c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c14:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <SystemInit+0x10c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c1a:	4b22      	ldr	r3, [pc, #136]	; (8000ca4 <SystemInit+0x10c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c20:	4b20      	ldr	r3, [pc, #128]	; (8000ca4 <SystemInit+0x10c>)
 8000c22:	4a22      	ldr	r2, [pc, #136]	; (8000cac <SystemInit+0x114>)
 8000c24:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c26:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <SystemInit+0x10c>)
 8000c28:	4a21      	ldr	r2, [pc, #132]	; (8000cb0 <SystemInit+0x118>)
 8000c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <SystemInit+0x10c>)
 8000c2e:	4a21      	ldr	r2, [pc, #132]	; (8000cb4 <SystemInit+0x11c>)
 8000c30:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c32:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <SystemInit+0x10c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c38:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <SystemInit+0x10c>)
 8000c3a:	4a1e      	ldr	r2, [pc, #120]	; (8000cb4 <SystemInit+0x11c>)
 8000c3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c3e:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <SystemInit+0x10c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c44:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <SystemInit+0x10c>)
 8000c46:	4a1b      	ldr	r2, [pc, #108]	; (8000cb4 <SystemInit+0x11c>)
 8000c48:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c4a:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <SystemInit+0x10c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <SystemInit+0x10c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a13      	ldr	r2, [pc, #76]	; (8000ca4 <SystemInit+0x10c>)
 8000c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c5a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <SystemInit+0x10c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <SystemInit+0x120>)
 8000c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c66:	4a14      	ldr	r2, [pc, #80]	; (8000cb8 <SystemInit+0x120>)
 8000c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <SystemInit+0x124>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <SystemInit+0x128>)
 8000c74:	4013      	ands	r3, r2
 8000c76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c7a:	d202      	bcs.n	8000c82 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <SystemInit+0x12c>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <SystemInit+0x130>)
 8000c84:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c88:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000c8a:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <SystemInit+0x104>)
 8000c8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c90:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00
 8000ca0:	52002000 	.word	0x52002000
 8000ca4:	58024400 	.word	0x58024400
 8000ca8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cac:	02020200 	.word	0x02020200
 8000cb0:	01ff0000 	.word	0x01ff0000
 8000cb4:	01010280 	.word	0x01010280
 8000cb8:	580000c0 	.word	0x580000c0
 8000cbc:	5c001000 	.word	0x5c001000
 8000cc0:	ffff0000 	.word	0xffff0000
 8000cc4:	51008108 	.word	0x51008108
 8000cc8:	52004000 	.word	0x52004000

08000ccc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <MX_DMA_Init+0x4c>)
 8000cd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cd8:	4a0f      	ldr	r2, [pc, #60]	; (8000d18 <MX_DMA_Init+0x4c>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <MX_DMA_Init+0x4c>)
 8000ce4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	200b      	movs	r0, #11
 8000cf6:	f001 fd82 	bl	80027fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000cfa:	200b      	movs	r0, #11
 8000cfc:	f001 fd99 	bl	8002832 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2100      	movs	r1, #0
 8000d04:	200c      	movs	r0, #12
 8000d06:	f001 fd7a 	bl	80027fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d0a:	200c      	movs	r0, #12
 8000d0c:	f001 fd91 	bl	8002832 <HAL_NVIC_EnableIRQ>

}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	58024400 	.word	0x58024400

08000d1c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000d20:	4b1e      	ldr	r3, [pc, #120]	; (8000d9c <MX_ETH_Init+0x80>)
 8000d22:	4a1f      	ldr	r2, [pc, #124]	; (8000da0 <MX_ETH_Init+0x84>)
 8000d24:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000d26:	4b1f      	ldr	r3, [pc, #124]	; (8000da4 <MX_ETH_Init+0x88>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000d2c:	4b1d      	ldr	r3, [pc, #116]	; (8000da4 <MX_ETH_Init+0x88>)
 8000d2e:	2280      	movs	r2, #128	; 0x80
 8000d30:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000d32:	4b1c      	ldr	r3, [pc, #112]	; (8000da4 <MX_ETH_Init+0x88>)
 8000d34:	22e1      	movs	r2, #225	; 0xe1
 8000d36:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000d38:	4b1a      	ldr	r3, [pc, #104]	; (8000da4 <MX_ETH_Init+0x88>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000d3e:	4b19      	ldr	r3, [pc, #100]	; (8000da4 <MX_ETH_Init+0x88>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000d44:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <MX_ETH_Init+0x88>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000d4a:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <MX_ETH_Init+0x80>)
 8000d4c:	4a15      	ldr	r2, [pc, #84]	; (8000da4 <MX_ETH_Init+0x88>)
 8000d4e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <MX_ETH_Init+0x80>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000d56:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <MX_ETH_Init+0x80>)
 8000d58:	4a13      	ldr	r2, [pc, #76]	; (8000da8 <MX_ETH_Init+0x8c>)
 8000d5a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <MX_ETH_Init+0x80>)
 8000d5e:	4a13      	ldr	r2, [pc, #76]	; (8000dac <MX_ETH_Init+0x90>)
 8000d60:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <MX_ETH_Init+0x80>)
 8000d64:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000d68:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000d6a:	480c      	ldr	r0, [pc, #48]	; (8000d9c <MX_ETH_Init+0x80>)
 8000d6c:	f004 fc32 	bl	80055d4 <HAL_ETH_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000d76:	f000 fd24 	bl	80017c2 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d7a:	2234      	movs	r2, #52	; 0x34
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	480c      	ldr	r0, [pc, #48]	; (8000db0 <MX_ETH_Init+0x94>)
 8000d80:	f01b fcb6 	bl	801c6f0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d84:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <MX_ETH_Init+0x94>)
 8000d86:	2221      	movs	r2, #33	; 0x21
 8000d88:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d8a:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <MX_ETH_Init+0x94>)
 8000d8c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d90:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d92:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <MX_ETH_Init+0x94>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	2400af84 	.word	0x2400af84
 8000da0:	40028000 	.word	0x40028000
 8000da4:	2400a3dc 	.word	0x2400a3dc
 8000da8:	2400a35c 	.word	0x2400a35c
 8000dac:	2400a2fc 	.word	0x2400a2fc
 8000db0:	2400b00c 	.word	0x2400b00c

08000db4 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08e      	sub	sp, #56	; 0x38
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a59      	ldr	r2, [pc, #356]	; (8000f38 <HAL_ETH_MspInit+0x184>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	f040 80ab 	bne.w	8000f2e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000dd8:	4b58      	ldr	r3, [pc, #352]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000dda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dde:	4a57      	ldr	r2, [pc, #348]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000de0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000de4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000de8:	4b54      	ldr	r3, [pc, #336]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000dea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000df2:	623b      	str	r3, [r7, #32]
 8000df4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000df6:	4b51      	ldr	r3, [pc, #324]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000df8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dfc:	4a4f      	ldr	r2, [pc, #316]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e02:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e06:	4b4d      	ldr	r3, [pc, #308]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e10:	61fb      	str	r3, [r7, #28]
 8000e12:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000e14:	4b49      	ldr	r3, [pc, #292]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e1a:	4a48      	ldr	r2, [pc, #288]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e20:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e24:	4b45      	ldr	r3, [pc, #276]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2e:	61bb      	str	r3, [r7, #24]
 8000e30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e32:	4b42      	ldr	r3, [pc, #264]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e38:	4a40      	ldr	r2, [pc, #256]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e3a:	f043 0304 	orr.w	r3, r3, #4
 8000e3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e42:	4b3e      	ldr	r3, [pc, #248]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e48:	f003 0304 	and.w	r3, r3, #4
 8000e4c:	617b      	str	r3, [r7, #20]
 8000e4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e50:	4b3a      	ldr	r3, [pc, #232]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e56:	4a39      	ldr	r2, [pc, #228]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e60:	4b36      	ldr	r3, [pc, #216]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6e:	4b33      	ldr	r3, [pc, #204]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e74:	4a31      	ldr	r2, [pc, #196]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e76:	f043 0302 	orr.w	r3, r3, #2
 8000e7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e7e:	4b2f      	ldr	r3, [pc, #188]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e8c:	4b2b      	ldr	r3, [pc, #172]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e92:	4a2a      	ldr	r2, [pc, #168]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e9c:	4b27      	ldr	r3, [pc, #156]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ea6:	60bb      	str	r3, [r7, #8]
 8000ea8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000eaa:	2332      	movs	r3, #50	; 0x32
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eba:	230b      	movs	r3, #11
 8000ebc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	481e      	ldr	r0, [pc, #120]	; (8000f40 <HAL_ETH_MspInit+0x18c>)
 8000ec6:	f004 ff9b 	bl	8005e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000eca:	2386      	movs	r3, #134	; 0x86
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eda:	230b      	movs	r3, #11
 8000edc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4817      	ldr	r0, [pc, #92]	; (8000f44 <HAL_ETH_MspInit+0x190>)
 8000ee6:	f004 ff8b 	bl	8005e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000eea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000efc:	230b      	movs	r3, #11
 8000efe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f04:	4619      	mov	r1, r3
 8000f06:	4810      	ldr	r0, [pc, #64]	; (8000f48 <HAL_ETH_MspInit+0x194>)
 8000f08:	f004 ff7a 	bl	8005e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f0c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f1e:	230b      	movs	r3, #11
 8000f20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f26:	4619      	mov	r1, r3
 8000f28:	4808      	ldr	r0, [pc, #32]	; (8000f4c <HAL_ETH_MspInit+0x198>)
 8000f2a:	f004 ff69 	bl	8005e00 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000f2e:	bf00      	nop
 8000f30:	3738      	adds	r7, #56	; 0x38
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40028000 	.word	0x40028000
 8000f3c:	58024400 	.word	0x58024400
 8000f40:	58020800 	.word	0x58020800
 8000f44:	58020000 	.word	0x58020000
 8000f48:	58020400 	.word	0x58020400
 8000f4c:	58021800 	.word	0x58021800

08000f50 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08e      	sub	sp, #56	; 0x38
 8000f54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
 8000f64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f66:	4b93      	ldr	r3, [pc, #588]	; (80011b4 <MX_GPIO_Init+0x264>)
 8000f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f6c:	4a91      	ldr	r2, [pc, #580]	; (80011b4 <MX_GPIO_Init+0x264>)
 8000f6e:	f043 0304 	orr.w	r3, r3, #4
 8000f72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f76:	4b8f      	ldr	r3, [pc, #572]	; (80011b4 <MX_GPIO_Init+0x264>)
 8000f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f7c:	f003 0304 	and.w	r3, r3, #4
 8000f80:	623b      	str	r3, [r7, #32]
 8000f82:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f84:	4b8b      	ldr	r3, [pc, #556]	; (80011b4 <MX_GPIO_Init+0x264>)
 8000f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f8a:	4a8a      	ldr	r2, [pc, #552]	; (80011b4 <MX_GPIO_Init+0x264>)
 8000f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f94:	4b87      	ldr	r3, [pc, #540]	; (80011b4 <MX_GPIO_Init+0x264>)
 8000f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	4b84      	ldr	r3, [pc, #528]	; (80011b4 <MX_GPIO_Init+0x264>)
 8000fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa8:	4a82      	ldr	r2, [pc, #520]	; (80011b4 <MX_GPIO_Init+0x264>)
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fb2:	4b80      	ldr	r3, [pc, #512]	; (80011b4 <MX_GPIO_Init+0x264>)
 8000fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	61bb      	str	r3, [r7, #24]
 8000fbe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc0:	4b7c      	ldr	r3, [pc, #496]	; (80011b4 <MX_GPIO_Init+0x264>)
 8000fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc6:	4a7b      	ldr	r2, [pc, #492]	; (80011b4 <MX_GPIO_Init+0x264>)
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fd0:	4b78      	ldr	r3, [pc, #480]	; (80011b4 <MX_GPIO_Init+0x264>)
 8000fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fde:	4b75      	ldr	r3, [pc, #468]	; (80011b4 <MX_GPIO_Init+0x264>)
 8000fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe4:	4a73      	ldr	r2, [pc, #460]	; (80011b4 <MX_GPIO_Init+0x264>)
 8000fe6:	f043 0320 	orr.w	r3, r3, #32
 8000fea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fee:	4b71      	ldr	r3, [pc, #452]	; (80011b4 <MX_GPIO_Init+0x264>)
 8000ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff4:	f003 0320 	and.w	r3, r3, #32
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ffc:	4b6d      	ldr	r3, [pc, #436]	; (80011b4 <MX_GPIO_Init+0x264>)
 8000ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001002:	4a6c      	ldr	r2, [pc, #432]	; (80011b4 <MX_GPIO_Init+0x264>)
 8001004:	f043 0310 	orr.w	r3, r3, #16
 8001008:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800100c:	4b69      	ldr	r3, [pc, #420]	; (80011b4 <MX_GPIO_Init+0x264>)
 800100e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001012:	f003 0310 	and.w	r3, r3, #16
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800101a:	4b66      	ldr	r3, [pc, #408]	; (80011b4 <MX_GPIO_Init+0x264>)
 800101c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001020:	4a64      	ldr	r2, [pc, #400]	; (80011b4 <MX_GPIO_Init+0x264>)
 8001022:	f043 0308 	orr.w	r3, r3, #8
 8001026:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800102a:	4b62      	ldr	r3, [pc, #392]	; (80011b4 <MX_GPIO_Init+0x264>)
 800102c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001030:	f003 0308 	and.w	r3, r3, #8
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001038:	4b5e      	ldr	r3, [pc, #376]	; (80011b4 <MX_GPIO_Init+0x264>)
 800103a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103e:	4a5d      	ldr	r2, [pc, #372]	; (80011b4 <MX_GPIO_Init+0x264>)
 8001040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001044:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001048:	4b5a      	ldr	r3, [pc, #360]	; (80011b4 <MX_GPIO_Init+0x264>)
 800104a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	f244 0101 	movw	r1, #16385	; 0x4001
 800105c:	4856      	ldr	r0, [pc, #344]	; (80011b8 <MX_GPIO_Init+0x268>)
 800105e:	f005 f897 	bl	8006190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 8001062:	2200      	movs	r2, #0
 8001064:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001068:	4854      	ldr	r0, [pc, #336]	; (80011bc <MX_GPIO_Init+0x26c>)
 800106a:	f005 f891 	bl	8006190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001074:	4852      	ldr	r0, [pc, #328]	; (80011c0 <MX_GPIO_Init+0x270>)
 8001076:	f005 f88b 	bl	8006190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO___LCD_CS_Pin|GPIO___LCD_DC_Pin, GPIO_PIN_RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001080:	4850      	ldr	r0, [pc, #320]	; (80011c4 <MX_GPIO_Init+0x274>)
 8001082:	f005 f885 	bl	8006190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800108c:	484e      	ldr	r0, [pc, #312]	; (80011c8 <MX_GPIO_Init+0x278>)
 800108e:	f005 f87f 	bl	8006190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_SD_CS_GPIO_Port, GPIO_SD_CS_Pin, GPIO_PIN_SET);
 8001092:	2201      	movs	r2, #1
 8001094:	2110      	movs	r1, #16
 8001096:	484a      	ldr	r0, [pc, #296]	; (80011c0 <MX_GPIO_Init+0x270>)
 8001098:	f005 f87a 	bl	8006190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	2102      	movs	r1, #2
 80010a0:	484a      	ldr	r0, [pc, #296]	; (80011cc <MX_GPIO_Init+0x27c>)
 80010a2:	f005 f875 	bl	8006190 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80010a6:	f244 0301 	movw	r3, #16385	; 0x4001
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ac:	2301      	movs	r3, #1
 80010ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b4:	2300      	movs	r3, #0
 80010b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010bc:	4619      	mov	r1, r3
 80010be:	483e      	ldr	r0, [pc, #248]	; (80011b8 <MX_GPIO_Init+0x268>)
 80010c0:	f004 fe9e 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ca:	2301      	movs	r3, #1
 80010cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010da:	4619      	mov	r1, r3
 80010dc:	4837      	ldr	r0, [pc, #220]	; (80011bc <MX_GPIO_Init+0x26c>)
 80010de:	f004 fe8f 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80010e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80010f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f8:	4619      	mov	r1, r3
 80010fa:	4831      	ldr	r0, [pc, #196]	; (80011c0 <MX_GPIO_Init+0x270>)
 80010fc:	f004 fe80 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = GPIO___LCD_CS_Pin|GPIO___LCD_DC_Pin;
 8001100:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001106:	2301      	movs	r3, #1
 8001108:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001116:	4619      	mov	r1, r3
 8001118:	482a      	ldr	r0, [pc, #168]	; (80011c4 <MX_GPIO_Init+0x274>)
 800111a:	f004 fe71 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800111e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001124:	2301      	movs	r3, #1
 8001126:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	2300      	movs	r3, #0
 800112e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001134:	4619      	mov	r1, r3
 8001136:	4824      	ldr	r0, [pc, #144]	; (80011c8 <MX_GPIO_Init+0x278>)
 8001138:	f004 fe62 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800113c:	2303      	movs	r3, #3
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001140:	4b23      	ldr	r3, [pc, #140]	; (80011d0 <MX_GPIO_Init+0x280>)
 8001142:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114c:	4619      	mov	r1, r3
 800114e:	481c      	ldr	r0, [pc, #112]	; (80011c0 <MX_GPIO_Init+0x270>)
 8001150:	f004 fe56 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_SD_CS_Pin;
 8001154:	2310      	movs	r3, #16
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001158:	2301      	movs	r3, #1
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800115c:	2301      	movs	r3, #1
 800115e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2300      	movs	r3, #0
 8001162:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIO_SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001168:	4619      	mov	r1, r3
 800116a:	4815      	ldr	r0, [pc, #84]	; (80011c0 <MX_GPIO_Init+0x270>)
 800116c:	f004 fe48 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001170:	2302      	movs	r3, #2
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001174:	2301      	movs	r3, #1
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001184:	4619      	mov	r1, r3
 8001186:	4811      	ldr	r0, [pc, #68]	; (80011cc <MX_GPIO_Init+0x27c>)
 8001188:	f004 fe3a 	bl	8005e00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	2100      	movs	r1, #0
 8001190:	2006      	movs	r0, #6
 8001192:	f001 fb34 	bl	80027fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001196:	2006      	movs	r0, #6
 8001198:	f001 fb4b 	bl	8002832 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800119c:	2200      	movs	r2, #0
 800119e:	2100      	movs	r1, #0
 80011a0:	2007      	movs	r0, #7
 80011a2:	f001 fb2c 	bl	80027fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80011a6:	2007      	movs	r0, #7
 80011a8:	f001 fb43 	bl	8002832 <HAL_NVIC_EnableIRQ>

}
 80011ac:	bf00      	nop
 80011ae:	3738      	adds	r7, #56	; 0x38
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	58024400 	.word	0x58024400
 80011b8:	58020400 	.word	0x58020400
 80011bc:	58021400 	.word	0x58021400
 80011c0:	58020c00 	.word	0x58020c00
 80011c4:	58021800 	.word	0x58021800
 80011c8:	58020000 	.word	0x58020000
 80011cc:	58021000 	.word	0x58021000
 80011d0:	11310000 	.word	0x11310000

080011d4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011d8:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <MX_I2C1_Init+0x74>)
 80011da:	4a1c      	ldr	r2, [pc, #112]	; (800124c <MX_I2C1_Init+0x78>)
 80011dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301242;
 80011de:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <MX_I2C1_Init+0x74>)
 80011e0:	4a1b      	ldr	r2, [pc, #108]	; (8001250 <MX_I2C1_Init+0x7c>)
 80011e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011e4:	4b18      	ldr	r3, [pc, #96]	; (8001248 <MX_I2C1_Init+0x74>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ea:	4b17      	ldr	r3, [pc, #92]	; (8001248 <MX_I2C1_Init+0x74>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011f0:	4b15      	ldr	r3, [pc, #84]	; (8001248 <MX_I2C1_Init+0x74>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011f6:	4b14      	ldr	r3, [pc, #80]	; (8001248 <MX_I2C1_Init+0x74>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <MX_I2C1_Init+0x74>)
 80011fe:	2200      	movs	r2, #0
 8001200:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <MX_I2C1_Init+0x74>)
 8001204:	2200      	movs	r2, #0
 8001206:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001208:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <MX_I2C1_Init+0x74>)
 800120a:	2200      	movs	r2, #0
 800120c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800120e:	480e      	ldr	r0, [pc, #56]	; (8001248 <MX_I2C1_Init+0x74>)
 8001210:	f006 fd94 	bl	8007d3c <HAL_I2C_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800121a:	f000 fad2 	bl	80017c2 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800121e:	2100      	movs	r1, #0
 8001220:	4809      	ldr	r0, [pc, #36]	; (8001248 <MX_I2C1_Init+0x74>)
 8001222:	f006 fe35 	bl	8007e90 <HAL_I2CEx_ConfigAnalogFilter>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800122c:	f000 fac9 	bl	80017c2 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001230:	2100      	movs	r1, #0
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <MX_I2C1_Init+0x74>)
 8001234:	f006 fe77 	bl	8007f26 <HAL_I2CEx_ConfigDigitalFilter>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800123e:	f000 fac0 	bl	80017c2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	2400b040 	.word	0x2400b040
 800124c:	40005400 	.word	0x40005400
 8001250:	00301242 	.word	0x00301242

08001254 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b0b8      	sub	sp, #224	; 0xe0
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800126c:	f107 0310 	add.w	r3, r7, #16
 8001270:	22bc      	movs	r2, #188	; 0xbc
 8001272:	2100      	movs	r1, #0
 8001274:	4618      	mov	r0, r3
 8001276:	f01b fa3b 	bl	801c6f0 <memset>
  if(i2cHandle->Instance==I2C1)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a29      	ldr	r2, [pc, #164]	; (8001324 <HAL_I2C_MspInit+0xd0>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d14a      	bne.n	800131a <HAL_I2C_MspInit+0xc6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001284:	2308      	movs	r3, #8
 8001286:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001288:	2300      	movs	r3, #0
 800128a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800128e:	f107 0310 	add.w	r3, r7, #16
 8001292:	4618      	mov	r0, r3
 8001294:	f007 fe9a 	bl	8008fcc <HAL_RCCEx_PeriphCLKConfig>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800129e:	f000 fa90 	bl	80017c2 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a2:	4b21      	ldr	r3, [pc, #132]	; (8001328 <HAL_I2C_MspInit+0xd4>)
 80012a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a8:	4a1f      	ldr	r2, [pc, #124]	; (8001328 <HAL_I2C_MspInit+0xd4>)
 80012aa:	f043 0302 	orr.w	r3, r3, #2
 80012ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012b2:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <HAL_I2C_MspInit+0xd4>)
 80012b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA___ChassisMPU_Pin|I2C1_SCL___ChassisMPU_Pin;
 80012c0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80012c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012c8:	2312      	movs	r3, #18
 80012ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ce:	2301      	movs	r3, #1
 80012d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012da:	2304      	movs	r3, #4
 80012dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012e4:	4619      	mov	r1, r3
 80012e6:	4811      	ldr	r0, [pc, #68]	; (800132c <HAL_I2C_MspInit+0xd8>)
 80012e8:	f004 fd8a 	bl	8005e00 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012ec:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <HAL_I2C_MspInit+0xd4>)
 80012ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012f2:	4a0d      	ldr	r2, [pc, #52]	; (8001328 <HAL_I2C_MspInit+0xd4>)
 80012f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012f8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012fc:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <HAL_I2C_MspInit+0xd4>)
 80012fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001302:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 4, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	2104      	movs	r1, #4
 800130e:	201f      	movs	r0, #31
 8001310:	f001 fa75 	bl	80027fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001314:	201f      	movs	r0, #31
 8001316:	f001 fa8c 	bl	8002832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800131a:	bf00      	nop
 800131c:	37e0      	adds	r7, #224	; 0xe0
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40005400 	.word	0x40005400
 8001328:	58024400 	.word	0x58024400
 800132c:	58020400 	.word	0x58020400

08001330 <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af02      	add	r7, sp, #8
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001344:	d101      	bne.n	800134a <rpmsg_send+0x1a>
		return RPMSG_ERR_ADDR;
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <rpmsg_send+0x3c>)
 8001348:	e00c      	b.n	8001364 <rpmsg_send+0x34>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001352:	2301      	movs	r3, #1
 8001354:	9301      	str	r3, [sp, #4]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	68f8      	ldr	r0, [r7, #12]
 800135e:	f015 fa53 	bl	8016808 <rpmsg_send_offchannel_raw>
 8001362:	4603      	mov	r3, r0
					 len, true);
}
 8001364:	4618      	mov	r0, r3
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	fffff829 	.word	0xfffff829

08001370 <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
 800137c:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2220      	movs	r2, #32
 8001382:	68b9      	ldr	r1, [r7, #8]
 8001384:	4618      	mov	r0, r3
 8001386:	f01c fb0f 	bl	801d9a8 <strncpy>
	ept->addr = src;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	69fa      	ldr	r2, [r7, #28]
 80013a0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80013a2:	bf00      	nop
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	; 0x28
 80013b0:	af02      	add	r7, sp, #8
/* USER CODE BEGIN Boot_Mode_Sequence_0 */

/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	MPU_Config();
 80013b2:	f000 f9df 	bl	8001774 <MPU_Config>
	CPU_CACHE_Enable();
 80013b6:	f000 f96f 	bl	8001698 <CPU_CACHE_Enable>
//	timeout = 0xFFFF;
	while (__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET)
 80013ba:	e000      	b.n	80013be <main+0x12>
	{
		asm("nop");
 80013bc:	bf00      	nop
	while (__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET)
 80013be:	4b68      	ldr	r3, [pc, #416]	; (8001560 <main+0x1b4>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f8      	bne.n	80013bc <main+0x10>
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ca:	f001 f867 	bl	800249c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ce:	f000 f8db 	bl	8001588 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 80013d2:	4b63      	ldr	r3, [pc, #396]	; (8001560 <main+0x1b4>)
 80013d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d8:	4a61      	ldr	r2, [pc, #388]	; (8001560 <main+0x1b4>)
 80013da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013e2:	4b5f      	ldr	r3, [pc, #380]	; (8001560 <main+0x1b4>)
 80013e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	68bb      	ldr	r3, [r7, #8]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 80013f0:	2000      	movs	r0, #0
 80013f2:	f006 fc49 	bl	8007c88 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 80013f6:	2100      	movs	r1, #0
 80013f8:	2000      	movs	r0, #0
 80013fa:	f006 fc5f 	bl	8007cbc <HAL_HSEM_Release>


/* USER CODE END Boot_Mode_Sequence_2 */

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_D2SRAM1_CLK_ENABLE();
 80013fe:	4b58      	ldr	r3, [pc, #352]	; (8001560 <main+0x1b4>)
 8001400:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001404:	4a56      	ldr	r2, [pc, #344]	; (8001560 <main+0x1b4>)
 8001406:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800140a:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800140e:	4b54      	ldr	r3, [pc, #336]	; (8001560 <main+0x1b4>)
 8001410:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001414:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	687b      	ldr	r3, [r7, #4]
//  __HAL_RCC_AHBSRAM1_CLK_ENABLE();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800141c:	f7ff fd98 	bl	8000f50 <MX_GPIO_Init>
  MX_DMA_Init();
 8001420:	f7ff fc54 	bl	8000ccc <MX_DMA_Init>
  MX_ETH_Init();
 8001424:	f7ff fc7a 	bl	8000d1c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001428:	f000 fe6e 	bl	8002108 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800142c:	f7ff fed2 	bl	80011d4 <MX_I2C1_Init>
  MX_SPI3_Init();
 8001430:	f000 fa22 	bl	8001878 <MX_SPI3_Init>
  MX_TIM1_Init();
 8001434:	f000 fd20 	bl	8001e78 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001438:	f000 fe1a 	bl	8002070 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 800143c:	f01a fdcc 	bl	801bfd8 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 8001440:	f00d fc10 	bl	800ec64 <MX_FATFS_Init>
  MX_SPI2_Init();
 8001444:	f000 f9c2 	bl	80017cc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  MAILBOX_Init();
 8001448:	f017 fd7e 	bl	8018f48 <MAILBOX_Init>
  HAL_UART_Receive_DMA(&huart1, bleRXArray, 64);
 800144c:	2240      	movs	r2, #64	; 0x40
 800144e:	4945      	ldr	r1, [pc, #276]	; (8001564 <main+0x1b8>)
 8001450:	4845      	ldr	r0, [pc, #276]	; (8001568 <main+0x1bc>)
 8001452:	f00a ffcf 	bl	800c3f4 <HAL_UART_Receive_DMA>
  
	uint8_t initRes = initSDCard();
 8001456:	f016 fbdf 	bl	8017c18 <initSDCard>
 800145a:	4603      	mov	r3, r0
 800145c:	76fb      	strb	r3, [r7, #27]
	if (initRes == (uint8_t)FR_OK)
 800145e:	7efb      	ldrb	r3, [r7, #27]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d101      	bne.n	8001468 <main+0xbc>
	{
		createNewLogFile();
 8001464:	f016 fc22 	bl	8017cac <createNewLogFile>
	}
	sprintf(terminalBuffer,"Test terminal");
 8001468:	4940      	ldr	r1, [pc, #256]	; (800156c <main+0x1c0>)
 800146a:	4841      	ldr	r0, [pc, #260]	; (8001570 <main+0x1c4>)
 800146c:	f01c fa6a 	bl	801d944 <siprintf>
	logData(terminalBuffer, false, false, false);
 8001470:	2300      	movs	r3, #0
 8001472:	2200      	movs	r2, #0
 8001474:	2100      	movs	r1, #0
 8001476:	483e      	ldr	r0, [pc, #248]	; (8001570 <main+0x1c4>)
 8001478:	f016 fd70 	bl	8017f5c <logData>

	/* Initialize the rpmsg endpoint to set default addresses to RPMSG_ADDR_ANY */
	rpmsg_init_ept(&rp_endpoint, RPMSG_CHAN_NAME, RPMSG_ADDR_ANY, RPMSG_ADDR_ANY,
 800147c:	2300      	movs	r3, #0
 800147e:	9301      	str	r3, [sp, #4]
 8001480:	2300      	movs	r3, #0
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	f04f 33ff 	mov.w	r3, #4294967295
 8001488:	f04f 32ff 	mov.w	r2, #4294967295
 800148c:	4939      	ldr	r1, [pc, #228]	; (8001574 <main+0x1c8>)
 800148e:	483a      	ldr	r0, [pc, #232]	; (8001578 <main+0x1cc>)
 8001490:	f7ff ff6e 	bl	8001370 <rpmsg_init_ept>
			NULL, NULL);
	/* Initialize OpenAmp and libmetal libraries */
	if (MX_OPENAMP_Init(RPMSG_MASTER, new_service_cb)!= HAL_OK)
 8001494:	4939      	ldr	r1, [pc, #228]	; (800157c <main+0x1d0>)
 8001496:	2000      	movs	r0, #0
 8001498:	f017 fe70 	bl	801917c <MX_OPENAMP_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <main+0xfa>
	{
		Error_Handler();
 80014a2:	f000 f98e 	bl	80017c2 <Error_Handler>
	/*
	 * The rpmsg service is initiate by the remote processor, on A7 new_service_cb
	 * callback is received on service creation. Wait for the callback
	 */
//	HAL_Delay(2000);
	OPENAMP_Wait_EndPointready(&rp_endpoint);
 80014a6:	4834      	ldr	r0, [pc, #208]	; (8001578 <main+0x1cc>)
 80014a8:	f017 ff28 	bl	80192fc <OPENAMP_Wait_EndPointready>

	/* Send the massage to the remote CPU */
	int32_t status = OPENAMP_send(&rp_endpoint, &message, sizeof(message));
 80014ac:	2204      	movs	r2, #4
 80014ae:	4934      	ldr	r1, [pc, #208]	; (8001580 <main+0x1d4>)
 80014b0:	4831      	ldr	r0, [pc, #196]	; (8001578 <main+0x1cc>)
 80014b2:	f7ff ff3d 	bl	8001330 <rpmsg_send>
 80014b6:	6178      	str	r0, [r7, #20]

	if (status < 0)
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	da01      	bge.n	80014c2 <main+0x116>
	{
		Error_Handler();
 80014be:	f000 f980 	bl	80017c2 <Error_Handler>

	//	ssd1306_TestAll();
//	ssd1306_Init();
//	ssd1306_TestBorder();

	uint8_t message = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	73fb      	strb	r3, [r7, #15]
	while (message < 100)
 80014c6:	e011      	b.n	80014ec <main+0x140>
	{
		/* Receive the massage from the remote CPU */
		message = receive_message();
 80014c8:	f7ff fb04 	bl	8000ad4 <receive_message>
 80014cc:	4603      	mov	r3, r0
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	73fb      	strb	r3, [r7, #15]
		status = OPENAMP_send(&rp_endpoint, &message, sizeof(message));
 80014d2:	f107 030f 	add.w	r3, r7, #15
 80014d6:	2201      	movs	r2, #1
 80014d8:	4619      	mov	r1, r3
 80014da:	4827      	ldr	r0, [pc, #156]	; (8001578 <main+0x1cc>)
 80014dc:	f7ff ff28 	bl	8001330 <rpmsg_send>
 80014e0:	6178      	str	r0, [r7, #20]
		if (status < 0)
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	da01      	bge.n	80014ec <main+0x140>
		{
			Error_Handler();
 80014e8:	f000 f96b 	bl	80017c2 <Error_Handler>
	while (message < 100)
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	2b63      	cmp	r3, #99	; 0x63
 80014f0:	d9ea      	bls.n	80014c8 <main+0x11c>
	}



	//	isPortrait = true;
	screenInit();
 80014f2:	f016 fdd3 	bl	801809c <screenInit>
	screenClear();
 80014f6:	f016 fead 	bl	8018254 <screenClear>
	renderCompleteFrame = true;
 80014fa:	4b22      	ldr	r3, [pc, #136]	; (8001584 <main+0x1d8>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		message = receive_message();
 8001500:	f7ff fae8 	bl	8000ad4 <receive_message>
 8001504:	4603      	mov	r3, r0
 8001506:	b2db      	uxtb	r3, r3
 8001508:	73fb      	strb	r3, [r7, #15]
		screenUpdate(true);
 800150a:	2001      	movs	r0, #1
 800150c:	f017 f8c2 	bl	8018694 <screenUpdate>
		displayNextFrame();
 8001510:	f017 ff98 	bl	8019444 <displayNextFrame>
		message = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	73fb      	strb	r3, [r7, #15]

		monitorLogSize();
 8001518:	f016 fcf4 	bl	8017f04 <monitorLogSize>
		sprintf(terminalBuffer,"Test terminal");
 800151c:	4913      	ldr	r1, [pc, #76]	; (800156c <main+0x1c0>)
 800151e:	4814      	ldr	r0, [pc, #80]	; (8001570 <main+0x1c4>)
 8001520:	f01c fa10 	bl	801d944 <siprintf>
		logData(terminalBuffer, false, false, false);
 8001524:	2300      	movs	r3, #0
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	4811      	ldr	r0, [pc, #68]	; (8001570 <main+0x1c4>)
 800152c:	f016 fd16 	bl	8017f5c <logData>
		HAL_UART_Receive_DMA(&huart1, bleRXArray, 64);
 8001530:	2240      	movs	r2, #64	; 0x40
 8001532:	490c      	ldr	r1, [pc, #48]	; (8001564 <main+0x1b8>)
 8001534:	480c      	ldr	r0, [pc, #48]	; (8001568 <main+0x1bc>)
 8001536:	f00a ff5d 	bl	800c3f4 <HAL_UART_Receive_DMA>
		for (int j = 0 ; j < 64 ; j++)
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
 800153e:	e00a      	b.n	8001556 <main+0x1aa>
		{
			if (bleRXArray[j] != 0)
 8001540:	4a08      	ldr	r2, [pc, #32]	; (8001564 <main+0x1b8>)
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	4413      	add	r3, r2
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <main+0x1a4>
			{
				int w = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	613b      	str	r3, [r7, #16]
		for (int j = 0 ; j < 64 ; j++)
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	3301      	adds	r3, #1
 8001554:	61fb      	str	r3, [r7, #28]
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	2b3f      	cmp	r3, #63	; 0x3f
 800155a:	ddf1      	ble.n	8001540 <main+0x194>
		message = receive_message();
 800155c:	e7d0      	b.n	8001500 <main+0x154>
 800155e:	bf00      	nop
 8001560:	58024400 	.word	0x58024400
 8001564:	2400a3ec 	.word	0x2400a3ec
 8001568:	2400b3cc 	.word	0x2400b3cc
 800156c:	080212c0 	.word	0x080212c0
 8001570:	2400aab0 	.word	0x2400aab0
 8001574:	080212d0 	.word	0x080212d0
 8001578:	2400b098 	.word	0x2400b098
 800157c:	08000b29 	.word	0x08000b29
 8001580:	2400a3e4 	.word	0x2400a3e4
 8001584:	2400aeb8 	.word	0x2400aeb8

08001588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b09c      	sub	sp, #112	; 0x70
 800158c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800158e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001592:	224c      	movs	r2, #76	; 0x4c
 8001594:	2100      	movs	r1, #0
 8001596:	4618      	mov	r0, r3
 8001598:	f01b f8aa 	bl	801c6f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	2220      	movs	r2, #32
 80015a0:	2100      	movs	r1, #0
 80015a2:	4618      	mov	r0, r3
 80015a4:	f01b f8a4 	bl	801c6f0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80015a8:	2004      	movs	r0, #4
 80015aa:	f006 fd09 	bl	8007fc0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80015ae:	2300      	movs	r3, #0
 80015b0:	603b      	str	r3, [r7, #0]
 80015b2:	4b36      	ldr	r3, [pc, #216]	; (800168c <SystemClock_Config+0x104>)
 80015b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b6:	4a35      	ldr	r2, [pc, #212]	; (800168c <SystemClock_Config+0x104>)
 80015b8:	f023 0301 	bic.w	r3, r3, #1
 80015bc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80015be:	4b33      	ldr	r3, [pc, #204]	; (800168c <SystemClock_Config+0x104>)
 80015c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	603b      	str	r3, [r7, #0]
 80015c8:	4b31      	ldr	r3, [pc, #196]	; (8001690 <SystemClock_Config+0x108>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015d0:	4a2f      	ldr	r2, [pc, #188]	; (8001690 <SystemClock_Config+0x108>)
 80015d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d6:	6193      	str	r3, [r2, #24]
 80015d8:	4b2d      	ldr	r3, [pc, #180]	; (8001690 <SystemClock_Config+0x108>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015e0:	603b      	str	r3, [r7, #0]
 80015e2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80015e4:	bf00      	nop
 80015e6:	4b2a      	ldr	r3, [pc, #168]	; (8001690 <SystemClock_Config+0x108>)
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015f2:	d1f8      	bne.n	80015e6 <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80015f4:	4b27      	ldr	r3, [pc, #156]	; (8001694 <SystemClock_Config+0x10c>)
 80015f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f8:	f023 0303 	bic.w	r3, r3, #3
 80015fc:	4a25      	ldr	r2, [pc, #148]	; (8001694 <SystemClock_Config+0x10c>)
 80015fe:	f043 0302 	orr.w	r3, r3, #2
 8001602:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001604:	2301      	movs	r3, #1
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001608:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800160c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800160e:	2302      	movs	r3, #2
 8001610:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001612:	2302      	movs	r3, #2
 8001614:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001616:	2301      	movs	r3, #1
 8001618:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 800161a:	2312      	movs	r3, #18
 800161c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800161e:	2302      	movs	r3, #2
 8001620:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001622:	2302      	movs	r3, #2
 8001624:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001626:	2302      	movs	r3, #2
 8001628:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800162a:	230c      	movs	r3, #12
 800162c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800162e:	2302      	movs	r3, #2
 8001630:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8001632:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001636:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001638:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163c:	4618      	mov	r0, r3
 800163e:	f006 fd29 	bl	8008094 <HAL_RCC_OscConfig>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001648:	f000 f8bb 	bl	80017c2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800164c:	233f      	movs	r3, #63	; 0x3f
 800164e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001650:	2303      	movs	r3, #3
 8001652:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001654:	2300      	movs	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001658:	2300      	movs	r3, #0
 800165a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001660:	2340      	movs	r3, #64	; 0x40
 8001662:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001664:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001668:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800166a:	2300      	movs	r3, #0
 800166c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	2101      	movs	r1, #1
 8001672:	4618      	mov	r0, r3
 8001674:	f007 f91e 	bl	80088b4 <HAL_RCC_ClockConfig>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800167e:	f000 f8a0 	bl	80017c2 <Error_Handler>
  }
}
 8001682:	bf00      	nop
 8001684:	3770      	adds	r7, #112	; 0x70
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	58000400 	.word	0x58000400
 8001690:	58024800 	.word	0x58024800
 8001694:	58024400 	.word	0x58024400

08001698 <CPU_CACHE_Enable>:
 * @brief  CPU L1-Cache enable.
 * @param  None
 * @retval None
 */
static void CPU_CACHE_Enable(void)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800169e:	4b34      	ldr	r3, [pc, #208]	; (8001770 <CPU_CACHE_Enable+0xd8>)
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d11b      	bne.n	80016e2 <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80016aa:	f3bf 8f4f 	dsb	sy
}
 80016ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016b0:	f3bf 8f6f 	isb	sy
}
 80016b4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80016b6:	4b2e      	ldr	r3, [pc, #184]	; (8001770 <CPU_CACHE_Enable+0xd8>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80016be:	f3bf 8f4f 	dsb	sy
}
 80016c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016c4:	f3bf 8f6f 	isb	sy
}
 80016c8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80016ca:	4b29      	ldr	r3, [pc, #164]	; (8001770 <CPU_CACHE_Enable+0xd8>)
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	4a28      	ldr	r2, [pc, #160]	; (8001770 <CPU_CACHE_Enable+0xd8>)
 80016d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80016d6:	f3bf 8f4f 	dsb	sy
}
 80016da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016dc:	f3bf 8f6f 	isb	sy
}
 80016e0:	e000      	b.n	80016e4 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80016e2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80016e4:	4b22      	ldr	r3, [pc, #136]	; (8001770 <CPU_CACHE_Enable+0xd8>)
 80016e6:	695b      	ldr	r3, [r3, #20]
 80016e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d138      	bne.n	8001762 <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80016f0:	4b1f      	ldr	r3, [pc, #124]	; (8001770 <CPU_CACHE_Enable+0xd8>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80016f8:	f3bf 8f4f 	dsb	sy
}
 80016fc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80016fe:	4b1c      	ldr	r3, [pc, #112]	; (8001770 <CPU_CACHE_Enable+0xd8>)
 8001700:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001704:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	0b5b      	lsrs	r3, r3, #13
 800170a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800170e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	08db      	lsrs	r3, r3, #3
 8001714:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001718:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	015a      	lsls	r2, r3, #5
 800171e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001722:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001728:	4911      	ldr	r1, [pc, #68]	; (8001770 <CPU_CACHE_Enable+0xd8>)
 800172a:	4313      	orrs	r3, r2
 800172c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	1e5a      	subs	r2, r3, #1
 8001734:	607a      	str	r2, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1ef      	bne.n	800171a <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	1e5a      	subs	r2, r3, #1
 800173e:	60ba      	str	r2, [r7, #8]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1e5      	bne.n	8001710 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8001744:	f3bf 8f4f 	dsb	sy
}
 8001748:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <CPU_CACHE_Enable+0xd8>)
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	4a08      	ldr	r2, [pc, #32]	; (8001770 <CPU_CACHE_Enable+0xd8>)
 8001750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001754:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001756:	f3bf 8f4f 	dsb	sy
}
 800175a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800175c:	f3bf 8f6f 	isb	sy
}
 8001760:	e000      	b.n	8001764 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001762:	bf00      	nop
	/* Enable I-Cache */
	SCB_EnableICache();

	/* Enable D-Cache */
	SCB_EnableDCache();
}
 8001764:	bf00      	nop
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <MPU_Config>:
 *         The Region Size is 64KB.
 * @param  None
 * @retval None
 */
static void MPU_Config(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct;

	/* Disable the MPU */
	HAL_MPU_Disable();
 800177a:	f001 f875 	bl	8002868 <HAL_MPU_Disable>

	/* Configure the MPU attributes as WT for SDRAM */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800177e:	2301      	movs	r3, #1
 8001780:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = D3_SRAM_BASE;
 8001782:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001786:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8001788:	230f      	movs	r3, #15
 800178a:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800178c:	2303      	movs	r3, #3
 800178e:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001790:	2300      	movs	r3, #0
 8001792:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001794:	2300      	movs	r3, #0
 8001796:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001798:	2301      	movs	r3, #1
 800179a:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800179c:	2300      	movs	r3, #0
 800179e:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 80017a4:	2300      	movs	r3, #0
 80017a6:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	733b      	strb	r3, [r7, #12]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80017ac:	463b      	mov	r3, r7
 80017ae:	4618      	mov	r0, r3
 80017b0:	f001 f892 	bl	80028d8 <HAL_MPU_ConfigRegion>

	/* Enable the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80017b4:	2004      	movs	r0, #4
 80017b6:	f001 f86f 	bl	8002898 <HAL_MPU_Enable>
}
 80017ba:	bf00      	nop
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80017c6:	b672      	cpsid	i
}
 80017c8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80017ca:	e7fe      	b.n	80017ca <Error_Handler+0x8>

080017cc <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80017d0:	4b27      	ldr	r3, [pc, #156]	; (8001870 <MX_SPI2_Init+0xa4>)
 80017d2:	4a28      	ldr	r2, [pc, #160]	; (8001874 <MX_SPI2_Init+0xa8>)
 80017d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017d6:	4b26      	ldr	r3, [pc, #152]	; (8001870 <MX_SPI2_Init+0xa4>)
 80017d8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80017dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017de:	4b24      	ldr	r3, [pc, #144]	; (8001870 <MX_SPI2_Init+0xa4>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017e4:	4b22      	ldr	r3, [pc, #136]	; (8001870 <MX_SPI2_Init+0xa4>)
 80017e6:	2207      	movs	r2, #7
 80017e8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017ea:	4b21      	ldr	r3, [pc, #132]	; (8001870 <MX_SPI2_Init+0xa4>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017f0:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <MX_SPI2_Init+0xa4>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017f6:	4b1e      	ldr	r3, [pc, #120]	; (8001870 <MX_SPI2_Init+0xa4>)
 80017f8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80017fc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80017fe:	4b1c      	ldr	r3, [pc, #112]	; (8001870 <MX_SPI2_Init+0xa4>)
 8001800:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001804:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001806:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <MX_SPI2_Init+0xa4>)
 8001808:	2200      	movs	r2, #0
 800180a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800180c:	4b18      	ldr	r3, [pc, #96]	; (8001870 <MX_SPI2_Init+0xa4>)
 800180e:	2200      	movs	r2, #0
 8001810:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001812:	4b17      	ldr	r3, [pc, #92]	; (8001870 <MX_SPI2_Init+0xa4>)
 8001814:	2200      	movs	r2, #0
 8001816:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001818:	4b15      	ldr	r3, [pc, #84]	; (8001870 <MX_SPI2_Init+0xa4>)
 800181a:	2200      	movs	r2, #0
 800181c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800181e:	4b14      	ldr	r3, [pc, #80]	; (8001870 <MX_SPI2_Init+0xa4>)
 8001820:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001824:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001826:	4b12      	ldr	r3, [pc, #72]	; (8001870 <MX_SPI2_Init+0xa4>)
 8001828:	2200      	movs	r2, #0
 800182a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800182c:	4b10      	ldr	r3, [pc, #64]	; (8001870 <MX_SPI2_Init+0xa4>)
 800182e:	2200      	movs	r2, #0
 8001830:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <MX_SPI2_Init+0xa4>)
 8001834:	2200      	movs	r2, #0
 8001836:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001838:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <MX_SPI2_Init+0xa4>)
 800183a:	2200      	movs	r2, #0
 800183c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800183e:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <MX_SPI2_Init+0xa4>)
 8001840:	2200      	movs	r2, #0
 8001842:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001844:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <MX_SPI2_Init+0xa4>)
 8001846:	2200      	movs	r2, #0
 8001848:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800184a:	4b09      	ldr	r3, [pc, #36]	; (8001870 <MX_SPI2_Init+0xa4>)
 800184c:	2200      	movs	r2, #0
 800184e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001850:	4b07      	ldr	r3, [pc, #28]	; (8001870 <MX_SPI2_Init+0xa4>)
 8001852:	2200      	movs	r2, #0
 8001854:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <MX_SPI2_Init+0xa4>)
 8001858:	2200      	movs	r2, #0
 800185a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800185c:	4804      	ldr	r0, [pc, #16]	; (8001870 <MX_SPI2_Init+0xa4>)
 800185e:	f008 ff17 	bl	800a690 <HAL_SPI_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001868:	f7ff ffab 	bl	80017c2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	2400b0ec 	.word	0x2400b0ec
 8001874:	40003800 	.word	0x40003800

08001878 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800187c:	4b28      	ldr	r3, [pc, #160]	; (8001920 <MX_SPI3_Init+0xa8>)
 800187e:	4a29      	ldr	r2, [pc, #164]	; (8001924 <MX_SPI3_Init+0xac>)
 8001880:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001882:	4b27      	ldr	r3, [pc, #156]	; (8001920 <MX_SPI3_Init+0xa8>)
 8001884:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001888:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 800188a:	4b25      	ldr	r3, [pc, #148]	; (8001920 <MX_SPI3_Init+0xa8>)
 800188c:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8001890:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001892:	4b23      	ldr	r3, [pc, #140]	; (8001920 <MX_SPI3_Init+0xa8>)
 8001894:	2207      	movs	r2, #7
 8001896:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001898:	4b21      	ldr	r3, [pc, #132]	; (8001920 <MX_SPI3_Init+0xa8>)
 800189a:	2200      	movs	r2, #0
 800189c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800189e:	4b20      	ldr	r3, [pc, #128]	; (8001920 <MX_SPI3_Init+0xa8>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80018a4:	4b1e      	ldr	r3, [pc, #120]	; (8001920 <MX_SPI3_Init+0xa8>)
 80018a6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80018aa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80018ac:	4b1c      	ldr	r3, [pc, #112]	; (8001920 <MX_SPI3_Init+0xa8>)
 80018ae:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80018b2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018b4:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <MX_SPI3_Init+0xa8>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80018ba:	4b19      	ldr	r3, [pc, #100]	; (8001920 <MX_SPI3_Init+0xa8>)
 80018bc:	2200      	movs	r2, #0
 80018be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018c0:	4b17      	ldr	r3, [pc, #92]	; (8001920 <MX_SPI3_Init+0xa8>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80018c6:	4b16      	ldr	r3, [pc, #88]	; (8001920 <MX_SPI3_Init+0xa8>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018cc:	4b14      	ldr	r3, [pc, #80]	; (8001920 <MX_SPI3_Init+0xa8>)
 80018ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018d2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80018d4:	4b12      	ldr	r3, [pc, #72]	; (8001920 <MX_SPI3_Init+0xa8>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80018da:	4b11      	ldr	r3, [pc, #68]	; (8001920 <MX_SPI3_Init+0xa8>)
 80018dc:	2200      	movs	r2, #0
 80018de:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018e0:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <MX_SPI3_Init+0xa8>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80018e6:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <MX_SPI3_Init+0xa8>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <MX_SPI3_Init+0xa8>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80018f2:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <MX_SPI3_Init+0xa8>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80018f8:	4b09      	ldr	r3, [pc, #36]	; (8001920 <MX_SPI3_Init+0xa8>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80018fe:	4b08      	ldr	r3, [pc, #32]	; (8001920 <MX_SPI3_Init+0xa8>)
 8001900:	2200      	movs	r2, #0
 8001902:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <MX_SPI3_Init+0xa8>)
 8001906:	2200      	movs	r2, #0
 8001908:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800190a:	4805      	ldr	r0, [pc, #20]	; (8001920 <MX_SPI3_Init+0xa8>)
 800190c:	f008 fec0 	bl	800a690 <HAL_SPI_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8001916:	f7ff ff54 	bl	80017c2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	2400b174 	.word	0x2400b174
 8001924:	40003c00 	.word	0x40003c00

08001928 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b0bc      	sub	sp, #240	; 0xf0
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001940:	f107 0320 	add.w	r3, r7, #32
 8001944:	22bc      	movs	r2, #188	; 0xbc
 8001946:	2100      	movs	r1, #0
 8001948:	4618      	mov	r0, r3
 800194a:	f01a fed1 	bl	801c6f0 <memset>
  if(spiHandle->Instance==SPI2)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a6d      	ldr	r2, [pc, #436]	; (8001b08 <HAL_SPI_MspInit+0x1e0>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d166      	bne.n	8001a26 <HAL_SPI_MspInit+0xfe>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800195c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800195e:	2300      	movs	r3, #0
 8001960:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001962:	f107 0320 	add.w	r3, r7, #32
 8001966:	4618      	mov	r0, r3
 8001968:	f007 fb30 	bl	8008fcc <HAL_RCCEx_PeriphCLKConfig>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001972:	f7ff ff26 	bl	80017c2 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001976:	4b65      	ldr	r3, [pc, #404]	; (8001b0c <HAL_SPI_MspInit+0x1e4>)
 8001978:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800197c:	4a63      	ldr	r2, [pc, #396]	; (8001b0c <HAL_SPI_MspInit+0x1e4>)
 800197e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001982:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001986:	4b61      	ldr	r3, [pc, #388]	; (8001b0c <HAL_SPI_MspInit+0x1e4>)
 8001988:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800198c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001990:	61fb      	str	r3, [r7, #28]
 8001992:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001994:	4b5d      	ldr	r3, [pc, #372]	; (8001b0c <HAL_SPI_MspInit+0x1e4>)
 8001996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800199a:	4a5c      	ldr	r2, [pc, #368]	; (8001b0c <HAL_SPI_MspInit+0x1e4>)
 800199c:	f043 0304 	orr.w	r3, r3, #4
 80019a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019a4:	4b59      	ldr	r3, [pc, #356]	; (8001b0c <HAL_SPI_MspInit+0x1e4>)
 80019a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019aa:	f003 0304 	and.w	r3, r3, #4
 80019ae:	61bb      	str	r3, [r7, #24]
 80019b0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019b2:	4b56      	ldr	r3, [pc, #344]	; (8001b0c <HAL_SPI_MspInit+0x1e4>)
 80019b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b8:	4a54      	ldr	r2, [pc, #336]	; (8001b0c <HAL_SPI_MspInit+0x1e4>)
 80019ba:	f043 0308 	orr.w	r3, r3, #8
 80019be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019c2:	4b52      	ldr	r3, [pc, #328]	; (8001b0c <HAL_SPI_MspInit+0x1e4>)
 80019c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c8:	f003 0308 	and.w	r3, r3, #8
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	697b      	ldr	r3, [r7, #20]
    /**SPI2 GPIO Configuration
    PC2_C     ------> SPI2_MISO
    PC3_C     ------> SPI2_MOSI
    PD3     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019d0:	230c      	movs	r3, #12
 80019d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d6:	2302      	movs	r3, #2
 80019d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e2:	2300      	movs	r3, #0
 80019e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019e8:	2305      	movs	r3, #5
 80019ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ee:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80019f2:	4619      	mov	r1, r3
 80019f4:	4846      	ldr	r0, [pc, #280]	; (8001b10 <HAL_SPI_MspInit+0x1e8>)
 80019f6:	f004 fa03 	bl	8005e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019fa:	2308      	movs	r3, #8
 80019fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a00:	2302      	movs	r3, #2
 8001a02:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a12:	2305      	movs	r3, #5
 8001a14:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a18:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	483d      	ldr	r0, [pc, #244]	; (8001b14 <HAL_SPI_MspInit+0x1ec>)
 8001a20:	f004 f9ee 	bl	8005e00 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001a24:	e06b      	b.n	8001afe <HAL_SPI_MspInit+0x1d6>
  else if(spiHandle->Instance==SPI3)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a3b      	ldr	r2, [pc, #236]	; (8001b18 <HAL_SPI_MspInit+0x1f0>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d166      	bne.n	8001afe <HAL_SPI_MspInit+0x1d6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001a30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a34:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a3a:	f107 0320 	add.w	r3, r7, #32
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f007 fac4 	bl	8008fcc <HAL_RCCEx_PeriphCLKConfig>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_SPI_MspInit+0x126>
      Error_Handler();
 8001a4a:	f7ff feba 	bl	80017c2 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a4e:	4b2f      	ldr	r3, [pc, #188]	; (8001b0c <HAL_SPI_MspInit+0x1e4>)
 8001a50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a54:	4a2d      	ldr	r2, [pc, #180]	; (8001b0c <HAL_SPI_MspInit+0x1e4>)
 8001a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a5a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a5e:	4b2b      	ldr	r3, [pc, #172]	; (8001b0c <HAL_SPI_MspInit+0x1e4>)
 8001a60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6c:	4b27      	ldr	r3, [pc, #156]	; (8001b0c <HAL_SPI_MspInit+0x1e4>)
 8001a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a72:	4a26      	ldr	r2, [pc, #152]	; (8001b0c <HAL_SPI_MspInit+0x1e4>)
 8001a74:	f043 0302 	orr.w	r3, r3, #2
 8001a78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a7c:	4b23      	ldr	r3, [pc, #140]	; (8001b0c <HAL_SPI_MspInit+0x1e4>)
 8001a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a8a:	4b20      	ldr	r3, [pc, #128]	; (8001b0c <HAL_SPI_MspInit+0x1e4>)
 8001a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a90:	4a1e      	ldr	r2, [pc, #120]	; (8001b0c <HAL_SPI_MspInit+0x1e4>)
 8001a92:	f043 0304 	orr.w	r3, r3, #4
 8001a96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a9a:	4b1c      	ldr	r3, [pc, #112]	; (8001b0c <HAL_SPI_MspInit+0x1e4>)
 8001a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa0:	f003 0304 	and.w	r3, r3, #4
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI3_MOSI___LCD_Pin;
 8001aa8:	2304      	movs	r3, #4
 8001aaa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aba:	2300      	movs	r3, #0
 8001abc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001ac0:	2307      	movs	r3, #7
 8001ac2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(SPI3_MOSI___LCD_GPIO_Port, &GPIO_InitStruct);
 8001ac6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001aca:	4619      	mov	r1, r3
 8001acc:	4813      	ldr	r0, [pc, #76]	; (8001b1c <HAL_SPI_MspInit+0x1f4>)
 8001ace:	f004 f997 	bl	8005e00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI3_SCK___LCD_Pin;
 8001ad2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ad6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ada:	2302      	movs	r3, #2
 8001adc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001aec:	2306      	movs	r3, #6
 8001aee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(SPI3_SCK___LCD_GPIO_Port, &GPIO_InitStruct);
 8001af2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001af6:	4619      	mov	r1, r3
 8001af8:	4805      	ldr	r0, [pc, #20]	; (8001b10 <HAL_SPI_MspInit+0x1e8>)
 8001afa:	f004 f981 	bl	8005e00 <HAL_GPIO_Init>
}
 8001afe:	bf00      	nop
 8001b00:	37f0      	adds	r7, #240	; 0xf0
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40003800 	.word	0x40003800
 8001b0c:	58024400 	.word	0x58024400
 8001b10:	58020800 	.word	0x58020800
 8001b14:	58020c00 	.word	0x58020c00
 8001b18:	40003c00 	.word	0x40003c00
 8001b1c:	58020400 	.word	0x58020400

08001b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <HAL_MspInit+0x5c>)
 8001b28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b2c:	4a13      	ldr	r2, [pc, #76]	; (8001b7c <HAL_MspInit+0x5c>)
 8001b2e:	f043 0302 	orr.w	r3, r3, #2
 8001b32:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b36:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <HAL_MspInit+0x5c>)
 8001b38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	607b      	str	r3, [r7, #4]
 8001b42:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* CM4_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM4_SEV_IRQn, 4, 0);
 8001b44:	2200      	movs	r2, #0
 8001b46:	2104      	movs	r1, #4
 8001b48:	2041      	movs	r0, #65	; 0x41
 8001b4a:	f000 fe58 	bl	80027fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM4_SEV_IRQn);
 8001b4e:	2041      	movs	r0, #65	; 0x41
 8001b50:	f000 fe6f 	bl	8002832 <HAL_NVIC_EnableIRQ>
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 4, 0);
 8001b54:	2200      	movs	r2, #0
 8001b56:	2104      	movs	r1, #4
 8001b58:	207d      	movs	r0, #125	; 0x7d
 8001b5a:	f000 fe50 	bl	80027fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 8001b5e:	207d      	movs	r0, #125	; 0x7d
 8001b60:	f000 fe67 	bl	8002832 <HAL_NVIC_EnableIRQ>
  /* HOLD_CORE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HOLD_CORE_IRQn, 4, 0);
 8001b64:	2200      	movs	r2, #0
 8001b66:	2104      	movs	r1, #4
 8001b68:	2094      	movs	r0, #148	; 0x94
 8001b6a:	f000 fe48 	bl	80027fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HOLD_CORE_IRQn);
 8001b6e:	2094      	movs	r0, #148	; 0x94
 8001b70:	f000 fe5f 	bl	8002832 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b74:	bf00      	nop
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	58024400 	.word	0x58024400

08001b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <NMI_Handler+0x4>

08001b86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b8a:	e7fe      	b.n	8001b8a <HardFault_Handler+0x4>

08001b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <MemManage_Handler+0x4>

08001b92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b96:	e7fe      	b.n	8001b96 <BusFault_Handler+0x4>

08001b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b9c:	e7fe      	b.n	8001b9c <UsageFault_Handler+0x4>

08001b9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bcc:	f000 fcd8 	bl	8002580 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001bd8:	2001      	movs	r0, #1
 8001bda:	f004 faf2 	bl	80061c2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001be6:	2002      	movs	r0, #2
 8001be8:	f004 faeb 	bl	80061c2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001bf4:	4802      	ldr	r0, [pc, #8]	; (8001c00 <DMA1_Stream0_IRQHandler+0x10>)
 8001bf6:	f002 f9db 	bl	8003fb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	2400b354 	.word	0x2400b354

08001c04 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001c08:	4802      	ldr	r0, [pc, #8]	; (8001c14 <DMA1_Stream1_IRQHandler+0x10>)
 8001c0a:	f002 f9d1 	bl	8003fb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	2400b24c 	.word	0x2400b24c

08001c18 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001c1c:	4802      	ldr	r0, [pc, #8]	; (8001c28 <I2C1_EV_IRQHandler+0x10>)
 8001c1e:	f006 f91d 	bl	8007e5c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	2400b040 	.word	0x2400b040

08001c2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c30:	4802      	ldr	r0, [pc, #8]	; (8001c3c <USART1_IRQHandler+0x10>)
 8001c32:	f00a fc25 	bl	800c480 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	2400b3cc 	.word	0x2400b3cc

08001c40 <CM4_SEV_IRQHandler>:

/**
  * @brief This function handles CM4 send event interrupt for CM7.
  */
void CM4_SEV_IRQHandler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0

  /* USER CODE END CM4_SEV_IRQn 0 */
  /* USER CODE BEGIN CM4_SEV_IRQn 1 */

  /* USER CODE END CM4_SEV_IRQn 1 */
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001c54:	4802      	ldr	r0, [pc, #8]	; (8001c60 <OTG_FS_IRQHandler+0x10>)
 8001c56:	f004 fd39 	bl	80066cc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	2401454c 	.word	0x2401454c

08001c64 <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001c68:	f006 f84e 	bl	8007d08 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 8001c6c:	bf00      	nop
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HOLD_CORE_IRQHandler>:

/**
  * @brief This function handles Hold core interrupt.
  */
void HOLD_CORE_IRQHandler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0

  /* USER CODE END HOLD_CORE_IRQn 0 */
  /* USER CODE BEGIN HOLD_CORE_IRQn 1 */

  /* USER CODE END HOLD_CORE_IRQn 1 */
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
	...

08001c80 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0)
 8001c8a:	88fb      	ldrh	r3, [r7, #6]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d109      	bne.n	8001ca4 <HAL_GPIO_EXTI_Callback+0x24>
	{
		channelARightBack = HAL_GPIO_ReadPin(GPIOD, GPIO_Pin);
 8001c90:	88fb      	ldrh	r3, [r7, #6]
 8001c92:	4619      	mov	r1, r3
 8001c94:	4811      	ldr	r0, [pc, #68]	; (8001cdc <HAL_GPIO_EXTI_Callback+0x5c>)
 8001c96:	f004 fa63 	bl	8006160 <HAL_GPIO_ReadPin>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <HAL_GPIO_EXTI_Callback+0x60>)
 8001ca0:	701a      	strb	r2, [r3, #0]
 8001ca2:	e00b      	b.n	8001cbc <HAL_GPIO_EXTI_Callback+0x3c>
	}
	else if (GPIO_Pin == GPIO_PIN_1)
 8001ca4:	88fb      	ldrh	r3, [r7, #6]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d108      	bne.n	8001cbc <HAL_GPIO_EXTI_Callback+0x3c>
	{
		channelBRightBack = HAL_GPIO_ReadPin(GPIOD, GPIO_Pin);
 8001caa:	88fb      	ldrh	r3, [r7, #6]
 8001cac:	4619      	mov	r1, r3
 8001cae:	480b      	ldr	r0, [pc, #44]	; (8001cdc <HAL_GPIO_EXTI_Callback+0x5c>)
 8001cb0:	f004 fa56 	bl	8006160 <HAL_GPIO_ReadPin>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	4b0a      	ldr	r3, [pc, #40]	; (8001ce4 <HAL_GPIO_EXTI_Callback+0x64>)
 8001cba:	701a      	strb	r2, [r3, #0]
	}
	currentAggregatedRBMotor = 0x10 * channelARightBack + channelBRightBack;
 8001cbc:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <HAL_GPIO_EXTI_Callback+0x60>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	011b      	lsls	r3, r3, #4
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	4b07      	ldr	r3, [pc, #28]	; (8001ce4 <HAL_GPIO_EXTI_Callback+0x64>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	4413      	add	r3, r2
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_GPIO_EXTI_Callback+0x68>)
 8001cce:	701a      	strb	r2, [r3, #0]
	int a = 1;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	60fb      	str	r3, [r7, #12]
}
 8001cd4:	bf00      	nop
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	58020c00 	.word	0x58020c00
 8001ce0:	2400b1fd 	.word	0x2400b1fd
 8001ce4:	2400b1fc 	.word	0x2400b1fc
 8001ce8:	2400aeb0 	.word	0x2400aeb0

08001cec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
	return 1;
 8001cf0:	2301      	movs	r3, #1
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <_kill>:

int _kill(int pid, int sig)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d06:	f01a fc7f 	bl	801c608 <__errno>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2216      	movs	r2, #22
 8001d0e:	601a      	str	r2, [r3, #0]
	return -1;
 8001d10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <_exit>:

void _exit (int status)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d24:	f04f 31ff 	mov.w	r1, #4294967295
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff ffe7 	bl	8001cfc <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d2e:	e7fe      	b.n	8001d2e <_exit+0x12>

08001d30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	e00a      	b.n	8001d58 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d42:	f3af 8000 	nop.w
 8001d46:	4601      	mov	r1, r0
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	1c5a      	adds	r2, r3, #1
 8001d4c:	60ba      	str	r2, [r7, #8]
 8001d4e:	b2ca      	uxtb	r2, r1
 8001d50:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	3301      	adds	r3, #1
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	dbf0      	blt.n	8001d42 <_read+0x12>
	}

return len;
 8001d60:	687b      	ldr	r3, [r7, #4]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b086      	sub	sp, #24
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	60f8      	str	r0, [r7, #12]
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	e009      	b.n	8001d90 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	1c5a      	adds	r2, r3, #1
 8001d80:	60ba      	str	r2, [r7, #8]
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	617b      	str	r3, [r7, #20]
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	dbf1      	blt.n	8001d7c <_write+0x12>
	}
	return len;
 8001d98:	687b      	ldr	r3, [r7, #4]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <_close>:

int _close(int file)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
	return -1;
 8001daa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dca:	605a      	str	r2, [r3, #4]
	return 0;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <_isatty>:

int _isatty(int file)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
	return 1;
 8001de2:	2301      	movs	r3, #1
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
	return 0;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3714      	adds	r7, #20
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
	...

08001e0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e14:	4a14      	ldr	r2, [pc, #80]	; (8001e68 <_sbrk+0x5c>)
 8001e16:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <_sbrk+0x60>)
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e20:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <_sbrk+0x64>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d102      	bne.n	8001e2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e28:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <_sbrk+0x64>)
 8001e2a:	4a12      	ldr	r2, [pc, #72]	; (8001e74 <_sbrk+0x68>)
 8001e2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e2e:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <_sbrk+0x64>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d207      	bcs.n	8001e4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e3c:	f01a fbe4 	bl	801c608 <__errno>
 8001e40:	4603      	mov	r3, r0
 8001e42:	220c      	movs	r2, #12
 8001e44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e46:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4a:	e009      	b.n	8001e60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e4c:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <_sbrk+0x64>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e52:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <_sbrk+0x64>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4413      	add	r3, r2
 8001e5a:	4a05      	ldr	r2, [pc, #20]	; (8001e70 <_sbrk+0x64>)
 8001e5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	24040000 	.word	0x24040000
 8001e6c:	00000400 	.word	0x00000400
 8001e70:	2400a3e8 	.word	0x2400a3e8
 8001e74:	24014860 	.word	0x24014860

08001e78 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b096      	sub	sp, #88	; 0x58
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e7e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]
 8001e88:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	605a      	str	r2, [r3, #4]
 8001e94:	609a      	str	r2, [r3, #8]
 8001e96:	60da      	str	r2, [r3, #12]
 8001e98:	611a      	str	r2, [r3, #16]
 8001e9a:	615a      	str	r2, [r3, #20]
 8001e9c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	222c      	movs	r2, #44	; 0x2c
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f01a fc23 	bl	801c6f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001eaa:	4b40      	ldr	r3, [pc, #256]	; (8001fac <MX_TIM1_Init+0x134>)
 8001eac:	4a40      	ldr	r2, [pc, #256]	; (8001fb0 <MX_TIM1_Init+0x138>)
 8001eae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75;
 8001eb0:	4b3e      	ldr	r3, [pc, #248]	; (8001fac <MX_TIM1_Init+0x134>)
 8001eb2:	224b      	movs	r2, #75	; 0x4b
 8001eb4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb6:	4b3d      	ldr	r3, [pc, #244]	; (8001fac <MX_TIM1_Init+0x134>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8001ebc:	4b3b      	ldr	r3, [pc, #236]	; (8001fac <MX_TIM1_Init+0x134>)
 8001ebe:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001ec2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec4:	4b39      	ldr	r3, [pc, #228]	; (8001fac <MX_TIM1_Init+0x134>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001eca:	4b38      	ldr	r3, [pc, #224]	; (8001fac <MX_TIM1_Init+0x134>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ed0:	4b36      	ldr	r3, [pc, #216]	; (8001fac <MX_TIM1_Init+0x134>)
 8001ed2:	2280      	movs	r2, #128	; 0x80
 8001ed4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ed6:	4835      	ldr	r0, [pc, #212]	; (8001fac <MX_TIM1_Init+0x134>)
 8001ed8:	f009 faa3 	bl	800b422 <HAL_TIM_PWM_Init>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001ee2:	f7ff fc6e 	bl	80017c2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001eea:	2300      	movs	r3, #0
 8001eec:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ef2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	482c      	ldr	r0, [pc, #176]	; (8001fac <MX_TIM1_Init+0x134>)
 8001efa:	f00a f88f 	bl	800c01c <HAL_TIMEx_MasterConfigSynchronization>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001f04:	f7ff fc5d 	bl	80017c2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f08:	2360      	movs	r3, #96	; 0x60
 8001f0a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000;
 8001f0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f10:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f12:	2300      	movs	r3, #0
 8001f14:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f16:	2300      	movs	r3, #0
 8001f18:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f22:	2300      	movs	r3, #0
 8001f24:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	481f      	ldr	r0, [pc, #124]	; (8001fac <MX_TIM1_Init+0x134>)
 8001f30:	f009 fbd6 	bl	800b6e0 <HAL_TIM_PWM_ConfigChannel>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001f3a:	f7ff fc42 	bl	80017c2 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f46:	2204      	movs	r2, #4
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4818      	ldr	r0, [pc, #96]	; (8001fac <MX_TIM1_Init+0x134>)
 8001f4c:	f009 fbc8 	bl	800b6e0 <HAL_TIM_PWM_ConfigChannel>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 8001f56:	f7ff fc34 	bl	80017c2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f72:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f86:	2300      	movs	r3, #0
 8001f88:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f8a:	1d3b      	adds	r3, r7, #4
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4807      	ldr	r0, [pc, #28]	; (8001fac <MX_TIM1_Init+0x134>)
 8001f90:	f00a f8cc 	bl	800c12c <HAL_TIMEx_ConfigBreakDeadTime>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001f9a:	f7ff fc12 	bl	80017c2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f9e:	4803      	ldr	r0, [pc, #12]	; (8001fac <MX_TIM1_Init+0x134>)
 8001fa0:	f000 f82a 	bl	8001ff8 <HAL_TIM_MspPostInit>

}
 8001fa4:	bf00      	nop
 8001fa6:	3758      	adds	r7, #88	; 0x58
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	2400b200 	.word	0x2400b200
 8001fb0:	40010000 	.word	0x40010000

08001fb4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a0b      	ldr	r2, [pc, #44]	; (8001ff0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d10e      	bne.n	8001fe4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fc6:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <HAL_TIM_PWM_MspInit+0x40>)
 8001fc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fcc:	4a09      	ldr	r2, [pc, #36]	; (8001ff4 <HAL_TIM_PWM_MspInit+0x40>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001fd6:	4b07      	ldr	r3, [pc, #28]	; (8001ff4 <HAL_TIM_PWM_MspInit+0x40>)
 8001fd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	3714      	adds	r7, #20
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	40010000 	.word	0x40010000
 8001ff4:	58024400 	.word	0x58024400

08001ff8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b088      	sub	sp, #32
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002000:	f107 030c 	add.w	r3, r7, #12
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a13      	ldr	r2, [pc, #76]	; (8002064 <HAL_TIM_MspPostInit+0x6c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d11f      	bne.n	800205a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800201a:	4b13      	ldr	r3, [pc, #76]	; (8002068 <HAL_TIM_MspPostInit+0x70>)
 800201c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002020:	4a11      	ldr	r2, [pc, #68]	; (8002068 <HAL_TIM_MspPostInit+0x70>)
 8002022:	f043 0310 	orr.w	r3, r3, #16
 8002026:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800202a:	4b0f      	ldr	r3, [pc, #60]	; (8002068 <HAL_TIM_MspPostInit+0x70>)
 800202c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002030:	f003 0310 	and.w	r3, r3, #16
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TIM1_CH1___LCD_Brightness_Pin|TIM1_CH2___LIDAR_motor_ctrl_Pin;
 8002038:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800203c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203e:	2302      	movs	r3, #2
 8002040:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002046:	2300      	movs	r3, #0
 8002048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800204a:	2301      	movs	r3, #1
 800204c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800204e:	f107 030c 	add.w	r3, r7, #12
 8002052:	4619      	mov	r1, r3
 8002054:	4805      	ldr	r0, [pc, #20]	; (800206c <HAL_TIM_MspPostInit+0x74>)
 8002056:	f003 fed3 	bl	8005e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800205a:	bf00      	nop
 800205c:	3720      	adds	r7, #32
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40010000 	.word	0x40010000
 8002068:	58024400 	.word	0x58024400
 800206c:	58021000 	.word	0x58021000

08002070 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002074:	4b22      	ldr	r3, [pc, #136]	; (8002100 <MX_USART1_UART_Init+0x90>)
 8002076:	4a23      	ldr	r2, [pc, #140]	; (8002104 <MX_USART1_UART_Init+0x94>)
 8002078:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800207a:	4b21      	ldr	r3, [pc, #132]	; (8002100 <MX_USART1_UART_Init+0x90>)
 800207c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002080:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002082:	4b1f      	ldr	r3, [pc, #124]	; (8002100 <MX_USART1_UART_Init+0x90>)
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002088:	4b1d      	ldr	r3, [pc, #116]	; (8002100 <MX_USART1_UART_Init+0x90>)
 800208a:	2200      	movs	r2, #0
 800208c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800208e:	4b1c      	ldr	r3, [pc, #112]	; (8002100 <MX_USART1_UART_Init+0x90>)
 8002090:	2200      	movs	r2, #0
 8002092:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002094:	4b1a      	ldr	r3, [pc, #104]	; (8002100 <MX_USART1_UART_Init+0x90>)
 8002096:	220c      	movs	r2, #12
 8002098:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800209a:	4b19      	ldr	r3, [pc, #100]	; (8002100 <MX_USART1_UART_Init+0x90>)
 800209c:	2200      	movs	r2, #0
 800209e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020a0:	4b17      	ldr	r3, [pc, #92]	; (8002100 <MX_USART1_UART_Init+0x90>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020a6:	4b16      	ldr	r3, [pc, #88]	; (8002100 <MX_USART1_UART_Init+0x90>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020ac:	4b14      	ldr	r3, [pc, #80]	; (8002100 <MX_USART1_UART_Init+0x90>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020b2:	4b13      	ldr	r3, [pc, #76]	; (8002100 <MX_USART1_UART_Init+0x90>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020b8:	4811      	ldr	r0, [pc, #68]	; (8002100 <MX_USART1_UART_Init+0x90>)
 80020ba:	f00a f8b5 	bl	800c228 <HAL_UART_Init>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80020c4:	f7ff fb7d 	bl	80017c2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020c8:	2100      	movs	r1, #0
 80020ca:	480d      	ldr	r0, [pc, #52]	; (8002100 <MX_USART1_UART_Init+0x90>)
 80020cc:	f00b fd80 	bl	800dbd0 <HAL_UARTEx_SetTxFifoThreshold>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80020d6:	f7ff fb74 	bl	80017c2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020da:	2100      	movs	r1, #0
 80020dc:	4808      	ldr	r0, [pc, #32]	; (8002100 <MX_USART1_UART_Init+0x90>)
 80020de:	f00b fdb5 	bl	800dc4c <HAL_UARTEx_SetRxFifoThreshold>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80020e8:	f7ff fb6b 	bl	80017c2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80020ec:	4804      	ldr	r0, [pc, #16]	; (8002100 <MX_USART1_UART_Init+0x90>)
 80020ee:	f00b fd36 	bl	800db5e <HAL_UARTEx_DisableFifoMode>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80020f8:	f7ff fb63 	bl	80017c2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020fc:	bf00      	nop
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	2400b3cc 	.word	0x2400b3cc
 8002104:	40011000 	.word	0x40011000

08002108 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800210c:	4b22      	ldr	r3, [pc, #136]	; (8002198 <MX_USART3_UART_Init+0x90>)
 800210e:	4a23      	ldr	r2, [pc, #140]	; (800219c <MX_USART3_UART_Init+0x94>)
 8002110:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002112:	4b21      	ldr	r3, [pc, #132]	; (8002198 <MX_USART3_UART_Init+0x90>)
 8002114:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002118:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800211a:	4b1f      	ldr	r3, [pc, #124]	; (8002198 <MX_USART3_UART_Init+0x90>)
 800211c:	2200      	movs	r2, #0
 800211e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002120:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <MX_USART3_UART_Init+0x90>)
 8002122:	2200      	movs	r2, #0
 8002124:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002126:	4b1c      	ldr	r3, [pc, #112]	; (8002198 <MX_USART3_UART_Init+0x90>)
 8002128:	2200      	movs	r2, #0
 800212a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800212c:	4b1a      	ldr	r3, [pc, #104]	; (8002198 <MX_USART3_UART_Init+0x90>)
 800212e:	220c      	movs	r2, #12
 8002130:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002132:	4b19      	ldr	r3, [pc, #100]	; (8002198 <MX_USART3_UART_Init+0x90>)
 8002134:	2200      	movs	r2, #0
 8002136:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002138:	4b17      	ldr	r3, [pc, #92]	; (8002198 <MX_USART3_UART_Init+0x90>)
 800213a:	2200      	movs	r2, #0
 800213c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800213e:	4b16      	ldr	r3, [pc, #88]	; (8002198 <MX_USART3_UART_Init+0x90>)
 8002140:	2200      	movs	r2, #0
 8002142:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002144:	4b14      	ldr	r3, [pc, #80]	; (8002198 <MX_USART3_UART_Init+0x90>)
 8002146:	2200      	movs	r2, #0
 8002148:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800214a:	4b13      	ldr	r3, [pc, #76]	; (8002198 <MX_USART3_UART_Init+0x90>)
 800214c:	2200      	movs	r2, #0
 800214e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002150:	4811      	ldr	r0, [pc, #68]	; (8002198 <MX_USART3_UART_Init+0x90>)
 8002152:	f00a f869 	bl	800c228 <HAL_UART_Init>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800215c:	f7ff fb31 	bl	80017c2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002160:	2100      	movs	r1, #0
 8002162:	480d      	ldr	r0, [pc, #52]	; (8002198 <MX_USART3_UART_Init+0x90>)
 8002164:	f00b fd34 	bl	800dbd0 <HAL_UARTEx_SetTxFifoThreshold>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800216e:	f7ff fb28 	bl	80017c2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002172:	2100      	movs	r1, #0
 8002174:	4808      	ldr	r0, [pc, #32]	; (8002198 <MX_USART3_UART_Init+0x90>)
 8002176:	f00b fd69 	bl	800dc4c <HAL_UARTEx_SetRxFifoThreshold>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002180:	f7ff fb1f 	bl	80017c2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002184:	4804      	ldr	r0, [pc, #16]	; (8002198 <MX_USART3_UART_Init+0x90>)
 8002186:	f00b fcea 	bl	800db5e <HAL_UARTEx_DisableFifoMode>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002190:	f7ff fb17 	bl	80017c2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002194:	bf00      	nop
 8002196:	bd80      	pop	{r7, pc}
 8002198:	2400b2c4 	.word	0x2400b2c4
 800219c:	40004800 	.word	0x40004800

080021a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b0ba      	sub	sp, #232	; 0xe8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021b8:	f107 0318 	add.w	r3, r7, #24
 80021bc:	22bc      	movs	r2, #188	; 0xbc
 80021be:	2100      	movs	r1, #0
 80021c0:	4618      	mov	r0, r3
 80021c2:	f01a fa95 	bl	801c6f0 <memset>
  if(uartHandle->Instance==USART1)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a87      	ldr	r2, [pc, #540]	; (80023e8 <HAL_UART_MspInit+0x248>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	f040 8090 	bne.w	80022f2 <HAL_UART_MspInit+0x152>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80021d2:	2301      	movs	r3, #1
 80021d4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80021d6:	2300      	movs	r3, #0
 80021d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021dc:	f107 0318 	add.w	r3, r7, #24
 80021e0:	4618      	mov	r0, r3
 80021e2:	f006 fef3 	bl	8008fcc <HAL_RCCEx_PeriphCLKConfig>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80021ec:	f7ff fae9 	bl	80017c2 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021f0:	4b7e      	ldr	r3, [pc, #504]	; (80023ec <HAL_UART_MspInit+0x24c>)
 80021f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021f6:	4a7d      	ldr	r2, [pc, #500]	; (80023ec <HAL_UART_MspInit+0x24c>)
 80021f8:	f043 0310 	orr.w	r3, r3, #16
 80021fc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002200:	4b7a      	ldr	r3, [pc, #488]	; (80023ec <HAL_UART_MspInit+0x24c>)
 8002202:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002206:	f003 0310 	and.w	r3, r3, #16
 800220a:	617b      	str	r3, [r7, #20]
 800220c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800220e:	4b77      	ldr	r3, [pc, #476]	; (80023ec <HAL_UART_MspInit+0x24c>)
 8002210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002214:	4a75      	ldr	r2, [pc, #468]	; (80023ec <HAL_UART_MspInit+0x24c>)
 8002216:	f043 0302 	orr.w	r3, r3, #2
 800221a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800221e:	4b73      	ldr	r3, [pc, #460]	; (80023ec <HAL_UART_MspInit+0x24c>)
 8002220:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800222c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002230:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002234:	2302      	movs	r3, #2
 8002236:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223a:	2300      	movs	r3, #0
 800223c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002240:	2300      	movs	r3, #0
 8002242:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002246:	2304      	movs	r3, #4
 8002248:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800224c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002250:	4619      	mov	r1, r3
 8002252:	4867      	ldr	r0, [pc, #412]	; (80023f0 <HAL_UART_MspInit+0x250>)
 8002254:	f003 fdd4 	bl	8005e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002258:	2340      	movs	r3, #64	; 0x40
 800225a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225e:	2302      	movs	r3, #2
 8002260:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226a:	2300      	movs	r3, #0
 800226c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002270:	2307      	movs	r3, #7
 8002272:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002276:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800227a:	4619      	mov	r1, r3
 800227c:	485c      	ldr	r0, [pc, #368]	; (80023f0 <HAL_UART_MspInit+0x250>)
 800227e:	f003 fdbf 	bl	8005e00 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8002282:	4b5c      	ldr	r3, [pc, #368]	; (80023f4 <HAL_UART_MspInit+0x254>)
 8002284:	4a5c      	ldr	r2, [pc, #368]	; (80023f8 <HAL_UART_MspInit+0x258>)
 8002286:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002288:	4b5a      	ldr	r3, [pc, #360]	; (80023f4 <HAL_UART_MspInit+0x254>)
 800228a:	2229      	movs	r2, #41	; 0x29
 800228c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800228e:	4b59      	ldr	r3, [pc, #356]	; (80023f4 <HAL_UART_MspInit+0x254>)
 8002290:	2200      	movs	r2, #0
 8002292:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002294:	4b57      	ldr	r3, [pc, #348]	; (80023f4 <HAL_UART_MspInit+0x254>)
 8002296:	2200      	movs	r2, #0
 8002298:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800229a:	4b56      	ldr	r3, [pc, #344]	; (80023f4 <HAL_UART_MspInit+0x254>)
 800229c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022a0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022a2:	4b54      	ldr	r3, [pc, #336]	; (80023f4 <HAL_UART_MspInit+0x254>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022a8:	4b52      	ldr	r3, [pc, #328]	; (80023f4 <HAL_UART_MspInit+0x254>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80022ae:	4b51      	ldr	r3, [pc, #324]	; (80023f4 <HAL_UART_MspInit+0x254>)
 80022b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022b4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80022b6:	4b4f      	ldr	r3, [pc, #316]	; (80023f4 <HAL_UART_MspInit+0x254>)
 80022b8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80022bc:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022be:	4b4d      	ldr	r3, [pc, #308]	; (80023f4 <HAL_UART_MspInit+0x254>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80022c4:	484b      	ldr	r0, [pc, #300]	; (80023f4 <HAL_UART_MspInit+0x254>)
 80022c6:	f000 fb4b 	bl	8002960 <HAL_DMA_Init>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <HAL_UART_MspInit+0x134>
    {
      Error_Handler();
 80022d0:	f7ff fa77 	bl	80017c2 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a47      	ldr	r2, [pc, #284]	; (80023f4 <HAL_UART_MspInit+0x254>)
 80022d8:	67da      	str	r2, [r3, #124]	; 0x7c
 80022da:	4a46      	ldr	r2, [pc, #280]	; (80023f4 <HAL_UART_MspInit+0x254>)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022e0:	2200      	movs	r2, #0
 80022e2:	2100      	movs	r1, #0
 80022e4:	2025      	movs	r0, #37	; 0x25
 80022e6:	f000 fa8a 	bl	80027fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022ea:	2025      	movs	r0, #37	; 0x25
 80022ec:	f000 faa1 	bl	8002832 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80022f0:	e075      	b.n	80023de <HAL_UART_MspInit+0x23e>
  else if(uartHandle->Instance==USART3)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a41      	ldr	r2, [pc, #260]	; (80023fc <HAL_UART_MspInit+0x25c>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d170      	bne.n	80023de <HAL_UART_MspInit+0x23e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80022fc:	2302      	movs	r3, #2
 80022fe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002300:	2300      	movs	r3, #0
 8002302:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002306:	f107 0318 	add.w	r3, r7, #24
 800230a:	4618      	mov	r0, r3
 800230c:	f006 fe5e 	bl	8008fcc <HAL_RCCEx_PeriphCLKConfig>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_UART_MspInit+0x17a>
      Error_Handler();
 8002316:	f7ff fa54 	bl	80017c2 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800231a:	4b34      	ldr	r3, [pc, #208]	; (80023ec <HAL_UART_MspInit+0x24c>)
 800231c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002320:	4a32      	ldr	r2, [pc, #200]	; (80023ec <HAL_UART_MspInit+0x24c>)
 8002322:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002326:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800232a:	4b30      	ldr	r3, [pc, #192]	; (80023ec <HAL_UART_MspInit+0x24c>)
 800232c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002330:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002338:	4b2c      	ldr	r3, [pc, #176]	; (80023ec <HAL_UART_MspInit+0x24c>)
 800233a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800233e:	4a2b      	ldr	r2, [pc, #172]	; (80023ec <HAL_UART_MspInit+0x24c>)
 8002340:	f043 0308 	orr.w	r3, r3, #8
 8002344:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002348:	4b28      	ldr	r3, [pc, #160]	; (80023ec <HAL_UART_MspInit+0x24c>)
 800234a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002356:	f44f 7340 	mov.w	r3, #768	; 0x300
 800235a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235e:	2302      	movs	r3, #2
 8002360:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236a:	2300      	movs	r3, #0
 800236c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002370:	2307      	movs	r3, #7
 8002372:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002376:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800237a:	4619      	mov	r1, r3
 800237c:	4820      	ldr	r0, [pc, #128]	; (8002400 <HAL_UART_MspInit+0x260>)
 800237e:	f003 fd3f 	bl	8005e00 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002382:	4b20      	ldr	r3, [pc, #128]	; (8002404 <HAL_UART_MspInit+0x264>)
 8002384:	4a20      	ldr	r2, [pc, #128]	; (8002408 <HAL_UART_MspInit+0x268>)
 8002386:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002388:	4b1e      	ldr	r3, [pc, #120]	; (8002404 <HAL_UART_MspInit+0x264>)
 800238a:	222d      	movs	r2, #45	; 0x2d
 800238c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800238e:	4b1d      	ldr	r3, [pc, #116]	; (8002404 <HAL_UART_MspInit+0x264>)
 8002390:	2200      	movs	r2, #0
 8002392:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002394:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <HAL_UART_MspInit+0x264>)
 8002396:	2200      	movs	r2, #0
 8002398:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800239a:	4b1a      	ldr	r3, [pc, #104]	; (8002404 <HAL_UART_MspInit+0x264>)
 800239c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023a0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023a2:	4b18      	ldr	r3, [pc, #96]	; (8002404 <HAL_UART_MspInit+0x264>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023a8:	4b16      	ldr	r3, [pc, #88]	; (8002404 <HAL_UART_MspInit+0x264>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80023ae:	4b15      	ldr	r3, [pc, #84]	; (8002404 <HAL_UART_MspInit+0x264>)
 80023b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023b4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023b6:	4b13      	ldr	r3, [pc, #76]	; (8002404 <HAL_UART_MspInit+0x264>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023bc:	4b11      	ldr	r3, [pc, #68]	; (8002404 <HAL_UART_MspInit+0x264>)
 80023be:	2200      	movs	r2, #0
 80023c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80023c2:	4810      	ldr	r0, [pc, #64]	; (8002404 <HAL_UART_MspInit+0x264>)
 80023c4:	f000 facc 	bl	8002960 <HAL_DMA_Init>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <HAL_UART_MspInit+0x232>
      Error_Handler();
 80023ce:	f7ff f9f8 	bl	80017c2 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a0b      	ldr	r2, [pc, #44]	; (8002404 <HAL_UART_MspInit+0x264>)
 80023d6:	67da      	str	r2, [r3, #124]	; 0x7c
 80023d8:	4a0a      	ldr	r2, [pc, #40]	; (8002404 <HAL_UART_MspInit+0x264>)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6393      	str	r3, [r2, #56]	; 0x38
}
 80023de:	bf00      	nop
 80023e0:	37e8      	adds	r7, #232	; 0xe8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40011000 	.word	0x40011000
 80023ec:	58024400 	.word	0x58024400
 80023f0:	58020400 	.word	0x58020400
 80023f4:	2400b354 	.word	0x2400b354
 80023f8:	40020010 	.word	0x40020010
 80023fc:	40004800 	.word	0x40004800
 8002400:	58020c00 	.word	0x58020c00
 8002404:	2400b24c 	.word	0x2400b24c
 8002408:	40020028 	.word	0x40020028

0800240c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800240c:	f8df d05c 	ldr.w	sp, [pc, #92]	; 800246c <LoopFillZerobss_RAM_D2+0x12>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002410:	f7fe fbc2 	bl	8000b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002414:	4816      	ldr	r0, [pc, #88]	; (8002470 <LoopFillZerobss_RAM_D2+0x16>)
  ldr r1, =_edata
 8002416:	4917      	ldr	r1, [pc, #92]	; (8002474 <LoopFillZerobss_RAM_D2+0x1a>)
  ldr r2, =_sidata
 8002418:	4a17      	ldr	r2, [pc, #92]	; (8002478 <LoopFillZerobss_RAM_D2+0x1e>)
  movs r3, #0
 800241a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800241c:	e002      	b.n	8002424 <LoopCopyDataInit>

0800241e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800241e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002422:	3304      	adds	r3, #4

08002424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002428:	d3f9      	bcc.n	800241e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800242a:	4a14      	ldr	r2, [pc, #80]	; (800247c <LoopFillZerobss_RAM_D2+0x22>)
  ldr r4, =_ebss
 800242c:	4c14      	ldr	r4, [pc, #80]	; (8002480 <LoopFillZerobss_RAM_D2+0x26>)
  movs r3, #0
 800242e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002430:	e001      	b.n	8002436 <LoopFillZerobss>

08002432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002434:	3204      	adds	r2, #4

08002436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002438:	d3fb      	bcc.n	8002432 <FillZerobss>

  /* Copy the data segment initializers from flash to RAM_D2 */
  movs  r1, #0
 800243a:	2100      	movs	r1, #0
  b  LoopCopyDataInit_RAM_D2
 800243c:	e003      	b.n	8002446 <LoopCopyDataInit_RAM_D2>

0800243e <CopyDataInit_RAM_D2>:

CopyDataInit_RAM_D2:
  ldr  r3, =_siRAM_D2
 800243e:	4b11      	ldr	r3, [pc, #68]	; (8002484 <LoopFillZerobss_RAM_D2+0x2a>)
  ldr  r3, [r3, r1]
 8002440:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002442:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002444:	3104      	adds	r1, #4

08002446 <LoopCopyDataInit_RAM_D2>:

LoopCopyDataInit_RAM_D2:
  ldr  r0, =_sRAM_D2
 8002446:	4810      	ldr	r0, [pc, #64]	; (8002488 <LoopFillZerobss_RAM_D2+0x2e>)
  ldr  r3, =_eRAM_D2
 8002448:	4b10      	ldr	r3, [pc, #64]	; (800248c <LoopFillZerobss_RAM_D2+0x32>)
  adds  r2, r0, r1
 800244a:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800244c:	429a      	cmp	r2, r3
  bcc  CopyDataInit_RAM_D2
 800244e:	d3f6      	bcc.n	800243e <CopyDataInit_RAM_D2>
  ldr  r2, =_sbss_RAM_D2
 8002450:	4a0f      	ldr	r2, [pc, #60]	; (8002490 <LoopFillZerobss_RAM_D2+0x36>)
  b  LoopFillZerobss_RAM_D2
 8002452:	e002      	b.n	800245a <LoopFillZerobss_RAM_D2>

08002454 <FillZerobss_RAM_D2>:


/* Zero fill the bss segment. */
FillZerobss_RAM_D2:
  movs  r3, #0
 8002454:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002456:	f842 3b04 	str.w	r3, [r2], #4

0800245a <LoopFillZerobss_RAM_D2>:

LoopFillZerobss_RAM_D2:
  ldr  r3, = _ebss_RAM_D2
 800245a:	4b0e      	ldr	r3, [pc, #56]	; (8002494 <LoopFillZerobss_RAM_D2+0x3a>)
  cmp  r2, r3
 800245c:	429a      	cmp	r2, r3
  bcc  FillZerobss_RAM_D2
 800245e:	d3f9      	bcc.n	8002454 <FillZerobss_RAM_D2>

/* Call static constructors */
    bl __libc_init_array
 8002460:	f01a f8ea 	bl	801c638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002464:	f7fe ffa2 	bl	80013ac <main>
  bx  lr
 8002468:	4770      	bx	lr
 800246a:	0000      	.short	0x0000
  ldr   sp, =_estack      /* set stack pointer */
 800246c:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8002470:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002474:	2400a2fc 	.word	0x2400a2fc
  ldr r2, =_sidata
 8002478:	0802ab10 	.word	0x0802ab10
  ldr r2, =_sbss
 800247c:	2400a3bc 	.word	0x2400a3bc
  ldr r4, =_ebss
 8002480:	24014860 	.word	0x24014860
  ldr  r3, =_siRAM_D2
 8002484:	08034ecc 	.word	0x08034ecc
  ldr  r0, =_sRAM_D2
 8002488:	30000000 	.word	0x30000000
  ldr  r3, =_eRAM_D2
 800248c:	30000000 	.word	0x30000000
  ldr  r2, =_sbss_RAM_D2
 8002490:	30000000 	.word	0x30000000
  ldr  r3, = _ebss_RAM_D2
 8002494:	30000000 	.word	0x30000000

08002498 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002498:	e7fe      	b.n	8002498 <ADC3_IRQHandler>
	...

0800249c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024a2:	2003      	movs	r0, #3
 80024a4:	f000 f9a0 	bl	80027e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80024a8:	f006 fbba 	bl	8008c20 <HAL_RCC_GetSysClockFreq>
 80024ac:	4602      	mov	r2, r0
 80024ae:	4b15      	ldr	r3, [pc, #84]	; (8002504 <HAL_Init+0x68>)
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	0a1b      	lsrs	r3, r3, #8
 80024b4:	f003 030f 	and.w	r3, r3, #15
 80024b8:	4913      	ldr	r1, [pc, #76]	; (8002508 <HAL_Init+0x6c>)
 80024ba:	5ccb      	ldrb	r3, [r1, r3]
 80024bc:	f003 031f 	and.w	r3, r3, #31
 80024c0:	fa22 f303 	lsr.w	r3, r2, r3
 80024c4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024c6:	4b0f      	ldr	r3, [pc, #60]	; (8002504 <HAL_Init+0x68>)
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	4a0e      	ldr	r2, [pc, #56]	; (8002508 <HAL_Init+0x6c>)
 80024d0:	5cd3      	ldrb	r3, [r2, r3]
 80024d2:	f003 031f 	and.w	r3, r3, #31
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	fa22 f303 	lsr.w	r3, r2, r3
 80024dc:	4a0b      	ldr	r2, [pc, #44]	; (800250c <HAL_Init+0x70>)
 80024de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024e0:	4a0b      	ldr	r2, [pc, #44]	; (8002510 <HAL_Init+0x74>)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024e6:	2000      	movs	r0, #0
 80024e8:	f000 f814 	bl	8002514 <HAL_InitTick>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e002      	b.n	80024fc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80024f6:	f7ff fb13 	bl	8001b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	58024400 	.word	0x58024400
 8002508:	080218b8 	.word	0x080218b8
 800250c:	24000004 	.word	0x24000004
 8002510:	24000000 	.word	0x24000000

08002514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800251c:	4b15      	ldr	r3, [pc, #84]	; (8002574 <HAL_InitTick+0x60>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e021      	b.n	800256c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002528:	4b13      	ldr	r3, [pc, #76]	; (8002578 <HAL_InitTick+0x64>)
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	4b11      	ldr	r3, [pc, #68]	; (8002574 <HAL_InitTick+0x60>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	4619      	mov	r1, r3
 8002532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002536:	fbb3 f3f1 	udiv	r3, r3, r1
 800253a:	fbb2 f3f3 	udiv	r3, r2, r3
 800253e:	4618      	mov	r0, r3
 8002540:	f000 f985 	bl	800284e <HAL_SYSTICK_Config>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e00e      	b.n	800256c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b0f      	cmp	r3, #15
 8002552:	d80a      	bhi.n	800256a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002554:	2200      	movs	r2, #0
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	f04f 30ff 	mov.w	r0, #4294967295
 800255c:	f000 f94f 	bl	80027fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002560:	4a06      	ldr	r2, [pc, #24]	; (800257c <HAL_InitTick+0x68>)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	e000      	b.n	800256c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
}
 800256c:	4618      	mov	r0, r3
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	24000014 	.word	0x24000014
 8002578:	24000000 	.word	0x24000000
 800257c:	24000010 	.word	0x24000010

08002580 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002584:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <HAL_IncTick+0x20>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <HAL_IncTick+0x24>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4413      	add	r3, r2
 8002590:	4a04      	ldr	r2, [pc, #16]	; (80025a4 <HAL_IncTick+0x24>)
 8002592:	6013      	str	r3, [r2, #0]
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	24000014 	.word	0x24000014
 80025a4:	2400b45c 	.word	0x2400b45c

080025a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  return uwTick;
 80025ac:	4b03      	ldr	r3, [pc, #12]	; (80025bc <HAL_GetTick+0x14>)
 80025ae:	681b      	ldr	r3, [r3, #0]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	2400b45c 	.word	0x2400b45c

080025c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025c8:	f7ff ffee 	bl	80025a8 <HAL_GetTick>
 80025cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d8:	d005      	beq.n	80025e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025da:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <HAL_Delay+0x44>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	461a      	mov	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4413      	add	r3, r2
 80025e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025e6:	bf00      	nop
 80025e8:	f7ff ffde 	bl	80025a8 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d8f7      	bhi.n	80025e8 <HAL_Delay+0x28>
  {
  }
}
 80025f8:	bf00      	nop
 80025fa:	bf00      	nop
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	24000014 	.word	0x24000014

08002608 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800260c:	4b03      	ldr	r3, [pc, #12]	; (800261c <HAL_GetREVID+0x14>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	0c1b      	lsrs	r3, r3, #16
}
 8002612:	4618      	mov	r0, r3
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	5c001000 	.word	0x5c001000

08002620 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002630:	4904      	ldr	r1, [pc, #16]	; (8002644 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4313      	orrs	r3, r2
 8002636:	604b      	str	r3, [r1, #4]
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	58000400 	.word	0x58000400

08002648 <__NVIC_SetPriorityGrouping>:
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <__NVIC_SetPriorityGrouping+0x40>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002664:	4013      	ands	r3, r2
 8002666:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <__NVIC_SetPriorityGrouping+0x44>)
 8002672:	4313      	orrs	r3, r2
 8002674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002676:	4a04      	ldr	r2, [pc, #16]	; (8002688 <__NVIC_SetPriorityGrouping+0x40>)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	60d3      	str	r3, [r2, #12]
}
 800267c:	bf00      	nop
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	e000ed00 	.word	0xe000ed00
 800268c:	05fa0000 	.word	0x05fa0000

08002690 <__NVIC_GetPriorityGrouping>:
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002694:	4b04      	ldr	r3, [pc, #16]	; (80026a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	0a1b      	lsrs	r3, r3, #8
 800269a:	f003 0307 	and.w	r3, r3, #7
}
 800269e:	4618      	mov	r0, r3
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <__NVIC_EnableIRQ>:
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	db0b      	blt.n	80026d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026be:	88fb      	ldrh	r3, [r7, #6]
 80026c0:	f003 021f 	and.w	r2, r3, #31
 80026c4:	4907      	ldr	r1, [pc, #28]	; (80026e4 <__NVIC_EnableIRQ+0x38>)
 80026c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026ca:	095b      	lsrs	r3, r3, #5
 80026cc:	2001      	movs	r0, #1
 80026ce:	fa00 f202 	lsl.w	r2, r0, r2
 80026d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	e000e100 	.word	0xe000e100

080026e8 <__NVIC_SetPriority>:
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	6039      	str	r1, [r7, #0]
 80026f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	db0a      	blt.n	8002712 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	490c      	ldr	r1, [pc, #48]	; (8002734 <__NVIC_SetPriority+0x4c>)
 8002702:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002706:	0112      	lsls	r2, r2, #4
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	440b      	add	r3, r1
 800270c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002710:	e00a      	b.n	8002728 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	b2da      	uxtb	r2, r3
 8002716:	4908      	ldr	r1, [pc, #32]	; (8002738 <__NVIC_SetPriority+0x50>)
 8002718:	88fb      	ldrh	r3, [r7, #6]
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	3b04      	subs	r3, #4
 8002720:	0112      	lsls	r2, r2, #4
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	440b      	add	r3, r1
 8002726:	761a      	strb	r2, [r3, #24]
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	e000e100 	.word	0xe000e100
 8002738:	e000ed00 	.word	0xe000ed00

0800273c <NVIC_EncodePriority>:
{
 800273c:	b480      	push	{r7}
 800273e:	b089      	sub	sp, #36	; 0x24
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f1c3 0307 	rsb	r3, r3, #7
 8002756:	2b04      	cmp	r3, #4
 8002758:	bf28      	it	cs
 800275a:	2304      	movcs	r3, #4
 800275c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	3304      	adds	r3, #4
 8002762:	2b06      	cmp	r3, #6
 8002764:	d902      	bls.n	800276c <NVIC_EncodePriority+0x30>
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	3b03      	subs	r3, #3
 800276a:	e000      	b.n	800276e <NVIC_EncodePriority+0x32>
 800276c:	2300      	movs	r3, #0
 800276e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002770:	f04f 32ff 	mov.w	r2, #4294967295
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	43da      	mvns	r2, r3
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	401a      	ands	r2, r3
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002784:	f04f 31ff 	mov.w	r1, #4294967295
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	fa01 f303 	lsl.w	r3, r1, r3
 800278e:	43d9      	mvns	r1, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002794:	4313      	orrs	r3, r2
}
 8002796:	4618      	mov	r0, r3
 8002798:	3724      	adds	r7, #36	; 0x24
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
	...

080027a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027b4:	d301      	bcc.n	80027ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027b6:	2301      	movs	r3, #1
 80027b8:	e00f      	b.n	80027da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ba:	4a0a      	ldr	r2, [pc, #40]	; (80027e4 <SysTick_Config+0x40>)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3b01      	subs	r3, #1
 80027c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027c2:	210f      	movs	r1, #15
 80027c4:	f04f 30ff 	mov.w	r0, #4294967295
 80027c8:	f7ff ff8e 	bl	80026e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027cc:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <SysTick_Config+0x40>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027d2:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <SysTick_Config+0x40>)
 80027d4:	2207      	movs	r2, #7
 80027d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	e000e010 	.word	0xe000e010

080027e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f7ff ff29 	bl	8002648 <__NVIC_SetPriorityGrouping>
}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b086      	sub	sp, #24
 8002802:	af00      	add	r7, sp, #0
 8002804:	4603      	mov	r3, r0
 8002806:	60b9      	str	r1, [r7, #8]
 8002808:	607a      	str	r2, [r7, #4]
 800280a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800280c:	f7ff ff40 	bl	8002690 <__NVIC_GetPriorityGrouping>
 8002810:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	68b9      	ldr	r1, [r7, #8]
 8002816:	6978      	ldr	r0, [r7, #20]
 8002818:	f7ff ff90 	bl	800273c <NVIC_EncodePriority>
 800281c:	4602      	mov	r2, r0
 800281e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002822:	4611      	mov	r1, r2
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff ff5f 	bl	80026e8 <__NVIC_SetPriority>
}
 800282a:	bf00      	nop
 800282c:	3718      	adds	r7, #24
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b082      	sub	sp, #8
 8002836:	af00      	add	r7, sp, #0
 8002838:	4603      	mov	r3, r0
 800283a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800283c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff ff33 	bl	80026ac <__NVIC_EnableIRQ>
}
 8002846:	bf00      	nop
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff ffa4 	bl	80027a4 <SysTick_Config>
 800285c:	4603      	mov	r3, r0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800286c:	f3bf 8f5f 	dmb	sy
}
 8002870:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002872:	4b07      	ldr	r3, [pc, #28]	; (8002890 <HAL_MPU_Disable+0x28>)
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	4a06      	ldr	r2, [pc, #24]	; (8002890 <HAL_MPU_Disable+0x28>)
 8002878:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800287c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800287e:	4b05      	ldr	r3, [pc, #20]	; (8002894 <HAL_MPU_Disable+0x2c>)
 8002880:	2200      	movs	r2, #0
 8002882:	605a      	str	r2, [r3, #4]
}
 8002884:	bf00      	nop
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	e000ed00 	.word	0xe000ed00
 8002894:	e000ed90 	.word	0xe000ed90

08002898 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80028a0:	4a0b      	ldr	r2, [pc, #44]	; (80028d0 <HAL_MPU_Enable+0x38>)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f043 0301 	orr.w	r3, r3, #1
 80028a8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80028aa:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <HAL_MPU_Enable+0x3c>)
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	4a09      	ldr	r2, [pc, #36]	; (80028d4 <HAL_MPU_Enable+0x3c>)
 80028b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80028b6:	f3bf 8f4f 	dsb	sy
}
 80028ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80028bc:	f3bf 8f6f 	isb	sy
}
 80028c0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	e000ed90 	.word	0xe000ed90
 80028d4:	e000ed00 	.word	0xe000ed00

080028d8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	785a      	ldrb	r2, [r3, #1]
 80028e4:	4b1d      	ldr	r3, [pc, #116]	; (800295c <HAL_MPU_ConfigRegion+0x84>)
 80028e6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d029      	beq.n	8002944 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80028f0:	4a1a      	ldr	r2, [pc, #104]	; (800295c <HAL_MPU_ConfigRegion+0x84>)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	7b1b      	ldrb	r3, [r3, #12]
 80028fc:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	7adb      	ldrb	r3, [r3, #11]
 8002902:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002904:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	7a9b      	ldrb	r3, [r3, #10]
 800290a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800290c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	7b5b      	ldrb	r3, [r3, #13]
 8002912:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002914:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	7b9b      	ldrb	r3, [r3, #14]
 800291a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800291c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	7bdb      	ldrb	r3, [r3, #15]
 8002922:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002924:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	7a5b      	ldrb	r3, [r3, #9]
 800292a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800292c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	7a1b      	ldrb	r3, [r3, #8]
 8002932:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002934:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	7812      	ldrb	r2, [r2, #0]
 800293a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800293c:	4a07      	ldr	r2, [pc, #28]	; (800295c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800293e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002940:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002942:	e005      	b.n	8002950 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002944:	4b05      	ldr	r3, [pc, #20]	; (800295c <HAL_MPU_ConfigRegion+0x84>)
 8002946:	2200      	movs	r2, #0
 8002948:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800294a:	4b04      	ldr	r3, [pc, #16]	; (800295c <HAL_MPU_ConfigRegion+0x84>)
 800294c:	2200      	movs	r2, #0
 800294e:	611a      	str	r2, [r3, #16]
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	e000ed90 	.word	0xe000ed90

08002960 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002968:	f7ff fe1e 	bl	80025a8 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e316      	b.n	8002fa6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a66      	ldr	r2, [pc, #408]	; (8002b18 <HAL_DMA_Init+0x1b8>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d04a      	beq.n	8002a18 <HAL_DMA_Init+0xb8>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a65      	ldr	r2, [pc, #404]	; (8002b1c <HAL_DMA_Init+0x1bc>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d045      	beq.n	8002a18 <HAL_DMA_Init+0xb8>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a63      	ldr	r2, [pc, #396]	; (8002b20 <HAL_DMA_Init+0x1c0>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d040      	beq.n	8002a18 <HAL_DMA_Init+0xb8>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a62      	ldr	r2, [pc, #392]	; (8002b24 <HAL_DMA_Init+0x1c4>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d03b      	beq.n	8002a18 <HAL_DMA_Init+0xb8>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a60      	ldr	r2, [pc, #384]	; (8002b28 <HAL_DMA_Init+0x1c8>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d036      	beq.n	8002a18 <HAL_DMA_Init+0xb8>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a5f      	ldr	r2, [pc, #380]	; (8002b2c <HAL_DMA_Init+0x1cc>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d031      	beq.n	8002a18 <HAL_DMA_Init+0xb8>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a5d      	ldr	r2, [pc, #372]	; (8002b30 <HAL_DMA_Init+0x1d0>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d02c      	beq.n	8002a18 <HAL_DMA_Init+0xb8>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a5c      	ldr	r2, [pc, #368]	; (8002b34 <HAL_DMA_Init+0x1d4>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d027      	beq.n	8002a18 <HAL_DMA_Init+0xb8>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a5a      	ldr	r2, [pc, #360]	; (8002b38 <HAL_DMA_Init+0x1d8>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d022      	beq.n	8002a18 <HAL_DMA_Init+0xb8>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a59      	ldr	r2, [pc, #356]	; (8002b3c <HAL_DMA_Init+0x1dc>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d01d      	beq.n	8002a18 <HAL_DMA_Init+0xb8>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a57      	ldr	r2, [pc, #348]	; (8002b40 <HAL_DMA_Init+0x1e0>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d018      	beq.n	8002a18 <HAL_DMA_Init+0xb8>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a56      	ldr	r2, [pc, #344]	; (8002b44 <HAL_DMA_Init+0x1e4>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d013      	beq.n	8002a18 <HAL_DMA_Init+0xb8>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a54      	ldr	r2, [pc, #336]	; (8002b48 <HAL_DMA_Init+0x1e8>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d00e      	beq.n	8002a18 <HAL_DMA_Init+0xb8>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a53      	ldr	r2, [pc, #332]	; (8002b4c <HAL_DMA_Init+0x1ec>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d009      	beq.n	8002a18 <HAL_DMA_Init+0xb8>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a51      	ldr	r2, [pc, #324]	; (8002b50 <HAL_DMA_Init+0x1f0>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d004      	beq.n	8002a18 <HAL_DMA_Init+0xb8>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a50      	ldr	r2, [pc, #320]	; (8002b54 <HAL_DMA_Init+0x1f4>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d101      	bne.n	8002a1c <HAL_DMA_Init+0xbc>
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e000      	b.n	8002a1e <HAL_DMA_Init+0xbe>
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 813b 	beq.w	8002c9a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a37      	ldr	r2, [pc, #220]	; (8002b18 <HAL_DMA_Init+0x1b8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d04a      	beq.n	8002ad4 <HAL_DMA_Init+0x174>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a36      	ldr	r2, [pc, #216]	; (8002b1c <HAL_DMA_Init+0x1bc>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d045      	beq.n	8002ad4 <HAL_DMA_Init+0x174>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a34      	ldr	r2, [pc, #208]	; (8002b20 <HAL_DMA_Init+0x1c0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d040      	beq.n	8002ad4 <HAL_DMA_Init+0x174>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a33      	ldr	r2, [pc, #204]	; (8002b24 <HAL_DMA_Init+0x1c4>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d03b      	beq.n	8002ad4 <HAL_DMA_Init+0x174>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a31      	ldr	r2, [pc, #196]	; (8002b28 <HAL_DMA_Init+0x1c8>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d036      	beq.n	8002ad4 <HAL_DMA_Init+0x174>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a30      	ldr	r2, [pc, #192]	; (8002b2c <HAL_DMA_Init+0x1cc>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d031      	beq.n	8002ad4 <HAL_DMA_Init+0x174>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a2e      	ldr	r2, [pc, #184]	; (8002b30 <HAL_DMA_Init+0x1d0>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d02c      	beq.n	8002ad4 <HAL_DMA_Init+0x174>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a2d      	ldr	r2, [pc, #180]	; (8002b34 <HAL_DMA_Init+0x1d4>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d027      	beq.n	8002ad4 <HAL_DMA_Init+0x174>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a2b      	ldr	r2, [pc, #172]	; (8002b38 <HAL_DMA_Init+0x1d8>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d022      	beq.n	8002ad4 <HAL_DMA_Init+0x174>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a2a      	ldr	r2, [pc, #168]	; (8002b3c <HAL_DMA_Init+0x1dc>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d01d      	beq.n	8002ad4 <HAL_DMA_Init+0x174>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a28      	ldr	r2, [pc, #160]	; (8002b40 <HAL_DMA_Init+0x1e0>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d018      	beq.n	8002ad4 <HAL_DMA_Init+0x174>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a27      	ldr	r2, [pc, #156]	; (8002b44 <HAL_DMA_Init+0x1e4>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d013      	beq.n	8002ad4 <HAL_DMA_Init+0x174>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a25      	ldr	r2, [pc, #148]	; (8002b48 <HAL_DMA_Init+0x1e8>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d00e      	beq.n	8002ad4 <HAL_DMA_Init+0x174>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a24      	ldr	r2, [pc, #144]	; (8002b4c <HAL_DMA_Init+0x1ec>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d009      	beq.n	8002ad4 <HAL_DMA_Init+0x174>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a22      	ldr	r2, [pc, #136]	; (8002b50 <HAL_DMA_Init+0x1f0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d004      	beq.n	8002ad4 <HAL_DMA_Init+0x174>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a21      	ldr	r2, [pc, #132]	; (8002b54 <HAL_DMA_Init+0x1f4>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d108      	bne.n	8002ae6 <HAL_DMA_Init+0x186>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0201 	bic.w	r2, r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	e007      	b.n	8002af6 <HAL_DMA_Init+0x196>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0201 	bic.w	r2, r2, #1
 8002af4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002af6:	e02f      	b.n	8002b58 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002af8:	f7ff fd56 	bl	80025a8 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b05      	cmp	r3, #5
 8002b04:	d928      	bls.n	8002b58 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2220      	movs	r2, #32
 8002b0a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2203      	movs	r2, #3
 8002b10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e246      	b.n	8002fa6 <HAL_DMA_Init+0x646>
 8002b18:	40020010 	.word	0x40020010
 8002b1c:	40020028 	.word	0x40020028
 8002b20:	40020040 	.word	0x40020040
 8002b24:	40020058 	.word	0x40020058
 8002b28:	40020070 	.word	0x40020070
 8002b2c:	40020088 	.word	0x40020088
 8002b30:	400200a0 	.word	0x400200a0
 8002b34:	400200b8 	.word	0x400200b8
 8002b38:	40020410 	.word	0x40020410
 8002b3c:	40020428 	.word	0x40020428
 8002b40:	40020440 	.word	0x40020440
 8002b44:	40020458 	.word	0x40020458
 8002b48:	40020470 	.word	0x40020470
 8002b4c:	40020488 	.word	0x40020488
 8002b50:	400204a0 	.word	0x400204a0
 8002b54:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1c8      	bne.n	8002af8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	4b83      	ldr	r3, [pc, #524]	; (8002d80 <HAL_DMA_Init+0x420>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002b7e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b8a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b96:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	d107      	bne.n	8002bbc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002bbc:	4b71      	ldr	r3, [pc, #452]	; (8002d84 <HAL_DMA_Init+0x424>)
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	4b71      	ldr	r3, [pc, #452]	; (8002d88 <HAL_DMA_Init+0x428>)
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bc8:	d328      	bcc.n	8002c1c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b28      	cmp	r3, #40	; 0x28
 8002bd0:	d903      	bls.n	8002bda <HAL_DMA_Init+0x27a>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b2e      	cmp	r3, #46	; 0x2e
 8002bd8:	d917      	bls.n	8002c0a <HAL_DMA_Init+0x2aa>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b3e      	cmp	r3, #62	; 0x3e
 8002be0:	d903      	bls.n	8002bea <HAL_DMA_Init+0x28a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b42      	cmp	r3, #66	; 0x42
 8002be8:	d90f      	bls.n	8002c0a <HAL_DMA_Init+0x2aa>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b46      	cmp	r3, #70	; 0x46
 8002bf0:	d903      	bls.n	8002bfa <HAL_DMA_Init+0x29a>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2b48      	cmp	r3, #72	; 0x48
 8002bf8:	d907      	bls.n	8002c0a <HAL_DMA_Init+0x2aa>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b4e      	cmp	r3, #78	; 0x4e
 8002c00:	d905      	bls.n	8002c0e <HAL_DMA_Init+0x2ae>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b52      	cmp	r3, #82	; 0x52
 8002c08:	d801      	bhi.n	8002c0e <HAL_DMA_Init+0x2ae>
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e000      	b.n	8002c10 <HAL_DMA_Init+0x2b0>
 8002c0e:	2300      	movs	r3, #0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d003      	beq.n	8002c1c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c1a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	f023 0307 	bic.w	r3, r3, #7
 8002c32:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d117      	bne.n	8002c76 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00e      	beq.n	8002c76 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f002 fb31 	bl	80052c0 <DMA_CheckFifoParam>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d008      	beq.n	8002c76 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2240      	movs	r2, #64	; 0x40
 8002c68:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e197      	b.n	8002fa6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f002 fa6c 	bl	800515c <DMA_CalcBaseAndBitshift>
 8002c84:	4603      	mov	r3, r0
 8002c86:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c8c:	f003 031f 	and.w	r3, r3, #31
 8002c90:	223f      	movs	r2, #63	; 0x3f
 8002c92:	409a      	lsls	r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	609a      	str	r2, [r3, #8]
 8002c98:	e0cd      	b.n	8002e36 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a3b      	ldr	r2, [pc, #236]	; (8002d8c <HAL_DMA_Init+0x42c>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d022      	beq.n	8002cea <HAL_DMA_Init+0x38a>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a39      	ldr	r2, [pc, #228]	; (8002d90 <HAL_DMA_Init+0x430>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d01d      	beq.n	8002cea <HAL_DMA_Init+0x38a>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a38      	ldr	r2, [pc, #224]	; (8002d94 <HAL_DMA_Init+0x434>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d018      	beq.n	8002cea <HAL_DMA_Init+0x38a>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a36      	ldr	r2, [pc, #216]	; (8002d98 <HAL_DMA_Init+0x438>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d013      	beq.n	8002cea <HAL_DMA_Init+0x38a>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a35      	ldr	r2, [pc, #212]	; (8002d9c <HAL_DMA_Init+0x43c>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d00e      	beq.n	8002cea <HAL_DMA_Init+0x38a>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a33      	ldr	r2, [pc, #204]	; (8002da0 <HAL_DMA_Init+0x440>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d009      	beq.n	8002cea <HAL_DMA_Init+0x38a>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a32      	ldr	r2, [pc, #200]	; (8002da4 <HAL_DMA_Init+0x444>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d004      	beq.n	8002cea <HAL_DMA_Init+0x38a>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a30      	ldr	r2, [pc, #192]	; (8002da8 <HAL_DMA_Init+0x448>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d101      	bne.n	8002cee <HAL_DMA_Init+0x38e>
 8002cea:	2301      	movs	r3, #1
 8002cec:	e000      	b.n	8002cf0 <HAL_DMA_Init+0x390>
 8002cee:	2300      	movs	r3, #0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 8097 	beq.w	8002e24 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a24      	ldr	r2, [pc, #144]	; (8002d8c <HAL_DMA_Init+0x42c>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d021      	beq.n	8002d44 <HAL_DMA_Init+0x3e4>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a22      	ldr	r2, [pc, #136]	; (8002d90 <HAL_DMA_Init+0x430>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d01c      	beq.n	8002d44 <HAL_DMA_Init+0x3e4>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a21      	ldr	r2, [pc, #132]	; (8002d94 <HAL_DMA_Init+0x434>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d017      	beq.n	8002d44 <HAL_DMA_Init+0x3e4>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a1f      	ldr	r2, [pc, #124]	; (8002d98 <HAL_DMA_Init+0x438>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d012      	beq.n	8002d44 <HAL_DMA_Init+0x3e4>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a1e      	ldr	r2, [pc, #120]	; (8002d9c <HAL_DMA_Init+0x43c>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d00d      	beq.n	8002d44 <HAL_DMA_Init+0x3e4>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a1c      	ldr	r2, [pc, #112]	; (8002da0 <HAL_DMA_Init+0x440>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d008      	beq.n	8002d44 <HAL_DMA_Init+0x3e4>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a1b      	ldr	r2, [pc, #108]	; (8002da4 <HAL_DMA_Init+0x444>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d003      	beq.n	8002d44 <HAL_DMA_Init+0x3e4>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a19      	ldr	r2, [pc, #100]	; (8002da8 <HAL_DMA_Init+0x448>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2202      	movs	r2, #2
 8002d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	4b12      	ldr	r3, [pc, #72]	; (8002dac <HAL_DMA_Init+0x44c>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	2b40      	cmp	r3, #64	; 0x40
 8002d6c:	d020      	beq.n	8002db0 <HAL_DMA_Init+0x450>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	2b80      	cmp	r3, #128	; 0x80
 8002d74:	d102      	bne.n	8002d7c <HAL_DMA_Init+0x41c>
 8002d76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d7a:	e01a      	b.n	8002db2 <HAL_DMA_Init+0x452>
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	e018      	b.n	8002db2 <HAL_DMA_Init+0x452>
 8002d80:	fe10803f 	.word	0xfe10803f
 8002d84:	5c001000 	.word	0x5c001000
 8002d88:	ffff0000 	.word	0xffff0000
 8002d8c:	58025408 	.word	0x58025408
 8002d90:	5802541c 	.word	0x5802541c
 8002d94:	58025430 	.word	0x58025430
 8002d98:	58025444 	.word	0x58025444
 8002d9c:	58025458 	.word	0x58025458
 8002da0:	5802546c 	.word	0x5802546c
 8002da4:	58025480 	.word	0x58025480
 8002da8:	58025494 	.word	0x58025494
 8002dac:	fffe000f 	.word	0xfffe000f
 8002db0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	68d2      	ldr	r2, [r2, #12]
 8002db6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002db8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002dc0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002dc8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002dd0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002dd8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002de0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	461a      	mov	r2, r3
 8002df6:	4b6e      	ldr	r3, [pc, #440]	; (8002fb0 <HAL_DMA_Init+0x650>)
 8002df8:	4413      	add	r3, r2
 8002dfa:	4a6e      	ldr	r2, [pc, #440]	; (8002fb4 <HAL_DMA_Init+0x654>)
 8002dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002e00:	091b      	lsrs	r3, r3, #4
 8002e02:	009a      	lsls	r2, r3, #2
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f002 f9a7 	bl	800515c <DMA_CalcBaseAndBitshift>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e16:	f003 031f 	and.w	r3, r3, #31
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	409a      	lsls	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	605a      	str	r2, [r3, #4]
 8002e22:	e008      	b.n	8002e36 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2240      	movs	r2, #64	; 0x40
 8002e28:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2203      	movs	r2, #3
 8002e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e0b7      	b.n	8002fa6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a5f      	ldr	r2, [pc, #380]	; (8002fb8 <HAL_DMA_Init+0x658>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d072      	beq.n	8002f26 <HAL_DMA_Init+0x5c6>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a5d      	ldr	r2, [pc, #372]	; (8002fbc <HAL_DMA_Init+0x65c>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d06d      	beq.n	8002f26 <HAL_DMA_Init+0x5c6>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a5c      	ldr	r2, [pc, #368]	; (8002fc0 <HAL_DMA_Init+0x660>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d068      	beq.n	8002f26 <HAL_DMA_Init+0x5c6>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a5a      	ldr	r2, [pc, #360]	; (8002fc4 <HAL_DMA_Init+0x664>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d063      	beq.n	8002f26 <HAL_DMA_Init+0x5c6>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a59      	ldr	r2, [pc, #356]	; (8002fc8 <HAL_DMA_Init+0x668>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d05e      	beq.n	8002f26 <HAL_DMA_Init+0x5c6>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a57      	ldr	r2, [pc, #348]	; (8002fcc <HAL_DMA_Init+0x66c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d059      	beq.n	8002f26 <HAL_DMA_Init+0x5c6>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a56      	ldr	r2, [pc, #344]	; (8002fd0 <HAL_DMA_Init+0x670>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d054      	beq.n	8002f26 <HAL_DMA_Init+0x5c6>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a54      	ldr	r2, [pc, #336]	; (8002fd4 <HAL_DMA_Init+0x674>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d04f      	beq.n	8002f26 <HAL_DMA_Init+0x5c6>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a53      	ldr	r2, [pc, #332]	; (8002fd8 <HAL_DMA_Init+0x678>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d04a      	beq.n	8002f26 <HAL_DMA_Init+0x5c6>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a51      	ldr	r2, [pc, #324]	; (8002fdc <HAL_DMA_Init+0x67c>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d045      	beq.n	8002f26 <HAL_DMA_Init+0x5c6>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a50      	ldr	r2, [pc, #320]	; (8002fe0 <HAL_DMA_Init+0x680>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d040      	beq.n	8002f26 <HAL_DMA_Init+0x5c6>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a4e      	ldr	r2, [pc, #312]	; (8002fe4 <HAL_DMA_Init+0x684>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d03b      	beq.n	8002f26 <HAL_DMA_Init+0x5c6>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a4d      	ldr	r2, [pc, #308]	; (8002fe8 <HAL_DMA_Init+0x688>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d036      	beq.n	8002f26 <HAL_DMA_Init+0x5c6>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a4b      	ldr	r2, [pc, #300]	; (8002fec <HAL_DMA_Init+0x68c>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d031      	beq.n	8002f26 <HAL_DMA_Init+0x5c6>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a4a      	ldr	r2, [pc, #296]	; (8002ff0 <HAL_DMA_Init+0x690>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d02c      	beq.n	8002f26 <HAL_DMA_Init+0x5c6>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a48      	ldr	r2, [pc, #288]	; (8002ff4 <HAL_DMA_Init+0x694>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d027      	beq.n	8002f26 <HAL_DMA_Init+0x5c6>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a47      	ldr	r2, [pc, #284]	; (8002ff8 <HAL_DMA_Init+0x698>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d022      	beq.n	8002f26 <HAL_DMA_Init+0x5c6>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a45      	ldr	r2, [pc, #276]	; (8002ffc <HAL_DMA_Init+0x69c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d01d      	beq.n	8002f26 <HAL_DMA_Init+0x5c6>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a44      	ldr	r2, [pc, #272]	; (8003000 <HAL_DMA_Init+0x6a0>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d018      	beq.n	8002f26 <HAL_DMA_Init+0x5c6>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a42      	ldr	r2, [pc, #264]	; (8003004 <HAL_DMA_Init+0x6a4>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d013      	beq.n	8002f26 <HAL_DMA_Init+0x5c6>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a41      	ldr	r2, [pc, #260]	; (8003008 <HAL_DMA_Init+0x6a8>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d00e      	beq.n	8002f26 <HAL_DMA_Init+0x5c6>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a3f      	ldr	r2, [pc, #252]	; (800300c <HAL_DMA_Init+0x6ac>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d009      	beq.n	8002f26 <HAL_DMA_Init+0x5c6>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a3e      	ldr	r2, [pc, #248]	; (8003010 <HAL_DMA_Init+0x6b0>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d004      	beq.n	8002f26 <HAL_DMA_Init+0x5c6>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a3c      	ldr	r2, [pc, #240]	; (8003014 <HAL_DMA_Init+0x6b4>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d101      	bne.n	8002f2a <HAL_DMA_Init+0x5ca>
 8002f26:	2301      	movs	r3, #1
 8002f28:	e000      	b.n	8002f2c <HAL_DMA_Init+0x5cc>
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d032      	beq.n	8002f96 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f002 fa41 	bl	80053b8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	2b80      	cmp	r3, #128	; 0x80
 8002f3c:	d102      	bne.n	8002f44 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002f58:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d010      	beq.n	8002f84 <HAL_DMA_Init+0x624>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b08      	cmp	r3, #8
 8002f68:	d80c      	bhi.n	8002f84 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f002 fabe 	bl	80054ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	e008      	b.n	8002f96 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	a7fdabf8 	.word	0xa7fdabf8
 8002fb4:	cccccccd 	.word	0xcccccccd
 8002fb8:	40020010 	.word	0x40020010
 8002fbc:	40020028 	.word	0x40020028
 8002fc0:	40020040 	.word	0x40020040
 8002fc4:	40020058 	.word	0x40020058
 8002fc8:	40020070 	.word	0x40020070
 8002fcc:	40020088 	.word	0x40020088
 8002fd0:	400200a0 	.word	0x400200a0
 8002fd4:	400200b8 	.word	0x400200b8
 8002fd8:	40020410 	.word	0x40020410
 8002fdc:	40020428 	.word	0x40020428
 8002fe0:	40020440 	.word	0x40020440
 8002fe4:	40020458 	.word	0x40020458
 8002fe8:	40020470 	.word	0x40020470
 8002fec:	40020488 	.word	0x40020488
 8002ff0:	400204a0 	.word	0x400204a0
 8002ff4:	400204b8 	.word	0x400204b8
 8002ff8:	58025408 	.word	0x58025408
 8002ffc:	5802541c 	.word	0x5802541c
 8003000:	58025430 	.word	0x58025430
 8003004:	58025444 	.word	0x58025444
 8003008:	58025458 	.word	0x58025458
 800300c:	5802546c 	.word	0x5802546c
 8003010:	58025480 	.word	0x58025480
 8003014:	58025494 	.word	0x58025494

08003018 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
 8003024:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003026:	2300      	movs	r3, #0
 8003028:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e226      	b.n	8003482 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_DMA_Start_IT+0x2a>
 800303e:	2302      	movs	r3, #2
 8003040:	e21f      	b.n	8003482 <HAL_DMA_Start_IT+0x46a>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b01      	cmp	r3, #1
 8003054:	f040 820a 	bne.w	800346c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2202      	movs	r2, #2
 800305c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a68      	ldr	r2, [pc, #416]	; (800320c <HAL_DMA_Start_IT+0x1f4>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d04a      	beq.n	8003106 <HAL_DMA_Start_IT+0xee>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a66      	ldr	r2, [pc, #408]	; (8003210 <HAL_DMA_Start_IT+0x1f8>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d045      	beq.n	8003106 <HAL_DMA_Start_IT+0xee>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a65      	ldr	r2, [pc, #404]	; (8003214 <HAL_DMA_Start_IT+0x1fc>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d040      	beq.n	8003106 <HAL_DMA_Start_IT+0xee>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a63      	ldr	r2, [pc, #396]	; (8003218 <HAL_DMA_Start_IT+0x200>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d03b      	beq.n	8003106 <HAL_DMA_Start_IT+0xee>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a62      	ldr	r2, [pc, #392]	; (800321c <HAL_DMA_Start_IT+0x204>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d036      	beq.n	8003106 <HAL_DMA_Start_IT+0xee>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a60      	ldr	r2, [pc, #384]	; (8003220 <HAL_DMA_Start_IT+0x208>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d031      	beq.n	8003106 <HAL_DMA_Start_IT+0xee>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a5f      	ldr	r2, [pc, #380]	; (8003224 <HAL_DMA_Start_IT+0x20c>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d02c      	beq.n	8003106 <HAL_DMA_Start_IT+0xee>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a5d      	ldr	r2, [pc, #372]	; (8003228 <HAL_DMA_Start_IT+0x210>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d027      	beq.n	8003106 <HAL_DMA_Start_IT+0xee>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a5c      	ldr	r2, [pc, #368]	; (800322c <HAL_DMA_Start_IT+0x214>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d022      	beq.n	8003106 <HAL_DMA_Start_IT+0xee>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a5a      	ldr	r2, [pc, #360]	; (8003230 <HAL_DMA_Start_IT+0x218>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d01d      	beq.n	8003106 <HAL_DMA_Start_IT+0xee>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a59      	ldr	r2, [pc, #356]	; (8003234 <HAL_DMA_Start_IT+0x21c>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d018      	beq.n	8003106 <HAL_DMA_Start_IT+0xee>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a57      	ldr	r2, [pc, #348]	; (8003238 <HAL_DMA_Start_IT+0x220>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d013      	beq.n	8003106 <HAL_DMA_Start_IT+0xee>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a56      	ldr	r2, [pc, #344]	; (800323c <HAL_DMA_Start_IT+0x224>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d00e      	beq.n	8003106 <HAL_DMA_Start_IT+0xee>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a54      	ldr	r2, [pc, #336]	; (8003240 <HAL_DMA_Start_IT+0x228>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d009      	beq.n	8003106 <HAL_DMA_Start_IT+0xee>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a53      	ldr	r2, [pc, #332]	; (8003244 <HAL_DMA_Start_IT+0x22c>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d004      	beq.n	8003106 <HAL_DMA_Start_IT+0xee>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a51      	ldr	r2, [pc, #324]	; (8003248 <HAL_DMA_Start_IT+0x230>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d108      	bne.n	8003118 <HAL_DMA_Start_IT+0x100>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 0201 	bic.w	r2, r2, #1
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	e007      	b.n	8003128 <HAL_DMA_Start_IT+0x110>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 0201 	bic.w	r2, r2, #1
 8003126:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	68b9      	ldr	r1, [r7, #8]
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f001 fe68 	bl	8004e04 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a34      	ldr	r2, [pc, #208]	; (800320c <HAL_DMA_Start_IT+0x1f4>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d04a      	beq.n	80031d4 <HAL_DMA_Start_IT+0x1bc>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a33      	ldr	r2, [pc, #204]	; (8003210 <HAL_DMA_Start_IT+0x1f8>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d045      	beq.n	80031d4 <HAL_DMA_Start_IT+0x1bc>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a31      	ldr	r2, [pc, #196]	; (8003214 <HAL_DMA_Start_IT+0x1fc>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d040      	beq.n	80031d4 <HAL_DMA_Start_IT+0x1bc>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a30      	ldr	r2, [pc, #192]	; (8003218 <HAL_DMA_Start_IT+0x200>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d03b      	beq.n	80031d4 <HAL_DMA_Start_IT+0x1bc>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a2e      	ldr	r2, [pc, #184]	; (800321c <HAL_DMA_Start_IT+0x204>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d036      	beq.n	80031d4 <HAL_DMA_Start_IT+0x1bc>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a2d      	ldr	r2, [pc, #180]	; (8003220 <HAL_DMA_Start_IT+0x208>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d031      	beq.n	80031d4 <HAL_DMA_Start_IT+0x1bc>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a2b      	ldr	r2, [pc, #172]	; (8003224 <HAL_DMA_Start_IT+0x20c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d02c      	beq.n	80031d4 <HAL_DMA_Start_IT+0x1bc>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a2a      	ldr	r2, [pc, #168]	; (8003228 <HAL_DMA_Start_IT+0x210>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d027      	beq.n	80031d4 <HAL_DMA_Start_IT+0x1bc>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a28      	ldr	r2, [pc, #160]	; (800322c <HAL_DMA_Start_IT+0x214>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d022      	beq.n	80031d4 <HAL_DMA_Start_IT+0x1bc>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a27      	ldr	r2, [pc, #156]	; (8003230 <HAL_DMA_Start_IT+0x218>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d01d      	beq.n	80031d4 <HAL_DMA_Start_IT+0x1bc>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a25      	ldr	r2, [pc, #148]	; (8003234 <HAL_DMA_Start_IT+0x21c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d018      	beq.n	80031d4 <HAL_DMA_Start_IT+0x1bc>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a24      	ldr	r2, [pc, #144]	; (8003238 <HAL_DMA_Start_IT+0x220>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d013      	beq.n	80031d4 <HAL_DMA_Start_IT+0x1bc>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a22      	ldr	r2, [pc, #136]	; (800323c <HAL_DMA_Start_IT+0x224>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d00e      	beq.n	80031d4 <HAL_DMA_Start_IT+0x1bc>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a21      	ldr	r2, [pc, #132]	; (8003240 <HAL_DMA_Start_IT+0x228>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d009      	beq.n	80031d4 <HAL_DMA_Start_IT+0x1bc>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a1f      	ldr	r2, [pc, #124]	; (8003244 <HAL_DMA_Start_IT+0x22c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d004      	beq.n	80031d4 <HAL_DMA_Start_IT+0x1bc>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a1e      	ldr	r2, [pc, #120]	; (8003248 <HAL_DMA_Start_IT+0x230>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d101      	bne.n	80031d8 <HAL_DMA_Start_IT+0x1c0>
 80031d4:	2301      	movs	r3, #1
 80031d6:	e000      	b.n	80031da <HAL_DMA_Start_IT+0x1c2>
 80031d8:	2300      	movs	r3, #0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d036      	beq.n	800324c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f023 021e 	bic.w	r2, r3, #30
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f042 0216 	orr.w	r2, r2, #22
 80031f0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d03e      	beq.n	8003278 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f042 0208 	orr.w	r2, r2, #8
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	e035      	b.n	8003278 <HAL_DMA_Start_IT+0x260>
 800320c:	40020010 	.word	0x40020010
 8003210:	40020028 	.word	0x40020028
 8003214:	40020040 	.word	0x40020040
 8003218:	40020058 	.word	0x40020058
 800321c:	40020070 	.word	0x40020070
 8003220:	40020088 	.word	0x40020088
 8003224:	400200a0 	.word	0x400200a0
 8003228:	400200b8 	.word	0x400200b8
 800322c:	40020410 	.word	0x40020410
 8003230:	40020428 	.word	0x40020428
 8003234:	40020440 	.word	0x40020440
 8003238:	40020458 	.word	0x40020458
 800323c:	40020470 	.word	0x40020470
 8003240:	40020488 	.word	0x40020488
 8003244:	400204a0 	.word	0x400204a0
 8003248:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f023 020e 	bic.w	r2, r3, #14
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f042 020a 	orr.w	r2, r2, #10
 800325e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003264:	2b00      	cmp	r3, #0
 8003266:	d007      	beq.n	8003278 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f042 0204 	orr.w	r2, r2, #4
 8003276:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a83      	ldr	r2, [pc, #524]	; (800348c <HAL_DMA_Start_IT+0x474>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d072      	beq.n	8003368 <HAL_DMA_Start_IT+0x350>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a82      	ldr	r2, [pc, #520]	; (8003490 <HAL_DMA_Start_IT+0x478>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d06d      	beq.n	8003368 <HAL_DMA_Start_IT+0x350>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a80      	ldr	r2, [pc, #512]	; (8003494 <HAL_DMA_Start_IT+0x47c>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d068      	beq.n	8003368 <HAL_DMA_Start_IT+0x350>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a7f      	ldr	r2, [pc, #508]	; (8003498 <HAL_DMA_Start_IT+0x480>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d063      	beq.n	8003368 <HAL_DMA_Start_IT+0x350>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a7d      	ldr	r2, [pc, #500]	; (800349c <HAL_DMA_Start_IT+0x484>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d05e      	beq.n	8003368 <HAL_DMA_Start_IT+0x350>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a7c      	ldr	r2, [pc, #496]	; (80034a0 <HAL_DMA_Start_IT+0x488>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d059      	beq.n	8003368 <HAL_DMA_Start_IT+0x350>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a7a      	ldr	r2, [pc, #488]	; (80034a4 <HAL_DMA_Start_IT+0x48c>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d054      	beq.n	8003368 <HAL_DMA_Start_IT+0x350>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a79      	ldr	r2, [pc, #484]	; (80034a8 <HAL_DMA_Start_IT+0x490>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d04f      	beq.n	8003368 <HAL_DMA_Start_IT+0x350>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a77      	ldr	r2, [pc, #476]	; (80034ac <HAL_DMA_Start_IT+0x494>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d04a      	beq.n	8003368 <HAL_DMA_Start_IT+0x350>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a76      	ldr	r2, [pc, #472]	; (80034b0 <HAL_DMA_Start_IT+0x498>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d045      	beq.n	8003368 <HAL_DMA_Start_IT+0x350>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a74      	ldr	r2, [pc, #464]	; (80034b4 <HAL_DMA_Start_IT+0x49c>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d040      	beq.n	8003368 <HAL_DMA_Start_IT+0x350>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a73      	ldr	r2, [pc, #460]	; (80034b8 <HAL_DMA_Start_IT+0x4a0>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d03b      	beq.n	8003368 <HAL_DMA_Start_IT+0x350>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a71      	ldr	r2, [pc, #452]	; (80034bc <HAL_DMA_Start_IT+0x4a4>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d036      	beq.n	8003368 <HAL_DMA_Start_IT+0x350>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a70      	ldr	r2, [pc, #448]	; (80034c0 <HAL_DMA_Start_IT+0x4a8>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d031      	beq.n	8003368 <HAL_DMA_Start_IT+0x350>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a6e      	ldr	r2, [pc, #440]	; (80034c4 <HAL_DMA_Start_IT+0x4ac>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d02c      	beq.n	8003368 <HAL_DMA_Start_IT+0x350>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a6d      	ldr	r2, [pc, #436]	; (80034c8 <HAL_DMA_Start_IT+0x4b0>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d027      	beq.n	8003368 <HAL_DMA_Start_IT+0x350>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a6b      	ldr	r2, [pc, #428]	; (80034cc <HAL_DMA_Start_IT+0x4b4>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d022      	beq.n	8003368 <HAL_DMA_Start_IT+0x350>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a6a      	ldr	r2, [pc, #424]	; (80034d0 <HAL_DMA_Start_IT+0x4b8>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d01d      	beq.n	8003368 <HAL_DMA_Start_IT+0x350>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a68      	ldr	r2, [pc, #416]	; (80034d4 <HAL_DMA_Start_IT+0x4bc>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d018      	beq.n	8003368 <HAL_DMA_Start_IT+0x350>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a67      	ldr	r2, [pc, #412]	; (80034d8 <HAL_DMA_Start_IT+0x4c0>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d013      	beq.n	8003368 <HAL_DMA_Start_IT+0x350>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a65      	ldr	r2, [pc, #404]	; (80034dc <HAL_DMA_Start_IT+0x4c4>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d00e      	beq.n	8003368 <HAL_DMA_Start_IT+0x350>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a64      	ldr	r2, [pc, #400]	; (80034e0 <HAL_DMA_Start_IT+0x4c8>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d009      	beq.n	8003368 <HAL_DMA_Start_IT+0x350>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a62      	ldr	r2, [pc, #392]	; (80034e4 <HAL_DMA_Start_IT+0x4cc>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d004      	beq.n	8003368 <HAL_DMA_Start_IT+0x350>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a61      	ldr	r2, [pc, #388]	; (80034e8 <HAL_DMA_Start_IT+0x4d0>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d101      	bne.n	800336c <HAL_DMA_Start_IT+0x354>
 8003368:	2301      	movs	r3, #1
 800336a:	e000      	b.n	800336e <HAL_DMA_Start_IT+0x356>
 800336c:	2300      	movs	r3, #0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d01a      	beq.n	80033a8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d007      	beq.n	8003390 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800338a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800338e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003394:	2b00      	cmp	r3, #0
 8003396:	d007      	beq.n	80033a8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033a6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a37      	ldr	r2, [pc, #220]	; (800348c <HAL_DMA_Start_IT+0x474>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d04a      	beq.n	8003448 <HAL_DMA_Start_IT+0x430>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a36      	ldr	r2, [pc, #216]	; (8003490 <HAL_DMA_Start_IT+0x478>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d045      	beq.n	8003448 <HAL_DMA_Start_IT+0x430>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a34      	ldr	r2, [pc, #208]	; (8003494 <HAL_DMA_Start_IT+0x47c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d040      	beq.n	8003448 <HAL_DMA_Start_IT+0x430>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a33      	ldr	r2, [pc, #204]	; (8003498 <HAL_DMA_Start_IT+0x480>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d03b      	beq.n	8003448 <HAL_DMA_Start_IT+0x430>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a31      	ldr	r2, [pc, #196]	; (800349c <HAL_DMA_Start_IT+0x484>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d036      	beq.n	8003448 <HAL_DMA_Start_IT+0x430>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a30      	ldr	r2, [pc, #192]	; (80034a0 <HAL_DMA_Start_IT+0x488>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d031      	beq.n	8003448 <HAL_DMA_Start_IT+0x430>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a2e      	ldr	r2, [pc, #184]	; (80034a4 <HAL_DMA_Start_IT+0x48c>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d02c      	beq.n	8003448 <HAL_DMA_Start_IT+0x430>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a2d      	ldr	r2, [pc, #180]	; (80034a8 <HAL_DMA_Start_IT+0x490>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d027      	beq.n	8003448 <HAL_DMA_Start_IT+0x430>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a2b      	ldr	r2, [pc, #172]	; (80034ac <HAL_DMA_Start_IT+0x494>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d022      	beq.n	8003448 <HAL_DMA_Start_IT+0x430>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a2a      	ldr	r2, [pc, #168]	; (80034b0 <HAL_DMA_Start_IT+0x498>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d01d      	beq.n	8003448 <HAL_DMA_Start_IT+0x430>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a28      	ldr	r2, [pc, #160]	; (80034b4 <HAL_DMA_Start_IT+0x49c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d018      	beq.n	8003448 <HAL_DMA_Start_IT+0x430>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a27      	ldr	r2, [pc, #156]	; (80034b8 <HAL_DMA_Start_IT+0x4a0>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d013      	beq.n	8003448 <HAL_DMA_Start_IT+0x430>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a25      	ldr	r2, [pc, #148]	; (80034bc <HAL_DMA_Start_IT+0x4a4>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d00e      	beq.n	8003448 <HAL_DMA_Start_IT+0x430>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a24      	ldr	r2, [pc, #144]	; (80034c0 <HAL_DMA_Start_IT+0x4a8>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d009      	beq.n	8003448 <HAL_DMA_Start_IT+0x430>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a22      	ldr	r2, [pc, #136]	; (80034c4 <HAL_DMA_Start_IT+0x4ac>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d004      	beq.n	8003448 <HAL_DMA_Start_IT+0x430>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a21      	ldr	r2, [pc, #132]	; (80034c8 <HAL_DMA_Start_IT+0x4b0>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d108      	bne.n	800345a <HAL_DMA_Start_IT+0x442>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f042 0201 	orr.w	r2, r2, #1
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	e012      	b.n	8003480 <HAL_DMA_Start_IT+0x468>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f042 0201 	orr.w	r2, r2, #1
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	e009      	b.n	8003480 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800347a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003480:	7dfb      	ldrb	r3, [r7, #23]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3718      	adds	r7, #24
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40020010 	.word	0x40020010
 8003490:	40020028 	.word	0x40020028
 8003494:	40020040 	.word	0x40020040
 8003498:	40020058 	.word	0x40020058
 800349c:	40020070 	.word	0x40020070
 80034a0:	40020088 	.word	0x40020088
 80034a4:	400200a0 	.word	0x400200a0
 80034a8:	400200b8 	.word	0x400200b8
 80034ac:	40020410 	.word	0x40020410
 80034b0:	40020428 	.word	0x40020428
 80034b4:	40020440 	.word	0x40020440
 80034b8:	40020458 	.word	0x40020458
 80034bc:	40020470 	.word	0x40020470
 80034c0:	40020488 	.word	0x40020488
 80034c4:	400204a0 	.word	0x400204a0
 80034c8:	400204b8 	.word	0x400204b8
 80034cc:	58025408 	.word	0x58025408
 80034d0:	5802541c 	.word	0x5802541c
 80034d4:	58025430 	.word	0x58025430
 80034d8:	58025444 	.word	0x58025444
 80034dc:	58025458 	.word	0x58025458
 80034e0:	5802546c 	.word	0x5802546c
 80034e4:	58025480 	.word	0x58025480
 80034e8:	58025494 	.word	0x58025494

080034ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80034f4:	f7ff f858 	bl	80025a8 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e2dc      	b.n	8003abe <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d008      	beq.n	8003522 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2280      	movs	r2, #128	; 0x80
 8003514:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e2cd      	b.n	8003abe <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a76      	ldr	r2, [pc, #472]	; (8003700 <HAL_DMA_Abort+0x214>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d04a      	beq.n	80035c2 <HAL_DMA_Abort+0xd6>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a74      	ldr	r2, [pc, #464]	; (8003704 <HAL_DMA_Abort+0x218>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d045      	beq.n	80035c2 <HAL_DMA_Abort+0xd6>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a73      	ldr	r2, [pc, #460]	; (8003708 <HAL_DMA_Abort+0x21c>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d040      	beq.n	80035c2 <HAL_DMA_Abort+0xd6>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a71      	ldr	r2, [pc, #452]	; (800370c <HAL_DMA_Abort+0x220>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d03b      	beq.n	80035c2 <HAL_DMA_Abort+0xd6>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a70      	ldr	r2, [pc, #448]	; (8003710 <HAL_DMA_Abort+0x224>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d036      	beq.n	80035c2 <HAL_DMA_Abort+0xd6>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a6e      	ldr	r2, [pc, #440]	; (8003714 <HAL_DMA_Abort+0x228>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d031      	beq.n	80035c2 <HAL_DMA_Abort+0xd6>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a6d      	ldr	r2, [pc, #436]	; (8003718 <HAL_DMA_Abort+0x22c>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d02c      	beq.n	80035c2 <HAL_DMA_Abort+0xd6>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a6b      	ldr	r2, [pc, #428]	; (800371c <HAL_DMA_Abort+0x230>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d027      	beq.n	80035c2 <HAL_DMA_Abort+0xd6>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a6a      	ldr	r2, [pc, #424]	; (8003720 <HAL_DMA_Abort+0x234>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d022      	beq.n	80035c2 <HAL_DMA_Abort+0xd6>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a68      	ldr	r2, [pc, #416]	; (8003724 <HAL_DMA_Abort+0x238>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d01d      	beq.n	80035c2 <HAL_DMA_Abort+0xd6>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a67      	ldr	r2, [pc, #412]	; (8003728 <HAL_DMA_Abort+0x23c>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d018      	beq.n	80035c2 <HAL_DMA_Abort+0xd6>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a65      	ldr	r2, [pc, #404]	; (800372c <HAL_DMA_Abort+0x240>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d013      	beq.n	80035c2 <HAL_DMA_Abort+0xd6>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a64      	ldr	r2, [pc, #400]	; (8003730 <HAL_DMA_Abort+0x244>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d00e      	beq.n	80035c2 <HAL_DMA_Abort+0xd6>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a62      	ldr	r2, [pc, #392]	; (8003734 <HAL_DMA_Abort+0x248>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d009      	beq.n	80035c2 <HAL_DMA_Abort+0xd6>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a61      	ldr	r2, [pc, #388]	; (8003738 <HAL_DMA_Abort+0x24c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d004      	beq.n	80035c2 <HAL_DMA_Abort+0xd6>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a5f      	ldr	r2, [pc, #380]	; (800373c <HAL_DMA_Abort+0x250>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d101      	bne.n	80035c6 <HAL_DMA_Abort+0xda>
 80035c2:	2301      	movs	r3, #1
 80035c4:	e000      	b.n	80035c8 <HAL_DMA_Abort+0xdc>
 80035c6:	2300      	movs	r3, #0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d013      	beq.n	80035f4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 021e 	bic.w	r2, r2, #30
 80035da:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695a      	ldr	r2, [r3, #20]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035ea:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	617b      	str	r3, [r7, #20]
 80035f2:	e00a      	b.n	800360a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 020e 	bic.w	r2, r2, #14
 8003602:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a3c      	ldr	r2, [pc, #240]	; (8003700 <HAL_DMA_Abort+0x214>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d072      	beq.n	80036fa <HAL_DMA_Abort+0x20e>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a3a      	ldr	r2, [pc, #232]	; (8003704 <HAL_DMA_Abort+0x218>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d06d      	beq.n	80036fa <HAL_DMA_Abort+0x20e>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a39      	ldr	r2, [pc, #228]	; (8003708 <HAL_DMA_Abort+0x21c>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d068      	beq.n	80036fa <HAL_DMA_Abort+0x20e>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a37      	ldr	r2, [pc, #220]	; (800370c <HAL_DMA_Abort+0x220>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d063      	beq.n	80036fa <HAL_DMA_Abort+0x20e>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a36      	ldr	r2, [pc, #216]	; (8003710 <HAL_DMA_Abort+0x224>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d05e      	beq.n	80036fa <HAL_DMA_Abort+0x20e>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a34      	ldr	r2, [pc, #208]	; (8003714 <HAL_DMA_Abort+0x228>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d059      	beq.n	80036fa <HAL_DMA_Abort+0x20e>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a33      	ldr	r2, [pc, #204]	; (8003718 <HAL_DMA_Abort+0x22c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d054      	beq.n	80036fa <HAL_DMA_Abort+0x20e>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a31      	ldr	r2, [pc, #196]	; (800371c <HAL_DMA_Abort+0x230>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d04f      	beq.n	80036fa <HAL_DMA_Abort+0x20e>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a30      	ldr	r2, [pc, #192]	; (8003720 <HAL_DMA_Abort+0x234>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d04a      	beq.n	80036fa <HAL_DMA_Abort+0x20e>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a2e      	ldr	r2, [pc, #184]	; (8003724 <HAL_DMA_Abort+0x238>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d045      	beq.n	80036fa <HAL_DMA_Abort+0x20e>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a2d      	ldr	r2, [pc, #180]	; (8003728 <HAL_DMA_Abort+0x23c>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d040      	beq.n	80036fa <HAL_DMA_Abort+0x20e>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a2b      	ldr	r2, [pc, #172]	; (800372c <HAL_DMA_Abort+0x240>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d03b      	beq.n	80036fa <HAL_DMA_Abort+0x20e>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a2a      	ldr	r2, [pc, #168]	; (8003730 <HAL_DMA_Abort+0x244>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d036      	beq.n	80036fa <HAL_DMA_Abort+0x20e>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a28      	ldr	r2, [pc, #160]	; (8003734 <HAL_DMA_Abort+0x248>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d031      	beq.n	80036fa <HAL_DMA_Abort+0x20e>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a27      	ldr	r2, [pc, #156]	; (8003738 <HAL_DMA_Abort+0x24c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d02c      	beq.n	80036fa <HAL_DMA_Abort+0x20e>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a25      	ldr	r2, [pc, #148]	; (800373c <HAL_DMA_Abort+0x250>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d027      	beq.n	80036fa <HAL_DMA_Abort+0x20e>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a24      	ldr	r2, [pc, #144]	; (8003740 <HAL_DMA_Abort+0x254>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d022      	beq.n	80036fa <HAL_DMA_Abort+0x20e>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a22      	ldr	r2, [pc, #136]	; (8003744 <HAL_DMA_Abort+0x258>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d01d      	beq.n	80036fa <HAL_DMA_Abort+0x20e>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a21      	ldr	r2, [pc, #132]	; (8003748 <HAL_DMA_Abort+0x25c>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d018      	beq.n	80036fa <HAL_DMA_Abort+0x20e>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a1f      	ldr	r2, [pc, #124]	; (800374c <HAL_DMA_Abort+0x260>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d013      	beq.n	80036fa <HAL_DMA_Abort+0x20e>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a1e      	ldr	r2, [pc, #120]	; (8003750 <HAL_DMA_Abort+0x264>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d00e      	beq.n	80036fa <HAL_DMA_Abort+0x20e>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a1c      	ldr	r2, [pc, #112]	; (8003754 <HAL_DMA_Abort+0x268>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d009      	beq.n	80036fa <HAL_DMA_Abort+0x20e>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a1b      	ldr	r2, [pc, #108]	; (8003758 <HAL_DMA_Abort+0x26c>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d004      	beq.n	80036fa <HAL_DMA_Abort+0x20e>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a19      	ldr	r2, [pc, #100]	; (800375c <HAL_DMA_Abort+0x270>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d132      	bne.n	8003760 <HAL_DMA_Abort+0x274>
 80036fa:	2301      	movs	r3, #1
 80036fc:	e031      	b.n	8003762 <HAL_DMA_Abort+0x276>
 80036fe:	bf00      	nop
 8003700:	40020010 	.word	0x40020010
 8003704:	40020028 	.word	0x40020028
 8003708:	40020040 	.word	0x40020040
 800370c:	40020058 	.word	0x40020058
 8003710:	40020070 	.word	0x40020070
 8003714:	40020088 	.word	0x40020088
 8003718:	400200a0 	.word	0x400200a0
 800371c:	400200b8 	.word	0x400200b8
 8003720:	40020410 	.word	0x40020410
 8003724:	40020428 	.word	0x40020428
 8003728:	40020440 	.word	0x40020440
 800372c:	40020458 	.word	0x40020458
 8003730:	40020470 	.word	0x40020470
 8003734:	40020488 	.word	0x40020488
 8003738:	400204a0 	.word	0x400204a0
 800373c:	400204b8 	.word	0x400204b8
 8003740:	58025408 	.word	0x58025408
 8003744:	5802541c 	.word	0x5802541c
 8003748:	58025430 	.word	0x58025430
 800374c:	58025444 	.word	0x58025444
 8003750:	58025458 	.word	0x58025458
 8003754:	5802546c 	.word	0x5802546c
 8003758:	58025480 	.word	0x58025480
 800375c:	58025494 	.word	0x58025494
 8003760:	2300      	movs	r3, #0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d007      	beq.n	8003776 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003770:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003774:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a6d      	ldr	r2, [pc, #436]	; (8003930 <HAL_DMA_Abort+0x444>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d04a      	beq.n	8003816 <HAL_DMA_Abort+0x32a>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a6b      	ldr	r2, [pc, #428]	; (8003934 <HAL_DMA_Abort+0x448>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d045      	beq.n	8003816 <HAL_DMA_Abort+0x32a>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a6a      	ldr	r2, [pc, #424]	; (8003938 <HAL_DMA_Abort+0x44c>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d040      	beq.n	8003816 <HAL_DMA_Abort+0x32a>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a68      	ldr	r2, [pc, #416]	; (800393c <HAL_DMA_Abort+0x450>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d03b      	beq.n	8003816 <HAL_DMA_Abort+0x32a>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a67      	ldr	r2, [pc, #412]	; (8003940 <HAL_DMA_Abort+0x454>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d036      	beq.n	8003816 <HAL_DMA_Abort+0x32a>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a65      	ldr	r2, [pc, #404]	; (8003944 <HAL_DMA_Abort+0x458>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d031      	beq.n	8003816 <HAL_DMA_Abort+0x32a>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a64      	ldr	r2, [pc, #400]	; (8003948 <HAL_DMA_Abort+0x45c>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d02c      	beq.n	8003816 <HAL_DMA_Abort+0x32a>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a62      	ldr	r2, [pc, #392]	; (800394c <HAL_DMA_Abort+0x460>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d027      	beq.n	8003816 <HAL_DMA_Abort+0x32a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a61      	ldr	r2, [pc, #388]	; (8003950 <HAL_DMA_Abort+0x464>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d022      	beq.n	8003816 <HAL_DMA_Abort+0x32a>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a5f      	ldr	r2, [pc, #380]	; (8003954 <HAL_DMA_Abort+0x468>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d01d      	beq.n	8003816 <HAL_DMA_Abort+0x32a>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a5e      	ldr	r2, [pc, #376]	; (8003958 <HAL_DMA_Abort+0x46c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d018      	beq.n	8003816 <HAL_DMA_Abort+0x32a>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a5c      	ldr	r2, [pc, #368]	; (800395c <HAL_DMA_Abort+0x470>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d013      	beq.n	8003816 <HAL_DMA_Abort+0x32a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a5b      	ldr	r2, [pc, #364]	; (8003960 <HAL_DMA_Abort+0x474>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d00e      	beq.n	8003816 <HAL_DMA_Abort+0x32a>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a59      	ldr	r2, [pc, #356]	; (8003964 <HAL_DMA_Abort+0x478>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d009      	beq.n	8003816 <HAL_DMA_Abort+0x32a>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a58      	ldr	r2, [pc, #352]	; (8003968 <HAL_DMA_Abort+0x47c>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d004      	beq.n	8003816 <HAL_DMA_Abort+0x32a>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a56      	ldr	r2, [pc, #344]	; (800396c <HAL_DMA_Abort+0x480>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d108      	bne.n	8003828 <HAL_DMA_Abort+0x33c>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0201 	bic.w	r2, r2, #1
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	e007      	b.n	8003838 <HAL_DMA_Abort+0x34c>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 0201 	bic.w	r2, r2, #1
 8003836:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003838:	e013      	b.n	8003862 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800383a:	f7fe feb5 	bl	80025a8 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b05      	cmp	r3, #5
 8003846:	d90c      	bls.n	8003862 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2220      	movs	r2, #32
 800384c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2203      	movs	r2, #3
 800385a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e12d      	b.n	8003abe <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1e5      	bne.n	800383a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a2f      	ldr	r2, [pc, #188]	; (8003930 <HAL_DMA_Abort+0x444>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d04a      	beq.n	800390e <HAL_DMA_Abort+0x422>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a2d      	ldr	r2, [pc, #180]	; (8003934 <HAL_DMA_Abort+0x448>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d045      	beq.n	800390e <HAL_DMA_Abort+0x422>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a2c      	ldr	r2, [pc, #176]	; (8003938 <HAL_DMA_Abort+0x44c>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d040      	beq.n	800390e <HAL_DMA_Abort+0x422>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a2a      	ldr	r2, [pc, #168]	; (800393c <HAL_DMA_Abort+0x450>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d03b      	beq.n	800390e <HAL_DMA_Abort+0x422>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a29      	ldr	r2, [pc, #164]	; (8003940 <HAL_DMA_Abort+0x454>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d036      	beq.n	800390e <HAL_DMA_Abort+0x422>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a27      	ldr	r2, [pc, #156]	; (8003944 <HAL_DMA_Abort+0x458>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d031      	beq.n	800390e <HAL_DMA_Abort+0x422>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a26      	ldr	r2, [pc, #152]	; (8003948 <HAL_DMA_Abort+0x45c>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d02c      	beq.n	800390e <HAL_DMA_Abort+0x422>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a24      	ldr	r2, [pc, #144]	; (800394c <HAL_DMA_Abort+0x460>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d027      	beq.n	800390e <HAL_DMA_Abort+0x422>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a23      	ldr	r2, [pc, #140]	; (8003950 <HAL_DMA_Abort+0x464>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d022      	beq.n	800390e <HAL_DMA_Abort+0x422>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a21      	ldr	r2, [pc, #132]	; (8003954 <HAL_DMA_Abort+0x468>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d01d      	beq.n	800390e <HAL_DMA_Abort+0x422>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a20      	ldr	r2, [pc, #128]	; (8003958 <HAL_DMA_Abort+0x46c>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d018      	beq.n	800390e <HAL_DMA_Abort+0x422>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a1e      	ldr	r2, [pc, #120]	; (800395c <HAL_DMA_Abort+0x470>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d013      	beq.n	800390e <HAL_DMA_Abort+0x422>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a1d      	ldr	r2, [pc, #116]	; (8003960 <HAL_DMA_Abort+0x474>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d00e      	beq.n	800390e <HAL_DMA_Abort+0x422>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a1b      	ldr	r2, [pc, #108]	; (8003964 <HAL_DMA_Abort+0x478>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d009      	beq.n	800390e <HAL_DMA_Abort+0x422>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a1a      	ldr	r2, [pc, #104]	; (8003968 <HAL_DMA_Abort+0x47c>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d004      	beq.n	800390e <HAL_DMA_Abort+0x422>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a18      	ldr	r2, [pc, #96]	; (800396c <HAL_DMA_Abort+0x480>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d101      	bne.n	8003912 <HAL_DMA_Abort+0x426>
 800390e:	2301      	movs	r3, #1
 8003910:	e000      	b.n	8003914 <HAL_DMA_Abort+0x428>
 8003912:	2300      	movs	r3, #0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d02b      	beq.n	8003970 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800391c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003922:	f003 031f 	and.w	r3, r3, #31
 8003926:	223f      	movs	r2, #63	; 0x3f
 8003928:	409a      	lsls	r2, r3
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	609a      	str	r2, [r3, #8]
 800392e:	e02a      	b.n	8003986 <HAL_DMA_Abort+0x49a>
 8003930:	40020010 	.word	0x40020010
 8003934:	40020028 	.word	0x40020028
 8003938:	40020040 	.word	0x40020040
 800393c:	40020058 	.word	0x40020058
 8003940:	40020070 	.word	0x40020070
 8003944:	40020088 	.word	0x40020088
 8003948:	400200a0 	.word	0x400200a0
 800394c:	400200b8 	.word	0x400200b8
 8003950:	40020410 	.word	0x40020410
 8003954:	40020428 	.word	0x40020428
 8003958:	40020440 	.word	0x40020440
 800395c:	40020458 	.word	0x40020458
 8003960:	40020470 	.word	0x40020470
 8003964:	40020488 	.word	0x40020488
 8003968:	400204a0 	.word	0x400204a0
 800396c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003974:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397a:	f003 031f 	and.w	r3, r3, #31
 800397e:	2201      	movs	r2, #1
 8003980:	409a      	lsls	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a4f      	ldr	r2, [pc, #316]	; (8003ac8 <HAL_DMA_Abort+0x5dc>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d072      	beq.n	8003a76 <HAL_DMA_Abort+0x58a>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a4d      	ldr	r2, [pc, #308]	; (8003acc <HAL_DMA_Abort+0x5e0>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d06d      	beq.n	8003a76 <HAL_DMA_Abort+0x58a>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a4c      	ldr	r2, [pc, #304]	; (8003ad0 <HAL_DMA_Abort+0x5e4>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d068      	beq.n	8003a76 <HAL_DMA_Abort+0x58a>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a4a      	ldr	r2, [pc, #296]	; (8003ad4 <HAL_DMA_Abort+0x5e8>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d063      	beq.n	8003a76 <HAL_DMA_Abort+0x58a>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a49      	ldr	r2, [pc, #292]	; (8003ad8 <HAL_DMA_Abort+0x5ec>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d05e      	beq.n	8003a76 <HAL_DMA_Abort+0x58a>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a47      	ldr	r2, [pc, #284]	; (8003adc <HAL_DMA_Abort+0x5f0>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d059      	beq.n	8003a76 <HAL_DMA_Abort+0x58a>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a46      	ldr	r2, [pc, #280]	; (8003ae0 <HAL_DMA_Abort+0x5f4>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d054      	beq.n	8003a76 <HAL_DMA_Abort+0x58a>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a44      	ldr	r2, [pc, #272]	; (8003ae4 <HAL_DMA_Abort+0x5f8>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d04f      	beq.n	8003a76 <HAL_DMA_Abort+0x58a>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a43      	ldr	r2, [pc, #268]	; (8003ae8 <HAL_DMA_Abort+0x5fc>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d04a      	beq.n	8003a76 <HAL_DMA_Abort+0x58a>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a41      	ldr	r2, [pc, #260]	; (8003aec <HAL_DMA_Abort+0x600>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d045      	beq.n	8003a76 <HAL_DMA_Abort+0x58a>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a40      	ldr	r2, [pc, #256]	; (8003af0 <HAL_DMA_Abort+0x604>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d040      	beq.n	8003a76 <HAL_DMA_Abort+0x58a>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a3e      	ldr	r2, [pc, #248]	; (8003af4 <HAL_DMA_Abort+0x608>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d03b      	beq.n	8003a76 <HAL_DMA_Abort+0x58a>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a3d      	ldr	r2, [pc, #244]	; (8003af8 <HAL_DMA_Abort+0x60c>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d036      	beq.n	8003a76 <HAL_DMA_Abort+0x58a>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a3b      	ldr	r2, [pc, #236]	; (8003afc <HAL_DMA_Abort+0x610>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d031      	beq.n	8003a76 <HAL_DMA_Abort+0x58a>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a3a      	ldr	r2, [pc, #232]	; (8003b00 <HAL_DMA_Abort+0x614>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d02c      	beq.n	8003a76 <HAL_DMA_Abort+0x58a>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a38      	ldr	r2, [pc, #224]	; (8003b04 <HAL_DMA_Abort+0x618>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d027      	beq.n	8003a76 <HAL_DMA_Abort+0x58a>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a37      	ldr	r2, [pc, #220]	; (8003b08 <HAL_DMA_Abort+0x61c>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d022      	beq.n	8003a76 <HAL_DMA_Abort+0x58a>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a35      	ldr	r2, [pc, #212]	; (8003b0c <HAL_DMA_Abort+0x620>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d01d      	beq.n	8003a76 <HAL_DMA_Abort+0x58a>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a34      	ldr	r2, [pc, #208]	; (8003b10 <HAL_DMA_Abort+0x624>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d018      	beq.n	8003a76 <HAL_DMA_Abort+0x58a>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a32      	ldr	r2, [pc, #200]	; (8003b14 <HAL_DMA_Abort+0x628>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d013      	beq.n	8003a76 <HAL_DMA_Abort+0x58a>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a31      	ldr	r2, [pc, #196]	; (8003b18 <HAL_DMA_Abort+0x62c>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d00e      	beq.n	8003a76 <HAL_DMA_Abort+0x58a>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a2f      	ldr	r2, [pc, #188]	; (8003b1c <HAL_DMA_Abort+0x630>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d009      	beq.n	8003a76 <HAL_DMA_Abort+0x58a>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a2e      	ldr	r2, [pc, #184]	; (8003b20 <HAL_DMA_Abort+0x634>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d004      	beq.n	8003a76 <HAL_DMA_Abort+0x58a>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a2c      	ldr	r2, [pc, #176]	; (8003b24 <HAL_DMA_Abort+0x638>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d101      	bne.n	8003a7a <HAL_DMA_Abort+0x58e>
 8003a76:	2301      	movs	r3, #1
 8003a78:	e000      	b.n	8003a7c <HAL_DMA_Abort+0x590>
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d015      	beq.n	8003aac <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003a88:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00c      	beq.n	8003aac <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003aa0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003aaa:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3718      	adds	r7, #24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40020010 	.word	0x40020010
 8003acc:	40020028 	.word	0x40020028
 8003ad0:	40020040 	.word	0x40020040
 8003ad4:	40020058 	.word	0x40020058
 8003ad8:	40020070 	.word	0x40020070
 8003adc:	40020088 	.word	0x40020088
 8003ae0:	400200a0 	.word	0x400200a0
 8003ae4:	400200b8 	.word	0x400200b8
 8003ae8:	40020410 	.word	0x40020410
 8003aec:	40020428 	.word	0x40020428
 8003af0:	40020440 	.word	0x40020440
 8003af4:	40020458 	.word	0x40020458
 8003af8:	40020470 	.word	0x40020470
 8003afc:	40020488 	.word	0x40020488
 8003b00:	400204a0 	.word	0x400204a0
 8003b04:	400204b8 	.word	0x400204b8
 8003b08:	58025408 	.word	0x58025408
 8003b0c:	5802541c 	.word	0x5802541c
 8003b10:	58025430 	.word	0x58025430
 8003b14:	58025444 	.word	0x58025444
 8003b18:	58025458 	.word	0x58025458
 8003b1c:	5802546c 	.word	0x5802546c
 8003b20:	58025480 	.word	0x58025480
 8003b24:	58025494 	.word	0x58025494

08003b28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e205      	b.n	8003f46 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d004      	beq.n	8003b50 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2280      	movs	r2, #128	; 0x80
 8003b4a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e1fa      	b.n	8003f46 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a8c      	ldr	r2, [pc, #560]	; (8003d88 <HAL_DMA_Abort_IT+0x260>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d04a      	beq.n	8003bf0 <HAL_DMA_Abort_IT+0xc8>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a8b      	ldr	r2, [pc, #556]	; (8003d8c <HAL_DMA_Abort_IT+0x264>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d045      	beq.n	8003bf0 <HAL_DMA_Abort_IT+0xc8>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a89      	ldr	r2, [pc, #548]	; (8003d90 <HAL_DMA_Abort_IT+0x268>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d040      	beq.n	8003bf0 <HAL_DMA_Abort_IT+0xc8>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a88      	ldr	r2, [pc, #544]	; (8003d94 <HAL_DMA_Abort_IT+0x26c>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d03b      	beq.n	8003bf0 <HAL_DMA_Abort_IT+0xc8>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a86      	ldr	r2, [pc, #536]	; (8003d98 <HAL_DMA_Abort_IT+0x270>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d036      	beq.n	8003bf0 <HAL_DMA_Abort_IT+0xc8>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a85      	ldr	r2, [pc, #532]	; (8003d9c <HAL_DMA_Abort_IT+0x274>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d031      	beq.n	8003bf0 <HAL_DMA_Abort_IT+0xc8>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a83      	ldr	r2, [pc, #524]	; (8003da0 <HAL_DMA_Abort_IT+0x278>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d02c      	beq.n	8003bf0 <HAL_DMA_Abort_IT+0xc8>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a82      	ldr	r2, [pc, #520]	; (8003da4 <HAL_DMA_Abort_IT+0x27c>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d027      	beq.n	8003bf0 <HAL_DMA_Abort_IT+0xc8>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a80      	ldr	r2, [pc, #512]	; (8003da8 <HAL_DMA_Abort_IT+0x280>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d022      	beq.n	8003bf0 <HAL_DMA_Abort_IT+0xc8>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a7f      	ldr	r2, [pc, #508]	; (8003dac <HAL_DMA_Abort_IT+0x284>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d01d      	beq.n	8003bf0 <HAL_DMA_Abort_IT+0xc8>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a7d      	ldr	r2, [pc, #500]	; (8003db0 <HAL_DMA_Abort_IT+0x288>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d018      	beq.n	8003bf0 <HAL_DMA_Abort_IT+0xc8>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a7c      	ldr	r2, [pc, #496]	; (8003db4 <HAL_DMA_Abort_IT+0x28c>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d013      	beq.n	8003bf0 <HAL_DMA_Abort_IT+0xc8>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a7a      	ldr	r2, [pc, #488]	; (8003db8 <HAL_DMA_Abort_IT+0x290>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d00e      	beq.n	8003bf0 <HAL_DMA_Abort_IT+0xc8>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a79      	ldr	r2, [pc, #484]	; (8003dbc <HAL_DMA_Abort_IT+0x294>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d009      	beq.n	8003bf0 <HAL_DMA_Abort_IT+0xc8>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a77      	ldr	r2, [pc, #476]	; (8003dc0 <HAL_DMA_Abort_IT+0x298>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d004      	beq.n	8003bf0 <HAL_DMA_Abort_IT+0xc8>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a76      	ldr	r2, [pc, #472]	; (8003dc4 <HAL_DMA_Abort_IT+0x29c>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d101      	bne.n	8003bf4 <HAL_DMA_Abort_IT+0xcc>
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e000      	b.n	8003bf6 <HAL_DMA_Abort_IT+0xce>
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d065      	beq.n	8003cc6 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2204      	movs	r2, #4
 8003bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a60      	ldr	r2, [pc, #384]	; (8003d88 <HAL_DMA_Abort_IT+0x260>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d04a      	beq.n	8003ca2 <HAL_DMA_Abort_IT+0x17a>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a5e      	ldr	r2, [pc, #376]	; (8003d8c <HAL_DMA_Abort_IT+0x264>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d045      	beq.n	8003ca2 <HAL_DMA_Abort_IT+0x17a>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a5d      	ldr	r2, [pc, #372]	; (8003d90 <HAL_DMA_Abort_IT+0x268>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d040      	beq.n	8003ca2 <HAL_DMA_Abort_IT+0x17a>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a5b      	ldr	r2, [pc, #364]	; (8003d94 <HAL_DMA_Abort_IT+0x26c>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d03b      	beq.n	8003ca2 <HAL_DMA_Abort_IT+0x17a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a5a      	ldr	r2, [pc, #360]	; (8003d98 <HAL_DMA_Abort_IT+0x270>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d036      	beq.n	8003ca2 <HAL_DMA_Abort_IT+0x17a>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a58      	ldr	r2, [pc, #352]	; (8003d9c <HAL_DMA_Abort_IT+0x274>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d031      	beq.n	8003ca2 <HAL_DMA_Abort_IT+0x17a>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a57      	ldr	r2, [pc, #348]	; (8003da0 <HAL_DMA_Abort_IT+0x278>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d02c      	beq.n	8003ca2 <HAL_DMA_Abort_IT+0x17a>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a55      	ldr	r2, [pc, #340]	; (8003da4 <HAL_DMA_Abort_IT+0x27c>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d027      	beq.n	8003ca2 <HAL_DMA_Abort_IT+0x17a>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a54      	ldr	r2, [pc, #336]	; (8003da8 <HAL_DMA_Abort_IT+0x280>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d022      	beq.n	8003ca2 <HAL_DMA_Abort_IT+0x17a>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a52      	ldr	r2, [pc, #328]	; (8003dac <HAL_DMA_Abort_IT+0x284>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d01d      	beq.n	8003ca2 <HAL_DMA_Abort_IT+0x17a>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a51      	ldr	r2, [pc, #324]	; (8003db0 <HAL_DMA_Abort_IT+0x288>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d018      	beq.n	8003ca2 <HAL_DMA_Abort_IT+0x17a>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a4f      	ldr	r2, [pc, #316]	; (8003db4 <HAL_DMA_Abort_IT+0x28c>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d013      	beq.n	8003ca2 <HAL_DMA_Abort_IT+0x17a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a4e      	ldr	r2, [pc, #312]	; (8003db8 <HAL_DMA_Abort_IT+0x290>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d00e      	beq.n	8003ca2 <HAL_DMA_Abort_IT+0x17a>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a4c      	ldr	r2, [pc, #304]	; (8003dbc <HAL_DMA_Abort_IT+0x294>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d009      	beq.n	8003ca2 <HAL_DMA_Abort_IT+0x17a>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a4b      	ldr	r2, [pc, #300]	; (8003dc0 <HAL_DMA_Abort_IT+0x298>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d004      	beq.n	8003ca2 <HAL_DMA_Abort_IT+0x17a>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a49      	ldr	r2, [pc, #292]	; (8003dc4 <HAL_DMA_Abort_IT+0x29c>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d108      	bne.n	8003cb4 <HAL_DMA_Abort_IT+0x18c>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0201 	bic.w	r2, r2, #1
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	e147      	b.n	8003f44 <HAL_DMA_Abort_IT+0x41c>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0201 	bic.w	r2, r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	e13e      	b.n	8003f44 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 020e 	bic.w	r2, r2, #14
 8003cd4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a2b      	ldr	r2, [pc, #172]	; (8003d88 <HAL_DMA_Abort_IT+0x260>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d04a      	beq.n	8003d76 <HAL_DMA_Abort_IT+0x24e>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a29      	ldr	r2, [pc, #164]	; (8003d8c <HAL_DMA_Abort_IT+0x264>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d045      	beq.n	8003d76 <HAL_DMA_Abort_IT+0x24e>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a28      	ldr	r2, [pc, #160]	; (8003d90 <HAL_DMA_Abort_IT+0x268>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d040      	beq.n	8003d76 <HAL_DMA_Abort_IT+0x24e>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a26      	ldr	r2, [pc, #152]	; (8003d94 <HAL_DMA_Abort_IT+0x26c>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d03b      	beq.n	8003d76 <HAL_DMA_Abort_IT+0x24e>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a25      	ldr	r2, [pc, #148]	; (8003d98 <HAL_DMA_Abort_IT+0x270>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d036      	beq.n	8003d76 <HAL_DMA_Abort_IT+0x24e>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a23      	ldr	r2, [pc, #140]	; (8003d9c <HAL_DMA_Abort_IT+0x274>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d031      	beq.n	8003d76 <HAL_DMA_Abort_IT+0x24e>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a22      	ldr	r2, [pc, #136]	; (8003da0 <HAL_DMA_Abort_IT+0x278>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d02c      	beq.n	8003d76 <HAL_DMA_Abort_IT+0x24e>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a20      	ldr	r2, [pc, #128]	; (8003da4 <HAL_DMA_Abort_IT+0x27c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d027      	beq.n	8003d76 <HAL_DMA_Abort_IT+0x24e>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a1f      	ldr	r2, [pc, #124]	; (8003da8 <HAL_DMA_Abort_IT+0x280>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d022      	beq.n	8003d76 <HAL_DMA_Abort_IT+0x24e>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a1d      	ldr	r2, [pc, #116]	; (8003dac <HAL_DMA_Abort_IT+0x284>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d01d      	beq.n	8003d76 <HAL_DMA_Abort_IT+0x24e>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a1c      	ldr	r2, [pc, #112]	; (8003db0 <HAL_DMA_Abort_IT+0x288>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d018      	beq.n	8003d76 <HAL_DMA_Abort_IT+0x24e>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a1a      	ldr	r2, [pc, #104]	; (8003db4 <HAL_DMA_Abort_IT+0x28c>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d013      	beq.n	8003d76 <HAL_DMA_Abort_IT+0x24e>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a19      	ldr	r2, [pc, #100]	; (8003db8 <HAL_DMA_Abort_IT+0x290>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d00e      	beq.n	8003d76 <HAL_DMA_Abort_IT+0x24e>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a17      	ldr	r2, [pc, #92]	; (8003dbc <HAL_DMA_Abort_IT+0x294>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d009      	beq.n	8003d76 <HAL_DMA_Abort_IT+0x24e>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a16      	ldr	r2, [pc, #88]	; (8003dc0 <HAL_DMA_Abort_IT+0x298>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d004      	beq.n	8003d76 <HAL_DMA_Abort_IT+0x24e>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a14      	ldr	r2, [pc, #80]	; (8003dc4 <HAL_DMA_Abort_IT+0x29c>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d128      	bne.n	8003dc8 <HAL_DMA_Abort_IT+0x2a0>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f022 0201 	bic.w	r2, r2, #1
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	e027      	b.n	8003dd8 <HAL_DMA_Abort_IT+0x2b0>
 8003d88:	40020010 	.word	0x40020010
 8003d8c:	40020028 	.word	0x40020028
 8003d90:	40020040 	.word	0x40020040
 8003d94:	40020058 	.word	0x40020058
 8003d98:	40020070 	.word	0x40020070
 8003d9c:	40020088 	.word	0x40020088
 8003da0:	400200a0 	.word	0x400200a0
 8003da4:	400200b8 	.word	0x400200b8
 8003da8:	40020410 	.word	0x40020410
 8003dac:	40020428 	.word	0x40020428
 8003db0:	40020440 	.word	0x40020440
 8003db4:	40020458 	.word	0x40020458
 8003db8:	40020470 	.word	0x40020470
 8003dbc:	40020488 	.word	0x40020488
 8003dc0:	400204a0 	.word	0x400204a0
 8003dc4:	400204b8 	.word	0x400204b8
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0201 	bic.w	r2, r2, #1
 8003dd6:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a5c      	ldr	r2, [pc, #368]	; (8003f50 <HAL_DMA_Abort_IT+0x428>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d072      	beq.n	8003ec8 <HAL_DMA_Abort_IT+0x3a0>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a5b      	ldr	r2, [pc, #364]	; (8003f54 <HAL_DMA_Abort_IT+0x42c>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d06d      	beq.n	8003ec8 <HAL_DMA_Abort_IT+0x3a0>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a59      	ldr	r2, [pc, #356]	; (8003f58 <HAL_DMA_Abort_IT+0x430>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d068      	beq.n	8003ec8 <HAL_DMA_Abort_IT+0x3a0>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a58      	ldr	r2, [pc, #352]	; (8003f5c <HAL_DMA_Abort_IT+0x434>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d063      	beq.n	8003ec8 <HAL_DMA_Abort_IT+0x3a0>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a56      	ldr	r2, [pc, #344]	; (8003f60 <HAL_DMA_Abort_IT+0x438>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d05e      	beq.n	8003ec8 <HAL_DMA_Abort_IT+0x3a0>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a55      	ldr	r2, [pc, #340]	; (8003f64 <HAL_DMA_Abort_IT+0x43c>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d059      	beq.n	8003ec8 <HAL_DMA_Abort_IT+0x3a0>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a53      	ldr	r2, [pc, #332]	; (8003f68 <HAL_DMA_Abort_IT+0x440>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d054      	beq.n	8003ec8 <HAL_DMA_Abort_IT+0x3a0>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a52      	ldr	r2, [pc, #328]	; (8003f6c <HAL_DMA_Abort_IT+0x444>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d04f      	beq.n	8003ec8 <HAL_DMA_Abort_IT+0x3a0>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a50      	ldr	r2, [pc, #320]	; (8003f70 <HAL_DMA_Abort_IT+0x448>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d04a      	beq.n	8003ec8 <HAL_DMA_Abort_IT+0x3a0>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a4f      	ldr	r2, [pc, #316]	; (8003f74 <HAL_DMA_Abort_IT+0x44c>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d045      	beq.n	8003ec8 <HAL_DMA_Abort_IT+0x3a0>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a4d      	ldr	r2, [pc, #308]	; (8003f78 <HAL_DMA_Abort_IT+0x450>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d040      	beq.n	8003ec8 <HAL_DMA_Abort_IT+0x3a0>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a4c      	ldr	r2, [pc, #304]	; (8003f7c <HAL_DMA_Abort_IT+0x454>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d03b      	beq.n	8003ec8 <HAL_DMA_Abort_IT+0x3a0>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a4a      	ldr	r2, [pc, #296]	; (8003f80 <HAL_DMA_Abort_IT+0x458>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d036      	beq.n	8003ec8 <HAL_DMA_Abort_IT+0x3a0>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a49      	ldr	r2, [pc, #292]	; (8003f84 <HAL_DMA_Abort_IT+0x45c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d031      	beq.n	8003ec8 <HAL_DMA_Abort_IT+0x3a0>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a47      	ldr	r2, [pc, #284]	; (8003f88 <HAL_DMA_Abort_IT+0x460>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d02c      	beq.n	8003ec8 <HAL_DMA_Abort_IT+0x3a0>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a46      	ldr	r2, [pc, #280]	; (8003f8c <HAL_DMA_Abort_IT+0x464>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d027      	beq.n	8003ec8 <HAL_DMA_Abort_IT+0x3a0>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a44      	ldr	r2, [pc, #272]	; (8003f90 <HAL_DMA_Abort_IT+0x468>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d022      	beq.n	8003ec8 <HAL_DMA_Abort_IT+0x3a0>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a43      	ldr	r2, [pc, #268]	; (8003f94 <HAL_DMA_Abort_IT+0x46c>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d01d      	beq.n	8003ec8 <HAL_DMA_Abort_IT+0x3a0>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a41      	ldr	r2, [pc, #260]	; (8003f98 <HAL_DMA_Abort_IT+0x470>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d018      	beq.n	8003ec8 <HAL_DMA_Abort_IT+0x3a0>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a40      	ldr	r2, [pc, #256]	; (8003f9c <HAL_DMA_Abort_IT+0x474>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d013      	beq.n	8003ec8 <HAL_DMA_Abort_IT+0x3a0>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a3e      	ldr	r2, [pc, #248]	; (8003fa0 <HAL_DMA_Abort_IT+0x478>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d00e      	beq.n	8003ec8 <HAL_DMA_Abort_IT+0x3a0>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a3d      	ldr	r2, [pc, #244]	; (8003fa4 <HAL_DMA_Abort_IT+0x47c>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d009      	beq.n	8003ec8 <HAL_DMA_Abort_IT+0x3a0>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a3b      	ldr	r2, [pc, #236]	; (8003fa8 <HAL_DMA_Abort_IT+0x480>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d004      	beq.n	8003ec8 <HAL_DMA_Abort_IT+0x3a0>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a3a      	ldr	r2, [pc, #232]	; (8003fac <HAL_DMA_Abort_IT+0x484>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d101      	bne.n	8003ecc <HAL_DMA_Abort_IT+0x3a4>
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e000      	b.n	8003ece <HAL_DMA_Abort_IT+0x3a6>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d028      	beq.n	8003f24 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003edc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ee0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eec:	f003 031f 	and.w	r3, r3, #31
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	409a      	lsls	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003f00:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00c      	beq.n	8003f24 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f18:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003f22:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	40020010 	.word	0x40020010
 8003f54:	40020028 	.word	0x40020028
 8003f58:	40020040 	.word	0x40020040
 8003f5c:	40020058 	.word	0x40020058
 8003f60:	40020070 	.word	0x40020070
 8003f64:	40020088 	.word	0x40020088
 8003f68:	400200a0 	.word	0x400200a0
 8003f6c:	400200b8 	.word	0x400200b8
 8003f70:	40020410 	.word	0x40020410
 8003f74:	40020428 	.word	0x40020428
 8003f78:	40020440 	.word	0x40020440
 8003f7c:	40020458 	.word	0x40020458
 8003f80:	40020470 	.word	0x40020470
 8003f84:	40020488 	.word	0x40020488
 8003f88:	400204a0 	.word	0x400204a0
 8003f8c:	400204b8 	.word	0x400204b8
 8003f90:	58025408 	.word	0x58025408
 8003f94:	5802541c 	.word	0x5802541c
 8003f98:	58025430 	.word	0x58025430
 8003f9c:	58025444 	.word	0x58025444
 8003fa0:	58025458 	.word	0x58025458
 8003fa4:	5802546c 	.word	0x5802546c
 8003fa8:	58025480 	.word	0x58025480
 8003fac:	58025494 	.word	0x58025494

08003fb0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b08a      	sub	sp, #40	; 0x28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003fbc:	4b67      	ldr	r3, [pc, #412]	; (800415c <HAL_DMA_IRQHandler+0x1ac>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a67      	ldr	r2, [pc, #412]	; (8004160 <HAL_DMA_IRQHandler+0x1b0>)
 8003fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc6:	0a9b      	lsrs	r3, r3, #10
 8003fc8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fce:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a5f      	ldr	r2, [pc, #380]	; (8004164 <HAL_DMA_IRQHandler+0x1b4>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d04a      	beq.n	8004082 <HAL_DMA_IRQHandler+0xd2>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a5d      	ldr	r2, [pc, #372]	; (8004168 <HAL_DMA_IRQHandler+0x1b8>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d045      	beq.n	8004082 <HAL_DMA_IRQHandler+0xd2>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a5c      	ldr	r2, [pc, #368]	; (800416c <HAL_DMA_IRQHandler+0x1bc>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d040      	beq.n	8004082 <HAL_DMA_IRQHandler+0xd2>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a5a      	ldr	r2, [pc, #360]	; (8004170 <HAL_DMA_IRQHandler+0x1c0>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d03b      	beq.n	8004082 <HAL_DMA_IRQHandler+0xd2>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a59      	ldr	r2, [pc, #356]	; (8004174 <HAL_DMA_IRQHandler+0x1c4>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d036      	beq.n	8004082 <HAL_DMA_IRQHandler+0xd2>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a57      	ldr	r2, [pc, #348]	; (8004178 <HAL_DMA_IRQHandler+0x1c8>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d031      	beq.n	8004082 <HAL_DMA_IRQHandler+0xd2>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a56      	ldr	r2, [pc, #344]	; (800417c <HAL_DMA_IRQHandler+0x1cc>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d02c      	beq.n	8004082 <HAL_DMA_IRQHandler+0xd2>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a54      	ldr	r2, [pc, #336]	; (8004180 <HAL_DMA_IRQHandler+0x1d0>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d027      	beq.n	8004082 <HAL_DMA_IRQHandler+0xd2>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a53      	ldr	r2, [pc, #332]	; (8004184 <HAL_DMA_IRQHandler+0x1d4>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d022      	beq.n	8004082 <HAL_DMA_IRQHandler+0xd2>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a51      	ldr	r2, [pc, #324]	; (8004188 <HAL_DMA_IRQHandler+0x1d8>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d01d      	beq.n	8004082 <HAL_DMA_IRQHandler+0xd2>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a50      	ldr	r2, [pc, #320]	; (800418c <HAL_DMA_IRQHandler+0x1dc>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d018      	beq.n	8004082 <HAL_DMA_IRQHandler+0xd2>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a4e      	ldr	r2, [pc, #312]	; (8004190 <HAL_DMA_IRQHandler+0x1e0>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d013      	beq.n	8004082 <HAL_DMA_IRQHandler+0xd2>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a4d      	ldr	r2, [pc, #308]	; (8004194 <HAL_DMA_IRQHandler+0x1e4>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d00e      	beq.n	8004082 <HAL_DMA_IRQHandler+0xd2>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a4b      	ldr	r2, [pc, #300]	; (8004198 <HAL_DMA_IRQHandler+0x1e8>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d009      	beq.n	8004082 <HAL_DMA_IRQHandler+0xd2>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a4a      	ldr	r2, [pc, #296]	; (800419c <HAL_DMA_IRQHandler+0x1ec>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d004      	beq.n	8004082 <HAL_DMA_IRQHandler+0xd2>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a48      	ldr	r2, [pc, #288]	; (80041a0 <HAL_DMA_IRQHandler+0x1f0>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d101      	bne.n	8004086 <HAL_DMA_IRQHandler+0xd6>
 8004082:	2301      	movs	r3, #1
 8004084:	e000      	b.n	8004088 <HAL_DMA_IRQHandler+0xd8>
 8004086:	2300      	movs	r3, #0
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 842b 	beq.w	80048e4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004092:	f003 031f 	and.w	r3, r3, #31
 8004096:	2208      	movs	r2, #8
 8004098:	409a      	lsls	r2, r3
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	4013      	ands	r3, r2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 80a2 	beq.w	80041e8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a2e      	ldr	r2, [pc, #184]	; (8004164 <HAL_DMA_IRQHandler+0x1b4>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d04a      	beq.n	8004144 <HAL_DMA_IRQHandler+0x194>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a2d      	ldr	r2, [pc, #180]	; (8004168 <HAL_DMA_IRQHandler+0x1b8>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d045      	beq.n	8004144 <HAL_DMA_IRQHandler+0x194>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a2b      	ldr	r2, [pc, #172]	; (800416c <HAL_DMA_IRQHandler+0x1bc>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d040      	beq.n	8004144 <HAL_DMA_IRQHandler+0x194>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a2a      	ldr	r2, [pc, #168]	; (8004170 <HAL_DMA_IRQHandler+0x1c0>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d03b      	beq.n	8004144 <HAL_DMA_IRQHandler+0x194>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a28      	ldr	r2, [pc, #160]	; (8004174 <HAL_DMA_IRQHandler+0x1c4>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d036      	beq.n	8004144 <HAL_DMA_IRQHandler+0x194>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a27      	ldr	r2, [pc, #156]	; (8004178 <HAL_DMA_IRQHandler+0x1c8>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d031      	beq.n	8004144 <HAL_DMA_IRQHandler+0x194>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a25      	ldr	r2, [pc, #148]	; (800417c <HAL_DMA_IRQHandler+0x1cc>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d02c      	beq.n	8004144 <HAL_DMA_IRQHandler+0x194>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a24      	ldr	r2, [pc, #144]	; (8004180 <HAL_DMA_IRQHandler+0x1d0>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d027      	beq.n	8004144 <HAL_DMA_IRQHandler+0x194>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a22      	ldr	r2, [pc, #136]	; (8004184 <HAL_DMA_IRQHandler+0x1d4>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d022      	beq.n	8004144 <HAL_DMA_IRQHandler+0x194>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a21      	ldr	r2, [pc, #132]	; (8004188 <HAL_DMA_IRQHandler+0x1d8>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d01d      	beq.n	8004144 <HAL_DMA_IRQHandler+0x194>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a1f      	ldr	r2, [pc, #124]	; (800418c <HAL_DMA_IRQHandler+0x1dc>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d018      	beq.n	8004144 <HAL_DMA_IRQHandler+0x194>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a1e      	ldr	r2, [pc, #120]	; (8004190 <HAL_DMA_IRQHandler+0x1e0>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d013      	beq.n	8004144 <HAL_DMA_IRQHandler+0x194>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a1c      	ldr	r2, [pc, #112]	; (8004194 <HAL_DMA_IRQHandler+0x1e4>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d00e      	beq.n	8004144 <HAL_DMA_IRQHandler+0x194>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a1b      	ldr	r2, [pc, #108]	; (8004198 <HAL_DMA_IRQHandler+0x1e8>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d009      	beq.n	8004144 <HAL_DMA_IRQHandler+0x194>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a19      	ldr	r2, [pc, #100]	; (800419c <HAL_DMA_IRQHandler+0x1ec>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d004      	beq.n	8004144 <HAL_DMA_IRQHandler+0x194>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a18      	ldr	r2, [pc, #96]	; (80041a0 <HAL_DMA_IRQHandler+0x1f0>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d12f      	bne.n	80041a4 <HAL_DMA_IRQHandler+0x1f4>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0304 	and.w	r3, r3, #4
 800414e:	2b00      	cmp	r3, #0
 8004150:	bf14      	ite	ne
 8004152:	2301      	movne	r3, #1
 8004154:	2300      	moveq	r3, #0
 8004156:	b2db      	uxtb	r3, r3
 8004158:	e02e      	b.n	80041b8 <HAL_DMA_IRQHandler+0x208>
 800415a:	bf00      	nop
 800415c:	24000000 	.word	0x24000000
 8004160:	1b4e81b5 	.word	0x1b4e81b5
 8004164:	40020010 	.word	0x40020010
 8004168:	40020028 	.word	0x40020028
 800416c:	40020040 	.word	0x40020040
 8004170:	40020058 	.word	0x40020058
 8004174:	40020070 	.word	0x40020070
 8004178:	40020088 	.word	0x40020088
 800417c:	400200a0 	.word	0x400200a0
 8004180:	400200b8 	.word	0x400200b8
 8004184:	40020410 	.word	0x40020410
 8004188:	40020428 	.word	0x40020428
 800418c:	40020440 	.word	0x40020440
 8004190:	40020458 	.word	0x40020458
 8004194:	40020470 	.word	0x40020470
 8004198:	40020488 	.word	0x40020488
 800419c:	400204a0 	.word	0x400204a0
 80041a0:	400204b8 	.word	0x400204b8
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0308 	and.w	r3, r3, #8
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	bf14      	ite	ne
 80041b2:	2301      	movne	r3, #1
 80041b4:	2300      	moveq	r3, #0
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d015      	beq.n	80041e8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0204 	bic.w	r2, r2, #4
 80041ca:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d0:	f003 031f 	and.w	r3, r3, #31
 80041d4:	2208      	movs	r2, #8
 80041d6:	409a      	lsls	r2, r3
 80041d8:	6a3b      	ldr	r3, [r7, #32]
 80041da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e0:	f043 0201 	orr.w	r2, r3, #1
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ec:	f003 031f 	and.w	r3, r3, #31
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	fa22 f303 	lsr.w	r3, r2, r3
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d06e      	beq.n	80042dc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a69      	ldr	r2, [pc, #420]	; (80043a8 <HAL_DMA_IRQHandler+0x3f8>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d04a      	beq.n	800429e <HAL_DMA_IRQHandler+0x2ee>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a67      	ldr	r2, [pc, #412]	; (80043ac <HAL_DMA_IRQHandler+0x3fc>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d045      	beq.n	800429e <HAL_DMA_IRQHandler+0x2ee>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a66      	ldr	r2, [pc, #408]	; (80043b0 <HAL_DMA_IRQHandler+0x400>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d040      	beq.n	800429e <HAL_DMA_IRQHandler+0x2ee>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a64      	ldr	r2, [pc, #400]	; (80043b4 <HAL_DMA_IRQHandler+0x404>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d03b      	beq.n	800429e <HAL_DMA_IRQHandler+0x2ee>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a63      	ldr	r2, [pc, #396]	; (80043b8 <HAL_DMA_IRQHandler+0x408>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d036      	beq.n	800429e <HAL_DMA_IRQHandler+0x2ee>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a61      	ldr	r2, [pc, #388]	; (80043bc <HAL_DMA_IRQHandler+0x40c>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d031      	beq.n	800429e <HAL_DMA_IRQHandler+0x2ee>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a60      	ldr	r2, [pc, #384]	; (80043c0 <HAL_DMA_IRQHandler+0x410>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d02c      	beq.n	800429e <HAL_DMA_IRQHandler+0x2ee>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a5e      	ldr	r2, [pc, #376]	; (80043c4 <HAL_DMA_IRQHandler+0x414>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d027      	beq.n	800429e <HAL_DMA_IRQHandler+0x2ee>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a5d      	ldr	r2, [pc, #372]	; (80043c8 <HAL_DMA_IRQHandler+0x418>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d022      	beq.n	800429e <HAL_DMA_IRQHandler+0x2ee>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a5b      	ldr	r2, [pc, #364]	; (80043cc <HAL_DMA_IRQHandler+0x41c>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d01d      	beq.n	800429e <HAL_DMA_IRQHandler+0x2ee>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a5a      	ldr	r2, [pc, #360]	; (80043d0 <HAL_DMA_IRQHandler+0x420>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d018      	beq.n	800429e <HAL_DMA_IRQHandler+0x2ee>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a58      	ldr	r2, [pc, #352]	; (80043d4 <HAL_DMA_IRQHandler+0x424>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d013      	beq.n	800429e <HAL_DMA_IRQHandler+0x2ee>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a57      	ldr	r2, [pc, #348]	; (80043d8 <HAL_DMA_IRQHandler+0x428>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d00e      	beq.n	800429e <HAL_DMA_IRQHandler+0x2ee>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a55      	ldr	r2, [pc, #340]	; (80043dc <HAL_DMA_IRQHandler+0x42c>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d009      	beq.n	800429e <HAL_DMA_IRQHandler+0x2ee>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a54      	ldr	r2, [pc, #336]	; (80043e0 <HAL_DMA_IRQHandler+0x430>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d004      	beq.n	800429e <HAL_DMA_IRQHandler+0x2ee>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a52      	ldr	r2, [pc, #328]	; (80043e4 <HAL_DMA_IRQHandler+0x434>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d10a      	bne.n	80042b4 <HAL_DMA_IRQHandler+0x304>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	bf14      	ite	ne
 80042ac:	2301      	movne	r3, #1
 80042ae:	2300      	moveq	r3, #0
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	e003      	b.n	80042bc <HAL_DMA_IRQHandler+0x30c>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2300      	movs	r3, #0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00d      	beq.n	80042dc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c4:	f003 031f 	and.w	r3, r3, #31
 80042c8:	2201      	movs	r2, #1
 80042ca:	409a      	lsls	r2, r3
 80042cc:	6a3b      	ldr	r3, [r7, #32]
 80042ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d4:	f043 0202 	orr.w	r2, r3, #2
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e0:	f003 031f 	and.w	r3, r3, #31
 80042e4:	2204      	movs	r2, #4
 80042e6:	409a      	lsls	r2, r3
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	4013      	ands	r3, r2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 808f 	beq.w	8004410 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a2c      	ldr	r2, [pc, #176]	; (80043a8 <HAL_DMA_IRQHandler+0x3f8>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d04a      	beq.n	8004392 <HAL_DMA_IRQHandler+0x3e2>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a2a      	ldr	r2, [pc, #168]	; (80043ac <HAL_DMA_IRQHandler+0x3fc>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d045      	beq.n	8004392 <HAL_DMA_IRQHandler+0x3e2>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a29      	ldr	r2, [pc, #164]	; (80043b0 <HAL_DMA_IRQHandler+0x400>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d040      	beq.n	8004392 <HAL_DMA_IRQHandler+0x3e2>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a27      	ldr	r2, [pc, #156]	; (80043b4 <HAL_DMA_IRQHandler+0x404>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d03b      	beq.n	8004392 <HAL_DMA_IRQHandler+0x3e2>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a26      	ldr	r2, [pc, #152]	; (80043b8 <HAL_DMA_IRQHandler+0x408>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d036      	beq.n	8004392 <HAL_DMA_IRQHandler+0x3e2>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a24      	ldr	r2, [pc, #144]	; (80043bc <HAL_DMA_IRQHandler+0x40c>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d031      	beq.n	8004392 <HAL_DMA_IRQHandler+0x3e2>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a23      	ldr	r2, [pc, #140]	; (80043c0 <HAL_DMA_IRQHandler+0x410>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d02c      	beq.n	8004392 <HAL_DMA_IRQHandler+0x3e2>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a21      	ldr	r2, [pc, #132]	; (80043c4 <HAL_DMA_IRQHandler+0x414>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d027      	beq.n	8004392 <HAL_DMA_IRQHandler+0x3e2>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a20      	ldr	r2, [pc, #128]	; (80043c8 <HAL_DMA_IRQHandler+0x418>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d022      	beq.n	8004392 <HAL_DMA_IRQHandler+0x3e2>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a1e      	ldr	r2, [pc, #120]	; (80043cc <HAL_DMA_IRQHandler+0x41c>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d01d      	beq.n	8004392 <HAL_DMA_IRQHandler+0x3e2>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a1d      	ldr	r2, [pc, #116]	; (80043d0 <HAL_DMA_IRQHandler+0x420>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d018      	beq.n	8004392 <HAL_DMA_IRQHandler+0x3e2>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a1b      	ldr	r2, [pc, #108]	; (80043d4 <HAL_DMA_IRQHandler+0x424>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d013      	beq.n	8004392 <HAL_DMA_IRQHandler+0x3e2>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a1a      	ldr	r2, [pc, #104]	; (80043d8 <HAL_DMA_IRQHandler+0x428>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d00e      	beq.n	8004392 <HAL_DMA_IRQHandler+0x3e2>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a18      	ldr	r2, [pc, #96]	; (80043dc <HAL_DMA_IRQHandler+0x42c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d009      	beq.n	8004392 <HAL_DMA_IRQHandler+0x3e2>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a17      	ldr	r2, [pc, #92]	; (80043e0 <HAL_DMA_IRQHandler+0x430>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d004      	beq.n	8004392 <HAL_DMA_IRQHandler+0x3e2>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a15      	ldr	r2, [pc, #84]	; (80043e4 <HAL_DMA_IRQHandler+0x434>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d12a      	bne.n	80043e8 <HAL_DMA_IRQHandler+0x438>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b00      	cmp	r3, #0
 800439e:	bf14      	ite	ne
 80043a0:	2301      	movne	r3, #1
 80043a2:	2300      	moveq	r3, #0
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	e023      	b.n	80043f0 <HAL_DMA_IRQHandler+0x440>
 80043a8:	40020010 	.word	0x40020010
 80043ac:	40020028 	.word	0x40020028
 80043b0:	40020040 	.word	0x40020040
 80043b4:	40020058 	.word	0x40020058
 80043b8:	40020070 	.word	0x40020070
 80043bc:	40020088 	.word	0x40020088
 80043c0:	400200a0 	.word	0x400200a0
 80043c4:	400200b8 	.word	0x400200b8
 80043c8:	40020410 	.word	0x40020410
 80043cc:	40020428 	.word	0x40020428
 80043d0:	40020440 	.word	0x40020440
 80043d4:	40020458 	.word	0x40020458
 80043d8:	40020470 	.word	0x40020470
 80043dc:	40020488 	.word	0x40020488
 80043e0:	400204a0 	.word	0x400204a0
 80043e4:	400204b8 	.word	0x400204b8
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2300      	movs	r3, #0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00d      	beq.n	8004410 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f8:	f003 031f 	and.w	r3, r3, #31
 80043fc:	2204      	movs	r2, #4
 80043fe:	409a      	lsls	r2, r3
 8004400:	6a3b      	ldr	r3, [r7, #32]
 8004402:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004408:	f043 0204 	orr.w	r2, r3, #4
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004414:	f003 031f 	and.w	r3, r3, #31
 8004418:	2210      	movs	r2, #16
 800441a:	409a      	lsls	r2, r3
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	4013      	ands	r3, r2
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 80a6 	beq.w	8004572 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a85      	ldr	r2, [pc, #532]	; (8004640 <HAL_DMA_IRQHandler+0x690>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d04a      	beq.n	80044c6 <HAL_DMA_IRQHandler+0x516>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a83      	ldr	r2, [pc, #524]	; (8004644 <HAL_DMA_IRQHandler+0x694>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d045      	beq.n	80044c6 <HAL_DMA_IRQHandler+0x516>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a82      	ldr	r2, [pc, #520]	; (8004648 <HAL_DMA_IRQHandler+0x698>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d040      	beq.n	80044c6 <HAL_DMA_IRQHandler+0x516>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a80      	ldr	r2, [pc, #512]	; (800464c <HAL_DMA_IRQHandler+0x69c>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d03b      	beq.n	80044c6 <HAL_DMA_IRQHandler+0x516>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a7f      	ldr	r2, [pc, #508]	; (8004650 <HAL_DMA_IRQHandler+0x6a0>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d036      	beq.n	80044c6 <HAL_DMA_IRQHandler+0x516>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a7d      	ldr	r2, [pc, #500]	; (8004654 <HAL_DMA_IRQHandler+0x6a4>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d031      	beq.n	80044c6 <HAL_DMA_IRQHandler+0x516>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a7c      	ldr	r2, [pc, #496]	; (8004658 <HAL_DMA_IRQHandler+0x6a8>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d02c      	beq.n	80044c6 <HAL_DMA_IRQHandler+0x516>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a7a      	ldr	r2, [pc, #488]	; (800465c <HAL_DMA_IRQHandler+0x6ac>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d027      	beq.n	80044c6 <HAL_DMA_IRQHandler+0x516>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a79      	ldr	r2, [pc, #484]	; (8004660 <HAL_DMA_IRQHandler+0x6b0>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d022      	beq.n	80044c6 <HAL_DMA_IRQHandler+0x516>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a77      	ldr	r2, [pc, #476]	; (8004664 <HAL_DMA_IRQHandler+0x6b4>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d01d      	beq.n	80044c6 <HAL_DMA_IRQHandler+0x516>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a76      	ldr	r2, [pc, #472]	; (8004668 <HAL_DMA_IRQHandler+0x6b8>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d018      	beq.n	80044c6 <HAL_DMA_IRQHandler+0x516>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a74      	ldr	r2, [pc, #464]	; (800466c <HAL_DMA_IRQHandler+0x6bc>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d013      	beq.n	80044c6 <HAL_DMA_IRQHandler+0x516>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a73      	ldr	r2, [pc, #460]	; (8004670 <HAL_DMA_IRQHandler+0x6c0>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d00e      	beq.n	80044c6 <HAL_DMA_IRQHandler+0x516>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a71      	ldr	r2, [pc, #452]	; (8004674 <HAL_DMA_IRQHandler+0x6c4>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d009      	beq.n	80044c6 <HAL_DMA_IRQHandler+0x516>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a70      	ldr	r2, [pc, #448]	; (8004678 <HAL_DMA_IRQHandler+0x6c8>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d004      	beq.n	80044c6 <HAL_DMA_IRQHandler+0x516>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a6e      	ldr	r2, [pc, #440]	; (800467c <HAL_DMA_IRQHandler+0x6cc>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d10a      	bne.n	80044dc <HAL_DMA_IRQHandler+0x52c>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0308 	and.w	r3, r3, #8
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	bf14      	ite	ne
 80044d4:	2301      	movne	r3, #1
 80044d6:	2300      	moveq	r3, #0
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	e009      	b.n	80044f0 <HAL_DMA_IRQHandler+0x540>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0304 	and.w	r3, r3, #4
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	bf14      	ite	ne
 80044ea:	2301      	movne	r3, #1
 80044ec:	2300      	moveq	r3, #0
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d03e      	beq.n	8004572 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f8:	f003 031f 	and.w	r3, r3, #31
 80044fc:	2210      	movs	r2, #16
 80044fe:	409a      	lsls	r2, r3
 8004500:	6a3b      	ldr	r3, [r7, #32]
 8004502:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d018      	beq.n	8004544 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d108      	bne.n	8004532 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004524:	2b00      	cmp	r3, #0
 8004526:	d024      	beq.n	8004572 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	4798      	blx	r3
 8004530:	e01f      	b.n	8004572 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004536:	2b00      	cmp	r3, #0
 8004538:	d01b      	beq.n	8004572 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	4798      	blx	r3
 8004542:	e016      	b.n	8004572 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800454e:	2b00      	cmp	r3, #0
 8004550:	d107      	bne.n	8004562 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 0208 	bic.w	r2, r2, #8
 8004560:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004576:	f003 031f 	and.w	r3, r3, #31
 800457a:	2220      	movs	r2, #32
 800457c:	409a      	lsls	r2, r3
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	4013      	ands	r3, r2
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 8110 	beq.w	80047a8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a2c      	ldr	r2, [pc, #176]	; (8004640 <HAL_DMA_IRQHandler+0x690>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d04a      	beq.n	8004628 <HAL_DMA_IRQHandler+0x678>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a2b      	ldr	r2, [pc, #172]	; (8004644 <HAL_DMA_IRQHandler+0x694>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d045      	beq.n	8004628 <HAL_DMA_IRQHandler+0x678>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a29      	ldr	r2, [pc, #164]	; (8004648 <HAL_DMA_IRQHandler+0x698>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d040      	beq.n	8004628 <HAL_DMA_IRQHandler+0x678>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a28      	ldr	r2, [pc, #160]	; (800464c <HAL_DMA_IRQHandler+0x69c>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d03b      	beq.n	8004628 <HAL_DMA_IRQHandler+0x678>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a26      	ldr	r2, [pc, #152]	; (8004650 <HAL_DMA_IRQHandler+0x6a0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d036      	beq.n	8004628 <HAL_DMA_IRQHandler+0x678>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a25      	ldr	r2, [pc, #148]	; (8004654 <HAL_DMA_IRQHandler+0x6a4>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d031      	beq.n	8004628 <HAL_DMA_IRQHandler+0x678>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a23      	ldr	r2, [pc, #140]	; (8004658 <HAL_DMA_IRQHandler+0x6a8>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d02c      	beq.n	8004628 <HAL_DMA_IRQHandler+0x678>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a22      	ldr	r2, [pc, #136]	; (800465c <HAL_DMA_IRQHandler+0x6ac>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d027      	beq.n	8004628 <HAL_DMA_IRQHandler+0x678>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a20      	ldr	r2, [pc, #128]	; (8004660 <HAL_DMA_IRQHandler+0x6b0>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d022      	beq.n	8004628 <HAL_DMA_IRQHandler+0x678>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a1f      	ldr	r2, [pc, #124]	; (8004664 <HAL_DMA_IRQHandler+0x6b4>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d01d      	beq.n	8004628 <HAL_DMA_IRQHandler+0x678>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a1d      	ldr	r2, [pc, #116]	; (8004668 <HAL_DMA_IRQHandler+0x6b8>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d018      	beq.n	8004628 <HAL_DMA_IRQHandler+0x678>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a1c      	ldr	r2, [pc, #112]	; (800466c <HAL_DMA_IRQHandler+0x6bc>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d013      	beq.n	8004628 <HAL_DMA_IRQHandler+0x678>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a1a      	ldr	r2, [pc, #104]	; (8004670 <HAL_DMA_IRQHandler+0x6c0>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d00e      	beq.n	8004628 <HAL_DMA_IRQHandler+0x678>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a19      	ldr	r2, [pc, #100]	; (8004674 <HAL_DMA_IRQHandler+0x6c4>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d009      	beq.n	8004628 <HAL_DMA_IRQHandler+0x678>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a17      	ldr	r2, [pc, #92]	; (8004678 <HAL_DMA_IRQHandler+0x6c8>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d004      	beq.n	8004628 <HAL_DMA_IRQHandler+0x678>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a16      	ldr	r2, [pc, #88]	; (800467c <HAL_DMA_IRQHandler+0x6cc>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d12b      	bne.n	8004680 <HAL_DMA_IRQHandler+0x6d0>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0310 	and.w	r3, r3, #16
 8004632:	2b00      	cmp	r3, #0
 8004634:	bf14      	ite	ne
 8004636:	2301      	movne	r3, #1
 8004638:	2300      	moveq	r3, #0
 800463a:	b2db      	uxtb	r3, r3
 800463c:	e02a      	b.n	8004694 <HAL_DMA_IRQHandler+0x6e4>
 800463e:	bf00      	nop
 8004640:	40020010 	.word	0x40020010
 8004644:	40020028 	.word	0x40020028
 8004648:	40020040 	.word	0x40020040
 800464c:	40020058 	.word	0x40020058
 8004650:	40020070 	.word	0x40020070
 8004654:	40020088 	.word	0x40020088
 8004658:	400200a0 	.word	0x400200a0
 800465c:	400200b8 	.word	0x400200b8
 8004660:	40020410 	.word	0x40020410
 8004664:	40020428 	.word	0x40020428
 8004668:	40020440 	.word	0x40020440
 800466c:	40020458 	.word	0x40020458
 8004670:	40020470 	.word	0x40020470
 8004674:	40020488 	.word	0x40020488
 8004678:	400204a0 	.word	0x400204a0
 800467c:	400204b8 	.word	0x400204b8
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	bf14      	ite	ne
 800468e:	2301      	movne	r3, #1
 8004690:	2300      	moveq	r3, #0
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 8087 	beq.w	80047a8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800469e:	f003 031f 	and.w	r3, r3, #31
 80046a2:	2220      	movs	r2, #32
 80046a4:	409a      	lsls	r2, r3
 80046a6:	6a3b      	ldr	r3, [r7, #32]
 80046a8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	d139      	bne.n	800472a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 0216 	bic.w	r2, r2, #22
 80046c4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	695a      	ldr	r2, [r3, #20]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046d4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d103      	bne.n	80046e6 <HAL_DMA_IRQHandler+0x736>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d007      	beq.n	80046f6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 0208 	bic.w	r2, r2, #8
 80046f4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046fa:	f003 031f 	and.w	r3, r3, #31
 80046fe:	223f      	movs	r2, #63	; 0x3f
 8004700:	409a      	lsls	r2, r3
 8004702:	6a3b      	ldr	r3, [r7, #32]
 8004704:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800471a:	2b00      	cmp	r3, #0
 800471c:	f000 834a 	beq.w	8004db4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	4798      	blx	r3
          }
          return;
 8004728:	e344      	b.n	8004db4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d018      	beq.n	800476a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d108      	bne.n	8004758 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474a:	2b00      	cmp	r3, #0
 800474c:	d02c      	beq.n	80047a8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	4798      	blx	r3
 8004756:	e027      	b.n	80047a8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800475c:	2b00      	cmp	r3, #0
 800475e:	d023      	beq.n	80047a8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	4798      	blx	r3
 8004768:	e01e      	b.n	80047a8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10f      	bne.n	8004798 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 0210 	bic.w	r2, r2, #16
 8004786:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800479c:	2b00      	cmp	r3, #0
 800479e:	d003      	beq.n	80047a8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 8306 	beq.w	8004dbe <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f000 8088 	beq.w	80048d0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2204      	movs	r2, #4
 80047c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a7a      	ldr	r2, [pc, #488]	; (80049b8 <HAL_DMA_IRQHandler+0xa08>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d04a      	beq.n	8004868 <HAL_DMA_IRQHandler+0x8b8>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a79      	ldr	r2, [pc, #484]	; (80049bc <HAL_DMA_IRQHandler+0xa0c>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d045      	beq.n	8004868 <HAL_DMA_IRQHandler+0x8b8>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a77      	ldr	r2, [pc, #476]	; (80049c0 <HAL_DMA_IRQHandler+0xa10>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d040      	beq.n	8004868 <HAL_DMA_IRQHandler+0x8b8>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a76      	ldr	r2, [pc, #472]	; (80049c4 <HAL_DMA_IRQHandler+0xa14>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d03b      	beq.n	8004868 <HAL_DMA_IRQHandler+0x8b8>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a74      	ldr	r2, [pc, #464]	; (80049c8 <HAL_DMA_IRQHandler+0xa18>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d036      	beq.n	8004868 <HAL_DMA_IRQHandler+0x8b8>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a73      	ldr	r2, [pc, #460]	; (80049cc <HAL_DMA_IRQHandler+0xa1c>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d031      	beq.n	8004868 <HAL_DMA_IRQHandler+0x8b8>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a71      	ldr	r2, [pc, #452]	; (80049d0 <HAL_DMA_IRQHandler+0xa20>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d02c      	beq.n	8004868 <HAL_DMA_IRQHandler+0x8b8>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a70      	ldr	r2, [pc, #448]	; (80049d4 <HAL_DMA_IRQHandler+0xa24>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d027      	beq.n	8004868 <HAL_DMA_IRQHandler+0x8b8>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a6e      	ldr	r2, [pc, #440]	; (80049d8 <HAL_DMA_IRQHandler+0xa28>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d022      	beq.n	8004868 <HAL_DMA_IRQHandler+0x8b8>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a6d      	ldr	r2, [pc, #436]	; (80049dc <HAL_DMA_IRQHandler+0xa2c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d01d      	beq.n	8004868 <HAL_DMA_IRQHandler+0x8b8>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a6b      	ldr	r2, [pc, #428]	; (80049e0 <HAL_DMA_IRQHandler+0xa30>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d018      	beq.n	8004868 <HAL_DMA_IRQHandler+0x8b8>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a6a      	ldr	r2, [pc, #424]	; (80049e4 <HAL_DMA_IRQHandler+0xa34>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d013      	beq.n	8004868 <HAL_DMA_IRQHandler+0x8b8>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a68      	ldr	r2, [pc, #416]	; (80049e8 <HAL_DMA_IRQHandler+0xa38>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d00e      	beq.n	8004868 <HAL_DMA_IRQHandler+0x8b8>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a67      	ldr	r2, [pc, #412]	; (80049ec <HAL_DMA_IRQHandler+0xa3c>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d009      	beq.n	8004868 <HAL_DMA_IRQHandler+0x8b8>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a65      	ldr	r2, [pc, #404]	; (80049f0 <HAL_DMA_IRQHandler+0xa40>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d004      	beq.n	8004868 <HAL_DMA_IRQHandler+0x8b8>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a64      	ldr	r2, [pc, #400]	; (80049f4 <HAL_DMA_IRQHandler+0xa44>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d108      	bne.n	800487a <HAL_DMA_IRQHandler+0x8ca>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 0201 	bic.w	r2, r2, #1
 8004876:	601a      	str	r2, [r3, #0]
 8004878:	e007      	b.n	800488a <HAL_DMA_IRQHandler+0x8da>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 0201 	bic.w	r2, r2, #1
 8004888:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	3301      	adds	r3, #1
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004892:	429a      	cmp	r2, r3
 8004894:	d307      	bcc.n	80048a6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1f2      	bne.n	800488a <HAL_DMA_IRQHandler+0x8da>
 80048a4:	e000      	b.n	80048a8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80048a6:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d004      	beq.n	80048c8 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2203      	movs	r2, #3
 80048c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80048c6:	e003      	b.n	80048d0 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f000 8272 	beq.w	8004dbe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	4798      	blx	r3
 80048e2:	e26c      	b.n	8004dbe <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a43      	ldr	r2, [pc, #268]	; (80049f8 <HAL_DMA_IRQHandler+0xa48>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d022      	beq.n	8004934 <HAL_DMA_IRQHandler+0x984>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a42      	ldr	r2, [pc, #264]	; (80049fc <HAL_DMA_IRQHandler+0xa4c>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d01d      	beq.n	8004934 <HAL_DMA_IRQHandler+0x984>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a40      	ldr	r2, [pc, #256]	; (8004a00 <HAL_DMA_IRQHandler+0xa50>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d018      	beq.n	8004934 <HAL_DMA_IRQHandler+0x984>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a3f      	ldr	r2, [pc, #252]	; (8004a04 <HAL_DMA_IRQHandler+0xa54>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d013      	beq.n	8004934 <HAL_DMA_IRQHandler+0x984>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a3d      	ldr	r2, [pc, #244]	; (8004a08 <HAL_DMA_IRQHandler+0xa58>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d00e      	beq.n	8004934 <HAL_DMA_IRQHandler+0x984>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a3c      	ldr	r2, [pc, #240]	; (8004a0c <HAL_DMA_IRQHandler+0xa5c>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d009      	beq.n	8004934 <HAL_DMA_IRQHandler+0x984>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a3a      	ldr	r2, [pc, #232]	; (8004a10 <HAL_DMA_IRQHandler+0xa60>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d004      	beq.n	8004934 <HAL_DMA_IRQHandler+0x984>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a39      	ldr	r2, [pc, #228]	; (8004a14 <HAL_DMA_IRQHandler+0xa64>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d101      	bne.n	8004938 <HAL_DMA_IRQHandler+0x988>
 8004934:	2301      	movs	r3, #1
 8004936:	e000      	b.n	800493a <HAL_DMA_IRQHandler+0x98a>
 8004938:	2300      	movs	r3, #0
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 823f 	beq.w	8004dbe <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800494c:	f003 031f 	and.w	r3, r3, #31
 8004950:	2204      	movs	r2, #4
 8004952:	409a      	lsls	r2, r3
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	4013      	ands	r3, r2
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 80cd 	beq.w	8004af8 <HAL_DMA_IRQHandler+0xb48>
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 80c7 	beq.w	8004af8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800496e:	f003 031f 	and.w	r3, r3, #31
 8004972:	2204      	movs	r2, #4
 8004974:	409a      	lsls	r2, r3
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d049      	beq.n	8004a18 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d109      	bne.n	80049a2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004992:	2b00      	cmp	r3, #0
 8004994:	f000 8210 	beq.w	8004db8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049a0:	e20a      	b.n	8004db8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f000 8206 	beq.w	8004db8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049b4:	e200      	b.n	8004db8 <HAL_DMA_IRQHandler+0xe08>
 80049b6:	bf00      	nop
 80049b8:	40020010 	.word	0x40020010
 80049bc:	40020028 	.word	0x40020028
 80049c0:	40020040 	.word	0x40020040
 80049c4:	40020058 	.word	0x40020058
 80049c8:	40020070 	.word	0x40020070
 80049cc:	40020088 	.word	0x40020088
 80049d0:	400200a0 	.word	0x400200a0
 80049d4:	400200b8 	.word	0x400200b8
 80049d8:	40020410 	.word	0x40020410
 80049dc:	40020428 	.word	0x40020428
 80049e0:	40020440 	.word	0x40020440
 80049e4:	40020458 	.word	0x40020458
 80049e8:	40020470 	.word	0x40020470
 80049ec:	40020488 	.word	0x40020488
 80049f0:	400204a0 	.word	0x400204a0
 80049f4:	400204b8 	.word	0x400204b8
 80049f8:	58025408 	.word	0x58025408
 80049fc:	5802541c 	.word	0x5802541c
 8004a00:	58025430 	.word	0x58025430
 8004a04:	58025444 	.word	0x58025444
 8004a08:	58025458 	.word	0x58025458
 8004a0c:	5802546c 	.word	0x5802546c
 8004a10:	58025480 	.word	0x58025480
 8004a14:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	f003 0320 	and.w	r3, r3, #32
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d160      	bne.n	8004ae4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a8c      	ldr	r2, [pc, #560]	; (8004c58 <HAL_DMA_IRQHandler+0xca8>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d04a      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0xb12>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a8a      	ldr	r2, [pc, #552]	; (8004c5c <HAL_DMA_IRQHandler+0xcac>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d045      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0xb12>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a89      	ldr	r2, [pc, #548]	; (8004c60 <HAL_DMA_IRQHandler+0xcb0>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d040      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0xb12>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a87      	ldr	r2, [pc, #540]	; (8004c64 <HAL_DMA_IRQHandler+0xcb4>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d03b      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0xb12>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a86      	ldr	r2, [pc, #536]	; (8004c68 <HAL_DMA_IRQHandler+0xcb8>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d036      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0xb12>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a84      	ldr	r2, [pc, #528]	; (8004c6c <HAL_DMA_IRQHandler+0xcbc>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d031      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0xb12>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a83      	ldr	r2, [pc, #524]	; (8004c70 <HAL_DMA_IRQHandler+0xcc0>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d02c      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0xb12>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a81      	ldr	r2, [pc, #516]	; (8004c74 <HAL_DMA_IRQHandler+0xcc4>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d027      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0xb12>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a80      	ldr	r2, [pc, #512]	; (8004c78 <HAL_DMA_IRQHandler+0xcc8>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d022      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0xb12>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a7e      	ldr	r2, [pc, #504]	; (8004c7c <HAL_DMA_IRQHandler+0xccc>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d01d      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0xb12>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a7d      	ldr	r2, [pc, #500]	; (8004c80 <HAL_DMA_IRQHandler+0xcd0>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d018      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0xb12>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a7b      	ldr	r2, [pc, #492]	; (8004c84 <HAL_DMA_IRQHandler+0xcd4>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d013      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0xb12>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a7a      	ldr	r2, [pc, #488]	; (8004c88 <HAL_DMA_IRQHandler+0xcd8>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d00e      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0xb12>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a78      	ldr	r2, [pc, #480]	; (8004c8c <HAL_DMA_IRQHandler+0xcdc>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d009      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0xb12>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a77      	ldr	r2, [pc, #476]	; (8004c90 <HAL_DMA_IRQHandler+0xce0>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d004      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0xb12>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a75      	ldr	r2, [pc, #468]	; (8004c94 <HAL_DMA_IRQHandler+0xce4>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d108      	bne.n	8004ad4 <HAL_DMA_IRQHandler+0xb24>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 0208 	bic.w	r2, r2, #8
 8004ad0:	601a      	str	r2, [r3, #0]
 8004ad2:	e007      	b.n	8004ae4 <HAL_DMA_IRQHandler+0xb34>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f022 0204 	bic.w	r2, r2, #4
 8004ae2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 8165 	beq.w	8004db8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004af6:	e15f      	b.n	8004db8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004afc:	f003 031f 	and.w	r3, r3, #31
 8004b00:	2202      	movs	r2, #2
 8004b02:	409a      	lsls	r2, r3
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	4013      	ands	r3, r2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 80c5 	beq.w	8004c98 <HAL_DMA_IRQHandler+0xce8>
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 80bf 	beq.w	8004c98 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b1e:	f003 031f 	and.w	r3, r3, #31
 8004b22:	2202      	movs	r2, #2
 8004b24:	409a      	lsls	r2, r3
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d018      	beq.n	8004b66 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d109      	bne.n	8004b52 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f000 813a 	beq.w	8004dbc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b50:	e134      	b.n	8004dbc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f000 8130 	beq.w	8004dbc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b64:	e12a      	b.n	8004dbc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	f003 0320 	and.w	r3, r3, #32
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d168      	bne.n	8004c42 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a38      	ldr	r2, [pc, #224]	; (8004c58 <HAL_DMA_IRQHandler+0xca8>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d04a      	beq.n	8004c10 <HAL_DMA_IRQHandler+0xc60>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a37      	ldr	r2, [pc, #220]	; (8004c5c <HAL_DMA_IRQHandler+0xcac>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d045      	beq.n	8004c10 <HAL_DMA_IRQHandler+0xc60>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a35      	ldr	r2, [pc, #212]	; (8004c60 <HAL_DMA_IRQHandler+0xcb0>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d040      	beq.n	8004c10 <HAL_DMA_IRQHandler+0xc60>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a34      	ldr	r2, [pc, #208]	; (8004c64 <HAL_DMA_IRQHandler+0xcb4>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d03b      	beq.n	8004c10 <HAL_DMA_IRQHandler+0xc60>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a32      	ldr	r2, [pc, #200]	; (8004c68 <HAL_DMA_IRQHandler+0xcb8>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d036      	beq.n	8004c10 <HAL_DMA_IRQHandler+0xc60>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a31      	ldr	r2, [pc, #196]	; (8004c6c <HAL_DMA_IRQHandler+0xcbc>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d031      	beq.n	8004c10 <HAL_DMA_IRQHandler+0xc60>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a2f      	ldr	r2, [pc, #188]	; (8004c70 <HAL_DMA_IRQHandler+0xcc0>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d02c      	beq.n	8004c10 <HAL_DMA_IRQHandler+0xc60>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a2e      	ldr	r2, [pc, #184]	; (8004c74 <HAL_DMA_IRQHandler+0xcc4>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d027      	beq.n	8004c10 <HAL_DMA_IRQHandler+0xc60>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a2c      	ldr	r2, [pc, #176]	; (8004c78 <HAL_DMA_IRQHandler+0xcc8>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d022      	beq.n	8004c10 <HAL_DMA_IRQHandler+0xc60>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a2b      	ldr	r2, [pc, #172]	; (8004c7c <HAL_DMA_IRQHandler+0xccc>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d01d      	beq.n	8004c10 <HAL_DMA_IRQHandler+0xc60>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a29      	ldr	r2, [pc, #164]	; (8004c80 <HAL_DMA_IRQHandler+0xcd0>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d018      	beq.n	8004c10 <HAL_DMA_IRQHandler+0xc60>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a28      	ldr	r2, [pc, #160]	; (8004c84 <HAL_DMA_IRQHandler+0xcd4>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d013      	beq.n	8004c10 <HAL_DMA_IRQHandler+0xc60>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a26      	ldr	r2, [pc, #152]	; (8004c88 <HAL_DMA_IRQHandler+0xcd8>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d00e      	beq.n	8004c10 <HAL_DMA_IRQHandler+0xc60>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a25      	ldr	r2, [pc, #148]	; (8004c8c <HAL_DMA_IRQHandler+0xcdc>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d009      	beq.n	8004c10 <HAL_DMA_IRQHandler+0xc60>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a23      	ldr	r2, [pc, #140]	; (8004c90 <HAL_DMA_IRQHandler+0xce0>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d004      	beq.n	8004c10 <HAL_DMA_IRQHandler+0xc60>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a22      	ldr	r2, [pc, #136]	; (8004c94 <HAL_DMA_IRQHandler+0xce4>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d108      	bne.n	8004c22 <HAL_DMA_IRQHandler+0xc72>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f022 0214 	bic.w	r2, r2, #20
 8004c1e:	601a      	str	r2, [r3, #0]
 8004c20:	e007      	b.n	8004c32 <HAL_DMA_IRQHandler+0xc82>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 020a 	bic.w	r2, r2, #10
 8004c30:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f000 80b8 	beq.w	8004dbc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c54:	e0b2      	b.n	8004dbc <HAL_DMA_IRQHandler+0xe0c>
 8004c56:	bf00      	nop
 8004c58:	40020010 	.word	0x40020010
 8004c5c:	40020028 	.word	0x40020028
 8004c60:	40020040 	.word	0x40020040
 8004c64:	40020058 	.word	0x40020058
 8004c68:	40020070 	.word	0x40020070
 8004c6c:	40020088 	.word	0x40020088
 8004c70:	400200a0 	.word	0x400200a0
 8004c74:	400200b8 	.word	0x400200b8
 8004c78:	40020410 	.word	0x40020410
 8004c7c:	40020428 	.word	0x40020428
 8004c80:	40020440 	.word	0x40020440
 8004c84:	40020458 	.word	0x40020458
 8004c88:	40020470 	.word	0x40020470
 8004c8c:	40020488 	.word	0x40020488
 8004c90:	400204a0 	.word	0x400204a0
 8004c94:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c9c:	f003 031f 	and.w	r3, r3, #31
 8004ca0:	2208      	movs	r2, #8
 8004ca2:	409a      	lsls	r2, r3
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 8088 	beq.w	8004dbe <HAL_DMA_IRQHandler+0xe0e>
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	f003 0308 	and.w	r3, r3, #8
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f000 8082 	beq.w	8004dbe <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a41      	ldr	r2, [pc, #260]	; (8004dc4 <HAL_DMA_IRQHandler+0xe14>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d04a      	beq.n	8004d5a <HAL_DMA_IRQHandler+0xdaa>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a3f      	ldr	r2, [pc, #252]	; (8004dc8 <HAL_DMA_IRQHandler+0xe18>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d045      	beq.n	8004d5a <HAL_DMA_IRQHandler+0xdaa>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a3e      	ldr	r2, [pc, #248]	; (8004dcc <HAL_DMA_IRQHandler+0xe1c>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d040      	beq.n	8004d5a <HAL_DMA_IRQHandler+0xdaa>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a3c      	ldr	r2, [pc, #240]	; (8004dd0 <HAL_DMA_IRQHandler+0xe20>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d03b      	beq.n	8004d5a <HAL_DMA_IRQHandler+0xdaa>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a3b      	ldr	r2, [pc, #236]	; (8004dd4 <HAL_DMA_IRQHandler+0xe24>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d036      	beq.n	8004d5a <HAL_DMA_IRQHandler+0xdaa>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a39      	ldr	r2, [pc, #228]	; (8004dd8 <HAL_DMA_IRQHandler+0xe28>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d031      	beq.n	8004d5a <HAL_DMA_IRQHandler+0xdaa>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a38      	ldr	r2, [pc, #224]	; (8004ddc <HAL_DMA_IRQHandler+0xe2c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d02c      	beq.n	8004d5a <HAL_DMA_IRQHandler+0xdaa>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a36      	ldr	r2, [pc, #216]	; (8004de0 <HAL_DMA_IRQHandler+0xe30>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d027      	beq.n	8004d5a <HAL_DMA_IRQHandler+0xdaa>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a35      	ldr	r2, [pc, #212]	; (8004de4 <HAL_DMA_IRQHandler+0xe34>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d022      	beq.n	8004d5a <HAL_DMA_IRQHandler+0xdaa>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a33      	ldr	r2, [pc, #204]	; (8004de8 <HAL_DMA_IRQHandler+0xe38>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d01d      	beq.n	8004d5a <HAL_DMA_IRQHandler+0xdaa>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a32      	ldr	r2, [pc, #200]	; (8004dec <HAL_DMA_IRQHandler+0xe3c>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d018      	beq.n	8004d5a <HAL_DMA_IRQHandler+0xdaa>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a30      	ldr	r2, [pc, #192]	; (8004df0 <HAL_DMA_IRQHandler+0xe40>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d013      	beq.n	8004d5a <HAL_DMA_IRQHandler+0xdaa>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a2f      	ldr	r2, [pc, #188]	; (8004df4 <HAL_DMA_IRQHandler+0xe44>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d00e      	beq.n	8004d5a <HAL_DMA_IRQHandler+0xdaa>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a2d      	ldr	r2, [pc, #180]	; (8004df8 <HAL_DMA_IRQHandler+0xe48>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d009      	beq.n	8004d5a <HAL_DMA_IRQHandler+0xdaa>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a2c      	ldr	r2, [pc, #176]	; (8004dfc <HAL_DMA_IRQHandler+0xe4c>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d004      	beq.n	8004d5a <HAL_DMA_IRQHandler+0xdaa>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a2a      	ldr	r2, [pc, #168]	; (8004e00 <HAL_DMA_IRQHandler+0xe50>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d108      	bne.n	8004d6c <HAL_DMA_IRQHandler+0xdbc>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 021c 	bic.w	r2, r2, #28
 8004d68:	601a      	str	r2, [r3, #0]
 8004d6a:	e007      	b.n	8004d7c <HAL_DMA_IRQHandler+0xdcc>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 020e 	bic.w	r2, r2, #14
 8004d7a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d80:	f003 031f 	and.w	r3, r3, #31
 8004d84:	2201      	movs	r2, #1
 8004d86:	409a      	lsls	r2, r3
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d009      	beq.n	8004dbe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	4798      	blx	r3
 8004db2:	e004      	b.n	8004dbe <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004db4:	bf00      	nop
 8004db6:	e002      	b.n	8004dbe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004db8:	bf00      	nop
 8004dba:	e000      	b.n	8004dbe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004dbc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004dbe:	3728      	adds	r7, #40	; 0x28
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	40020010 	.word	0x40020010
 8004dc8:	40020028 	.word	0x40020028
 8004dcc:	40020040 	.word	0x40020040
 8004dd0:	40020058 	.word	0x40020058
 8004dd4:	40020070 	.word	0x40020070
 8004dd8:	40020088 	.word	0x40020088
 8004ddc:	400200a0 	.word	0x400200a0
 8004de0:	400200b8 	.word	0x400200b8
 8004de4:	40020410 	.word	0x40020410
 8004de8:	40020428 	.word	0x40020428
 8004dec:	40020440 	.word	0x40020440
 8004df0:	40020458 	.word	0x40020458
 8004df4:	40020470 	.word	0x40020470
 8004df8:	40020488 	.word	0x40020488
 8004dfc:	400204a0 	.word	0x400204a0
 8004e00:	400204b8 	.word	0x400204b8

08004e04 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b087      	sub	sp, #28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
 8004e10:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e16:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e1c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a84      	ldr	r2, [pc, #528]	; (8005034 <DMA_SetConfig+0x230>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d072      	beq.n	8004f0e <DMA_SetConfig+0x10a>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a82      	ldr	r2, [pc, #520]	; (8005038 <DMA_SetConfig+0x234>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d06d      	beq.n	8004f0e <DMA_SetConfig+0x10a>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a81      	ldr	r2, [pc, #516]	; (800503c <DMA_SetConfig+0x238>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d068      	beq.n	8004f0e <DMA_SetConfig+0x10a>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a7f      	ldr	r2, [pc, #508]	; (8005040 <DMA_SetConfig+0x23c>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d063      	beq.n	8004f0e <DMA_SetConfig+0x10a>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a7e      	ldr	r2, [pc, #504]	; (8005044 <DMA_SetConfig+0x240>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d05e      	beq.n	8004f0e <DMA_SetConfig+0x10a>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a7c      	ldr	r2, [pc, #496]	; (8005048 <DMA_SetConfig+0x244>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d059      	beq.n	8004f0e <DMA_SetConfig+0x10a>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a7b      	ldr	r2, [pc, #492]	; (800504c <DMA_SetConfig+0x248>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d054      	beq.n	8004f0e <DMA_SetConfig+0x10a>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a79      	ldr	r2, [pc, #484]	; (8005050 <DMA_SetConfig+0x24c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d04f      	beq.n	8004f0e <DMA_SetConfig+0x10a>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a78      	ldr	r2, [pc, #480]	; (8005054 <DMA_SetConfig+0x250>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d04a      	beq.n	8004f0e <DMA_SetConfig+0x10a>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a76      	ldr	r2, [pc, #472]	; (8005058 <DMA_SetConfig+0x254>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d045      	beq.n	8004f0e <DMA_SetConfig+0x10a>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a75      	ldr	r2, [pc, #468]	; (800505c <DMA_SetConfig+0x258>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d040      	beq.n	8004f0e <DMA_SetConfig+0x10a>
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a73      	ldr	r2, [pc, #460]	; (8005060 <DMA_SetConfig+0x25c>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d03b      	beq.n	8004f0e <DMA_SetConfig+0x10a>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a72      	ldr	r2, [pc, #456]	; (8005064 <DMA_SetConfig+0x260>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d036      	beq.n	8004f0e <DMA_SetConfig+0x10a>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a70      	ldr	r2, [pc, #448]	; (8005068 <DMA_SetConfig+0x264>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d031      	beq.n	8004f0e <DMA_SetConfig+0x10a>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a6f      	ldr	r2, [pc, #444]	; (800506c <DMA_SetConfig+0x268>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d02c      	beq.n	8004f0e <DMA_SetConfig+0x10a>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a6d      	ldr	r2, [pc, #436]	; (8005070 <DMA_SetConfig+0x26c>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d027      	beq.n	8004f0e <DMA_SetConfig+0x10a>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a6c      	ldr	r2, [pc, #432]	; (8005074 <DMA_SetConfig+0x270>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d022      	beq.n	8004f0e <DMA_SetConfig+0x10a>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a6a      	ldr	r2, [pc, #424]	; (8005078 <DMA_SetConfig+0x274>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d01d      	beq.n	8004f0e <DMA_SetConfig+0x10a>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a69      	ldr	r2, [pc, #420]	; (800507c <DMA_SetConfig+0x278>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d018      	beq.n	8004f0e <DMA_SetConfig+0x10a>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a67      	ldr	r2, [pc, #412]	; (8005080 <DMA_SetConfig+0x27c>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d013      	beq.n	8004f0e <DMA_SetConfig+0x10a>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a66      	ldr	r2, [pc, #408]	; (8005084 <DMA_SetConfig+0x280>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d00e      	beq.n	8004f0e <DMA_SetConfig+0x10a>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a64      	ldr	r2, [pc, #400]	; (8005088 <DMA_SetConfig+0x284>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d009      	beq.n	8004f0e <DMA_SetConfig+0x10a>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a63      	ldr	r2, [pc, #396]	; (800508c <DMA_SetConfig+0x288>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d004      	beq.n	8004f0e <DMA_SetConfig+0x10a>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a61      	ldr	r2, [pc, #388]	; (8005090 <DMA_SetConfig+0x28c>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d101      	bne.n	8004f12 <DMA_SetConfig+0x10e>
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e000      	b.n	8004f14 <DMA_SetConfig+0x110>
 8004f12:	2300      	movs	r3, #0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00d      	beq.n	8004f34 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004f20:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d004      	beq.n	8004f34 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004f32:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a3e      	ldr	r2, [pc, #248]	; (8005034 <DMA_SetConfig+0x230>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d04a      	beq.n	8004fd4 <DMA_SetConfig+0x1d0>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a3d      	ldr	r2, [pc, #244]	; (8005038 <DMA_SetConfig+0x234>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d045      	beq.n	8004fd4 <DMA_SetConfig+0x1d0>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a3b      	ldr	r2, [pc, #236]	; (800503c <DMA_SetConfig+0x238>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d040      	beq.n	8004fd4 <DMA_SetConfig+0x1d0>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a3a      	ldr	r2, [pc, #232]	; (8005040 <DMA_SetConfig+0x23c>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d03b      	beq.n	8004fd4 <DMA_SetConfig+0x1d0>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a38      	ldr	r2, [pc, #224]	; (8005044 <DMA_SetConfig+0x240>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d036      	beq.n	8004fd4 <DMA_SetConfig+0x1d0>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a37      	ldr	r2, [pc, #220]	; (8005048 <DMA_SetConfig+0x244>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d031      	beq.n	8004fd4 <DMA_SetConfig+0x1d0>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a35      	ldr	r2, [pc, #212]	; (800504c <DMA_SetConfig+0x248>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d02c      	beq.n	8004fd4 <DMA_SetConfig+0x1d0>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a34      	ldr	r2, [pc, #208]	; (8005050 <DMA_SetConfig+0x24c>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d027      	beq.n	8004fd4 <DMA_SetConfig+0x1d0>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a32      	ldr	r2, [pc, #200]	; (8005054 <DMA_SetConfig+0x250>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d022      	beq.n	8004fd4 <DMA_SetConfig+0x1d0>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a31      	ldr	r2, [pc, #196]	; (8005058 <DMA_SetConfig+0x254>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d01d      	beq.n	8004fd4 <DMA_SetConfig+0x1d0>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a2f      	ldr	r2, [pc, #188]	; (800505c <DMA_SetConfig+0x258>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d018      	beq.n	8004fd4 <DMA_SetConfig+0x1d0>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a2e      	ldr	r2, [pc, #184]	; (8005060 <DMA_SetConfig+0x25c>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d013      	beq.n	8004fd4 <DMA_SetConfig+0x1d0>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a2c      	ldr	r2, [pc, #176]	; (8005064 <DMA_SetConfig+0x260>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d00e      	beq.n	8004fd4 <DMA_SetConfig+0x1d0>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a2b      	ldr	r2, [pc, #172]	; (8005068 <DMA_SetConfig+0x264>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d009      	beq.n	8004fd4 <DMA_SetConfig+0x1d0>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a29      	ldr	r2, [pc, #164]	; (800506c <DMA_SetConfig+0x268>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d004      	beq.n	8004fd4 <DMA_SetConfig+0x1d0>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a28      	ldr	r2, [pc, #160]	; (8005070 <DMA_SetConfig+0x26c>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d101      	bne.n	8004fd8 <DMA_SetConfig+0x1d4>
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e000      	b.n	8004fda <DMA_SetConfig+0x1d6>
 8004fd8:	2300      	movs	r3, #0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d05a      	beq.n	8005094 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fe2:	f003 031f 	and.w	r3, r3, #31
 8004fe6:	223f      	movs	r2, #63	; 0x3f
 8004fe8:	409a      	lsls	r2, r3
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ffc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	2b40      	cmp	r3, #64	; 0x40
 800500c:	d108      	bne.n	8005020 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800501e:	e087      	b.n	8005130 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68ba      	ldr	r2, [r7, #8]
 8005026:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	60da      	str	r2, [r3, #12]
}
 8005030:	e07e      	b.n	8005130 <DMA_SetConfig+0x32c>
 8005032:	bf00      	nop
 8005034:	40020010 	.word	0x40020010
 8005038:	40020028 	.word	0x40020028
 800503c:	40020040 	.word	0x40020040
 8005040:	40020058 	.word	0x40020058
 8005044:	40020070 	.word	0x40020070
 8005048:	40020088 	.word	0x40020088
 800504c:	400200a0 	.word	0x400200a0
 8005050:	400200b8 	.word	0x400200b8
 8005054:	40020410 	.word	0x40020410
 8005058:	40020428 	.word	0x40020428
 800505c:	40020440 	.word	0x40020440
 8005060:	40020458 	.word	0x40020458
 8005064:	40020470 	.word	0x40020470
 8005068:	40020488 	.word	0x40020488
 800506c:	400204a0 	.word	0x400204a0
 8005070:	400204b8 	.word	0x400204b8
 8005074:	58025408 	.word	0x58025408
 8005078:	5802541c 	.word	0x5802541c
 800507c:	58025430 	.word	0x58025430
 8005080:	58025444 	.word	0x58025444
 8005084:	58025458 	.word	0x58025458
 8005088:	5802546c 	.word	0x5802546c
 800508c:	58025480 	.word	0x58025480
 8005090:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a28      	ldr	r2, [pc, #160]	; (800513c <DMA_SetConfig+0x338>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d022      	beq.n	80050e4 <DMA_SetConfig+0x2e0>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a27      	ldr	r2, [pc, #156]	; (8005140 <DMA_SetConfig+0x33c>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d01d      	beq.n	80050e4 <DMA_SetConfig+0x2e0>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a25      	ldr	r2, [pc, #148]	; (8005144 <DMA_SetConfig+0x340>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d018      	beq.n	80050e4 <DMA_SetConfig+0x2e0>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a24      	ldr	r2, [pc, #144]	; (8005148 <DMA_SetConfig+0x344>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d013      	beq.n	80050e4 <DMA_SetConfig+0x2e0>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a22      	ldr	r2, [pc, #136]	; (800514c <DMA_SetConfig+0x348>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d00e      	beq.n	80050e4 <DMA_SetConfig+0x2e0>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a21      	ldr	r2, [pc, #132]	; (8005150 <DMA_SetConfig+0x34c>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d009      	beq.n	80050e4 <DMA_SetConfig+0x2e0>
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a1f      	ldr	r2, [pc, #124]	; (8005154 <DMA_SetConfig+0x350>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d004      	beq.n	80050e4 <DMA_SetConfig+0x2e0>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a1e      	ldr	r2, [pc, #120]	; (8005158 <DMA_SetConfig+0x354>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d101      	bne.n	80050e8 <DMA_SetConfig+0x2e4>
 80050e4:	2301      	movs	r3, #1
 80050e6:	e000      	b.n	80050ea <DMA_SetConfig+0x2e6>
 80050e8:	2300      	movs	r3, #0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d020      	beq.n	8005130 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050f2:	f003 031f 	and.w	r3, r3, #31
 80050f6:	2201      	movs	r2, #1
 80050f8:	409a      	lsls	r2, r3
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	683a      	ldr	r2, [r7, #0]
 8005104:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	2b40      	cmp	r3, #64	; 0x40
 800510c:	d108      	bne.n	8005120 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	60da      	str	r2, [r3, #12]
}
 800511e:	e007      	b.n	8005130 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	60da      	str	r2, [r3, #12]
}
 8005130:	bf00      	nop
 8005132:	371c      	adds	r7, #28
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	58025408 	.word	0x58025408
 8005140:	5802541c 	.word	0x5802541c
 8005144:	58025430 	.word	0x58025430
 8005148:	58025444 	.word	0x58025444
 800514c:	58025458 	.word	0x58025458
 8005150:	5802546c 	.word	0x5802546c
 8005154:	58025480 	.word	0x58025480
 8005158:	58025494 	.word	0x58025494

0800515c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a42      	ldr	r2, [pc, #264]	; (8005274 <DMA_CalcBaseAndBitshift+0x118>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d04a      	beq.n	8005204 <DMA_CalcBaseAndBitshift+0xa8>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a41      	ldr	r2, [pc, #260]	; (8005278 <DMA_CalcBaseAndBitshift+0x11c>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d045      	beq.n	8005204 <DMA_CalcBaseAndBitshift+0xa8>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a3f      	ldr	r2, [pc, #252]	; (800527c <DMA_CalcBaseAndBitshift+0x120>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d040      	beq.n	8005204 <DMA_CalcBaseAndBitshift+0xa8>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a3e      	ldr	r2, [pc, #248]	; (8005280 <DMA_CalcBaseAndBitshift+0x124>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d03b      	beq.n	8005204 <DMA_CalcBaseAndBitshift+0xa8>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a3c      	ldr	r2, [pc, #240]	; (8005284 <DMA_CalcBaseAndBitshift+0x128>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d036      	beq.n	8005204 <DMA_CalcBaseAndBitshift+0xa8>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a3b      	ldr	r2, [pc, #236]	; (8005288 <DMA_CalcBaseAndBitshift+0x12c>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d031      	beq.n	8005204 <DMA_CalcBaseAndBitshift+0xa8>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a39      	ldr	r2, [pc, #228]	; (800528c <DMA_CalcBaseAndBitshift+0x130>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d02c      	beq.n	8005204 <DMA_CalcBaseAndBitshift+0xa8>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a38      	ldr	r2, [pc, #224]	; (8005290 <DMA_CalcBaseAndBitshift+0x134>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d027      	beq.n	8005204 <DMA_CalcBaseAndBitshift+0xa8>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a36      	ldr	r2, [pc, #216]	; (8005294 <DMA_CalcBaseAndBitshift+0x138>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d022      	beq.n	8005204 <DMA_CalcBaseAndBitshift+0xa8>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a35      	ldr	r2, [pc, #212]	; (8005298 <DMA_CalcBaseAndBitshift+0x13c>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d01d      	beq.n	8005204 <DMA_CalcBaseAndBitshift+0xa8>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a33      	ldr	r2, [pc, #204]	; (800529c <DMA_CalcBaseAndBitshift+0x140>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d018      	beq.n	8005204 <DMA_CalcBaseAndBitshift+0xa8>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a32      	ldr	r2, [pc, #200]	; (80052a0 <DMA_CalcBaseAndBitshift+0x144>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d013      	beq.n	8005204 <DMA_CalcBaseAndBitshift+0xa8>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a30      	ldr	r2, [pc, #192]	; (80052a4 <DMA_CalcBaseAndBitshift+0x148>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d00e      	beq.n	8005204 <DMA_CalcBaseAndBitshift+0xa8>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a2f      	ldr	r2, [pc, #188]	; (80052a8 <DMA_CalcBaseAndBitshift+0x14c>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d009      	beq.n	8005204 <DMA_CalcBaseAndBitshift+0xa8>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a2d      	ldr	r2, [pc, #180]	; (80052ac <DMA_CalcBaseAndBitshift+0x150>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d004      	beq.n	8005204 <DMA_CalcBaseAndBitshift+0xa8>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a2c      	ldr	r2, [pc, #176]	; (80052b0 <DMA_CalcBaseAndBitshift+0x154>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d101      	bne.n	8005208 <DMA_CalcBaseAndBitshift+0xac>
 8005204:	2301      	movs	r3, #1
 8005206:	e000      	b.n	800520a <DMA_CalcBaseAndBitshift+0xae>
 8005208:	2300      	movs	r3, #0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d024      	beq.n	8005258 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	b2db      	uxtb	r3, r3
 8005214:	3b10      	subs	r3, #16
 8005216:	4a27      	ldr	r2, [pc, #156]	; (80052b4 <DMA_CalcBaseAndBitshift+0x158>)
 8005218:	fba2 2303 	umull	r2, r3, r2, r3
 800521c:	091b      	lsrs	r3, r3, #4
 800521e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f003 0307 	and.w	r3, r3, #7
 8005226:	4a24      	ldr	r2, [pc, #144]	; (80052b8 <DMA_CalcBaseAndBitshift+0x15c>)
 8005228:	5cd3      	ldrb	r3, [r2, r3]
 800522a:	461a      	mov	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2b03      	cmp	r3, #3
 8005234:	d908      	bls.n	8005248 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	461a      	mov	r2, r3
 800523c:	4b1f      	ldr	r3, [pc, #124]	; (80052bc <DMA_CalcBaseAndBitshift+0x160>)
 800523e:	4013      	ands	r3, r2
 8005240:	1d1a      	adds	r2, r3, #4
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	659a      	str	r2, [r3, #88]	; 0x58
 8005246:	e00d      	b.n	8005264 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	461a      	mov	r2, r3
 800524e:	4b1b      	ldr	r3, [pc, #108]	; (80052bc <DMA_CalcBaseAndBitshift+0x160>)
 8005250:	4013      	ands	r3, r2
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	6593      	str	r3, [r2, #88]	; 0x58
 8005256:	e005      	b.n	8005264 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005268:	4618      	mov	r0, r3
 800526a:	3714      	adds	r7, #20
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr
 8005274:	40020010 	.word	0x40020010
 8005278:	40020028 	.word	0x40020028
 800527c:	40020040 	.word	0x40020040
 8005280:	40020058 	.word	0x40020058
 8005284:	40020070 	.word	0x40020070
 8005288:	40020088 	.word	0x40020088
 800528c:	400200a0 	.word	0x400200a0
 8005290:	400200b8 	.word	0x400200b8
 8005294:	40020410 	.word	0x40020410
 8005298:	40020428 	.word	0x40020428
 800529c:	40020440 	.word	0x40020440
 80052a0:	40020458 	.word	0x40020458
 80052a4:	40020470 	.word	0x40020470
 80052a8:	40020488 	.word	0x40020488
 80052ac:	400204a0 	.word	0x400204a0
 80052b0:	400204b8 	.word	0x400204b8
 80052b4:	aaaaaaab 	.word	0xaaaaaaab
 80052b8:	080218c8 	.word	0x080218c8
 80052bc:	fffffc00 	.word	0xfffffc00

080052c0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052c8:	2300      	movs	r3, #0
 80052ca:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d120      	bne.n	8005316 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d8:	2b03      	cmp	r3, #3
 80052da:	d858      	bhi.n	800538e <DMA_CheckFifoParam+0xce>
 80052dc:	a201      	add	r2, pc, #4	; (adr r2, 80052e4 <DMA_CheckFifoParam+0x24>)
 80052de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e2:	bf00      	nop
 80052e4:	080052f5 	.word	0x080052f5
 80052e8:	08005307 	.word	0x08005307
 80052ec:	080052f5 	.word	0x080052f5
 80052f0:	0800538f 	.word	0x0800538f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d048      	beq.n	8005392 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005304:	e045      	b.n	8005392 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800530e:	d142      	bne.n	8005396 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005314:	e03f      	b.n	8005396 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800531e:	d123      	bne.n	8005368 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005324:	2b03      	cmp	r3, #3
 8005326:	d838      	bhi.n	800539a <DMA_CheckFifoParam+0xda>
 8005328:	a201      	add	r2, pc, #4	; (adr r2, 8005330 <DMA_CheckFifoParam+0x70>)
 800532a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800532e:	bf00      	nop
 8005330:	08005341 	.word	0x08005341
 8005334:	08005347 	.word	0x08005347
 8005338:	08005341 	.word	0x08005341
 800533c:	08005359 	.word	0x08005359
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	73fb      	strb	r3, [r7, #15]
        break;
 8005344:	e030      	b.n	80053a8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d025      	beq.n	800539e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005356:	e022      	b.n	800539e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005360:	d11f      	bne.n	80053a2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005366:	e01c      	b.n	80053a2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536c:	2b02      	cmp	r3, #2
 800536e:	d902      	bls.n	8005376 <DMA_CheckFifoParam+0xb6>
 8005370:	2b03      	cmp	r3, #3
 8005372:	d003      	beq.n	800537c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005374:	e018      	b.n	80053a8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	73fb      	strb	r3, [r7, #15]
        break;
 800537a:	e015      	b.n	80053a8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005380:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00e      	beq.n	80053a6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	73fb      	strb	r3, [r7, #15]
    break;
 800538c:	e00b      	b.n	80053a6 <DMA_CheckFifoParam+0xe6>
        break;
 800538e:	bf00      	nop
 8005390:	e00a      	b.n	80053a8 <DMA_CheckFifoParam+0xe8>
        break;
 8005392:	bf00      	nop
 8005394:	e008      	b.n	80053a8 <DMA_CheckFifoParam+0xe8>
        break;
 8005396:	bf00      	nop
 8005398:	e006      	b.n	80053a8 <DMA_CheckFifoParam+0xe8>
        break;
 800539a:	bf00      	nop
 800539c:	e004      	b.n	80053a8 <DMA_CheckFifoParam+0xe8>
        break;
 800539e:	bf00      	nop
 80053a0:	e002      	b.n	80053a8 <DMA_CheckFifoParam+0xe8>
        break;
 80053a2:	bf00      	nop
 80053a4:	e000      	b.n	80053a8 <DMA_CheckFifoParam+0xe8>
    break;
 80053a6:	bf00      	nop
    }
  }

  return status;
 80053a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop

080053b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a38      	ldr	r2, [pc, #224]	; (80054ac <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d022      	beq.n	8005416 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a36      	ldr	r2, [pc, #216]	; (80054b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d01d      	beq.n	8005416 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a35      	ldr	r2, [pc, #212]	; (80054b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d018      	beq.n	8005416 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a33      	ldr	r2, [pc, #204]	; (80054b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d013      	beq.n	8005416 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a32      	ldr	r2, [pc, #200]	; (80054bc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d00e      	beq.n	8005416 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a30      	ldr	r2, [pc, #192]	; (80054c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d009      	beq.n	8005416 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a2f      	ldr	r2, [pc, #188]	; (80054c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d004      	beq.n	8005416 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a2d      	ldr	r2, [pc, #180]	; (80054c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d101      	bne.n	800541a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005416:	2301      	movs	r3, #1
 8005418:	e000      	b.n	800541c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800541a:	2300      	movs	r3, #0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d01a      	beq.n	8005456 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	b2db      	uxtb	r3, r3
 8005426:	3b08      	subs	r3, #8
 8005428:	4a28      	ldr	r2, [pc, #160]	; (80054cc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800542a:	fba2 2303 	umull	r2, r3, r2, r3
 800542e:	091b      	lsrs	r3, r3, #4
 8005430:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	4b26      	ldr	r3, [pc, #152]	; (80054d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005436:	4413      	add	r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	461a      	mov	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a24      	ldr	r2, [pc, #144]	; (80054d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005444:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f003 031f 	and.w	r3, r3, #31
 800544c:	2201      	movs	r2, #1
 800544e:	409a      	lsls	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005454:	e024      	b.n	80054a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	b2db      	uxtb	r3, r3
 800545c:	3b10      	subs	r3, #16
 800545e:	4a1e      	ldr	r2, [pc, #120]	; (80054d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005460:	fba2 2303 	umull	r2, r3, r2, r3
 8005464:	091b      	lsrs	r3, r3, #4
 8005466:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	4a1c      	ldr	r2, [pc, #112]	; (80054dc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d806      	bhi.n	800547e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	4a1b      	ldr	r2, [pc, #108]	; (80054e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d902      	bls.n	800547e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	3308      	adds	r3, #8
 800547c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	4b18      	ldr	r3, [pc, #96]	; (80054e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005482:	4413      	add	r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	461a      	mov	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a16      	ldr	r2, [pc, #88]	; (80054e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005490:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f003 031f 	and.w	r3, r3, #31
 8005498:	2201      	movs	r2, #1
 800549a:	409a      	lsls	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	669a      	str	r2, [r3, #104]	; 0x68
}
 80054a0:	bf00      	nop
 80054a2:	3714      	adds	r7, #20
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr
 80054ac:	58025408 	.word	0x58025408
 80054b0:	5802541c 	.word	0x5802541c
 80054b4:	58025430 	.word	0x58025430
 80054b8:	58025444 	.word	0x58025444
 80054bc:	58025458 	.word	0x58025458
 80054c0:	5802546c 	.word	0x5802546c
 80054c4:	58025480 	.word	0x58025480
 80054c8:	58025494 	.word	0x58025494
 80054cc:	cccccccd 	.word	0xcccccccd
 80054d0:	16009600 	.word	0x16009600
 80054d4:	58025880 	.word	0x58025880
 80054d8:	aaaaaaab 	.word	0xaaaaaaab
 80054dc:	400204b8 	.word	0x400204b8
 80054e0:	4002040f 	.word	0x4002040f
 80054e4:	10008200 	.word	0x10008200
 80054e8:	40020880 	.word	0x40020880

080054ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d04a      	beq.n	8005598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2b08      	cmp	r3, #8
 8005506:	d847      	bhi.n	8005598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a25      	ldr	r2, [pc, #148]	; (80055a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d022      	beq.n	8005558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a24      	ldr	r2, [pc, #144]	; (80055a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d01d      	beq.n	8005558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a22      	ldr	r2, [pc, #136]	; (80055ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d018      	beq.n	8005558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a21      	ldr	r2, [pc, #132]	; (80055b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d013      	beq.n	8005558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a1f      	ldr	r2, [pc, #124]	; (80055b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d00e      	beq.n	8005558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a1e      	ldr	r2, [pc, #120]	; (80055b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d009      	beq.n	8005558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a1c      	ldr	r2, [pc, #112]	; (80055bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d004      	beq.n	8005558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a1b      	ldr	r2, [pc, #108]	; (80055c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d101      	bne.n	800555c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005558:	2301      	movs	r3, #1
 800555a:	e000      	b.n	800555e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800555c:	2300      	movs	r3, #0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00a      	beq.n	8005578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	4b17      	ldr	r3, [pc, #92]	; (80055c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005566:	4413      	add	r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	461a      	mov	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a15      	ldr	r2, [pc, #84]	; (80055c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005574:	671a      	str	r2, [r3, #112]	; 0x70
 8005576:	e009      	b.n	800558c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	4b14      	ldr	r3, [pc, #80]	; (80055cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800557c:	4413      	add	r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	461a      	mov	r2, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a11      	ldr	r2, [pc, #68]	; (80055d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800558a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	3b01      	subs	r3, #1
 8005590:	2201      	movs	r2, #1
 8005592:	409a      	lsls	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005598:	bf00      	nop
 800559a:	3714      	adds	r7, #20
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr
 80055a4:	58025408 	.word	0x58025408
 80055a8:	5802541c 	.word	0x5802541c
 80055ac:	58025430 	.word	0x58025430
 80055b0:	58025444 	.word	0x58025444
 80055b4:	58025458 	.word	0x58025458
 80055b8:	5802546c 	.word	0x5802546c
 80055bc:	58025480 	.word	0x58025480
 80055c0:	58025494 	.word	0x58025494
 80055c4:	1600963f 	.word	0x1600963f
 80055c8:	58025940 	.word	0x58025940
 80055cc:	1000823f 	.word	0x1000823f
 80055d0:	40020940 	.word	0x40020940

080055d4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e0c6      	b.n	8005774 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d102      	bne.n	80055f4 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7fb fbe0 	bl	8000db4 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2223      	movs	r2, #35	; 0x23
 80055f8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055fa:	4b60      	ldr	r3, [pc, #384]	; (800577c <HAL_ETH_Init+0x1a8>)
 80055fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005600:	4a5e      	ldr	r2, [pc, #376]	; (800577c <HAL_ETH_Init+0x1a8>)
 8005602:	f043 0302 	orr.w	r3, r3, #2
 8005606:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800560a:	4b5c      	ldr	r3, [pc, #368]	; (800577c <HAL_ETH_Init+0x1a8>)
 800560c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	60bb      	str	r3, [r7, #8]
 8005616:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	7a1b      	ldrb	r3, [r3, #8]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d103      	bne.n	8005628 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005620:	2000      	movs	r0, #0
 8005622:	f7fc fffd 	bl	8002620 <HAL_SYSCFG_ETHInterfaceSelect>
 8005626:	e003      	b.n	8005630 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005628:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800562c:	f7fc fff8 	bl	8002620 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f042 0201 	orr.w	r2, r2, #1
 8005642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005646:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005648:	f7fc ffae 	bl	80025a8 <HAL_GetTick>
 800564c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800564e:	e00f      	b.n	8005670 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8005650:	f7fc ffaa 	bl	80025a8 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800565e:	d907      	bls.n	8005670 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2204      	movs	r2, #4
 8005664:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	22e0      	movs	r2, #224	; 0xe0
 800566a:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e081      	b.n	8005774 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1e6      	bne.n	8005650 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 fac0 	bl	8005c08 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005688:	f003 fc44 	bl	8008f14 <HAL_RCC_GetHCLKFreq>
 800568c:	4603      	mov	r3, r0
 800568e:	4a3c      	ldr	r2, [pc, #240]	; (8005780 <HAL_ETH_Init+0x1ac>)
 8005690:	fba2 2303 	umull	r2, r3, r2, r3
 8005694:	0c9a      	lsrs	r2, r3, #18
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	3a01      	subs	r2, #1
 800569c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 fa13 	bl	8005acc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80056bc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80056c0:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	f003 0303 	and.w	r3, r3, #3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d007      	beq.n	80056de <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	22e0      	movs	r2, #224	; 0xe0
 80056d8:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e04a      	b.n	8005774 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	f241 1308 	movw	r3, #4360	; 0x1108
 80056e6:	4413      	add	r3, r2
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	4b26      	ldr	r3, [pc, #152]	; (8005784 <HAL_ETH_Init+0x1b0>)
 80056ec:	4013      	ands	r3, r2
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	6952      	ldr	r2, [r2, #20]
 80056f2:	0052      	lsls	r2, r2, #1
 80056f4:	6879      	ldr	r1, [r7, #4]
 80056f6:	6809      	ldr	r1, [r1, #0]
 80056f8:	431a      	orrs	r2, r3
 80056fa:	f241 1308 	movw	r3, #4360	; 0x1108
 80056fe:	440b      	add	r3, r1
 8005700:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 fad8 	bl	8005cb8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 fb1c 	bl	8005d46 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	3305      	adds	r3, #5
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	021a      	lsls	r2, r3, #8
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	3304      	adds	r3, #4
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	4619      	mov	r1, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	430a      	orrs	r2, r1
 8005728:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	3303      	adds	r3, #3
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	061a      	lsls	r2, r3, #24
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	3302      	adds	r3, #2
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	041b      	lsls	r3, r3, #16
 8005740:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	3301      	adds	r3, #1
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800574c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800575a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800575c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2210      	movs	r2, #16
 800576a:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2210      	movs	r2, #16
 8005770:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	58024400 	.word	0x58024400
 8005780:	431bde83 	.word	0x431bde83
 8005784:	ffff8001 	.word	0xffff8001

08005788 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800579a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	791b      	ldrb	r3, [r3, #4]
 80057a0:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80057a2:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	7b1b      	ldrb	r3, [r3, #12]
 80057a8:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80057aa:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	7b5b      	ldrb	r3, [r3, #13]
 80057b0:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80057b2:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	7b9b      	ldrb	r3, [r3, #14]
 80057b8:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80057ba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	7bdb      	ldrb	r3, [r3, #15]
 80057c0:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80057c2:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80057c4:	683a      	ldr	r2, [r7, #0]
 80057c6:	7c12      	ldrb	r2, [r2, #16]
 80057c8:	2a00      	cmp	r2, #0
 80057ca:	d102      	bne.n	80057d2 <ETH_SetMACConfig+0x4a>
 80057cc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80057d0:	e000      	b.n	80057d4 <ETH_SetMACConfig+0x4c>
 80057d2:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80057d4:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80057d6:	683a      	ldr	r2, [r7, #0]
 80057d8:	7c52      	ldrb	r2, [r2, #17]
 80057da:	2a00      	cmp	r2, #0
 80057dc:	d102      	bne.n	80057e4 <ETH_SetMACConfig+0x5c>
 80057de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80057e2:	e000      	b.n	80057e6 <ETH_SetMACConfig+0x5e>
 80057e4:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80057e6:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	7c9b      	ldrb	r3, [r3, #18]
 80057ec:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80057ee:	431a      	orrs	r2, r3
                                macconf->Speed |
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80057f4:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80057fa:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	7f1b      	ldrb	r3, [r3, #28]
 8005800:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8005802:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	7f5b      	ldrb	r3, [r3, #29]
 8005808:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800580a:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	7f92      	ldrb	r2, [r2, #30]
 8005810:	2a00      	cmp	r2, #0
 8005812:	d102      	bne.n	800581a <ETH_SetMACConfig+0x92>
 8005814:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005818:	e000      	b.n	800581c <ETH_SetMACConfig+0x94>
 800581a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800581c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	7fdb      	ldrb	r3, [r3, #31]
 8005822:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005824:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	f892 2020 	ldrb.w	r2, [r2, #32]
 800582c:	2a00      	cmp	r2, #0
 800582e:	d102      	bne.n	8005836 <ETH_SetMACConfig+0xae>
 8005830:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005834:	e000      	b.n	8005838 <ETH_SetMACConfig+0xb0>
 8005836:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8005838:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800583e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005846:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8005848:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 800584e:	4313      	orrs	r3, r2
 8005850:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	4b56      	ldr	r3, [pc, #344]	; (80059b4 <ETH_SetMACConfig+0x22c>)
 800585a:	4013      	ands	r3, r2
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	6812      	ldr	r2, [r2, #0]
 8005860:	68f9      	ldr	r1, [r7, #12]
 8005862:	430b      	orrs	r3, r1
 8005864:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800586a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005872:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8005874:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800587c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800587e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005886:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8005888:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005890:	2a00      	cmp	r2, #0
 8005892:	d102      	bne.n	800589a <ETH_SetMACConfig+0x112>
 8005894:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005898:	e000      	b.n	800589c <ETH_SetMACConfig+0x114>
 800589a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800589c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80058a2:	4313      	orrs	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	685a      	ldr	r2, [r3, #4]
 80058ac:	4b42      	ldr	r3, [pc, #264]	; (80059b8 <ETH_SetMACConfig+0x230>)
 80058ae:	4013      	ands	r3, r2
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	6812      	ldr	r2, [r2, #0]
 80058b4:	68f9      	ldr	r1, [r7, #12]
 80058b6:	430b      	orrs	r3, r1
 80058b8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058c0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80058c6:	4313      	orrs	r3, r2
 80058c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68da      	ldr	r2, [r3, #12]
 80058d0:	4b3a      	ldr	r3, [pc, #232]	; (80059bc <ETH_SetMACConfig+0x234>)
 80058d2:	4013      	ands	r3, r2
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	6812      	ldr	r2, [r2, #0]
 80058d8:	68f9      	ldr	r1, [r7, #12]
 80058da:	430b      	orrs	r3, r1
 80058dc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80058e4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80058ea:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80058f2:	2a00      	cmp	r2, #0
 80058f4:	d101      	bne.n	80058fa <ETH_SetMACConfig+0x172>
 80058f6:	2280      	movs	r2, #128	; 0x80
 80058f8:	e000      	b.n	80058fc <ETH_SetMACConfig+0x174>
 80058fa:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80058fc:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005902:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005904:	4313      	orrs	r3, r2
 8005906:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800590e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8005912:	4013      	ands	r3, r2
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	6812      	ldr	r2, [r2, #0]
 8005918:	68f9      	ldr	r1, [r7, #12]
 800591a:	430b      	orrs	r3, r1
 800591c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005924:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800592c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800592e:	4313      	orrs	r3, r2
 8005930:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800593a:	f023 0103 	bic.w	r1, r3, #3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	430a      	orrs	r2, r1
 8005946:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005952:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	430a      	orrs	r2, r1
 8005960:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005968:	683a      	ldr	r2, [r7, #0]
 800596a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800596e:	2a00      	cmp	r2, #0
 8005970:	d101      	bne.n	8005976 <ETH_SetMACConfig+0x1ee>
 8005972:	2240      	movs	r2, #64	; 0x40
 8005974:	e000      	b.n	8005978 <ETH_SetMACConfig+0x1f0>
 8005976:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005978:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005980:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005982:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800598a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800598c:	4313      	orrs	r3, r2
 800598e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005998:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80059a8:	bf00      	nop
 80059aa:	3714      	adds	r7, #20
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr
 80059b4:	00048083 	.word	0x00048083
 80059b8:	c0f88000 	.word	0xc0f88000
 80059bc:	fffffef0 	.word	0xfffffef0

080059c0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	4b38      	ldr	r3, [pc, #224]	; (8005ab8 <ETH_SetDMAConfig+0xf8>)
 80059d6:	4013      	ands	r3, r2
 80059d8:	683a      	ldr	r2, [r7, #0]
 80059da:	6812      	ldr	r2, [r2, #0]
 80059dc:	6879      	ldr	r1, [r7, #4]
 80059de:	6809      	ldr	r1, [r1, #0]
 80059e0:	431a      	orrs	r2, r3
 80059e2:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80059e6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	791b      	ldrb	r3, [r3, #4]
 80059ec:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80059f2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	7b1b      	ldrb	r3, [r3, #12]
 80059f8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	f241 0304 	movw	r3, #4100	; 0x1004
 8005a06:	4413      	add	r3, r2
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	4b2c      	ldr	r3, [pc, #176]	; (8005abc <ETH_SetDMAConfig+0xfc>)
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	6811      	ldr	r1, [r2, #0]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	431a      	orrs	r2, r3
 8005a16:	f241 0304 	movw	r3, #4100	; 0x1004
 8005a1a:	440b      	add	r3, r1
 8005a1c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	7b5b      	ldrb	r3, [r3, #13]
 8005a22:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	4b22      	ldr	r3, [pc, #136]	; (8005ac0 <ETH_SetDMAConfig+0x100>)
 8005a38:	4013      	ands	r3, r2
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	6811      	ldr	r1, [r2, #0]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	431a      	orrs	r2, r3
 8005a42:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8005a46:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	7d1b      	ldrb	r3, [r3, #20]
 8005a50:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005a52:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	7f5b      	ldrb	r3, [r3, #29]
 8005a58:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	f241 1304 	movw	r3, #4356	; 0x1104
 8005a66:	4413      	add	r3, r2
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	4b16      	ldr	r3, [pc, #88]	; (8005ac4 <ETH_SetDMAConfig+0x104>)
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	6811      	ldr	r1, [r2, #0]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	431a      	orrs	r2, r3
 8005a76:	f241 1304 	movw	r3, #4356	; 0x1104
 8005a7a:	440b      	add	r3, r1
 8005a7c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	7f1b      	ldrb	r3, [r3, #28]
 8005a82:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	f241 1308 	movw	r3, #4360	; 0x1108
 8005a94:	4413      	add	r3, r2
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	4b0b      	ldr	r3, [pc, #44]	; (8005ac8 <ETH_SetDMAConfig+0x108>)
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	6811      	ldr	r1, [r2, #0]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	f241 1308 	movw	r3, #4360	; 0x1108
 8005aa8:	440b      	add	r3, r1
 8005aaa:	601a      	str	r2, [r3, #0]
}
 8005aac:	bf00      	nop
 8005aae:	3714      	adds	r7, #20
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr
 8005ab8:	ffff87fd 	.word	0xffff87fd
 8005abc:	ffff2ffe 	.word	0xffff2ffe
 8005ac0:	fffec000 	.word	0xfffec000
 8005ac4:	ffc0efef 	.word	0xffc0efef
 8005ac8:	7fc0ffff 	.word	0x7fc0ffff

08005acc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b0a4      	sub	sp, #144	; 0x90
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005ada:	2300      	movs	r3, #0
 8005adc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005aea:	2301      	movs	r3, #1
 8005aec:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005af0:	2301      	movs	r3, #1
 8005af2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005af6:	2301      	movs	r3, #1
 8005af8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005afc:	2300      	movs	r3, #0
 8005afe:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005b02:	2301      	movs	r3, #1
 8005b04:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005b08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b0c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005b14:	2300      	movs	r3, #0
 8005b16:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005b24:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005b28:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005b30:	2300      	movs	r3, #0
 8005b32:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005b34:	2301      	movs	r3, #1
 8005b36:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005b40:	2300      	movs	r3, #0
 8005b42:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005b46:	2300      	movs	r3, #0
 8005b48:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005b52:	2300      	movs	r3, #0
 8005b54:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005b64:	2320      	movs	r3, #32
 8005b66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005b70:	2300      	movs	r3, #0
 8005b72:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005b76:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8005b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005b7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005b80:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005b82:	2300      	movs	r3, #0
 8005b84:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005b88:	2302      	movs	r3, #2
 8005b8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005b94:	2300      	movs	r3, #0
 8005b96:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005baa:	2301      	movs	r3, #1
 8005bac:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005bb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7ff fde6 	bl	8005788 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005bd6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005bda:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005be0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005be4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005be6:	2300      	movs	r3, #0
 8005be8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8005bec:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005bf0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005bf2:	f107 0308 	add.w	r3, r7, #8
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f7ff fee1 	bl	80059c0 <ETH_SetDMAConfig>
}
 8005bfe:	bf00      	nop
 8005c00:	3790      	adds	r7, #144	; 0x90
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
	...

08005c08 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005c18:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005c20:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005c22:	f003 f977 	bl	8008f14 <HAL_RCC_GetHCLKFreq>
 8005c26:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	4a1e      	ldr	r2, [pc, #120]	; (8005ca4 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d908      	bls.n	8005c42 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	4a1d      	ldr	r2, [pc, #116]	; (8005ca8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d804      	bhi.n	8005c42 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c3e:	60fb      	str	r3, [r7, #12]
 8005c40:	e027      	b.n	8005c92 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	4a18      	ldr	r2, [pc, #96]	; (8005ca8 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d908      	bls.n	8005c5c <ETH_MAC_MDIO_ClkConfig+0x54>
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	4a17      	ldr	r2, [pc, #92]	; (8005cac <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d204      	bcs.n	8005c5c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005c58:	60fb      	str	r3, [r7, #12]
 8005c5a:	e01a      	b.n	8005c92 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	4a13      	ldr	r2, [pc, #76]	; (8005cac <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d303      	bcc.n	8005c6c <ETH_MAC_MDIO_ClkConfig+0x64>
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	4a12      	ldr	r2, [pc, #72]	; (8005cb0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d911      	bls.n	8005c90 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	4a10      	ldr	r2, [pc, #64]	; (8005cb0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d908      	bls.n	8005c86 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	4a0f      	ldr	r2, [pc, #60]	; (8005cb4 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d804      	bhi.n	8005c86 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c82:	60fb      	str	r3, [r7, #12]
 8005c84:	e005      	b.n	8005c92 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c8c:	60fb      	str	r3, [r7, #12]
 8005c8e:	e000      	b.n	8005c92 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005c90:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005c9c:	bf00      	nop
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	01312cff 	.word	0x01312cff
 8005ca8:	02160ebf 	.word	0x02160ebf
 8005cac:	03938700 	.word	0x03938700
 8005cb0:	05f5e0ff 	.word	0x05f5e0ff
 8005cb4:	08f0d17f 	.word	0x08f0d17f

08005cb8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	60fb      	str	r3, [r7, #12]
 8005cc4:	e01d      	b.n	8005d02 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	68d9      	ldr	r1, [r3, #12]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	005b      	lsls	r3, r3, #1
 8005cd0:	4413      	add	r3, r2
 8005cd2:	00db      	lsls	r3, r3, #3
 8005cd4:	440b      	add	r3, r1
 8005cd6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	2200      	movs	r2, #0
 8005cee:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005cf0:	68b9      	ldr	r1, [r7, #8]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	3206      	adds	r2, #6
 8005cf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	3301      	adds	r3, #1
 8005d00:	60fb      	str	r3, [r7, #12]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2b03      	cmp	r3, #3
 8005d06:	d9de      	bls.n	8005cc6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	f241 132c 	movw	r3, #4396	; 0x112c
 8005d16:	4413      	add	r3, r2
 8005d18:	2203      	movs	r2, #3
 8005d1a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	68d9      	ldr	r1, [r3, #12]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	f241 1314 	movw	r3, #4372	; 0x1114
 8005d28:	4413      	add	r3, r2
 8005d2a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68da      	ldr	r2, [r3, #12]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8005d38:	601a      	str	r2, [r3, #0]
}
 8005d3a:	bf00      	nop
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b085      	sub	sp, #20
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005d4e:	2300      	movs	r3, #0
 8005d50:	60fb      	str	r3, [r7, #12]
 8005d52:	e024      	b.n	8005d9e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6919      	ldr	r1, [r3, #16]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	005b      	lsls	r3, r3, #1
 8005d5e:	4413      	add	r3, r2
 8005d60:	00db      	lsls	r3, r3, #3
 8005d62:	440b      	add	r3, r1
 8005d64:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	2200      	movs	r2, #0
 8005d76:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	2200      	movs	r2, #0
 8005d82:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	2200      	movs	r2, #0
 8005d88:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	6879      	ldr	r1, [r7, #4]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	3310      	adds	r3, #16
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	440b      	add	r3, r1
 8005d96:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	60fb      	str	r3, [r7, #12]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2b03      	cmp	r3, #3
 8005da2:	d9d7      	bls.n	8005d54 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	f241 1330 	movw	r3, #4400	; 0x1130
 8005dca:	4413      	add	r3, r2
 8005dcc:	2203      	movs	r2, #3
 8005dce:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6919      	ldr	r1, [r3, #16]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	f241 131c 	movw	r3, #4380	; 0x111c
 8005ddc:	4413      	add	r3, r2
 8005dde:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	f241 1328 	movw	r3, #4392	; 0x1128
 8005df0:	4413      	add	r3, r2
 8005df2:	6019      	str	r1, [r3, #0]
}
 8005df4:	bf00      	nop
 8005df6:	3714      	adds	r7, #20
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b089      	sub	sp, #36	; 0x24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005e0e:	4b89      	ldr	r3, [pc, #548]	; (8006034 <HAL_GPIO_Init+0x234>)
 8005e10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e12:	e194      	b.n	800613e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	2101      	movs	r1, #1
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e20:	4013      	ands	r3, r2
 8005e22:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f000 8186 	beq.w	8006138 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d00b      	beq.n	8005e4c <HAL_GPIO_Init+0x4c>
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d007      	beq.n	8005e4c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005e40:	2b11      	cmp	r3, #17
 8005e42:	d003      	beq.n	8005e4c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	2b12      	cmp	r3, #18
 8005e4a:	d130      	bne.n	8005eae <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	005b      	lsls	r3, r3, #1
 8005e56:	2203      	movs	r2, #3
 8005e58:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5c:	43db      	mvns	r3, r3
 8005e5e:	69ba      	ldr	r2, [r7, #24]
 8005e60:	4013      	ands	r3, r2
 8005e62:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	68da      	ldr	r2, [r3, #12]
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	005b      	lsls	r3, r3, #1
 8005e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e70:	69ba      	ldr	r2, [r7, #24]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e82:	2201      	movs	r2, #1
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8a:	43db      	mvns	r3, r3
 8005e8c:	69ba      	ldr	r2, [r7, #24]
 8005e8e:	4013      	ands	r3, r2
 8005e90:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	091b      	lsrs	r3, r3, #4
 8005e98:	f003 0201 	and.w	r2, r3, #1
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea2:	69ba      	ldr	r2, [r7, #24]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	69ba      	ldr	r2, [r7, #24]
 8005eac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	005b      	lsls	r3, r3, #1
 8005eb8:	2203      	movs	r2, #3
 8005eba:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebe:	43db      	mvns	r3, r3
 8005ec0:	69ba      	ldr	r2, [r7, #24]
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	689a      	ldr	r2, [r3, #8]
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	005b      	lsls	r3, r3, #1
 8005ece:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed2:	69ba      	ldr	r2, [r7, #24]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	69ba      	ldr	r2, [r7, #24]
 8005edc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d003      	beq.n	8005eee <HAL_GPIO_Init+0xee>
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	2b12      	cmp	r3, #18
 8005eec:	d123      	bne.n	8005f36 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	08da      	lsrs	r2, r3, #3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	3208      	adds	r2, #8
 8005ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	f003 0307 	and.w	r3, r3, #7
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	220f      	movs	r2, #15
 8005f06:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0a:	43db      	mvns	r3, r3
 8005f0c:	69ba      	ldr	r2, [r7, #24]
 8005f0e:	4013      	ands	r3, r2
 8005f10:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	691a      	ldr	r2, [r3, #16]
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	f003 0307 	and.w	r3, r3, #7
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f22:	69ba      	ldr	r2, [r7, #24]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	08da      	lsrs	r2, r3, #3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	3208      	adds	r2, #8
 8005f30:	69b9      	ldr	r1, [r7, #24]
 8005f32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	005b      	lsls	r3, r3, #1
 8005f40:	2203      	movs	r2, #3
 8005f42:	fa02 f303 	lsl.w	r3, r2, r3
 8005f46:	43db      	mvns	r3, r3
 8005f48:	69ba      	ldr	r2, [r7, #24]
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f003 0203 	and.w	r2, r3, #3
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	005b      	lsls	r3, r3, #1
 8005f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	69ba      	ldr	r2, [r7, #24]
 8005f68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f000 80e0 	beq.w	8006138 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f78:	4b2f      	ldr	r3, [pc, #188]	; (8006038 <HAL_GPIO_Init+0x238>)
 8005f7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f7e:	4a2e      	ldr	r2, [pc, #184]	; (8006038 <HAL_GPIO_Init+0x238>)
 8005f80:	f043 0302 	orr.w	r3, r3, #2
 8005f84:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005f88:	4b2b      	ldr	r3, [pc, #172]	; (8006038 <HAL_GPIO_Init+0x238>)
 8005f8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f8e:	f003 0302 	and.w	r3, r3, #2
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f96:	4a29      	ldr	r2, [pc, #164]	; (800603c <HAL_GPIO_Init+0x23c>)
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	089b      	lsrs	r3, r3, #2
 8005f9c:	3302      	adds	r3, #2
 8005f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	f003 0303 	and.w	r3, r3, #3
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	220f      	movs	r2, #15
 8005fae:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb2:	43db      	mvns	r3, r3
 8005fb4:	69ba      	ldr	r2, [r7, #24]
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a20      	ldr	r2, [pc, #128]	; (8006040 <HAL_GPIO_Init+0x240>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d052      	beq.n	8006068 <HAL_GPIO_Init+0x268>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a1f      	ldr	r2, [pc, #124]	; (8006044 <HAL_GPIO_Init+0x244>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d031      	beq.n	800602e <HAL_GPIO_Init+0x22e>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a1e      	ldr	r2, [pc, #120]	; (8006048 <HAL_GPIO_Init+0x248>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d02b      	beq.n	800602a <HAL_GPIO_Init+0x22a>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a1d      	ldr	r2, [pc, #116]	; (800604c <HAL_GPIO_Init+0x24c>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d025      	beq.n	8006026 <HAL_GPIO_Init+0x226>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a1c      	ldr	r2, [pc, #112]	; (8006050 <HAL_GPIO_Init+0x250>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d01f      	beq.n	8006022 <HAL_GPIO_Init+0x222>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a1b      	ldr	r2, [pc, #108]	; (8006054 <HAL_GPIO_Init+0x254>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d019      	beq.n	800601e <HAL_GPIO_Init+0x21e>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a1a      	ldr	r2, [pc, #104]	; (8006058 <HAL_GPIO_Init+0x258>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d013      	beq.n	800601a <HAL_GPIO_Init+0x21a>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a19      	ldr	r2, [pc, #100]	; (800605c <HAL_GPIO_Init+0x25c>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d00d      	beq.n	8006016 <HAL_GPIO_Init+0x216>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a18      	ldr	r2, [pc, #96]	; (8006060 <HAL_GPIO_Init+0x260>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d007      	beq.n	8006012 <HAL_GPIO_Init+0x212>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a17      	ldr	r2, [pc, #92]	; (8006064 <HAL_GPIO_Init+0x264>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d101      	bne.n	800600e <HAL_GPIO_Init+0x20e>
 800600a:	2309      	movs	r3, #9
 800600c:	e02d      	b.n	800606a <HAL_GPIO_Init+0x26a>
 800600e:	230a      	movs	r3, #10
 8006010:	e02b      	b.n	800606a <HAL_GPIO_Init+0x26a>
 8006012:	2308      	movs	r3, #8
 8006014:	e029      	b.n	800606a <HAL_GPIO_Init+0x26a>
 8006016:	2307      	movs	r3, #7
 8006018:	e027      	b.n	800606a <HAL_GPIO_Init+0x26a>
 800601a:	2306      	movs	r3, #6
 800601c:	e025      	b.n	800606a <HAL_GPIO_Init+0x26a>
 800601e:	2305      	movs	r3, #5
 8006020:	e023      	b.n	800606a <HAL_GPIO_Init+0x26a>
 8006022:	2304      	movs	r3, #4
 8006024:	e021      	b.n	800606a <HAL_GPIO_Init+0x26a>
 8006026:	2303      	movs	r3, #3
 8006028:	e01f      	b.n	800606a <HAL_GPIO_Init+0x26a>
 800602a:	2302      	movs	r3, #2
 800602c:	e01d      	b.n	800606a <HAL_GPIO_Init+0x26a>
 800602e:	2301      	movs	r3, #1
 8006030:	e01b      	b.n	800606a <HAL_GPIO_Init+0x26a>
 8006032:	bf00      	nop
 8006034:	58000080 	.word	0x58000080
 8006038:	58024400 	.word	0x58024400
 800603c:	58000400 	.word	0x58000400
 8006040:	58020000 	.word	0x58020000
 8006044:	58020400 	.word	0x58020400
 8006048:	58020800 	.word	0x58020800
 800604c:	58020c00 	.word	0x58020c00
 8006050:	58021000 	.word	0x58021000
 8006054:	58021400 	.word	0x58021400
 8006058:	58021800 	.word	0x58021800
 800605c:	58021c00 	.word	0x58021c00
 8006060:	58022000 	.word	0x58022000
 8006064:	58022400 	.word	0x58022400
 8006068:	2300      	movs	r3, #0
 800606a:	69fa      	ldr	r2, [r7, #28]
 800606c:	f002 0203 	and.w	r2, r2, #3
 8006070:	0092      	lsls	r2, r2, #2
 8006072:	4093      	lsls	r3, r2
 8006074:	69ba      	ldr	r2, [r7, #24]
 8006076:	4313      	orrs	r3, r2
 8006078:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800607a:	4938      	ldr	r1, [pc, #224]	; (800615c <HAL_GPIO_Init+0x35c>)
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	089b      	lsrs	r3, r3, #2
 8006080:	3302      	adds	r3, #2
 8006082:	69ba      	ldr	r2, [r7, #24]
 8006084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	43db      	mvns	r3, r3
 8006092:	69ba      	ldr	r2, [r7, #24]
 8006094:	4013      	ands	r3, r2
 8006096:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d003      	beq.n	80060ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80060a4:	69ba      	ldr	r2, [r7, #24]
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	69ba      	ldr	r2, [r7, #24]
 80060b0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	43db      	mvns	r3, r3
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	4013      	ands	r3, r2
 80060c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d003      	beq.n	80060d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80060ce:	69ba      	ldr	r2, [r7, #24]
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	69ba      	ldr	r2, [r7, #24]
 80060da:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80060dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	43db      	mvns	r3, r3
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	4013      	ands	r3, r2
 80060ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80060fa:	69ba      	ldr	r2, [r7, #24]
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	4313      	orrs	r3, r2
 8006100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006102:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800610a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	43db      	mvns	r3, r3
 8006116:	69ba      	ldr	r2, [r7, #24]
 8006118:	4013      	ands	r3, r2
 800611a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d003      	beq.n	8006130 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006128:	69ba      	ldr	r2, [r7, #24]
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	4313      	orrs	r3, r2
 800612e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006130:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	3301      	adds	r3, #1
 800613c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	fa22 f303 	lsr.w	r3, r2, r3
 8006148:	2b00      	cmp	r3, #0
 800614a:	f47f ae63 	bne.w	8005e14 <HAL_GPIO_Init+0x14>
  }
}
 800614e:	bf00      	nop
 8006150:	bf00      	nop
 8006152:	3724      	adds	r7, #36	; 0x24
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr
 800615c:	58000400 	.word	0x58000400

08006160 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	460b      	mov	r3, r1
 800616a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	691a      	ldr	r2, [r3, #16]
 8006170:	887b      	ldrh	r3, [r7, #2]
 8006172:	4013      	ands	r3, r2
 8006174:	2b00      	cmp	r3, #0
 8006176:	d002      	beq.n	800617e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006178:	2301      	movs	r3, #1
 800617a:	73fb      	strb	r3, [r7, #15]
 800617c:	e001      	b.n	8006182 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800617e:	2300      	movs	r3, #0
 8006180:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006182:	7bfb      	ldrb	r3, [r7, #15]
}
 8006184:	4618      	mov	r0, r3
 8006186:	3714      	adds	r7, #20
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	460b      	mov	r3, r1
 800619a:	807b      	strh	r3, [r7, #2]
 800619c:	4613      	mov	r3, r2
 800619e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80061a0:	787b      	ldrb	r3, [r7, #1]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d003      	beq.n	80061ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061a6:	887a      	ldrh	r2, [r7, #2]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80061ac:	e003      	b.n	80061b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80061ae:	887b      	ldrh	r3, [r7, #2]
 80061b0:	041a      	lsls	r2, r3, #16
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	619a      	str	r2, [r3, #24]
}
 80061b6:	bf00      	nop
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b082      	sub	sp, #8
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	4603      	mov	r3, r0
 80061ca:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80061cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80061d4:	88fb      	ldrh	r3, [r7, #6]
 80061d6:	4013      	ands	r3, r2
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d008      	beq.n	80061ee <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80061dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061e0:	88fb      	ldrh	r3, [r7, #6]
 80061e2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80061e6:	88fb      	ldrh	r3, [r7, #6]
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7fb fd49 	bl	8001c80 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80061ee:	bf00      	nop
 80061f0:	3708      	adds	r7, #8
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80061f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061f8:	b08f      	sub	sp, #60	; 0x3c
 80061fa:	af0a      	add	r7, sp, #40	; 0x28
 80061fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d101      	bne.n	8006208 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e054      	b.n	80062b2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8006214:	b2db      	uxtb	r3, r3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d106      	bne.n	8006228 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f015 ff2c 	bl	801c080 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2203      	movs	r2, #3
 800622c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006238:	2b00      	cmp	r3, #0
 800623a:	d102      	bne.n	8006242 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4618      	mov	r0, r3
 8006248:	f007 fe0b 	bl	800de62 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	603b      	str	r3, [r7, #0]
 8006252:	687e      	ldr	r6, [r7, #4]
 8006254:	466d      	mov	r5, sp
 8006256:	f106 0410 	add.w	r4, r6, #16
 800625a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800625c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800625e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006260:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006262:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006266:	e885 0003 	stmia.w	r5, {r0, r1}
 800626a:	1d33      	adds	r3, r6, #4
 800626c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800626e:	6838      	ldr	r0, [r7, #0]
 8006270:	f007 fd78 	bl	800dd64 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2101      	movs	r1, #1
 800627a:	4618      	mov	r0, r3
 800627c:	f007 fe02 	bl	800de84 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	603b      	str	r3, [r7, #0]
 8006286:	687e      	ldr	r6, [r7, #4]
 8006288:	466d      	mov	r5, sp
 800628a:	f106 0410 	add.w	r4, r6, #16
 800628e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006290:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006292:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006294:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006296:	e894 0003 	ldmia.w	r4, {r0, r1}
 800629a:	e885 0003 	stmia.w	r5, {r0, r1}
 800629e:	1d33      	adds	r3, r6, #4
 80062a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062a2:	6838      	ldr	r0, [r7, #0]
 80062a4:	f007 ff4c 	bl	800e140 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3714      	adds	r7, #20
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080062ba <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80062ba:	b590      	push	{r4, r7, lr}
 80062bc:	b089      	sub	sp, #36	; 0x24
 80062be:	af04      	add	r7, sp, #16
 80062c0:	6078      	str	r0, [r7, #4]
 80062c2:	4608      	mov	r0, r1
 80062c4:	4611      	mov	r1, r2
 80062c6:	461a      	mov	r2, r3
 80062c8:	4603      	mov	r3, r0
 80062ca:	70fb      	strb	r3, [r7, #3]
 80062cc:	460b      	mov	r3, r1
 80062ce:	70bb      	strb	r3, [r7, #2]
 80062d0:	4613      	mov	r3, r2
 80062d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d101      	bne.n	80062e2 <HAL_HCD_HC_Init+0x28>
 80062de:	2302      	movs	r3, #2
 80062e0:	e076      	b.n	80063d0 <HAL_HCD_HC_Init+0x116>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80062ea:	78fb      	ldrb	r3, [r7, #3]
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	212c      	movs	r1, #44	; 0x2c
 80062f0:	fb01 f303 	mul.w	r3, r1, r3
 80062f4:	4413      	add	r3, r2
 80062f6:	333d      	adds	r3, #61	; 0x3d
 80062f8:	2200      	movs	r2, #0
 80062fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80062fc:	78fb      	ldrb	r3, [r7, #3]
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	212c      	movs	r1, #44	; 0x2c
 8006302:	fb01 f303 	mul.w	r3, r1, r3
 8006306:	4413      	add	r3, r2
 8006308:	3338      	adds	r3, #56	; 0x38
 800630a:	787a      	ldrb	r2, [r7, #1]
 800630c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800630e:	78fb      	ldrb	r3, [r7, #3]
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	212c      	movs	r1, #44	; 0x2c
 8006314:	fb01 f303 	mul.w	r3, r1, r3
 8006318:	4413      	add	r3, r2
 800631a:	3340      	adds	r3, #64	; 0x40
 800631c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800631e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006320:	78fb      	ldrb	r3, [r7, #3]
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	212c      	movs	r1, #44	; 0x2c
 8006326:	fb01 f303 	mul.w	r3, r1, r3
 800632a:	4413      	add	r3, r2
 800632c:	3339      	adds	r3, #57	; 0x39
 800632e:	78fa      	ldrb	r2, [r7, #3]
 8006330:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8006332:	78fb      	ldrb	r3, [r7, #3]
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	212c      	movs	r1, #44	; 0x2c
 8006338:	fb01 f303 	mul.w	r3, r1, r3
 800633c:	4413      	add	r3, r2
 800633e:	333f      	adds	r3, #63	; 0x3f
 8006340:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8006344:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8006346:	78fb      	ldrb	r3, [r7, #3]
 8006348:	78ba      	ldrb	r2, [r7, #2]
 800634a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800634e:	b2d0      	uxtb	r0, r2
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	212c      	movs	r1, #44	; 0x2c
 8006354:	fb01 f303 	mul.w	r3, r1, r3
 8006358:	4413      	add	r3, r2
 800635a:	333a      	adds	r3, #58	; 0x3a
 800635c:	4602      	mov	r2, r0
 800635e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8006360:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006364:	2b00      	cmp	r3, #0
 8006366:	da09      	bge.n	800637c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8006368:	78fb      	ldrb	r3, [r7, #3]
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	212c      	movs	r1, #44	; 0x2c
 800636e:	fb01 f303 	mul.w	r3, r1, r3
 8006372:	4413      	add	r3, r2
 8006374:	333b      	adds	r3, #59	; 0x3b
 8006376:	2201      	movs	r2, #1
 8006378:	701a      	strb	r2, [r3, #0]
 800637a:	e008      	b.n	800638e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800637c:	78fb      	ldrb	r3, [r7, #3]
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	212c      	movs	r1, #44	; 0x2c
 8006382:	fb01 f303 	mul.w	r3, r1, r3
 8006386:	4413      	add	r3, r2
 8006388:	333b      	adds	r3, #59	; 0x3b
 800638a:	2200      	movs	r2, #0
 800638c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800638e:	78fb      	ldrb	r3, [r7, #3]
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	212c      	movs	r1, #44	; 0x2c
 8006394:	fb01 f303 	mul.w	r3, r1, r3
 8006398:	4413      	add	r3, r2
 800639a:	333c      	adds	r3, #60	; 0x3c
 800639c:	f897 2020 	ldrb.w	r2, [r7, #32]
 80063a0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6818      	ldr	r0, [r3, #0]
 80063a6:	787c      	ldrb	r4, [r7, #1]
 80063a8:	78ba      	ldrb	r2, [r7, #2]
 80063aa:	78f9      	ldrb	r1, [r7, #3]
 80063ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80063ae:	9302      	str	r3, [sp, #8]
 80063b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80063b4:	9301      	str	r3, [sp, #4]
 80063b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80063ba:	9300      	str	r3, [sp, #0]
 80063bc:	4623      	mov	r3, r4
 80063be:	f008 f811 	bl	800e3e4 <USB_HC_Init>
 80063c2:	4603      	mov	r3, r0
 80063c4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80063ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3714      	adds	r7, #20
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd90      	pop	{r4, r7, pc}

080063d8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	460b      	mov	r3, r1
 80063e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80063e4:	2300      	movs	r3, #0
 80063e6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d101      	bne.n	80063f6 <HAL_HCD_HC_Halt+0x1e>
 80063f2:	2302      	movs	r3, #2
 80063f4:	e00f      	b.n	8006416 <HAL_HCD_HC_Halt+0x3e>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2201      	movs	r2, #1
 80063fa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	78fa      	ldrb	r2, [r7, #3]
 8006404:	4611      	mov	r1, r2
 8006406:	4618      	mov	r0, r3
 8006408:	f008 fa4d 	bl	800e8a6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8006414:	7bfb      	ldrb	r3, [r7, #15]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
	...

08006420 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	4608      	mov	r0, r1
 800642a:	4611      	mov	r1, r2
 800642c:	461a      	mov	r2, r3
 800642e:	4603      	mov	r3, r0
 8006430:	70fb      	strb	r3, [r7, #3]
 8006432:	460b      	mov	r3, r1
 8006434:	70bb      	strb	r3, [r7, #2]
 8006436:	4613      	mov	r3, r2
 8006438:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800643a:	78fb      	ldrb	r3, [r7, #3]
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	212c      	movs	r1, #44	; 0x2c
 8006440:	fb01 f303 	mul.w	r3, r1, r3
 8006444:	4413      	add	r3, r2
 8006446:	333b      	adds	r3, #59	; 0x3b
 8006448:	78ba      	ldrb	r2, [r7, #2]
 800644a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800644c:	78fb      	ldrb	r3, [r7, #3]
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	212c      	movs	r1, #44	; 0x2c
 8006452:	fb01 f303 	mul.w	r3, r1, r3
 8006456:	4413      	add	r3, r2
 8006458:	333f      	adds	r3, #63	; 0x3f
 800645a:	787a      	ldrb	r2, [r7, #1]
 800645c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800645e:	7c3b      	ldrb	r3, [r7, #16]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d112      	bne.n	800648a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8006464:	78fb      	ldrb	r3, [r7, #3]
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	212c      	movs	r1, #44	; 0x2c
 800646a:	fb01 f303 	mul.w	r3, r1, r3
 800646e:	4413      	add	r3, r2
 8006470:	3342      	adds	r3, #66	; 0x42
 8006472:	2203      	movs	r2, #3
 8006474:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8006476:	78fb      	ldrb	r3, [r7, #3]
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	212c      	movs	r1, #44	; 0x2c
 800647c:	fb01 f303 	mul.w	r3, r1, r3
 8006480:	4413      	add	r3, r2
 8006482:	333d      	adds	r3, #61	; 0x3d
 8006484:	7f3a      	ldrb	r2, [r7, #28]
 8006486:	701a      	strb	r2, [r3, #0]
 8006488:	e008      	b.n	800649c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800648a:	78fb      	ldrb	r3, [r7, #3]
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	212c      	movs	r1, #44	; 0x2c
 8006490:	fb01 f303 	mul.w	r3, r1, r3
 8006494:	4413      	add	r3, r2
 8006496:	3342      	adds	r3, #66	; 0x42
 8006498:	2202      	movs	r2, #2
 800649a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800649c:	787b      	ldrb	r3, [r7, #1]
 800649e:	2b03      	cmp	r3, #3
 80064a0:	f200 80c6 	bhi.w	8006630 <HAL_HCD_HC_SubmitRequest+0x210>
 80064a4:	a201      	add	r2, pc, #4	; (adr r2, 80064ac <HAL_HCD_HC_SubmitRequest+0x8c>)
 80064a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064aa:	bf00      	nop
 80064ac:	080064bd 	.word	0x080064bd
 80064b0:	0800661d 	.word	0x0800661d
 80064b4:	08006521 	.word	0x08006521
 80064b8:	0800659f 	.word	0x0800659f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80064bc:	7c3b      	ldrb	r3, [r7, #16]
 80064be:	2b01      	cmp	r3, #1
 80064c0:	f040 80b8 	bne.w	8006634 <HAL_HCD_HC_SubmitRequest+0x214>
 80064c4:	78bb      	ldrb	r3, [r7, #2]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f040 80b4 	bne.w	8006634 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80064cc:	8b3b      	ldrh	r3, [r7, #24]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d108      	bne.n	80064e4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80064d2:	78fb      	ldrb	r3, [r7, #3]
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	212c      	movs	r1, #44	; 0x2c
 80064d8:	fb01 f303 	mul.w	r3, r1, r3
 80064dc:	4413      	add	r3, r2
 80064de:	3355      	adds	r3, #85	; 0x55
 80064e0:	2201      	movs	r2, #1
 80064e2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80064e4:	78fb      	ldrb	r3, [r7, #3]
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	212c      	movs	r1, #44	; 0x2c
 80064ea:	fb01 f303 	mul.w	r3, r1, r3
 80064ee:	4413      	add	r3, r2
 80064f0:	3355      	adds	r3, #85	; 0x55
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d109      	bne.n	800650c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80064f8:	78fb      	ldrb	r3, [r7, #3]
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	212c      	movs	r1, #44	; 0x2c
 80064fe:	fb01 f303 	mul.w	r3, r1, r3
 8006502:	4413      	add	r3, r2
 8006504:	3342      	adds	r3, #66	; 0x42
 8006506:	2200      	movs	r2, #0
 8006508:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800650a:	e093      	b.n	8006634 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800650c:	78fb      	ldrb	r3, [r7, #3]
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	212c      	movs	r1, #44	; 0x2c
 8006512:	fb01 f303 	mul.w	r3, r1, r3
 8006516:	4413      	add	r3, r2
 8006518:	3342      	adds	r3, #66	; 0x42
 800651a:	2202      	movs	r2, #2
 800651c:	701a      	strb	r2, [r3, #0]
      break;
 800651e:	e089      	b.n	8006634 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8006520:	78bb      	ldrb	r3, [r7, #2]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d11d      	bne.n	8006562 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006526:	78fb      	ldrb	r3, [r7, #3]
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	212c      	movs	r1, #44	; 0x2c
 800652c:	fb01 f303 	mul.w	r3, r1, r3
 8006530:	4413      	add	r3, r2
 8006532:	3355      	adds	r3, #85	; 0x55
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d109      	bne.n	800654e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800653a:	78fb      	ldrb	r3, [r7, #3]
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	212c      	movs	r1, #44	; 0x2c
 8006540:	fb01 f303 	mul.w	r3, r1, r3
 8006544:	4413      	add	r3, r2
 8006546:	3342      	adds	r3, #66	; 0x42
 8006548:	2200      	movs	r2, #0
 800654a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800654c:	e073      	b.n	8006636 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800654e:	78fb      	ldrb	r3, [r7, #3]
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	212c      	movs	r1, #44	; 0x2c
 8006554:	fb01 f303 	mul.w	r3, r1, r3
 8006558:	4413      	add	r3, r2
 800655a:	3342      	adds	r3, #66	; 0x42
 800655c:	2202      	movs	r2, #2
 800655e:	701a      	strb	r2, [r3, #0]
      break;
 8006560:	e069      	b.n	8006636 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006562:	78fb      	ldrb	r3, [r7, #3]
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	212c      	movs	r1, #44	; 0x2c
 8006568:	fb01 f303 	mul.w	r3, r1, r3
 800656c:	4413      	add	r3, r2
 800656e:	3354      	adds	r3, #84	; 0x54
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d109      	bne.n	800658a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006576:	78fb      	ldrb	r3, [r7, #3]
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	212c      	movs	r1, #44	; 0x2c
 800657c:	fb01 f303 	mul.w	r3, r1, r3
 8006580:	4413      	add	r3, r2
 8006582:	3342      	adds	r3, #66	; 0x42
 8006584:	2200      	movs	r2, #0
 8006586:	701a      	strb	r2, [r3, #0]
      break;
 8006588:	e055      	b.n	8006636 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800658a:	78fb      	ldrb	r3, [r7, #3]
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	212c      	movs	r1, #44	; 0x2c
 8006590:	fb01 f303 	mul.w	r3, r1, r3
 8006594:	4413      	add	r3, r2
 8006596:	3342      	adds	r3, #66	; 0x42
 8006598:	2202      	movs	r2, #2
 800659a:	701a      	strb	r2, [r3, #0]
      break;
 800659c:	e04b      	b.n	8006636 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800659e:	78bb      	ldrb	r3, [r7, #2]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d11d      	bne.n	80065e0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80065a4:	78fb      	ldrb	r3, [r7, #3]
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	212c      	movs	r1, #44	; 0x2c
 80065aa:	fb01 f303 	mul.w	r3, r1, r3
 80065ae:	4413      	add	r3, r2
 80065b0:	3355      	adds	r3, #85	; 0x55
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d109      	bne.n	80065cc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80065b8:	78fb      	ldrb	r3, [r7, #3]
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	212c      	movs	r1, #44	; 0x2c
 80065be:	fb01 f303 	mul.w	r3, r1, r3
 80065c2:	4413      	add	r3, r2
 80065c4:	3342      	adds	r3, #66	; 0x42
 80065c6:	2200      	movs	r2, #0
 80065c8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80065ca:	e034      	b.n	8006636 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80065cc:	78fb      	ldrb	r3, [r7, #3]
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	212c      	movs	r1, #44	; 0x2c
 80065d2:	fb01 f303 	mul.w	r3, r1, r3
 80065d6:	4413      	add	r3, r2
 80065d8:	3342      	adds	r3, #66	; 0x42
 80065da:	2202      	movs	r2, #2
 80065dc:	701a      	strb	r2, [r3, #0]
      break;
 80065de:	e02a      	b.n	8006636 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80065e0:	78fb      	ldrb	r3, [r7, #3]
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	212c      	movs	r1, #44	; 0x2c
 80065e6:	fb01 f303 	mul.w	r3, r1, r3
 80065ea:	4413      	add	r3, r2
 80065ec:	3354      	adds	r3, #84	; 0x54
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d109      	bne.n	8006608 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80065f4:	78fb      	ldrb	r3, [r7, #3]
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	212c      	movs	r1, #44	; 0x2c
 80065fa:	fb01 f303 	mul.w	r3, r1, r3
 80065fe:	4413      	add	r3, r2
 8006600:	3342      	adds	r3, #66	; 0x42
 8006602:	2200      	movs	r2, #0
 8006604:	701a      	strb	r2, [r3, #0]
      break;
 8006606:	e016      	b.n	8006636 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006608:	78fb      	ldrb	r3, [r7, #3]
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	212c      	movs	r1, #44	; 0x2c
 800660e:	fb01 f303 	mul.w	r3, r1, r3
 8006612:	4413      	add	r3, r2
 8006614:	3342      	adds	r3, #66	; 0x42
 8006616:	2202      	movs	r2, #2
 8006618:	701a      	strb	r2, [r3, #0]
      break;
 800661a:	e00c      	b.n	8006636 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800661c:	78fb      	ldrb	r3, [r7, #3]
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	212c      	movs	r1, #44	; 0x2c
 8006622:	fb01 f303 	mul.w	r3, r1, r3
 8006626:	4413      	add	r3, r2
 8006628:	3342      	adds	r3, #66	; 0x42
 800662a:	2200      	movs	r2, #0
 800662c:	701a      	strb	r2, [r3, #0]
      break;
 800662e:	e002      	b.n	8006636 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8006630:	bf00      	nop
 8006632:	e000      	b.n	8006636 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8006634:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8006636:	78fb      	ldrb	r3, [r7, #3]
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	212c      	movs	r1, #44	; 0x2c
 800663c:	fb01 f303 	mul.w	r3, r1, r3
 8006640:	4413      	add	r3, r2
 8006642:	3344      	adds	r3, #68	; 0x44
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8006648:	78fb      	ldrb	r3, [r7, #3]
 800664a:	8b3a      	ldrh	r2, [r7, #24]
 800664c:	6879      	ldr	r1, [r7, #4]
 800664e:	202c      	movs	r0, #44	; 0x2c
 8006650:	fb00 f303 	mul.w	r3, r0, r3
 8006654:	440b      	add	r3, r1
 8006656:	334c      	adds	r3, #76	; 0x4c
 8006658:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800665a:	78fb      	ldrb	r3, [r7, #3]
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	212c      	movs	r1, #44	; 0x2c
 8006660:	fb01 f303 	mul.w	r3, r1, r3
 8006664:	4413      	add	r3, r2
 8006666:	3360      	adds	r3, #96	; 0x60
 8006668:	2200      	movs	r2, #0
 800666a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800666c:	78fb      	ldrb	r3, [r7, #3]
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	212c      	movs	r1, #44	; 0x2c
 8006672:	fb01 f303 	mul.w	r3, r1, r3
 8006676:	4413      	add	r3, r2
 8006678:	3350      	adds	r3, #80	; 0x50
 800667a:	2200      	movs	r2, #0
 800667c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800667e:	78fb      	ldrb	r3, [r7, #3]
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	212c      	movs	r1, #44	; 0x2c
 8006684:	fb01 f303 	mul.w	r3, r1, r3
 8006688:	4413      	add	r3, r2
 800668a:	3339      	adds	r3, #57	; 0x39
 800668c:	78fa      	ldrb	r2, [r7, #3]
 800668e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8006690:	78fb      	ldrb	r3, [r7, #3]
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	212c      	movs	r1, #44	; 0x2c
 8006696:	fb01 f303 	mul.w	r3, r1, r3
 800669a:	4413      	add	r3, r2
 800669c:	3361      	adds	r3, #97	; 0x61
 800669e:	2200      	movs	r2, #0
 80066a0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6818      	ldr	r0, [r3, #0]
 80066a6:	78fb      	ldrb	r3, [r7, #3]
 80066a8:	222c      	movs	r2, #44	; 0x2c
 80066aa:	fb02 f303 	mul.w	r3, r2, r3
 80066ae:	3338      	adds	r3, #56	; 0x38
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	18d1      	adds	r1, r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	461a      	mov	r2, r3
 80066bc:	f007 ffa0 	bl	800e600 <USB_HC_StartXfer>
 80066c0:	4603      	mov	r3, r0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3708      	adds	r7, #8
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop

080066cc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b086      	sub	sp, #24
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f007 fce9 	bl	800e0ba <USB_GetMode>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	f040 80ef 	bne.w	80068ce <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4618      	mov	r0, r3
 80066f6:	f007 fccd 	bl	800e094 <USB_ReadInterrupts>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 80e5 	beq.w	80068cc <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4618      	mov	r0, r3
 8006708:	f007 fcc4 	bl	800e094 <USB_ReadInterrupts>
 800670c:	4603      	mov	r3, r0
 800670e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006712:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006716:	d104      	bne.n	8006722 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006720:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4618      	mov	r0, r3
 8006728:	f007 fcb4 	bl	800e094 <USB_ReadInterrupts>
 800672c:	4603      	mov	r3, r0
 800672e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006732:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006736:	d104      	bne.n	8006742 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006740:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4618      	mov	r0, r3
 8006748:	f007 fca4 	bl	800e094 <USB_ReadInterrupts>
 800674c:	4603      	mov	r3, r0
 800674e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006752:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006756:	d104      	bne.n	8006762 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006760:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4618      	mov	r0, r3
 8006768:	f007 fc94 	bl	800e094 <USB_ReadInterrupts>
 800676c:	4603      	mov	r3, r0
 800676e:	f003 0302 	and.w	r3, r3, #2
 8006772:	2b02      	cmp	r3, #2
 8006774:	d103      	bne.n	800677e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2202      	movs	r2, #2
 800677c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4618      	mov	r0, r3
 8006784:	f007 fc86 	bl	800e094 <USB_ReadInterrupts>
 8006788:	4603      	mov	r3, r0
 800678a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800678e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006792:	d115      	bne.n	80067c0 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800679c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0301 	and.w	r3, r3, #1
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d108      	bne.n	80067c0 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f015 fd14 	bl	801c1dc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2101      	movs	r1, #1
 80067ba:	4618      	mov	r0, r3
 80067bc:	f007 fd76 	bl	800e2ac <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4618      	mov	r0, r3
 80067c6:	f007 fc65 	bl	800e094 <USB_ReadInterrupts>
 80067ca:	4603      	mov	r3, r0
 80067cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067d4:	d102      	bne.n	80067dc <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f001 f9e3 	bl	8007ba2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4618      	mov	r0, r3
 80067e2:	f007 fc57 	bl	800e094 <USB_ReadInterrupts>
 80067e6:	4603      	mov	r3, r0
 80067e8:	f003 0308 	and.w	r3, r3, #8
 80067ec:	2b08      	cmp	r3, #8
 80067ee:	d106      	bne.n	80067fe <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f015 fcd7 	bl	801c1a4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2208      	movs	r2, #8
 80067fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4618      	mov	r0, r3
 8006804:	f007 fc46 	bl	800e094 <USB_ReadInterrupts>
 8006808:	4603      	mov	r3, r0
 800680a:	f003 0310 	and.w	r3, r3, #16
 800680e:	2b10      	cmp	r3, #16
 8006810:	d101      	bne.n	8006816 <HAL_HCD_IRQHandler+0x14a>
 8006812:	2301      	movs	r3, #1
 8006814:	e000      	b.n	8006818 <HAL_HCD_IRQHandler+0x14c>
 8006816:	2300      	movs	r3, #0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d012      	beq.n	8006842 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	699a      	ldr	r2, [r3, #24]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f022 0210 	bic.w	r2, r2, #16
 800682a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f001 f8e6 	bl	80079fe <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	699a      	ldr	r2, [r3, #24]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f042 0210 	orr.w	r2, r2, #16
 8006840:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4618      	mov	r0, r3
 8006848:	f007 fc24 	bl	800e094 <USB_ReadInterrupts>
 800684c:	4603      	mov	r3, r0
 800684e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006852:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006856:	d13a      	bne.n	80068ce <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4618      	mov	r0, r3
 800685e:	f008 f811 	bl	800e884 <USB_HC_ReadInterrupt>
 8006862:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006864:	2300      	movs	r3, #0
 8006866:	617b      	str	r3, [r7, #20]
 8006868:	e025      	b.n	80068b6 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f003 030f 	and.w	r3, r3, #15
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	fa22 f303 	lsr.w	r3, r2, r3
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	2b00      	cmp	r3, #0
 800687c:	d018      	beq.n	80068b0 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	015a      	lsls	r2, r3, #5
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	4413      	add	r3, r2
 8006886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006894:	d106      	bne.n	80068a4 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	b2db      	uxtb	r3, r3
 800689a:	4619      	mov	r1, r3
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 f88f 	bl	80069c0 <HCD_HC_IN_IRQHandler>
 80068a2:	e005      	b.n	80068b0 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	4619      	mov	r1, r3
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 fcaa 	bl	8007204 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	3301      	adds	r3, #1
 80068b4:	617b      	str	r3, [r7, #20]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d3d4      	bcc.n	800686a <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80068c8:	615a      	str	r2, [r3, #20]
 80068ca:	e000      	b.n	80068ce <HAL_HCD_IRQHandler+0x202>
      return;
 80068cc:	bf00      	nop
    }
  }
}
 80068ce:	3718      	adds	r7, #24
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d101      	bne.n	80068ea <HAL_HCD_Start+0x16>
 80068e6:	2302      	movs	r3, #2
 80068e8:	e013      	b.n	8006912 <HAL_HCD_Start+0x3e>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4618      	mov	r0, r3
 80068f8:	f007 faa2 	bl	800de40 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2101      	movs	r1, #1
 8006902:	4618      	mov	r0, r3
 8006904:	f007 fd0c 	bl	800e320 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3708      	adds	r7, #8
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b082      	sub	sp, #8
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006928:	2b01      	cmp	r3, #1
 800692a:	d101      	bne.n	8006930 <HAL_HCD_Stop+0x16>
 800692c:	2302      	movs	r3, #2
 800692e:	e00d      	b.n	800694c <HAL_HCD_Stop+0x32>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4618      	mov	r0, r3
 800693e:	f008 f90b 	bl	800eb58 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3708      	adds	r7, #8
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	460b      	mov	r3, r1
 800695e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8006960:	78fb      	ldrb	r3, [r7, #3]
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	212c      	movs	r1, #44	; 0x2c
 8006966:	fb01 f303 	mul.w	r3, r1, r3
 800696a:	4413      	add	r3, r2
 800696c:	3360      	adds	r3, #96	; 0x60
 800696e:	781b      	ldrb	r3, [r3, #0]
}
 8006970:	4618      	mov	r0, r3
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	460b      	mov	r3, r1
 8006986:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8006988:	78fb      	ldrb	r3, [r7, #3]
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	212c      	movs	r1, #44	; 0x2c
 800698e:	fb01 f303 	mul.w	r3, r1, r3
 8006992:	4413      	add	r3, r2
 8006994:	3350      	adds	r3, #80	; 0x50
 8006996:	681b      	ldr	r3, [r3, #0]
}
 8006998:	4618      	mov	r0, r3
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4618      	mov	r0, r3
 80069b2:	f007 fd05 	bl	800e3c0 <USB_GetCurrentFrame>
 80069b6:	4603      	mov	r3, r0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3708      	adds	r7, #8
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	460b      	mov	r3, r1
 80069ca:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80069d6:	78fb      	ldrb	r3, [r7, #3]
 80069d8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	015a      	lsls	r2, r3, #5
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	4413      	add	r3, r2
 80069e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f003 0304 	and.w	r3, r3, #4
 80069ec:	2b04      	cmp	r3, #4
 80069ee:	d119      	bne.n	8006a24 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	015a      	lsls	r2, r3, #5
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	4413      	add	r3, r2
 80069f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069fc:	461a      	mov	r2, r3
 80069fe:	2304      	movs	r3, #4
 8006a00:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	015a      	lsls	r2, r3, #5
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	4413      	add	r3, r2
 8006a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	0151      	lsls	r1, r2, #5
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	440a      	add	r2, r1
 8006a18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a1c:	f043 0302 	orr.w	r3, r3, #2
 8006a20:	60d3      	str	r3, [r2, #12]
 8006a22:	e101      	b.n	8006c28 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	015a      	lsls	r2, r3, #5
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a3a:	d12b      	bne.n	8006a94 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	015a      	lsls	r2, r3, #5
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	4413      	add	r3, r2
 8006a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a48:	461a      	mov	r2, r3
 8006a4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a4e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	212c      	movs	r1, #44	; 0x2c
 8006a56:	fb01 f303 	mul.w	r3, r1, r3
 8006a5a:	4413      	add	r3, r2
 8006a5c:	3361      	adds	r3, #97	; 0x61
 8006a5e:	2207      	movs	r2, #7
 8006a60:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	015a      	lsls	r2, r3, #5
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	4413      	add	r3, r2
 8006a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	0151      	lsls	r1, r2, #5
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	440a      	add	r2, r1
 8006a78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a7c:	f043 0302 	orr.w	r3, r3, #2
 8006a80:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	b2d2      	uxtb	r2, r2
 8006a8a:	4611      	mov	r1, r2
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f007 ff0a 	bl	800e8a6 <USB_HC_Halt>
 8006a92:	e0c9      	b.n	8006c28 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	015a      	lsls	r2, r3, #5
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	f003 0320 	and.w	r3, r3, #32
 8006aa6:	2b20      	cmp	r3, #32
 8006aa8:	d109      	bne.n	8006abe <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	015a      	lsls	r2, r3, #5
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	2320      	movs	r3, #32
 8006aba:	6093      	str	r3, [r2, #8]
 8006abc:	e0b4      	b.n	8006c28 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	015a      	lsls	r2, r3, #5
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f003 0308 	and.w	r3, r3, #8
 8006ad0:	2b08      	cmp	r3, #8
 8006ad2:	d133      	bne.n	8006b3c <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	015a      	lsls	r2, r3, #5
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	4413      	add	r3, r2
 8006adc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	0151      	lsls	r1, r2, #5
 8006ae6:	693a      	ldr	r2, [r7, #16]
 8006ae8:	440a      	add	r2, r1
 8006aea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006aee:	f043 0302 	orr.w	r3, r3, #2
 8006af2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	212c      	movs	r1, #44	; 0x2c
 8006afa:	fb01 f303 	mul.w	r3, r1, r3
 8006afe:	4413      	add	r3, r2
 8006b00:	3361      	adds	r3, #97	; 0x61
 8006b02:	2205      	movs	r2, #5
 8006b04:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	015a      	lsls	r2, r3, #5
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b12:	461a      	mov	r2, r3
 8006b14:	2310      	movs	r3, #16
 8006b16:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	015a      	lsls	r2, r3, #5
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	4413      	add	r3, r2
 8006b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b24:	461a      	mov	r2, r3
 8006b26:	2308      	movs	r3, #8
 8006b28:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	b2d2      	uxtb	r2, r2
 8006b32:	4611      	mov	r1, r2
 8006b34:	4618      	mov	r0, r3
 8006b36:	f007 feb6 	bl	800e8a6 <USB_HC_Halt>
 8006b3a:	e075      	b.n	8006c28 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	015a      	lsls	r2, r3, #5
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	4413      	add	r3, r2
 8006b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b52:	d134      	bne.n	8006bbe <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	015a      	lsls	r2, r3, #5
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	0151      	lsls	r1, r2, #5
 8006b66:	693a      	ldr	r2, [r7, #16]
 8006b68:	440a      	add	r2, r1
 8006b6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b6e:	f043 0302 	orr.w	r3, r3, #2
 8006b72:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	212c      	movs	r1, #44	; 0x2c
 8006b7a:	fb01 f303 	mul.w	r3, r1, r3
 8006b7e:	4413      	add	r3, r2
 8006b80:	3361      	adds	r3, #97	; 0x61
 8006b82:	2208      	movs	r2, #8
 8006b84:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	015a      	lsls	r2, r3, #5
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b92:	461a      	mov	r2, r3
 8006b94:	2310      	movs	r3, #16
 8006b96:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	015a      	lsls	r2, r3, #5
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006baa:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	b2d2      	uxtb	r2, r2
 8006bb4:	4611      	mov	r1, r2
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f007 fe75 	bl	800e8a6 <USB_HC_Halt>
 8006bbc:	e034      	b.n	8006c28 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	015a      	lsls	r2, r3, #5
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bd0:	2b80      	cmp	r3, #128	; 0x80
 8006bd2:	d129      	bne.n	8006c28 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	015a      	lsls	r2, r3, #5
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	0151      	lsls	r1, r2, #5
 8006be6:	693a      	ldr	r2, [r7, #16]
 8006be8:	440a      	add	r2, r1
 8006bea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bee:	f043 0302 	orr.w	r3, r3, #2
 8006bf2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	212c      	movs	r1, #44	; 0x2c
 8006bfa:	fb01 f303 	mul.w	r3, r1, r3
 8006bfe:	4413      	add	r3, r2
 8006c00:	3361      	adds	r3, #97	; 0x61
 8006c02:	2206      	movs	r2, #6
 8006c04:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	b2d2      	uxtb	r2, r2
 8006c0e:	4611      	mov	r1, r2
 8006c10:	4618      	mov	r0, r3
 8006c12:	f007 fe48 	bl	800e8a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	015a      	lsls	r2, r3, #5
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c22:	461a      	mov	r2, r3
 8006c24:	2380      	movs	r3, #128	; 0x80
 8006c26:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	015a      	lsls	r2, r3, #5
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	4413      	add	r3, r2
 8006c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c3e:	d122      	bne.n	8006c86 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	015a      	lsls	r2, r3, #5
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	4413      	add	r3, r2
 8006c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	0151      	lsls	r1, r2, #5
 8006c52:	693a      	ldr	r2, [r7, #16]
 8006c54:	440a      	add	r2, r1
 8006c56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c5a:	f043 0302 	orr.w	r3, r3, #2
 8006c5e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	b2d2      	uxtb	r2, r2
 8006c68:	4611      	mov	r1, r2
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f007 fe1b 	bl	800e8a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	015a      	lsls	r2, r3, #5
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	4413      	add	r3, r2
 8006c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c82:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8006c84:	e2ba      	b.n	80071fc <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	015a      	lsls	r2, r3, #5
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	f040 811b 	bne.w	8006ed4 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d019      	beq.n	8006cda <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	212c      	movs	r1, #44	; 0x2c
 8006cac:	fb01 f303 	mul.w	r3, r1, r3
 8006cb0:	4413      	add	r3, r2
 8006cb2:	3348      	adds	r3, #72	; 0x48
 8006cb4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	0159      	lsls	r1, r3, #5
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	440b      	add	r3, r1
 8006cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8006cc8:	1ad2      	subs	r2, r2, r3
 8006cca:	6879      	ldr	r1, [r7, #4]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	202c      	movs	r0, #44	; 0x2c
 8006cd0:	fb00 f303 	mul.w	r3, r0, r3
 8006cd4:	440b      	add	r3, r1
 8006cd6:	3350      	adds	r3, #80	; 0x50
 8006cd8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	212c      	movs	r1, #44	; 0x2c
 8006ce0:	fb01 f303 	mul.w	r3, r1, r3
 8006ce4:	4413      	add	r3, r2
 8006ce6:	3361      	adds	r3, #97	; 0x61
 8006ce8:	2201      	movs	r2, #1
 8006cea:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	212c      	movs	r1, #44	; 0x2c
 8006cf2:	fb01 f303 	mul.w	r3, r1, r3
 8006cf6:	4413      	add	r3, r2
 8006cf8:	335c      	adds	r3, #92	; 0x5c
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	015a      	lsls	r2, r3, #5
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	4413      	add	r3, r2
 8006d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	212c      	movs	r1, #44	; 0x2c
 8006d16:	fb01 f303 	mul.w	r3, r1, r3
 8006d1a:	4413      	add	r3, r2
 8006d1c:	333f      	adds	r3, #63	; 0x3f
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d009      	beq.n	8006d38 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	212c      	movs	r1, #44	; 0x2c
 8006d2a:	fb01 f303 	mul.w	r3, r1, r3
 8006d2e:	4413      	add	r3, r2
 8006d30:	333f      	adds	r3, #63	; 0x3f
 8006d32:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d121      	bne.n	8006d7c <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	015a      	lsls	r2, r3, #5
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	4413      	add	r3, r2
 8006d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	0151      	lsls	r1, r2, #5
 8006d4a:	693a      	ldr	r2, [r7, #16]
 8006d4c:	440a      	add	r2, r1
 8006d4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d52:	f043 0302 	orr.w	r3, r3, #2
 8006d56:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	b2d2      	uxtb	r2, r2
 8006d60:	4611      	mov	r1, r2
 8006d62:	4618      	mov	r0, r3
 8006d64:	f007 fd9f 	bl	800e8a6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	015a      	lsls	r2, r3, #5
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	4413      	add	r3, r2
 8006d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d74:	461a      	mov	r2, r3
 8006d76:	2310      	movs	r3, #16
 8006d78:	6093      	str	r3, [r2, #8]
 8006d7a:	e066      	b.n	8006e4a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	212c      	movs	r1, #44	; 0x2c
 8006d82:	fb01 f303 	mul.w	r3, r1, r3
 8006d86:	4413      	add	r3, r2
 8006d88:	333f      	adds	r3, #63	; 0x3f
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	2b03      	cmp	r3, #3
 8006d8e:	d127      	bne.n	8006de0 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	015a      	lsls	r2, r3, #5
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	4413      	add	r3, r2
 8006d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	0151      	lsls	r1, r2, #5
 8006da2:	693a      	ldr	r2, [r7, #16]
 8006da4:	440a      	add	r2, r1
 8006da6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006daa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006dae:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	212c      	movs	r1, #44	; 0x2c
 8006db6:	fb01 f303 	mul.w	r3, r1, r3
 8006dba:	4413      	add	r3, r2
 8006dbc:	3360      	adds	r3, #96	; 0x60
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	b2d9      	uxtb	r1, r3
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	202c      	movs	r0, #44	; 0x2c
 8006dcc:	fb00 f303 	mul.w	r3, r0, r3
 8006dd0:	4413      	add	r3, r2
 8006dd2:	3360      	adds	r3, #96	; 0x60
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f015 fa0d 	bl	801c1f8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006dde:	e034      	b.n	8006e4a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	212c      	movs	r1, #44	; 0x2c
 8006de6:	fb01 f303 	mul.w	r3, r1, r3
 8006dea:	4413      	add	r3, r2
 8006dec:	333f      	adds	r3, #63	; 0x3f
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d12a      	bne.n	8006e4a <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	212c      	movs	r1, #44	; 0x2c
 8006dfa:	fb01 f303 	mul.w	r3, r1, r3
 8006dfe:	4413      	add	r3, r2
 8006e00:	3360      	adds	r3, #96	; 0x60
 8006e02:	2201      	movs	r2, #1
 8006e04:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	212c      	movs	r1, #44	; 0x2c
 8006e0c:	fb01 f303 	mul.w	r3, r1, r3
 8006e10:	4413      	add	r3, r2
 8006e12:	3354      	adds	r3, #84	; 0x54
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	f083 0301 	eor.w	r3, r3, #1
 8006e1a:	b2d8      	uxtb	r0, r3
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	212c      	movs	r1, #44	; 0x2c
 8006e22:	fb01 f303 	mul.w	r3, r1, r3
 8006e26:	4413      	add	r3, r2
 8006e28:	3354      	adds	r3, #84	; 0x54
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	b2d9      	uxtb	r1, r3
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	202c      	movs	r0, #44	; 0x2c
 8006e38:	fb00 f303 	mul.w	r3, r0, r3
 8006e3c:	4413      	add	r3, r2
 8006e3e:	3360      	adds	r3, #96	; 0x60
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	461a      	mov	r2, r3
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f015 f9d7 	bl	801c1f8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d12b      	bne.n	8006eaa <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	212c      	movs	r1, #44	; 0x2c
 8006e58:	fb01 f303 	mul.w	r3, r1, r3
 8006e5c:	4413      	add	r3, r2
 8006e5e:	3348      	adds	r3, #72	; 0x48
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	6879      	ldr	r1, [r7, #4]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	202c      	movs	r0, #44	; 0x2c
 8006e68:	fb00 f202 	mul.w	r2, r0, r2
 8006e6c:	440a      	add	r2, r1
 8006e6e:	3240      	adds	r2, #64	; 0x40
 8006e70:	8812      	ldrh	r2, [r2, #0]
 8006e72:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e76:	f003 0301 	and.w	r3, r3, #1
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	f000 81be 	beq.w	80071fc <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	212c      	movs	r1, #44	; 0x2c
 8006e86:	fb01 f303 	mul.w	r3, r1, r3
 8006e8a:	4413      	add	r3, r2
 8006e8c:	3354      	adds	r3, #84	; 0x54
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	f083 0301 	eor.w	r3, r3, #1
 8006e94:	b2d8      	uxtb	r0, r3
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	212c      	movs	r1, #44	; 0x2c
 8006e9c:	fb01 f303 	mul.w	r3, r1, r3
 8006ea0:	4413      	add	r3, r2
 8006ea2:	3354      	adds	r3, #84	; 0x54
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	701a      	strb	r2, [r3, #0]
}
 8006ea8:	e1a8      	b.n	80071fc <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	212c      	movs	r1, #44	; 0x2c
 8006eb0:	fb01 f303 	mul.w	r3, r1, r3
 8006eb4:	4413      	add	r3, r2
 8006eb6:	3354      	adds	r3, #84	; 0x54
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	f083 0301 	eor.w	r3, r3, #1
 8006ebe:	b2d8      	uxtb	r0, r3
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	212c      	movs	r1, #44	; 0x2c
 8006ec6:	fb01 f303 	mul.w	r3, r1, r3
 8006eca:	4413      	add	r3, r2
 8006ecc:	3354      	adds	r3, #84	; 0x54
 8006ece:	4602      	mov	r2, r0
 8006ed0:	701a      	strb	r2, [r3, #0]
}
 8006ed2:	e193      	b.n	80071fc <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	015a      	lsls	r2, r3, #5
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	4413      	add	r3, r2
 8006edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	f003 0302 	and.w	r3, r3, #2
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	f040 8106 	bne.w	80070f8 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	015a      	lsls	r2, r3, #5
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	0151      	lsls	r1, r2, #5
 8006efe:	693a      	ldr	r2, [r7, #16]
 8006f00:	440a      	add	r2, r1
 8006f02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f06:	f023 0302 	bic.w	r3, r3, #2
 8006f0a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	212c      	movs	r1, #44	; 0x2c
 8006f12:	fb01 f303 	mul.w	r3, r1, r3
 8006f16:	4413      	add	r3, r2
 8006f18:	3361      	adds	r3, #97	; 0x61
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d109      	bne.n	8006f34 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	212c      	movs	r1, #44	; 0x2c
 8006f26:	fb01 f303 	mul.w	r3, r1, r3
 8006f2a:	4413      	add	r3, r2
 8006f2c:	3360      	adds	r3, #96	; 0x60
 8006f2e:	2201      	movs	r2, #1
 8006f30:	701a      	strb	r2, [r3, #0]
 8006f32:	e0c9      	b.n	80070c8 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	212c      	movs	r1, #44	; 0x2c
 8006f3a:	fb01 f303 	mul.w	r3, r1, r3
 8006f3e:	4413      	add	r3, r2
 8006f40:	3361      	adds	r3, #97	; 0x61
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	2b05      	cmp	r3, #5
 8006f46:	d109      	bne.n	8006f5c <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	212c      	movs	r1, #44	; 0x2c
 8006f4e:	fb01 f303 	mul.w	r3, r1, r3
 8006f52:	4413      	add	r3, r2
 8006f54:	3360      	adds	r3, #96	; 0x60
 8006f56:	2205      	movs	r2, #5
 8006f58:	701a      	strb	r2, [r3, #0]
 8006f5a:	e0b5      	b.n	80070c8 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	212c      	movs	r1, #44	; 0x2c
 8006f62:	fb01 f303 	mul.w	r3, r1, r3
 8006f66:	4413      	add	r3, r2
 8006f68:	3361      	adds	r3, #97	; 0x61
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	2b06      	cmp	r3, #6
 8006f6e:	d009      	beq.n	8006f84 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	212c      	movs	r1, #44	; 0x2c
 8006f76:	fb01 f303 	mul.w	r3, r1, r3
 8006f7a:	4413      	add	r3, r2
 8006f7c:	3361      	adds	r3, #97	; 0x61
 8006f7e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006f80:	2b08      	cmp	r3, #8
 8006f82:	d150      	bne.n	8007026 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	212c      	movs	r1, #44	; 0x2c
 8006f8a:	fb01 f303 	mul.w	r3, r1, r3
 8006f8e:	4413      	add	r3, r2
 8006f90:	335c      	adds	r3, #92	; 0x5c
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	1c5a      	adds	r2, r3, #1
 8006f96:	6879      	ldr	r1, [r7, #4]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	202c      	movs	r0, #44	; 0x2c
 8006f9c:	fb00 f303 	mul.w	r3, r0, r3
 8006fa0:	440b      	add	r3, r1
 8006fa2:	335c      	adds	r3, #92	; 0x5c
 8006fa4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	212c      	movs	r1, #44	; 0x2c
 8006fac:	fb01 f303 	mul.w	r3, r1, r3
 8006fb0:	4413      	add	r3, r2
 8006fb2:	335c      	adds	r3, #92	; 0x5c
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d912      	bls.n	8006fe0 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	212c      	movs	r1, #44	; 0x2c
 8006fc0:	fb01 f303 	mul.w	r3, r1, r3
 8006fc4:	4413      	add	r3, r2
 8006fc6:	335c      	adds	r3, #92	; 0x5c
 8006fc8:	2200      	movs	r2, #0
 8006fca:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	212c      	movs	r1, #44	; 0x2c
 8006fd2:	fb01 f303 	mul.w	r3, r1, r3
 8006fd6:	4413      	add	r3, r2
 8006fd8:	3360      	adds	r3, #96	; 0x60
 8006fda:	2204      	movs	r2, #4
 8006fdc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006fde:	e073      	b.n	80070c8 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	212c      	movs	r1, #44	; 0x2c
 8006fe6:	fb01 f303 	mul.w	r3, r1, r3
 8006fea:	4413      	add	r3, r2
 8006fec:	3360      	adds	r3, #96	; 0x60
 8006fee:	2202      	movs	r2, #2
 8006ff0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	015a      	lsls	r2, r3, #5
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007008:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007010:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	015a      	lsls	r2, r3, #5
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	4413      	add	r3, r2
 800701a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800701e:	461a      	mov	r2, r3
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007024:	e050      	b.n	80070c8 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	212c      	movs	r1, #44	; 0x2c
 800702c:	fb01 f303 	mul.w	r3, r1, r3
 8007030:	4413      	add	r3, r2
 8007032:	3361      	adds	r3, #97	; 0x61
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	2b03      	cmp	r3, #3
 8007038:	d122      	bne.n	8007080 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	212c      	movs	r1, #44	; 0x2c
 8007040:	fb01 f303 	mul.w	r3, r1, r3
 8007044:	4413      	add	r3, r2
 8007046:	3360      	adds	r3, #96	; 0x60
 8007048:	2202      	movs	r2, #2
 800704a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	015a      	lsls	r2, r3, #5
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	4413      	add	r3, r2
 8007054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007062:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800706a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	015a      	lsls	r2, r3, #5
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	4413      	add	r3, r2
 8007074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007078:	461a      	mov	r2, r3
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	6013      	str	r3, [r2, #0]
 800707e:	e023      	b.n	80070c8 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	212c      	movs	r1, #44	; 0x2c
 8007086:	fb01 f303 	mul.w	r3, r1, r3
 800708a:	4413      	add	r3, r2
 800708c:	3361      	adds	r3, #97	; 0x61
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	2b07      	cmp	r3, #7
 8007092:	d119      	bne.n	80070c8 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	212c      	movs	r1, #44	; 0x2c
 800709a:	fb01 f303 	mul.w	r3, r1, r3
 800709e:	4413      	add	r3, r2
 80070a0:	335c      	adds	r3, #92	; 0x5c
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	1c5a      	adds	r2, r3, #1
 80070a6:	6879      	ldr	r1, [r7, #4]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	202c      	movs	r0, #44	; 0x2c
 80070ac:	fb00 f303 	mul.w	r3, r0, r3
 80070b0:	440b      	add	r3, r1
 80070b2:	335c      	adds	r3, #92	; 0x5c
 80070b4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	212c      	movs	r1, #44	; 0x2c
 80070bc:	fb01 f303 	mul.w	r3, r1, r3
 80070c0:	4413      	add	r3, r2
 80070c2:	3360      	adds	r3, #96	; 0x60
 80070c4:	2204      	movs	r2, #4
 80070c6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	015a      	lsls	r2, r3, #5
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	4413      	add	r3, r2
 80070d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070d4:	461a      	mov	r2, r3
 80070d6:	2302      	movs	r3, #2
 80070d8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	b2d9      	uxtb	r1, r3
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	202c      	movs	r0, #44	; 0x2c
 80070e4:	fb00 f303 	mul.w	r3, r0, r3
 80070e8:	4413      	add	r3, r2
 80070ea:	3360      	adds	r3, #96	; 0x60
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	461a      	mov	r2, r3
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f015 f881 	bl	801c1f8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80070f6:	e081      	b.n	80071fc <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	015a      	lsls	r2, r3, #5
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	4413      	add	r3, r2
 8007100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	f003 0310 	and.w	r3, r3, #16
 800710a:	2b10      	cmp	r3, #16
 800710c:	d176      	bne.n	80071fc <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	212c      	movs	r1, #44	; 0x2c
 8007114:	fb01 f303 	mul.w	r3, r1, r3
 8007118:	4413      	add	r3, r2
 800711a:	333f      	adds	r3, #63	; 0x3f
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	2b03      	cmp	r3, #3
 8007120:	d121      	bne.n	8007166 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	212c      	movs	r1, #44	; 0x2c
 8007128:	fb01 f303 	mul.w	r3, r1, r3
 800712c:	4413      	add	r3, r2
 800712e:	335c      	adds	r3, #92	; 0x5c
 8007130:	2200      	movs	r2, #0
 8007132:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	015a      	lsls	r2, r3, #5
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	4413      	add	r3, r2
 800713c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	0151      	lsls	r1, r2, #5
 8007146:	693a      	ldr	r2, [r7, #16]
 8007148:	440a      	add	r2, r1
 800714a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800714e:	f043 0302 	orr.w	r3, r3, #2
 8007152:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	b2d2      	uxtb	r2, r2
 800715c:	4611      	mov	r1, r2
 800715e:	4618      	mov	r0, r3
 8007160:	f007 fba1 	bl	800e8a6 <USB_HC_Halt>
 8007164:	e041      	b.n	80071ea <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	212c      	movs	r1, #44	; 0x2c
 800716c:	fb01 f303 	mul.w	r3, r1, r3
 8007170:	4413      	add	r3, r2
 8007172:	333f      	adds	r3, #63	; 0x3f
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d009      	beq.n	800718e <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	212c      	movs	r1, #44	; 0x2c
 8007180:	fb01 f303 	mul.w	r3, r1, r3
 8007184:	4413      	add	r3, r2
 8007186:	333f      	adds	r3, #63	; 0x3f
 8007188:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800718a:	2b02      	cmp	r3, #2
 800718c:	d12d      	bne.n	80071ea <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	212c      	movs	r1, #44	; 0x2c
 8007194:	fb01 f303 	mul.w	r3, r1, r3
 8007198:	4413      	add	r3, r2
 800719a:	335c      	adds	r3, #92	; 0x5c
 800719c:	2200      	movs	r2, #0
 800719e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d120      	bne.n	80071ea <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	212c      	movs	r1, #44	; 0x2c
 80071ae:	fb01 f303 	mul.w	r3, r1, r3
 80071b2:	4413      	add	r3, r2
 80071b4:	3361      	adds	r3, #97	; 0x61
 80071b6:	2203      	movs	r2, #3
 80071b8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	015a      	lsls	r2, r3, #5
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	4413      	add	r3, r2
 80071c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	0151      	lsls	r1, r2, #5
 80071cc:	693a      	ldr	r2, [r7, #16]
 80071ce:	440a      	add	r2, r1
 80071d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071d4:	f043 0302 	orr.w	r3, r3, #2
 80071d8:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	b2d2      	uxtb	r2, r2
 80071e2:	4611      	mov	r1, r2
 80071e4:	4618      	mov	r0, r3
 80071e6:	f007 fb5e 	bl	800e8a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	015a      	lsls	r2, r3, #5
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	4413      	add	r3, r2
 80071f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071f6:	461a      	mov	r2, r3
 80071f8:	2310      	movs	r3, #16
 80071fa:	6093      	str	r3, [r2, #8]
}
 80071fc:	bf00      	nop
 80071fe:	3718      	adds	r7, #24
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b088      	sub	sp, #32
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	460b      	mov	r3, r1
 800720e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800721a:	78fb      	ldrb	r3, [r7, #3]
 800721c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	015a      	lsls	r2, r3, #5
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	4413      	add	r3, r2
 8007226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	f003 0304 	and.w	r3, r3, #4
 8007230:	2b04      	cmp	r3, #4
 8007232:	d119      	bne.n	8007268 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	015a      	lsls	r2, r3, #5
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	4413      	add	r3, r2
 800723c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007240:	461a      	mov	r2, r3
 8007242:	2304      	movs	r3, #4
 8007244:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	015a      	lsls	r2, r3, #5
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	4413      	add	r3, r2
 800724e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	0151      	lsls	r1, r2, #5
 8007258:	69ba      	ldr	r2, [r7, #24]
 800725a:	440a      	add	r2, r1
 800725c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007260:	f043 0302 	orr.w	r3, r3, #2
 8007264:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8007266:	e3c6      	b.n	80079f6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	015a      	lsls	r2, r3, #5
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	4413      	add	r3, r2
 8007270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	f003 0320 	and.w	r3, r3, #32
 800727a:	2b20      	cmp	r3, #32
 800727c:	d13e      	bne.n	80072fc <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	015a      	lsls	r2, r3, #5
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	4413      	add	r3, r2
 8007286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800728a:	461a      	mov	r2, r3
 800728c:	2320      	movs	r3, #32
 800728e:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	212c      	movs	r1, #44	; 0x2c
 8007296:	fb01 f303 	mul.w	r3, r1, r3
 800729a:	4413      	add	r3, r2
 800729c:	333d      	adds	r3, #61	; 0x3d
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	f040 83a8 	bne.w	80079f6 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 80072a6:	687a      	ldr	r2, [r7, #4]
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	212c      	movs	r1, #44	; 0x2c
 80072ac:	fb01 f303 	mul.w	r3, r1, r3
 80072b0:	4413      	add	r3, r2
 80072b2:	333d      	adds	r3, #61	; 0x3d
 80072b4:	2200      	movs	r2, #0
 80072b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	212c      	movs	r1, #44	; 0x2c
 80072be:	fb01 f303 	mul.w	r3, r1, r3
 80072c2:	4413      	add	r3, r2
 80072c4:	3360      	adds	r3, #96	; 0x60
 80072c6:	2202      	movs	r2, #2
 80072c8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	015a      	lsls	r2, r3, #5
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	4413      	add	r3, r2
 80072d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	697a      	ldr	r2, [r7, #20]
 80072da:	0151      	lsls	r1, r2, #5
 80072dc:	69ba      	ldr	r2, [r7, #24]
 80072de:	440a      	add	r2, r1
 80072e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072e4:	f043 0302 	orr.w	r3, r3, #2
 80072e8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	b2d2      	uxtb	r2, r2
 80072f2:	4611      	mov	r1, r2
 80072f4:	4618      	mov	r0, r3
 80072f6:	f007 fad6 	bl	800e8a6 <USB_HC_Halt>
}
 80072fa:	e37c      	b.n	80079f6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	015a      	lsls	r2, r3, #5
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	4413      	add	r3, r2
 8007304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800730e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007312:	d122      	bne.n	800735a <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	015a      	lsls	r2, r3, #5
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	4413      	add	r3, r2
 800731c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	0151      	lsls	r1, r2, #5
 8007326:	69ba      	ldr	r2, [r7, #24]
 8007328:	440a      	add	r2, r1
 800732a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800732e:	f043 0302 	orr.w	r3, r3, #2
 8007332:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	697a      	ldr	r2, [r7, #20]
 800733a:	b2d2      	uxtb	r2, r2
 800733c:	4611      	mov	r1, r2
 800733e:	4618      	mov	r0, r3
 8007340:	f007 fab1 	bl	800e8a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	015a      	lsls	r2, r3, #5
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	4413      	add	r3, r2
 800734c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007350:	461a      	mov	r2, r3
 8007352:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007356:	6093      	str	r3, [r2, #8]
}
 8007358:	e34d      	b.n	80079f6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	015a      	lsls	r2, r3, #5
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	4413      	add	r3, r2
 8007362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	f003 0301 	and.w	r3, r3, #1
 800736c:	2b01      	cmp	r3, #1
 800736e:	d150      	bne.n	8007412 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	212c      	movs	r1, #44	; 0x2c
 8007376:	fb01 f303 	mul.w	r3, r1, r3
 800737a:	4413      	add	r3, r2
 800737c:	335c      	adds	r3, #92	; 0x5c
 800737e:	2200      	movs	r2, #0
 8007380:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	015a      	lsls	r2, r3, #5
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	4413      	add	r3, r2
 800738a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007394:	2b40      	cmp	r3, #64	; 0x40
 8007396:	d111      	bne.n	80073bc <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	212c      	movs	r1, #44	; 0x2c
 800739e:	fb01 f303 	mul.w	r3, r1, r3
 80073a2:	4413      	add	r3, r2
 80073a4:	333d      	adds	r3, #61	; 0x3d
 80073a6:	2201      	movs	r2, #1
 80073a8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	015a      	lsls	r2, r3, #5
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	4413      	add	r3, r2
 80073b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073b6:	461a      	mov	r2, r3
 80073b8:	2340      	movs	r3, #64	; 0x40
 80073ba:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	015a      	lsls	r2, r3, #5
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	4413      	add	r3, r2
 80073c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	0151      	lsls	r1, r2, #5
 80073ce:	69ba      	ldr	r2, [r7, #24]
 80073d0:	440a      	add	r2, r1
 80073d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073d6:	f043 0302 	orr.w	r3, r3, #2
 80073da:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	697a      	ldr	r2, [r7, #20]
 80073e2:	b2d2      	uxtb	r2, r2
 80073e4:	4611      	mov	r1, r2
 80073e6:	4618      	mov	r0, r3
 80073e8:	f007 fa5d 	bl	800e8a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	015a      	lsls	r2, r3, #5
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	4413      	add	r3, r2
 80073f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073f8:	461a      	mov	r2, r3
 80073fa:	2301      	movs	r3, #1
 80073fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	212c      	movs	r1, #44	; 0x2c
 8007404:	fb01 f303 	mul.w	r3, r1, r3
 8007408:	4413      	add	r3, r2
 800740a:	3361      	adds	r3, #97	; 0x61
 800740c:	2201      	movs	r2, #1
 800740e:	701a      	strb	r2, [r3, #0]
}
 8007410:	e2f1      	b.n	80079f6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	015a      	lsls	r2, r3, #5
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	4413      	add	r3, r2
 800741a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007424:	2b40      	cmp	r3, #64	; 0x40
 8007426:	d13c      	bne.n	80074a2 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	212c      	movs	r1, #44	; 0x2c
 800742e:	fb01 f303 	mul.w	r3, r1, r3
 8007432:	4413      	add	r3, r2
 8007434:	3361      	adds	r3, #97	; 0x61
 8007436:	2204      	movs	r2, #4
 8007438:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	212c      	movs	r1, #44	; 0x2c
 8007440:	fb01 f303 	mul.w	r3, r1, r3
 8007444:	4413      	add	r3, r2
 8007446:	333d      	adds	r3, #61	; 0x3d
 8007448:	2201      	movs	r2, #1
 800744a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	212c      	movs	r1, #44	; 0x2c
 8007452:	fb01 f303 	mul.w	r3, r1, r3
 8007456:	4413      	add	r3, r2
 8007458:	335c      	adds	r3, #92	; 0x5c
 800745a:	2200      	movs	r2, #0
 800745c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	015a      	lsls	r2, r3, #5
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	4413      	add	r3, r2
 8007466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	0151      	lsls	r1, r2, #5
 8007470:	69ba      	ldr	r2, [r7, #24]
 8007472:	440a      	add	r2, r1
 8007474:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007478:	f043 0302 	orr.w	r3, r3, #2
 800747c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	b2d2      	uxtb	r2, r2
 8007486:	4611      	mov	r1, r2
 8007488:	4618      	mov	r0, r3
 800748a:	f007 fa0c 	bl	800e8a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	015a      	lsls	r2, r3, #5
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	4413      	add	r3, r2
 8007496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800749a:	461a      	mov	r2, r3
 800749c:	2340      	movs	r3, #64	; 0x40
 800749e:	6093      	str	r3, [r2, #8]
}
 80074a0:	e2a9      	b.n	80079f6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	015a      	lsls	r2, r3, #5
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	4413      	add	r3, r2
 80074aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f003 0308 	and.w	r3, r3, #8
 80074b4:	2b08      	cmp	r3, #8
 80074b6:	d12a      	bne.n	800750e <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	015a      	lsls	r2, r3, #5
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	4413      	add	r3, r2
 80074c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074c4:	461a      	mov	r2, r3
 80074c6:	2308      	movs	r3, #8
 80074c8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	015a      	lsls	r2, r3, #5
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	4413      	add	r3, r2
 80074d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	697a      	ldr	r2, [r7, #20]
 80074da:	0151      	lsls	r1, r2, #5
 80074dc:	69ba      	ldr	r2, [r7, #24]
 80074de:	440a      	add	r2, r1
 80074e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074e4:	f043 0302 	orr.w	r3, r3, #2
 80074e8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	b2d2      	uxtb	r2, r2
 80074f2:	4611      	mov	r1, r2
 80074f4:	4618      	mov	r0, r3
 80074f6:	f007 f9d6 	bl	800e8a6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	212c      	movs	r1, #44	; 0x2c
 8007500:	fb01 f303 	mul.w	r3, r1, r3
 8007504:	4413      	add	r3, r2
 8007506:	3361      	adds	r3, #97	; 0x61
 8007508:	2205      	movs	r2, #5
 800750a:	701a      	strb	r2, [r3, #0]
}
 800750c:	e273      	b.n	80079f6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	015a      	lsls	r2, r3, #5
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	4413      	add	r3, r2
 8007516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	f003 0310 	and.w	r3, r3, #16
 8007520:	2b10      	cmp	r3, #16
 8007522:	d150      	bne.n	80075c6 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	212c      	movs	r1, #44	; 0x2c
 800752a:	fb01 f303 	mul.w	r3, r1, r3
 800752e:	4413      	add	r3, r2
 8007530:	335c      	adds	r3, #92	; 0x5c
 8007532:	2200      	movs	r2, #0
 8007534:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	212c      	movs	r1, #44	; 0x2c
 800753c:	fb01 f303 	mul.w	r3, r1, r3
 8007540:	4413      	add	r3, r2
 8007542:	3361      	adds	r3, #97	; 0x61
 8007544:	2203      	movs	r2, #3
 8007546:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	212c      	movs	r1, #44	; 0x2c
 800754e:	fb01 f303 	mul.w	r3, r1, r3
 8007552:	4413      	add	r3, r2
 8007554:	333d      	adds	r3, #61	; 0x3d
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d112      	bne.n	8007582 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	212c      	movs	r1, #44	; 0x2c
 8007562:	fb01 f303 	mul.w	r3, r1, r3
 8007566:	4413      	add	r3, r2
 8007568:	333c      	adds	r3, #60	; 0x3c
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d108      	bne.n	8007582 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	212c      	movs	r1, #44	; 0x2c
 8007576:	fb01 f303 	mul.w	r3, r1, r3
 800757a:	4413      	add	r3, r2
 800757c:	333d      	adds	r3, #61	; 0x3d
 800757e:	2201      	movs	r2, #1
 8007580:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	015a      	lsls	r2, r3, #5
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	4413      	add	r3, r2
 800758a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	697a      	ldr	r2, [r7, #20]
 8007592:	0151      	lsls	r1, r2, #5
 8007594:	69ba      	ldr	r2, [r7, #24]
 8007596:	440a      	add	r2, r1
 8007598:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800759c:	f043 0302 	orr.w	r3, r3, #2
 80075a0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	697a      	ldr	r2, [r7, #20]
 80075a8:	b2d2      	uxtb	r2, r2
 80075aa:	4611      	mov	r1, r2
 80075ac:	4618      	mov	r0, r3
 80075ae:	f007 f97a 	bl	800e8a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	015a      	lsls	r2, r3, #5
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	4413      	add	r3, r2
 80075ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075be:	461a      	mov	r2, r3
 80075c0:	2310      	movs	r3, #16
 80075c2:	6093      	str	r3, [r2, #8]
}
 80075c4:	e217      	b.n	80079f6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	015a      	lsls	r2, r3, #5
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	4413      	add	r3, r2
 80075ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075d8:	2b80      	cmp	r3, #128	; 0x80
 80075da:	d174      	bne.n	80076c6 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	691b      	ldr	r3, [r3, #16]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d121      	bne.n	8007628 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	212c      	movs	r1, #44	; 0x2c
 80075ea:	fb01 f303 	mul.w	r3, r1, r3
 80075ee:	4413      	add	r3, r2
 80075f0:	3361      	adds	r3, #97	; 0x61
 80075f2:	2206      	movs	r2, #6
 80075f4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	015a      	lsls	r2, r3, #5
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	4413      	add	r3, r2
 80075fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	697a      	ldr	r2, [r7, #20]
 8007606:	0151      	lsls	r1, r2, #5
 8007608:	69ba      	ldr	r2, [r7, #24]
 800760a:	440a      	add	r2, r1
 800760c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007610:	f043 0302 	orr.w	r3, r3, #2
 8007614:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	697a      	ldr	r2, [r7, #20]
 800761c:	b2d2      	uxtb	r2, r2
 800761e:	4611      	mov	r1, r2
 8007620:	4618      	mov	r0, r3
 8007622:	f007 f940 	bl	800e8a6 <USB_HC_Halt>
 8007626:	e044      	b.n	80076b2 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	212c      	movs	r1, #44	; 0x2c
 800762e:	fb01 f303 	mul.w	r3, r1, r3
 8007632:	4413      	add	r3, r2
 8007634:	335c      	adds	r3, #92	; 0x5c
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	1c5a      	adds	r2, r3, #1
 800763a:	6879      	ldr	r1, [r7, #4]
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	202c      	movs	r0, #44	; 0x2c
 8007640:	fb00 f303 	mul.w	r3, r0, r3
 8007644:	440b      	add	r3, r1
 8007646:	335c      	adds	r3, #92	; 0x5c
 8007648:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	212c      	movs	r1, #44	; 0x2c
 8007650:	fb01 f303 	mul.w	r3, r1, r3
 8007654:	4413      	add	r3, r2
 8007656:	335c      	adds	r3, #92	; 0x5c
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2b02      	cmp	r3, #2
 800765c:	d920      	bls.n	80076a0 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	212c      	movs	r1, #44	; 0x2c
 8007664:	fb01 f303 	mul.w	r3, r1, r3
 8007668:	4413      	add	r3, r2
 800766a:	335c      	adds	r3, #92	; 0x5c
 800766c:	2200      	movs	r2, #0
 800766e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	212c      	movs	r1, #44	; 0x2c
 8007676:	fb01 f303 	mul.w	r3, r1, r3
 800767a:	4413      	add	r3, r2
 800767c:	3360      	adds	r3, #96	; 0x60
 800767e:	2204      	movs	r2, #4
 8007680:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	b2d9      	uxtb	r1, r3
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	202c      	movs	r0, #44	; 0x2c
 800768c:	fb00 f303 	mul.w	r3, r0, r3
 8007690:	4413      	add	r3, r2
 8007692:	3360      	adds	r3, #96	; 0x60
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	461a      	mov	r2, r3
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f014 fdad 	bl	801c1f8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800769e:	e008      	b.n	80076b2 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	212c      	movs	r1, #44	; 0x2c
 80076a6:	fb01 f303 	mul.w	r3, r1, r3
 80076aa:	4413      	add	r3, r2
 80076ac:	3360      	adds	r3, #96	; 0x60
 80076ae:	2202      	movs	r2, #2
 80076b0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	015a      	lsls	r2, r3, #5
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	4413      	add	r3, r2
 80076ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076be:	461a      	mov	r2, r3
 80076c0:	2380      	movs	r3, #128	; 0x80
 80076c2:	6093      	str	r3, [r2, #8]
}
 80076c4:	e197      	b.n	80079f6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	015a      	lsls	r2, r3, #5
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	4413      	add	r3, r2
 80076ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076dc:	d134      	bne.n	8007748 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	015a      	lsls	r2, r3, #5
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	4413      	add	r3, r2
 80076e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	697a      	ldr	r2, [r7, #20]
 80076ee:	0151      	lsls	r1, r2, #5
 80076f0:	69ba      	ldr	r2, [r7, #24]
 80076f2:	440a      	add	r2, r1
 80076f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076f8:	f043 0302 	orr.w	r3, r3, #2
 80076fc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	697a      	ldr	r2, [r7, #20]
 8007704:	b2d2      	uxtb	r2, r2
 8007706:	4611      	mov	r1, r2
 8007708:	4618      	mov	r0, r3
 800770a:	f007 f8cc 	bl	800e8a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	015a      	lsls	r2, r3, #5
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	4413      	add	r3, r2
 8007716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800771a:	461a      	mov	r2, r3
 800771c:	2310      	movs	r3, #16
 800771e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	015a      	lsls	r2, r3, #5
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	4413      	add	r3, r2
 8007728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800772c:	461a      	mov	r2, r3
 800772e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007732:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	212c      	movs	r1, #44	; 0x2c
 800773a:	fb01 f303 	mul.w	r3, r1, r3
 800773e:	4413      	add	r3, r2
 8007740:	3361      	adds	r3, #97	; 0x61
 8007742:	2208      	movs	r2, #8
 8007744:	701a      	strb	r2, [r3, #0]
}
 8007746:	e156      	b.n	80079f6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	015a      	lsls	r2, r3, #5
 800774c:	69bb      	ldr	r3, [r7, #24]
 800774e:	4413      	add	r3, r2
 8007750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	f003 0302 	and.w	r3, r3, #2
 800775a:	2b02      	cmp	r3, #2
 800775c:	f040 814b 	bne.w	80079f6 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	015a      	lsls	r2, r3, #5
 8007764:	69bb      	ldr	r3, [r7, #24]
 8007766:	4413      	add	r3, r2
 8007768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	697a      	ldr	r2, [r7, #20]
 8007770:	0151      	lsls	r1, r2, #5
 8007772:	69ba      	ldr	r2, [r7, #24]
 8007774:	440a      	add	r2, r1
 8007776:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800777a:	f023 0302 	bic.w	r3, r3, #2
 800777e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	212c      	movs	r1, #44	; 0x2c
 8007786:	fb01 f303 	mul.w	r3, r1, r3
 800778a:	4413      	add	r3, r2
 800778c:	3361      	adds	r3, #97	; 0x61
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	2b01      	cmp	r3, #1
 8007792:	d179      	bne.n	8007888 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	212c      	movs	r1, #44	; 0x2c
 800779a:	fb01 f303 	mul.w	r3, r1, r3
 800779e:	4413      	add	r3, r2
 80077a0:	3360      	adds	r3, #96	; 0x60
 80077a2:	2201      	movs	r2, #1
 80077a4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	212c      	movs	r1, #44	; 0x2c
 80077ac:	fb01 f303 	mul.w	r3, r1, r3
 80077b0:	4413      	add	r3, r2
 80077b2:	333f      	adds	r3, #63	; 0x3f
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	d00a      	beq.n	80077d0 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	212c      	movs	r1, #44	; 0x2c
 80077c0:	fb01 f303 	mul.w	r3, r1, r3
 80077c4:	4413      	add	r3, r2
 80077c6:	333f      	adds	r3, #63	; 0x3f
 80077c8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80077ca:	2b03      	cmp	r3, #3
 80077cc:	f040 80fc 	bne.w	80079c8 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d142      	bne.n	800785e <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	212c      	movs	r1, #44	; 0x2c
 80077de:	fb01 f303 	mul.w	r3, r1, r3
 80077e2:	4413      	add	r3, r2
 80077e4:	334c      	adds	r3, #76	; 0x4c
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	f000 80ed 	beq.w	80079c8 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	212c      	movs	r1, #44	; 0x2c
 80077f4:	fb01 f303 	mul.w	r3, r1, r3
 80077f8:	4413      	add	r3, r2
 80077fa:	334c      	adds	r3, #76	; 0x4c
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	6879      	ldr	r1, [r7, #4]
 8007800:	697a      	ldr	r2, [r7, #20]
 8007802:	202c      	movs	r0, #44	; 0x2c
 8007804:	fb00 f202 	mul.w	r2, r0, r2
 8007808:	440a      	add	r2, r1
 800780a:	3240      	adds	r2, #64	; 0x40
 800780c:	8812      	ldrh	r2, [r2, #0]
 800780e:	4413      	add	r3, r2
 8007810:	3b01      	subs	r3, #1
 8007812:	6879      	ldr	r1, [r7, #4]
 8007814:	697a      	ldr	r2, [r7, #20]
 8007816:	202c      	movs	r0, #44	; 0x2c
 8007818:	fb00 f202 	mul.w	r2, r0, r2
 800781c:	440a      	add	r2, r1
 800781e:	3240      	adds	r2, #64	; 0x40
 8007820:	8812      	ldrh	r2, [r2, #0]
 8007822:	fbb3 f3f2 	udiv	r3, r3, r2
 8007826:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f003 0301 	and.w	r3, r3, #1
 800782e:	2b00      	cmp	r3, #0
 8007830:	f000 80ca 	beq.w	80079c8 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	212c      	movs	r1, #44	; 0x2c
 800783a:	fb01 f303 	mul.w	r3, r1, r3
 800783e:	4413      	add	r3, r2
 8007840:	3355      	adds	r3, #85	; 0x55
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	f083 0301 	eor.w	r3, r3, #1
 8007848:	b2d8      	uxtb	r0, r3
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	212c      	movs	r1, #44	; 0x2c
 8007850:	fb01 f303 	mul.w	r3, r1, r3
 8007854:	4413      	add	r3, r2
 8007856:	3355      	adds	r3, #85	; 0x55
 8007858:	4602      	mov	r2, r0
 800785a:	701a      	strb	r2, [r3, #0]
 800785c:	e0b4      	b.n	80079c8 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	212c      	movs	r1, #44	; 0x2c
 8007864:	fb01 f303 	mul.w	r3, r1, r3
 8007868:	4413      	add	r3, r2
 800786a:	3355      	adds	r3, #85	; 0x55
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	f083 0301 	eor.w	r3, r3, #1
 8007872:	b2d8      	uxtb	r0, r3
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	212c      	movs	r1, #44	; 0x2c
 800787a:	fb01 f303 	mul.w	r3, r1, r3
 800787e:	4413      	add	r3, r2
 8007880:	3355      	adds	r3, #85	; 0x55
 8007882:	4602      	mov	r2, r0
 8007884:	701a      	strb	r2, [r3, #0]
 8007886:	e09f      	b.n	80079c8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	212c      	movs	r1, #44	; 0x2c
 800788e:	fb01 f303 	mul.w	r3, r1, r3
 8007892:	4413      	add	r3, r2
 8007894:	3361      	adds	r3, #97	; 0x61
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	2b03      	cmp	r3, #3
 800789a:	d109      	bne.n	80078b0 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	212c      	movs	r1, #44	; 0x2c
 80078a2:	fb01 f303 	mul.w	r3, r1, r3
 80078a6:	4413      	add	r3, r2
 80078a8:	3360      	adds	r3, #96	; 0x60
 80078aa:	2202      	movs	r2, #2
 80078ac:	701a      	strb	r2, [r3, #0]
 80078ae:	e08b      	b.n	80079c8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	212c      	movs	r1, #44	; 0x2c
 80078b6:	fb01 f303 	mul.w	r3, r1, r3
 80078ba:	4413      	add	r3, r2
 80078bc:	3361      	adds	r3, #97	; 0x61
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	2b04      	cmp	r3, #4
 80078c2:	d109      	bne.n	80078d8 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	212c      	movs	r1, #44	; 0x2c
 80078ca:	fb01 f303 	mul.w	r3, r1, r3
 80078ce:	4413      	add	r3, r2
 80078d0:	3360      	adds	r3, #96	; 0x60
 80078d2:	2202      	movs	r2, #2
 80078d4:	701a      	strb	r2, [r3, #0]
 80078d6:	e077      	b.n	80079c8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	212c      	movs	r1, #44	; 0x2c
 80078de:	fb01 f303 	mul.w	r3, r1, r3
 80078e2:	4413      	add	r3, r2
 80078e4:	3361      	adds	r3, #97	; 0x61
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	2b05      	cmp	r3, #5
 80078ea:	d109      	bne.n	8007900 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	212c      	movs	r1, #44	; 0x2c
 80078f2:	fb01 f303 	mul.w	r3, r1, r3
 80078f6:	4413      	add	r3, r2
 80078f8:	3360      	adds	r3, #96	; 0x60
 80078fa:	2205      	movs	r2, #5
 80078fc:	701a      	strb	r2, [r3, #0]
 80078fe:	e063      	b.n	80079c8 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	212c      	movs	r1, #44	; 0x2c
 8007906:	fb01 f303 	mul.w	r3, r1, r3
 800790a:	4413      	add	r3, r2
 800790c:	3361      	adds	r3, #97	; 0x61
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	2b06      	cmp	r3, #6
 8007912:	d009      	beq.n	8007928 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	212c      	movs	r1, #44	; 0x2c
 800791a:	fb01 f303 	mul.w	r3, r1, r3
 800791e:	4413      	add	r3, r2
 8007920:	3361      	adds	r3, #97	; 0x61
 8007922:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007924:	2b08      	cmp	r3, #8
 8007926:	d14f      	bne.n	80079c8 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	212c      	movs	r1, #44	; 0x2c
 800792e:	fb01 f303 	mul.w	r3, r1, r3
 8007932:	4413      	add	r3, r2
 8007934:	335c      	adds	r3, #92	; 0x5c
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	1c5a      	adds	r2, r3, #1
 800793a:	6879      	ldr	r1, [r7, #4]
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	202c      	movs	r0, #44	; 0x2c
 8007940:	fb00 f303 	mul.w	r3, r0, r3
 8007944:	440b      	add	r3, r1
 8007946:	335c      	adds	r3, #92	; 0x5c
 8007948:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	212c      	movs	r1, #44	; 0x2c
 8007950:	fb01 f303 	mul.w	r3, r1, r3
 8007954:	4413      	add	r3, r2
 8007956:	335c      	adds	r3, #92	; 0x5c
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2b02      	cmp	r3, #2
 800795c:	d912      	bls.n	8007984 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	212c      	movs	r1, #44	; 0x2c
 8007964:	fb01 f303 	mul.w	r3, r1, r3
 8007968:	4413      	add	r3, r2
 800796a:	335c      	adds	r3, #92	; 0x5c
 800796c:	2200      	movs	r2, #0
 800796e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	212c      	movs	r1, #44	; 0x2c
 8007976:	fb01 f303 	mul.w	r3, r1, r3
 800797a:	4413      	add	r3, r2
 800797c:	3360      	adds	r3, #96	; 0x60
 800797e:	2204      	movs	r2, #4
 8007980:	701a      	strb	r2, [r3, #0]
 8007982:	e021      	b.n	80079c8 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	212c      	movs	r1, #44	; 0x2c
 800798a:	fb01 f303 	mul.w	r3, r1, r3
 800798e:	4413      	add	r3, r2
 8007990:	3360      	adds	r3, #96	; 0x60
 8007992:	2202      	movs	r2, #2
 8007994:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	015a      	lsls	r2, r3, #5
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	4413      	add	r3, r2
 800799e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80079ac:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80079b4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	015a      	lsls	r2, r3, #5
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	4413      	add	r3, r2
 80079be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079c2:	461a      	mov	r2, r3
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	015a      	lsls	r2, r3, #5
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	4413      	add	r3, r2
 80079d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079d4:	461a      	mov	r2, r3
 80079d6:	2302      	movs	r3, #2
 80079d8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	b2d9      	uxtb	r1, r3
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	202c      	movs	r0, #44	; 0x2c
 80079e4:	fb00 f303 	mul.w	r3, r0, r3
 80079e8:	4413      	add	r3, r2
 80079ea:	3360      	adds	r3, #96	; 0x60
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	461a      	mov	r2, r3
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f014 fc01 	bl	801c1f8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80079f6:	bf00      	nop
 80079f8:	3720      	adds	r7, #32
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b08a      	sub	sp, #40	; 0x28
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	6a1b      	ldr	r3, [r3, #32]
 8007a16:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	f003 030f 	and.w	r3, r3, #15
 8007a1e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	0c5b      	lsrs	r3, r3, #17
 8007a24:	f003 030f 	and.w	r3, r3, #15
 8007a28:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	091b      	lsrs	r3, r3, #4
 8007a2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a32:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	2b02      	cmp	r3, #2
 8007a38:	d004      	beq.n	8007a44 <HCD_RXQLVL_IRQHandler+0x46>
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	2b05      	cmp	r3, #5
 8007a3e:	f000 80a9 	beq.w	8007b94 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8007a42:	e0aa      	b.n	8007b9a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	f000 80a6 	beq.w	8007b98 <HCD_RXQLVL_IRQHandler+0x19a>
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	212c      	movs	r1, #44	; 0x2c
 8007a52:	fb01 f303 	mul.w	r3, r1, r3
 8007a56:	4413      	add	r3, r2
 8007a58:	3344      	adds	r3, #68	; 0x44
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f000 809b 	beq.w	8007b98 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	69bb      	ldr	r3, [r7, #24]
 8007a66:	212c      	movs	r1, #44	; 0x2c
 8007a68:	fb01 f303 	mul.w	r3, r1, r3
 8007a6c:	4413      	add	r3, r2
 8007a6e:	3350      	adds	r3, #80	; 0x50
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	441a      	add	r2, r3
 8007a76:	6879      	ldr	r1, [r7, #4]
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	202c      	movs	r0, #44	; 0x2c
 8007a7c:	fb00 f303 	mul.w	r3, r0, r3
 8007a80:	440b      	add	r3, r1
 8007a82:	334c      	adds	r3, #76	; 0x4c
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d87a      	bhi.n	8007b80 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6818      	ldr	r0, [r3, #0]
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	212c      	movs	r1, #44	; 0x2c
 8007a94:	fb01 f303 	mul.w	r3, r1, r3
 8007a98:	4413      	add	r3, r2
 8007a9a:	3344      	adds	r3, #68	; 0x44
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	693a      	ldr	r2, [r7, #16]
 8007aa0:	b292      	uxth	r2, r2
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	f006 fa9e 	bl	800dfe4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	212c      	movs	r1, #44	; 0x2c
 8007aae:	fb01 f303 	mul.w	r3, r1, r3
 8007ab2:	4413      	add	r3, r2
 8007ab4:	3344      	adds	r3, #68	; 0x44
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	441a      	add	r2, r3
 8007abc:	6879      	ldr	r1, [r7, #4]
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	202c      	movs	r0, #44	; 0x2c
 8007ac2:	fb00 f303 	mul.w	r3, r0, r3
 8007ac6:	440b      	add	r3, r1
 8007ac8:	3344      	adds	r3, #68	; 0x44
 8007aca:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	69bb      	ldr	r3, [r7, #24]
 8007ad0:	212c      	movs	r1, #44	; 0x2c
 8007ad2:	fb01 f303 	mul.w	r3, r1, r3
 8007ad6:	4413      	add	r3, r2
 8007ad8:	3350      	adds	r3, #80	; 0x50
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	441a      	add	r2, r3
 8007ae0:	6879      	ldr	r1, [r7, #4]
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	202c      	movs	r0, #44	; 0x2c
 8007ae6:	fb00 f303 	mul.w	r3, r0, r3
 8007aea:	440b      	add	r3, r1
 8007aec:	3350      	adds	r3, #80	; 0x50
 8007aee:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	015a      	lsls	r2, r3, #5
 8007af4:	6a3b      	ldr	r3, [r7, #32]
 8007af6:	4413      	add	r3, r2
 8007af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	0cdb      	lsrs	r3, r3, #19
 8007b00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b04:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	212c      	movs	r1, #44	; 0x2c
 8007b0c:	fb01 f303 	mul.w	r3, r1, r3
 8007b10:	4413      	add	r3, r2
 8007b12:	3340      	adds	r3, #64	; 0x40
 8007b14:	881b      	ldrh	r3, [r3, #0]
 8007b16:	461a      	mov	r2, r3
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d13c      	bne.n	8007b98 <HCD_RXQLVL_IRQHandler+0x19a>
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d039      	beq.n	8007b98 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007b24:	69bb      	ldr	r3, [r7, #24]
 8007b26:	015a      	lsls	r2, r3, #5
 8007b28:	6a3b      	ldr	r3, [r7, #32]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b3a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b42:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	015a      	lsls	r2, r3, #5
 8007b48:	6a3b      	ldr	r3, [r7, #32]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b50:	461a      	mov	r2, r3
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	212c      	movs	r1, #44	; 0x2c
 8007b5c:	fb01 f303 	mul.w	r3, r1, r3
 8007b60:	4413      	add	r3, r2
 8007b62:	3354      	adds	r3, #84	; 0x54
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	f083 0301 	eor.w	r3, r3, #1
 8007b6a:	b2d8      	uxtb	r0, r3
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	212c      	movs	r1, #44	; 0x2c
 8007b72:	fb01 f303 	mul.w	r3, r1, r3
 8007b76:	4413      	add	r3, r2
 8007b78:	3354      	adds	r3, #84	; 0x54
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	701a      	strb	r2, [r3, #0]
      break;
 8007b7e:	e00b      	b.n	8007b98 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	212c      	movs	r1, #44	; 0x2c
 8007b86:	fb01 f303 	mul.w	r3, r1, r3
 8007b8a:	4413      	add	r3, r2
 8007b8c:	3360      	adds	r3, #96	; 0x60
 8007b8e:	2204      	movs	r2, #4
 8007b90:	701a      	strb	r2, [r3, #0]
      break;
 8007b92:	e001      	b.n	8007b98 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8007b94:	bf00      	nop
 8007b96:	e000      	b.n	8007b9a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8007b98:	bf00      	nop
  }
}
 8007b9a:	bf00      	nop
 8007b9c:	3728      	adds	r7, #40	; 0x28
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b086      	sub	sp, #24
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007bce:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f003 0302 	and.w	r3, r3, #2
 8007bd6:	2b02      	cmp	r3, #2
 8007bd8:	d10b      	bne.n	8007bf2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f003 0301 	and.w	r3, r3, #1
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d102      	bne.n	8007bea <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f014 faeb 	bl	801c1c0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	f043 0302 	orr.w	r3, r3, #2
 8007bf0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f003 0308 	and.w	r3, r3, #8
 8007bf8:	2b08      	cmp	r3, #8
 8007bfa:	d132      	bne.n	8007c62 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	f043 0308 	orr.w	r3, r3, #8
 8007c02:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f003 0304 	and.w	r3, r3, #4
 8007c0a:	2b04      	cmp	r3, #4
 8007c0c:	d126      	bne.n	8007c5c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	699b      	ldr	r3, [r3, #24]
 8007c12:	2b02      	cmp	r3, #2
 8007c14:	d113      	bne.n	8007c3e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8007c1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007c20:	d106      	bne.n	8007c30 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2102      	movs	r1, #2
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f006 fb3f 	bl	800e2ac <USB_InitFSLSPClkSel>
 8007c2e:	e011      	b.n	8007c54 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2101      	movs	r1, #1
 8007c36:	4618      	mov	r0, r3
 8007c38:	f006 fb38 	bl	800e2ac <USB_InitFSLSPClkSel>
 8007c3c:	e00a      	b.n	8007c54 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d106      	bne.n	8007c54 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8007c52:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f014 fadd 	bl	801c214 <HAL_HCD_PortEnabled_Callback>
 8007c5a:	e002      	b.n	8007c62 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f014 fae7 	bl	801c230 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f003 0320 	and.w	r3, r3, #32
 8007c68:	2b20      	cmp	r3, #32
 8007c6a:	d103      	bne.n	8007c74 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	f043 0320 	orr.w	r3, r3, #32
 8007c72:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	6013      	str	r3, [r2, #0]
}
 8007c80:	bf00      	nop
 8007c82:	3718      	adds	r7, #24
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8007c90:	4a08      	ldr	r2, [pc, #32]	; (8007cb4 <HAL_HSEM_FastTake+0x2c>)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	3320      	adds	r3, #32
 8007c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c9a:	4a07      	ldr	r2, [pc, #28]	; (8007cb8 <HAL_HSEM_FastTake+0x30>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d101      	bne.n	8007ca4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	e000      	b.n	8007ca6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	370c      	adds	r7, #12
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop
 8007cb4:	58026400 	.word	0x58026400
 8007cb8:	80000300 	.word	0x80000300

08007cbc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8007cc6:	4906      	ldr	r1, [pc, #24]	; (8007ce0 <HAL_HSEM_Release+0x24>)
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8007cd4:	bf00      	nop
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr
 8007ce0:	58026400 	.word	0x58026400

08007ce4 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8007cec:	4b05      	ldr	r3, [pc, #20]	; (8007d04 <HAL_HSEM_ActivateNotification+0x20>)
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	4904      	ldr	r1, [pc, #16]	; (8007d04 <HAL_HSEM_ActivateNotification+0x20>)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	600b      	str	r3, [r1, #0]
#endif
}
 8007cf8:	bf00      	nop
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr
 8007d04:	58026500 	.word	0x58026500

08007d08 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8007d0e:	4b0a      	ldr	r3, [pc, #40]	; (8007d38 <HAL_HSEM_IRQHandler+0x30>)
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8007d14:	4b08      	ldr	r3, [pc, #32]	; (8007d38 <HAL_HSEM_IRQHandler+0x30>)
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	43db      	mvns	r3, r3
 8007d1c:	4906      	ldr	r1, [pc, #24]	; (8007d38 <HAL_HSEM_IRQHandler+0x30>)
 8007d1e:	4013      	ands	r3, r2
 8007d20:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8007d22:	4a05      	ldr	r2, [pc, #20]	; (8007d38 <HAL_HSEM_IRQHandler+0x30>)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f011 f8fd 	bl	8018f28 <HAL_HSEM_FreeCallback>
}
 8007d2e:	bf00      	nop
 8007d30:	3708      	adds	r7, #8
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	58026500 	.word	0x58026500

08007d3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d101      	bne.n	8007d4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e07f      	b.n	8007e4e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d106      	bne.n	8007d68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f7f9 fa76 	bl	8001254 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2224      	movs	r2, #36	; 0x24
 8007d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f022 0201 	bic.w	r2, r2, #1
 8007d7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	685a      	ldr	r2, [r3, #4]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007d8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	689a      	ldr	r2, [r3, #8]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d107      	bne.n	8007db6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	689a      	ldr	r2, [r3, #8]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007db2:	609a      	str	r2, [r3, #8]
 8007db4:	e006      	b.n	8007dc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	689a      	ldr	r2, [r3, #8]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007dc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	d104      	bne.n	8007dd6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007dd4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	6859      	ldr	r1, [r3, #4]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	4b1d      	ldr	r3, [pc, #116]	; (8007e58 <HAL_I2C_Init+0x11c>)
 8007de2:	430b      	orrs	r3, r1
 8007de4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	68da      	ldr	r2, [r3, #12]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007df4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	691a      	ldr	r2, [r3, #16]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	695b      	ldr	r3, [r3, #20]
 8007dfe:	ea42 0103 	orr.w	r1, r2, r3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	699b      	ldr	r3, [r3, #24]
 8007e06:	021a      	lsls	r2, r3, #8
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	430a      	orrs	r2, r1
 8007e0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	69d9      	ldr	r1, [r3, #28]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6a1a      	ldr	r2, [r3, #32]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	430a      	orrs	r2, r1
 8007e1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f042 0201 	orr.w	r2, r2, #1
 8007e2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2220      	movs	r2, #32
 8007e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3708      	adds	r7, #8
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	02008000 	.word	0x02008000

08007e5c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	699b      	ldr	r3, [r3, #24]
 8007e6a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d005      	beq.n	8007e88 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e80:	68ba      	ldr	r2, [r7, #8]
 8007e82:	68f9      	ldr	r1, [r7, #12]
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	4798      	blx	r3
  }
}
 8007e88:	bf00      	nop
 8007e8a:	3710      	adds	r7, #16
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	2b20      	cmp	r3, #32
 8007ea4:	d138      	bne.n	8007f18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d101      	bne.n	8007eb4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007eb0:	2302      	movs	r3, #2
 8007eb2:	e032      	b.n	8007f1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2224      	movs	r2, #36	; 0x24
 8007ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f022 0201 	bic.w	r2, r2, #1
 8007ed2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007ee2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	6819      	ldr	r1, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	683a      	ldr	r2, [r7, #0]
 8007ef0:	430a      	orrs	r2, r1
 8007ef2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f042 0201 	orr.w	r2, r2, #1
 8007f02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2220      	movs	r2, #32
 8007f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f14:	2300      	movs	r3, #0
 8007f16:	e000      	b.n	8007f1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007f18:	2302      	movs	r3, #2
  }
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	370c      	adds	r7, #12
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr

08007f26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007f26:	b480      	push	{r7}
 8007f28:	b085      	sub	sp, #20
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
 8007f2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	2b20      	cmp	r3, #32
 8007f3a:	d139      	bne.n	8007fb0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d101      	bne.n	8007f4a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007f46:	2302      	movs	r3, #2
 8007f48:	e033      	b.n	8007fb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2224      	movs	r2, #36	; 0x24
 8007f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f022 0201 	bic.w	r2, r2, #1
 8007f68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007f78:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	021b      	lsls	r3, r3, #8
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	4313      	orrs	r3, r2
 8007f82:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f042 0201 	orr.w	r2, r2, #1
 8007f9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2220      	movs	r2, #32
 8007fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007fac:	2300      	movs	r3, #0
 8007fae:	e000      	b.n	8007fb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007fb0:	2302      	movs	r3, #2
  }
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3714      	adds	r7, #20
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
	...

08007fc0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007fc8:	4b29      	ldr	r3, [pc, #164]	; (8008070 <HAL_PWREx_ConfigSupply+0xb0>)
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	f003 0307 	and.w	r3, r3, #7
 8007fd0:	2b06      	cmp	r3, #6
 8007fd2:	d00a      	beq.n	8007fea <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007fd4:	4b26      	ldr	r3, [pc, #152]	; (8008070 <HAL_PWREx_ConfigSupply+0xb0>)
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d001      	beq.n	8007fe6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e040      	b.n	8008068 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	e03e      	b.n	8008068 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007fea:	4b21      	ldr	r3, [pc, #132]	; (8008070 <HAL_PWREx_ConfigSupply+0xb0>)
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8007ff2:	491f      	ldr	r1, [pc, #124]	; (8008070 <HAL_PWREx_ConfigSupply+0xb0>)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007ffa:	f7fa fad5 	bl	80025a8 <HAL_GetTick>
 8007ffe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008000:	e009      	b.n	8008016 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008002:	f7fa fad1 	bl	80025a8 <HAL_GetTick>
 8008006:	4602      	mov	r2, r0
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	1ad3      	subs	r3, r2, r3
 800800c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008010:	d901      	bls.n	8008016 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008012:	2301      	movs	r3, #1
 8008014:	e028      	b.n	8008068 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008016:	4b16      	ldr	r3, [pc, #88]	; (8008070 <HAL_PWREx_ConfigSupply+0xb0>)
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800801e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008022:	d1ee      	bne.n	8008002 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2b1e      	cmp	r3, #30
 8008028:	d008      	beq.n	800803c <HAL_PWREx_ConfigSupply+0x7c>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2b2e      	cmp	r3, #46	; 0x2e
 800802e:	d005      	beq.n	800803c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2b1d      	cmp	r3, #29
 8008034:	d002      	beq.n	800803c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2b2d      	cmp	r3, #45	; 0x2d
 800803a:	d114      	bne.n	8008066 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800803c:	f7fa fab4 	bl	80025a8 <HAL_GetTick>
 8008040:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008042:	e009      	b.n	8008058 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008044:	f7fa fab0 	bl	80025a8 <HAL_GetTick>
 8008048:	4602      	mov	r2, r0
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	1ad3      	subs	r3, r2, r3
 800804e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008052:	d901      	bls.n	8008058 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8008054:	2301      	movs	r3, #1
 8008056:	e007      	b.n	8008068 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008058:	4b05      	ldr	r3, [pc, #20]	; (8008070 <HAL_PWREx_ConfigSupply+0xb0>)
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008064:	d1ee      	bne.n	8008044 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008066:	2300      	movs	r3, #0
}
 8008068:	4618      	mov	r0, r3
 800806a:	3710      	adds	r7, #16
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}
 8008070:	58024800 	.word	0x58024800

08008074 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8008074:	b480      	push	{r7}
 8008076:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008078:	4b05      	ldr	r3, [pc, #20]	; (8008090 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	4a04      	ldr	r2, [pc, #16]	; (8008090 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800807e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008082:	60d3      	str	r3, [r2, #12]
}
 8008084:	bf00      	nop
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	58024800 	.word	0x58024800

08008094 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b08c      	sub	sp, #48	; 0x30
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d101      	bne.n	80080a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e3ff      	b.n	80088a6 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f003 0301 	and.w	r3, r3, #1
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	f000 8087 	beq.w	80081c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080b4:	4b99      	ldr	r3, [pc, #612]	; (800831c <HAL_RCC_OscConfig+0x288>)
 80080b6:	691b      	ldr	r3, [r3, #16]
 80080b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80080bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80080be:	4b97      	ldr	r3, [pc, #604]	; (800831c <HAL_RCC_OscConfig+0x288>)
 80080c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80080c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c6:	2b10      	cmp	r3, #16
 80080c8:	d007      	beq.n	80080da <HAL_RCC_OscConfig+0x46>
 80080ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080cc:	2b18      	cmp	r3, #24
 80080ce:	d110      	bne.n	80080f2 <HAL_RCC_OscConfig+0x5e>
 80080d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d2:	f003 0303 	and.w	r3, r3, #3
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	d10b      	bne.n	80080f2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080da:	4b90      	ldr	r3, [pc, #576]	; (800831c <HAL_RCC_OscConfig+0x288>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d06c      	beq.n	80081c0 <HAL_RCC_OscConfig+0x12c>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d168      	bne.n	80081c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	e3d9      	b.n	80088a6 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080fa:	d106      	bne.n	800810a <HAL_RCC_OscConfig+0x76>
 80080fc:	4b87      	ldr	r3, [pc, #540]	; (800831c <HAL_RCC_OscConfig+0x288>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a86      	ldr	r2, [pc, #536]	; (800831c <HAL_RCC_OscConfig+0x288>)
 8008102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008106:	6013      	str	r3, [r2, #0]
 8008108:	e02e      	b.n	8008168 <HAL_RCC_OscConfig+0xd4>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d10c      	bne.n	800812c <HAL_RCC_OscConfig+0x98>
 8008112:	4b82      	ldr	r3, [pc, #520]	; (800831c <HAL_RCC_OscConfig+0x288>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a81      	ldr	r2, [pc, #516]	; (800831c <HAL_RCC_OscConfig+0x288>)
 8008118:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800811c:	6013      	str	r3, [r2, #0]
 800811e:	4b7f      	ldr	r3, [pc, #508]	; (800831c <HAL_RCC_OscConfig+0x288>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a7e      	ldr	r2, [pc, #504]	; (800831c <HAL_RCC_OscConfig+0x288>)
 8008124:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008128:	6013      	str	r3, [r2, #0]
 800812a:	e01d      	b.n	8008168 <HAL_RCC_OscConfig+0xd4>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008134:	d10c      	bne.n	8008150 <HAL_RCC_OscConfig+0xbc>
 8008136:	4b79      	ldr	r3, [pc, #484]	; (800831c <HAL_RCC_OscConfig+0x288>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a78      	ldr	r2, [pc, #480]	; (800831c <HAL_RCC_OscConfig+0x288>)
 800813c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008140:	6013      	str	r3, [r2, #0]
 8008142:	4b76      	ldr	r3, [pc, #472]	; (800831c <HAL_RCC_OscConfig+0x288>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a75      	ldr	r2, [pc, #468]	; (800831c <HAL_RCC_OscConfig+0x288>)
 8008148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800814c:	6013      	str	r3, [r2, #0]
 800814e:	e00b      	b.n	8008168 <HAL_RCC_OscConfig+0xd4>
 8008150:	4b72      	ldr	r3, [pc, #456]	; (800831c <HAL_RCC_OscConfig+0x288>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a71      	ldr	r2, [pc, #452]	; (800831c <HAL_RCC_OscConfig+0x288>)
 8008156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800815a:	6013      	str	r3, [r2, #0]
 800815c:	4b6f      	ldr	r3, [pc, #444]	; (800831c <HAL_RCC_OscConfig+0x288>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a6e      	ldr	r2, [pc, #440]	; (800831c <HAL_RCC_OscConfig+0x288>)
 8008162:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008166:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d013      	beq.n	8008198 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008170:	f7fa fa1a 	bl	80025a8 <HAL_GetTick>
 8008174:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008176:	e008      	b.n	800818a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008178:	f7fa fa16 	bl	80025a8 <HAL_GetTick>
 800817c:	4602      	mov	r2, r0
 800817e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	2b64      	cmp	r3, #100	; 0x64
 8008184:	d901      	bls.n	800818a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008186:	2303      	movs	r3, #3
 8008188:	e38d      	b.n	80088a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800818a:	4b64      	ldr	r3, [pc, #400]	; (800831c <HAL_RCC_OscConfig+0x288>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008192:	2b00      	cmp	r3, #0
 8008194:	d0f0      	beq.n	8008178 <HAL_RCC_OscConfig+0xe4>
 8008196:	e014      	b.n	80081c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008198:	f7fa fa06 	bl	80025a8 <HAL_GetTick>
 800819c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800819e:	e008      	b.n	80081b2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80081a0:	f7fa fa02 	bl	80025a8 <HAL_GetTick>
 80081a4:	4602      	mov	r2, r0
 80081a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a8:	1ad3      	subs	r3, r2, r3
 80081aa:	2b64      	cmp	r3, #100	; 0x64
 80081ac:	d901      	bls.n	80081b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80081ae:	2303      	movs	r3, #3
 80081b0:	e379      	b.n	80088a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80081b2:	4b5a      	ldr	r3, [pc, #360]	; (800831c <HAL_RCC_OscConfig+0x288>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d1f0      	bne.n	80081a0 <HAL_RCC_OscConfig+0x10c>
 80081be:	e000      	b.n	80081c2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f003 0302 	and.w	r3, r3, #2
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	f000 80ae 	beq.w	800832c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081d0:	4b52      	ldr	r3, [pc, #328]	; (800831c <HAL_RCC_OscConfig+0x288>)
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081d8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80081da:	4b50      	ldr	r3, [pc, #320]	; (800831c <HAL_RCC_OscConfig+0x288>)
 80081dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081de:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80081e0:	6a3b      	ldr	r3, [r7, #32]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d007      	beq.n	80081f6 <HAL_RCC_OscConfig+0x162>
 80081e6:	6a3b      	ldr	r3, [r7, #32]
 80081e8:	2b18      	cmp	r3, #24
 80081ea:	d13a      	bne.n	8008262 <HAL_RCC_OscConfig+0x1ce>
 80081ec:	69fb      	ldr	r3, [r7, #28]
 80081ee:	f003 0303 	and.w	r3, r3, #3
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d135      	bne.n	8008262 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80081f6:	4b49      	ldr	r3, [pc, #292]	; (800831c <HAL_RCC_OscConfig+0x288>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f003 0304 	and.w	r3, r3, #4
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d005      	beq.n	800820e <HAL_RCC_OscConfig+0x17a>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d101      	bne.n	800820e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	e34b      	b.n	80088a6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800820e:	f7fa f9fb 	bl	8002608 <HAL_GetREVID>
 8008212:	4603      	mov	r3, r0
 8008214:	f241 0203 	movw	r2, #4099	; 0x1003
 8008218:	4293      	cmp	r3, r2
 800821a:	d817      	bhi.n	800824c <HAL_RCC_OscConfig+0x1b8>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	2b40      	cmp	r3, #64	; 0x40
 8008222:	d108      	bne.n	8008236 <HAL_RCC_OscConfig+0x1a2>
 8008224:	4b3d      	ldr	r3, [pc, #244]	; (800831c <HAL_RCC_OscConfig+0x288>)
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800822c:	4a3b      	ldr	r2, [pc, #236]	; (800831c <HAL_RCC_OscConfig+0x288>)
 800822e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008232:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008234:	e07a      	b.n	800832c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008236:	4b39      	ldr	r3, [pc, #228]	; (800831c <HAL_RCC_OscConfig+0x288>)
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	031b      	lsls	r3, r3, #12
 8008244:	4935      	ldr	r1, [pc, #212]	; (800831c <HAL_RCC_OscConfig+0x288>)
 8008246:	4313      	orrs	r3, r2
 8008248:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800824a:	e06f      	b.n	800832c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800824c:	4b33      	ldr	r3, [pc, #204]	; (800831c <HAL_RCC_OscConfig+0x288>)
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	691b      	ldr	r3, [r3, #16]
 8008258:	061b      	lsls	r3, r3, #24
 800825a:	4930      	ldr	r1, [pc, #192]	; (800831c <HAL_RCC_OscConfig+0x288>)
 800825c:	4313      	orrs	r3, r2
 800825e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008260:	e064      	b.n	800832c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d045      	beq.n	80082f6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800826a:	4b2c      	ldr	r3, [pc, #176]	; (800831c <HAL_RCC_OscConfig+0x288>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f023 0219 	bic.w	r2, r3, #25
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	4929      	ldr	r1, [pc, #164]	; (800831c <HAL_RCC_OscConfig+0x288>)
 8008278:	4313      	orrs	r3, r2
 800827a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800827c:	f7fa f994 	bl	80025a8 <HAL_GetTick>
 8008280:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008282:	e008      	b.n	8008296 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008284:	f7fa f990 	bl	80025a8 <HAL_GetTick>
 8008288:	4602      	mov	r2, r0
 800828a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828c:	1ad3      	subs	r3, r2, r3
 800828e:	2b02      	cmp	r3, #2
 8008290:	d901      	bls.n	8008296 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8008292:	2303      	movs	r3, #3
 8008294:	e307      	b.n	80088a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008296:	4b21      	ldr	r3, [pc, #132]	; (800831c <HAL_RCC_OscConfig+0x288>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f003 0304 	and.w	r3, r3, #4
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d0f0      	beq.n	8008284 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082a2:	f7fa f9b1 	bl	8002608 <HAL_GetREVID>
 80082a6:	4603      	mov	r3, r0
 80082a8:	f241 0203 	movw	r2, #4099	; 0x1003
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d817      	bhi.n	80082e0 <HAL_RCC_OscConfig+0x24c>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	691b      	ldr	r3, [r3, #16]
 80082b4:	2b40      	cmp	r3, #64	; 0x40
 80082b6:	d108      	bne.n	80082ca <HAL_RCC_OscConfig+0x236>
 80082b8:	4b18      	ldr	r3, [pc, #96]	; (800831c <HAL_RCC_OscConfig+0x288>)
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80082c0:	4a16      	ldr	r2, [pc, #88]	; (800831c <HAL_RCC_OscConfig+0x288>)
 80082c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082c6:	6053      	str	r3, [r2, #4]
 80082c8:	e030      	b.n	800832c <HAL_RCC_OscConfig+0x298>
 80082ca:	4b14      	ldr	r3, [pc, #80]	; (800831c <HAL_RCC_OscConfig+0x288>)
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	031b      	lsls	r3, r3, #12
 80082d8:	4910      	ldr	r1, [pc, #64]	; (800831c <HAL_RCC_OscConfig+0x288>)
 80082da:	4313      	orrs	r3, r2
 80082dc:	604b      	str	r3, [r1, #4]
 80082de:	e025      	b.n	800832c <HAL_RCC_OscConfig+0x298>
 80082e0:	4b0e      	ldr	r3, [pc, #56]	; (800831c <HAL_RCC_OscConfig+0x288>)
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	061b      	lsls	r3, r3, #24
 80082ee:	490b      	ldr	r1, [pc, #44]	; (800831c <HAL_RCC_OscConfig+0x288>)
 80082f0:	4313      	orrs	r3, r2
 80082f2:	604b      	str	r3, [r1, #4]
 80082f4:	e01a      	b.n	800832c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082f6:	4b09      	ldr	r3, [pc, #36]	; (800831c <HAL_RCC_OscConfig+0x288>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a08      	ldr	r2, [pc, #32]	; (800831c <HAL_RCC_OscConfig+0x288>)
 80082fc:	f023 0301 	bic.w	r3, r3, #1
 8008300:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008302:	f7fa f951 	bl	80025a8 <HAL_GetTick>
 8008306:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008308:	e00a      	b.n	8008320 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800830a:	f7fa f94d 	bl	80025a8 <HAL_GetTick>
 800830e:	4602      	mov	r2, r0
 8008310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008312:	1ad3      	subs	r3, r2, r3
 8008314:	2b02      	cmp	r3, #2
 8008316:	d903      	bls.n	8008320 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8008318:	2303      	movs	r3, #3
 800831a:	e2c4      	b.n	80088a6 <HAL_RCC_OscConfig+0x812>
 800831c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008320:	4ba4      	ldr	r3, [pc, #656]	; (80085b4 <HAL_RCC_OscConfig+0x520>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f003 0304 	and.w	r3, r3, #4
 8008328:	2b00      	cmp	r3, #0
 800832a:	d1ee      	bne.n	800830a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f003 0310 	and.w	r3, r3, #16
 8008334:	2b00      	cmp	r3, #0
 8008336:	f000 80a9 	beq.w	800848c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800833a:	4b9e      	ldr	r3, [pc, #632]	; (80085b4 <HAL_RCC_OscConfig+0x520>)
 800833c:	691b      	ldr	r3, [r3, #16]
 800833e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008342:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008344:	4b9b      	ldr	r3, [pc, #620]	; (80085b4 <HAL_RCC_OscConfig+0x520>)
 8008346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008348:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	2b08      	cmp	r3, #8
 800834e:	d007      	beq.n	8008360 <HAL_RCC_OscConfig+0x2cc>
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	2b18      	cmp	r3, #24
 8008354:	d13a      	bne.n	80083cc <HAL_RCC_OscConfig+0x338>
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	f003 0303 	and.w	r3, r3, #3
 800835c:	2b01      	cmp	r3, #1
 800835e:	d135      	bne.n	80083cc <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008360:	4b94      	ldr	r3, [pc, #592]	; (80085b4 <HAL_RCC_OscConfig+0x520>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008368:	2b00      	cmp	r3, #0
 800836a:	d005      	beq.n	8008378 <HAL_RCC_OscConfig+0x2e4>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	69db      	ldr	r3, [r3, #28]
 8008370:	2b80      	cmp	r3, #128	; 0x80
 8008372:	d001      	beq.n	8008378 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	e296      	b.n	80088a6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008378:	f7fa f946 	bl	8002608 <HAL_GetREVID>
 800837c:	4603      	mov	r3, r0
 800837e:	f241 0203 	movw	r2, #4099	; 0x1003
 8008382:	4293      	cmp	r3, r2
 8008384:	d817      	bhi.n	80083b6 <HAL_RCC_OscConfig+0x322>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a1b      	ldr	r3, [r3, #32]
 800838a:	2b20      	cmp	r3, #32
 800838c:	d108      	bne.n	80083a0 <HAL_RCC_OscConfig+0x30c>
 800838e:	4b89      	ldr	r3, [pc, #548]	; (80085b4 <HAL_RCC_OscConfig+0x520>)
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008396:	4a87      	ldr	r2, [pc, #540]	; (80085b4 <HAL_RCC_OscConfig+0x520>)
 8008398:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800839c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800839e:	e075      	b.n	800848c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80083a0:	4b84      	ldr	r3, [pc, #528]	; (80085b4 <HAL_RCC_OscConfig+0x520>)
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a1b      	ldr	r3, [r3, #32]
 80083ac:	069b      	lsls	r3, r3, #26
 80083ae:	4981      	ldr	r1, [pc, #516]	; (80085b4 <HAL_RCC_OscConfig+0x520>)
 80083b0:	4313      	orrs	r3, r2
 80083b2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80083b4:	e06a      	b.n	800848c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80083b6:	4b7f      	ldr	r3, [pc, #508]	; (80085b4 <HAL_RCC_OscConfig+0x520>)
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a1b      	ldr	r3, [r3, #32]
 80083c2:	061b      	lsls	r3, r3, #24
 80083c4:	497b      	ldr	r1, [pc, #492]	; (80085b4 <HAL_RCC_OscConfig+0x520>)
 80083c6:	4313      	orrs	r3, r2
 80083c8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80083ca:	e05f      	b.n	800848c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	69db      	ldr	r3, [r3, #28]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d042      	beq.n	800845a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80083d4:	4b77      	ldr	r3, [pc, #476]	; (80085b4 <HAL_RCC_OscConfig+0x520>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a76      	ldr	r2, [pc, #472]	; (80085b4 <HAL_RCC_OscConfig+0x520>)
 80083da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083e0:	f7fa f8e2 	bl	80025a8 <HAL_GetTick>
 80083e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80083e6:	e008      	b.n	80083fa <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80083e8:	f7fa f8de 	bl	80025a8 <HAL_GetTick>
 80083ec:	4602      	mov	r2, r0
 80083ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	2b02      	cmp	r3, #2
 80083f4:	d901      	bls.n	80083fa <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80083f6:	2303      	movs	r3, #3
 80083f8:	e255      	b.n	80088a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80083fa:	4b6e      	ldr	r3, [pc, #440]	; (80085b4 <HAL_RCC_OscConfig+0x520>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008402:	2b00      	cmp	r3, #0
 8008404:	d0f0      	beq.n	80083e8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008406:	f7fa f8ff 	bl	8002608 <HAL_GetREVID>
 800840a:	4603      	mov	r3, r0
 800840c:	f241 0203 	movw	r2, #4099	; 0x1003
 8008410:	4293      	cmp	r3, r2
 8008412:	d817      	bhi.n	8008444 <HAL_RCC_OscConfig+0x3b0>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6a1b      	ldr	r3, [r3, #32]
 8008418:	2b20      	cmp	r3, #32
 800841a:	d108      	bne.n	800842e <HAL_RCC_OscConfig+0x39a>
 800841c:	4b65      	ldr	r3, [pc, #404]	; (80085b4 <HAL_RCC_OscConfig+0x520>)
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008424:	4a63      	ldr	r2, [pc, #396]	; (80085b4 <HAL_RCC_OscConfig+0x520>)
 8008426:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800842a:	6053      	str	r3, [r2, #4]
 800842c:	e02e      	b.n	800848c <HAL_RCC_OscConfig+0x3f8>
 800842e:	4b61      	ldr	r3, [pc, #388]	; (80085b4 <HAL_RCC_OscConfig+0x520>)
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6a1b      	ldr	r3, [r3, #32]
 800843a:	069b      	lsls	r3, r3, #26
 800843c:	495d      	ldr	r1, [pc, #372]	; (80085b4 <HAL_RCC_OscConfig+0x520>)
 800843e:	4313      	orrs	r3, r2
 8008440:	604b      	str	r3, [r1, #4]
 8008442:	e023      	b.n	800848c <HAL_RCC_OscConfig+0x3f8>
 8008444:	4b5b      	ldr	r3, [pc, #364]	; (80085b4 <HAL_RCC_OscConfig+0x520>)
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6a1b      	ldr	r3, [r3, #32]
 8008450:	061b      	lsls	r3, r3, #24
 8008452:	4958      	ldr	r1, [pc, #352]	; (80085b4 <HAL_RCC_OscConfig+0x520>)
 8008454:	4313      	orrs	r3, r2
 8008456:	60cb      	str	r3, [r1, #12]
 8008458:	e018      	b.n	800848c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800845a:	4b56      	ldr	r3, [pc, #344]	; (80085b4 <HAL_RCC_OscConfig+0x520>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a55      	ldr	r2, [pc, #340]	; (80085b4 <HAL_RCC_OscConfig+0x520>)
 8008460:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008464:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008466:	f7fa f89f 	bl	80025a8 <HAL_GetTick>
 800846a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800846c:	e008      	b.n	8008480 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800846e:	f7fa f89b 	bl	80025a8 <HAL_GetTick>
 8008472:	4602      	mov	r2, r0
 8008474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008476:	1ad3      	subs	r3, r2, r3
 8008478:	2b02      	cmp	r3, #2
 800847a:	d901      	bls.n	8008480 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800847c:	2303      	movs	r3, #3
 800847e:	e212      	b.n	80088a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008480:	4b4c      	ldr	r3, [pc, #304]	; (80085b4 <HAL_RCC_OscConfig+0x520>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008488:	2b00      	cmp	r3, #0
 800848a:	d1f0      	bne.n	800846e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f003 0308 	and.w	r3, r3, #8
 8008494:	2b00      	cmp	r3, #0
 8008496:	d036      	beq.n	8008506 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	695b      	ldr	r3, [r3, #20]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d019      	beq.n	80084d4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80084a0:	4b44      	ldr	r3, [pc, #272]	; (80085b4 <HAL_RCC_OscConfig+0x520>)
 80084a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084a4:	4a43      	ldr	r2, [pc, #268]	; (80085b4 <HAL_RCC_OscConfig+0x520>)
 80084a6:	f043 0301 	orr.w	r3, r3, #1
 80084aa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084ac:	f7fa f87c 	bl	80025a8 <HAL_GetTick>
 80084b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80084b2:	e008      	b.n	80084c6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80084b4:	f7fa f878 	bl	80025a8 <HAL_GetTick>
 80084b8:	4602      	mov	r2, r0
 80084ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084bc:	1ad3      	subs	r3, r2, r3
 80084be:	2b02      	cmp	r3, #2
 80084c0:	d901      	bls.n	80084c6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80084c2:	2303      	movs	r3, #3
 80084c4:	e1ef      	b.n	80088a6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80084c6:	4b3b      	ldr	r3, [pc, #236]	; (80085b4 <HAL_RCC_OscConfig+0x520>)
 80084c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084ca:	f003 0302 	and.w	r3, r3, #2
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d0f0      	beq.n	80084b4 <HAL_RCC_OscConfig+0x420>
 80084d2:	e018      	b.n	8008506 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80084d4:	4b37      	ldr	r3, [pc, #220]	; (80085b4 <HAL_RCC_OscConfig+0x520>)
 80084d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084d8:	4a36      	ldr	r2, [pc, #216]	; (80085b4 <HAL_RCC_OscConfig+0x520>)
 80084da:	f023 0301 	bic.w	r3, r3, #1
 80084de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084e0:	f7fa f862 	bl	80025a8 <HAL_GetTick>
 80084e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80084e6:	e008      	b.n	80084fa <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80084e8:	f7fa f85e 	bl	80025a8 <HAL_GetTick>
 80084ec:	4602      	mov	r2, r0
 80084ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f0:	1ad3      	subs	r3, r2, r3
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d901      	bls.n	80084fa <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80084f6:	2303      	movs	r3, #3
 80084f8:	e1d5      	b.n	80088a6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80084fa:	4b2e      	ldr	r3, [pc, #184]	; (80085b4 <HAL_RCC_OscConfig+0x520>)
 80084fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084fe:	f003 0302 	and.w	r3, r3, #2
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1f0      	bne.n	80084e8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f003 0320 	and.w	r3, r3, #32
 800850e:	2b00      	cmp	r3, #0
 8008510:	d036      	beq.n	8008580 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	699b      	ldr	r3, [r3, #24]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d019      	beq.n	800854e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800851a:	4b26      	ldr	r3, [pc, #152]	; (80085b4 <HAL_RCC_OscConfig+0x520>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a25      	ldr	r2, [pc, #148]	; (80085b4 <HAL_RCC_OscConfig+0x520>)
 8008520:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008524:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008526:	f7fa f83f 	bl	80025a8 <HAL_GetTick>
 800852a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800852c:	e008      	b.n	8008540 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800852e:	f7fa f83b 	bl	80025a8 <HAL_GetTick>
 8008532:	4602      	mov	r2, r0
 8008534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008536:	1ad3      	subs	r3, r2, r3
 8008538:	2b02      	cmp	r3, #2
 800853a:	d901      	bls.n	8008540 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800853c:	2303      	movs	r3, #3
 800853e:	e1b2      	b.n	80088a6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008540:	4b1c      	ldr	r3, [pc, #112]	; (80085b4 <HAL_RCC_OscConfig+0x520>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008548:	2b00      	cmp	r3, #0
 800854a:	d0f0      	beq.n	800852e <HAL_RCC_OscConfig+0x49a>
 800854c:	e018      	b.n	8008580 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800854e:	4b19      	ldr	r3, [pc, #100]	; (80085b4 <HAL_RCC_OscConfig+0x520>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a18      	ldr	r2, [pc, #96]	; (80085b4 <HAL_RCC_OscConfig+0x520>)
 8008554:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008558:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800855a:	f7fa f825 	bl	80025a8 <HAL_GetTick>
 800855e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008560:	e008      	b.n	8008574 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008562:	f7fa f821 	bl	80025a8 <HAL_GetTick>
 8008566:	4602      	mov	r2, r0
 8008568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856a:	1ad3      	subs	r3, r2, r3
 800856c:	2b02      	cmp	r3, #2
 800856e:	d901      	bls.n	8008574 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8008570:	2303      	movs	r3, #3
 8008572:	e198      	b.n	80088a6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008574:	4b0f      	ldr	r3, [pc, #60]	; (80085b4 <HAL_RCC_OscConfig+0x520>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800857c:	2b00      	cmp	r3, #0
 800857e:	d1f0      	bne.n	8008562 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 0304 	and.w	r3, r3, #4
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 8085 	beq.w	8008698 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800858e:	4b0a      	ldr	r3, [pc, #40]	; (80085b8 <HAL_RCC_OscConfig+0x524>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a09      	ldr	r2, [pc, #36]	; (80085b8 <HAL_RCC_OscConfig+0x524>)
 8008594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008598:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800859a:	f7fa f805 	bl	80025a8 <HAL_GetTick>
 800859e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80085a0:	e00c      	b.n	80085bc <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80085a2:	f7fa f801 	bl	80025a8 <HAL_GetTick>
 80085a6:	4602      	mov	r2, r0
 80085a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085aa:	1ad3      	subs	r3, r2, r3
 80085ac:	2b64      	cmp	r3, #100	; 0x64
 80085ae:	d905      	bls.n	80085bc <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80085b0:	2303      	movs	r3, #3
 80085b2:	e178      	b.n	80088a6 <HAL_RCC_OscConfig+0x812>
 80085b4:	58024400 	.word	0x58024400
 80085b8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80085bc:	4b96      	ldr	r3, [pc, #600]	; (8008818 <HAL_RCC_OscConfig+0x784>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d0ec      	beq.n	80085a2 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d106      	bne.n	80085de <HAL_RCC_OscConfig+0x54a>
 80085d0:	4b92      	ldr	r3, [pc, #584]	; (800881c <HAL_RCC_OscConfig+0x788>)
 80085d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085d4:	4a91      	ldr	r2, [pc, #580]	; (800881c <HAL_RCC_OscConfig+0x788>)
 80085d6:	f043 0301 	orr.w	r3, r3, #1
 80085da:	6713      	str	r3, [r2, #112]	; 0x70
 80085dc:	e02d      	b.n	800863a <HAL_RCC_OscConfig+0x5a6>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d10c      	bne.n	8008600 <HAL_RCC_OscConfig+0x56c>
 80085e6:	4b8d      	ldr	r3, [pc, #564]	; (800881c <HAL_RCC_OscConfig+0x788>)
 80085e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ea:	4a8c      	ldr	r2, [pc, #560]	; (800881c <HAL_RCC_OscConfig+0x788>)
 80085ec:	f023 0301 	bic.w	r3, r3, #1
 80085f0:	6713      	str	r3, [r2, #112]	; 0x70
 80085f2:	4b8a      	ldr	r3, [pc, #552]	; (800881c <HAL_RCC_OscConfig+0x788>)
 80085f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085f6:	4a89      	ldr	r2, [pc, #548]	; (800881c <HAL_RCC_OscConfig+0x788>)
 80085f8:	f023 0304 	bic.w	r3, r3, #4
 80085fc:	6713      	str	r3, [r2, #112]	; 0x70
 80085fe:	e01c      	b.n	800863a <HAL_RCC_OscConfig+0x5a6>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	2b05      	cmp	r3, #5
 8008606:	d10c      	bne.n	8008622 <HAL_RCC_OscConfig+0x58e>
 8008608:	4b84      	ldr	r3, [pc, #528]	; (800881c <HAL_RCC_OscConfig+0x788>)
 800860a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800860c:	4a83      	ldr	r2, [pc, #524]	; (800881c <HAL_RCC_OscConfig+0x788>)
 800860e:	f043 0304 	orr.w	r3, r3, #4
 8008612:	6713      	str	r3, [r2, #112]	; 0x70
 8008614:	4b81      	ldr	r3, [pc, #516]	; (800881c <HAL_RCC_OscConfig+0x788>)
 8008616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008618:	4a80      	ldr	r2, [pc, #512]	; (800881c <HAL_RCC_OscConfig+0x788>)
 800861a:	f043 0301 	orr.w	r3, r3, #1
 800861e:	6713      	str	r3, [r2, #112]	; 0x70
 8008620:	e00b      	b.n	800863a <HAL_RCC_OscConfig+0x5a6>
 8008622:	4b7e      	ldr	r3, [pc, #504]	; (800881c <HAL_RCC_OscConfig+0x788>)
 8008624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008626:	4a7d      	ldr	r2, [pc, #500]	; (800881c <HAL_RCC_OscConfig+0x788>)
 8008628:	f023 0301 	bic.w	r3, r3, #1
 800862c:	6713      	str	r3, [r2, #112]	; 0x70
 800862e:	4b7b      	ldr	r3, [pc, #492]	; (800881c <HAL_RCC_OscConfig+0x788>)
 8008630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008632:	4a7a      	ldr	r2, [pc, #488]	; (800881c <HAL_RCC_OscConfig+0x788>)
 8008634:	f023 0304 	bic.w	r3, r3, #4
 8008638:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d015      	beq.n	800866e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008642:	f7f9 ffb1 	bl	80025a8 <HAL_GetTick>
 8008646:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008648:	e00a      	b.n	8008660 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800864a:	f7f9 ffad 	bl	80025a8 <HAL_GetTick>
 800864e:	4602      	mov	r2, r0
 8008650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008652:	1ad3      	subs	r3, r2, r3
 8008654:	f241 3288 	movw	r2, #5000	; 0x1388
 8008658:	4293      	cmp	r3, r2
 800865a:	d901      	bls.n	8008660 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800865c:	2303      	movs	r3, #3
 800865e:	e122      	b.n	80088a6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008660:	4b6e      	ldr	r3, [pc, #440]	; (800881c <HAL_RCC_OscConfig+0x788>)
 8008662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008664:	f003 0302 	and.w	r3, r3, #2
 8008668:	2b00      	cmp	r3, #0
 800866a:	d0ee      	beq.n	800864a <HAL_RCC_OscConfig+0x5b6>
 800866c:	e014      	b.n	8008698 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800866e:	f7f9 ff9b 	bl	80025a8 <HAL_GetTick>
 8008672:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008674:	e00a      	b.n	800868c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008676:	f7f9 ff97 	bl	80025a8 <HAL_GetTick>
 800867a:	4602      	mov	r2, r0
 800867c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867e:	1ad3      	subs	r3, r2, r3
 8008680:	f241 3288 	movw	r2, #5000	; 0x1388
 8008684:	4293      	cmp	r3, r2
 8008686:	d901      	bls.n	800868c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8008688:	2303      	movs	r3, #3
 800868a:	e10c      	b.n	80088a6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800868c:	4b63      	ldr	r3, [pc, #396]	; (800881c <HAL_RCC_OscConfig+0x788>)
 800868e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008690:	f003 0302 	and.w	r3, r3, #2
 8008694:	2b00      	cmp	r3, #0
 8008696:	d1ee      	bne.n	8008676 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869c:	2b00      	cmp	r3, #0
 800869e:	f000 8101 	beq.w	80088a4 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80086a2:	4b5e      	ldr	r3, [pc, #376]	; (800881c <HAL_RCC_OscConfig+0x788>)
 80086a4:	691b      	ldr	r3, [r3, #16]
 80086a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086aa:	2b18      	cmp	r3, #24
 80086ac:	f000 80bc 	beq.w	8008828 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b4:	2b02      	cmp	r3, #2
 80086b6:	f040 8095 	bne.w	80087e4 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086ba:	4b58      	ldr	r3, [pc, #352]	; (800881c <HAL_RCC_OscConfig+0x788>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a57      	ldr	r2, [pc, #348]	; (800881c <HAL_RCC_OscConfig+0x788>)
 80086c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80086c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086c6:	f7f9 ff6f 	bl	80025a8 <HAL_GetTick>
 80086ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80086cc:	e008      	b.n	80086e0 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086ce:	f7f9 ff6b 	bl	80025a8 <HAL_GetTick>
 80086d2:	4602      	mov	r2, r0
 80086d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d6:	1ad3      	subs	r3, r2, r3
 80086d8:	2b02      	cmp	r3, #2
 80086da:	d901      	bls.n	80086e0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80086dc:	2303      	movs	r3, #3
 80086de:	e0e2      	b.n	80088a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80086e0:	4b4e      	ldr	r3, [pc, #312]	; (800881c <HAL_RCC_OscConfig+0x788>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d1f0      	bne.n	80086ce <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80086ec:	4b4b      	ldr	r3, [pc, #300]	; (800881c <HAL_RCC_OscConfig+0x788>)
 80086ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086f0:	4b4b      	ldr	r3, [pc, #300]	; (8008820 <HAL_RCC_OscConfig+0x78c>)
 80086f2:	4013      	ands	r3, r2
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80086fc:	0112      	lsls	r2, r2, #4
 80086fe:	430a      	orrs	r2, r1
 8008700:	4946      	ldr	r1, [pc, #280]	; (800881c <HAL_RCC_OscConfig+0x788>)
 8008702:	4313      	orrs	r3, r2
 8008704:	628b      	str	r3, [r1, #40]	; 0x28
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800870a:	3b01      	subs	r3, #1
 800870c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008714:	3b01      	subs	r3, #1
 8008716:	025b      	lsls	r3, r3, #9
 8008718:	b29b      	uxth	r3, r3
 800871a:	431a      	orrs	r2, r3
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008720:	3b01      	subs	r3, #1
 8008722:	041b      	lsls	r3, r3, #16
 8008724:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008728:	431a      	orrs	r2, r3
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800872e:	3b01      	subs	r3, #1
 8008730:	061b      	lsls	r3, r3, #24
 8008732:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008736:	4939      	ldr	r1, [pc, #228]	; (800881c <HAL_RCC_OscConfig+0x788>)
 8008738:	4313      	orrs	r3, r2
 800873a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800873c:	4b37      	ldr	r3, [pc, #220]	; (800881c <HAL_RCC_OscConfig+0x788>)
 800873e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008740:	4a36      	ldr	r2, [pc, #216]	; (800881c <HAL_RCC_OscConfig+0x788>)
 8008742:	f023 0301 	bic.w	r3, r3, #1
 8008746:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008748:	4b34      	ldr	r3, [pc, #208]	; (800881c <HAL_RCC_OscConfig+0x788>)
 800874a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800874c:	4b35      	ldr	r3, [pc, #212]	; (8008824 <HAL_RCC_OscConfig+0x790>)
 800874e:	4013      	ands	r3, r2
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008754:	00d2      	lsls	r2, r2, #3
 8008756:	4931      	ldr	r1, [pc, #196]	; (800881c <HAL_RCC_OscConfig+0x788>)
 8008758:	4313      	orrs	r3, r2
 800875a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800875c:	4b2f      	ldr	r3, [pc, #188]	; (800881c <HAL_RCC_OscConfig+0x788>)
 800875e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008760:	f023 020c 	bic.w	r2, r3, #12
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008768:	492c      	ldr	r1, [pc, #176]	; (800881c <HAL_RCC_OscConfig+0x788>)
 800876a:	4313      	orrs	r3, r2
 800876c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800876e:	4b2b      	ldr	r3, [pc, #172]	; (800881c <HAL_RCC_OscConfig+0x788>)
 8008770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008772:	f023 0202 	bic.w	r2, r3, #2
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800877a:	4928      	ldr	r1, [pc, #160]	; (800881c <HAL_RCC_OscConfig+0x788>)
 800877c:	4313      	orrs	r3, r2
 800877e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008780:	4b26      	ldr	r3, [pc, #152]	; (800881c <HAL_RCC_OscConfig+0x788>)
 8008782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008784:	4a25      	ldr	r2, [pc, #148]	; (800881c <HAL_RCC_OscConfig+0x788>)
 8008786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800878a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800878c:	4b23      	ldr	r3, [pc, #140]	; (800881c <HAL_RCC_OscConfig+0x788>)
 800878e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008790:	4a22      	ldr	r2, [pc, #136]	; (800881c <HAL_RCC_OscConfig+0x788>)
 8008792:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008796:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008798:	4b20      	ldr	r3, [pc, #128]	; (800881c <HAL_RCC_OscConfig+0x788>)
 800879a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800879c:	4a1f      	ldr	r2, [pc, #124]	; (800881c <HAL_RCC_OscConfig+0x788>)
 800879e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80087a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80087a4:	4b1d      	ldr	r3, [pc, #116]	; (800881c <HAL_RCC_OscConfig+0x788>)
 80087a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a8:	4a1c      	ldr	r2, [pc, #112]	; (800881c <HAL_RCC_OscConfig+0x788>)
 80087aa:	f043 0301 	orr.w	r3, r3, #1
 80087ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087b0:	4b1a      	ldr	r3, [pc, #104]	; (800881c <HAL_RCC_OscConfig+0x788>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a19      	ldr	r2, [pc, #100]	; (800881c <HAL_RCC_OscConfig+0x788>)
 80087b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80087ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087bc:	f7f9 fef4 	bl	80025a8 <HAL_GetTick>
 80087c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80087c2:	e008      	b.n	80087d6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087c4:	f7f9 fef0 	bl	80025a8 <HAL_GetTick>
 80087c8:	4602      	mov	r2, r0
 80087ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087cc:	1ad3      	subs	r3, r2, r3
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	d901      	bls.n	80087d6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80087d2:	2303      	movs	r3, #3
 80087d4:	e067      	b.n	80088a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80087d6:	4b11      	ldr	r3, [pc, #68]	; (800881c <HAL_RCC_OscConfig+0x788>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d0f0      	beq.n	80087c4 <HAL_RCC_OscConfig+0x730>
 80087e2:	e05f      	b.n	80088a4 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087e4:	4b0d      	ldr	r3, [pc, #52]	; (800881c <HAL_RCC_OscConfig+0x788>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a0c      	ldr	r2, [pc, #48]	; (800881c <HAL_RCC_OscConfig+0x788>)
 80087ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80087ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087f0:	f7f9 feda 	bl	80025a8 <HAL_GetTick>
 80087f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80087f6:	e008      	b.n	800880a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087f8:	f7f9 fed6 	bl	80025a8 <HAL_GetTick>
 80087fc:	4602      	mov	r2, r0
 80087fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	2b02      	cmp	r3, #2
 8008804:	d901      	bls.n	800880a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8008806:	2303      	movs	r3, #3
 8008808:	e04d      	b.n	80088a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800880a:	4b04      	ldr	r3, [pc, #16]	; (800881c <HAL_RCC_OscConfig+0x788>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008812:	2b00      	cmp	r3, #0
 8008814:	d1f0      	bne.n	80087f8 <HAL_RCC_OscConfig+0x764>
 8008816:	e045      	b.n	80088a4 <HAL_RCC_OscConfig+0x810>
 8008818:	58024800 	.word	0x58024800
 800881c:	58024400 	.word	0x58024400
 8008820:	fffffc0c 	.word	0xfffffc0c
 8008824:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008828:	4b21      	ldr	r3, [pc, #132]	; (80088b0 <HAL_RCC_OscConfig+0x81c>)
 800882a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800882c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800882e:	4b20      	ldr	r3, [pc, #128]	; (80088b0 <HAL_RCC_OscConfig+0x81c>)
 8008830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008832:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008838:	2b01      	cmp	r3, #1
 800883a:	d031      	beq.n	80088a0 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	f003 0203 	and.w	r2, r3, #3
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008846:	429a      	cmp	r2, r3
 8008848:	d12a      	bne.n	80088a0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	091b      	lsrs	r3, r3, #4
 800884e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008856:	429a      	cmp	r2, r3
 8008858:	d122      	bne.n	80088a0 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008864:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008866:	429a      	cmp	r2, r3
 8008868:	d11a      	bne.n	80088a0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	0a5b      	lsrs	r3, r3, #9
 800886e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008876:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008878:	429a      	cmp	r2, r3
 800887a:	d111      	bne.n	80088a0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	0c1b      	lsrs	r3, r3, #16
 8008880:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008888:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800888a:	429a      	cmp	r2, r3
 800888c:	d108      	bne.n	80088a0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	0e1b      	lsrs	r3, r3, #24
 8008892:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800889a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800889c:	429a      	cmp	r2, r3
 800889e:	d001      	beq.n	80088a4 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	e000      	b.n	80088a6 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3730      	adds	r7, #48	; 0x30
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	58024400 	.word	0x58024400

080088b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b086      	sub	sp, #24
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d101      	bne.n	80088c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	e19c      	b.n	8008c02 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80088c8:	4b8a      	ldr	r3, [pc, #552]	; (8008af4 <HAL_RCC_ClockConfig+0x240>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 030f 	and.w	r3, r3, #15
 80088d0:	683a      	ldr	r2, [r7, #0]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d910      	bls.n	80088f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088d6:	4b87      	ldr	r3, [pc, #540]	; (8008af4 <HAL_RCC_ClockConfig+0x240>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f023 020f 	bic.w	r2, r3, #15
 80088de:	4985      	ldr	r1, [pc, #532]	; (8008af4 <HAL_RCC_ClockConfig+0x240>)
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	4313      	orrs	r3, r2
 80088e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088e6:	4b83      	ldr	r3, [pc, #524]	; (8008af4 <HAL_RCC_ClockConfig+0x240>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f003 030f 	and.w	r3, r3, #15
 80088ee:	683a      	ldr	r2, [r7, #0]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d001      	beq.n	80088f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80088f4:	2301      	movs	r3, #1
 80088f6:	e184      	b.n	8008c02 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f003 0304 	and.w	r3, r3, #4
 8008900:	2b00      	cmp	r3, #0
 8008902:	d010      	beq.n	8008926 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	691a      	ldr	r2, [r3, #16]
 8008908:	4b7b      	ldr	r3, [pc, #492]	; (8008af8 <HAL_RCC_ClockConfig+0x244>)
 800890a:	699b      	ldr	r3, [r3, #24]
 800890c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008910:	429a      	cmp	r2, r3
 8008912:	d908      	bls.n	8008926 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008914:	4b78      	ldr	r3, [pc, #480]	; (8008af8 <HAL_RCC_ClockConfig+0x244>)
 8008916:	699b      	ldr	r3, [r3, #24]
 8008918:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	691b      	ldr	r3, [r3, #16]
 8008920:	4975      	ldr	r1, [pc, #468]	; (8008af8 <HAL_RCC_ClockConfig+0x244>)
 8008922:	4313      	orrs	r3, r2
 8008924:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f003 0308 	and.w	r3, r3, #8
 800892e:	2b00      	cmp	r3, #0
 8008930:	d010      	beq.n	8008954 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	695a      	ldr	r2, [r3, #20]
 8008936:	4b70      	ldr	r3, [pc, #448]	; (8008af8 <HAL_RCC_ClockConfig+0x244>)
 8008938:	69db      	ldr	r3, [r3, #28]
 800893a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800893e:	429a      	cmp	r2, r3
 8008940:	d908      	bls.n	8008954 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008942:	4b6d      	ldr	r3, [pc, #436]	; (8008af8 <HAL_RCC_ClockConfig+0x244>)
 8008944:	69db      	ldr	r3, [r3, #28]
 8008946:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	695b      	ldr	r3, [r3, #20]
 800894e:	496a      	ldr	r1, [pc, #424]	; (8008af8 <HAL_RCC_ClockConfig+0x244>)
 8008950:	4313      	orrs	r3, r2
 8008952:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f003 0310 	and.w	r3, r3, #16
 800895c:	2b00      	cmp	r3, #0
 800895e:	d010      	beq.n	8008982 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	699a      	ldr	r2, [r3, #24]
 8008964:	4b64      	ldr	r3, [pc, #400]	; (8008af8 <HAL_RCC_ClockConfig+0x244>)
 8008966:	69db      	ldr	r3, [r3, #28]
 8008968:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800896c:	429a      	cmp	r2, r3
 800896e:	d908      	bls.n	8008982 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008970:	4b61      	ldr	r3, [pc, #388]	; (8008af8 <HAL_RCC_ClockConfig+0x244>)
 8008972:	69db      	ldr	r3, [r3, #28]
 8008974:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	699b      	ldr	r3, [r3, #24]
 800897c:	495e      	ldr	r1, [pc, #376]	; (8008af8 <HAL_RCC_ClockConfig+0x244>)
 800897e:	4313      	orrs	r3, r2
 8008980:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f003 0320 	and.w	r3, r3, #32
 800898a:	2b00      	cmp	r3, #0
 800898c:	d010      	beq.n	80089b0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	69da      	ldr	r2, [r3, #28]
 8008992:	4b59      	ldr	r3, [pc, #356]	; (8008af8 <HAL_RCC_ClockConfig+0x244>)
 8008994:	6a1b      	ldr	r3, [r3, #32]
 8008996:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800899a:	429a      	cmp	r2, r3
 800899c:	d908      	bls.n	80089b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800899e:	4b56      	ldr	r3, [pc, #344]	; (8008af8 <HAL_RCC_ClockConfig+0x244>)
 80089a0:	6a1b      	ldr	r3, [r3, #32]
 80089a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	69db      	ldr	r3, [r3, #28]
 80089aa:	4953      	ldr	r1, [pc, #332]	; (8008af8 <HAL_RCC_ClockConfig+0x244>)
 80089ac:	4313      	orrs	r3, r2
 80089ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f003 0302 	and.w	r3, r3, #2
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d010      	beq.n	80089de <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	68da      	ldr	r2, [r3, #12]
 80089c0:	4b4d      	ldr	r3, [pc, #308]	; (8008af8 <HAL_RCC_ClockConfig+0x244>)
 80089c2:	699b      	ldr	r3, [r3, #24]
 80089c4:	f003 030f 	and.w	r3, r3, #15
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d908      	bls.n	80089de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089cc:	4b4a      	ldr	r3, [pc, #296]	; (8008af8 <HAL_RCC_ClockConfig+0x244>)
 80089ce:	699b      	ldr	r3, [r3, #24]
 80089d0:	f023 020f 	bic.w	r2, r3, #15
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	4947      	ldr	r1, [pc, #284]	; (8008af8 <HAL_RCC_ClockConfig+0x244>)
 80089da:	4313      	orrs	r3, r2
 80089dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f003 0301 	and.w	r3, r3, #1
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d055      	beq.n	8008a96 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80089ea:	4b43      	ldr	r3, [pc, #268]	; (8008af8 <HAL_RCC_ClockConfig+0x244>)
 80089ec:	699b      	ldr	r3, [r3, #24]
 80089ee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	4940      	ldr	r1, [pc, #256]	; (8008af8 <HAL_RCC_ClockConfig+0x244>)
 80089f8:	4313      	orrs	r3, r2
 80089fa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	2b02      	cmp	r3, #2
 8008a02:	d107      	bne.n	8008a14 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008a04:	4b3c      	ldr	r3, [pc, #240]	; (8008af8 <HAL_RCC_ClockConfig+0x244>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d121      	bne.n	8008a54 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	e0f6      	b.n	8008c02 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	2b03      	cmp	r3, #3
 8008a1a:	d107      	bne.n	8008a2c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008a1c:	4b36      	ldr	r3, [pc, #216]	; (8008af8 <HAL_RCC_ClockConfig+0x244>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d115      	bne.n	8008a54 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e0ea      	b.n	8008c02 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d107      	bne.n	8008a44 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a34:	4b30      	ldr	r3, [pc, #192]	; (8008af8 <HAL_RCC_ClockConfig+0x244>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d109      	bne.n	8008a54 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	e0de      	b.n	8008c02 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a44:	4b2c      	ldr	r3, [pc, #176]	; (8008af8 <HAL_RCC_ClockConfig+0x244>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f003 0304 	and.w	r3, r3, #4
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d101      	bne.n	8008a54 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	e0d6      	b.n	8008c02 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008a54:	4b28      	ldr	r3, [pc, #160]	; (8008af8 <HAL_RCC_ClockConfig+0x244>)
 8008a56:	691b      	ldr	r3, [r3, #16]
 8008a58:	f023 0207 	bic.w	r2, r3, #7
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	4925      	ldr	r1, [pc, #148]	; (8008af8 <HAL_RCC_ClockConfig+0x244>)
 8008a62:	4313      	orrs	r3, r2
 8008a64:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a66:	f7f9 fd9f 	bl	80025a8 <HAL_GetTick>
 8008a6a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a6c:	e00a      	b.n	8008a84 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a6e:	f7f9 fd9b 	bl	80025a8 <HAL_GetTick>
 8008a72:	4602      	mov	r2, r0
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	1ad3      	subs	r3, r2, r3
 8008a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d901      	bls.n	8008a84 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008a80:	2303      	movs	r3, #3
 8008a82:	e0be      	b.n	8008c02 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a84:	4b1c      	ldr	r3, [pc, #112]	; (8008af8 <HAL_RCC_ClockConfig+0x244>)
 8008a86:	691b      	ldr	r3, [r3, #16]
 8008a88:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	00db      	lsls	r3, r3, #3
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d1eb      	bne.n	8008a6e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f003 0302 	and.w	r3, r3, #2
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d010      	beq.n	8008ac4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	68da      	ldr	r2, [r3, #12]
 8008aa6:	4b14      	ldr	r3, [pc, #80]	; (8008af8 <HAL_RCC_ClockConfig+0x244>)
 8008aa8:	699b      	ldr	r3, [r3, #24]
 8008aaa:	f003 030f 	and.w	r3, r3, #15
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d208      	bcs.n	8008ac4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ab2:	4b11      	ldr	r3, [pc, #68]	; (8008af8 <HAL_RCC_ClockConfig+0x244>)
 8008ab4:	699b      	ldr	r3, [r3, #24]
 8008ab6:	f023 020f 	bic.w	r2, r3, #15
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	490e      	ldr	r1, [pc, #56]	; (8008af8 <HAL_RCC_ClockConfig+0x244>)
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008ac4:	4b0b      	ldr	r3, [pc, #44]	; (8008af4 <HAL_RCC_ClockConfig+0x240>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f003 030f 	and.w	r3, r3, #15
 8008acc:	683a      	ldr	r2, [r7, #0]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d214      	bcs.n	8008afc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ad2:	4b08      	ldr	r3, [pc, #32]	; (8008af4 <HAL_RCC_ClockConfig+0x240>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f023 020f 	bic.w	r2, r3, #15
 8008ada:	4906      	ldr	r1, [pc, #24]	; (8008af4 <HAL_RCC_ClockConfig+0x240>)
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ae2:	4b04      	ldr	r3, [pc, #16]	; (8008af4 <HAL_RCC_ClockConfig+0x240>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f003 030f 	and.w	r3, r3, #15
 8008aea:	683a      	ldr	r2, [r7, #0]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d005      	beq.n	8008afc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	e086      	b.n	8008c02 <HAL_RCC_ClockConfig+0x34e>
 8008af4:	52002000 	.word	0x52002000
 8008af8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f003 0304 	and.w	r3, r3, #4
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d010      	beq.n	8008b2a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	691a      	ldr	r2, [r3, #16]
 8008b0c:	4b3f      	ldr	r3, [pc, #252]	; (8008c0c <HAL_RCC_ClockConfig+0x358>)
 8008b0e:	699b      	ldr	r3, [r3, #24]
 8008b10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d208      	bcs.n	8008b2a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008b18:	4b3c      	ldr	r3, [pc, #240]	; (8008c0c <HAL_RCC_ClockConfig+0x358>)
 8008b1a:	699b      	ldr	r3, [r3, #24]
 8008b1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	691b      	ldr	r3, [r3, #16]
 8008b24:	4939      	ldr	r1, [pc, #228]	; (8008c0c <HAL_RCC_ClockConfig+0x358>)
 8008b26:	4313      	orrs	r3, r2
 8008b28:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f003 0308 	and.w	r3, r3, #8
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d010      	beq.n	8008b58 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	695a      	ldr	r2, [r3, #20]
 8008b3a:	4b34      	ldr	r3, [pc, #208]	; (8008c0c <HAL_RCC_ClockConfig+0x358>)
 8008b3c:	69db      	ldr	r3, [r3, #28]
 8008b3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d208      	bcs.n	8008b58 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008b46:	4b31      	ldr	r3, [pc, #196]	; (8008c0c <HAL_RCC_ClockConfig+0x358>)
 8008b48:	69db      	ldr	r3, [r3, #28]
 8008b4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	695b      	ldr	r3, [r3, #20]
 8008b52:	492e      	ldr	r1, [pc, #184]	; (8008c0c <HAL_RCC_ClockConfig+0x358>)
 8008b54:	4313      	orrs	r3, r2
 8008b56:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f003 0310 	and.w	r3, r3, #16
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d010      	beq.n	8008b86 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	699a      	ldr	r2, [r3, #24]
 8008b68:	4b28      	ldr	r3, [pc, #160]	; (8008c0c <HAL_RCC_ClockConfig+0x358>)
 8008b6a:	69db      	ldr	r3, [r3, #28]
 8008b6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d208      	bcs.n	8008b86 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008b74:	4b25      	ldr	r3, [pc, #148]	; (8008c0c <HAL_RCC_ClockConfig+0x358>)
 8008b76:	69db      	ldr	r3, [r3, #28]
 8008b78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	699b      	ldr	r3, [r3, #24]
 8008b80:	4922      	ldr	r1, [pc, #136]	; (8008c0c <HAL_RCC_ClockConfig+0x358>)
 8008b82:	4313      	orrs	r3, r2
 8008b84:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 0320 	and.w	r3, r3, #32
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d010      	beq.n	8008bb4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	69da      	ldr	r2, [r3, #28]
 8008b96:	4b1d      	ldr	r3, [pc, #116]	; (8008c0c <HAL_RCC_ClockConfig+0x358>)
 8008b98:	6a1b      	ldr	r3, [r3, #32]
 8008b9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d208      	bcs.n	8008bb4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008ba2:	4b1a      	ldr	r3, [pc, #104]	; (8008c0c <HAL_RCC_ClockConfig+0x358>)
 8008ba4:	6a1b      	ldr	r3, [r3, #32]
 8008ba6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	69db      	ldr	r3, [r3, #28]
 8008bae:	4917      	ldr	r1, [pc, #92]	; (8008c0c <HAL_RCC_ClockConfig+0x358>)
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008bb4:	f000 f834 	bl	8008c20 <HAL_RCC_GetSysClockFreq>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	4b14      	ldr	r3, [pc, #80]	; (8008c0c <HAL_RCC_ClockConfig+0x358>)
 8008bbc:	699b      	ldr	r3, [r3, #24]
 8008bbe:	0a1b      	lsrs	r3, r3, #8
 8008bc0:	f003 030f 	and.w	r3, r3, #15
 8008bc4:	4912      	ldr	r1, [pc, #72]	; (8008c10 <HAL_RCC_ClockConfig+0x35c>)
 8008bc6:	5ccb      	ldrb	r3, [r1, r3]
 8008bc8:	f003 031f 	and.w	r3, r3, #31
 8008bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8008bd0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008bd2:	4b0e      	ldr	r3, [pc, #56]	; (8008c0c <HAL_RCC_ClockConfig+0x358>)
 8008bd4:	699b      	ldr	r3, [r3, #24]
 8008bd6:	f003 030f 	and.w	r3, r3, #15
 8008bda:	4a0d      	ldr	r2, [pc, #52]	; (8008c10 <HAL_RCC_ClockConfig+0x35c>)
 8008bdc:	5cd3      	ldrb	r3, [r2, r3]
 8008bde:	f003 031f 	and.w	r3, r3, #31
 8008be2:	693a      	ldr	r2, [r7, #16]
 8008be4:	fa22 f303 	lsr.w	r3, r2, r3
 8008be8:	4a0a      	ldr	r2, [pc, #40]	; (8008c14 <HAL_RCC_ClockConfig+0x360>)
 8008bea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008bec:	4a0a      	ldr	r2, [pc, #40]	; (8008c18 <HAL_RCC_ClockConfig+0x364>)
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008bf2:	4b0a      	ldr	r3, [pc, #40]	; (8008c1c <HAL_RCC_ClockConfig+0x368>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7f9 fc8c 	bl	8002514 <HAL_InitTick>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3718      	adds	r7, #24
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	58024400 	.word	0x58024400
 8008c10:	080218b8 	.word	0x080218b8
 8008c14:	24000004 	.word	0x24000004
 8008c18:	24000000 	.word	0x24000000
 8008c1c:	24000010 	.word	0x24000010

08008c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b089      	sub	sp, #36	; 0x24
 8008c24:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c26:	4bb3      	ldr	r3, [pc, #716]	; (8008ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c28:	691b      	ldr	r3, [r3, #16]
 8008c2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c2e:	2b18      	cmp	r3, #24
 8008c30:	f200 8155 	bhi.w	8008ede <HAL_RCC_GetSysClockFreq+0x2be>
 8008c34:	a201      	add	r2, pc, #4	; (adr r2, 8008c3c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c3a:	bf00      	nop
 8008c3c:	08008ca1 	.word	0x08008ca1
 8008c40:	08008edf 	.word	0x08008edf
 8008c44:	08008edf 	.word	0x08008edf
 8008c48:	08008edf 	.word	0x08008edf
 8008c4c:	08008edf 	.word	0x08008edf
 8008c50:	08008edf 	.word	0x08008edf
 8008c54:	08008edf 	.word	0x08008edf
 8008c58:	08008edf 	.word	0x08008edf
 8008c5c:	08008cc7 	.word	0x08008cc7
 8008c60:	08008edf 	.word	0x08008edf
 8008c64:	08008edf 	.word	0x08008edf
 8008c68:	08008edf 	.word	0x08008edf
 8008c6c:	08008edf 	.word	0x08008edf
 8008c70:	08008edf 	.word	0x08008edf
 8008c74:	08008edf 	.word	0x08008edf
 8008c78:	08008edf 	.word	0x08008edf
 8008c7c:	08008ccd 	.word	0x08008ccd
 8008c80:	08008edf 	.word	0x08008edf
 8008c84:	08008edf 	.word	0x08008edf
 8008c88:	08008edf 	.word	0x08008edf
 8008c8c:	08008edf 	.word	0x08008edf
 8008c90:	08008edf 	.word	0x08008edf
 8008c94:	08008edf 	.word	0x08008edf
 8008c98:	08008edf 	.word	0x08008edf
 8008c9c:	08008cd3 	.word	0x08008cd3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ca0:	4b94      	ldr	r3, [pc, #592]	; (8008ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f003 0320 	and.w	r3, r3, #32
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d009      	beq.n	8008cc0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008cac:	4b91      	ldr	r3, [pc, #580]	; (8008ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	08db      	lsrs	r3, r3, #3
 8008cb2:	f003 0303 	and.w	r3, r3, #3
 8008cb6:	4a90      	ldr	r2, [pc, #576]	; (8008ef8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8008cbc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008cbe:	e111      	b.n	8008ee4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008cc0:	4b8d      	ldr	r3, [pc, #564]	; (8008ef8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008cc2:	61bb      	str	r3, [r7, #24]
    break;
 8008cc4:	e10e      	b.n	8008ee4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008cc6:	4b8d      	ldr	r3, [pc, #564]	; (8008efc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008cc8:	61bb      	str	r3, [r7, #24]
    break;
 8008cca:	e10b      	b.n	8008ee4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008ccc:	4b8c      	ldr	r3, [pc, #560]	; (8008f00 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008cce:	61bb      	str	r3, [r7, #24]
    break;
 8008cd0:	e108      	b.n	8008ee4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008cd2:	4b88      	ldr	r3, [pc, #544]	; (8008ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cd6:	f003 0303 	and.w	r3, r3, #3
 8008cda:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008cdc:	4b85      	ldr	r3, [pc, #532]	; (8008ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ce0:	091b      	lsrs	r3, r3, #4
 8008ce2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ce6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008ce8:	4b82      	ldr	r3, [pc, #520]	; (8008ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cec:	f003 0301 	and.w	r3, r3, #1
 8008cf0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008cf2:	4b80      	ldr	r3, [pc, #512]	; (8008ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cf6:	08db      	lsrs	r3, r3, #3
 8008cf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	fb02 f303 	mul.w	r3, r2, r3
 8008d02:	ee07 3a90 	vmov	s15, r3
 8008d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d0a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	f000 80e1 	beq.w	8008ed8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	2b02      	cmp	r3, #2
 8008d1a:	f000 8083 	beq.w	8008e24 <HAL_RCC_GetSysClockFreq+0x204>
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	2b02      	cmp	r3, #2
 8008d22:	f200 80a1 	bhi.w	8008e68 <HAL_RCC_GetSysClockFreq+0x248>
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d003      	beq.n	8008d34 <HAL_RCC_GetSysClockFreq+0x114>
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d056      	beq.n	8008de0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008d32:	e099      	b.n	8008e68 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d34:	4b6f      	ldr	r3, [pc, #444]	; (8008ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f003 0320 	and.w	r3, r3, #32
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d02d      	beq.n	8008d9c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008d40:	4b6c      	ldr	r3, [pc, #432]	; (8008ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	08db      	lsrs	r3, r3, #3
 8008d46:	f003 0303 	and.w	r3, r3, #3
 8008d4a:	4a6b      	ldr	r2, [pc, #428]	; (8008ef8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d50:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	ee07 3a90 	vmov	s15, r3
 8008d58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	ee07 3a90 	vmov	s15, r3
 8008d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d6a:	4b62      	ldr	r3, [pc, #392]	; (8008ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d72:	ee07 3a90 	vmov	s15, r3
 8008d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d7e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008f04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d96:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008d9a:	e087      	b.n	8008eac <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	ee07 3a90 	vmov	s15, r3
 8008da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008da6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008f08 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dae:	4b51      	ldr	r3, [pc, #324]	; (8008ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008db6:	ee07 3a90 	vmov	s15, r3
 8008dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8008dc2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008f04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008dde:	e065      	b.n	8008eac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	ee07 3a90 	vmov	s15, r3
 8008de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dea:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008f0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008df2:	4b40      	ldr	r3, [pc, #256]	; (8008ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dfa:	ee07 3a90 	vmov	s15, r3
 8008dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e02:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e06:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008f04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e22:	e043      	b.n	8008eac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	ee07 3a90 	vmov	s15, r3
 8008e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e2e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008f10 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e36:	4b2f      	ldr	r3, [pc, #188]	; (8008ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e3e:	ee07 3a90 	vmov	s15, r3
 8008e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e46:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e4a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008f04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e66:	e021      	b.n	8008eac <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	ee07 3a90 	vmov	s15, r3
 8008e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e72:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008f0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e7a:	4b1e      	ldr	r3, [pc, #120]	; (8008ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e82:	ee07 3a90 	vmov	s15, r3
 8008e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e8e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008f04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ea6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008eaa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008eac:	4b11      	ldr	r3, [pc, #68]	; (8008ef4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eb0:	0a5b      	lsrs	r3, r3, #9
 8008eb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	ee07 3a90 	vmov	s15, r3
 8008ec0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008ec4:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ec8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ecc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ed0:	ee17 3a90 	vmov	r3, s15
 8008ed4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008ed6:	e005      	b.n	8008ee4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	61bb      	str	r3, [r7, #24]
    break;
 8008edc:	e002      	b.n	8008ee4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008ede:	4b07      	ldr	r3, [pc, #28]	; (8008efc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008ee0:	61bb      	str	r3, [r7, #24]
    break;
 8008ee2:	bf00      	nop
  }

  return sysclockfreq;
 8008ee4:	69bb      	ldr	r3, [r7, #24]
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3724      	adds	r7, #36	; 0x24
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop
 8008ef4:	58024400 	.word	0x58024400
 8008ef8:	03d09000 	.word	0x03d09000
 8008efc:	003d0900 	.word	0x003d0900
 8008f00:	007a1200 	.word	0x007a1200
 8008f04:	46000000 	.word	0x46000000
 8008f08:	4c742400 	.word	0x4c742400
 8008f0c:	4a742400 	.word	0x4a742400
 8008f10:	4af42400 	.word	0x4af42400

08008f14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008f1a:	f7ff fe81 	bl	8008c20 <HAL_RCC_GetSysClockFreq>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	4b10      	ldr	r3, [pc, #64]	; (8008f64 <HAL_RCC_GetHCLKFreq+0x50>)
 8008f22:	699b      	ldr	r3, [r3, #24]
 8008f24:	0a1b      	lsrs	r3, r3, #8
 8008f26:	f003 030f 	and.w	r3, r3, #15
 8008f2a:	490f      	ldr	r1, [pc, #60]	; (8008f68 <HAL_RCC_GetHCLKFreq+0x54>)
 8008f2c:	5ccb      	ldrb	r3, [r1, r3]
 8008f2e:	f003 031f 	and.w	r3, r3, #31
 8008f32:	fa22 f303 	lsr.w	r3, r2, r3
 8008f36:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f38:	4b0a      	ldr	r3, [pc, #40]	; (8008f64 <HAL_RCC_GetHCLKFreq+0x50>)
 8008f3a:	699b      	ldr	r3, [r3, #24]
 8008f3c:	f003 030f 	and.w	r3, r3, #15
 8008f40:	4a09      	ldr	r2, [pc, #36]	; (8008f68 <HAL_RCC_GetHCLKFreq+0x54>)
 8008f42:	5cd3      	ldrb	r3, [r2, r3]
 8008f44:	f003 031f 	and.w	r3, r3, #31
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f4e:	4a07      	ldr	r2, [pc, #28]	; (8008f6c <HAL_RCC_GetHCLKFreq+0x58>)
 8008f50:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008f52:	4a07      	ldr	r2, [pc, #28]	; (8008f70 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008f58:	4b04      	ldr	r3, [pc, #16]	; (8008f6c <HAL_RCC_GetHCLKFreq+0x58>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3708      	adds	r7, #8
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}
 8008f64:	58024400 	.word	0x58024400
 8008f68:	080218b8 	.word	0x080218b8
 8008f6c:	24000004 	.word	0x24000004
 8008f70:	24000000 	.word	0x24000000

08008f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008f78:	f7ff ffcc 	bl	8008f14 <HAL_RCC_GetHCLKFreq>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	4b06      	ldr	r3, [pc, #24]	; (8008f98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f80:	69db      	ldr	r3, [r3, #28]
 8008f82:	091b      	lsrs	r3, r3, #4
 8008f84:	f003 0307 	and.w	r3, r3, #7
 8008f88:	4904      	ldr	r1, [pc, #16]	; (8008f9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8008f8a:	5ccb      	ldrb	r3, [r1, r3]
 8008f8c:	f003 031f 	and.w	r3, r3, #31
 8008f90:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	58024400 	.word	0x58024400
 8008f9c:	080218b8 	.word	0x080218b8

08008fa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008fa4:	f7ff ffb6 	bl	8008f14 <HAL_RCC_GetHCLKFreq>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	4b06      	ldr	r3, [pc, #24]	; (8008fc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008fac:	69db      	ldr	r3, [r3, #28]
 8008fae:	0a1b      	lsrs	r3, r3, #8
 8008fb0:	f003 0307 	and.w	r3, r3, #7
 8008fb4:	4904      	ldr	r1, [pc, #16]	; (8008fc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008fb6:	5ccb      	ldrb	r3, [r1, r3]
 8008fb8:	f003 031f 	and.w	r3, r3, #31
 8008fbc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	bd80      	pop	{r7, pc}
 8008fc4:	58024400 	.word	0x58024400
 8008fc8:	080218b8 	.word	0x080218b8

08008fcc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b086      	sub	sp, #24
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008fd8:	2300      	movs	r3, #0
 8008fda:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d03f      	beq.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008ff0:	d02a      	beq.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008ff2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008ff6:	d824      	bhi.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008ff8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ffc:	d018      	beq.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008ffe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009002:	d81e      	bhi.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009004:	2b00      	cmp	r3, #0
 8009006:	d003      	beq.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009008:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800900c:	d007      	beq.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800900e:	e018      	b.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009010:	4bab      	ldr	r3, [pc, #684]	; (80092c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009014:	4aaa      	ldr	r2, [pc, #680]	; (80092c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009016:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800901a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800901c:	e015      	b.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	3304      	adds	r3, #4
 8009022:	2102      	movs	r1, #2
 8009024:	4618      	mov	r0, r3
 8009026:	f001 f9cf 	bl	800a3c8 <RCCEx_PLL2_Config>
 800902a:	4603      	mov	r3, r0
 800902c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800902e:	e00c      	b.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	3324      	adds	r3, #36	; 0x24
 8009034:	2102      	movs	r1, #2
 8009036:	4618      	mov	r0, r3
 8009038:	f001 fa78 	bl	800a52c <RCCEx_PLL3_Config>
 800903c:	4603      	mov	r3, r0
 800903e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009040:	e003      	b.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	75fb      	strb	r3, [r7, #23]
      break;
 8009046:	e000      	b.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009048:	bf00      	nop
    }

    if(ret == HAL_OK)
 800904a:	7dfb      	ldrb	r3, [r7, #23]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d109      	bne.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009050:	4b9b      	ldr	r3, [pc, #620]	; (80092c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009054:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800905c:	4998      	ldr	r1, [pc, #608]	; (80092c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800905e:	4313      	orrs	r3, r2
 8009060:	650b      	str	r3, [r1, #80]	; 0x50
 8009062:	e001      	b.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009064:	7dfb      	ldrb	r3, [r7, #23]
 8009066:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009070:	2b00      	cmp	r3, #0
 8009072:	d03d      	beq.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009078:	2b04      	cmp	r3, #4
 800907a:	d826      	bhi.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800907c:	a201      	add	r2, pc, #4	; (adr r2, 8009084 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800907e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009082:	bf00      	nop
 8009084:	08009099 	.word	0x08009099
 8009088:	080090a7 	.word	0x080090a7
 800908c:	080090b9 	.word	0x080090b9
 8009090:	080090d1 	.word	0x080090d1
 8009094:	080090d1 	.word	0x080090d1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009098:	4b89      	ldr	r3, [pc, #548]	; (80092c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800909a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800909c:	4a88      	ldr	r2, [pc, #544]	; (80092c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800909e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80090a4:	e015      	b.n	80090d2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	3304      	adds	r3, #4
 80090aa:	2100      	movs	r1, #0
 80090ac:	4618      	mov	r0, r3
 80090ae:	f001 f98b 	bl	800a3c8 <RCCEx_PLL2_Config>
 80090b2:	4603      	mov	r3, r0
 80090b4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80090b6:	e00c      	b.n	80090d2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	3324      	adds	r3, #36	; 0x24
 80090bc:	2100      	movs	r1, #0
 80090be:	4618      	mov	r0, r3
 80090c0:	f001 fa34 	bl	800a52c <RCCEx_PLL3_Config>
 80090c4:	4603      	mov	r3, r0
 80090c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80090c8:	e003      	b.n	80090d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090ca:	2301      	movs	r3, #1
 80090cc:	75fb      	strb	r3, [r7, #23]
      break;
 80090ce:	e000      	b.n	80090d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80090d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090d2:	7dfb      	ldrb	r3, [r7, #23]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d109      	bne.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80090d8:	4b79      	ldr	r3, [pc, #484]	; (80092c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80090da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090dc:	f023 0207 	bic.w	r2, r3, #7
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090e4:	4976      	ldr	r1, [pc, #472]	; (80092c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80090e6:	4313      	orrs	r3, r2
 80090e8:	650b      	str	r3, [r1, #80]	; 0x50
 80090ea:	e001      	b.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090ec:	7dfb      	ldrb	r3, [r7, #23]
 80090ee:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d042      	beq.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009104:	d02b      	beq.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009106:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800910a:	d825      	bhi.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800910c:	2bc0      	cmp	r3, #192	; 0xc0
 800910e:	d028      	beq.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009110:	2bc0      	cmp	r3, #192	; 0xc0
 8009112:	d821      	bhi.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009114:	2b80      	cmp	r3, #128	; 0x80
 8009116:	d016      	beq.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8009118:	2b80      	cmp	r3, #128	; 0x80
 800911a:	d81d      	bhi.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800911c:	2b00      	cmp	r3, #0
 800911e:	d002      	beq.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8009120:	2b40      	cmp	r3, #64	; 0x40
 8009122:	d007      	beq.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009124:	e018      	b.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009126:	4b66      	ldr	r3, [pc, #408]	; (80092c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800912a:	4a65      	ldr	r2, [pc, #404]	; (80092c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800912c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009130:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009132:	e017      	b.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	3304      	adds	r3, #4
 8009138:	2100      	movs	r1, #0
 800913a:	4618      	mov	r0, r3
 800913c:	f001 f944 	bl	800a3c8 <RCCEx_PLL2_Config>
 8009140:	4603      	mov	r3, r0
 8009142:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009144:	e00e      	b.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	3324      	adds	r3, #36	; 0x24
 800914a:	2100      	movs	r1, #0
 800914c:	4618      	mov	r0, r3
 800914e:	f001 f9ed 	bl	800a52c <RCCEx_PLL3_Config>
 8009152:	4603      	mov	r3, r0
 8009154:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009156:	e005      	b.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009158:	2301      	movs	r3, #1
 800915a:	75fb      	strb	r3, [r7, #23]
      break;
 800915c:	e002      	b.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800915e:	bf00      	nop
 8009160:	e000      	b.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009162:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009164:	7dfb      	ldrb	r3, [r7, #23]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d109      	bne.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800916a:	4b55      	ldr	r3, [pc, #340]	; (80092c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800916c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800916e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009176:	4952      	ldr	r1, [pc, #328]	; (80092c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009178:	4313      	orrs	r3, r2
 800917a:	650b      	str	r3, [r1, #80]	; 0x50
 800917c:	e001      	b.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800917e:	7dfb      	ldrb	r3, [r7, #23]
 8009180:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800918a:	2b00      	cmp	r3, #0
 800918c:	d049      	beq.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009194:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009198:	d030      	beq.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800919a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800919e:	d82a      	bhi.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80091a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80091a4:	d02c      	beq.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80091a6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80091aa:	d824      	bhi.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80091ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80091b0:	d018      	beq.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80091b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80091b6:	d81e      	bhi.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d003      	beq.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80091bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80091c0:	d007      	beq.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80091c2:	e018      	b.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091c4:	4b3e      	ldr	r3, [pc, #248]	; (80092c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80091c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c8:	4a3d      	ldr	r2, [pc, #244]	; (80092c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80091ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80091d0:	e017      	b.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	3304      	adds	r3, #4
 80091d6:	2100      	movs	r1, #0
 80091d8:	4618      	mov	r0, r3
 80091da:	f001 f8f5 	bl	800a3c8 <RCCEx_PLL2_Config>
 80091de:	4603      	mov	r3, r0
 80091e0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80091e2:	e00e      	b.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	3324      	adds	r3, #36	; 0x24
 80091e8:	2100      	movs	r1, #0
 80091ea:	4618      	mov	r0, r3
 80091ec:	f001 f99e 	bl	800a52c <RCCEx_PLL3_Config>
 80091f0:	4603      	mov	r3, r0
 80091f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80091f4:	e005      	b.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	75fb      	strb	r3, [r7, #23]
      break;
 80091fa:	e002      	b.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80091fc:	bf00      	nop
 80091fe:	e000      	b.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009200:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009202:	7dfb      	ldrb	r3, [r7, #23]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d10a      	bne.n	800921e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009208:	4b2d      	ldr	r3, [pc, #180]	; (80092c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800920a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800920c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009216:	492a      	ldr	r1, [pc, #168]	; (80092c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009218:	4313      	orrs	r3, r2
 800921a:	658b      	str	r3, [r1, #88]	; 0x58
 800921c:	e001      	b.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800921e:	7dfb      	ldrb	r3, [r7, #23]
 8009220:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800922a:	2b00      	cmp	r3, #0
 800922c:	d04c      	beq.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009234:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009238:	d030      	beq.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800923a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800923e:	d82a      	bhi.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009240:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009244:	d02c      	beq.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8009246:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800924a:	d824      	bhi.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800924c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009250:	d018      	beq.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8009252:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009256:	d81e      	bhi.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009258:	2b00      	cmp	r3, #0
 800925a:	d003      	beq.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800925c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009260:	d007      	beq.n	8009272 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009262:	e018      	b.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009264:	4b16      	ldr	r3, [pc, #88]	; (80092c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009268:	4a15      	ldr	r2, [pc, #84]	; (80092c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800926a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800926e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009270:	e017      	b.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	3304      	adds	r3, #4
 8009276:	2100      	movs	r1, #0
 8009278:	4618      	mov	r0, r3
 800927a:	f001 f8a5 	bl	800a3c8 <RCCEx_PLL2_Config>
 800927e:	4603      	mov	r3, r0
 8009280:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009282:	e00e      	b.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	3324      	adds	r3, #36	; 0x24
 8009288:	2100      	movs	r1, #0
 800928a:	4618      	mov	r0, r3
 800928c:	f001 f94e 	bl	800a52c <RCCEx_PLL3_Config>
 8009290:	4603      	mov	r3, r0
 8009292:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009294:	e005      	b.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009296:	2301      	movs	r3, #1
 8009298:	75fb      	strb	r3, [r7, #23]
      break;
 800929a:	e002      	b.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800929c:	bf00      	nop
 800929e:	e000      	b.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80092a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092a2:	7dfb      	ldrb	r3, [r7, #23]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d10d      	bne.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80092a8:	4b05      	ldr	r3, [pc, #20]	; (80092c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80092aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092ac:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80092b6:	4902      	ldr	r1, [pc, #8]	; (80092c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80092b8:	4313      	orrs	r3, r2
 80092ba:	658b      	str	r3, [r1, #88]	; 0x58
 80092bc:	e004      	b.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80092be:	bf00      	nop
 80092c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092c4:	7dfb      	ldrb	r3, [r7, #23]
 80092c6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d032      	beq.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092d8:	2b30      	cmp	r3, #48	; 0x30
 80092da:	d01c      	beq.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80092dc:	2b30      	cmp	r3, #48	; 0x30
 80092de:	d817      	bhi.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80092e0:	2b20      	cmp	r3, #32
 80092e2:	d00c      	beq.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x332>
 80092e4:	2b20      	cmp	r3, #32
 80092e6:	d813      	bhi.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d016      	beq.n	800931a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80092ec:	2b10      	cmp	r3, #16
 80092ee:	d10f      	bne.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092f0:	4baf      	ldr	r3, [pc, #700]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80092f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f4:	4aae      	ldr	r2, [pc, #696]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80092f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80092fc:	e00e      	b.n	800931c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	3304      	adds	r3, #4
 8009302:	2102      	movs	r1, #2
 8009304:	4618      	mov	r0, r3
 8009306:	f001 f85f 	bl	800a3c8 <RCCEx_PLL2_Config>
 800930a:	4603      	mov	r3, r0
 800930c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800930e:	e005      	b.n	800931c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009310:	2301      	movs	r3, #1
 8009312:	75fb      	strb	r3, [r7, #23]
      break;
 8009314:	e002      	b.n	800931c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8009316:	bf00      	nop
 8009318:	e000      	b.n	800931c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800931a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800931c:	7dfb      	ldrb	r3, [r7, #23]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d109      	bne.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009322:	4ba3      	ldr	r3, [pc, #652]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009326:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800932e:	49a0      	ldr	r1, [pc, #640]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009330:	4313      	orrs	r3, r2
 8009332:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009334:	e001      	b.n	800933a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009336:	7dfb      	ldrb	r3, [r7, #23]
 8009338:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009342:	2b00      	cmp	r3, #0
 8009344:	d047      	beq.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800934a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800934e:	d030      	beq.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8009350:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009354:	d82a      	bhi.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009356:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800935a:	d02c      	beq.n	80093b6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800935c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009360:	d824      	bhi.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009362:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009366:	d018      	beq.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8009368:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800936c:	d81e      	bhi.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800936e:	2b00      	cmp	r3, #0
 8009370:	d003      	beq.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8009372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009376:	d007      	beq.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8009378:	e018      	b.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800937a:	4b8d      	ldr	r3, [pc, #564]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800937c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800937e:	4a8c      	ldr	r2, [pc, #560]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009384:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009386:	e017      	b.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	3304      	adds	r3, #4
 800938c:	2100      	movs	r1, #0
 800938e:	4618      	mov	r0, r3
 8009390:	f001 f81a 	bl	800a3c8 <RCCEx_PLL2_Config>
 8009394:	4603      	mov	r3, r0
 8009396:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009398:	e00e      	b.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	3324      	adds	r3, #36	; 0x24
 800939e:	2100      	movs	r1, #0
 80093a0:	4618      	mov	r0, r3
 80093a2:	f001 f8c3 	bl	800a52c <RCCEx_PLL3_Config>
 80093a6:	4603      	mov	r3, r0
 80093a8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80093aa:	e005      	b.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093ac:	2301      	movs	r3, #1
 80093ae:	75fb      	strb	r3, [r7, #23]
      break;
 80093b0:	e002      	b.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80093b2:	bf00      	nop
 80093b4:	e000      	b.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80093b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093b8:	7dfb      	ldrb	r3, [r7, #23]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d109      	bne.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80093be:	4b7c      	ldr	r3, [pc, #496]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80093c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093c2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093ca:	4979      	ldr	r1, [pc, #484]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80093cc:	4313      	orrs	r3, r2
 80093ce:	650b      	str	r3, [r1, #80]	; 0x50
 80093d0:	e001      	b.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093d2:	7dfb      	ldrb	r3, [r7, #23]
 80093d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d049      	beq.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80093ea:	d02e      	beq.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80093ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80093f0:	d828      	bhi.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80093f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80093f6:	d02a      	beq.n	800944e <HAL_RCCEx_PeriphCLKConfig+0x482>
 80093f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80093fc:	d822      	bhi.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80093fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009402:	d026      	beq.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8009404:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009408:	d81c      	bhi.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800940a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800940e:	d010      	beq.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8009410:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009414:	d816      	bhi.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009416:	2b00      	cmp	r3, #0
 8009418:	d01d      	beq.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800941a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800941e:	d111      	bne.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	3304      	adds	r3, #4
 8009424:	2101      	movs	r1, #1
 8009426:	4618      	mov	r0, r3
 8009428:	f000 ffce 	bl	800a3c8 <RCCEx_PLL2_Config>
 800942c:	4603      	mov	r3, r0
 800942e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009430:	e012      	b.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	3324      	adds	r3, #36	; 0x24
 8009436:	2101      	movs	r1, #1
 8009438:	4618      	mov	r0, r3
 800943a:	f001 f877 	bl	800a52c <RCCEx_PLL3_Config>
 800943e:	4603      	mov	r3, r0
 8009440:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009442:	e009      	b.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009444:	2301      	movs	r3, #1
 8009446:	75fb      	strb	r3, [r7, #23]
      break;
 8009448:	e006      	b.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800944a:	bf00      	nop
 800944c:	e004      	b.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800944e:	bf00      	nop
 8009450:	e002      	b.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009452:	bf00      	nop
 8009454:	e000      	b.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009456:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009458:	7dfb      	ldrb	r3, [r7, #23]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d109      	bne.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800945e:	4b54      	ldr	r3, [pc, #336]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009462:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800946a:	4951      	ldr	r1, [pc, #324]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800946c:	4313      	orrs	r3, r2
 800946e:	650b      	str	r3, [r1, #80]	; 0x50
 8009470:	e001      	b.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009472:	7dfb      	ldrb	r3, [r7, #23]
 8009474:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800947e:	2b00      	cmp	r3, #0
 8009480:	d04b      	beq.n	800951a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009488:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800948c:	d02e      	beq.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x520>
 800948e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009492:	d828      	bhi.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009498:	d02a      	beq.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800949a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800949e:	d822      	bhi.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80094a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80094a4:	d026      	beq.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80094a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80094aa:	d81c      	bhi.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80094ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094b0:	d010      	beq.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80094b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094b6:	d816      	bhi.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d01d      	beq.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80094bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094c0:	d111      	bne.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	3304      	adds	r3, #4
 80094c6:	2101      	movs	r1, #1
 80094c8:	4618      	mov	r0, r3
 80094ca:	f000 ff7d 	bl	800a3c8 <RCCEx_PLL2_Config>
 80094ce:	4603      	mov	r3, r0
 80094d0:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80094d2:	e012      	b.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	3324      	adds	r3, #36	; 0x24
 80094d8:	2101      	movs	r1, #1
 80094da:	4618      	mov	r0, r3
 80094dc:	f001 f826 	bl	800a52c <RCCEx_PLL3_Config>
 80094e0:	4603      	mov	r3, r0
 80094e2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80094e4:	e009      	b.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80094e6:	2301      	movs	r3, #1
 80094e8:	75fb      	strb	r3, [r7, #23]
      break;
 80094ea:	e006      	b.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80094ec:	bf00      	nop
 80094ee:	e004      	b.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80094f0:	bf00      	nop
 80094f2:	e002      	b.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80094f4:	bf00      	nop
 80094f6:	e000      	b.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80094f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094fa:	7dfb      	ldrb	r3, [r7, #23]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d10a      	bne.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009500:	4b2b      	ldr	r3, [pc, #172]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009504:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800950e:	4928      	ldr	r1, [pc, #160]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009510:	4313      	orrs	r3, r2
 8009512:	658b      	str	r3, [r1, #88]	; 0x58
 8009514:	e001      	b.n	800951a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009516:	7dfb      	ldrb	r3, [r7, #23]
 8009518:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009522:	2b00      	cmp	r3, #0
 8009524:	d02f      	beq.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800952a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800952e:	d00e      	beq.n	800954e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009530:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009534:	d814      	bhi.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8009536:	2b00      	cmp	r3, #0
 8009538:	d015      	beq.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800953a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800953e:	d10f      	bne.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009540:	4b1b      	ldr	r3, [pc, #108]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009544:	4a1a      	ldr	r2, [pc, #104]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009546:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800954a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800954c:	e00c      	b.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	3304      	adds	r3, #4
 8009552:	2101      	movs	r1, #1
 8009554:	4618      	mov	r0, r3
 8009556:	f000 ff37 	bl	800a3c8 <RCCEx_PLL2_Config>
 800955a:	4603      	mov	r3, r0
 800955c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800955e:	e003      	b.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009560:	2301      	movs	r3, #1
 8009562:	75fb      	strb	r3, [r7, #23]
      break;
 8009564:	e000      	b.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8009566:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009568:	7dfb      	ldrb	r3, [r7, #23]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d109      	bne.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800956e:	4b10      	ldr	r3, [pc, #64]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009572:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800957a:	490d      	ldr	r1, [pc, #52]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800957c:	4313      	orrs	r3, r2
 800957e:	650b      	str	r3, [r1, #80]	; 0x50
 8009580:	e001      	b.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009582:	7dfb      	ldrb	r3, [r7, #23]
 8009584:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800958e:	2b00      	cmp	r3, #0
 8009590:	d033      	beq.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009596:	2b03      	cmp	r3, #3
 8009598:	d81c      	bhi.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800959a:	a201      	add	r2, pc, #4	; (adr r2, 80095a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800959c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095a0:	080095db 	.word	0x080095db
 80095a4:	080095b5 	.word	0x080095b5
 80095a8:	080095c3 	.word	0x080095c3
 80095ac:	080095db 	.word	0x080095db
 80095b0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095b4:	4bb8      	ldr	r3, [pc, #736]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80095b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b8:	4ab7      	ldr	r2, [pc, #732]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80095ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80095c0:	e00c      	b.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	3304      	adds	r3, #4
 80095c6:	2102      	movs	r1, #2
 80095c8:	4618      	mov	r0, r3
 80095ca:	f000 fefd 	bl	800a3c8 <RCCEx_PLL2_Config>
 80095ce:	4603      	mov	r3, r0
 80095d0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80095d2:	e003      	b.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80095d4:	2301      	movs	r3, #1
 80095d6:	75fb      	strb	r3, [r7, #23]
      break;
 80095d8:	e000      	b.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80095da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095dc:	7dfb      	ldrb	r3, [r7, #23]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d109      	bne.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80095e2:	4bad      	ldr	r3, [pc, #692]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80095e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095e6:	f023 0203 	bic.w	r2, r3, #3
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095ee:	49aa      	ldr	r1, [pc, #680]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80095f0:	4313      	orrs	r3, r2
 80095f2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80095f4:	e001      	b.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095f6:	7dfb      	ldrb	r3, [r7, #23]
 80095f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009602:	2b00      	cmp	r3, #0
 8009604:	f000 8086 	beq.w	8009714 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009608:	4ba4      	ldr	r3, [pc, #656]	; (800989c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4aa3      	ldr	r2, [pc, #652]	; (800989c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800960e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009612:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009614:	f7f8 ffc8 	bl	80025a8 <HAL_GetTick>
 8009618:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800961a:	e009      	b.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800961c:	f7f8 ffc4 	bl	80025a8 <HAL_GetTick>
 8009620:	4602      	mov	r2, r0
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	1ad3      	subs	r3, r2, r3
 8009626:	2b64      	cmp	r3, #100	; 0x64
 8009628:	d902      	bls.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800962a:	2303      	movs	r3, #3
 800962c:	75fb      	strb	r3, [r7, #23]
        break;
 800962e:	e005      	b.n	800963c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009630:	4b9a      	ldr	r3, [pc, #616]	; (800989c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009638:	2b00      	cmp	r3, #0
 800963a:	d0ef      	beq.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800963c:	7dfb      	ldrb	r3, [r7, #23]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d166      	bne.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009642:	4b95      	ldr	r3, [pc, #596]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009644:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800964c:	4053      	eors	r3, r2
 800964e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009652:	2b00      	cmp	r3, #0
 8009654:	d013      	beq.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009656:	4b90      	ldr	r3, [pc, #576]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800965a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800965e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009660:	4b8d      	ldr	r3, [pc, #564]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009664:	4a8c      	ldr	r2, [pc, #560]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800966a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800966c:	4b8a      	ldr	r3, [pc, #552]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800966e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009670:	4a89      	ldr	r2, [pc, #548]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009672:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009676:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009678:	4a87      	ldr	r2, [pc, #540]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009684:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009688:	d115      	bne.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800968a:	f7f8 ff8d 	bl	80025a8 <HAL_GetTick>
 800968e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009690:	e00b      	b.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009692:	f7f8 ff89 	bl	80025a8 <HAL_GetTick>
 8009696:	4602      	mov	r2, r0
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	1ad3      	subs	r3, r2, r3
 800969c:	f241 3288 	movw	r2, #5000	; 0x1388
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d902      	bls.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80096a4:	2303      	movs	r3, #3
 80096a6:	75fb      	strb	r3, [r7, #23]
            break;
 80096a8:	e005      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80096aa:	4b7b      	ldr	r3, [pc, #492]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80096ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096ae:	f003 0302 	and.w	r3, r3, #2
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d0ed      	beq.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80096b6:	7dfb      	ldrb	r3, [r7, #23]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d126      	bne.n	800970a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80096c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80096ca:	d10d      	bne.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80096cc:	4b72      	ldr	r3, [pc, #456]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80096ce:	691b      	ldr	r3, [r3, #16]
 80096d0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80096da:	0919      	lsrs	r1, r3, #4
 80096dc:	4b70      	ldr	r3, [pc, #448]	; (80098a0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80096de:	400b      	ands	r3, r1
 80096e0:	496d      	ldr	r1, [pc, #436]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80096e2:	4313      	orrs	r3, r2
 80096e4:	610b      	str	r3, [r1, #16]
 80096e6:	e005      	b.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80096e8:	4b6b      	ldr	r3, [pc, #428]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80096ea:	691b      	ldr	r3, [r3, #16]
 80096ec:	4a6a      	ldr	r2, [pc, #424]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80096ee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80096f2:	6113      	str	r3, [r2, #16]
 80096f4:	4b68      	ldr	r3, [pc, #416]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80096f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80096fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009702:	4965      	ldr	r1, [pc, #404]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009704:	4313      	orrs	r3, r2
 8009706:	670b      	str	r3, [r1, #112]	; 0x70
 8009708:	e004      	b.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800970a:	7dfb      	ldrb	r3, [r7, #23]
 800970c:	75bb      	strb	r3, [r7, #22]
 800970e:	e001      	b.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009710:	7dfb      	ldrb	r3, [r7, #23]
 8009712:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f003 0301 	and.w	r3, r3, #1
 800971c:	2b00      	cmp	r3, #0
 800971e:	d07e      	beq.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009724:	2b28      	cmp	r3, #40	; 0x28
 8009726:	d867      	bhi.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009728:	a201      	add	r2, pc, #4	; (adr r2, 8009730 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800972a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800972e:	bf00      	nop
 8009730:	080097ff 	.word	0x080097ff
 8009734:	080097f9 	.word	0x080097f9
 8009738:	080097f9 	.word	0x080097f9
 800973c:	080097f9 	.word	0x080097f9
 8009740:	080097f9 	.word	0x080097f9
 8009744:	080097f9 	.word	0x080097f9
 8009748:	080097f9 	.word	0x080097f9
 800974c:	080097f9 	.word	0x080097f9
 8009750:	080097d5 	.word	0x080097d5
 8009754:	080097f9 	.word	0x080097f9
 8009758:	080097f9 	.word	0x080097f9
 800975c:	080097f9 	.word	0x080097f9
 8009760:	080097f9 	.word	0x080097f9
 8009764:	080097f9 	.word	0x080097f9
 8009768:	080097f9 	.word	0x080097f9
 800976c:	080097f9 	.word	0x080097f9
 8009770:	080097e7 	.word	0x080097e7
 8009774:	080097f9 	.word	0x080097f9
 8009778:	080097f9 	.word	0x080097f9
 800977c:	080097f9 	.word	0x080097f9
 8009780:	080097f9 	.word	0x080097f9
 8009784:	080097f9 	.word	0x080097f9
 8009788:	080097f9 	.word	0x080097f9
 800978c:	080097f9 	.word	0x080097f9
 8009790:	080097ff 	.word	0x080097ff
 8009794:	080097f9 	.word	0x080097f9
 8009798:	080097f9 	.word	0x080097f9
 800979c:	080097f9 	.word	0x080097f9
 80097a0:	080097f9 	.word	0x080097f9
 80097a4:	080097f9 	.word	0x080097f9
 80097a8:	080097f9 	.word	0x080097f9
 80097ac:	080097f9 	.word	0x080097f9
 80097b0:	080097ff 	.word	0x080097ff
 80097b4:	080097f9 	.word	0x080097f9
 80097b8:	080097f9 	.word	0x080097f9
 80097bc:	080097f9 	.word	0x080097f9
 80097c0:	080097f9 	.word	0x080097f9
 80097c4:	080097f9 	.word	0x080097f9
 80097c8:	080097f9 	.word	0x080097f9
 80097cc:	080097f9 	.word	0x080097f9
 80097d0:	080097ff 	.word	0x080097ff
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	3304      	adds	r3, #4
 80097d8:	2101      	movs	r1, #1
 80097da:	4618      	mov	r0, r3
 80097dc:	f000 fdf4 	bl	800a3c8 <RCCEx_PLL2_Config>
 80097e0:	4603      	mov	r3, r0
 80097e2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80097e4:	e00c      	b.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	3324      	adds	r3, #36	; 0x24
 80097ea:	2101      	movs	r1, #1
 80097ec:	4618      	mov	r0, r3
 80097ee:	f000 fe9d 	bl	800a52c <RCCEx_PLL3_Config>
 80097f2:	4603      	mov	r3, r0
 80097f4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80097f6:	e003      	b.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80097f8:	2301      	movs	r3, #1
 80097fa:	75fb      	strb	r3, [r7, #23]
      break;
 80097fc:	e000      	b.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80097fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009800:	7dfb      	ldrb	r3, [r7, #23]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d109      	bne.n	800981a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009806:	4b24      	ldr	r3, [pc, #144]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800980a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009812:	4921      	ldr	r1, [pc, #132]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009814:	4313      	orrs	r3, r2
 8009816:	654b      	str	r3, [r1, #84]	; 0x54
 8009818:	e001      	b.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800981a:	7dfb      	ldrb	r3, [r7, #23]
 800981c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f003 0302 	and.w	r3, r3, #2
 8009826:	2b00      	cmp	r3, #0
 8009828:	d03e      	beq.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800982e:	2b05      	cmp	r3, #5
 8009830:	d820      	bhi.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8009832:	a201      	add	r2, pc, #4	; (adr r2, 8009838 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8009834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009838:	0800987b 	.word	0x0800987b
 800983c:	08009851 	.word	0x08009851
 8009840:	08009863 	.word	0x08009863
 8009844:	0800987b 	.word	0x0800987b
 8009848:	0800987b 	.word	0x0800987b
 800984c:	0800987b 	.word	0x0800987b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	3304      	adds	r3, #4
 8009854:	2101      	movs	r1, #1
 8009856:	4618      	mov	r0, r3
 8009858:	f000 fdb6 	bl	800a3c8 <RCCEx_PLL2_Config>
 800985c:	4603      	mov	r3, r0
 800985e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009860:	e00c      	b.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	3324      	adds	r3, #36	; 0x24
 8009866:	2101      	movs	r1, #1
 8009868:	4618      	mov	r0, r3
 800986a:	f000 fe5f 	bl	800a52c <RCCEx_PLL3_Config>
 800986e:	4603      	mov	r3, r0
 8009870:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009872:	e003      	b.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009874:	2301      	movs	r3, #1
 8009876:	75fb      	strb	r3, [r7, #23]
      break;
 8009878:	e000      	b.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800987a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800987c:	7dfb      	ldrb	r3, [r7, #23]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d110      	bne.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009882:	4b05      	ldr	r3, [pc, #20]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009886:	f023 0207 	bic.w	r2, r3, #7
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800988e:	4902      	ldr	r1, [pc, #8]	; (8009898 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009890:	4313      	orrs	r3, r2
 8009892:	654b      	str	r3, [r1, #84]	; 0x54
 8009894:	e008      	b.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8009896:	bf00      	nop
 8009898:	58024400 	.word	0x58024400
 800989c:	58024800 	.word	0x58024800
 80098a0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098a4:	7dfb      	ldrb	r3, [r7, #23]
 80098a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f003 0304 	and.w	r3, r3, #4
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d039      	beq.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098ba:	2b05      	cmp	r3, #5
 80098bc:	d820      	bhi.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80098be:	a201      	add	r2, pc, #4	; (adr r2, 80098c4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80098c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c4:	08009907 	.word	0x08009907
 80098c8:	080098dd 	.word	0x080098dd
 80098cc:	080098ef 	.word	0x080098ef
 80098d0:	08009907 	.word	0x08009907
 80098d4:	08009907 	.word	0x08009907
 80098d8:	08009907 	.word	0x08009907
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	3304      	adds	r3, #4
 80098e0:	2101      	movs	r1, #1
 80098e2:	4618      	mov	r0, r3
 80098e4:	f000 fd70 	bl	800a3c8 <RCCEx_PLL2_Config>
 80098e8:	4603      	mov	r3, r0
 80098ea:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80098ec:	e00c      	b.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	3324      	adds	r3, #36	; 0x24
 80098f2:	2101      	movs	r1, #1
 80098f4:	4618      	mov	r0, r3
 80098f6:	f000 fe19 	bl	800a52c <RCCEx_PLL3_Config>
 80098fa:	4603      	mov	r3, r0
 80098fc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80098fe:	e003      	b.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009900:	2301      	movs	r3, #1
 8009902:	75fb      	strb	r3, [r7, #23]
      break;
 8009904:	e000      	b.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8009906:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009908:	7dfb      	ldrb	r3, [r7, #23]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d10a      	bne.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800990e:	4bb7      	ldr	r3, [pc, #732]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009912:	f023 0207 	bic.w	r2, r3, #7
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800991c:	49b3      	ldr	r1, [pc, #716]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800991e:	4313      	orrs	r3, r2
 8009920:	658b      	str	r3, [r1, #88]	; 0x58
 8009922:	e001      	b.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009924:	7dfb      	ldrb	r3, [r7, #23]
 8009926:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f003 0320 	and.w	r3, r3, #32
 8009930:	2b00      	cmp	r3, #0
 8009932:	d04b      	beq.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800993a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800993e:	d02e      	beq.n	800999e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8009940:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009944:	d828      	bhi.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800994a:	d02a      	beq.n	80099a2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800994c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009950:	d822      	bhi.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009952:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009956:	d026      	beq.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009958:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800995c:	d81c      	bhi.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800995e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009962:	d010      	beq.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8009964:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009968:	d816      	bhi.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800996a:	2b00      	cmp	r3, #0
 800996c:	d01d      	beq.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800996e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009972:	d111      	bne.n	8009998 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	3304      	adds	r3, #4
 8009978:	2100      	movs	r1, #0
 800997a:	4618      	mov	r0, r3
 800997c:	f000 fd24 	bl	800a3c8 <RCCEx_PLL2_Config>
 8009980:	4603      	mov	r3, r0
 8009982:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009984:	e012      	b.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	3324      	adds	r3, #36	; 0x24
 800998a:	2102      	movs	r1, #2
 800998c:	4618      	mov	r0, r3
 800998e:	f000 fdcd 	bl	800a52c <RCCEx_PLL3_Config>
 8009992:	4603      	mov	r3, r0
 8009994:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009996:	e009      	b.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009998:	2301      	movs	r3, #1
 800999a:	75fb      	strb	r3, [r7, #23]
      break;
 800999c:	e006      	b.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800999e:	bf00      	nop
 80099a0:	e004      	b.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80099a2:	bf00      	nop
 80099a4:	e002      	b.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80099a6:	bf00      	nop
 80099a8:	e000      	b.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80099aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099ac:	7dfb      	ldrb	r3, [r7, #23]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d10a      	bne.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80099b2:	4b8e      	ldr	r3, [pc, #568]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80099b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099b6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099c0:	498a      	ldr	r1, [pc, #552]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80099c2:	4313      	orrs	r3, r2
 80099c4:	654b      	str	r3, [r1, #84]	; 0x54
 80099c6:	e001      	b.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099c8:	7dfb      	ldrb	r3, [r7, #23]
 80099ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d04b      	beq.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80099de:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80099e2:	d02e      	beq.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80099e4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80099e8:	d828      	bhi.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80099ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099ee:	d02a      	beq.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80099f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099f4:	d822      	bhi.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80099f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80099fa:	d026      	beq.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80099fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a00:	d81c      	bhi.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009a02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a06:	d010      	beq.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8009a08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a0c:	d816      	bhi.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d01d      	beq.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a16:	d111      	bne.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	3304      	adds	r3, #4
 8009a1c:	2100      	movs	r1, #0
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f000 fcd2 	bl	800a3c8 <RCCEx_PLL2_Config>
 8009a24:	4603      	mov	r3, r0
 8009a26:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009a28:	e012      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	3324      	adds	r3, #36	; 0x24
 8009a2e:	2102      	movs	r1, #2
 8009a30:	4618      	mov	r0, r3
 8009a32:	f000 fd7b 	bl	800a52c <RCCEx_PLL3_Config>
 8009a36:	4603      	mov	r3, r0
 8009a38:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009a3a:	e009      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	75fb      	strb	r3, [r7, #23]
      break;
 8009a40:	e006      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009a42:	bf00      	nop
 8009a44:	e004      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009a46:	bf00      	nop
 8009a48:	e002      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009a4a:	bf00      	nop
 8009a4c:	e000      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009a4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a50:	7dfb      	ldrb	r3, [r7, #23]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d10a      	bne.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009a56:	4b65      	ldr	r3, [pc, #404]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a5a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009a64:	4961      	ldr	r1, [pc, #388]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009a66:	4313      	orrs	r3, r2
 8009a68:	658b      	str	r3, [r1, #88]	; 0x58
 8009a6a:	e001      	b.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a6c:	7dfb      	ldrb	r3, [r7, #23]
 8009a6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d04b      	beq.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009a82:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009a86:	d02e      	beq.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8009a88:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009a8c:	d828      	bhi.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009a8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a92:	d02a      	beq.n	8009aea <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8009a94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a98:	d822      	bhi.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009a9a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009a9e:	d026      	beq.n	8009aee <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009aa0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009aa4:	d81c      	bhi.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009aa6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009aaa:	d010      	beq.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8009aac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ab0:	d816      	bhi.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d01d      	beq.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8009ab6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009aba:	d111      	bne.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	3304      	adds	r3, #4
 8009ac0:	2100      	movs	r1, #0
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f000 fc80 	bl	800a3c8 <RCCEx_PLL2_Config>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009acc:	e012      	b.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	3324      	adds	r3, #36	; 0x24
 8009ad2:	2102      	movs	r1, #2
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f000 fd29 	bl	800a52c <RCCEx_PLL3_Config>
 8009ada:	4603      	mov	r3, r0
 8009adc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009ade:	e009      	b.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ae4:	e006      	b.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009ae6:	bf00      	nop
 8009ae8:	e004      	b.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009aea:	bf00      	nop
 8009aec:	e002      	b.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009aee:	bf00      	nop
 8009af0:	e000      	b.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009af2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009af4:	7dfb      	ldrb	r3, [r7, #23]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d10a      	bne.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009afa:	4b3c      	ldr	r3, [pc, #240]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009afe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009b08:	4938      	ldr	r1, [pc, #224]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	658b      	str	r3, [r1, #88]	; 0x58
 8009b0e:	e001      	b.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b10:	7dfb      	ldrb	r3, [r7, #23]
 8009b12:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f003 0308 	and.w	r3, r3, #8
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d01a      	beq.n	8009b56 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b2a:	d10a      	bne.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	3324      	adds	r3, #36	; 0x24
 8009b30:	2102      	movs	r1, #2
 8009b32:	4618      	mov	r0, r3
 8009b34:	f000 fcfa 	bl	800a52c <RCCEx_PLL3_Config>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d001      	beq.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009b42:	4b2a      	ldr	r3, [pc, #168]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b46:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b50:	4926      	ldr	r1, [pc, #152]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009b52:	4313      	orrs	r3, r2
 8009b54:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f003 0310 	and.w	r3, r3, #16
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d01a      	beq.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009b68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b6c:	d10a      	bne.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	3324      	adds	r3, #36	; 0x24
 8009b72:	2102      	movs	r1, #2
 8009b74:	4618      	mov	r0, r3
 8009b76:	f000 fcd9 	bl	800a52c <RCCEx_PLL3_Config>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d001      	beq.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8009b80:	2301      	movs	r3, #1
 8009b82:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009b84:	4b19      	ldr	r3, [pc, #100]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009b92:	4916      	ldr	r1, [pc, #88]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009b94:	4313      	orrs	r3, r2
 8009b96:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d036      	beq.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009baa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009bae:	d01f      	beq.n	8009bf0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8009bb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009bb4:	d817      	bhi.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d003      	beq.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8009bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bbe:	d009      	beq.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8009bc0:	e011      	b.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	3304      	adds	r3, #4
 8009bc6:	2100      	movs	r1, #0
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f000 fbfd 	bl	800a3c8 <RCCEx_PLL2_Config>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009bd2:	e00e      	b.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	3324      	adds	r3, #36	; 0x24
 8009bd8:	2102      	movs	r1, #2
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f000 fca6 	bl	800a52c <RCCEx_PLL3_Config>
 8009be0:	4603      	mov	r3, r0
 8009be2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009be4:	e005      	b.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009be6:	2301      	movs	r3, #1
 8009be8:	75fb      	strb	r3, [r7, #23]
      break;
 8009bea:	e002      	b.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8009bec:	58024400 	.word	0x58024400
      break;
 8009bf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bf2:	7dfb      	ldrb	r3, [r7, #23]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d10a      	bne.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009bf8:	4b93      	ldr	r3, [pc, #588]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bfc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009c06:	4990      	ldr	r1, [pc, #576]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	658b      	str	r3, [r1, #88]	; 0x58
 8009c0c:	e001      	b.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c0e:	7dfb      	ldrb	r3, [r7, #23]
 8009c10:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d033      	beq.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009c28:	d01c      	beq.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8009c2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009c2e:	d816      	bhi.n	8009c5e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8009c30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c34:	d003      	beq.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8009c36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c3a:	d007      	beq.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8009c3c:	e00f      	b.n	8009c5e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c3e:	4b82      	ldr	r3, [pc, #520]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c42:	4a81      	ldr	r2, [pc, #516]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009c4a:	e00c      	b.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	3324      	adds	r3, #36	; 0x24
 8009c50:	2101      	movs	r1, #1
 8009c52:	4618      	mov	r0, r3
 8009c54:	f000 fc6a 	bl	800a52c <RCCEx_PLL3_Config>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009c5c:	e003      	b.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	75fb      	strb	r3, [r7, #23]
      break;
 8009c62:	e000      	b.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8009c64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c66:	7dfb      	ldrb	r3, [r7, #23]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d10a      	bne.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009c6c:	4b76      	ldr	r3, [pc, #472]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c7a:	4973      	ldr	r1, [pc, #460]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	654b      	str	r3, [r1, #84]	; 0x54
 8009c80:	e001      	b.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c82:	7dfb      	ldrb	r3, [r7, #23]
 8009c84:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d029      	beq.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d003      	beq.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8009c9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c9e:	d007      	beq.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8009ca0:	e00f      	b.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ca2:	4b69      	ldr	r3, [pc, #420]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca6:	4a68      	ldr	r2, [pc, #416]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009cae:	e00b      	b.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	3304      	adds	r3, #4
 8009cb4:	2102      	movs	r1, #2
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f000 fb86 	bl	800a3c8 <RCCEx_PLL2_Config>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009cc0:	e002      	b.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	75fb      	strb	r3, [r7, #23]
      break;
 8009cc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009cc8:	7dfb      	ldrb	r3, [r7, #23]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d109      	bne.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009cce:	4b5e      	ldr	r3, [pc, #376]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cd2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cda:	495b      	ldr	r1, [pc, #364]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009ce0:	e001      	b.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ce2:	7dfb      	ldrb	r3, [r7, #23]
 8009ce4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00a      	beq.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	3324      	adds	r3, #36	; 0x24
 8009cf6:	2102      	movs	r1, #2
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f000 fc17 	bl	800a52c <RCCEx_PLL3_Config>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d001      	beq.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8009d04:	2301      	movs	r3, #1
 8009d06:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d030      	beq.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d1c:	d017      	beq.n	8009d4e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8009d1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d22:	d811      	bhi.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d28:	d013      	beq.n	8009d52 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009d2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d2e:	d80b      	bhi.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d010      	beq.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8009d34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d38:	d106      	bne.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d3a:	4b43      	ldr	r3, [pc, #268]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d3e:	4a42      	ldr	r2, [pc, #264]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009d46:	e007      	b.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d48:	2301      	movs	r3, #1
 8009d4a:	75fb      	strb	r3, [r7, #23]
      break;
 8009d4c:	e004      	b.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009d4e:	bf00      	nop
 8009d50:	e002      	b.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009d52:	bf00      	nop
 8009d54:	e000      	b.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009d56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d58:	7dfb      	ldrb	r3, [r7, #23]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d109      	bne.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009d5e:	4b3a      	ldr	r3, [pc, #232]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d6a:	4937      	ldr	r1, [pc, #220]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	654b      	str	r3, [r1, #84]	; 0x54
 8009d70:	e001      	b.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d72:	7dfb      	ldrb	r3, [r7, #23]
 8009d74:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d008      	beq.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009d82:	4b31      	ldr	r3, [pc, #196]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d86:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d8e:	492e      	ldr	r1, [pc, #184]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009d90:	4313      	orrs	r3, r2
 8009d92:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d009      	beq.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009da0:	4b29      	ldr	r3, [pc, #164]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009da2:	691b      	ldr	r3, [r3, #16]
 8009da4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009dae:	4926      	ldr	r1, [pc, #152]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009db0:	4313      	orrs	r3, r2
 8009db2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d008      	beq.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009dc0:	4b21      	ldr	r3, [pc, #132]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dc4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009dcc:	491e      	ldr	r1, [pc, #120]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d00d      	beq.n	8009dfa <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009dde:	4b1a      	ldr	r3, [pc, #104]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009de0:	691b      	ldr	r3, [r3, #16]
 8009de2:	4a19      	ldr	r2, [pc, #100]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009de4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009de8:	6113      	str	r3, [r2, #16]
 8009dea:	4b17      	ldr	r3, [pc, #92]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009dec:	691a      	ldr	r2, [r3, #16]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009df4:	4914      	ldr	r1, [pc, #80]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009df6:	4313      	orrs	r3, r2
 8009df8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	da08      	bge.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009e02:	4b11      	ldr	r3, [pc, #68]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e06:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e0e:	490e      	ldr	r1, [pc, #56]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009e10:	4313      	orrs	r3, r2
 8009e12:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d009      	beq.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009e20:	4b09      	ldr	r3, [pc, #36]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e24:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e2e:	4906      	ldr	r1, [pc, #24]	; (8009e48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009e30:	4313      	orrs	r3, r2
 8009e32:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009e34:	7dbb      	ldrb	r3, [r7, #22]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d101      	bne.n	8009e3e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	e000      	b.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8009e3e:	2301      	movs	r3, #1
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3718      	adds	r7, #24
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	58024400 	.word	0x58024400

08009e4c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009e50:	f7ff f860 	bl	8008f14 <HAL_RCC_GetHCLKFreq>
 8009e54:	4602      	mov	r2, r0
 8009e56:	4b06      	ldr	r3, [pc, #24]	; (8009e70 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009e58:	6a1b      	ldr	r3, [r3, #32]
 8009e5a:	091b      	lsrs	r3, r3, #4
 8009e5c:	f003 0307 	and.w	r3, r3, #7
 8009e60:	4904      	ldr	r1, [pc, #16]	; (8009e74 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009e62:	5ccb      	ldrb	r3, [r1, r3]
 8009e64:	f003 031f 	and.w	r3, r3, #31
 8009e68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	bd80      	pop	{r7, pc}
 8009e70:	58024400 	.word	0x58024400
 8009e74:	080218b8 	.word	0x080218b8

08009e78 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b089      	sub	sp, #36	; 0x24
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009e80:	4ba1      	ldr	r3, [pc, #644]	; (800a108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e84:	f003 0303 	and.w	r3, r3, #3
 8009e88:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009e8a:	4b9f      	ldr	r3, [pc, #636]	; (800a108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e8e:	0b1b      	lsrs	r3, r3, #12
 8009e90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e94:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009e96:	4b9c      	ldr	r3, [pc, #624]	; (800a108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e9a:	091b      	lsrs	r3, r3, #4
 8009e9c:	f003 0301 	and.w	r3, r3, #1
 8009ea0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009ea2:	4b99      	ldr	r3, [pc, #612]	; (800a108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ea6:	08db      	lsrs	r3, r3, #3
 8009ea8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009eac:	693a      	ldr	r2, [r7, #16]
 8009eae:	fb02 f303 	mul.w	r3, r2, r3
 8009eb2:	ee07 3a90 	vmov	s15, r3
 8009eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	f000 8111 	beq.w	800a0e8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009ec6:	69bb      	ldr	r3, [r7, #24]
 8009ec8:	2b02      	cmp	r3, #2
 8009eca:	f000 8083 	beq.w	8009fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009ece:	69bb      	ldr	r3, [r7, #24]
 8009ed0:	2b02      	cmp	r3, #2
 8009ed2:	f200 80a1 	bhi.w	800a018 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009ed6:	69bb      	ldr	r3, [r7, #24]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d003      	beq.n	8009ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009edc:	69bb      	ldr	r3, [r7, #24]
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d056      	beq.n	8009f90 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009ee2:	e099      	b.n	800a018 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ee4:	4b88      	ldr	r3, [pc, #544]	; (800a108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f003 0320 	and.w	r3, r3, #32
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d02d      	beq.n	8009f4c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009ef0:	4b85      	ldr	r3, [pc, #532]	; (800a108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	08db      	lsrs	r3, r3, #3
 8009ef6:	f003 0303 	and.w	r3, r3, #3
 8009efa:	4a84      	ldr	r2, [pc, #528]	; (800a10c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009efc:	fa22 f303 	lsr.w	r3, r2, r3
 8009f00:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	ee07 3a90 	vmov	s15, r3
 8009f08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	ee07 3a90 	vmov	s15, r3
 8009f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f1a:	4b7b      	ldr	r3, [pc, #492]	; (800a108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f22:	ee07 3a90 	vmov	s15, r3
 8009f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f2e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a110 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f46:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009f4a:	e087      	b.n	800a05c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	ee07 3a90 	vmov	s15, r3
 8009f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f56:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a114 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f5e:	4b6a      	ldr	r3, [pc, #424]	; (800a108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f66:	ee07 3a90 	vmov	s15, r3
 8009f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f72:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a110 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f8e:	e065      	b.n	800a05c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	ee07 3a90 	vmov	s15, r3
 8009f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f9a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a118 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fa2:	4b59      	ldr	r3, [pc, #356]	; (800a108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009faa:	ee07 3a90 	vmov	s15, r3
 8009fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fb6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a110 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009fd2:	e043      	b.n	800a05c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	ee07 3a90 	vmov	s15, r3
 8009fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fde:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a11c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fe6:	4b48      	ldr	r3, [pc, #288]	; (800a108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fee:	ee07 3a90 	vmov	s15, r3
 8009ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ff6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ffa:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a110 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a006:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a00a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a00e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a012:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a016:	e021      	b.n	800a05c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	ee07 3a90 	vmov	s15, r3
 800a01e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a022:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a118 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a02a:	4b37      	ldr	r3, [pc, #220]	; (800a108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a02c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a02e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a032:	ee07 3a90 	vmov	s15, r3
 800a036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a03a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a03e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a110 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a04a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a04e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a052:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a056:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a05a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a05c:	4b2a      	ldr	r3, [pc, #168]	; (800a108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a05e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a060:	0a5b      	lsrs	r3, r3, #9
 800a062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a066:	ee07 3a90 	vmov	s15, r3
 800a06a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a06e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a072:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a076:	edd7 6a07 	vldr	s13, [r7, #28]
 800a07a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a07e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a082:	ee17 2a90 	vmov	r2, s15
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a08a:	4b1f      	ldr	r3, [pc, #124]	; (800a108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a08c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a08e:	0c1b      	lsrs	r3, r3, #16
 800a090:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a094:	ee07 3a90 	vmov	s15, r3
 800a098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a09c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a0a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0a4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0b0:	ee17 2a90 	vmov	r2, s15
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a0b8:	4b13      	ldr	r3, [pc, #76]	; (800a108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a0ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0bc:	0e1b      	lsrs	r3, r3, #24
 800a0be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0c2:	ee07 3a90 	vmov	s15, r3
 800a0c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a0ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0d2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0de:	ee17 2a90 	vmov	r2, s15
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a0e6:	e008      	b.n	800a0fa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	609a      	str	r2, [r3, #8]
}
 800a0fa:	bf00      	nop
 800a0fc:	3724      	adds	r7, #36	; 0x24
 800a0fe:	46bd      	mov	sp, r7
 800a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a104:	4770      	bx	lr
 800a106:	bf00      	nop
 800a108:	58024400 	.word	0x58024400
 800a10c:	03d09000 	.word	0x03d09000
 800a110:	46000000 	.word	0x46000000
 800a114:	4c742400 	.word	0x4c742400
 800a118:	4a742400 	.word	0x4a742400
 800a11c:	4af42400 	.word	0x4af42400

0800a120 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a120:	b480      	push	{r7}
 800a122:	b089      	sub	sp, #36	; 0x24
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a128:	4ba1      	ldr	r3, [pc, #644]	; (800a3b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a12a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a12c:	f003 0303 	and.w	r3, r3, #3
 800a130:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a132:	4b9f      	ldr	r3, [pc, #636]	; (800a3b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a136:	0d1b      	lsrs	r3, r3, #20
 800a138:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a13c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a13e:	4b9c      	ldr	r3, [pc, #624]	; (800a3b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a142:	0a1b      	lsrs	r3, r3, #8
 800a144:	f003 0301 	and.w	r3, r3, #1
 800a148:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a14a:	4b99      	ldr	r3, [pc, #612]	; (800a3b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a14c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a14e:	08db      	lsrs	r3, r3, #3
 800a150:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a154:	693a      	ldr	r2, [r7, #16]
 800a156:	fb02 f303 	mul.w	r3, r2, r3
 800a15a:	ee07 3a90 	vmov	s15, r3
 800a15e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a162:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	f000 8111 	beq.w	800a390 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a16e:	69bb      	ldr	r3, [r7, #24]
 800a170:	2b02      	cmp	r3, #2
 800a172:	f000 8083 	beq.w	800a27c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a176:	69bb      	ldr	r3, [r7, #24]
 800a178:	2b02      	cmp	r3, #2
 800a17a:	f200 80a1 	bhi.w	800a2c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a17e:	69bb      	ldr	r3, [r7, #24]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d003      	beq.n	800a18c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a184:	69bb      	ldr	r3, [r7, #24]
 800a186:	2b01      	cmp	r3, #1
 800a188:	d056      	beq.n	800a238 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a18a:	e099      	b.n	800a2c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a18c:	4b88      	ldr	r3, [pc, #544]	; (800a3b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f003 0320 	and.w	r3, r3, #32
 800a194:	2b00      	cmp	r3, #0
 800a196:	d02d      	beq.n	800a1f4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a198:	4b85      	ldr	r3, [pc, #532]	; (800a3b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	08db      	lsrs	r3, r3, #3
 800a19e:	f003 0303 	and.w	r3, r3, #3
 800a1a2:	4a84      	ldr	r2, [pc, #528]	; (800a3b4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a1a4:	fa22 f303 	lsr.w	r3, r2, r3
 800a1a8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	ee07 3a90 	vmov	s15, r3
 800a1b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	ee07 3a90 	vmov	s15, r3
 800a1ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1c2:	4b7b      	ldr	r3, [pc, #492]	; (800a3b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1ca:	ee07 3a90 	vmov	s15, r3
 800a1ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a3b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a1da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1ee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a1f2:	e087      	b.n	800a304 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	ee07 3a90 	vmov	s15, r3
 800a1fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a3bc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a206:	4b6a      	ldr	r3, [pc, #424]	; (800a3b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a20a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a20e:	ee07 3a90 	vmov	s15, r3
 800a212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a216:	ed97 6a03 	vldr	s12, [r7, #12]
 800a21a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a3b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a21e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a226:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a22a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a22e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a232:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a236:	e065      	b.n	800a304 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	ee07 3a90 	vmov	s15, r3
 800a23e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a242:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a3c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a24a:	4b59      	ldr	r3, [pc, #356]	; (800a3b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a24c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a24e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a252:	ee07 3a90 	vmov	s15, r3
 800a256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a25a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a25e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a3b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a26a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a26e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a272:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a276:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a27a:	e043      	b.n	800a304 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	ee07 3a90 	vmov	s15, r3
 800a282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a286:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a3c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a28a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a28e:	4b48      	ldr	r3, [pc, #288]	; (800a3b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a296:	ee07 3a90 	vmov	s15, r3
 800a29a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a29e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a3b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a2a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a2be:	e021      	b.n	800a304 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	ee07 3a90 	vmov	s15, r3
 800a2c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a3c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a2ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2d2:	4b37      	ldr	r3, [pc, #220]	; (800a3b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a2d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2da:	ee07 3a90 	vmov	s15, r3
 800a2de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a3b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a2ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a2f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a302:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a304:	4b2a      	ldr	r3, [pc, #168]	; (800a3b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a308:	0a5b      	lsrs	r3, r3, #9
 800a30a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a30e:	ee07 3a90 	vmov	s15, r3
 800a312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a316:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a31a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a31e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a322:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a326:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a32a:	ee17 2a90 	vmov	r2, s15
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a332:	4b1f      	ldr	r3, [pc, #124]	; (800a3b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a336:	0c1b      	lsrs	r3, r3, #16
 800a338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a33c:	ee07 3a90 	vmov	s15, r3
 800a340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a344:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a348:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a34c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a350:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a354:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a358:	ee17 2a90 	vmov	r2, s15
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a360:	4b13      	ldr	r3, [pc, #76]	; (800a3b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a364:	0e1b      	lsrs	r3, r3, #24
 800a366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a36a:	ee07 3a90 	vmov	s15, r3
 800a36e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a372:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a376:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a37a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a37e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a382:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a386:	ee17 2a90 	vmov	r2, s15
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a38e:	e008      	b.n	800a3a2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2200      	movs	r2, #0
 800a394:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2200      	movs	r2, #0
 800a39a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	609a      	str	r2, [r3, #8]
}
 800a3a2:	bf00      	nop
 800a3a4:	3724      	adds	r7, #36	; 0x24
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr
 800a3ae:	bf00      	nop
 800a3b0:	58024400 	.word	0x58024400
 800a3b4:	03d09000 	.word	0x03d09000
 800a3b8:	46000000 	.word	0x46000000
 800a3bc:	4c742400 	.word	0x4c742400
 800a3c0:	4a742400 	.word	0x4a742400
 800a3c4:	4af42400 	.word	0x4af42400

0800a3c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b084      	sub	sp, #16
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a3d6:	4b53      	ldr	r3, [pc, #332]	; (800a524 <RCCEx_PLL2_Config+0x15c>)
 800a3d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3da:	f003 0303 	and.w	r3, r3, #3
 800a3de:	2b03      	cmp	r3, #3
 800a3e0:	d101      	bne.n	800a3e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	e099      	b.n	800a51a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a3e6:	4b4f      	ldr	r3, [pc, #316]	; (800a524 <RCCEx_PLL2_Config+0x15c>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a4e      	ldr	r2, [pc, #312]	; (800a524 <RCCEx_PLL2_Config+0x15c>)
 800a3ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a3f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3f2:	f7f8 f8d9 	bl	80025a8 <HAL_GetTick>
 800a3f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a3f8:	e008      	b.n	800a40c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a3fa:	f7f8 f8d5 	bl	80025a8 <HAL_GetTick>
 800a3fe:	4602      	mov	r2, r0
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	1ad3      	subs	r3, r2, r3
 800a404:	2b02      	cmp	r3, #2
 800a406:	d901      	bls.n	800a40c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a408:	2303      	movs	r3, #3
 800a40a:	e086      	b.n	800a51a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a40c:	4b45      	ldr	r3, [pc, #276]	; (800a524 <RCCEx_PLL2_Config+0x15c>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a414:	2b00      	cmp	r3, #0
 800a416:	d1f0      	bne.n	800a3fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a418:	4b42      	ldr	r3, [pc, #264]	; (800a524 <RCCEx_PLL2_Config+0x15c>)
 800a41a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a41c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	031b      	lsls	r3, r3, #12
 800a426:	493f      	ldr	r1, [pc, #252]	; (800a524 <RCCEx_PLL2_Config+0x15c>)
 800a428:	4313      	orrs	r3, r2
 800a42a:	628b      	str	r3, [r1, #40]	; 0x28
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	685b      	ldr	r3, [r3, #4]
 800a430:	3b01      	subs	r3, #1
 800a432:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	689b      	ldr	r3, [r3, #8]
 800a43a:	3b01      	subs	r3, #1
 800a43c:	025b      	lsls	r3, r3, #9
 800a43e:	b29b      	uxth	r3, r3
 800a440:	431a      	orrs	r2, r3
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	3b01      	subs	r3, #1
 800a448:	041b      	lsls	r3, r3, #16
 800a44a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a44e:	431a      	orrs	r2, r3
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	691b      	ldr	r3, [r3, #16]
 800a454:	3b01      	subs	r3, #1
 800a456:	061b      	lsls	r3, r3, #24
 800a458:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a45c:	4931      	ldr	r1, [pc, #196]	; (800a524 <RCCEx_PLL2_Config+0x15c>)
 800a45e:	4313      	orrs	r3, r2
 800a460:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a462:	4b30      	ldr	r3, [pc, #192]	; (800a524 <RCCEx_PLL2_Config+0x15c>)
 800a464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a466:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	695b      	ldr	r3, [r3, #20]
 800a46e:	492d      	ldr	r1, [pc, #180]	; (800a524 <RCCEx_PLL2_Config+0x15c>)
 800a470:	4313      	orrs	r3, r2
 800a472:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a474:	4b2b      	ldr	r3, [pc, #172]	; (800a524 <RCCEx_PLL2_Config+0x15c>)
 800a476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a478:	f023 0220 	bic.w	r2, r3, #32
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	699b      	ldr	r3, [r3, #24]
 800a480:	4928      	ldr	r1, [pc, #160]	; (800a524 <RCCEx_PLL2_Config+0x15c>)
 800a482:	4313      	orrs	r3, r2
 800a484:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a486:	4b27      	ldr	r3, [pc, #156]	; (800a524 <RCCEx_PLL2_Config+0x15c>)
 800a488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a48a:	4a26      	ldr	r2, [pc, #152]	; (800a524 <RCCEx_PLL2_Config+0x15c>)
 800a48c:	f023 0310 	bic.w	r3, r3, #16
 800a490:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a492:	4b24      	ldr	r3, [pc, #144]	; (800a524 <RCCEx_PLL2_Config+0x15c>)
 800a494:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a496:	4b24      	ldr	r3, [pc, #144]	; (800a528 <RCCEx_PLL2_Config+0x160>)
 800a498:	4013      	ands	r3, r2
 800a49a:	687a      	ldr	r2, [r7, #4]
 800a49c:	69d2      	ldr	r2, [r2, #28]
 800a49e:	00d2      	lsls	r2, r2, #3
 800a4a0:	4920      	ldr	r1, [pc, #128]	; (800a524 <RCCEx_PLL2_Config+0x15c>)
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a4a6:	4b1f      	ldr	r3, [pc, #124]	; (800a524 <RCCEx_PLL2_Config+0x15c>)
 800a4a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4aa:	4a1e      	ldr	r2, [pc, #120]	; (800a524 <RCCEx_PLL2_Config+0x15c>)
 800a4ac:	f043 0310 	orr.w	r3, r3, #16
 800a4b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d106      	bne.n	800a4c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a4b8:	4b1a      	ldr	r3, [pc, #104]	; (800a524 <RCCEx_PLL2_Config+0x15c>)
 800a4ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4bc:	4a19      	ldr	r2, [pc, #100]	; (800a524 <RCCEx_PLL2_Config+0x15c>)
 800a4be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a4c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a4c4:	e00f      	b.n	800a4e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d106      	bne.n	800a4da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a4cc:	4b15      	ldr	r3, [pc, #84]	; (800a524 <RCCEx_PLL2_Config+0x15c>)
 800a4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d0:	4a14      	ldr	r2, [pc, #80]	; (800a524 <RCCEx_PLL2_Config+0x15c>)
 800a4d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a4d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a4d8:	e005      	b.n	800a4e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a4da:	4b12      	ldr	r3, [pc, #72]	; (800a524 <RCCEx_PLL2_Config+0x15c>)
 800a4dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4de:	4a11      	ldr	r2, [pc, #68]	; (800a524 <RCCEx_PLL2_Config+0x15c>)
 800a4e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a4e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a4e6:	4b0f      	ldr	r3, [pc, #60]	; (800a524 <RCCEx_PLL2_Config+0x15c>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4a0e      	ldr	r2, [pc, #56]	; (800a524 <RCCEx_PLL2_Config+0x15c>)
 800a4ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a4f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4f2:	f7f8 f859 	bl	80025a8 <HAL_GetTick>
 800a4f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a4f8:	e008      	b.n	800a50c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a4fa:	f7f8 f855 	bl	80025a8 <HAL_GetTick>
 800a4fe:	4602      	mov	r2, r0
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	1ad3      	subs	r3, r2, r3
 800a504:	2b02      	cmp	r3, #2
 800a506:	d901      	bls.n	800a50c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a508:	2303      	movs	r3, #3
 800a50a:	e006      	b.n	800a51a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a50c:	4b05      	ldr	r3, [pc, #20]	; (800a524 <RCCEx_PLL2_Config+0x15c>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a514:	2b00      	cmp	r3, #0
 800a516:	d0f0      	beq.n	800a4fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a518:	7bfb      	ldrb	r3, [r7, #15]
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3710      	adds	r7, #16
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop
 800a524:	58024400 	.word	0x58024400
 800a528:	ffff0007 	.word	0xffff0007

0800a52c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b084      	sub	sp, #16
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a536:	2300      	movs	r3, #0
 800a538:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a53a:	4b53      	ldr	r3, [pc, #332]	; (800a688 <RCCEx_PLL3_Config+0x15c>)
 800a53c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a53e:	f003 0303 	and.w	r3, r3, #3
 800a542:	2b03      	cmp	r3, #3
 800a544:	d101      	bne.n	800a54a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a546:	2301      	movs	r3, #1
 800a548:	e099      	b.n	800a67e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a54a:	4b4f      	ldr	r3, [pc, #316]	; (800a688 <RCCEx_PLL3_Config+0x15c>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	4a4e      	ldr	r2, [pc, #312]	; (800a688 <RCCEx_PLL3_Config+0x15c>)
 800a550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a554:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a556:	f7f8 f827 	bl	80025a8 <HAL_GetTick>
 800a55a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a55c:	e008      	b.n	800a570 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a55e:	f7f8 f823 	bl	80025a8 <HAL_GetTick>
 800a562:	4602      	mov	r2, r0
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	1ad3      	subs	r3, r2, r3
 800a568:	2b02      	cmp	r3, #2
 800a56a:	d901      	bls.n	800a570 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a56c:	2303      	movs	r3, #3
 800a56e:	e086      	b.n	800a67e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a570:	4b45      	ldr	r3, [pc, #276]	; (800a688 <RCCEx_PLL3_Config+0x15c>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d1f0      	bne.n	800a55e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a57c:	4b42      	ldr	r3, [pc, #264]	; (800a688 <RCCEx_PLL3_Config+0x15c>)
 800a57e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a580:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	051b      	lsls	r3, r3, #20
 800a58a:	493f      	ldr	r1, [pc, #252]	; (800a688 <RCCEx_PLL3_Config+0x15c>)
 800a58c:	4313      	orrs	r3, r2
 800a58e:	628b      	str	r3, [r1, #40]	; 0x28
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	3b01      	subs	r3, #1
 800a596:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	689b      	ldr	r3, [r3, #8]
 800a59e:	3b01      	subs	r3, #1
 800a5a0:	025b      	lsls	r3, r3, #9
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	431a      	orrs	r2, r3
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	68db      	ldr	r3, [r3, #12]
 800a5aa:	3b01      	subs	r3, #1
 800a5ac:	041b      	lsls	r3, r3, #16
 800a5ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a5b2:	431a      	orrs	r2, r3
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	691b      	ldr	r3, [r3, #16]
 800a5b8:	3b01      	subs	r3, #1
 800a5ba:	061b      	lsls	r3, r3, #24
 800a5bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a5c0:	4931      	ldr	r1, [pc, #196]	; (800a688 <RCCEx_PLL3_Config+0x15c>)
 800a5c2:	4313      	orrs	r3, r2
 800a5c4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a5c6:	4b30      	ldr	r3, [pc, #192]	; (800a688 <RCCEx_PLL3_Config+0x15c>)
 800a5c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	695b      	ldr	r3, [r3, #20]
 800a5d2:	492d      	ldr	r1, [pc, #180]	; (800a688 <RCCEx_PLL3_Config+0x15c>)
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a5d8:	4b2b      	ldr	r3, [pc, #172]	; (800a688 <RCCEx_PLL3_Config+0x15c>)
 800a5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5dc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	699b      	ldr	r3, [r3, #24]
 800a5e4:	4928      	ldr	r1, [pc, #160]	; (800a688 <RCCEx_PLL3_Config+0x15c>)
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a5ea:	4b27      	ldr	r3, [pc, #156]	; (800a688 <RCCEx_PLL3_Config+0x15c>)
 800a5ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ee:	4a26      	ldr	r2, [pc, #152]	; (800a688 <RCCEx_PLL3_Config+0x15c>)
 800a5f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a5f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a5f6:	4b24      	ldr	r3, [pc, #144]	; (800a688 <RCCEx_PLL3_Config+0x15c>)
 800a5f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5fa:	4b24      	ldr	r3, [pc, #144]	; (800a68c <RCCEx_PLL3_Config+0x160>)
 800a5fc:	4013      	ands	r3, r2
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	69d2      	ldr	r2, [r2, #28]
 800a602:	00d2      	lsls	r2, r2, #3
 800a604:	4920      	ldr	r1, [pc, #128]	; (800a688 <RCCEx_PLL3_Config+0x15c>)
 800a606:	4313      	orrs	r3, r2
 800a608:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a60a:	4b1f      	ldr	r3, [pc, #124]	; (800a688 <RCCEx_PLL3_Config+0x15c>)
 800a60c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a60e:	4a1e      	ldr	r2, [pc, #120]	; (800a688 <RCCEx_PLL3_Config+0x15c>)
 800a610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a614:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d106      	bne.n	800a62a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a61c:	4b1a      	ldr	r3, [pc, #104]	; (800a688 <RCCEx_PLL3_Config+0x15c>)
 800a61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a620:	4a19      	ldr	r2, [pc, #100]	; (800a688 <RCCEx_PLL3_Config+0x15c>)
 800a622:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a626:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a628:	e00f      	b.n	800a64a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	2b01      	cmp	r3, #1
 800a62e:	d106      	bne.n	800a63e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a630:	4b15      	ldr	r3, [pc, #84]	; (800a688 <RCCEx_PLL3_Config+0x15c>)
 800a632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a634:	4a14      	ldr	r2, [pc, #80]	; (800a688 <RCCEx_PLL3_Config+0x15c>)
 800a636:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a63a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a63c:	e005      	b.n	800a64a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a63e:	4b12      	ldr	r3, [pc, #72]	; (800a688 <RCCEx_PLL3_Config+0x15c>)
 800a640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a642:	4a11      	ldr	r2, [pc, #68]	; (800a688 <RCCEx_PLL3_Config+0x15c>)
 800a644:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a648:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a64a:	4b0f      	ldr	r3, [pc, #60]	; (800a688 <RCCEx_PLL3_Config+0x15c>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4a0e      	ldr	r2, [pc, #56]	; (800a688 <RCCEx_PLL3_Config+0x15c>)
 800a650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a654:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a656:	f7f7 ffa7 	bl	80025a8 <HAL_GetTick>
 800a65a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a65c:	e008      	b.n	800a670 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a65e:	f7f7 ffa3 	bl	80025a8 <HAL_GetTick>
 800a662:	4602      	mov	r2, r0
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	1ad3      	subs	r3, r2, r3
 800a668:	2b02      	cmp	r3, #2
 800a66a:	d901      	bls.n	800a670 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a66c:	2303      	movs	r3, #3
 800a66e:	e006      	b.n	800a67e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a670:	4b05      	ldr	r3, [pc, #20]	; (800a688 <RCCEx_PLL3_Config+0x15c>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d0f0      	beq.n	800a65e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a67c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3710      	adds	r7, #16
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}
 800a686:	bf00      	nop
 800a688:	58024400 	.word	0x58024400
 800a68c:	ffff0007 	.word	0xffff0007

0800a690 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b084      	sub	sp, #16
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 800a698:	2300      	movs	r3, #0
 800a69a:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d101      	bne.n	800a6a6 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	e0eb      	b.n	800a87e <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4a75      	ldr	r2, [pc, #468]	; (800a888 <HAL_SPI_Init+0x1f8>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d00f      	beq.n	800a6d6 <HAL_SPI_Init+0x46>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4a74      	ldr	r2, [pc, #464]	; (800a88c <HAL_SPI_Init+0x1fc>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d00a      	beq.n	800a6d6 <HAL_SPI_Init+0x46>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4a72      	ldr	r2, [pc, #456]	; (800a890 <HAL_SPI_Init+0x200>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d005      	beq.n	800a6d6 <HAL_SPI_Init+0x46>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	68db      	ldr	r3, [r3, #12]
 800a6ce:	2b0f      	cmp	r3, #15
 800a6d0:	d901      	bls.n	800a6d6 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	e0d3      	b.n	800a87e <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 fe88 	bl	800b3ec <SPI_GetPacketSize>
 800a6dc:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	4a69      	ldr	r2, [pc, #420]	; (800a888 <HAL_SPI_Init+0x1f8>)
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d00c      	beq.n	800a702 <HAL_SPI_Init+0x72>
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	4a67      	ldr	r2, [pc, #412]	; (800a88c <HAL_SPI_Init+0x1fc>)
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d007      	beq.n	800a702 <HAL_SPI_Init+0x72>
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	4a66      	ldr	r2, [pc, #408]	; (800a890 <HAL_SPI_Init+0x200>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d002      	beq.n	800a702 <HAL_SPI_Init+0x72>
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	2b08      	cmp	r3, #8
 800a700:	d811      	bhi.n	800a726 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a706:	4a60      	ldr	r2, [pc, #384]	; (800a888 <HAL_SPI_Init+0x1f8>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d009      	beq.n	800a720 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a5e      	ldr	r2, [pc, #376]	; (800a88c <HAL_SPI_Init+0x1fc>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d004      	beq.n	800a720 <HAL_SPI_Init+0x90>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a5d      	ldr	r2, [pc, #372]	; (800a890 <HAL_SPI_Init+0x200>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d104      	bne.n	800a72a <HAL_SPI_Init+0x9a>
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	2b10      	cmp	r3, #16
 800a724:	d901      	bls.n	800a72a <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800a726:	2301      	movs	r3, #1
 800a728:	e0a9      	b.n	800a87e <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a730:	b2db      	uxtb	r3, r3
 800a732:	2b00      	cmp	r3, #0
 800a734:	d106      	bne.n	800a744 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2200      	movs	r2, #0
 800a73a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f7f7 f8f2 	bl	8001928 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2202      	movs	r2, #2
 800a748:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f022 0201 	bic.w	r2, r2, #1
 800a75a:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	699b      	ldr	r3, [r3, #24]
 800a760:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a764:	d119      	bne.n	800a79a <HAL_SPI_Init+0x10a>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a76e:	d103      	bne.n	800a778 <HAL_SPI_Init+0xe8>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a774:	2b00      	cmp	r3, #0
 800a776:	d008      	beq.n	800a78a <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d10c      	bne.n	800a79a <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a784:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a788:	d107      	bne.n	800a79a <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	681a      	ldr	r2, [r3, #0]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a798:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	69da      	ldr	r2, [r3, #28]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7a2:	431a      	orrs	r2, r3
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	431a      	orrs	r2, r3
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7ac:	ea42 0103 	orr.w	r1, r2, r3
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	68da      	ldr	r2, [r3, #12]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	430a      	orrs	r2, r1
 800a7ba:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c4:	431a      	orrs	r2, r3
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ca:	431a      	orrs	r2, r3
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	699b      	ldr	r3, [r3, #24]
 800a7d0:	431a      	orrs	r2, r3
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	691b      	ldr	r3, [r3, #16]
 800a7d6:	431a      	orrs	r2, r3
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	695b      	ldr	r3, [r3, #20]
 800a7dc:	431a      	orrs	r2, r3
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6a1b      	ldr	r3, [r3, #32]
 800a7e2:	431a      	orrs	r2, r3
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	431a      	orrs	r2, r3
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7ee:	431a      	orrs	r2, r3
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	689b      	ldr	r3, [r3, #8]
 800a7f4:	431a      	orrs	r2, r3
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7fa:	ea42 0103 	orr.w	r1, r2, r3
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	430a      	orrs	r2, r1
 800a808:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	685b      	ldr	r3, [r3, #4]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d113      	bne.n	800a83a <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	689b      	ldr	r3, [r3, #8]
 800a818:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a824:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	689b      	ldr	r3, [r3, #8]
 800a82c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a838:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f022 0201 	bic.w	r2, r2, #1
 800a848:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a852:	2b00      	cmp	r3, #0
 800a854:	d00a      	beq.n	800a86c <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	68db      	ldr	r3, [r3, #12]
 800a85c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	430a      	orrs	r2, r1
 800a86a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2200      	movs	r2, #0
 800a870:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2201      	movs	r2, #1
 800a878:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a87c:	2300      	movs	r3, #0
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3710      	adds	r7, #16
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	40013000 	.word	0x40013000
 800a88c:	40003800 	.word	0x40003800
 800a890:	40003c00 	.word	0x40003c00

0800a894 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b08a      	sub	sp, #40	; 0x28
 800a898:	af02      	add	r7, sp, #8
 800a89a:	60f8      	str	r0, [r7, #12]
 800a89c:	60b9      	str	r1, [r7, #8]
 800a89e:	603b      	str	r3, [r7, #0]
 800a8a0:	4613      	mov	r3, r2
 800a8a2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	3320      	adds	r3, #32
 800a8aa:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d101      	bne.n	800a8be <HAL_SPI_Transmit+0x2a>
 800a8ba:	2302      	movs	r3, #2
 800a8bc:	e1d7      	b.n	800ac6e <HAL_SPI_Transmit+0x3da>
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a8c6:	f7f7 fe6f 	bl	80025a8 <HAL_GetTick>
 800a8ca:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a8d2:	b2db      	uxtb	r3, r3
 800a8d4:	2b01      	cmp	r3, #1
 800a8d6:	d007      	beq.n	800a8e8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800a8d8:	2302      	movs	r3, #2
 800a8da:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a8e4:	7efb      	ldrb	r3, [r7, #27]
 800a8e6:	e1c2      	b.n	800ac6e <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d002      	beq.n	800a8f4 <HAL_SPI_Transmit+0x60>
 800a8ee:	88fb      	ldrh	r3, [r7, #6]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d107      	bne.n	800a904 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a900:	7efb      	ldrb	r3, [r7, #27]
 800a902:	e1b4      	b.n	800ac6e <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2203      	movs	r2, #3
 800a908:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	2200      	movs	r2, #0
 800a910:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	68ba      	ldr	r2, [r7, #8]
 800a918:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	88fa      	ldrh	r2, [r7, #6]
 800a91e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	88fa      	ldrh	r2, [r7, #6]
 800a926:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	2200      	movs	r2, #0
 800a92e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2200      	movs	r2, #0
 800a934:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2200      	movs	r2, #0
 800a93c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2200      	movs	r2, #0
 800a944:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2200      	movs	r2, #0
 800a94a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	689b      	ldr	r3, [r3, #8]
 800a950:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800a954:	d107      	bne.n	800a966 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a964:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	685a      	ldr	r2, [r3, #4]
 800a96c:	4b96      	ldr	r3, [pc, #600]	; (800abc8 <HAL_SPI_Transmit+0x334>)
 800a96e:	4013      	ands	r3, r2
 800a970:	88f9      	ldrh	r1, [r7, #6]
 800a972:	68fa      	ldr	r2, [r7, #12]
 800a974:	6812      	ldr	r2, [r2, #0]
 800a976:	430b      	orrs	r3, r1
 800a978:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	681a      	ldr	r2, [r3, #0]
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f042 0201 	orr.w	r2, r2, #1
 800a988:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	685b      	ldr	r3, [r3, #4]
 800a98e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a992:	d107      	bne.n	800a9a4 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	681a      	ldr	r2, [r3, #0]
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a9a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	2b0f      	cmp	r3, #15
 800a9aa:	d947      	bls.n	800aa3c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a9ac:	e03f      	b.n	800aa2e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	695b      	ldr	r3, [r3, #20]
 800a9b4:	f003 0302 	and.w	r3, r3, #2
 800a9b8:	2b02      	cmp	r3, #2
 800a9ba:	d114      	bne.n	800a9e6 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	6812      	ldr	r2, [r2, #0]
 800a9c6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9cc:	1d1a      	adds	r2, r3, #4
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	3b01      	subs	r3, #1
 800a9dc:	b29a      	uxth	r2, r3
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a9e4:	e023      	b.n	800aa2e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a9e6:	f7f7 fddf 	bl	80025a8 <HAL_GetTick>
 800a9ea:	4602      	mov	r2, r0
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	1ad3      	subs	r3, r2, r3
 800a9f0:	683a      	ldr	r2, [r7, #0]
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	d803      	bhi.n	800a9fe <HAL_SPI_Transmit+0x16a>
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9fc:	d102      	bne.n	800aa04 <HAL_SPI_Transmit+0x170>
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d114      	bne.n	800aa2e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800aa04:	68f8      	ldr	r0, [r7, #12]
 800aa06:	f000 fc23 	bl	800b250 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa18:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	2201      	movs	r2, #1
 800aa26:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	e11f      	b.n	800ac6e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d1b9      	bne.n	800a9ae <HAL_SPI_Transmit+0x11a>
 800aa3a:	e0f2      	b.n	800ac22 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	68db      	ldr	r3, [r3, #12]
 800aa40:	2b07      	cmp	r3, #7
 800aa42:	f240 80e7 	bls.w	800ac14 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800aa46:	e05d      	b.n	800ab04 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	695b      	ldr	r3, [r3, #20]
 800aa4e:	f003 0302 	and.w	r3, r3, #2
 800aa52:	2b02      	cmp	r3, #2
 800aa54:	d132      	bne.n	800aabc <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aa5c:	b29b      	uxth	r3, r3
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d918      	bls.n	800aa94 <HAL_SPI_Transmit+0x200>
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d014      	beq.n	800aa94 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	6812      	ldr	r2, [r2, #0]
 800aa74:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa7a:	1d1a      	adds	r2, r3, #4
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aa86:	b29b      	uxth	r3, r3
 800aa88:	3b02      	subs	r3, #2
 800aa8a:	b29a      	uxth	r2, r3
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800aa92:	e037      	b.n	800ab04 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa98:	881a      	ldrh	r2, [r3, #0]
 800aa9a:	69fb      	ldr	r3, [r7, #28]
 800aa9c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aaa2:	1c9a      	adds	r2, r3, #2
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	3b01      	subs	r3, #1
 800aab2:	b29a      	uxth	r2, r3
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800aaba:	e023      	b.n	800ab04 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aabc:	f7f7 fd74 	bl	80025a8 <HAL_GetTick>
 800aac0:	4602      	mov	r2, r0
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	1ad3      	subs	r3, r2, r3
 800aac6:	683a      	ldr	r2, [r7, #0]
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d803      	bhi.n	800aad4 <HAL_SPI_Transmit+0x240>
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aad2:	d102      	bne.n	800aada <HAL_SPI_Transmit+0x246>
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d114      	bne.n	800ab04 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800aada:	68f8      	ldr	r0, [r7, #12]
 800aadc:	f000 fbb8 	bl	800b250 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2200      	movs	r2, #0
 800aae4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aaee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2201      	movs	r2, #1
 800aafc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800ab00:	2301      	movs	r3, #1
 800ab02:	e0b4      	b.n	800ac6e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ab0a:	b29b      	uxth	r3, r3
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d19b      	bne.n	800aa48 <HAL_SPI_Transmit+0x1b4>
 800ab10:	e087      	b.n	800ac22 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	695b      	ldr	r3, [r3, #20]
 800ab18:	f003 0302 	and.w	r3, r3, #2
 800ab1c:	2b02      	cmp	r3, #2
 800ab1e:	d155      	bne.n	800abcc <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ab26:	b29b      	uxth	r3, r3
 800ab28:	2b03      	cmp	r3, #3
 800ab2a:	d918      	bls.n	800ab5e <HAL_SPI_Transmit+0x2ca>
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab30:	2b40      	cmp	r3, #64	; 0x40
 800ab32:	d914      	bls.n	800ab5e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	6812      	ldr	r2, [r2, #0]
 800ab3e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab44:	1d1a      	adds	r2, r3, #4
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ab50:	b29b      	uxth	r3, r3
 800ab52:	3b04      	subs	r3, #4
 800ab54:	b29a      	uxth	r2, r3
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ab5c:	e05a      	b.n	800ac14 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ab64:	b29b      	uxth	r3, r3
 800ab66:	2b01      	cmp	r3, #1
 800ab68:	d917      	bls.n	800ab9a <HAL_SPI_Transmit+0x306>
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d013      	beq.n	800ab9a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab76:	881a      	ldrh	r2, [r3, #0]
 800ab78:	69fb      	ldr	r3, [r7, #28]
 800ab7a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab80:	1c9a      	adds	r2, r3, #2
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ab8c:	b29b      	uxth	r3, r3
 800ab8e:	3b02      	subs	r3, #2
 800ab90:	b29a      	uxth	r2, r3
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ab98:	e03c      	b.n	800ac14 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	3320      	adds	r3, #32
 800aba4:	7812      	ldrb	r2, [r2, #0]
 800aba6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abac:	1c5a      	adds	r2, r3, #1
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800abb8:	b29b      	uxth	r3, r3
 800abba:	3b01      	subs	r3, #1
 800abbc:	b29a      	uxth	r2, r3
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800abc4:	e026      	b.n	800ac14 <HAL_SPI_Transmit+0x380>
 800abc6:	bf00      	nop
 800abc8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800abcc:	f7f7 fcec 	bl	80025a8 <HAL_GetTick>
 800abd0:	4602      	mov	r2, r0
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	1ad3      	subs	r3, r2, r3
 800abd6:	683a      	ldr	r2, [r7, #0]
 800abd8:	429a      	cmp	r2, r3
 800abda:	d803      	bhi.n	800abe4 <HAL_SPI_Transmit+0x350>
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abe2:	d102      	bne.n	800abea <HAL_SPI_Transmit+0x356>
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d114      	bne.n	800ac14 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800abea:	68f8      	ldr	r0, [r7, #12]
 800abec:	f000 fb30 	bl	800b250 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2200      	movs	r2, #0
 800abf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abfe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800ac10:	2301      	movs	r3, #1
 800ac12:	e02c      	b.n	800ac6e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ac1a:	b29b      	uxth	r3, r3
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	f47f af78 	bne.w	800ab12 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	9300      	str	r3, [sp, #0]
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	2108      	movs	r1, #8
 800ac2c:	68f8      	ldr	r0, [r7, #12]
 800ac2e:	f000 fbaf 	bl	800b390 <SPI_WaitOnFlagUntilTimeout>
 800ac32:	4603      	mov	r3, r0
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d007      	beq.n	800ac48 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac3e:	f043 0220 	orr.w	r2, r3, #32
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ac48:	68f8      	ldr	r0, [r7, #12]
 800ac4a:	f000 fb01 	bl	800b250 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	2200      	movs	r2, #0
 800ac52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	2201      	movs	r2, #1
 800ac5a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d001      	beq.n	800ac6c <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	e000      	b.n	800ac6e <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800ac6c:	7efb      	ldrb	r3, [r7, #27]
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	3720      	adds	r7, #32
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}
 800ac76:	bf00      	nop

0800ac78 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b08e      	sub	sp, #56	; 0x38
 800ac7c:	af02      	add	r7, sp, #8
 800ac7e:	60f8      	str	r0, [r7, #12]
 800ac80:	60b9      	str	r1, [r7, #8]
 800ac82:	607a      	str	r2, [r7, #4]
 800ac84:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ac86:	2300      	movs	r3, #0
 800ac88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	3320      	adds	r3, #32
 800ac92:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	3330      	adds	r3, #48	; 0x30
 800ac9a:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aca2:	2b01      	cmp	r3, #1
 800aca4:	d101      	bne.n	800acaa <HAL_SPI_TransmitReceive+0x32>
 800aca6:	2302      	movs	r3, #2
 800aca8:	e2ce      	b.n	800b248 <HAL_SPI_TransmitReceive+0x5d0>
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	2201      	movs	r2, #1
 800acae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800acb2:	f7f7 fc79 	bl	80025a8 <HAL_GetTick>
 800acb6:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800acb8:	887b      	ldrh	r3, [r7, #2]
 800acba:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800acbc:	887b      	ldrh	r3, [r7, #2]
 800acbe:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800acc6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800acce:	7efb      	ldrb	r3, [r7, #27]
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	d014      	beq.n	800acfe <HAL_SPI_TransmitReceive+0x86>
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800acda:	d106      	bne.n	800acea <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	689b      	ldr	r3, [r3, #8]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d102      	bne.n	800acea <HAL_SPI_TransmitReceive+0x72>
 800ace4:	7efb      	ldrb	r3, [r7, #27]
 800ace6:	2b04      	cmp	r3, #4
 800ace8:	d009      	beq.n	800acfe <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800acea:	2302      	movs	r3, #2
 800acec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	2200      	movs	r2, #0
 800acf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800acf8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800acfc:	e2a4      	b.n	800b248 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d005      	beq.n	800ad10 <HAL_SPI_TransmitReceive+0x98>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d002      	beq.n	800ad10 <HAL_SPI_TransmitReceive+0x98>
 800ad0a:	887b      	ldrh	r3, [r7, #2]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d109      	bne.n	800ad24 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800ad10:	2301      	movs	r3, #1
 800ad12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ad1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ad22:	e291      	b.n	800b248 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ad2a:	b2db      	uxtb	r3, r3
 800ad2c:	2b04      	cmp	r3, #4
 800ad2e:	d003      	beq.n	800ad38 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	2205      	movs	r2, #5
 800ad34:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	687a      	ldr	r2, [r7, #4]
 800ad44:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	887a      	ldrh	r2, [r7, #2]
 800ad4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	887a      	ldrh	r2, [r7, #2]
 800ad52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	68ba      	ldr	r2, [r7, #8]
 800ad5a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	887a      	ldrh	r2, [r7, #2]
 800ad60:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	887a      	ldrh	r2, [r7, #2]
 800ad68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2200      	movs	r2, #0
 800ad76:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	685a      	ldr	r2, [r3, #4]
 800ad7e:	4b9f      	ldr	r3, [pc, #636]	; (800affc <HAL_SPI_TransmitReceive+0x384>)
 800ad80:	4013      	ands	r3, r2
 800ad82:	8879      	ldrh	r1, [r7, #2]
 800ad84:	68fa      	ldr	r2, [r7, #12]
 800ad86:	6812      	ldr	r2, [r2, #0]
 800ad88:	430b      	orrs	r3, r1
 800ad8a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	681a      	ldr	r2, [r3, #0]
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f042 0201 	orr.w	r2, r2, #1
 800ad9a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ada4:	d107      	bne.n	800adb6 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	681a      	ldr	r2, [r3, #0]
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800adb4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	68db      	ldr	r3, [r3, #12]
 800adba:	2b0f      	cmp	r3, #15
 800adbc:	d970      	bls.n	800aea0 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800adbe:	e068      	b.n	800ae92 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	695b      	ldr	r3, [r3, #20]
 800adc6:	f003 0302 	and.w	r3, r3, #2
 800adca:	2b02      	cmp	r3, #2
 800adcc:	d11a      	bne.n	800ae04 <HAL_SPI_TransmitReceive+0x18c>
 800adce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800add0:	2b00      	cmp	r3, #0
 800add2:	d017      	beq.n	800ae04 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	6812      	ldr	r2, [r2, #0]
 800adde:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ade4:	1d1a      	adds	r2, r3, #4
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	3b01      	subs	r3, #1
 800adf4:	b29a      	uxth	r2, r3
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ae02:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	695a      	ldr	r2, [r3, #20]
 800ae0a:	f248 0308 	movw	r3, #32776	; 0x8008
 800ae0e:	4013      	ands	r3, r2
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d01a      	beq.n	800ae4a <HAL_SPI_TransmitReceive+0x1d2>
 800ae14:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d017      	beq.n	800ae4a <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681a      	ldr	r2, [r3, #0]
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae22:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ae24:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae2a:	1d1a      	adds	r2, r3, #4
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ae36:	b29b      	uxth	r3, r3
 800ae38:	3b01      	subs	r3, #1
 800ae3a:	b29a      	uxth	r2, r3
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ae48:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ae4a:	f7f7 fbad 	bl	80025a8 <HAL_GetTick>
 800ae4e:	4602      	mov	r2, r0
 800ae50:	69fb      	ldr	r3, [r7, #28]
 800ae52:	1ad3      	subs	r3, r2, r3
 800ae54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae56:	429a      	cmp	r2, r3
 800ae58:	d803      	bhi.n	800ae62 <HAL_SPI_TransmitReceive+0x1ea>
 800ae5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae60:	d102      	bne.n	800ae68 <HAL_SPI_TransmitReceive+0x1f0>
 800ae62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d114      	bne.n	800ae92 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800ae68:	68f8      	ldr	r0, [r7, #12]
 800ae6a:	f000 f9f1 	bl	800b250 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	2200      	movs	r2, #0
 800ae72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	2201      	movs	r2, #1
 800ae8a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800ae8e:	2301      	movs	r3, #1
 800ae90:	e1da      	b.n	800b248 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ae92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d193      	bne.n	800adc0 <HAL_SPI_TransmitReceive+0x148>
 800ae98:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d190      	bne.n	800adc0 <HAL_SPI_TransmitReceive+0x148>
 800ae9e:	e1ac      	b.n	800b1fa <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	68db      	ldr	r3, [r3, #12]
 800aea4:	2b07      	cmp	r3, #7
 800aea6:	f240 81a0 	bls.w	800b1ea <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800aeaa:	e0a9      	b.n	800b000 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	695b      	ldr	r3, [r3, #20]
 800aeb2:	f003 0302 	and.w	r3, r3, #2
 800aeb6:	2b02      	cmp	r3, #2
 800aeb8:	d139      	bne.n	800af2e <HAL_SPI_TransmitReceive+0x2b6>
 800aeba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d036      	beq.n	800af2e <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800aec0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800aec2:	2b01      	cmp	r3, #1
 800aec4:	d91c      	bls.n	800af00 <HAL_SPI_TransmitReceive+0x288>
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d018      	beq.n	800af00 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	6812      	ldr	r2, [r2, #0]
 800aed8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aede:	1d1a      	adds	r2, r3, #4
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aeea:	b29b      	uxth	r3, r3
 800aeec:	3b02      	subs	r3, #2
 800aeee:	b29a      	uxth	r2, r3
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aefc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800aefe:	e016      	b.n	800af2e <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af04:	881a      	ldrh	r2, [r3, #0]
 800af06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af08:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af0e:	1c9a      	adds	r2, r3, #2
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800af1a:	b29b      	uxth	r3, r3
 800af1c:	3b01      	subs	r3, #1
 800af1e:	b29a      	uxth	r2, r3
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800af2c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	695b      	ldr	r3, [r3, #20]
 800af34:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d03a      	beq.n	800afb2 <HAL_SPI_TransmitReceive+0x33a>
 800af3c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d037      	beq.n	800afb2 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	695b      	ldr	r3, [r3, #20]
 800af48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d018      	beq.n	800af82 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681a      	ldr	r2, [r3, #0]
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af58:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800af5a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af60:	1d1a      	adds	r2, r3, #4
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800af6c:	b29b      	uxth	r3, r3
 800af6e:	3b02      	subs	r3, #2
 800af70:	b29a      	uxth	r2, r3
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800af7e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800af80:	e017      	b.n	800afb2 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af86:	6a3a      	ldr	r2, [r7, #32]
 800af88:	8812      	ldrh	r2, [r2, #0]
 800af8a:	b292      	uxth	r2, r2
 800af8c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af92:	1c9a      	adds	r2, r3, #2
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	3b01      	subs	r3, #1
 800afa2:	b29a      	uxth	r2, r3
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800afb0:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800afb2:	f7f7 faf9 	bl	80025a8 <HAL_GetTick>
 800afb6:	4602      	mov	r2, r0
 800afb8:	69fb      	ldr	r3, [r7, #28]
 800afba:	1ad3      	subs	r3, r2, r3
 800afbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d803      	bhi.n	800afca <HAL_SPI_TransmitReceive+0x352>
 800afc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afc8:	d102      	bne.n	800afd0 <HAL_SPI_TransmitReceive+0x358>
 800afca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d117      	bne.n	800b000 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800afd0:	68f8      	ldr	r0, [r7, #12]
 800afd2:	f000 f93d 	bl	800b250 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	2200      	movs	r2, #0
 800afda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800afe4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	2201      	movs	r2, #1
 800aff2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800aff6:	2301      	movs	r3, #1
 800aff8:	e126      	b.n	800b248 <HAL_SPI_TransmitReceive+0x5d0>
 800affa:	bf00      	nop
 800affc:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b000:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b002:	2b00      	cmp	r3, #0
 800b004:	f47f af52 	bne.w	800aeac <HAL_SPI_TransmitReceive+0x234>
 800b008:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	f47f af4e 	bne.w	800aeac <HAL_SPI_TransmitReceive+0x234>
 800b010:	e0f3      	b.n	800b1fa <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	695b      	ldr	r3, [r3, #20]
 800b018:	f003 0302 	and.w	r3, r3, #2
 800b01c:	2b02      	cmp	r3, #2
 800b01e:	d15a      	bne.n	800b0d6 <HAL_SPI_TransmitReceive+0x45e>
 800b020:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b022:	2b00      	cmp	r3, #0
 800b024:	d057      	beq.n	800b0d6 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b026:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b028:	2b03      	cmp	r3, #3
 800b02a:	d91c      	bls.n	800b066 <HAL_SPI_TransmitReceive+0x3ee>
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b030:	2b40      	cmp	r3, #64	; 0x40
 800b032:	d918      	bls.n	800b066 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	6812      	ldr	r2, [r2, #0]
 800b03e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b044:	1d1a      	adds	r2, r3, #4
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b050:	b29b      	uxth	r3, r3
 800b052:	3b04      	subs	r3, #4
 800b054:	b29a      	uxth	r2, r3
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b062:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b064:	e037      	b.n	800b0d6 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b066:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b068:	2b01      	cmp	r3, #1
 800b06a:	d91b      	bls.n	800b0a4 <HAL_SPI_TransmitReceive+0x42c>
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b070:	2b00      	cmp	r3, #0
 800b072:	d017      	beq.n	800b0a4 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b078:	881a      	ldrh	r2, [r3, #0]
 800b07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b082:	1c9a      	adds	r2, r3, #2
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b08e:	b29b      	uxth	r3, r3
 800b090:	3b02      	subs	r3, #2
 800b092:	b29a      	uxth	r2, r3
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b0a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b0a2:	e018      	b.n	800b0d6 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	3320      	adds	r3, #32
 800b0ae:	7812      	ldrb	r2, [r2, #0]
 800b0b0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0b6:	1c5a      	adds	r2, r3, #1
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b0c2:	b29b      	uxth	r3, r3
 800b0c4:	3b01      	subs	r3, #1
 800b0c6:	b29a      	uxth	r2, r3
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b0d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	695b      	ldr	r3, [r3, #20]
 800b0dc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d05e      	beq.n	800b1a2 <HAL_SPI_TransmitReceive+0x52a>
 800b0e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d05b      	beq.n	800b1a2 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	695b      	ldr	r3, [r3, #20]
 800b0f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d018      	beq.n	800b12a <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	681a      	ldr	r2, [r3, #0]
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b100:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b102:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b108:	1d1a      	adds	r2, r3, #4
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b114:	b29b      	uxth	r3, r3
 800b116:	3b04      	subs	r3, #4
 800b118:	b29a      	uxth	r2, r3
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b126:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b128:	e03b      	b.n	800b1a2 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	695b      	ldr	r3, [r3, #20]
 800b130:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800b134:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b138:	d918      	bls.n	800b16c <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b13e:	6a3a      	ldr	r2, [r7, #32]
 800b140:	8812      	ldrh	r2, [r2, #0]
 800b142:	b292      	uxth	r2, r2
 800b144:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b14a:	1c9a      	adds	r2, r3, #2
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b156:	b29b      	uxth	r3, r3
 800b158:	3b02      	subs	r3, #2
 800b15a:	b29a      	uxth	r2, r3
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b168:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b16a:	e01a      	b.n	800b1a2 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b178:	7812      	ldrb	r2, [r2, #0]
 800b17a:	b2d2      	uxtb	r2, r2
 800b17c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b182:	1c5a      	adds	r2, r3, #1
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b18e:	b29b      	uxth	r3, r3
 800b190:	3b01      	subs	r3, #1
 800b192:	b29a      	uxth	r2, r3
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800b1a0:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b1a2:	f7f7 fa01 	bl	80025a8 <HAL_GetTick>
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	69fb      	ldr	r3, [r7, #28]
 800b1aa:	1ad3      	subs	r3, r2, r3
 800b1ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d803      	bhi.n	800b1ba <HAL_SPI_TransmitReceive+0x542>
 800b1b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1b8:	d102      	bne.n	800b1c0 <HAL_SPI_TransmitReceive+0x548>
 800b1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d114      	bne.n	800b1ea <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800b1c0:	68f8      	ldr	r0, [r7, #12]
 800b1c2:	f000 f845 	bl	800b250 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b1d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	2201      	movs	r2, #1
 800b1e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	e02e      	b.n	800b248 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800b1ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	f47f af10 	bne.w	800b012 <HAL_SPI_TransmitReceive+0x39a>
 800b1f2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	f47f af0c 	bne.w	800b012 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800b1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1fc:	9300      	str	r3, [sp, #0]
 800b1fe:	69fb      	ldr	r3, [r7, #28]
 800b200:	2200      	movs	r2, #0
 800b202:	2108      	movs	r1, #8
 800b204:	68f8      	ldr	r0, [r7, #12]
 800b206:	f000 f8c3 	bl	800b390 <SPI_WaitOnFlagUntilTimeout>
 800b20a:	4603      	mov	r3, r0
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d007      	beq.n	800b220 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b216:	f043 0220 	orr.w	r2, r3, #32
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b220:	68f8      	ldr	r0, [r7, #12]
 800b222:	f000 f815 	bl	800b250 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2200      	movs	r2, #0
 800b22a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	2201      	movs	r2, #1
 800b232:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d001      	beq.n	800b244 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800b240:	2301      	movs	r3, #1
 800b242:	e001      	b.n	800b248 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800b244:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3730      	adds	r7, #48	; 0x30
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b250:	b480      	push	{r7}
 800b252:	b085      	sub	sp, #20
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	695b      	ldr	r3, [r3, #20]
 800b25e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	699a      	ldr	r2, [r3, #24]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f042 0208 	orr.w	r2, r2, #8
 800b26e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	699a      	ldr	r2, [r3, #24]
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f042 0210 	orr.w	r2, r2, #16
 800b27e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f022 0201 	bic.w	r2, r2, #1
 800b28e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	6919      	ldr	r1, [r3, #16]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681a      	ldr	r2, [r3, #0]
 800b29a:	4b3c      	ldr	r3, [pc, #240]	; (800b38c <SPI_CloseTransfer+0x13c>)
 800b29c:	400b      	ands	r3, r1
 800b29e:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	689a      	ldr	r2, [r3, #8]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b2ae:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b2b6:	b2db      	uxtb	r3, r3
 800b2b8:	2b04      	cmp	r3, #4
 800b2ba:	d014      	beq.n	800b2e6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	f003 0320 	and.w	r3, r3, #32
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d00f      	beq.n	800b2e6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	699a      	ldr	r2, [r3, #24]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f042 0220 	orr.w	r2, r2, #32
 800b2e4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b2ec:	b2db      	uxtb	r3, r3
 800b2ee:	2b03      	cmp	r3, #3
 800b2f0:	d014      	beq.n	800b31c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d00f      	beq.n	800b31c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b302:	f043 0204 	orr.w	r2, r3, #4
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	699a      	ldr	r2, [r3, #24]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b31a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b322:	2b00      	cmp	r3, #0
 800b324:	d00f      	beq.n	800b346 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b32c:	f043 0201 	orr.w	r2, r3, #1
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	699a      	ldr	r2, [r3, #24]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b344:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d00f      	beq.n	800b370 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b356:	f043 0208 	orr.w	r2, r3, #8
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	699a      	ldr	r2, [r3, #24]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b36e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2200      	movs	r2, #0
 800b374:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2200      	movs	r2, #0
 800b37c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800b380:	bf00      	nop
 800b382:	3714      	adds	r7, #20
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr
 800b38c:	fffffc90 	.word	0xfffffc90

0800b390 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b084      	sub	sp, #16
 800b394:	af00      	add	r7, sp, #0
 800b396:	60f8      	str	r0, [r7, #12]
 800b398:	60b9      	str	r1, [r7, #8]
 800b39a:	603b      	str	r3, [r7, #0]
 800b39c:	4613      	mov	r3, r2
 800b39e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b3a0:	e010      	b.n	800b3c4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b3a2:	f7f7 f901 	bl	80025a8 <HAL_GetTick>
 800b3a6:	4602      	mov	r2, r0
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	1ad3      	subs	r3, r2, r3
 800b3ac:	69ba      	ldr	r2, [r7, #24]
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	d803      	bhi.n	800b3ba <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b3b2:	69bb      	ldr	r3, [r7, #24]
 800b3b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3b8:	d102      	bne.n	800b3c0 <SPI_WaitOnFlagUntilTimeout+0x30>
 800b3ba:	69bb      	ldr	r3, [r7, #24]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d101      	bne.n	800b3c4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b3c0:	2303      	movs	r3, #3
 800b3c2:	e00f      	b.n	800b3e4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	695a      	ldr	r2, [r3, #20]
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	4013      	ands	r3, r2
 800b3ce:	68ba      	ldr	r2, [r7, #8]
 800b3d0:	429a      	cmp	r2, r3
 800b3d2:	bf0c      	ite	eq
 800b3d4:	2301      	moveq	r3, #1
 800b3d6:	2300      	movne	r3, #0
 800b3d8:	b2db      	uxtb	r3, r3
 800b3da:	461a      	mov	r2, r3
 800b3dc:	79fb      	ldrb	r3, [r7, #7]
 800b3de:	429a      	cmp	r2, r3
 800b3e0:	d0df      	beq.n	800b3a2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b3e2:	2300      	movs	r3, #0
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3710      	adds	r7, #16
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}

0800b3ec <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b085      	sub	sp, #20
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3f8:	095b      	lsrs	r3, r3, #5
 800b3fa:	3301      	adds	r3, #1
 800b3fc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	68db      	ldr	r3, [r3, #12]
 800b402:	3301      	adds	r3, #1
 800b404:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	3307      	adds	r3, #7
 800b40a:	08db      	lsrs	r3, r3, #3
 800b40c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	68fa      	ldr	r2, [r7, #12]
 800b412:	fb02 f303 	mul.w	r3, r2, r3
}
 800b416:	4618      	mov	r0, r3
 800b418:	3714      	adds	r7, #20
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr

0800b422 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b422:	b580      	push	{r7, lr}
 800b424:	b082      	sub	sp, #8
 800b426:	af00      	add	r7, sp, #0
 800b428:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d101      	bne.n	800b434 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b430:	2301      	movs	r3, #1
 800b432:	e049      	b.n	800b4c8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b43a:	b2db      	uxtb	r3, r3
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d106      	bne.n	800b44e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2200      	movs	r2, #0
 800b444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f7f6 fdb3 	bl	8001fb4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2202      	movs	r2, #2
 800b452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681a      	ldr	r2, [r3, #0]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	3304      	adds	r3, #4
 800b45e:	4619      	mov	r1, r3
 800b460:	4610      	mov	r0, r2
 800b462:	f000 fa4d 	bl	800b900 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2201      	movs	r2, #1
 800b46a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2201      	movs	r2, #1
 800b472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2201      	movs	r2, #1
 800b47a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2201      	movs	r2, #1
 800b482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2201      	movs	r2, #1
 800b48a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2201      	movs	r2, #1
 800b492:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2201      	movs	r2, #1
 800b49a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2201      	movs	r2, #1
 800b4a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2201      	movs	r2, #1
 800b4aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2201      	movs	r2, #1
 800b4b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2201      	movs	r2, #1
 800b4ba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2201      	movs	r2, #1
 800b4c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b4c6:	2300      	movs	r3, #0
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3708      	adds	r7, #8
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}

0800b4d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b084      	sub	sp, #16
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
 800b4d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d109      	bne.n	800b4f4 <HAL_TIM_PWM_Start+0x24>
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b4e6:	b2db      	uxtb	r3, r3
 800b4e8:	2b01      	cmp	r3, #1
 800b4ea:	bf14      	ite	ne
 800b4ec:	2301      	movne	r3, #1
 800b4ee:	2300      	moveq	r3, #0
 800b4f0:	b2db      	uxtb	r3, r3
 800b4f2:	e03c      	b.n	800b56e <HAL_TIM_PWM_Start+0x9e>
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	2b04      	cmp	r3, #4
 800b4f8:	d109      	bne.n	800b50e <HAL_TIM_PWM_Start+0x3e>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b500:	b2db      	uxtb	r3, r3
 800b502:	2b01      	cmp	r3, #1
 800b504:	bf14      	ite	ne
 800b506:	2301      	movne	r3, #1
 800b508:	2300      	moveq	r3, #0
 800b50a:	b2db      	uxtb	r3, r3
 800b50c:	e02f      	b.n	800b56e <HAL_TIM_PWM_Start+0x9e>
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	2b08      	cmp	r3, #8
 800b512:	d109      	bne.n	800b528 <HAL_TIM_PWM_Start+0x58>
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b51a:	b2db      	uxtb	r3, r3
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	bf14      	ite	ne
 800b520:	2301      	movne	r3, #1
 800b522:	2300      	moveq	r3, #0
 800b524:	b2db      	uxtb	r3, r3
 800b526:	e022      	b.n	800b56e <HAL_TIM_PWM_Start+0x9e>
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	2b0c      	cmp	r3, #12
 800b52c:	d109      	bne.n	800b542 <HAL_TIM_PWM_Start+0x72>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b534:	b2db      	uxtb	r3, r3
 800b536:	2b01      	cmp	r3, #1
 800b538:	bf14      	ite	ne
 800b53a:	2301      	movne	r3, #1
 800b53c:	2300      	moveq	r3, #0
 800b53e:	b2db      	uxtb	r3, r3
 800b540:	e015      	b.n	800b56e <HAL_TIM_PWM_Start+0x9e>
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	2b10      	cmp	r3, #16
 800b546:	d109      	bne.n	800b55c <HAL_TIM_PWM_Start+0x8c>
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b54e:	b2db      	uxtb	r3, r3
 800b550:	2b01      	cmp	r3, #1
 800b552:	bf14      	ite	ne
 800b554:	2301      	movne	r3, #1
 800b556:	2300      	moveq	r3, #0
 800b558:	b2db      	uxtb	r3, r3
 800b55a:	e008      	b.n	800b56e <HAL_TIM_PWM_Start+0x9e>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b562:	b2db      	uxtb	r3, r3
 800b564:	2b01      	cmp	r3, #1
 800b566:	bf14      	ite	ne
 800b568:	2301      	movne	r3, #1
 800b56a:	2300      	moveq	r3, #0
 800b56c:	b2db      	uxtb	r3, r3
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d001      	beq.n	800b576 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b572:	2301      	movs	r3, #1
 800b574:	e09c      	b.n	800b6b0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d104      	bne.n	800b586 <HAL_TIM_PWM_Start+0xb6>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2202      	movs	r2, #2
 800b580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b584:	e023      	b.n	800b5ce <HAL_TIM_PWM_Start+0xfe>
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	2b04      	cmp	r3, #4
 800b58a:	d104      	bne.n	800b596 <HAL_TIM_PWM_Start+0xc6>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2202      	movs	r2, #2
 800b590:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b594:	e01b      	b.n	800b5ce <HAL_TIM_PWM_Start+0xfe>
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	2b08      	cmp	r3, #8
 800b59a:	d104      	bne.n	800b5a6 <HAL_TIM_PWM_Start+0xd6>
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2202      	movs	r2, #2
 800b5a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b5a4:	e013      	b.n	800b5ce <HAL_TIM_PWM_Start+0xfe>
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	2b0c      	cmp	r3, #12
 800b5aa:	d104      	bne.n	800b5b6 <HAL_TIM_PWM_Start+0xe6>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2202      	movs	r2, #2
 800b5b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b5b4:	e00b      	b.n	800b5ce <HAL_TIM_PWM_Start+0xfe>
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	2b10      	cmp	r3, #16
 800b5ba:	d104      	bne.n	800b5c6 <HAL_TIM_PWM_Start+0xf6>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2202      	movs	r2, #2
 800b5c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b5c4:	e003      	b.n	800b5ce <HAL_TIM_PWM_Start+0xfe>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2202      	movs	r2, #2
 800b5ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	6839      	ldr	r1, [r7, #0]
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f000 fcfa 	bl	800bfd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	4a35      	ldr	r2, [pc, #212]	; (800b6b8 <HAL_TIM_PWM_Start+0x1e8>)
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d013      	beq.n	800b60e <HAL_TIM_PWM_Start+0x13e>
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	4a34      	ldr	r2, [pc, #208]	; (800b6bc <HAL_TIM_PWM_Start+0x1ec>)
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	d00e      	beq.n	800b60e <HAL_TIM_PWM_Start+0x13e>
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	4a32      	ldr	r2, [pc, #200]	; (800b6c0 <HAL_TIM_PWM_Start+0x1f0>)
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	d009      	beq.n	800b60e <HAL_TIM_PWM_Start+0x13e>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	4a31      	ldr	r2, [pc, #196]	; (800b6c4 <HAL_TIM_PWM_Start+0x1f4>)
 800b600:	4293      	cmp	r3, r2
 800b602:	d004      	beq.n	800b60e <HAL_TIM_PWM_Start+0x13e>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	4a2f      	ldr	r2, [pc, #188]	; (800b6c8 <HAL_TIM_PWM_Start+0x1f8>)
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d101      	bne.n	800b612 <HAL_TIM_PWM_Start+0x142>
 800b60e:	2301      	movs	r3, #1
 800b610:	e000      	b.n	800b614 <HAL_TIM_PWM_Start+0x144>
 800b612:	2300      	movs	r3, #0
 800b614:	2b00      	cmp	r3, #0
 800b616:	d007      	beq.n	800b628 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b626:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	4a22      	ldr	r2, [pc, #136]	; (800b6b8 <HAL_TIM_PWM_Start+0x1e8>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d01d      	beq.n	800b66e <HAL_TIM_PWM_Start+0x19e>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b63a:	d018      	beq.n	800b66e <HAL_TIM_PWM_Start+0x19e>
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	4a22      	ldr	r2, [pc, #136]	; (800b6cc <HAL_TIM_PWM_Start+0x1fc>)
 800b642:	4293      	cmp	r3, r2
 800b644:	d013      	beq.n	800b66e <HAL_TIM_PWM_Start+0x19e>
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	4a21      	ldr	r2, [pc, #132]	; (800b6d0 <HAL_TIM_PWM_Start+0x200>)
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d00e      	beq.n	800b66e <HAL_TIM_PWM_Start+0x19e>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	4a1f      	ldr	r2, [pc, #124]	; (800b6d4 <HAL_TIM_PWM_Start+0x204>)
 800b656:	4293      	cmp	r3, r2
 800b658:	d009      	beq.n	800b66e <HAL_TIM_PWM_Start+0x19e>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	4a17      	ldr	r2, [pc, #92]	; (800b6bc <HAL_TIM_PWM_Start+0x1ec>)
 800b660:	4293      	cmp	r3, r2
 800b662:	d004      	beq.n	800b66e <HAL_TIM_PWM_Start+0x19e>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	4a1b      	ldr	r2, [pc, #108]	; (800b6d8 <HAL_TIM_PWM_Start+0x208>)
 800b66a:	4293      	cmp	r3, r2
 800b66c:	d115      	bne.n	800b69a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	689a      	ldr	r2, [r3, #8]
 800b674:	4b19      	ldr	r3, [pc, #100]	; (800b6dc <HAL_TIM_PWM_Start+0x20c>)
 800b676:	4013      	ands	r3, r2
 800b678:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	2b06      	cmp	r3, #6
 800b67e:	d015      	beq.n	800b6ac <HAL_TIM_PWM_Start+0x1dc>
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b686:	d011      	beq.n	800b6ac <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	681a      	ldr	r2, [r3, #0]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f042 0201 	orr.w	r2, r2, #1
 800b696:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b698:	e008      	b.n	800b6ac <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	681a      	ldr	r2, [r3, #0]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f042 0201 	orr.w	r2, r2, #1
 800b6a8:	601a      	str	r2, [r3, #0]
 800b6aa:	e000      	b.n	800b6ae <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b6ae:	2300      	movs	r3, #0
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3710      	adds	r7, #16
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}
 800b6b8:	40010000 	.word	0x40010000
 800b6bc:	40010400 	.word	0x40010400
 800b6c0:	40014000 	.word	0x40014000
 800b6c4:	40014400 	.word	0x40014400
 800b6c8:	40014800 	.word	0x40014800
 800b6cc:	40000400 	.word	0x40000400
 800b6d0:	40000800 	.word	0x40000800
 800b6d4:	40000c00 	.word	0x40000c00
 800b6d8:	40001800 	.word	0x40001800
 800b6dc:	00010007 	.word	0x00010007

0800b6e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b084      	sub	sp, #16
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	60f8      	str	r0, [r7, #12]
 800b6e8:	60b9      	str	r1, [r7, #8]
 800b6ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6f2:	2b01      	cmp	r3, #1
 800b6f4:	d101      	bne.n	800b6fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b6f6:	2302      	movs	r3, #2
 800b6f8:	e0fd      	b.n	800b8f6 <HAL_TIM_PWM_ConfigChannel+0x216>
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	2201      	movs	r2, #1
 800b6fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2b14      	cmp	r3, #20
 800b706:	f200 80f0 	bhi.w	800b8ea <HAL_TIM_PWM_ConfigChannel+0x20a>
 800b70a:	a201      	add	r2, pc, #4	; (adr r2, 800b710 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800b70c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b710:	0800b765 	.word	0x0800b765
 800b714:	0800b8eb 	.word	0x0800b8eb
 800b718:	0800b8eb 	.word	0x0800b8eb
 800b71c:	0800b8eb 	.word	0x0800b8eb
 800b720:	0800b7a5 	.word	0x0800b7a5
 800b724:	0800b8eb 	.word	0x0800b8eb
 800b728:	0800b8eb 	.word	0x0800b8eb
 800b72c:	0800b8eb 	.word	0x0800b8eb
 800b730:	0800b7e7 	.word	0x0800b7e7
 800b734:	0800b8eb 	.word	0x0800b8eb
 800b738:	0800b8eb 	.word	0x0800b8eb
 800b73c:	0800b8eb 	.word	0x0800b8eb
 800b740:	0800b827 	.word	0x0800b827
 800b744:	0800b8eb 	.word	0x0800b8eb
 800b748:	0800b8eb 	.word	0x0800b8eb
 800b74c:	0800b8eb 	.word	0x0800b8eb
 800b750:	0800b869 	.word	0x0800b869
 800b754:	0800b8eb 	.word	0x0800b8eb
 800b758:	0800b8eb 	.word	0x0800b8eb
 800b75c:	0800b8eb 	.word	0x0800b8eb
 800b760:	0800b8a9 	.word	0x0800b8a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	68b9      	ldr	r1, [r7, #8]
 800b76a:	4618      	mov	r0, r3
 800b76c:	f000 f962 	bl	800ba34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	699a      	ldr	r2, [r3, #24]
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f042 0208 	orr.w	r2, r2, #8
 800b77e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	699a      	ldr	r2, [r3, #24]
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	f022 0204 	bic.w	r2, r2, #4
 800b78e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	6999      	ldr	r1, [r3, #24]
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	691a      	ldr	r2, [r3, #16]
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	430a      	orrs	r2, r1
 800b7a0:	619a      	str	r2, [r3, #24]
      break;
 800b7a2:	e0a3      	b.n	800b8ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	68b9      	ldr	r1, [r7, #8]
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f000 f9d2 	bl	800bb54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	699a      	ldr	r2, [r3, #24]
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b7be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	699a      	ldr	r2, [r3, #24]
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b7ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	6999      	ldr	r1, [r3, #24]
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	691b      	ldr	r3, [r3, #16]
 800b7da:	021a      	lsls	r2, r3, #8
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	430a      	orrs	r2, r1
 800b7e2:	619a      	str	r2, [r3, #24]
      break;
 800b7e4:	e082      	b.n	800b8ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	68b9      	ldr	r1, [r7, #8]
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f000 fa3b 	bl	800bc68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	69da      	ldr	r2, [r3, #28]
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f042 0208 	orr.w	r2, r2, #8
 800b800:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	69da      	ldr	r2, [r3, #28]
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f022 0204 	bic.w	r2, r2, #4
 800b810:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	69d9      	ldr	r1, [r3, #28]
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	691a      	ldr	r2, [r3, #16]
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	430a      	orrs	r2, r1
 800b822:	61da      	str	r2, [r3, #28]
      break;
 800b824:	e062      	b.n	800b8ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	68b9      	ldr	r1, [r7, #8]
 800b82c:	4618      	mov	r0, r3
 800b82e:	f000 faa1 	bl	800bd74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	69da      	ldr	r2, [r3, #28]
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b840:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	69da      	ldr	r2, [r3, #28]
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b850:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	69d9      	ldr	r1, [r3, #28]
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	691b      	ldr	r3, [r3, #16]
 800b85c:	021a      	lsls	r2, r3, #8
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	430a      	orrs	r2, r1
 800b864:	61da      	str	r2, [r3, #28]
      break;
 800b866:	e041      	b.n	800b8ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	68b9      	ldr	r1, [r7, #8]
 800b86e:	4618      	mov	r0, r3
 800b870:	f000 fae8 	bl	800be44 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	f042 0208 	orr.w	r2, r2, #8
 800b882:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f022 0204 	bic.w	r2, r2, #4
 800b892:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	691a      	ldr	r2, [r3, #16]
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	430a      	orrs	r2, r1
 800b8a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b8a6:	e021      	b.n	800b8ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	68b9      	ldr	r1, [r7, #8]
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f000 fb2a 	bl	800bf08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b8c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b8d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b8da:	68bb      	ldr	r3, [r7, #8]
 800b8dc:	691b      	ldr	r3, [r3, #16]
 800b8de:	021a      	lsls	r2, r3, #8
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	430a      	orrs	r2, r1
 800b8e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b8e8:	e000      	b.n	800b8ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800b8ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b8f4:	2300      	movs	r3, #0
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3710      	adds	r7, #16
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}
 800b8fe:	bf00      	nop

0800b900 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b900:	b480      	push	{r7}
 800b902:	b085      	sub	sp, #20
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
 800b908:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	4a40      	ldr	r2, [pc, #256]	; (800ba14 <TIM_Base_SetConfig+0x114>)
 800b914:	4293      	cmp	r3, r2
 800b916:	d013      	beq.n	800b940 <TIM_Base_SetConfig+0x40>
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b91e:	d00f      	beq.n	800b940 <TIM_Base_SetConfig+0x40>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	4a3d      	ldr	r2, [pc, #244]	; (800ba18 <TIM_Base_SetConfig+0x118>)
 800b924:	4293      	cmp	r3, r2
 800b926:	d00b      	beq.n	800b940 <TIM_Base_SetConfig+0x40>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	4a3c      	ldr	r2, [pc, #240]	; (800ba1c <TIM_Base_SetConfig+0x11c>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d007      	beq.n	800b940 <TIM_Base_SetConfig+0x40>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	4a3b      	ldr	r2, [pc, #236]	; (800ba20 <TIM_Base_SetConfig+0x120>)
 800b934:	4293      	cmp	r3, r2
 800b936:	d003      	beq.n	800b940 <TIM_Base_SetConfig+0x40>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	4a3a      	ldr	r2, [pc, #232]	; (800ba24 <TIM_Base_SetConfig+0x124>)
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d108      	bne.n	800b952 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b946:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	685b      	ldr	r3, [r3, #4]
 800b94c:	68fa      	ldr	r2, [r7, #12]
 800b94e:	4313      	orrs	r3, r2
 800b950:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	4a2f      	ldr	r2, [pc, #188]	; (800ba14 <TIM_Base_SetConfig+0x114>)
 800b956:	4293      	cmp	r3, r2
 800b958:	d01f      	beq.n	800b99a <TIM_Base_SetConfig+0x9a>
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b960:	d01b      	beq.n	800b99a <TIM_Base_SetConfig+0x9a>
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	4a2c      	ldr	r2, [pc, #176]	; (800ba18 <TIM_Base_SetConfig+0x118>)
 800b966:	4293      	cmp	r3, r2
 800b968:	d017      	beq.n	800b99a <TIM_Base_SetConfig+0x9a>
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	4a2b      	ldr	r2, [pc, #172]	; (800ba1c <TIM_Base_SetConfig+0x11c>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d013      	beq.n	800b99a <TIM_Base_SetConfig+0x9a>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	4a2a      	ldr	r2, [pc, #168]	; (800ba20 <TIM_Base_SetConfig+0x120>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d00f      	beq.n	800b99a <TIM_Base_SetConfig+0x9a>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	4a29      	ldr	r2, [pc, #164]	; (800ba24 <TIM_Base_SetConfig+0x124>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d00b      	beq.n	800b99a <TIM_Base_SetConfig+0x9a>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	4a28      	ldr	r2, [pc, #160]	; (800ba28 <TIM_Base_SetConfig+0x128>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d007      	beq.n	800b99a <TIM_Base_SetConfig+0x9a>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	4a27      	ldr	r2, [pc, #156]	; (800ba2c <TIM_Base_SetConfig+0x12c>)
 800b98e:	4293      	cmp	r3, r2
 800b990:	d003      	beq.n	800b99a <TIM_Base_SetConfig+0x9a>
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	4a26      	ldr	r2, [pc, #152]	; (800ba30 <TIM_Base_SetConfig+0x130>)
 800b996:	4293      	cmp	r3, r2
 800b998:	d108      	bne.n	800b9ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b9a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	68db      	ldr	r3, [r3, #12]
 800b9a6:	68fa      	ldr	r2, [r7, #12]
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	695b      	ldr	r3, [r3, #20]
 800b9b6:	4313      	orrs	r3, r2
 800b9b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	68fa      	ldr	r2, [r7, #12]
 800b9be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	689a      	ldr	r2, [r3, #8]
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	681a      	ldr	r2, [r3, #0]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	4a10      	ldr	r2, [pc, #64]	; (800ba14 <TIM_Base_SetConfig+0x114>)
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d00f      	beq.n	800b9f8 <TIM_Base_SetConfig+0xf8>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	4a12      	ldr	r2, [pc, #72]	; (800ba24 <TIM_Base_SetConfig+0x124>)
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	d00b      	beq.n	800b9f8 <TIM_Base_SetConfig+0xf8>
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	4a11      	ldr	r2, [pc, #68]	; (800ba28 <TIM_Base_SetConfig+0x128>)
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d007      	beq.n	800b9f8 <TIM_Base_SetConfig+0xf8>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	4a10      	ldr	r2, [pc, #64]	; (800ba2c <TIM_Base_SetConfig+0x12c>)
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d003      	beq.n	800b9f8 <TIM_Base_SetConfig+0xf8>
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	4a0f      	ldr	r2, [pc, #60]	; (800ba30 <TIM_Base_SetConfig+0x130>)
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	d103      	bne.n	800ba00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	691a      	ldr	r2, [r3, #16]
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2201      	movs	r2, #1
 800ba04:	615a      	str	r2, [r3, #20]
}
 800ba06:	bf00      	nop
 800ba08:	3714      	adds	r7, #20
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba10:	4770      	bx	lr
 800ba12:	bf00      	nop
 800ba14:	40010000 	.word	0x40010000
 800ba18:	40000400 	.word	0x40000400
 800ba1c:	40000800 	.word	0x40000800
 800ba20:	40000c00 	.word	0x40000c00
 800ba24:	40010400 	.word	0x40010400
 800ba28:	40014000 	.word	0x40014000
 800ba2c:	40014400 	.word	0x40014400
 800ba30:	40014800 	.word	0x40014800

0800ba34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b087      	sub	sp, #28
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6a1b      	ldr	r3, [r3, #32]
 800ba42:	f023 0201 	bic.w	r2, r3, #1
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6a1b      	ldr	r3, [r3, #32]
 800ba4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	699b      	ldr	r3, [r3, #24]
 800ba5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ba5c:	68fa      	ldr	r2, [r7, #12]
 800ba5e:	4b37      	ldr	r3, [pc, #220]	; (800bb3c <TIM_OC1_SetConfig+0x108>)
 800ba60:	4013      	ands	r3, r2
 800ba62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f023 0303 	bic.w	r3, r3, #3
 800ba6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	68fa      	ldr	r2, [r7, #12]
 800ba72:	4313      	orrs	r3, r2
 800ba74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	f023 0302 	bic.w	r3, r3, #2
 800ba7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	689b      	ldr	r3, [r3, #8]
 800ba82:	697a      	ldr	r2, [r7, #20]
 800ba84:	4313      	orrs	r3, r2
 800ba86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	4a2d      	ldr	r2, [pc, #180]	; (800bb40 <TIM_OC1_SetConfig+0x10c>)
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d00f      	beq.n	800bab0 <TIM_OC1_SetConfig+0x7c>
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	4a2c      	ldr	r2, [pc, #176]	; (800bb44 <TIM_OC1_SetConfig+0x110>)
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d00b      	beq.n	800bab0 <TIM_OC1_SetConfig+0x7c>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	4a2b      	ldr	r2, [pc, #172]	; (800bb48 <TIM_OC1_SetConfig+0x114>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d007      	beq.n	800bab0 <TIM_OC1_SetConfig+0x7c>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	4a2a      	ldr	r2, [pc, #168]	; (800bb4c <TIM_OC1_SetConfig+0x118>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d003      	beq.n	800bab0 <TIM_OC1_SetConfig+0x7c>
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	4a29      	ldr	r2, [pc, #164]	; (800bb50 <TIM_OC1_SetConfig+0x11c>)
 800baac:	4293      	cmp	r3, r2
 800baae:	d10c      	bne.n	800baca <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	f023 0308 	bic.w	r3, r3, #8
 800bab6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	68db      	ldr	r3, [r3, #12]
 800babc:	697a      	ldr	r2, [r7, #20]
 800babe:	4313      	orrs	r3, r2
 800bac0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	f023 0304 	bic.w	r3, r3, #4
 800bac8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	4a1c      	ldr	r2, [pc, #112]	; (800bb40 <TIM_OC1_SetConfig+0x10c>)
 800bace:	4293      	cmp	r3, r2
 800bad0:	d00f      	beq.n	800baf2 <TIM_OC1_SetConfig+0xbe>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	4a1b      	ldr	r2, [pc, #108]	; (800bb44 <TIM_OC1_SetConfig+0x110>)
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d00b      	beq.n	800baf2 <TIM_OC1_SetConfig+0xbe>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	4a1a      	ldr	r2, [pc, #104]	; (800bb48 <TIM_OC1_SetConfig+0x114>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d007      	beq.n	800baf2 <TIM_OC1_SetConfig+0xbe>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	4a19      	ldr	r2, [pc, #100]	; (800bb4c <TIM_OC1_SetConfig+0x118>)
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d003      	beq.n	800baf2 <TIM_OC1_SetConfig+0xbe>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	4a18      	ldr	r2, [pc, #96]	; (800bb50 <TIM_OC1_SetConfig+0x11c>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d111      	bne.n	800bb16 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800baf2:	693b      	ldr	r3, [r7, #16]
 800baf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800baf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bb00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	695b      	ldr	r3, [r3, #20]
 800bb06:	693a      	ldr	r2, [r7, #16]
 800bb08:	4313      	orrs	r3, r2
 800bb0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	699b      	ldr	r3, [r3, #24]
 800bb10:	693a      	ldr	r2, [r7, #16]
 800bb12:	4313      	orrs	r3, r2
 800bb14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	693a      	ldr	r2, [r7, #16]
 800bb1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	68fa      	ldr	r2, [r7, #12]
 800bb20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	685a      	ldr	r2, [r3, #4]
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	697a      	ldr	r2, [r7, #20]
 800bb2e:	621a      	str	r2, [r3, #32]
}
 800bb30:	bf00      	nop
 800bb32:	371c      	adds	r7, #28
 800bb34:	46bd      	mov	sp, r7
 800bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3a:	4770      	bx	lr
 800bb3c:	fffeff8f 	.word	0xfffeff8f
 800bb40:	40010000 	.word	0x40010000
 800bb44:	40010400 	.word	0x40010400
 800bb48:	40014000 	.word	0x40014000
 800bb4c:	40014400 	.word	0x40014400
 800bb50:	40014800 	.word	0x40014800

0800bb54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b087      	sub	sp, #28
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
 800bb5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6a1b      	ldr	r3, [r3, #32]
 800bb62:	f023 0210 	bic.w	r2, r3, #16
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6a1b      	ldr	r3, [r3, #32]
 800bb6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	685b      	ldr	r3, [r3, #4]
 800bb74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	699b      	ldr	r3, [r3, #24]
 800bb7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bb7c:	68fa      	ldr	r2, [r7, #12]
 800bb7e:	4b34      	ldr	r3, [pc, #208]	; (800bc50 <TIM_OC2_SetConfig+0xfc>)
 800bb80:	4013      	ands	r3, r2
 800bb82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	021b      	lsls	r3, r3, #8
 800bb92:	68fa      	ldr	r2, [r7, #12]
 800bb94:	4313      	orrs	r3, r2
 800bb96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	f023 0320 	bic.w	r3, r3, #32
 800bb9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	689b      	ldr	r3, [r3, #8]
 800bba4:	011b      	lsls	r3, r3, #4
 800bba6:	697a      	ldr	r2, [r7, #20]
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	4a29      	ldr	r2, [pc, #164]	; (800bc54 <TIM_OC2_SetConfig+0x100>)
 800bbb0:	4293      	cmp	r3, r2
 800bbb2:	d003      	beq.n	800bbbc <TIM_OC2_SetConfig+0x68>
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	4a28      	ldr	r2, [pc, #160]	; (800bc58 <TIM_OC2_SetConfig+0x104>)
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	d10d      	bne.n	800bbd8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bbc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	68db      	ldr	r3, [r3, #12]
 800bbc8:	011b      	lsls	r3, r3, #4
 800bbca:	697a      	ldr	r2, [r7, #20]
 800bbcc:	4313      	orrs	r3, r2
 800bbce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbd6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	4a1e      	ldr	r2, [pc, #120]	; (800bc54 <TIM_OC2_SetConfig+0x100>)
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	d00f      	beq.n	800bc00 <TIM_OC2_SetConfig+0xac>
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	4a1d      	ldr	r2, [pc, #116]	; (800bc58 <TIM_OC2_SetConfig+0x104>)
 800bbe4:	4293      	cmp	r3, r2
 800bbe6:	d00b      	beq.n	800bc00 <TIM_OC2_SetConfig+0xac>
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	4a1c      	ldr	r2, [pc, #112]	; (800bc5c <TIM_OC2_SetConfig+0x108>)
 800bbec:	4293      	cmp	r3, r2
 800bbee:	d007      	beq.n	800bc00 <TIM_OC2_SetConfig+0xac>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	4a1b      	ldr	r2, [pc, #108]	; (800bc60 <TIM_OC2_SetConfig+0x10c>)
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	d003      	beq.n	800bc00 <TIM_OC2_SetConfig+0xac>
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	4a1a      	ldr	r2, [pc, #104]	; (800bc64 <TIM_OC2_SetConfig+0x110>)
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	d113      	bne.n	800bc28 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bc06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bc0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	695b      	ldr	r3, [r3, #20]
 800bc14:	009b      	lsls	r3, r3, #2
 800bc16:	693a      	ldr	r2, [r7, #16]
 800bc18:	4313      	orrs	r3, r2
 800bc1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	699b      	ldr	r3, [r3, #24]
 800bc20:	009b      	lsls	r3, r3, #2
 800bc22:	693a      	ldr	r2, [r7, #16]
 800bc24:	4313      	orrs	r3, r2
 800bc26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	693a      	ldr	r2, [r7, #16]
 800bc2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	68fa      	ldr	r2, [r7, #12]
 800bc32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	685a      	ldr	r2, [r3, #4]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	697a      	ldr	r2, [r7, #20]
 800bc40:	621a      	str	r2, [r3, #32]
}
 800bc42:	bf00      	nop
 800bc44:	371c      	adds	r7, #28
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr
 800bc4e:	bf00      	nop
 800bc50:	feff8fff 	.word	0xfeff8fff
 800bc54:	40010000 	.word	0x40010000
 800bc58:	40010400 	.word	0x40010400
 800bc5c:	40014000 	.word	0x40014000
 800bc60:	40014400 	.word	0x40014400
 800bc64:	40014800 	.word	0x40014800

0800bc68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b087      	sub	sp, #28
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6a1b      	ldr	r3, [r3, #32]
 800bc76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6a1b      	ldr	r3, [r3, #32]
 800bc82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	685b      	ldr	r3, [r3, #4]
 800bc88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	69db      	ldr	r3, [r3, #28]
 800bc8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	f023 0303 	bic.w	r3, r3, #3
 800bc9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	68fa      	ldr	r2, [r7, #12]
 800bca6:	4313      	orrs	r3, r2
 800bca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bcb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	689b      	ldr	r3, [r3, #8]
 800bcb6:	021b      	lsls	r3, r3, #8
 800bcb8:	697a      	ldr	r2, [r7, #20]
 800bcba:	4313      	orrs	r3, r2
 800bcbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	4a27      	ldr	r2, [pc, #156]	; (800bd60 <TIM_OC3_SetConfig+0xf8>)
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d003      	beq.n	800bcce <TIM_OC3_SetConfig+0x66>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	4a26      	ldr	r2, [pc, #152]	; (800bd64 <TIM_OC3_SetConfig+0xfc>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d10d      	bne.n	800bcea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bcce:	697b      	ldr	r3, [r7, #20]
 800bcd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bcd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	68db      	ldr	r3, [r3, #12]
 800bcda:	021b      	lsls	r3, r3, #8
 800bcdc:	697a      	ldr	r2, [r7, #20]
 800bcde:	4313      	orrs	r3, r2
 800bce0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bce8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	4a1c      	ldr	r2, [pc, #112]	; (800bd60 <TIM_OC3_SetConfig+0xf8>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d00f      	beq.n	800bd12 <TIM_OC3_SetConfig+0xaa>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	4a1b      	ldr	r2, [pc, #108]	; (800bd64 <TIM_OC3_SetConfig+0xfc>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d00b      	beq.n	800bd12 <TIM_OC3_SetConfig+0xaa>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	4a1a      	ldr	r2, [pc, #104]	; (800bd68 <TIM_OC3_SetConfig+0x100>)
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	d007      	beq.n	800bd12 <TIM_OC3_SetConfig+0xaa>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	4a19      	ldr	r2, [pc, #100]	; (800bd6c <TIM_OC3_SetConfig+0x104>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d003      	beq.n	800bd12 <TIM_OC3_SetConfig+0xaa>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	4a18      	ldr	r2, [pc, #96]	; (800bd70 <TIM_OC3_SetConfig+0x108>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d113      	bne.n	800bd3a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bd20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	695b      	ldr	r3, [r3, #20]
 800bd26:	011b      	lsls	r3, r3, #4
 800bd28:	693a      	ldr	r2, [r7, #16]
 800bd2a:	4313      	orrs	r3, r2
 800bd2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	699b      	ldr	r3, [r3, #24]
 800bd32:	011b      	lsls	r3, r3, #4
 800bd34:	693a      	ldr	r2, [r7, #16]
 800bd36:	4313      	orrs	r3, r2
 800bd38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	693a      	ldr	r2, [r7, #16]
 800bd3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	68fa      	ldr	r2, [r7, #12]
 800bd44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	685a      	ldr	r2, [r3, #4]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	697a      	ldr	r2, [r7, #20]
 800bd52:	621a      	str	r2, [r3, #32]
}
 800bd54:	bf00      	nop
 800bd56:	371c      	adds	r7, #28
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr
 800bd60:	40010000 	.word	0x40010000
 800bd64:	40010400 	.word	0x40010400
 800bd68:	40014000 	.word	0x40014000
 800bd6c:	40014400 	.word	0x40014400
 800bd70:	40014800 	.word	0x40014800

0800bd74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bd74:	b480      	push	{r7}
 800bd76:	b087      	sub	sp, #28
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6a1b      	ldr	r3, [r3, #32]
 800bd82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6a1b      	ldr	r3, [r3, #32]
 800bd8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	685b      	ldr	r3, [r3, #4]
 800bd94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	69db      	ldr	r3, [r3, #28]
 800bd9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bda2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bdaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	021b      	lsls	r3, r3, #8
 800bdb2:	68fa      	ldr	r2, [r7, #12]
 800bdb4:	4313      	orrs	r3, r2
 800bdb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bdbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	689b      	ldr	r3, [r3, #8]
 800bdc4:	031b      	lsls	r3, r3, #12
 800bdc6:	693a      	ldr	r2, [r7, #16]
 800bdc8:	4313      	orrs	r3, r2
 800bdca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	4a18      	ldr	r2, [pc, #96]	; (800be30 <TIM_OC4_SetConfig+0xbc>)
 800bdd0:	4293      	cmp	r3, r2
 800bdd2:	d00f      	beq.n	800bdf4 <TIM_OC4_SetConfig+0x80>
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	4a17      	ldr	r2, [pc, #92]	; (800be34 <TIM_OC4_SetConfig+0xc0>)
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	d00b      	beq.n	800bdf4 <TIM_OC4_SetConfig+0x80>
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	4a16      	ldr	r2, [pc, #88]	; (800be38 <TIM_OC4_SetConfig+0xc4>)
 800bde0:	4293      	cmp	r3, r2
 800bde2:	d007      	beq.n	800bdf4 <TIM_OC4_SetConfig+0x80>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	4a15      	ldr	r2, [pc, #84]	; (800be3c <TIM_OC4_SetConfig+0xc8>)
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d003      	beq.n	800bdf4 <TIM_OC4_SetConfig+0x80>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	4a14      	ldr	r2, [pc, #80]	; (800be40 <TIM_OC4_SetConfig+0xcc>)
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	d109      	bne.n	800be08 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bdfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	695b      	ldr	r3, [r3, #20]
 800be00:	019b      	lsls	r3, r3, #6
 800be02:	697a      	ldr	r2, [r7, #20]
 800be04:	4313      	orrs	r3, r2
 800be06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	697a      	ldr	r2, [r7, #20]
 800be0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	68fa      	ldr	r2, [r7, #12]
 800be12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	685a      	ldr	r2, [r3, #4]
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	693a      	ldr	r2, [r7, #16]
 800be20:	621a      	str	r2, [r3, #32]
}
 800be22:	bf00      	nop
 800be24:	371c      	adds	r7, #28
 800be26:	46bd      	mov	sp, r7
 800be28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2c:	4770      	bx	lr
 800be2e:	bf00      	nop
 800be30:	40010000 	.word	0x40010000
 800be34:	40010400 	.word	0x40010400
 800be38:	40014000 	.word	0x40014000
 800be3c:	40014400 	.word	0x40014400
 800be40:	40014800 	.word	0x40014800

0800be44 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800be44:	b480      	push	{r7}
 800be46:	b087      	sub	sp, #28
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
 800be4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6a1b      	ldr	r3, [r3, #32]
 800be52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6a1b      	ldr	r3, [r3, #32]
 800be5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	685b      	ldr	r3, [r3, #4]
 800be64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	68fa      	ldr	r2, [r7, #12]
 800be7a:	4313      	orrs	r3, r2
 800be7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800be7e:	693b      	ldr	r3, [r7, #16]
 800be80:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800be84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	689b      	ldr	r3, [r3, #8]
 800be8a:	041b      	lsls	r3, r3, #16
 800be8c:	693a      	ldr	r2, [r7, #16]
 800be8e:	4313      	orrs	r3, r2
 800be90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	4a17      	ldr	r2, [pc, #92]	; (800bef4 <TIM_OC5_SetConfig+0xb0>)
 800be96:	4293      	cmp	r3, r2
 800be98:	d00f      	beq.n	800beba <TIM_OC5_SetConfig+0x76>
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	4a16      	ldr	r2, [pc, #88]	; (800bef8 <TIM_OC5_SetConfig+0xb4>)
 800be9e:	4293      	cmp	r3, r2
 800bea0:	d00b      	beq.n	800beba <TIM_OC5_SetConfig+0x76>
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	4a15      	ldr	r2, [pc, #84]	; (800befc <TIM_OC5_SetConfig+0xb8>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d007      	beq.n	800beba <TIM_OC5_SetConfig+0x76>
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	4a14      	ldr	r2, [pc, #80]	; (800bf00 <TIM_OC5_SetConfig+0xbc>)
 800beae:	4293      	cmp	r3, r2
 800beb0:	d003      	beq.n	800beba <TIM_OC5_SetConfig+0x76>
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	4a13      	ldr	r2, [pc, #76]	; (800bf04 <TIM_OC5_SetConfig+0xc0>)
 800beb6:	4293      	cmp	r3, r2
 800beb8:	d109      	bne.n	800bece <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bec0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	695b      	ldr	r3, [r3, #20]
 800bec6:	021b      	lsls	r3, r3, #8
 800bec8:	697a      	ldr	r2, [r7, #20]
 800beca:	4313      	orrs	r3, r2
 800becc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	697a      	ldr	r2, [r7, #20]
 800bed2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	68fa      	ldr	r2, [r7, #12]
 800bed8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	685a      	ldr	r2, [r3, #4]
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	693a      	ldr	r2, [r7, #16]
 800bee6:	621a      	str	r2, [r3, #32]
}
 800bee8:	bf00      	nop
 800beea:	371c      	adds	r7, #28
 800beec:	46bd      	mov	sp, r7
 800beee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef2:	4770      	bx	lr
 800bef4:	40010000 	.word	0x40010000
 800bef8:	40010400 	.word	0x40010400
 800befc:	40014000 	.word	0x40014000
 800bf00:	40014400 	.word	0x40014400
 800bf04:	40014800 	.word	0x40014800

0800bf08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b087      	sub	sp, #28
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6a1b      	ldr	r3, [r3, #32]
 800bf16:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6a1b      	ldr	r3, [r3, #32]
 800bf22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	685b      	ldr	r3, [r3, #4]
 800bf28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bf36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	021b      	lsls	r3, r3, #8
 800bf3e:	68fa      	ldr	r2, [r7, #12]
 800bf40:	4313      	orrs	r3, r2
 800bf42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bf4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	689b      	ldr	r3, [r3, #8]
 800bf50:	051b      	lsls	r3, r3, #20
 800bf52:	693a      	ldr	r2, [r7, #16]
 800bf54:	4313      	orrs	r3, r2
 800bf56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	4a18      	ldr	r2, [pc, #96]	; (800bfbc <TIM_OC6_SetConfig+0xb4>)
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	d00f      	beq.n	800bf80 <TIM_OC6_SetConfig+0x78>
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	4a17      	ldr	r2, [pc, #92]	; (800bfc0 <TIM_OC6_SetConfig+0xb8>)
 800bf64:	4293      	cmp	r3, r2
 800bf66:	d00b      	beq.n	800bf80 <TIM_OC6_SetConfig+0x78>
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	4a16      	ldr	r2, [pc, #88]	; (800bfc4 <TIM_OC6_SetConfig+0xbc>)
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d007      	beq.n	800bf80 <TIM_OC6_SetConfig+0x78>
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	4a15      	ldr	r2, [pc, #84]	; (800bfc8 <TIM_OC6_SetConfig+0xc0>)
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d003      	beq.n	800bf80 <TIM_OC6_SetConfig+0x78>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	4a14      	ldr	r2, [pc, #80]	; (800bfcc <TIM_OC6_SetConfig+0xc4>)
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d109      	bne.n	800bf94 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bf80:	697b      	ldr	r3, [r7, #20]
 800bf82:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bf86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	695b      	ldr	r3, [r3, #20]
 800bf8c:	029b      	lsls	r3, r3, #10
 800bf8e:	697a      	ldr	r2, [r7, #20]
 800bf90:	4313      	orrs	r3, r2
 800bf92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	697a      	ldr	r2, [r7, #20]
 800bf98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	68fa      	ldr	r2, [r7, #12]
 800bf9e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	685a      	ldr	r2, [r3, #4]
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	693a      	ldr	r2, [r7, #16]
 800bfac:	621a      	str	r2, [r3, #32]
}
 800bfae:	bf00      	nop
 800bfb0:	371c      	adds	r7, #28
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb8:	4770      	bx	lr
 800bfba:	bf00      	nop
 800bfbc:	40010000 	.word	0x40010000
 800bfc0:	40010400 	.word	0x40010400
 800bfc4:	40014000 	.word	0x40014000
 800bfc8:	40014400 	.word	0x40014400
 800bfcc:	40014800 	.word	0x40014800

0800bfd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b087      	sub	sp, #28
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	60f8      	str	r0, [r7, #12]
 800bfd8:	60b9      	str	r1, [r7, #8]
 800bfda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	f003 031f 	and.w	r3, r3, #31
 800bfe2:	2201      	movs	r2, #1
 800bfe4:	fa02 f303 	lsl.w	r3, r2, r3
 800bfe8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	6a1a      	ldr	r2, [r3, #32]
 800bfee:	697b      	ldr	r3, [r7, #20]
 800bff0:	43db      	mvns	r3, r3
 800bff2:	401a      	ands	r2, r3
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	6a1a      	ldr	r2, [r3, #32]
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	f003 031f 	and.w	r3, r3, #31
 800c002:	6879      	ldr	r1, [r7, #4]
 800c004:	fa01 f303 	lsl.w	r3, r1, r3
 800c008:	431a      	orrs	r2, r3
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	621a      	str	r2, [r3, #32]
}
 800c00e:	bf00      	nop
 800c010:	371c      	adds	r7, #28
 800c012:	46bd      	mov	sp, r7
 800c014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c018:	4770      	bx	lr
	...

0800c01c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c01c:	b480      	push	{r7}
 800c01e:	b085      	sub	sp, #20
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c02c:	2b01      	cmp	r3, #1
 800c02e:	d101      	bne.n	800c034 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c030:	2302      	movs	r3, #2
 800c032:	e068      	b.n	800c106 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2201      	movs	r2, #1
 800c038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2202      	movs	r2, #2
 800c040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	685b      	ldr	r3, [r3, #4]
 800c04a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	689b      	ldr	r3, [r3, #8]
 800c052:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	4a2e      	ldr	r2, [pc, #184]	; (800c114 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d004      	beq.n	800c068 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	4a2d      	ldr	r2, [pc, #180]	; (800c118 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c064:	4293      	cmp	r3, r2
 800c066:	d108      	bne.n	800c07a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c06e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	685b      	ldr	r3, [r3, #4]
 800c074:	68fa      	ldr	r2, [r7, #12]
 800c076:	4313      	orrs	r3, r2
 800c078:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c080:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	68fa      	ldr	r2, [r7, #12]
 800c088:	4313      	orrs	r3, r2
 800c08a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	68fa      	ldr	r2, [r7, #12]
 800c092:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	4a1e      	ldr	r2, [pc, #120]	; (800c114 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d01d      	beq.n	800c0da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0a6:	d018      	beq.n	800c0da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	4a1b      	ldr	r2, [pc, #108]	; (800c11c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d013      	beq.n	800c0da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	4a1a      	ldr	r2, [pc, #104]	; (800c120 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	d00e      	beq.n	800c0da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	4a18      	ldr	r2, [pc, #96]	; (800c124 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c0c2:	4293      	cmp	r3, r2
 800c0c4:	d009      	beq.n	800c0da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	4a13      	ldr	r2, [pc, #76]	; (800c118 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	d004      	beq.n	800c0da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	4a14      	ldr	r2, [pc, #80]	; (800c128 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c0d6:	4293      	cmp	r3, r2
 800c0d8:	d10c      	bne.n	800c0f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c0e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	689b      	ldr	r3, [r3, #8]
 800c0e6:	68ba      	ldr	r2, [r7, #8]
 800c0e8:	4313      	orrs	r3, r2
 800c0ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	68ba      	ldr	r2, [r7, #8]
 800c0f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2200      	movs	r2, #0
 800c100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c104:	2300      	movs	r3, #0
}
 800c106:	4618      	mov	r0, r3
 800c108:	3714      	adds	r7, #20
 800c10a:	46bd      	mov	sp, r7
 800c10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c110:	4770      	bx	lr
 800c112:	bf00      	nop
 800c114:	40010000 	.word	0x40010000
 800c118:	40010400 	.word	0x40010400
 800c11c:	40000400 	.word	0x40000400
 800c120:	40000800 	.word	0x40000800
 800c124:	40000c00 	.word	0x40000c00
 800c128:	40001800 	.word	0x40001800

0800c12c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c12c:	b480      	push	{r7}
 800c12e:	b085      	sub	sp, #20
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c136:	2300      	movs	r3, #0
 800c138:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c140:	2b01      	cmp	r3, #1
 800c142:	d101      	bne.n	800c148 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c144:	2302      	movs	r3, #2
 800c146:	e065      	b.n	800c214 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2201      	movs	r2, #1
 800c14c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	68db      	ldr	r3, [r3, #12]
 800c15a:	4313      	orrs	r3, r2
 800c15c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	689b      	ldr	r3, [r3, #8]
 800c168:	4313      	orrs	r3, r2
 800c16a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	685b      	ldr	r3, [r3, #4]
 800c176:	4313      	orrs	r3, r2
 800c178:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	4313      	orrs	r3, r2
 800c186:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	691b      	ldr	r3, [r3, #16]
 800c192:	4313      	orrs	r3, r2
 800c194:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	695b      	ldr	r3, [r3, #20]
 800c1a0:	4313      	orrs	r3, r2
 800c1a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1ae:	4313      	orrs	r3, r2
 800c1b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	699b      	ldr	r3, [r3, #24]
 800c1bc:	041b      	lsls	r3, r3, #16
 800c1be:	4313      	orrs	r3, r2
 800c1c0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	4a16      	ldr	r2, [pc, #88]	; (800c220 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d004      	beq.n	800c1d6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	4a14      	ldr	r2, [pc, #80]	; (800c224 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	d115      	bne.n	800c202 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1e0:	051b      	lsls	r3, r3, #20
 800c1e2:	4313      	orrs	r3, r2
 800c1e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	69db      	ldr	r3, [r3, #28]
 800c1f0:	4313      	orrs	r3, r2
 800c1f2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	6a1b      	ldr	r3, [r3, #32]
 800c1fe:	4313      	orrs	r3, r2
 800c200:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	68fa      	ldr	r2, [r7, #12]
 800c208:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2200      	movs	r2, #0
 800c20e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c212:	2300      	movs	r3, #0
}
 800c214:	4618      	mov	r0, r3
 800c216:	3714      	adds	r7, #20
 800c218:	46bd      	mov	sp, r7
 800c21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21e:	4770      	bx	lr
 800c220:	40010000 	.word	0x40010000
 800c224:	40010400 	.word	0x40010400

0800c228 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b082      	sub	sp, #8
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d101      	bne.n	800c23a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c236:	2301      	movs	r3, #1
 800c238:	e042      	b.n	800c2c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c240:	2b00      	cmp	r3, #0
 800c242:	d106      	bne.n	800c252 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2200      	movs	r2, #0
 800c248:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f7f5 ffa7 	bl	80021a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2224      	movs	r2, #36	; 0x24
 800c256:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	681a      	ldr	r2, [r3, #0]
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	f022 0201 	bic.w	r2, r2, #1
 800c268:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f000 fbf6 	bl	800ca5c <UART_SetConfig>
 800c270:	4603      	mov	r3, r0
 800c272:	2b01      	cmp	r3, #1
 800c274:	d101      	bne.n	800c27a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c276:	2301      	movs	r3, #1
 800c278:	e022      	b.n	800c2c0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d002      	beq.n	800c288 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f001 f94a 	bl	800d51c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	685a      	ldr	r2, [r3, #4]
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c296:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	689a      	ldr	r2, [r3, #8]
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c2a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	681a      	ldr	r2, [r3, #0]
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	f042 0201 	orr.w	r2, r2, #1
 800c2b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f001 f9d1 	bl	800d660 <UART_CheckIdleState>
 800c2be:	4603      	mov	r3, r0
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3708      	adds	r7, #8
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}

0800c2c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b08a      	sub	sp, #40	; 0x28
 800c2cc:	af02      	add	r7, sp, #8
 800c2ce:	60f8      	str	r0, [r7, #12]
 800c2d0:	60b9      	str	r1, [r7, #8]
 800c2d2:	603b      	str	r3, [r7, #0]
 800c2d4:	4613      	mov	r3, r2
 800c2d6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2de:	2b20      	cmp	r3, #32
 800c2e0:	f040 8083 	bne.w	800c3ea <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d002      	beq.n	800c2f0 <HAL_UART_Transmit+0x28>
 800c2ea:	88fb      	ldrh	r3, [r7, #6]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d101      	bne.n	800c2f4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	e07b      	b.n	800c3ec <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c2fa:	2b01      	cmp	r3, #1
 800c2fc:	d101      	bne.n	800c302 <HAL_UART_Transmit+0x3a>
 800c2fe:	2302      	movs	r3, #2
 800c300:	e074      	b.n	800c3ec <HAL_UART_Transmit+0x124>
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	2201      	movs	r2, #1
 800c306:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	2200      	movs	r2, #0
 800c30e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	2221      	movs	r2, #33	; 0x21
 800c316:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c31a:	f7f6 f945 	bl	80025a8 <HAL_GetTick>
 800c31e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	88fa      	ldrh	r2, [r7, #6]
 800c324:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	88fa      	ldrh	r2, [r7, #6]
 800c32c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	689b      	ldr	r3, [r3, #8]
 800c334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c338:	d108      	bne.n	800c34c <HAL_UART_Transmit+0x84>
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	691b      	ldr	r3, [r3, #16]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d104      	bne.n	800c34c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800c342:	2300      	movs	r3, #0
 800c344:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	61bb      	str	r3, [r7, #24]
 800c34a:	e003      	b.n	800c354 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c350:	2300      	movs	r3, #0
 800c352:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	2200      	movs	r2, #0
 800c358:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800c35c:	e02c      	b.n	800c3b8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	9300      	str	r3, [sp, #0]
 800c362:	697b      	ldr	r3, [r7, #20]
 800c364:	2200      	movs	r2, #0
 800c366:	2180      	movs	r1, #128	; 0x80
 800c368:	68f8      	ldr	r0, [r7, #12]
 800c36a:	f001 f9c4 	bl	800d6f6 <UART_WaitOnFlagUntilTimeout>
 800c36e:	4603      	mov	r3, r0
 800c370:	2b00      	cmp	r3, #0
 800c372:	d001      	beq.n	800c378 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800c374:	2303      	movs	r3, #3
 800c376:	e039      	b.n	800c3ec <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800c378:	69fb      	ldr	r3, [r7, #28]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d10b      	bne.n	800c396 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c37e:	69bb      	ldr	r3, [r7, #24]
 800c380:	881b      	ldrh	r3, [r3, #0]
 800c382:	461a      	mov	r2, r3
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c38c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c38e:	69bb      	ldr	r3, [r7, #24]
 800c390:	3302      	adds	r3, #2
 800c392:	61bb      	str	r3, [r7, #24]
 800c394:	e007      	b.n	800c3a6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c396:	69fb      	ldr	r3, [r7, #28]
 800c398:	781a      	ldrb	r2, [r3, #0]
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c3a0:	69fb      	ldr	r3, [r7, #28]
 800c3a2:	3301      	adds	r3, #1
 800c3a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c3ac:	b29b      	uxth	r3, r3
 800c3ae:	3b01      	subs	r3, #1
 800c3b0:	b29a      	uxth	r2, r3
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c3be:	b29b      	uxth	r3, r3
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d1cc      	bne.n	800c35e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	9300      	str	r3, [sp, #0]
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	2140      	movs	r1, #64	; 0x40
 800c3ce:	68f8      	ldr	r0, [r7, #12]
 800c3d0:	f001 f991 	bl	800d6f6 <UART_WaitOnFlagUntilTimeout>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d001      	beq.n	800c3de <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800c3da:	2303      	movs	r3, #3
 800c3dc:	e006      	b.n	800c3ec <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	2220      	movs	r2, #32
 800c3e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	e000      	b.n	800c3ec <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800c3ea:	2302      	movs	r3, #2
  }
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3720      	adds	r7, #32
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}

0800c3f4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b084      	sub	sp, #16
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	60f8      	str	r0, [r7, #12]
 800c3fc:	60b9      	str	r1, [r7, #8]
 800c3fe:	4613      	mov	r3, r2
 800c400:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c408:	2b20      	cmp	r3, #32
 800c40a:	d131      	bne.n	800c470 <HAL_UART_Receive_DMA+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d002      	beq.n	800c418 <HAL_UART_Receive_DMA+0x24>
 800c412:	88fb      	ldrh	r3, [r7, #6]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d101      	bne.n	800c41c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c418:	2301      	movs	r3, #1
 800c41a:	e02a      	b.n	800c472 <HAL_UART_Receive_DMA+0x7e>
    }

    __HAL_LOCK(huart);
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c422:	2b01      	cmp	r3, #1
 800c424:	d101      	bne.n	800c42a <HAL_UART_Receive_DMA+0x36>
 800c426:	2302      	movs	r3, #2
 800c428:	e023      	b.n	800c472 <HAL_UART_Receive_DMA+0x7e>
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	2201      	movs	r2, #1
 800c42e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	2200      	movs	r2, #0
 800c436:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	4a0f      	ldr	r2, [pc, #60]	; (800c47c <HAL_UART_Receive_DMA+0x88>)
 800c43e:	4293      	cmp	r3, r2
 800c440:	d00e      	beq.n	800c460 <HAL_UART_Receive_DMA+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	685b      	ldr	r3, [r3, #4]
 800c448:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d007      	beq.n	800c460 <HAL_UART_Receive_DMA+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	681a      	ldr	r2, [r3, #0]
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800c45e:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c460:	88fb      	ldrh	r3, [r7, #6]
 800c462:	461a      	mov	r2, r3
 800c464:	68b9      	ldr	r1, [r7, #8]
 800c466:	68f8      	ldr	r0, [r7, #12]
 800c468:	f001 f9c6 	bl	800d7f8 <UART_Start_Receive_DMA>
 800c46c:	4603      	mov	r3, r0
 800c46e:	e000      	b.n	800c472 <HAL_UART_Receive_DMA+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800c470:	2302      	movs	r3, #2
  }
}
 800c472:	4618      	mov	r0, r3
 800c474:	3710      	adds	r7, #16
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}
 800c47a:	bf00      	nop
 800c47c:	58000c00 	.word	0x58000c00

0800c480 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b088      	sub	sp, #32
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	69db      	ldr	r3, [r3, #28]
 800c48e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	689b      	ldr	r3, [r3, #8]
 800c49e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c4a0:	69fa      	ldr	r2, [r7, #28]
 800c4a2:	f640 030f 	movw	r3, #2063	; 0x80f
 800c4a6:	4013      	ands	r3, r2
 800c4a8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d118      	bne.n	800c4e2 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c4b0:	69fb      	ldr	r3, [r7, #28]
 800c4b2:	f003 0320 	and.w	r3, r3, #32
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d013      	beq.n	800c4e2 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c4ba:	69bb      	ldr	r3, [r7, #24]
 800c4bc:	f003 0320 	and.w	r3, r3, #32
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d104      	bne.n	800c4ce <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c4c4:	697b      	ldr	r3, [r7, #20]
 800c4c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d009      	beq.n	800c4e2 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	f000 8282 	beq.w	800c9dc <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	4798      	blx	r3
      }
      return;
 800c4e0:	e27c      	b.n	800c9dc <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c4e2:	693b      	ldr	r3, [r7, #16]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	f000 80ef 	beq.w	800c6c8 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c4ea:	697a      	ldr	r2, [r7, #20]
 800c4ec:	4b73      	ldr	r3, [pc, #460]	; (800c6bc <HAL_UART_IRQHandler+0x23c>)
 800c4ee:	4013      	ands	r3, r2
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d105      	bne.n	800c500 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c4f4:	69ba      	ldr	r2, [r7, #24]
 800c4f6:	4b72      	ldr	r3, [pc, #456]	; (800c6c0 <HAL_UART_IRQHandler+0x240>)
 800c4f8:	4013      	ands	r3, r2
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	f000 80e4 	beq.w	800c6c8 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c500:	69fb      	ldr	r3, [r7, #28]
 800c502:	f003 0301 	and.w	r3, r3, #1
 800c506:	2b00      	cmp	r3, #0
 800c508:	d010      	beq.n	800c52c <HAL_UART_IRQHandler+0xac>
 800c50a:	69bb      	ldr	r3, [r7, #24]
 800c50c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c510:	2b00      	cmp	r3, #0
 800c512:	d00b      	beq.n	800c52c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	2201      	movs	r2, #1
 800c51a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c522:	f043 0201 	orr.w	r2, r3, #1
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c52c:	69fb      	ldr	r3, [r7, #28]
 800c52e:	f003 0302 	and.w	r3, r3, #2
 800c532:	2b00      	cmp	r3, #0
 800c534:	d010      	beq.n	800c558 <HAL_UART_IRQHandler+0xd8>
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	f003 0301 	and.w	r3, r3, #1
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d00b      	beq.n	800c558 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	2202      	movs	r2, #2
 800c546:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c54e:	f043 0204 	orr.w	r2, r3, #4
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c558:	69fb      	ldr	r3, [r7, #28]
 800c55a:	f003 0304 	and.w	r3, r3, #4
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d010      	beq.n	800c584 <HAL_UART_IRQHandler+0x104>
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	f003 0301 	and.w	r3, r3, #1
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d00b      	beq.n	800c584 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	2204      	movs	r2, #4
 800c572:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c57a:	f043 0202 	orr.w	r2, r3, #2
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c584:	69fb      	ldr	r3, [r7, #28]
 800c586:	f003 0308 	and.w	r3, r3, #8
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d015      	beq.n	800c5ba <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c58e:	69bb      	ldr	r3, [r7, #24]
 800c590:	f003 0320 	and.w	r3, r3, #32
 800c594:	2b00      	cmp	r3, #0
 800c596:	d104      	bne.n	800c5a2 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c598:	697a      	ldr	r2, [r7, #20]
 800c59a:	4b48      	ldr	r3, [pc, #288]	; (800c6bc <HAL_UART_IRQHandler+0x23c>)
 800c59c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d00b      	beq.n	800c5ba <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	2208      	movs	r2, #8
 800c5a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c5b0:	f043 0208 	orr.w	r2, r3, #8
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c5ba:	69fb      	ldr	r3, [r7, #28]
 800c5bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d011      	beq.n	800c5e8 <HAL_UART_IRQHandler+0x168>
 800c5c4:	69bb      	ldr	r3, [r7, #24]
 800c5c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d00c      	beq.n	800c5e8 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c5d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c5de:	f043 0220 	orr.w	r2, r3, #32
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	f000 81f6 	beq.w	800c9e0 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c5f4:	69fb      	ldr	r3, [r7, #28]
 800c5f6:	f003 0320 	and.w	r3, r3, #32
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d011      	beq.n	800c622 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c5fe:	69bb      	ldr	r3, [r7, #24]
 800c600:	f003 0320 	and.w	r3, r3, #32
 800c604:	2b00      	cmp	r3, #0
 800c606:	d104      	bne.n	800c612 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d007      	beq.n	800c622 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c616:	2b00      	cmp	r3, #0
 800c618:	d003      	beq.n	800c622 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c628:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	689b      	ldr	r3, [r3, #8]
 800c630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c634:	2b40      	cmp	r3, #64	; 0x40
 800c636:	d004      	beq.n	800c642 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d031      	beq.n	800c6a6 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f001 f964 	bl	800d910 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	689b      	ldr	r3, [r3, #8]
 800c64e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c652:	2b40      	cmp	r3, #64	; 0x40
 800c654:	d123      	bne.n	800c69e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	689a      	ldr	r2, [r3, #8]
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c664:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d013      	beq.n	800c696 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c672:	4a14      	ldr	r2, [pc, #80]	; (800c6c4 <HAL_UART_IRQHandler+0x244>)
 800c674:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c67a:	4618      	mov	r0, r3
 800c67c:	f7f7 fa54 	bl	8003b28 <HAL_DMA_Abort_IT>
 800c680:	4603      	mov	r3, r0
 800c682:	2b00      	cmp	r3, #0
 800c684:	d017      	beq.n	800c6b6 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c68a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c68c:	687a      	ldr	r2, [r7, #4]
 800c68e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c690:	4610      	mov	r0, r2
 800c692:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c694:	e00f      	b.n	800c6b6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f000 f9ca 	bl	800ca30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c69c:	e00b      	b.n	800c6b6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f000 f9c6 	bl	800ca30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6a4:	e007      	b.n	800c6b6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f000 f9c2 	bl	800ca30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c6b4:	e194      	b.n	800c9e0 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6b6:	bf00      	nop
    return;
 800c6b8:	e192      	b.n	800c9e0 <HAL_UART_IRQHandler+0x560>
 800c6ba:	bf00      	nop
 800c6bc:	10000001 	.word	0x10000001
 800c6c0:	04000120 	.word	0x04000120
 800c6c4:	0800dac3 	.word	0x0800dac3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6cc:	2b01      	cmp	r3, #1
 800c6ce:	f040 810f 	bne.w	800c8f0 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c6d2:	69fb      	ldr	r3, [r7, #28]
 800c6d4:	f003 0310 	and.w	r3, r3, #16
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	f000 8109 	beq.w	800c8f0 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c6de:	69bb      	ldr	r3, [r7, #24]
 800c6e0:	f003 0310 	and.w	r3, r3, #16
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	f000 8103 	beq.w	800c8f0 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	2210      	movs	r2, #16
 800c6f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	689b      	ldr	r3, [r3, #8]
 800c6f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6fc:	2b40      	cmp	r3, #64	; 0x40
 800c6fe:	f040 80bb 	bne.w	800c878 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	4a96      	ldr	r2, [pc, #600]	; (800c964 <HAL_UART_IRQHandler+0x4e4>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d059      	beq.n	800c7c2 <HAL_UART_IRQHandler+0x342>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	4a94      	ldr	r2, [pc, #592]	; (800c968 <HAL_UART_IRQHandler+0x4e8>)
 800c716:	4293      	cmp	r3, r2
 800c718:	d053      	beq.n	800c7c2 <HAL_UART_IRQHandler+0x342>
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	4a92      	ldr	r2, [pc, #584]	; (800c96c <HAL_UART_IRQHandler+0x4ec>)
 800c722:	4293      	cmp	r3, r2
 800c724:	d04d      	beq.n	800c7c2 <HAL_UART_IRQHandler+0x342>
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	4a90      	ldr	r2, [pc, #576]	; (800c970 <HAL_UART_IRQHandler+0x4f0>)
 800c72e:	4293      	cmp	r3, r2
 800c730:	d047      	beq.n	800c7c2 <HAL_UART_IRQHandler+0x342>
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	4a8e      	ldr	r2, [pc, #568]	; (800c974 <HAL_UART_IRQHandler+0x4f4>)
 800c73a:	4293      	cmp	r3, r2
 800c73c:	d041      	beq.n	800c7c2 <HAL_UART_IRQHandler+0x342>
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	4a8c      	ldr	r2, [pc, #560]	; (800c978 <HAL_UART_IRQHandler+0x4f8>)
 800c746:	4293      	cmp	r3, r2
 800c748:	d03b      	beq.n	800c7c2 <HAL_UART_IRQHandler+0x342>
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	4a8a      	ldr	r2, [pc, #552]	; (800c97c <HAL_UART_IRQHandler+0x4fc>)
 800c752:	4293      	cmp	r3, r2
 800c754:	d035      	beq.n	800c7c2 <HAL_UART_IRQHandler+0x342>
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	4a88      	ldr	r2, [pc, #544]	; (800c980 <HAL_UART_IRQHandler+0x500>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d02f      	beq.n	800c7c2 <HAL_UART_IRQHandler+0x342>
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	4a86      	ldr	r2, [pc, #536]	; (800c984 <HAL_UART_IRQHandler+0x504>)
 800c76a:	4293      	cmp	r3, r2
 800c76c:	d029      	beq.n	800c7c2 <HAL_UART_IRQHandler+0x342>
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	4a84      	ldr	r2, [pc, #528]	; (800c988 <HAL_UART_IRQHandler+0x508>)
 800c776:	4293      	cmp	r3, r2
 800c778:	d023      	beq.n	800c7c2 <HAL_UART_IRQHandler+0x342>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	4a82      	ldr	r2, [pc, #520]	; (800c98c <HAL_UART_IRQHandler+0x50c>)
 800c782:	4293      	cmp	r3, r2
 800c784:	d01d      	beq.n	800c7c2 <HAL_UART_IRQHandler+0x342>
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	4a80      	ldr	r2, [pc, #512]	; (800c990 <HAL_UART_IRQHandler+0x510>)
 800c78e:	4293      	cmp	r3, r2
 800c790:	d017      	beq.n	800c7c2 <HAL_UART_IRQHandler+0x342>
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	4a7e      	ldr	r2, [pc, #504]	; (800c994 <HAL_UART_IRQHandler+0x514>)
 800c79a:	4293      	cmp	r3, r2
 800c79c:	d011      	beq.n	800c7c2 <HAL_UART_IRQHandler+0x342>
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	4a7c      	ldr	r2, [pc, #496]	; (800c998 <HAL_UART_IRQHandler+0x518>)
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	d00b      	beq.n	800c7c2 <HAL_UART_IRQHandler+0x342>
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	4a7a      	ldr	r2, [pc, #488]	; (800c99c <HAL_UART_IRQHandler+0x51c>)
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	d005      	beq.n	800c7c2 <HAL_UART_IRQHandler+0x342>
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	4a78      	ldr	r2, [pc, #480]	; (800c9a0 <HAL_UART_IRQHandler+0x520>)
 800c7be:	4293      	cmp	r3, r2
 800c7c0:	d105      	bne.n	800c7ce <HAL_UART_IRQHandler+0x34e>
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	685b      	ldr	r3, [r3, #4]
 800c7ca:	b29b      	uxth	r3, r3
 800c7cc:	e004      	b.n	800c7d8 <HAL_UART_IRQHandler+0x358>
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	685b      	ldr	r3, [r3, #4]
 800c7d6:	b29b      	uxth	r3, r3
 800c7d8:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800c7da:	893b      	ldrh	r3, [r7, #8]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	f000 8101 	beq.w	800c9e4 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c7e8:	893a      	ldrh	r2, [r7, #8]
 800c7ea:	429a      	cmp	r2, r3
 800c7ec:	f080 80fa 	bcs.w	800c9e4 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	893a      	ldrh	r2, [r7, #8]
 800c7f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c7fc:	69db      	ldr	r3, [r3, #28]
 800c7fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c802:	d02b      	beq.n	800c85c <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	681a      	ldr	r2, [r3, #0]
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c812:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	689a      	ldr	r2, [r3, #8]
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f022 0201 	bic.w	r2, r2, #1
 800c822:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	689a      	ldr	r2, [r3, #8]
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c832:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2220      	movs	r2, #32
 800c838:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2200      	movs	r2, #0
 800c840:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	681a      	ldr	r2, [r3, #0]
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f022 0210 	bic.w	r2, r2, #16
 800c850:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c856:	4618      	mov	r0, r3
 800c858:	f7f6 fe48 	bl	80034ec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c868:	b29b      	uxth	r3, r3
 800c86a:	1ad3      	subs	r3, r2, r3
 800c86c:	b29b      	uxth	r3, r3
 800c86e:	4619      	mov	r1, r3
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	f000 f8e7 	bl	800ca44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c876:	e0b5      	b.n	800c9e4 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c884:	b29b      	uxth	r3, r3
 800c886:	1ad3      	subs	r3, r2, r3
 800c888:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c890:	b29b      	uxth	r3, r3
 800c892:	2b00      	cmp	r3, #0
 800c894:	f000 80a8 	beq.w	800c9e8 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800c898:	897b      	ldrh	r3, [r7, #10]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	f000 80a4 	beq.w	800c9e8 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	681a      	ldr	r2, [r3, #0]
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c8ae:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	6899      	ldr	r1, [r3, #8]
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681a      	ldr	r2, [r3, #0]
 800c8ba:	4b3a      	ldr	r3, [pc, #232]	; (800c9a4 <HAL_UART_IRQHandler+0x524>)
 800c8bc:	400b      	ands	r3, r1
 800c8be:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2220      	movs	r2, #32
 800c8c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	681a      	ldr	r2, [r3, #0]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	f022 0210 	bic.w	r2, r2, #16
 800c8e2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c8e4:	897b      	ldrh	r3, [r7, #10]
 800c8e6:	4619      	mov	r1, r3
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	f000 f8ab 	bl	800ca44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c8ee:	e07b      	b.n	800c9e8 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c8f0:	69fb      	ldr	r3, [r7, #28]
 800c8f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d00d      	beq.n	800c916 <HAL_UART_IRQHandler+0x496>
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c900:	2b00      	cmp	r3, #0
 800c902:	d008      	beq.n	800c916 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c90c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f001 f907 	bl	800db22 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c914:	e06b      	b.n	800c9ee <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c916:	69fb      	ldr	r3, [r7, #28]
 800c918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d012      	beq.n	800c946 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c920:	69bb      	ldr	r3, [r7, #24]
 800c922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c926:	2b00      	cmp	r3, #0
 800c928:	d104      	bne.n	800c934 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c930:	2b00      	cmp	r3, #0
 800c932:	d008      	beq.n	800c946 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d057      	beq.n	800c9ec <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	4798      	blx	r3
    }
    return;
 800c944:	e052      	b.n	800c9ec <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c946:	69fb      	ldr	r3, [r7, #28]
 800c948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d02b      	beq.n	800c9a8 <HAL_UART_IRQHandler+0x528>
 800c950:	69bb      	ldr	r3, [r7, #24]
 800c952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c956:	2b00      	cmp	r3, #0
 800c958:	d026      	beq.n	800c9a8 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f001 f8c7 	bl	800daee <UART_EndTransmit_IT>
    return;
 800c960:	e045      	b.n	800c9ee <HAL_UART_IRQHandler+0x56e>
 800c962:	bf00      	nop
 800c964:	40020010 	.word	0x40020010
 800c968:	40020028 	.word	0x40020028
 800c96c:	40020040 	.word	0x40020040
 800c970:	40020058 	.word	0x40020058
 800c974:	40020070 	.word	0x40020070
 800c978:	40020088 	.word	0x40020088
 800c97c:	400200a0 	.word	0x400200a0
 800c980:	400200b8 	.word	0x400200b8
 800c984:	40020410 	.word	0x40020410
 800c988:	40020428 	.word	0x40020428
 800c98c:	40020440 	.word	0x40020440
 800c990:	40020458 	.word	0x40020458
 800c994:	40020470 	.word	0x40020470
 800c998:	40020488 	.word	0x40020488
 800c99c:	400204a0 	.word	0x400204a0
 800c9a0:	400204b8 	.word	0x400204b8
 800c9a4:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c9a8:	69fb      	ldr	r3, [r7, #28]
 800c9aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d008      	beq.n	800c9c4 <HAL_UART_IRQHandler+0x544>
 800c9b2:	69bb      	ldr	r3, [r7, #24]
 800c9b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d003      	beq.n	800c9c4 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f001 f8c4 	bl	800db4a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c9c2:	e014      	b.n	800c9ee <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c9c4:	69fb      	ldr	r3, [r7, #28]
 800c9c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d00f      	beq.n	800c9ee <HAL_UART_IRQHandler+0x56e>
 800c9ce:	69bb      	ldr	r3, [r7, #24]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	da0c      	bge.n	800c9ee <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	f001 f8ae 	bl	800db36 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c9da:	e008      	b.n	800c9ee <HAL_UART_IRQHandler+0x56e>
      return;
 800c9dc:	bf00      	nop
 800c9de:	e006      	b.n	800c9ee <HAL_UART_IRQHandler+0x56e>
    return;
 800c9e0:	bf00      	nop
 800c9e2:	e004      	b.n	800c9ee <HAL_UART_IRQHandler+0x56e>
      return;
 800c9e4:	bf00      	nop
 800c9e6:	e002      	b.n	800c9ee <HAL_UART_IRQHandler+0x56e>
      return;
 800c9e8:	bf00      	nop
 800c9ea:	e000      	b.n	800c9ee <HAL_UART_IRQHandler+0x56e>
    return;
 800c9ec:	bf00      	nop
  }
}
 800c9ee:	3720      	adds	r7, #32
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}

0800c9f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	b083      	sub	sp, #12
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c9fc:	bf00      	nop
 800c9fe:	370c      	adds	r7, #12
 800ca00:	46bd      	mov	sp, r7
 800ca02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca06:	4770      	bx	lr

0800ca08 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ca08:	b480      	push	{r7}
 800ca0a:	b083      	sub	sp, #12
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800ca10:	bf00      	nop
 800ca12:	370c      	adds	r7, #12
 800ca14:	46bd      	mov	sp, r7
 800ca16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1a:	4770      	bx	lr

0800ca1c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b083      	sub	sp, #12
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ca24:	bf00      	nop
 800ca26:	370c      	adds	r7, #12
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2e:	4770      	bx	lr

0800ca30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ca30:	b480      	push	{r7}
 800ca32:	b083      	sub	sp, #12
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ca38:	bf00      	nop
 800ca3a:	370c      	adds	r7, #12
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca42:	4770      	bx	lr

0800ca44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ca44:	b480      	push	{r7}
 800ca46:	b083      	sub	sp, #12
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	460b      	mov	r3, r1
 800ca4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ca50:	bf00      	nop
 800ca52:	370c      	adds	r7, #12
 800ca54:	46bd      	mov	sp, r7
 800ca56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5a:	4770      	bx	lr

0800ca5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ca5c:	b5b0      	push	{r4, r5, r7, lr}
 800ca5e:	b08e      	sub	sp, #56	; 0x38
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ca64:	2300      	movs	r3, #0
 800ca66:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	689a      	ldr	r2, [r3, #8]
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	691b      	ldr	r3, [r3, #16]
 800ca72:	431a      	orrs	r2, r3
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	695b      	ldr	r3, [r3, #20]
 800ca78:	431a      	orrs	r2, r3
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	69db      	ldr	r3, [r3, #28]
 800ca7e:	4313      	orrs	r3, r2
 800ca80:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	681a      	ldr	r2, [r3, #0]
 800ca88:	4bbf      	ldr	r3, [pc, #764]	; (800cd88 <UART_SetConfig+0x32c>)
 800ca8a:	4013      	ands	r3, r2
 800ca8c:	687a      	ldr	r2, [r7, #4]
 800ca8e:	6812      	ldr	r2, [r2, #0]
 800ca90:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ca92:	430b      	orrs	r3, r1
 800ca94:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	685b      	ldr	r3, [r3, #4]
 800ca9c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	68da      	ldr	r2, [r3, #12]
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	430a      	orrs	r2, r1
 800caaa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	699b      	ldr	r3, [r3, #24]
 800cab0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	4ab5      	ldr	r2, [pc, #724]	; (800cd8c <UART_SetConfig+0x330>)
 800cab8:	4293      	cmp	r3, r2
 800caba:	d004      	beq.n	800cac6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6a1b      	ldr	r3, [r3, #32]
 800cac0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cac2:	4313      	orrs	r3, r2
 800cac4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	689a      	ldr	r2, [r3, #8]
 800cacc:	4bb0      	ldr	r3, [pc, #704]	; (800cd90 <UART_SetConfig+0x334>)
 800cace:	4013      	ands	r3, r2
 800cad0:	687a      	ldr	r2, [r7, #4]
 800cad2:	6812      	ldr	r2, [r2, #0]
 800cad4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cad6:	430b      	orrs	r3, r1
 800cad8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cae0:	f023 010f 	bic.w	r1, r3, #15
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	430a      	orrs	r2, r1
 800caee:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	4aa7      	ldr	r2, [pc, #668]	; (800cd94 <UART_SetConfig+0x338>)
 800caf6:	4293      	cmp	r3, r2
 800caf8:	d176      	bne.n	800cbe8 <UART_SetConfig+0x18c>
 800cafa:	4ba7      	ldr	r3, [pc, #668]	; (800cd98 <UART_SetConfig+0x33c>)
 800cafc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cafe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cb02:	2b28      	cmp	r3, #40	; 0x28
 800cb04:	d86c      	bhi.n	800cbe0 <UART_SetConfig+0x184>
 800cb06:	a201      	add	r2, pc, #4	; (adr r2, 800cb0c <UART_SetConfig+0xb0>)
 800cb08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb0c:	0800cbb1 	.word	0x0800cbb1
 800cb10:	0800cbe1 	.word	0x0800cbe1
 800cb14:	0800cbe1 	.word	0x0800cbe1
 800cb18:	0800cbe1 	.word	0x0800cbe1
 800cb1c:	0800cbe1 	.word	0x0800cbe1
 800cb20:	0800cbe1 	.word	0x0800cbe1
 800cb24:	0800cbe1 	.word	0x0800cbe1
 800cb28:	0800cbe1 	.word	0x0800cbe1
 800cb2c:	0800cbb9 	.word	0x0800cbb9
 800cb30:	0800cbe1 	.word	0x0800cbe1
 800cb34:	0800cbe1 	.word	0x0800cbe1
 800cb38:	0800cbe1 	.word	0x0800cbe1
 800cb3c:	0800cbe1 	.word	0x0800cbe1
 800cb40:	0800cbe1 	.word	0x0800cbe1
 800cb44:	0800cbe1 	.word	0x0800cbe1
 800cb48:	0800cbe1 	.word	0x0800cbe1
 800cb4c:	0800cbc1 	.word	0x0800cbc1
 800cb50:	0800cbe1 	.word	0x0800cbe1
 800cb54:	0800cbe1 	.word	0x0800cbe1
 800cb58:	0800cbe1 	.word	0x0800cbe1
 800cb5c:	0800cbe1 	.word	0x0800cbe1
 800cb60:	0800cbe1 	.word	0x0800cbe1
 800cb64:	0800cbe1 	.word	0x0800cbe1
 800cb68:	0800cbe1 	.word	0x0800cbe1
 800cb6c:	0800cbc9 	.word	0x0800cbc9
 800cb70:	0800cbe1 	.word	0x0800cbe1
 800cb74:	0800cbe1 	.word	0x0800cbe1
 800cb78:	0800cbe1 	.word	0x0800cbe1
 800cb7c:	0800cbe1 	.word	0x0800cbe1
 800cb80:	0800cbe1 	.word	0x0800cbe1
 800cb84:	0800cbe1 	.word	0x0800cbe1
 800cb88:	0800cbe1 	.word	0x0800cbe1
 800cb8c:	0800cbd1 	.word	0x0800cbd1
 800cb90:	0800cbe1 	.word	0x0800cbe1
 800cb94:	0800cbe1 	.word	0x0800cbe1
 800cb98:	0800cbe1 	.word	0x0800cbe1
 800cb9c:	0800cbe1 	.word	0x0800cbe1
 800cba0:	0800cbe1 	.word	0x0800cbe1
 800cba4:	0800cbe1 	.word	0x0800cbe1
 800cba8:	0800cbe1 	.word	0x0800cbe1
 800cbac:	0800cbd9 	.word	0x0800cbd9
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbb6:	e222      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cbb8:	2304      	movs	r3, #4
 800cbba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbbe:	e21e      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cbc0:	2308      	movs	r3, #8
 800cbc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbc6:	e21a      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cbc8:	2310      	movs	r3, #16
 800cbca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbce:	e216      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cbd0:	2320      	movs	r3, #32
 800cbd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbd6:	e212      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cbd8:	2340      	movs	r3, #64	; 0x40
 800cbda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbde:	e20e      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cbe0:	2380      	movs	r3, #128	; 0x80
 800cbe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbe6:	e20a      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	4a6b      	ldr	r2, [pc, #428]	; (800cd9c <UART_SetConfig+0x340>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d130      	bne.n	800cc54 <UART_SetConfig+0x1f8>
 800cbf2:	4b69      	ldr	r3, [pc, #420]	; (800cd98 <UART_SetConfig+0x33c>)
 800cbf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbf6:	f003 0307 	and.w	r3, r3, #7
 800cbfa:	2b05      	cmp	r3, #5
 800cbfc:	d826      	bhi.n	800cc4c <UART_SetConfig+0x1f0>
 800cbfe:	a201      	add	r2, pc, #4	; (adr r2, 800cc04 <UART_SetConfig+0x1a8>)
 800cc00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc04:	0800cc1d 	.word	0x0800cc1d
 800cc08:	0800cc25 	.word	0x0800cc25
 800cc0c:	0800cc2d 	.word	0x0800cc2d
 800cc10:	0800cc35 	.word	0x0800cc35
 800cc14:	0800cc3d 	.word	0x0800cc3d
 800cc18:	0800cc45 	.word	0x0800cc45
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc22:	e1ec      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cc24:	2304      	movs	r3, #4
 800cc26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc2a:	e1e8      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cc2c:	2308      	movs	r3, #8
 800cc2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc32:	e1e4      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cc34:	2310      	movs	r3, #16
 800cc36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc3a:	e1e0      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cc3c:	2320      	movs	r3, #32
 800cc3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc42:	e1dc      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cc44:	2340      	movs	r3, #64	; 0x40
 800cc46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc4a:	e1d8      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cc4c:	2380      	movs	r3, #128	; 0x80
 800cc4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc52:	e1d4      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	4a51      	ldr	r2, [pc, #324]	; (800cda0 <UART_SetConfig+0x344>)
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	d130      	bne.n	800ccc0 <UART_SetConfig+0x264>
 800cc5e:	4b4e      	ldr	r3, [pc, #312]	; (800cd98 <UART_SetConfig+0x33c>)
 800cc60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc62:	f003 0307 	and.w	r3, r3, #7
 800cc66:	2b05      	cmp	r3, #5
 800cc68:	d826      	bhi.n	800ccb8 <UART_SetConfig+0x25c>
 800cc6a:	a201      	add	r2, pc, #4	; (adr r2, 800cc70 <UART_SetConfig+0x214>)
 800cc6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc70:	0800cc89 	.word	0x0800cc89
 800cc74:	0800cc91 	.word	0x0800cc91
 800cc78:	0800cc99 	.word	0x0800cc99
 800cc7c:	0800cca1 	.word	0x0800cca1
 800cc80:	0800cca9 	.word	0x0800cca9
 800cc84:	0800ccb1 	.word	0x0800ccb1
 800cc88:	2300      	movs	r3, #0
 800cc8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc8e:	e1b6      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cc90:	2304      	movs	r3, #4
 800cc92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc96:	e1b2      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cc98:	2308      	movs	r3, #8
 800cc9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc9e:	e1ae      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cca0:	2310      	movs	r3, #16
 800cca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cca6:	e1aa      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cca8:	2320      	movs	r3, #32
 800ccaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccae:	e1a6      	b.n	800cffe <UART_SetConfig+0x5a2>
 800ccb0:	2340      	movs	r3, #64	; 0x40
 800ccb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccb6:	e1a2      	b.n	800cffe <UART_SetConfig+0x5a2>
 800ccb8:	2380      	movs	r3, #128	; 0x80
 800ccba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccbe:	e19e      	b.n	800cffe <UART_SetConfig+0x5a2>
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	4a37      	ldr	r2, [pc, #220]	; (800cda4 <UART_SetConfig+0x348>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d130      	bne.n	800cd2c <UART_SetConfig+0x2d0>
 800ccca:	4b33      	ldr	r3, [pc, #204]	; (800cd98 <UART_SetConfig+0x33c>)
 800cccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccce:	f003 0307 	and.w	r3, r3, #7
 800ccd2:	2b05      	cmp	r3, #5
 800ccd4:	d826      	bhi.n	800cd24 <UART_SetConfig+0x2c8>
 800ccd6:	a201      	add	r2, pc, #4	; (adr r2, 800ccdc <UART_SetConfig+0x280>)
 800ccd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccdc:	0800ccf5 	.word	0x0800ccf5
 800cce0:	0800ccfd 	.word	0x0800ccfd
 800cce4:	0800cd05 	.word	0x0800cd05
 800cce8:	0800cd0d 	.word	0x0800cd0d
 800ccec:	0800cd15 	.word	0x0800cd15
 800ccf0:	0800cd1d 	.word	0x0800cd1d
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccfa:	e180      	b.n	800cffe <UART_SetConfig+0x5a2>
 800ccfc:	2304      	movs	r3, #4
 800ccfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd02:	e17c      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cd04:	2308      	movs	r3, #8
 800cd06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd0a:	e178      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cd0c:	2310      	movs	r3, #16
 800cd0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd12:	e174      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cd14:	2320      	movs	r3, #32
 800cd16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd1a:	e170      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cd1c:	2340      	movs	r3, #64	; 0x40
 800cd1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd22:	e16c      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cd24:	2380      	movs	r3, #128	; 0x80
 800cd26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd2a:	e168      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	4a1d      	ldr	r2, [pc, #116]	; (800cda8 <UART_SetConfig+0x34c>)
 800cd32:	4293      	cmp	r3, r2
 800cd34:	d142      	bne.n	800cdbc <UART_SetConfig+0x360>
 800cd36:	4b18      	ldr	r3, [pc, #96]	; (800cd98 <UART_SetConfig+0x33c>)
 800cd38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd3a:	f003 0307 	and.w	r3, r3, #7
 800cd3e:	2b05      	cmp	r3, #5
 800cd40:	d838      	bhi.n	800cdb4 <UART_SetConfig+0x358>
 800cd42:	a201      	add	r2, pc, #4	; (adr r2, 800cd48 <UART_SetConfig+0x2ec>)
 800cd44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd48:	0800cd61 	.word	0x0800cd61
 800cd4c:	0800cd69 	.word	0x0800cd69
 800cd50:	0800cd71 	.word	0x0800cd71
 800cd54:	0800cd79 	.word	0x0800cd79
 800cd58:	0800cd81 	.word	0x0800cd81
 800cd5c:	0800cdad 	.word	0x0800cdad
 800cd60:	2300      	movs	r3, #0
 800cd62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd66:	e14a      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cd68:	2304      	movs	r3, #4
 800cd6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd6e:	e146      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cd70:	2308      	movs	r3, #8
 800cd72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd76:	e142      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cd78:	2310      	movs	r3, #16
 800cd7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd7e:	e13e      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cd80:	2320      	movs	r3, #32
 800cd82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd86:	e13a      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cd88:	cfff69f3 	.word	0xcfff69f3
 800cd8c:	58000c00 	.word	0x58000c00
 800cd90:	11fff4ff 	.word	0x11fff4ff
 800cd94:	40011000 	.word	0x40011000
 800cd98:	58024400 	.word	0x58024400
 800cd9c:	40004400 	.word	0x40004400
 800cda0:	40004800 	.word	0x40004800
 800cda4:	40004c00 	.word	0x40004c00
 800cda8:	40005000 	.word	0x40005000
 800cdac:	2340      	movs	r3, #64	; 0x40
 800cdae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdb2:	e124      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cdb4:	2380      	movs	r3, #128	; 0x80
 800cdb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdba:	e120      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	4acc      	ldr	r2, [pc, #816]	; (800d0f4 <UART_SetConfig+0x698>)
 800cdc2:	4293      	cmp	r3, r2
 800cdc4:	d176      	bne.n	800ceb4 <UART_SetConfig+0x458>
 800cdc6:	4bcc      	ldr	r3, [pc, #816]	; (800d0f8 <UART_SetConfig+0x69c>)
 800cdc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cdce:	2b28      	cmp	r3, #40	; 0x28
 800cdd0:	d86c      	bhi.n	800ceac <UART_SetConfig+0x450>
 800cdd2:	a201      	add	r2, pc, #4	; (adr r2, 800cdd8 <UART_SetConfig+0x37c>)
 800cdd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdd8:	0800ce7d 	.word	0x0800ce7d
 800cddc:	0800cead 	.word	0x0800cead
 800cde0:	0800cead 	.word	0x0800cead
 800cde4:	0800cead 	.word	0x0800cead
 800cde8:	0800cead 	.word	0x0800cead
 800cdec:	0800cead 	.word	0x0800cead
 800cdf0:	0800cead 	.word	0x0800cead
 800cdf4:	0800cead 	.word	0x0800cead
 800cdf8:	0800ce85 	.word	0x0800ce85
 800cdfc:	0800cead 	.word	0x0800cead
 800ce00:	0800cead 	.word	0x0800cead
 800ce04:	0800cead 	.word	0x0800cead
 800ce08:	0800cead 	.word	0x0800cead
 800ce0c:	0800cead 	.word	0x0800cead
 800ce10:	0800cead 	.word	0x0800cead
 800ce14:	0800cead 	.word	0x0800cead
 800ce18:	0800ce8d 	.word	0x0800ce8d
 800ce1c:	0800cead 	.word	0x0800cead
 800ce20:	0800cead 	.word	0x0800cead
 800ce24:	0800cead 	.word	0x0800cead
 800ce28:	0800cead 	.word	0x0800cead
 800ce2c:	0800cead 	.word	0x0800cead
 800ce30:	0800cead 	.word	0x0800cead
 800ce34:	0800cead 	.word	0x0800cead
 800ce38:	0800ce95 	.word	0x0800ce95
 800ce3c:	0800cead 	.word	0x0800cead
 800ce40:	0800cead 	.word	0x0800cead
 800ce44:	0800cead 	.word	0x0800cead
 800ce48:	0800cead 	.word	0x0800cead
 800ce4c:	0800cead 	.word	0x0800cead
 800ce50:	0800cead 	.word	0x0800cead
 800ce54:	0800cead 	.word	0x0800cead
 800ce58:	0800ce9d 	.word	0x0800ce9d
 800ce5c:	0800cead 	.word	0x0800cead
 800ce60:	0800cead 	.word	0x0800cead
 800ce64:	0800cead 	.word	0x0800cead
 800ce68:	0800cead 	.word	0x0800cead
 800ce6c:	0800cead 	.word	0x0800cead
 800ce70:	0800cead 	.word	0x0800cead
 800ce74:	0800cead 	.word	0x0800cead
 800ce78:	0800cea5 	.word	0x0800cea5
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce82:	e0bc      	b.n	800cffe <UART_SetConfig+0x5a2>
 800ce84:	2304      	movs	r3, #4
 800ce86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce8a:	e0b8      	b.n	800cffe <UART_SetConfig+0x5a2>
 800ce8c:	2308      	movs	r3, #8
 800ce8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce92:	e0b4      	b.n	800cffe <UART_SetConfig+0x5a2>
 800ce94:	2310      	movs	r3, #16
 800ce96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ce9a:	e0b0      	b.n	800cffe <UART_SetConfig+0x5a2>
 800ce9c:	2320      	movs	r3, #32
 800ce9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cea2:	e0ac      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cea4:	2340      	movs	r3, #64	; 0x40
 800cea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ceaa:	e0a8      	b.n	800cffe <UART_SetConfig+0x5a2>
 800ceac:	2380      	movs	r3, #128	; 0x80
 800ceae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ceb2:	e0a4      	b.n	800cffe <UART_SetConfig+0x5a2>
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	4a90      	ldr	r2, [pc, #576]	; (800d0fc <UART_SetConfig+0x6a0>)
 800ceba:	4293      	cmp	r3, r2
 800cebc:	d130      	bne.n	800cf20 <UART_SetConfig+0x4c4>
 800cebe:	4b8e      	ldr	r3, [pc, #568]	; (800d0f8 <UART_SetConfig+0x69c>)
 800cec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cec2:	f003 0307 	and.w	r3, r3, #7
 800cec6:	2b05      	cmp	r3, #5
 800cec8:	d826      	bhi.n	800cf18 <UART_SetConfig+0x4bc>
 800ceca:	a201      	add	r2, pc, #4	; (adr r2, 800ced0 <UART_SetConfig+0x474>)
 800cecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ced0:	0800cee9 	.word	0x0800cee9
 800ced4:	0800cef1 	.word	0x0800cef1
 800ced8:	0800cef9 	.word	0x0800cef9
 800cedc:	0800cf01 	.word	0x0800cf01
 800cee0:	0800cf09 	.word	0x0800cf09
 800cee4:	0800cf11 	.word	0x0800cf11
 800cee8:	2300      	movs	r3, #0
 800ceea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ceee:	e086      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cef0:	2304      	movs	r3, #4
 800cef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cef6:	e082      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cef8:	2308      	movs	r3, #8
 800cefa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cefe:	e07e      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cf00:	2310      	movs	r3, #16
 800cf02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf06:	e07a      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cf08:	2320      	movs	r3, #32
 800cf0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf0e:	e076      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cf10:	2340      	movs	r3, #64	; 0x40
 800cf12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf16:	e072      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cf18:	2380      	movs	r3, #128	; 0x80
 800cf1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf1e:	e06e      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	4a76      	ldr	r2, [pc, #472]	; (800d100 <UART_SetConfig+0x6a4>)
 800cf26:	4293      	cmp	r3, r2
 800cf28:	d130      	bne.n	800cf8c <UART_SetConfig+0x530>
 800cf2a:	4b73      	ldr	r3, [pc, #460]	; (800d0f8 <UART_SetConfig+0x69c>)
 800cf2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf2e:	f003 0307 	and.w	r3, r3, #7
 800cf32:	2b05      	cmp	r3, #5
 800cf34:	d826      	bhi.n	800cf84 <UART_SetConfig+0x528>
 800cf36:	a201      	add	r2, pc, #4	; (adr r2, 800cf3c <UART_SetConfig+0x4e0>)
 800cf38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf3c:	0800cf55 	.word	0x0800cf55
 800cf40:	0800cf5d 	.word	0x0800cf5d
 800cf44:	0800cf65 	.word	0x0800cf65
 800cf48:	0800cf6d 	.word	0x0800cf6d
 800cf4c:	0800cf75 	.word	0x0800cf75
 800cf50:	0800cf7d 	.word	0x0800cf7d
 800cf54:	2300      	movs	r3, #0
 800cf56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf5a:	e050      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cf5c:	2304      	movs	r3, #4
 800cf5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf62:	e04c      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cf64:	2308      	movs	r3, #8
 800cf66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf6a:	e048      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cf6c:	2310      	movs	r3, #16
 800cf6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf72:	e044      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cf74:	2320      	movs	r3, #32
 800cf76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf7a:	e040      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cf7c:	2340      	movs	r3, #64	; 0x40
 800cf7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf82:	e03c      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cf84:	2380      	movs	r3, #128	; 0x80
 800cf86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cf8a:	e038      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	4a5c      	ldr	r2, [pc, #368]	; (800d104 <UART_SetConfig+0x6a8>)
 800cf92:	4293      	cmp	r3, r2
 800cf94:	d130      	bne.n	800cff8 <UART_SetConfig+0x59c>
 800cf96:	4b58      	ldr	r3, [pc, #352]	; (800d0f8 <UART_SetConfig+0x69c>)
 800cf98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf9a:	f003 0307 	and.w	r3, r3, #7
 800cf9e:	2b05      	cmp	r3, #5
 800cfa0:	d826      	bhi.n	800cff0 <UART_SetConfig+0x594>
 800cfa2:	a201      	add	r2, pc, #4	; (adr r2, 800cfa8 <UART_SetConfig+0x54c>)
 800cfa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfa8:	0800cfc1 	.word	0x0800cfc1
 800cfac:	0800cfc9 	.word	0x0800cfc9
 800cfb0:	0800cfd1 	.word	0x0800cfd1
 800cfb4:	0800cfd9 	.word	0x0800cfd9
 800cfb8:	0800cfe1 	.word	0x0800cfe1
 800cfbc:	0800cfe9 	.word	0x0800cfe9
 800cfc0:	2302      	movs	r3, #2
 800cfc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfc6:	e01a      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cfc8:	2304      	movs	r3, #4
 800cfca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfce:	e016      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cfd0:	2308      	movs	r3, #8
 800cfd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfd6:	e012      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cfd8:	2310      	movs	r3, #16
 800cfda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfde:	e00e      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cfe0:	2320      	movs	r3, #32
 800cfe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfe6:	e00a      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cfe8:	2340      	movs	r3, #64	; 0x40
 800cfea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cfee:	e006      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cff0:	2380      	movs	r3, #128	; 0x80
 800cff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cff6:	e002      	b.n	800cffe <UART_SetConfig+0x5a2>
 800cff8:	2380      	movs	r3, #128	; 0x80
 800cffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	4a40      	ldr	r2, [pc, #256]	; (800d104 <UART_SetConfig+0x6a8>)
 800d004:	4293      	cmp	r3, r2
 800d006:	f040 80ef 	bne.w	800d1e8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d00a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d00e:	2b20      	cmp	r3, #32
 800d010:	dc46      	bgt.n	800d0a0 <UART_SetConfig+0x644>
 800d012:	2b02      	cmp	r3, #2
 800d014:	f2c0 8081 	blt.w	800d11a <UART_SetConfig+0x6be>
 800d018:	3b02      	subs	r3, #2
 800d01a:	2b1e      	cmp	r3, #30
 800d01c:	d87d      	bhi.n	800d11a <UART_SetConfig+0x6be>
 800d01e:	a201      	add	r2, pc, #4	; (adr r2, 800d024 <UART_SetConfig+0x5c8>)
 800d020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d024:	0800d0a7 	.word	0x0800d0a7
 800d028:	0800d11b 	.word	0x0800d11b
 800d02c:	0800d0af 	.word	0x0800d0af
 800d030:	0800d11b 	.word	0x0800d11b
 800d034:	0800d11b 	.word	0x0800d11b
 800d038:	0800d11b 	.word	0x0800d11b
 800d03c:	0800d0bf 	.word	0x0800d0bf
 800d040:	0800d11b 	.word	0x0800d11b
 800d044:	0800d11b 	.word	0x0800d11b
 800d048:	0800d11b 	.word	0x0800d11b
 800d04c:	0800d11b 	.word	0x0800d11b
 800d050:	0800d11b 	.word	0x0800d11b
 800d054:	0800d11b 	.word	0x0800d11b
 800d058:	0800d11b 	.word	0x0800d11b
 800d05c:	0800d0cf 	.word	0x0800d0cf
 800d060:	0800d11b 	.word	0x0800d11b
 800d064:	0800d11b 	.word	0x0800d11b
 800d068:	0800d11b 	.word	0x0800d11b
 800d06c:	0800d11b 	.word	0x0800d11b
 800d070:	0800d11b 	.word	0x0800d11b
 800d074:	0800d11b 	.word	0x0800d11b
 800d078:	0800d11b 	.word	0x0800d11b
 800d07c:	0800d11b 	.word	0x0800d11b
 800d080:	0800d11b 	.word	0x0800d11b
 800d084:	0800d11b 	.word	0x0800d11b
 800d088:	0800d11b 	.word	0x0800d11b
 800d08c:	0800d11b 	.word	0x0800d11b
 800d090:	0800d11b 	.word	0x0800d11b
 800d094:	0800d11b 	.word	0x0800d11b
 800d098:	0800d11b 	.word	0x0800d11b
 800d09c:	0800d10d 	.word	0x0800d10d
 800d0a0:	2b40      	cmp	r3, #64	; 0x40
 800d0a2:	d036      	beq.n	800d112 <UART_SetConfig+0x6b6>
 800d0a4:	e039      	b.n	800d11a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d0a6:	f7fc fed1 	bl	8009e4c <HAL_RCCEx_GetD3PCLK1Freq>
 800d0aa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d0ac:	e03b      	b.n	800d126 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0ae:	f107 0314 	add.w	r3, r7, #20
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f7fc fee0 	bl	8009e78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d0b8:	69bb      	ldr	r3, [r7, #24]
 800d0ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d0bc:	e033      	b.n	800d126 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d0be:	f107 0308 	add.w	r3, r7, #8
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f7fd f82c 	bl	800a120 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d0cc:	e02b      	b.n	800d126 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d0ce:	4b0a      	ldr	r3, [pc, #40]	; (800d0f8 <UART_SetConfig+0x69c>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	f003 0320 	and.w	r3, r3, #32
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d009      	beq.n	800d0ee <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d0da:	4b07      	ldr	r3, [pc, #28]	; (800d0f8 <UART_SetConfig+0x69c>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	08db      	lsrs	r3, r3, #3
 800d0e0:	f003 0303 	and.w	r3, r3, #3
 800d0e4:	4a08      	ldr	r2, [pc, #32]	; (800d108 <UART_SetConfig+0x6ac>)
 800d0e6:	fa22 f303 	lsr.w	r3, r2, r3
 800d0ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d0ec:	e01b      	b.n	800d126 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800d0ee:	4b06      	ldr	r3, [pc, #24]	; (800d108 <UART_SetConfig+0x6ac>)
 800d0f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d0f2:	e018      	b.n	800d126 <UART_SetConfig+0x6ca>
 800d0f4:	40011400 	.word	0x40011400
 800d0f8:	58024400 	.word	0x58024400
 800d0fc:	40007800 	.word	0x40007800
 800d100:	40007c00 	.word	0x40007c00
 800d104:	58000c00 	.word	0x58000c00
 800d108:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d10c:	4bc4      	ldr	r3, [pc, #784]	; (800d420 <UART_SetConfig+0x9c4>)
 800d10e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d110:	e009      	b.n	800d126 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d116:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d118:	e005      	b.n	800d126 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800d11a:	2300      	movs	r3, #0
 800d11c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d11e:	2301      	movs	r3, #1
 800d120:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d124:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d128:	2b00      	cmp	r3, #0
 800d12a:	f000 81da 	beq.w	800d4e2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d132:	4abc      	ldr	r2, [pc, #752]	; (800d424 <UART_SetConfig+0x9c8>)
 800d134:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d138:	461a      	mov	r2, r3
 800d13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d13c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d140:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	685a      	ldr	r2, [r3, #4]
 800d146:	4613      	mov	r3, r2
 800d148:	005b      	lsls	r3, r3, #1
 800d14a:	4413      	add	r3, r2
 800d14c:	6a3a      	ldr	r2, [r7, #32]
 800d14e:	429a      	cmp	r2, r3
 800d150:	d305      	bcc.n	800d15e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	685b      	ldr	r3, [r3, #4]
 800d156:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d158:	6a3a      	ldr	r2, [r7, #32]
 800d15a:	429a      	cmp	r2, r3
 800d15c:	d903      	bls.n	800d166 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800d15e:	2301      	movs	r3, #1
 800d160:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d164:	e1bd      	b.n	800d4e2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d168:	4618      	mov	r0, r3
 800d16a:	f04f 0100 	mov.w	r1, #0
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d172:	4aac      	ldr	r2, [pc, #688]	; (800d424 <UART_SetConfig+0x9c8>)
 800d174:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d178:	b29a      	uxth	r2, r3
 800d17a:	f04f 0300 	mov.w	r3, #0
 800d17e:	f7f3 fad3 	bl	8000728 <__aeabi_uldivmod>
 800d182:	4602      	mov	r2, r0
 800d184:	460b      	mov	r3, r1
 800d186:	4610      	mov	r0, r2
 800d188:	4619      	mov	r1, r3
 800d18a:	f04f 0200 	mov.w	r2, #0
 800d18e:	f04f 0300 	mov.w	r3, #0
 800d192:	020b      	lsls	r3, r1, #8
 800d194:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d198:	0202      	lsls	r2, r0, #8
 800d19a:	6879      	ldr	r1, [r7, #4]
 800d19c:	6849      	ldr	r1, [r1, #4]
 800d19e:	0849      	lsrs	r1, r1, #1
 800d1a0:	4608      	mov	r0, r1
 800d1a2:	f04f 0100 	mov.w	r1, #0
 800d1a6:	1814      	adds	r4, r2, r0
 800d1a8:	eb43 0501 	adc.w	r5, r3, r1
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	685b      	ldr	r3, [r3, #4]
 800d1b0:	461a      	mov	r2, r3
 800d1b2:	f04f 0300 	mov.w	r3, #0
 800d1b6:	4620      	mov	r0, r4
 800d1b8:	4629      	mov	r1, r5
 800d1ba:	f7f3 fab5 	bl	8000728 <__aeabi_uldivmod>
 800d1be:	4602      	mov	r2, r0
 800d1c0:	460b      	mov	r3, r1
 800d1c2:	4613      	mov	r3, r2
 800d1c4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d1c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d1cc:	d308      	bcc.n	800d1e0 <UART_SetConfig+0x784>
 800d1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d1d4:	d204      	bcs.n	800d1e0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1dc:	60da      	str	r2, [r3, #12]
 800d1de:	e180      	b.n	800d4e2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d1e6:	e17c      	b.n	800d4e2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	69db      	ldr	r3, [r3, #28]
 800d1ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d1f0:	f040 80bf 	bne.w	800d372 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800d1f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d1f8:	2b20      	cmp	r3, #32
 800d1fa:	dc49      	bgt.n	800d290 <UART_SetConfig+0x834>
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	db7c      	blt.n	800d2fa <UART_SetConfig+0x89e>
 800d200:	2b20      	cmp	r3, #32
 800d202:	d87a      	bhi.n	800d2fa <UART_SetConfig+0x89e>
 800d204:	a201      	add	r2, pc, #4	; (adr r2, 800d20c <UART_SetConfig+0x7b0>)
 800d206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d20a:	bf00      	nop
 800d20c:	0800d297 	.word	0x0800d297
 800d210:	0800d29f 	.word	0x0800d29f
 800d214:	0800d2fb 	.word	0x0800d2fb
 800d218:	0800d2fb 	.word	0x0800d2fb
 800d21c:	0800d2a7 	.word	0x0800d2a7
 800d220:	0800d2fb 	.word	0x0800d2fb
 800d224:	0800d2fb 	.word	0x0800d2fb
 800d228:	0800d2fb 	.word	0x0800d2fb
 800d22c:	0800d2b7 	.word	0x0800d2b7
 800d230:	0800d2fb 	.word	0x0800d2fb
 800d234:	0800d2fb 	.word	0x0800d2fb
 800d238:	0800d2fb 	.word	0x0800d2fb
 800d23c:	0800d2fb 	.word	0x0800d2fb
 800d240:	0800d2fb 	.word	0x0800d2fb
 800d244:	0800d2fb 	.word	0x0800d2fb
 800d248:	0800d2fb 	.word	0x0800d2fb
 800d24c:	0800d2c7 	.word	0x0800d2c7
 800d250:	0800d2fb 	.word	0x0800d2fb
 800d254:	0800d2fb 	.word	0x0800d2fb
 800d258:	0800d2fb 	.word	0x0800d2fb
 800d25c:	0800d2fb 	.word	0x0800d2fb
 800d260:	0800d2fb 	.word	0x0800d2fb
 800d264:	0800d2fb 	.word	0x0800d2fb
 800d268:	0800d2fb 	.word	0x0800d2fb
 800d26c:	0800d2fb 	.word	0x0800d2fb
 800d270:	0800d2fb 	.word	0x0800d2fb
 800d274:	0800d2fb 	.word	0x0800d2fb
 800d278:	0800d2fb 	.word	0x0800d2fb
 800d27c:	0800d2fb 	.word	0x0800d2fb
 800d280:	0800d2fb 	.word	0x0800d2fb
 800d284:	0800d2fb 	.word	0x0800d2fb
 800d288:	0800d2fb 	.word	0x0800d2fb
 800d28c:	0800d2ed 	.word	0x0800d2ed
 800d290:	2b40      	cmp	r3, #64	; 0x40
 800d292:	d02e      	beq.n	800d2f2 <UART_SetConfig+0x896>
 800d294:	e031      	b.n	800d2fa <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d296:	f7fb fe6d 	bl	8008f74 <HAL_RCC_GetPCLK1Freq>
 800d29a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d29c:	e033      	b.n	800d306 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d29e:	f7fb fe7f 	bl	8008fa0 <HAL_RCC_GetPCLK2Freq>
 800d2a2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d2a4:	e02f      	b.n	800d306 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d2a6:	f107 0314 	add.w	r3, r7, #20
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f7fc fde4 	bl	8009e78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d2b0:	69bb      	ldr	r3, [r7, #24]
 800d2b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d2b4:	e027      	b.n	800d306 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d2b6:	f107 0308 	add.w	r3, r7, #8
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f7fc ff30 	bl	800a120 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d2c4:	e01f      	b.n	800d306 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d2c6:	4b58      	ldr	r3, [pc, #352]	; (800d428 <UART_SetConfig+0x9cc>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	f003 0320 	and.w	r3, r3, #32
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d009      	beq.n	800d2e6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d2d2:	4b55      	ldr	r3, [pc, #340]	; (800d428 <UART_SetConfig+0x9cc>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	08db      	lsrs	r3, r3, #3
 800d2d8:	f003 0303 	and.w	r3, r3, #3
 800d2dc:	4a53      	ldr	r2, [pc, #332]	; (800d42c <UART_SetConfig+0x9d0>)
 800d2de:	fa22 f303 	lsr.w	r3, r2, r3
 800d2e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d2e4:	e00f      	b.n	800d306 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800d2e6:	4b51      	ldr	r3, [pc, #324]	; (800d42c <UART_SetConfig+0x9d0>)
 800d2e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d2ea:	e00c      	b.n	800d306 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d2ec:	4b4c      	ldr	r3, [pc, #304]	; (800d420 <UART_SetConfig+0x9c4>)
 800d2ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d2f0:	e009      	b.n	800d306 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d2f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d2f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d2f8:	e005      	b.n	800d306 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d2fe:	2301      	movs	r3, #1
 800d300:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d304:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d308:	2b00      	cmp	r3, #0
 800d30a:	f000 80ea 	beq.w	800d4e2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d312:	4a44      	ldr	r2, [pc, #272]	; (800d424 <UART_SetConfig+0x9c8>)
 800d314:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d318:	461a      	mov	r2, r3
 800d31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d31c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d320:	005a      	lsls	r2, r3, #1
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	685b      	ldr	r3, [r3, #4]
 800d326:	085b      	lsrs	r3, r3, #1
 800d328:	441a      	add	r2, r3
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	685b      	ldr	r3, [r3, #4]
 800d32e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d332:	b29b      	uxth	r3, r3
 800d334:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d338:	2b0f      	cmp	r3, #15
 800d33a:	d916      	bls.n	800d36a <UART_SetConfig+0x90e>
 800d33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d33e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d342:	d212      	bcs.n	800d36a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d346:	b29b      	uxth	r3, r3
 800d348:	f023 030f 	bic.w	r3, r3, #15
 800d34c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d350:	085b      	lsrs	r3, r3, #1
 800d352:	b29b      	uxth	r3, r3
 800d354:	f003 0307 	and.w	r3, r3, #7
 800d358:	b29a      	uxth	r2, r3
 800d35a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d35c:	4313      	orrs	r3, r2
 800d35e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d366:	60da      	str	r2, [r3, #12]
 800d368:	e0bb      	b.n	800d4e2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d36a:	2301      	movs	r3, #1
 800d36c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d370:	e0b7      	b.n	800d4e2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d372:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d376:	2b20      	cmp	r3, #32
 800d378:	dc4a      	bgt.n	800d410 <UART_SetConfig+0x9b4>
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	f2c0 8086 	blt.w	800d48c <UART_SetConfig+0xa30>
 800d380:	2b20      	cmp	r3, #32
 800d382:	f200 8083 	bhi.w	800d48c <UART_SetConfig+0xa30>
 800d386:	a201      	add	r2, pc, #4	; (adr r2, 800d38c <UART_SetConfig+0x930>)
 800d388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d38c:	0800d417 	.word	0x0800d417
 800d390:	0800d431 	.word	0x0800d431
 800d394:	0800d48d 	.word	0x0800d48d
 800d398:	0800d48d 	.word	0x0800d48d
 800d39c:	0800d439 	.word	0x0800d439
 800d3a0:	0800d48d 	.word	0x0800d48d
 800d3a4:	0800d48d 	.word	0x0800d48d
 800d3a8:	0800d48d 	.word	0x0800d48d
 800d3ac:	0800d449 	.word	0x0800d449
 800d3b0:	0800d48d 	.word	0x0800d48d
 800d3b4:	0800d48d 	.word	0x0800d48d
 800d3b8:	0800d48d 	.word	0x0800d48d
 800d3bc:	0800d48d 	.word	0x0800d48d
 800d3c0:	0800d48d 	.word	0x0800d48d
 800d3c4:	0800d48d 	.word	0x0800d48d
 800d3c8:	0800d48d 	.word	0x0800d48d
 800d3cc:	0800d459 	.word	0x0800d459
 800d3d0:	0800d48d 	.word	0x0800d48d
 800d3d4:	0800d48d 	.word	0x0800d48d
 800d3d8:	0800d48d 	.word	0x0800d48d
 800d3dc:	0800d48d 	.word	0x0800d48d
 800d3e0:	0800d48d 	.word	0x0800d48d
 800d3e4:	0800d48d 	.word	0x0800d48d
 800d3e8:	0800d48d 	.word	0x0800d48d
 800d3ec:	0800d48d 	.word	0x0800d48d
 800d3f0:	0800d48d 	.word	0x0800d48d
 800d3f4:	0800d48d 	.word	0x0800d48d
 800d3f8:	0800d48d 	.word	0x0800d48d
 800d3fc:	0800d48d 	.word	0x0800d48d
 800d400:	0800d48d 	.word	0x0800d48d
 800d404:	0800d48d 	.word	0x0800d48d
 800d408:	0800d48d 	.word	0x0800d48d
 800d40c:	0800d47f 	.word	0x0800d47f
 800d410:	2b40      	cmp	r3, #64	; 0x40
 800d412:	d037      	beq.n	800d484 <UART_SetConfig+0xa28>
 800d414:	e03a      	b.n	800d48c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d416:	f7fb fdad 	bl	8008f74 <HAL_RCC_GetPCLK1Freq>
 800d41a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d41c:	e03c      	b.n	800d498 <UART_SetConfig+0xa3c>
 800d41e:	bf00      	nop
 800d420:	003d0900 	.word	0x003d0900
 800d424:	080218d0 	.word	0x080218d0
 800d428:	58024400 	.word	0x58024400
 800d42c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d430:	f7fb fdb6 	bl	8008fa0 <HAL_RCC_GetPCLK2Freq>
 800d434:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d436:	e02f      	b.n	800d498 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d438:	f107 0314 	add.w	r3, r7, #20
 800d43c:	4618      	mov	r0, r3
 800d43e:	f7fc fd1b 	bl	8009e78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d442:	69bb      	ldr	r3, [r7, #24]
 800d444:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d446:	e027      	b.n	800d498 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d448:	f107 0308 	add.w	r3, r7, #8
 800d44c:	4618      	mov	r0, r3
 800d44e:	f7fc fe67 	bl	800a120 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d456:	e01f      	b.n	800d498 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d458:	4b2c      	ldr	r3, [pc, #176]	; (800d50c <UART_SetConfig+0xab0>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	f003 0320 	and.w	r3, r3, #32
 800d460:	2b00      	cmp	r3, #0
 800d462:	d009      	beq.n	800d478 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d464:	4b29      	ldr	r3, [pc, #164]	; (800d50c <UART_SetConfig+0xab0>)
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	08db      	lsrs	r3, r3, #3
 800d46a:	f003 0303 	and.w	r3, r3, #3
 800d46e:	4a28      	ldr	r2, [pc, #160]	; (800d510 <UART_SetConfig+0xab4>)
 800d470:	fa22 f303 	lsr.w	r3, r2, r3
 800d474:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d476:	e00f      	b.n	800d498 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800d478:	4b25      	ldr	r3, [pc, #148]	; (800d510 <UART_SetConfig+0xab4>)
 800d47a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d47c:	e00c      	b.n	800d498 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d47e:	4b25      	ldr	r3, [pc, #148]	; (800d514 <UART_SetConfig+0xab8>)
 800d480:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d482:	e009      	b.n	800d498 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d484:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d488:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d48a:	e005      	b.n	800d498 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800d48c:	2300      	movs	r3, #0
 800d48e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d490:	2301      	movs	r3, #1
 800d492:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d496:	bf00      	nop
    }

    if (pclk != 0U)
 800d498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d021      	beq.n	800d4e2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4a2:	4a1d      	ldr	r2, [pc, #116]	; (800d518 <UART_SetConfig+0xabc>)
 800d4a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d4a8:	461a      	mov	r2, r3
 800d4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ac:	fbb3 f2f2 	udiv	r2, r3, r2
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	685b      	ldr	r3, [r3, #4]
 800d4b4:	085b      	lsrs	r3, r3, #1
 800d4b6:	441a      	add	r2, r3
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	685b      	ldr	r3, [r3, #4]
 800d4bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4c0:	b29b      	uxth	r3, r3
 800d4c2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4c6:	2b0f      	cmp	r3, #15
 800d4c8:	d908      	bls.n	800d4dc <UART_SetConfig+0xa80>
 800d4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d4d0:	d204      	bcs.n	800d4dc <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4d8:	60da      	str	r2, [r3, #12]
 800d4da:	e002      	b.n	800d4e2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d4dc:	2301      	movs	r3, #1
 800d4de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2201      	movs	r2, #1
 800d4e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	2201      	movs	r2, #1
 800d4ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d4fe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800d502:	4618      	mov	r0, r3
 800d504:	3738      	adds	r7, #56	; 0x38
 800d506:	46bd      	mov	sp, r7
 800d508:	bdb0      	pop	{r4, r5, r7, pc}
 800d50a:	bf00      	nop
 800d50c:	58024400 	.word	0x58024400
 800d510:	03d09000 	.word	0x03d09000
 800d514:	003d0900 	.word	0x003d0900
 800d518:	080218d0 	.word	0x080218d0

0800d51c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d51c:	b480      	push	{r7}
 800d51e:	b083      	sub	sp, #12
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d528:	f003 0301 	and.w	r3, r3, #1
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d00a      	beq.n	800d546 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	685b      	ldr	r3, [r3, #4]
 800d536:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	430a      	orrs	r2, r1
 800d544:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d54a:	f003 0302 	and.w	r3, r3, #2
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d00a      	beq.n	800d568 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	685b      	ldr	r3, [r3, #4]
 800d558:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	430a      	orrs	r2, r1
 800d566:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d56c:	f003 0304 	and.w	r3, r3, #4
 800d570:	2b00      	cmp	r3, #0
 800d572:	d00a      	beq.n	800d58a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	685b      	ldr	r3, [r3, #4]
 800d57a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	430a      	orrs	r2, r1
 800d588:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d58e:	f003 0308 	and.w	r3, r3, #8
 800d592:	2b00      	cmp	r3, #0
 800d594:	d00a      	beq.n	800d5ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	685b      	ldr	r3, [r3, #4]
 800d59c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	430a      	orrs	r2, r1
 800d5aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5b0:	f003 0310 	and.w	r3, r3, #16
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d00a      	beq.n	800d5ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	689b      	ldr	r3, [r3, #8]
 800d5be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	430a      	orrs	r2, r1
 800d5cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5d2:	f003 0320 	and.w	r3, r3, #32
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d00a      	beq.n	800d5f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	689b      	ldr	r3, [r3, #8]
 800d5e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	430a      	orrs	r2, r1
 800d5ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d01a      	beq.n	800d632 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	685b      	ldr	r3, [r3, #4]
 800d602:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	430a      	orrs	r2, r1
 800d610:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d616:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d61a:	d10a      	bne.n	800d632 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	685b      	ldr	r3, [r3, #4]
 800d622:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	430a      	orrs	r2, r1
 800d630:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d00a      	beq.n	800d654 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	685b      	ldr	r3, [r3, #4]
 800d644:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	430a      	orrs	r2, r1
 800d652:	605a      	str	r2, [r3, #4]
  }
}
 800d654:	bf00      	nop
 800d656:	370c      	adds	r7, #12
 800d658:	46bd      	mov	sp, r7
 800d65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65e:	4770      	bx	lr

0800d660 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b086      	sub	sp, #24
 800d664:	af02      	add	r7, sp, #8
 800d666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2200      	movs	r2, #0
 800d66c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d670:	f7f4 ff9a 	bl	80025a8 <HAL_GetTick>
 800d674:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	f003 0308 	and.w	r3, r3, #8
 800d680:	2b08      	cmp	r3, #8
 800d682:	d10e      	bne.n	800d6a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d684:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d688:	9300      	str	r3, [sp, #0]
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	2200      	movs	r2, #0
 800d68e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f000 f82f 	bl	800d6f6 <UART_WaitOnFlagUntilTimeout>
 800d698:	4603      	mov	r3, r0
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d001      	beq.n	800d6a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d69e:	2303      	movs	r3, #3
 800d6a0:	e025      	b.n	800d6ee <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	f003 0304 	and.w	r3, r3, #4
 800d6ac:	2b04      	cmp	r3, #4
 800d6ae:	d10e      	bne.n	800d6ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d6b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d6b4:	9300      	str	r3, [sp, #0]
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f000 f819 	bl	800d6f6 <UART_WaitOnFlagUntilTimeout>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d001      	beq.n	800d6ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d6ca:	2303      	movs	r3, #3
 800d6cc:	e00f      	b.n	800d6ee <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2220      	movs	r2, #32
 800d6d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2220      	movs	r2, #32
 800d6da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d6ec:	2300      	movs	r3, #0
}
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	3710      	adds	r7, #16
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	bd80      	pop	{r7, pc}

0800d6f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d6f6:	b580      	push	{r7, lr}
 800d6f8:	b084      	sub	sp, #16
 800d6fa:	af00      	add	r7, sp, #0
 800d6fc:	60f8      	str	r0, [r7, #12]
 800d6fe:	60b9      	str	r1, [r7, #8]
 800d700:	603b      	str	r3, [r7, #0]
 800d702:	4613      	mov	r3, r2
 800d704:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d706:	e062      	b.n	800d7ce <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d708:	69bb      	ldr	r3, [r7, #24]
 800d70a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d70e:	d05e      	beq.n	800d7ce <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d710:	f7f4 ff4a 	bl	80025a8 <HAL_GetTick>
 800d714:	4602      	mov	r2, r0
 800d716:	683b      	ldr	r3, [r7, #0]
 800d718:	1ad3      	subs	r3, r2, r3
 800d71a:	69ba      	ldr	r2, [r7, #24]
 800d71c:	429a      	cmp	r2, r3
 800d71e:	d302      	bcc.n	800d726 <UART_WaitOnFlagUntilTimeout+0x30>
 800d720:	69bb      	ldr	r3, [r7, #24]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d11d      	bne.n	800d762 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	681a      	ldr	r2, [r3, #0]
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d734:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	689a      	ldr	r2, [r3, #8]
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	f022 0201 	bic.w	r2, r2, #1
 800d744:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	2220      	movs	r2, #32
 800d74a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	2220      	movs	r2, #32
 800d752:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	2200      	movs	r2, #0
 800d75a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d75e:	2303      	movs	r3, #3
 800d760:	e045      	b.n	800d7ee <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	f003 0304 	and.w	r3, r3, #4
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d02e      	beq.n	800d7ce <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	69db      	ldr	r3, [r3, #28]
 800d776:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d77a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d77e:	d126      	bne.n	800d7ce <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d788:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	681a      	ldr	r2, [r3, #0]
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d798:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	689a      	ldr	r2, [r3, #8]
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	f022 0201 	bic.w	r2, r2, #1
 800d7a8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	2220      	movs	r2, #32
 800d7ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	2220      	movs	r2, #32
 800d7b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	2220      	movs	r2, #32
 800d7be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d7ca:	2303      	movs	r3, #3
 800d7cc:	e00f      	b.n	800d7ee <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	69da      	ldr	r2, [r3, #28]
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	4013      	ands	r3, r2
 800d7d8:	68ba      	ldr	r2, [r7, #8]
 800d7da:	429a      	cmp	r2, r3
 800d7dc:	bf0c      	ite	eq
 800d7de:	2301      	moveq	r3, #1
 800d7e0:	2300      	movne	r3, #0
 800d7e2:	b2db      	uxtb	r3, r3
 800d7e4:	461a      	mov	r2, r3
 800d7e6:	79fb      	ldrb	r3, [r7, #7]
 800d7e8:	429a      	cmp	r2, r3
 800d7ea:	d08d      	beq.n	800d708 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d7ec:	2300      	movs	r3, #0
}
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	3710      	adds	r7, #16
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	bd80      	pop	{r7, pc}
	...

0800d7f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b084      	sub	sp, #16
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	60f8      	str	r0, [r7, #12]
 800d800:	60b9      	str	r1, [r7, #8]
 800d802:	4613      	mov	r3, r2
 800d804:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	68ba      	ldr	r2, [r7, #8]
 800d80a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	88fa      	ldrh	r2, [r7, #6]
 800d810:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	2200      	movs	r2, #0
 800d818:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	2222      	movs	r2, #34	; 0x22
 800d820:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d02c      	beq.n	800d886 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d830:	4a25      	ldr	r2, [pc, #148]	; (800d8c8 <UART_Start_Receive_DMA+0xd0>)
 800d832:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d838:	4a24      	ldr	r2, [pc, #144]	; (800d8cc <UART_Start_Receive_DMA+0xd4>)
 800d83a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d840:	4a23      	ldr	r2, [pc, #140]	; (800d8d0 <UART_Start_Receive_DMA+0xd8>)
 800d842:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d848:	2200      	movs	r2, #0
 800d84a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	3324      	adds	r3, #36	; 0x24
 800d856:	4619      	mov	r1, r3
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d85c:	461a      	mov	r2, r3
 800d85e:	88fb      	ldrh	r3, [r7, #6]
 800d860:	f7f5 fbda 	bl	8003018 <HAL_DMA_Start_IT>
 800d864:	4603      	mov	r3, r0
 800d866:	2b00      	cmp	r3, #0
 800d868:	d00d      	beq.n	800d886 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	2210      	movs	r2, #16
 800d86e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	2200      	movs	r2, #0
 800d876:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	2220      	movs	r2, #32
 800d87e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      return HAL_ERROR;
 800d882:	2301      	movs	r3, #1
 800d884:	e01c      	b.n	800d8c0 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	2200      	movs	r2, #0
 800d88a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	681a      	ldr	r2, [r3, #0]
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d89c:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	689a      	ldr	r2, [r3, #8]
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	f042 0201 	orr.w	r2, r2, #1
 800d8ac:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	689a      	ldr	r2, [r3, #8]
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d8bc:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800d8be:	2300      	movs	r3, #0
}
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	3710      	adds	r7, #16
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}
 800d8c8:	0800d975 	.word	0x0800d975
 800d8cc:	0800da0b 	.word	0x0800da0b
 800d8d0:	0800da43 	.word	0x0800da43

0800d8d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d8d4:	b480      	push	{r7}
 800d8d6:	b083      	sub	sp, #12
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	681a      	ldr	r2, [r3, #0]
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800d8ea:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	689a      	ldr	r2, [r3, #8]
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800d8fa:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2220      	movs	r2, #32
 800d900:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800d904:	bf00      	nop
 800d906:	370c      	adds	r7, #12
 800d908:	46bd      	mov	sp, r7
 800d90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90e:	4770      	bx	lr

0800d910 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d910:	b480      	push	{r7}
 800d912:	b083      	sub	sp, #12
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	681a      	ldr	r2, [r3, #0]
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d926:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	6899      	ldr	r1, [r3, #8]
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681a      	ldr	r2, [r3, #0]
 800d932:	4b0f      	ldr	r3, [pc, #60]	; (800d970 <UART_EndRxTransfer+0x60>)
 800d934:	400b      	ands	r3, r1
 800d936:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d93c:	2b01      	cmp	r3, #1
 800d93e:	d107      	bne.n	800d950 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	681a      	ldr	r2, [r3, #0]
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	f022 0210 	bic.w	r2, r2, #16
 800d94e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2220      	movs	r2, #32
 800d954:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2200      	movs	r2, #0
 800d95c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2200      	movs	r2, #0
 800d962:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d964:	bf00      	nop
 800d966:	370c      	adds	r7, #12
 800d968:	46bd      	mov	sp, r7
 800d96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96e:	4770      	bx	lr
 800d970:	effffffe 	.word	0xeffffffe

0800d974 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b084      	sub	sp, #16
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d980:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	69db      	ldr	r3, [r3, #28]
 800d986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d98a:	d02b      	beq.n	800d9e4 <UART_DMAReceiveCplt+0x70>
  {
    huart->RxXferCount = 0U;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	2200      	movs	r2, #0
 800d990:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	681a      	ldr	r2, [r3, #0]
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d9a2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	689a      	ldr	r2, [r3, #8]
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	f022 0201 	bic.w	r2, r2, #1
 800d9b2:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	689a      	ldr	r2, [r3, #8]
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d9c2:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	2220      	movs	r2, #32
 800d9c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9d0:	2b01      	cmp	r3, #1
 800d9d2:	d107      	bne.n	800d9e4 <UART_DMAReceiveCplt+0x70>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	681a      	ldr	r2, [r3, #0]
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	f022 0210 	bic.w	r2, r2, #16
 800d9e2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9e8:	2b01      	cmp	r3, #1
 800d9ea:	d107      	bne.n	800d9fc <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d9f2:	4619      	mov	r1, r3
 800d9f4:	68f8      	ldr	r0, [r7, #12]
 800d9f6:	f7ff f825 	bl	800ca44 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d9fa:	e002      	b.n	800da02 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800d9fc:	68f8      	ldr	r0, [r7, #12]
 800d9fe:	f7ff f803 	bl	800ca08 <HAL_UART_RxCpltCallback>
}
 800da02:	bf00      	nop
 800da04:	3710      	adds	r7, #16
 800da06:	46bd      	mov	sp, r7
 800da08:	bd80      	pop	{r7, pc}

0800da0a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800da0a:	b580      	push	{r7, lr}
 800da0c:	b084      	sub	sp, #16
 800da0e:	af00      	add	r7, sp, #0
 800da10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da16:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da1c:	2b01      	cmp	r3, #1
 800da1e:	d109      	bne.n	800da34 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800da26:	085b      	lsrs	r3, r3, #1
 800da28:	b29b      	uxth	r3, r3
 800da2a:	4619      	mov	r1, r3
 800da2c:	68f8      	ldr	r0, [r7, #12]
 800da2e:	f7ff f809 	bl	800ca44 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800da32:	e002      	b.n	800da3a <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800da34:	68f8      	ldr	r0, [r7, #12]
 800da36:	f7fe fff1 	bl	800ca1c <HAL_UART_RxHalfCpltCallback>
}
 800da3a:	bf00      	nop
 800da3c:	3710      	adds	r7, #16
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}

0800da42 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800da42:	b580      	push	{r7, lr}
 800da44:	b086      	sub	sp, #24
 800da46:	af00      	add	r7, sp, #0
 800da48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da4e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da56:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800da58:	697b      	ldr	r3, [r7, #20]
 800da5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800da5e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800da60:	697b      	ldr	r3, [r7, #20]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	689b      	ldr	r3, [r3, #8]
 800da66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da6a:	2b80      	cmp	r3, #128	; 0x80
 800da6c:	d109      	bne.n	800da82 <UART_DMAError+0x40>
 800da6e:	693b      	ldr	r3, [r7, #16]
 800da70:	2b21      	cmp	r3, #33	; 0x21
 800da72:	d106      	bne.n	800da82 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800da74:	697b      	ldr	r3, [r7, #20]
 800da76:	2200      	movs	r2, #0
 800da78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800da7c:	6978      	ldr	r0, [r7, #20]
 800da7e:	f7ff ff29 	bl	800d8d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800da82:	697b      	ldr	r3, [r7, #20]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	689b      	ldr	r3, [r3, #8]
 800da88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da8c:	2b40      	cmp	r3, #64	; 0x40
 800da8e:	d109      	bne.n	800daa4 <UART_DMAError+0x62>
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	2b22      	cmp	r3, #34	; 0x22
 800da94:	d106      	bne.n	800daa4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800da96:	697b      	ldr	r3, [r7, #20]
 800da98:	2200      	movs	r2, #0
 800da9a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800da9e:	6978      	ldr	r0, [r7, #20]
 800daa0:	f7ff ff36 	bl	800d910 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800daa4:	697b      	ldr	r3, [r7, #20]
 800daa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800daaa:	f043 0210 	orr.w	r2, r3, #16
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dab4:	6978      	ldr	r0, [r7, #20]
 800dab6:	f7fe ffbb 	bl	800ca30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800daba:	bf00      	nop
 800dabc:	3718      	adds	r7, #24
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}

0800dac2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dac2:	b580      	push	{r7, lr}
 800dac4:	b084      	sub	sp, #16
 800dac6:	af00      	add	r7, sp, #0
 800dac8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dace:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	2200      	movs	r2, #0
 800dad4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	2200      	movs	r2, #0
 800dadc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dae0:	68f8      	ldr	r0, [r7, #12]
 800dae2:	f7fe ffa5 	bl	800ca30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dae6:	bf00      	nop
 800dae8:	3710      	adds	r7, #16
 800daea:	46bd      	mov	sp, r7
 800daec:	bd80      	pop	{r7, pc}

0800daee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800daee:	b580      	push	{r7, lr}
 800daf0:	b082      	sub	sp, #8
 800daf2:	af00      	add	r7, sp, #0
 800daf4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	681a      	ldr	r2, [r3, #0]
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800db04:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2220      	movs	r2, #32
 800db0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	2200      	movs	r2, #0
 800db12:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800db14:	6878      	ldr	r0, [r7, #4]
 800db16:	f7fe ff6d 	bl	800c9f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db1a:	bf00      	nop
 800db1c:	3708      	adds	r7, #8
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}

0800db22 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800db22:	b480      	push	{r7}
 800db24:	b083      	sub	sp, #12
 800db26:	af00      	add	r7, sp, #0
 800db28:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800db2a:	bf00      	nop
 800db2c:	370c      	adds	r7, #12
 800db2e:	46bd      	mov	sp, r7
 800db30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db34:	4770      	bx	lr

0800db36 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800db36:	b480      	push	{r7}
 800db38:	b083      	sub	sp, #12
 800db3a:	af00      	add	r7, sp, #0
 800db3c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800db3e:	bf00      	nop
 800db40:	370c      	adds	r7, #12
 800db42:	46bd      	mov	sp, r7
 800db44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db48:	4770      	bx	lr

0800db4a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800db4a:	b480      	push	{r7}
 800db4c:	b083      	sub	sp, #12
 800db4e:	af00      	add	r7, sp, #0
 800db50:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800db52:	bf00      	nop
 800db54:	370c      	adds	r7, #12
 800db56:	46bd      	mov	sp, r7
 800db58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5c:	4770      	bx	lr

0800db5e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800db5e:	b480      	push	{r7}
 800db60:	b085      	sub	sp, #20
 800db62:	af00      	add	r7, sp, #0
 800db64:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800db6c:	2b01      	cmp	r3, #1
 800db6e:	d101      	bne.n	800db74 <HAL_UARTEx_DisableFifoMode+0x16>
 800db70:	2302      	movs	r3, #2
 800db72:	e027      	b.n	800dbc4 <HAL_UARTEx_DisableFifoMode+0x66>
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2201      	movs	r2, #1
 800db78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2224      	movs	r2, #36	; 0x24
 800db80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	681a      	ldr	r2, [r3, #0]
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	f022 0201 	bic.w	r2, r2, #1
 800db9a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800dba2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2200      	movs	r2, #0
 800dba8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	68fa      	ldr	r2, [r7, #12]
 800dbb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2220      	movs	r2, #32
 800dbb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dbc2:	2300      	movs	r3, #0
}
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	3714      	adds	r7, #20
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbce:	4770      	bx	lr

0800dbd0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b084      	sub	sp, #16
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
 800dbd8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dbe0:	2b01      	cmp	r3, #1
 800dbe2:	d101      	bne.n	800dbe8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dbe4:	2302      	movs	r3, #2
 800dbe6:	e02d      	b.n	800dc44 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2201      	movs	r2, #1
 800dbec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2224      	movs	r2, #36	; 0x24
 800dbf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	681a      	ldr	r2, [r3, #0]
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	f022 0201 	bic.w	r2, r2, #1
 800dc0e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	689b      	ldr	r3, [r3, #8]
 800dc16:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	683a      	ldr	r2, [r7, #0]
 800dc20:	430a      	orrs	r2, r1
 800dc22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dc24:	6878      	ldr	r0, [r7, #4]
 800dc26:	f000 f84f 	bl	800dcc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	68fa      	ldr	r2, [r7, #12]
 800dc30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	2220      	movs	r2, #32
 800dc36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dc42:	2300      	movs	r3, #0
}
 800dc44:	4618      	mov	r0, r3
 800dc46:	3710      	adds	r7, #16
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd80      	pop	{r7, pc}

0800dc4c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b084      	sub	sp, #16
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
 800dc54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dc5c:	2b01      	cmp	r3, #1
 800dc5e:	d101      	bne.n	800dc64 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dc60:	2302      	movs	r3, #2
 800dc62:	e02d      	b.n	800dcc0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	2201      	movs	r2, #1
 800dc68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2224      	movs	r2, #36	; 0x24
 800dc70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	681a      	ldr	r2, [r3, #0]
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	f022 0201 	bic.w	r2, r2, #1
 800dc8a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	689b      	ldr	r3, [r3, #8]
 800dc92:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	683a      	ldr	r2, [r7, #0]
 800dc9c:	430a      	orrs	r2, r1
 800dc9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dca0:	6878      	ldr	r0, [r7, #4]
 800dca2:	f000 f811 	bl	800dcc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	68fa      	ldr	r2, [r7, #12]
 800dcac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	2220      	movs	r2, #32
 800dcb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2200      	movs	r2, #0
 800dcba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dcbe:	2300      	movs	r3, #0
}
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	3710      	adds	r7, #16
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}

0800dcc8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dcc8:	b480      	push	{r7}
 800dcca:	b085      	sub	sp, #20
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d108      	bne.n	800dcea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	2201      	movs	r2, #1
 800dcdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2201      	movs	r2, #1
 800dce4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dce8:	e031      	b.n	800dd4e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dcea:	2310      	movs	r3, #16
 800dcec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dcee:	2310      	movs	r3, #16
 800dcf0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	689b      	ldr	r3, [r3, #8]
 800dcf8:	0e5b      	lsrs	r3, r3, #25
 800dcfa:	b2db      	uxtb	r3, r3
 800dcfc:	f003 0307 	and.w	r3, r3, #7
 800dd00:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	689b      	ldr	r3, [r3, #8]
 800dd08:	0f5b      	lsrs	r3, r3, #29
 800dd0a:	b2db      	uxtb	r3, r3
 800dd0c:	f003 0307 	and.w	r3, r3, #7
 800dd10:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dd12:	7bbb      	ldrb	r3, [r7, #14]
 800dd14:	7b3a      	ldrb	r2, [r7, #12]
 800dd16:	4911      	ldr	r1, [pc, #68]	; (800dd5c <UARTEx_SetNbDataToProcess+0x94>)
 800dd18:	5c8a      	ldrb	r2, [r1, r2]
 800dd1a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dd1e:	7b3a      	ldrb	r2, [r7, #12]
 800dd20:	490f      	ldr	r1, [pc, #60]	; (800dd60 <UARTEx_SetNbDataToProcess+0x98>)
 800dd22:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dd24:	fb93 f3f2 	sdiv	r3, r3, r2
 800dd28:	b29a      	uxth	r2, r3
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dd30:	7bfb      	ldrb	r3, [r7, #15]
 800dd32:	7b7a      	ldrb	r2, [r7, #13]
 800dd34:	4909      	ldr	r1, [pc, #36]	; (800dd5c <UARTEx_SetNbDataToProcess+0x94>)
 800dd36:	5c8a      	ldrb	r2, [r1, r2]
 800dd38:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dd3c:	7b7a      	ldrb	r2, [r7, #13]
 800dd3e:	4908      	ldr	r1, [pc, #32]	; (800dd60 <UARTEx_SetNbDataToProcess+0x98>)
 800dd40:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dd42:	fb93 f3f2 	sdiv	r3, r3, r2
 800dd46:	b29a      	uxth	r2, r3
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800dd4e:	bf00      	nop
 800dd50:	3714      	adds	r7, #20
 800dd52:	46bd      	mov	sp, r7
 800dd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd58:	4770      	bx	lr
 800dd5a:	bf00      	nop
 800dd5c:	080218e8 	.word	0x080218e8
 800dd60:	080218f0 	.word	0x080218f0

0800dd64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dd64:	b084      	sub	sp, #16
 800dd66:	b580      	push	{r7, lr}
 800dd68:	b084      	sub	sp, #16
 800dd6a:	af00      	add	r7, sp, #0
 800dd6c:	6078      	str	r0, [r7, #4]
 800dd6e:	f107 001c 	add.w	r0, r7, #28
 800dd72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dd76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd78:	2b01      	cmp	r3, #1
 800dd7a:	d120      	bne.n	800ddbe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	68da      	ldr	r2, [r3, #12]
 800dd8c:	4b2a      	ldr	r3, [pc, #168]	; (800de38 <USB_CoreInit+0xd4>)
 800dd8e:	4013      	ands	r3, r2
 800dd90:	687a      	ldr	r2, [r7, #4]
 800dd92:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	68db      	ldr	r3, [r3, #12]
 800dd98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800dda0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dda2:	2b01      	cmp	r3, #1
 800dda4:	d105      	bne.n	800ddb2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	68db      	ldr	r3, [r3, #12]
 800ddaa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ddb2:	6878      	ldr	r0, [r7, #4]
 800ddb4:	f000 f990 	bl	800e0d8 <USB_CoreReset>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	73fb      	strb	r3, [r7, #15]
 800ddbc:	e01a      	b.n	800ddf4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	68db      	ldr	r3, [r3, #12]
 800ddc2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	f000 f984 	bl	800e0d8 <USB_CoreReset>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ddd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d106      	bne.n	800dde8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddde:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	639a      	str	r2, [r3, #56]	; 0x38
 800dde6:	e005      	b.n	800ddf4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ddf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddf6:	2b01      	cmp	r3, #1
 800ddf8:	d116      	bne.n	800de28 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ddfe:	b29a      	uxth	r2, r3
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800de08:	4b0c      	ldr	r3, [pc, #48]	; (800de3c <USB_CoreInit+0xd8>)
 800de0a:	4313      	orrs	r3, r2
 800de0c:	687a      	ldr	r2, [r7, #4]
 800de0e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	689b      	ldr	r3, [r3, #8]
 800de14:	f043 0206 	orr.w	r2, r3, #6
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	689b      	ldr	r3, [r3, #8]
 800de20:	f043 0220 	orr.w	r2, r3, #32
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800de28:	7bfb      	ldrb	r3, [r7, #15]
}
 800de2a:	4618      	mov	r0, r3
 800de2c:	3710      	adds	r7, #16
 800de2e:	46bd      	mov	sp, r7
 800de30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800de34:	b004      	add	sp, #16
 800de36:	4770      	bx	lr
 800de38:	ffbdffbf 	.word	0xffbdffbf
 800de3c:	03ee0000 	.word	0x03ee0000

0800de40 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800de40:	b480      	push	{r7}
 800de42:	b083      	sub	sp, #12
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	689b      	ldr	r3, [r3, #8]
 800de4c:	f043 0201 	orr.w	r2, r3, #1
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800de54:	2300      	movs	r3, #0
}
 800de56:	4618      	mov	r0, r3
 800de58:	370c      	adds	r7, #12
 800de5a:	46bd      	mov	sp, r7
 800de5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de60:	4770      	bx	lr

0800de62 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800de62:	b480      	push	{r7}
 800de64:	b083      	sub	sp, #12
 800de66:	af00      	add	r7, sp, #0
 800de68:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	689b      	ldr	r3, [r3, #8]
 800de6e:	f023 0201 	bic.w	r2, r3, #1
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800de76:	2300      	movs	r3, #0
}
 800de78:	4618      	mov	r0, r3
 800de7a:	370c      	adds	r7, #12
 800de7c:	46bd      	mov	sp, r7
 800de7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de82:	4770      	bx	lr

0800de84 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b082      	sub	sp, #8
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
 800de8c:	460b      	mov	r3, r1
 800de8e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	68db      	ldr	r3, [r3, #12]
 800de94:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800de9c:	78fb      	ldrb	r3, [r7, #3]
 800de9e:	2b01      	cmp	r3, #1
 800dea0:	d106      	bne.n	800deb0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	68db      	ldr	r3, [r3, #12]
 800dea6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	60da      	str	r2, [r3, #12]
 800deae:	e00b      	b.n	800dec8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800deb0:	78fb      	ldrb	r3, [r7, #3]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d106      	bne.n	800dec4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	68db      	ldr	r3, [r3, #12]
 800deba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	60da      	str	r2, [r3, #12]
 800dec2:	e001      	b.n	800dec8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800dec4:	2301      	movs	r3, #1
 800dec6:	e003      	b.n	800ded0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800dec8:	2032      	movs	r0, #50	; 0x32
 800deca:	f7f4 fb79 	bl	80025c0 <HAL_Delay>

  return HAL_OK;
 800dece:	2300      	movs	r3, #0
}
 800ded0:	4618      	mov	r0, r3
 800ded2:	3708      	adds	r7, #8
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bd80      	pop	{r7, pc}

0800ded8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ded8:	b480      	push	{r7}
 800deda:	b085      	sub	sp, #20
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
 800dee0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800dee2:	2300      	movs	r3, #0
 800dee4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	019b      	lsls	r3, r3, #6
 800deea:	f043 0220 	orr.w	r2, r3, #32
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	3301      	adds	r3, #1
 800def6:	60fb      	str	r3, [r7, #12]
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	4a09      	ldr	r2, [pc, #36]	; (800df20 <USB_FlushTxFifo+0x48>)
 800defc:	4293      	cmp	r3, r2
 800defe:	d901      	bls.n	800df04 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800df00:	2303      	movs	r3, #3
 800df02:	e006      	b.n	800df12 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	691b      	ldr	r3, [r3, #16]
 800df08:	f003 0320 	and.w	r3, r3, #32
 800df0c:	2b20      	cmp	r3, #32
 800df0e:	d0f0      	beq.n	800def2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800df10:	2300      	movs	r3, #0
}
 800df12:	4618      	mov	r0, r3
 800df14:	3714      	adds	r7, #20
 800df16:	46bd      	mov	sp, r7
 800df18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1c:	4770      	bx	lr
 800df1e:	bf00      	nop
 800df20:	00030d40 	.word	0x00030d40

0800df24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800df24:	b480      	push	{r7}
 800df26:	b085      	sub	sp, #20
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800df2c:	2300      	movs	r3, #0
 800df2e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2210      	movs	r2, #16
 800df34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	3301      	adds	r3, #1
 800df3a:	60fb      	str	r3, [r7, #12]
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	4a09      	ldr	r2, [pc, #36]	; (800df64 <USB_FlushRxFifo+0x40>)
 800df40:	4293      	cmp	r3, r2
 800df42:	d901      	bls.n	800df48 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800df44:	2303      	movs	r3, #3
 800df46:	e006      	b.n	800df56 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	691b      	ldr	r3, [r3, #16]
 800df4c:	f003 0310 	and.w	r3, r3, #16
 800df50:	2b10      	cmp	r3, #16
 800df52:	d0f0      	beq.n	800df36 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800df54:	2300      	movs	r3, #0
}
 800df56:	4618      	mov	r0, r3
 800df58:	3714      	adds	r7, #20
 800df5a:	46bd      	mov	sp, r7
 800df5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df60:	4770      	bx	lr
 800df62:	bf00      	nop
 800df64:	00030d40 	.word	0x00030d40

0800df68 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800df68:	b480      	push	{r7}
 800df6a:	b089      	sub	sp, #36	; 0x24
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	60f8      	str	r0, [r7, #12]
 800df70:	60b9      	str	r1, [r7, #8]
 800df72:	4611      	mov	r1, r2
 800df74:	461a      	mov	r2, r3
 800df76:	460b      	mov	r3, r1
 800df78:	71fb      	strb	r3, [r7, #7]
 800df7a:	4613      	mov	r3, r2
 800df7c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800df86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d123      	bne.n	800dfd6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800df8e:	88bb      	ldrh	r3, [r7, #4]
 800df90:	3303      	adds	r3, #3
 800df92:	089b      	lsrs	r3, r3, #2
 800df94:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800df96:	2300      	movs	r3, #0
 800df98:	61bb      	str	r3, [r7, #24]
 800df9a:	e018      	b.n	800dfce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800df9c:	79fb      	ldrb	r3, [r7, #7]
 800df9e:	031a      	lsls	r2, r3, #12
 800dfa0:	697b      	ldr	r3, [r7, #20]
 800dfa2:	4413      	add	r3, r2
 800dfa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfa8:	461a      	mov	r2, r3
 800dfaa:	69fb      	ldr	r3, [r7, #28]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	6013      	str	r3, [r2, #0]
      pSrc++;
 800dfb0:	69fb      	ldr	r3, [r7, #28]
 800dfb2:	3301      	adds	r3, #1
 800dfb4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800dfb6:	69fb      	ldr	r3, [r7, #28]
 800dfb8:	3301      	adds	r3, #1
 800dfba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800dfbc:	69fb      	ldr	r3, [r7, #28]
 800dfbe:	3301      	adds	r3, #1
 800dfc0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800dfc2:	69fb      	ldr	r3, [r7, #28]
 800dfc4:	3301      	adds	r3, #1
 800dfc6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800dfc8:	69bb      	ldr	r3, [r7, #24]
 800dfca:	3301      	adds	r3, #1
 800dfcc:	61bb      	str	r3, [r7, #24]
 800dfce:	69ba      	ldr	r2, [r7, #24]
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	429a      	cmp	r2, r3
 800dfd4:	d3e2      	bcc.n	800df9c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800dfd6:	2300      	movs	r3, #0
}
 800dfd8:	4618      	mov	r0, r3
 800dfda:	3724      	adds	r7, #36	; 0x24
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe2:	4770      	bx	lr

0800dfe4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800dfe4:	b480      	push	{r7}
 800dfe6:	b08b      	sub	sp, #44	; 0x2c
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	60f8      	str	r0, [r7, #12]
 800dfec:	60b9      	str	r1, [r7, #8]
 800dfee:	4613      	mov	r3, r2
 800dff0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800dff6:	68bb      	ldr	r3, [r7, #8]
 800dff8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800dffa:	88fb      	ldrh	r3, [r7, #6]
 800dffc:	089b      	lsrs	r3, r3, #2
 800dffe:	b29b      	uxth	r3, r3
 800e000:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e002:	88fb      	ldrh	r3, [r7, #6]
 800e004:	f003 0303 	and.w	r3, r3, #3
 800e008:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e00a:	2300      	movs	r3, #0
 800e00c:	623b      	str	r3, [r7, #32]
 800e00e:	e014      	b.n	800e03a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e010:	69bb      	ldr	r3, [r7, #24]
 800e012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e016:	681a      	ldr	r2, [r3, #0]
 800e018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e01a:	601a      	str	r2, [r3, #0]
    pDest++;
 800e01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e01e:	3301      	adds	r3, #1
 800e020:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e024:	3301      	adds	r3, #1
 800e026:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e02a:	3301      	adds	r3, #1
 800e02c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e030:	3301      	adds	r3, #1
 800e032:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800e034:	6a3b      	ldr	r3, [r7, #32]
 800e036:	3301      	adds	r3, #1
 800e038:	623b      	str	r3, [r7, #32]
 800e03a:	6a3a      	ldr	r2, [r7, #32]
 800e03c:	697b      	ldr	r3, [r7, #20]
 800e03e:	429a      	cmp	r2, r3
 800e040:	d3e6      	bcc.n	800e010 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e042:	8bfb      	ldrh	r3, [r7, #30]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d01e      	beq.n	800e086 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e048:	2300      	movs	r3, #0
 800e04a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e04c:	69bb      	ldr	r3, [r7, #24]
 800e04e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e052:	461a      	mov	r2, r3
 800e054:	f107 0310 	add.w	r3, r7, #16
 800e058:	6812      	ldr	r2, [r2, #0]
 800e05a:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e05c:	693a      	ldr	r2, [r7, #16]
 800e05e:	6a3b      	ldr	r3, [r7, #32]
 800e060:	b2db      	uxtb	r3, r3
 800e062:	00db      	lsls	r3, r3, #3
 800e064:	fa22 f303 	lsr.w	r3, r2, r3
 800e068:	b2da      	uxtb	r2, r3
 800e06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e06c:	701a      	strb	r2, [r3, #0]
      i++;
 800e06e:	6a3b      	ldr	r3, [r7, #32]
 800e070:	3301      	adds	r3, #1
 800e072:	623b      	str	r3, [r7, #32]
      pDest++;
 800e074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e076:	3301      	adds	r3, #1
 800e078:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800e07a:	8bfb      	ldrh	r3, [r7, #30]
 800e07c:	3b01      	subs	r3, #1
 800e07e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e080:	8bfb      	ldrh	r3, [r7, #30]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d1ea      	bne.n	800e05c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e088:	4618      	mov	r0, r3
 800e08a:	372c      	adds	r7, #44	; 0x2c
 800e08c:	46bd      	mov	sp, r7
 800e08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e092:	4770      	bx	lr

0800e094 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e094:	b480      	push	{r7}
 800e096:	b085      	sub	sp, #20
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	695b      	ldr	r3, [r3, #20]
 800e0a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	699b      	ldr	r3, [r3, #24]
 800e0a6:	68fa      	ldr	r2, [r7, #12]
 800e0a8:	4013      	ands	r3, r2
 800e0aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e0ac:	68fb      	ldr	r3, [r7, #12]
}
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	3714      	adds	r7, #20
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b8:	4770      	bx	lr

0800e0ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e0ba:	b480      	push	{r7}
 800e0bc:	b083      	sub	sp, #12
 800e0be:	af00      	add	r7, sp, #0
 800e0c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	695b      	ldr	r3, [r3, #20]
 800e0c6:	f003 0301 	and.w	r3, r3, #1
}
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	370c      	adds	r7, #12
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d4:	4770      	bx	lr
	...

0800e0d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e0d8:	b480      	push	{r7}
 800e0da:	b085      	sub	sp, #20
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	3301      	adds	r3, #1
 800e0e8:	60fb      	str	r3, [r7, #12]
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	4a13      	ldr	r2, [pc, #76]	; (800e13c <USB_CoreReset+0x64>)
 800e0ee:	4293      	cmp	r3, r2
 800e0f0:	d901      	bls.n	800e0f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e0f2:	2303      	movs	r3, #3
 800e0f4:	e01b      	b.n	800e12e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	691b      	ldr	r3, [r3, #16]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	daf2      	bge.n	800e0e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e0fe:	2300      	movs	r3, #0
 800e100:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	691b      	ldr	r3, [r3, #16]
 800e106:	f043 0201 	orr.w	r2, r3, #1
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	3301      	adds	r3, #1
 800e112:	60fb      	str	r3, [r7, #12]
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	4a09      	ldr	r2, [pc, #36]	; (800e13c <USB_CoreReset+0x64>)
 800e118:	4293      	cmp	r3, r2
 800e11a:	d901      	bls.n	800e120 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e11c:	2303      	movs	r3, #3
 800e11e:	e006      	b.n	800e12e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	691b      	ldr	r3, [r3, #16]
 800e124:	f003 0301 	and.w	r3, r3, #1
 800e128:	2b01      	cmp	r3, #1
 800e12a:	d0f0      	beq.n	800e10e <USB_CoreReset+0x36>

  return HAL_OK;
 800e12c:	2300      	movs	r3, #0
}
 800e12e:	4618      	mov	r0, r3
 800e130:	3714      	adds	r7, #20
 800e132:	46bd      	mov	sp, r7
 800e134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e138:	4770      	bx	lr
 800e13a:	bf00      	nop
 800e13c:	00030d40 	.word	0x00030d40

0800e140 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e140:	b084      	sub	sp, #16
 800e142:	b580      	push	{r7, lr}
 800e144:	b084      	sub	sp, #16
 800e146:	af00      	add	r7, sp, #0
 800e148:	6078      	str	r0, [r7, #4]
 800e14a:	f107 001c 	add.w	r0, r7, #28
 800e14e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e156:	68bb      	ldr	r3, [r7, #8]
 800e158:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e15c:	461a      	mov	r2, r3
 800e15e:	2300      	movs	r3, #0
 800e160:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e166:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e172:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e17e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e182:	2b00      	cmp	r3, #0
 800e184:	d018      	beq.n	800e1b8 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800e186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e188:	2b01      	cmp	r3, #1
 800e18a:	d10a      	bne.n	800e1a2 <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800e18c:	68bb      	ldr	r3, [r7, #8]
 800e18e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	68ba      	ldr	r2, [r7, #8]
 800e196:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e19a:	f043 0304 	orr.w	r3, r3, #4
 800e19e:	6013      	str	r3, [r2, #0]
 800e1a0:	e014      	b.n	800e1cc <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800e1a2:	68bb      	ldr	r3, [r7, #8]
 800e1a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	68ba      	ldr	r2, [r7, #8]
 800e1ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e1b0:	f023 0304 	bic.w	r3, r3, #4
 800e1b4:	6013      	str	r3, [r2, #0]
 800e1b6:	e009      	b.n	800e1cc <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	68ba      	ldr	r2, [r7, #8]
 800e1c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e1c6:	f023 0304 	bic.w	r3, r3, #4
 800e1ca:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800e1cc:	2110      	movs	r1, #16
 800e1ce:	6878      	ldr	r0, [r7, #4]
 800e1d0:	f7ff fe82 	bl	800ded8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800e1d4:	6878      	ldr	r0, [r7, #4]
 800e1d6:	f7ff fea5 	bl	800df24 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800e1da:	2300      	movs	r3, #0
 800e1dc:	60fb      	str	r3, [r7, #12]
 800e1de:	e015      	b.n	800e20c <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	015a      	lsls	r2, r3, #5
 800e1e4:	68bb      	ldr	r3, [r7, #8]
 800e1e6:	4413      	add	r3, r2
 800e1e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e1ec:	461a      	mov	r2, r3
 800e1ee:	f04f 33ff 	mov.w	r3, #4294967295
 800e1f2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	015a      	lsls	r2, r3, #5
 800e1f8:	68bb      	ldr	r3, [r7, #8]
 800e1fa:	4413      	add	r3, r2
 800e1fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e200:	461a      	mov	r2, r3
 800e202:	2300      	movs	r3, #0
 800e204:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	3301      	adds	r3, #1
 800e20a:	60fb      	str	r3, [r7, #12]
 800e20c:	6a3b      	ldr	r3, [r7, #32]
 800e20e:	68fa      	ldr	r2, [r7, #12]
 800e210:	429a      	cmp	r2, r3
 800e212:	d3e5      	bcc.n	800e1e0 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800e214:	2101      	movs	r1, #1
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f000 f882 	bl	800e320 <USB_DriveVbus>

  HAL_Delay(200U);
 800e21c:	20c8      	movs	r0, #200	; 0xc8
 800e21e:	f7f4 f9cf 	bl	80025c0 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	2200      	movs	r2, #0
 800e226:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	f04f 32ff 	mov.w	r2, #4294967295
 800e22e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d00b      	beq.n	800e254 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e242:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	4a14      	ldr	r2, [pc, #80]	; (800e298 <USB_HostInit+0x158>)
 800e248:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	4a13      	ldr	r2, [pc, #76]	; (800e29c <USB_HostInit+0x15c>)
 800e24e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800e252:	e009      	b.n	800e268 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2280      	movs	r2, #128	; 0x80
 800e258:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	4a10      	ldr	r2, [pc, #64]	; (800e2a0 <USB_HostInit+0x160>)
 800e25e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	4a10      	ldr	r2, [pc, #64]	; (800e2a4 <USB_HostInit+0x164>)
 800e264:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d105      	bne.n	800e27a <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	699b      	ldr	r3, [r3, #24]
 800e272:	f043 0210 	orr.w	r2, r3, #16
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	699a      	ldr	r2, [r3, #24]
 800e27e:	4b0a      	ldr	r3, [pc, #40]	; (800e2a8 <USB_HostInit+0x168>)
 800e280:	4313      	orrs	r3, r2
 800e282:	687a      	ldr	r2, [r7, #4]
 800e284:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800e286:	2300      	movs	r3, #0
}
 800e288:	4618      	mov	r0, r3
 800e28a:	3710      	adds	r7, #16
 800e28c:	46bd      	mov	sp, r7
 800e28e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e292:	b004      	add	sp, #16
 800e294:	4770      	bx	lr
 800e296:	bf00      	nop
 800e298:	01000200 	.word	0x01000200
 800e29c:	00e00300 	.word	0x00e00300
 800e2a0:	00600080 	.word	0x00600080
 800e2a4:	004000e0 	.word	0x004000e0
 800e2a8:	a3200008 	.word	0xa3200008

0800e2ac <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800e2ac:	b480      	push	{r7}
 800e2ae:	b085      	sub	sp, #20
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
 800e2b4:	460b      	mov	r3, r1
 800e2b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	68fa      	ldr	r2, [r7, #12]
 800e2c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e2ca:	f023 0303 	bic.w	r3, r3, #3
 800e2ce:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e2d6:	681a      	ldr	r2, [r3, #0]
 800e2d8:	78fb      	ldrb	r3, [r7, #3]
 800e2da:	f003 0303 	and.w	r3, r3, #3
 800e2de:	68f9      	ldr	r1, [r7, #12]
 800e2e0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e2e4:	4313      	orrs	r3, r2
 800e2e6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800e2e8:	78fb      	ldrb	r3, [r7, #3]
 800e2ea:	2b01      	cmp	r3, #1
 800e2ec:	d107      	bne.n	800e2fe <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e2f4:	461a      	mov	r2, r3
 800e2f6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800e2fa:	6053      	str	r3, [r2, #4]
 800e2fc:	e009      	b.n	800e312 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800e2fe:	78fb      	ldrb	r3, [r7, #3]
 800e300:	2b02      	cmp	r3, #2
 800e302:	d106      	bne.n	800e312 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e30a:	461a      	mov	r2, r3
 800e30c:	f241 7370 	movw	r3, #6000	; 0x1770
 800e310:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800e312:	2300      	movs	r3, #0
}
 800e314:	4618      	mov	r0, r3
 800e316:	3714      	adds	r7, #20
 800e318:	46bd      	mov	sp, r7
 800e31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31e:	4770      	bx	lr

0800e320 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800e320:	b480      	push	{r7}
 800e322:	b085      	sub	sp, #20
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
 800e328:	460b      	mov	r3, r1
 800e32a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800e330:	2300      	movs	r3, #0
 800e332:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800e33e:	68bb      	ldr	r3, [r7, #8]
 800e340:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800e344:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800e346:	68bb      	ldr	r3, [r7, #8]
 800e348:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d109      	bne.n	800e364 <USB_DriveVbus+0x44>
 800e350:	78fb      	ldrb	r3, [r7, #3]
 800e352:	2b01      	cmp	r3, #1
 800e354:	d106      	bne.n	800e364 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800e356:	68bb      	ldr	r3, [r7, #8]
 800e358:	68fa      	ldr	r2, [r7, #12]
 800e35a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800e35e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e362:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800e364:	68bb      	ldr	r3, [r7, #8]
 800e366:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e36a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e36e:	d109      	bne.n	800e384 <USB_DriveVbus+0x64>
 800e370:	78fb      	ldrb	r3, [r7, #3]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d106      	bne.n	800e384 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800e376:	68bb      	ldr	r3, [r7, #8]
 800e378:	68fa      	ldr	r2, [r7, #12]
 800e37a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800e37e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e382:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800e384:	2300      	movs	r3, #0
}
 800e386:	4618      	mov	r0, r3
 800e388:	3714      	adds	r7, #20
 800e38a:	46bd      	mov	sp, r7
 800e38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e390:	4770      	bx	lr

0800e392 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800e392:	b480      	push	{r7}
 800e394:	b085      	sub	sp, #20
 800e396:	af00      	add	r7, sp, #0
 800e398:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800e39e:	2300      	movs	r3, #0
 800e3a0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	0c5b      	lsrs	r3, r3, #17
 800e3b0:	f003 0303 	and.w	r3, r3, #3
}
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	3714      	adds	r7, #20
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3be:	4770      	bx	lr

0800e3c0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800e3c0:	b480      	push	{r7}
 800e3c2:	b085      	sub	sp, #20
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e3d2:	689b      	ldr	r3, [r3, #8]
 800e3d4:	b29b      	uxth	r3, r3
}
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	3714      	adds	r7, #20
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e0:	4770      	bx	lr
	...

0800e3e4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b088      	sub	sp, #32
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
 800e3ec:	4608      	mov	r0, r1
 800e3ee:	4611      	mov	r1, r2
 800e3f0:	461a      	mov	r2, r3
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	70fb      	strb	r3, [r7, #3]
 800e3f6:	460b      	mov	r3, r1
 800e3f8:	70bb      	strb	r3, [r7, #2]
 800e3fa:	4613      	mov	r3, r2
 800e3fc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800e3fe:	2300      	movs	r3, #0
 800e400:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800e406:	78fb      	ldrb	r3, [r7, #3]
 800e408:	015a      	lsls	r2, r3, #5
 800e40a:	693b      	ldr	r3, [r7, #16]
 800e40c:	4413      	add	r3, r2
 800e40e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e412:	461a      	mov	r2, r3
 800e414:	f04f 33ff 	mov.w	r3, #4294967295
 800e418:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800e41a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e41e:	2b03      	cmp	r3, #3
 800e420:	d87e      	bhi.n	800e520 <USB_HC_Init+0x13c>
 800e422:	a201      	add	r2, pc, #4	; (adr r2, 800e428 <USB_HC_Init+0x44>)
 800e424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e428:	0800e439 	.word	0x0800e439
 800e42c:	0800e4e3 	.word	0x0800e4e3
 800e430:	0800e439 	.word	0x0800e439
 800e434:	0800e4a5 	.word	0x0800e4a5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800e438:	78fb      	ldrb	r3, [r7, #3]
 800e43a:	015a      	lsls	r2, r3, #5
 800e43c:	693b      	ldr	r3, [r7, #16]
 800e43e:	4413      	add	r3, r2
 800e440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e444:	461a      	mov	r2, r3
 800e446:	f240 439d 	movw	r3, #1181	; 0x49d
 800e44a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800e44c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e450:	2b00      	cmp	r3, #0
 800e452:	da10      	bge.n	800e476 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800e454:	78fb      	ldrb	r3, [r7, #3]
 800e456:	015a      	lsls	r2, r3, #5
 800e458:	693b      	ldr	r3, [r7, #16]
 800e45a:	4413      	add	r3, r2
 800e45c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e460:	68db      	ldr	r3, [r3, #12]
 800e462:	78fa      	ldrb	r2, [r7, #3]
 800e464:	0151      	lsls	r1, r2, #5
 800e466:	693a      	ldr	r2, [r7, #16]
 800e468:	440a      	add	r2, r1
 800e46a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e46e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e472:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800e474:	e057      	b.n	800e526 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e47a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d051      	beq.n	800e526 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800e482:	78fb      	ldrb	r3, [r7, #3]
 800e484:	015a      	lsls	r2, r3, #5
 800e486:	693b      	ldr	r3, [r7, #16]
 800e488:	4413      	add	r3, r2
 800e48a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e48e:	68db      	ldr	r3, [r3, #12]
 800e490:	78fa      	ldrb	r2, [r7, #3]
 800e492:	0151      	lsls	r1, r2, #5
 800e494:	693a      	ldr	r2, [r7, #16]
 800e496:	440a      	add	r2, r1
 800e498:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e49c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800e4a0:	60d3      	str	r3, [r2, #12]
      break;
 800e4a2:	e040      	b.n	800e526 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800e4a4:	78fb      	ldrb	r3, [r7, #3]
 800e4a6:	015a      	lsls	r2, r3, #5
 800e4a8:	693b      	ldr	r3, [r7, #16]
 800e4aa:	4413      	add	r3, r2
 800e4ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e4b0:	461a      	mov	r2, r3
 800e4b2:	f240 639d 	movw	r3, #1693	; 0x69d
 800e4b6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800e4b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	da34      	bge.n	800e52a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800e4c0:	78fb      	ldrb	r3, [r7, #3]
 800e4c2:	015a      	lsls	r2, r3, #5
 800e4c4:	693b      	ldr	r3, [r7, #16]
 800e4c6:	4413      	add	r3, r2
 800e4c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e4cc:	68db      	ldr	r3, [r3, #12]
 800e4ce:	78fa      	ldrb	r2, [r7, #3]
 800e4d0:	0151      	lsls	r1, r2, #5
 800e4d2:	693a      	ldr	r2, [r7, #16]
 800e4d4:	440a      	add	r2, r1
 800e4d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e4da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e4de:	60d3      	str	r3, [r2, #12]
      }

      break;
 800e4e0:	e023      	b.n	800e52a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800e4e2:	78fb      	ldrb	r3, [r7, #3]
 800e4e4:	015a      	lsls	r2, r3, #5
 800e4e6:	693b      	ldr	r3, [r7, #16]
 800e4e8:	4413      	add	r3, r2
 800e4ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e4ee:	461a      	mov	r2, r3
 800e4f0:	f240 2325 	movw	r3, #549	; 0x225
 800e4f4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800e4f6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	da17      	bge.n	800e52e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800e4fe:	78fb      	ldrb	r3, [r7, #3]
 800e500:	015a      	lsls	r2, r3, #5
 800e502:	693b      	ldr	r3, [r7, #16]
 800e504:	4413      	add	r3, r2
 800e506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e50a:	68db      	ldr	r3, [r3, #12]
 800e50c:	78fa      	ldrb	r2, [r7, #3]
 800e50e:	0151      	lsls	r1, r2, #5
 800e510:	693a      	ldr	r2, [r7, #16]
 800e512:	440a      	add	r2, r1
 800e514:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e518:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800e51c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800e51e:	e006      	b.n	800e52e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800e520:	2301      	movs	r3, #1
 800e522:	77fb      	strb	r3, [r7, #31]
      break;
 800e524:	e004      	b.n	800e530 <USB_HC_Init+0x14c>
      break;
 800e526:	bf00      	nop
 800e528:	e002      	b.n	800e530 <USB_HC_Init+0x14c>
      break;
 800e52a:	bf00      	nop
 800e52c:	e000      	b.n	800e530 <USB_HC_Init+0x14c>
      break;
 800e52e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800e530:	693b      	ldr	r3, [r7, #16]
 800e532:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e536:	699a      	ldr	r2, [r3, #24]
 800e538:	78fb      	ldrb	r3, [r7, #3]
 800e53a:	f003 030f 	and.w	r3, r3, #15
 800e53e:	2101      	movs	r1, #1
 800e540:	fa01 f303 	lsl.w	r3, r1, r3
 800e544:	6939      	ldr	r1, [r7, #16]
 800e546:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e54a:	4313      	orrs	r3, r2
 800e54c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	699b      	ldr	r3, [r3, #24]
 800e552:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800e55a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	da03      	bge.n	800e56a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800e562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e566:	61bb      	str	r3, [r7, #24]
 800e568:	e001      	b.n	800e56e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800e56a:	2300      	movs	r3, #0
 800e56c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	f7ff ff0f 	bl	800e392 <USB_GetHostSpeed>
 800e574:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800e576:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e57a:	2b02      	cmp	r3, #2
 800e57c:	d106      	bne.n	800e58c <USB_HC_Init+0x1a8>
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	2b02      	cmp	r3, #2
 800e582:	d003      	beq.n	800e58c <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800e584:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e588:	617b      	str	r3, [r7, #20]
 800e58a:	e001      	b.n	800e590 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800e58c:	2300      	movs	r3, #0
 800e58e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e590:	787b      	ldrb	r3, [r7, #1]
 800e592:	059b      	lsls	r3, r3, #22
 800e594:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800e598:	78bb      	ldrb	r3, [r7, #2]
 800e59a:	02db      	lsls	r3, r3, #11
 800e59c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e5a0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800e5a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e5a6:	049b      	lsls	r3, r3, #18
 800e5a8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800e5ac:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800e5ae:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e5b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800e5b4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800e5b6:	69bb      	ldr	r3, [r7, #24]
 800e5b8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e5ba:	78fb      	ldrb	r3, [r7, #3]
 800e5bc:	0159      	lsls	r1, r3, #5
 800e5be:	693b      	ldr	r3, [r7, #16]
 800e5c0:	440b      	add	r3, r1
 800e5c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e5c6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800e5c8:	697b      	ldr	r3, [r7, #20]
 800e5ca:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e5cc:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800e5ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e5d2:	2b03      	cmp	r3, #3
 800e5d4:	d10f      	bne.n	800e5f6 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800e5d6:	78fb      	ldrb	r3, [r7, #3]
 800e5d8:	015a      	lsls	r2, r3, #5
 800e5da:	693b      	ldr	r3, [r7, #16]
 800e5dc:	4413      	add	r3, r2
 800e5de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	78fa      	ldrb	r2, [r7, #3]
 800e5e6:	0151      	lsls	r1, r2, #5
 800e5e8:	693a      	ldr	r2, [r7, #16]
 800e5ea:	440a      	add	r2, r1
 800e5ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e5f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e5f4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800e5f6:	7ffb      	ldrb	r3, [r7, #31]
}
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	3720      	adds	r7, #32
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	bd80      	pop	{r7, pc}

0800e600 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b08c      	sub	sp, #48	; 0x30
 800e604:	af02      	add	r7, sp, #8
 800e606:	60f8      	str	r0, [r7, #12]
 800e608:	60b9      	str	r1, [r7, #8]
 800e60a:	4613      	mov	r3, r2
 800e60c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800e612:	68bb      	ldr	r3, [r7, #8]
 800e614:	785b      	ldrb	r3, [r3, #1]
 800e616:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800e618:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e61c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e626:	2b00      	cmp	r3, #0
 800e628:	d02d      	beq.n	800e686 <USB_HC_StartXfer+0x86>
 800e62a:	68bb      	ldr	r3, [r7, #8]
 800e62c:	791b      	ldrb	r3, [r3, #4]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d129      	bne.n	800e686 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800e632:	79fb      	ldrb	r3, [r7, #7]
 800e634:	2b01      	cmp	r3, #1
 800e636:	d117      	bne.n	800e668 <USB_HC_StartXfer+0x68>
 800e638:	68bb      	ldr	r3, [r7, #8]
 800e63a:	79db      	ldrb	r3, [r3, #7]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d003      	beq.n	800e648 <USB_HC_StartXfer+0x48>
 800e640:	68bb      	ldr	r3, [r7, #8]
 800e642:	79db      	ldrb	r3, [r3, #7]
 800e644:	2b02      	cmp	r3, #2
 800e646:	d10f      	bne.n	800e668 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800e648:	69fb      	ldr	r3, [r7, #28]
 800e64a:	015a      	lsls	r2, r3, #5
 800e64c:	6a3b      	ldr	r3, [r7, #32]
 800e64e:	4413      	add	r3, r2
 800e650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e654:	68db      	ldr	r3, [r3, #12]
 800e656:	69fa      	ldr	r2, [r7, #28]
 800e658:	0151      	lsls	r1, r2, #5
 800e65a:	6a3a      	ldr	r2, [r7, #32]
 800e65c:	440a      	add	r2, r1
 800e65e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e666:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800e668:	79fb      	ldrb	r3, [r7, #7]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d10b      	bne.n	800e686 <USB_HC_StartXfer+0x86>
 800e66e:	68bb      	ldr	r3, [r7, #8]
 800e670:	795b      	ldrb	r3, [r3, #5]
 800e672:	2b01      	cmp	r3, #1
 800e674:	d107      	bne.n	800e686 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800e676:	68bb      	ldr	r3, [r7, #8]
 800e678:	785b      	ldrb	r3, [r3, #1]
 800e67a:	4619      	mov	r1, r3
 800e67c:	68f8      	ldr	r0, [r7, #12]
 800e67e:	f000 fa2f 	bl	800eae0 <USB_DoPing>
      return HAL_OK;
 800e682:	2300      	movs	r3, #0
 800e684:	e0f8      	b.n	800e878 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800e686:	68bb      	ldr	r3, [r7, #8]
 800e688:	695b      	ldr	r3, [r3, #20]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d018      	beq.n	800e6c0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800e68e:	68bb      	ldr	r3, [r7, #8]
 800e690:	695b      	ldr	r3, [r3, #20]
 800e692:	68ba      	ldr	r2, [r7, #8]
 800e694:	8912      	ldrh	r2, [r2, #8]
 800e696:	4413      	add	r3, r2
 800e698:	3b01      	subs	r3, #1
 800e69a:	68ba      	ldr	r2, [r7, #8]
 800e69c:	8912      	ldrh	r2, [r2, #8]
 800e69e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e6a2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800e6a4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e6a6:	8b7b      	ldrh	r3, [r7, #26]
 800e6a8:	429a      	cmp	r2, r3
 800e6aa:	d90b      	bls.n	800e6c4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800e6ac:	8b7b      	ldrh	r3, [r7, #26]
 800e6ae:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e6b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e6b2:	68ba      	ldr	r2, [r7, #8]
 800e6b4:	8912      	ldrh	r2, [r2, #8]
 800e6b6:	fb02 f203 	mul.w	r2, r2, r3
 800e6ba:	68bb      	ldr	r3, [r7, #8]
 800e6bc:	611a      	str	r2, [r3, #16]
 800e6be:	e001      	b.n	800e6c4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800e6c0:	2301      	movs	r3, #1
 800e6c2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800e6c4:	68bb      	ldr	r3, [r7, #8]
 800e6c6:	78db      	ldrb	r3, [r3, #3]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d007      	beq.n	800e6dc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800e6cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e6ce:	68ba      	ldr	r2, [r7, #8]
 800e6d0:	8912      	ldrh	r2, [r2, #8]
 800e6d2:	fb02 f203 	mul.w	r2, r2, r3
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	611a      	str	r2, [r3, #16]
 800e6da:	e003      	b.n	800e6e4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800e6dc:	68bb      	ldr	r3, [r7, #8]
 800e6de:	695a      	ldr	r2, [r3, #20]
 800e6e0:	68bb      	ldr	r3, [r7, #8]
 800e6e2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e6e4:	68bb      	ldr	r3, [r7, #8]
 800e6e6:	691b      	ldr	r3, [r3, #16]
 800e6e8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e6ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e6ee:	04d9      	lsls	r1, r3, #19
 800e6f0:	4b63      	ldr	r3, [pc, #396]	; (800e880 <USB_HC_StartXfer+0x280>)
 800e6f2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e6f4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800e6f6:	68bb      	ldr	r3, [r7, #8]
 800e6f8:	7a9b      	ldrb	r3, [r3, #10]
 800e6fa:	075b      	lsls	r3, r3, #29
 800e6fc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e700:	69f9      	ldr	r1, [r7, #28]
 800e702:	0148      	lsls	r0, r1, #5
 800e704:	6a39      	ldr	r1, [r7, #32]
 800e706:	4401      	add	r1, r0
 800e708:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e70c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800e70e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800e710:	79fb      	ldrb	r3, [r7, #7]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d009      	beq.n	800e72a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800e716:	68bb      	ldr	r3, [r7, #8]
 800e718:	68d9      	ldr	r1, [r3, #12]
 800e71a:	69fb      	ldr	r3, [r7, #28]
 800e71c:	015a      	lsls	r2, r3, #5
 800e71e:	6a3b      	ldr	r3, [r7, #32]
 800e720:	4413      	add	r3, r2
 800e722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e726:	460a      	mov	r2, r1
 800e728:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800e72a:	6a3b      	ldr	r3, [r7, #32]
 800e72c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e730:	689b      	ldr	r3, [r3, #8]
 800e732:	f003 0301 	and.w	r3, r3, #1
 800e736:	2b00      	cmp	r3, #0
 800e738:	bf0c      	ite	eq
 800e73a:	2301      	moveq	r3, #1
 800e73c:	2300      	movne	r3, #0
 800e73e:	b2db      	uxtb	r3, r3
 800e740:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800e742:	69fb      	ldr	r3, [r7, #28]
 800e744:	015a      	lsls	r2, r3, #5
 800e746:	6a3b      	ldr	r3, [r7, #32]
 800e748:	4413      	add	r3, r2
 800e74a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	69fa      	ldr	r2, [r7, #28]
 800e752:	0151      	lsls	r1, r2, #5
 800e754:	6a3a      	ldr	r2, [r7, #32]
 800e756:	440a      	add	r2, r1
 800e758:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e75c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e760:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800e762:	69fb      	ldr	r3, [r7, #28]
 800e764:	015a      	lsls	r2, r3, #5
 800e766:	6a3b      	ldr	r3, [r7, #32]
 800e768:	4413      	add	r3, r2
 800e76a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e76e:	681a      	ldr	r2, [r3, #0]
 800e770:	7e7b      	ldrb	r3, [r7, #25]
 800e772:	075b      	lsls	r3, r3, #29
 800e774:	69f9      	ldr	r1, [r7, #28]
 800e776:	0148      	lsls	r0, r1, #5
 800e778:	6a39      	ldr	r1, [r7, #32]
 800e77a:	4401      	add	r1, r0
 800e77c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800e780:	4313      	orrs	r3, r2
 800e782:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800e784:	69fb      	ldr	r3, [r7, #28]
 800e786:	015a      	lsls	r2, r3, #5
 800e788:	6a3b      	ldr	r3, [r7, #32]
 800e78a:	4413      	add	r3, r2
 800e78c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e794:	693b      	ldr	r3, [r7, #16]
 800e796:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e79a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800e79c:	68bb      	ldr	r3, [r7, #8]
 800e79e:	78db      	ldrb	r3, [r3, #3]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d004      	beq.n	800e7ae <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800e7a4:	693b      	ldr	r3, [r7, #16]
 800e7a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e7aa:	613b      	str	r3, [r7, #16]
 800e7ac:	e003      	b.n	800e7b6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800e7ae:	693b      	ldr	r3, [r7, #16]
 800e7b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e7b4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e7b6:	693b      	ldr	r3, [r7, #16]
 800e7b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e7bc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800e7be:	69fb      	ldr	r3, [r7, #28]
 800e7c0:	015a      	lsls	r2, r3, #5
 800e7c2:	6a3b      	ldr	r3, [r7, #32]
 800e7c4:	4413      	add	r3, r2
 800e7c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e7ca:	461a      	mov	r2, r3
 800e7cc:	693b      	ldr	r3, [r7, #16]
 800e7ce:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800e7d0:	79fb      	ldrb	r3, [r7, #7]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d001      	beq.n	800e7da <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	e04e      	b.n	800e878 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800e7da:	68bb      	ldr	r3, [r7, #8]
 800e7dc:	78db      	ldrb	r3, [r3, #3]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d149      	bne.n	800e876 <USB_HC_StartXfer+0x276>
 800e7e2:	68bb      	ldr	r3, [r7, #8]
 800e7e4:	695b      	ldr	r3, [r3, #20]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d045      	beq.n	800e876 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800e7ea:	68bb      	ldr	r3, [r7, #8]
 800e7ec:	79db      	ldrb	r3, [r3, #7]
 800e7ee:	2b03      	cmp	r3, #3
 800e7f0:	d830      	bhi.n	800e854 <USB_HC_StartXfer+0x254>
 800e7f2:	a201      	add	r2, pc, #4	; (adr r2, 800e7f8 <USB_HC_StartXfer+0x1f8>)
 800e7f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7f8:	0800e809 	.word	0x0800e809
 800e7fc:	0800e82d 	.word	0x0800e82d
 800e800:	0800e809 	.word	0x0800e809
 800e804:	0800e82d 	.word	0x0800e82d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800e808:	68bb      	ldr	r3, [r7, #8]
 800e80a:	695b      	ldr	r3, [r3, #20]
 800e80c:	3303      	adds	r3, #3
 800e80e:	089b      	lsrs	r3, r3, #2
 800e810:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800e812:	8afa      	ldrh	r2, [r7, #22]
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e818:	b29b      	uxth	r3, r3
 800e81a:	429a      	cmp	r2, r3
 800e81c:	d91c      	bls.n	800e858 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	699b      	ldr	r3, [r3, #24]
 800e822:	f043 0220 	orr.w	r2, r3, #32
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	619a      	str	r2, [r3, #24]
        }
        break;
 800e82a:	e015      	b.n	800e858 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800e82c:	68bb      	ldr	r3, [r7, #8]
 800e82e:	695b      	ldr	r3, [r3, #20]
 800e830:	3303      	adds	r3, #3
 800e832:	089b      	lsrs	r3, r3, #2
 800e834:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800e836:	8afa      	ldrh	r2, [r7, #22]
 800e838:	6a3b      	ldr	r3, [r7, #32]
 800e83a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e83e:	691b      	ldr	r3, [r3, #16]
 800e840:	b29b      	uxth	r3, r3
 800e842:	429a      	cmp	r2, r3
 800e844:	d90a      	bls.n	800e85c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	699b      	ldr	r3, [r3, #24]
 800e84a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	619a      	str	r2, [r3, #24]
        }
        break;
 800e852:	e003      	b.n	800e85c <USB_HC_StartXfer+0x25c>

      default:
        break;
 800e854:	bf00      	nop
 800e856:	e002      	b.n	800e85e <USB_HC_StartXfer+0x25e>
        break;
 800e858:	bf00      	nop
 800e85a:	e000      	b.n	800e85e <USB_HC_StartXfer+0x25e>
        break;
 800e85c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800e85e:	68bb      	ldr	r3, [r7, #8]
 800e860:	68d9      	ldr	r1, [r3, #12]
 800e862:	68bb      	ldr	r3, [r7, #8]
 800e864:	785a      	ldrb	r2, [r3, #1]
 800e866:	68bb      	ldr	r3, [r7, #8]
 800e868:	695b      	ldr	r3, [r3, #20]
 800e86a:	b29b      	uxth	r3, r3
 800e86c:	2000      	movs	r0, #0
 800e86e:	9000      	str	r0, [sp, #0]
 800e870:	68f8      	ldr	r0, [r7, #12]
 800e872:	f7ff fb79 	bl	800df68 <USB_WritePacket>
  }

  return HAL_OK;
 800e876:	2300      	movs	r3, #0
}
 800e878:	4618      	mov	r0, r3
 800e87a:	3728      	adds	r7, #40	; 0x28
 800e87c:	46bd      	mov	sp, r7
 800e87e:	bd80      	pop	{r7, pc}
 800e880:	1ff80000 	.word	0x1ff80000

0800e884 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e884:	b480      	push	{r7}
 800e886:	b085      	sub	sp, #20
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e896:	695b      	ldr	r3, [r3, #20]
 800e898:	b29b      	uxth	r3, r3
}
 800e89a:	4618      	mov	r0, r3
 800e89c:	3714      	adds	r7, #20
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a4:	4770      	bx	lr

0800e8a6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800e8a6:	b480      	push	{r7}
 800e8a8:	b089      	sub	sp, #36	; 0x24
 800e8aa:	af00      	add	r7, sp, #0
 800e8ac:	6078      	str	r0, [r7, #4]
 800e8ae:	460b      	mov	r3, r1
 800e8b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800e8b6:	78fb      	ldrb	r3, [r7, #3]
 800e8b8:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800e8be:	697b      	ldr	r3, [r7, #20]
 800e8c0:	015a      	lsls	r2, r3, #5
 800e8c2:	69bb      	ldr	r3, [r7, #24]
 800e8c4:	4413      	add	r3, r2
 800e8c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	0c9b      	lsrs	r3, r3, #18
 800e8ce:	f003 0303 	and.w	r3, r3, #3
 800e8d2:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800e8d4:	697b      	ldr	r3, [r7, #20]
 800e8d6:	015a      	lsls	r2, r3, #5
 800e8d8:	69bb      	ldr	r3, [r7, #24]
 800e8da:	4413      	add	r3, r2
 800e8dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	0fdb      	lsrs	r3, r3, #31
 800e8e4:	f003 0301 	and.w	r3, r3, #1
 800e8e8:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	689b      	ldr	r3, [r3, #8]
 800e8ee:	f003 0320 	and.w	r3, r3, #32
 800e8f2:	2b20      	cmp	r3, #32
 800e8f4:	d104      	bne.n	800e900 <USB_HC_Halt+0x5a>
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d101      	bne.n	800e900 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	e0e8      	b.n	800ead2 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800e900:	693b      	ldr	r3, [r7, #16]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d002      	beq.n	800e90c <USB_HC_Halt+0x66>
 800e906:	693b      	ldr	r3, [r7, #16]
 800e908:	2b02      	cmp	r3, #2
 800e90a:	d173      	bne.n	800e9f4 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e90c:	697b      	ldr	r3, [r7, #20]
 800e90e:	015a      	lsls	r2, r3, #5
 800e910:	69bb      	ldr	r3, [r7, #24]
 800e912:	4413      	add	r3, r2
 800e914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	697a      	ldr	r2, [r7, #20]
 800e91c:	0151      	lsls	r1, r2, #5
 800e91e:	69ba      	ldr	r2, [r7, #24]
 800e920:	440a      	add	r2, r1
 800e922:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e926:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e92a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	689b      	ldr	r3, [r3, #8]
 800e930:	f003 0320 	and.w	r3, r3, #32
 800e934:	2b00      	cmp	r3, #0
 800e936:	f040 80cb 	bne.w	800ead0 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e93e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e942:	2b00      	cmp	r3, #0
 800e944:	d143      	bne.n	800e9ce <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e946:	697b      	ldr	r3, [r7, #20]
 800e948:	015a      	lsls	r2, r3, #5
 800e94a:	69bb      	ldr	r3, [r7, #24]
 800e94c:	4413      	add	r3, r2
 800e94e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	697a      	ldr	r2, [r7, #20]
 800e956:	0151      	lsls	r1, r2, #5
 800e958:	69ba      	ldr	r2, [r7, #24]
 800e95a:	440a      	add	r2, r1
 800e95c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e960:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e964:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e966:	697b      	ldr	r3, [r7, #20]
 800e968:	015a      	lsls	r2, r3, #5
 800e96a:	69bb      	ldr	r3, [r7, #24]
 800e96c:	4413      	add	r3, r2
 800e96e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	697a      	ldr	r2, [r7, #20]
 800e976:	0151      	lsls	r1, r2, #5
 800e978:	69ba      	ldr	r2, [r7, #24]
 800e97a:	440a      	add	r2, r1
 800e97c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e980:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e984:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800e986:	697b      	ldr	r3, [r7, #20]
 800e988:	015a      	lsls	r2, r3, #5
 800e98a:	69bb      	ldr	r3, [r7, #24]
 800e98c:	4413      	add	r3, r2
 800e98e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	697a      	ldr	r2, [r7, #20]
 800e996:	0151      	lsls	r1, r2, #5
 800e998:	69ba      	ldr	r2, [r7, #24]
 800e99a:	440a      	add	r2, r1
 800e99c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e9a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e9a4:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800e9a6:	69fb      	ldr	r3, [r7, #28]
 800e9a8:	3301      	adds	r3, #1
 800e9aa:	61fb      	str	r3, [r7, #28]
 800e9ac:	69fb      	ldr	r3, [r7, #28]
 800e9ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e9b2:	d81d      	bhi.n	800e9f0 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e9b4:	697b      	ldr	r3, [r7, #20]
 800e9b6:	015a      	lsls	r2, r3, #5
 800e9b8:	69bb      	ldr	r3, [r7, #24]
 800e9ba:	4413      	add	r3, r2
 800e9bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e9c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e9ca:	d0ec      	beq.n	800e9a6 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e9cc:	e080      	b.n	800ead0 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e9ce:	697b      	ldr	r3, [r7, #20]
 800e9d0:	015a      	lsls	r2, r3, #5
 800e9d2:	69bb      	ldr	r3, [r7, #24]
 800e9d4:	4413      	add	r3, r2
 800e9d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	697a      	ldr	r2, [r7, #20]
 800e9de:	0151      	lsls	r1, r2, #5
 800e9e0:	69ba      	ldr	r2, [r7, #24]
 800e9e2:	440a      	add	r2, r1
 800e9e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e9e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e9ec:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e9ee:	e06f      	b.n	800ead0 <USB_HC_Halt+0x22a>
            break;
 800e9f0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e9f2:	e06d      	b.n	800ead0 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e9f4:	697b      	ldr	r3, [r7, #20]
 800e9f6:	015a      	lsls	r2, r3, #5
 800e9f8:	69bb      	ldr	r3, [r7, #24]
 800e9fa:	4413      	add	r3, r2
 800e9fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	697a      	ldr	r2, [r7, #20]
 800ea04:	0151      	lsls	r1, r2, #5
 800ea06:	69ba      	ldr	r2, [r7, #24]
 800ea08:	440a      	add	r2, r1
 800ea0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ea0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ea12:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ea14:	69bb      	ldr	r3, [r7, #24]
 800ea16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ea1a:	691b      	ldr	r3, [r3, #16]
 800ea1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d143      	bne.n	800eaac <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ea24:	697b      	ldr	r3, [r7, #20]
 800ea26:	015a      	lsls	r2, r3, #5
 800ea28:	69bb      	ldr	r3, [r7, #24]
 800ea2a:	4413      	add	r3, r2
 800ea2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	697a      	ldr	r2, [r7, #20]
 800ea34:	0151      	lsls	r1, r2, #5
 800ea36:	69ba      	ldr	r2, [r7, #24]
 800ea38:	440a      	add	r2, r1
 800ea3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ea3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ea42:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ea44:	697b      	ldr	r3, [r7, #20]
 800ea46:	015a      	lsls	r2, r3, #5
 800ea48:	69bb      	ldr	r3, [r7, #24]
 800ea4a:	4413      	add	r3, r2
 800ea4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	697a      	ldr	r2, [r7, #20]
 800ea54:	0151      	lsls	r1, r2, #5
 800ea56:	69ba      	ldr	r2, [r7, #24]
 800ea58:	440a      	add	r2, r1
 800ea5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ea5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ea62:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800ea64:	697b      	ldr	r3, [r7, #20]
 800ea66:	015a      	lsls	r2, r3, #5
 800ea68:	69bb      	ldr	r3, [r7, #24]
 800ea6a:	4413      	add	r3, r2
 800ea6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	697a      	ldr	r2, [r7, #20]
 800ea74:	0151      	lsls	r1, r2, #5
 800ea76:	69ba      	ldr	r2, [r7, #24]
 800ea78:	440a      	add	r2, r1
 800ea7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ea7e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ea82:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800ea84:	69fb      	ldr	r3, [r7, #28]
 800ea86:	3301      	adds	r3, #1
 800ea88:	61fb      	str	r3, [r7, #28]
 800ea8a:	69fb      	ldr	r3, [r7, #28]
 800ea8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ea90:	d81d      	bhi.n	800eace <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ea92:	697b      	ldr	r3, [r7, #20]
 800ea94:	015a      	lsls	r2, r3, #5
 800ea96:	69bb      	ldr	r3, [r7, #24]
 800ea98:	4413      	add	r3, r2
 800ea9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800eaa4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eaa8:	d0ec      	beq.n	800ea84 <USB_HC_Halt+0x1de>
 800eaaa:	e011      	b.n	800ead0 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800eaac:	697b      	ldr	r3, [r7, #20]
 800eaae:	015a      	lsls	r2, r3, #5
 800eab0:	69bb      	ldr	r3, [r7, #24]
 800eab2:	4413      	add	r3, r2
 800eab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	697a      	ldr	r2, [r7, #20]
 800eabc:	0151      	lsls	r1, r2, #5
 800eabe:	69ba      	ldr	r2, [r7, #24]
 800eac0:	440a      	add	r2, r1
 800eac2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800eac6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800eaca:	6013      	str	r3, [r2, #0]
 800eacc:	e000      	b.n	800ead0 <USB_HC_Halt+0x22a>
          break;
 800eace:	bf00      	nop
    }
  }

  return HAL_OK;
 800ead0:	2300      	movs	r3, #0
}
 800ead2:	4618      	mov	r0, r3
 800ead4:	3724      	adds	r7, #36	; 0x24
 800ead6:	46bd      	mov	sp, r7
 800ead8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eadc:	4770      	bx	lr
	...

0800eae0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800eae0:	b480      	push	{r7}
 800eae2:	b087      	sub	sp, #28
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
 800eae8:	460b      	mov	r3, r1
 800eaea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800eaf0:	78fb      	ldrb	r3, [r7, #3]
 800eaf2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800eaf4:	2301      	movs	r3, #1
 800eaf6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	04da      	lsls	r2, r3, #19
 800eafc:	4b15      	ldr	r3, [pc, #84]	; (800eb54 <USB_DoPing+0x74>)
 800eafe:	4013      	ands	r3, r2
 800eb00:	693a      	ldr	r2, [r7, #16]
 800eb02:	0151      	lsls	r1, r2, #5
 800eb04:	697a      	ldr	r2, [r7, #20]
 800eb06:	440a      	add	r2, r1
 800eb08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800eb0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800eb10:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800eb12:	693b      	ldr	r3, [r7, #16]
 800eb14:	015a      	lsls	r2, r3, #5
 800eb16:	697b      	ldr	r3, [r7, #20]
 800eb18:	4413      	add	r3, r2
 800eb1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800eb22:	68bb      	ldr	r3, [r7, #8]
 800eb24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800eb28:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800eb2a:	68bb      	ldr	r3, [r7, #8]
 800eb2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800eb30:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800eb32:	693b      	ldr	r3, [r7, #16]
 800eb34:	015a      	lsls	r2, r3, #5
 800eb36:	697b      	ldr	r3, [r7, #20]
 800eb38:	4413      	add	r3, r2
 800eb3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800eb3e:	461a      	mov	r2, r3
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800eb44:	2300      	movs	r3, #0
}
 800eb46:	4618      	mov	r0, r3
 800eb48:	371c      	adds	r7, #28
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb50:	4770      	bx	lr
 800eb52:	bf00      	nop
 800eb54:	1ff80000 	.word	0x1ff80000

0800eb58 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b086      	sub	sp, #24
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800eb64:	2300      	movs	r3, #0
 800eb66:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800eb68:	6878      	ldr	r0, [r7, #4]
 800eb6a:	f7ff f97a 	bl	800de62 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800eb6e:	2110      	movs	r1, #16
 800eb70:	6878      	ldr	r0, [r7, #4]
 800eb72:	f7ff f9b1 	bl	800ded8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800eb76:	6878      	ldr	r0, [r7, #4]
 800eb78:	f7ff f9d4 	bl	800df24 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	613b      	str	r3, [r7, #16]
 800eb80:	e01f      	b.n	800ebc2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800eb82:	693b      	ldr	r3, [r7, #16]
 800eb84:	015a      	lsls	r2, r3, #5
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	4413      	add	r3, r2
 800eb8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800eb92:	68bb      	ldr	r3, [r7, #8]
 800eb94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800eb98:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800eb9a:	68bb      	ldr	r3, [r7, #8]
 800eb9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eba0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800eba2:	68bb      	ldr	r3, [r7, #8]
 800eba4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800eba8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800ebaa:	693b      	ldr	r3, [r7, #16]
 800ebac:	015a      	lsls	r2, r3, #5
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	4413      	add	r3, r2
 800ebb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ebb6:	461a      	mov	r2, r3
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800ebbc:	693b      	ldr	r3, [r7, #16]
 800ebbe:	3301      	adds	r3, #1
 800ebc0:	613b      	str	r3, [r7, #16]
 800ebc2:	693b      	ldr	r3, [r7, #16]
 800ebc4:	2b0f      	cmp	r3, #15
 800ebc6:	d9dc      	bls.n	800eb82 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800ebc8:	2300      	movs	r3, #0
 800ebca:	613b      	str	r3, [r7, #16]
 800ebcc:	e034      	b.n	800ec38 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800ebce:	693b      	ldr	r3, [r7, #16]
 800ebd0:	015a      	lsls	r2, r3, #5
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	4413      	add	r3, r2
 800ebd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800ebde:	68bb      	ldr	r3, [r7, #8]
 800ebe0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ebe4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800ebe6:	68bb      	ldr	r3, [r7, #8]
 800ebe8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ebec:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ebee:	68bb      	ldr	r3, [r7, #8]
 800ebf0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ebf4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800ebf6:	693b      	ldr	r3, [r7, #16]
 800ebf8:	015a      	lsls	r2, r3, #5
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	4413      	add	r3, r2
 800ebfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ec02:	461a      	mov	r2, r3
 800ec04:	68bb      	ldr	r3, [r7, #8]
 800ec06:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800ec08:	697b      	ldr	r3, [r7, #20]
 800ec0a:	3301      	adds	r3, #1
 800ec0c:	617b      	str	r3, [r7, #20]
 800ec0e:	697b      	ldr	r3, [r7, #20]
 800ec10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ec14:	d80c      	bhi.n	800ec30 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ec16:	693b      	ldr	r3, [r7, #16]
 800ec18:	015a      	lsls	r2, r3, #5
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	4413      	add	r3, r2
 800ec1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ec28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ec2c:	d0ec      	beq.n	800ec08 <USB_StopHost+0xb0>
 800ec2e:	e000      	b.n	800ec32 <USB_StopHost+0xda>
        break;
 800ec30:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800ec32:	693b      	ldr	r3, [r7, #16]
 800ec34:	3301      	adds	r3, #1
 800ec36:	613b      	str	r3, [r7, #16]
 800ec38:	693b      	ldr	r3, [r7, #16]
 800ec3a:	2b0f      	cmp	r3, #15
 800ec3c:	d9c7      	bls.n	800ebce <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ec44:	461a      	mov	r2, r3
 800ec46:	f04f 33ff 	mov.w	r3, #4294967295
 800ec4a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	f04f 32ff 	mov.w	r2, #4294967295
 800ec52:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800ec54:	6878      	ldr	r0, [r7, #4]
 800ec56:	f7ff f8f3 	bl	800de40 <USB_EnableGlobalInt>

  return HAL_OK;
 800ec5a:	2300      	movs	r3, #0
}
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	3718      	adds	r7, #24
 800ec60:	46bd      	mov	sp, r7
 800ec62:	bd80      	pop	{r7, pc}

0800ec64 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800ec68:	4904      	ldr	r1, [pc, #16]	; (800ec7c <MX_FATFS_Init+0x18>)
 800ec6a:	4805      	ldr	r0, [pc, #20]	; (800ec80 <MX_FATFS_Init+0x1c>)
 800ec6c:	f006 fc20 	bl	80154b0 <FATFS_LinkDriver>
 800ec70:	4603      	mov	r3, r0
 800ec72:	461a      	mov	r2, r3
 800ec74:	4b03      	ldr	r3, [pc, #12]	; (800ec84 <MX_FATFS_Init+0x20>)
 800ec76:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ec78:	bf00      	nop
 800ec7a:	bd80      	pop	{r7, pc}
 800ec7c:	2400b460 	.word	0x2400b460
 800ec80:	24000018 	.word	0x24000018
 800ec84:	2400b464 	.word	0x2400b464

0800ec88 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ec88:	b480      	push	{r7}
 800ec8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ec8c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ec8e:	4618      	mov	r0, r3
 800ec90:	46bd      	mov	sp, r7
 800ec92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec96:	4770      	bx	lr

0800ec98 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b082      	sub	sp, #8
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	4603      	mov	r3, r0
 800eca0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800eca2:	79fb      	ldrb	r3, [r7, #7]
 800eca4:	4618      	mov	r0, r3
 800eca6:	f000 f9d9 	bl	800f05c <USER_SPI_initialize>
 800ecaa:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800ecac:	4618      	mov	r0, r3
 800ecae:	3708      	adds	r7, #8
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}

0800ecb4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b082      	sub	sp, #8
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	4603      	mov	r3, r0
 800ecbc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */

	return USER_SPI_status(pdrv); //ADD THIS LINE
 800ecbe:	79fb      	ldrb	r3, [r7, #7]
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	f000 fab5 	bl	800f230 <USER_SPI_status>
 800ecc6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3708      	adds	r7, #8
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}

0800ecd0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b084      	sub	sp, #16
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	60b9      	str	r1, [r7, #8]
 800ecd8:	607a      	str	r2, [r7, #4]
 800ecda:	603b      	str	r3, [r7, #0]
 800ecdc:	4603      	mov	r3, r0
 800ecde:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 800ece0:	7bf8      	ldrb	r0, [r7, #15]
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	687a      	ldr	r2, [r7, #4]
 800ece6:	68b9      	ldr	r1, [r7, #8]
 800ece8:	f000 fab8 	bl	800f25c <USER_SPI_read>
 800ecec:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800ecee:	4618      	mov	r0, r3
 800ecf0:	3710      	adds	r7, #16
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	bd80      	pop	{r7, pc}

0800ecf6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800ecf6:	b580      	push	{r7, lr}
 800ecf8:	b084      	sub	sp, #16
 800ecfa:	af00      	add	r7, sp, #0
 800ecfc:	60b9      	str	r1, [r7, #8]
 800ecfe:	607a      	str	r2, [r7, #4]
 800ed00:	603b      	str	r3, [r7, #0]
 800ed02:	4603      	mov	r3, r0
 800ed04:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 800ed06:	7bf8      	ldrb	r0, [r7, #15]
 800ed08:	683b      	ldr	r3, [r7, #0]
 800ed0a:	687a      	ldr	r2, [r7, #4]
 800ed0c:	68b9      	ldr	r1, [r7, #8]
 800ed0e:	f000 fb0b 	bl	800f328 <USER_SPI_write>
 800ed12:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800ed14:	4618      	mov	r0, r3
 800ed16:	3710      	adds	r7, #16
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	bd80      	pop	{r7, pc}

0800ed1c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b082      	sub	sp, #8
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	4603      	mov	r3, r0
 800ed24:	603a      	str	r2, [r7, #0]
 800ed26:	71fb      	strb	r3, [r7, #7]
 800ed28:	460b      	mov	r3, r1
 800ed2a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 800ed2c:	79b9      	ldrb	r1, [r7, #6]
 800ed2e:	79fb      	ldrb	r3, [r7, #7]
 800ed30:	683a      	ldr	r2, [r7, #0]
 800ed32:	4618      	mov	r0, r3
 800ed34:	f000 fb74 	bl	800f420 <USER_SPI_ioctl>
 800ed38:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	3708      	adds	r7, #8
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}
	...

0800ed44 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b082      	sub	sp, #8
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800ed4c:	f7f3 fc2c 	bl	80025a8 <HAL_GetTick>
 800ed50:	4603      	mov	r3, r0
 800ed52:	4a04      	ldr	r2, [pc, #16]	; (800ed64 <SPI_Timer_On+0x20>)
 800ed54:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800ed56:	4a04      	ldr	r2, [pc, #16]	; (800ed68 <SPI_Timer_On+0x24>)
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	6013      	str	r3, [r2, #0]
}
 800ed5c:	bf00      	nop
 800ed5e:	3708      	adds	r7, #8
 800ed60:	46bd      	mov	sp, r7
 800ed62:	bd80      	pop	{r7, pc}
 800ed64:	2400b8cc 	.word	0x2400b8cc
 800ed68:	2400b8d0 	.word	0x2400b8d0

0800ed6c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800ed70:	f7f3 fc1a 	bl	80025a8 <HAL_GetTick>
 800ed74:	4602      	mov	r2, r0
 800ed76:	4b06      	ldr	r3, [pc, #24]	; (800ed90 <SPI_Timer_Status+0x24>)
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	1ad2      	subs	r2, r2, r3
 800ed7c:	4b05      	ldr	r3, [pc, #20]	; (800ed94 <SPI_Timer_Status+0x28>)
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	429a      	cmp	r2, r3
 800ed82:	bf34      	ite	cc
 800ed84:	2301      	movcc	r3, #1
 800ed86:	2300      	movcs	r3, #0
 800ed88:	b2db      	uxtb	r3, r3
}
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	bd80      	pop	{r7, pc}
 800ed8e:	bf00      	nop
 800ed90:	2400b8cc 	.word	0x2400b8cc
 800ed94:	2400b8d0 	.word	0x2400b8d0

0800ed98 <xchg_spi>:
/* SPI controls (Platform dependent)                                     */
/*-----------------------------------------------------------------------*/

/* Exchange a byte */
static BYTE xchg_spi (BYTE dat	/* Data to send */)
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b086      	sub	sp, #24
 800ed9c:	af02      	add	r7, sp, #8
 800ed9e:	4603      	mov	r3, r0
 800eda0:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800eda2:	f107 020f 	add.w	r2, r7, #15
 800eda6:	1df9      	adds	r1, r7, #7
 800eda8:	2332      	movs	r3, #50	; 0x32
 800edaa:	9300      	str	r3, [sp, #0]
 800edac:	2301      	movs	r3, #1
 800edae:	4804      	ldr	r0, [pc, #16]	; (800edc0 <xchg_spi+0x28>)
 800edb0:	f7fb ff62 	bl	800ac78 <HAL_SPI_TransmitReceive>
    return rxDat;
 800edb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800edb6:	4618      	mov	r0, r3
 800edb8:	3710      	adds	r7, #16
 800edba:	46bd      	mov	sp, r7
 800edbc:	bd80      	pop	{r7, pc}
 800edbe:	bf00      	nop
 800edc0:	2400b0ec 	.word	0x2400b0ec

0800edc4 <rcvr_spi_multi>:


/* Receive multiple byte */
static void rcvr_spi_multi (BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */)
{
 800edc4:	b590      	push	{r4, r7, lr}
 800edc6:	b085      	sub	sp, #20
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
 800edcc:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++)
 800edce:	2300      	movs	r3, #0
 800edd0:	60fb      	str	r3, [r7, #12]
 800edd2:	e00a      	b.n	800edea <rcvr_spi_multi+0x26>
	{
		*(buff+i) = xchg_spi(0xFF);
 800edd4:	687a      	ldr	r2, [r7, #4]
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	18d4      	adds	r4, r2, r3
 800edda:	20ff      	movs	r0, #255	; 0xff
 800eddc:	f7ff ffdc 	bl	800ed98 <xchg_spi>
 800ede0:	4603      	mov	r3, r0
 800ede2:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++)
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	3301      	adds	r3, #1
 800ede8:	60fb      	str	r3, [r7, #12]
 800edea:	68fa      	ldr	r2, [r7, #12]
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	429a      	cmp	r2, r3
 800edf0:	d3f0      	bcc.n	800edd4 <rcvr_spi_multi+0x10>
	}
}
 800edf2:	bf00      	nop
 800edf4:	bf00      	nop
 800edf6:	3714      	adds	r7, #20
 800edf8:	46bd      	mov	sp, r7
 800edfa:	bd90      	pop	{r4, r7, pc}

0800edfc <xmit_spi_multi>:

#if _USE_WRITE
/* Send multiple byte */
static void xmit_spi_multi (const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b084      	sub	sp, #16
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
 800ee04:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++)
 800ee06:	2300      	movs	r3, #0
 800ee08:	60fb      	str	r3, [r7, #12]
 800ee0a:	e009      	b.n	800ee20 <xmit_spi_multi+0x24>
	{
		xchg_spi(*(buff+i));
 800ee0c:	687a      	ldr	r2, [r7, #4]
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	4413      	add	r3, r2
 800ee12:	781b      	ldrb	r3, [r3, #0]
 800ee14:	4618      	mov	r0, r3
 800ee16:	f7ff ffbf 	bl	800ed98 <xchg_spi>
	for(UINT i=0; i<btx; i++)
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	3301      	adds	r3, #1
 800ee1e:	60fb      	str	r3, [r7, #12]
 800ee20:	68fa      	ldr	r2, [r7, #12]
 800ee22:	683b      	ldr	r3, [r7, #0]
 800ee24:	429a      	cmp	r2, r3
 800ee26:	d3f1      	bcc.n	800ee0c <xmit_spi_multi+0x10>
	}
}
 800ee28:	bf00      	nop
 800ee2a:	bf00      	nop
 800ee2c:	3710      	adds	r7, #16
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	bd80      	pop	{r7, pc}

0800ee32 <wait_ready>:
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/

static int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */)
{
 800ee32:	b580      	push	{r7, lr}
 800ee34:	b086      	sub	sp, #24
 800ee36:	af00      	add	r7, sp, #0
 800ee38:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800ee3a:	f7f3 fbb5 	bl	80025a8 <HAL_GetTick>
 800ee3e:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800ee44:	20ff      	movs	r0, #255	; 0xff
 800ee46:	f7ff ffa7 	bl	800ed98 <xchg_spi>
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800ee4e:	7bfb      	ldrb	r3, [r7, #15]
 800ee50:	2bff      	cmp	r3, #255	; 0xff
 800ee52:	d007      	beq.n	800ee64 <wait_ready+0x32>
 800ee54:	f7f3 fba8 	bl	80025a8 <HAL_GetTick>
 800ee58:	4602      	mov	r2, r0
 800ee5a:	697b      	ldr	r3, [r7, #20]
 800ee5c:	1ad3      	subs	r3, r2, r3
 800ee5e:	693a      	ldr	r2, [r7, #16]
 800ee60:	429a      	cmp	r2, r3
 800ee62:	d8ef      	bhi.n	800ee44 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800ee64:	7bfb      	ldrb	r3, [r7, #15]
 800ee66:	2bff      	cmp	r3, #255	; 0xff
 800ee68:	bf0c      	ite	eq
 800ee6a:	2301      	moveq	r3, #1
 800ee6c:	2300      	movne	r3, #0
 800ee6e:	b2db      	uxtb	r3, r3
}
 800ee70:	4618      	mov	r0, r3
 800ee72:	3718      	adds	r7, #24
 800ee74:	46bd      	mov	sp, r7
 800ee76:	bd80      	pop	{r7, pc}

0800ee78 <despiselect>:
/*-----------------------------------------------------------------------*/
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static void despiselect (void)
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800ee7c:	2201      	movs	r2, #1
 800ee7e:	2110      	movs	r1, #16
 800ee80:	4803      	ldr	r0, [pc, #12]	; (800ee90 <despiselect+0x18>)
 800ee82:	f7f7 f985 	bl	8006190 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800ee86:	20ff      	movs	r0, #255	; 0xff
 800ee88:	f7ff ff86 	bl	800ed98 <xchg_spi>

}
 800ee8c:	bf00      	nop
 800ee8e:	bd80      	pop	{r7, pc}
 800ee90:	58020c00 	.word	0x58020c00

0800ee94 <spiselect>:
/*-----------------------------------------------------------------------*/
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800ee98:	2200      	movs	r2, #0
 800ee9a:	2110      	movs	r1, #16
 800ee9c:	4809      	ldr	r0, [pc, #36]	; (800eec4 <spiselect+0x30>)
 800ee9e:	f7f7 f977 	bl	8006190 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800eea2:	20ff      	movs	r0, #255	; 0xff
 800eea4:	f7ff ff78 	bl	800ed98 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800eea8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800eeac:	f7ff ffc1 	bl	800ee32 <wait_ready>
 800eeb0:	4603      	mov	r3, r0
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d001      	beq.n	800eeba <spiselect+0x26>
 800eeb6:	2301      	movs	r3, #1
 800eeb8:	e002      	b.n	800eec0 <spiselect+0x2c>

	despiselect();
 800eeba:	f7ff ffdd 	bl	800ee78 <despiselect>
	return 0;	/* Timeout */
 800eebe:	2300      	movs	r3, #0
}
 800eec0:	4618      	mov	r0, r3
 800eec2:	bd80      	pop	{r7, pc}
 800eec4:	58020c00 	.word	0x58020c00

0800eec8 <rcvr_datablock>:
/*-----------------------------------------------------------------------*/

static int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b084      	sub	sp, #16
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
 800eed0:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800eed2:	20c8      	movs	r0, #200	; 0xc8
 800eed4:	f7ff ff36 	bl	800ed44 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800eed8:	20ff      	movs	r0, #255	; 0xff
 800eeda:	f7ff ff5d 	bl	800ed98 <xchg_spi>
 800eede:	4603      	mov	r3, r0
 800eee0:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800eee2:	7bfb      	ldrb	r3, [r7, #15]
 800eee4:	2bff      	cmp	r3, #255	; 0xff
 800eee6:	d104      	bne.n	800eef2 <rcvr_datablock+0x2a>
 800eee8:	f7ff ff40 	bl	800ed6c <SPI_Timer_Status>
 800eeec:	4603      	mov	r3, r0
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d1f2      	bne.n	800eed8 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800eef2:	7bfb      	ldrb	r3, [r7, #15]
 800eef4:	2bfe      	cmp	r3, #254	; 0xfe
 800eef6:	d001      	beq.n	800eefc <rcvr_datablock+0x34>
 800eef8:	2300      	movs	r3, #0
 800eefa:	e00a      	b.n	800ef12 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800eefc:	6839      	ldr	r1, [r7, #0]
 800eefe:	6878      	ldr	r0, [r7, #4]
 800ef00:	f7ff ff60 	bl	800edc4 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800ef04:	20ff      	movs	r0, #255	; 0xff
 800ef06:	f7ff ff47 	bl	800ed98 <xchg_spi>
 800ef0a:	20ff      	movs	r0, #255	; 0xff
 800ef0c:	f7ff ff44 	bl	800ed98 <xchg_spi>

	return 1;						/* Function succeeded */
 800ef10:	2301      	movs	r3, #1
}
 800ef12:	4618      	mov	r0, r3
 800ef14:	3710      	adds	r7, #16
 800ef16:	46bd      	mov	sp, r7
 800ef18:	bd80      	pop	{r7, pc}

0800ef1a <xmit_datablock>:

#if _USE_WRITE
static int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */)
{
 800ef1a:	b580      	push	{r7, lr}
 800ef1c:	b084      	sub	sp, #16
 800ef1e:	af00      	add	r7, sp, #0
 800ef20:	6078      	str	r0, [r7, #4]
 800ef22:	460b      	mov	r3, r1
 800ef24:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800ef26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ef2a:	f7ff ff82 	bl	800ee32 <wait_ready>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d101      	bne.n	800ef38 <xmit_datablock+0x1e>
 800ef34:	2300      	movs	r3, #0
 800ef36:	e01e      	b.n	800ef76 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800ef38:	78fb      	ldrb	r3, [r7, #3]
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f7ff ff2c 	bl	800ed98 <xchg_spi>
	if (token != 0xFD)
 800ef40:	78fb      	ldrb	r3, [r7, #3]
 800ef42:	2bfd      	cmp	r3, #253	; 0xfd
 800ef44:	d016      	beq.n	800ef74 <xmit_datablock+0x5a>
	{				/* Send data if token is other than StopTran */
		xmit_spi_multi(buff, 512);		/* Data */
 800ef46:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ef4a:	6878      	ldr	r0, [r7, #4]
 800ef4c:	f7ff ff56 	bl	800edfc <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800ef50:	20ff      	movs	r0, #255	; 0xff
 800ef52:	f7ff ff21 	bl	800ed98 <xchg_spi>
 800ef56:	20ff      	movs	r0, #255	; 0xff
 800ef58:	f7ff ff1e 	bl	800ed98 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800ef5c:	20ff      	movs	r0, #255	; 0xff
 800ef5e:	f7ff ff1b 	bl	800ed98 <xchg_spi>
 800ef62:	4603      	mov	r3, r0
 800ef64:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800ef66:	7bfb      	ldrb	r3, [r7, #15]
 800ef68:	f003 031f 	and.w	r3, r3, #31
 800ef6c:	2b05      	cmp	r3, #5
 800ef6e:	d001      	beq.n	800ef74 <xmit_datablock+0x5a>
 800ef70:	2300      	movs	r3, #0
 800ef72:	e000      	b.n	800ef76 <xmit_datablock+0x5c>
	}
	return 1;
 800ef74:	2301      	movs	r3, #1
}
 800ef76:	4618      	mov	r0, r3
 800ef78:	3710      	adds	r7, #16
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	bd80      	pop	{r7, pc}

0800ef7e <send_cmd>:
/*-----------------------------------------------------------------------*/

static BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */)
{
 800ef7e:	b580      	push	{r7, lr}
 800ef80:	b084      	sub	sp, #16
 800ef82:	af00      	add	r7, sp, #0
 800ef84:	4603      	mov	r3, r0
 800ef86:	6039      	str	r1, [r7, #0]
 800ef88:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80)
 800ef8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	da0e      	bge.n	800efb0 <send_cmd+0x32>
	{	/* Send a CMD55 prior to ACMD<n> */
		cmd &= 0x7F;
 800ef92:	79fb      	ldrb	r3, [r7, #7]
 800ef94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef98:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800ef9a:	2100      	movs	r1, #0
 800ef9c:	2037      	movs	r0, #55	; 0x37
 800ef9e:	f7ff ffee 	bl	800ef7e <send_cmd>
 800efa2:	4603      	mov	r3, r0
 800efa4:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800efa6:	7bbb      	ldrb	r3, [r7, #14]
 800efa8:	2b01      	cmp	r3, #1
 800efaa:	d901      	bls.n	800efb0 <send_cmd+0x32>
 800efac:	7bbb      	ldrb	r3, [r7, #14]
 800efae:	e051      	b.n	800f054 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12)
 800efb0:	79fb      	ldrb	r3, [r7, #7]
 800efb2:	2b0c      	cmp	r3, #12
 800efb4:	d008      	beq.n	800efc8 <send_cmd+0x4a>
	{
		despiselect();
 800efb6:	f7ff ff5f 	bl	800ee78 <despiselect>
		if (!spiselect()) return 0xFF;
 800efba:	f7ff ff6b 	bl	800ee94 <spiselect>
 800efbe:	4603      	mov	r3, r0
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d101      	bne.n	800efc8 <send_cmd+0x4a>
 800efc4:	23ff      	movs	r3, #255	; 0xff
 800efc6:	e045      	b.n	800f054 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800efc8:	79fb      	ldrb	r3, [r7, #7]
 800efca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efce:	b2db      	uxtb	r3, r3
 800efd0:	4618      	mov	r0, r3
 800efd2:	f7ff fee1 	bl	800ed98 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	0e1b      	lsrs	r3, r3, #24
 800efda:	b2db      	uxtb	r3, r3
 800efdc:	4618      	mov	r0, r3
 800efde:	f7ff fedb 	bl	800ed98 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800efe2:	683b      	ldr	r3, [r7, #0]
 800efe4:	0c1b      	lsrs	r3, r3, #16
 800efe6:	b2db      	uxtb	r3, r3
 800efe8:	4618      	mov	r0, r3
 800efea:	f7ff fed5 	bl	800ed98 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800efee:	683b      	ldr	r3, [r7, #0]
 800eff0:	0a1b      	lsrs	r3, r3, #8
 800eff2:	b2db      	uxtb	r3, r3
 800eff4:	4618      	mov	r0, r3
 800eff6:	f7ff fecf 	bl	800ed98 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800effa:	683b      	ldr	r3, [r7, #0]
 800effc:	b2db      	uxtb	r3, r3
 800effe:	4618      	mov	r0, r3
 800f000:	f7ff feca 	bl	800ed98 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800f004:	2301      	movs	r3, #1
 800f006:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800f008:	79fb      	ldrb	r3, [r7, #7]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d101      	bne.n	800f012 <send_cmd+0x94>
 800f00e:	2395      	movs	r3, #149	; 0x95
 800f010:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800f012:	79fb      	ldrb	r3, [r7, #7]
 800f014:	2b08      	cmp	r3, #8
 800f016:	d101      	bne.n	800f01c <send_cmd+0x9e>
 800f018:	2387      	movs	r3, #135	; 0x87
 800f01a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800f01c:	7bfb      	ldrb	r3, [r7, #15]
 800f01e:	4618      	mov	r0, r3
 800f020:	f7ff feba 	bl	800ed98 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800f024:	79fb      	ldrb	r3, [r7, #7]
 800f026:	2b0c      	cmp	r3, #12
 800f028:	d102      	bne.n	800f030 <send_cmd+0xb2>
 800f02a:	20ff      	movs	r0, #255	; 0xff
 800f02c:	f7ff feb4 	bl	800ed98 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800f030:	230a      	movs	r3, #10
 800f032:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800f034:	20ff      	movs	r0, #255	; 0xff
 800f036:	f7ff feaf 	bl	800ed98 <xchg_spi>
 800f03a:	4603      	mov	r3, r0
 800f03c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800f03e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f042:	2b00      	cmp	r3, #0
 800f044:	da05      	bge.n	800f052 <send_cmd+0xd4>
 800f046:	7bfb      	ldrb	r3, [r7, #15]
 800f048:	3b01      	subs	r3, #1
 800f04a:	73fb      	strb	r3, [r7, #15]
 800f04c:	7bfb      	ldrb	r3, [r7, #15]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d1f0      	bne.n	800f034 <send_cmd+0xb6>

	return res;							/* Return received response */
 800f052:	7bbb      	ldrb	r3, [r7, #14]
}
 800f054:	4618      	mov	r0, r3
 800f056:	3710      	adds	r7, #16
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}

0800f05c <USER_SPI_initialize>:
/* Initialize disk drive                                                 */
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */)
{
 800f05c:	b590      	push	{r4, r7, lr}
 800f05e:	b085      	sub	sp, #20
 800f060:	af00      	add	r7, sp, #0
 800f062:	4603      	mov	r3, r0
 800f064:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800f066:	79fb      	ldrb	r3, [r7, #7]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d001      	beq.n	800f070 <USER_SPI_initialize+0x14>
 800f06c:	2301      	movs	r3, #1
 800f06e:	e0d4      	b.n	800f21a <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800f070:	4b6c      	ldr	r3, [pc, #432]	; (800f224 <USER_SPI_initialize+0x1c8>)
 800f072:	781b      	ldrb	r3, [r3, #0]
 800f074:	b2db      	uxtb	r3, r3
 800f076:	f003 0302 	and.w	r3, r3, #2
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d003      	beq.n	800f086 <USER_SPI_initialize+0x2a>
 800f07e:	4b69      	ldr	r3, [pc, #420]	; (800f224 <USER_SPI_initialize+0x1c8>)
 800f080:	781b      	ldrb	r3, [r3, #0]
 800f082:	b2db      	uxtb	r3, r3
 800f084:	e0c9      	b.n	800f21a <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 800f086:	4b68      	ldr	r3, [pc, #416]	; (800f228 <USER_SPI_initialize+0x1cc>)
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	681a      	ldr	r2, [r3, #0]
 800f08c:	4b66      	ldr	r3, [pc, #408]	; (800f228 <USER_SPI_initialize+0x1cc>)
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	f042 42e0 	orr.w	r2, r2, #1879048192	; 0x70000000
 800f094:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800f096:	230a      	movs	r3, #10
 800f098:	73fb      	strb	r3, [r7, #15]
 800f09a:	e005      	b.n	800f0a8 <USER_SPI_initialize+0x4c>
 800f09c:	20ff      	movs	r0, #255	; 0xff
 800f09e:	f7ff fe7b 	bl	800ed98 <xchg_spi>
 800f0a2:	7bfb      	ldrb	r3, [r7, #15]
 800f0a4:	3b01      	subs	r3, #1
 800f0a6:	73fb      	strb	r3, [r7, #15]
 800f0a8:	7bfb      	ldrb	r3, [r7, #15]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d1f6      	bne.n	800f09c <USER_SPI_initialize+0x40>

	ty = 0;
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800f0b2:	2100      	movs	r1, #0
 800f0b4:	2000      	movs	r0, #0
 800f0b6:	f7ff ff62 	bl	800ef7e <send_cmd>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	2b01      	cmp	r3, #1
 800f0be:	f040 808b 	bne.w	800f1d8 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800f0c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f0c6:	f7ff fe3d 	bl	800ed44 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800f0ca:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f0ce:	2008      	movs	r0, #8
 800f0d0:	f7ff ff55 	bl	800ef7e <send_cmd>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	2b01      	cmp	r3, #1
 800f0d8:	d151      	bne.n	800f17e <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800f0da:	2300      	movs	r3, #0
 800f0dc:	73fb      	strb	r3, [r7, #15]
 800f0de:	e00d      	b.n	800f0fc <USER_SPI_initialize+0xa0>
 800f0e0:	7bfc      	ldrb	r4, [r7, #15]
 800f0e2:	20ff      	movs	r0, #255	; 0xff
 800f0e4:	f7ff fe58 	bl	800ed98 <xchg_spi>
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	461a      	mov	r2, r3
 800f0ec:	f107 0310 	add.w	r3, r7, #16
 800f0f0:	4423      	add	r3, r4
 800f0f2:	f803 2c08 	strb.w	r2, [r3, #-8]
 800f0f6:	7bfb      	ldrb	r3, [r7, #15]
 800f0f8:	3301      	adds	r3, #1
 800f0fa:	73fb      	strb	r3, [r7, #15]
 800f0fc:	7bfb      	ldrb	r3, [r7, #15]
 800f0fe:	2b03      	cmp	r3, #3
 800f100:	d9ee      	bls.n	800f0e0 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800f102:	7abb      	ldrb	r3, [r7, #10]
 800f104:	2b01      	cmp	r3, #1
 800f106:	d167      	bne.n	800f1d8 <USER_SPI_initialize+0x17c>
 800f108:	7afb      	ldrb	r3, [r7, #11]
 800f10a:	2baa      	cmp	r3, #170	; 0xaa
 800f10c:	d164      	bne.n	800f1d8 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800f10e:	bf00      	nop
 800f110:	f7ff fe2c 	bl	800ed6c <SPI_Timer_Status>
 800f114:	4603      	mov	r3, r0
 800f116:	2b00      	cmp	r3, #0
 800f118:	d007      	beq.n	800f12a <USER_SPI_initialize+0xce>
 800f11a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800f11e:	20a9      	movs	r0, #169	; 0xa9
 800f120:	f7ff ff2d 	bl	800ef7e <send_cmd>
 800f124:	4603      	mov	r3, r0
 800f126:	2b00      	cmp	r3, #0
 800f128:	d1f2      	bne.n	800f110 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800f12a:	f7ff fe1f 	bl	800ed6c <SPI_Timer_Status>
 800f12e:	4603      	mov	r3, r0
 800f130:	2b00      	cmp	r3, #0
 800f132:	d051      	beq.n	800f1d8 <USER_SPI_initialize+0x17c>
 800f134:	2100      	movs	r1, #0
 800f136:	203a      	movs	r0, #58	; 0x3a
 800f138:	f7ff ff21 	bl	800ef7e <send_cmd>
 800f13c:	4603      	mov	r3, r0
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d14a      	bne.n	800f1d8 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800f142:	2300      	movs	r3, #0
 800f144:	73fb      	strb	r3, [r7, #15]
 800f146:	e00d      	b.n	800f164 <USER_SPI_initialize+0x108>
 800f148:	7bfc      	ldrb	r4, [r7, #15]
 800f14a:	20ff      	movs	r0, #255	; 0xff
 800f14c:	f7ff fe24 	bl	800ed98 <xchg_spi>
 800f150:	4603      	mov	r3, r0
 800f152:	461a      	mov	r2, r3
 800f154:	f107 0310 	add.w	r3, r7, #16
 800f158:	4423      	add	r3, r4
 800f15a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800f15e:	7bfb      	ldrb	r3, [r7, #15]
 800f160:	3301      	adds	r3, #1
 800f162:	73fb      	strb	r3, [r7, #15]
 800f164:	7bfb      	ldrb	r3, [r7, #15]
 800f166:	2b03      	cmp	r3, #3
 800f168:	d9ee      	bls.n	800f148 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800f16a:	7a3b      	ldrb	r3, [r7, #8]
 800f16c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f170:	2b00      	cmp	r3, #0
 800f172:	d001      	beq.n	800f178 <USER_SPI_initialize+0x11c>
 800f174:	230c      	movs	r3, #12
 800f176:	e000      	b.n	800f17a <USER_SPI_initialize+0x11e>
 800f178:	2304      	movs	r3, #4
 800f17a:	737b      	strb	r3, [r7, #13]
 800f17c:	e02c      	b.n	800f1d8 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800f17e:	2100      	movs	r1, #0
 800f180:	20a9      	movs	r0, #169	; 0xa9
 800f182:	f7ff fefc 	bl	800ef7e <send_cmd>
 800f186:	4603      	mov	r3, r0
 800f188:	2b01      	cmp	r3, #1
 800f18a:	d804      	bhi.n	800f196 <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800f18c:	2302      	movs	r3, #2
 800f18e:	737b      	strb	r3, [r7, #13]
 800f190:	23a9      	movs	r3, #169	; 0xa9
 800f192:	73bb      	strb	r3, [r7, #14]
 800f194:	e003      	b.n	800f19e <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800f196:	2301      	movs	r3, #1
 800f198:	737b      	strb	r3, [r7, #13]
 800f19a:	2301      	movs	r3, #1
 800f19c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800f19e:	bf00      	nop
 800f1a0:	f7ff fde4 	bl	800ed6c <SPI_Timer_Status>
 800f1a4:	4603      	mov	r3, r0
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d007      	beq.n	800f1ba <USER_SPI_initialize+0x15e>
 800f1aa:	7bbb      	ldrb	r3, [r7, #14]
 800f1ac:	2100      	movs	r1, #0
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	f7ff fee5 	bl	800ef7e <send_cmd>
 800f1b4:	4603      	mov	r3, r0
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d1f2      	bne.n	800f1a0 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800f1ba:	f7ff fdd7 	bl	800ed6c <SPI_Timer_Status>
 800f1be:	4603      	mov	r3, r0
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d007      	beq.n	800f1d4 <USER_SPI_initialize+0x178>
 800f1c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f1c8:	2010      	movs	r0, #16
 800f1ca:	f7ff fed8 	bl	800ef7e <send_cmd>
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d001      	beq.n	800f1d8 <USER_SPI_initialize+0x17c>
				ty = 0;
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800f1d8:	4a14      	ldr	r2, [pc, #80]	; (800f22c <USER_SPI_initialize+0x1d0>)
 800f1da:	7b7b      	ldrb	r3, [r7, #13]
 800f1dc:	7013      	strb	r3, [r2, #0]
	despiselect();
 800f1de:	f7ff fe4b 	bl	800ee78 <despiselect>

	if (ty) {			/* OK */
 800f1e2:	7b7b      	ldrb	r3, [r7, #13]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d012      	beq.n	800f20e <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 800f1e8:	4b0f      	ldr	r3, [pc, #60]	; (800f228 <USER_SPI_initialize+0x1cc>)
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800f1f2:	4b0d      	ldr	r3, [pc, #52]	; (800f228 <USER_SPI_initialize+0x1cc>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800f1fa:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800f1fc:	4b09      	ldr	r3, [pc, #36]	; (800f224 <USER_SPI_initialize+0x1c8>)
 800f1fe:	781b      	ldrb	r3, [r3, #0]
 800f200:	b2db      	uxtb	r3, r3
 800f202:	f023 0301 	bic.w	r3, r3, #1
 800f206:	b2da      	uxtb	r2, r3
 800f208:	4b06      	ldr	r3, [pc, #24]	; (800f224 <USER_SPI_initialize+0x1c8>)
 800f20a:	701a      	strb	r2, [r3, #0]
 800f20c:	e002      	b.n	800f214 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800f20e:	4b05      	ldr	r3, [pc, #20]	; (800f224 <USER_SPI_initialize+0x1c8>)
 800f210:	2201      	movs	r2, #1
 800f212:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800f214:	4b03      	ldr	r3, [pc, #12]	; (800f224 <USER_SPI_initialize+0x1c8>)
 800f216:	781b      	ldrb	r3, [r3, #0]
 800f218:	b2db      	uxtb	r3, r3
}
 800f21a:	4618      	mov	r0, r3
 800f21c:	3714      	adds	r7, #20
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd90      	pop	{r4, r7, pc}
 800f222:	bf00      	nop
 800f224:	2400002c 	.word	0x2400002c
 800f228:	2400b0ec 	.word	0x2400b0ec
 800f22c:	2400a42c 	.word	0x2400a42c

0800f230 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800f230:	b480      	push	{r7}
 800f232:	b083      	sub	sp, #12
 800f234:	af00      	add	r7, sp, #0
 800f236:	4603      	mov	r3, r0
 800f238:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800f23a:	79fb      	ldrb	r3, [r7, #7]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d001      	beq.n	800f244 <USER_SPI_status+0x14>
 800f240:	2301      	movs	r3, #1
 800f242:	e002      	b.n	800f24a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800f244:	4b04      	ldr	r3, [pc, #16]	; (800f258 <USER_SPI_status+0x28>)
 800f246:	781b      	ldrb	r3, [r3, #0]
 800f248:	b2db      	uxtb	r3, r3
}
 800f24a:	4618      	mov	r0, r3
 800f24c:	370c      	adds	r7, #12
 800f24e:	46bd      	mov	sp, r7
 800f250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f254:	4770      	bx	lr
 800f256:	bf00      	nop
 800f258:	2400002c 	.word	0x2400002c

0800f25c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b084      	sub	sp, #16
 800f260:	af00      	add	r7, sp, #0
 800f262:	60b9      	str	r1, [r7, #8]
 800f264:	607a      	str	r2, [r7, #4]
 800f266:	603b      	str	r3, [r7, #0]
 800f268:	4603      	mov	r3, r0
 800f26a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800f26c:	7bfb      	ldrb	r3, [r7, #15]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d102      	bne.n	800f278 <USER_SPI_read+0x1c>
 800f272:	683b      	ldr	r3, [r7, #0]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d101      	bne.n	800f27c <USER_SPI_read+0x20>
 800f278:	2304      	movs	r3, #4
 800f27a:	e04d      	b.n	800f318 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800f27c:	4b28      	ldr	r3, [pc, #160]	; (800f320 <USER_SPI_read+0xc4>)
 800f27e:	781b      	ldrb	r3, [r3, #0]
 800f280:	b2db      	uxtb	r3, r3
 800f282:	f003 0301 	and.w	r3, r3, #1
 800f286:	2b00      	cmp	r3, #0
 800f288:	d001      	beq.n	800f28e <USER_SPI_read+0x32>
 800f28a:	2303      	movs	r3, #3
 800f28c:	e044      	b.n	800f318 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800f28e:	4b25      	ldr	r3, [pc, #148]	; (800f324 <USER_SPI_read+0xc8>)
 800f290:	781b      	ldrb	r3, [r3, #0]
 800f292:	f003 0308 	and.w	r3, r3, #8
 800f296:	2b00      	cmp	r3, #0
 800f298:	d102      	bne.n	800f2a0 <USER_SPI_read+0x44>
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	025b      	lsls	r3, r3, #9
 800f29e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800f2a0:	683b      	ldr	r3, [r7, #0]
 800f2a2:	2b01      	cmp	r3, #1
 800f2a4:	d111      	bne.n	800f2ca <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800f2a6:	6879      	ldr	r1, [r7, #4]
 800f2a8:	2011      	movs	r0, #17
 800f2aa:	f7ff fe68 	bl	800ef7e <send_cmd>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d129      	bne.n	800f308 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800f2b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f2b8:	68b8      	ldr	r0, [r7, #8]
 800f2ba:	f7ff fe05 	bl	800eec8 <rcvr_datablock>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d021      	beq.n	800f308 <USER_SPI_read+0xac>
			count = 0;
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	603b      	str	r3, [r7, #0]
 800f2c8:	e01e      	b.n	800f308 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800f2ca:	6879      	ldr	r1, [r7, #4]
 800f2cc:	2012      	movs	r0, #18
 800f2ce:	f7ff fe56 	bl	800ef7e <send_cmd>
 800f2d2:	4603      	mov	r3, r0
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d117      	bne.n	800f308 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800f2d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f2dc:	68b8      	ldr	r0, [r7, #8]
 800f2de:	f7ff fdf3 	bl	800eec8 <rcvr_datablock>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d00a      	beq.n	800f2fe <USER_SPI_read+0xa2>
				buff += 512;
 800f2e8:	68bb      	ldr	r3, [r7, #8]
 800f2ea:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800f2ee:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	3b01      	subs	r3, #1
 800f2f4:	603b      	str	r3, [r7, #0]
 800f2f6:	683b      	ldr	r3, [r7, #0]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d1ed      	bne.n	800f2d8 <USER_SPI_read+0x7c>
 800f2fc:	e000      	b.n	800f300 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800f2fe:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800f300:	2100      	movs	r1, #0
 800f302:	200c      	movs	r0, #12
 800f304:	f7ff fe3b 	bl	800ef7e <send_cmd>
		}
	}
	despiselect();
 800f308:	f7ff fdb6 	bl	800ee78 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800f30c:	683b      	ldr	r3, [r7, #0]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	bf14      	ite	ne
 800f312:	2301      	movne	r3, #1
 800f314:	2300      	moveq	r3, #0
 800f316:	b2db      	uxtb	r3, r3
}
 800f318:	4618      	mov	r0, r3
 800f31a:	3710      	adds	r7, #16
 800f31c:	46bd      	mov	sp, r7
 800f31e:	bd80      	pop	{r7, pc}
 800f320:	2400002c 	.word	0x2400002c
 800f324:	2400a42c 	.word	0x2400a42c

0800f328 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b084      	sub	sp, #16
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	60b9      	str	r1, [r7, #8]
 800f330:	607a      	str	r2, [r7, #4]
 800f332:	603b      	str	r3, [r7, #0]
 800f334:	4603      	mov	r3, r0
 800f336:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800f338:	7bfb      	ldrb	r3, [r7, #15]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d102      	bne.n	800f344 <USER_SPI_write+0x1c>
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d101      	bne.n	800f348 <USER_SPI_write+0x20>
 800f344:	2304      	movs	r3, #4
 800f346:	e063      	b.n	800f410 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800f348:	4b33      	ldr	r3, [pc, #204]	; (800f418 <USER_SPI_write+0xf0>)
 800f34a:	781b      	ldrb	r3, [r3, #0]
 800f34c:	b2db      	uxtb	r3, r3
 800f34e:	f003 0301 	and.w	r3, r3, #1
 800f352:	2b00      	cmp	r3, #0
 800f354:	d001      	beq.n	800f35a <USER_SPI_write+0x32>
 800f356:	2303      	movs	r3, #3
 800f358:	e05a      	b.n	800f410 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800f35a:	4b2f      	ldr	r3, [pc, #188]	; (800f418 <USER_SPI_write+0xf0>)
 800f35c:	781b      	ldrb	r3, [r3, #0]
 800f35e:	b2db      	uxtb	r3, r3
 800f360:	f003 0304 	and.w	r3, r3, #4
 800f364:	2b00      	cmp	r3, #0
 800f366:	d001      	beq.n	800f36c <USER_SPI_write+0x44>
 800f368:	2302      	movs	r3, #2
 800f36a:	e051      	b.n	800f410 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800f36c:	4b2b      	ldr	r3, [pc, #172]	; (800f41c <USER_SPI_write+0xf4>)
 800f36e:	781b      	ldrb	r3, [r3, #0]
 800f370:	f003 0308 	and.w	r3, r3, #8
 800f374:	2b00      	cmp	r3, #0
 800f376:	d102      	bne.n	800f37e <USER_SPI_write+0x56>
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	025b      	lsls	r3, r3, #9
 800f37c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	2b01      	cmp	r3, #1
 800f382:	d110      	bne.n	800f3a6 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800f384:	6879      	ldr	r1, [r7, #4]
 800f386:	2018      	movs	r0, #24
 800f388:	f7ff fdf9 	bl	800ef7e <send_cmd>
 800f38c:	4603      	mov	r3, r0
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d136      	bne.n	800f400 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800f392:	21fe      	movs	r1, #254	; 0xfe
 800f394:	68b8      	ldr	r0, [r7, #8]
 800f396:	f7ff fdc0 	bl	800ef1a <xmit_datablock>
 800f39a:	4603      	mov	r3, r0
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d02f      	beq.n	800f400 <USER_SPI_write+0xd8>
			count = 0;
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	603b      	str	r3, [r7, #0]
 800f3a4:	e02c      	b.n	800f400 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800f3a6:	4b1d      	ldr	r3, [pc, #116]	; (800f41c <USER_SPI_write+0xf4>)
 800f3a8:	781b      	ldrb	r3, [r3, #0]
 800f3aa:	f003 0306 	and.w	r3, r3, #6
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d003      	beq.n	800f3ba <USER_SPI_write+0x92>
 800f3b2:	6839      	ldr	r1, [r7, #0]
 800f3b4:	2097      	movs	r0, #151	; 0x97
 800f3b6:	f7ff fde2 	bl	800ef7e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800f3ba:	6879      	ldr	r1, [r7, #4]
 800f3bc:	2019      	movs	r0, #25
 800f3be:	f7ff fdde 	bl	800ef7e <send_cmd>
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d11b      	bne.n	800f400 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800f3c8:	21fc      	movs	r1, #252	; 0xfc
 800f3ca:	68b8      	ldr	r0, [r7, #8]
 800f3cc:	f7ff fda5 	bl	800ef1a <xmit_datablock>
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d00a      	beq.n	800f3ec <USER_SPI_write+0xc4>
				buff += 512;
 800f3d6:	68bb      	ldr	r3, [r7, #8]
 800f3d8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800f3dc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	3b01      	subs	r3, #1
 800f3e2:	603b      	str	r3, [r7, #0]
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d1ee      	bne.n	800f3c8 <USER_SPI_write+0xa0>
 800f3ea:	e000      	b.n	800f3ee <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800f3ec:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800f3ee:	21fd      	movs	r1, #253	; 0xfd
 800f3f0:	2000      	movs	r0, #0
 800f3f2:	f7ff fd92 	bl	800ef1a <xmit_datablock>
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d101      	bne.n	800f400 <USER_SPI_write+0xd8>
 800f3fc:	2301      	movs	r3, #1
 800f3fe:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800f400:	f7ff fd3a 	bl	800ee78 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	2b00      	cmp	r3, #0
 800f408:	bf14      	ite	ne
 800f40a:	2301      	movne	r3, #1
 800f40c:	2300      	moveq	r3, #0
 800f40e:	b2db      	uxtb	r3, r3
}
 800f410:	4618      	mov	r0, r3
 800f412:	3710      	adds	r7, #16
 800f414:	46bd      	mov	sp, r7
 800f416:	bd80      	pop	{r7, pc}
 800f418:	2400002c 	.word	0x2400002c
 800f41c:	2400a42c 	.word	0x2400a42c

0800f420 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b08c      	sub	sp, #48	; 0x30
 800f424:	af00      	add	r7, sp, #0
 800f426:	4603      	mov	r3, r0
 800f428:	603a      	str	r2, [r7, #0]
 800f42a:	71fb      	strb	r3, [r7, #7]
 800f42c:	460b      	mov	r3, r1
 800f42e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800f430:	79fb      	ldrb	r3, [r7, #7]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d001      	beq.n	800f43a <USER_SPI_ioctl+0x1a>
 800f436:	2304      	movs	r3, #4
 800f438:	e15a      	b.n	800f6f0 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800f43a:	4baf      	ldr	r3, [pc, #700]	; (800f6f8 <USER_SPI_ioctl+0x2d8>)
 800f43c:	781b      	ldrb	r3, [r3, #0]
 800f43e:	b2db      	uxtb	r3, r3
 800f440:	f003 0301 	and.w	r3, r3, #1
 800f444:	2b00      	cmp	r3, #0
 800f446:	d001      	beq.n	800f44c <USER_SPI_ioctl+0x2c>
 800f448:	2303      	movs	r3, #3
 800f44a:	e151      	b.n	800f6f0 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800f44c:	2301      	movs	r3, #1
 800f44e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800f452:	79bb      	ldrb	r3, [r7, #6]
 800f454:	2b04      	cmp	r3, #4
 800f456:	f200 8136 	bhi.w	800f6c6 <USER_SPI_ioctl+0x2a6>
 800f45a:	a201      	add	r2, pc, #4	; (adr r2, 800f460 <USER_SPI_ioctl+0x40>)
 800f45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f460:	0800f475 	.word	0x0800f475
 800f464:	0800f489 	.word	0x0800f489
 800f468:	0800f6c7 	.word	0x0800f6c7
 800f46c:	0800f535 	.word	0x0800f535
 800f470:	0800f62b 	.word	0x0800f62b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800f474:	f7ff fd0e 	bl	800ee94 <spiselect>
 800f478:	4603      	mov	r3, r0
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	f000 8127 	beq.w	800f6ce <USER_SPI_ioctl+0x2ae>
 800f480:	2300      	movs	r3, #0
 800f482:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800f486:	e122      	b.n	800f6ce <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800f488:	2100      	movs	r1, #0
 800f48a:	2009      	movs	r0, #9
 800f48c:	f7ff fd77 	bl	800ef7e <send_cmd>
 800f490:	4603      	mov	r3, r0
 800f492:	2b00      	cmp	r3, #0
 800f494:	f040 811d 	bne.w	800f6d2 <USER_SPI_ioctl+0x2b2>
 800f498:	f107 030c 	add.w	r3, r7, #12
 800f49c:	2110      	movs	r1, #16
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f7ff fd12 	bl	800eec8 <rcvr_datablock>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	f000 8113 	beq.w	800f6d2 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800f4ac:	7b3b      	ldrb	r3, [r7, #12]
 800f4ae:	099b      	lsrs	r3, r3, #6
 800f4b0:	b2db      	uxtb	r3, r3
 800f4b2:	2b01      	cmp	r3, #1
 800f4b4:	d111      	bne.n	800f4da <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800f4b6:	7d7b      	ldrb	r3, [r7, #21]
 800f4b8:	461a      	mov	r2, r3
 800f4ba:	7d3b      	ldrb	r3, [r7, #20]
 800f4bc:	021b      	lsls	r3, r3, #8
 800f4be:	4413      	add	r3, r2
 800f4c0:	461a      	mov	r2, r3
 800f4c2:	7cfb      	ldrb	r3, [r7, #19]
 800f4c4:	041b      	lsls	r3, r3, #16
 800f4c6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800f4ca:	4413      	add	r3, r2
 800f4cc:	3301      	adds	r3, #1
 800f4ce:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800f4d0:	69fb      	ldr	r3, [r7, #28]
 800f4d2:	029a      	lsls	r2, r3, #10
 800f4d4:	683b      	ldr	r3, [r7, #0]
 800f4d6:	601a      	str	r2, [r3, #0]
 800f4d8:	e028      	b.n	800f52c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800f4da:	7c7b      	ldrb	r3, [r7, #17]
 800f4dc:	f003 030f 	and.w	r3, r3, #15
 800f4e0:	b2da      	uxtb	r2, r3
 800f4e2:	7dbb      	ldrb	r3, [r7, #22]
 800f4e4:	09db      	lsrs	r3, r3, #7
 800f4e6:	b2db      	uxtb	r3, r3
 800f4e8:	4413      	add	r3, r2
 800f4ea:	b2da      	uxtb	r2, r3
 800f4ec:	7d7b      	ldrb	r3, [r7, #21]
 800f4ee:	005b      	lsls	r3, r3, #1
 800f4f0:	b2db      	uxtb	r3, r3
 800f4f2:	f003 0306 	and.w	r3, r3, #6
 800f4f6:	b2db      	uxtb	r3, r3
 800f4f8:	4413      	add	r3, r2
 800f4fa:	b2db      	uxtb	r3, r3
 800f4fc:	3302      	adds	r3, #2
 800f4fe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800f502:	7d3b      	ldrb	r3, [r7, #20]
 800f504:	099b      	lsrs	r3, r3, #6
 800f506:	b2db      	uxtb	r3, r3
 800f508:	461a      	mov	r2, r3
 800f50a:	7cfb      	ldrb	r3, [r7, #19]
 800f50c:	009b      	lsls	r3, r3, #2
 800f50e:	441a      	add	r2, r3
 800f510:	7cbb      	ldrb	r3, [r7, #18]
 800f512:	029b      	lsls	r3, r3, #10
 800f514:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f518:	4413      	add	r3, r2
 800f51a:	3301      	adds	r3, #1
 800f51c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800f51e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f522:	3b09      	subs	r3, #9
 800f524:	69fa      	ldr	r2, [r7, #28]
 800f526:	409a      	lsls	r2, r3
 800f528:	683b      	ldr	r3, [r7, #0]
 800f52a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800f52c:	2300      	movs	r3, #0
 800f52e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800f532:	e0ce      	b.n	800f6d2 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800f534:	4b71      	ldr	r3, [pc, #452]	; (800f6fc <USER_SPI_ioctl+0x2dc>)
 800f536:	781b      	ldrb	r3, [r3, #0]
 800f538:	f003 0304 	and.w	r3, r3, #4
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d031      	beq.n	800f5a4 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800f540:	2100      	movs	r1, #0
 800f542:	208d      	movs	r0, #141	; 0x8d
 800f544:	f7ff fd1b 	bl	800ef7e <send_cmd>
 800f548:	4603      	mov	r3, r0
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	f040 80c3 	bne.w	800f6d6 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800f550:	20ff      	movs	r0, #255	; 0xff
 800f552:	f7ff fc21 	bl	800ed98 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800f556:	f107 030c 	add.w	r3, r7, #12
 800f55a:	2110      	movs	r1, #16
 800f55c:	4618      	mov	r0, r3
 800f55e:	f7ff fcb3 	bl	800eec8 <rcvr_datablock>
 800f562:	4603      	mov	r3, r0
 800f564:	2b00      	cmp	r3, #0
 800f566:	f000 80b6 	beq.w	800f6d6 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800f56a:	2330      	movs	r3, #48	; 0x30
 800f56c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800f570:	e007      	b.n	800f582 <USER_SPI_ioctl+0x162>
 800f572:	20ff      	movs	r0, #255	; 0xff
 800f574:	f7ff fc10 	bl	800ed98 <xchg_spi>
 800f578:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f57c:	3b01      	subs	r3, #1
 800f57e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800f582:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800f586:	2b00      	cmp	r3, #0
 800f588:	d1f3      	bne.n	800f572 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800f58a:	7dbb      	ldrb	r3, [r7, #22]
 800f58c:	091b      	lsrs	r3, r3, #4
 800f58e:	b2db      	uxtb	r3, r3
 800f590:	461a      	mov	r2, r3
 800f592:	2310      	movs	r3, #16
 800f594:	fa03 f202 	lsl.w	r2, r3, r2
 800f598:	683b      	ldr	r3, [r7, #0]
 800f59a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800f59c:	2300      	movs	r3, #0
 800f59e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800f5a2:	e098      	b.n	800f6d6 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800f5a4:	2100      	movs	r1, #0
 800f5a6:	2009      	movs	r0, #9
 800f5a8:	f7ff fce9 	bl	800ef7e <send_cmd>
 800f5ac:	4603      	mov	r3, r0
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	f040 8091 	bne.w	800f6d6 <USER_SPI_ioctl+0x2b6>
 800f5b4:	f107 030c 	add.w	r3, r7, #12
 800f5b8:	2110      	movs	r1, #16
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	f7ff fc84 	bl	800eec8 <rcvr_datablock>
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	f000 8087 	beq.w	800f6d6 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800f5c8:	4b4c      	ldr	r3, [pc, #304]	; (800f6fc <USER_SPI_ioctl+0x2dc>)
 800f5ca:	781b      	ldrb	r3, [r3, #0]
 800f5cc:	f003 0302 	and.w	r3, r3, #2
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d012      	beq.n	800f5fa <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800f5d4:	7dbb      	ldrb	r3, [r7, #22]
 800f5d6:	005b      	lsls	r3, r3, #1
 800f5d8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800f5dc:	7dfa      	ldrb	r2, [r7, #23]
 800f5de:	09d2      	lsrs	r2, r2, #7
 800f5e0:	b2d2      	uxtb	r2, r2
 800f5e2:	4413      	add	r3, r2
 800f5e4:	1c5a      	adds	r2, r3, #1
 800f5e6:	7e7b      	ldrb	r3, [r7, #25]
 800f5e8:	099b      	lsrs	r3, r3, #6
 800f5ea:	b2db      	uxtb	r3, r3
 800f5ec:	3b01      	subs	r3, #1
 800f5ee:	fa02 f303 	lsl.w	r3, r2, r3
 800f5f2:	461a      	mov	r2, r3
 800f5f4:	683b      	ldr	r3, [r7, #0]
 800f5f6:	601a      	str	r2, [r3, #0]
 800f5f8:	e013      	b.n	800f622 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800f5fa:	7dbb      	ldrb	r3, [r7, #22]
 800f5fc:	109b      	asrs	r3, r3, #2
 800f5fe:	b29b      	uxth	r3, r3
 800f600:	f003 031f 	and.w	r3, r3, #31
 800f604:	3301      	adds	r3, #1
 800f606:	7dfa      	ldrb	r2, [r7, #23]
 800f608:	00d2      	lsls	r2, r2, #3
 800f60a:	f002 0218 	and.w	r2, r2, #24
 800f60e:	7df9      	ldrb	r1, [r7, #23]
 800f610:	0949      	lsrs	r1, r1, #5
 800f612:	b2c9      	uxtb	r1, r1
 800f614:	440a      	add	r2, r1
 800f616:	3201      	adds	r2, #1
 800f618:	fb02 f303 	mul.w	r3, r2, r3
 800f61c:	461a      	mov	r2, r3
 800f61e:	683b      	ldr	r3, [r7, #0]
 800f620:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800f622:	2300      	movs	r3, #0
 800f624:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800f628:	e055      	b.n	800f6d6 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800f62a:	4b34      	ldr	r3, [pc, #208]	; (800f6fc <USER_SPI_ioctl+0x2dc>)
 800f62c:	781b      	ldrb	r3, [r3, #0]
 800f62e:	f003 0306 	and.w	r3, r3, #6
 800f632:	2b00      	cmp	r3, #0
 800f634:	d051      	beq.n	800f6da <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800f636:	f107 020c 	add.w	r2, r7, #12
 800f63a:	79fb      	ldrb	r3, [r7, #7]
 800f63c:	210b      	movs	r1, #11
 800f63e:	4618      	mov	r0, r3
 800f640:	f7ff feee 	bl	800f420 <USER_SPI_ioctl>
 800f644:	4603      	mov	r3, r0
 800f646:	2b00      	cmp	r3, #0
 800f648:	d149      	bne.n	800f6de <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800f64a:	7b3b      	ldrb	r3, [r7, #12]
 800f64c:	099b      	lsrs	r3, r3, #6
 800f64e:	b2db      	uxtb	r3, r3
 800f650:	2b00      	cmp	r3, #0
 800f652:	d104      	bne.n	800f65e <USER_SPI_ioctl+0x23e>
 800f654:	7dbb      	ldrb	r3, [r7, #22]
 800f656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d041      	beq.n	800f6e2 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800f65e:	683b      	ldr	r3, [r7, #0]
 800f660:	623b      	str	r3, [r7, #32]
 800f662:	6a3b      	ldr	r3, [r7, #32]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	62bb      	str	r3, [r7, #40]	; 0x28
 800f668:	6a3b      	ldr	r3, [r7, #32]
 800f66a:	685b      	ldr	r3, [r3, #4]
 800f66c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800f66e:	4b23      	ldr	r3, [pc, #140]	; (800f6fc <USER_SPI_ioctl+0x2dc>)
 800f670:	781b      	ldrb	r3, [r3, #0]
 800f672:	f003 0308 	and.w	r3, r3, #8
 800f676:	2b00      	cmp	r3, #0
 800f678:	d105      	bne.n	800f686 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800f67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f67c:	025b      	lsls	r3, r3, #9
 800f67e:	62bb      	str	r3, [r7, #40]	; 0x28
 800f680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f682:	025b      	lsls	r3, r3, #9
 800f684:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800f686:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f688:	2020      	movs	r0, #32
 800f68a:	f7ff fc78 	bl	800ef7e <send_cmd>
 800f68e:	4603      	mov	r3, r0
 800f690:	2b00      	cmp	r3, #0
 800f692:	d128      	bne.n	800f6e6 <USER_SPI_ioctl+0x2c6>
 800f694:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f696:	2021      	movs	r0, #33	; 0x21
 800f698:	f7ff fc71 	bl	800ef7e <send_cmd>
 800f69c:	4603      	mov	r3, r0
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d121      	bne.n	800f6e6 <USER_SPI_ioctl+0x2c6>
 800f6a2:	2100      	movs	r1, #0
 800f6a4:	2026      	movs	r0, #38	; 0x26
 800f6a6:	f7ff fc6a 	bl	800ef7e <send_cmd>
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d11a      	bne.n	800f6e6 <USER_SPI_ioctl+0x2c6>
 800f6b0:	f247 5030 	movw	r0, #30000	; 0x7530
 800f6b4:	f7ff fbbd 	bl	800ee32 <wait_ready>
 800f6b8:	4603      	mov	r3, r0
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d013      	beq.n	800f6e6 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800f6be:	2300      	movs	r3, #0
 800f6c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800f6c4:	e00f      	b.n	800f6e6 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800f6c6:	2304      	movs	r3, #4
 800f6c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f6cc:	e00c      	b.n	800f6e8 <USER_SPI_ioctl+0x2c8>
		break;
 800f6ce:	bf00      	nop
 800f6d0:	e00a      	b.n	800f6e8 <USER_SPI_ioctl+0x2c8>
		break;
 800f6d2:	bf00      	nop
 800f6d4:	e008      	b.n	800f6e8 <USER_SPI_ioctl+0x2c8>
		break;
 800f6d6:	bf00      	nop
 800f6d8:	e006      	b.n	800f6e8 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800f6da:	bf00      	nop
 800f6dc:	e004      	b.n	800f6e8 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800f6de:	bf00      	nop
 800f6e0:	e002      	b.n	800f6e8 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800f6e2:	bf00      	nop
 800f6e4:	e000      	b.n	800f6e8 <USER_SPI_ioctl+0x2c8>
		break;
 800f6e6:	bf00      	nop
	}

	despiselect();
 800f6e8:	f7ff fbc6 	bl	800ee78 <despiselect>

	return res;
 800f6ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	3730      	adds	r7, #48	; 0x30
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	bd80      	pop	{r7, pc}
 800f6f8:	2400002c 	.word	0x2400002c
 800f6fc:	2400a42c 	.word	0x2400a42c

0800f700 <DEV_SPI_WRite>:
	HAL_Delay(xms);
}


void DEV_SPI_WRite(UBYTE _dat)
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b082      	sub	sp, #8
 800f704:	af00      	add	r7, sp, #0
 800f706:	4603      	mov	r3, r0
 800f708:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&DEV_SPI, (uint8_t *)&_dat, 1, 500);
 800f70a:	1df9      	adds	r1, r7, #7
 800f70c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800f710:	2201      	movs	r2, #1
 800f712:	4803      	ldr	r0, [pc, #12]	; (800f720 <DEV_SPI_WRite+0x20>)
 800f714:	f7fb f8be 	bl	800a894 <HAL_SPI_Transmit>
}
 800f718:	bf00      	nop
 800f71a:	3708      	adds	r7, #8
 800f71c:	46bd      	mov	sp, r7
 800f71e:	bd80      	pop	{r7, pc}
 800f720:	2400b174 	.word	0x2400b174

0800f724 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 800f724:	b580      	push	{r7, lr}
 800f726:	af00      	add	r7, sp, #0
    DEV_Digital_Write(DEV_DC_PIN, 1);
 800f728:	2201      	movs	r2, #1
 800f72a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f72e:	480a      	ldr	r0, [pc, #40]	; (800f758 <DEV_Module_Init+0x34>)
 800f730:	f7f6 fd2e 	bl	8006190 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_CS_PIN, 1);
 800f734:	2201      	movs	r2, #1
 800f736:	2140      	movs	r1, #64	; 0x40
 800f738:	4807      	ldr	r0, [pc, #28]	; (800f758 <DEV_Module_Init+0x34>)
 800f73a:	f7f6 fd29 	bl	8006190 <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_RST_PIN, 1);
 800f73e:	2201      	movs	r2, #1
 800f740:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f744:	4805      	ldr	r0, [pc, #20]	; (800f75c <DEV_Module_Init+0x38>)
 800f746:	f7f6 fd23 	bl	8006190 <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&DEV_BL_TIM, DEV_BL_CH);
 800f74a:	2100      	movs	r1, #0
 800f74c:	4804      	ldr	r0, [pc, #16]	; (800f760 <DEV_Module_Init+0x3c>)
 800f74e:	f7fb febf 	bl	800b4d0 <HAL_TIM_PWM_Start>
		return 0;
 800f752:	2300      	movs	r3, #0
}
 800f754:	4618      	mov	r0, r3
 800f756:	bd80      	pop	{r7, pc}
 800f758:	58021800 	.word	0x58021800
 800f75c:	58021400 	.word	0x58021400
 800f760:	2400b200 	.word	0x2400b200

0800f764 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 800f764:	b590      	push	{r4, r7, lr}
 800f766:	b083      	sub	sp, #12
 800f768:	af00      	add	r7, sp, #0
 800f76a:	4604      	mov	r4, r0
 800f76c:	4608      	mov	r0, r1
 800f76e:	4611      	mov	r1, r2
 800f770:	461a      	mov	r2, r3
 800f772:	4623      	mov	r3, r4
 800f774:	80fb      	strh	r3, [r7, #6]
 800f776:	4603      	mov	r3, r0
 800f778:	80bb      	strh	r3, [r7, #4]
 800f77a:	460b      	mov	r3, r1
 800f77c:	807b      	strh	r3, [r7, #2]
 800f77e:	4613      	mov	r3, r2
 800f780:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 800f782:	4a1c      	ldr	r2, [pc, #112]	; (800f7f4 <Paint_NewImage+0x90>)
 800f784:	88fb      	ldrh	r3, [r7, #6]
 800f786:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 800f788:	4a1a      	ldr	r2, [pc, #104]	; (800f7f4 <Paint_NewImage+0x90>)
 800f78a:	88bb      	ldrh	r3, [r7, #4]
 800f78c:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 800f78e:	4a19      	ldr	r2, [pc, #100]	; (800f7f4 <Paint_NewImage+0x90>)
 800f790:	883b      	ldrh	r3, [r7, #0]
 800f792:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 800f794:	4a17      	ldr	r2, [pc, #92]	; (800f7f4 <Paint_NewImage+0x90>)
 800f796:	88fb      	ldrh	r3, [r7, #6]
 800f798:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 800f79a:	4a16      	ldr	r2, [pc, #88]	; (800f7f4 <Paint_NewImage+0x90>)
 800f79c:	88bb      	ldrh	r3, [r7, #4]
 800f79e:	8293      	strh	r3, [r2, #20]
    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
 800f7a0:	4b14      	ldr	r3, [pc, #80]	; (800f7f4 <Paint_NewImage+0x90>)
 800f7a2:	8a5b      	ldrh	r3, [r3, #18]
 800f7a4:	b29b      	uxth	r3, r3
 800f7a6:	4619      	mov	r1, r3
 800f7a8:	4b12      	ldr	r3, [pc, #72]	; (800f7f4 <Paint_NewImage+0x90>)
 800f7aa:	8a9b      	ldrh	r3, [r3, #20]
 800f7ac:	b29b      	uxth	r3, r3
 800f7ae:	461a      	mov	r2, r3
 800f7b0:	4811      	ldr	r0, [pc, #68]	; (800f7f8 <Paint_NewImage+0x94>)
 800f7b2:	f00d ffef 	bl	801d794 <iprintf>
   
    Paint.Rotate = Rotate;
 800f7b6:	4a0f      	ldr	r2, [pc, #60]	; (800f7f4 <Paint_NewImage+0x90>)
 800f7b8:	887b      	ldrh	r3, [r7, #2]
 800f7ba:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 800f7bc:	4b0d      	ldr	r3, [pc, #52]	; (800f7f4 <Paint_NewImage+0x90>)
 800f7be:	2200      	movs	r2, #0
 800f7c0:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 800f7c2:	887b      	ldrh	r3, [r7, #2]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d002      	beq.n	800f7ce <Paint_NewImage+0x6a>
 800f7c8:	887b      	ldrh	r3, [r7, #2]
 800f7ca:	2bb4      	cmp	r3, #180	; 0xb4
 800f7cc:	d106      	bne.n	800f7dc <Paint_NewImage+0x78>
        Paint.Width = Width;
 800f7ce:	4a09      	ldr	r2, [pc, #36]	; (800f7f4 <Paint_NewImage+0x90>)
 800f7d0:	88fb      	ldrh	r3, [r7, #6]
 800f7d2:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 800f7d4:	4a07      	ldr	r2, [pc, #28]	; (800f7f4 <Paint_NewImage+0x90>)
 800f7d6:	88bb      	ldrh	r3, [r7, #4]
 800f7d8:	80d3      	strh	r3, [r2, #6]
 800f7da:	e006      	b.n	800f7ea <Paint_NewImage+0x86>
    } else {
        Paint.Width = Height;
 800f7dc:	4a05      	ldr	r2, [pc, #20]	; (800f7f4 <Paint_NewImage+0x90>)
 800f7de:	88bb      	ldrh	r3, [r7, #4]
 800f7e0:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 800f7e2:	4a04      	ldr	r2, [pc, #16]	; (800f7f4 <Paint_NewImage+0x90>)
 800f7e4:	88fb      	ldrh	r3, [r7, #6]
 800f7e6:	80d3      	strh	r3, [r2, #6]
    }
}
 800f7e8:	bf00      	nop
 800f7ea:	bf00      	nop
 800f7ec:	370c      	adds	r7, #12
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	bd90      	pop	{r4, r7, pc}
 800f7f2:	bf00      	nop
 800f7f4:	2400b8d8 	.word	0x2400b8d8
 800f7f8:	080212e8 	.word	0x080212e8

0800f7fc <Paint_SetClearFuntion>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 800f7fc:	b480      	push	{r7}
 800f7fe:	b083      	sub	sp, #12
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 800f804:	4a04      	ldr	r2, [pc, #16]	; (800f818 <Paint_SetClearFuntion+0x1c>)
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	6013      	str	r3, [r2, #0]
}
 800f80a:	bf00      	nop
 800f80c:	370c      	adds	r7, #12
 800f80e:	46bd      	mov	sp, r7
 800f810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f814:	4770      	bx	lr
 800f816:	bf00      	nop
 800f818:	2400b8f0 	.word	0x2400b8f0

0800f81c <Paint_SetDisplayFuntion>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 800f81c:	b480      	push	{r7}
 800f81e:	b083      	sub	sp, #12
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 800f824:	4a04      	ldr	r2, [pc, #16]	; (800f838 <Paint_SetDisplayFuntion+0x1c>)
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	6013      	str	r3, [r2, #0]
}
 800f82a:	bf00      	nop
 800f82c:	370c      	adds	r7, #12
 800f82e:	46bd      	mov	sp, r7
 800f830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f834:	4770      	bx	lr
 800f836:	bf00      	nop
 800f838:	2400b8d4 	.word	0x2400b8d4

0800f83c <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b084      	sub	sp, #16
 800f840:	af00      	add	r7, sp, #0
 800f842:	4603      	mov	r3, r0
 800f844:	80fb      	strh	r3, [r7, #6]
 800f846:	460b      	mov	r3, r1
 800f848:	80bb      	strh	r3, [r7, #4]
 800f84a:	4613      	mov	r3, r2
 800f84c:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 800f84e:	4b50      	ldr	r3, [pc, #320]	; (800f990 <Paint_SetPixel+0x154>)
 800f850:	889b      	ldrh	r3, [r3, #4]
 800f852:	b29b      	uxth	r3, r3
 800f854:	88fa      	ldrh	r2, [r7, #6]
 800f856:	429a      	cmp	r2, r3
 800f858:	d805      	bhi.n	800f866 <Paint_SetPixel+0x2a>
 800f85a:	4b4d      	ldr	r3, [pc, #308]	; (800f990 <Paint_SetPixel+0x154>)
 800f85c:	88db      	ldrh	r3, [r3, #6]
 800f85e:	b29b      	uxth	r3, r3
 800f860:	88ba      	ldrh	r2, [r7, #4]
 800f862:	429a      	cmp	r2, r3
 800f864:	d903      	bls.n	800f86e <Paint_SetPixel+0x32>
        Debug("Exceeding display boundaries\r\n");
 800f866:	484b      	ldr	r0, [pc, #300]	; (800f994 <Paint_SetPixel+0x158>)
 800f868:	f00e f81a 	bl	801d8a0 <puts>
        return;
 800f86c:	e08c      	b.n	800f988 <Paint_SetPixel+0x14c>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 800f86e:	4b48      	ldr	r3, [pc, #288]	; (800f990 <Paint_SetPixel+0x154>)
 800f870:	89db      	ldrh	r3, [r3, #14]
 800f872:	b29b      	uxth	r3, r3
 800f874:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800f878:	d02d      	beq.n	800f8d6 <Paint_SetPixel+0x9a>
 800f87a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800f87e:	f300 8080 	bgt.w	800f982 <Paint_SetPixel+0x146>
 800f882:	2bb4      	cmp	r3, #180	; 0xb4
 800f884:	d016      	beq.n	800f8b4 <Paint_SetPixel+0x78>
 800f886:	2bb4      	cmp	r3, #180	; 0xb4
 800f888:	dc7b      	bgt.n	800f982 <Paint_SetPixel+0x146>
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d002      	beq.n	800f894 <Paint_SetPixel+0x58>
 800f88e:	2b5a      	cmp	r3, #90	; 0x5a
 800f890:	d005      	beq.n	800f89e <Paint_SetPixel+0x62>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 800f892:	e076      	b.n	800f982 <Paint_SetPixel+0x146>
        X = Xpoint;
 800f894:	88fb      	ldrh	r3, [r7, #6]
 800f896:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 800f898:	88bb      	ldrh	r3, [r7, #4]
 800f89a:	81bb      	strh	r3, [r7, #12]
        break;
 800f89c:	e026      	b.n	800f8ec <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Ypoint - 1;
 800f89e:	4b3c      	ldr	r3, [pc, #240]	; (800f990 <Paint_SetPixel+0x154>)
 800f8a0:	891b      	ldrh	r3, [r3, #8]
 800f8a2:	b29a      	uxth	r2, r3
 800f8a4:	88bb      	ldrh	r3, [r7, #4]
 800f8a6:	1ad3      	subs	r3, r2, r3
 800f8a8:	b29b      	uxth	r3, r3
 800f8aa:	3b01      	subs	r3, #1
 800f8ac:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 800f8ae:	88fb      	ldrh	r3, [r7, #6]
 800f8b0:	81bb      	strh	r3, [r7, #12]
        break;
 800f8b2:	e01b      	b.n	800f8ec <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Xpoint - 1;
 800f8b4:	4b36      	ldr	r3, [pc, #216]	; (800f990 <Paint_SetPixel+0x154>)
 800f8b6:	891b      	ldrh	r3, [r3, #8]
 800f8b8:	b29a      	uxth	r2, r3
 800f8ba:	88fb      	ldrh	r3, [r7, #6]
 800f8bc:	1ad3      	subs	r3, r2, r3
 800f8be:	b29b      	uxth	r3, r3
 800f8c0:	3b01      	subs	r3, #1
 800f8c2:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 800f8c4:	4b32      	ldr	r3, [pc, #200]	; (800f990 <Paint_SetPixel+0x154>)
 800f8c6:	895b      	ldrh	r3, [r3, #10]
 800f8c8:	b29a      	uxth	r2, r3
 800f8ca:	88bb      	ldrh	r3, [r7, #4]
 800f8cc:	1ad3      	subs	r3, r2, r3
 800f8ce:	b29b      	uxth	r3, r3
 800f8d0:	3b01      	subs	r3, #1
 800f8d2:	81bb      	strh	r3, [r7, #12]
        break;
 800f8d4:	e00a      	b.n	800f8ec <Paint_SetPixel+0xb0>
        X = Ypoint;
 800f8d6:	88bb      	ldrh	r3, [r7, #4]
 800f8d8:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 800f8da:	4b2d      	ldr	r3, [pc, #180]	; (800f990 <Paint_SetPixel+0x154>)
 800f8dc:	895b      	ldrh	r3, [r3, #10]
 800f8de:	b29a      	uxth	r2, r3
 800f8e0:	88fb      	ldrh	r3, [r7, #6]
 800f8e2:	1ad3      	subs	r3, r2, r3
 800f8e4:	b29b      	uxth	r3, r3
 800f8e6:	3b01      	subs	r3, #1
 800f8e8:	81bb      	strh	r3, [r7, #12]
        break;
 800f8ea:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 800f8ec:	4b28      	ldr	r3, [pc, #160]	; (800f990 <Paint_SetPixel+0x154>)
 800f8ee:	8a1b      	ldrh	r3, [r3, #16]
 800f8f0:	b29b      	uxth	r3, r3
 800f8f2:	2b03      	cmp	r3, #3
 800f8f4:	d847      	bhi.n	800f986 <Paint_SetPixel+0x14a>
 800f8f6:	a201      	add	r2, pc, #4	; (adr r2, 800f8fc <Paint_SetPixel+0xc0>)
 800f8f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8fc:	0800f953 	.word	0x0800f953
 800f900:	0800f90d 	.word	0x0800f90d
 800f904:	0800f91f 	.word	0x0800f91f
 800f908:	0800f931 	.word	0x0800f931
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 800f90c:	4b20      	ldr	r3, [pc, #128]	; (800f990 <Paint_SetPixel+0x154>)
 800f90e:	891b      	ldrh	r3, [r3, #8]
 800f910:	b29a      	uxth	r2, r3
 800f912:	89fb      	ldrh	r3, [r7, #14]
 800f914:	1ad3      	subs	r3, r2, r3
 800f916:	b29b      	uxth	r3, r3
 800f918:	3b01      	subs	r3, #1
 800f91a:	81fb      	strh	r3, [r7, #14]
        break;
 800f91c:	e01a      	b.n	800f954 <Paint_SetPixel+0x118>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 800f91e:	4b1c      	ldr	r3, [pc, #112]	; (800f990 <Paint_SetPixel+0x154>)
 800f920:	895b      	ldrh	r3, [r3, #10]
 800f922:	b29a      	uxth	r2, r3
 800f924:	89bb      	ldrh	r3, [r7, #12]
 800f926:	1ad3      	subs	r3, r2, r3
 800f928:	b29b      	uxth	r3, r3
 800f92a:	3b01      	subs	r3, #1
 800f92c:	81bb      	strh	r3, [r7, #12]
        break;
 800f92e:	e011      	b.n	800f954 <Paint_SetPixel+0x118>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 800f930:	4b17      	ldr	r3, [pc, #92]	; (800f990 <Paint_SetPixel+0x154>)
 800f932:	891b      	ldrh	r3, [r3, #8]
 800f934:	b29a      	uxth	r2, r3
 800f936:	89fb      	ldrh	r3, [r7, #14]
 800f938:	1ad3      	subs	r3, r2, r3
 800f93a:	b29b      	uxth	r3, r3
 800f93c:	3b01      	subs	r3, #1
 800f93e:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 800f940:	4b13      	ldr	r3, [pc, #76]	; (800f990 <Paint_SetPixel+0x154>)
 800f942:	895b      	ldrh	r3, [r3, #10]
 800f944:	b29a      	uxth	r2, r3
 800f946:	89bb      	ldrh	r3, [r7, #12]
 800f948:	1ad3      	subs	r3, r2, r3
 800f94a:	b29b      	uxth	r3, r3
 800f94c:	3b01      	subs	r3, #1
 800f94e:	81bb      	strh	r3, [r7, #12]
        break;
 800f950:	e000      	b.n	800f954 <Paint_SetPixel+0x118>
        break;
 800f952:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 800f954:	4b0e      	ldr	r3, [pc, #56]	; (800f990 <Paint_SetPixel+0x154>)
 800f956:	891b      	ldrh	r3, [r3, #8]
 800f958:	b29b      	uxth	r3, r3
 800f95a:	89fa      	ldrh	r2, [r7, #14]
 800f95c:	429a      	cmp	r2, r3
 800f95e:	d805      	bhi.n	800f96c <Paint_SetPixel+0x130>
 800f960:	4b0b      	ldr	r3, [pc, #44]	; (800f990 <Paint_SetPixel+0x154>)
 800f962:	895b      	ldrh	r3, [r3, #10]
 800f964:	b29b      	uxth	r3, r3
 800f966:	89ba      	ldrh	r2, [r7, #12]
 800f968:	429a      	cmp	r2, r3
 800f96a:	d903      	bls.n	800f974 <Paint_SetPixel+0x138>
        Debug("Exceeding display boundaries\r\n");
 800f96c:	4809      	ldr	r0, [pc, #36]	; (800f994 <Paint_SetPixel+0x158>)
 800f96e:	f00d ff97 	bl	801d8a0 <puts>
        return;
 800f972:	e009      	b.n	800f988 <Paint_SetPixel+0x14c>
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 800f974:	4b08      	ldr	r3, [pc, #32]	; (800f998 <Paint_SetPixel+0x15c>)
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	887a      	ldrh	r2, [r7, #2]
 800f97a:	89b9      	ldrh	r1, [r7, #12]
 800f97c:	89f8      	ldrh	r0, [r7, #14]
 800f97e:	4798      	blx	r3
 800f980:	e002      	b.n	800f988 <Paint_SetPixel+0x14c>
        return;
 800f982:	bf00      	nop
 800f984:	e000      	b.n	800f988 <Paint_SetPixel+0x14c>
        return;
 800f986:	bf00      	nop
}
 800f988:	3710      	adds	r7, #16
 800f98a:	46bd      	mov	sp, r7
 800f98c:	bd80      	pop	{r7, pc}
 800f98e:	bf00      	nop
 800f990:	2400b8d8 	.word	0x2400b8d8
 800f994:	080213e8 	.word	0x080213e8
 800f998:	2400b8d4 	.word	0x2400b8d4

0800f99c <Paint_Clear>:
function:	Clear the color of the picture
parameter:
    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{	
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b082      	sub	sp, #8
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	4603      	mov	r3, r0
 800f9a4:	80fb      	strh	r3, [r7, #6]
	CLEAR(Color);
 800f9a6:	4b04      	ldr	r3, [pc, #16]	; (800f9b8 <Paint_Clear+0x1c>)
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	88fa      	ldrh	r2, [r7, #6]
 800f9ac:	4610      	mov	r0, r2
 800f9ae:	4798      	blx	r3
}
 800f9b0:	bf00      	nop
 800f9b2:	3708      	adds	r7, #8
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	bd80      	pop	{r7, pc}
 800f9b8:	2400b8f0 	.word	0x2400b8f0

0800f9bc <Paint_ClearWindows>:
    Ystart :   Y starting point
    Xend   :   x end point
    Yend   :   y end point
******************************************************************************/
void Paint_ClearWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, UWORD Color)
{
 800f9bc:	b590      	push	{r4, r7, lr}
 800f9be:	b085      	sub	sp, #20
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	4604      	mov	r4, r0
 800f9c4:	4608      	mov	r0, r1
 800f9c6:	4611      	mov	r1, r2
 800f9c8:	461a      	mov	r2, r3
 800f9ca:	4623      	mov	r3, r4
 800f9cc:	80fb      	strh	r3, [r7, #6]
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	80bb      	strh	r3, [r7, #4]
 800f9d2:	460b      	mov	r3, r1
 800f9d4:	807b      	strh	r3, [r7, #2]
 800f9d6:	4613      	mov	r3, r2
 800f9d8:	803b      	strh	r3, [r7, #0]
    UWORD X, Y;
    for (Y = Ystart; Y < Yend; Y++)
 800f9da:	88bb      	ldrh	r3, [r7, #4]
 800f9dc:	81bb      	strh	r3, [r7, #12]
 800f9de:	e012      	b.n	800fa06 <Paint_ClearWindows+0x4a>
    {
        for (X = Xstart; X < Xend; X++)
 800f9e0:	88fb      	ldrh	r3, [r7, #6]
 800f9e2:	81fb      	strh	r3, [r7, #14]
 800f9e4:	e008      	b.n	800f9f8 <Paint_ClearWindows+0x3c>
        {//8 pixel =  1 byte
            Paint_SetPixel(X, Y, Color);
 800f9e6:	8c3a      	ldrh	r2, [r7, #32]
 800f9e8:	89b9      	ldrh	r1, [r7, #12]
 800f9ea:	89fb      	ldrh	r3, [r7, #14]
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	f7ff ff25 	bl	800f83c <Paint_SetPixel>
        for (X = Xstart; X < Xend; X++)
 800f9f2:	89fb      	ldrh	r3, [r7, #14]
 800f9f4:	3301      	adds	r3, #1
 800f9f6:	81fb      	strh	r3, [r7, #14]
 800f9f8:	89fa      	ldrh	r2, [r7, #14]
 800f9fa:	887b      	ldrh	r3, [r7, #2]
 800f9fc:	429a      	cmp	r2, r3
 800f9fe:	d3f2      	bcc.n	800f9e6 <Paint_ClearWindows+0x2a>
    for (Y = Ystart; Y < Yend; Y++)
 800fa00:	89bb      	ldrh	r3, [r7, #12]
 800fa02:	3301      	adds	r3, #1
 800fa04:	81bb      	strh	r3, [r7, #12]
 800fa06:	89ba      	ldrh	r2, [r7, #12]
 800fa08:	883b      	ldrh	r3, [r7, #0]
 800fa0a:	429a      	cmp	r2, r3
 800fa0c:	d3e8      	bcc.n	800f9e0 <Paint_ClearWindows+0x24>
        }
    }
}
 800fa0e:	bf00      	nop
 800fa10:	bf00      	nop
 800fa12:	3714      	adds	r7, #20
 800fa14:	46bd      	mov	sp, r7
 800fa16:	bd90      	pop	{r4, r7, pc}

0800fa18 <Paint_DrawPoint>:
    Color		:   Set color
    Dot_Pixel	:	point size
******************************************************************************/
void Paint_DrawPoint( UWORD Xpoint,       UWORD Ypoint, UWORD Color,
                      DOT_PIXEL Dot_Pixel,DOT_STYLE Dot_FillWay)
{
 800fa18:	b590      	push	{r4, r7, lr}
 800fa1a:	b085      	sub	sp, #20
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	4604      	mov	r4, r0
 800fa20:	4608      	mov	r0, r1
 800fa22:	4611      	mov	r1, r2
 800fa24:	461a      	mov	r2, r3
 800fa26:	4623      	mov	r3, r4
 800fa28:	80fb      	strh	r3, [r7, #6]
 800fa2a:	4603      	mov	r3, r0
 800fa2c:	80bb      	strh	r3, [r7, #4]
 800fa2e:	460b      	mov	r3, r1
 800fa30:	807b      	strh	r3, [r7, #2]
 800fa32:	4613      	mov	r3, r2
 800fa34:	707b      	strb	r3, [r7, #1]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800fa36:	4b44      	ldr	r3, [pc, #272]	; (800fb48 <Paint_DrawPoint+0x130>)
 800fa38:	889b      	ldrh	r3, [r3, #4]
 800fa3a:	b29b      	uxth	r3, r3
 800fa3c:	88fa      	ldrh	r2, [r7, #6]
 800fa3e:	429a      	cmp	r2, r3
 800fa40:	d805      	bhi.n	800fa4e <Paint_DrawPoint+0x36>
 800fa42:	4b41      	ldr	r3, [pc, #260]	; (800fb48 <Paint_DrawPoint+0x130>)
 800fa44:	88db      	ldrh	r3, [r3, #6]
 800fa46:	b29b      	uxth	r3, r3
 800fa48:	88ba      	ldrh	r2, [r7, #4]
 800fa4a:	429a      	cmp	r2, r3
 800fa4c:	d903      	bls.n	800fa56 <Paint_DrawPoint+0x3e>
    {
        Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 800fa4e:	483f      	ldr	r0, [pc, #252]	; (800fb4c <Paint_DrawPoint+0x134>)
 800fa50:	f00d ff26 	bl	801d8a0 <puts>
        return;
 800fa54:	e074      	b.n	800fb40 <Paint_DrawPoint+0x128>
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_FillWay == DOT_FILL_AROUND)
 800fa56:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fa5a:	2b01      	cmp	r3, #1
 800fa5c:	d144      	bne.n	800fae8 <Paint_DrawPoint+0xd0>
    {
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++)
 800fa5e:	2300      	movs	r3, #0
 800fa60:	81fb      	strh	r3, [r7, #14]
 800fa62:	e039      	b.n	800fad8 <Paint_DrawPoint+0xc0>
        {
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++)
 800fa64:	2300      	movs	r3, #0
 800fa66:	81bb      	strh	r3, [r7, #12]
 800fa68:	e029      	b.n	800fabe <Paint_DrawPoint+0xa6>
            {
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 800fa6a:	88fa      	ldrh	r2, [r7, #6]
 800fa6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fa70:	441a      	add	r2, r3
 800fa72:	787b      	ldrb	r3, [r7, #1]
 800fa74:	1ad3      	subs	r3, r2, r3
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	db28      	blt.n	800facc <Paint_DrawPoint+0xb4>
 800fa7a:	88ba      	ldrh	r2, [r7, #4]
 800fa7c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800fa80:	441a      	add	r2, r3
 800fa82:	787b      	ldrb	r3, [r7, #1]
 800fa84:	1ad3      	subs	r3, r2, r3
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	db20      	blt.n	800facc <Paint_DrawPoint+0xb4>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 800fa8a:	89fa      	ldrh	r2, [r7, #14]
 800fa8c:	88fb      	ldrh	r3, [r7, #6]
 800fa8e:	4413      	add	r3, r2
 800fa90:	b29a      	uxth	r2, r3
 800fa92:	787b      	ldrb	r3, [r7, #1]
 800fa94:	b29b      	uxth	r3, r3
 800fa96:	1ad3      	subs	r3, r2, r3
 800fa98:	b298      	uxth	r0, r3
 800fa9a:	89ba      	ldrh	r2, [r7, #12]
 800fa9c:	88bb      	ldrh	r3, [r7, #4]
 800fa9e:	4413      	add	r3, r2
 800faa0:	b29a      	uxth	r2, r3
 800faa2:	787b      	ldrb	r3, [r7, #1]
 800faa4:	b29b      	uxth	r3, r3
 800faa6:	1ad3      	subs	r3, r2, r3
 800faa8:	b29b      	uxth	r3, r3
 800faaa:	887a      	ldrh	r2, [r7, #2]
 800faac:	4619      	mov	r1, r3
 800faae:	f7ff fec5 	bl	800f83c <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++)
 800fab2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800fab6:	b29b      	uxth	r3, r3
 800fab8:	3301      	adds	r3, #1
 800faba:	b29b      	uxth	r3, r3
 800fabc:	81bb      	strh	r3, [r7, #12]
 800fabe:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800fac2:	787b      	ldrb	r3, [r7, #1]
 800fac4:	005b      	lsls	r3, r3, #1
 800fac6:	3b01      	subs	r3, #1
 800fac8:	429a      	cmp	r2, r3
 800faca:	dbce      	blt.n	800fa6a <Paint_DrawPoint+0x52>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++)
 800facc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fad0:	b29b      	uxth	r3, r3
 800fad2:	3301      	adds	r3, #1
 800fad4:	b29b      	uxth	r3, r3
 800fad6:	81fb      	strh	r3, [r7, #14]
 800fad8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800fadc:	787b      	ldrb	r3, [r7, #1]
 800fade:	005b      	lsls	r3, r3, #1
 800fae0:	3b01      	subs	r3, #1
 800fae2:	429a      	cmp	r2, r3
 800fae4:	dbbe      	blt.n	800fa64 <Paint_DrawPoint+0x4c>
 800fae6:	e02b      	b.n	800fb40 <Paint_DrawPoint+0x128>
            }
        }
    }
    else
    {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++)
 800fae8:	2300      	movs	r3, #0
 800faea:	81fb      	strh	r3, [r7, #14]
 800faec:	e023      	b.n	800fb36 <Paint_DrawPoint+0x11e>
        {
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++)
 800faee:	2300      	movs	r3, #0
 800faf0:	81bb      	strh	r3, [r7, #12]
 800faf2:	e015      	b.n	800fb20 <Paint_DrawPoint+0x108>
            {
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 800faf4:	89fa      	ldrh	r2, [r7, #14]
 800faf6:	88fb      	ldrh	r3, [r7, #6]
 800faf8:	4413      	add	r3, r2
 800fafa:	b29b      	uxth	r3, r3
 800fafc:	3b01      	subs	r3, #1
 800fafe:	b298      	uxth	r0, r3
 800fb00:	89ba      	ldrh	r2, [r7, #12]
 800fb02:	88bb      	ldrh	r3, [r7, #4]
 800fb04:	4413      	add	r3, r2
 800fb06:	b29b      	uxth	r3, r3
 800fb08:	3b01      	subs	r3, #1
 800fb0a:	b29b      	uxth	r3, r3
 800fb0c:	887a      	ldrh	r2, [r7, #2]
 800fb0e:	4619      	mov	r1, r3
 800fb10:	f7ff fe94 	bl	800f83c <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++)
 800fb14:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800fb18:	b29b      	uxth	r3, r3
 800fb1a:	3301      	adds	r3, #1
 800fb1c:	b29b      	uxth	r3, r3
 800fb1e:	81bb      	strh	r3, [r7, #12]
 800fb20:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800fb24:	787b      	ldrb	r3, [r7, #1]
 800fb26:	429a      	cmp	r2, r3
 800fb28:	dbe4      	blt.n	800faf4 <Paint_DrawPoint+0xdc>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++)
 800fb2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800fb2e:	b29b      	uxth	r3, r3
 800fb30:	3301      	adds	r3, #1
 800fb32:	b29b      	uxth	r3, r3
 800fb34:	81fb      	strh	r3, [r7, #14]
 800fb36:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800fb3a:	787b      	ldrb	r3, [r7, #1]
 800fb3c:	429a      	cmp	r2, r3
 800fb3e:	dbd6      	blt.n	800faee <Paint_DrawPoint+0xd6>
            }
        }
    }
}
 800fb40:	3714      	adds	r7, #20
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd90      	pop	{r4, r7, pc}
 800fb46:	bf00      	nop
 800fb48:	2400b8d8 	.word	0x2400b8d8
 800fb4c:	08021410 	.word	0x08021410

0800fb50 <Paint_DrawLine>:
    Yend   ：End point Ypoint coordinate
    Color  ：The color of the line segment
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, 
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 800fb50:	b590      	push	{r4, r7, lr}
 800fb52:	b08d      	sub	sp, #52	; 0x34
 800fb54:	af02      	add	r7, sp, #8
 800fb56:	4604      	mov	r4, r0
 800fb58:	4608      	mov	r0, r1
 800fb5a:	4611      	mov	r1, r2
 800fb5c:	461a      	mov	r2, r3
 800fb5e:	4623      	mov	r3, r4
 800fb60:	80fb      	strh	r3, [r7, #6]
 800fb62:	4603      	mov	r3, r0
 800fb64:	80bb      	strh	r3, [r7, #4]
 800fb66:	460b      	mov	r3, r1
 800fb68:	807b      	strh	r3, [r7, #2]
 800fb6a:	4613      	mov	r3, r2
 800fb6c:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800fb6e:	4b4d      	ldr	r3, [pc, #308]	; (800fca4 <Paint_DrawLine+0x154>)
 800fb70:	889b      	ldrh	r3, [r3, #4]
 800fb72:	b29b      	uxth	r3, r3
 800fb74:	88fa      	ldrh	r2, [r7, #6]
 800fb76:	429a      	cmp	r2, r3
 800fb78:	d811      	bhi.n	800fb9e <Paint_DrawLine+0x4e>
 800fb7a:	4b4a      	ldr	r3, [pc, #296]	; (800fca4 <Paint_DrawLine+0x154>)
 800fb7c:	88db      	ldrh	r3, [r3, #6]
 800fb7e:	b29b      	uxth	r3, r3
 800fb80:	88ba      	ldrh	r2, [r7, #4]
 800fb82:	429a      	cmp	r2, r3
 800fb84:	d80b      	bhi.n	800fb9e <Paint_DrawLine+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 800fb86:	4b47      	ldr	r3, [pc, #284]	; (800fca4 <Paint_DrawLine+0x154>)
 800fb88:	889b      	ldrh	r3, [r3, #4]
 800fb8a:	b29b      	uxth	r3, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800fb8c:	887a      	ldrh	r2, [r7, #2]
 800fb8e:	429a      	cmp	r2, r3
 800fb90:	d805      	bhi.n	800fb9e <Paint_DrawLine+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 800fb92:	4b44      	ldr	r3, [pc, #272]	; (800fca4 <Paint_DrawLine+0x154>)
 800fb94:	88db      	ldrh	r3, [r3, #6]
 800fb96:	b29b      	uxth	r3, r3
 800fb98:	883a      	ldrh	r2, [r7, #0]
 800fb9a:	429a      	cmp	r2, r3
 800fb9c:	d903      	bls.n	800fba6 <Paint_DrawLine+0x56>
        Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
 800fb9e:	4842      	ldr	r0, [pc, #264]	; (800fca8 <Paint_DrawLine+0x158>)
 800fba0:	f00d fe7e 	bl	801d8a0 <puts>
        return;
 800fba4:	e07b      	b.n	800fc9e <Paint_DrawLine+0x14e>
    }

    UWORD Xpoint = Xstart;
 800fba6:	88fb      	ldrh	r3, [r7, #6]
 800fba8:	84fb      	strh	r3, [r7, #38]	; 0x26
    UWORD Ypoint = Ystart;
 800fbaa:	88bb      	ldrh	r3, [r7, #4]
 800fbac:	84bb      	strh	r3, [r7, #36]	; 0x24
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 800fbae:	887a      	ldrh	r2, [r7, #2]
 800fbb0:	88fb      	ldrh	r3, [r7, #6]
 800fbb2:	1ad3      	subs	r3, r2, r3
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	bfb8      	it	lt
 800fbb8:	425b      	neglt	r3, r3
 800fbba:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 800fbbc:	883a      	ldrh	r2, [r7, #0]
 800fbbe:	88bb      	ldrh	r3, [r7, #4]
 800fbc0:	1ad3      	subs	r3, r2, r3
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	bfb8      	it	lt
 800fbc6:	425b      	neglt	r3, r3
 800fbc8:	425b      	negs	r3, r3
 800fbca:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 800fbcc:	88fa      	ldrh	r2, [r7, #6]
 800fbce:	887b      	ldrh	r3, [r7, #2]
 800fbd0:	429a      	cmp	r2, r3
 800fbd2:	d201      	bcs.n	800fbd8 <Paint_DrawLine+0x88>
 800fbd4:	2301      	movs	r3, #1
 800fbd6:	e001      	b.n	800fbdc <Paint_DrawLine+0x8c>
 800fbd8:	f04f 33ff 	mov.w	r3, #4294967295
 800fbdc:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 800fbde:	88ba      	ldrh	r2, [r7, #4]
 800fbe0:	883b      	ldrh	r3, [r7, #0]
 800fbe2:	429a      	cmp	r2, r3
 800fbe4:	d201      	bcs.n	800fbea <Paint_DrawLine+0x9a>
 800fbe6:	2301      	movs	r3, #1
 800fbe8:	e001      	b.n	800fbee <Paint_DrawLine+0x9e>
 800fbea:	f04f 33ff 	mov.w	r3, #4294967295
 800fbee:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 800fbf0:	69ba      	ldr	r2, [r7, #24]
 800fbf2:	697b      	ldr	r3, [r7, #20]
 800fbf4:	4413      	add	r3, r2
 800fbf6:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	77fb      	strb	r3, [r7, #31]

    for (;;)
    {
        Dotted_Len++;
 800fbfc:	7ffb      	ldrb	r3, [r7, #31]
 800fbfe:	3301      	adds	r3, #1
 800fc00:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0)
 800fc02:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800fc06:	2b01      	cmp	r3, #1
 800fc08:	d118      	bne.n	800fc3c <Paint_DrawLine+0xec>
 800fc0a:	7ffa      	ldrb	r2, [r7, #31]
 800fc0c:	4b27      	ldr	r3, [pc, #156]	; (800fcac <Paint_DrawLine+0x15c>)
 800fc0e:	fba3 1302 	umull	r1, r3, r3, r2
 800fc12:	0859      	lsrs	r1, r3, #1
 800fc14:	460b      	mov	r3, r1
 800fc16:	005b      	lsls	r3, r3, #1
 800fc18:	440b      	add	r3, r1
 800fc1a:	1ad3      	subs	r3, r2, r3
 800fc1c:	b2db      	uxtb	r3, r3
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d10c      	bne.n	800fc3c <Paint_DrawLine+0xec>
        {
            //Debug("LINE_DOTTED\r\n");
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 800fc22:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800fc26:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800fc28:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800fc2a:	2201      	movs	r2, #1
 800fc2c:	9200      	str	r2, [sp, #0]
 800fc2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc32:	f7ff fef1 	bl	800fa18 <Paint_DrawPoint>
            Dotted_Len = 0;
 800fc36:	2300      	movs	r3, #0
 800fc38:	77fb      	strb	r3, [r7, #31]
 800fc3a:	e008      	b.n	800fc4e <Paint_DrawLine+0xfe>
        }
        else
        {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 800fc3c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800fc40:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800fc42:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800fc44:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800fc46:	2401      	movs	r4, #1
 800fc48:	9400      	str	r4, [sp, #0]
 800fc4a:	f7ff fee5 	bl	800fa18 <Paint_DrawPoint>
        }
        if (2 * Esp >= dy)
 800fc4e:	6a3b      	ldr	r3, [r7, #32]
 800fc50:	005b      	lsls	r3, r3, #1
 800fc52:	697a      	ldr	r2, [r7, #20]
 800fc54:	429a      	cmp	r2, r3
 800fc56:	dc0c      	bgt.n	800fc72 <Paint_DrawLine+0x122>
        {
            if (Xpoint == Xend)
 800fc58:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800fc5a:	887b      	ldrh	r3, [r7, #2]
 800fc5c:	429a      	cmp	r2, r3
 800fc5e:	d01b      	beq.n	800fc98 <Paint_DrawLine+0x148>
                break;
            Esp += dy;
 800fc60:	6a3a      	ldr	r2, [r7, #32]
 800fc62:	697b      	ldr	r3, [r7, #20]
 800fc64:	4413      	add	r3, r2
 800fc66:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 800fc68:	693b      	ldr	r3, [r7, #16]
 800fc6a:	b29a      	uxth	r2, r3
 800fc6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fc6e:	4413      	add	r3, r2
 800fc70:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if (2 * Esp <= dx)
 800fc72:	6a3b      	ldr	r3, [r7, #32]
 800fc74:	005b      	lsls	r3, r3, #1
 800fc76:	69ba      	ldr	r2, [r7, #24]
 800fc78:	429a      	cmp	r2, r3
 800fc7a:	dbbf      	blt.n	800fbfc <Paint_DrawLine+0xac>
        {
            if (Ypoint == Yend)
 800fc7c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fc7e:	883b      	ldrh	r3, [r7, #0]
 800fc80:	429a      	cmp	r2, r3
 800fc82:	d00b      	beq.n	800fc9c <Paint_DrawLine+0x14c>
                break;
            Esp += dx;
 800fc84:	6a3a      	ldr	r2, [r7, #32]
 800fc86:	69bb      	ldr	r3, [r7, #24]
 800fc88:	4413      	add	r3, r2
 800fc8a:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	b29a      	uxth	r2, r3
 800fc90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc92:	4413      	add	r3, r2
 800fc94:	84bb      	strh	r3, [r7, #36]	; 0x24
        Dotted_Len++;
 800fc96:	e7b1      	b.n	800fbfc <Paint_DrawLine+0xac>
                break;
 800fc98:	bf00      	nop
 800fc9a:	e000      	b.n	800fc9e <Paint_DrawLine+0x14e>
                break;
 800fc9c:	bf00      	nop
        }
    }
}
 800fc9e:	372c      	adds	r7, #44	; 0x2c
 800fca0:	46bd      	mov	sp, r7
 800fca2:	bd90      	pop	{r4, r7, pc}
 800fca4:	2400b8d8 	.word	0x2400b8d8
 800fca8:	08021450 	.word	0x08021450
 800fcac:	aaaaaaab 	.word	0xaaaaaaab

0800fcb0 <Paint_DrawRectangle>:
    Color  ：The color of the Rectangular segment
    Filled : Whether it is filled--- 1 solid 0：empty
******************************************************************************/
void Paint_DrawRectangle( UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, 
                          UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Filled )
{
 800fcb0:	b590      	push	{r4, r7, lr}
 800fcb2:	b089      	sub	sp, #36	; 0x24
 800fcb4:	af04      	add	r7, sp, #16
 800fcb6:	4604      	mov	r4, r0
 800fcb8:	4608      	mov	r0, r1
 800fcba:	4611      	mov	r1, r2
 800fcbc:	461a      	mov	r2, r3
 800fcbe:	4623      	mov	r3, r4
 800fcc0:	80fb      	strh	r3, [r7, #6]
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	80bb      	strh	r3, [r7, #4]
 800fcc6:	460b      	mov	r3, r1
 800fcc8:	807b      	strh	r3, [r7, #2]
 800fcca:	4613      	mov	r3, r2
 800fccc:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800fcce:	4b3a      	ldr	r3, [pc, #232]	; (800fdb8 <Paint_DrawRectangle+0x108>)
 800fcd0:	889b      	ldrh	r3, [r3, #4]
 800fcd2:	b29b      	uxth	r3, r3
 800fcd4:	88fa      	ldrh	r2, [r7, #6]
 800fcd6:	429a      	cmp	r2, r3
 800fcd8:	d811      	bhi.n	800fcfe <Paint_DrawRectangle+0x4e>
 800fcda:	4b37      	ldr	r3, [pc, #220]	; (800fdb8 <Paint_DrawRectangle+0x108>)
 800fcdc:	88db      	ldrh	r3, [r3, #6]
 800fcde:	b29b      	uxth	r3, r3
 800fce0:	88ba      	ldrh	r2, [r7, #4]
 800fce2:	429a      	cmp	r2, r3
 800fce4:	d80b      	bhi.n	800fcfe <Paint_DrawRectangle+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 800fce6:	4b34      	ldr	r3, [pc, #208]	; (800fdb8 <Paint_DrawRectangle+0x108>)
 800fce8:	889b      	ldrh	r3, [r3, #4]
 800fcea:	b29b      	uxth	r3, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800fcec:	887a      	ldrh	r2, [r7, #2]
 800fcee:	429a      	cmp	r2, r3
 800fcf0:	d805      	bhi.n	800fcfe <Paint_DrawRectangle+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 800fcf2:	4b31      	ldr	r3, [pc, #196]	; (800fdb8 <Paint_DrawRectangle+0x108>)
 800fcf4:	88db      	ldrh	r3, [r3, #6]
 800fcf6:	b29b      	uxth	r3, r3
 800fcf8:	883a      	ldrh	r2, [r7, #0]
 800fcfa:	429a      	cmp	r2, r3
 800fcfc:	d903      	bls.n	800fd06 <Paint_DrawRectangle+0x56>
        Debug("Input exceeds the normal display range\r\n");
 800fcfe:	482f      	ldr	r0, [pc, #188]	; (800fdbc <Paint_DrawRectangle+0x10c>)
 800fd00:	f00d fdce 	bl	801d8a0 <puts>
        return;
 800fd04:	e054      	b.n	800fdb0 <Paint_DrawRectangle+0x100>
    }

    if (Filled )
 800fd06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d018      	beq.n	800fd40 <Paint_DrawRectangle+0x90>
    {
        UWORD Ypoint;
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++)
 800fd0e:	88bb      	ldrh	r3, [r7, #4]
 800fd10:	81fb      	strh	r3, [r7, #14]
 800fd12:	e010      	b.n	800fd36 <Paint_DrawRectangle+0x86>
        {
            Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color ,Line_width, LINE_STYLE_SOLID);
 800fd14:	89fc      	ldrh	r4, [r7, #14]
 800fd16:	887a      	ldrh	r2, [r7, #2]
 800fd18:	89f9      	ldrh	r1, [r7, #14]
 800fd1a:	88f8      	ldrh	r0, [r7, #6]
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	9302      	str	r3, [sp, #8]
 800fd20:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fd24:	9301      	str	r3, [sp, #4]
 800fd26:	8c3b      	ldrh	r3, [r7, #32]
 800fd28:	9300      	str	r3, [sp, #0]
 800fd2a:	4623      	mov	r3, r4
 800fd2c:	f7ff ff10 	bl	800fb50 <Paint_DrawLine>
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++)
 800fd30:	89fb      	ldrh	r3, [r7, #14]
 800fd32:	3301      	adds	r3, #1
 800fd34:	81fb      	strh	r3, [r7, #14]
 800fd36:	89fa      	ldrh	r2, [r7, #14]
 800fd38:	883b      	ldrh	r3, [r7, #0]
 800fd3a:	429a      	cmp	r2, r3
 800fd3c:	d3ea      	bcc.n	800fd14 <Paint_DrawRectangle+0x64>
 800fd3e:	e037      	b.n	800fdb0 <Paint_DrawRectangle+0x100>
        }
    }
    else
    {
        Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color ,Line_width, LINE_STYLE_SOLID);
 800fd40:	88bc      	ldrh	r4, [r7, #4]
 800fd42:	887a      	ldrh	r2, [r7, #2]
 800fd44:	88b9      	ldrh	r1, [r7, #4]
 800fd46:	88f8      	ldrh	r0, [r7, #6]
 800fd48:	2300      	movs	r3, #0
 800fd4a:	9302      	str	r3, [sp, #8]
 800fd4c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fd50:	9301      	str	r3, [sp, #4]
 800fd52:	8c3b      	ldrh	r3, [r7, #32]
 800fd54:	9300      	str	r3, [sp, #0]
 800fd56:	4623      	mov	r3, r4
 800fd58:	f7ff fefa 	bl	800fb50 <Paint_DrawLine>
        Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color ,Line_width, LINE_STYLE_SOLID);
 800fd5c:	883c      	ldrh	r4, [r7, #0]
 800fd5e:	88fa      	ldrh	r2, [r7, #6]
 800fd60:	88b9      	ldrh	r1, [r7, #4]
 800fd62:	88f8      	ldrh	r0, [r7, #6]
 800fd64:	2300      	movs	r3, #0
 800fd66:	9302      	str	r3, [sp, #8]
 800fd68:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fd6c:	9301      	str	r3, [sp, #4]
 800fd6e:	8c3b      	ldrh	r3, [r7, #32]
 800fd70:	9300      	str	r3, [sp, #0]
 800fd72:	4623      	mov	r3, r4
 800fd74:	f7ff feec 	bl	800fb50 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xend, Ystart, Color ,Line_width, LINE_STYLE_SOLID);
 800fd78:	88bc      	ldrh	r4, [r7, #4]
 800fd7a:	887a      	ldrh	r2, [r7, #2]
 800fd7c:	8839      	ldrh	r1, [r7, #0]
 800fd7e:	8878      	ldrh	r0, [r7, #2]
 800fd80:	2300      	movs	r3, #0
 800fd82:	9302      	str	r3, [sp, #8]
 800fd84:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fd88:	9301      	str	r3, [sp, #4]
 800fd8a:	8c3b      	ldrh	r3, [r7, #32]
 800fd8c:	9300      	str	r3, [sp, #0]
 800fd8e:	4623      	mov	r3, r4
 800fd90:	f7ff fede 	bl	800fb50 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xstart, Yend, Color ,Line_width, LINE_STYLE_SOLID);
 800fd94:	883c      	ldrh	r4, [r7, #0]
 800fd96:	88fa      	ldrh	r2, [r7, #6]
 800fd98:	8839      	ldrh	r1, [r7, #0]
 800fd9a:	8878      	ldrh	r0, [r7, #2]
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	9302      	str	r3, [sp, #8]
 800fda0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fda4:	9301      	str	r3, [sp, #4]
 800fda6:	8c3b      	ldrh	r3, [r7, #32]
 800fda8:	9300      	str	r3, [sp, #0]
 800fdaa:	4623      	mov	r3, r4
 800fdac:	f7ff fed0 	bl	800fb50 <Paint_DrawLine>
    }
}
 800fdb0:	3714      	adds	r7, #20
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	bd90      	pop	{r4, r7, pc}
 800fdb6:	bf00      	nop
 800fdb8:	2400b8d8 	.word	0x2400b8d8
 800fdbc:	08021490 	.word	0x08021490

0800fdc0 <Paint_DrawCircle>:
    Color     ：The color of the ：circle segment
    Filled    : Whether it is filled: 1 filling 0：Do not
******************************************************************************/
void Paint_DrawCircle(  UWORD X_Center, UWORD Y_Center, UWORD Radius, 
                        UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill )
{
 800fdc0:	b590      	push	{r4, r7, lr}
 800fdc2:	b087      	sub	sp, #28
 800fdc4:	af02      	add	r7, sp, #8
 800fdc6:	4604      	mov	r4, r0
 800fdc8:	4608      	mov	r0, r1
 800fdca:	4611      	mov	r1, r2
 800fdcc:	461a      	mov	r2, r3
 800fdce:	4623      	mov	r3, r4
 800fdd0:	80fb      	strh	r3, [r7, #6]
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	80bb      	strh	r3, [r7, #4]
 800fdd6:	460b      	mov	r3, r1
 800fdd8:	807b      	strh	r3, [r7, #2]
 800fdda:	4613      	mov	r3, r2
 800fddc:	803b      	strh	r3, [r7, #0]
    if (X_Center > Paint.Width || Y_Center >= Paint.Height) {
 800fdde:	4b68      	ldr	r3, [pc, #416]	; (800ff80 <Paint_DrawCircle+0x1c0>)
 800fde0:	889b      	ldrh	r3, [r3, #4]
 800fde2:	b29b      	uxth	r3, r3
 800fde4:	88fa      	ldrh	r2, [r7, #6]
 800fde6:	429a      	cmp	r2, r3
 800fde8:	d805      	bhi.n	800fdf6 <Paint_DrawCircle+0x36>
 800fdea:	4b65      	ldr	r3, [pc, #404]	; (800ff80 <Paint_DrawCircle+0x1c0>)
 800fdec:	88db      	ldrh	r3, [r3, #6]
 800fdee:	b29b      	uxth	r3, r3
 800fdf0:	88ba      	ldrh	r2, [r7, #4]
 800fdf2:	429a      	cmp	r2, r3
 800fdf4:	d303      	bcc.n	800fdfe <Paint_DrawCircle+0x3e>
        Debug("Paint_DrawCircle Input exceeds the normal display range\r\n");
 800fdf6:	4863      	ldr	r0, [pc, #396]	; (800ff84 <Paint_DrawCircle+0x1c4>)
 800fdf8:	f00d fd52 	bl	801d8a0 <puts>
        return;
 800fdfc:	e16b      	b.n	80100d6 <Paint_DrawCircle+0x316>
    }

    //Draw a circle from(0, R) as a starting point
    int16_t XCurrent, YCurrent;
    XCurrent = 0;
 800fdfe:	2300      	movs	r3, #0
 800fe00:	81fb      	strh	r3, [r7, #14]
    YCurrent = Radius;
 800fe02:	887b      	ldrh	r3, [r7, #2]
 800fe04:	81bb      	strh	r3, [r7, #12]

    //Cumulative error,judge the next point of the logo
    int16_t Esp = 3 - (Radius << 1 );
 800fe06:	887b      	ldrh	r3, [r7, #2]
 800fe08:	005b      	lsls	r3, r3, #1
 800fe0a:	b29b      	uxth	r3, r3
 800fe0c:	f1c3 0303 	rsb	r3, r3, #3
 800fe10:	b29b      	uxth	r3, r3
 800fe12:	817b      	strh	r3, [r7, #10]

    int16_t sCountY;
    if (Draw_Fill == DRAW_FILL_FULL) {
 800fe14:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fe18:	2b01      	cmp	r3, #1
 800fe1a:	f040 8155 	bne.w	80100c8 <Paint_DrawCircle+0x308>
        while (XCurrent <= YCurrent ) { //Realistic circles
 800fe1e:	e0a6      	b.n	800ff6e <Paint_DrawCircle+0x1ae>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 800fe20:	89fb      	ldrh	r3, [r7, #14]
 800fe22:	813b      	strh	r3, [r7, #8]
 800fe24:	e075      	b.n	800ff12 <Paint_DrawCircle+0x152>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//1
 800fe26:	89fa      	ldrh	r2, [r7, #14]
 800fe28:	88fb      	ldrh	r3, [r7, #6]
 800fe2a:	4413      	add	r3, r2
 800fe2c:	b298      	uxth	r0, r3
 800fe2e:	893a      	ldrh	r2, [r7, #8]
 800fe30:	88bb      	ldrh	r3, [r7, #4]
 800fe32:	4413      	add	r3, r2
 800fe34:	b299      	uxth	r1, r3
 800fe36:	883a      	ldrh	r2, [r7, #0]
 800fe38:	2301      	movs	r3, #1
 800fe3a:	9300      	str	r3, [sp, #0]
 800fe3c:	2301      	movs	r3, #1
 800fe3e:	f7ff fdeb 	bl	800fa18 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//2
 800fe42:	89fb      	ldrh	r3, [r7, #14]
 800fe44:	88fa      	ldrh	r2, [r7, #6]
 800fe46:	1ad3      	subs	r3, r2, r3
 800fe48:	b298      	uxth	r0, r3
 800fe4a:	893a      	ldrh	r2, [r7, #8]
 800fe4c:	88bb      	ldrh	r3, [r7, #4]
 800fe4e:	4413      	add	r3, r2
 800fe50:	b299      	uxth	r1, r3
 800fe52:	883a      	ldrh	r2, [r7, #0]
 800fe54:	2301      	movs	r3, #1
 800fe56:	9300      	str	r3, [sp, #0]
 800fe58:	2301      	movs	r3, #1
 800fe5a:	f7ff fddd 	bl	800fa18 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//3
 800fe5e:	893b      	ldrh	r3, [r7, #8]
 800fe60:	88fa      	ldrh	r2, [r7, #6]
 800fe62:	1ad3      	subs	r3, r2, r3
 800fe64:	b298      	uxth	r0, r3
 800fe66:	89fa      	ldrh	r2, [r7, #14]
 800fe68:	88bb      	ldrh	r3, [r7, #4]
 800fe6a:	4413      	add	r3, r2
 800fe6c:	b299      	uxth	r1, r3
 800fe6e:	883a      	ldrh	r2, [r7, #0]
 800fe70:	2301      	movs	r3, #1
 800fe72:	9300      	str	r3, [sp, #0]
 800fe74:	2301      	movs	r3, #1
 800fe76:	f7ff fdcf 	bl	800fa18 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//4
 800fe7a:	893b      	ldrh	r3, [r7, #8]
 800fe7c:	88fa      	ldrh	r2, [r7, #6]
 800fe7e:	1ad3      	subs	r3, r2, r3
 800fe80:	b298      	uxth	r0, r3
 800fe82:	89fb      	ldrh	r3, [r7, #14]
 800fe84:	88ba      	ldrh	r2, [r7, #4]
 800fe86:	1ad3      	subs	r3, r2, r3
 800fe88:	b299      	uxth	r1, r3
 800fe8a:	883a      	ldrh	r2, [r7, #0]
 800fe8c:	2301      	movs	r3, #1
 800fe8e:	9300      	str	r3, [sp, #0]
 800fe90:	2301      	movs	r3, #1
 800fe92:	f7ff fdc1 	bl	800fa18 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//5
 800fe96:	89fb      	ldrh	r3, [r7, #14]
 800fe98:	88fa      	ldrh	r2, [r7, #6]
 800fe9a:	1ad3      	subs	r3, r2, r3
 800fe9c:	b298      	uxth	r0, r3
 800fe9e:	893b      	ldrh	r3, [r7, #8]
 800fea0:	88ba      	ldrh	r2, [r7, #4]
 800fea2:	1ad3      	subs	r3, r2, r3
 800fea4:	b299      	uxth	r1, r3
 800fea6:	883a      	ldrh	r2, [r7, #0]
 800fea8:	2301      	movs	r3, #1
 800feaa:	9300      	str	r3, [sp, #0]
 800feac:	2301      	movs	r3, #1
 800feae:	f7ff fdb3 	bl	800fa18 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//6
 800feb2:	89fa      	ldrh	r2, [r7, #14]
 800feb4:	88fb      	ldrh	r3, [r7, #6]
 800feb6:	4413      	add	r3, r2
 800feb8:	b298      	uxth	r0, r3
 800feba:	893b      	ldrh	r3, [r7, #8]
 800febc:	88ba      	ldrh	r2, [r7, #4]
 800febe:	1ad3      	subs	r3, r2, r3
 800fec0:	b299      	uxth	r1, r3
 800fec2:	883a      	ldrh	r2, [r7, #0]
 800fec4:	2301      	movs	r3, #1
 800fec6:	9300      	str	r3, [sp, #0]
 800fec8:	2301      	movs	r3, #1
 800feca:	f7ff fda5 	bl	800fa18 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//7
 800fece:	893a      	ldrh	r2, [r7, #8]
 800fed0:	88fb      	ldrh	r3, [r7, #6]
 800fed2:	4413      	add	r3, r2
 800fed4:	b298      	uxth	r0, r3
 800fed6:	89fb      	ldrh	r3, [r7, #14]
 800fed8:	88ba      	ldrh	r2, [r7, #4]
 800feda:	1ad3      	subs	r3, r2, r3
 800fedc:	b299      	uxth	r1, r3
 800fede:	883a      	ldrh	r2, [r7, #0]
 800fee0:	2301      	movs	r3, #1
 800fee2:	9300      	str	r3, [sp, #0]
 800fee4:	2301      	movs	r3, #1
 800fee6:	f7ff fd97 	bl	800fa18 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 800feea:	893a      	ldrh	r2, [r7, #8]
 800feec:	88fb      	ldrh	r3, [r7, #6]
 800feee:	4413      	add	r3, r2
 800fef0:	b298      	uxth	r0, r3
 800fef2:	89fa      	ldrh	r2, [r7, #14]
 800fef4:	88bb      	ldrh	r3, [r7, #4]
 800fef6:	4413      	add	r3, r2
 800fef8:	b299      	uxth	r1, r3
 800fefa:	883a      	ldrh	r2, [r7, #0]
 800fefc:	2301      	movs	r3, #1
 800fefe:	9300      	str	r3, [sp, #0]
 800ff00:	2301      	movs	r3, #1
 800ff02:	f7ff fd89 	bl	800fa18 <Paint_DrawPoint>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 800ff06:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800ff0a:	b29b      	uxth	r3, r3
 800ff0c:	3301      	adds	r3, #1
 800ff0e:	b29b      	uxth	r3, r3
 800ff10:	813b      	strh	r3, [r7, #8]
 800ff12:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800ff16:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ff1a:	429a      	cmp	r2, r3
 800ff1c:	dd83      	ble.n	800fe26 <Paint_DrawCircle+0x66>
            }
            if (Esp < 0 )
 800ff1e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	da09      	bge.n	800ff3a <Paint_DrawCircle+0x17a>
                Esp += 4 * XCurrent + 6;
 800ff26:	89fb      	ldrh	r3, [r7, #14]
 800ff28:	009b      	lsls	r3, r3, #2
 800ff2a:	b29a      	uxth	r2, r3
 800ff2c:	897b      	ldrh	r3, [r7, #10]
 800ff2e:	4413      	add	r3, r2
 800ff30:	b29b      	uxth	r3, r3
 800ff32:	3306      	adds	r3, #6
 800ff34:	b29b      	uxth	r3, r3
 800ff36:	817b      	strh	r3, [r7, #10]
 800ff38:	e013      	b.n	800ff62 <Paint_DrawCircle+0x1a2>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 800ff3a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800ff3e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ff42:	1ad3      	subs	r3, r2, r3
 800ff44:	b29b      	uxth	r3, r3
 800ff46:	009b      	lsls	r3, r3, #2
 800ff48:	b29a      	uxth	r2, r3
 800ff4a:	897b      	ldrh	r3, [r7, #10]
 800ff4c:	4413      	add	r3, r2
 800ff4e:	b29b      	uxth	r3, r3
 800ff50:	330a      	adds	r3, #10
 800ff52:	b29b      	uxth	r3, r3
 800ff54:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 800ff56:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ff5a:	b29b      	uxth	r3, r3
 800ff5c:	3b01      	subs	r3, #1
 800ff5e:	b29b      	uxth	r3, r3
 800ff60:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 800ff62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ff66:	b29b      	uxth	r3, r3
 800ff68:	3301      	adds	r3, #1
 800ff6a:	b29b      	uxth	r3, r3
 800ff6c:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) { //Realistic circles
 800ff6e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800ff72:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ff76:	429a      	cmp	r2, r3
 800ff78:	f77f af52 	ble.w	800fe20 <Paint_DrawCircle+0x60>
 800ff7c:	e0ab      	b.n	80100d6 <Paint_DrawCircle+0x316>
 800ff7e:	bf00      	nop
 800ff80:	2400b8d8 	.word	0x2400b8d8
 800ff84:	080214c0 	.word	0x080214c0
        }
    } else { //Draw a hollow circle
        while (XCurrent <= YCurrent ) {
            Paint_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//1
 800ff88:	89fa      	ldrh	r2, [r7, #14]
 800ff8a:	88fb      	ldrh	r3, [r7, #6]
 800ff8c:	4413      	add	r3, r2
 800ff8e:	b298      	uxth	r0, r3
 800ff90:	89ba      	ldrh	r2, [r7, #12]
 800ff92:	88bb      	ldrh	r3, [r7, #4]
 800ff94:	4413      	add	r3, r2
 800ff96:	b299      	uxth	r1, r3
 800ff98:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ff9c:	883a      	ldrh	r2, [r7, #0]
 800ff9e:	2401      	movs	r4, #1
 800ffa0:	9400      	str	r4, [sp, #0]
 800ffa2:	f7ff fd39 	bl	800fa18 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//2
 800ffa6:	89fb      	ldrh	r3, [r7, #14]
 800ffa8:	88fa      	ldrh	r2, [r7, #6]
 800ffaa:	1ad3      	subs	r3, r2, r3
 800ffac:	b298      	uxth	r0, r3
 800ffae:	89ba      	ldrh	r2, [r7, #12]
 800ffb0:	88bb      	ldrh	r3, [r7, #4]
 800ffb2:	4413      	add	r3, r2
 800ffb4:	b299      	uxth	r1, r3
 800ffb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ffba:	883a      	ldrh	r2, [r7, #0]
 800ffbc:	2401      	movs	r4, #1
 800ffbe:	9400      	str	r4, [sp, #0]
 800ffc0:	f7ff fd2a 	bl	800fa18 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//3
 800ffc4:	89bb      	ldrh	r3, [r7, #12]
 800ffc6:	88fa      	ldrh	r2, [r7, #6]
 800ffc8:	1ad3      	subs	r3, r2, r3
 800ffca:	b298      	uxth	r0, r3
 800ffcc:	89fa      	ldrh	r2, [r7, #14]
 800ffce:	88bb      	ldrh	r3, [r7, #4]
 800ffd0:	4413      	add	r3, r2
 800ffd2:	b299      	uxth	r1, r3
 800ffd4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ffd8:	883a      	ldrh	r2, [r7, #0]
 800ffda:	2401      	movs	r4, #1
 800ffdc:	9400      	str	r4, [sp, #0]
 800ffde:	f7ff fd1b 	bl	800fa18 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//4
 800ffe2:	89bb      	ldrh	r3, [r7, #12]
 800ffe4:	88fa      	ldrh	r2, [r7, #6]
 800ffe6:	1ad3      	subs	r3, r2, r3
 800ffe8:	b298      	uxth	r0, r3
 800ffea:	89fb      	ldrh	r3, [r7, #14]
 800ffec:	88ba      	ldrh	r2, [r7, #4]
 800ffee:	1ad3      	subs	r3, r2, r3
 800fff0:	b299      	uxth	r1, r3
 800fff2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fff6:	883a      	ldrh	r2, [r7, #0]
 800fff8:	2401      	movs	r4, #1
 800fffa:	9400      	str	r4, [sp, #0]
 800fffc:	f7ff fd0c 	bl	800fa18 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//5
 8010000:	89fb      	ldrh	r3, [r7, #14]
 8010002:	88fa      	ldrh	r2, [r7, #6]
 8010004:	1ad3      	subs	r3, r2, r3
 8010006:	b298      	uxth	r0, r3
 8010008:	89bb      	ldrh	r3, [r7, #12]
 801000a:	88ba      	ldrh	r2, [r7, #4]
 801000c:	1ad3      	subs	r3, r2, r3
 801000e:	b299      	uxth	r1, r3
 8010010:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010014:	883a      	ldrh	r2, [r7, #0]
 8010016:	2401      	movs	r4, #1
 8010018:	9400      	str	r4, [sp, #0]
 801001a:	f7ff fcfd 	bl	800fa18 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//6
 801001e:	89fa      	ldrh	r2, [r7, #14]
 8010020:	88fb      	ldrh	r3, [r7, #6]
 8010022:	4413      	add	r3, r2
 8010024:	b298      	uxth	r0, r3
 8010026:	89bb      	ldrh	r3, [r7, #12]
 8010028:	88ba      	ldrh	r2, [r7, #4]
 801002a:	1ad3      	subs	r3, r2, r3
 801002c:	b299      	uxth	r1, r3
 801002e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010032:	883a      	ldrh	r2, [r7, #0]
 8010034:	2401      	movs	r4, #1
 8010036:	9400      	str	r4, [sp, #0]
 8010038:	f7ff fcee 	bl	800fa18 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//7
 801003c:	89ba      	ldrh	r2, [r7, #12]
 801003e:	88fb      	ldrh	r3, [r7, #6]
 8010040:	4413      	add	r3, r2
 8010042:	b298      	uxth	r0, r3
 8010044:	89fb      	ldrh	r3, [r7, #14]
 8010046:	88ba      	ldrh	r2, [r7, #4]
 8010048:	1ad3      	subs	r3, r2, r3
 801004a:	b299      	uxth	r1, r3
 801004c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010050:	883a      	ldrh	r2, [r7, #0]
 8010052:	2401      	movs	r4, #1
 8010054:	9400      	str	r4, [sp, #0]
 8010056:	f7ff fcdf 	bl	800fa18 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//0
 801005a:	89ba      	ldrh	r2, [r7, #12]
 801005c:	88fb      	ldrh	r3, [r7, #6]
 801005e:	4413      	add	r3, r2
 8010060:	b298      	uxth	r0, r3
 8010062:	89fa      	ldrh	r2, [r7, #14]
 8010064:	88bb      	ldrh	r3, [r7, #4]
 8010066:	4413      	add	r3, r2
 8010068:	b299      	uxth	r1, r3
 801006a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801006e:	883a      	ldrh	r2, [r7, #0]
 8010070:	2401      	movs	r4, #1
 8010072:	9400      	str	r4, [sp, #0]
 8010074:	f7ff fcd0 	bl	800fa18 <Paint_DrawPoint>

            if (Esp < 0 )
 8010078:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801007c:	2b00      	cmp	r3, #0
 801007e:	da09      	bge.n	8010094 <Paint_DrawCircle+0x2d4>
                Esp += 4 * XCurrent + 6;
 8010080:	89fb      	ldrh	r3, [r7, #14]
 8010082:	009b      	lsls	r3, r3, #2
 8010084:	b29a      	uxth	r2, r3
 8010086:	897b      	ldrh	r3, [r7, #10]
 8010088:	4413      	add	r3, r2
 801008a:	b29b      	uxth	r3, r3
 801008c:	3306      	adds	r3, #6
 801008e:	b29b      	uxth	r3, r3
 8010090:	817b      	strh	r3, [r7, #10]
 8010092:	e013      	b.n	80100bc <Paint_DrawCircle+0x2fc>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 8010094:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8010098:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801009c:	1ad3      	subs	r3, r2, r3
 801009e:	b29b      	uxth	r3, r3
 80100a0:	009b      	lsls	r3, r3, #2
 80100a2:	b29a      	uxth	r2, r3
 80100a4:	897b      	ldrh	r3, [r7, #10]
 80100a6:	4413      	add	r3, r2
 80100a8:	b29b      	uxth	r3, r3
 80100aa:	330a      	adds	r3, #10
 80100ac:	b29b      	uxth	r3, r3
 80100ae:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 80100b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80100b4:	b29b      	uxth	r3, r3
 80100b6:	3b01      	subs	r3, #1
 80100b8:	b29b      	uxth	r3, r3
 80100ba:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 80100bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80100c0:	b29b      	uxth	r3, r3
 80100c2:	3301      	adds	r3, #1
 80100c4:	b29b      	uxth	r3, r3
 80100c6:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) {
 80100c8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80100cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80100d0:	429a      	cmp	r2, r3
 80100d2:	f77f af59 	ble.w	800ff88 <Paint_DrawCircle+0x1c8>
        }
    }
}
 80100d6:	3714      	adds	r7, #20
 80100d8:	46bd      	mov	sp, r7
 80100da:	bd90      	pop	{r4, r7, pc}

080100dc <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
 80100dc:	b580      	push	{r7, lr}
 80100de:	b088      	sub	sp, #32
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	607b      	str	r3, [r7, #4]
 80100e4:	4603      	mov	r3, r0
 80100e6:	81fb      	strh	r3, [r7, #14]
 80100e8:	460b      	mov	r3, r1
 80100ea:	81bb      	strh	r3, [r7, #12]
 80100ec:	4613      	mov	r3, r2
 80100ee:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 80100f0:	4b3f      	ldr	r3, [pc, #252]	; (80101f0 <Paint_DrawChar+0x114>)
 80100f2:	889b      	ldrh	r3, [r3, #4]
 80100f4:	b29b      	uxth	r3, r3
 80100f6:	89fa      	ldrh	r2, [r7, #14]
 80100f8:	429a      	cmp	r2, r3
 80100fa:	d805      	bhi.n	8010108 <Paint_DrawChar+0x2c>
 80100fc:	4b3c      	ldr	r3, [pc, #240]	; (80101f0 <Paint_DrawChar+0x114>)
 80100fe:	88db      	ldrh	r3, [r3, #6]
 8010100:	b29b      	uxth	r3, r3
 8010102:	89ba      	ldrh	r2, [r7, #12]
 8010104:	429a      	cmp	r2, r3
 8010106:	d903      	bls.n	8010110 <Paint_DrawChar+0x34>
    {
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 8010108:	483a      	ldr	r0, [pc, #232]	; (80101f4 <Paint_DrawChar+0x118>)
 801010a:	f00d fbc9 	bl	801d8a0 <puts>
        return;
 801010e:	e06b      	b.n	80101e8 <Paint_DrawChar+0x10c>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8010110:	7afb      	ldrb	r3, [r7, #11]
 8010112:	3b20      	subs	r3, #32
 8010114:	687a      	ldr	r2, [r7, #4]
 8010116:	88d2      	ldrh	r2, [r2, #6]
 8010118:	fb02 f303 	mul.w	r3, r2, r3
 801011c:	687a      	ldr	r2, [r7, #4]
 801011e:	8892      	ldrh	r2, [r2, #4]
 8010120:	08d2      	lsrs	r2, r2, #3
 8010122:	b292      	uxth	r2, r2
 8010124:	4611      	mov	r1, r2
 8010126:	687a      	ldr	r2, [r7, #4]
 8010128:	8892      	ldrh	r2, [r2, #4]
 801012a:	f002 0207 	and.w	r2, r2, #7
 801012e:	b292      	uxth	r2, r2
 8010130:	2a00      	cmp	r2, #0
 8010132:	bf14      	ite	ne
 8010134:	2201      	movne	r2, #1
 8010136:	2200      	moveq	r2, #0
 8010138:	b2d2      	uxtb	r2, r2
 801013a:	440a      	add	r2, r1
 801013c:	fb02 f303 	mul.w	r3, r2, r3
 8010140:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	681a      	ldr	r2, [r3, #0]
 8010146:	697b      	ldr	r3, [r7, #20]
 8010148:	4413      	add	r3, r2
 801014a:	61fb      	str	r3, [r7, #28]

    for (Page = 0; Page < Font->Height; Page ++ )
 801014c:	2300      	movs	r3, #0
 801014e:	837b      	strh	r3, [r7, #26]
 8010150:	e045      	b.n	80101de <Paint_DrawChar+0x102>
    {
        for (Column = 0; Column < Font->Width; Column ++ )
 8010152:	2300      	movs	r3, #0
 8010154:	833b      	strh	r3, [r7, #24]
 8010156:	e030      	b.n	80101ba <Paint_DrawChar+0xde>
                }
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            }
            else
            {
                if (*ptr & (0x80 >> (Column % 8)))
 8010158:	69fb      	ldr	r3, [r7, #28]
 801015a:	781b      	ldrb	r3, [r3, #0]
 801015c:	4619      	mov	r1, r3
 801015e:	8b3b      	ldrh	r3, [r7, #24]
 8010160:	f003 0307 	and.w	r3, r3, #7
 8010164:	2280      	movs	r2, #128	; 0x80
 8010166:	fa42 f303 	asr.w	r3, r2, r3
 801016a:	400b      	ands	r3, r1
 801016c:	2b00      	cmp	r3, #0
 801016e:	d00c      	beq.n	801018a <Paint_DrawChar+0xae>
                {

//                    if (!renderCompleteFrame)
//                    {
                    	Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 8010170:	89fa      	ldrh	r2, [r7, #14]
 8010172:	8b3b      	ldrh	r3, [r7, #24]
 8010174:	4413      	add	r3, r2
 8010176:	b298      	uxth	r0, r3
 8010178:	89ba      	ldrh	r2, [r7, #12]
 801017a:	8b7b      	ldrh	r3, [r7, #26]
 801017c:	4413      	add	r3, r2
 801017e:	b29b      	uxth	r3, r3
 8010180:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8010182:	4619      	mov	r1, r3
 8010184:	f7ff fb5a 	bl	800f83c <Paint_SetPixel>
 8010188:	e00b      	b.n	80101a2 <Paint_DrawChar+0xc6>
                }
                else
                {
//                	if (!renderCompleteFrame)
//                	{
                		Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 801018a:	89fa      	ldrh	r2, [r7, #14]
 801018c:	8b3b      	ldrh	r3, [r7, #24]
 801018e:	4413      	add	r3, r2
 8010190:	b298      	uxth	r0, r3
 8010192:	89ba      	ldrh	r2, [r7, #12]
 8010194:	8b7b      	ldrh	r3, [r7, #26]
 8010196:	4413      	add	r3, r2
 8010198:	b29b      	uxth	r3, r3
 801019a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801019c:	4619      	mov	r1, r3
 801019e:	f7ff fb4d 	bl	800f83c <Paint_SetPixel>
//                	}
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 80101a2:	8b3b      	ldrh	r3, [r7, #24]
 80101a4:	f003 0307 	and.w	r3, r3, #7
 80101a8:	b29b      	uxth	r3, r3
 80101aa:	2b07      	cmp	r3, #7
 80101ac:	d102      	bne.n	80101b4 <Paint_DrawChar+0xd8>
            {
                ptr++;
 80101ae:	69fb      	ldr	r3, [r7, #28]
 80101b0:	3301      	adds	r3, #1
 80101b2:	61fb      	str	r3, [r7, #28]
        for (Column = 0; Column < Font->Width; Column ++ )
 80101b4:	8b3b      	ldrh	r3, [r7, #24]
 80101b6:	3301      	adds	r3, #1
 80101b8:	833b      	strh	r3, [r7, #24]
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	889b      	ldrh	r3, [r3, #4]
 80101be:	8b3a      	ldrh	r2, [r7, #24]
 80101c0:	429a      	cmp	r2, r3
 80101c2:	d3c9      	bcc.n	8010158 <Paint_DrawChar+0x7c>
            }
        }// Write a line
        if (Font->Width % 8 != 0)
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	889b      	ldrh	r3, [r3, #4]
 80101c8:	f003 0307 	and.w	r3, r3, #7
 80101cc:	b29b      	uxth	r3, r3
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d002      	beq.n	80101d8 <Paint_DrawChar+0xfc>
        {
            ptr++;
 80101d2:	69fb      	ldr	r3, [r7, #28]
 80101d4:	3301      	adds	r3, #1
 80101d6:	61fb      	str	r3, [r7, #28]
    for (Page = 0; Page < Font->Height; Page ++ )
 80101d8:	8b7b      	ldrh	r3, [r7, #26]
 80101da:	3301      	adds	r3, #1
 80101dc:	837b      	strh	r3, [r7, #26]
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	88db      	ldrh	r3, [r3, #6]
 80101e2:	8b7a      	ldrh	r2, [r7, #26]
 80101e4:	429a      	cmp	r2, r3
 80101e6:	d3b4      	bcc.n	8010152 <Paint_DrawChar+0x76>
        }
    }// Write all
}
 80101e8:	3720      	adds	r7, #32
 80101ea:	46bd      	mov	sp, r7
 80101ec:	bd80      	pop	{r7, pc}
 80101ee:	bf00      	nop
 80101f0:	2400b8d8 	.word	0x2400b8d8
 80101f4:	08021504 	.word	0x08021504

080101f8 <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b088      	sub	sp, #32
 80101fc:	af02      	add	r7, sp, #8
 80101fe:	60ba      	str	r2, [r7, #8]
 8010200:	607b      	str	r3, [r7, #4]
 8010202:	4603      	mov	r3, r0
 8010204:	81fb      	strh	r3, [r7, #14]
 8010206:	460b      	mov	r3, r1
 8010208:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 801020a:	89fb      	ldrh	r3, [r7, #14]
 801020c:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 801020e:	89bb      	ldrh	r3, [r7, #12]
 8010210:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8010212:	4b23      	ldr	r3, [pc, #140]	; (80102a0 <Paint_DrawString_EN+0xa8>)
 8010214:	889b      	ldrh	r3, [r3, #4]
 8010216:	b29b      	uxth	r3, r3
 8010218:	89fa      	ldrh	r2, [r7, #14]
 801021a:	429a      	cmp	r2, r3
 801021c:	d805      	bhi.n	801022a <Paint_DrawString_EN+0x32>
 801021e:	4b20      	ldr	r3, [pc, #128]	; (80102a0 <Paint_DrawString_EN+0xa8>)
 8010220:	88db      	ldrh	r3, [r3, #6]
 8010222:	b29b      	uxth	r3, r3
 8010224:	89ba      	ldrh	r2, [r7, #12]
 8010226:	429a      	cmp	r2, r3
 8010228:	d933      	bls.n	8010292 <Paint_DrawString_EN+0x9a>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 801022a:	481e      	ldr	r0, [pc, #120]	; (80102a4 <Paint_DrawString_EN+0xac>)
 801022c:	f00d fb38 	bl	801d8a0 <puts>
        return;
 8010230:	e033      	b.n	801029a <Paint_DrawString_EN+0xa2>
    }

    while (* pString != '\0')
    {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width )
 8010232:	8afb      	ldrh	r3, [r7, #22]
 8010234:	687a      	ldr	r2, [r7, #4]
 8010236:	8892      	ldrh	r2, [r2, #4]
 8010238:	4413      	add	r3, r2
 801023a:	4a19      	ldr	r2, [pc, #100]	; (80102a0 <Paint_DrawString_EN+0xa8>)
 801023c:	8892      	ldrh	r2, [r2, #4]
 801023e:	b292      	uxth	r2, r2
 8010240:	4293      	cmp	r3, r2
 8010242:	dd06      	ble.n	8010252 <Paint_DrawString_EN+0x5a>
        {
            Xpoint = Xstart;
 8010244:	89fb      	ldrh	r3, [r7, #14]
 8010246:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	88da      	ldrh	r2, [r3, #6]
 801024c:	8abb      	ldrh	r3, [r7, #20]
 801024e:	4413      	add	r3, r2
 8010250:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height )
 8010252:	8abb      	ldrh	r3, [r7, #20]
 8010254:	687a      	ldr	r2, [r7, #4]
 8010256:	88d2      	ldrh	r2, [r2, #6]
 8010258:	4413      	add	r3, r2
 801025a:	4a11      	ldr	r2, [pc, #68]	; (80102a0 <Paint_DrawString_EN+0xa8>)
 801025c:	88d2      	ldrh	r2, [r2, #6]
 801025e:	b292      	uxth	r2, r2
 8010260:	4293      	cmp	r3, r2
 8010262:	dd03      	ble.n	801026c <Paint_DrawString_EN+0x74>
        {
            Xpoint = Xstart;
 8010264:	89fb      	ldrh	r3, [r7, #14]
 8010266:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 8010268:	89bb      	ldrh	r3, [r7, #12]
 801026a:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 801026c:	68bb      	ldr	r3, [r7, #8]
 801026e:	781a      	ldrb	r2, [r3, #0]
 8010270:	8ab9      	ldrh	r1, [r7, #20]
 8010272:	8af8      	ldrh	r0, [r7, #22]
 8010274:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010276:	9301      	str	r3, [sp, #4]
 8010278:	8c3b      	ldrh	r3, [r7, #32]
 801027a:	9300      	str	r3, [sp, #0]
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	f7ff ff2d 	bl	80100dc <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8010282:	68bb      	ldr	r3, [r7, #8]
 8010284:	3301      	adds	r3, #1
 8010286:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	889a      	ldrh	r2, [r3, #4]
 801028c:	8afb      	ldrh	r3, [r7, #22]
 801028e:	4413      	add	r3, r2
 8010290:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0')
 8010292:	68bb      	ldr	r3, [r7, #8]
 8010294:	781b      	ldrb	r3, [r3, #0]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d1cb      	bne.n	8010232 <Paint_DrawString_EN+0x3a>
    }
}
 801029a:	3718      	adds	r7, #24
 801029c:	46bd      	mov	sp, r7
 801029e:	bd80      	pop	{r7, pc}
 80102a0:	2400b8d8 	.word	0x2400b8d8
 80102a4:	08021544 	.word	0x08021544

080102a8 <Paint_DrawFloatNum>:
    Font             ：A structure pointer that displays a character size
    Color            : Select the background color of the English character
******************************************************************************/
void Paint_DrawFloatNum(UWORD Xpoint, UWORD Ypoint, double Nummber,  UBYTE Decimal_Point, 
                        sFONT* Font,  UWORD Color_Background, UWORD Color_Foreground)
{
 80102a8:	b590      	push	{r4, r7, lr}
 80102aa:	b0cb      	sub	sp, #300	; 0x12c
 80102ac:	af02      	add	r7, sp, #8
 80102ae:	4604      	mov	r4, r0
 80102b0:	4608      	mov	r0, r1
 80102b2:	f107 0108 	add.w	r1, r7, #8
 80102b6:	ed81 0b00 	vstr	d0, [r1]
 80102ba:	4611      	mov	r1, r2
 80102bc:	1d3a      	adds	r2, r7, #4
 80102be:	6013      	str	r3, [r2, #0]
 80102c0:	f107 0316 	add.w	r3, r7, #22
 80102c4:	4622      	mov	r2, r4
 80102c6:	801a      	strh	r2, [r3, #0]
 80102c8:	f107 0314 	add.w	r3, r7, #20
 80102cc:	4602      	mov	r2, r0
 80102ce:	801a      	strh	r2, [r3, #0]
 80102d0:	f107 0313 	add.w	r3, r7, #19
 80102d4:	460a      	mov	r2, r1
 80102d6:	701a      	strb	r2, [r3, #0]
    char Str[ARRAY_LEN] = "";
 80102d8:	f107 031c 	add.w	r3, r7, #28
 80102dc:	2200      	movs	r2, #0
 80102de:	601a      	str	r2, [r3, #0]
 80102e0:	3304      	adds	r3, #4
 80102e2:	22fb      	movs	r2, #251	; 0xfb
 80102e4:	2100      	movs	r1, #0
 80102e6:	4618      	mov	r0, r3
 80102e8:	f00c fa02 	bl	801c6f0 <memset>
    sprintf(Str,"%.*lf",Decimal_Point+2,Nummber);
 80102ec:	f107 0313 	add.w	r3, r7, #19
 80102f0:	781b      	ldrb	r3, [r3, #0]
 80102f2:	1c99      	adds	r1, r3, #2
 80102f4:	f107 001c 	add.w	r0, r7, #28
 80102f8:	f107 0308 	add.w	r3, r7, #8
 80102fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010300:	e9cd 2300 	strd	r2, r3, [sp]
 8010304:	460a      	mov	r2, r1
 8010306:	4930      	ldr	r1, [pc, #192]	; (80103c8 <Paint_DrawFloatNum+0x120>)
 8010308:	f00d fb1c 	bl	801d944 <siprintf>
    char * pStr= (char *)malloc((strlen(Str))*sizeof(char));
 801030c:	f107 031c 	add.w	r3, r7, #28
 8010310:	4618      	mov	r0, r3
 8010312:	f7ef ffef 	bl	80002f4 <strlen>
 8010316:	4603      	mov	r3, r0
 8010318:	4618      	mov	r0, r3
 801031a:	f00c f9b1 	bl	801c680 <malloc>
 801031e:	4603      	mov	r3, r0
 8010320:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    memcpy(pStr,Str,(strlen(Str)-2));
 8010324:	f107 031c 	add.w	r3, r7, #28
 8010328:	4618      	mov	r0, r3
 801032a:	f7ef ffe3 	bl	80002f4 <strlen>
 801032e:	4603      	mov	r3, r0
 8010330:	1e9a      	subs	r2, r3, #2
 8010332:	f107 031c 	add.w	r3, r7, #28
 8010336:	4619      	mov	r1, r3
 8010338:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 801033c:	f00c f9b0 	bl	801c6a0 <memcpy>
    * (pStr+strlen(Str)-2)='\0';
 8010340:	f107 031c 	add.w	r3, r7, #28
 8010344:	4618      	mov	r0, r3
 8010346:	f7ef ffd5 	bl	80002f4 <strlen>
 801034a:	4603      	mov	r3, r0
 801034c:	3b02      	subs	r3, #2
 801034e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8010352:	4413      	add	r3, r2
 8010354:	2200      	movs	r2, #0
 8010356:	701a      	strb	r2, [r3, #0]
    if((*(pStr+strlen(Str)-3))=='.')
 8010358:	f107 031c 	add.w	r3, r7, #28
 801035c:	4618      	mov	r0, r3
 801035e:	f7ef ffc9 	bl	80002f4 <strlen>
 8010362:	4603      	mov	r3, r0
 8010364:	3b03      	subs	r3, #3
 8010366:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 801036a:	4413      	add	r3, r2
 801036c:	781b      	ldrb	r3, [r3, #0]
 801036e:	2b2e      	cmp	r3, #46	; 0x2e
 8010370:	d10b      	bne.n	801038a <Paint_DrawFloatNum+0xe2>
    {
      *(pStr+strlen(Str)-3)='\0';
 8010372:	f107 031c 	add.w	r3, r7, #28
 8010376:	4618      	mov	r0, r3
 8010378:	f7ef ffbc 	bl	80002f4 <strlen>
 801037c:	4603      	mov	r3, r0
 801037e:	3b03      	subs	r3, #3
 8010380:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8010384:	4413      	add	r3, r2
 8010386:	2200      	movs	r2, #0
 8010388:	701a      	strb	r2, [r3, #0]
    }
    //show
    Paint_DrawString_EN(Xpoint, Ypoint, (const char*)pStr, Font, Color_Foreground, Color_Background);
 801038a:	1d3b      	adds	r3, r7, #4
 801038c:	f107 0214 	add.w	r2, r7, #20
 8010390:	8811      	ldrh	r1, [r2, #0]
 8010392:	f107 0216 	add.w	r2, r7, #22
 8010396:	8810      	ldrh	r0, [r2, #0]
 8010398:	f8b7 2130 	ldrh.w	r2, [r7, #304]	; 0x130
 801039c:	9201      	str	r2, [sp, #4]
 801039e:	f8b7 2134 	ldrh.w	r2, [r7, #308]	; 0x134
 80103a2:	9200      	str	r2, [sp, #0]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80103aa:	f7ff ff25 	bl	80101f8 <Paint_DrawString_EN>
    free(pStr);
 80103ae:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80103b2:	f00c f96d 	bl	801c690 <free>
    pStr=NULL;
 80103b6:	2300      	movs	r3, #0
 80103b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
}
 80103bc:	bf00      	nop
 80103be:	f507 7792 	add.w	r7, r7, #292	; 0x124
 80103c2:	46bd      	mov	sp, r7
 80103c4:	bd90      	pop	{r4, r7, pc}
 80103c6:	bf00      	nop
 80103c8:	080215c8 	.word	0x080215c8

080103cc <Paint_DrawImage>:
    yStart           : Y starting coordinates
    xEnd             ：Image width
    yEnd             : Image height
******************************************************************************/
void Paint_DrawImage(const unsigned char *image, UWORD xStart, UWORD yStart, UWORD W_Image, UWORD H_Image) 
{
 80103cc:	b590      	push	{r4, r7, lr}
 80103ce:	b087      	sub	sp, #28
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	60f8      	str	r0, [r7, #12]
 80103d4:	4608      	mov	r0, r1
 80103d6:	4611      	mov	r1, r2
 80103d8:	461a      	mov	r2, r3
 80103da:	4603      	mov	r3, r0
 80103dc:	817b      	strh	r3, [r7, #10]
 80103de:	460b      	mov	r3, r1
 80103e0:	813b      	strh	r3, [r7, #8]
 80103e2:	4613      	mov	r3, r2
 80103e4:	80fb      	strh	r3, [r7, #6]
	int i,j;
	for(j = 0; j < H_Image; j++)
 80103e6:	2300      	movs	r3, #0
 80103e8:	613b      	str	r3, [r7, #16]
 80103ea:	e049      	b.n	8010480 <Paint_DrawImage+0xb4>
	{
		for(i = 0; i < W_Image; i++)
 80103ec:	2300      	movs	r3, #0
 80103ee:	617b      	str	r3, [r7, #20]
 80103f0:	e03f      	b.n	8010472 <Paint_DrawImage+0xa6>
		{
			if(xStart+i < Paint.WidthMemory  &&  yStart+j < Paint.HeightMemory)//Exceeded part does not display
 80103f2:	897a      	ldrh	r2, [r7, #10]
 80103f4:	697b      	ldr	r3, [r7, #20]
 80103f6:	4413      	add	r3, r2
 80103f8:	4a26      	ldr	r2, [pc, #152]	; (8010494 <Paint_DrawImage+0xc8>)
 80103fa:	8912      	ldrh	r2, [r2, #8]
 80103fc:	b292      	uxth	r2, r2
 80103fe:	4293      	cmp	r3, r2
 8010400:	da34      	bge.n	801046c <Paint_DrawImage+0xa0>
 8010402:	893a      	ldrh	r2, [r7, #8]
 8010404:	693b      	ldr	r3, [r7, #16]
 8010406:	4413      	add	r3, r2
 8010408:	4a22      	ldr	r2, [pc, #136]	; (8010494 <Paint_DrawImage+0xc8>)
 801040a:	8952      	ldrh	r2, [r2, #10]
 801040c:	b292      	uxth	r2, r2
 801040e:	4293      	cmp	r3, r2
 8010410:	da2c      	bge.n	801046c <Paint_DrawImage+0xa0>
			{
				Paint_SetPixel(xStart + i, yStart + j, (*(image + j*W_Image*2 + i*2+1))<<8 | (*(image + j*W_Image*2 + i*2)));
 8010412:	697b      	ldr	r3, [r7, #20]
 8010414:	b29a      	uxth	r2, r3
 8010416:	897b      	ldrh	r3, [r7, #10]
 8010418:	4413      	add	r3, r2
 801041a:	b298      	uxth	r0, r3
 801041c:	693b      	ldr	r3, [r7, #16]
 801041e:	b29a      	uxth	r2, r3
 8010420:	893b      	ldrh	r3, [r7, #8]
 8010422:	4413      	add	r3, r2
 8010424:	b29c      	uxth	r4, r3
 8010426:	88fb      	ldrh	r3, [r7, #6]
 8010428:	693a      	ldr	r2, [r7, #16]
 801042a:	fb02 f303 	mul.w	r3, r2, r3
 801042e:	005b      	lsls	r3, r3, #1
 8010430:	461a      	mov	r2, r3
 8010432:	697b      	ldr	r3, [r7, #20]
 8010434:	005b      	lsls	r3, r3, #1
 8010436:	4413      	add	r3, r2
 8010438:	3301      	adds	r3, #1
 801043a:	68fa      	ldr	r2, [r7, #12]
 801043c:	4413      	add	r3, r2
 801043e:	781b      	ldrb	r3, [r3, #0]
 8010440:	021b      	lsls	r3, r3, #8
 8010442:	b21a      	sxth	r2, r3
 8010444:	88fb      	ldrh	r3, [r7, #6]
 8010446:	6939      	ldr	r1, [r7, #16]
 8010448:	fb01 f303 	mul.w	r3, r1, r3
 801044c:	005b      	lsls	r3, r3, #1
 801044e:	4619      	mov	r1, r3
 8010450:	697b      	ldr	r3, [r7, #20]
 8010452:	005b      	lsls	r3, r3, #1
 8010454:	440b      	add	r3, r1
 8010456:	68f9      	ldr	r1, [r7, #12]
 8010458:	440b      	add	r3, r1
 801045a:	781b      	ldrb	r3, [r3, #0]
 801045c:	b21b      	sxth	r3, r3
 801045e:	4313      	orrs	r3, r2
 8010460:	b21b      	sxth	r3, r3
 8010462:	b29b      	uxth	r3, r3
 8010464:	461a      	mov	r2, r3
 8010466:	4621      	mov	r1, r4
 8010468:	f7ff f9e8 	bl	800f83c <Paint_SetPixel>
		for(i = 0; i < W_Image; i++)
 801046c:	697b      	ldr	r3, [r7, #20]
 801046e:	3301      	adds	r3, #1
 8010470:	617b      	str	r3, [r7, #20]
 8010472:	88fb      	ldrh	r3, [r7, #6]
 8010474:	697a      	ldr	r2, [r7, #20]
 8010476:	429a      	cmp	r2, r3
 8010478:	dbbb      	blt.n	80103f2 <Paint_DrawImage+0x26>
	for(j = 0; j < H_Image; j++)
 801047a:	693b      	ldr	r3, [r7, #16]
 801047c:	3301      	adds	r3, #1
 801047e:	613b      	str	r3, [r7, #16]
 8010480:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010482:	693a      	ldr	r2, [r7, #16]
 8010484:	429a      	cmp	r2, r3
 8010486:	dbb1      	blt.n	80103ec <Paint_DrawImage+0x20>
			//Using arrays is a property of sequential storage, accessing the original array by algorithm
			//j*W_Image*2 			   Y offset
			//i*2              	   X offset
		}
	}
}
 8010488:	bf00      	nop
 801048a:	bf00      	nop
 801048c:	371c      	adds	r7, #28
 801048e:	46bd      	mov	sp, r7
 8010490:	bd90      	pop	{r4, r7, pc}
 8010492:	bf00      	nop
 8010494:	2400b8d8 	.word	0x2400b8d8

08010498 <LCD_1IN8_Reset>:
/*******************************************************************************
function:
			Hardware reset
*******************************************************************************/
static void LCD_1IN8_Reset(void)
{
 8010498:	b580      	push	{r7, lr}
 801049a:	af00      	add	r7, sp, #0
    LCD_1IN8_RST_1;
 801049c:	2201      	movs	r2, #1
 801049e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80104a2:	480d      	ldr	r0, [pc, #52]	; (80104d8 <LCD_1IN8_Reset+0x40>)
 80104a4:	f7f5 fe74 	bl	8006190 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 80104a8:	2064      	movs	r0, #100	; 0x64
 80104aa:	f7f2 f889 	bl	80025c0 <HAL_Delay>
    LCD_1IN8_RST_0;
 80104ae:	2200      	movs	r2, #0
 80104b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80104b4:	4808      	ldr	r0, [pc, #32]	; (80104d8 <LCD_1IN8_Reset+0x40>)
 80104b6:	f7f5 fe6b 	bl	8006190 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 80104ba:	2064      	movs	r0, #100	; 0x64
 80104bc:	f7f2 f880 	bl	80025c0 <HAL_Delay>
    LCD_1IN8_RST_1;
 80104c0:	2201      	movs	r2, #1
 80104c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80104c6:	4804      	ldr	r0, [pc, #16]	; (80104d8 <LCD_1IN8_Reset+0x40>)
 80104c8:	f7f5 fe62 	bl	8006190 <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 80104cc:	2064      	movs	r0, #100	; 0x64
 80104ce:	f7f2 f877 	bl	80025c0 <HAL_Delay>
}
 80104d2:	bf00      	nop
 80104d4:	bd80      	pop	{r7, pc}
 80104d6:	bf00      	nop
 80104d8:	58021400 	.word	0x58021400

080104dc <LCD_1IN8_WriteReg>:
/*******************************************************************************
function:
		Write register address and data
*******************************************************************************/
static void LCD_1IN8_WriteReg(uint8_t Reg)
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b082      	sub	sp, #8
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	4603      	mov	r3, r0
 80104e4:	71fb      	strb	r3, [r7, #7]
    LCD_1IN8_DC_0;
 80104e6:	2200      	movs	r2, #0
 80104e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80104ec:	4807      	ldr	r0, [pc, #28]	; (801050c <LCD_1IN8_WriteReg+0x30>)
 80104ee:	f7f5 fe4f 	bl	8006190 <HAL_GPIO_WritePin>
    LCD_1IN8_CS_0;
 80104f2:	2200      	movs	r2, #0
 80104f4:	2140      	movs	r1, #64	; 0x40
 80104f6:	4805      	ldr	r0, [pc, #20]	; (801050c <LCD_1IN8_WriteReg+0x30>)
 80104f8:	f7f5 fe4a 	bl	8006190 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Reg);
 80104fc:	79fb      	ldrb	r3, [r7, #7]
 80104fe:	4618      	mov	r0, r3
 8010500:	f7ff f8fe 	bl	800f700 <DEV_SPI_WRite>
    //LCD_1IN8_CS_1;
}
 8010504:	bf00      	nop
 8010506:	3708      	adds	r7, #8
 8010508:	46bd      	mov	sp, r7
 801050a:	bd80      	pop	{r7, pc}
 801050c:	58021800 	.word	0x58021800

08010510 <LCD_1IN8_WriteData_8Bit>:

static void LCD_1IN8_WriteData_8Bit(uint8_t Data)
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b082      	sub	sp, #8
 8010514:	af00      	add	r7, sp, #0
 8010516:	4603      	mov	r3, r0
 8010518:	71fb      	strb	r3, [r7, #7]
    LCD_1IN8_DC_1;
 801051a:	2201      	movs	r2, #1
 801051c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010520:	480a      	ldr	r0, [pc, #40]	; (801054c <LCD_1IN8_WriteData_8Bit+0x3c>)
 8010522:	f7f5 fe35 	bl	8006190 <HAL_GPIO_WritePin>
    LCD_1IN8_CS_0;
 8010526:	2200      	movs	r2, #0
 8010528:	2140      	movs	r1, #64	; 0x40
 801052a:	4808      	ldr	r0, [pc, #32]	; (801054c <LCD_1IN8_WriteData_8Bit+0x3c>)
 801052c:	f7f5 fe30 	bl	8006190 <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Data);
 8010530:	79fb      	ldrb	r3, [r7, #7]
 8010532:	4618      	mov	r0, r3
 8010534:	f7ff f8e4 	bl	800f700 <DEV_SPI_WRite>
    LCD_1IN8_CS_1;
 8010538:	2201      	movs	r2, #1
 801053a:	2140      	movs	r1, #64	; 0x40
 801053c:	4803      	ldr	r0, [pc, #12]	; (801054c <LCD_1IN8_WriteData_8Bit+0x3c>)
 801053e:	f7f5 fe27 	bl	8006190 <HAL_GPIO_WritePin>
}
 8010542:	bf00      	nop
 8010544:	3708      	adds	r7, #8
 8010546:	46bd      	mov	sp, r7
 8010548:	bd80      	pop	{r7, pc}
 801054a:	bf00      	nop
 801054c:	58021800 	.word	0x58021800

08010550 <LCD_1IN8_WriteData_NLen16Bit>:
    DEV_SPI_WRITE(Data & 0XFF);
    //LCD_1IN8_CS_1;
}*/

void LCD_1IN8_WriteData_NLen16Bit(uint16_t Data,uint32_t DataLen)
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b084      	sub	sp, #16
 8010554:	af00      	add	r7, sp, #0
 8010556:	4603      	mov	r3, r0
 8010558:	6039      	str	r1, [r7, #0]
 801055a:	80fb      	strh	r3, [r7, #6]
    uint32_t i;
    LCD_1IN8_DC_1;
 801055c:	2201      	movs	r2, #1
 801055e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010562:	480f      	ldr	r0, [pc, #60]	; (80105a0 <LCD_1IN8_WriteData_NLen16Bit+0x50>)
 8010564:	f7f5 fe14 	bl	8006190 <HAL_GPIO_WritePin>
    //LCD_1IN8_CS_0;
    for(i = 0; i < DataLen; i++) {
 8010568:	2300      	movs	r3, #0
 801056a:	60fb      	str	r3, [r7, #12]
 801056c:	e00e      	b.n	801058c <LCD_1IN8_WriteData_NLen16Bit+0x3c>
        DEV_SPI_WRITE( (uint8_t)(Data >> 8) );
 801056e:	88fb      	ldrh	r3, [r7, #6]
 8010570:	0a1b      	lsrs	r3, r3, #8
 8010572:	b29b      	uxth	r3, r3
 8010574:	b2db      	uxtb	r3, r3
 8010576:	4618      	mov	r0, r3
 8010578:	f7ff f8c2 	bl	800f700 <DEV_SPI_WRite>
        DEV_SPI_WRITE( (uint8_t)(Data & 0XFF) );
 801057c:	88fb      	ldrh	r3, [r7, #6]
 801057e:	b2db      	uxtb	r3, r3
 8010580:	4618      	mov	r0, r3
 8010582:	f7ff f8bd 	bl	800f700 <DEV_SPI_WRite>
    for(i = 0; i < DataLen; i++) {
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	3301      	adds	r3, #1
 801058a:	60fb      	str	r3, [r7, #12]
 801058c:	68fa      	ldr	r2, [r7, #12]
 801058e:	683b      	ldr	r3, [r7, #0]
 8010590:	429a      	cmp	r2, r3
 8010592:	d3ec      	bcc.n	801056e <LCD_1IN8_WriteData_NLen16Bit+0x1e>
    }
    //LCD_1IN8_CS_1;
}
 8010594:	bf00      	nop
 8010596:	bf00      	nop
 8010598:	3710      	adds	r7, #16
 801059a:	46bd      	mov	sp, r7
 801059c:	bd80      	pop	{r7, pc}
 801059e:	bf00      	nop
 80105a0:	58021800 	.word	0x58021800

080105a4 <LCD_1IN8_InitReg>:
/*******************************************************************************
function:
		Common register initialization
*******************************************************************************/
static void LCD_1IN8_InitReg(void)
{
 80105a4:	b580      	push	{r7, lr}
 80105a6:	af00      	add	r7, sp, #0
    //ST7735R Frame Rate
    LCD_1IN8_WriteReg(0xB1);
 80105a8:	20b1      	movs	r0, #177	; 0xb1
 80105aa:	f7ff ff97 	bl	80104dc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 80105ae:	2001      	movs	r0, #1
 80105b0:	f7ff ffae 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 80105b4:	202c      	movs	r0, #44	; 0x2c
 80105b6:	f7ff ffab 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 80105ba:	202d      	movs	r0, #45	; 0x2d
 80105bc:	f7ff ffa8 	bl	8010510 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB2);
 80105c0:	20b2      	movs	r0, #178	; 0xb2
 80105c2:	f7ff ff8b 	bl	80104dc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 80105c6:	2001      	movs	r0, #1
 80105c8:	f7ff ffa2 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 80105cc:	202c      	movs	r0, #44	; 0x2c
 80105ce:	f7ff ff9f 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 80105d2:	202d      	movs	r0, #45	; 0x2d
 80105d4:	f7ff ff9c 	bl	8010510 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB3);
 80105d8:	20b3      	movs	r0, #179	; 0xb3
 80105da:	f7ff ff7f 	bl	80104dc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 80105de:	2001      	movs	r0, #1
 80105e0:	f7ff ff96 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 80105e4:	202c      	movs	r0, #44	; 0x2c
 80105e6:	f7ff ff93 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 80105ea:	202d      	movs	r0, #45	; 0x2d
 80105ec:	f7ff ff90 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x01);
 80105f0:	2001      	movs	r0, #1
 80105f2:	f7ff ff8d 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 80105f6:	202c      	movs	r0, #44	; 0x2c
 80105f8:	f7ff ff8a 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 80105fc:	202d      	movs	r0, #45	; 0x2d
 80105fe:	f7ff ff87 	bl	8010510 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB4); //Column inversion
 8010602:	20b4      	movs	r0, #180	; 0xb4
 8010604:	f7ff ff6a 	bl	80104dc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x07);
 8010608:	2007      	movs	r0, #7
 801060a:	f7ff ff81 	bl	8010510 <LCD_1IN8_WriteData_8Bit>

    //ST7735R Power Sequence
    LCD_1IN8_WriteReg(0xC0);
 801060e:	20c0      	movs	r0, #192	; 0xc0
 8010610:	f7ff ff64 	bl	80104dc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0xA2);
 8010614:	20a2      	movs	r0, #162	; 0xa2
 8010616:	f7ff ff7b 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x02);
 801061a:	2002      	movs	r0, #2
 801061c:	f7ff ff78 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x84);
 8010620:	2084      	movs	r0, #132	; 0x84
 8010622:	f7ff ff75 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteReg(0xC1);
 8010626:	20c1      	movs	r0, #193	; 0xc1
 8010628:	f7ff ff58 	bl	80104dc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0xC5);
 801062c:	20c5      	movs	r0, #197	; 0xc5
 801062e:	f7ff ff6f 	bl	8010510 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC2);
 8010632:	20c2      	movs	r0, #194	; 0xc2
 8010634:	f7ff ff52 	bl	80104dc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0A);
 8010638:	200a      	movs	r0, #10
 801063a:	f7ff ff69 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 801063e:	2000      	movs	r0, #0
 8010640:	f7ff ff66 	bl	8010510 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC3);
 8010644:	20c3      	movs	r0, #195	; 0xc3
 8010646:	f7ff ff49 	bl	80104dc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x8A);
 801064a:	208a      	movs	r0, #138	; 0x8a
 801064c:	f7ff ff60 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2A);
 8010650:	202a      	movs	r0, #42	; 0x2a
 8010652:	f7ff ff5d 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteReg(0xC4);
 8010656:	20c4      	movs	r0, #196	; 0xc4
 8010658:	f7ff ff40 	bl	80104dc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x8A);
 801065c:	208a      	movs	r0, #138	; 0x8a
 801065e:	f7ff ff57 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0xEE);
 8010662:	20ee      	movs	r0, #238	; 0xee
 8010664:	f7ff ff54 	bl	8010510 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC5); //VCOM
 8010668:	20c5      	movs	r0, #197	; 0xc5
 801066a:	f7ff ff37 	bl	80104dc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0E);
 801066e:	200e      	movs	r0, #14
 8010670:	f7ff ff4e 	bl	8010510 <LCD_1IN8_WriteData_8Bit>

    //ST7735R Gamma Sequence
    LCD_1IN8_WriteReg(0xe0);
 8010674:	20e0      	movs	r0, #224	; 0xe0
 8010676:	f7ff ff31 	bl	80104dc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0f);
 801067a:	200f      	movs	r0, #15
 801067c:	f7ff ff48 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1a);
 8010680:	201a      	movs	r0, #26
 8010682:	f7ff ff45 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x0f);
 8010686:	200f      	movs	r0, #15
 8010688:	f7ff ff42 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x18);
 801068c:	2018      	movs	r0, #24
 801068e:	f7ff ff3f 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2f);
 8010692:	202f      	movs	r0, #47	; 0x2f
 8010694:	f7ff ff3c 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x28);
 8010698:	2028      	movs	r0, #40	; 0x28
 801069a:	f7ff ff39 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x20);
 801069e:	2020      	movs	r0, #32
 80106a0:	f7ff ff36 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x22);
 80106a4:	2022      	movs	r0, #34	; 0x22
 80106a6:	f7ff ff33 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1f);
 80106aa:	201f      	movs	r0, #31
 80106ac:	f7ff ff30 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1b);
 80106b0:	201b      	movs	r0, #27
 80106b2:	f7ff ff2d 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x23);
 80106b6:	2023      	movs	r0, #35	; 0x23
 80106b8:	f7ff ff2a 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x37);
 80106bc:	2037      	movs	r0, #55	; 0x37
 80106be:	f7ff ff27 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 80106c2:	2000      	movs	r0, #0
 80106c4:	f7ff ff24 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x07);
 80106c8:	2007      	movs	r0, #7
 80106ca:	f7ff ff21 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x02);
 80106ce:	2002      	movs	r0, #2
 80106d0:	f7ff ff1e 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x10);
 80106d4:	2010      	movs	r0, #16
 80106d6:	f7ff ff1b 	bl	8010510 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xe1);
 80106da:	20e1      	movs	r0, #225	; 0xe1
 80106dc:	f7ff fefe 	bl	80104dc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0f);
 80106e0:	200f      	movs	r0, #15
 80106e2:	f7ff ff15 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1b);
 80106e6:	201b      	movs	r0, #27
 80106e8:	f7ff ff12 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x0f);
 80106ec:	200f      	movs	r0, #15
 80106ee:	f7ff ff0f 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x17);
 80106f2:	2017      	movs	r0, #23
 80106f4:	f7ff ff0c 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x33);
 80106f8:	2033      	movs	r0, #51	; 0x33
 80106fa:	f7ff ff09 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2c);
 80106fe:	202c      	movs	r0, #44	; 0x2c
 8010700:	f7ff ff06 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x29);
 8010704:	2029      	movs	r0, #41	; 0x29
 8010706:	f7ff ff03 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2e);
 801070a:	202e      	movs	r0, #46	; 0x2e
 801070c:	f7ff ff00 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x30);
 8010710:	2030      	movs	r0, #48	; 0x30
 8010712:	f7ff fefd 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x30);
 8010716:	2030      	movs	r0, #48	; 0x30
 8010718:	f7ff fefa 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x39);
 801071c:	2039      	movs	r0, #57	; 0x39
 801071e:	f7ff fef7 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x3f);
 8010722:	203f      	movs	r0, #63	; 0x3f
 8010724:	f7ff fef4 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 8010728:	2000      	movs	r0, #0
 801072a:	f7ff fef1 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x07);
 801072e:	2007      	movs	r0, #7
 8010730:	f7ff feee 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x03);
 8010734:	2003      	movs	r0, #3
 8010736:	f7ff feeb 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x10);
 801073a:	2010      	movs	r0, #16
 801073c:	f7ff fee8 	bl	8010510 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xF0); //Enable test command
 8010740:	20f0      	movs	r0, #240	; 0xf0
 8010742:	f7ff fecb 	bl	80104dc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 8010746:	2001      	movs	r0, #1
 8010748:	f7ff fee2 	bl	8010510 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xF6); //Disable ram power save mode
 801074c:	20f6      	movs	r0, #246	; 0xf6
 801074e:	f7ff fec5 	bl	80104dc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x00);
 8010752:	2000      	movs	r0, #0
 8010754:	f7ff fedc 	bl	8010510 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0x3A); //65k mode
 8010758:	203a      	movs	r0, #58	; 0x3a
 801075a:	f7ff febf 	bl	80104dc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x05);
 801075e:	2005      	movs	r0, #5
 8010760:	f7ff fed6 	bl	8010510 <LCD_1IN8_WriteData_8Bit>

}
 8010764:	bf00      	nop
 8010766:	bd80      	pop	{r7, pc}

08010768 <LCD_1IN8_SetGramScanWay>:
parameter:
		Scan_dir   :   Scan direction
		Colorchose :   RGB or GBR color format
********************************************************************************/
void LCD_1IN8_SetGramScanWay(LCD_1IN8_SCAN_DIR Scan_dir)
{
 8010768:	b580      	push	{r7, lr}
 801076a:	b084      	sub	sp, #16
 801076c:	af00      	add	r7, sp, #0
 801076e:	4603      	mov	r3, r0
 8010770:	71fb      	strb	r3, [r7, #7]
    //Get the screen scan direction
    sLCD_1IN8_DIS.LCD_1IN8_Scan_Dir = Scan_dir;
 8010772:	4a34      	ldr	r2, [pc, #208]	; (8010844 <LCD_1IN8_SetGramScanWay+0xdc>)
 8010774:	79fb      	ldrb	r3, [r7, #7]
 8010776:	7113      	strb	r3, [r2, #4]

	//Get GRAM and LCD width and height
	if(Scan_dir == L2R_U2D || Scan_dir == L2R_D2U || Scan_dir == R2L_U2D || Scan_dir == R2L_D2U)
 8010778:	79fb      	ldrb	r3, [r7, #7]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d008      	beq.n	8010790 <LCD_1IN8_SetGramScanWay+0x28>
 801077e:	79fb      	ldrb	r3, [r7, #7]
 8010780:	2b01      	cmp	r3, #1
 8010782:	d005      	beq.n	8010790 <LCD_1IN8_SetGramScanWay+0x28>
 8010784:	79fb      	ldrb	r3, [r7, #7]
 8010786:	2b02      	cmp	r3, #2
 8010788:	d002      	beq.n	8010790 <LCD_1IN8_SetGramScanWay+0x28>
 801078a:	79fb      	ldrb	r3, [r7, #7]
 801078c:	2b03      	cmp	r3, #3
 801078e:	d10c      	bne.n	80107aa <LCD_1IN8_SetGramScanWay+0x42>
	{
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Column	= LCD_1IN8_HEIGHT ;
 8010790:	4b2c      	ldr	r3, [pc, #176]	; (8010844 <LCD_1IN8_SetGramScanWay+0xdc>)
 8010792:	2280      	movs	r2, #128	; 0x80
 8010794:	801a      	strh	r2, [r3, #0]
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Page = LCD_1IN8_WIDTH ;
 8010796:	4b2b      	ldr	r3, [pc, #172]	; (8010844 <LCD_1IN8_SetGramScanWay+0xdc>)
 8010798:	22a0      	movs	r2, #160	; 0xa0
 801079a:	805a      	strh	r2, [r3, #2]
		sLCD_1IN8_DIS.LCD_1IN8_X_Adjust = LCD_1IN8_X;
 801079c:	4b29      	ldr	r3, [pc, #164]	; (8010844 <LCD_1IN8_SetGramScanWay+0xdc>)
 801079e:	2202      	movs	r2, #2
 80107a0:	80da      	strh	r2, [r3, #6]
		sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust = LCD_1IN8_Y;
 80107a2:	4b28      	ldr	r3, [pc, #160]	; (8010844 <LCD_1IN8_SetGramScanWay+0xdc>)
 80107a4:	2201      	movs	r2, #1
 80107a6:	811a      	strh	r2, [r3, #8]
 80107a8:	e00b      	b.n	80107c2 <LCD_1IN8_SetGramScanWay+0x5a>
	}
	else
	{
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Column	= LCD_1IN8_WIDTH ;
 80107aa:	4b26      	ldr	r3, [pc, #152]	; (8010844 <LCD_1IN8_SetGramScanWay+0xdc>)
 80107ac:	22a0      	movs	r2, #160	; 0xa0
 80107ae:	801a      	strh	r2, [r3, #0]
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Page = LCD_1IN8_HEIGHT ;	
 80107b0:	4b24      	ldr	r3, [pc, #144]	; (8010844 <LCD_1IN8_SetGramScanWay+0xdc>)
 80107b2:	2280      	movs	r2, #128	; 0x80
 80107b4:	805a      	strh	r2, [r3, #2]
		sLCD_1IN8_DIS.LCD_1IN8_X_Adjust = LCD_1IN8_Y;
 80107b6:	4b23      	ldr	r3, [pc, #140]	; (8010844 <LCD_1IN8_SetGramScanWay+0xdc>)
 80107b8:	2201      	movs	r2, #1
 80107ba:	80da      	strh	r2, [r3, #6]
		sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust = LCD_1IN8_X;
 80107bc:	4b21      	ldr	r3, [pc, #132]	; (8010844 <LCD_1IN8_SetGramScanWay+0xdc>)
 80107be:	2202      	movs	r2, #2
 80107c0:	811a      	strh	r2, [r3, #8]
	}

    // Gets the scan direction of GRAM
    uint16_t MemoryAccessReg_Data=0;  //0x36
 80107c2:	2300      	movs	r3, #0
 80107c4:	81fb      	strh	r3, [r7, #14]
    switch (Scan_dir) {
 80107c6:	79fb      	ldrb	r3, [r7, #7]
 80107c8:	2b07      	cmp	r3, #7
 80107ca:	d82b      	bhi.n	8010824 <LCD_1IN8_SetGramScanWay+0xbc>
 80107cc:	a201      	add	r2, pc, #4	; (adr r2, 80107d4 <LCD_1IN8_SetGramScanWay+0x6c>)
 80107ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107d2:	bf00      	nop
 80107d4:	080107f5 	.word	0x080107f5
 80107d8:	080107fb 	.word	0x080107fb
 80107dc:	08010801 	.word	0x08010801
 80107e0:	08010807 	.word	0x08010807
 80107e4:	0801080d 	.word	0x0801080d
 80107e8:	08010813 	.word	0x08010813
 80107ec:	08010819 	.word	0x08010819
 80107f0:	0801081f 	.word	0x0801081f
    case L2R_U2D:
        MemoryAccessReg_Data = 0X00 | 0x00;//x Scan direction | y Scan direction
 80107f4:	2300      	movs	r3, #0
 80107f6:	81fb      	strh	r3, [r7, #14]
        break;
 80107f8:	e014      	b.n	8010824 <LCD_1IN8_SetGramScanWay+0xbc>
    case L2R_D2U:
        MemoryAccessReg_Data = 0x00 | 0x80;//0xC8 | 0X10
 80107fa:	2380      	movs	r3, #128	; 0x80
 80107fc:	81fb      	strh	r3, [r7, #14]
        break;
 80107fe:	e011      	b.n	8010824 <LCD_1IN8_SetGramScanWay+0xbc>
    case R2L_U2D:	//0X04
        MemoryAccessReg_Data = 0x40 | 0x00;
 8010800:	2340      	movs	r3, #64	; 0x40
 8010802:	81fb      	strh	r3, [r7, #14]
        break;
 8010804:	e00e      	b.n	8010824 <LCD_1IN8_SetGramScanWay+0xbc>
    case R2L_D2U:	//0X0C
        MemoryAccessReg_Data = 0x40 | 0x80;
 8010806:	23c0      	movs	r3, #192	; 0xc0
 8010808:	81fb      	strh	r3, [r7, #14]
        break;
 801080a:	e00b      	b.n	8010824 <LCD_1IN8_SetGramScanWay+0xbc>
    case U2D_L2R:	//0X02
        MemoryAccessReg_Data = 0X00 | 0X00 | 0x20;
 801080c:	2320      	movs	r3, #32
 801080e:	81fb      	strh	r3, [r7, #14]
        break;
 8010810:	e008      	b.n	8010824 <LCD_1IN8_SetGramScanWay+0xbc>
    case U2D_R2L:	//0X06
        MemoryAccessReg_Data = 0x00 | 0X40 | 0x20;
 8010812:	2360      	movs	r3, #96	; 0x60
 8010814:	81fb      	strh	r3, [r7, #14]
        break;
 8010816:	e005      	b.n	8010824 <LCD_1IN8_SetGramScanWay+0xbc>
    case D2U_L2R:	//0X0A
        MemoryAccessReg_Data = 0x80 | 0x00 | 0x20;
 8010818:	23a0      	movs	r3, #160	; 0xa0
 801081a:	81fb      	strh	r3, [r7, #14]
        break;
 801081c:	e002      	b.n	8010824 <LCD_1IN8_SetGramScanWay+0xbc>
    case D2U_R2L:	//0X0E
        MemoryAccessReg_Data = 0x40 | 0x80 | 0x20;
 801081e:	23e0      	movs	r3, #224	; 0xe0
 8010820:	81fb      	strh	r3, [r7, #14]
        break;
 8010822:	bf00      	nop
    }

    // Set the read / write scan direction of the frame memory
    LCD_1IN8_WriteReg(0x36); //MX, MY, RGB mode
 8010824:	2036      	movs	r0, #54	; 0x36
 8010826:	f7ff fe59 	bl	80104dc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit( MemoryAccessReg_Data & 0xf7);	//RGB color filter panel
 801082a:	89fb      	ldrh	r3, [r7, #14]
 801082c:	b2db      	uxtb	r3, r3
 801082e:	f023 0308 	bic.w	r3, r3, #8
 8010832:	b2db      	uxtb	r3, r3
 8010834:	4618      	mov	r0, r3
 8010836:	f7ff fe6b 	bl	8010510 <LCD_1IN8_WriteData_8Bit>

}
 801083a:	bf00      	nop
 801083c:	3710      	adds	r7, #16
 801083e:	46bd      	mov	sp, r7
 8010840:	bd80      	pop	{r7, pc}
 8010842:	bf00      	nop
 8010844:	2400b8f4 	.word	0x2400b8f4

08010848 <LCD_1IN8_Init>:
/********************************************************************************
function:
			initialization
********************************************************************************/
void LCD_1IN8_Init( LCD_1IN8_SCAN_DIR LCD_1IN8_ScanDir )
{
 8010848:	b580      	push	{r7, lr}
 801084a:	b082      	sub	sp, #8
 801084c:	af00      	add	r7, sp, #0
 801084e:	4603      	mov	r3, r0
 8010850:	71fb      	strb	r3, [r7, #7]

    //Hardware reset
    LCD_1IN8_Reset();
 8010852:	f7ff fe21 	bl	8010498 <LCD_1IN8_Reset>

    //Set the initialization register
    LCD_1IN8_InitReg();
 8010856:	f7ff fea5 	bl	80105a4 <LCD_1IN8_InitReg>

    //Set the display scan and color transfer modes
    LCD_1IN8_SetGramScanWay( LCD_1IN8_ScanDir );
 801085a:	79fb      	ldrb	r3, [r7, #7]
 801085c:	4618      	mov	r0, r3
 801085e:	f7ff ff83 	bl	8010768 <LCD_1IN8_SetGramScanWay>
    DEV_Delay_ms(200);
 8010862:	20c8      	movs	r0, #200	; 0xc8
 8010864:	f7f1 feac 	bl	80025c0 <HAL_Delay>

    //sleep out
    LCD_1IN8_WriteReg(0x11);
 8010868:	2011      	movs	r0, #17
 801086a:	f7ff fe37 	bl	80104dc <LCD_1IN8_WriteReg>
    DEV_Delay_ms(120);
 801086e:	2078      	movs	r0, #120	; 0x78
 8010870:	f7f1 fea6 	bl	80025c0 <HAL_Delay>

    //Turn on the LCD display
    LCD_1IN8_WriteReg(0x29);
 8010874:	2029      	movs	r0, #41	; 0x29
 8010876:	f7ff fe31 	bl	80104dc <LCD_1IN8_WriteReg>
}
 801087a:	bf00      	nop
 801087c:	3708      	adds	r7, #8
 801087e:	46bd      	mov	sp, r7
 8010880:	bd80      	pop	{r7, pc}
	...

08010884 <LCD_1IN8_SetWindows>:
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_1IN8_SetWindows( POINT Xstart, POINT Ystart, POINT Xend, POINT Yend )
{
 8010884:	b590      	push	{r4, r7, lr}
 8010886:	b083      	sub	sp, #12
 8010888:	af00      	add	r7, sp, #0
 801088a:	4604      	mov	r4, r0
 801088c:	4608      	mov	r0, r1
 801088e:	4611      	mov	r1, r2
 8010890:	461a      	mov	r2, r3
 8010892:	4623      	mov	r3, r4
 8010894:	80fb      	strh	r3, [r7, #6]
 8010896:	4603      	mov	r3, r0
 8010898:	80bb      	strh	r3, [r7, #4]
 801089a:	460b      	mov	r3, r1
 801089c:	807b      	strh	r3, [r7, #2]
 801089e:	4613      	mov	r3, r2
 80108a0:	803b      	strh	r3, [r7, #0]

    //set the X coordinates
    LCD_1IN8_WriteReg ( 0x2A );
 80108a2:	202a      	movs	r0, #42	; 0x2a
 80108a4:	f7ff fe1a 	bl	80104dc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit ( 0x00 );						//Set the horizontal starting point to the high octet
 80108a8:	2000      	movs	r0, #0
 80108aa:	f7ff fe31 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (Xstart & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_X_Adjust);			//Set the horizontal starting point to the low octet
 80108ae:	88fb      	ldrh	r3, [r7, #6]
 80108b0:	b2da      	uxtb	r2, r3
 80108b2:	4b1e      	ldr	r3, [pc, #120]	; (801092c <LCD_1IN8_SetWindows+0xa8>)
 80108b4:	88db      	ldrh	r3, [r3, #6]
 80108b6:	b2db      	uxtb	r3, r3
 80108b8:	4413      	add	r3, r2
 80108ba:	b2db      	uxtb	r3, r3
 80108bc:	4618      	mov	r0, r3
 80108be:	f7ff fe27 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( 0x00 );				//Set the horizontal end to the high octet
 80108c2:	2000      	movs	r0, #0
 80108c4:	f7ff fe24 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (( Xend - 1 ) & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_X_Adjust);	//Set the horizontal end to the low octet
 80108c8:	887b      	ldrh	r3, [r7, #2]
 80108ca:	b2da      	uxtb	r2, r3
 80108cc:	4b17      	ldr	r3, [pc, #92]	; (801092c <LCD_1IN8_SetWindows+0xa8>)
 80108ce:	88db      	ldrh	r3, [r3, #6]
 80108d0:	b2db      	uxtb	r3, r3
 80108d2:	4413      	add	r3, r2
 80108d4:	b2db      	uxtb	r3, r3
 80108d6:	3b01      	subs	r3, #1
 80108d8:	b2db      	uxtb	r3, r3
 80108da:	4618      	mov	r0, r3
 80108dc:	f7ff fe18 	bl	8010510 <LCD_1IN8_WriteData_8Bit>

    //set the Y coordinates
    LCD_1IN8_WriteReg ( 0x2B );
 80108e0:	202b      	movs	r0, #43	; 0x2b
 80108e2:	f7ff fdfb 	bl	80104dc <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit ( 0x00 );
 80108e6:	2000      	movs	r0, #0
 80108e8:	f7ff fe12 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (Ystart & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust);
 80108ec:	88bb      	ldrh	r3, [r7, #4]
 80108ee:	b2da      	uxtb	r2, r3
 80108f0:	4b0e      	ldr	r3, [pc, #56]	; (801092c <LCD_1IN8_SetWindows+0xa8>)
 80108f2:	891b      	ldrh	r3, [r3, #8]
 80108f4:	b2db      	uxtb	r3, r3
 80108f6:	4413      	add	r3, r2
 80108f8:	b2db      	uxtb	r3, r3
 80108fa:	4618      	mov	r0, r3
 80108fc:	f7ff fe08 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( 0x00 );
 8010900:	2000      	movs	r0, #0
 8010902:	f7ff fe05 	bl	8010510 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( ( (Yend - 1) & 0xff )+ sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust);
 8010906:	883b      	ldrh	r3, [r7, #0]
 8010908:	b2da      	uxtb	r2, r3
 801090a:	4b08      	ldr	r3, [pc, #32]	; (801092c <LCD_1IN8_SetWindows+0xa8>)
 801090c:	891b      	ldrh	r3, [r3, #8]
 801090e:	b2db      	uxtb	r3, r3
 8010910:	4413      	add	r3, r2
 8010912:	b2db      	uxtb	r3, r3
 8010914:	3b01      	subs	r3, #1
 8010916:	b2db      	uxtb	r3, r3
 8010918:	4618      	mov	r0, r3
 801091a:	f7ff fdf9 	bl	8010510 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0x2C);
 801091e:	202c      	movs	r0, #44	; 0x2c
 8010920:	f7ff fddc 	bl	80104dc <LCD_1IN8_WriteReg>

}
 8010924:	bf00      	nop
 8010926:	370c      	adds	r7, #12
 8010928:	46bd      	mov	sp, r7
 801092a:	bd90      	pop	{r4, r7, pc}
 801092c:	2400b8f4 	.word	0x2400b8f4

08010930 <LCD_1IN8_SetCursor>:
parameter:
		xStart :   X direction Start coordinates
		xEnd   :   X direction end coordinates
********************************************************************************/
void LCD_1IN8_SetCursor ( POINT Xpoint, POINT Ypoint )
{
 8010930:	b580      	push	{r7, lr}
 8010932:	b082      	sub	sp, #8
 8010934:	af00      	add	r7, sp, #0
 8010936:	4603      	mov	r3, r0
 8010938:	460a      	mov	r2, r1
 801093a:	80fb      	strh	r3, [r7, #6]
 801093c:	4613      	mov	r3, r2
 801093e:	80bb      	strh	r3, [r7, #4]
    LCD_1IN8_SetWindows ( Xpoint, Ypoint, Xpoint , Ypoint );
 8010940:	88bb      	ldrh	r3, [r7, #4]
 8010942:	88fa      	ldrh	r2, [r7, #6]
 8010944:	88b9      	ldrh	r1, [r7, #4]
 8010946:	88f8      	ldrh	r0, [r7, #6]
 8010948:	f7ff ff9c 	bl	8010884 <LCD_1IN8_SetWindows>
}
 801094c:	bf00      	nop
 801094e:	3708      	adds	r7, #8
 8010950:	46bd      	mov	sp, r7
 8010952:	bd80      	pop	{r7, pc}

08010954 <LCD_1IN8_SetColor>:
parameter:
		Color  :   Set show color
********************************************************************************/
//static void LCD_1IN8_SetColor( LENGTH Dis_Width, LENGTH Dis_Height, COLOR Color ){
void LCD_1IN8_SetColor( COLOR Color ,POINT Xpoint, POINT Ypoint)
{
 8010954:	b580      	push	{r7, lr}
 8010956:	b082      	sub	sp, #8
 8010958:	af00      	add	r7, sp, #0
 801095a:	4603      	mov	r3, r0
 801095c:	80fb      	strh	r3, [r7, #6]
 801095e:	460b      	mov	r3, r1
 8010960:	80bb      	strh	r3, [r7, #4]
 8010962:	4613      	mov	r3, r2
 8010964:	807b      	strh	r3, [r7, #2]
    LCD_1IN8_WriteData_NLen16Bit(Color ,(uint32_t)Xpoint * (uint32_t)Ypoint);
 8010966:	88bb      	ldrh	r3, [r7, #4]
 8010968:	887a      	ldrh	r2, [r7, #2]
 801096a:	fb02 f203 	mul.w	r2, r2, r3
 801096e:	88fb      	ldrh	r3, [r7, #6]
 8010970:	4611      	mov	r1, r2
 8010972:	4618      	mov	r0, r3
 8010974:	f7ff fdec 	bl	8010550 <LCD_1IN8_WriteData_NLen16Bit>
}
 8010978:	bf00      	nop
 801097a:	3708      	adds	r7, #8
 801097c:	46bd      	mov	sp, r7
 801097e:	bd80      	pop	{r7, pc}

08010980 <LCD_1IN8_DrawPaint>:
		Xpoint :   The x coordinate of the point
		Ypoint :   The y coordinate of the point
		Color  :   Set the color
********************************************************************************/
void LCD_1IN8_DrawPaint ( POINT Xpoint, POINT Ypoint, COLOR Color )
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b082      	sub	sp, #8
 8010984:	af00      	add	r7, sp, #0
 8010986:	4603      	mov	r3, r0
 8010988:	80fb      	strh	r3, [r7, #6]
 801098a:	460b      	mov	r3, r1
 801098c:	80bb      	strh	r3, [r7, #4]
 801098e:	4613      	mov	r3, r2
 8010990:	807b      	strh	r3, [r7, #2]
    if ( ( Xpoint <= sLCD_1IN8_DIS.LCD_1IN8_Dis_Column ) && ( Ypoint <= sLCD_1IN8_DIS.LCD_1IN8_Dis_Page ) )
 8010992:	4b1b      	ldr	r3, [pc, #108]	; (8010a00 <LCD_1IN8_DrawPaint+0x80>)
 8010994:	881b      	ldrh	r3, [r3, #0]
 8010996:	88fa      	ldrh	r2, [r7, #6]
 8010998:	429a      	cmp	r2, r3
 801099a:	d82d      	bhi.n	80109f8 <LCD_1IN8_DrawPaint+0x78>
 801099c:	4b18      	ldr	r3, [pc, #96]	; (8010a00 <LCD_1IN8_DrawPaint+0x80>)
 801099e:	885b      	ldrh	r3, [r3, #2]
 80109a0:	88ba      	ldrh	r2, [r7, #4]
 80109a2:	429a      	cmp	r2, r3
 80109a4:	d828      	bhi.n	80109f8 <LCD_1IN8_DrawPaint+0x78>
    {
    	if (!renderCompleteFrame)
 80109a6:	4b17      	ldr	r3, [pc, #92]	; (8010a04 <LCD_1IN8_DrawPaint+0x84>)
 80109a8:	781b      	ldrb	r3, [r3, #0]
 80109aa:	f083 0301 	eor.w	r3, r3, #1
 80109ae:	b2db      	uxtb	r3, r3
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d00c      	beq.n	80109ce <LCD_1IN8_DrawPaint+0x4e>
    	{
    		LCD_1IN8_SetCursor (Xpoint, Ypoint);
 80109b4:	88ba      	ldrh	r2, [r7, #4]
 80109b6:	88fb      	ldrh	r3, [r7, #6]
 80109b8:	4611      	mov	r1, r2
 80109ba:	4618      	mov	r0, r3
 80109bc:	f7ff ffb8 	bl	8010930 <LCD_1IN8_SetCursor>
    		LCD_1IN8_SetColor ( Color , 1 , 1);
 80109c0:	887b      	ldrh	r3, [r7, #2]
 80109c2:	2201      	movs	r2, #1
 80109c4:	2101      	movs	r1, #1
 80109c6:	4618      	mov	r0, r3
 80109c8:	f7ff ffc4 	bl	8010954 <LCD_1IN8_SetColor>
    	{
    		nextFrameToDraw[(SCREEN_WIDTH * Ypoint + Xpoint) * 2] = (uint8_t)((Color & 0xFF00) >> 8 );
    		nextFrameToDraw[(SCREEN_WIDTH * Ypoint + Xpoint) * 2 + 1] = (uint8_t)((Color & 0x00FF));
    	}
    }
}
 80109cc:	e014      	b.n	80109f8 <LCD_1IN8_DrawPaint+0x78>
    		nextFrameToDraw[(SCREEN_WIDTH * Ypoint + Xpoint) * 2] = (uint8_t)((Color & 0xFF00) >> 8 );
 80109ce:	887b      	ldrh	r3, [r7, #2]
 80109d0:	0a1b      	lsrs	r3, r3, #8
 80109d2:	b299      	uxth	r1, r3
 80109d4:	88bb      	ldrh	r3, [r7, #4]
 80109d6:	01da      	lsls	r2, r3, #7
 80109d8:	88fb      	ldrh	r3, [r7, #6]
 80109da:	4413      	add	r3, r2
 80109dc:	005b      	lsls	r3, r3, #1
 80109de:	b2c9      	uxtb	r1, r1
 80109e0:	4a09      	ldr	r2, [pc, #36]	; (8010a08 <LCD_1IN8_DrawPaint+0x88>)
 80109e2:	54d1      	strb	r1, [r2, r3]
    		nextFrameToDraw[(SCREEN_WIDTH * Ypoint + Xpoint) * 2 + 1] = (uint8_t)((Color & 0x00FF));
 80109e4:	88bb      	ldrh	r3, [r7, #4]
 80109e6:	01da      	lsls	r2, r3, #7
 80109e8:	88fb      	ldrh	r3, [r7, #6]
 80109ea:	4413      	add	r3, r2
 80109ec:	005b      	lsls	r3, r3, #1
 80109ee:	3301      	adds	r3, #1
 80109f0:	887a      	ldrh	r2, [r7, #2]
 80109f2:	b2d1      	uxtb	r1, r2
 80109f4:	4a04      	ldr	r2, [pc, #16]	; (8010a08 <LCD_1IN8_DrawPaint+0x88>)
 80109f6:	54d1      	strb	r1, [r2, r3]
}
 80109f8:	bf00      	nop
 80109fa:	3708      	adds	r7, #8
 80109fc:	46bd      	mov	sp, r7
 80109fe:	bd80      	pop	{r7, pc}
 8010a00:	2400b8f4 	.word	0x2400b8f4
 8010a04:	2400aeb8 	.word	0x2400aeb8
 8010a08:	24000090 	.word	0x24000090

08010a0c <LCD_1IN8_Clear>:
/********************************************************************************
function:
			Clear screen
********************************************************************************/
void LCD_1IN8_Clear(COLOR  Color)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b084      	sub	sp, #16
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	4603      	mov	r3, r0
 8010a14:	80fb      	strh	r3, [r7, #6]
    UWORD i,j;
    LCD_1IN8_SetWindows(0, 0, sLCD_1IN8_DIS.LCD_1IN8_Dis_Column, sLCD_1IN8_DIS.LCD_1IN8_Dis_Page);
 8010a16:	4b1a      	ldr	r3, [pc, #104]	; (8010a80 <LCD_1IN8_Clear+0x74>)
 8010a18:	881a      	ldrh	r2, [r3, #0]
 8010a1a:	4b19      	ldr	r3, [pc, #100]	; (8010a80 <LCD_1IN8_Clear+0x74>)
 8010a1c:	885b      	ldrh	r3, [r3, #2]
 8010a1e:	2100      	movs	r1, #0
 8010a20:	2000      	movs	r0, #0
 8010a22:	f7ff ff2f 	bl	8010884 <LCD_1IN8_SetWindows>
    LCD_1IN8_DC_1;
 8010a26:	2201      	movs	r2, #1
 8010a28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010a2c:	4815      	ldr	r0, [pc, #84]	; (8010a84 <LCD_1IN8_Clear+0x78>)
 8010a2e:	f7f5 fbaf 	bl	8006190 <HAL_GPIO_WritePin>
    for(i=0;i<sLCD_1IN8_DIS.LCD_1IN8_Dis_Column;i++)
 8010a32:	2300      	movs	r3, #0
 8010a34:	81fb      	strh	r3, [r7, #14]
 8010a36:	e019      	b.n	8010a6c <LCD_1IN8_Clear+0x60>
	{
		for(j=0;j<sLCD_1IN8_DIS.LCD_1IN8_Dis_Page;j++)
 8010a38:	2300      	movs	r3, #0
 8010a3a:	81bb      	strh	r3, [r7, #12]
 8010a3c:	e00e      	b.n	8010a5c <LCD_1IN8_Clear+0x50>
		{
			//LCD_1IN8_WriteData_NLen16Bit(Image[i*LCD_1IN8_WIDTH+j],1);
			DEV_SPI_WRITE( (uint8_t)(Color & 0XFF) );
 8010a3e:	88fb      	ldrh	r3, [r7, #6]
 8010a40:	b2db      	uxtb	r3, r3
 8010a42:	4618      	mov	r0, r3
 8010a44:	f7fe fe5c 	bl	800f700 <DEV_SPI_WRite>
			DEV_SPI_WRITE( (uint8_t)(Color >> 8) );
 8010a48:	88fb      	ldrh	r3, [r7, #6]
 8010a4a:	0a1b      	lsrs	r3, r3, #8
 8010a4c:	b29b      	uxth	r3, r3
 8010a4e:	b2db      	uxtb	r3, r3
 8010a50:	4618      	mov	r0, r3
 8010a52:	f7fe fe55 	bl	800f700 <DEV_SPI_WRite>
		for(j=0;j<sLCD_1IN8_DIS.LCD_1IN8_Dis_Page;j++)
 8010a56:	89bb      	ldrh	r3, [r7, #12]
 8010a58:	3301      	adds	r3, #1
 8010a5a:	81bb      	strh	r3, [r7, #12]
 8010a5c:	4b08      	ldr	r3, [pc, #32]	; (8010a80 <LCD_1IN8_Clear+0x74>)
 8010a5e:	885b      	ldrh	r3, [r3, #2]
 8010a60:	89ba      	ldrh	r2, [r7, #12]
 8010a62:	429a      	cmp	r2, r3
 8010a64:	d3eb      	bcc.n	8010a3e <LCD_1IN8_Clear+0x32>
    for(i=0;i<sLCD_1IN8_DIS.LCD_1IN8_Dis_Column;i++)
 8010a66:	89fb      	ldrh	r3, [r7, #14]
 8010a68:	3301      	adds	r3, #1
 8010a6a:	81fb      	strh	r3, [r7, #14]
 8010a6c:	4b04      	ldr	r3, [pc, #16]	; (8010a80 <LCD_1IN8_Clear+0x74>)
 8010a6e:	881b      	ldrh	r3, [r3, #0]
 8010a70:	89fa      	ldrh	r2, [r7, #14]
 8010a72:	429a      	cmp	r2, r3
 8010a74:	d3e0      	bcc.n	8010a38 <LCD_1IN8_Clear+0x2c>
			
		}
	}
}
 8010a76:	bf00      	nop
 8010a78:	bf00      	nop
 8010a7a:	3710      	adds	r7, #16
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	bd80      	pop	{r7, pc}
 8010a80:	2400b8f4 	.word	0x2400b8f4
 8010a84:	58021800 	.word	0x58021800

08010a88 <LCD_1IN8_SetBackLight>:
	Setting backlight
parameter	:
	  value : Range 0~1000   Duty cycle is value/1000	
*******************************************************************************/
void LCD_1IN8_SetBackLight(UWORD Value)
{
 8010a88:	b480      	push	{r7}
 8010a8a:	b083      	sub	sp, #12
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	4603      	mov	r3, r0
 8010a90:	80fb      	strh	r3, [r7, #6]
	 DEV_Set_PWM(Value);
 8010a92:	4a04      	ldr	r2, [pc, #16]	; (8010aa4 <LCD_1IN8_SetBackLight+0x1c>)
 8010a94:	88fb      	ldrh	r3, [r7, #6]
 8010a96:	6353      	str	r3, [r2, #52]	; 0x34
}
 8010a98:	bf00      	nop
 8010a9a:	370c      	adds	r7, #12
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa2:	4770      	bx	lr
 8010aa4:	40010000 	.word	0x40010000

08010aa8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8010aa8:	b590      	push	{r4, r7, lr}
 8010aaa:	b089      	sub	sp, #36	; 0x24
 8010aac:	af04      	add	r7, sp, #16
 8010aae:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8010ab0:	2301      	movs	r3, #1
 8010ab2:	2202      	movs	r2, #2
 8010ab4:	2102      	movs	r1, #2
 8010ab6:	6878      	ldr	r0, [r7, #4]
 8010ab8:	f000 fcb8 	bl	801142c <USBH_FindInterface>
 8010abc:	4603      	mov	r3, r0
 8010abe:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8010ac0:	7bfb      	ldrb	r3, [r7, #15]
 8010ac2:	2bff      	cmp	r3, #255	; 0xff
 8010ac4:	d002      	beq.n	8010acc <USBH_CDC_InterfaceInit+0x24>
 8010ac6:	7bfb      	ldrb	r3, [r7, #15]
 8010ac8:	2b01      	cmp	r3, #1
 8010aca:	d901      	bls.n	8010ad0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8010acc:	2302      	movs	r3, #2
 8010ace:	e15a      	b.n	8010d86 <USBH_CDC_InterfaceInit+0x2de>
  }

  status = USBH_SelectInterface(phost, interface);
 8010ad0:	7bfb      	ldrb	r3, [r7, #15]
 8010ad2:	4619      	mov	r1, r3
 8010ad4:	6878      	ldr	r0, [r7, #4]
 8010ad6:	f000 fc89 	bl	80113ec <USBH_SelectInterface>
 8010ada:	4603      	mov	r3, r0
 8010adc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8010ade:	7bbb      	ldrb	r3, [r7, #14]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d001      	beq.n	8010ae8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8010ae4:	2302      	movs	r3, #2
 8010ae6:	e14e      	b.n	8010d86 <USBH_CDC_InterfaceInit+0x2de>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8010ae8:	687a      	ldr	r2, [r7, #4]
 8010aea:	f643 13bc 	movw	r3, #14780	; 0x39bc
 8010aee:	4413      	add	r3, r2
 8010af0:	681c      	ldr	r4, [r3, #0]
 8010af2:	2050      	movs	r0, #80	; 0x50
 8010af4:	f00b fdc4 	bl	801c680 <malloc>
 8010af8:	4603      	mov	r3, r0
 8010afa:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8010afc:	687a      	ldr	r2, [r7, #4]
 8010afe:	f643 13bc 	movw	r3, #14780	; 0x39bc
 8010b02:	4413      	add	r3, r2
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	69db      	ldr	r3, [r3, #28]
 8010b08:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8010b0a:	68bb      	ldr	r3, [r7, #8]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d101      	bne.n	8010b14 <USBH_CDC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8010b10:	2302      	movs	r3, #2
 8010b12:	e138      	b.n	8010d86 <USBH_CDC_InterfaceInit+0x2de>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8010b14:	2250      	movs	r2, #80	; 0x50
 8010b16:	2100      	movs	r1, #0
 8010b18:	68b8      	ldr	r0, [r7, #8]
 8010b1a:	f00b fde9 	bl	801c6f0 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8010b1e:	7bfb      	ldrb	r3, [r7, #15]
 8010b20:	687a      	ldr	r2, [r7, #4]
 8010b22:	211a      	movs	r1, #26
 8010b24:	fb01 f303 	mul.w	r3, r1, r3
 8010b28:	441a      	add	r2, r3
 8010b2a:	f643 138e 	movw	r3, #14734	; 0x398e
 8010b2e:	4413      	add	r3, r2
 8010b30:	781b      	ldrb	r3, [r3, #0]
 8010b32:	b25b      	sxtb	r3, r3
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	da17      	bge.n	8010b68 <USBH_CDC_InterfaceInit+0xc0>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8010b38:	7bfb      	ldrb	r3, [r7, #15]
 8010b3a:	687a      	ldr	r2, [r7, #4]
 8010b3c:	211a      	movs	r1, #26
 8010b3e:	fb01 f303 	mul.w	r3, r1, r3
 8010b42:	441a      	add	r2, r3
 8010b44:	f643 138e 	movw	r3, #14734	; 0x398e
 8010b48:	4413      	add	r3, r2
 8010b4a:	781a      	ldrb	r2, [r3, #0]
 8010b4c:	68bb      	ldr	r3, [r7, #8]
 8010b4e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8010b50:	7bfb      	ldrb	r3, [r7, #15]
 8010b52:	687a      	ldr	r2, [r7, #4]
 8010b54:	211a      	movs	r1, #26
 8010b56:	fb01 f303 	mul.w	r3, r1, r3
 8010b5a:	441a      	add	r2, r3
 8010b5c:	f643 1390 	movw	r3, #14736	; 0x3990
 8010b60:	4413      	add	r3, r2
 8010b62:	881a      	ldrh	r2, [r3, #0]
 8010b64:	68bb      	ldr	r3, [r7, #8]
 8010b66:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8010b68:	68bb      	ldr	r3, [r7, #8]
 8010b6a:	785b      	ldrb	r3, [r3, #1]
 8010b6c:	4619      	mov	r1, r3
 8010b6e:	6878      	ldr	r0, [r7, #4]
 8010b70:	f001 f80f 	bl	8011b92 <USBH_AllocPipe>
 8010b74:	4603      	mov	r3, r0
 8010b76:	461a      	mov	r2, r3
 8010b78:	68bb      	ldr	r3, [r7, #8]
 8010b7a:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8010b7c:	68bb      	ldr	r3, [r7, #8]
 8010b7e:	7819      	ldrb	r1, [r3, #0]
 8010b80:	68bb      	ldr	r3, [r7, #8]
 8010b82:	7858      	ldrb	r0, [r3, #1]
 8010b84:	687a      	ldr	r2, [r7, #4]
 8010b86:	f643 135c 	movw	r3, #14684	; 0x395c
 8010b8a:	4413      	add	r3, r2
 8010b8c:	781c      	ldrb	r4, [r3, #0]
 8010b8e:	687a      	ldr	r2, [r7, #4]
 8010b90:	f643 135d 	movw	r3, #14685	; 0x395d
 8010b94:	4413      	add	r3, r2
 8010b96:	781b      	ldrb	r3, [r3, #0]
 8010b98:	68ba      	ldr	r2, [r7, #8]
 8010b9a:	8952      	ldrh	r2, [r2, #10]
 8010b9c:	9202      	str	r2, [sp, #8]
 8010b9e:	2203      	movs	r2, #3
 8010ba0:	9201      	str	r2, [sp, #4]
 8010ba2:	9300      	str	r3, [sp, #0]
 8010ba4:	4623      	mov	r3, r4
 8010ba6:	4602      	mov	r2, r0
 8010ba8:	6878      	ldr	r0, [r7, #4]
 8010baa:	f000 ffc3 	bl	8011b34 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8010bae:	68bb      	ldr	r3, [r7, #8]
 8010bb0:	781b      	ldrb	r3, [r3, #0]
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	4619      	mov	r1, r3
 8010bb6:	6878      	ldr	r0, [r7, #4]
 8010bb8:	f00b fc8a 	bl	801c4d0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8010bbc:	2300      	movs	r3, #0
 8010bbe:	2200      	movs	r2, #0
 8010bc0:	210a      	movs	r1, #10
 8010bc2:	6878      	ldr	r0, [r7, #4]
 8010bc4:	f000 fc32 	bl	801142c <USBH_FindInterface>
 8010bc8:	4603      	mov	r3, r0
 8010bca:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8010bcc:	7bfb      	ldrb	r3, [r7, #15]
 8010bce:	2bff      	cmp	r3, #255	; 0xff
 8010bd0:	d002      	beq.n	8010bd8 <USBH_CDC_InterfaceInit+0x130>
 8010bd2:	7bfb      	ldrb	r3, [r7, #15]
 8010bd4:	2b01      	cmp	r3, #1
 8010bd6:	d901      	bls.n	8010bdc <USBH_CDC_InterfaceInit+0x134>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8010bd8:	2302      	movs	r3, #2
 8010bda:	e0d4      	b.n	8010d86 <USBH_CDC_InterfaceInit+0x2de>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8010bdc:	7bfb      	ldrb	r3, [r7, #15]
 8010bde:	687a      	ldr	r2, [r7, #4]
 8010be0:	211a      	movs	r1, #26
 8010be2:	fb01 f303 	mul.w	r3, r1, r3
 8010be6:	441a      	add	r2, r3
 8010be8:	f643 138e 	movw	r3, #14734	; 0x398e
 8010bec:	4413      	add	r3, r2
 8010bee:	781b      	ldrb	r3, [r3, #0]
 8010bf0:	b25b      	sxtb	r3, r3
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	da18      	bge.n	8010c28 <USBH_CDC_InterfaceInit+0x180>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8010bf6:	7bfb      	ldrb	r3, [r7, #15]
 8010bf8:	687a      	ldr	r2, [r7, #4]
 8010bfa:	211a      	movs	r1, #26
 8010bfc:	fb01 f303 	mul.w	r3, r1, r3
 8010c00:	441a      	add	r2, r3
 8010c02:	f643 138e 	movw	r3, #14734	; 0x398e
 8010c06:	4413      	add	r3, r2
 8010c08:	781a      	ldrb	r2, [r3, #0]
 8010c0a:	68bb      	ldr	r3, [r7, #8]
 8010c0c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8010c0e:	7bfb      	ldrb	r3, [r7, #15]
 8010c10:	687a      	ldr	r2, [r7, #4]
 8010c12:	211a      	movs	r1, #26
 8010c14:	fb01 f303 	mul.w	r3, r1, r3
 8010c18:	441a      	add	r2, r3
 8010c1a:	f643 1390 	movw	r3, #14736	; 0x3990
 8010c1e:	4413      	add	r3, r2
 8010c20:	881a      	ldrh	r2, [r3, #0]
 8010c22:	68bb      	ldr	r3, [r7, #8]
 8010c24:	835a      	strh	r2, [r3, #26]
 8010c26:	e017      	b.n	8010c58 <USBH_CDC_InterfaceInit+0x1b0>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8010c28:	7bfb      	ldrb	r3, [r7, #15]
 8010c2a:	687a      	ldr	r2, [r7, #4]
 8010c2c:	211a      	movs	r1, #26
 8010c2e:	fb01 f303 	mul.w	r3, r1, r3
 8010c32:	441a      	add	r2, r3
 8010c34:	f643 138e 	movw	r3, #14734	; 0x398e
 8010c38:	4413      	add	r3, r2
 8010c3a:	781a      	ldrb	r2, [r3, #0]
 8010c3c:	68bb      	ldr	r3, [r7, #8]
 8010c3e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8010c40:	7bfb      	ldrb	r3, [r7, #15]
 8010c42:	687a      	ldr	r2, [r7, #4]
 8010c44:	211a      	movs	r1, #26
 8010c46:	fb01 f303 	mul.w	r3, r1, r3
 8010c4a:	441a      	add	r2, r3
 8010c4c:	f643 1390 	movw	r3, #14736	; 0x3990
 8010c50:	4413      	add	r3, r2
 8010c52:	881a      	ldrh	r2, [r3, #0]
 8010c54:	68bb      	ldr	r3, [r7, #8]
 8010c56:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8010c58:	7bfb      	ldrb	r3, [r7, #15]
 8010c5a:	687a      	ldr	r2, [r7, #4]
 8010c5c:	211a      	movs	r1, #26
 8010c5e:	fb01 f303 	mul.w	r3, r1, r3
 8010c62:	441a      	add	r2, r3
 8010c64:	f643 1396 	movw	r3, #14742	; 0x3996
 8010c68:	4413      	add	r3, r2
 8010c6a:	781b      	ldrb	r3, [r3, #0]
 8010c6c:	b25b      	sxtb	r3, r3
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	da18      	bge.n	8010ca4 <USBH_CDC_InterfaceInit+0x1fc>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8010c72:	7bfb      	ldrb	r3, [r7, #15]
 8010c74:	687a      	ldr	r2, [r7, #4]
 8010c76:	211a      	movs	r1, #26
 8010c78:	fb01 f303 	mul.w	r3, r1, r3
 8010c7c:	441a      	add	r2, r3
 8010c7e:	f643 1396 	movw	r3, #14742	; 0x3996
 8010c82:	4413      	add	r3, r2
 8010c84:	781a      	ldrb	r2, [r3, #0]
 8010c86:	68bb      	ldr	r3, [r7, #8]
 8010c88:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8010c8a:	7bfb      	ldrb	r3, [r7, #15]
 8010c8c:	687a      	ldr	r2, [r7, #4]
 8010c8e:	211a      	movs	r1, #26
 8010c90:	fb01 f303 	mul.w	r3, r1, r3
 8010c94:	441a      	add	r2, r3
 8010c96:	f643 1398 	movw	r3, #14744	; 0x3998
 8010c9a:	4413      	add	r3, r2
 8010c9c:	881a      	ldrh	r2, [r3, #0]
 8010c9e:	68bb      	ldr	r3, [r7, #8]
 8010ca0:	835a      	strh	r2, [r3, #26]
 8010ca2:	e017      	b.n	8010cd4 <USBH_CDC_InterfaceInit+0x22c>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8010ca4:	7bfb      	ldrb	r3, [r7, #15]
 8010ca6:	687a      	ldr	r2, [r7, #4]
 8010ca8:	211a      	movs	r1, #26
 8010caa:	fb01 f303 	mul.w	r3, r1, r3
 8010cae:	441a      	add	r2, r3
 8010cb0:	f643 1396 	movw	r3, #14742	; 0x3996
 8010cb4:	4413      	add	r3, r2
 8010cb6:	781a      	ldrb	r2, [r3, #0]
 8010cb8:	68bb      	ldr	r3, [r7, #8]
 8010cba:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8010cbc:	7bfb      	ldrb	r3, [r7, #15]
 8010cbe:	687a      	ldr	r2, [r7, #4]
 8010cc0:	211a      	movs	r1, #26
 8010cc2:	fb01 f303 	mul.w	r3, r1, r3
 8010cc6:	441a      	add	r2, r3
 8010cc8:	f643 1398 	movw	r3, #14744	; 0x3998
 8010ccc:	4413      	add	r3, r2
 8010cce:	881a      	ldrh	r2, [r3, #0]
 8010cd0:	68bb      	ldr	r3, [r7, #8]
 8010cd2:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8010cd4:	68bb      	ldr	r3, [r7, #8]
 8010cd6:	7b9b      	ldrb	r3, [r3, #14]
 8010cd8:	4619      	mov	r1, r3
 8010cda:	6878      	ldr	r0, [r7, #4]
 8010cdc:	f000 ff59 	bl	8011b92 <USBH_AllocPipe>
 8010ce0:	4603      	mov	r3, r0
 8010ce2:	461a      	mov	r2, r3
 8010ce4:	68bb      	ldr	r3, [r7, #8]
 8010ce6:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8010ce8:	68bb      	ldr	r3, [r7, #8]
 8010cea:	7bdb      	ldrb	r3, [r3, #15]
 8010cec:	4619      	mov	r1, r3
 8010cee:	6878      	ldr	r0, [r7, #4]
 8010cf0:	f000 ff4f 	bl	8011b92 <USBH_AllocPipe>
 8010cf4:	4603      	mov	r3, r0
 8010cf6:	461a      	mov	r2, r3
 8010cf8:	68bb      	ldr	r3, [r7, #8]
 8010cfa:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8010cfc:	68bb      	ldr	r3, [r7, #8]
 8010cfe:	7b59      	ldrb	r1, [r3, #13]
 8010d00:	68bb      	ldr	r3, [r7, #8]
 8010d02:	7b98      	ldrb	r0, [r3, #14]
 8010d04:	687a      	ldr	r2, [r7, #4]
 8010d06:	f643 135c 	movw	r3, #14684	; 0x395c
 8010d0a:	4413      	add	r3, r2
 8010d0c:	781c      	ldrb	r4, [r3, #0]
 8010d0e:	687a      	ldr	r2, [r7, #4]
 8010d10:	f643 135d 	movw	r3, #14685	; 0x395d
 8010d14:	4413      	add	r3, r2
 8010d16:	781b      	ldrb	r3, [r3, #0]
 8010d18:	68ba      	ldr	r2, [r7, #8]
 8010d1a:	8b12      	ldrh	r2, [r2, #24]
 8010d1c:	9202      	str	r2, [sp, #8]
 8010d1e:	2202      	movs	r2, #2
 8010d20:	9201      	str	r2, [sp, #4]
 8010d22:	9300      	str	r3, [sp, #0]
 8010d24:	4623      	mov	r3, r4
 8010d26:	4602      	mov	r2, r0
 8010d28:	6878      	ldr	r0, [r7, #4]
 8010d2a:	f000 ff03 	bl	8011b34 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8010d2e:	68bb      	ldr	r3, [r7, #8]
 8010d30:	7b19      	ldrb	r1, [r3, #12]
 8010d32:	68bb      	ldr	r3, [r7, #8]
 8010d34:	7bd8      	ldrb	r0, [r3, #15]
 8010d36:	687a      	ldr	r2, [r7, #4]
 8010d38:	f643 135c 	movw	r3, #14684	; 0x395c
 8010d3c:	4413      	add	r3, r2
 8010d3e:	781c      	ldrb	r4, [r3, #0]
 8010d40:	687a      	ldr	r2, [r7, #4]
 8010d42:	f643 135d 	movw	r3, #14685	; 0x395d
 8010d46:	4413      	add	r3, r2
 8010d48:	781b      	ldrb	r3, [r3, #0]
 8010d4a:	68ba      	ldr	r2, [r7, #8]
 8010d4c:	8b52      	ldrh	r2, [r2, #26]
 8010d4e:	9202      	str	r2, [sp, #8]
 8010d50:	2202      	movs	r2, #2
 8010d52:	9201      	str	r2, [sp, #4]
 8010d54:	9300      	str	r3, [sp, #0]
 8010d56:	4623      	mov	r3, r4
 8010d58:	4602      	mov	r2, r0
 8010d5a:	6878      	ldr	r0, [r7, #4]
 8010d5c:	f000 feea 	bl	8011b34 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8010d60:	68bb      	ldr	r3, [r7, #8]
 8010d62:	2200      	movs	r2, #0
 8010d64:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8010d68:	68bb      	ldr	r3, [r7, #8]
 8010d6a:	7b5b      	ldrb	r3, [r3, #13]
 8010d6c:	2200      	movs	r2, #0
 8010d6e:	4619      	mov	r1, r3
 8010d70:	6878      	ldr	r0, [r7, #4]
 8010d72:	f00b fbad 	bl	801c4d0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8010d76:	68bb      	ldr	r3, [r7, #8]
 8010d78:	7b1b      	ldrb	r3, [r3, #12]
 8010d7a:	2200      	movs	r2, #0
 8010d7c:	4619      	mov	r1, r3
 8010d7e:	6878      	ldr	r0, [r7, #4]
 8010d80:	f00b fba6 	bl	801c4d0 <USBH_LL_SetToggle>

  return USBH_OK;
 8010d84:	2300      	movs	r3, #0
}
 8010d86:	4618      	mov	r0, r3
 8010d88:	3714      	adds	r7, #20
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	bd90      	pop	{r4, r7, pc}

08010d8e <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8010d8e:	b580      	push	{r7, lr}
 8010d90:	b084      	sub	sp, #16
 8010d92:	af00      	add	r7, sp, #0
 8010d94:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8010d96:	687a      	ldr	r2, [r7, #4]
 8010d98:	f643 13bc 	movw	r3, #14780	; 0x39bc
 8010d9c:	4413      	add	r3, r2
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	69db      	ldr	r3, [r3, #28]
 8010da2:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	781b      	ldrb	r3, [r3, #0]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d00e      	beq.n	8010dca <USBH_CDC_InterfaceDeInit+0x3c>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	781b      	ldrb	r3, [r3, #0]
 8010db0:	4619      	mov	r1, r3
 8010db2:	6878      	ldr	r0, [r7, #4]
 8010db4:	f000 fedd 	bl	8011b72 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	781b      	ldrb	r3, [r3, #0]
 8010dbc:	4619      	mov	r1, r3
 8010dbe:	6878      	ldr	r0, [r7, #4]
 8010dc0:	f000 ff09 	bl	8011bd6 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	2200      	movs	r2, #0
 8010dc8:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	7b1b      	ldrb	r3, [r3, #12]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d00e      	beq.n	8010df0 <USBH_CDC_InterfaceDeInit+0x62>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	7b1b      	ldrb	r3, [r3, #12]
 8010dd6:	4619      	mov	r1, r3
 8010dd8:	6878      	ldr	r0, [r7, #4]
 8010dda:	f000 feca 	bl	8011b72 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	7b1b      	ldrb	r3, [r3, #12]
 8010de2:	4619      	mov	r1, r3
 8010de4:	6878      	ldr	r0, [r7, #4]
 8010de6:	f000 fef6 	bl	8011bd6 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	2200      	movs	r2, #0
 8010dee:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	7b5b      	ldrb	r3, [r3, #13]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d00e      	beq.n	8010e16 <USBH_CDC_InterfaceDeInit+0x88>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	7b5b      	ldrb	r3, [r3, #13]
 8010dfc:	4619      	mov	r1, r3
 8010dfe:	6878      	ldr	r0, [r7, #4]
 8010e00:	f000 feb7 	bl	8011b72 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	7b5b      	ldrb	r3, [r3, #13]
 8010e08:	4619      	mov	r1, r3
 8010e0a:	6878      	ldr	r0, [r7, #4]
 8010e0c:	f000 fee3 	bl	8011bd6 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	2200      	movs	r2, #0
 8010e14:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8010e16:	687a      	ldr	r2, [r7, #4]
 8010e18:	f643 13bc 	movw	r3, #14780	; 0x39bc
 8010e1c:	4413      	add	r3, r2
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	69db      	ldr	r3, [r3, #28]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d00f      	beq.n	8010e46 <USBH_CDC_InterfaceDeInit+0xb8>
  {
    USBH_free(phost->pActiveClass->pData);
 8010e26:	687a      	ldr	r2, [r7, #4]
 8010e28:	f643 13bc 	movw	r3, #14780	; 0x39bc
 8010e2c:	4413      	add	r3, r2
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	69db      	ldr	r3, [r3, #28]
 8010e32:	4618      	mov	r0, r3
 8010e34:	f00b fc2c 	bl	801c690 <free>
    phost->pActiveClass->pData = 0U;
 8010e38:	687a      	ldr	r2, [r7, #4]
 8010e3a:	f643 13bc 	movw	r3, #14780	; 0x39bc
 8010e3e:	4413      	add	r3, r2
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	2200      	movs	r2, #0
 8010e44:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8010e46:	2300      	movs	r3, #0
}
 8010e48:	4618      	mov	r0, r3
 8010e4a:	3710      	adds	r7, #16
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	bd80      	pop	{r7, pc}

08010e50 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8010e50:	b580      	push	{r7, lr}
 8010e52:	b084      	sub	sp, #16
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8010e58:	687a      	ldr	r2, [r7, #4]
 8010e5a:	f643 13bc 	movw	r3, #14780	; 0x39bc
 8010e5e:	4413      	add	r3, r2
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	69db      	ldr	r3, [r3, #28]
 8010e64:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	3340      	adds	r3, #64	; 0x40
 8010e6a:	4619      	mov	r1, r3
 8010e6c:	6878      	ldr	r0, [r7, #4]
 8010e6e:	f000 f8b6 	bl	8010fde <GetLineCoding>
 8010e72:	4603      	mov	r3, r0
 8010e74:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8010e76:	7afb      	ldrb	r3, [r7, #11]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d107      	bne.n	8010e8c <USBH_CDC_ClassRequest+0x3c>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8010e7c:	687a      	ldr	r2, [r7, #4]
 8010e7e:	f643 2314 	movw	r3, #14868	; 0x3a14
 8010e82:	4413      	add	r3, r2
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	2102      	movs	r1, #2
 8010e88:	6878      	ldr	r0, [r7, #4]
 8010e8a:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8010e8c:	7afb      	ldrb	r3, [r7, #11]
}
 8010e8e:	4618      	mov	r0, r3
 8010e90:	3710      	adds	r7, #16
 8010e92:	46bd      	mov	sp, r7
 8010e94:	bd80      	pop	{r7, pc}
	...

08010e98 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	b084      	sub	sp, #16
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8010ea0:	2301      	movs	r3, #1
 8010ea2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8010ea4:	2300      	movs	r3, #0
 8010ea6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8010ea8:	687a      	ldr	r2, [r7, #4]
 8010eaa:	f643 13bc 	movw	r3, #14780	; 0x39bc
 8010eae:	4413      	add	r3, r2
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	69db      	ldr	r3, [r3, #28]
 8010eb4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8010eb6:	68bb      	ldr	r3, [r7, #8]
 8010eb8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8010ebc:	2b04      	cmp	r3, #4
 8010ebe:	d877      	bhi.n	8010fb0 <USBH_CDC_Process+0x118>
 8010ec0:	a201      	add	r2, pc, #4	; (adr r2, 8010ec8 <USBH_CDC_Process+0x30>)
 8010ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ec6:	bf00      	nop
 8010ec8:	08010edd 	.word	0x08010edd
 8010ecc:	08010ee3 	.word	0x08010ee3
 8010ed0:	08010f13 	.word	0x08010f13
 8010ed4:	08010f87 	.word	0x08010f87
 8010ed8:	08010f95 	.word	0x08010f95
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8010edc:	2300      	movs	r3, #0
 8010ede:	73fb      	strb	r3, [r7, #15]
      break;
 8010ee0:	e06d      	b.n	8010fbe <USBH_CDC_Process+0x126>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8010ee2:	68bb      	ldr	r3, [r7, #8]
 8010ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010ee6:	4619      	mov	r1, r3
 8010ee8:	6878      	ldr	r0, [r7, #4]
 8010eea:	f000 f897 	bl	801101c <SetLineCoding>
 8010eee:	4603      	mov	r3, r0
 8010ef0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8010ef2:	7bbb      	ldrb	r3, [r7, #14]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d104      	bne.n	8010f02 <USBH_CDC_Process+0x6a>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8010ef8:	68bb      	ldr	r3, [r7, #8]
 8010efa:	2202      	movs	r2, #2
 8010efc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8010f00:	e058      	b.n	8010fb4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8010f02:	7bbb      	ldrb	r3, [r7, #14]
 8010f04:	2b01      	cmp	r3, #1
 8010f06:	d055      	beq.n	8010fb4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8010f08:	68bb      	ldr	r3, [r7, #8]
 8010f0a:	2204      	movs	r2, #4
 8010f0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8010f10:	e050      	b.n	8010fb4 <USBH_CDC_Process+0x11c>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8010f12:	68bb      	ldr	r3, [r7, #8]
 8010f14:	3340      	adds	r3, #64	; 0x40
 8010f16:	4619      	mov	r1, r3
 8010f18:	6878      	ldr	r0, [r7, #4]
 8010f1a:	f000 f860 	bl	8010fde <GetLineCoding>
 8010f1e:	4603      	mov	r3, r0
 8010f20:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8010f22:	7bbb      	ldrb	r3, [r7, #14]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d126      	bne.n	8010f76 <USBH_CDC_Process+0xde>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8010f28:	68bb      	ldr	r3, [r7, #8]
 8010f2a:	2200      	movs	r2, #0
 8010f2c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8010f30:	68bb      	ldr	r3, [r7, #8]
 8010f32:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8010f36:	68bb      	ldr	r3, [r7, #8]
 8010f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010f3a:	791b      	ldrb	r3, [r3, #4]
 8010f3c:	429a      	cmp	r2, r3
 8010f3e:	d13b      	bne.n	8010fb8 <USBH_CDC_Process+0x120>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8010f40:	68bb      	ldr	r3, [r7, #8]
 8010f42:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8010f46:	68bb      	ldr	r3, [r7, #8]
 8010f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010f4a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8010f4c:	429a      	cmp	r2, r3
 8010f4e:	d133      	bne.n	8010fb8 <USBH_CDC_Process+0x120>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8010f50:	68bb      	ldr	r3, [r7, #8]
 8010f52:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8010f56:	68bb      	ldr	r3, [r7, #8]
 8010f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010f5a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8010f5c:	429a      	cmp	r2, r3
 8010f5e:	d12b      	bne.n	8010fb8 <USBH_CDC_Process+0x120>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8010f60:	68bb      	ldr	r3, [r7, #8]
 8010f62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010f64:	68bb      	ldr	r3, [r7, #8]
 8010f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010f68:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8010f6a:	429a      	cmp	r2, r3
 8010f6c:	d124      	bne.n	8010fb8 <USBH_CDC_Process+0x120>
        {
          USBH_CDC_LineCodingChanged(phost);
 8010f6e:	6878      	ldr	r0, [r7, #4]
 8010f70:	f000 f95c 	bl	801122c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8010f74:	e020      	b.n	8010fb8 <USBH_CDC_Process+0x120>
        if (req_status != USBH_BUSY)
 8010f76:	7bbb      	ldrb	r3, [r7, #14]
 8010f78:	2b01      	cmp	r3, #1
 8010f7a:	d01d      	beq.n	8010fb8 <USBH_CDC_Process+0x120>
          CDC_Handle->state = CDC_ERROR_STATE;
 8010f7c:	68bb      	ldr	r3, [r7, #8]
 8010f7e:	2204      	movs	r2, #4
 8010f80:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8010f84:	e018      	b.n	8010fb8 <USBH_CDC_Process+0x120>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8010f86:	6878      	ldr	r0, [r7, #4]
 8010f88:	f000 f867 	bl	801105a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8010f8c:	6878      	ldr	r0, [r7, #4]
 8010f8e:	f000 f8dc 	bl	801114a <CDC_ProcessReception>
      break;
 8010f92:	e014      	b.n	8010fbe <USBH_CDC_Process+0x126>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8010f94:	2100      	movs	r1, #0
 8010f96:	6878      	ldr	r0, [r7, #4]
 8010f98:	f000 fb49 	bl	801162e <USBH_ClrFeature>
 8010f9c:	4603      	mov	r3, r0
 8010f9e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8010fa0:	7bbb      	ldrb	r3, [r7, #14]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d10a      	bne.n	8010fbc <USBH_CDC_Process+0x124>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8010fa6:	68bb      	ldr	r3, [r7, #8]
 8010fa8:	2200      	movs	r2, #0
 8010faa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8010fae:	e005      	b.n	8010fbc <USBH_CDC_Process+0x124>

    default:
      break;
 8010fb0:	bf00      	nop
 8010fb2:	e004      	b.n	8010fbe <USBH_CDC_Process+0x126>
      break;
 8010fb4:	bf00      	nop
 8010fb6:	e002      	b.n	8010fbe <USBH_CDC_Process+0x126>
      break;
 8010fb8:	bf00      	nop
 8010fba:	e000      	b.n	8010fbe <USBH_CDC_Process+0x126>
      break;
 8010fbc:	bf00      	nop

  }

  return status;
 8010fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	3710      	adds	r7, #16
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	bd80      	pop	{r7, pc}

08010fc8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8010fc8:	b480      	push	{r7}
 8010fca:	b083      	sub	sp, #12
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8010fd0:	2300      	movs	r3, #0
}
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	370c      	adds	r7, #12
 8010fd6:	46bd      	mov	sp, r7
 8010fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fdc:	4770      	bx	lr

08010fde <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8010fde:	b580      	push	{r7, lr}
 8010fe0:	b082      	sub	sp, #8
 8010fe2:	af00      	add	r7, sp, #0
 8010fe4:	6078      	str	r0, [r7, #4]
 8010fe6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	22a1      	movs	r2, #161	; 0xa1
 8010fec:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	2221      	movs	r2, #33	; 0x21
 8010ff2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	2200      	movs	r2, #0
 8010ff8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	2207      	movs	r2, #7
 8011004:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8011006:	683b      	ldr	r3, [r7, #0]
 8011008:	2207      	movs	r2, #7
 801100a:	4619      	mov	r1, r3
 801100c:	6878      	ldr	r0, [r7, #4]
 801100e:	f000 fb32 	bl	8011676 <USBH_CtlReq>
 8011012:	4603      	mov	r3, r0
}
 8011014:	4618      	mov	r0, r3
 8011016:	3708      	adds	r7, #8
 8011018:	46bd      	mov	sp, r7
 801101a:	bd80      	pop	{r7, pc}

0801101c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 801101c:	b580      	push	{r7, lr}
 801101e:	b082      	sub	sp, #8
 8011020:	af00      	add	r7, sp, #0
 8011022:	6078      	str	r0, [r7, #4]
 8011024:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	2221      	movs	r2, #33	; 0x21
 801102a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	2220      	movs	r2, #32
 8011030:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	2200      	movs	r2, #0
 8011036:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	2200      	movs	r2, #0
 801103c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	2207      	movs	r2, #7
 8011042:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8011044:	683b      	ldr	r3, [r7, #0]
 8011046:	2207      	movs	r2, #7
 8011048:	4619      	mov	r1, r3
 801104a:	6878      	ldr	r0, [r7, #4]
 801104c:	f000 fb13 	bl	8011676 <USBH_CtlReq>
 8011050:	4603      	mov	r3, r0
}
 8011052:	4618      	mov	r0, r3
 8011054:	3708      	adds	r7, #8
 8011056:	46bd      	mov	sp, r7
 8011058:	bd80      	pop	{r7, pc}

0801105a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 801105a:	b580      	push	{r7, lr}
 801105c:	b086      	sub	sp, #24
 801105e:	af02      	add	r7, sp, #8
 8011060:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8011062:	687a      	ldr	r2, [r7, #4]
 8011064:	f643 13bc 	movw	r3, #14780	; 0x39bc
 8011068:	4413      	add	r3, r2
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	69db      	ldr	r3, [r3, #28]
 801106e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8011070:	2300      	movs	r3, #0
 8011072:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 801107a:	2b01      	cmp	r3, #1
 801107c:	d002      	beq.n	8011084 <CDC_ProcessTransmission+0x2a>
 801107e:	2b02      	cmp	r3, #2
 8011080:	d023      	beq.n	80110ca <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8011082:	e05e      	b.n	8011142 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011088:	68fa      	ldr	r2, [r7, #12]
 801108a:	8b12      	ldrh	r2, [r2, #24]
 801108c:	4293      	cmp	r3, r2
 801108e:	d90b      	bls.n	80110a8 <CDC_ProcessTransmission+0x4e>
        USBH_BulkSendData(phost,
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	69d9      	ldr	r1, [r3, #28]
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	8b1a      	ldrh	r2, [r3, #24]
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	7b5b      	ldrb	r3, [r3, #13]
 801109c:	2001      	movs	r0, #1
 801109e:	9000      	str	r0, [sp, #0]
 80110a0:	6878      	ldr	r0, [r7, #4]
 80110a2:	f000 fd02 	bl	8011aaa <USBH_BulkSendData>
 80110a6:	e00b      	b.n	80110c0 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80110b0:	b29a      	uxth	r2, r3
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	7b5b      	ldrb	r3, [r3, #13]
 80110b6:	2001      	movs	r0, #1
 80110b8:	9000      	str	r0, [sp, #0]
 80110ba:	6878      	ldr	r0, [r7, #4]
 80110bc:	f000 fcf5 	bl	8011aaa <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	2202      	movs	r2, #2
 80110c4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80110c8:	e03b      	b.n	8011142 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	7b5b      	ldrb	r3, [r3, #13]
 80110ce:	4619      	mov	r1, r3
 80110d0:	6878      	ldr	r0, [r7, #4]
 80110d2:	f00b f9cf 	bl	801c474 <USBH_LL_GetURBState>
 80110d6:	4603      	mov	r3, r0
 80110d8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80110da:	7afb      	ldrb	r3, [r7, #11]
 80110dc:	2b01      	cmp	r3, #1
 80110de:	d128      	bne.n	8011132 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110e4:	68fa      	ldr	r2, [r7, #12]
 80110e6:	8b12      	ldrh	r2, [r2, #24]
 80110e8:	4293      	cmp	r3, r2
 80110ea:	d90e      	bls.n	801110a <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110f0:	68fa      	ldr	r2, [r7, #12]
 80110f2:	8b12      	ldrh	r2, [r2, #24]
 80110f4:	1a9a      	subs	r2, r3, r2
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	69db      	ldr	r3, [r3, #28]
 80110fe:	68fa      	ldr	r2, [r7, #12]
 8011100:	8b12      	ldrh	r2, [r2, #24]
 8011102:	441a      	add	r2, r3
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	61da      	str	r2, [r3, #28]
 8011108:	e002      	b.n	8011110 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	2200      	movs	r2, #0
 801110e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011114:	2b00      	cmp	r3, #0
 8011116:	d004      	beq.n	8011122 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	2201      	movs	r2, #1
 801111c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8011120:	e00e      	b.n	8011140 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	2200      	movs	r2, #0
 8011126:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 801112a:	6878      	ldr	r0, [r7, #4]
 801112c:	f000 f86a 	bl	8011204 <USBH_CDC_TransmitCallback>
      break;
 8011130:	e006      	b.n	8011140 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 8011132:	7afb      	ldrb	r3, [r7, #11]
 8011134:	2b02      	cmp	r3, #2
 8011136:	d103      	bne.n	8011140 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	2201      	movs	r2, #1
 801113c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8011140:	bf00      	nop
  }
}
 8011142:	bf00      	nop
 8011144:	3710      	adds	r7, #16
 8011146:	46bd      	mov	sp, r7
 8011148:	bd80      	pop	{r7, pc}

0801114a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 801114a:	b580      	push	{r7, lr}
 801114c:	b086      	sub	sp, #24
 801114e:	af00      	add	r7, sp, #0
 8011150:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8011152:	687a      	ldr	r2, [r7, #4]
 8011154:	f643 13bc 	movw	r3, #14780	; 0x39bc
 8011158:	4413      	add	r3, r2
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	69db      	ldr	r3, [r3, #28]
 801115e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8011160:	2300      	movs	r3, #0
 8011162:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8011164:	697b      	ldr	r3, [r7, #20]
 8011166:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 801116a:	2b03      	cmp	r3, #3
 801116c:	d002      	beq.n	8011174 <CDC_ProcessReception+0x2a>
 801116e:	2b04      	cmp	r3, #4
 8011170:	d00e      	beq.n	8011190 <CDC_ProcessReception+0x46>
#endif
      }
      break;

    default:
      break;
 8011172:	e043      	b.n	80111fc <CDC_ProcessReception+0xb2>
      USBH_BulkReceiveData(phost,
 8011174:	697b      	ldr	r3, [r7, #20]
 8011176:	6a19      	ldr	r1, [r3, #32]
 8011178:	697b      	ldr	r3, [r7, #20]
 801117a:	8b5a      	ldrh	r2, [r3, #26]
 801117c:	697b      	ldr	r3, [r7, #20]
 801117e:	7b1b      	ldrb	r3, [r3, #12]
 8011180:	6878      	ldr	r0, [r7, #4]
 8011182:	f000 fcb9 	bl	8011af8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8011186:	697b      	ldr	r3, [r7, #20]
 8011188:	2204      	movs	r2, #4
 801118a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 801118e:	e035      	b.n	80111fc <CDC_ProcessReception+0xb2>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8011190:	697b      	ldr	r3, [r7, #20]
 8011192:	7b1b      	ldrb	r3, [r3, #12]
 8011194:	4619      	mov	r1, r3
 8011196:	6878      	ldr	r0, [r7, #4]
 8011198:	f00b f96c 	bl	801c474 <USBH_LL_GetURBState>
 801119c:	4603      	mov	r3, r0
 801119e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80111a0:	7cfb      	ldrb	r3, [r7, #19]
 80111a2:	2b01      	cmp	r3, #1
 80111a4:	d129      	bne.n	80111fa <CDC_ProcessReception+0xb0>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80111a6:	697b      	ldr	r3, [r7, #20]
 80111a8:	7b1b      	ldrb	r3, [r3, #12]
 80111aa:	4619      	mov	r1, r3
 80111ac:	6878      	ldr	r0, [r7, #4]
 80111ae:	f00b f8c7 	bl	801c340 <USBH_LL_GetLastXferSize>
 80111b2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80111b4:	697b      	ldr	r3, [r7, #20]
 80111b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111b8:	68fa      	ldr	r2, [r7, #12]
 80111ba:	429a      	cmp	r2, r3
 80111bc:	d016      	beq.n	80111ec <CDC_ProcessReception+0xa2>
 80111be:	697b      	ldr	r3, [r7, #20]
 80111c0:	8b5b      	ldrh	r3, [r3, #26]
 80111c2:	461a      	mov	r2, r3
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	4293      	cmp	r3, r2
 80111c8:	d910      	bls.n	80111ec <CDC_ProcessReception+0xa2>
          CDC_Handle->RxDataLength -= length ;
 80111ca:	697b      	ldr	r3, [r7, #20]
 80111cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	1ad2      	subs	r2, r2, r3
 80111d2:	697b      	ldr	r3, [r7, #20]
 80111d4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80111d6:	697b      	ldr	r3, [r7, #20]
 80111d8:	6a1a      	ldr	r2, [r3, #32]
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	441a      	add	r2, r3
 80111de:	697b      	ldr	r3, [r7, #20]
 80111e0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80111e2:	697b      	ldr	r3, [r7, #20]
 80111e4:	2203      	movs	r2, #3
 80111e6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80111ea:	e006      	b.n	80111fa <CDC_ProcessReception+0xb0>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80111ec:	697b      	ldr	r3, [r7, #20]
 80111ee:	2200      	movs	r2, #0
 80111f0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80111f4:	6878      	ldr	r0, [r7, #4]
 80111f6:	f000 f80f 	bl	8011218 <USBH_CDC_ReceiveCallback>
      break;
 80111fa:	bf00      	nop
  }
}
 80111fc:	bf00      	nop
 80111fe:	3718      	adds	r7, #24
 8011200:	46bd      	mov	sp, r7
 8011202:	bd80      	pop	{r7, pc}

08011204 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8011204:	b480      	push	{r7}
 8011206:	b083      	sub	sp, #12
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 801120c:	bf00      	nop
 801120e:	370c      	adds	r7, #12
 8011210:	46bd      	mov	sp, r7
 8011212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011216:	4770      	bx	lr

08011218 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8011218:	b480      	push	{r7}
 801121a:	b083      	sub	sp, #12
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8011220:	bf00      	nop
 8011222:	370c      	adds	r7, #12
 8011224:	46bd      	mov	sp, r7
 8011226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801122a:	4770      	bx	lr

0801122c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 801122c:	b480      	push	{r7}
 801122e:	b083      	sub	sp, #12
 8011230:	af00      	add	r7, sp, #0
 8011232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8011234:	bf00      	nop
 8011236:	370c      	adds	r7, #12
 8011238:	46bd      	mov	sp, r7
 801123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801123e:	4770      	bx	lr

08011240 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b084      	sub	sp, #16
 8011244:	af00      	add	r7, sp, #0
 8011246:	60f8      	str	r0, [r7, #12]
 8011248:	60b9      	str	r1, [r7, #8]
 801124a:	4613      	mov	r3, r2
 801124c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d101      	bne.n	8011258 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8011254:	2302      	movs	r3, #2
 8011256:	e038      	b.n	80112ca <USBH_Init+0x8a>
  }

  /* Set DRiver ID */
  phost->id = id;
 8011258:	68fa      	ldr	r2, [r7, #12]
 801125a:	f643 230c 	movw	r3, #14860	; 0x3a0c
 801125e:	4413      	add	r3, r2
 8011260:	79fa      	ldrb	r2, [r7, #7]
 8011262:	701a      	strb	r2, [r3, #0]

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8011264:	68fa      	ldr	r2, [r7, #12]
 8011266:	f643 13bc 	movw	r3, #14780	; 0x39bc
 801126a:	4413      	add	r3, r2
 801126c:	2200      	movs	r2, #0
 801126e:	601a      	str	r2, [r3, #0]
  phost->ClassNumber = 0U;
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	f503 5367 	add.w	r3, r3, #14784	; 0x39c0
 8011276:	2200      	movs	r2, #0
 8011278:	601a      	str	r2, [r3, #0]

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 801127a:	68f8      	ldr	r0, [r7, #12]
 801127c:	f000 f829 	bl	80112d2 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8011280:	68fa      	ldr	r2, [r7, #12]
 8011282:	f643 1363 	movw	r3, #14691	; 0x3963
 8011286:	4413      	add	r3, r2
 8011288:	2200      	movs	r2, #0
 801128a:	701a      	strb	r2, [r3, #0]
  phost->device.is_connected = 0U;
 801128c:	68fa      	ldr	r2, [r7, #12]
 801128e:	f643 1360 	movw	r3, #14688	; 0x3960
 8011292:	4413      	add	r3, r2
 8011294:	2200      	movs	r2, #0
 8011296:	701a      	strb	r2, [r3, #0]
  phost->device.is_disconnected = 0U;
 8011298:	68fa      	ldr	r2, [r7, #12]
 801129a:	f643 1361 	movw	r3, #14689	; 0x3961
 801129e:	4413      	add	r3, r2
 80112a0:	2200      	movs	r2, #0
 80112a2:	701a      	strb	r2, [r3, #0]
  phost->device.is_ReEnumerated = 0U;
 80112a4:	68fa      	ldr	r2, [r7, #12]
 80112a6:	f643 1362 	movw	r3, #14690	; 0x3962
 80112aa:	4413      	add	r3, r2
 80112ac:	2200      	movs	r2, #0
 80112ae:	701a      	strb	r2, [r3, #0]

  /* Assign User process */
  if (pUsrFunc != NULL)
 80112b0:	68bb      	ldr	r3, [r7, #8]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d005      	beq.n	80112c2 <USBH_Init+0x82>
  {
    phost->pUser = pUsrFunc;
 80112b6:	68fa      	ldr	r2, [r7, #12]
 80112b8:	f643 2314 	movw	r3, #14868	; 0x3a14
 80112bc:	4413      	add	r3, r2
 80112be:	68ba      	ldr	r2, [r7, #8]
 80112c0:	601a      	str	r2, [r3, #0]

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80112c2:	68f8      	ldr	r0, [r7, #12]
 80112c4:	f00a ffc2 	bl	801c24c <USBH_LL_Init>

  return USBH_OK;
 80112c8:	2300      	movs	r3, #0
}
 80112ca:	4618      	mov	r0, r3
 80112cc:	3710      	adds	r7, #16
 80112ce:	46bd      	mov	sp, r7
 80112d0:	bd80      	pop	{r7, pc}

080112d2 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80112d2:	b480      	push	{r7}
 80112d4:	b085      	sub	sp, #20
 80112d6:	af00      	add	r7, sp, #0
 80112d8:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80112da:	2300      	movs	r3, #0
 80112dc:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80112de:	2300      	movs	r3, #0
 80112e0:	60fb      	str	r3, [r7, #12]
 80112e2:	e00a      	b.n	80112fa <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 80112e4:	687a      	ldr	r2, [r7, #4]
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 80112ec:	009b      	lsls	r3, r3, #2
 80112ee:	4413      	add	r3, r2
 80112f0:	2200      	movs	r2, #0
 80112f2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	3301      	adds	r3, #1
 80112f8:	60fb      	str	r3, [r7, #12]
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	2b0e      	cmp	r3, #14
 80112fe:	d9f1      	bls.n	80112e4 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8011300:	2300      	movs	r3, #0
 8011302:	60fb      	str	r3, [r7, #12]
 8011304:	e009      	b.n	801131a <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 8011306:	687a      	ldr	r2, [r7, #4]
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	4413      	add	r3, r2
 801130c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8011310:	2200      	movs	r2, #0
 8011312:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	3301      	adds	r3, #1
 8011318:	60fb      	str	r3, [r7, #12]
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
 8011320:	d3f1      	bcc.n	8011306 <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	2200      	movs	r2, #0
 8011326:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	2200      	movs	r2, #0
 801132c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	2201      	movs	r2, #1
 8011332:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8011334:	687a      	ldr	r2, [r7, #4]
 8011336:	f643 2304 	movw	r3, #14852	; 0x3a04
 801133a:	4413      	add	r3, r2
 801133c:	2200      	movs	r2, #0
 801133e:	601a      	str	r2, [r3, #0]

  phost->Control.state = CTRL_SETUP;
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	2201      	movs	r2, #1
 8011344:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	2240      	movs	r2, #64	; 0x40
 801134a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	2200      	movs	r2, #0
 8011350:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8011352:	687a      	ldr	r2, [r7, #4]
 8011354:	f643 135c 	movw	r3, #14684	; 0x395c
 8011358:	4413      	add	r3, r2
 801135a:	2200      	movs	r2, #0
 801135c:	701a      	strb	r2, [r3, #0]
  phost->device.speed = USBH_SPEED_FULL;
 801135e:	687a      	ldr	r2, [r7, #4]
 8011360:	f643 135d 	movw	r3, #14685	; 0x395d
 8011364:	4413      	add	r3, r2
 8011366:	2201      	movs	r2, #1
 8011368:	701a      	strb	r2, [r3, #0]
  phost->device.RstCnt = 0U;
 801136a:	687a      	ldr	r2, [r7, #4]
 801136c:	f643 135f 	movw	r3, #14687	; 0x395f
 8011370:	4413      	add	r3, r2
 8011372:	2200      	movs	r2, #0
 8011374:	701a      	strb	r2, [r3, #0]
  phost->device.EnumCnt = 0U;
 8011376:	687a      	ldr	r2, [r7, #4]
 8011378:	f643 135e 	movw	r3, #14686	; 0x395e
 801137c:	4413      	add	r3, r2
 801137e:	2200      	movs	r2, #0
 8011380:	701a      	strb	r2, [r3, #0]

  return USBH_OK;
 8011382:	2300      	movs	r3, #0
}
 8011384:	4618      	mov	r0, r3
 8011386:	3714      	adds	r7, #20
 8011388:	46bd      	mov	sp, r7
 801138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138e:	4770      	bx	lr

08011390 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8011390:	b480      	push	{r7}
 8011392:	b085      	sub	sp, #20
 8011394:	af00      	add	r7, sp, #0
 8011396:	6078      	str	r0, [r7, #4]
 8011398:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 801139a:	2300      	movs	r3, #0
 801139c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 801139e:	683b      	ldr	r3, [r7, #0]
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d01a      	beq.n	80113da <USBH_RegisterClass+0x4a>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	f503 5367 	add.w	r3, r3, #14784	; 0x39c0
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d111      	bne.n	80113d4 <USBH_RegisterClass+0x44>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	f503 5367 	add.w	r3, r3, #14784	; 0x39c0
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	1c59      	adds	r1, r3, #1
 80113ba:	687a      	ldr	r2, [r7, #4]
 80113bc:	f502 5267 	add.w	r2, r2, #14784	; 0x39c0
 80113c0:	6011      	str	r1, [r2, #0]
 80113c2:	687a      	ldr	r2, [r7, #4]
 80113c4:	f603 636e 	addw	r3, r3, #3694	; 0xe6e
 80113c8:	6839      	ldr	r1, [r7, #0]
 80113ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80113ce:	2300      	movs	r3, #0
 80113d0:	73fb      	strb	r3, [r7, #15]
 80113d2:	e004      	b.n	80113de <USBH_RegisterClass+0x4e>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80113d4:	2302      	movs	r3, #2
 80113d6:	73fb      	strb	r3, [r7, #15]
 80113d8:	e001      	b.n	80113de <USBH_RegisterClass+0x4e>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80113da:	2302      	movs	r3, #2
 80113dc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80113de:	7bfb      	ldrb	r3, [r7, #15]
}
 80113e0:	4618      	mov	r0, r3
 80113e2:	3714      	adds	r7, #20
 80113e4:	46bd      	mov	sp, r7
 80113e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ea:	4770      	bx	lr

080113ec <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80113ec:	b480      	push	{r7}
 80113ee:	b085      	sub	sp, #20
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	6078      	str	r0, [r7, #4]
 80113f4:	460b      	mov	r3, r1
 80113f6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80113f8:	2300      	movs	r3, #0
 80113fa:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80113fc:	687a      	ldr	r2, [r7, #4]
 80113fe:	f643 137c 	movw	r3, #14716	; 0x397c
 8011402:	4413      	add	r3, r2
 8011404:	781b      	ldrb	r3, [r3, #0]
 8011406:	78fa      	ldrb	r2, [r7, #3]
 8011408:	429a      	cmp	r2, r3
 801140a:	d206      	bcs.n	801141a <USBH_SelectInterface+0x2e>
  {
    phost->device.current_interface = interface;
 801140c:	687a      	ldr	r2, [r7, #4]
 801140e:	f643 1364 	movw	r3, #14692	; 0x3964
 8011412:	4413      	add	r3, r2
 8011414:	78fa      	ldrb	r2, [r7, #3]
 8011416:	701a      	strb	r2, [r3, #0]
 8011418:	e001      	b.n	801141e <USBH_SelectInterface+0x32>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 801141a:	2302      	movs	r3, #2
 801141c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801141e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011420:	4618      	mov	r0, r3
 8011422:	3714      	adds	r7, #20
 8011424:	46bd      	mov	sp, r7
 8011426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801142a:	4770      	bx	lr

0801142c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 801142c:	b480      	push	{r7}
 801142e:	b087      	sub	sp, #28
 8011430:	af00      	add	r7, sp, #0
 8011432:	6078      	str	r0, [r7, #4]
 8011434:	4608      	mov	r0, r1
 8011436:	4611      	mov	r1, r2
 8011438:	461a      	mov	r2, r3
 801143a:	4603      	mov	r3, r0
 801143c:	70fb      	strb	r3, [r7, #3]
 801143e:	460b      	mov	r3, r1
 8011440:	70bb      	strb	r3, [r7, #2]
 8011442:	4613      	mov	r3, r2
 8011444:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8011446:	2300      	movs	r3, #0
 8011448:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 801144a:	2300      	movs	r3, #0
 801144c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 801144e:	687a      	ldr	r2, [r7, #4]
 8011450:	f643 1378 	movw	r3, #14712	; 0x3978
 8011454:	4413      	add	r3, r2
 8011456:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8011458:	e025      	b.n	80114a6 <USBH_FindInterface+0x7a>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 801145a:	7dfb      	ldrb	r3, [r7, #23]
 801145c:	221a      	movs	r2, #26
 801145e:	fb02 f303 	mul.w	r3, r2, r3
 8011462:	3308      	adds	r3, #8
 8011464:	68fa      	ldr	r2, [r7, #12]
 8011466:	4413      	add	r3, r2
 8011468:	3302      	adds	r3, #2
 801146a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 801146c:	693b      	ldr	r3, [r7, #16]
 801146e:	795b      	ldrb	r3, [r3, #5]
 8011470:	78fa      	ldrb	r2, [r7, #3]
 8011472:	429a      	cmp	r2, r3
 8011474:	d002      	beq.n	801147c <USBH_FindInterface+0x50>
 8011476:	78fb      	ldrb	r3, [r7, #3]
 8011478:	2bff      	cmp	r3, #255	; 0xff
 801147a:	d111      	bne.n	80114a0 <USBH_FindInterface+0x74>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 801147c:	693b      	ldr	r3, [r7, #16]
 801147e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8011480:	78ba      	ldrb	r2, [r7, #2]
 8011482:	429a      	cmp	r2, r3
 8011484:	d002      	beq.n	801148c <USBH_FindInterface+0x60>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8011486:	78bb      	ldrb	r3, [r7, #2]
 8011488:	2bff      	cmp	r3, #255	; 0xff
 801148a:	d109      	bne.n	80114a0 <USBH_FindInterface+0x74>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 801148c:	693b      	ldr	r3, [r7, #16]
 801148e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8011490:	787a      	ldrb	r2, [r7, #1]
 8011492:	429a      	cmp	r2, r3
 8011494:	d002      	beq.n	801149c <USBH_FindInterface+0x70>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8011496:	787b      	ldrb	r3, [r7, #1]
 8011498:	2bff      	cmp	r3, #255	; 0xff
 801149a:	d101      	bne.n	80114a0 <USBH_FindInterface+0x74>
    {
      return  if_ix;
 801149c:	7dfb      	ldrb	r3, [r7, #23]
 801149e:	e006      	b.n	80114ae <USBH_FindInterface+0x82>
    }
    if_ix++;
 80114a0:	7dfb      	ldrb	r3, [r7, #23]
 80114a2:	3301      	adds	r3, #1
 80114a4:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80114a6:	7dfb      	ldrb	r3, [r7, #23]
 80114a8:	2b01      	cmp	r3, #1
 80114aa:	d9d6      	bls.n	801145a <USBH_FindInterface+0x2e>
  }
  return 0xFFU;
 80114ac:	23ff      	movs	r3, #255	; 0xff
}
 80114ae:	4618      	mov	r0, r3
 80114b0:	371c      	adds	r7, #28
 80114b2:	46bd      	mov	sp, r7
 80114b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b8:	4770      	bx	lr

080114ba <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80114ba:	b580      	push	{r7, lr}
 80114bc:	b082      	sub	sp, #8
 80114be:	af00      	add	r7, sp, #0
 80114c0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80114c2:	6878      	ldr	r0, [r7, #4]
 80114c4:	f00a ff02 	bl	801c2cc <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80114c8:	2101      	movs	r1, #1
 80114ca:	6878      	ldr	r0, [r7, #4]
 80114cc:	f00a ffe7 	bl	801c49e <USBH_LL_DriverVBUS>

  return USBH_OK;
 80114d0:	2300      	movs	r3, #0
}
 80114d2:	4618      	mov	r0, r3
 80114d4:	3708      	adds	r7, #8
 80114d6:	46bd      	mov	sp, r7
 80114d8:	bd80      	pop	{r7, pc}

080114da <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80114da:	b480      	push	{r7}
 80114dc:	b083      	sub	sp, #12
 80114de:	af00      	add	r7, sp, #0
 80114e0:	6078      	str	r0, [r7, #4]
 80114e2:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80114e4:	687a      	ldr	r2, [r7, #4]
 80114e6:	f643 2304 	movw	r3, #14852	; 0x3a04
 80114ea:	4413      	add	r3, r2
 80114ec:	683a      	ldr	r2, [r7, #0]
 80114ee:	601a      	str	r2, [r3, #0]
}
 80114f0:	bf00      	nop
 80114f2:	370c      	adds	r7, #12
 80114f4:	46bd      	mov	sp, r7
 80114f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114fa:	4770      	bx	lr

080114fc <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80114fc:	b580      	push	{r7, lr}
 80114fe:	b082      	sub	sp, #8
 8011500:	af00      	add	r7, sp, #0
 8011502:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8011504:	687a      	ldr	r2, [r7, #4]
 8011506:	f643 2304 	movw	r3, #14852	; 0x3a04
 801150a:	4413      	add	r3, r2
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	1c5a      	adds	r2, r3, #1
 8011510:	6879      	ldr	r1, [r7, #4]
 8011512:	f643 2304 	movw	r3, #14852	; 0x3a04
 8011516:	440b      	add	r3, r1
 8011518:	601a      	str	r2, [r3, #0]
  USBH_HandleSof(phost);
 801151a:	6878      	ldr	r0, [r7, #4]
 801151c:	f000 f804 	bl	8011528 <USBH_HandleSof>
}
 8011520:	bf00      	nop
 8011522:	3708      	adds	r7, #8
 8011524:	46bd      	mov	sp, r7
 8011526:	bd80      	pop	{r7, pc}

08011528 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8011528:	b580      	push	{r7, lr}
 801152a:	b082      	sub	sp, #8
 801152c:	af00      	add	r7, sp, #0
 801152e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	781b      	ldrb	r3, [r3, #0]
 8011534:	b2db      	uxtb	r3, r3
 8011536:	2b0b      	cmp	r3, #11
 8011538:	d10e      	bne.n	8011558 <USBH_HandleSof+0x30>
 801153a:	687a      	ldr	r2, [r7, #4]
 801153c:	f643 13bc 	movw	r3, #14780	; 0x39bc
 8011540:	4413      	add	r3, r2
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d007      	beq.n	8011558 <USBH_HandleSof+0x30>
  {
    phost->pActiveClass->SOFProcess(phost);
 8011548:	687a      	ldr	r2, [r7, #4]
 801154a:	f643 13bc 	movw	r3, #14780	; 0x39bc
 801154e:	4413      	add	r3, r2
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	699b      	ldr	r3, [r3, #24]
 8011554:	6878      	ldr	r0, [r7, #4]
 8011556:	4798      	blx	r3
  }
}
 8011558:	bf00      	nop
 801155a:	3708      	adds	r7, #8
 801155c:	46bd      	mov	sp, r7
 801155e:	bd80      	pop	{r7, pc}

08011560 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8011560:	b480      	push	{r7}
 8011562:	b083      	sub	sp, #12
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8011568:	687a      	ldr	r2, [r7, #4]
 801156a:	f643 1363 	movw	r3, #14691	; 0x3963
 801156e:	4413      	add	r3, r2
 8011570:	2201      	movs	r2, #1
 8011572:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8011574:	bf00      	nop
}
 8011576:	370c      	adds	r7, #12
 8011578:	46bd      	mov	sp, r7
 801157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801157e:	4770      	bx	lr

08011580 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8011580:	b480      	push	{r7}
 8011582:	b083      	sub	sp, #12
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8011588:	687a      	ldr	r2, [r7, #4]
 801158a:	f643 1363 	movw	r3, #14691	; 0x3963
 801158e:	4413      	add	r3, r2
 8011590:	2200      	movs	r2, #0
 8011592:	701a      	strb	r2, [r3, #0]

  return;
 8011594:	bf00      	nop
}
 8011596:	370c      	adds	r7, #12
 8011598:	46bd      	mov	sp, r7
 801159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159e:	4770      	bx	lr

080115a0 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80115a0:	b480      	push	{r7}
 80115a2:	b083      	sub	sp, #12
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80115a8:	687a      	ldr	r2, [r7, #4]
 80115aa:	f643 1360 	movw	r3, #14688	; 0x3960
 80115ae:	4413      	add	r3, r2
 80115b0:	2201      	movs	r2, #1
 80115b2:	701a      	strb	r2, [r3, #0]
  phost->device.is_disconnected = 0U;
 80115b4:	687a      	ldr	r2, [r7, #4]
 80115b6:	f643 1361 	movw	r3, #14689	; 0x3961
 80115ba:	4413      	add	r3, r2
 80115bc:	2200      	movs	r2, #0
 80115be:	701a      	strb	r2, [r3, #0]
  phost->device.is_ReEnumerated = 0U;
 80115c0:	687a      	ldr	r2, [r7, #4]
 80115c2:	f643 1362 	movw	r3, #14690	; 0x3962
 80115c6:	4413      	add	r3, r2
 80115c8:	2200      	movs	r2, #0
 80115ca:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80115cc:	2300      	movs	r3, #0
}
 80115ce:	4618      	mov	r0, r3
 80115d0:	370c      	adds	r7, #12
 80115d2:	46bd      	mov	sp, r7
 80115d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d8:	4770      	bx	lr

080115da <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80115da:	b580      	push	{r7, lr}
 80115dc:	b082      	sub	sp, #8
 80115de:	af00      	add	r7, sp, #0
 80115e0:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80115e2:	687a      	ldr	r2, [r7, #4]
 80115e4:	f643 1361 	movw	r3, #14689	; 0x3961
 80115e8:	4413      	add	r3, r2
 80115ea:	2201      	movs	r2, #1
 80115ec:	701a      	strb	r2, [r3, #0]
  phost->device.is_connected = 0U;
 80115ee:	687a      	ldr	r2, [r7, #4]
 80115f0:	f643 1360 	movw	r3, #14688	; 0x3960
 80115f4:	4413      	add	r3, r2
 80115f6:	2200      	movs	r2, #0
 80115f8:	701a      	strb	r2, [r3, #0]
  phost->device.PortEnabled = 0U;
 80115fa:	687a      	ldr	r2, [r7, #4]
 80115fc:	f643 1363 	movw	r3, #14691	; 0x3963
 8011600:	4413      	add	r3, r2
 8011602:	2200      	movs	r2, #0
 8011604:	701a      	strb	r2, [r3, #0]

  /* Stop Host */
  USBH_LL_Stop(phost);
 8011606:	6878      	ldr	r0, [r7, #4]
 8011608:	f00a fe7d 	bl	801c306 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	791b      	ldrb	r3, [r3, #4]
 8011610:	4619      	mov	r1, r3
 8011612:	6878      	ldr	r0, [r7, #4]
 8011614:	f000 fadf 	bl	8011bd6 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	795b      	ldrb	r3, [r3, #5]
 801161c:	4619      	mov	r1, r3
 801161e:	6878      	ldr	r0, [r7, #4]
 8011620:	f000 fad9 	bl	8011bd6 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8011624:	2300      	movs	r3, #0
}
 8011626:	4618      	mov	r0, r3
 8011628:	3708      	adds	r7, #8
 801162a:	46bd      	mov	sp, r7
 801162c:	bd80      	pop	{r7, pc}

0801162e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 801162e:	b580      	push	{r7, lr}
 8011630:	b082      	sub	sp, #8
 8011632:	af00      	add	r7, sp, #0
 8011634:	6078      	str	r0, [r7, #4]
 8011636:	460b      	mov	r3, r1
 8011638:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	789b      	ldrb	r3, [r3, #2]
 801163e:	2b01      	cmp	r3, #1
 8011640:	d10f      	bne.n	8011662 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	2202      	movs	r2, #2
 8011646:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	2201      	movs	r2, #1
 801164c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	2200      	movs	r2, #0
 8011652:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8011654:	78fb      	ldrb	r3, [r7, #3]
 8011656:	b29a      	uxth	r2, r3
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	2200      	movs	r2, #0
 8011660:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8011662:	2200      	movs	r2, #0
 8011664:	2100      	movs	r1, #0
 8011666:	6878      	ldr	r0, [r7, #4]
 8011668:	f000 f805 	bl	8011676 <USBH_CtlReq>
 801166c:	4603      	mov	r3, r0
}
 801166e:	4618      	mov	r0, r3
 8011670:	3708      	adds	r7, #8
 8011672:	46bd      	mov	sp, r7
 8011674:	bd80      	pop	{r7, pc}

08011676 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8011676:	b580      	push	{r7, lr}
 8011678:	b086      	sub	sp, #24
 801167a:	af00      	add	r7, sp, #0
 801167c:	60f8      	str	r0, [r7, #12]
 801167e:	60b9      	str	r1, [r7, #8]
 8011680:	4613      	mov	r3, r2
 8011682:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8011684:	2301      	movs	r3, #1
 8011686:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	789b      	ldrb	r3, [r3, #2]
 801168c:	2b01      	cmp	r3, #1
 801168e:	d002      	beq.n	8011696 <USBH_CtlReq+0x20>
 8011690:	2b02      	cmp	r3, #2
 8011692:	d00f      	beq.n	80116b4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8011694:	e027      	b.n	80116e6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	68ba      	ldr	r2, [r7, #8]
 801169a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	88fa      	ldrh	r2, [r7, #6]
 80116a0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	2201      	movs	r2, #1
 80116a6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	2202      	movs	r2, #2
 80116ac:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80116ae:	2301      	movs	r3, #1
 80116b0:	75fb      	strb	r3, [r7, #23]
      break;
 80116b2:	e018      	b.n	80116e6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80116b4:	68f8      	ldr	r0, [r7, #12]
 80116b6:	f000 f81b 	bl	80116f0 <USBH_HandleControl>
 80116ba:	4603      	mov	r3, r0
 80116bc:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80116be:	7dfb      	ldrb	r3, [r7, #23]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d002      	beq.n	80116ca <USBH_CtlReq+0x54>
 80116c4:	7dfb      	ldrb	r3, [r7, #23]
 80116c6:	2b03      	cmp	r3, #3
 80116c8:	d106      	bne.n	80116d8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	2201      	movs	r2, #1
 80116ce:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	2200      	movs	r2, #0
 80116d4:	761a      	strb	r2, [r3, #24]
      break;
 80116d6:	e005      	b.n	80116e4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80116d8:	7dfb      	ldrb	r3, [r7, #23]
 80116da:	2b02      	cmp	r3, #2
 80116dc:	d102      	bne.n	80116e4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	2201      	movs	r2, #1
 80116e2:	709a      	strb	r2, [r3, #2]
      break;
 80116e4:	bf00      	nop
  }
  return status;
 80116e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80116e8:	4618      	mov	r0, r3
 80116ea:	3718      	adds	r7, #24
 80116ec:	46bd      	mov	sp, r7
 80116ee:	bd80      	pop	{r7, pc}

080116f0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b086      	sub	sp, #24
 80116f4:	af02      	add	r7, sp, #8
 80116f6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80116f8:	2301      	movs	r3, #1
 80116fa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80116fc:	2300      	movs	r3, #0
 80116fe:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	7e1b      	ldrb	r3, [r3, #24]
 8011704:	3b01      	subs	r3, #1
 8011706:	2b0a      	cmp	r3, #10
 8011708:	f200 8160 	bhi.w	80119cc <USBH_HandleControl+0x2dc>
 801170c:	a201      	add	r2, pc, #4	; (adr r2, 8011714 <USBH_HandleControl+0x24>)
 801170e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011712:	bf00      	nop
 8011714:	08011741 	.word	0x08011741
 8011718:	0801175b 	.word	0x0801175b
 801171c:	080117c5 	.word	0x080117c5
 8011720:	080117ef 	.word	0x080117ef
 8011724:	08011827 	.word	0x08011827
 8011728:	08011855 	.word	0x08011855
 801172c:	080118a7 	.word	0x080118a7
 8011730:	080118cd 	.word	0x080118cd
 8011734:	08011909 	.word	0x08011909
 8011738:	08011933 	.word	0x08011933
 801173c:	08011971 	.word	0x08011971
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	f103 0110 	add.w	r1, r3, #16
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	795b      	ldrb	r3, [r3, #5]
 801174a:	461a      	mov	r2, r3
 801174c:	6878      	ldr	r0, [r7, #4]
 801174e:	f000 f94d 	bl	80119ec <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	2202      	movs	r2, #2
 8011756:	761a      	strb	r2, [r3, #24]
      break;
 8011758:	e143      	b.n	80119e2 <USBH_HandleControl+0x2f2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	795b      	ldrb	r3, [r3, #5]
 801175e:	4619      	mov	r1, r3
 8011760:	6878      	ldr	r0, [r7, #4]
 8011762:	f00a fe87 	bl	801c474 <USBH_LL_GetURBState>
 8011766:	4603      	mov	r3, r0
 8011768:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 801176a:	7bbb      	ldrb	r3, [r7, #14]
 801176c:	2b01      	cmp	r3, #1
 801176e:	d11e      	bne.n	80117ae <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	7c1b      	ldrb	r3, [r3, #16]
 8011774:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011778:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	8adb      	ldrh	r3, [r3, #22]
 801177e:	2b00      	cmp	r3, #0
 8011780:	d00a      	beq.n	8011798 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8011782:	7b7b      	ldrb	r3, [r7, #13]
 8011784:	2b80      	cmp	r3, #128	; 0x80
 8011786:	d103      	bne.n	8011790 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	2203      	movs	r2, #3
 801178c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 801178e:	e11f      	b.n	80119d0 <USBH_HandleControl+0x2e0>
            phost->Control.state = CTRL_DATA_OUT;
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	2205      	movs	r2, #5
 8011794:	761a      	strb	r2, [r3, #24]
      break;
 8011796:	e11b      	b.n	80119d0 <USBH_HandleControl+0x2e0>
          if (direction == USB_D2H)
 8011798:	7b7b      	ldrb	r3, [r7, #13]
 801179a:	2b80      	cmp	r3, #128	; 0x80
 801179c:	d103      	bne.n	80117a6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	2209      	movs	r2, #9
 80117a2:	761a      	strb	r2, [r3, #24]
      break;
 80117a4:	e114      	b.n	80119d0 <USBH_HandleControl+0x2e0>
            phost->Control.state = CTRL_STATUS_IN;
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	2207      	movs	r2, #7
 80117aa:	761a      	strb	r2, [r3, #24]
      break;
 80117ac:	e110      	b.n	80119d0 <USBH_HandleControl+0x2e0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80117ae:	7bbb      	ldrb	r3, [r7, #14]
 80117b0:	2b04      	cmp	r3, #4
 80117b2:	d003      	beq.n	80117bc <USBH_HandleControl+0xcc>
 80117b4:	7bbb      	ldrb	r3, [r7, #14]
 80117b6:	2b02      	cmp	r3, #2
 80117b8:	f040 810a 	bne.w	80119d0 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	220b      	movs	r2, #11
 80117c0:	761a      	strb	r2, [r3, #24]
      break;
 80117c2:	e105      	b.n	80119d0 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80117c4:	687a      	ldr	r2, [r7, #4]
 80117c6:	f643 2304 	movw	r3, #14852	; 0x3a04
 80117ca:	4413      	add	r3, r2
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	b29a      	uxth	r2, r3
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	6899      	ldr	r1, [r3, #8]
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	899a      	ldrh	r2, [r3, #12]
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	791b      	ldrb	r3, [r3, #4]
 80117e0:	6878      	ldr	r0, [r7, #4]
 80117e2:	f000 f944 	bl	8011a6e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	2204      	movs	r2, #4
 80117ea:	761a      	strb	r2, [r3, #24]
      break;
 80117ec:	e0f9      	b.n	80119e2 <USBH_HandleControl+0x2f2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	791b      	ldrb	r3, [r3, #4]
 80117f2:	4619      	mov	r1, r3
 80117f4:	6878      	ldr	r0, [r7, #4]
 80117f6:	f00a fe3d 	bl	801c474 <USBH_LL_GetURBState>
 80117fa:	4603      	mov	r3, r0
 80117fc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80117fe:	7bbb      	ldrb	r3, [r7, #14]
 8011800:	2b01      	cmp	r3, #1
 8011802:	d102      	bne.n	801180a <USBH_HandleControl+0x11a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	2209      	movs	r2, #9
 8011808:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 801180a:	7bbb      	ldrb	r3, [r7, #14]
 801180c:	2b05      	cmp	r3, #5
 801180e:	d102      	bne.n	8011816 <USBH_HandleControl+0x126>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8011810:	2303      	movs	r3, #3
 8011812:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8011814:	e0de      	b.n	80119d4 <USBH_HandleControl+0x2e4>
        if (URB_Status == USBH_URB_ERROR)
 8011816:	7bbb      	ldrb	r3, [r7, #14]
 8011818:	2b04      	cmp	r3, #4
 801181a:	f040 80db 	bne.w	80119d4 <USBH_HandleControl+0x2e4>
          phost->Control.state = CTRL_ERROR;
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	220b      	movs	r2, #11
 8011822:	761a      	strb	r2, [r3, #24]
      break;
 8011824:	e0d6      	b.n	80119d4 <USBH_HandleControl+0x2e4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	6899      	ldr	r1, [r3, #8]
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	899a      	ldrh	r2, [r3, #12]
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	795b      	ldrb	r3, [r3, #5]
 8011832:	2001      	movs	r0, #1
 8011834:	9000      	str	r0, [sp, #0]
 8011836:	6878      	ldr	r0, [r7, #4]
 8011838:	f000 f8f2 	bl	8011a20 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 801183c:	687a      	ldr	r2, [r7, #4]
 801183e:	f643 2304 	movw	r3, #14852	; 0x3a04
 8011842:	4413      	add	r3, r2
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	b29a      	uxth	r2, r3
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	2206      	movs	r2, #6
 8011850:	761a      	strb	r2, [r3, #24]
      break;
 8011852:	e0c6      	b.n	80119e2 <USBH_HandleControl+0x2f2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	795b      	ldrb	r3, [r3, #5]
 8011858:	4619      	mov	r1, r3
 801185a:	6878      	ldr	r0, [r7, #4]
 801185c:	f00a fe0a 	bl	801c474 <USBH_LL_GetURBState>
 8011860:	4603      	mov	r3, r0
 8011862:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8011864:	7bbb      	ldrb	r3, [r7, #14]
 8011866:	2b01      	cmp	r3, #1
 8011868:	d103      	bne.n	8011872 <USBH_HandleControl+0x182>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	2207      	movs	r2, #7
 801186e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8011870:	e0b2      	b.n	80119d8 <USBH_HandleControl+0x2e8>
      else if (URB_Status == USBH_URB_STALL)
 8011872:	7bbb      	ldrb	r3, [r7, #14]
 8011874:	2b05      	cmp	r3, #5
 8011876:	d105      	bne.n	8011884 <USBH_HandleControl+0x194>
        phost->Control.state = CTRL_STALLED;
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	220c      	movs	r2, #12
 801187c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 801187e:	2303      	movs	r3, #3
 8011880:	73fb      	strb	r3, [r7, #15]
      break;
 8011882:	e0a9      	b.n	80119d8 <USBH_HandleControl+0x2e8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8011884:	7bbb      	ldrb	r3, [r7, #14]
 8011886:	2b02      	cmp	r3, #2
 8011888:	d103      	bne.n	8011892 <USBH_HandleControl+0x1a2>
        phost->Control.state = CTRL_DATA_OUT;
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	2205      	movs	r2, #5
 801188e:	761a      	strb	r2, [r3, #24]
      break;
 8011890:	e0a2      	b.n	80119d8 <USBH_HandleControl+0x2e8>
        if (URB_Status == USBH_URB_ERROR)
 8011892:	7bbb      	ldrb	r3, [r7, #14]
 8011894:	2b04      	cmp	r3, #4
 8011896:	f040 809f 	bne.w	80119d8 <USBH_HandleControl+0x2e8>
          phost->Control.state = CTRL_ERROR;
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	220b      	movs	r2, #11
 801189e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80118a0:	2302      	movs	r3, #2
 80118a2:	73fb      	strb	r3, [r7, #15]
      break;
 80118a4:	e098      	b.n	80119d8 <USBH_HandleControl+0x2e8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	791b      	ldrb	r3, [r3, #4]
 80118aa:	2200      	movs	r2, #0
 80118ac:	2100      	movs	r1, #0
 80118ae:	6878      	ldr	r0, [r7, #4]
 80118b0:	f000 f8dd 	bl	8011a6e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80118b4:	687a      	ldr	r2, [r7, #4]
 80118b6:	f643 2304 	movw	r3, #14852	; 0x3a04
 80118ba:	4413      	add	r3, r2
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	b29a      	uxth	r2, r3
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	2208      	movs	r2, #8
 80118c8:	761a      	strb	r2, [r3, #24]

      break;
 80118ca:	e08a      	b.n	80119e2 <USBH_HandleControl+0x2f2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	791b      	ldrb	r3, [r3, #4]
 80118d0:	4619      	mov	r1, r3
 80118d2:	6878      	ldr	r0, [r7, #4]
 80118d4:	f00a fdce 	bl	801c474 <USBH_LL_GetURBState>
 80118d8:	4603      	mov	r3, r0
 80118da:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80118dc:	7bbb      	ldrb	r3, [r7, #14]
 80118de:	2b01      	cmp	r3, #1
 80118e0:	d105      	bne.n	80118ee <USBH_HandleControl+0x1fe>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	220d      	movs	r2, #13
 80118e6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80118e8:	2300      	movs	r3, #0
 80118ea:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80118ec:	e076      	b.n	80119dc <USBH_HandleControl+0x2ec>
      else if (URB_Status == USBH_URB_ERROR)
 80118ee:	7bbb      	ldrb	r3, [r7, #14]
 80118f0:	2b04      	cmp	r3, #4
 80118f2:	d103      	bne.n	80118fc <USBH_HandleControl+0x20c>
        phost->Control.state = CTRL_ERROR;
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	220b      	movs	r2, #11
 80118f8:	761a      	strb	r2, [r3, #24]
      break;
 80118fa:	e06f      	b.n	80119dc <USBH_HandleControl+0x2ec>
        if (URB_Status == USBH_URB_STALL)
 80118fc:	7bbb      	ldrb	r3, [r7, #14]
 80118fe:	2b05      	cmp	r3, #5
 8011900:	d16c      	bne.n	80119dc <USBH_HandleControl+0x2ec>
          status = USBH_NOT_SUPPORTED;
 8011902:	2303      	movs	r3, #3
 8011904:	73fb      	strb	r3, [r7, #15]
      break;
 8011906:	e069      	b.n	80119dc <USBH_HandleControl+0x2ec>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	795b      	ldrb	r3, [r3, #5]
 801190c:	2201      	movs	r2, #1
 801190e:	9200      	str	r2, [sp, #0]
 8011910:	2200      	movs	r2, #0
 8011912:	2100      	movs	r1, #0
 8011914:	6878      	ldr	r0, [r7, #4]
 8011916:	f000 f883 	bl	8011a20 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 801191a:	687a      	ldr	r2, [r7, #4]
 801191c:	f643 2304 	movw	r3, #14852	; 0x3a04
 8011920:	4413      	add	r3, r2
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	b29a      	uxth	r2, r3
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	220a      	movs	r2, #10
 801192e:	761a      	strb	r2, [r3, #24]
      break;
 8011930:	e057      	b.n	80119e2 <USBH_HandleControl+0x2f2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	795b      	ldrb	r3, [r3, #5]
 8011936:	4619      	mov	r1, r3
 8011938:	6878      	ldr	r0, [r7, #4]
 801193a:	f00a fd9b 	bl	801c474 <USBH_LL_GetURBState>
 801193e:	4603      	mov	r3, r0
 8011940:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8011942:	7bbb      	ldrb	r3, [r7, #14]
 8011944:	2b01      	cmp	r3, #1
 8011946:	d105      	bne.n	8011954 <USBH_HandleControl+0x264>
      {
        status = USBH_OK;
 8011948:	2300      	movs	r3, #0
 801194a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	220d      	movs	r2, #13
 8011950:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8011952:	e045      	b.n	80119e0 <USBH_HandleControl+0x2f0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8011954:	7bbb      	ldrb	r3, [r7, #14]
 8011956:	2b02      	cmp	r3, #2
 8011958:	d103      	bne.n	8011962 <USBH_HandleControl+0x272>
        phost->Control.state = CTRL_STATUS_OUT;
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	2209      	movs	r2, #9
 801195e:	761a      	strb	r2, [r3, #24]
      break;
 8011960:	e03e      	b.n	80119e0 <USBH_HandleControl+0x2f0>
        if (URB_Status == USBH_URB_ERROR)
 8011962:	7bbb      	ldrb	r3, [r7, #14]
 8011964:	2b04      	cmp	r3, #4
 8011966:	d13b      	bne.n	80119e0 <USBH_HandleControl+0x2f0>
          phost->Control.state = CTRL_ERROR;
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	220b      	movs	r2, #11
 801196c:	761a      	strb	r2, [r3, #24]
      break;
 801196e:	e037      	b.n	80119e0 <USBH_HandleControl+0x2f0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	7e5b      	ldrb	r3, [r3, #25]
 8011974:	3301      	adds	r3, #1
 8011976:	b2da      	uxtb	r2, r3
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	765a      	strb	r2, [r3, #25]
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	7e5b      	ldrb	r3, [r3, #25]
 8011980:	2b02      	cmp	r3, #2
 8011982:	d806      	bhi.n	8011992 <USBH_HandleControl+0x2a2>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	2201      	movs	r2, #1
 8011988:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	2201      	movs	r2, #1
 801198e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8011990:	e027      	b.n	80119e2 <USBH_HandleControl+0x2f2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8011992:	687a      	ldr	r2, [r7, #4]
 8011994:	f643 2314 	movw	r3, #14868	; 0x3a14
 8011998:	4413      	add	r3, r2
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	2106      	movs	r1, #6
 801199e:	6878      	ldr	r0, [r7, #4]
 80119a0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	2200      	movs	r2, #0
 80119a6:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	795b      	ldrb	r3, [r3, #5]
 80119ac:	4619      	mov	r1, r3
 80119ae:	6878      	ldr	r0, [r7, #4]
 80119b0:	f000 f911 	bl	8011bd6 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	791b      	ldrb	r3, [r3, #4]
 80119b8:	4619      	mov	r1, r3
 80119ba:	6878      	ldr	r0, [r7, #4]
 80119bc:	f000 f90b 	bl	8011bd6 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	2200      	movs	r2, #0
 80119c4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80119c6:	2302      	movs	r3, #2
 80119c8:	73fb      	strb	r3, [r7, #15]
      break;
 80119ca:	e00a      	b.n	80119e2 <USBH_HandleControl+0x2f2>

    default:
      break;
 80119cc:	bf00      	nop
 80119ce:	e008      	b.n	80119e2 <USBH_HandleControl+0x2f2>
      break;
 80119d0:	bf00      	nop
 80119d2:	e006      	b.n	80119e2 <USBH_HandleControl+0x2f2>
      break;
 80119d4:	bf00      	nop
 80119d6:	e004      	b.n	80119e2 <USBH_HandleControl+0x2f2>
      break;
 80119d8:	bf00      	nop
 80119da:	e002      	b.n	80119e2 <USBH_HandleControl+0x2f2>
      break;
 80119dc:	bf00      	nop
 80119de:	e000      	b.n	80119e2 <USBH_HandleControl+0x2f2>
      break;
 80119e0:	bf00      	nop
  }

  return status;
 80119e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80119e4:	4618      	mov	r0, r3
 80119e6:	3710      	adds	r7, #16
 80119e8:	46bd      	mov	sp, r7
 80119ea:	bd80      	pop	{r7, pc}

080119ec <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80119ec:	b580      	push	{r7, lr}
 80119ee:	b088      	sub	sp, #32
 80119f0:	af04      	add	r7, sp, #16
 80119f2:	60f8      	str	r0, [r7, #12]
 80119f4:	60b9      	str	r1, [r7, #8]
 80119f6:	4613      	mov	r3, r2
 80119f8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80119fa:	79f9      	ldrb	r1, [r7, #7]
 80119fc:	2300      	movs	r3, #0
 80119fe:	9303      	str	r3, [sp, #12]
 8011a00:	2308      	movs	r3, #8
 8011a02:	9302      	str	r3, [sp, #8]
 8011a04:	68bb      	ldr	r3, [r7, #8]
 8011a06:	9301      	str	r3, [sp, #4]
 8011a08:	2300      	movs	r3, #0
 8011a0a:	9300      	str	r3, [sp, #0]
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	2200      	movs	r2, #0
 8011a10:	68f8      	ldr	r0, [r7, #12]
 8011a12:	f00a fcfc 	bl	801c40e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8011a16:	2300      	movs	r3, #0
}
 8011a18:	4618      	mov	r0, r3
 8011a1a:	3710      	adds	r7, #16
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	bd80      	pop	{r7, pc}

08011a20 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b088      	sub	sp, #32
 8011a24:	af04      	add	r7, sp, #16
 8011a26:	60f8      	str	r0, [r7, #12]
 8011a28:	60b9      	str	r1, [r7, #8]
 8011a2a:	4611      	mov	r1, r2
 8011a2c:	461a      	mov	r2, r3
 8011a2e:	460b      	mov	r3, r1
 8011a30:	80fb      	strh	r3, [r7, #6]
 8011a32:	4613      	mov	r3, r2
 8011a34:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8011a36:	68fa      	ldr	r2, [r7, #12]
 8011a38:	f643 135d 	movw	r3, #14685	; 0x395d
 8011a3c:	4413      	add	r3, r2
 8011a3e:	781b      	ldrb	r3, [r3, #0]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d001      	beq.n	8011a48 <USBH_CtlSendData+0x28>
  {
    do_ping = 0U;
 8011a44:	2300      	movs	r3, #0
 8011a46:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8011a48:	7979      	ldrb	r1, [r7, #5]
 8011a4a:	7e3b      	ldrb	r3, [r7, #24]
 8011a4c:	9303      	str	r3, [sp, #12]
 8011a4e:	88fb      	ldrh	r3, [r7, #6]
 8011a50:	9302      	str	r3, [sp, #8]
 8011a52:	68bb      	ldr	r3, [r7, #8]
 8011a54:	9301      	str	r3, [sp, #4]
 8011a56:	2301      	movs	r3, #1
 8011a58:	9300      	str	r3, [sp, #0]
 8011a5a:	2300      	movs	r3, #0
 8011a5c:	2200      	movs	r2, #0
 8011a5e:	68f8      	ldr	r0, [r7, #12]
 8011a60:	f00a fcd5 	bl	801c40e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8011a64:	2300      	movs	r3, #0
}
 8011a66:	4618      	mov	r0, r3
 8011a68:	3710      	adds	r7, #16
 8011a6a:	46bd      	mov	sp, r7
 8011a6c:	bd80      	pop	{r7, pc}

08011a6e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8011a6e:	b580      	push	{r7, lr}
 8011a70:	b088      	sub	sp, #32
 8011a72:	af04      	add	r7, sp, #16
 8011a74:	60f8      	str	r0, [r7, #12]
 8011a76:	60b9      	str	r1, [r7, #8]
 8011a78:	4611      	mov	r1, r2
 8011a7a:	461a      	mov	r2, r3
 8011a7c:	460b      	mov	r3, r1
 8011a7e:	80fb      	strh	r3, [r7, #6]
 8011a80:	4613      	mov	r3, r2
 8011a82:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8011a84:	7979      	ldrb	r1, [r7, #5]
 8011a86:	2300      	movs	r3, #0
 8011a88:	9303      	str	r3, [sp, #12]
 8011a8a:	88fb      	ldrh	r3, [r7, #6]
 8011a8c:	9302      	str	r3, [sp, #8]
 8011a8e:	68bb      	ldr	r3, [r7, #8]
 8011a90:	9301      	str	r3, [sp, #4]
 8011a92:	2301      	movs	r3, #1
 8011a94:	9300      	str	r3, [sp, #0]
 8011a96:	2300      	movs	r3, #0
 8011a98:	2201      	movs	r2, #1
 8011a9a:	68f8      	ldr	r0, [r7, #12]
 8011a9c:	f00a fcb7 	bl	801c40e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8011aa0:	2300      	movs	r3, #0

}
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	3710      	adds	r7, #16
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	bd80      	pop	{r7, pc}

08011aaa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8011aaa:	b580      	push	{r7, lr}
 8011aac:	b088      	sub	sp, #32
 8011aae:	af04      	add	r7, sp, #16
 8011ab0:	60f8      	str	r0, [r7, #12]
 8011ab2:	60b9      	str	r1, [r7, #8]
 8011ab4:	4611      	mov	r1, r2
 8011ab6:	461a      	mov	r2, r3
 8011ab8:	460b      	mov	r3, r1
 8011aba:	80fb      	strh	r3, [r7, #6]
 8011abc:	4613      	mov	r3, r2
 8011abe:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8011ac0:	68fa      	ldr	r2, [r7, #12]
 8011ac2:	f643 135d 	movw	r3, #14685	; 0x395d
 8011ac6:	4413      	add	r3, r2
 8011ac8:	781b      	ldrb	r3, [r3, #0]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d001      	beq.n	8011ad2 <USBH_BulkSendData+0x28>
  {
    do_ping = 0U;
 8011ace:	2300      	movs	r3, #0
 8011ad0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8011ad2:	7979      	ldrb	r1, [r7, #5]
 8011ad4:	7e3b      	ldrb	r3, [r7, #24]
 8011ad6:	9303      	str	r3, [sp, #12]
 8011ad8:	88fb      	ldrh	r3, [r7, #6]
 8011ada:	9302      	str	r3, [sp, #8]
 8011adc:	68bb      	ldr	r3, [r7, #8]
 8011ade:	9301      	str	r3, [sp, #4]
 8011ae0:	2301      	movs	r3, #1
 8011ae2:	9300      	str	r3, [sp, #0]
 8011ae4:	2302      	movs	r3, #2
 8011ae6:	2200      	movs	r2, #0
 8011ae8:	68f8      	ldr	r0, [r7, #12]
 8011aea:	f00a fc90 	bl	801c40e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8011aee:	2300      	movs	r3, #0
}
 8011af0:	4618      	mov	r0, r3
 8011af2:	3710      	adds	r7, #16
 8011af4:	46bd      	mov	sp, r7
 8011af6:	bd80      	pop	{r7, pc}

08011af8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8011af8:	b580      	push	{r7, lr}
 8011afa:	b088      	sub	sp, #32
 8011afc:	af04      	add	r7, sp, #16
 8011afe:	60f8      	str	r0, [r7, #12]
 8011b00:	60b9      	str	r1, [r7, #8]
 8011b02:	4611      	mov	r1, r2
 8011b04:	461a      	mov	r2, r3
 8011b06:	460b      	mov	r3, r1
 8011b08:	80fb      	strh	r3, [r7, #6]
 8011b0a:	4613      	mov	r3, r2
 8011b0c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8011b0e:	7979      	ldrb	r1, [r7, #5]
 8011b10:	2300      	movs	r3, #0
 8011b12:	9303      	str	r3, [sp, #12]
 8011b14:	88fb      	ldrh	r3, [r7, #6]
 8011b16:	9302      	str	r3, [sp, #8]
 8011b18:	68bb      	ldr	r3, [r7, #8]
 8011b1a:	9301      	str	r3, [sp, #4]
 8011b1c:	2301      	movs	r3, #1
 8011b1e:	9300      	str	r3, [sp, #0]
 8011b20:	2302      	movs	r3, #2
 8011b22:	2201      	movs	r2, #1
 8011b24:	68f8      	ldr	r0, [r7, #12]
 8011b26:	f00a fc72 	bl	801c40e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8011b2a:	2300      	movs	r3, #0
}
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	3710      	adds	r7, #16
 8011b30:	46bd      	mov	sp, r7
 8011b32:	bd80      	pop	{r7, pc}

08011b34 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8011b34:	b580      	push	{r7, lr}
 8011b36:	b086      	sub	sp, #24
 8011b38:	af04      	add	r7, sp, #16
 8011b3a:	6078      	str	r0, [r7, #4]
 8011b3c:	4608      	mov	r0, r1
 8011b3e:	4611      	mov	r1, r2
 8011b40:	461a      	mov	r2, r3
 8011b42:	4603      	mov	r3, r0
 8011b44:	70fb      	strb	r3, [r7, #3]
 8011b46:	460b      	mov	r3, r1
 8011b48:	70bb      	strb	r3, [r7, #2]
 8011b4a:	4613      	mov	r3, r2
 8011b4c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8011b4e:	7878      	ldrb	r0, [r7, #1]
 8011b50:	78ba      	ldrb	r2, [r7, #2]
 8011b52:	78f9      	ldrb	r1, [r7, #3]
 8011b54:	8b3b      	ldrh	r3, [r7, #24]
 8011b56:	9302      	str	r3, [sp, #8]
 8011b58:	7d3b      	ldrb	r3, [r7, #20]
 8011b5a:	9301      	str	r3, [sp, #4]
 8011b5c:	7c3b      	ldrb	r3, [r7, #16]
 8011b5e:	9300      	str	r3, [sp, #0]
 8011b60:	4603      	mov	r3, r0
 8011b62:	6878      	ldr	r0, [r7, #4]
 8011b64:	f00a fc01 	bl	801c36a <USBH_LL_OpenPipe>

  return USBH_OK;
 8011b68:	2300      	movs	r3, #0
}
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	3708      	adds	r7, #8
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	bd80      	pop	{r7, pc}

08011b72 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8011b72:	b580      	push	{r7, lr}
 8011b74:	b082      	sub	sp, #8
 8011b76:	af00      	add	r7, sp, #0
 8011b78:	6078      	str	r0, [r7, #4]
 8011b7a:	460b      	mov	r3, r1
 8011b7c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8011b7e:	78fb      	ldrb	r3, [r7, #3]
 8011b80:	4619      	mov	r1, r3
 8011b82:	6878      	ldr	r0, [r7, #4]
 8011b84:	f00a fc22 	bl	801c3cc <USBH_LL_ClosePipe>

  return USBH_OK;
 8011b88:	2300      	movs	r3, #0
}
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	3708      	adds	r7, #8
 8011b8e:	46bd      	mov	sp, r7
 8011b90:	bd80      	pop	{r7, pc}

08011b92 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8011b92:	b580      	push	{r7, lr}
 8011b94:	b084      	sub	sp, #16
 8011b96:	af00      	add	r7, sp, #0
 8011b98:	6078      	str	r0, [r7, #4]
 8011b9a:	460b      	mov	r3, r1
 8011b9c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8011b9e:	6878      	ldr	r0, [r7, #4]
 8011ba0:	f000 f839 	bl	8011c16 <USBH_GetFreePipe>
 8011ba4:	4603      	mov	r3, r0
 8011ba6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8011ba8:	89fb      	ldrh	r3, [r7, #14]
 8011baa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011bae:	4293      	cmp	r3, r2
 8011bb0:	d00b      	beq.n	8011bca <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8011bb2:	78fa      	ldrb	r2, [r7, #3]
 8011bb4:	89fb      	ldrh	r3, [r7, #14]
 8011bb6:	f003 030f 	and.w	r3, r3, #15
 8011bba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011bbe:	6879      	ldr	r1, [r7, #4]
 8011bc0:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 8011bc4:	009b      	lsls	r3, r3, #2
 8011bc6:	440b      	add	r3, r1
 8011bc8:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8011bca:	89fb      	ldrh	r3, [r7, #14]
 8011bcc:	b2db      	uxtb	r3, r3
}
 8011bce:	4618      	mov	r0, r3
 8011bd0:	3710      	adds	r7, #16
 8011bd2:	46bd      	mov	sp, r7
 8011bd4:	bd80      	pop	{r7, pc}

08011bd6 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8011bd6:	b480      	push	{r7}
 8011bd8:	b083      	sub	sp, #12
 8011bda:	af00      	add	r7, sp, #0
 8011bdc:	6078      	str	r0, [r7, #4]
 8011bde:	460b      	mov	r3, r1
 8011be0:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8011be2:	78fb      	ldrb	r3, [r7, #3]
 8011be4:	2b0a      	cmp	r3, #10
 8011be6:	d80f      	bhi.n	8011c08 <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8011be8:	78fb      	ldrb	r3, [r7, #3]
 8011bea:	687a      	ldr	r2, [r7, #4]
 8011bec:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 8011bf0:	009b      	lsls	r3, r3, #2
 8011bf2:	4413      	add	r3, r2
 8011bf4:	685a      	ldr	r2, [r3, #4]
 8011bf6:	78fb      	ldrb	r3, [r7, #3]
 8011bf8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8011bfc:	6879      	ldr	r1, [r7, #4]
 8011bfe:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 8011c02:	009b      	lsls	r3, r3, #2
 8011c04:	440b      	add	r3, r1
 8011c06:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8011c08:	2300      	movs	r3, #0
}
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	370c      	adds	r7, #12
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c14:	4770      	bx	lr

08011c16 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8011c16:	b480      	push	{r7}
 8011c18:	b085      	sub	sp, #20
 8011c1a:	af00      	add	r7, sp, #0
 8011c1c:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8011c1e:	2300      	movs	r3, #0
 8011c20:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8011c22:	2300      	movs	r3, #0
 8011c24:	73fb      	strb	r3, [r7, #15]
 8011c26:	e010      	b.n	8011c4a <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8011c28:	7bfb      	ldrb	r3, [r7, #15]
 8011c2a:	687a      	ldr	r2, [r7, #4]
 8011c2c:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 8011c30:	009b      	lsls	r3, r3, #2
 8011c32:	4413      	add	r3, r2
 8011c34:	685b      	ldr	r3, [r3, #4]
 8011c36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d102      	bne.n	8011c44 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 8011c3e:	7bfb      	ldrb	r3, [r7, #15]
 8011c40:	b29b      	uxth	r3, r3
 8011c42:	e007      	b.n	8011c54 <USBH_GetFreePipe+0x3e>
  for (idx = 0U ; idx < 11U ; idx++)
 8011c44:	7bfb      	ldrb	r3, [r7, #15]
 8011c46:	3301      	adds	r3, #1
 8011c48:	73fb      	strb	r3, [r7, #15]
 8011c4a:	7bfb      	ldrb	r3, [r7, #15]
 8011c4c:	2b0a      	cmp	r3, #10
 8011c4e:	d9eb      	bls.n	8011c28 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8011c50:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8011c54:	4618      	mov	r0, r3
 8011c56:	3714      	adds	r7, #20
 8011c58:	46bd      	mov	sp, r7
 8011c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c5e:	4770      	bx	lr

08011c60 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8011c60:	b480      	push	{r7}
 8011c62:	b085      	sub	sp, #20
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	4603      	mov	r3, r0
 8011c68:	6039      	str	r1, [r7, #0]
 8011c6a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8011c6c:	88fb      	ldrh	r3, [r7, #6]
 8011c6e:	2b7f      	cmp	r3, #127	; 0x7f
 8011c70:	d802      	bhi.n	8011c78 <ff_convert+0x18>
		c = chr;
 8011c72:	88fb      	ldrh	r3, [r7, #6]
 8011c74:	81fb      	strh	r3, [r7, #14]
 8011c76:	e025      	b.n	8011cc4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8011c78:	683b      	ldr	r3, [r7, #0]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d00b      	beq.n	8011c96 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8011c7e:	88fb      	ldrh	r3, [r7, #6]
 8011c80:	2bff      	cmp	r3, #255	; 0xff
 8011c82:	d805      	bhi.n	8011c90 <ff_convert+0x30>
 8011c84:	88fb      	ldrh	r3, [r7, #6]
 8011c86:	3b80      	subs	r3, #128	; 0x80
 8011c88:	4a12      	ldr	r2, [pc, #72]	; (8011cd4 <ff_convert+0x74>)
 8011c8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011c8e:	e000      	b.n	8011c92 <ff_convert+0x32>
 8011c90:	2300      	movs	r3, #0
 8011c92:	81fb      	strh	r3, [r7, #14]
 8011c94:	e016      	b.n	8011cc4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8011c96:	2300      	movs	r3, #0
 8011c98:	81fb      	strh	r3, [r7, #14]
 8011c9a:	e009      	b.n	8011cb0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8011c9c:	89fb      	ldrh	r3, [r7, #14]
 8011c9e:	4a0d      	ldr	r2, [pc, #52]	; (8011cd4 <ff_convert+0x74>)
 8011ca0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011ca4:	88fa      	ldrh	r2, [r7, #6]
 8011ca6:	429a      	cmp	r2, r3
 8011ca8:	d006      	beq.n	8011cb8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8011caa:	89fb      	ldrh	r3, [r7, #14]
 8011cac:	3301      	adds	r3, #1
 8011cae:	81fb      	strh	r3, [r7, #14]
 8011cb0:	89fb      	ldrh	r3, [r7, #14]
 8011cb2:	2b7f      	cmp	r3, #127	; 0x7f
 8011cb4:	d9f2      	bls.n	8011c9c <ff_convert+0x3c>
 8011cb6:	e000      	b.n	8011cba <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8011cb8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8011cba:	89fb      	ldrh	r3, [r7, #14]
 8011cbc:	3380      	adds	r3, #128	; 0x80
 8011cbe:	b29b      	uxth	r3, r3
 8011cc0:	b2db      	uxtb	r3, r3
 8011cc2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8011cc4:	89fb      	ldrh	r3, [r7, #14]
}
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	3714      	adds	r7, #20
 8011cca:	46bd      	mov	sp, r7
 8011ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd0:	4770      	bx	lr
 8011cd2:	bf00      	nop
 8011cd4:	0802a064 	.word	0x0802a064

08011cd8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8011cd8:	b480      	push	{r7}
 8011cda:	b087      	sub	sp, #28
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	4603      	mov	r3, r0
 8011ce0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8011ce2:	88fb      	ldrh	r3, [r7, #6]
 8011ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011ce8:	d201      	bcs.n	8011cee <ff_wtoupper+0x16>
 8011cea:	4b3e      	ldr	r3, [pc, #248]	; (8011de4 <ff_wtoupper+0x10c>)
 8011cec:	e000      	b.n	8011cf0 <ff_wtoupper+0x18>
 8011cee:	4b3e      	ldr	r3, [pc, #248]	; (8011de8 <ff_wtoupper+0x110>)
 8011cf0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8011cf2:	697b      	ldr	r3, [r7, #20]
 8011cf4:	1c9a      	adds	r2, r3, #2
 8011cf6:	617a      	str	r2, [r7, #20]
 8011cf8:	881b      	ldrh	r3, [r3, #0]
 8011cfa:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8011cfc:	8a7b      	ldrh	r3, [r7, #18]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d068      	beq.n	8011dd4 <ff_wtoupper+0xfc>
 8011d02:	88fa      	ldrh	r2, [r7, #6]
 8011d04:	8a7b      	ldrh	r3, [r7, #18]
 8011d06:	429a      	cmp	r2, r3
 8011d08:	d364      	bcc.n	8011dd4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8011d0a:	697b      	ldr	r3, [r7, #20]
 8011d0c:	1c9a      	adds	r2, r3, #2
 8011d0e:	617a      	str	r2, [r7, #20]
 8011d10:	881b      	ldrh	r3, [r3, #0]
 8011d12:	823b      	strh	r3, [r7, #16]
 8011d14:	8a3b      	ldrh	r3, [r7, #16]
 8011d16:	0a1b      	lsrs	r3, r3, #8
 8011d18:	81fb      	strh	r3, [r7, #14]
 8011d1a:	8a3b      	ldrh	r3, [r7, #16]
 8011d1c:	b2db      	uxtb	r3, r3
 8011d1e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8011d20:	88fa      	ldrh	r2, [r7, #6]
 8011d22:	8a79      	ldrh	r1, [r7, #18]
 8011d24:	8a3b      	ldrh	r3, [r7, #16]
 8011d26:	440b      	add	r3, r1
 8011d28:	429a      	cmp	r2, r3
 8011d2a:	da49      	bge.n	8011dc0 <ff_wtoupper+0xe8>
			switch (cmd) {
 8011d2c:	89fb      	ldrh	r3, [r7, #14]
 8011d2e:	2b08      	cmp	r3, #8
 8011d30:	d84f      	bhi.n	8011dd2 <ff_wtoupper+0xfa>
 8011d32:	a201      	add	r2, pc, #4	; (adr r2, 8011d38 <ff_wtoupper+0x60>)
 8011d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d38:	08011d5d 	.word	0x08011d5d
 8011d3c:	08011d6f 	.word	0x08011d6f
 8011d40:	08011d85 	.word	0x08011d85
 8011d44:	08011d8d 	.word	0x08011d8d
 8011d48:	08011d95 	.word	0x08011d95
 8011d4c:	08011d9d 	.word	0x08011d9d
 8011d50:	08011da5 	.word	0x08011da5
 8011d54:	08011dad 	.word	0x08011dad
 8011d58:	08011db5 	.word	0x08011db5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8011d5c:	88fa      	ldrh	r2, [r7, #6]
 8011d5e:	8a7b      	ldrh	r3, [r7, #18]
 8011d60:	1ad3      	subs	r3, r2, r3
 8011d62:	005b      	lsls	r3, r3, #1
 8011d64:	697a      	ldr	r2, [r7, #20]
 8011d66:	4413      	add	r3, r2
 8011d68:	881b      	ldrh	r3, [r3, #0]
 8011d6a:	80fb      	strh	r3, [r7, #6]
 8011d6c:	e027      	b.n	8011dbe <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8011d6e:	88fa      	ldrh	r2, [r7, #6]
 8011d70:	8a7b      	ldrh	r3, [r7, #18]
 8011d72:	1ad3      	subs	r3, r2, r3
 8011d74:	b29b      	uxth	r3, r3
 8011d76:	f003 0301 	and.w	r3, r3, #1
 8011d7a:	b29b      	uxth	r3, r3
 8011d7c:	88fa      	ldrh	r2, [r7, #6]
 8011d7e:	1ad3      	subs	r3, r2, r3
 8011d80:	80fb      	strh	r3, [r7, #6]
 8011d82:	e01c      	b.n	8011dbe <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8011d84:	88fb      	ldrh	r3, [r7, #6]
 8011d86:	3b10      	subs	r3, #16
 8011d88:	80fb      	strh	r3, [r7, #6]
 8011d8a:	e018      	b.n	8011dbe <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8011d8c:	88fb      	ldrh	r3, [r7, #6]
 8011d8e:	3b20      	subs	r3, #32
 8011d90:	80fb      	strh	r3, [r7, #6]
 8011d92:	e014      	b.n	8011dbe <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8011d94:	88fb      	ldrh	r3, [r7, #6]
 8011d96:	3b30      	subs	r3, #48	; 0x30
 8011d98:	80fb      	strh	r3, [r7, #6]
 8011d9a:	e010      	b.n	8011dbe <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8011d9c:	88fb      	ldrh	r3, [r7, #6]
 8011d9e:	3b1a      	subs	r3, #26
 8011da0:	80fb      	strh	r3, [r7, #6]
 8011da2:	e00c      	b.n	8011dbe <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8011da4:	88fb      	ldrh	r3, [r7, #6]
 8011da6:	3308      	adds	r3, #8
 8011da8:	80fb      	strh	r3, [r7, #6]
 8011daa:	e008      	b.n	8011dbe <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8011dac:	88fb      	ldrh	r3, [r7, #6]
 8011dae:	3b50      	subs	r3, #80	; 0x50
 8011db0:	80fb      	strh	r3, [r7, #6]
 8011db2:	e004      	b.n	8011dbe <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8011db4:	88fb      	ldrh	r3, [r7, #6]
 8011db6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8011dba:	80fb      	strh	r3, [r7, #6]
 8011dbc:	bf00      	nop
			}
			break;
 8011dbe:	e008      	b.n	8011dd2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8011dc0:	89fb      	ldrh	r3, [r7, #14]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d195      	bne.n	8011cf2 <ff_wtoupper+0x1a>
 8011dc6:	8a3b      	ldrh	r3, [r7, #16]
 8011dc8:	005b      	lsls	r3, r3, #1
 8011dca:	697a      	ldr	r2, [r7, #20]
 8011dcc:	4413      	add	r3, r2
 8011dce:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8011dd0:	e78f      	b.n	8011cf2 <ff_wtoupper+0x1a>
			break;
 8011dd2:	bf00      	nop
	}

	return chr;
 8011dd4:	88fb      	ldrh	r3, [r7, #6]
}
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	371c      	adds	r7, #28
 8011dda:	46bd      	mov	sp, r7
 8011ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de0:	4770      	bx	lr
 8011de2:	bf00      	nop
 8011de4:	0802a164 	.word	0x0802a164
 8011de8:	0802a358 	.word	0x0802a358

08011dec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b084      	sub	sp, #16
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	4603      	mov	r3, r0
 8011df4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011df6:	79fb      	ldrb	r3, [r7, #7]
 8011df8:	4a08      	ldr	r2, [pc, #32]	; (8011e1c <disk_status+0x30>)
 8011dfa:	009b      	lsls	r3, r3, #2
 8011dfc:	4413      	add	r3, r2
 8011dfe:	685b      	ldr	r3, [r3, #4]
 8011e00:	685b      	ldr	r3, [r3, #4]
 8011e02:	79fa      	ldrb	r2, [r7, #7]
 8011e04:	4905      	ldr	r1, [pc, #20]	; (8011e1c <disk_status+0x30>)
 8011e06:	440a      	add	r2, r1
 8011e08:	7a12      	ldrb	r2, [r2, #8]
 8011e0a:	4610      	mov	r0, r2
 8011e0c:	4798      	blx	r3
 8011e0e:	4603      	mov	r3, r0
 8011e10:	73fb      	strb	r3, [r7, #15]
  return stat;
 8011e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e14:	4618      	mov	r0, r3
 8011e16:	3710      	adds	r7, #16
 8011e18:	46bd      	mov	sp, r7
 8011e1a:	bd80      	pop	{r7, pc}
 8011e1c:	2400a658 	.word	0x2400a658

08011e20 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011e20:	b580      	push	{r7, lr}
 8011e22:	b084      	sub	sp, #16
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	4603      	mov	r3, r0
 8011e28:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8011e2e:	79fb      	ldrb	r3, [r7, #7]
 8011e30:	4a0d      	ldr	r2, [pc, #52]	; (8011e68 <disk_initialize+0x48>)
 8011e32:	5cd3      	ldrb	r3, [r2, r3]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d111      	bne.n	8011e5c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8011e38:	79fb      	ldrb	r3, [r7, #7]
 8011e3a:	4a0b      	ldr	r2, [pc, #44]	; (8011e68 <disk_initialize+0x48>)
 8011e3c:	2101      	movs	r1, #1
 8011e3e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011e40:	79fb      	ldrb	r3, [r7, #7]
 8011e42:	4a09      	ldr	r2, [pc, #36]	; (8011e68 <disk_initialize+0x48>)
 8011e44:	009b      	lsls	r3, r3, #2
 8011e46:	4413      	add	r3, r2
 8011e48:	685b      	ldr	r3, [r3, #4]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	79fa      	ldrb	r2, [r7, #7]
 8011e4e:	4906      	ldr	r1, [pc, #24]	; (8011e68 <disk_initialize+0x48>)
 8011e50:	440a      	add	r2, r1
 8011e52:	7a12      	ldrb	r2, [r2, #8]
 8011e54:	4610      	mov	r0, r2
 8011e56:	4798      	blx	r3
 8011e58:	4603      	mov	r3, r0
 8011e5a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8011e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e5e:	4618      	mov	r0, r3
 8011e60:	3710      	adds	r7, #16
 8011e62:	46bd      	mov	sp, r7
 8011e64:	bd80      	pop	{r7, pc}
 8011e66:	bf00      	nop
 8011e68:	2400a658 	.word	0x2400a658

08011e6c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8011e6c:	b590      	push	{r4, r7, lr}
 8011e6e:	b087      	sub	sp, #28
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	60b9      	str	r1, [r7, #8]
 8011e74:	607a      	str	r2, [r7, #4]
 8011e76:	603b      	str	r3, [r7, #0]
 8011e78:	4603      	mov	r3, r0
 8011e7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8011e7c:	7bfb      	ldrb	r3, [r7, #15]
 8011e7e:	4a0a      	ldr	r2, [pc, #40]	; (8011ea8 <disk_read+0x3c>)
 8011e80:	009b      	lsls	r3, r3, #2
 8011e82:	4413      	add	r3, r2
 8011e84:	685b      	ldr	r3, [r3, #4]
 8011e86:	689c      	ldr	r4, [r3, #8]
 8011e88:	7bfb      	ldrb	r3, [r7, #15]
 8011e8a:	4a07      	ldr	r2, [pc, #28]	; (8011ea8 <disk_read+0x3c>)
 8011e8c:	4413      	add	r3, r2
 8011e8e:	7a18      	ldrb	r0, [r3, #8]
 8011e90:	683b      	ldr	r3, [r7, #0]
 8011e92:	687a      	ldr	r2, [r7, #4]
 8011e94:	68b9      	ldr	r1, [r7, #8]
 8011e96:	47a0      	blx	r4
 8011e98:	4603      	mov	r3, r0
 8011e9a:	75fb      	strb	r3, [r7, #23]
  return res;
 8011e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	371c      	adds	r7, #28
 8011ea2:	46bd      	mov	sp, r7
 8011ea4:	bd90      	pop	{r4, r7, pc}
 8011ea6:	bf00      	nop
 8011ea8:	2400a658 	.word	0x2400a658

08011eac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8011eac:	b590      	push	{r4, r7, lr}
 8011eae:	b087      	sub	sp, #28
 8011eb0:	af00      	add	r7, sp, #0
 8011eb2:	60b9      	str	r1, [r7, #8]
 8011eb4:	607a      	str	r2, [r7, #4]
 8011eb6:	603b      	str	r3, [r7, #0]
 8011eb8:	4603      	mov	r3, r0
 8011eba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011ebc:	7bfb      	ldrb	r3, [r7, #15]
 8011ebe:	4a0a      	ldr	r2, [pc, #40]	; (8011ee8 <disk_write+0x3c>)
 8011ec0:	009b      	lsls	r3, r3, #2
 8011ec2:	4413      	add	r3, r2
 8011ec4:	685b      	ldr	r3, [r3, #4]
 8011ec6:	68dc      	ldr	r4, [r3, #12]
 8011ec8:	7bfb      	ldrb	r3, [r7, #15]
 8011eca:	4a07      	ldr	r2, [pc, #28]	; (8011ee8 <disk_write+0x3c>)
 8011ecc:	4413      	add	r3, r2
 8011ece:	7a18      	ldrb	r0, [r3, #8]
 8011ed0:	683b      	ldr	r3, [r7, #0]
 8011ed2:	687a      	ldr	r2, [r7, #4]
 8011ed4:	68b9      	ldr	r1, [r7, #8]
 8011ed6:	47a0      	blx	r4
 8011ed8:	4603      	mov	r3, r0
 8011eda:	75fb      	strb	r3, [r7, #23]
  return res;
 8011edc:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ede:	4618      	mov	r0, r3
 8011ee0:	371c      	adds	r7, #28
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	bd90      	pop	{r4, r7, pc}
 8011ee6:	bf00      	nop
 8011ee8:	2400a658 	.word	0x2400a658

08011eec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011eec:	b580      	push	{r7, lr}
 8011eee:	b084      	sub	sp, #16
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	4603      	mov	r3, r0
 8011ef4:	603a      	str	r2, [r7, #0]
 8011ef6:	71fb      	strb	r3, [r7, #7]
 8011ef8:	460b      	mov	r3, r1
 8011efa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011efc:	79fb      	ldrb	r3, [r7, #7]
 8011efe:	4a09      	ldr	r2, [pc, #36]	; (8011f24 <disk_ioctl+0x38>)
 8011f00:	009b      	lsls	r3, r3, #2
 8011f02:	4413      	add	r3, r2
 8011f04:	685b      	ldr	r3, [r3, #4]
 8011f06:	691b      	ldr	r3, [r3, #16]
 8011f08:	79fa      	ldrb	r2, [r7, #7]
 8011f0a:	4906      	ldr	r1, [pc, #24]	; (8011f24 <disk_ioctl+0x38>)
 8011f0c:	440a      	add	r2, r1
 8011f0e:	7a10      	ldrb	r0, [r2, #8]
 8011f10:	79b9      	ldrb	r1, [r7, #6]
 8011f12:	683a      	ldr	r2, [r7, #0]
 8011f14:	4798      	blx	r3
 8011f16:	4603      	mov	r3, r0
 8011f18:	73fb      	strb	r3, [r7, #15]
  return res;
 8011f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	3710      	adds	r7, #16
 8011f20:	46bd      	mov	sp, r7
 8011f22:	bd80      	pop	{r7, pc}
 8011f24:	2400a658 	.word	0x2400a658

08011f28 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011f28:	b480      	push	{r7}
 8011f2a:	b085      	sub	sp, #20
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	3301      	adds	r3, #1
 8011f34:	781b      	ldrb	r3, [r3, #0]
 8011f36:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011f38:	89fb      	ldrh	r3, [r7, #14]
 8011f3a:	021b      	lsls	r3, r3, #8
 8011f3c:	b21a      	sxth	r2, r3
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	781b      	ldrb	r3, [r3, #0]
 8011f42:	b21b      	sxth	r3, r3
 8011f44:	4313      	orrs	r3, r2
 8011f46:	b21b      	sxth	r3, r3
 8011f48:	81fb      	strh	r3, [r7, #14]
	return rv;
 8011f4a:	89fb      	ldrh	r3, [r7, #14]
}
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	3714      	adds	r7, #20
 8011f50:	46bd      	mov	sp, r7
 8011f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f56:	4770      	bx	lr

08011f58 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011f58:	b480      	push	{r7}
 8011f5a:	b085      	sub	sp, #20
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	3303      	adds	r3, #3
 8011f64:	781b      	ldrb	r3, [r3, #0]
 8011f66:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	021b      	lsls	r3, r3, #8
 8011f6c:	687a      	ldr	r2, [r7, #4]
 8011f6e:	3202      	adds	r2, #2
 8011f70:	7812      	ldrb	r2, [r2, #0]
 8011f72:	4313      	orrs	r3, r2
 8011f74:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	021b      	lsls	r3, r3, #8
 8011f7a:	687a      	ldr	r2, [r7, #4]
 8011f7c:	3201      	adds	r2, #1
 8011f7e:	7812      	ldrb	r2, [r2, #0]
 8011f80:	4313      	orrs	r3, r2
 8011f82:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	021b      	lsls	r3, r3, #8
 8011f88:	687a      	ldr	r2, [r7, #4]
 8011f8a:	7812      	ldrb	r2, [r2, #0]
 8011f8c:	4313      	orrs	r3, r2
 8011f8e:	60fb      	str	r3, [r7, #12]
	return rv;
 8011f90:	68fb      	ldr	r3, [r7, #12]
}
 8011f92:	4618      	mov	r0, r3
 8011f94:	3714      	adds	r7, #20
 8011f96:	46bd      	mov	sp, r7
 8011f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f9c:	4770      	bx	lr

08011f9e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8011f9e:	b480      	push	{r7}
 8011fa0:	b083      	sub	sp, #12
 8011fa2:	af00      	add	r7, sp, #0
 8011fa4:	6078      	str	r0, [r7, #4]
 8011fa6:	460b      	mov	r3, r1
 8011fa8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	1c5a      	adds	r2, r3, #1
 8011fae:	607a      	str	r2, [r7, #4]
 8011fb0:	887a      	ldrh	r2, [r7, #2]
 8011fb2:	b2d2      	uxtb	r2, r2
 8011fb4:	701a      	strb	r2, [r3, #0]
 8011fb6:	887b      	ldrh	r3, [r7, #2]
 8011fb8:	0a1b      	lsrs	r3, r3, #8
 8011fba:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	1c5a      	adds	r2, r3, #1
 8011fc0:	607a      	str	r2, [r7, #4]
 8011fc2:	887a      	ldrh	r2, [r7, #2]
 8011fc4:	b2d2      	uxtb	r2, r2
 8011fc6:	701a      	strb	r2, [r3, #0]
}
 8011fc8:	bf00      	nop
 8011fca:	370c      	adds	r7, #12
 8011fcc:	46bd      	mov	sp, r7
 8011fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd2:	4770      	bx	lr

08011fd4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011fd4:	b480      	push	{r7}
 8011fd6:	b083      	sub	sp, #12
 8011fd8:	af00      	add	r7, sp, #0
 8011fda:	6078      	str	r0, [r7, #4]
 8011fdc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	1c5a      	adds	r2, r3, #1
 8011fe2:	607a      	str	r2, [r7, #4]
 8011fe4:	683a      	ldr	r2, [r7, #0]
 8011fe6:	b2d2      	uxtb	r2, r2
 8011fe8:	701a      	strb	r2, [r3, #0]
 8011fea:	683b      	ldr	r3, [r7, #0]
 8011fec:	0a1b      	lsrs	r3, r3, #8
 8011fee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	1c5a      	adds	r2, r3, #1
 8011ff4:	607a      	str	r2, [r7, #4]
 8011ff6:	683a      	ldr	r2, [r7, #0]
 8011ff8:	b2d2      	uxtb	r2, r2
 8011ffa:	701a      	strb	r2, [r3, #0]
 8011ffc:	683b      	ldr	r3, [r7, #0]
 8011ffe:	0a1b      	lsrs	r3, r3, #8
 8012000:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	1c5a      	adds	r2, r3, #1
 8012006:	607a      	str	r2, [r7, #4]
 8012008:	683a      	ldr	r2, [r7, #0]
 801200a:	b2d2      	uxtb	r2, r2
 801200c:	701a      	strb	r2, [r3, #0]
 801200e:	683b      	ldr	r3, [r7, #0]
 8012010:	0a1b      	lsrs	r3, r3, #8
 8012012:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	1c5a      	adds	r2, r3, #1
 8012018:	607a      	str	r2, [r7, #4]
 801201a:	683a      	ldr	r2, [r7, #0]
 801201c:	b2d2      	uxtb	r2, r2
 801201e:	701a      	strb	r2, [r3, #0]
}
 8012020:	bf00      	nop
 8012022:	370c      	adds	r7, #12
 8012024:	46bd      	mov	sp, r7
 8012026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801202a:	4770      	bx	lr

0801202c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801202c:	b480      	push	{r7}
 801202e:	b087      	sub	sp, #28
 8012030:	af00      	add	r7, sp, #0
 8012032:	60f8      	str	r0, [r7, #12]
 8012034:	60b9      	str	r1, [r7, #8]
 8012036:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801203c:	68bb      	ldr	r3, [r7, #8]
 801203e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	2b00      	cmp	r3, #0
 8012044:	d00d      	beq.n	8012062 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8012046:	693a      	ldr	r2, [r7, #16]
 8012048:	1c53      	adds	r3, r2, #1
 801204a:	613b      	str	r3, [r7, #16]
 801204c:	697b      	ldr	r3, [r7, #20]
 801204e:	1c59      	adds	r1, r3, #1
 8012050:	6179      	str	r1, [r7, #20]
 8012052:	7812      	ldrb	r2, [r2, #0]
 8012054:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	3b01      	subs	r3, #1
 801205a:	607b      	str	r3, [r7, #4]
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	2b00      	cmp	r3, #0
 8012060:	d1f1      	bne.n	8012046 <mem_cpy+0x1a>
	}
}
 8012062:	bf00      	nop
 8012064:	371c      	adds	r7, #28
 8012066:	46bd      	mov	sp, r7
 8012068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206c:	4770      	bx	lr

0801206e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801206e:	b480      	push	{r7}
 8012070:	b087      	sub	sp, #28
 8012072:	af00      	add	r7, sp, #0
 8012074:	60f8      	str	r0, [r7, #12]
 8012076:	60b9      	str	r1, [r7, #8]
 8012078:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801207e:	697b      	ldr	r3, [r7, #20]
 8012080:	1c5a      	adds	r2, r3, #1
 8012082:	617a      	str	r2, [r7, #20]
 8012084:	68ba      	ldr	r2, [r7, #8]
 8012086:	b2d2      	uxtb	r2, r2
 8012088:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	3b01      	subs	r3, #1
 801208e:	607b      	str	r3, [r7, #4]
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d1f3      	bne.n	801207e <mem_set+0x10>
}
 8012096:	bf00      	nop
 8012098:	bf00      	nop
 801209a:	371c      	adds	r7, #28
 801209c:	46bd      	mov	sp, r7
 801209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a2:	4770      	bx	lr

080120a4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80120a4:	b480      	push	{r7}
 80120a6:	b089      	sub	sp, #36	; 0x24
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	60f8      	str	r0, [r7, #12]
 80120ac:	60b9      	str	r1, [r7, #8]
 80120ae:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80120b0:	68fb      	ldr	r3, [r7, #12]
 80120b2:	61fb      	str	r3, [r7, #28]
 80120b4:	68bb      	ldr	r3, [r7, #8]
 80120b6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80120b8:	2300      	movs	r3, #0
 80120ba:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80120bc:	69fb      	ldr	r3, [r7, #28]
 80120be:	1c5a      	adds	r2, r3, #1
 80120c0:	61fa      	str	r2, [r7, #28]
 80120c2:	781b      	ldrb	r3, [r3, #0]
 80120c4:	4619      	mov	r1, r3
 80120c6:	69bb      	ldr	r3, [r7, #24]
 80120c8:	1c5a      	adds	r2, r3, #1
 80120ca:	61ba      	str	r2, [r7, #24]
 80120cc:	781b      	ldrb	r3, [r3, #0]
 80120ce:	1acb      	subs	r3, r1, r3
 80120d0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	3b01      	subs	r3, #1
 80120d6:	607b      	str	r3, [r7, #4]
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d002      	beq.n	80120e4 <mem_cmp+0x40>
 80120de:	697b      	ldr	r3, [r7, #20]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d0eb      	beq.n	80120bc <mem_cmp+0x18>

	return r;
 80120e4:	697b      	ldr	r3, [r7, #20]
}
 80120e6:	4618      	mov	r0, r3
 80120e8:	3724      	adds	r7, #36	; 0x24
 80120ea:	46bd      	mov	sp, r7
 80120ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f0:	4770      	bx	lr

080120f2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80120f2:	b480      	push	{r7}
 80120f4:	b083      	sub	sp, #12
 80120f6:	af00      	add	r7, sp, #0
 80120f8:	6078      	str	r0, [r7, #4]
 80120fa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80120fc:	e002      	b.n	8012104 <chk_chr+0x12>
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	3301      	adds	r3, #1
 8012102:	607b      	str	r3, [r7, #4]
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	781b      	ldrb	r3, [r3, #0]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d005      	beq.n	8012118 <chk_chr+0x26>
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	781b      	ldrb	r3, [r3, #0]
 8012110:	461a      	mov	r2, r3
 8012112:	683b      	ldr	r3, [r7, #0]
 8012114:	4293      	cmp	r3, r2
 8012116:	d1f2      	bne.n	80120fe <chk_chr+0xc>
	return *str;
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	781b      	ldrb	r3, [r3, #0]
}
 801211c:	4618      	mov	r0, r3
 801211e:	370c      	adds	r7, #12
 8012120:	46bd      	mov	sp, r7
 8012122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012126:	4770      	bx	lr

08012128 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012128:	b480      	push	{r7}
 801212a:	b085      	sub	sp, #20
 801212c:	af00      	add	r7, sp, #0
 801212e:	6078      	str	r0, [r7, #4]
 8012130:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012132:	2300      	movs	r3, #0
 8012134:	60bb      	str	r3, [r7, #8]
 8012136:	68bb      	ldr	r3, [r7, #8]
 8012138:	60fb      	str	r3, [r7, #12]
 801213a:	e029      	b.n	8012190 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801213c:	4a27      	ldr	r2, [pc, #156]	; (80121dc <chk_lock+0xb4>)
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	011b      	lsls	r3, r3, #4
 8012142:	4413      	add	r3, r2
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d01d      	beq.n	8012186 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801214a:	4a24      	ldr	r2, [pc, #144]	; (80121dc <chk_lock+0xb4>)
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	011b      	lsls	r3, r3, #4
 8012150:	4413      	add	r3, r2
 8012152:	681a      	ldr	r2, [r3, #0]
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	429a      	cmp	r2, r3
 801215a:	d116      	bne.n	801218a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801215c:	4a1f      	ldr	r2, [pc, #124]	; (80121dc <chk_lock+0xb4>)
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	011b      	lsls	r3, r3, #4
 8012162:	4413      	add	r3, r2
 8012164:	3304      	adds	r3, #4
 8012166:	681a      	ldr	r2, [r3, #0]
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801216c:	429a      	cmp	r2, r3
 801216e:	d10c      	bne.n	801218a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012170:	4a1a      	ldr	r2, [pc, #104]	; (80121dc <chk_lock+0xb4>)
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	011b      	lsls	r3, r3, #4
 8012176:	4413      	add	r3, r2
 8012178:	3308      	adds	r3, #8
 801217a:	681a      	ldr	r2, [r3, #0]
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8012180:	429a      	cmp	r2, r3
 8012182:	d102      	bne.n	801218a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012184:	e007      	b.n	8012196 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8012186:	2301      	movs	r3, #1
 8012188:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	3301      	adds	r3, #1
 801218e:	60fb      	str	r3, [r7, #12]
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	2b01      	cmp	r3, #1
 8012194:	d9d2      	bls.n	801213c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	2b02      	cmp	r3, #2
 801219a:	d109      	bne.n	80121b0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801219c:	68bb      	ldr	r3, [r7, #8]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d102      	bne.n	80121a8 <chk_lock+0x80>
 80121a2:	683b      	ldr	r3, [r7, #0]
 80121a4:	2b02      	cmp	r3, #2
 80121a6:	d101      	bne.n	80121ac <chk_lock+0x84>
 80121a8:	2300      	movs	r3, #0
 80121aa:	e010      	b.n	80121ce <chk_lock+0xa6>
 80121ac:	2312      	movs	r3, #18
 80121ae:	e00e      	b.n	80121ce <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80121b0:	683b      	ldr	r3, [r7, #0]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d108      	bne.n	80121c8 <chk_lock+0xa0>
 80121b6:	4a09      	ldr	r2, [pc, #36]	; (80121dc <chk_lock+0xb4>)
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	011b      	lsls	r3, r3, #4
 80121bc:	4413      	add	r3, r2
 80121be:	330c      	adds	r3, #12
 80121c0:	881b      	ldrh	r3, [r3, #0]
 80121c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80121c6:	d101      	bne.n	80121cc <chk_lock+0xa4>
 80121c8:	2310      	movs	r3, #16
 80121ca:	e000      	b.n	80121ce <chk_lock+0xa6>
 80121cc:	2300      	movs	r3, #0
}
 80121ce:	4618      	mov	r0, r3
 80121d0:	3714      	adds	r7, #20
 80121d2:	46bd      	mov	sp, r7
 80121d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d8:	4770      	bx	lr
 80121da:	bf00      	nop
 80121dc:	2400a438 	.word	0x2400a438

080121e0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80121e0:	b480      	push	{r7}
 80121e2:	b083      	sub	sp, #12
 80121e4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80121e6:	2300      	movs	r3, #0
 80121e8:	607b      	str	r3, [r7, #4]
 80121ea:	e002      	b.n	80121f2 <enq_lock+0x12>
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	3301      	adds	r3, #1
 80121f0:	607b      	str	r3, [r7, #4]
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	2b01      	cmp	r3, #1
 80121f6:	d806      	bhi.n	8012206 <enq_lock+0x26>
 80121f8:	4a09      	ldr	r2, [pc, #36]	; (8012220 <enq_lock+0x40>)
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	011b      	lsls	r3, r3, #4
 80121fe:	4413      	add	r3, r2
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d1f2      	bne.n	80121ec <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	2b02      	cmp	r3, #2
 801220a:	bf14      	ite	ne
 801220c:	2301      	movne	r3, #1
 801220e:	2300      	moveq	r3, #0
 8012210:	b2db      	uxtb	r3, r3
}
 8012212:	4618      	mov	r0, r3
 8012214:	370c      	adds	r7, #12
 8012216:	46bd      	mov	sp, r7
 8012218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221c:	4770      	bx	lr
 801221e:	bf00      	nop
 8012220:	2400a438 	.word	0x2400a438

08012224 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012224:	b480      	push	{r7}
 8012226:	b085      	sub	sp, #20
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]
 801222c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801222e:	2300      	movs	r3, #0
 8012230:	60fb      	str	r3, [r7, #12]
 8012232:	e01f      	b.n	8012274 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8012234:	4a41      	ldr	r2, [pc, #260]	; (801233c <inc_lock+0x118>)
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	011b      	lsls	r3, r3, #4
 801223a:	4413      	add	r3, r2
 801223c:	681a      	ldr	r2, [r3, #0]
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	429a      	cmp	r2, r3
 8012244:	d113      	bne.n	801226e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8012246:	4a3d      	ldr	r2, [pc, #244]	; (801233c <inc_lock+0x118>)
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	011b      	lsls	r3, r3, #4
 801224c:	4413      	add	r3, r2
 801224e:	3304      	adds	r3, #4
 8012250:	681a      	ldr	r2, [r3, #0]
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8012256:	429a      	cmp	r2, r3
 8012258:	d109      	bne.n	801226e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801225a:	4a38      	ldr	r2, [pc, #224]	; (801233c <inc_lock+0x118>)
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	011b      	lsls	r3, r3, #4
 8012260:	4413      	add	r3, r2
 8012262:	3308      	adds	r3, #8
 8012264:	681a      	ldr	r2, [r3, #0]
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801226a:	429a      	cmp	r2, r3
 801226c:	d006      	beq.n	801227c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	3301      	adds	r3, #1
 8012272:	60fb      	str	r3, [r7, #12]
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	2b01      	cmp	r3, #1
 8012278:	d9dc      	bls.n	8012234 <inc_lock+0x10>
 801227a:	e000      	b.n	801227e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801227c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	2b02      	cmp	r3, #2
 8012282:	d132      	bne.n	80122ea <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012284:	2300      	movs	r3, #0
 8012286:	60fb      	str	r3, [r7, #12]
 8012288:	e002      	b.n	8012290 <inc_lock+0x6c>
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	3301      	adds	r3, #1
 801228e:	60fb      	str	r3, [r7, #12]
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	2b01      	cmp	r3, #1
 8012294:	d806      	bhi.n	80122a4 <inc_lock+0x80>
 8012296:	4a29      	ldr	r2, [pc, #164]	; (801233c <inc_lock+0x118>)
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	011b      	lsls	r3, r3, #4
 801229c:	4413      	add	r3, r2
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d1f2      	bne.n	801228a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	2b02      	cmp	r3, #2
 80122a8:	d101      	bne.n	80122ae <inc_lock+0x8a>
 80122aa:	2300      	movs	r3, #0
 80122ac:	e040      	b.n	8012330 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	681a      	ldr	r2, [r3, #0]
 80122b2:	4922      	ldr	r1, [pc, #136]	; (801233c <inc_lock+0x118>)
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	011b      	lsls	r3, r3, #4
 80122b8:	440b      	add	r3, r1
 80122ba:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	689a      	ldr	r2, [r3, #8]
 80122c0:	491e      	ldr	r1, [pc, #120]	; (801233c <inc_lock+0x118>)
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	011b      	lsls	r3, r3, #4
 80122c6:	440b      	add	r3, r1
 80122c8:	3304      	adds	r3, #4
 80122ca:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	695a      	ldr	r2, [r3, #20]
 80122d0:	491a      	ldr	r1, [pc, #104]	; (801233c <inc_lock+0x118>)
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	011b      	lsls	r3, r3, #4
 80122d6:	440b      	add	r3, r1
 80122d8:	3308      	adds	r3, #8
 80122da:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80122dc:	4a17      	ldr	r2, [pc, #92]	; (801233c <inc_lock+0x118>)
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	011b      	lsls	r3, r3, #4
 80122e2:	4413      	add	r3, r2
 80122e4:	330c      	adds	r3, #12
 80122e6:	2200      	movs	r2, #0
 80122e8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80122ea:	683b      	ldr	r3, [r7, #0]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d009      	beq.n	8012304 <inc_lock+0xe0>
 80122f0:	4a12      	ldr	r2, [pc, #72]	; (801233c <inc_lock+0x118>)
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	011b      	lsls	r3, r3, #4
 80122f6:	4413      	add	r3, r2
 80122f8:	330c      	adds	r3, #12
 80122fa:	881b      	ldrh	r3, [r3, #0]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d001      	beq.n	8012304 <inc_lock+0xe0>
 8012300:	2300      	movs	r3, #0
 8012302:	e015      	b.n	8012330 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8012304:	683b      	ldr	r3, [r7, #0]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d108      	bne.n	801231c <inc_lock+0xf8>
 801230a:	4a0c      	ldr	r2, [pc, #48]	; (801233c <inc_lock+0x118>)
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	011b      	lsls	r3, r3, #4
 8012310:	4413      	add	r3, r2
 8012312:	330c      	adds	r3, #12
 8012314:	881b      	ldrh	r3, [r3, #0]
 8012316:	3301      	adds	r3, #1
 8012318:	b29a      	uxth	r2, r3
 801231a:	e001      	b.n	8012320 <inc_lock+0xfc>
 801231c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012320:	4906      	ldr	r1, [pc, #24]	; (801233c <inc_lock+0x118>)
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	011b      	lsls	r3, r3, #4
 8012326:	440b      	add	r3, r1
 8012328:	330c      	adds	r3, #12
 801232a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	3301      	adds	r3, #1
}
 8012330:	4618      	mov	r0, r3
 8012332:	3714      	adds	r7, #20
 8012334:	46bd      	mov	sp, r7
 8012336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801233a:	4770      	bx	lr
 801233c:	2400a438 	.word	0x2400a438

08012340 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8012340:	b480      	push	{r7}
 8012342:	b085      	sub	sp, #20
 8012344:	af00      	add	r7, sp, #0
 8012346:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	3b01      	subs	r3, #1
 801234c:	607b      	str	r3, [r7, #4]
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	2b01      	cmp	r3, #1
 8012352:	d825      	bhi.n	80123a0 <dec_lock+0x60>
		n = Files[i].ctr;
 8012354:	4a17      	ldr	r2, [pc, #92]	; (80123b4 <dec_lock+0x74>)
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	011b      	lsls	r3, r3, #4
 801235a:	4413      	add	r3, r2
 801235c:	330c      	adds	r3, #12
 801235e:	881b      	ldrh	r3, [r3, #0]
 8012360:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8012362:	89fb      	ldrh	r3, [r7, #14]
 8012364:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012368:	d101      	bne.n	801236e <dec_lock+0x2e>
 801236a:	2300      	movs	r3, #0
 801236c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801236e:	89fb      	ldrh	r3, [r7, #14]
 8012370:	2b00      	cmp	r3, #0
 8012372:	d002      	beq.n	801237a <dec_lock+0x3a>
 8012374:	89fb      	ldrh	r3, [r7, #14]
 8012376:	3b01      	subs	r3, #1
 8012378:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801237a:	4a0e      	ldr	r2, [pc, #56]	; (80123b4 <dec_lock+0x74>)
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	011b      	lsls	r3, r3, #4
 8012380:	4413      	add	r3, r2
 8012382:	330c      	adds	r3, #12
 8012384:	89fa      	ldrh	r2, [r7, #14]
 8012386:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8012388:	89fb      	ldrh	r3, [r7, #14]
 801238a:	2b00      	cmp	r3, #0
 801238c:	d105      	bne.n	801239a <dec_lock+0x5a>
 801238e:	4a09      	ldr	r2, [pc, #36]	; (80123b4 <dec_lock+0x74>)
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	011b      	lsls	r3, r3, #4
 8012394:	4413      	add	r3, r2
 8012396:	2200      	movs	r2, #0
 8012398:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801239a:	2300      	movs	r3, #0
 801239c:	737b      	strb	r3, [r7, #13]
 801239e:	e001      	b.n	80123a4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80123a0:	2302      	movs	r3, #2
 80123a2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80123a4:	7b7b      	ldrb	r3, [r7, #13]
}
 80123a6:	4618      	mov	r0, r3
 80123a8:	3714      	adds	r7, #20
 80123aa:	46bd      	mov	sp, r7
 80123ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b0:	4770      	bx	lr
 80123b2:	bf00      	nop
 80123b4:	2400a438 	.word	0x2400a438

080123b8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80123b8:	b480      	push	{r7}
 80123ba:	b085      	sub	sp, #20
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80123c0:	2300      	movs	r3, #0
 80123c2:	60fb      	str	r3, [r7, #12]
 80123c4:	e010      	b.n	80123e8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80123c6:	4a0d      	ldr	r2, [pc, #52]	; (80123fc <clear_lock+0x44>)
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	011b      	lsls	r3, r3, #4
 80123cc:	4413      	add	r3, r2
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	687a      	ldr	r2, [r7, #4]
 80123d2:	429a      	cmp	r2, r3
 80123d4:	d105      	bne.n	80123e2 <clear_lock+0x2a>
 80123d6:	4a09      	ldr	r2, [pc, #36]	; (80123fc <clear_lock+0x44>)
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	011b      	lsls	r3, r3, #4
 80123dc:	4413      	add	r3, r2
 80123de:	2200      	movs	r2, #0
 80123e0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	3301      	adds	r3, #1
 80123e6:	60fb      	str	r3, [r7, #12]
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	2b01      	cmp	r3, #1
 80123ec:	d9eb      	bls.n	80123c6 <clear_lock+0xe>
	}
}
 80123ee:	bf00      	nop
 80123f0:	bf00      	nop
 80123f2:	3714      	adds	r7, #20
 80123f4:	46bd      	mov	sp, r7
 80123f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123fa:	4770      	bx	lr
 80123fc:	2400a438 	.word	0x2400a438

08012400 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8012400:	b580      	push	{r7, lr}
 8012402:	b086      	sub	sp, #24
 8012404:	af00      	add	r7, sp, #0
 8012406:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8012408:	2300      	movs	r3, #0
 801240a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	78db      	ldrb	r3, [r3, #3]
 8012410:	2b00      	cmp	r3, #0
 8012412:	d034      	beq.n	801247e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012418:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	7858      	ldrb	r0, [r3, #1]
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8012424:	2301      	movs	r3, #1
 8012426:	697a      	ldr	r2, [r7, #20]
 8012428:	f7ff fd40 	bl	8011eac <disk_write>
 801242c:	4603      	mov	r3, r0
 801242e:	2b00      	cmp	r3, #0
 8012430:	d002      	beq.n	8012438 <sync_window+0x38>
			res = FR_DISK_ERR;
 8012432:	2301      	movs	r3, #1
 8012434:	73fb      	strb	r3, [r7, #15]
 8012436:	e022      	b.n	801247e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	2200      	movs	r2, #0
 801243c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012442:	697a      	ldr	r2, [r7, #20]
 8012444:	1ad2      	subs	r2, r2, r3
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	69db      	ldr	r3, [r3, #28]
 801244a:	429a      	cmp	r2, r3
 801244c:	d217      	bcs.n	801247e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	789b      	ldrb	r3, [r3, #2]
 8012452:	613b      	str	r3, [r7, #16]
 8012454:	e010      	b.n	8012478 <sync_window+0x78>
					wsect += fs->fsize;
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	69db      	ldr	r3, [r3, #28]
 801245a:	697a      	ldr	r2, [r7, #20]
 801245c:	4413      	add	r3, r2
 801245e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	7858      	ldrb	r0, [r3, #1]
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801246a:	2301      	movs	r3, #1
 801246c:	697a      	ldr	r2, [r7, #20]
 801246e:	f7ff fd1d 	bl	8011eac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012472:	693b      	ldr	r3, [r7, #16]
 8012474:	3b01      	subs	r3, #1
 8012476:	613b      	str	r3, [r7, #16]
 8012478:	693b      	ldr	r3, [r7, #16]
 801247a:	2b01      	cmp	r3, #1
 801247c:	d8eb      	bhi.n	8012456 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801247e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012480:	4618      	mov	r0, r3
 8012482:	3718      	adds	r7, #24
 8012484:	46bd      	mov	sp, r7
 8012486:	bd80      	pop	{r7, pc}

08012488 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8012488:	b580      	push	{r7, lr}
 801248a:	b084      	sub	sp, #16
 801248c:	af00      	add	r7, sp, #0
 801248e:	6078      	str	r0, [r7, #4]
 8012490:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8012492:	2300      	movs	r3, #0
 8012494:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801249a:	683a      	ldr	r2, [r7, #0]
 801249c:	429a      	cmp	r2, r3
 801249e:	d01b      	beq.n	80124d8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80124a0:	6878      	ldr	r0, [r7, #4]
 80124a2:	f7ff ffad 	bl	8012400 <sync_window>
 80124a6:	4603      	mov	r3, r0
 80124a8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80124aa:	7bfb      	ldrb	r3, [r7, #15]
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d113      	bne.n	80124d8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	7858      	ldrb	r0, [r3, #1]
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80124ba:	2301      	movs	r3, #1
 80124bc:	683a      	ldr	r2, [r7, #0]
 80124be:	f7ff fcd5 	bl	8011e6c <disk_read>
 80124c2:	4603      	mov	r3, r0
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d004      	beq.n	80124d2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80124c8:	f04f 33ff 	mov.w	r3, #4294967295
 80124cc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80124ce:	2301      	movs	r3, #1
 80124d0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	683a      	ldr	r2, [r7, #0]
 80124d6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80124d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80124da:	4618      	mov	r0, r3
 80124dc:	3710      	adds	r7, #16
 80124de:	46bd      	mov	sp, r7
 80124e0:	bd80      	pop	{r7, pc}
	...

080124e4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80124e4:	b580      	push	{r7, lr}
 80124e6:	b084      	sub	sp, #16
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80124ec:	6878      	ldr	r0, [r7, #4]
 80124ee:	f7ff ff87 	bl	8012400 <sync_window>
 80124f2:	4603      	mov	r3, r0
 80124f4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80124f6:	7bfb      	ldrb	r3, [r7, #15]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d158      	bne.n	80125ae <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	781b      	ldrb	r3, [r3, #0]
 8012500:	2b03      	cmp	r3, #3
 8012502:	d148      	bne.n	8012596 <sync_fs+0xb2>
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	791b      	ldrb	r3, [r3, #4]
 8012508:	2b01      	cmp	r3, #1
 801250a:	d144      	bne.n	8012596 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	3334      	adds	r3, #52	; 0x34
 8012510:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012514:	2100      	movs	r1, #0
 8012516:	4618      	mov	r0, r3
 8012518:	f7ff fda9 	bl	801206e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	3334      	adds	r3, #52	; 0x34
 8012520:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012524:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8012528:	4618      	mov	r0, r3
 801252a:	f7ff fd38 	bl	8011f9e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	3334      	adds	r3, #52	; 0x34
 8012532:	4921      	ldr	r1, [pc, #132]	; (80125b8 <sync_fs+0xd4>)
 8012534:	4618      	mov	r0, r3
 8012536:	f7ff fd4d 	bl	8011fd4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	3334      	adds	r3, #52	; 0x34
 801253e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012542:	491e      	ldr	r1, [pc, #120]	; (80125bc <sync_fs+0xd8>)
 8012544:	4618      	mov	r0, r3
 8012546:	f7ff fd45 	bl	8011fd4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	3334      	adds	r3, #52	; 0x34
 801254e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	695b      	ldr	r3, [r3, #20]
 8012556:	4619      	mov	r1, r3
 8012558:	4610      	mov	r0, r2
 801255a:	f7ff fd3b 	bl	8011fd4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	3334      	adds	r3, #52	; 0x34
 8012562:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	691b      	ldr	r3, [r3, #16]
 801256a:	4619      	mov	r1, r3
 801256c:	4610      	mov	r0, r2
 801256e:	f7ff fd31 	bl	8011fd4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	6a1b      	ldr	r3, [r3, #32]
 8012576:	1c5a      	adds	r2, r3, #1
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	7858      	ldrb	r0, [r3, #1]
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801258a:	2301      	movs	r3, #1
 801258c:	f7ff fc8e 	bl	8011eac <disk_write>
			fs->fsi_flag = 0;
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	2200      	movs	r2, #0
 8012594:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	785b      	ldrb	r3, [r3, #1]
 801259a:	2200      	movs	r2, #0
 801259c:	2100      	movs	r1, #0
 801259e:	4618      	mov	r0, r3
 80125a0:	f7ff fca4 	bl	8011eec <disk_ioctl>
 80125a4:	4603      	mov	r3, r0
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d001      	beq.n	80125ae <sync_fs+0xca>
 80125aa:	2301      	movs	r3, #1
 80125ac:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80125ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80125b0:	4618      	mov	r0, r3
 80125b2:	3710      	adds	r7, #16
 80125b4:	46bd      	mov	sp, r7
 80125b6:	bd80      	pop	{r7, pc}
 80125b8:	41615252 	.word	0x41615252
 80125bc:	61417272 	.word	0x61417272

080125c0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80125c0:	b480      	push	{r7}
 80125c2:	b083      	sub	sp, #12
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
 80125c8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80125ca:	683b      	ldr	r3, [r7, #0]
 80125cc:	3b02      	subs	r3, #2
 80125ce:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	699b      	ldr	r3, [r3, #24]
 80125d4:	3b02      	subs	r3, #2
 80125d6:	683a      	ldr	r2, [r7, #0]
 80125d8:	429a      	cmp	r2, r3
 80125da:	d301      	bcc.n	80125e0 <clust2sect+0x20>
 80125dc:	2300      	movs	r3, #0
 80125de:	e008      	b.n	80125f2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	895b      	ldrh	r3, [r3, #10]
 80125e4:	461a      	mov	r2, r3
 80125e6:	683b      	ldr	r3, [r7, #0]
 80125e8:	fb03 f202 	mul.w	r2, r3, r2
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125f0:	4413      	add	r3, r2
}
 80125f2:	4618      	mov	r0, r3
 80125f4:	370c      	adds	r7, #12
 80125f6:	46bd      	mov	sp, r7
 80125f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125fc:	4770      	bx	lr

080125fe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80125fe:	b580      	push	{r7, lr}
 8012600:	b086      	sub	sp, #24
 8012602:	af00      	add	r7, sp, #0
 8012604:	6078      	str	r0, [r7, #4]
 8012606:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801260e:	683b      	ldr	r3, [r7, #0]
 8012610:	2b01      	cmp	r3, #1
 8012612:	d904      	bls.n	801261e <get_fat+0x20>
 8012614:	693b      	ldr	r3, [r7, #16]
 8012616:	699b      	ldr	r3, [r3, #24]
 8012618:	683a      	ldr	r2, [r7, #0]
 801261a:	429a      	cmp	r2, r3
 801261c:	d302      	bcc.n	8012624 <get_fat+0x26>
		val = 1;	/* Internal error */
 801261e:	2301      	movs	r3, #1
 8012620:	617b      	str	r3, [r7, #20]
 8012622:	e08f      	b.n	8012744 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8012624:	f04f 33ff 	mov.w	r3, #4294967295
 8012628:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801262a:	693b      	ldr	r3, [r7, #16]
 801262c:	781b      	ldrb	r3, [r3, #0]
 801262e:	2b03      	cmp	r3, #3
 8012630:	d062      	beq.n	80126f8 <get_fat+0xfa>
 8012632:	2b03      	cmp	r3, #3
 8012634:	dc7c      	bgt.n	8012730 <get_fat+0x132>
 8012636:	2b01      	cmp	r3, #1
 8012638:	d002      	beq.n	8012640 <get_fat+0x42>
 801263a:	2b02      	cmp	r3, #2
 801263c:	d042      	beq.n	80126c4 <get_fat+0xc6>
 801263e:	e077      	b.n	8012730 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8012640:	683b      	ldr	r3, [r7, #0]
 8012642:	60fb      	str	r3, [r7, #12]
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	085b      	lsrs	r3, r3, #1
 8012648:	68fa      	ldr	r2, [r7, #12]
 801264a:	4413      	add	r3, r2
 801264c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801264e:	693b      	ldr	r3, [r7, #16]
 8012650:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	0a5b      	lsrs	r3, r3, #9
 8012656:	4413      	add	r3, r2
 8012658:	4619      	mov	r1, r3
 801265a:	6938      	ldr	r0, [r7, #16]
 801265c:	f7ff ff14 	bl	8012488 <move_window>
 8012660:	4603      	mov	r3, r0
 8012662:	2b00      	cmp	r3, #0
 8012664:	d167      	bne.n	8012736 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	1c5a      	adds	r2, r3, #1
 801266a:	60fa      	str	r2, [r7, #12]
 801266c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012670:	693a      	ldr	r2, [r7, #16]
 8012672:	4413      	add	r3, r2
 8012674:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012678:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801267a:	693b      	ldr	r3, [r7, #16]
 801267c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	0a5b      	lsrs	r3, r3, #9
 8012682:	4413      	add	r3, r2
 8012684:	4619      	mov	r1, r3
 8012686:	6938      	ldr	r0, [r7, #16]
 8012688:	f7ff fefe 	bl	8012488 <move_window>
 801268c:	4603      	mov	r3, r0
 801268e:	2b00      	cmp	r3, #0
 8012690:	d153      	bne.n	801273a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012698:	693a      	ldr	r2, [r7, #16]
 801269a:	4413      	add	r3, r2
 801269c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80126a0:	021b      	lsls	r3, r3, #8
 80126a2:	461a      	mov	r2, r3
 80126a4:	68bb      	ldr	r3, [r7, #8]
 80126a6:	4313      	orrs	r3, r2
 80126a8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80126aa:	683b      	ldr	r3, [r7, #0]
 80126ac:	f003 0301 	and.w	r3, r3, #1
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d002      	beq.n	80126ba <get_fat+0xbc>
 80126b4:	68bb      	ldr	r3, [r7, #8]
 80126b6:	091b      	lsrs	r3, r3, #4
 80126b8:	e002      	b.n	80126c0 <get_fat+0xc2>
 80126ba:	68bb      	ldr	r3, [r7, #8]
 80126bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80126c0:	617b      	str	r3, [r7, #20]
			break;
 80126c2:	e03f      	b.n	8012744 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80126c4:	693b      	ldr	r3, [r7, #16]
 80126c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80126c8:	683b      	ldr	r3, [r7, #0]
 80126ca:	0a1b      	lsrs	r3, r3, #8
 80126cc:	4413      	add	r3, r2
 80126ce:	4619      	mov	r1, r3
 80126d0:	6938      	ldr	r0, [r7, #16]
 80126d2:	f7ff fed9 	bl	8012488 <move_window>
 80126d6:	4603      	mov	r3, r0
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d130      	bne.n	801273e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80126dc:	693b      	ldr	r3, [r7, #16]
 80126de:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80126e2:	683b      	ldr	r3, [r7, #0]
 80126e4:	005b      	lsls	r3, r3, #1
 80126e6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80126ea:	4413      	add	r3, r2
 80126ec:	4618      	mov	r0, r3
 80126ee:	f7ff fc1b 	bl	8011f28 <ld_word>
 80126f2:	4603      	mov	r3, r0
 80126f4:	617b      	str	r3, [r7, #20]
			break;
 80126f6:	e025      	b.n	8012744 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80126f8:	693b      	ldr	r3, [r7, #16]
 80126fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80126fc:	683b      	ldr	r3, [r7, #0]
 80126fe:	09db      	lsrs	r3, r3, #7
 8012700:	4413      	add	r3, r2
 8012702:	4619      	mov	r1, r3
 8012704:	6938      	ldr	r0, [r7, #16]
 8012706:	f7ff febf 	bl	8012488 <move_window>
 801270a:	4603      	mov	r3, r0
 801270c:	2b00      	cmp	r3, #0
 801270e:	d118      	bne.n	8012742 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012710:	693b      	ldr	r3, [r7, #16]
 8012712:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012716:	683b      	ldr	r3, [r7, #0]
 8012718:	009b      	lsls	r3, r3, #2
 801271a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801271e:	4413      	add	r3, r2
 8012720:	4618      	mov	r0, r3
 8012722:	f7ff fc19 	bl	8011f58 <ld_dword>
 8012726:	4603      	mov	r3, r0
 8012728:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801272c:	617b      	str	r3, [r7, #20]
			break;
 801272e:	e009      	b.n	8012744 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8012730:	2301      	movs	r3, #1
 8012732:	617b      	str	r3, [r7, #20]
 8012734:	e006      	b.n	8012744 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012736:	bf00      	nop
 8012738:	e004      	b.n	8012744 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801273a:	bf00      	nop
 801273c:	e002      	b.n	8012744 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801273e:	bf00      	nop
 8012740:	e000      	b.n	8012744 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012742:	bf00      	nop
		}
	}

	return val;
 8012744:	697b      	ldr	r3, [r7, #20]
}
 8012746:	4618      	mov	r0, r3
 8012748:	3718      	adds	r7, #24
 801274a:	46bd      	mov	sp, r7
 801274c:	bd80      	pop	{r7, pc}

0801274e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801274e:	b590      	push	{r4, r7, lr}
 8012750:	b089      	sub	sp, #36	; 0x24
 8012752:	af00      	add	r7, sp, #0
 8012754:	60f8      	str	r0, [r7, #12]
 8012756:	60b9      	str	r1, [r7, #8]
 8012758:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801275a:	2302      	movs	r3, #2
 801275c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801275e:	68bb      	ldr	r3, [r7, #8]
 8012760:	2b01      	cmp	r3, #1
 8012762:	f240 80d2 	bls.w	801290a <put_fat+0x1bc>
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	699b      	ldr	r3, [r3, #24]
 801276a:	68ba      	ldr	r2, [r7, #8]
 801276c:	429a      	cmp	r2, r3
 801276e:	f080 80cc 	bcs.w	801290a <put_fat+0x1bc>
		switch (fs->fs_type) {
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	781b      	ldrb	r3, [r3, #0]
 8012776:	2b03      	cmp	r3, #3
 8012778:	f000 8096 	beq.w	80128a8 <put_fat+0x15a>
 801277c:	2b03      	cmp	r3, #3
 801277e:	f300 80cd 	bgt.w	801291c <put_fat+0x1ce>
 8012782:	2b01      	cmp	r3, #1
 8012784:	d002      	beq.n	801278c <put_fat+0x3e>
 8012786:	2b02      	cmp	r3, #2
 8012788:	d06e      	beq.n	8012868 <put_fat+0x11a>
 801278a:	e0c7      	b.n	801291c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801278c:	68bb      	ldr	r3, [r7, #8]
 801278e:	61bb      	str	r3, [r7, #24]
 8012790:	69bb      	ldr	r3, [r7, #24]
 8012792:	085b      	lsrs	r3, r3, #1
 8012794:	69ba      	ldr	r2, [r7, #24]
 8012796:	4413      	add	r3, r2
 8012798:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801279e:	69bb      	ldr	r3, [r7, #24]
 80127a0:	0a5b      	lsrs	r3, r3, #9
 80127a2:	4413      	add	r3, r2
 80127a4:	4619      	mov	r1, r3
 80127a6:	68f8      	ldr	r0, [r7, #12]
 80127a8:	f7ff fe6e 	bl	8012488 <move_window>
 80127ac:	4603      	mov	r3, r0
 80127ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80127b0:	7ffb      	ldrb	r3, [r7, #31]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	f040 80ab 	bne.w	801290e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80127be:	69bb      	ldr	r3, [r7, #24]
 80127c0:	1c59      	adds	r1, r3, #1
 80127c2:	61b9      	str	r1, [r7, #24]
 80127c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80127c8:	4413      	add	r3, r2
 80127ca:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80127cc:	68bb      	ldr	r3, [r7, #8]
 80127ce:	f003 0301 	and.w	r3, r3, #1
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d00d      	beq.n	80127f2 <put_fat+0xa4>
 80127d6:	697b      	ldr	r3, [r7, #20]
 80127d8:	781b      	ldrb	r3, [r3, #0]
 80127da:	b25b      	sxtb	r3, r3
 80127dc:	f003 030f 	and.w	r3, r3, #15
 80127e0:	b25a      	sxtb	r2, r3
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	b2db      	uxtb	r3, r3
 80127e6:	011b      	lsls	r3, r3, #4
 80127e8:	b25b      	sxtb	r3, r3
 80127ea:	4313      	orrs	r3, r2
 80127ec:	b25b      	sxtb	r3, r3
 80127ee:	b2db      	uxtb	r3, r3
 80127f0:	e001      	b.n	80127f6 <put_fat+0xa8>
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	b2db      	uxtb	r3, r3
 80127f6:	697a      	ldr	r2, [r7, #20]
 80127f8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	2201      	movs	r2, #1
 80127fe:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012804:	69bb      	ldr	r3, [r7, #24]
 8012806:	0a5b      	lsrs	r3, r3, #9
 8012808:	4413      	add	r3, r2
 801280a:	4619      	mov	r1, r3
 801280c:	68f8      	ldr	r0, [r7, #12]
 801280e:	f7ff fe3b 	bl	8012488 <move_window>
 8012812:	4603      	mov	r3, r0
 8012814:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012816:	7ffb      	ldrb	r3, [r7, #31]
 8012818:	2b00      	cmp	r3, #0
 801281a:	d17a      	bne.n	8012912 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012822:	69bb      	ldr	r3, [r7, #24]
 8012824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012828:	4413      	add	r3, r2
 801282a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801282c:	68bb      	ldr	r3, [r7, #8]
 801282e:	f003 0301 	and.w	r3, r3, #1
 8012832:	2b00      	cmp	r3, #0
 8012834:	d003      	beq.n	801283e <put_fat+0xf0>
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	091b      	lsrs	r3, r3, #4
 801283a:	b2db      	uxtb	r3, r3
 801283c:	e00e      	b.n	801285c <put_fat+0x10e>
 801283e:	697b      	ldr	r3, [r7, #20]
 8012840:	781b      	ldrb	r3, [r3, #0]
 8012842:	b25b      	sxtb	r3, r3
 8012844:	f023 030f 	bic.w	r3, r3, #15
 8012848:	b25a      	sxtb	r2, r3
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	0a1b      	lsrs	r3, r3, #8
 801284e:	b25b      	sxtb	r3, r3
 8012850:	f003 030f 	and.w	r3, r3, #15
 8012854:	b25b      	sxtb	r3, r3
 8012856:	4313      	orrs	r3, r2
 8012858:	b25b      	sxtb	r3, r3
 801285a:	b2db      	uxtb	r3, r3
 801285c:	697a      	ldr	r2, [r7, #20]
 801285e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	2201      	movs	r2, #1
 8012864:	70da      	strb	r2, [r3, #3]
			break;
 8012866:	e059      	b.n	801291c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801286c:	68bb      	ldr	r3, [r7, #8]
 801286e:	0a1b      	lsrs	r3, r3, #8
 8012870:	4413      	add	r3, r2
 8012872:	4619      	mov	r1, r3
 8012874:	68f8      	ldr	r0, [r7, #12]
 8012876:	f7ff fe07 	bl	8012488 <move_window>
 801287a:	4603      	mov	r3, r0
 801287c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801287e:	7ffb      	ldrb	r3, [r7, #31]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d148      	bne.n	8012916 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801288a:	68bb      	ldr	r3, [r7, #8]
 801288c:	005b      	lsls	r3, r3, #1
 801288e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012892:	4413      	add	r3, r2
 8012894:	687a      	ldr	r2, [r7, #4]
 8012896:	b292      	uxth	r2, r2
 8012898:	4611      	mov	r1, r2
 801289a:	4618      	mov	r0, r3
 801289c:	f7ff fb7f 	bl	8011f9e <st_word>
			fs->wflag = 1;
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	2201      	movs	r2, #1
 80128a4:	70da      	strb	r2, [r3, #3]
			break;
 80128a6:	e039      	b.n	801291c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80128ac:	68bb      	ldr	r3, [r7, #8]
 80128ae:	09db      	lsrs	r3, r3, #7
 80128b0:	4413      	add	r3, r2
 80128b2:	4619      	mov	r1, r3
 80128b4:	68f8      	ldr	r0, [r7, #12]
 80128b6:	f7ff fde7 	bl	8012488 <move_window>
 80128ba:	4603      	mov	r3, r0
 80128bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80128be:	7ffb      	ldrb	r3, [r7, #31]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d12a      	bne.n	801291a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80128d0:	68bb      	ldr	r3, [r7, #8]
 80128d2:	009b      	lsls	r3, r3, #2
 80128d4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80128d8:	4413      	add	r3, r2
 80128da:	4618      	mov	r0, r3
 80128dc:	f7ff fb3c 	bl	8011f58 <ld_dword>
 80128e0:	4603      	mov	r3, r0
 80128e2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80128e6:	4323      	orrs	r3, r4
 80128e8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80128f0:	68bb      	ldr	r3, [r7, #8]
 80128f2:	009b      	lsls	r3, r3, #2
 80128f4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80128f8:	4413      	add	r3, r2
 80128fa:	6879      	ldr	r1, [r7, #4]
 80128fc:	4618      	mov	r0, r3
 80128fe:	f7ff fb69 	bl	8011fd4 <st_dword>
			fs->wflag = 1;
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	2201      	movs	r2, #1
 8012906:	70da      	strb	r2, [r3, #3]
			break;
 8012908:	e008      	b.n	801291c <put_fat+0x1ce>
		}
	}
 801290a:	bf00      	nop
 801290c:	e006      	b.n	801291c <put_fat+0x1ce>
			if (res != FR_OK) break;
 801290e:	bf00      	nop
 8012910:	e004      	b.n	801291c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012912:	bf00      	nop
 8012914:	e002      	b.n	801291c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8012916:	bf00      	nop
 8012918:	e000      	b.n	801291c <put_fat+0x1ce>
			if (res != FR_OK) break;
 801291a:	bf00      	nop
	return res;
 801291c:	7ffb      	ldrb	r3, [r7, #31]
}
 801291e:	4618      	mov	r0, r3
 8012920:	3724      	adds	r7, #36	; 0x24
 8012922:	46bd      	mov	sp, r7
 8012924:	bd90      	pop	{r4, r7, pc}

08012926 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012926:	b580      	push	{r7, lr}
 8012928:	b088      	sub	sp, #32
 801292a:	af00      	add	r7, sp, #0
 801292c:	60f8      	str	r0, [r7, #12]
 801292e:	60b9      	str	r1, [r7, #8]
 8012930:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8012932:	2300      	movs	r3, #0
 8012934:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801293c:	68bb      	ldr	r3, [r7, #8]
 801293e:	2b01      	cmp	r3, #1
 8012940:	d904      	bls.n	801294c <remove_chain+0x26>
 8012942:	69bb      	ldr	r3, [r7, #24]
 8012944:	699b      	ldr	r3, [r3, #24]
 8012946:	68ba      	ldr	r2, [r7, #8]
 8012948:	429a      	cmp	r2, r3
 801294a:	d301      	bcc.n	8012950 <remove_chain+0x2a>
 801294c:	2302      	movs	r3, #2
 801294e:	e04b      	b.n	80129e8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	2b00      	cmp	r3, #0
 8012954:	d00c      	beq.n	8012970 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8012956:	f04f 32ff 	mov.w	r2, #4294967295
 801295a:	6879      	ldr	r1, [r7, #4]
 801295c:	69b8      	ldr	r0, [r7, #24]
 801295e:	f7ff fef6 	bl	801274e <put_fat>
 8012962:	4603      	mov	r3, r0
 8012964:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012966:	7ffb      	ldrb	r3, [r7, #31]
 8012968:	2b00      	cmp	r3, #0
 801296a:	d001      	beq.n	8012970 <remove_chain+0x4a>
 801296c:	7ffb      	ldrb	r3, [r7, #31]
 801296e:	e03b      	b.n	80129e8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8012970:	68b9      	ldr	r1, [r7, #8]
 8012972:	68f8      	ldr	r0, [r7, #12]
 8012974:	f7ff fe43 	bl	80125fe <get_fat>
 8012978:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801297a:	697b      	ldr	r3, [r7, #20]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d031      	beq.n	80129e4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8012980:	697b      	ldr	r3, [r7, #20]
 8012982:	2b01      	cmp	r3, #1
 8012984:	d101      	bne.n	801298a <remove_chain+0x64>
 8012986:	2302      	movs	r3, #2
 8012988:	e02e      	b.n	80129e8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801298a:	697b      	ldr	r3, [r7, #20]
 801298c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012990:	d101      	bne.n	8012996 <remove_chain+0x70>
 8012992:	2301      	movs	r3, #1
 8012994:	e028      	b.n	80129e8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8012996:	2200      	movs	r2, #0
 8012998:	68b9      	ldr	r1, [r7, #8]
 801299a:	69b8      	ldr	r0, [r7, #24]
 801299c:	f7ff fed7 	bl	801274e <put_fat>
 80129a0:	4603      	mov	r3, r0
 80129a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80129a4:	7ffb      	ldrb	r3, [r7, #31]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d001      	beq.n	80129ae <remove_chain+0x88>
 80129aa:	7ffb      	ldrb	r3, [r7, #31]
 80129ac:	e01c      	b.n	80129e8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80129ae:	69bb      	ldr	r3, [r7, #24]
 80129b0:	695a      	ldr	r2, [r3, #20]
 80129b2:	69bb      	ldr	r3, [r7, #24]
 80129b4:	699b      	ldr	r3, [r3, #24]
 80129b6:	3b02      	subs	r3, #2
 80129b8:	429a      	cmp	r2, r3
 80129ba:	d20b      	bcs.n	80129d4 <remove_chain+0xae>
			fs->free_clst++;
 80129bc:	69bb      	ldr	r3, [r7, #24]
 80129be:	695b      	ldr	r3, [r3, #20]
 80129c0:	1c5a      	adds	r2, r3, #1
 80129c2:	69bb      	ldr	r3, [r7, #24]
 80129c4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80129c6:	69bb      	ldr	r3, [r7, #24]
 80129c8:	791b      	ldrb	r3, [r3, #4]
 80129ca:	f043 0301 	orr.w	r3, r3, #1
 80129ce:	b2da      	uxtb	r2, r3
 80129d0:	69bb      	ldr	r3, [r7, #24]
 80129d2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80129d4:	697b      	ldr	r3, [r7, #20]
 80129d6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80129d8:	69bb      	ldr	r3, [r7, #24]
 80129da:	699b      	ldr	r3, [r3, #24]
 80129dc:	68ba      	ldr	r2, [r7, #8]
 80129de:	429a      	cmp	r2, r3
 80129e0:	d3c6      	bcc.n	8012970 <remove_chain+0x4a>
 80129e2:	e000      	b.n	80129e6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80129e4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80129e6:	2300      	movs	r3, #0
}
 80129e8:	4618      	mov	r0, r3
 80129ea:	3720      	adds	r7, #32
 80129ec:	46bd      	mov	sp, r7
 80129ee:	bd80      	pop	{r7, pc}

080129f0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80129f0:	b580      	push	{r7, lr}
 80129f2:	b088      	sub	sp, #32
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	6078      	str	r0, [r7, #4]
 80129f8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8012a00:	683b      	ldr	r3, [r7, #0]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d10d      	bne.n	8012a22 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012a06:	693b      	ldr	r3, [r7, #16]
 8012a08:	691b      	ldr	r3, [r3, #16]
 8012a0a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012a0c:	69bb      	ldr	r3, [r7, #24]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d004      	beq.n	8012a1c <create_chain+0x2c>
 8012a12:	693b      	ldr	r3, [r7, #16]
 8012a14:	699b      	ldr	r3, [r3, #24]
 8012a16:	69ba      	ldr	r2, [r7, #24]
 8012a18:	429a      	cmp	r2, r3
 8012a1a:	d31b      	bcc.n	8012a54 <create_chain+0x64>
 8012a1c:	2301      	movs	r3, #1
 8012a1e:	61bb      	str	r3, [r7, #24]
 8012a20:	e018      	b.n	8012a54 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012a22:	6839      	ldr	r1, [r7, #0]
 8012a24:	6878      	ldr	r0, [r7, #4]
 8012a26:	f7ff fdea 	bl	80125fe <get_fat>
 8012a2a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	2b01      	cmp	r3, #1
 8012a30:	d801      	bhi.n	8012a36 <create_chain+0x46>
 8012a32:	2301      	movs	r3, #1
 8012a34:	e070      	b.n	8012b18 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a3c:	d101      	bne.n	8012a42 <create_chain+0x52>
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	e06a      	b.n	8012b18 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012a42:	693b      	ldr	r3, [r7, #16]
 8012a44:	699b      	ldr	r3, [r3, #24]
 8012a46:	68fa      	ldr	r2, [r7, #12]
 8012a48:	429a      	cmp	r2, r3
 8012a4a:	d201      	bcs.n	8012a50 <create_chain+0x60>
 8012a4c:	68fb      	ldr	r3, [r7, #12]
 8012a4e:	e063      	b.n	8012b18 <create_chain+0x128>
		scl = clst;
 8012a50:	683b      	ldr	r3, [r7, #0]
 8012a52:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8012a54:	69bb      	ldr	r3, [r7, #24]
 8012a56:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8012a58:	69fb      	ldr	r3, [r7, #28]
 8012a5a:	3301      	adds	r3, #1
 8012a5c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012a5e:	693b      	ldr	r3, [r7, #16]
 8012a60:	699b      	ldr	r3, [r3, #24]
 8012a62:	69fa      	ldr	r2, [r7, #28]
 8012a64:	429a      	cmp	r2, r3
 8012a66:	d307      	bcc.n	8012a78 <create_chain+0x88>
				ncl = 2;
 8012a68:	2302      	movs	r3, #2
 8012a6a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012a6c:	69fa      	ldr	r2, [r7, #28]
 8012a6e:	69bb      	ldr	r3, [r7, #24]
 8012a70:	429a      	cmp	r2, r3
 8012a72:	d901      	bls.n	8012a78 <create_chain+0x88>
 8012a74:	2300      	movs	r3, #0
 8012a76:	e04f      	b.n	8012b18 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8012a78:	69f9      	ldr	r1, [r7, #28]
 8012a7a:	6878      	ldr	r0, [r7, #4]
 8012a7c:	f7ff fdbf 	bl	80125fe <get_fat>
 8012a80:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d00e      	beq.n	8012aa6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	2b01      	cmp	r3, #1
 8012a8c:	d003      	beq.n	8012a96 <create_chain+0xa6>
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a94:	d101      	bne.n	8012a9a <create_chain+0xaa>
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	e03e      	b.n	8012b18 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8012a9a:	69fa      	ldr	r2, [r7, #28]
 8012a9c:	69bb      	ldr	r3, [r7, #24]
 8012a9e:	429a      	cmp	r2, r3
 8012aa0:	d1da      	bne.n	8012a58 <create_chain+0x68>
 8012aa2:	2300      	movs	r3, #0
 8012aa4:	e038      	b.n	8012b18 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012aa6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8012aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8012aac:	69f9      	ldr	r1, [r7, #28]
 8012aae:	6938      	ldr	r0, [r7, #16]
 8012ab0:	f7ff fe4d 	bl	801274e <put_fat>
 8012ab4:	4603      	mov	r3, r0
 8012ab6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8012ab8:	7dfb      	ldrb	r3, [r7, #23]
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d109      	bne.n	8012ad2 <create_chain+0xe2>
 8012abe:	683b      	ldr	r3, [r7, #0]
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d006      	beq.n	8012ad2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8012ac4:	69fa      	ldr	r2, [r7, #28]
 8012ac6:	6839      	ldr	r1, [r7, #0]
 8012ac8:	6938      	ldr	r0, [r7, #16]
 8012aca:	f7ff fe40 	bl	801274e <put_fat>
 8012ace:	4603      	mov	r3, r0
 8012ad0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8012ad2:	7dfb      	ldrb	r3, [r7, #23]
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d116      	bne.n	8012b06 <create_chain+0x116>
		fs->last_clst = ncl;
 8012ad8:	693b      	ldr	r3, [r7, #16]
 8012ada:	69fa      	ldr	r2, [r7, #28]
 8012adc:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012ade:	693b      	ldr	r3, [r7, #16]
 8012ae0:	695a      	ldr	r2, [r3, #20]
 8012ae2:	693b      	ldr	r3, [r7, #16]
 8012ae4:	699b      	ldr	r3, [r3, #24]
 8012ae6:	3b02      	subs	r3, #2
 8012ae8:	429a      	cmp	r2, r3
 8012aea:	d804      	bhi.n	8012af6 <create_chain+0x106>
 8012aec:	693b      	ldr	r3, [r7, #16]
 8012aee:	695b      	ldr	r3, [r3, #20]
 8012af0:	1e5a      	subs	r2, r3, #1
 8012af2:	693b      	ldr	r3, [r7, #16]
 8012af4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8012af6:	693b      	ldr	r3, [r7, #16]
 8012af8:	791b      	ldrb	r3, [r3, #4]
 8012afa:	f043 0301 	orr.w	r3, r3, #1
 8012afe:	b2da      	uxtb	r2, r3
 8012b00:	693b      	ldr	r3, [r7, #16]
 8012b02:	711a      	strb	r2, [r3, #4]
 8012b04:	e007      	b.n	8012b16 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012b06:	7dfb      	ldrb	r3, [r7, #23]
 8012b08:	2b01      	cmp	r3, #1
 8012b0a:	d102      	bne.n	8012b12 <create_chain+0x122>
 8012b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8012b10:	e000      	b.n	8012b14 <create_chain+0x124>
 8012b12:	2301      	movs	r3, #1
 8012b14:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012b16:	69fb      	ldr	r3, [r7, #28]
}
 8012b18:	4618      	mov	r0, r3
 8012b1a:	3720      	adds	r7, #32
 8012b1c:	46bd      	mov	sp, r7
 8012b1e:	bd80      	pop	{r7, pc}

08012b20 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012b20:	b480      	push	{r7}
 8012b22:	b087      	sub	sp, #28
 8012b24:	af00      	add	r7, sp, #0
 8012b26:	6078      	str	r0, [r7, #4]
 8012b28:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b34:	3304      	adds	r3, #4
 8012b36:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012b38:	683b      	ldr	r3, [r7, #0]
 8012b3a:	0a5b      	lsrs	r3, r3, #9
 8012b3c:	68fa      	ldr	r2, [r7, #12]
 8012b3e:	8952      	ldrh	r2, [r2, #10]
 8012b40:	fbb3 f3f2 	udiv	r3, r3, r2
 8012b44:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012b46:	693b      	ldr	r3, [r7, #16]
 8012b48:	1d1a      	adds	r2, r3, #4
 8012b4a:	613a      	str	r2, [r7, #16]
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012b50:	68bb      	ldr	r3, [r7, #8]
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d101      	bne.n	8012b5a <clmt_clust+0x3a>
 8012b56:	2300      	movs	r3, #0
 8012b58:	e010      	b.n	8012b7c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8012b5a:	697a      	ldr	r2, [r7, #20]
 8012b5c:	68bb      	ldr	r3, [r7, #8]
 8012b5e:	429a      	cmp	r2, r3
 8012b60:	d307      	bcc.n	8012b72 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8012b62:	697a      	ldr	r2, [r7, #20]
 8012b64:	68bb      	ldr	r3, [r7, #8]
 8012b66:	1ad3      	subs	r3, r2, r3
 8012b68:	617b      	str	r3, [r7, #20]
 8012b6a:	693b      	ldr	r3, [r7, #16]
 8012b6c:	3304      	adds	r3, #4
 8012b6e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012b70:	e7e9      	b.n	8012b46 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8012b72:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012b74:	693b      	ldr	r3, [r7, #16]
 8012b76:	681a      	ldr	r2, [r3, #0]
 8012b78:	697b      	ldr	r3, [r7, #20]
 8012b7a:	4413      	add	r3, r2
}
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	371c      	adds	r7, #28
 8012b80:	46bd      	mov	sp, r7
 8012b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b86:	4770      	bx	lr

08012b88 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8012b88:	b580      	push	{r7, lr}
 8012b8a:	b086      	sub	sp, #24
 8012b8c:	af00      	add	r7, sp, #0
 8012b8e:	6078      	str	r0, [r7, #4]
 8012b90:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8012b98:	683b      	ldr	r3, [r7, #0]
 8012b9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012b9e:	d204      	bcs.n	8012baa <dir_sdi+0x22>
 8012ba0:	683b      	ldr	r3, [r7, #0]
 8012ba2:	f003 031f 	and.w	r3, r3, #31
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d001      	beq.n	8012bae <dir_sdi+0x26>
		return FR_INT_ERR;
 8012baa:	2302      	movs	r3, #2
 8012bac:	e063      	b.n	8012c76 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	683a      	ldr	r2, [r7, #0]
 8012bb2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	689b      	ldr	r3, [r3, #8]
 8012bb8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8012bba:	697b      	ldr	r3, [r7, #20]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d106      	bne.n	8012bce <dir_sdi+0x46>
 8012bc0:	693b      	ldr	r3, [r7, #16]
 8012bc2:	781b      	ldrb	r3, [r3, #0]
 8012bc4:	2b02      	cmp	r3, #2
 8012bc6:	d902      	bls.n	8012bce <dir_sdi+0x46>
		clst = fs->dirbase;
 8012bc8:	693b      	ldr	r3, [r7, #16]
 8012bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012bcc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012bce:	697b      	ldr	r3, [r7, #20]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d10c      	bne.n	8012bee <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8012bd4:	683b      	ldr	r3, [r7, #0]
 8012bd6:	095b      	lsrs	r3, r3, #5
 8012bd8:	693a      	ldr	r2, [r7, #16]
 8012bda:	8912      	ldrh	r2, [r2, #8]
 8012bdc:	4293      	cmp	r3, r2
 8012bde:	d301      	bcc.n	8012be4 <dir_sdi+0x5c>
 8012be0:	2302      	movs	r3, #2
 8012be2:	e048      	b.n	8012c76 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8012be4:	693b      	ldr	r3, [r7, #16]
 8012be6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	61da      	str	r2, [r3, #28]
 8012bec:	e029      	b.n	8012c42 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012bee:	693b      	ldr	r3, [r7, #16]
 8012bf0:	895b      	ldrh	r3, [r3, #10]
 8012bf2:	025b      	lsls	r3, r3, #9
 8012bf4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012bf6:	e019      	b.n	8012c2c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	6979      	ldr	r1, [r7, #20]
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	f7ff fcfe 	bl	80125fe <get_fat>
 8012c02:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012c04:	697b      	ldr	r3, [r7, #20]
 8012c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c0a:	d101      	bne.n	8012c10 <dir_sdi+0x88>
 8012c0c:	2301      	movs	r3, #1
 8012c0e:	e032      	b.n	8012c76 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012c10:	697b      	ldr	r3, [r7, #20]
 8012c12:	2b01      	cmp	r3, #1
 8012c14:	d904      	bls.n	8012c20 <dir_sdi+0x98>
 8012c16:	693b      	ldr	r3, [r7, #16]
 8012c18:	699b      	ldr	r3, [r3, #24]
 8012c1a:	697a      	ldr	r2, [r7, #20]
 8012c1c:	429a      	cmp	r2, r3
 8012c1e:	d301      	bcc.n	8012c24 <dir_sdi+0x9c>
 8012c20:	2302      	movs	r3, #2
 8012c22:	e028      	b.n	8012c76 <dir_sdi+0xee>
			ofs -= csz;
 8012c24:	683a      	ldr	r2, [r7, #0]
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	1ad3      	subs	r3, r2, r3
 8012c2a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012c2c:	683a      	ldr	r2, [r7, #0]
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	429a      	cmp	r2, r3
 8012c32:	d2e1      	bcs.n	8012bf8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8012c34:	6979      	ldr	r1, [r7, #20]
 8012c36:	6938      	ldr	r0, [r7, #16]
 8012c38:	f7ff fcc2 	bl	80125c0 <clust2sect>
 8012c3c:	4602      	mov	r2, r0
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	697a      	ldr	r2, [r7, #20]
 8012c46:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	69db      	ldr	r3, [r3, #28]
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d101      	bne.n	8012c54 <dir_sdi+0xcc>
 8012c50:	2302      	movs	r3, #2
 8012c52:	e010      	b.n	8012c76 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	69da      	ldr	r2, [r3, #28]
 8012c58:	683b      	ldr	r3, [r7, #0]
 8012c5a:	0a5b      	lsrs	r3, r3, #9
 8012c5c:	441a      	add	r2, r3
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8012c62:	693b      	ldr	r3, [r7, #16]
 8012c64:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012c68:	683b      	ldr	r3, [r7, #0]
 8012c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c6e:	441a      	add	r2, r3
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012c74:	2300      	movs	r3, #0
}
 8012c76:	4618      	mov	r0, r3
 8012c78:	3718      	adds	r7, #24
 8012c7a:	46bd      	mov	sp, r7
 8012c7c:	bd80      	pop	{r7, pc}

08012c7e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8012c7e:	b580      	push	{r7, lr}
 8012c80:	b086      	sub	sp, #24
 8012c82:	af00      	add	r7, sp, #0
 8012c84:	6078      	str	r0, [r7, #4]
 8012c86:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	695b      	ldr	r3, [r3, #20]
 8012c92:	3320      	adds	r3, #32
 8012c94:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	69db      	ldr	r3, [r3, #28]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d003      	beq.n	8012ca6 <dir_next+0x28>
 8012c9e:	68bb      	ldr	r3, [r7, #8]
 8012ca0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012ca4:	d301      	bcc.n	8012caa <dir_next+0x2c>
 8012ca6:	2304      	movs	r3, #4
 8012ca8:	e0aa      	b.n	8012e00 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012caa:	68bb      	ldr	r3, [r7, #8]
 8012cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	f040 8098 	bne.w	8012de6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	69db      	ldr	r3, [r3, #28]
 8012cba:	1c5a      	adds	r2, r3, #1
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	699b      	ldr	r3, [r3, #24]
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d10b      	bne.n	8012ce0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8012cc8:	68bb      	ldr	r3, [r7, #8]
 8012cca:	095b      	lsrs	r3, r3, #5
 8012ccc:	68fa      	ldr	r2, [r7, #12]
 8012cce:	8912      	ldrh	r2, [r2, #8]
 8012cd0:	4293      	cmp	r3, r2
 8012cd2:	f0c0 8088 	bcc.w	8012de6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	2200      	movs	r2, #0
 8012cda:	61da      	str	r2, [r3, #28]
 8012cdc:	2304      	movs	r3, #4
 8012cde:	e08f      	b.n	8012e00 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8012ce0:	68bb      	ldr	r3, [r7, #8]
 8012ce2:	0a5b      	lsrs	r3, r3, #9
 8012ce4:	68fa      	ldr	r2, [r7, #12]
 8012ce6:	8952      	ldrh	r2, [r2, #10]
 8012ce8:	3a01      	subs	r2, #1
 8012cea:	4013      	ands	r3, r2
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d17a      	bne.n	8012de6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012cf0:	687a      	ldr	r2, [r7, #4]
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	699b      	ldr	r3, [r3, #24]
 8012cf6:	4619      	mov	r1, r3
 8012cf8:	4610      	mov	r0, r2
 8012cfa:	f7ff fc80 	bl	80125fe <get_fat>
 8012cfe:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012d00:	697b      	ldr	r3, [r7, #20]
 8012d02:	2b01      	cmp	r3, #1
 8012d04:	d801      	bhi.n	8012d0a <dir_next+0x8c>
 8012d06:	2302      	movs	r3, #2
 8012d08:	e07a      	b.n	8012e00 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8012d0a:	697b      	ldr	r3, [r7, #20]
 8012d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d10:	d101      	bne.n	8012d16 <dir_next+0x98>
 8012d12:	2301      	movs	r3, #1
 8012d14:	e074      	b.n	8012e00 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	699b      	ldr	r3, [r3, #24]
 8012d1a:	697a      	ldr	r2, [r7, #20]
 8012d1c:	429a      	cmp	r2, r3
 8012d1e:	d358      	bcc.n	8012dd2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012d20:	683b      	ldr	r3, [r7, #0]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d104      	bne.n	8012d30 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	2200      	movs	r2, #0
 8012d2a:	61da      	str	r2, [r3, #28]
 8012d2c:	2304      	movs	r3, #4
 8012d2e:	e067      	b.n	8012e00 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012d30:	687a      	ldr	r2, [r7, #4]
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	699b      	ldr	r3, [r3, #24]
 8012d36:	4619      	mov	r1, r3
 8012d38:	4610      	mov	r0, r2
 8012d3a:	f7ff fe59 	bl	80129f0 <create_chain>
 8012d3e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012d40:	697b      	ldr	r3, [r7, #20]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d101      	bne.n	8012d4a <dir_next+0xcc>
 8012d46:	2307      	movs	r3, #7
 8012d48:	e05a      	b.n	8012e00 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8012d4a:	697b      	ldr	r3, [r7, #20]
 8012d4c:	2b01      	cmp	r3, #1
 8012d4e:	d101      	bne.n	8012d54 <dir_next+0xd6>
 8012d50:	2302      	movs	r3, #2
 8012d52:	e055      	b.n	8012e00 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012d54:	697b      	ldr	r3, [r7, #20]
 8012d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d5a:	d101      	bne.n	8012d60 <dir_next+0xe2>
 8012d5c:	2301      	movs	r3, #1
 8012d5e:	e04f      	b.n	8012e00 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8012d60:	68f8      	ldr	r0, [r7, #12]
 8012d62:	f7ff fb4d 	bl	8012400 <sync_window>
 8012d66:	4603      	mov	r3, r0
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d001      	beq.n	8012d70 <dir_next+0xf2>
 8012d6c:	2301      	movs	r3, #1
 8012d6e:	e047      	b.n	8012e00 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	3334      	adds	r3, #52	; 0x34
 8012d74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012d78:	2100      	movs	r1, #0
 8012d7a:	4618      	mov	r0, r3
 8012d7c:	f7ff f977 	bl	801206e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012d80:	2300      	movs	r3, #0
 8012d82:	613b      	str	r3, [r7, #16]
 8012d84:	6979      	ldr	r1, [r7, #20]
 8012d86:	68f8      	ldr	r0, [r7, #12]
 8012d88:	f7ff fc1a 	bl	80125c0 <clust2sect>
 8012d8c:	4602      	mov	r2, r0
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	631a      	str	r2, [r3, #48]	; 0x30
 8012d92:	e012      	b.n	8012dba <dir_next+0x13c>
						fs->wflag = 1;
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	2201      	movs	r2, #1
 8012d98:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8012d9a:	68f8      	ldr	r0, [r7, #12]
 8012d9c:	f7ff fb30 	bl	8012400 <sync_window>
 8012da0:	4603      	mov	r3, r0
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d001      	beq.n	8012daa <dir_next+0x12c>
 8012da6:	2301      	movs	r3, #1
 8012da8:	e02a      	b.n	8012e00 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012daa:	693b      	ldr	r3, [r7, #16]
 8012dac:	3301      	adds	r3, #1
 8012dae:	613b      	str	r3, [r7, #16]
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012db4:	1c5a      	adds	r2, r3, #1
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	631a      	str	r2, [r3, #48]	; 0x30
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	895b      	ldrh	r3, [r3, #10]
 8012dbe:	461a      	mov	r2, r3
 8012dc0:	693b      	ldr	r3, [r7, #16]
 8012dc2:	4293      	cmp	r3, r2
 8012dc4:	d3e6      	bcc.n	8012d94 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012dca:	693b      	ldr	r3, [r7, #16]
 8012dcc:	1ad2      	subs	r2, r2, r3
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	697a      	ldr	r2, [r7, #20]
 8012dd6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8012dd8:	6979      	ldr	r1, [r7, #20]
 8012dda:	68f8      	ldr	r0, [r7, #12]
 8012ddc:	f7ff fbf0 	bl	80125c0 <clust2sect>
 8012de0:	4602      	mov	r2, r0
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	68ba      	ldr	r2, [r7, #8]
 8012dea:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012dec:	68fb      	ldr	r3, [r7, #12]
 8012dee:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012df2:	68bb      	ldr	r3, [r7, #8]
 8012df4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012df8:	441a      	add	r2, r3
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012dfe:	2300      	movs	r3, #0
}
 8012e00:	4618      	mov	r0, r3
 8012e02:	3718      	adds	r7, #24
 8012e04:	46bd      	mov	sp, r7
 8012e06:	bd80      	pop	{r7, pc}

08012e08 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012e08:	b580      	push	{r7, lr}
 8012e0a:	b086      	sub	sp, #24
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	6078      	str	r0, [r7, #4]
 8012e10:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012e18:	2100      	movs	r1, #0
 8012e1a:	6878      	ldr	r0, [r7, #4]
 8012e1c:	f7ff feb4 	bl	8012b88 <dir_sdi>
 8012e20:	4603      	mov	r3, r0
 8012e22:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012e24:	7dfb      	ldrb	r3, [r7, #23]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d12b      	bne.n	8012e82 <dir_alloc+0x7a>
		n = 0;
 8012e2a:	2300      	movs	r3, #0
 8012e2c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	69db      	ldr	r3, [r3, #28]
 8012e32:	4619      	mov	r1, r3
 8012e34:	68f8      	ldr	r0, [r7, #12]
 8012e36:	f7ff fb27 	bl	8012488 <move_window>
 8012e3a:	4603      	mov	r3, r0
 8012e3c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012e3e:	7dfb      	ldrb	r3, [r7, #23]
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d11d      	bne.n	8012e80 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	6a1b      	ldr	r3, [r3, #32]
 8012e48:	781b      	ldrb	r3, [r3, #0]
 8012e4a:	2be5      	cmp	r3, #229	; 0xe5
 8012e4c:	d004      	beq.n	8012e58 <dir_alloc+0x50>
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	6a1b      	ldr	r3, [r3, #32]
 8012e52:	781b      	ldrb	r3, [r3, #0]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d107      	bne.n	8012e68 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012e58:	693b      	ldr	r3, [r7, #16]
 8012e5a:	3301      	adds	r3, #1
 8012e5c:	613b      	str	r3, [r7, #16]
 8012e5e:	693a      	ldr	r2, [r7, #16]
 8012e60:	683b      	ldr	r3, [r7, #0]
 8012e62:	429a      	cmp	r2, r3
 8012e64:	d102      	bne.n	8012e6c <dir_alloc+0x64>
 8012e66:	e00c      	b.n	8012e82 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8012e68:	2300      	movs	r3, #0
 8012e6a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8012e6c:	2101      	movs	r1, #1
 8012e6e:	6878      	ldr	r0, [r7, #4]
 8012e70:	f7ff ff05 	bl	8012c7e <dir_next>
 8012e74:	4603      	mov	r3, r0
 8012e76:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012e78:	7dfb      	ldrb	r3, [r7, #23]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d0d7      	beq.n	8012e2e <dir_alloc+0x26>
 8012e7e:	e000      	b.n	8012e82 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012e80:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8012e82:	7dfb      	ldrb	r3, [r7, #23]
 8012e84:	2b04      	cmp	r3, #4
 8012e86:	d101      	bne.n	8012e8c <dir_alloc+0x84>
 8012e88:	2307      	movs	r3, #7
 8012e8a:	75fb      	strb	r3, [r7, #23]
	return res;
 8012e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e8e:	4618      	mov	r0, r3
 8012e90:	3718      	adds	r7, #24
 8012e92:	46bd      	mov	sp, r7
 8012e94:	bd80      	pop	{r7, pc}

08012e96 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8012e96:	b580      	push	{r7, lr}
 8012e98:	b084      	sub	sp, #16
 8012e9a:	af00      	add	r7, sp, #0
 8012e9c:	6078      	str	r0, [r7, #4]
 8012e9e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012ea0:	683b      	ldr	r3, [r7, #0]
 8012ea2:	331a      	adds	r3, #26
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	f7ff f83f 	bl	8011f28 <ld_word>
 8012eaa:	4603      	mov	r3, r0
 8012eac:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	781b      	ldrb	r3, [r3, #0]
 8012eb2:	2b03      	cmp	r3, #3
 8012eb4:	d109      	bne.n	8012eca <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8012eb6:	683b      	ldr	r3, [r7, #0]
 8012eb8:	3314      	adds	r3, #20
 8012eba:	4618      	mov	r0, r3
 8012ebc:	f7ff f834 	bl	8011f28 <ld_word>
 8012ec0:	4603      	mov	r3, r0
 8012ec2:	041b      	lsls	r3, r3, #16
 8012ec4:	68fa      	ldr	r2, [r7, #12]
 8012ec6:	4313      	orrs	r3, r2
 8012ec8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8012eca:	68fb      	ldr	r3, [r7, #12]
}
 8012ecc:	4618      	mov	r0, r3
 8012ece:	3710      	adds	r7, #16
 8012ed0:	46bd      	mov	sp, r7
 8012ed2:	bd80      	pop	{r7, pc}

08012ed4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012ed4:	b580      	push	{r7, lr}
 8012ed6:	b084      	sub	sp, #16
 8012ed8:	af00      	add	r7, sp, #0
 8012eda:	60f8      	str	r0, [r7, #12]
 8012edc:	60b9      	str	r1, [r7, #8]
 8012ede:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012ee0:	68bb      	ldr	r3, [r7, #8]
 8012ee2:	331a      	adds	r3, #26
 8012ee4:	687a      	ldr	r2, [r7, #4]
 8012ee6:	b292      	uxth	r2, r2
 8012ee8:	4611      	mov	r1, r2
 8012eea:	4618      	mov	r0, r3
 8012eec:	f7ff f857 	bl	8011f9e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	781b      	ldrb	r3, [r3, #0]
 8012ef4:	2b03      	cmp	r3, #3
 8012ef6:	d109      	bne.n	8012f0c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012ef8:	68bb      	ldr	r3, [r7, #8]
 8012efa:	f103 0214 	add.w	r2, r3, #20
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	0c1b      	lsrs	r3, r3, #16
 8012f02:	b29b      	uxth	r3, r3
 8012f04:	4619      	mov	r1, r3
 8012f06:	4610      	mov	r0, r2
 8012f08:	f7ff f849 	bl	8011f9e <st_word>
	}
}
 8012f0c:	bf00      	nop
 8012f0e:	3710      	adds	r7, #16
 8012f10:	46bd      	mov	sp, r7
 8012f12:	bd80      	pop	{r7, pc}

08012f14 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8012f14:	b590      	push	{r4, r7, lr}
 8012f16:	b087      	sub	sp, #28
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	6078      	str	r0, [r7, #4]
 8012f1c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8012f1e:	683b      	ldr	r3, [r7, #0]
 8012f20:	331a      	adds	r3, #26
 8012f22:	4618      	mov	r0, r3
 8012f24:	f7ff f800 	bl	8011f28 <ld_word>
 8012f28:	4603      	mov	r3, r0
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d001      	beq.n	8012f32 <cmp_lfn+0x1e>
 8012f2e:	2300      	movs	r3, #0
 8012f30:	e059      	b.n	8012fe6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8012f32:	683b      	ldr	r3, [r7, #0]
 8012f34:	781b      	ldrb	r3, [r3, #0]
 8012f36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012f3a:	1e5a      	subs	r2, r3, #1
 8012f3c:	4613      	mov	r3, r2
 8012f3e:	005b      	lsls	r3, r3, #1
 8012f40:	4413      	add	r3, r2
 8012f42:	009b      	lsls	r3, r3, #2
 8012f44:	4413      	add	r3, r2
 8012f46:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012f48:	2301      	movs	r3, #1
 8012f4a:	81fb      	strh	r3, [r7, #14]
 8012f4c:	2300      	movs	r3, #0
 8012f4e:	613b      	str	r3, [r7, #16]
 8012f50:	e033      	b.n	8012fba <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8012f52:	4a27      	ldr	r2, [pc, #156]	; (8012ff0 <cmp_lfn+0xdc>)
 8012f54:	693b      	ldr	r3, [r7, #16]
 8012f56:	4413      	add	r3, r2
 8012f58:	781b      	ldrb	r3, [r3, #0]
 8012f5a:	461a      	mov	r2, r3
 8012f5c:	683b      	ldr	r3, [r7, #0]
 8012f5e:	4413      	add	r3, r2
 8012f60:	4618      	mov	r0, r3
 8012f62:	f7fe ffe1 	bl	8011f28 <ld_word>
 8012f66:	4603      	mov	r3, r0
 8012f68:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8012f6a:	89fb      	ldrh	r3, [r7, #14]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d01a      	beq.n	8012fa6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8012f70:	697b      	ldr	r3, [r7, #20]
 8012f72:	2bfe      	cmp	r3, #254	; 0xfe
 8012f74:	d812      	bhi.n	8012f9c <cmp_lfn+0x88>
 8012f76:	89bb      	ldrh	r3, [r7, #12]
 8012f78:	4618      	mov	r0, r3
 8012f7a:	f7fe fead 	bl	8011cd8 <ff_wtoupper>
 8012f7e:	4603      	mov	r3, r0
 8012f80:	461c      	mov	r4, r3
 8012f82:	697b      	ldr	r3, [r7, #20]
 8012f84:	1c5a      	adds	r2, r3, #1
 8012f86:	617a      	str	r2, [r7, #20]
 8012f88:	005b      	lsls	r3, r3, #1
 8012f8a:	687a      	ldr	r2, [r7, #4]
 8012f8c:	4413      	add	r3, r2
 8012f8e:	881b      	ldrh	r3, [r3, #0]
 8012f90:	4618      	mov	r0, r3
 8012f92:	f7fe fea1 	bl	8011cd8 <ff_wtoupper>
 8012f96:	4603      	mov	r3, r0
 8012f98:	429c      	cmp	r4, r3
 8012f9a:	d001      	beq.n	8012fa0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8012f9c:	2300      	movs	r3, #0
 8012f9e:	e022      	b.n	8012fe6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8012fa0:	89bb      	ldrh	r3, [r7, #12]
 8012fa2:	81fb      	strh	r3, [r7, #14]
 8012fa4:	e006      	b.n	8012fb4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8012fa6:	89bb      	ldrh	r3, [r7, #12]
 8012fa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012fac:	4293      	cmp	r3, r2
 8012fae:	d001      	beq.n	8012fb4 <cmp_lfn+0xa0>
 8012fb0:	2300      	movs	r3, #0
 8012fb2:	e018      	b.n	8012fe6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012fb4:	693b      	ldr	r3, [r7, #16]
 8012fb6:	3301      	adds	r3, #1
 8012fb8:	613b      	str	r3, [r7, #16]
 8012fba:	693b      	ldr	r3, [r7, #16]
 8012fbc:	2b0c      	cmp	r3, #12
 8012fbe:	d9c8      	bls.n	8012f52 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8012fc0:	683b      	ldr	r3, [r7, #0]
 8012fc2:	781b      	ldrb	r3, [r3, #0]
 8012fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d00b      	beq.n	8012fe4 <cmp_lfn+0xd0>
 8012fcc:	89fb      	ldrh	r3, [r7, #14]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d008      	beq.n	8012fe4 <cmp_lfn+0xd0>
 8012fd2:	697b      	ldr	r3, [r7, #20]
 8012fd4:	005b      	lsls	r3, r3, #1
 8012fd6:	687a      	ldr	r2, [r7, #4]
 8012fd8:	4413      	add	r3, r2
 8012fda:	881b      	ldrh	r3, [r3, #0]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d001      	beq.n	8012fe4 <cmp_lfn+0xd0>
 8012fe0:	2300      	movs	r3, #0
 8012fe2:	e000      	b.n	8012fe6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8012fe4:	2301      	movs	r3, #1
}
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	371c      	adds	r7, #28
 8012fea:	46bd      	mov	sp, r7
 8012fec:	bd90      	pop	{r4, r7, pc}
 8012fee:	bf00      	nop
 8012ff0:	0802a494 	.word	0x0802a494

08012ff4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8012ff4:	b580      	push	{r7, lr}
 8012ff6:	b086      	sub	sp, #24
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	6078      	str	r0, [r7, #4]
 8012ffc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8012ffe:	683b      	ldr	r3, [r7, #0]
 8013000:	331a      	adds	r3, #26
 8013002:	4618      	mov	r0, r3
 8013004:	f7fe ff90 	bl	8011f28 <ld_word>
 8013008:	4603      	mov	r3, r0
 801300a:	2b00      	cmp	r3, #0
 801300c:	d001      	beq.n	8013012 <pick_lfn+0x1e>
 801300e:	2300      	movs	r3, #0
 8013010:	e04d      	b.n	80130ae <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8013012:	683b      	ldr	r3, [r7, #0]
 8013014:	781b      	ldrb	r3, [r3, #0]
 8013016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801301a:	1e5a      	subs	r2, r3, #1
 801301c:	4613      	mov	r3, r2
 801301e:	005b      	lsls	r3, r3, #1
 8013020:	4413      	add	r3, r2
 8013022:	009b      	lsls	r3, r3, #2
 8013024:	4413      	add	r3, r2
 8013026:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8013028:	2301      	movs	r3, #1
 801302a:	81fb      	strh	r3, [r7, #14]
 801302c:	2300      	movs	r3, #0
 801302e:	613b      	str	r3, [r7, #16]
 8013030:	e028      	b.n	8013084 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8013032:	4a21      	ldr	r2, [pc, #132]	; (80130b8 <pick_lfn+0xc4>)
 8013034:	693b      	ldr	r3, [r7, #16]
 8013036:	4413      	add	r3, r2
 8013038:	781b      	ldrb	r3, [r3, #0]
 801303a:	461a      	mov	r2, r3
 801303c:	683b      	ldr	r3, [r7, #0]
 801303e:	4413      	add	r3, r2
 8013040:	4618      	mov	r0, r3
 8013042:	f7fe ff71 	bl	8011f28 <ld_word>
 8013046:	4603      	mov	r3, r0
 8013048:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801304a:	89fb      	ldrh	r3, [r7, #14]
 801304c:	2b00      	cmp	r3, #0
 801304e:	d00f      	beq.n	8013070 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8013050:	697b      	ldr	r3, [r7, #20]
 8013052:	2bfe      	cmp	r3, #254	; 0xfe
 8013054:	d901      	bls.n	801305a <pick_lfn+0x66>
 8013056:	2300      	movs	r3, #0
 8013058:	e029      	b.n	80130ae <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801305a:	89bb      	ldrh	r3, [r7, #12]
 801305c:	81fb      	strh	r3, [r7, #14]
 801305e:	697b      	ldr	r3, [r7, #20]
 8013060:	1c5a      	adds	r2, r3, #1
 8013062:	617a      	str	r2, [r7, #20]
 8013064:	005b      	lsls	r3, r3, #1
 8013066:	687a      	ldr	r2, [r7, #4]
 8013068:	4413      	add	r3, r2
 801306a:	89fa      	ldrh	r2, [r7, #14]
 801306c:	801a      	strh	r2, [r3, #0]
 801306e:	e006      	b.n	801307e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8013070:	89bb      	ldrh	r3, [r7, #12]
 8013072:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013076:	4293      	cmp	r3, r2
 8013078:	d001      	beq.n	801307e <pick_lfn+0x8a>
 801307a:	2300      	movs	r3, #0
 801307c:	e017      	b.n	80130ae <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801307e:	693b      	ldr	r3, [r7, #16]
 8013080:	3301      	adds	r3, #1
 8013082:	613b      	str	r3, [r7, #16]
 8013084:	693b      	ldr	r3, [r7, #16]
 8013086:	2b0c      	cmp	r3, #12
 8013088:	d9d3      	bls.n	8013032 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 801308a:	683b      	ldr	r3, [r7, #0]
 801308c:	781b      	ldrb	r3, [r3, #0]
 801308e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013092:	2b00      	cmp	r3, #0
 8013094:	d00a      	beq.n	80130ac <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8013096:	697b      	ldr	r3, [r7, #20]
 8013098:	2bfe      	cmp	r3, #254	; 0xfe
 801309a:	d901      	bls.n	80130a0 <pick_lfn+0xac>
 801309c:	2300      	movs	r3, #0
 801309e:	e006      	b.n	80130ae <pick_lfn+0xba>
		lfnbuf[i] = 0;
 80130a0:	697b      	ldr	r3, [r7, #20]
 80130a2:	005b      	lsls	r3, r3, #1
 80130a4:	687a      	ldr	r2, [r7, #4]
 80130a6:	4413      	add	r3, r2
 80130a8:	2200      	movs	r2, #0
 80130aa:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80130ac:	2301      	movs	r3, #1
}
 80130ae:	4618      	mov	r0, r3
 80130b0:	3718      	adds	r7, #24
 80130b2:	46bd      	mov	sp, r7
 80130b4:	bd80      	pop	{r7, pc}
 80130b6:	bf00      	nop
 80130b8:	0802a494 	.word	0x0802a494

080130bc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80130bc:	b580      	push	{r7, lr}
 80130be:	b088      	sub	sp, #32
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	60f8      	str	r0, [r7, #12]
 80130c4:	60b9      	str	r1, [r7, #8]
 80130c6:	4611      	mov	r1, r2
 80130c8:	461a      	mov	r2, r3
 80130ca:	460b      	mov	r3, r1
 80130cc:	71fb      	strb	r3, [r7, #7]
 80130ce:	4613      	mov	r3, r2
 80130d0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80130d2:	68bb      	ldr	r3, [r7, #8]
 80130d4:	330d      	adds	r3, #13
 80130d6:	79ba      	ldrb	r2, [r7, #6]
 80130d8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80130da:	68bb      	ldr	r3, [r7, #8]
 80130dc:	330b      	adds	r3, #11
 80130de:	220f      	movs	r2, #15
 80130e0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80130e2:	68bb      	ldr	r3, [r7, #8]
 80130e4:	330c      	adds	r3, #12
 80130e6:	2200      	movs	r2, #0
 80130e8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80130ea:	68bb      	ldr	r3, [r7, #8]
 80130ec:	331a      	adds	r3, #26
 80130ee:	2100      	movs	r1, #0
 80130f0:	4618      	mov	r0, r3
 80130f2:	f7fe ff54 	bl	8011f9e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80130f6:	79fb      	ldrb	r3, [r7, #7]
 80130f8:	1e5a      	subs	r2, r3, #1
 80130fa:	4613      	mov	r3, r2
 80130fc:	005b      	lsls	r3, r3, #1
 80130fe:	4413      	add	r3, r2
 8013100:	009b      	lsls	r3, r3, #2
 8013102:	4413      	add	r3, r2
 8013104:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8013106:	2300      	movs	r3, #0
 8013108:	82fb      	strh	r3, [r7, #22]
 801310a:	2300      	movs	r3, #0
 801310c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801310e:	8afb      	ldrh	r3, [r7, #22]
 8013110:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013114:	4293      	cmp	r3, r2
 8013116:	d007      	beq.n	8013128 <put_lfn+0x6c>
 8013118:	69fb      	ldr	r3, [r7, #28]
 801311a:	1c5a      	adds	r2, r3, #1
 801311c:	61fa      	str	r2, [r7, #28]
 801311e:	005b      	lsls	r3, r3, #1
 8013120:	68fa      	ldr	r2, [r7, #12]
 8013122:	4413      	add	r3, r2
 8013124:	881b      	ldrh	r3, [r3, #0]
 8013126:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8013128:	4a17      	ldr	r2, [pc, #92]	; (8013188 <put_lfn+0xcc>)
 801312a:	69bb      	ldr	r3, [r7, #24]
 801312c:	4413      	add	r3, r2
 801312e:	781b      	ldrb	r3, [r3, #0]
 8013130:	461a      	mov	r2, r3
 8013132:	68bb      	ldr	r3, [r7, #8]
 8013134:	4413      	add	r3, r2
 8013136:	8afa      	ldrh	r2, [r7, #22]
 8013138:	4611      	mov	r1, r2
 801313a:	4618      	mov	r0, r3
 801313c:	f7fe ff2f 	bl	8011f9e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8013140:	8afb      	ldrh	r3, [r7, #22]
 8013142:	2b00      	cmp	r3, #0
 8013144:	d102      	bne.n	801314c <put_lfn+0x90>
 8013146:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801314a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801314c:	69bb      	ldr	r3, [r7, #24]
 801314e:	3301      	adds	r3, #1
 8013150:	61bb      	str	r3, [r7, #24]
 8013152:	69bb      	ldr	r3, [r7, #24]
 8013154:	2b0c      	cmp	r3, #12
 8013156:	d9da      	bls.n	801310e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8013158:	8afb      	ldrh	r3, [r7, #22]
 801315a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801315e:	4293      	cmp	r3, r2
 8013160:	d006      	beq.n	8013170 <put_lfn+0xb4>
 8013162:	69fb      	ldr	r3, [r7, #28]
 8013164:	005b      	lsls	r3, r3, #1
 8013166:	68fa      	ldr	r2, [r7, #12]
 8013168:	4413      	add	r3, r2
 801316a:	881b      	ldrh	r3, [r3, #0]
 801316c:	2b00      	cmp	r3, #0
 801316e:	d103      	bne.n	8013178 <put_lfn+0xbc>
 8013170:	79fb      	ldrb	r3, [r7, #7]
 8013172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013176:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8013178:	68bb      	ldr	r3, [r7, #8]
 801317a:	79fa      	ldrb	r2, [r7, #7]
 801317c:	701a      	strb	r2, [r3, #0]
}
 801317e:	bf00      	nop
 8013180:	3720      	adds	r7, #32
 8013182:	46bd      	mov	sp, r7
 8013184:	bd80      	pop	{r7, pc}
 8013186:	bf00      	nop
 8013188:	0802a494 	.word	0x0802a494

0801318c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801318c:	b580      	push	{r7, lr}
 801318e:	b08c      	sub	sp, #48	; 0x30
 8013190:	af00      	add	r7, sp, #0
 8013192:	60f8      	str	r0, [r7, #12]
 8013194:	60b9      	str	r1, [r7, #8]
 8013196:	607a      	str	r2, [r7, #4]
 8013198:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801319a:	220b      	movs	r2, #11
 801319c:	68b9      	ldr	r1, [r7, #8]
 801319e:	68f8      	ldr	r0, [r7, #12]
 80131a0:	f7fe ff44 	bl	801202c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80131a4:	683b      	ldr	r3, [r7, #0]
 80131a6:	2b05      	cmp	r3, #5
 80131a8:	d929      	bls.n	80131fe <gen_numname+0x72>
		sr = seq;
 80131aa:	683b      	ldr	r3, [r7, #0]
 80131ac:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80131ae:	e020      	b.n	80131f2 <gen_numname+0x66>
			wc = *lfn++;
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	1c9a      	adds	r2, r3, #2
 80131b4:	607a      	str	r2, [r7, #4]
 80131b6:	881b      	ldrh	r3, [r3, #0]
 80131b8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80131ba:	2300      	movs	r3, #0
 80131bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80131be:	e015      	b.n	80131ec <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 80131c0:	69fb      	ldr	r3, [r7, #28]
 80131c2:	005a      	lsls	r2, r3, #1
 80131c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80131c6:	f003 0301 	and.w	r3, r3, #1
 80131ca:	4413      	add	r3, r2
 80131cc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80131ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80131d0:	085b      	lsrs	r3, r3, #1
 80131d2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80131d4:	69fb      	ldr	r3, [r7, #28]
 80131d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d003      	beq.n	80131e6 <gen_numname+0x5a>
 80131de:	69fa      	ldr	r2, [r7, #28]
 80131e0:	4b31      	ldr	r3, [pc, #196]	; (80132a8 <gen_numname+0x11c>)
 80131e2:	4053      	eors	r3, r2
 80131e4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80131e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131e8:	3301      	adds	r3, #1
 80131ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80131ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131ee:	2b0f      	cmp	r3, #15
 80131f0:	d9e6      	bls.n	80131c0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	881b      	ldrh	r3, [r3, #0]
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d1da      	bne.n	80131b0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80131fa:	69fb      	ldr	r3, [r7, #28]
 80131fc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80131fe:	2307      	movs	r3, #7
 8013200:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8013202:	683b      	ldr	r3, [r7, #0]
 8013204:	b2db      	uxtb	r3, r3
 8013206:	f003 030f 	and.w	r3, r3, #15
 801320a:	b2db      	uxtb	r3, r3
 801320c:	3330      	adds	r3, #48	; 0x30
 801320e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8013212:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013216:	2b39      	cmp	r3, #57	; 0x39
 8013218:	d904      	bls.n	8013224 <gen_numname+0x98>
 801321a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801321e:	3307      	adds	r3, #7
 8013220:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8013224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013226:	1e5a      	subs	r2, r3, #1
 8013228:	62ba      	str	r2, [r7, #40]	; 0x28
 801322a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801322e:	4413      	add	r3, r2
 8013230:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8013234:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8013238:	683b      	ldr	r3, [r7, #0]
 801323a:	091b      	lsrs	r3, r3, #4
 801323c:	603b      	str	r3, [r7, #0]
	} while (seq);
 801323e:	683b      	ldr	r3, [r7, #0]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d1de      	bne.n	8013202 <gen_numname+0x76>
	ns[i] = '~';
 8013244:	f107 0214 	add.w	r2, r7, #20
 8013248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801324a:	4413      	add	r3, r2
 801324c:	227e      	movs	r2, #126	; 0x7e
 801324e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8013250:	2300      	movs	r3, #0
 8013252:	627b      	str	r3, [r7, #36]	; 0x24
 8013254:	e002      	b.n	801325c <gen_numname+0xd0>
 8013256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013258:	3301      	adds	r3, #1
 801325a:	627b      	str	r3, [r7, #36]	; 0x24
 801325c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801325e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013260:	429a      	cmp	r2, r3
 8013262:	d205      	bcs.n	8013270 <gen_numname+0xe4>
 8013264:	68fa      	ldr	r2, [r7, #12]
 8013266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013268:	4413      	add	r3, r2
 801326a:	781b      	ldrb	r3, [r3, #0]
 801326c:	2b20      	cmp	r3, #32
 801326e:	d1f2      	bne.n	8013256 <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8013270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013272:	2b07      	cmp	r3, #7
 8013274:	d808      	bhi.n	8013288 <gen_numname+0xfc>
 8013276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013278:	1c5a      	adds	r2, r3, #1
 801327a:	62ba      	str	r2, [r7, #40]	; 0x28
 801327c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8013280:	4413      	add	r3, r2
 8013282:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8013286:	e000      	b.n	801328a <gen_numname+0xfe>
 8013288:	2120      	movs	r1, #32
 801328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801328c:	1c5a      	adds	r2, r3, #1
 801328e:	627a      	str	r2, [r7, #36]	; 0x24
 8013290:	68fa      	ldr	r2, [r7, #12]
 8013292:	4413      	add	r3, r2
 8013294:	460a      	mov	r2, r1
 8013296:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8013298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801329a:	2b07      	cmp	r3, #7
 801329c:	d9e8      	bls.n	8013270 <gen_numname+0xe4>
}
 801329e:	bf00      	nop
 80132a0:	bf00      	nop
 80132a2:	3730      	adds	r7, #48	; 0x30
 80132a4:	46bd      	mov	sp, r7
 80132a6:	bd80      	pop	{r7, pc}
 80132a8:	00011021 	.word	0x00011021

080132ac <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80132ac:	b480      	push	{r7}
 80132ae:	b085      	sub	sp, #20
 80132b0:	af00      	add	r7, sp, #0
 80132b2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80132b4:	2300      	movs	r3, #0
 80132b6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80132b8:	230b      	movs	r3, #11
 80132ba:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80132bc:	7bfb      	ldrb	r3, [r7, #15]
 80132be:	b2da      	uxtb	r2, r3
 80132c0:	0852      	lsrs	r2, r2, #1
 80132c2:	01db      	lsls	r3, r3, #7
 80132c4:	4313      	orrs	r3, r2
 80132c6:	b2da      	uxtb	r2, r3
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	1c59      	adds	r1, r3, #1
 80132cc:	6079      	str	r1, [r7, #4]
 80132ce:	781b      	ldrb	r3, [r3, #0]
 80132d0:	4413      	add	r3, r2
 80132d2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80132d4:	68bb      	ldr	r3, [r7, #8]
 80132d6:	3b01      	subs	r3, #1
 80132d8:	60bb      	str	r3, [r7, #8]
 80132da:	68bb      	ldr	r3, [r7, #8]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d1ed      	bne.n	80132bc <sum_sfn+0x10>
	return sum;
 80132e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80132e2:	4618      	mov	r0, r3
 80132e4:	3714      	adds	r7, #20
 80132e6:	46bd      	mov	sp, r7
 80132e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ec:	4770      	bx	lr

080132ee <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80132ee:	b580      	push	{r7, lr}
 80132f0:	b086      	sub	sp, #24
 80132f2:	af00      	add	r7, sp, #0
 80132f4:	6078      	str	r0, [r7, #4]
 80132f6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80132f8:	2304      	movs	r3, #4
 80132fa:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8013302:	23ff      	movs	r3, #255	; 0xff
 8013304:	757b      	strb	r3, [r7, #21]
 8013306:	23ff      	movs	r3, #255	; 0xff
 8013308:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 801330a:	e081      	b.n	8013410 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	69db      	ldr	r3, [r3, #28]
 8013310:	4619      	mov	r1, r3
 8013312:	6938      	ldr	r0, [r7, #16]
 8013314:	f7ff f8b8 	bl	8012488 <move_window>
 8013318:	4603      	mov	r3, r0
 801331a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801331c:	7dfb      	ldrb	r3, [r7, #23]
 801331e:	2b00      	cmp	r3, #0
 8013320:	d17c      	bne.n	801341c <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	6a1b      	ldr	r3, [r3, #32]
 8013326:	781b      	ldrb	r3, [r3, #0]
 8013328:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 801332a:	7dbb      	ldrb	r3, [r7, #22]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d102      	bne.n	8013336 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8013330:	2304      	movs	r3, #4
 8013332:	75fb      	strb	r3, [r7, #23]
 8013334:	e077      	b.n	8013426 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	6a1b      	ldr	r3, [r3, #32]
 801333a:	330b      	adds	r3, #11
 801333c:	781b      	ldrb	r3, [r3, #0]
 801333e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013342:	73fb      	strb	r3, [r7, #15]
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	7bfa      	ldrb	r2, [r7, #15]
 8013348:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801334a:	7dbb      	ldrb	r3, [r7, #22]
 801334c:	2be5      	cmp	r3, #229	; 0xe5
 801334e:	d00e      	beq.n	801336e <dir_read+0x80>
 8013350:	7dbb      	ldrb	r3, [r7, #22]
 8013352:	2b2e      	cmp	r3, #46	; 0x2e
 8013354:	d00b      	beq.n	801336e <dir_read+0x80>
 8013356:	7bfb      	ldrb	r3, [r7, #15]
 8013358:	f023 0320 	bic.w	r3, r3, #32
 801335c:	2b08      	cmp	r3, #8
 801335e:	bf0c      	ite	eq
 8013360:	2301      	moveq	r3, #1
 8013362:	2300      	movne	r3, #0
 8013364:	b2db      	uxtb	r3, r3
 8013366:	461a      	mov	r2, r3
 8013368:	683b      	ldr	r3, [r7, #0]
 801336a:	4293      	cmp	r3, r2
 801336c:	d002      	beq.n	8013374 <dir_read+0x86>
				ord = 0xFF;
 801336e:	23ff      	movs	r3, #255	; 0xff
 8013370:	757b      	strb	r3, [r7, #21]
 8013372:	e044      	b.n	80133fe <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8013374:	7bfb      	ldrb	r3, [r7, #15]
 8013376:	2b0f      	cmp	r3, #15
 8013378:	d12f      	bne.n	80133da <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 801337a:	7dbb      	ldrb	r3, [r7, #22]
 801337c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013380:	2b00      	cmp	r3, #0
 8013382:	d00d      	beq.n	80133a0 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	6a1b      	ldr	r3, [r3, #32]
 8013388:	7b5b      	ldrb	r3, [r3, #13]
 801338a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 801338c:	7dbb      	ldrb	r3, [r7, #22]
 801338e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013392:	75bb      	strb	r3, [r7, #22]
 8013394:	7dbb      	ldrb	r3, [r7, #22]
 8013396:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	695a      	ldr	r2, [r3, #20]
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80133a0:	7dba      	ldrb	r2, [r7, #22]
 80133a2:	7d7b      	ldrb	r3, [r7, #21]
 80133a4:	429a      	cmp	r2, r3
 80133a6:	d115      	bne.n	80133d4 <dir_read+0xe6>
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	6a1b      	ldr	r3, [r3, #32]
 80133ac:	330d      	adds	r3, #13
 80133ae:	781b      	ldrb	r3, [r3, #0]
 80133b0:	7d3a      	ldrb	r2, [r7, #20]
 80133b2:	429a      	cmp	r2, r3
 80133b4:	d10e      	bne.n	80133d4 <dir_read+0xe6>
 80133b6:	693b      	ldr	r3, [r7, #16]
 80133b8:	68da      	ldr	r2, [r3, #12]
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	6a1b      	ldr	r3, [r3, #32]
 80133be:	4619      	mov	r1, r3
 80133c0:	4610      	mov	r0, r2
 80133c2:	f7ff fe17 	bl	8012ff4 <pick_lfn>
 80133c6:	4603      	mov	r3, r0
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d003      	beq.n	80133d4 <dir_read+0xe6>
 80133cc:	7d7b      	ldrb	r3, [r7, #21]
 80133ce:	3b01      	subs	r3, #1
 80133d0:	b2db      	uxtb	r3, r3
 80133d2:	e000      	b.n	80133d6 <dir_read+0xe8>
 80133d4:	23ff      	movs	r3, #255	; 0xff
 80133d6:	757b      	strb	r3, [r7, #21]
 80133d8:	e011      	b.n	80133fe <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80133da:	7d7b      	ldrb	r3, [r7, #21]
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d109      	bne.n	80133f4 <dir_read+0x106>
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	6a1b      	ldr	r3, [r3, #32]
 80133e4:	4618      	mov	r0, r3
 80133e6:	f7ff ff61 	bl	80132ac <sum_sfn>
 80133ea:	4603      	mov	r3, r0
 80133ec:	461a      	mov	r2, r3
 80133ee:	7d3b      	ldrb	r3, [r7, #20]
 80133f0:	4293      	cmp	r3, r2
 80133f2:	d015      	beq.n	8013420 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	f04f 32ff 	mov.w	r2, #4294967295
 80133fa:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 80133fc:	e010      	b.n	8013420 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80133fe:	2100      	movs	r1, #0
 8013400:	6878      	ldr	r0, [r7, #4]
 8013402:	f7ff fc3c 	bl	8012c7e <dir_next>
 8013406:	4603      	mov	r3, r0
 8013408:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801340a:	7dfb      	ldrb	r3, [r7, #23]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d109      	bne.n	8013424 <dir_read+0x136>
	while (dp->sect) {
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	69db      	ldr	r3, [r3, #28]
 8013414:	2b00      	cmp	r3, #0
 8013416:	f47f af79 	bne.w	801330c <dir_read+0x1e>
 801341a:	e004      	b.n	8013426 <dir_read+0x138>
		if (res != FR_OK) break;
 801341c:	bf00      	nop
 801341e:	e002      	b.n	8013426 <dir_read+0x138>
					break;
 8013420:	bf00      	nop
 8013422:	e000      	b.n	8013426 <dir_read+0x138>
		if (res != FR_OK) break;
 8013424:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8013426:	7dfb      	ldrb	r3, [r7, #23]
 8013428:	2b00      	cmp	r3, #0
 801342a:	d002      	beq.n	8013432 <dir_read+0x144>
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	2200      	movs	r2, #0
 8013430:	61da      	str	r2, [r3, #28]
	return res;
 8013432:	7dfb      	ldrb	r3, [r7, #23]
}
 8013434:	4618      	mov	r0, r3
 8013436:	3718      	adds	r7, #24
 8013438:	46bd      	mov	sp, r7
 801343a:	bd80      	pop	{r7, pc}

0801343c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801343c:	b580      	push	{r7, lr}
 801343e:	b086      	sub	sp, #24
 8013440:	af00      	add	r7, sp, #0
 8013442:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801344a:	2100      	movs	r1, #0
 801344c:	6878      	ldr	r0, [r7, #4]
 801344e:	f7ff fb9b 	bl	8012b88 <dir_sdi>
 8013452:	4603      	mov	r3, r0
 8013454:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8013456:	7dfb      	ldrb	r3, [r7, #23]
 8013458:	2b00      	cmp	r3, #0
 801345a:	d001      	beq.n	8013460 <dir_find+0x24>
 801345c:	7dfb      	ldrb	r3, [r7, #23]
 801345e:	e0a9      	b.n	80135b4 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8013460:	23ff      	movs	r3, #255	; 0xff
 8013462:	753b      	strb	r3, [r7, #20]
 8013464:	7d3b      	ldrb	r3, [r7, #20]
 8013466:	757b      	strb	r3, [r7, #21]
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	f04f 32ff 	mov.w	r2, #4294967295
 801346e:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	69db      	ldr	r3, [r3, #28]
 8013474:	4619      	mov	r1, r3
 8013476:	6938      	ldr	r0, [r7, #16]
 8013478:	f7ff f806 	bl	8012488 <move_window>
 801347c:	4603      	mov	r3, r0
 801347e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013480:	7dfb      	ldrb	r3, [r7, #23]
 8013482:	2b00      	cmp	r3, #0
 8013484:	f040 8090 	bne.w	80135a8 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	6a1b      	ldr	r3, [r3, #32]
 801348c:	781b      	ldrb	r3, [r3, #0]
 801348e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8013490:	7dbb      	ldrb	r3, [r7, #22]
 8013492:	2b00      	cmp	r3, #0
 8013494:	d102      	bne.n	801349c <dir_find+0x60>
 8013496:	2304      	movs	r3, #4
 8013498:	75fb      	strb	r3, [r7, #23]
 801349a:	e08a      	b.n	80135b2 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	6a1b      	ldr	r3, [r3, #32]
 80134a0:	330b      	adds	r3, #11
 80134a2:	781b      	ldrb	r3, [r3, #0]
 80134a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80134a8:	73fb      	strb	r3, [r7, #15]
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	7bfa      	ldrb	r2, [r7, #15]
 80134ae:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80134b0:	7dbb      	ldrb	r3, [r7, #22]
 80134b2:	2be5      	cmp	r3, #229	; 0xe5
 80134b4:	d007      	beq.n	80134c6 <dir_find+0x8a>
 80134b6:	7bfb      	ldrb	r3, [r7, #15]
 80134b8:	f003 0308 	and.w	r3, r3, #8
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d009      	beq.n	80134d4 <dir_find+0x98>
 80134c0:	7bfb      	ldrb	r3, [r7, #15]
 80134c2:	2b0f      	cmp	r3, #15
 80134c4:	d006      	beq.n	80134d4 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80134c6:	23ff      	movs	r3, #255	; 0xff
 80134c8:	757b      	strb	r3, [r7, #21]
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	f04f 32ff 	mov.w	r2, #4294967295
 80134d0:	631a      	str	r2, [r3, #48]	; 0x30
 80134d2:	e05e      	b.n	8013592 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80134d4:	7bfb      	ldrb	r3, [r7, #15]
 80134d6:	2b0f      	cmp	r3, #15
 80134d8:	d136      	bne.n	8013548 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80134e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d154      	bne.n	8013592 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80134e8:	7dbb      	ldrb	r3, [r7, #22]
 80134ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d00d      	beq.n	801350e <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	6a1b      	ldr	r3, [r3, #32]
 80134f6:	7b5b      	ldrb	r3, [r3, #13]
 80134f8:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80134fa:	7dbb      	ldrb	r3, [r7, #22]
 80134fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013500:	75bb      	strb	r3, [r7, #22]
 8013502:	7dbb      	ldrb	r3, [r7, #22]
 8013504:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	695a      	ldr	r2, [r3, #20]
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801350e:	7dba      	ldrb	r2, [r7, #22]
 8013510:	7d7b      	ldrb	r3, [r7, #21]
 8013512:	429a      	cmp	r2, r3
 8013514:	d115      	bne.n	8013542 <dir_find+0x106>
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	6a1b      	ldr	r3, [r3, #32]
 801351a:	330d      	adds	r3, #13
 801351c:	781b      	ldrb	r3, [r3, #0]
 801351e:	7d3a      	ldrb	r2, [r7, #20]
 8013520:	429a      	cmp	r2, r3
 8013522:	d10e      	bne.n	8013542 <dir_find+0x106>
 8013524:	693b      	ldr	r3, [r7, #16]
 8013526:	68da      	ldr	r2, [r3, #12]
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	6a1b      	ldr	r3, [r3, #32]
 801352c:	4619      	mov	r1, r3
 801352e:	4610      	mov	r0, r2
 8013530:	f7ff fcf0 	bl	8012f14 <cmp_lfn>
 8013534:	4603      	mov	r3, r0
 8013536:	2b00      	cmp	r3, #0
 8013538:	d003      	beq.n	8013542 <dir_find+0x106>
 801353a:	7d7b      	ldrb	r3, [r7, #21]
 801353c:	3b01      	subs	r3, #1
 801353e:	b2db      	uxtb	r3, r3
 8013540:	e000      	b.n	8013544 <dir_find+0x108>
 8013542:	23ff      	movs	r3, #255	; 0xff
 8013544:	757b      	strb	r3, [r7, #21]
 8013546:	e024      	b.n	8013592 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8013548:	7d7b      	ldrb	r3, [r7, #21]
 801354a:	2b00      	cmp	r3, #0
 801354c:	d109      	bne.n	8013562 <dir_find+0x126>
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	6a1b      	ldr	r3, [r3, #32]
 8013552:	4618      	mov	r0, r3
 8013554:	f7ff feaa 	bl	80132ac <sum_sfn>
 8013558:	4603      	mov	r3, r0
 801355a:	461a      	mov	r2, r3
 801355c:	7d3b      	ldrb	r3, [r7, #20]
 801355e:	4293      	cmp	r3, r2
 8013560:	d024      	beq.n	80135ac <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013568:	f003 0301 	and.w	r3, r3, #1
 801356c:	2b00      	cmp	r3, #0
 801356e:	d10a      	bne.n	8013586 <dir_find+0x14a>
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	6a18      	ldr	r0, [r3, #32]
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	3324      	adds	r3, #36	; 0x24
 8013578:	220b      	movs	r2, #11
 801357a:	4619      	mov	r1, r3
 801357c:	f7fe fd92 	bl	80120a4 <mem_cmp>
 8013580:	4603      	mov	r3, r0
 8013582:	2b00      	cmp	r3, #0
 8013584:	d014      	beq.n	80135b0 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8013586:	23ff      	movs	r3, #255	; 0xff
 8013588:	757b      	strb	r3, [r7, #21]
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	f04f 32ff 	mov.w	r2, #4294967295
 8013590:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8013592:	2100      	movs	r1, #0
 8013594:	6878      	ldr	r0, [r7, #4]
 8013596:	f7ff fb72 	bl	8012c7e <dir_next>
 801359a:	4603      	mov	r3, r0
 801359c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801359e:	7dfb      	ldrb	r3, [r7, #23]
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	f43f af65 	beq.w	8013470 <dir_find+0x34>
 80135a6:	e004      	b.n	80135b2 <dir_find+0x176>
		if (res != FR_OK) break;
 80135a8:	bf00      	nop
 80135aa:	e002      	b.n	80135b2 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80135ac:	bf00      	nop
 80135ae:	e000      	b.n	80135b2 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80135b0:	bf00      	nop

	return res;
 80135b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80135b4:	4618      	mov	r0, r3
 80135b6:	3718      	adds	r7, #24
 80135b8:	46bd      	mov	sp, r7
 80135ba:	bd80      	pop	{r7, pc}

080135bc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80135bc:	b580      	push	{r7, lr}
 80135be:	b08c      	sub	sp, #48	; 0x30
 80135c0:	af00      	add	r7, sp, #0
 80135c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80135d0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d001      	beq.n	80135dc <dir_register+0x20>
 80135d8:	2306      	movs	r3, #6
 80135da:	e0e0      	b.n	801379e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80135dc:	2300      	movs	r3, #0
 80135de:	627b      	str	r3, [r7, #36]	; 0x24
 80135e0:	e002      	b.n	80135e8 <dir_register+0x2c>
 80135e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135e4:	3301      	adds	r3, #1
 80135e6:	627b      	str	r3, [r7, #36]	; 0x24
 80135e8:	69fb      	ldr	r3, [r7, #28]
 80135ea:	68da      	ldr	r2, [r3, #12]
 80135ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135ee:	005b      	lsls	r3, r3, #1
 80135f0:	4413      	add	r3, r2
 80135f2:	881b      	ldrh	r3, [r3, #0]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d1f4      	bne.n	80135e2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80135fe:	f107 030c 	add.w	r3, r7, #12
 8013602:	220c      	movs	r2, #12
 8013604:	4618      	mov	r0, r3
 8013606:	f7fe fd11 	bl	801202c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801360a:	7dfb      	ldrb	r3, [r7, #23]
 801360c:	f003 0301 	and.w	r3, r3, #1
 8013610:	2b00      	cmp	r3, #0
 8013612:	d032      	beq.n	801367a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	2240      	movs	r2, #64	; 0x40
 8013618:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 801361c:	2301      	movs	r3, #1
 801361e:	62bb      	str	r3, [r7, #40]	; 0x28
 8013620:	e016      	b.n	8013650 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8013628:	69fb      	ldr	r3, [r7, #28]
 801362a:	68da      	ldr	r2, [r3, #12]
 801362c:	f107 010c 	add.w	r1, r7, #12
 8013630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013632:	f7ff fdab 	bl	801318c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8013636:	6878      	ldr	r0, [r7, #4]
 8013638:	f7ff ff00 	bl	801343c <dir_find>
 801363c:	4603      	mov	r3, r0
 801363e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8013642:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013646:	2b00      	cmp	r3, #0
 8013648:	d106      	bne.n	8013658 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801364a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801364c:	3301      	adds	r3, #1
 801364e:	62bb      	str	r3, [r7, #40]	; 0x28
 8013650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013652:	2b63      	cmp	r3, #99	; 0x63
 8013654:	d9e5      	bls.n	8013622 <dir_register+0x66>
 8013656:	e000      	b.n	801365a <dir_register+0x9e>
			if (res != FR_OK) break;
 8013658:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801365a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801365c:	2b64      	cmp	r3, #100	; 0x64
 801365e:	d101      	bne.n	8013664 <dir_register+0xa8>
 8013660:	2307      	movs	r3, #7
 8013662:	e09c      	b.n	801379e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8013664:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013668:	2b04      	cmp	r3, #4
 801366a:	d002      	beq.n	8013672 <dir_register+0xb6>
 801366c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013670:	e095      	b.n	801379e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8013672:	7dfa      	ldrb	r2, [r7, #23]
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801367a:	7dfb      	ldrb	r3, [r7, #23]
 801367c:	f003 0302 	and.w	r3, r3, #2
 8013680:	2b00      	cmp	r3, #0
 8013682:	d007      	beq.n	8013694 <dir_register+0xd8>
 8013684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013686:	330c      	adds	r3, #12
 8013688:	4a47      	ldr	r2, [pc, #284]	; (80137a8 <dir_register+0x1ec>)
 801368a:	fba2 2303 	umull	r2, r3, r2, r3
 801368e:	089b      	lsrs	r3, r3, #2
 8013690:	3301      	adds	r3, #1
 8013692:	e000      	b.n	8013696 <dir_register+0xda>
 8013694:	2301      	movs	r3, #1
 8013696:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8013698:	6a39      	ldr	r1, [r7, #32]
 801369a:	6878      	ldr	r0, [r7, #4]
 801369c:	f7ff fbb4 	bl	8012e08 <dir_alloc>
 80136a0:	4603      	mov	r3, r0
 80136a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80136a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d148      	bne.n	8013740 <dir_register+0x184>
 80136ae:	6a3b      	ldr	r3, [r7, #32]
 80136b0:	3b01      	subs	r3, #1
 80136b2:	623b      	str	r3, [r7, #32]
 80136b4:	6a3b      	ldr	r3, [r7, #32]
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d042      	beq.n	8013740 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	695a      	ldr	r2, [r3, #20]
 80136be:	6a3b      	ldr	r3, [r7, #32]
 80136c0:	015b      	lsls	r3, r3, #5
 80136c2:	1ad3      	subs	r3, r2, r3
 80136c4:	4619      	mov	r1, r3
 80136c6:	6878      	ldr	r0, [r7, #4]
 80136c8:	f7ff fa5e 	bl	8012b88 <dir_sdi>
 80136cc:	4603      	mov	r3, r0
 80136ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80136d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d132      	bne.n	8013740 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	3324      	adds	r3, #36	; 0x24
 80136de:	4618      	mov	r0, r3
 80136e0:	f7ff fde4 	bl	80132ac <sum_sfn>
 80136e4:	4603      	mov	r3, r0
 80136e6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	69db      	ldr	r3, [r3, #28]
 80136ec:	4619      	mov	r1, r3
 80136ee:	69f8      	ldr	r0, [r7, #28]
 80136f0:	f7fe feca 	bl	8012488 <move_window>
 80136f4:	4603      	mov	r3, r0
 80136f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80136fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d11d      	bne.n	801373e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8013702:	69fb      	ldr	r3, [r7, #28]
 8013704:	68d8      	ldr	r0, [r3, #12]
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	6a19      	ldr	r1, [r3, #32]
 801370a:	6a3b      	ldr	r3, [r7, #32]
 801370c:	b2da      	uxtb	r2, r3
 801370e:	7efb      	ldrb	r3, [r7, #27]
 8013710:	f7ff fcd4 	bl	80130bc <put_lfn>
				fs->wflag = 1;
 8013714:	69fb      	ldr	r3, [r7, #28]
 8013716:	2201      	movs	r2, #1
 8013718:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801371a:	2100      	movs	r1, #0
 801371c:	6878      	ldr	r0, [r7, #4]
 801371e:	f7ff faae 	bl	8012c7e <dir_next>
 8013722:	4603      	mov	r3, r0
 8013724:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8013728:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801372c:	2b00      	cmp	r3, #0
 801372e:	d107      	bne.n	8013740 <dir_register+0x184>
 8013730:	6a3b      	ldr	r3, [r7, #32]
 8013732:	3b01      	subs	r3, #1
 8013734:	623b      	str	r3, [r7, #32]
 8013736:	6a3b      	ldr	r3, [r7, #32]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d1d5      	bne.n	80136e8 <dir_register+0x12c>
 801373c:	e000      	b.n	8013740 <dir_register+0x184>
				if (res != FR_OK) break;
 801373e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8013740:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013744:	2b00      	cmp	r3, #0
 8013746:	d128      	bne.n	801379a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	69db      	ldr	r3, [r3, #28]
 801374c:	4619      	mov	r1, r3
 801374e:	69f8      	ldr	r0, [r7, #28]
 8013750:	f7fe fe9a 	bl	8012488 <move_window>
 8013754:	4603      	mov	r3, r0
 8013756:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801375a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801375e:	2b00      	cmp	r3, #0
 8013760:	d11b      	bne.n	801379a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	6a1b      	ldr	r3, [r3, #32]
 8013766:	2220      	movs	r2, #32
 8013768:	2100      	movs	r1, #0
 801376a:	4618      	mov	r0, r3
 801376c:	f7fe fc7f 	bl	801206e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	6a18      	ldr	r0, [r3, #32]
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	3324      	adds	r3, #36	; 0x24
 8013778:	220b      	movs	r2, #11
 801377a:	4619      	mov	r1, r3
 801377c:	f7fe fc56 	bl	801202c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	6a1b      	ldr	r3, [r3, #32]
 801378a:	330c      	adds	r3, #12
 801378c:	f002 0218 	and.w	r2, r2, #24
 8013790:	b2d2      	uxtb	r2, r2
 8013792:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8013794:	69fb      	ldr	r3, [r7, #28]
 8013796:	2201      	movs	r2, #1
 8013798:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801379a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801379e:	4618      	mov	r0, r3
 80137a0:	3730      	adds	r7, #48	; 0x30
 80137a2:	46bd      	mov	sp, r7
 80137a4:	bd80      	pop	{r7, pc}
 80137a6:	bf00      	nop
 80137a8:	4ec4ec4f 	.word	0x4ec4ec4f

080137ac <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80137ac:	b580      	push	{r7, lr}
 80137ae:	b088      	sub	sp, #32
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	6078      	str	r0, [r7, #4]
 80137b4:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80137bc:	683b      	ldr	r3, [r7, #0]
 80137be:	2200      	movs	r2, #0
 80137c0:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	69db      	ldr	r3, [r3, #28]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	f000 80c9 	beq.w	801395e <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137d4:	d032      	beq.n	801383c <get_fileinfo+0x90>
			i = j = 0;
 80137d6:	2300      	movs	r3, #0
 80137d8:	61bb      	str	r3, [r7, #24]
 80137da:	69bb      	ldr	r3, [r7, #24]
 80137dc:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80137de:	e01b      	b.n	8013818 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 80137e0:	89fb      	ldrh	r3, [r7, #14]
 80137e2:	2100      	movs	r1, #0
 80137e4:	4618      	mov	r0, r3
 80137e6:	f7fe fa3b 	bl	8011c60 <ff_convert>
 80137ea:	4603      	mov	r3, r0
 80137ec:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 80137ee:	89fb      	ldrh	r3, [r7, #14]
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d102      	bne.n	80137fa <get_fileinfo+0x4e>
 80137f4:	2300      	movs	r3, #0
 80137f6:	61fb      	str	r3, [r7, #28]
 80137f8:	e01a      	b.n	8013830 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 80137fa:	69fb      	ldr	r3, [r7, #28]
 80137fc:	2bfe      	cmp	r3, #254	; 0xfe
 80137fe:	d902      	bls.n	8013806 <get_fileinfo+0x5a>
 8013800:	2300      	movs	r3, #0
 8013802:	61fb      	str	r3, [r7, #28]
 8013804:	e014      	b.n	8013830 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8013806:	69fb      	ldr	r3, [r7, #28]
 8013808:	1c5a      	adds	r2, r3, #1
 801380a:	61fa      	str	r2, [r7, #28]
 801380c:	89fa      	ldrh	r2, [r7, #14]
 801380e:	b2d1      	uxtb	r1, r2
 8013810:	683a      	ldr	r2, [r7, #0]
 8013812:	4413      	add	r3, r2
 8013814:	460a      	mov	r2, r1
 8013816:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8013818:	693b      	ldr	r3, [r7, #16]
 801381a:	68da      	ldr	r2, [r3, #12]
 801381c:	69bb      	ldr	r3, [r7, #24]
 801381e:	1c59      	adds	r1, r3, #1
 8013820:	61b9      	str	r1, [r7, #24]
 8013822:	005b      	lsls	r3, r3, #1
 8013824:	4413      	add	r3, r2
 8013826:	881b      	ldrh	r3, [r3, #0]
 8013828:	81fb      	strh	r3, [r7, #14]
 801382a:	89fb      	ldrh	r3, [r7, #14]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d1d7      	bne.n	80137e0 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8013830:	683a      	ldr	r2, [r7, #0]
 8013832:	69fb      	ldr	r3, [r7, #28]
 8013834:	4413      	add	r3, r2
 8013836:	3316      	adds	r3, #22
 8013838:	2200      	movs	r2, #0
 801383a:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 801383c:	2300      	movs	r3, #0
 801383e:	61bb      	str	r3, [r7, #24]
 8013840:	69bb      	ldr	r3, [r7, #24]
 8013842:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8013844:	683a      	ldr	r2, [r7, #0]
 8013846:	69fb      	ldr	r3, [r7, #28]
 8013848:	4413      	add	r3, r2
 801384a:	3316      	adds	r3, #22
 801384c:	781b      	ldrb	r3, [r3, #0]
 801384e:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8013850:	e04c      	b.n	80138ec <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	6a1a      	ldr	r2, [r3, #32]
 8013856:	69fb      	ldr	r3, [r7, #28]
 8013858:	1c59      	adds	r1, r3, #1
 801385a:	61f9      	str	r1, [r7, #28]
 801385c:	4413      	add	r3, r2
 801385e:	781b      	ldrb	r3, [r3, #0]
 8013860:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8013862:	7dfb      	ldrb	r3, [r7, #23]
 8013864:	2b20      	cmp	r3, #32
 8013866:	d100      	bne.n	801386a <get_fileinfo+0xbe>
 8013868:	e040      	b.n	80138ec <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801386a:	7dfb      	ldrb	r3, [r7, #23]
 801386c:	2b05      	cmp	r3, #5
 801386e:	d101      	bne.n	8013874 <get_fileinfo+0xc8>
 8013870:	23e5      	movs	r3, #229	; 0xe5
 8013872:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8013874:	69fb      	ldr	r3, [r7, #28]
 8013876:	2b09      	cmp	r3, #9
 8013878:	d10f      	bne.n	801389a <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 801387a:	89bb      	ldrh	r3, [r7, #12]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d105      	bne.n	801388c <get_fileinfo+0xe0>
 8013880:	683a      	ldr	r2, [r7, #0]
 8013882:	69bb      	ldr	r3, [r7, #24]
 8013884:	4413      	add	r3, r2
 8013886:	3316      	adds	r3, #22
 8013888:	222e      	movs	r2, #46	; 0x2e
 801388a:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 801388c:	69bb      	ldr	r3, [r7, #24]
 801388e:	1c5a      	adds	r2, r3, #1
 8013890:	61ba      	str	r2, [r7, #24]
 8013892:	683a      	ldr	r2, [r7, #0]
 8013894:	4413      	add	r3, r2
 8013896:	222e      	movs	r2, #46	; 0x2e
 8013898:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 801389a:	683a      	ldr	r2, [r7, #0]
 801389c:	69bb      	ldr	r3, [r7, #24]
 801389e:	4413      	add	r3, r2
 80138a0:	3309      	adds	r3, #9
 80138a2:	7dfa      	ldrb	r2, [r7, #23]
 80138a4:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 80138a6:	89bb      	ldrh	r3, [r7, #12]
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d11c      	bne.n	80138e6 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 80138ac:	7dfb      	ldrb	r3, [r7, #23]
 80138ae:	2b40      	cmp	r3, #64	; 0x40
 80138b0:	d913      	bls.n	80138da <get_fileinfo+0x12e>
 80138b2:	7dfb      	ldrb	r3, [r7, #23]
 80138b4:	2b5a      	cmp	r3, #90	; 0x5a
 80138b6:	d810      	bhi.n	80138da <get_fileinfo+0x12e>
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	6a1b      	ldr	r3, [r3, #32]
 80138bc:	330c      	adds	r3, #12
 80138be:	781b      	ldrb	r3, [r3, #0]
 80138c0:	461a      	mov	r2, r3
 80138c2:	69fb      	ldr	r3, [r7, #28]
 80138c4:	2b08      	cmp	r3, #8
 80138c6:	d901      	bls.n	80138cc <get_fileinfo+0x120>
 80138c8:	2310      	movs	r3, #16
 80138ca:	e000      	b.n	80138ce <get_fileinfo+0x122>
 80138cc:	2308      	movs	r3, #8
 80138ce:	4013      	ands	r3, r2
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d002      	beq.n	80138da <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 80138d4:	7dfb      	ldrb	r3, [r7, #23]
 80138d6:	3320      	adds	r3, #32
 80138d8:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 80138da:	683a      	ldr	r2, [r7, #0]
 80138dc:	69bb      	ldr	r3, [r7, #24]
 80138de:	4413      	add	r3, r2
 80138e0:	3316      	adds	r3, #22
 80138e2:	7dfa      	ldrb	r2, [r7, #23]
 80138e4:	701a      	strb	r2, [r3, #0]
		}
		j++;
 80138e6:	69bb      	ldr	r3, [r7, #24]
 80138e8:	3301      	adds	r3, #1
 80138ea:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 80138ec:	69fb      	ldr	r3, [r7, #28]
 80138ee:	2b0a      	cmp	r3, #10
 80138f0:	d9af      	bls.n	8013852 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 80138f2:	89bb      	ldrh	r3, [r7, #12]
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d10d      	bne.n	8013914 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 80138f8:	683a      	ldr	r2, [r7, #0]
 80138fa:	69bb      	ldr	r3, [r7, #24]
 80138fc:	4413      	add	r3, r2
 80138fe:	3316      	adds	r3, #22
 8013900:	2200      	movs	r2, #0
 8013902:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	6a1b      	ldr	r3, [r3, #32]
 8013908:	330c      	adds	r3, #12
 801390a:	781b      	ldrb	r3, [r3, #0]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d101      	bne.n	8013914 <get_fileinfo+0x168>
 8013910:	2300      	movs	r3, #0
 8013912:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8013914:	683a      	ldr	r2, [r7, #0]
 8013916:	69bb      	ldr	r3, [r7, #24]
 8013918:	4413      	add	r3, r2
 801391a:	3309      	adds	r3, #9
 801391c:	2200      	movs	r2, #0
 801391e:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	6a1b      	ldr	r3, [r3, #32]
 8013924:	7ada      	ldrb	r2, [r3, #11]
 8013926:	683b      	ldr	r3, [r7, #0]
 8013928:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	6a1b      	ldr	r3, [r3, #32]
 801392e:	331c      	adds	r3, #28
 8013930:	4618      	mov	r0, r3
 8013932:	f7fe fb11 	bl	8011f58 <ld_dword>
 8013936:	4602      	mov	r2, r0
 8013938:	683b      	ldr	r3, [r7, #0]
 801393a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	6a1b      	ldr	r3, [r3, #32]
 8013940:	3316      	adds	r3, #22
 8013942:	4618      	mov	r0, r3
 8013944:	f7fe fb08 	bl	8011f58 <ld_dword>
 8013948:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801394a:	68bb      	ldr	r3, [r7, #8]
 801394c:	b29a      	uxth	r2, r3
 801394e:	683b      	ldr	r3, [r7, #0]
 8013950:	80da      	strh	r2, [r3, #6]
 8013952:	68bb      	ldr	r3, [r7, #8]
 8013954:	0c1b      	lsrs	r3, r3, #16
 8013956:	b29a      	uxth	r2, r3
 8013958:	683b      	ldr	r3, [r7, #0]
 801395a:	809a      	strh	r2, [r3, #4]
 801395c:	e000      	b.n	8013960 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801395e:	bf00      	nop
}
 8013960:	3720      	adds	r7, #32
 8013962:	46bd      	mov	sp, r7
 8013964:	bd80      	pop	{r7, pc}
	...

08013968 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 8013968:	b480      	push	{r7}
 801396a:	b085      	sub	sp, #20
 801396c:	af00      	add	r7, sp, #0
 801396e:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	1c59      	adds	r1, r3, #1
 8013976:	687a      	ldr	r2, [r7, #4]
 8013978:	6011      	str	r1, [r2, #0]
 801397a:	781b      	ldrb	r3, [r3, #0]
 801397c:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 801397e:	89fb      	ldrh	r3, [r7, #14]
 8013980:	2b60      	cmp	r3, #96	; 0x60
 8013982:	d905      	bls.n	8013990 <get_achar+0x28>
 8013984:	89fb      	ldrh	r3, [r7, #14]
 8013986:	2b7a      	cmp	r3, #122	; 0x7a
 8013988:	d802      	bhi.n	8013990 <get_achar+0x28>
 801398a:	89fb      	ldrh	r3, [r7, #14]
 801398c:	3b20      	subs	r3, #32
 801398e:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8013990:	89fb      	ldrh	r3, [r7, #14]
 8013992:	2b7f      	cmp	r3, #127	; 0x7f
 8013994:	d904      	bls.n	80139a0 <get_achar+0x38>
 8013996:	89fb      	ldrh	r3, [r7, #14]
 8013998:	3b80      	subs	r3, #128	; 0x80
 801399a:	4a05      	ldr	r2, [pc, #20]	; (80139b0 <get_achar+0x48>)
 801399c:	5cd3      	ldrb	r3, [r2, r3]
 801399e:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 80139a0:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 80139a2:	4618      	mov	r0, r3
 80139a4:	3714      	adds	r7, #20
 80139a6:	46bd      	mov	sp, r7
 80139a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ac:	4770      	bx	lr
 80139ae:	bf00      	nop
 80139b0:	0802a414 	.word	0x0802a414

080139b4 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 80139b4:	b580      	push	{r7, lr}
 80139b6:	b08a      	sub	sp, #40	; 0x28
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	60f8      	str	r0, [r7, #12]
 80139bc:	60b9      	str	r1, [r7, #8]
 80139be:	607a      	str	r2, [r7, #4]
 80139c0:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 80139c2:	e009      	b.n	80139d8 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 80139c4:	f107 0308 	add.w	r3, r7, #8
 80139c8:	4618      	mov	r0, r3
 80139ca:	f7ff ffcd 	bl	8013968 <get_achar>
 80139ce:	4603      	mov	r3, r0
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d101      	bne.n	80139d8 <pattern_matching+0x24>
 80139d4:	2300      	movs	r3, #0
 80139d6:	e064      	b.n	8013aa2 <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	1e5a      	subs	r2, r3, #1
 80139dc:	607a      	str	r2, [r7, #4]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d1f0      	bne.n	80139c4 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	781b      	ldrb	r3, [r3, #0]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d104      	bne.n	80139f4 <pattern_matching+0x40>
 80139ea:	683b      	ldr	r3, [r7, #0]
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d001      	beq.n	80139f4 <pattern_matching+0x40>
 80139f0:	2301      	movs	r3, #1
 80139f2:	e056      	b.n	8013aa2 <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	617b      	str	r3, [r7, #20]
 80139f8:	68bb      	ldr	r3, [r7, #8]
 80139fa:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 80139fc:	697b      	ldr	r3, [r7, #20]
 80139fe:	781b      	ldrb	r3, [r3, #0]
 8013a00:	2b3f      	cmp	r3, #63	; 0x3f
 8013a02:	d003      	beq.n	8013a0c <pattern_matching+0x58>
 8013a04:	697b      	ldr	r3, [r7, #20]
 8013a06:	781b      	ldrb	r3, [r3, #0]
 8013a08:	2b2a      	cmp	r3, #42	; 0x2a
 8013a0a:	d126      	bne.n	8013a5a <pattern_matching+0xa6>
				nm = nx = 0;
 8013a0c:	2300      	movs	r3, #0
 8013a0e:	61fb      	str	r3, [r7, #28]
 8013a10:	69fb      	ldr	r3, [r7, #28]
 8013a12:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 8013a14:	697b      	ldr	r3, [r7, #20]
 8013a16:	1c5a      	adds	r2, r3, #1
 8013a18:	617a      	str	r2, [r7, #20]
 8013a1a:	781b      	ldrb	r3, [r3, #0]
 8013a1c:	2b3f      	cmp	r3, #63	; 0x3f
 8013a1e:	d103      	bne.n	8013a28 <pattern_matching+0x74>
 8013a20:	6a3b      	ldr	r3, [r7, #32]
 8013a22:	3301      	adds	r3, #1
 8013a24:	623b      	str	r3, [r7, #32]
 8013a26:	e001      	b.n	8013a2c <pattern_matching+0x78>
 8013a28:	2301      	movs	r3, #1
 8013a2a:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 8013a2c:	697b      	ldr	r3, [r7, #20]
 8013a2e:	781b      	ldrb	r3, [r3, #0]
 8013a30:	2b3f      	cmp	r3, #63	; 0x3f
 8013a32:	d0ef      	beq.n	8013a14 <pattern_matching+0x60>
 8013a34:	697b      	ldr	r3, [r7, #20]
 8013a36:	781b      	ldrb	r3, [r3, #0]
 8013a38:	2b2a      	cmp	r3, #42	; 0x2a
 8013a3a:	d0eb      	beq.n	8013a14 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 8013a3c:	6978      	ldr	r0, [r7, #20]
 8013a3e:	6939      	ldr	r1, [r7, #16]
 8013a40:	69fb      	ldr	r3, [r7, #28]
 8013a42:	6a3a      	ldr	r2, [r7, #32]
 8013a44:	f7ff ffb6 	bl	80139b4 <pattern_matching>
 8013a48:	4603      	mov	r3, r0
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d001      	beq.n	8013a52 <pattern_matching+0x9e>
 8013a4e:	2301      	movs	r3, #1
 8013a50:	e027      	b.n	8013aa2 <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 8013a52:	693b      	ldr	r3, [r7, #16]
 8013a54:	781b      	ldrb	r3, [r3, #0]
 8013a56:	84fb      	strh	r3, [r7, #38]	; 0x26
 8013a58:	e017      	b.n	8013a8a <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 8013a5a:	f107 0314 	add.w	r3, r7, #20
 8013a5e:	4618      	mov	r0, r3
 8013a60:	f7ff ff82 	bl	8013968 <get_achar>
 8013a64:	4603      	mov	r3, r0
 8013a66:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 8013a68:	f107 0310 	add.w	r3, r7, #16
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	f7ff ff7b 	bl	8013968 <get_achar>
 8013a72:	4603      	mov	r3, r0
 8013a74:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 8013a76:	8b7a      	ldrh	r2, [r7, #26]
 8013a78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013a7a:	429a      	cmp	r2, r3
 8013a7c:	d104      	bne.n	8013a88 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 8013a7e:	8b7b      	ldrh	r3, [r7, #26]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d1bb      	bne.n	80139fc <pattern_matching+0x48>
 8013a84:	2301      	movs	r3, #1
 8013a86:	e00c      	b.n	8013aa2 <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 8013a88:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 8013a8a:	f107 0308 	add.w	r3, r7, #8
 8013a8e:	4618      	mov	r0, r3
 8013a90:	f7ff ff6a 	bl	8013968 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 8013a94:	683b      	ldr	r3, [r7, #0]
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d002      	beq.n	8013aa0 <pattern_matching+0xec>
 8013a9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d1a9      	bne.n	80139f4 <pattern_matching+0x40>

	return 0;
 8013aa0:	2300      	movs	r3, #0
}
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	3728      	adds	r7, #40	; 0x28
 8013aa6:	46bd      	mov	sp, r7
 8013aa8:	bd80      	pop	{r7, pc}
	...

08013aac <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8013aac:	b580      	push	{r7, lr}
 8013aae:	b08a      	sub	sp, #40	; 0x28
 8013ab0:	af00      	add	r7, sp, #0
 8013ab2:	6078      	str	r0, [r7, #4]
 8013ab4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8013ab6:	683b      	ldr	r3, [r7, #0]
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	613b      	str	r3, [r7, #16]
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	68db      	ldr	r3, [r3, #12]
 8013ac2:	60fb      	str	r3, [r7, #12]
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	617b      	str	r3, [r7, #20]
 8013ac8:	697b      	ldr	r3, [r7, #20]
 8013aca:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8013acc:	69bb      	ldr	r3, [r7, #24]
 8013ace:	1c5a      	adds	r2, r3, #1
 8013ad0:	61ba      	str	r2, [r7, #24]
 8013ad2:	693a      	ldr	r2, [r7, #16]
 8013ad4:	4413      	add	r3, r2
 8013ad6:	781b      	ldrb	r3, [r3, #0]
 8013ad8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8013ada:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013adc:	2b1f      	cmp	r3, #31
 8013ade:	d940      	bls.n	8013b62 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8013ae0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013ae2:	2b2f      	cmp	r3, #47	; 0x2f
 8013ae4:	d006      	beq.n	8013af4 <create_name+0x48>
 8013ae6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013ae8:	2b5c      	cmp	r3, #92	; 0x5c
 8013aea:	d110      	bne.n	8013b0e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8013aec:	e002      	b.n	8013af4 <create_name+0x48>
 8013aee:	69bb      	ldr	r3, [r7, #24]
 8013af0:	3301      	adds	r3, #1
 8013af2:	61bb      	str	r3, [r7, #24]
 8013af4:	693a      	ldr	r2, [r7, #16]
 8013af6:	69bb      	ldr	r3, [r7, #24]
 8013af8:	4413      	add	r3, r2
 8013afa:	781b      	ldrb	r3, [r3, #0]
 8013afc:	2b2f      	cmp	r3, #47	; 0x2f
 8013afe:	d0f6      	beq.n	8013aee <create_name+0x42>
 8013b00:	693a      	ldr	r2, [r7, #16]
 8013b02:	69bb      	ldr	r3, [r7, #24]
 8013b04:	4413      	add	r3, r2
 8013b06:	781b      	ldrb	r3, [r3, #0]
 8013b08:	2b5c      	cmp	r3, #92	; 0x5c
 8013b0a:	d0f0      	beq.n	8013aee <create_name+0x42>
			break;
 8013b0c:	e02a      	b.n	8013b64 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8013b0e:	697b      	ldr	r3, [r7, #20]
 8013b10:	2bfe      	cmp	r3, #254	; 0xfe
 8013b12:	d901      	bls.n	8013b18 <create_name+0x6c>
 8013b14:	2306      	movs	r3, #6
 8013b16:	e177      	b.n	8013e08 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8013b18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013b1a:	b2db      	uxtb	r3, r3
 8013b1c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8013b1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013b20:	2101      	movs	r1, #1
 8013b22:	4618      	mov	r0, r3
 8013b24:	f7fe f89c 	bl	8011c60 <ff_convert>
 8013b28:	4603      	mov	r3, r0
 8013b2a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8013b2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d101      	bne.n	8013b36 <create_name+0x8a>
 8013b32:	2306      	movs	r3, #6
 8013b34:	e168      	b.n	8013e08 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8013b36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013b38:	2b7f      	cmp	r3, #127	; 0x7f
 8013b3a:	d809      	bhi.n	8013b50 <create_name+0xa4>
 8013b3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013b3e:	4619      	mov	r1, r3
 8013b40:	48b3      	ldr	r0, [pc, #716]	; (8013e10 <create_name+0x364>)
 8013b42:	f7fe fad6 	bl	80120f2 <chk_chr>
 8013b46:	4603      	mov	r3, r0
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d001      	beq.n	8013b50 <create_name+0xa4>
 8013b4c:	2306      	movs	r3, #6
 8013b4e:	e15b      	b.n	8013e08 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8013b50:	697b      	ldr	r3, [r7, #20]
 8013b52:	1c5a      	adds	r2, r3, #1
 8013b54:	617a      	str	r2, [r7, #20]
 8013b56:	005b      	lsls	r3, r3, #1
 8013b58:	68fa      	ldr	r2, [r7, #12]
 8013b5a:	4413      	add	r3, r2
 8013b5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013b5e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8013b60:	e7b4      	b.n	8013acc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8013b62:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8013b64:	693a      	ldr	r2, [r7, #16]
 8013b66:	69bb      	ldr	r3, [r7, #24]
 8013b68:	441a      	add	r2, r3
 8013b6a:	683b      	ldr	r3, [r7, #0]
 8013b6c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8013b6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013b70:	2b1f      	cmp	r3, #31
 8013b72:	d801      	bhi.n	8013b78 <create_name+0xcc>
 8013b74:	2304      	movs	r3, #4
 8013b76:	e000      	b.n	8013b7a <create_name+0xce>
 8013b78:	2300      	movs	r3, #0
 8013b7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8013b7e:	e011      	b.n	8013ba4 <create_name+0xf8>
		w = lfn[di - 1];
 8013b80:	697a      	ldr	r2, [r7, #20]
 8013b82:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013b86:	4413      	add	r3, r2
 8013b88:	005b      	lsls	r3, r3, #1
 8013b8a:	68fa      	ldr	r2, [r7, #12]
 8013b8c:	4413      	add	r3, r2
 8013b8e:	881b      	ldrh	r3, [r3, #0]
 8013b90:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8013b92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013b94:	2b20      	cmp	r3, #32
 8013b96:	d002      	beq.n	8013b9e <create_name+0xf2>
 8013b98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013b9a:	2b2e      	cmp	r3, #46	; 0x2e
 8013b9c:	d106      	bne.n	8013bac <create_name+0x100>
		di--;
 8013b9e:	697b      	ldr	r3, [r7, #20]
 8013ba0:	3b01      	subs	r3, #1
 8013ba2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8013ba4:	697b      	ldr	r3, [r7, #20]
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d1ea      	bne.n	8013b80 <create_name+0xd4>
 8013baa:	e000      	b.n	8013bae <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8013bac:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8013bae:	697b      	ldr	r3, [r7, #20]
 8013bb0:	005b      	lsls	r3, r3, #1
 8013bb2:	68fa      	ldr	r2, [r7, #12]
 8013bb4:	4413      	add	r3, r2
 8013bb6:	2200      	movs	r2, #0
 8013bb8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8013bba:	697b      	ldr	r3, [r7, #20]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d101      	bne.n	8013bc4 <create_name+0x118>
 8013bc0:	2306      	movs	r3, #6
 8013bc2:	e121      	b.n	8013e08 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	3324      	adds	r3, #36	; 0x24
 8013bc8:	220b      	movs	r2, #11
 8013bca:	2120      	movs	r1, #32
 8013bcc:	4618      	mov	r0, r3
 8013bce:	f7fe fa4e 	bl	801206e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8013bd2:	2300      	movs	r3, #0
 8013bd4:	61bb      	str	r3, [r7, #24]
 8013bd6:	e002      	b.n	8013bde <create_name+0x132>
 8013bd8:	69bb      	ldr	r3, [r7, #24]
 8013bda:	3301      	adds	r3, #1
 8013bdc:	61bb      	str	r3, [r7, #24]
 8013bde:	69bb      	ldr	r3, [r7, #24]
 8013be0:	005b      	lsls	r3, r3, #1
 8013be2:	68fa      	ldr	r2, [r7, #12]
 8013be4:	4413      	add	r3, r2
 8013be6:	881b      	ldrh	r3, [r3, #0]
 8013be8:	2b20      	cmp	r3, #32
 8013bea:	d0f5      	beq.n	8013bd8 <create_name+0x12c>
 8013bec:	69bb      	ldr	r3, [r7, #24]
 8013bee:	005b      	lsls	r3, r3, #1
 8013bf0:	68fa      	ldr	r2, [r7, #12]
 8013bf2:	4413      	add	r3, r2
 8013bf4:	881b      	ldrh	r3, [r3, #0]
 8013bf6:	2b2e      	cmp	r3, #46	; 0x2e
 8013bf8:	d0ee      	beq.n	8013bd8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8013bfa:	69bb      	ldr	r3, [r7, #24]
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d009      	beq.n	8013c14 <create_name+0x168>
 8013c00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013c04:	f043 0303 	orr.w	r3, r3, #3
 8013c08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8013c0c:	e002      	b.n	8013c14 <create_name+0x168>
 8013c0e:	697b      	ldr	r3, [r7, #20]
 8013c10:	3b01      	subs	r3, #1
 8013c12:	617b      	str	r3, [r7, #20]
 8013c14:	697b      	ldr	r3, [r7, #20]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d009      	beq.n	8013c2e <create_name+0x182>
 8013c1a:	697a      	ldr	r2, [r7, #20]
 8013c1c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013c20:	4413      	add	r3, r2
 8013c22:	005b      	lsls	r3, r3, #1
 8013c24:	68fa      	ldr	r2, [r7, #12]
 8013c26:	4413      	add	r3, r2
 8013c28:	881b      	ldrh	r3, [r3, #0]
 8013c2a:	2b2e      	cmp	r3, #46	; 0x2e
 8013c2c:	d1ef      	bne.n	8013c0e <create_name+0x162>

	i = b = 0; ni = 8;
 8013c2e:	2300      	movs	r3, #0
 8013c30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013c34:	2300      	movs	r3, #0
 8013c36:	623b      	str	r3, [r7, #32]
 8013c38:	2308      	movs	r3, #8
 8013c3a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8013c3c:	69bb      	ldr	r3, [r7, #24]
 8013c3e:	1c5a      	adds	r2, r3, #1
 8013c40:	61ba      	str	r2, [r7, #24]
 8013c42:	005b      	lsls	r3, r3, #1
 8013c44:	68fa      	ldr	r2, [r7, #12]
 8013c46:	4413      	add	r3, r2
 8013c48:	881b      	ldrh	r3, [r3, #0]
 8013c4a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8013c4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	f000 8090 	beq.w	8013d74 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8013c54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013c56:	2b20      	cmp	r3, #32
 8013c58:	d006      	beq.n	8013c68 <create_name+0x1bc>
 8013c5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013c5c:	2b2e      	cmp	r3, #46	; 0x2e
 8013c5e:	d10a      	bne.n	8013c76 <create_name+0x1ca>
 8013c60:	69ba      	ldr	r2, [r7, #24]
 8013c62:	697b      	ldr	r3, [r7, #20]
 8013c64:	429a      	cmp	r2, r3
 8013c66:	d006      	beq.n	8013c76 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8013c68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013c6c:	f043 0303 	orr.w	r3, r3, #3
 8013c70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013c74:	e07d      	b.n	8013d72 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8013c76:	6a3a      	ldr	r2, [r7, #32]
 8013c78:	69fb      	ldr	r3, [r7, #28]
 8013c7a:	429a      	cmp	r2, r3
 8013c7c:	d203      	bcs.n	8013c86 <create_name+0x1da>
 8013c7e:	69ba      	ldr	r2, [r7, #24]
 8013c80:	697b      	ldr	r3, [r7, #20]
 8013c82:	429a      	cmp	r2, r3
 8013c84:	d123      	bne.n	8013cce <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8013c86:	69fb      	ldr	r3, [r7, #28]
 8013c88:	2b0b      	cmp	r3, #11
 8013c8a:	d106      	bne.n	8013c9a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8013c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013c90:	f043 0303 	orr.w	r3, r3, #3
 8013c94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013c98:	e06f      	b.n	8013d7a <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8013c9a:	69ba      	ldr	r2, [r7, #24]
 8013c9c:	697b      	ldr	r3, [r7, #20]
 8013c9e:	429a      	cmp	r2, r3
 8013ca0:	d005      	beq.n	8013cae <create_name+0x202>
 8013ca2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013ca6:	f043 0303 	orr.w	r3, r3, #3
 8013caa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8013cae:	69ba      	ldr	r2, [r7, #24]
 8013cb0:	697b      	ldr	r3, [r7, #20]
 8013cb2:	429a      	cmp	r2, r3
 8013cb4:	d860      	bhi.n	8013d78 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8013cb6:	697b      	ldr	r3, [r7, #20]
 8013cb8:	61bb      	str	r3, [r7, #24]
 8013cba:	2308      	movs	r3, #8
 8013cbc:	623b      	str	r3, [r7, #32]
 8013cbe:	230b      	movs	r3, #11
 8013cc0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8013cc2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013cc6:	009b      	lsls	r3, r3, #2
 8013cc8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013ccc:	e051      	b.n	8013d72 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8013cce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013cd0:	2b7f      	cmp	r3, #127	; 0x7f
 8013cd2:	d914      	bls.n	8013cfe <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8013cd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013cd6:	2100      	movs	r1, #0
 8013cd8:	4618      	mov	r0, r3
 8013cda:	f7fd ffc1 	bl	8011c60 <ff_convert>
 8013cde:	4603      	mov	r3, r0
 8013ce0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8013ce2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d004      	beq.n	8013cf2 <create_name+0x246>
 8013ce8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013cea:	3b80      	subs	r3, #128	; 0x80
 8013cec:	4a49      	ldr	r2, [pc, #292]	; (8013e14 <create_name+0x368>)
 8013cee:	5cd3      	ldrb	r3, [r2, r3]
 8013cf0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8013cf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013cf6:	f043 0302 	orr.w	r3, r3, #2
 8013cfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8013cfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d007      	beq.n	8013d14 <create_name+0x268>
 8013d04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013d06:	4619      	mov	r1, r3
 8013d08:	4843      	ldr	r0, [pc, #268]	; (8013e18 <create_name+0x36c>)
 8013d0a:	f7fe f9f2 	bl	80120f2 <chk_chr>
 8013d0e:	4603      	mov	r3, r0
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d008      	beq.n	8013d26 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8013d14:	235f      	movs	r3, #95	; 0x5f
 8013d16:	84bb      	strh	r3, [r7, #36]	; 0x24
 8013d18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d1c:	f043 0303 	orr.w	r3, r3, #3
 8013d20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013d24:	e01b      	b.n	8013d5e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8013d26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013d28:	2b40      	cmp	r3, #64	; 0x40
 8013d2a:	d909      	bls.n	8013d40 <create_name+0x294>
 8013d2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013d2e:	2b5a      	cmp	r3, #90	; 0x5a
 8013d30:	d806      	bhi.n	8013d40 <create_name+0x294>
					b |= 2;
 8013d32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013d36:	f043 0302 	orr.w	r3, r3, #2
 8013d3a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013d3e:	e00e      	b.n	8013d5e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8013d40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013d42:	2b60      	cmp	r3, #96	; 0x60
 8013d44:	d90b      	bls.n	8013d5e <create_name+0x2b2>
 8013d46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013d48:	2b7a      	cmp	r3, #122	; 0x7a
 8013d4a:	d808      	bhi.n	8013d5e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8013d4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013d50:	f043 0301 	orr.w	r3, r3, #1
 8013d54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013d58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013d5a:	3b20      	subs	r3, #32
 8013d5c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8013d5e:	6a3b      	ldr	r3, [r7, #32]
 8013d60:	1c5a      	adds	r2, r3, #1
 8013d62:	623a      	str	r2, [r7, #32]
 8013d64:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013d66:	b2d1      	uxtb	r1, r2
 8013d68:	687a      	ldr	r2, [r7, #4]
 8013d6a:	4413      	add	r3, r2
 8013d6c:	460a      	mov	r2, r1
 8013d6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8013d72:	e763      	b.n	8013c3c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8013d74:	bf00      	nop
 8013d76:	e000      	b.n	8013d7a <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8013d78:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013d80:	2be5      	cmp	r3, #229	; 0xe5
 8013d82:	d103      	bne.n	8013d8c <create_name+0x2e0>
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	2205      	movs	r2, #5
 8013d88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8013d8c:	69fb      	ldr	r3, [r7, #28]
 8013d8e:	2b08      	cmp	r3, #8
 8013d90:	d104      	bne.n	8013d9c <create_name+0x2f0>
 8013d92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013d96:	009b      	lsls	r3, r3, #2
 8013d98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8013d9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013da0:	f003 030c 	and.w	r3, r3, #12
 8013da4:	2b0c      	cmp	r3, #12
 8013da6:	d005      	beq.n	8013db4 <create_name+0x308>
 8013da8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013dac:	f003 0303 	and.w	r3, r3, #3
 8013db0:	2b03      	cmp	r3, #3
 8013db2:	d105      	bne.n	8013dc0 <create_name+0x314>
 8013db4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013db8:	f043 0302 	orr.w	r3, r3, #2
 8013dbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8013dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013dc4:	f003 0302 	and.w	r3, r3, #2
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d117      	bne.n	8013dfc <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8013dcc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013dd0:	f003 0303 	and.w	r3, r3, #3
 8013dd4:	2b01      	cmp	r3, #1
 8013dd6:	d105      	bne.n	8013de4 <create_name+0x338>
 8013dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013ddc:	f043 0310 	orr.w	r3, r3, #16
 8013de0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8013de4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013de8:	f003 030c 	and.w	r3, r3, #12
 8013dec:	2b04      	cmp	r3, #4
 8013dee:	d105      	bne.n	8013dfc <create_name+0x350>
 8013df0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013df4:	f043 0308 	orr.w	r3, r3, #8
 8013df8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013e02:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8013e06:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8013e08:	4618      	mov	r0, r3
 8013e0a:	3728      	adds	r7, #40	; 0x28
 8013e0c:	46bd      	mov	sp, r7
 8013e0e:	bd80      	pop	{r7, pc}
 8013e10:	080215e0 	.word	0x080215e0
 8013e14:	0802a414 	.word	0x0802a414
 8013e18:	080215ec 	.word	0x080215ec

08013e1c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8013e1c:	b580      	push	{r7, lr}
 8013e1e:	b086      	sub	sp, #24
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	6078      	str	r0, [r7, #4]
 8013e24:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8013e2a:	693b      	ldr	r3, [r7, #16]
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8013e30:	e002      	b.n	8013e38 <follow_path+0x1c>
 8013e32:	683b      	ldr	r3, [r7, #0]
 8013e34:	3301      	adds	r3, #1
 8013e36:	603b      	str	r3, [r7, #0]
 8013e38:	683b      	ldr	r3, [r7, #0]
 8013e3a:	781b      	ldrb	r3, [r3, #0]
 8013e3c:	2b2f      	cmp	r3, #47	; 0x2f
 8013e3e:	d0f8      	beq.n	8013e32 <follow_path+0x16>
 8013e40:	683b      	ldr	r3, [r7, #0]
 8013e42:	781b      	ldrb	r3, [r3, #0]
 8013e44:	2b5c      	cmp	r3, #92	; 0x5c
 8013e46:	d0f4      	beq.n	8013e32 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8013e48:	693b      	ldr	r3, [r7, #16]
 8013e4a:	2200      	movs	r2, #0
 8013e4c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8013e4e:	683b      	ldr	r3, [r7, #0]
 8013e50:	781b      	ldrb	r3, [r3, #0]
 8013e52:	2b1f      	cmp	r3, #31
 8013e54:	d80a      	bhi.n	8013e6c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	2280      	movs	r2, #128	; 0x80
 8013e5a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8013e5e:	2100      	movs	r1, #0
 8013e60:	6878      	ldr	r0, [r7, #4]
 8013e62:	f7fe fe91 	bl	8012b88 <dir_sdi>
 8013e66:	4603      	mov	r3, r0
 8013e68:	75fb      	strb	r3, [r7, #23]
 8013e6a:	e043      	b.n	8013ef4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013e6c:	463b      	mov	r3, r7
 8013e6e:	4619      	mov	r1, r3
 8013e70:	6878      	ldr	r0, [r7, #4]
 8013e72:	f7ff fe1b 	bl	8013aac <create_name>
 8013e76:	4603      	mov	r3, r0
 8013e78:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013e7a:	7dfb      	ldrb	r3, [r7, #23]
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d134      	bne.n	8013eea <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8013e80:	6878      	ldr	r0, [r7, #4]
 8013e82:	f7ff fadb 	bl	801343c <dir_find>
 8013e86:	4603      	mov	r3, r0
 8013e88:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013e90:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8013e92:	7dfb      	ldrb	r3, [r7, #23]
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d00a      	beq.n	8013eae <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013e98:	7dfb      	ldrb	r3, [r7, #23]
 8013e9a:	2b04      	cmp	r3, #4
 8013e9c:	d127      	bne.n	8013eee <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8013e9e:	7afb      	ldrb	r3, [r7, #11]
 8013ea0:	f003 0304 	and.w	r3, r3, #4
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d122      	bne.n	8013eee <follow_path+0xd2>
 8013ea8:	2305      	movs	r3, #5
 8013eaa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8013eac:	e01f      	b.n	8013eee <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013eae:	7afb      	ldrb	r3, [r7, #11]
 8013eb0:	f003 0304 	and.w	r3, r3, #4
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d11c      	bne.n	8013ef2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8013eb8:	693b      	ldr	r3, [r7, #16]
 8013eba:	799b      	ldrb	r3, [r3, #6]
 8013ebc:	f003 0310 	and.w	r3, r3, #16
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d102      	bne.n	8013eca <follow_path+0xae>
				res = FR_NO_PATH; break;
 8013ec4:	2305      	movs	r3, #5
 8013ec6:	75fb      	strb	r3, [r7, #23]
 8013ec8:	e014      	b.n	8013ef4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	695b      	ldr	r3, [r3, #20]
 8013ed4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ed8:	4413      	add	r3, r2
 8013eda:	4619      	mov	r1, r3
 8013edc:	68f8      	ldr	r0, [r7, #12]
 8013ede:	f7fe ffda 	bl	8012e96 <ld_clust>
 8013ee2:	4602      	mov	r2, r0
 8013ee4:	693b      	ldr	r3, [r7, #16]
 8013ee6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013ee8:	e7c0      	b.n	8013e6c <follow_path+0x50>
			if (res != FR_OK) break;
 8013eea:	bf00      	nop
 8013eec:	e002      	b.n	8013ef4 <follow_path+0xd8>
				break;
 8013eee:	bf00      	nop
 8013ef0:	e000      	b.n	8013ef4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013ef2:	bf00      	nop
			}
		}
	}

	return res;
 8013ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ef6:	4618      	mov	r0, r3
 8013ef8:	3718      	adds	r7, #24
 8013efa:	46bd      	mov	sp, r7
 8013efc:	bd80      	pop	{r7, pc}

08013efe <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8013efe:	b480      	push	{r7}
 8013f00:	b087      	sub	sp, #28
 8013f02:	af00      	add	r7, sp, #0
 8013f04:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8013f06:	f04f 33ff 	mov.w	r3, #4294967295
 8013f0a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d031      	beq.n	8013f78 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	617b      	str	r3, [r7, #20]
 8013f1a:	e002      	b.n	8013f22 <get_ldnumber+0x24>
 8013f1c:	697b      	ldr	r3, [r7, #20]
 8013f1e:	3301      	adds	r3, #1
 8013f20:	617b      	str	r3, [r7, #20]
 8013f22:	697b      	ldr	r3, [r7, #20]
 8013f24:	781b      	ldrb	r3, [r3, #0]
 8013f26:	2b1f      	cmp	r3, #31
 8013f28:	d903      	bls.n	8013f32 <get_ldnumber+0x34>
 8013f2a:	697b      	ldr	r3, [r7, #20]
 8013f2c:	781b      	ldrb	r3, [r3, #0]
 8013f2e:	2b3a      	cmp	r3, #58	; 0x3a
 8013f30:	d1f4      	bne.n	8013f1c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8013f32:	697b      	ldr	r3, [r7, #20]
 8013f34:	781b      	ldrb	r3, [r3, #0]
 8013f36:	2b3a      	cmp	r3, #58	; 0x3a
 8013f38:	d11c      	bne.n	8013f74 <get_ldnumber+0x76>
			tp = *path;
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	1c5a      	adds	r2, r3, #1
 8013f44:	60fa      	str	r2, [r7, #12]
 8013f46:	781b      	ldrb	r3, [r3, #0]
 8013f48:	3b30      	subs	r3, #48	; 0x30
 8013f4a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8013f4c:	68bb      	ldr	r3, [r7, #8]
 8013f4e:	2b09      	cmp	r3, #9
 8013f50:	d80e      	bhi.n	8013f70 <get_ldnumber+0x72>
 8013f52:	68fa      	ldr	r2, [r7, #12]
 8013f54:	697b      	ldr	r3, [r7, #20]
 8013f56:	429a      	cmp	r2, r3
 8013f58:	d10a      	bne.n	8013f70 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8013f5a:	68bb      	ldr	r3, [r7, #8]
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d107      	bne.n	8013f70 <get_ldnumber+0x72>
					vol = (int)i;
 8013f60:	68bb      	ldr	r3, [r7, #8]
 8013f62:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8013f64:	697b      	ldr	r3, [r7, #20]
 8013f66:	3301      	adds	r3, #1
 8013f68:	617b      	str	r3, [r7, #20]
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	697a      	ldr	r2, [r7, #20]
 8013f6e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8013f70:	693b      	ldr	r3, [r7, #16]
 8013f72:	e002      	b.n	8013f7a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8013f74:	2300      	movs	r3, #0
 8013f76:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8013f78:	693b      	ldr	r3, [r7, #16]
}
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	371c      	adds	r7, #28
 8013f7e:	46bd      	mov	sp, r7
 8013f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f84:	4770      	bx	lr
	...

08013f88 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8013f88:	b580      	push	{r7, lr}
 8013f8a:	b082      	sub	sp, #8
 8013f8c:	af00      	add	r7, sp, #0
 8013f8e:	6078      	str	r0, [r7, #4]
 8013f90:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	2200      	movs	r2, #0
 8013f96:	70da      	strb	r2, [r3, #3]
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8013f9e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8013fa0:	6839      	ldr	r1, [r7, #0]
 8013fa2:	6878      	ldr	r0, [r7, #4]
 8013fa4:	f7fe fa70 	bl	8012488 <move_window>
 8013fa8:	4603      	mov	r3, r0
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d001      	beq.n	8013fb2 <check_fs+0x2a>
 8013fae:	2304      	movs	r3, #4
 8013fb0:	e038      	b.n	8014024 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	3334      	adds	r3, #52	; 0x34
 8013fb6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013fba:	4618      	mov	r0, r3
 8013fbc:	f7fd ffb4 	bl	8011f28 <ld_word>
 8013fc0:	4603      	mov	r3, r0
 8013fc2:	461a      	mov	r2, r3
 8013fc4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013fc8:	429a      	cmp	r2, r3
 8013fca:	d001      	beq.n	8013fd0 <check_fs+0x48>
 8013fcc:	2303      	movs	r3, #3
 8013fce:	e029      	b.n	8014024 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013fd6:	2be9      	cmp	r3, #233	; 0xe9
 8013fd8:	d009      	beq.n	8013fee <check_fs+0x66>
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013fe0:	2beb      	cmp	r3, #235	; 0xeb
 8013fe2:	d11e      	bne.n	8014022 <check_fs+0x9a>
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8013fea:	2b90      	cmp	r3, #144	; 0x90
 8013fec:	d119      	bne.n	8014022 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	3334      	adds	r3, #52	; 0x34
 8013ff2:	3336      	adds	r3, #54	; 0x36
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	f7fd ffaf 	bl	8011f58 <ld_dword>
 8013ffa:	4603      	mov	r3, r0
 8013ffc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8014000:	4a0a      	ldr	r2, [pc, #40]	; (801402c <check_fs+0xa4>)
 8014002:	4293      	cmp	r3, r2
 8014004:	d101      	bne.n	801400a <check_fs+0x82>
 8014006:	2300      	movs	r3, #0
 8014008:	e00c      	b.n	8014024 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	3334      	adds	r3, #52	; 0x34
 801400e:	3352      	adds	r3, #82	; 0x52
 8014010:	4618      	mov	r0, r3
 8014012:	f7fd ffa1 	bl	8011f58 <ld_dword>
 8014016:	4603      	mov	r3, r0
 8014018:	4a05      	ldr	r2, [pc, #20]	; (8014030 <check_fs+0xa8>)
 801401a:	4293      	cmp	r3, r2
 801401c:	d101      	bne.n	8014022 <check_fs+0x9a>
 801401e:	2300      	movs	r3, #0
 8014020:	e000      	b.n	8014024 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8014022:	2302      	movs	r3, #2
}
 8014024:	4618      	mov	r0, r3
 8014026:	3708      	adds	r7, #8
 8014028:	46bd      	mov	sp, r7
 801402a:	bd80      	pop	{r7, pc}
 801402c:	00544146 	.word	0x00544146
 8014030:	33544146 	.word	0x33544146

08014034 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8014034:	b580      	push	{r7, lr}
 8014036:	b096      	sub	sp, #88	; 0x58
 8014038:	af00      	add	r7, sp, #0
 801403a:	60f8      	str	r0, [r7, #12]
 801403c:	60b9      	str	r1, [r7, #8]
 801403e:	4613      	mov	r3, r2
 8014040:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8014042:	68bb      	ldr	r3, [r7, #8]
 8014044:	2200      	movs	r2, #0
 8014046:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8014048:	68f8      	ldr	r0, [r7, #12]
 801404a:	f7ff ff58 	bl	8013efe <get_ldnumber>
 801404e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8014050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014052:	2b00      	cmp	r3, #0
 8014054:	da01      	bge.n	801405a <find_volume+0x26>
 8014056:	230b      	movs	r3, #11
 8014058:	e231      	b.n	80144be <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801405a:	4aa8      	ldr	r2, [pc, #672]	; (80142fc <find_volume+0x2c8>)
 801405c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801405e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014062:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8014064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014066:	2b00      	cmp	r3, #0
 8014068:	d101      	bne.n	801406e <find_volume+0x3a>
 801406a:	230c      	movs	r3, #12
 801406c:	e227      	b.n	80144be <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801406e:	68bb      	ldr	r3, [r7, #8]
 8014070:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014072:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8014074:	79fb      	ldrb	r3, [r7, #7]
 8014076:	f023 0301 	bic.w	r3, r3, #1
 801407a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801407c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801407e:	781b      	ldrb	r3, [r3, #0]
 8014080:	2b00      	cmp	r3, #0
 8014082:	d01a      	beq.n	80140ba <find_volume+0x86>
		stat = disk_status(fs->drv);
 8014084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014086:	785b      	ldrb	r3, [r3, #1]
 8014088:	4618      	mov	r0, r3
 801408a:	f7fd feaf 	bl	8011dec <disk_status>
 801408e:	4603      	mov	r3, r0
 8014090:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8014094:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014098:	f003 0301 	and.w	r3, r3, #1
 801409c:	2b00      	cmp	r3, #0
 801409e:	d10c      	bne.n	80140ba <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80140a0:	79fb      	ldrb	r3, [r7, #7]
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d007      	beq.n	80140b6 <find_volume+0x82>
 80140a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80140aa:	f003 0304 	and.w	r3, r3, #4
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d001      	beq.n	80140b6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80140b2:	230a      	movs	r3, #10
 80140b4:	e203      	b.n	80144be <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 80140b6:	2300      	movs	r3, #0
 80140b8:	e201      	b.n	80144be <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80140ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140bc:	2200      	movs	r2, #0
 80140be:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80140c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80140c2:	b2da      	uxtb	r2, r3
 80140c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140c6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80140c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140ca:	785b      	ldrb	r3, [r3, #1]
 80140cc:	4618      	mov	r0, r3
 80140ce:	f7fd fea7 	bl	8011e20 <disk_initialize>
 80140d2:	4603      	mov	r3, r0
 80140d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80140d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80140dc:	f003 0301 	and.w	r3, r3, #1
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d001      	beq.n	80140e8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80140e4:	2303      	movs	r3, #3
 80140e6:	e1ea      	b.n	80144be <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80140e8:	79fb      	ldrb	r3, [r7, #7]
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d007      	beq.n	80140fe <find_volume+0xca>
 80140ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80140f2:	f003 0304 	and.w	r3, r3, #4
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d001      	beq.n	80140fe <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80140fa:	230a      	movs	r3, #10
 80140fc:	e1df      	b.n	80144be <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80140fe:	2300      	movs	r3, #0
 8014100:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8014102:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014104:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014106:	f7ff ff3f 	bl	8013f88 <check_fs>
 801410a:	4603      	mov	r3, r0
 801410c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8014110:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014114:	2b02      	cmp	r3, #2
 8014116:	d14b      	bne.n	80141b0 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014118:	2300      	movs	r3, #0
 801411a:	643b      	str	r3, [r7, #64]	; 0x40
 801411c:	e01f      	b.n	801415e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801411e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014120:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014126:	011b      	lsls	r3, r3, #4
 8014128:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801412c:	4413      	add	r3, r2
 801412e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8014130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014132:	3304      	adds	r3, #4
 8014134:	781b      	ldrb	r3, [r3, #0]
 8014136:	2b00      	cmp	r3, #0
 8014138:	d006      	beq.n	8014148 <find_volume+0x114>
 801413a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801413c:	3308      	adds	r3, #8
 801413e:	4618      	mov	r0, r3
 8014140:	f7fd ff0a 	bl	8011f58 <ld_dword>
 8014144:	4602      	mov	r2, r0
 8014146:	e000      	b.n	801414a <find_volume+0x116>
 8014148:	2200      	movs	r2, #0
 801414a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801414c:	009b      	lsls	r3, r3, #2
 801414e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8014152:	440b      	add	r3, r1
 8014154:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801415a:	3301      	adds	r3, #1
 801415c:	643b      	str	r3, [r7, #64]	; 0x40
 801415e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014160:	2b03      	cmp	r3, #3
 8014162:	d9dc      	bls.n	801411e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8014164:	2300      	movs	r3, #0
 8014166:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8014168:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801416a:	2b00      	cmp	r3, #0
 801416c:	d002      	beq.n	8014174 <find_volume+0x140>
 801416e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014170:	3b01      	subs	r3, #1
 8014172:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8014174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014176:	009b      	lsls	r3, r3, #2
 8014178:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801417c:	4413      	add	r3, r2
 801417e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8014182:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8014184:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014186:	2b00      	cmp	r3, #0
 8014188:	d005      	beq.n	8014196 <find_volume+0x162>
 801418a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801418c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801418e:	f7ff fefb 	bl	8013f88 <check_fs>
 8014192:	4603      	mov	r3, r0
 8014194:	e000      	b.n	8014198 <find_volume+0x164>
 8014196:	2303      	movs	r3, #3
 8014198:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801419c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80141a0:	2b01      	cmp	r3, #1
 80141a2:	d905      	bls.n	80141b0 <find_volume+0x17c>
 80141a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80141a6:	3301      	adds	r3, #1
 80141a8:	643b      	str	r3, [r7, #64]	; 0x40
 80141aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80141ac:	2b03      	cmp	r3, #3
 80141ae:	d9e1      	bls.n	8014174 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80141b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80141b4:	2b04      	cmp	r3, #4
 80141b6:	d101      	bne.n	80141bc <find_volume+0x188>
 80141b8:	2301      	movs	r3, #1
 80141ba:	e180      	b.n	80144be <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80141bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80141c0:	2b01      	cmp	r3, #1
 80141c2:	d901      	bls.n	80141c8 <find_volume+0x194>
 80141c4:	230d      	movs	r3, #13
 80141c6:	e17a      	b.n	80144be <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80141c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141ca:	3334      	adds	r3, #52	; 0x34
 80141cc:	330b      	adds	r3, #11
 80141ce:	4618      	mov	r0, r3
 80141d0:	f7fd feaa 	bl	8011f28 <ld_word>
 80141d4:	4603      	mov	r3, r0
 80141d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80141da:	d001      	beq.n	80141e0 <find_volume+0x1ac>
 80141dc:	230d      	movs	r3, #13
 80141de:	e16e      	b.n	80144be <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80141e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141e2:	3334      	adds	r3, #52	; 0x34
 80141e4:	3316      	adds	r3, #22
 80141e6:	4618      	mov	r0, r3
 80141e8:	f7fd fe9e 	bl	8011f28 <ld_word>
 80141ec:	4603      	mov	r3, r0
 80141ee:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80141f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d106      	bne.n	8014204 <find_volume+0x1d0>
 80141f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141f8:	3334      	adds	r3, #52	; 0x34
 80141fa:	3324      	adds	r3, #36	; 0x24
 80141fc:	4618      	mov	r0, r3
 80141fe:	f7fd feab 	bl	8011f58 <ld_dword>
 8014202:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8014204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014206:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014208:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801420a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801420c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8014210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014212:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8014214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014216:	789b      	ldrb	r3, [r3, #2]
 8014218:	2b01      	cmp	r3, #1
 801421a:	d005      	beq.n	8014228 <find_volume+0x1f4>
 801421c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801421e:	789b      	ldrb	r3, [r3, #2]
 8014220:	2b02      	cmp	r3, #2
 8014222:	d001      	beq.n	8014228 <find_volume+0x1f4>
 8014224:	230d      	movs	r3, #13
 8014226:	e14a      	b.n	80144be <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8014228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801422a:	789b      	ldrb	r3, [r3, #2]
 801422c:	461a      	mov	r2, r3
 801422e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014230:	fb02 f303 	mul.w	r3, r2, r3
 8014234:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8014236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801423c:	b29a      	uxth	r2, r3
 801423e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014240:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8014242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014244:	895b      	ldrh	r3, [r3, #10]
 8014246:	2b00      	cmp	r3, #0
 8014248:	d008      	beq.n	801425c <find_volume+0x228>
 801424a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801424c:	895b      	ldrh	r3, [r3, #10]
 801424e:	461a      	mov	r2, r3
 8014250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014252:	895b      	ldrh	r3, [r3, #10]
 8014254:	3b01      	subs	r3, #1
 8014256:	4013      	ands	r3, r2
 8014258:	2b00      	cmp	r3, #0
 801425a:	d001      	beq.n	8014260 <find_volume+0x22c>
 801425c:	230d      	movs	r3, #13
 801425e:	e12e      	b.n	80144be <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8014260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014262:	3334      	adds	r3, #52	; 0x34
 8014264:	3311      	adds	r3, #17
 8014266:	4618      	mov	r0, r3
 8014268:	f7fd fe5e 	bl	8011f28 <ld_word>
 801426c:	4603      	mov	r3, r0
 801426e:	461a      	mov	r2, r3
 8014270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014272:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8014274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014276:	891b      	ldrh	r3, [r3, #8]
 8014278:	f003 030f 	and.w	r3, r3, #15
 801427c:	b29b      	uxth	r3, r3
 801427e:	2b00      	cmp	r3, #0
 8014280:	d001      	beq.n	8014286 <find_volume+0x252>
 8014282:	230d      	movs	r3, #13
 8014284:	e11b      	b.n	80144be <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8014286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014288:	3334      	adds	r3, #52	; 0x34
 801428a:	3313      	adds	r3, #19
 801428c:	4618      	mov	r0, r3
 801428e:	f7fd fe4b 	bl	8011f28 <ld_word>
 8014292:	4603      	mov	r3, r0
 8014294:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8014296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014298:	2b00      	cmp	r3, #0
 801429a:	d106      	bne.n	80142aa <find_volume+0x276>
 801429c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801429e:	3334      	adds	r3, #52	; 0x34
 80142a0:	3320      	adds	r3, #32
 80142a2:	4618      	mov	r0, r3
 80142a4:	f7fd fe58 	bl	8011f58 <ld_dword>
 80142a8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80142aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142ac:	3334      	adds	r3, #52	; 0x34
 80142ae:	330e      	adds	r3, #14
 80142b0:	4618      	mov	r0, r3
 80142b2:	f7fd fe39 	bl	8011f28 <ld_word>
 80142b6:	4603      	mov	r3, r0
 80142b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80142ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d101      	bne.n	80142c4 <find_volume+0x290>
 80142c0:	230d      	movs	r3, #13
 80142c2:	e0fc      	b.n	80144be <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80142c4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80142c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142c8:	4413      	add	r3, r2
 80142ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80142cc:	8912      	ldrh	r2, [r2, #8]
 80142ce:	0912      	lsrs	r2, r2, #4
 80142d0:	b292      	uxth	r2, r2
 80142d2:	4413      	add	r3, r2
 80142d4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80142d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80142d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142da:	429a      	cmp	r2, r3
 80142dc:	d201      	bcs.n	80142e2 <find_volume+0x2ae>
 80142de:	230d      	movs	r3, #13
 80142e0:	e0ed      	b.n	80144be <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80142e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80142e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142e6:	1ad3      	subs	r3, r2, r3
 80142e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80142ea:	8952      	ldrh	r2, [r2, #10]
 80142ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80142f0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80142f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d103      	bne.n	8014300 <find_volume+0x2cc>
 80142f8:	230d      	movs	r3, #13
 80142fa:	e0e0      	b.n	80144be <find_volume+0x48a>
 80142fc:	2400a430 	.word	0x2400a430
		fmt = FS_FAT32;
 8014300:	2303      	movs	r3, #3
 8014302:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8014306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014308:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801430c:	4293      	cmp	r3, r2
 801430e:	d802      	bhi.n	8014316 <find_volume+0x2e2>
 8014310:	2302      	movs	r3, #2
 8014312:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8014316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014318:	f640 72f5 	movw	r2, #4085	; 0xff5
 801431c:	4293      	cmp	r3, r2
 801431e:	d802      	bhi.n	8014326 <find_volume+0x2f2>
 8014320:	2301      	movs	r3, #1
 8014322:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8014326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014328:	1c9a      	adds	r2, r3, #2
 801432a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801432c:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 801432e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014330:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014332:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8014334:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014338:	441a      	add	r2, r3
 801433a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801433c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 801433e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014342:	441a      	add	r2, r3
 8014344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014346:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8014348:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801434c:	2b03      	cmp	r3, #3
 801434e:	d11e      	bne.n	801438e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8014350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014352:	3334      	adds	r3, #52	; 0x34
 8014354:	332a      	adds	r3, #42	; 0x2a
 8014356:	4618      	mov	r0, r3
 8014358:	f7fd fde6 	bl	8011f28 <ld_word>
 801435c:	4603      	mov	r3, r0
 801435e:	2b00      	cmp	r3, #0
 8014360:	d001      	beq.n	8014366 <find_volume+0x332>
 8014362:	230d      	movs	r3, #13
 8014364:	e0ab      	b.n	80144be <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8014366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014368:	891b      	ldrh	r3, [r3, #8]
 801436a:	2b00      	cmp	r3, #0
 801436c:	d001      	beq.n	8014372 <find_volume+0x33e>
 801436e:	230d      	movs	r3, #13
 8014370:	e0a5      	b.n	80144be <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8014372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014374:	3334      	adds	r3, #52	; 0x34
 8014376:	332c      	adds	r3, #44	; 0x2c
 8014378:	4618      	mov	r0, r3
 801437a:	f7fd fded 	bl	8011f58 <ld_dword>
 801437e:	4602      	mov	r2, r0
 8014380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014382:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8014384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014386:	699b      	ldr	r3, [r3, #24]
 8014388:	009b      	lsls	r3, r3, #2
 801438a:	647b      	str	r3, [r7, #68]	; 0x44
 801438c:	e01f      	b.n	80143ce <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801438e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014390:	891b      	ldrh	r3, [r3, #8]
 8014392:	2b00      	cmp	r3, #0
 8014394:	d101      	bne.n	801439a <find_volume+0x366>
 8014396:	230d      	movs	r3, #13
 8014398:	e091      	b.n	80144be <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801439a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801439c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801439e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80143a0:	441a      	add	r2, r3
 80143a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143a4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80143a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80143aa:	2b02      	cmp	r3, #2
 80143ac:	d103      	bne.n	80143b6 <find_volume+0x382>
 80143ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143b0:	699b      	ldr	r3, [r3, #24]
 80143b2:	005b      	lsls	r3, r3, #1
 80143b4:	e00a      	b.n	80143cc <find_volume+0x398>
 80143b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143b8:	699a      	ldr	r2, [r3, #24]
 80143ba:	4613      	mov	r3, r2
 80143bc:	005b      	lsls	r3, r3, #1
 80143be:	4413      	add	r3, r2
 80143c0:	085a      	lsrs	r2, r3, #1
 80143c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143c4:	699b      	ldr	r3, [r3, #24]
 80143c6:	f003 0301 	and.w	r3, r3, #1
 80143ca:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80143cc:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80143ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143d0:	69da      	ldr	r2, [r3, #28]
 80143d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80143d4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80143d8:	0a5b      	lsrs	r3, r3, #9
 80143da:	429a      	cmp	r2, r3
 80143dc:	d201      	bcs.n	80143e2 <find_volume+0x3ae>
 80143de:	230d      	movs	r3, #13
 80143e0:	e06d      	b.n	80144be <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80143e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143e4:	f04f 32ff 	mov.w	r2, #4294967295
 80143e8:	615a      	str	r2, [r3, #20]
 80143ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143ec:	695a      	ldr	r2, [r3, #20]
 80143ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143f0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80143f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143f4:	2280      	movs	r2, #128	; 0x80
 80143f6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80143f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80143fc:	2b03      	cmp	r3, #3
 80143fe:	d149      	bne.n	8014494 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8014400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014402:	3334      	adds	r3, #52	; 0x34
 8014404:	3330      	adds	r3, #48	; 0x30
 8014406:	4618      	mov	r0, r3
 8014408:	f7fd fd8e 	bl	8011f28 <ld_word>
 801440c:	4603      	mov	r3, r0
 801440e:	2b01      	cmp	r3, #1
 8014410:	d140      	bne.n	8014494 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8014412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014414:	3301      	adds	r3, #1
 8014416:	4619      	mov	r1, r3
 8014418:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801441a:	f7fe f835 	bl	8012488 <move_window>
 801441e:	4603      	mov	r3, r0
 8014420:	2b00      	cmp	r3, #0
 8014422:	d137      	bne.n	8014494 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8014424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014426:	2200      	movs	r2, #0
 8014428:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801442a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801442c:	3334      	adds	r3, #52	; 0x34
 801442e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014432:	4618      	mov	r0, r3
 8014434:	f7fd fd78 	bl	8011f28 <ld_word>
 8014438:	4603      	mov	r3, r0
 801443a:	461a      	mov	r2, r3
 801443c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014440:	429a      	cmp	r2, r3
 8014442:	d127      	bne.n	8014494 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8014444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014446:	3334      	adds	r3, #52	; 0x34
 8014448:	4618      	mov	r0, r3
 801444a:	f7fd fd85 	bl	8011f58 <ld_dword>
 801444e:	4603      	mov	r3, r0
 8014450:	4a1d      	ldr	r2, [pc, #116]	; (80144c8 <find_volume+0x494>)
 8014452:	4293      	cmp	r3, r2
 8014454:	d11e      	bne.n	8014494 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8014456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014458:	3334      	adds	r3, #52	; 0x34
 801445a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801445e:	4618      	mov	r0, r3
 8014460:	f7fd fd7a 	bl	8011f58 <ld_dword>
 8014464:	4603      	mov	r3, r0
 8014466:	4a19      	ldr	r2, [pc, #100]	; (80144cc <find_volume+0x498>)
 8014468:	4293      	cmp	r3, r2
 801446a:	d113      	bne.n	8014494 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801446c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801446e:	3334      	adds	r3, #52	; 0x34
 8014470:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8014474:	4618      	mov	r0, r3
 8014476:	f7fd fd6f 	bl	8011f58 <ld_dword>
 801447a:	4602      	mov	r2, r0
 801447c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801447e:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8014480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014482:	3334      	adds	r3, #52	; 0x34
 8014484:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8014488:	4618      	mov	r0, r3
 801448a:	f7fd fd65 	bl	8011f58 <ld_dword>
 801448e:	4602      	mov	r2, r0
 8014490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014492:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8014494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014496:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801449a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801449c:	4b0c      	ldr	r3, [pc, #48]	; (80144d0 <find_volume+0x49c>)
 801449e:	881b      	ldrh	r3, [r3, #0]
 80144a0:	3301      	adds	r3, #1
 80144a2:	b29a      	uxth	r2, r3
 80144a4:	4b0a      	ldr	r3, [pc, #40]	; (80144d0 <find_volume+0x49c>)
 80144a6:	801a      	strh	r2, [r3, #0]
 80144a8:	4b09      	ldr	r3, [pc, #36]	; (80144d0 <find_volume+0x49c>)
 80144aa:	881a      	ldrh	r2, [r3, #0]
 80144ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144ae:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80144b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144b2:	4a08      	ldr	r2, [pc, #32]	; (80144d4 <find_volume+0x4a0>)
 80144b4:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80144b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80144b8:	f7fd ff7e 	bl	80123b8 <clear_lock>
#endif
	return FR_OK;
 80144bc:	2300      	movs	r3, #0
}
 80144be:	4618      	mov	r0, r3
 80144c0:	3758      	adds	r7, #88	; 0x58
 80144c2:	46bd      	mov	sp, r7
 80144c4:	bd80      	pop	{r7, pc}
 80144c6:	bf00      	nop
 80144c8:	41615252 	.word	0x41615252
 80144cc:	61417272 	.word	0x61417272
 80144d0:	2400a434 	.word	0x2400a434
 80144d4:	2400a458 	.word	0x2400a458

080144d8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80144d8:	b580      	push	{r7, lr}
 80144da:	b084      	sub	sp, #16
 80144dc:	af00      	add	r7, sp, #0
 80144de:	6078      	str	r0, [r7, #4]
 80144e0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80144e2:	2309      	movs	r3, #9
 80144e4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d01c      	beq.n	8014526 <validate+0x4e>
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d018      	beq.n	8014526 <validate+0x4e>
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	781b      	ldrb	r3, [r3, #0]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d013      	beq.n	8014526 <validate+0x4e>
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	889a      	ldrh	r2, [r3, #4]
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	88db      	ldrh	r3, [r3, #6]
 8014508:	429a      	cmp	r2, r3
 801450a:	d10c      	bne.n	8014526 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	785b      	ldrb	r3, [r3, #1]
 8014512:	4618      	mov	r0, r3
 8014514:	f7fd fc6a 	bl	8011dec <disk_status>
 8014518:	4603      	mov	r3, r0
 801451a:	f003 0301 	and.w	r3, r3, #1
 801451e:	2b00      	cmp	r3, #0
 8014520:	d101      	bne.n	8014526 <validate+0x4e>
			res = FR_OK;
 8014522:	2300      	movs	r3, #0
 8014524:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8014526:	7bfb      	ldrb	r3, [r7, #15]
 8014528:	2b00      	cmp	r3, #0
 801452a:	d102      	bne.n	8014532 <validate+0x5a>
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	e000      	b.n	8014534 <validate+0x5c>
 8014532:	2300      	movs	r3, #0
 8014534:	683a      	ldr	r2, [r7, #0]
 8014536:	6013      	str	r3, [r2, #0]
	return res;
 8014538:	7bfb      	ldrb	r3, [r7, #15]
}
 801453a:	4618      	mov	r0, r3
 801453c:	3710      	adds	r7, #16
 801453e:	46bd      	mov	sp, r7
 8014540:	bd80      	pop	{r7, pc}
	...

08014544 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8014544:	b580      	push	{r7, lr}
 8014546:	b088      	sub	sp, #32
 8014548:	af00      	add	r7, sp, #0
 801454a:	60f8      	str	r0, [r7, #12]
 801454c:	60b9      	str	r1, [r7, #8]
 801454e:	4613      	mov	r3, r2
 8014550:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8014552:	68bb      	ldr	r3, [r7, #8]
 8014554:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8014556:	f107 0310 	add.w	r3, r7, #16
 801455a:	4618      	mov	r0, r3
 801455c:	f7ff fccf 	bl	8013efe <get_ldnumber>
 8014560:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8014562:	69fb      	ldr	r3, [r7, #28]
 8014564:	2b00      	cmp	r3, #0
 8014566:	da01      	bge.n	801456c <f_mount+0x28>
 8014568:	230b      	movs	r3, #11
 801456a:	e02b      	b.n	80145c4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801456c:	4a17      	ldr	r2, [pc, #92]	; (80145cc <f_mount+0x88>)
 801456e:	69fb      	ldr	r3, [r7, #28]
 8014570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014574:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8014576:	69bb      	ldr	r3, [r7, #24]
 8014578:	2b00      	cmp	r3, #0
 801457a:	d005      	beq.n	8014588 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801457c:	69b8      	ldr	r0, [r7, #24]
 801457e:	f7fd ff1b 	bl	80123b8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8014582:	69bb      	ldr	r3, [r7, #24]
 8014584:	2200      	movs	r2, #0
 8014586:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	2b00      	cmp	r3, #0
 801458c:	d002      	beq.n	8014594 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	2200      	movs	r2, #0
 8014592:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8014594:	68fa      	ldr	r2, [r7, #12]
 8014596:	490d      	ldr	r1, [pc, #52]	; (80145cc <f_mount+0x88>)
 8014598:	69fb      	ldr	r3, [r7, #28]
 801459a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d002      	beq.n	80145aa <f_mount+0x66>
 80145a4:	79fb      	ldrb	r3, [r7, #7]
 80145a6:	2b01      	cmp	r3, #1
 80145a8:	d001      	beq.n	80145ae <f_mount+0x6a>
 80145aa:	2300      	movs	r3, #0
 80145ac:	e00a      	b.n	80145c4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80145ae:	f107 010c 	add.w	r1, r7, #12
 80145b2:	f107 0308 	add.w	r3, r7, #8
 80145b6:	2200      	movs	r2, #0
 80145b8:	4618      	mov	r0, r3
 80145ba:	f7ff fd3b 	bl	8014034 <find_volume>
 80145be:	4603      	mov	r3, r0
 80145c0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80145c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80145c4:	4618      	mov	r0, r3
 80145c6:	3720      	adds	r7, #32
 80145c8:	46bd      	mov	sp, r7
 80145ca:	bd80      	pop	{r7, pc}
 80145cc:	2400a430 	.word	0x2400a430

080145d0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80145d0:	b580      	push	{r7, lr}
 80145d2:	b09a      	sub	sp, #104	; 0x68
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	60f8      	str	r0, [r7, #12]
 80145d8:	60b9      	str	r1, [r7, #8]
 80145da:	4613      	mov	r3, r2
 80145dc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d101      	bne.n	80145e8 <f_open+0x18>
 80145e4:	2309      	movs	r3, #9
 80145e6:	e1ad      	b.n	8014944 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80145e8:	79fb      	ldrb	r3, [r7, #7]
 80145ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80145ee:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80145f0:	79fa      	ldrb	r2, [r7, #7]
 80145f2:	f107 0110 	add.w	r1, r7, #16
 80145f6:	f107 0308 	add.w	r3, r7, #8
 80145fa:	4618      	mov	r0, r3
 80145fc:	f7ff fd1a 	bl	8014034 <find_volume>
 8014600:	4603      	mov	r3, r0
 8014602:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8014606:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801460a:	2b00      	cmp	r3, #0
 801460c:	f040 8191 	bne.w	8014932 <f_open+0x362>
		dj.obj.fs = fs;
 8014610:	693b      	ldr	r3, [r7, #16]
 8014612:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8014614:	68ba      	ldr	r2, [r7, #8]
 8014616:	f107 0314 	add.w	r3, r7, #20
 801461a:	4611      	mov	r1, r2
 801461c:	4618      	mov	r0, r3
 801461e:	f7ff fbfd 	bl	8013e1c <follow_path>
 8014622:	4603      	mov	r3, r0
 8014624:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8014628:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801462c:	2b00      	cmp	r3, #0
 801462e:	d11a      	bne.n	8014666 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8014630:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014634:	b25b      	sxtb	r3, r3
 8014636:	2b00      	cmp	r3, #0
 8014638:	da03      	bge.n	8014642 <f_open+0x72>
				res = FR_INVALID_NAME;
 801463a:	2306      	movs	r3, #6
 801463c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8014640:	e011      	b.n	8014666 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014642:	79fb      	ldrb	r3, [r7, #7]
 8014644:	f023 0301 	bic.w	r3, r3, #1
 8014648:	2b00      	cmp	r3, #0
 801464a:	bf14      	ite	ne
 801464c:	2301      	movne	r3, #1
 801464e:	2300      	moveq	r3, #0
 8014650:	b2db      	uxtb	r3, r3
 8014652:	461a      	mov	r2, r3
 8014654:	f107 0314 	add.w	r3, r7, #20
 8014658:	4611      	mov	r1, r2
 801465a:	4618      	mov	r0, r3
 801465c:	f7fd fd64 	bl	8012128 <chk_lock>
 8014660:	4603      	mov	r3, r0
 8014662:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8014666:	79fb      	ldrb	r3, [r7, #7]
 8014668:	f003 031c 	and.w	r3, r3, #28
 801466c:	2b00      	cmp	r3, #0
 801466e:	d07f      	beq.n	8014770 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8014670:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014674:	2b00      	cmp	r3, #0
 8014676:	d017      	beq.n	80146a8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8014678:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801467c:	2b04      	cmp	r3, #4
 801467e:	d10e      	bne.n	801469e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8014680:	f7fd fdae 	bl	80121e0 <enq_lock>
 8014684:	4603      	mov	r3, r0
 8014686:	2b00      	cmp	r3, #0
 8014688:	d006      	beq.n	8014698 <f_open+0xc8>
 801468a:	f107 0314 	add.w	r3, r7, #20
 801468e:	4618      	mov	r0, r3
 8014690:	f7fe ff94 	bl	80135bc <dir_register>
 8014694:	4603      	mov	r3, r0
 8014696:	e000      	b.n	801469a <f_open+0xca>
 8014698:	2312      	movs	r3, #18
 801469a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801469e:	79fb      	ldrb	r3, [r7, #7]
 80146a0:	f043 0308 	orr.w	r3, r3, #8
 80146a4:	71fb      	strb	r3, [r7, #7]
 80146a6:	e010      	b.n	80146ca <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80146a8:	7ebb      	ldrb	r3, [r7, #26]
 80146aa:	f003 0311 	and.w	r3, r3, #17
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d003      	beq.n	80146ba <f_open+0xea>
					res = FR_DENIED;
 80146b2:	2307      	movs	r3, #7
 80146b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80146b8:	e007      	b.n	80146ca <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80146ba:	79fb      	ldrb	r3, [r7, #7]
 80146bc:	f003 0304 	and.w	r3, r3, #4
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d002      	beq.n	80146ca <f_open+0xfa>
 80146c4:	2308      	movs	r3, #8
 80146c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80146ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d168      	bne.n	80147a4 <f_open+0x1d4>
 80146d2:	79fb      	ldrb	r3, [r7, #7]
 80146d4:	f003 0308 	and.w	r3, r3, #8
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d063      	beq.n	80147a4 <f_open+0x1d4>
				dw = GET_FATTIME();
 80146dc:	f7fa fad4 	bl	800ec88 <get_fattime>
 80146e0:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80146e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146e4:	330e      	adds	r3, #14
 80146e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80146e8:	4618      	mov	r0, r3
 80146ea:	f7fd fc73 	bl	8011fd4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80146ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146f0:	3316      	adds	r3, #22
 80146f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80146f4:	4618      	mov	r0, r3
 80146f6:	f7fd fc6d 	bl	8011fd4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80146fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146fc:	330b      	adds	r3, #11
 80146fe:	2220      	movs	r2, #32
 8014700:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8014702:	693b      	ldr	r3, [r7, #16]
 8014704:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014706:	4611      	mov	r1, r2
 8014708:	4618      	mov	r0, r3
 801470a:	f7fe fbc4 	bl	8012e96 <ld_clust>
 801470e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8014710:	693b      	ldr	r3, [r7, #16]
 8014712:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014714:	2200      	movs	r2, #0
 8014716:	4618      	mov	r0, r3
 8014718:	f7fe fbdc 	bl	8012ed4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801471c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801471e:	331c      	adds	r3, #28
 8014720:	2100      	movs	r1, #0
 8014722:	4618      	mov	r0, r3
 8014724:	f7fd fc56 	bl	8011fd4 <st_dword>
					fs->wflag = 1;
 8014728:	693b      	ldr	r3, [r7, #16]
 801472a:	2201      	movs	r2, #1
 801472c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801472e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014730:	2b00      	cmp	r3, #0
 8014732:	d037      	beq.n	80147a4 <f_open+0x1d4>
						dw = fs->winsect;
 8014734:	693b      	ldr	r3, [r7, #16]
 8014736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014738:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801473a:	f107 0314 	add.w	r3, r7, #20
 801473e:	2200      	movs	r2, #0
 8014740:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014742:	4618      	mov	r0, r3
 8014744:	f7fe f8ef 	bl	8012926 <remove_chain>
 8014748:	4603      	mov	r3, r0
 801474a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 801474e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014752:	2b00      	cmp	r3, #0
 8014754:	d126      	bne.n	80147a4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8014756:	693b      	ldr	r3, [r7, #16]
 8014758:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801475a:	4618      	mov	r0, r3
 801475c:	f7fd fe94 	bl	8012488 <move_window>
 8014760:	4603      	mov	r3, r0
 8014762:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8014766:	693b      	ldr	r3, [r7, #16]
 8014768:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801476a:	3a01      	subs	r2, #1
 801476c:	611a      	str	r2, [r3, #16]
 801476e:	e019      	b.n	80147a4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8014770:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014774:	2b00      	cmp	r3, #0
 8014776:	d115      	bne.n	80147a4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8014778:	7ebb      	ldrb	r3, [r7, #26]
 801477a:	f003 0310 	and.w	r3, r3, #16
 801477e:	2b00      	cmp	r3, #0
 8014780:	d003      	beq.n	801478a <f_open+0x1ba>
					res = FR_NO_FILE;
 8014782:	2304      	movs	r3, #4
 8014784:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8014788:	e00c      	b.n	80147a4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801478a:	79fb      	ldrb	r3, [r7, #7]
 801478c:	f003 0302 	and.w	r3, r3, #2
 8014790:	2b00      	cmp	r3, #0
 8014792:	d007      	beq.n	80147a4 <f_open+0x1d4>
 8014794:	7ebb      	ldrb	r3, [r7, #26]
 8014796:	f003 0301 	and.w	r3, r3, #1
 801479a:	2b00      	cmp	r3, #0
 801479c:	d002      	beq.n	80147a4 <f_open+0x1d4>
						res = FR_DENIED;
 801479e:	2307      	movs	r3, #7
 80147a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80147a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d128      	bne.n	80147fe <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80147ac:	79fb      	ldrb	r3, [r7, #7]
 80147ae:	f003 0308 	and.w	r3, r3, #8
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d003      	beq.n	80147be <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80147b6:	79fb      	ldrb	r3, [r7, #7]
 80147b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80147bc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80147be:	693b      	ldr	r3, [r7, #16]
 80147c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80147c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80147cc:	79fb      	ldrb	r3, [r7, #7]
 80147ce:	f023 0301 	bic.w	r3, r3, #1
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	bf14      	ite	ne
 80147d6:	2301      	movne	r3, #1
 80147d8:	2300      	moveq	r3, #0
 80147da:	b2db      	uxtb	r3, r3
 80147dc:	461a      	mov	r2, r3
 80147de:	f107 0314 	add.w	r3, r7, #20
 80147e2:	4611      	mov	r1, r2
 80147e4:	4618      	mov	r0, r3
 80147e6:	f7fd fd1d 	bl	8012224 <inc_lock>
 80147ea:	4602      	mov	r2, r0
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	691b      	ldr	r3, [r3, #16]
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d102      	bne.n	80147fe <f_open+0x22e>
 80147f8:	2302      	movs	r3, #2
 80147fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80147fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014802:	2b00      	cmp	r3, #0
 8014804:	f040 8095 	bne.w	8014932 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8014808:	693b      	ldr	r3, [r7, #16]
 801480a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801480c:	4611      	mov	r1, r2
 801480e:	4618      	mov	r0, r3
 8014810:	f7fe fb41 	bl	8012e96 <ld_clust>
 8014814:	4602      	mov	r2, r0
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801481a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801481c:	331c      	adds	r3, #28
 801481e:	4618      	mov	r0, r3
 8014820:	f7fd fb9a 	bl	8011f58 <ld_dword>
 8014824:	4602      	mov	r2, r0
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	2200      	movs	r2, #0
 801482e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8014830:	693a      	ldr	r2, [r7, #16]
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8014836:	693b      	ldr	r3, [r7, #16]
 8014838:	88da      	ldrh	r2, [r3, #6]
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801483e:	68fb      	ldr	r3, [r7, #12]
 8014840:	79fa      	ldrb	r2, [r7, #7]
 8014842:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	2200      	movs	r2, #0
 8014848:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801484a:	68fb      	ldr	r3, [r7, #12]
 801484c:	2200      	movs	r2, #0
 801484e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	2200      	movs	r2, #0
 8014854:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	3330      	adds	r3, #48	; 0x30
 801485a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801485e:	2100      	movs	r1, #0
 8014860:	4618      	mov	r0, r3
 8014862:	f7fd fc04 	bl	801206e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8014866:	79fb      	ldrb	r3, [r7, #7]
 8014868:	f003 0320 	and.w	r3, r3, #32
 801486c:	2b00      	cmp	r3, #0
 801486e:	d060      	beq.n	8014932 <f_open+0x362>
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	68db      	ldr	r3, [r3, #12]
 8014874:	2b00      	cmp	r3, #0
 8014876:	d05c      	beq.n	8014932 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	68da      	ldr	r2, [r3, #12]
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8014880:	693b      	ldr	r3, [r7, #16]
 8014882:	895b      	ldrh	r3, [r3, #10]
 8014884:	025b      	lsls	r3, r3, #9
 8014886:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	689b      	ldr	r3, [r3, #8]
 801488c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801488e:	68fb      	ldr	r3, [r7, #12]
 8014890:	68db      	ldr	r3, [r3, #12]
 8014892:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014894:	e016      	b.n	80148c4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801489a:	4618      	mov	r0, r3
 801489c:	f7fd feaf 	bl	80125fe <get_fat>
 80148a0:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80148a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80148a4:	2b01      	cmp	r3, #1
 80148a6:	d802      	bhi.n	80148ae <f_open+0x2de>
 80148a8:	2302      	movs	r3, #2
 80148aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80148ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80148b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80148b4:	d102      	bne.n	80148bc <f_open+0x2ec>
 80148b6:	2301      	movs	r3, #1
 80148b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80148bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80148be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80148c0:	1ad3      	subs	r3, r2, r3
 80148c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80148c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d103      	bne.n	80148d4 <f_open+0x304>
 80148cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80148ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80148d0:	429a      	cmp	r2, r3
 80148d2:	d8e0      	bhi.n	8014896 <f_open+0x2c6>
				}
				fp->clust = clst;
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80148d8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80148da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d127      	bne.n	8014932 <f_open+0x362>
 80148e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80148e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d022      	beq.n	8014932 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80148ec:	693b      	ldr	r3, [r7, #16]
 80148ee:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80148f0:	4618      	mov	r0, r3
 80148f2:	f7fd fe65 	bl	80125c0 <clust2sect>
 80148f6:	64f8      	str	r0, [r7, #76]	; 0x4c
 80148f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d103      	bne.n	8014906 <f_open+0x336>
						res = FR_INT_ERR;
 80148fe:	2302      	movs	r3, #2
 8014900:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8014904:	e015      	b.n	8014932 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8014906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014908:	0a5a      	lsrs	r2, r3, #9
 801490a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801490c:	441a      	add	r2, r3
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8014912:	693b      	ldr	r3, [r7, #16]
 8014914:	7858      	ldrb	r0, [r3, #1]
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	6a1a      	ldr	r2, [r3, #32]
 8014920:	2301      	movs	r3, #1
 8014922:	f7fd faa3 	bl	8011e6c <disk_read>
 8014926:	4603      	mov	r3, r0
 8014928:	2b00      	cmp	r3, #0
 801492a:	d002      	beq.n	8014932 <f_open+0x362>
 801492c:	2301      	movs	r3, #1
 801492e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014932:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014936:	2b00      	cmp	r3, #0
 8014938:	d002      	beq.n	8014940 <f_open+0x370>
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	2200      	movs	r2, #0
 801493e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014940:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8014944:	4618      	mov	r0, r3
 8014946:	3768      	adds	r7, #104	; 0x68
 8014948:	46bd      	mov	sp, r7
 801494a:	bd80      	pop	{r7, pc}

0801494c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801494c:	b580      	push	{r7, lr}
 801494e:	b08e      	sub	sp, #56	; 0x38
 8014950:	af00      	add	r7, sp, #0
 8014952:	60f8      	str	r0, [r7, #12]
 8014954:	60b9      	str	r1, [r7, #8]
 8014956:	607a      	str	r2, [r7, #4]
 8014958:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801495a:	68bb      	ldr	r3, [r7, #8]
 801495c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 801495e:	683b      	ldr	r3, [r7, #0]
 8014960:	2200      	movs	r2, #0
 8014962:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	f107 0214 	add.w	r2, r7, #20
 801496a:	4611      	mov	r1, r2
 801496c:	4618      	mov	r0, r3
 801496e:	f7ff fdb3 	bl	80144d8 <validate>
 8014972:	4603      	mov	r3, r0
 8014974:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014978:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801497c:	2b00      	cmp	r3, #0
 801497e:	d107      	bne.n	8014990 <f_read+0x44>
 8014980:	68fb      	ldr	r3, [r7, #12]
 8014982:	7d5b      	ldrb	r3, [r3, #21]
 8014984:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014988:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801498c:	2b00      	cmp	r3, #0
 801498e:	d002      	beq.n	8014996 <f_read+0x4a>
 8014990:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014994:	e115      	b.n	8014bc2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8014996:	68fb      	ldr	r3, [r7, #12]
 8014998:	7d1b      	ldrb	r3, [r3, #20]
 801499a:	f003 0301 	and.w	r3, r3, #1
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d101      	bne.n	80149a6 <f_read+0x5a>
 80149a2:	2307      	movs	r3, #7
 80149a4:	e10d      	b.n	8014bc2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	68da      	ldr	r2, [r3, #12]
 80149aa:	68fb      	ldr	r3, [r7, #12]
 80149ac:	699b      	ldr	r3, [r3, #24]
 80149ae:	1ad3      	subs	r3, r2, r3
 80149b0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80149b2:	687a      	ldr	r2, [r7, #4]
 80149b4:	6a3b      	ldr	r3, [r7, #32]
 80149b6:	429a      	cmp	r2, r3
 80149b8:	f240 80fe 	bls.w	8014bb8 <f_read+0x26c>
 80149bc:	6a3b      	ldr	r3, [r7, #32]
 80149be:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80149c0:	e0fa      	b.n	8014bb8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80149c2:	68fb      	ldr	r3, [r7, #12]
 80149c4:	699b      	ldr	r3, [r3, #24]
 80149c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	f040 80c6 	bne.w	8014b5c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	699b      	ldr	r3, [r3, #24]
 80149d4:	0a5b      	lsrs	r3, r3, #9
 80149d6:	697a      	ldr	r2, [r7, #20]
 80149d8:	8952      	ldrh	r2, [r2, #10]
 80149da:	3a01      	subs	r2, #1
 80149dc:	4013      	ands	r3, r2
 80149de:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80149e0:	69fb      	ldr	r3, [r7, #28]
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d12f      	bne.n	8014a46 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	699b      	ldr	r3, [r3, #24]
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d103      	bne.n	80149f6 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80149ee:	68fb      	ldr	r3, [r7, #12]
 80149f0:	689b      	ldr	r3, [r3, #8]
 80149f2:	633b      	str	r3, [r7, #48]	; 0x30
 80149f4:	e013      	b.n	8014a1e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d007      	beq.n	8014a0e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	699b      	ldr	r3, [r3, #24]
 8014a02:	4619      	mov	r1, r3
 8014a04:	68f8      	ldr	r0, [r7, #12]
 8014a06:	f7fe f88b 	bl	8012b20 <clmt_clust>
 8014a0a:	6338      	str	r0, [r7, #48]	; 0x30
 8014a0c:	e007      	b.n	8014a1e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8014a0e:	68fa      	ldr	r2, [r7, #12]
 8014a10:	68fb      	ldr	r3, [r7, #12]
 8014a12:	69db      	ldr	r3, [r3, #28]
 8014a14:	4619      	mov	r1, r3
 8014a16:	4610      	mov	r0, r2
 8014a18:	f7fd fdf1 	bl	80125fe <get_fat>
 8014a1c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8014a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a20:	2b01      	cmp	r3, #1
 8014a22:	d804      	bhi.n	8014a2e <f_read+0xe2>
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	2202      	movs	r2, #2
 8014a28:	755a      	strb	r2, [r3, #21]
 8014a2a:	2302      	movs	r3, #2
 8014a2c:	e0c9      	b.n	8014bc2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a34:	d104      	bne.n	8014a40 <f_read+0xf4>
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	2201      	movs	r2, #1
 8014a3a:	755a      	strb	r2, [r3, #21]
 8014a3c:	2301      	movs	r3, #1
 8014a3e:	e0c0      	b.n	8014bc2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a44:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014a46:	697a      	ldr	r2, [r7, #20]
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	69db      	ldr	r3, [r3, #28]
 8014a4c:	4619      	mov	r1, r3
 8014a4e:	4610      	mov	r0, r2
 8014a50:	f7fd fdb6 	bl	80125c0 <clust2sect>
 8014a54:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014a56:	69bb      	ldr	r3, [r7, #24]
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d104      	bne.n	8014a66 <f_read+0x11a>
 8014a5c:	68fb      	ldr	r3, [r7, #12]
 8014a5e:	2202      	movs	r2, #2
 8014a60:	755a      	strb	r2, [r3, #21]
 8014a62:	2302      	movs	r3, #2
 8014a64:	e0ad      	b.n	8014bc2 <f_read+0x276>
			sect += csect;
 8014a66:	69ba      	ldr	r2, [r7, #24]
 8014a68:	69fb      	ldr	r3, [r7, #28]
 8014a6a:	4413      	add	r3, r2
 8014a6c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	0a5b      	lsrs	r3, r3, #9
 8014a72:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8014a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d039      	beq.n	8014aee <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014a7a:	69fa      	ldr	r2, [r7, #28]
 8014a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a7e:	4413      	add	r3, r2
 8014a80:	697a      	ldr	r2, [r7, #20]
 8014a82:	8952      	ldrh	r2, [r2, #10]
 8014a84:	4293      	cmp	r3, r2
 8014a86:	d905      	bls.n	8014a94 <f_read+0x148>
					cc = fs->csize - csect;
 8014a88:	697b      	ldr	r3, [r7, #20]
 8014a8a:	895b      	ldrh	r3, [r3, #10]
 8014a8c:	461a      	mov	r2, r3
 8014a8e:	69fb      	ldr	r3, [r7, #28]
 8014a90:	1ad3      	subs	r3, r2, r3
 8014a92:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014a94:	697b      	ldr	r3, [r7, #20]
 8014a96:	7858      	ldrb	r0, [r3, #1]
 8014a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a9a:	69ba      	ldr	r2, [r7, #24]
 8014a9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014a9e:	f7fd f9e5 	bl	8011e6c <disk_read>
 8014aa2:	4603      	mov	r3, r0
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d004      	beq.n	8014ab2 <f_read+0x166>
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	2201      	movs	r2, #1
 8014aac:	755a      	strb	r2, [r3, #21]
 8014aae:	2301      	movs	r3, #1
 8014ab0:	e087      	b.n	8014bc2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	7d1b      	ldrb	r3, [r3, #20]
 8014ab6:	b25b      	sxtb	r3, r3
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	da14      	bge.n	8014ae6 <f_read+0x19a>
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	6a1a      	ldr	r2, [r3, #32]
 8014ac0:	69bb      	ldr	r3, [r7, #24]
 8014ac2:	1ad3      	subs	r3, r2, r3
 8014ac4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014ac6:	429a      	cmp	r2, r3
 8014ac8:	d90d      	bls.n	8014ae6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	6a1a      	ldr	r2, [r3, #32]
 8014ace:	69bb      	ldr	r3, [r7, #24]
 8014ad0:	1ad3      	subs	r3, r2, r3
 8014ad2:	025b      	lsls	r3, r3, #9
 8014ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ad6:	18d0      	adds	r0, r2, r3
 8014ad8:	68fb      	ldr	r3, [r7, #12]
 8014ada:	3330      	adds	r3, #48	; 0x30
 8014adc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014ae0:	4619      	mov	r1, r3
 8014ae2:	f7fd faa3 	bl	801202c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8014ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ae8:	025b      	lsls	r3, r3, #9
 8014aea:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8014aec:	e050      	b.n	8014b90 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8014aee:	68fb      	ldr	r3, [r7, #12]
 8014af0:	6a1b      	ldr	r3, [r3, #32]
 8014af2:	69ba      	ldr	r2, [r7, #24]
 8014af4:	429a      	cmp	r2, r3
 8014af6:	d02e      	beq.n	8014b56 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	7d1b      	ldrb	r3, [r3, #20]
 8014afc:	b25b      	sxtb	r3, r3
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	da18      	bge.n	8014b34 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014b02:	697b      	ldr	r3, [r7, #20]
 8014b04:	7858      	ldrb	r0, [r3, #1]
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	6a1a      	ldr	r2, [r3, #32]
 8014b10:	2301      	movs	r3, #1
 8014b12:	f7fd f9cb 	bl	8011eac <disk_write>
 8014b16:	4603      	mov	r3, r0
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d004      	beq.n	8014b26 <f_read+0x1da>
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	2201      	movs	r2, #1
 8014b20:	755a      	strb	r2, [r3, #21]
 8014b22:	2301      	movs	r3, #1
 8014b24:	e04d      	b.n	8014bc2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	7d1b      	ldrb	r3, [r3, #20]
 8014b2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014b2e:	b2da      	uxtb	r2, r3
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014b34:	697b      	ldr	r3, [r7, #20]
 8014b36:	7858      	ldrb	r0, [r3, #1]
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014b3e:	2301      	movs	r3, #1
 8014b40:	69ba      	ldr	r2, [r7, #24]
 8014b42:	f7fd f993 	bl	8011e6c <disk_read>
 8014b46:	4603      	mov	r3, r0
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d004      	beq.n	8014b56 <f_read+0x20a>
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	2201      	movs	r2, #1
 8014b50:	755a      	strb	r2, [r3, #21]
 8014b52:	2301      	movs	r3, #1
 8014b54:	e035      	b.n	8014bc2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	69ba      	ldr	r2, [r7, #24]
 8014b5a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	699b      	ldr	r3, [r3, #24]
 8014b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014b64:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8014b68:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8014b6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	429a      	cmp	r2, r3
 8014b70:	d901      	bls.n	8014b76 <f_read+0x22a>
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	699b      	ldr	r3, [r3, #24]
 8014b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014b84:	4413      	add	r3, r2
 8014b86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014b88:	4619      	mov	r1, r3
 8014b8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014b8c:	f7fd fa4e 	bl	801202c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8014b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b94:	4413      	add	r3, r2
 8014b96:	627b      	str	r3, [r7, #36]	; 0x24
 8014b98:	68fb      	ldr	r3, [r7, #12]
 8014b9a:	699a      	ldr	r2, [r3, #24]
 8014b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b9e:	441a      	add	r2, r3
 8014ba0:	68fb      	ldr	r3, [r7, #12]
 8014ba2:	619a      	str	r2, [r3, #24]
 8014ba4:	683b      	ldr	r3, [r7, #0]
 8014ba6:	681a      	ldr	r2, [r3, #0]
 8014ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014baa:	441a      	add	r2, r3
 8014bac:	683b      	ldr	r3, [r7, #0]
 8014bae:	601a      	str	r2, [r3, #0]
 8014bb0:	687a      	ldr	r2, [r7, #4]
 8014bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bb4:	1ad3      	subs	r3, r2, r3
 8014bb6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	f47f af01 	bne.w	80149c2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8014bc0:	2300      	movs	r3, #0
}
 8014bc2:	4618      	mov	r0, r3
 8014bc4:	3738      	adds	r7, #56	; 0x38
 8014bc6:	46bd      	mov	sp, r7
 8014bc8:	bd80      	pop	{r7, pc}

08014bca <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8014bca:	b580      	push	{r7, lr}
 8014bcc:	b08c      	sub	sp, #48	; 0x30
 8014bce:	af00      	add	r7, sp, #0
 8014bd0:	60f8      	str	r0, [r7, #12]
 8014bd2:	60b9      	str	r1, [r7, #8]
 8014bd4:	607a      	str	r2, [r7, #4]
 8014bd6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8014bd8:	68bb      	ldr	r3, [r7, #8]
 8014bda:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014bdc:	683b      	ldr	r3, [r7, #0]
 8014bde:	2200      	movs	r2, #0
 8014be0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	f107 0210 	add.w	r2, r7, #16
 8014be8:	4611      	mov	r1, r2
 8014bea:	4618      	mov	r0, r3
 8014bec:	f7ff fc74 	bl	80144d8 <validate>
 8014bf0:	4603      	mov	r3, r0
 8014bf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014bf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d107      	bne.n	8014c0e <f_write+0x44>
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	7d5b      	ldrb	r3, [r3, #21]
 8014c02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8014c06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d002      	beq.n	8014c14 <f_write+0x4a>
 8014c0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014c12:	e14b      	b.n	8014eac <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	7d1b      	ldrb	r3, [r3, #20]
 8014c18:	f003 0302 	and.w	r3, r3, #2
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d101      	bne.n	8014c24 <f_write+0x5a>
 8014c20:	2307      	movs	r3, #7
 8014c22:	e143      	b.n	8014eac <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	699a      	ldr	r2, [r3, #24]
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	441a      	add	r2, r3
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	699b      	ldr	r3, [r3, #24]
 8014c30:	429a      	cmp	r2, r3
 8014c32:	f080 812d 	bcs.w	8014e90 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	699b      	ldr	r3, [r3, #24]
 8014c3a:	43db      	mvns	r3, r3
 8014c3c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8014c3e:	e127      	b.n	8014e90 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	699b      	ldr	r3, [r3, #24]
 8014c44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	f040 80e3 	bne.w	8014e14 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	699b      	ldr	r3, [r3, #24]
 8014c52:	0a5b      	lsrs	r3, r3, #9
 8014c54:	693a      	ldr	r2, [r7, #16]
 8014c56:	8952      	ldrh	r2, [r2, #10]
 8014c58:	3a01      	subs	r2, #1
 8014c5a:	4013      	ands	r3, r2
 8014c5c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8014c5e:	69bb      	ldr	r3, [r7, #24]
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d143      	bne.n	8014cec <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	699b      	ldr	r3, [r3, #24]
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d10c      	bne.n	8014c86 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	689b      	ldr	r3, [r3, #8]
 8014c70:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8014c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d11a      	bne.n	8014cae <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	2100      	movs	r1, #0
 8014c7c:	4618      	mov	r0, r3
 8014c7e:	f7fd feb7 	bl	80129f0 <create_chain>
 8014c82:	62b8      	str	r0, [r7, #40]	; 0x28
 8014c84:	e013      	b.n	8014cae <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d007      	beq.n	8014c9e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	699b      	ldr	r3, [r3, #24]
 8014c92:	4619      	mov	r1, r3
 8014c94:	68f8      	ldr	r0, [r7, #12]
 8014c96:	f7fd ff43 	bl	8012b20 <clmt_clust>
 8014c9a:	62b8      	str	r0, [r7, #40]	; 0x28
 8014c9c:	e007      	b.n	8014cae <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8014c9e:	68fa      	ldr	r2, [r7, #12]
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	69db      	ldr	r3, [r3, #28]
 8014ca4:	4619      	mov	r1, r3
 8014ca6:	4610      	mov	r0, r2
 8014ca8:	f7fd fea2 	bl	80129f0 <create_chain>
 8014cac:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	f000 80f2 	beq.w	8014e9a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cb8:	2b01      	cmp	r3, #1
 8014cba:	d104      	bne.n	8014cc6 <f_write+0xfc>
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	2202      	movs	r2, #2
 8014cc0:	755a      	strb	r2, [r3, #21]
 8014cc2:	2302      	movs	r3, #2
 8014cc4:	e0f2      	b.n	8014eac <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ccc:	d104      	bne.n	8014cd8 <f_write+0x10e>
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	2201      	movs	r2, #1
 8014cd2:	755a      	strb	r2, [r3, #21]
 8014cd4:	2301      	movs	r3, #1
 8014cd6:	e0e9      	b.n	8014eac <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014cdc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8014cde:	68fb      	ldr	r3, [r7, #12]
 8014ce0:	689b      	ldr	r3, [r3, #8]
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d102      	bne.n	8014cec <f_write+0x122>
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014cea:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	7d1b      	ldrb	r3, [r3, #20]
 8014cf0:	b25b      	sxtb	r3, r3
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	da18      	bge.n	8014d28 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014cf6:	693b      	ldr	r3, [r7, #16]
 8014cf8:	7858      	ldrb	r0, [r3, #1]
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	6a1a      	ldr	r2, [r3, #32]
 8014d04:	2301      	movs	r3, #1
 8014d06:	f7fd f8d1 	bl	8011eac <disk_write>
 8014d0a:	4603      	mov	r3, r0
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d004      	beq.n	8014d1a <f_write+0x150>
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	2201      	movs	r2, #1
 8014d14:	755a      	strb	r2, [r3, #21]
 8014d16:	2301      	movs	r3, #1
 8014d18:	e0c8      	b.n	8014eac <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014d1a:	68fb      	ldr	r3, [r7, #12]
 8014d1c:	7d1b      	ldrb	r3, [r3, #20]
 8014d1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014d22:	b2da      	uxtb	r2, r3
 8014d24:	68fb      	ldr	r3, [r7, #12]
 8014d26:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014d28:	693a      	ldr	r2, [r7, #16]
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	69db      	ldr	r3, [r3, #28]
 8014d2e:	4619      	mov	r1, r3
 8014d30:	4610      	mov	r0, r2
 8014d32:	f7fd fc45 	bl	80125c0 <clust2sect>
 8014d36:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014d38:	697b      	ldr	r3, [r7, #20]
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d104      	bne.n	8014d48 <f_write+0x17e>
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	2202      	movs	r2, #2
 8014d42:	755a      	strb	r2, [r3, #21]
 8014d44:	2302      	movs	r3, #2
 8014d46:	e0b1      	b.n	8014eac <f_write+0x2e2>
			sect += csect;
 8014d48:	697a      	ldr	r2, [r7, #20]
 8014d4a:	69bb      	ldr	r3, [r7, #24]
 8014d4c:	4413      	add	r3, r2
 8014d4e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	0a5b      	lsrs	r3, r3, #9
 8014d54:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8014d56:	6a3b      	ldr	r3, [r7, #32]
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d03c      	beq.n	8014dd6 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014d5c:	69ba      	ldr	r2, [r7, #24]
 8014d5e:	6a3b      	ldr	r3, [r7, #32]
 8014d60:	4413      	add	r3, r2
 8014d62:	693a      	ldr	r2, [r7, #16]
 8014d64:	8952      	ldrh	r2, [r2, #10]
 8014d66:	4293      	cmp	r3, r2
 8014d68:	d905      	bls.n	8014d76 <f_write+0x1ac>
					cc = fs->csize - csect;
 8014d6a:	693b      	ldr	r3, [r7, #16]
 8014d6c:	895b      	ldrh	r3, [r3, #10]
 8014d6e:	461a      	mov	r2, r3
 8014d70:	69bb      	ldr	r3, [r7, #24]
 8014d72:	1ad3      	subs	r3, r2, r3
 8014d74:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014d76:	693b      	ldr	r3, [r7, #16]
 8014d78:	7858      	ldrb	r0, [r3, #1]
 8014d7a:	6a3b      	ldr	r3, [r7, #32]
 8014d7c:	697a      	ldr	r2, [r7, #20]
 8014d7e:	69f9      	ldr	r1, [r7, #28]
 8014d80:	f7fd f894 	bl	8011eac <disk_write>
 8014d84:	4603      	mov	r3, r0
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d004      	beq.n	8014d94 <f_write+0x1ca>
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	2201      	movs	r2, #1
 8014d8e:	755a      	strb	r2, [r3, #21]
 8014d90:	2301      	movs	r3, #1
 8014d92:	e08b      	b.n	8014eac <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	6a1a      	ldr	r2, [r3, #32]
 8014d98:	697b      	ldr	r3, [r7, #20]
 8014d9a:	1ad3      	subs	r3, r2, r3
 8014d9c:	6a3a      	ldr	r2, [r7, #32]
 8014d9e:	429a      	cmp	r2, r3
 8014da0:	d915      	bls.n	8014dce <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	6a1a      	ldr	r2, [r3, #32]
 8014dac:	697b      	ldr	r3, [r7, #20]
 8014dae:	1ad3      	subs	r3, r2, r3
 8014db0:	025b      	lsls	r3, r3, #9
 8014db2:	69fa      	ldr	r2, [r7, #28]
 8014db4:	4413      	add	r3, r2
 8014db6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014dba:	4619      	mov	r1, r3
 8014dbc:	f7fd f936 	bl	801202c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014dc0:	68fb      	ldr	r3, [r7, #12]
 8014dc2:	7d1b      	ldrb	r3, [r3, #20]
 8014dc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014dc8:	b2da      	uxtb	r2, r3
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8014dce:	6a3b      	ldr	r3, [r7, #32]
 8014dd0:	025b      	lsls	r3, r3, #9
 8014dd2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8014dd4:	e03f      	b.n	8014e56 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	6a1b      	ldr	r3, [r3, #32]
 8014dda:	697a      	ldr	r2, [r7, #20]
 8014ddc:	429a      	cmp	r2, r3
 8014dde:	d016      	beq.n	8014e0e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8014de0:	68fb      	ldr	r3, [r7, #12]
 8014de2:	699a      	ldr	r2, [r3, #24]
 8014de4:	68fb      	ldr	r3, [r7, #12]
 8014de6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014de8:	429a      	cmp	r2, r3
 8014dea:	d210      	bcs.n	8014e0e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8014dec:	693b      	ldr	r3, [r7, #16]
 8014dee:	7858      	ldrb	r0, [r3, #1]
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014df6:	2301      	movs	r3, #1
 8014df8:	697a      	ldr	r2, [r7, #20]
 8014dfa:	f7fd f837 	bl	8011e6c <disk_read>
 8014dfe:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d004      	beq.n	8014e0e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	2201      	movs	r2, #1
 8014e08:	755a      	strb	r2, [r3, #21]
 8014e0a:	2301      	movs	r3, #1
 8014e0c:	e04e      	b.n	8014eac <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8014e0e:	68fb      	ldr	r3, [r7, #12]
 8014e10:	697a      	ldr	r2, [r7, #20]
 8014e12:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	699b      	ldr	r3, [r3, #24]
 8014e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014e1c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8014e20:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8014e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	429a      	cmp	r2, r3
 8014e28:	d901      	bls.n	8014e2e <f_write+0x264>
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8014e2e:	68fb      	ldr	r3, [r7, #12]
 8014e30:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8014e34:	68fb      	ldr	r3, [r7, #12]
 8014e36:	699b      	ldr	r3, [r3, #24]
 8014e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014e3c:	4413      	add	r3, r2
 8014e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014e40:	69f9      	ldr	r1, [r7, #28]
 8014e42:	4618      	mov	r0, r3
 8014e44:	f7fd f8f2 	bl	801202c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	7d1b      	ldrb	r3, [r3, #20]
 8014e4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014e50:	b2da      	uxtb	r2, r3
 8014e52:	68fb      	ldr	r3, [r7, #12]
 8014e54:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8014e56:	69fa      	ldr	r2, [r7, #28]
 8014e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e5a:	4413      	add	r3, r2
 8014e5c:	61fb      	str	r3, [r7, #28]
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	699a      	ldr	r2, [r3, #24]
 8014e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e64:	441a      	add	r2, r3
 8014e66:	68fb      	ldr	r3, [r7, #12]
 8014e68:	619a      	str	r2, [r3, #24]
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	68da      	ldr	r2, [r3, #12]
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	699b      	ldr	r3, [r3, #24]
 8014e72:	429a      	cmp	r2, r3
 8014e74:	bf38      	it	cc
 8014e76:	461a      	movcc	r2, r3
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	60da      	str	r2, [r3, #12]
 8014e7c:	683b      	ldr	r3, [r7, #0]
 8014e7e:	681a      	ldr	r2, [r3, #0]
 8014e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e82:	441a      	add	r2, r3
 8014e84:	683b      	ldr	r3, [r7, #0]
 8014e86:	601a      	str	r2, [r3, #0]
 8014e88:	687a      	ldr	r2, [r7, #4]
 8014e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e8c:	1ad3      	subs	r3, r2, r3
 8014e8e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	f47f aed4 	bne.w	8014c40 <f_write+0x76>
 8014e98:	e000      	b.n	8014e9c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014e9a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	7d1b      	ldrb	r3, [r3, #20]
 8014ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014ea4:	b2da      	uxtb	r2, r3
 8014ea6:	68fb      	ldr	r3, [r7, #12]
 8014ea8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8014eaa:	2300      	movs	r3, #0
}
 8014eac:	4618      	mov	r0, r3
 8014eae:	3730      	adds	r7, #48	; 0x30
 8014eb0:	46bd      	mov	sp, r7
 8014eb2:	bd80      	pop	{r7, pc}

08014eb4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8014eb4:	b580      	push	{r7, lr}
 8014eb6:	b086      	sub	sp, #24
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	f107 0208 	add.w	r2, r7, #8
 8014ec2:	4611      	mov	r1, r2
 8014ec4:	4618      	mov	r0, r3
 8014ec6:	f7ff fb07 	bl	80144d8 <validate>
 8014eca:	4603      	mov	r3, r0
 8014ecc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014ece:	7dfb      	ldrb	r3, [r7, #23]
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d168      	bne.n	8014fa6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	7d1b      	ldrb	r3, [r3, #20]
 8014ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d062      	beq.n	8014fa6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	7d1b      	ldrb	r3, [r3, #20]
 8014ee4:	b25b      	sxtb	r3, r3
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	da15      	bge.n	8014f16 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8014eea:	68bb      	ldr	r3, [r7, #8]
 8014eec:	7858      	ldrb	r0, [r3, #1]
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	6a1a      	ldr	r2, [r3, #32]
 8014ef8:	2301      	movs	r3, #1
 8014efa:	f7fc ffd7 	bl	8011eac <disk_write>
 8014efe:	4603      	mov	r3, r0
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d001      	beq.n	8014f08 <f_sync+0x54>
 8014f04:	2301      	movs	r3, #1
 8014f06:	e04f      	b.n	8014fa8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	7d1b      	ldrb	r3, [r3, #20]
 8014f0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014f10:	b2da      	uxtb	r2, r3
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8014f16:	f7f9 feb7 	bl	800ec88 <get_fattime>
 8014f1a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8014f1c:	68ba      	ldr	r2, [r7, #8]
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f22:	4619      	mov	r1, r3
 8014f24:	4610      	mov	r0, r2
 8014f26:	f7fd faaf 	bl	8012488 <move_window>
 8014f2a:	4603      	mov	r3, r0
 8014f2c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8014f2e:	7dfb      	ldrb	r3, [r7, #23]
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d138      	bne.n	8014fa6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f38:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	330b      	adds	r3, #11
 8014f3e:	781a      	ldrb	r2, [r3, #0]
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	330b      	adds	r3, #11
 8014f44:	f042 0220 	orr.w	r2, r2, #32
 8014f48:	b2d2      	uxtb	r2, r2
 8014f4a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	6818      	ldr	r0, [r3, #0]
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	689b      	ldr	r3, [r3, #8]
 8014f54:	461a      	mov	r2, r3
 8014f56:	68f9      	ldr	r1, [r7, #12]
 8014f58:	f7fd ffbc 	bl	8012ed4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014f5c:	68fb      	ldr	r3, [r7, #12]
 8014f5e:	f103 021c 	add.w	r2, r3, #28
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	68db      	ldr	r3, [r3, #12]
 8014f66:	4619      	mov	r1, r3
 8014f68:	4610      	mov	r0, r2
 8014f6a:	f7fd f833 	bl	8011fd4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8014f6e:	68fb      	ldr	r3, [r7, #12]
 8014f70:	3316      	adds	r3, #22
 8014f72:	6939      	ldr	r1, [r7, #16]
 8014f74:	4618      	mov	r0, r3
 8014f76:	f7fd f82d 	bl	8011fd4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	3312      	adds	r3, #18
 8014f7e:	2100      	movs	r1, #0
 8014f80:	4618      	mov	r0, r3
 8014f82:	f7fd f80c 	bl	8011f9e <st_word>
					fs->wflag = 1;
 8014f86:	68bb      	ldr	r3, [r7, #8]
 8014f88:	2201      	movs	r2, #1
 8014f8a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014f8c:	68bb      	ldr	r3, [r7, #8]
 8014f8e:	4618      	mov	r0, r3
 8014f90:	f7fd faa8 	bl	80124e4 <sync_fs>
 8014f94:	4603      	mov	r3, r0
 8014f96:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	7d1b      	ldrb	r3, [r3, #20]
 8014f9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014fa0:	b2da      	uxtb	r2, r3
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8014fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8014fa8:	4618      	mov	r0, r3
 8014faa:	3718      	adds	r7, #24
 8014fac:	46bd      	mov	sp, r7
 8014fae:	bd80      	pop	{r7, pc}

08014fb0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8014fb0:	b580      	push	{r7, lr}
 8014fb2:	b084      	sub	sp, #16
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8014fb8:	6878      	ldr	r0, [r7, #4]
 8014fba:	f7ff ff7b 	bl	8014eb4 <f_sync>
 8014fbe:	4603      	mov	r3, r0
 8014fc0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8014fc2:	7bfb      	ldrb	r3, [r7, #15]
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d118      	bne.n	8014ffa <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	f107 0208 	add.w	r2, r7, #8
 8014fce:	4611      	mov	r1, r2
 8014fd0:	4618      	mov	r0, r3
 8014fd2:	f7ff fa81 	bl	80144d8 <validate>
 8014fd6:	4603      	mov	r3, r0
 8014fd8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014fda:	7bfb      	ldrb	r3, [r7, #15]
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d10c      	bne.n	8014ffa <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	691b      	ldr	r3, [r3, #16]
 8014fe4:	4618      	mov	r0, r3
 8014fe6:	f7fd f9ab 	bl	8012340 <dec_lock>
 8014fea:	4603      	mov	r3, r0
 8014fec:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8014fee:	7bfb      	ldrb	r3, [r7, #15]
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d102      	bne.n	8014ffa <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	2200      	movs	r2, #0
 8014ff8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8014ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	3710      	adds	r7, #16
 8015000:	46bd      	mov	sp, r7
 8015002:	bd80      	pop	{r7, pc}

08015004 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8015004:	b580      	push	{r7, lr}
 8015006:	b086      	sub	sp, #24
 8015008:	af00      	add	r7, sp, #0
 801500a:	6078      	str	r0, [r7, #4]
 801500c:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	2b00      	cmp	r3, #0
 8015012:	d101      	bne.n	8015018 <f_opendir+0x14>
 8015014:	2309      	movs	r3, #9
 8015016:	e064      	b.n	80150e2 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 801501c:	f107 010c 	add.w	r1, r7, #12
 8015020:	463b      	mov	r3, r7
 8015022:	2200      	movs	r2, #0
 8015024:	4618      	mov	r0, r3
 8015026:	f7ff f805 	bl	8014034 <find_volume>
 801502a:	4603      	mov	r3, r0
 801502c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801502e:	7dfb      	ldrb	r3, [r7, #23]
 8015030:	2b00      	cmp	r3, #0
 8015032:	d14f      	bne.n	80150d4 <f_opendir+0xd0>
		obj->fs = fs;
 8015034:	68fa      	ldr	r2, [r7, #12]
 8015036:	693b      	ldr	r3, [r7, #16]
 8015038:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801503a:	683b      	ldr	r3, [r7, #0]
 801503c:	4619      	mov	r1, r3
 801503e:	6878      	ldr	r0, [r7, #4]
 8015040:	f7fe feec 	bl	8013e1c <follow_path>
 8015044:	4603      	mov	r3, r0
 8015046:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8015048:	7dfb      	ldrb	r3, [r7, #23]
 801504a:	2b00      	cmp	r3, #0
 801504c:	d13d      	bne.n	80150ca <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015054:	b25b      	sxtb	r3, r3
 8015056:	2b00      	cmp	r3, #0
 8015058:	db12      	blt.n	8015080 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801505a:	693b      	ldr	r3, [r7, #16]
 801505c:	799b      	ldrb	r3, [r3, #6]
 801505e:	f003 0310 	and.w	r3, r3, #16
 8015062:	2b00      	cmp	r3, #0
 8015064:	d00a      	beq.n	801507c <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8015066:	68fa      	ldr	r2, [r7, #12]
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	6a1b      	ldr	r3, [r3, #32]
 801506c:	4619      	mov	r1, r3
 801506e:	4610      	mov	r0, r2
 8015070:	f7fd ff11 	bl	8012e96 <ld_clust>
 8015074:	4602      	mov	r2, r0
 8015076:	693b      	ldr	r3, [r7, #16]
 8015078:	609a      	str	r2, [r3, #8]
 801507a:	e001      	b.n	8015080 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 801507c:	2305      	movs	r3, #5
 801507e:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8015080:	7dfb      	ldrb	r3, [r7, #23]
 8015082:	2b00      	cmp	r3, #0
 8015084:	d121      	bne.n	80150ca <f_opendir+0xc6>
				obj->id = fs->id;
 8015086:	68fb      	ldr	r3, [r7, #12]
 8015088:	88da      	ldrh	r2, [r3, #6]
 801508a:	693b      	ldr	r3, [r7, #16]
 801508c:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801508e:	2100      	movs	r1, #0
 8015090:	6878      	ldr	r0, [r7, #4]
 8015092:	f7fd fd79 	bl	8012b88 <dir_sdi>
 8015096:	4603      	mov	r3, r0
 8015098:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 801509a:	7dfb      	ldrb	r3, [r7, #23]
 801509c:	2b00      	cmp	r3, #0
 801509e:	d114      	bne.n	80150ca <f_opendir+0xc6>
					if (obj->sclust) {
 80150a0:	693b      	ldr	r3, [r7, #16]
 80150a2:	689b      	ldr	r3, [r3, #8]
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d00d      	beq.n	80150c4 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80150a8:	2100      	movs	r1, #0
 80150aa:	6878      	ldr	r0, [r7, #4]
 80150ac:	f7fd f8ba 	bl	8012224 <inc_lock>
 80150b0:	4602      	mov	r2, r0
 80150b2:	693b      	ldr	r3, [r7, #16]
 80150b4:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80150b6:	693b      	ldr	r3, [r7, #16]
 80150b8:	691b      	ldr	r3, [r3, #16]
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d105      	bne.n	80150ca <f_opendir+0xc6>
 80150be:	2312      	movs	r3, #18
 80150c0:	75fb      	strb	r3, [r7, #23]
 80150c2:	e002      	b.n	80150ca <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80150c4:	693b      	ldr	r3, [r7, #16]
 80150c6:	2200      	movs	r2, #0
 80150c8:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80150ca:	7dfb      	ldrb	r3, [r7, #23]
 80150cc:	2b04      	cmp	r3, #4
 80150ce:	d101      	bne.n	80150d4 <f_opendir+0xd0>
 80150d0:	2305      	movs	r3, #5
 80150d2:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80150d4:	7dfb      	ldrb	r3, [r7, #23]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d002      	beq.n	80150e0 <f_opendir+0xdc>
 80150da:	693b      	ldr	r3, [r7, #16]
 80150dc:	2200      	movs	r2, #0
 80150de:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80150e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80150e2:	4618      	mov	r0, r3
 80150e4:	3718      	adds	r7, #24
 80150e6:	46bd      	mov	sp, r7
 80150e8:	bd80      	pop	{r7, pc}

080150ea <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80150ea:	b580      	push	{r7, lr}
 80150ec:	b084      	sub	sp, #16
 80150ee:	af00      	add	r7, sp, #0
 80150f0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	f107 0208 	add.w	r2, r7, #8
 80150f8:	4611      	mov	r1, r2
 80150fa:	4618      	mov	r0, r3
 80150fc:	f7ff f9ec 	bl	80144d8 <validate>
 8015100:	4603      	mov	r3, r0
 8015102:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015104:	7bfb      	ldrb	r3, [r7, #15]
 8015106:	2b00      	cmp	r3, #0
 8015108:	d110      	bne.n	801512c <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	691b      	ldr	r3, [r3, #16]
 801510e:	2b00      	cmp	r3, #0
 8015110:	d006      	beq.n	8015120 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	691b      	ldr	r3, [r3, #16]
 8015116:	4618      	mov	r0, r3
 8015118:	f7fd f912 	bl	8012340 <dec_lock>
 801511c:	4603      	mov	r3, r0
 801511e:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8015120:	7bfb      	ldrb	r3, [r7, #15]
 8015122:	2b00      	cmp	r3, #0
 8015124:	d102      	bne.n	801512c <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	2200      	movs	r2, #0
 801512a:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 801512c:	7bfb      	ldrb	r3, [r7, #15]
}
 801512e:	4618      	mov	r0, r3
 8015130:	3710      	adds	r7, #16
 8015132:	46bd      	mov	sp, r7
 8015134:	bd80      	pop	{r7, pc}

08015136 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8015136:	b580      	push	{r7, lr}
 8015138:	b084      	sub	sp, #16
 801513a:	af00      	add	r7, sp, #0
 801513c:	6078      	str	r0, [r7, #4]
 801513e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	f107 0208 	add.w	r2, r7, #8
 8015146:	4611      	mov	r1, r2
 8015148:	4618      	mov	r0, r3
 801514a:	f7ff f9c5 	bl	80144d8 <validate>
 801514e:	4603      	mov	r3, r0
 8015150:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015152:	7bfb      	ldrb	r3, [r7, #15]
 8015154:	2b00      	cmp	r3, #0
 8015156:	d126      	bne.n	80151a6 <f_readdir+0x70>
		if (!fno) {
 8015158:	683b      	ldr	r3, [r7, #0]
 801515a:	2b00      	cmp	r3, #0
 801515c:	d106      	bne.n	801516c <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801515e:	2100      	movs	r1, #0
 8015160:	6878      	ldr	r0, [r7, #4]
 8015162:	f7fd fd11 	bl	8012b88 <dir_sdi>
 8015166:	4603      	mov	r3, r0
 8015168:	73fb      	strb	r3, [r7, #15]
 801516a:	e01c      	b.n	80151a6 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 801516c:	2100      	movs	r1, #0
 801516e:	6878      	ldr	r0, [r7, #4]
 8015170:	f7fe f8bd 	bl	80132ee <dir_read>
 8015174:	4603      	mov	r3, r0
 8015176:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8015178:	7bfb      	ldrb	r3, [r7, #15]
 801517a:	2b04      	cmp	r3, #4
 801517c:	d101      	bne.n	8015182 <f_readdir+0x4c>
 801517e:	2300      	movs	r3, #0
 8015180:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8015182:	7bfb      	ldrb	r3, [r7, #15]
 8015184:	2b00      	cmp	r3, #0
 8015186:	d10e      	bne.n	80151a6 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8015188:	6839      	ldr	r1, [r7, #0]
 801518a:	6878      	ldr	r0, [r7, #4]
 801518c:	f7fe fb0e 	bl	80137ac <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8015190:	2100      	movs	r1, #0
 8015192:	6878      	ldr	r0, [r7, #4]
 8015194:	f7fd fd73 	bl	8012c7e <dir_next>
 8015198:	4603      	mov	r3, r0
 801519a:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 801519c:	7bfb      	ldrb	r3, [r7, #15]
 801519e:	2b04      	cmp	r3, #4
 80151a0:	d101      	bne.n	80151a6 <f_readdir+0x70>
 80151a2:	2300      	movs	r3, #0
 80151a4:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80151a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80151a8:	4618      	mov	r0, r3
 80151aa:	3710      	adds	r7, #16
 80151ac:	46bd      	mov	sp, r7
 80151ae:	bd80      	pop	{r7, pc}

080151b0 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 80151b0:	b580      	push	{r7, lr}
 80151b2:	b084      	sub	sp, #16
 80151b4:	af00      	add	r7, sp, #0
 80151b6:	6078      	str	r0, [r7, #4]
 80151b8:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 80151ba:	6839      	ldr	r1, [r7, #0]
 80151bc:	6878      	ldr	r0, [r7, #4]
 80151be:	f7ff ffba 	bl	8015136 <f_readdir>
 80151c2:	4603      	mov	r3, r0
 80151c4:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 80151c6:	7bfb      	ldrb	r3, [r7, #15]
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d114      	bne.n	80151f6 <f_findnext+0x46>
 80151cc:	683b      	ldr	r3, [r7, #0]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d011      	beq.n	80151f6 <f_findnext+0x46>
 80151d2:	683b      	ldr	r3, [r7, #0]
 80151d4:	7d9b      	ldrb	r3, [r3, #22]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d00d      	beq.n	80151f6 <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80151de:	683b      	ldr	r3, [r7, #0]
 80151e0:	f103 0116 	add.w	r1, r3, #22
 80151e4:	2300      	movs	r3, #0
 80151e6:	2200      	movs	r2, #0
 80151e8:	f7fe fbe4 	bl	80139b4 <pattern_matching>
 80151ec:	4603      	mov	r3, r0
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d100      	bne.n	80151f4 <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 80151f2:	e7e2      	b.n	80151ba <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 80151f4:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 80151f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80151f8:	4618      	mov	r0, r3
 80151fa:	3710      	adds	r7, #16
 80151fc:	46bd      	mov	sp, r7
 80151fe:	bd80      	pop	{r7, pc}

08015200 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 8015200:	b580      	push	{r7, lr}
 8015202:	b086      	sub	sp, #24
 8015204:	af00      	add	r7, sp, #0
 8015206:	60f8      	str	r0, [r7, #12]
 8015208:	60b9      	str	r1, [r7, #8]
 801520a:	607a      	str	r2, [r7, #4]
 801520c:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	683a      	ldr	r2, [r7, #0]
 8015212:	635a      	str	r2, [r3, #52]	; 0x34
	res = f_opendir(dp, path);		/* Open the target directory */
 8015214:	6879      	ldr	r1, [r7, #4]
 8015216:	68f8      	ldr	r0, [r7, #12]
 8015218:	f7ff fef4 	bl	8015004 <f_opendir>
 801521c:	4603      	mov	r3, r0
 801521e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015220:	7dfb      	ldrb	r3, [r7, #23]
 8015222:	2b00      	cmp	r3, #0
 8015224:	d105      	bne.n	8015232 <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 8015226:	68b9      	ldr	r1, [r7, #8]
 8015228:	68f8      	ldr	r0, [r7, #12]
 801522a:	f7ff ffc1 	bl	80151b0 <f_findnext>
 801522e:	4603      	mov	r3, r0
 8015230:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 8015232:	7dfb      	ldrb	r3, [r7, #23]
}
 8015234:	4618      	mov	r0, r3
 8015236:	3718      	adds	r7, #24
 8015238:	46bd      	mov	sp, r7
 801523a:	bd80      	pop	{r7, pc}

0801523c <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801523c:	b580      	push	{r7, lr}
 801523e:	b092      	sub	sp, #72	; 0x48
 8015240:	af00      	add	r7, sp, #0
 8015242:	6078      	str	r0, [r7, #4]
 8015244:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8015246:	f107 010c 	add.w	r1, r7, #12
 801524a:	1d3b      	adds	r3, r7, #4
 801524c:	2200      	movs	r2, #0
 801524e:	4618      	mov	r0, r3
 8015250:	f7fe fef0 	bl	8014034 <find_volume>
 8015254:	4603      	mov	r3, r0
 8015256:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 801525a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801525e:	2b00      	cmp	r3, #0
 8015260:	d11f      	bne.n	80152a2 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8015262:	687a      	ldr	r2, [r7, #4]
 8015264:	f107 030c 	add.w	r3, r7, #12
 8015268:	4611      	mov	r1, r2
 801526a:	4618      	mov	r0, r3
 801526c:	f7fe fdd6 	bl	8013e1c <follow_path>
 8015270:	4603      	mov	r3, r0
 8015272:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (res == FR_OK) {				/* Follow completed */
 8015276:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801527a:	2b00      	cmp	r3, #0
 801527c:	d111      	bne.n	80152a2 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 801527e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8015282:	b25b      	sxtb	r3, r3
 8015284:	2b00      	cmp	r3, #0
 8015286:	da03      	bge.n	8015290 <f_stat+0x54>
				res = FR_INVALID_NAME;
 8015288:	2306      	movs	r3, #6
 801528a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801528e:	e008      	b.n	80152a2 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8015290:	683b      	ldr	r3, [r7, #0]
 8015292:	2b00      	cmp	r3, #0
 8015294:	d005      	beq.n	80152a2 <f_stat+0x66>
 8015296:	f107 030c 	add.w	r3, r7, #12
 801529a:	6839      	ldr	r1, [r7, #0]
 801529c:	4618      	mov	r0, r3
 801529e:	f7fe fa85 	bl	80137ac <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 80152a2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80152a6:	4618      	mov	r0, r3
 80152a8:	3748      	adds	r7, #72	; 0x48
 80152aa:	46bd      	mov	sp, r7
 80152ac:	bd80      	pop	{r7, pc}

080152ae <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80152ae:	b580      	push	{r7, lr}
 80152b0:	b092      	sub	sp, #72	; 0x48
 80152b2:	af00      	add	r7, sp, #0
 80152b4:	60f8      	str	r0, [r7, #12]
 80152b6:	60b9      	str	r1, [r7, #8]
 80152b8:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80152ba:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80152be:	f107 030c 	add.w	r3, r7, #12
 80152c2:	2200      	movs	r2, #0
 80152c4:	4618      	mov	r0, r3
 80152c6:	f7fe feb5 	bl	8014034 <find_volume>
 80152ca:	4603      	mov	r3, r0
 80152cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80152d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	f040 8099 	bne.w	801540c <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80152da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80152e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152e2:	695a      	ldr	r2, [r3, #20]
 80152e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152e6:	699b      	ldr	r3, [r3, #24]
 80152e8:	3b02      	subs	r3, #2
 80152ea:	429a      	cmp	r2, r3
 80152ec:	d804      	bhi.n	80152f8 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80152ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152f0:	695a      	ldr	r2, [r3, #20]
 80152f2:	68bb      	ldr	r3, [r7, #8]
 80152f4:	601a      	str	r2, [r3, #0]
 80152f6:	e089      	b.n	801540c <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80152f8:	2300      	movs	r3, #0
 80152fa:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80152fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152fe:	781b      	ldrb	r3, [r3, #0]
 8015300:	2b01      	cmp	r3, #1
 8015302:	d128      	bne.n	8015356 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8015304:	2302      	movs	r3, #2
 8015306:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801530a:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 801530c:	f107 0314 	add.w	r3, r7, #20
 8015310:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015312:	4618      	mov	r0, r3
 8015314:	f7fd f973 	bl	80125fe <get_fat>
 8015318:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 801531a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801531c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015320:	d103      	bne.n	801532a <f_getfree+0x7c>
 8015322:	2301      	movs	r3, #1
 8015324:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8015328:	e063      	b.n	80153f2 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 801532a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801532c:	2b01      	cmp	r3, #1
 801532e:	d103      	bne.n	8015338 <f_getfree+0x8a>
 8015330:	2302      	movs	r3, #2
 8015332:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8015336:	e05c      	b.n	80153f2 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8015338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801533a:	2b00      	cmp	r3, #0
 801533c:	d102      	bne.n	8015344 <f_getfree+0x96>
 801533e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015340:	3301      	adds	r3, #1
 8015342:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8015344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015346:	3301      	adds	r3, #1
 8015348:	63fb      	str	r3, [r7, #60]	; 0x3c
 801534a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801534c:	699b      	ldr	r3, [r3, #24]
 801534e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015350:	429a      	cmp	r2, r3
 8015352:	d3db      	bcc.n	801530c <f_getfree+0x5e>
 8015354:	e04d      	b.n	80153f2 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8015356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015358:	699b      	ldr	r3, [r3, #24]
 801535a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801535c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015360:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8015362:	2300      	movs	r3, #0
 8015364:	637b      	str	r3, [r7, #52]	; 0x34
 8015366:	2300      	movs	r3, #0
 8015368:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 801536a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801536c:	2b00      	cmp	r3, #0
 801536e:	d113      	bne.n	8015398 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8015370:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015374:	1c5a      	adds	r2, r3, #1
 8015376:	63ba      	str	r2, [r7, #56]	; 0x38
 8015378:	4619      	mov	r1, r3
 801537a:	f7fd f885 	bl	8012488 <move_window>
 801537e:	4603      	mov	r3, r0
 8015380:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8015384:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015388:	2b00      	cmp	r3, #0
 801538a:	d131      	bne.n	80153f0 <f_getfree+0x142>
							p = fs->win;
 801538c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801538e:	3334      	adds	r3, #52	; 0x34
 8015390:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8015392:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015396:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8015398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801539a:	781b      	ldrb	r3, [r3, #0]
 801539c:	2b02      	cmp	r3, #2
 801539e:	d10f      	bne.n	80153c0 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80153a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80153a2:	f7fc fdc1 	bl	8011f28 <ld_word>
 80153a6:	4603      	mov	r3, r0
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d102      	bne.n	80153b2 <f_getfree+0x104>
 80153ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80153ae:	3301      	adds	r3, #1
 80153b0:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 80153b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153b4:	3302      	adds	r3, #2
 80153b6:	633b      	str	r3, [r7, #48]	; 0x30
 80153b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80153ba:	3b02      	subs	r3, #2
 80153bc:	637b      	str	r3, [r7, #52]	; 0x34
 80153be:	e010      	b.n	80153e2 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80153c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80153c2:	f7fc fdc9 	bl	8011f58 <ld_dword>
 80153c6:	4603      	mov	r3, r0
 80153c8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d102      	bne.n	80153d6 <f_getfree+0x128>
 80153d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80153d2:	3301      	adds	r3, #1
 80153d4:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80153d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153d8:	3304      	adds	r3, #4
 80153da:	633b      	str	r3, [r7, #48]	; 0x30
 80153dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80153de:	3b04      	subs	r3, #4
 80153e0:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 80153e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80153e4:	3b01      	subs	r3, #1
 80153e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80153e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d1bd      	bne.n	801536a <f_getfree+0xbc>
 80153ee:	e000      	b.n	80153f2 <f_getfree+0x144>
							if (res != FR_OK) break;
 80153f0:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80153f2:	68bb      	ldr	r3, [r7, #8]
 80153f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80153f6:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80153f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80153fc:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80153fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015400:	791a      	ldrb	r2, [r3, #4]
 8015402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015404:	f042 0201 	orr.w	r2, r2, #1
 8015408:	b2d2      	uxtb	r2, r2
 801540a:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 801540c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8015410:	4618      	mov	r0, r3
 8015412:	3748      	adds	r7, #72	; 0x48
 8015414:	46bd      	mov	sp, r7
 8015416:	bd80      	pop	{r7, pc}

08015418 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015418:	b480      	push	{r7}
 801541a:	b087      	sub	sp, #28
 801541c:	af00      	add	r7, sp, #0
 801541e:	60f8      	str	r0, [r7, #12]
 8015420:	60b9      	str	r1, [r7, #8]
 8015422:	4613      	mov	r3, r2
 8015424:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8015426:	2301      	movs	r3, #1
 8015428:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801542a:	2300      	movs	r3, #0
 801542c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801542e:	4b1f      	ldr	r3, [pc, #124]	; (80154ac <FATFS_LinkDriverEx+0x94>)
 8015430:	7a5b      	ldrb	r3, [r3, #9]
 8015432:	b2db      	uxtb	r3, r3
 8015434:	2b00      	cmp	r3, #0
 8015436:	d131      	bne.n	801549c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015438:	4b1c      	ldr	r3, [pc, #112]	; (80154ac <FATFS_LinkDriverEx+0x94>)
 801543a:	7a5b      	ldrb	r3, [r3, #9]
 801543c:	b2db      	uxtb	r3, r3
 801543e:	461a      	mov	r2, r3
 8015440:	4b1a      	ldr	r3, [pc, #104]	; (80154ac <FATFS_LinkDriverEx+0x94>)
 8015442:	2100      	movs	r1, #0
 8015444:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8015446:	4b19      	ldr	r3, [pc, #100]	; (80154ac <FATFS_LinkDriverEx+0x94>)
 8015448:	7a5b      	ldrb	r3, [r3, #9]
 801544a:	b2db      	uxtb	r3, r3
 801544c:	4a17      	ldr	r2, [pc, #92]	; (80154ac <FATFS_LinkDriverEx+0x94>)
 801544e:	009b      	lsls	r3, r3, #2
 8015450:	4413      	add	r3, r2
 8015452:	68fa      	ldr	r2, [r7, #12]
 8015454:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8015456:	4b15      	ldr	r3, [pc, #84]	; (80154ac <FATFS_LinkDriverEx+0x94>)
 8015458:	7a5b      	ldrb	r3, [r3, #9]
 801545a:	b2db      	uxtb	r3, r3
 801545c:	461a      	mov	r2, r3
 801545e:	4b13      	ldr	r3, [pc, #76]	; (80154ac <FATFS_LinkDriverEx+0x94>)
 8015460:	4413      	add	r3, r2
 8015462:	79fa      	ldrb	r2, [r7, #7]
 8015464:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8015466:	4b11      	ldr	r3, [pc, #68]	; (80154ac <FATFS_LinkDriverEx+0x94>)
 8015468:	7a5b      	ldrb	r3, [r3, #9]
 801546a:	b2db      	uxtb	r3, r3
 801546c:	1c5a      	adds	r2, r3, #1
 801546e:	b2d1      	uxtb	r1, r2
 8015470:	4a0e      	ldr	r2, [pc, #56]	; (80154ac <FATFS_LinkDriverEx+0x94>)
 8015472:	7251      	strb	r1, [r2, #9]
 8015474:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8015476:	7dbb      	ldrb	r3, [r7, #22]
 8015478:	3330      	adds	r3, #48	; 0x30
 801547a:	b2da      	uxtb	r2, r3
 801547c:	68bb      	ldr	r3, [r7, #8]
 801547e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015480:	68bb      	ldr	r3, [r7, #8]
 8015482:	3301      	adds	r3, #1
 8015484:	223a      	movs	r2, #58	; 0x3a
 8015486:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015488:	68bb      	ldr	r3, [r7, #8]
 801548a:	3302      	adds	r3, #2
 801548c:	222f      	movs	r2, #47	; 0x2f
 801548e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015490:	68bb      	ldr	r3, [r7, #8]
 8015492:	3303      	adds	r3, #3
 8015494:	2200      	movs	r2, #0
 8015496:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015498:	2300      	movs	r3, #0
 801549a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801549c:	7dfb      	ldrb	r3, [r7, #23]
}
 801549e:	4618      	mov	r0, r3
 80154a0:	371c      	adds	r7, #28
 80154a2:	46bd      	mov	sp, r7
 80154a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154a8:	4770      	bx	lr
 80154aa:	bf00      	nop
 80154ac:	2400a658 	.word	0x2400a658

080154b0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80154b0:	b580      	push	{r7, lr}
 80154b2:	b082      	sub	sp, #8
 80154b4:	af00      	add	r7, sp, #0
 80154b6:	6078      	str	r0, [r7, #4]
 80154b8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80154ba:	2200      	movs	r2, #0
 80154bc:	6839      	ldr	r1, [r7, #0]
 80154be:	6878      	ldr	r0, [r7, #4]
 80154c0:	f7ff ffaa 	bl	8015418 <FATFS_LinkDriverEx>
 80154c4:	4603      	mov	r3, r0
}
 80154c6:	4618      	mov	r0, r3
 80154c8:	3708      	adds	r7, #8
 80154ca:	46bd      	mov	sp, r7
 80154cc:	bd80      	pop	{r7, pc}

080154ce <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 80154ce:	b480      	push	{r7}
 80154d0:	b083      	sub	sp, #12
 80154d2:	af00      	add	r7, sp, #0
 80154d4:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	687a      	ldr	r2, [r7, #4]
 80154da:	605a      	str	r2, [r3, #4]
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	685a      	ldr	r2, [r3, #4]
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	601a      	str	r2, [r3, #0]
}
 80154e4:	bf00      	nop
 80154e6:	370c      	adds	r7, #12
 80154e8:	46bd      	mov	sp, r7
 80154ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ee:	4770      	bx	lr

080154f0 <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 80154f0:	b480      	push	{r7}
 80154f2:	b083      	sub	sp, #12
 80154f4:	af00      	add	r7, sp, #0
 80154f6:	6078      	str	r0, [r7, #4]
 80154f8:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	685a      	ldr	r2, [r3, #4]
 80154fe:	683b      	ldr	r3, [r7, #0]
 8015500:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8015502:	683b      	ldr	r3, [r7, #0]
 8015504:	687a      	ldr	r2, [r7, #4]
 8015506:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 8015508:	683b      	ldr	r3, [r7, #0]
 801550a:	681b      	ldr	r3, [r3, #0]
 801550c:	683a      	ldr	r2, [r7, #0]
 801550e:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 8015510:	683b      	ldr	r3, [r7, #0]
 8015512:	685b      	ldr	r3, [r3, #4]
 8015514:	683a      	ldr	r2, [r7, #0]
 8015516:	601a      	str	r2, [r3, #0]
}
 8015518:	bf00      	nop
 801551a:	370c      	adds	r7, #12
 801551c:	46bd      	mov	sp, r7
 801551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015522:	4770      	bx	lr

08015524 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 8015524:	b580      	push	{r7, lr}
 8015526:	b082      	sub	sp, #8
 8015528:	af00      	add	r7, sp, #0
 801552a:	6078      	str	r0, [r7, #4]
 801552c:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 801552e:	6839      	ldr	r1, [r7, #0]
 8015530:	6878      	ldr	r0, [r7, #4]
 8015532:	f7ff ffdd 	bl	80154f0 <metal_list_add_before>
}
 8015536:	bf00      	nop
 8015538:	3708      	adds	r7, #8
 801553a:	46bd      	mov	sp, r7
 801553c:	bd80      	pop	{r7, pc}

0801553e <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 801553e:	b580      	push	{r7, lr}
 8015540:	b082      	sub	sp, #8
 8015542:	af00      	add	r7, sp, #0
 8015544:	6078      	str	r0, [r7, #4]
 8015546:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
 8015548:	6839      	ldr	r1, [r7, #0]
 801554a:	6878      	ldr	r0, [r7, #4]
 801554c:	f001 ff8a 	bl	8017464 <metal_machine_cache_flush>
}
 8015550:	bf00      	nop
 8015552:	3708      	adds	r7, #8
 8015554:	46bd      	mov	sp, r7
 8015556:	bd80      	pop	{r7, pc}

08015558 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 8015558:	b580      	push	{r7, lr}
 801555a:	b082      	sub	sp, #8
 801555c:	af00      	add	r7, sp, #0
 801555e:	6078      	str	r0, [r7, #4]
 8015560:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8015562:	6839      	ldr	r1, [r7, #0]
 8015564:	6878      	ldr	r0, [r7, #4]
 8015566:	f001 ff88 	bl	801747a <metal_machine_cache_invalidate>
}
 801556a:	bf00      	nop
 801556c:	3708      	adds	r7, #8
 801556e:	46bd      	mov	sp, r7
 8015570:	bd80      	pop	{r7, pc}

08015572 <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 8015572:	b580      	push	{r7, lr}
 8015574:	b082      	sub	sp, #8
 8015576:	af00      	add	r7, sp, #0
 8015578:	6078      	str	r0, [r7, #4]
 801557a:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
 801557c:	6839      	ldr	r1, [r7, #0]
 801557e:	6878      	ldr	r0, [r7, #4]
 8015580:	f7ff ffdd 	bl	801553e <__metal_cache_flush>
}
 8015584:	bf00      	nop
 8015586:	3708      	adds	r7, #8
 8015588:	46bd      	mov	sp, r7
 801558a:	bd80      	pop	{r7, pc}

0801558c <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 801558c:	b580      	push	{r7, lr}
 801558e:	b082      	sub	sp, #8
 8015590:	af00      	add	r7, sp, #0
 8015592:	6078      	str	r0, [r7, #4]
 8015594:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8015596:	6839      	ldr	r1, [r7, #0]
 8015598:	6878      	ldr	r0, [r7, #4]
 801559a:	f7ff ffdd 	bl	8015558 <__metal_cache_invalidate>
}
 801559e:	bf00      	nop
 80155a0:	3708      	adds	r7, #8
 80155a2:	46bd      	mov	sp, r7
 80155a4:	bd80      	pop	{r7, pc}
	...

080155a8 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 80155a8:	b580      	push	{r7, lr}
 80155aa:	b082      	sub	sp, #8
 80155ac:	af00      	add	r7, sp, #0
 80155ae:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d008      	beq.n	80155c8 <metal_bus_register+0x20>
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	681b      	ldr	r3, [r3, #0]
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d004      	beq.n	80155c8 <metal_bus_register+0x20>
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	681b      	ldr	r3, [r3, #0]
 80155c2:	781b      	ldrb	r3, [r3, #0]
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d102      	bne.n	80155ce <metal_bus_register+0x26>
		return -EINVAL;
 80155c8:	f06f 0315 	mvn.w	r3, #21
 80155cc:	e026      	b.n	801561c <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	2100      	movs	r1, #0
 80155d4:	4618      	mov	r0, r3
 80155d6:	f000 f82b 	bl	8015630 <metal_bus_find>
 80155da:	4603      	mov	r3, r0
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d102      	bne.n	80155e6 <metal_bus_register+0x3e>
		return -EEXIST;
 80155e0:	f06f 0310 	mvn.w	r3, #16
 80155e4:	e01a      	b.n	801561c <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	331c      	adds	r3, #28
 80155ea:	4618      	mov	r0, r3
 80155ec:	f7ff ff6f 	bl	80154ce <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	3324      	adds	r3, #36	; 0x24
 80155f4:	4619      	mov	r1, r3
 80155f6:	480b      	ldr	r0, [pc, #44]	; (8015624 <metal_bus_register+0x7c>)
 80155f8:	f7ff ff94 	bl	8015524 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 80155fc:	4b0a      	ldr	r3, [pc, #40]	; (8015628 <metal_bus_register+0x80>)
 80155fe:	781b      	ldrb	r3, [r3, #0]
 8015600:	2b06      	cmp	r3, #6
 8015602:	d90a      	bls.n	801561a <metal_bus_register+0x72>
 8015604:	4b08      	ldr	r3, [pc, #32]	; (8015628 <metal_bus_register+0x80>)
 8015606:	685b      	ldr	r3, [r3, #4]
 8015608:	2b00      	cmp	r3, #0
 801560a:	d006      	beq.n	801561a <metal_bus_register+0x72>
 801560c:	4b06      	ldr	r3, [pc, #24]	; (8015628 <metal_bus_register+0x80>)
 801560e:	685b      	ldr	r3, [r3, #4]
 8015610:	687a      	ldr	r2, [r7, #4]
 8015612:	6812      	ldr	r2, [r2, #0]
 8015614:	4905      	ldr	r1, [pc, #20]	; (801562c <metal_bus_register+0x84>)
 8015616:	2007      	movs	r0, #7
 8015618:	4798      	blx	r3
	return 0;
 801561a:	2300      	movs	r3, #0
}
 801561c:	4618      	mov	r0, r3
 801561e:	3708      	adds	r7, #8
 8015620:	46bd      	mov	sp, r7
 8015622:	bd80      	pop	{r7, pc}
 8015624:	2400b908 	.word	0x2400b908
 8015628:	2400b900 	.word	0x2400b900
 801562c:	08021628 	.word	0x08021628

08015630 <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
 8015630:	b580      	push	{r7, lr}
 8015632:	b084      	sub	sp, #16
 8015634:	af00      	add	r7, sp, #0
 8015636:	6078      	str	r0, [r7, #4]
 8015638:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 801563a:	4b13      	ldr	r3, [pc, #76]	; (8015688 <metal_bus_find+0x58>)
 801563c:	689b      	ldr	r3, [r3, #8]
 801563e:	60fb      	str	r3, [r7, #12]
 8015640:	e017      	b.n	8015672 <metal_bus_find+0x42>
		bus = metal_container_of(node, struct metal_bus, node);
 8015642:	68fb      	ldr	r3, [r7, #12]
 8015644:	3b24      	subs	r3, #36	; 0x24
 8015646:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) != 0)
 8015648:	68bb      	ldr	r3, [r7, #8]
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	6879      	ldr	r1, [r7, #4]
 801564e:	4618      	mov	r0, r3
 8015650:	f7ea fe46 	bl	80002e0 <strcmp>
 8015654:	4603      	mov	r3, r0
 8015656:	2b00      	cmp	r3, #0
 8015658:	d003      	beq.n	8015662 <metal_bus_find+0x32>
	metal_list_for_each(&_metal.common.bus_list, node) {
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	681b      	ldr	r3, [r3, #0]
 801565e:	60fb      	str	r3, [r7, #12]
 8015660:	e007      	b.n	8015672 <metal_bus_find+0x42>
			continue;
		if (result)
 8015662:	683b      	ldr	r3, [r7, #0]
 8015664:	2b00      	cmp	r3, #0
 8015666:	d002      	beq.n	801566e <metal_bus_find+0x3e>
			*result = bus;
 8015668:	683b      	ldr	r3, [r7, #0]
 801566a:	68ba      	ldr	r2, [r7, #8]
 801566c:	601a      	str	r2, [r3, #0]
		return 0;
 801566e:	2300      	movs	r3, #0
 8015670:	e005      	b.n	801567e <metal_bus_find+0x4e>
	metal_list_for_each(&_metal.common.bus_list, node) {
 8015672:	68fb      	ldr	r3, [r7, #12]
 8015674:	4a05      	ldr	r2, [pc, #20]	; (801568c <metal_bus_find+0x5c>)
 8015676:	4293      	cmp	r3, r2
 8015678:	d1e3      	bne.n	8015642 <metal_bus_find+0x12>
	}
	return -ENOENT;
 801567a:	f06f 0301 	mvn.w	r3, #1
}
 801567e:	4618      	mov	r0, r3
 8015680:	3710      	adds	r7, #16
 8015682:	46bd      	mov	sp, r7
 8015684:	bd80      	pop	{r7, pc}
 8015686:	bf00      	nop
 8015688:	2400b900 	.word	0x2400b900
 801568c:	2400b908 	.word	0x2400b908

08015690 <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 8015690:	b580      	push	{r7, lr}
 8015692:	b086      	sub	sp, #24
 8015694:	af00      	add	r7, sp, #0
 8015696:	60f8      	str	r0, [r7, #12]
 8015698:	60b9      	str	r1, [r7, #8]
 801569a:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 801569c:	68fb      	ldr	r3, [r7, #12]
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d00d      	beq.n	80156be <metal_device_open+0x2e>
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	781b      	ldrb	r3, [r3, #0]
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d009      	beq.n	80156be <metal_device_open+0x2e>
 80156aa:	68bb      	ldr	r3, [r7, #8]
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d006      	beq.n	80156be <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
 80156b0:	68bb      	ldr	r3, [r7, #8]
 80156b2:	781b      	ldrb	r3, [r3, #0]
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d002      	beq.n	80156be <metal_device_open+0x2e>
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d102      	bne.n	80156c4 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
 80156be:	f06f 0315 	mvn.w	r3, #21
 80156c2:	e01f      	b.n	8015704 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
 80156c4:	f107 0310 	add.w	r3, r7, #16
 80156c8:	4619      	mov	r1, r3
 80156ca:	68f8      	ldr	r0, [r7, #12]
 80156cc:	f7ff ffb0 	bl	8015630 <metal_bus_find>
 80156d0:	6178      	str	r0, [r7, #20]
	if (error)
 80156d2:	697b      	ldr	r3, [r7, #20]
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d001      	beq.n	80156dc <metal_device_open+0x4c>
		return error;
 80156d8:	697b      	ldr	r3, [r7, #20]
 80156da:	e013      	b.n	8015704 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
 80156dc:	693b      	ldr	r3, [r7, #16]
 80156de:	689b      	ldr	r3, [r3, #8]
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d102      	bne.n	80156ea <metal_device_open+0x5a>
		return -ENODEV;
 80156e4:	f06f 0312 	mvn.w	r3, #18
 80156e8:	e00c      	b.n	8015704 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 80156ea:	693b      	ldr	r3, [r7, #16]
 80156ec:	689b      	ldr	r3, [r3, #8]
 80156ee:	6938      	ldr	r0, [r7, #16]
 80156f0:	687a      	ldr	r2, [r7, #4]
 80156f2:	68b9      	ldr	r1, [r7, #8]
 80156f4:	4798      	blx	r3
 80156f6:	6178      	str	r0, [r7, #20]
	if (error)
 80156f8:	697b      	ldr	r3, [r7, #20]
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d001      	beq.n	8015702 <metal_device_open+0x72>
		return error;
 80156fe:	697b      	ldr	r3, [r7, #20]
 8015700:	e000      	b.n	8015704 <metal_device_open+0x74>

	return 0;
 8015702:	2300      	movs	r3, #0
}
 8015704:	4618      	mov	r0, r3
 8015706:	3718      	adds	r7, #24
 8015708:	46bd      	mov	sp, r7
 801570a:	bd80      	pop	{r7, pc}

0801570c <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
 801570c:	b580      	push	{r7, lr}
 801570e:	b082      	sub	sp, #8
 8015710:	af00      	add	r7, sp, #0
 8015712:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	681b      	ldr	r3, [r3, #0]
 8015718:	2b00      	cmp	r3, #0
 801571a:	d008      	beq.n	801572e <metal_register_generic_device+0x22>
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	781b      	ldrb	r3, [r3, #0]
 8015722:	2b00      	cmp	r3, #0
 8015724:	d003      	beq.n	801572e <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
 801572a:	2b02      	cmp	r3, #2
 801572c:	d902      	bls.n	8015734 <metal_register_generic_device+0x28>
		return -EINVAL;
 801572e:	f06f 0315 	mvn.w	r3, #21
 8015732:	e009      	b.n	8015748 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	4a06      	ldr	r2, [pc, #24]	; (8015750 <metal_register_generic_device+0x44>)
 8015738:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	336c      	adds	r3, #108	; 0x6c
 801573e:	4619      	mov	r1, r3
 8015740:	4804      	ldr	r0, [pc, #16]	; (8015754 <metal_register_generic_device+0x48>)
 8015742:	f7ff feef 	bl	8015524 <metal_list_add_tail>
			    &device->node);
	return 0;
 8015746:	2300      	movs	r3, #0
}
 8015748:	4618      	mov	r0, r3
 801574a:	3708      	adds	r7, #8
 801574c:	46bd      	mov	sp, r7
 801574e:	bd80      	pop	{r7, pc}
 8015750:	24000060 	.word	0x24000060
 8015754:	2400b918 	.word	0x2400b918

08015758 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 8015758:	b580      	push	{r7, lr}
 801575a:	b086      	sub	sp, #24
 801575c:	af00      	add	r7, sp, #0
 801575e:	60f8      	str	r0, [r7, #12]
 8015760:	60b9      	str	r1, [r7, #8]
 8015762:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8015764:	4b12      	ldr	r3, [pc, #72]	; (80157b0 <metal_generic_dev_open+0x58>)
 8015766:	699b      	ldr	r3, [r3, #24]
 8015768:	617b      	str	r3, [r7, #20]
 801576a:	e017      	b.n	801579c <metal_generic_dev_open+0x44>
		dev = metal_container_of(node, struct metal_device, node);
 801576c:	697b      	ldr	r3, [r7, #20]
 801576e:	3b6c      	subs	r3, #108	; 0x6c
 8015770:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) != 0)
 8015772:	693b      	ldr	r3, [r7, #16]
 8015774:	681b      	ldr	r3, [r3, #0]
 8015776:	68b9      	ldr	r1, [r7, #8]
 8015778:	4618      	mov	r0, r3
 801577a:	f7ea fdb1 	bl	80002e0 <strcmp>
 801577e:	4603      	mov	r3, r0
 8015780:	2b00      	cmp	r3, #0
 8015782:	d003      	beq.n	801578c <metal_generic_dev_open+0x34>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8015784:	697b      	ldr	r3, [r7, #20]
 8015786:	681b      	ldr	r3, [r3, #0]
 8015788:	617b      	str	r3, [r7, #20]
 801578a:	e007      	b.n	801579c <metal_generic_dev_open+0x44>
			continue;
		*device = dev;
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	693a      	ldr	r2, [r7, #16]
 8015790:	601a      	str	r2, [r3, #0]
		return metal_generic_dev_sys_open(dev);
 8015792:	6938      	ldr	r0, [r7, #16]
 8015794:	f000 f88c 	bl	80158b0 <metal_generic_dev_sys_open>
 8015798:	4603      	mov	r3, r0
 801579a:	e005      	b.n	80157a8 <metal_generic_dev_open+0x50>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 801579c:	697b      	ldr	r3, [r7, #20]
 801579e:	4a05      	ldr	r2, [pc, #20]	; (80157b4 <metal_generic_dev_open+0x5c>)
 80157a0:	4293      	cmp	r3, r2
 80157a2:	d1e3      	bne.n	801576c <metal_generic_dev_open+0x14>
	}

	return -ENODEV;
 80157a4:	f06f 0312 	mvn.w	r3, #18
}
 80157a8:	4618      	mov	r0, r3
 80157aa:	3718      	adds	r7, #24
 80157ac:	46bd      	mov	sp, r7
 80157ae:	bd80      	pop	{r7, pc}
 80157b0:	2400b900 	.word	0x2400b900
 80157b4:	2400b918 	.word	0x2400b918

080157b8 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 80157b8:	b580      	push	{r7, lr}
 80157ba:	b086      	sub	sp, #24
 80157bc:	af00      	add	r7, sp, #0
 80157be:	60f8      	str	r0, [r7, #12]
 80157c0:	60b9      	str	r1, [r7, #8]
 80157c2:	607a      	str	r2, [r7, #4]
 80157c4:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	int i;

	if (sg_out != sg_in)
 80157c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80157c8:	683b      	ldr	r3, [r7, #0]
 80157ca:	429a      	cmp	r2, r3
 80157cc:	d009      	beq.n	80157e2 <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 80157ce:	6a3a      	ldr	r2, [r7, #32]
 80157d0:	4613      	mov	r3, r2
 80157d2:	005b      	lsls	r3, r3, #1
 80157d4:	4413      	add	r3, r2
 80157d6:	009b      	lsls	r3, r3, #2
 80157d8:	461a      	mov	r2, r3
 80157da:	6839      	ldr	r1, [r7, #0]
 80157dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80157de:	f006 ff5f 	bl	801c6a0 <memcpy>
	for (i = 0; i < nents_in; i++) {
 80157e2:	2300      	movs	r3, #0
 80157e4:	617b      	str	r3, [r7, #20]
 80157e6:	e02f      	b.n	8015848 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	2b02      	cmp	r3, #2
 80157ec:	d114      	bne.n	8015818 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 80157ee:	697a      	ldr	r2, [r7, #20]
 80157f0:	4613      	mov	r3, r2
 80157f2:	005b      	lsls	r3, r3, #1
 80157f4:	4413      	add	r3, r2
 80157f6:	009b      	lsls	r3, r3, #2
 80157f8:	461a      	mov	r2, r3
 80157fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157fc:	4413      	add	r3, r2
 80157fe:	6818      	ldr	r0, [r3, #0]
 8015800:	697a      	ldr	r2, [r7, #20]
 8015802:	4613      	mov	r3, r2
 8015804:	005b      	lsls	r3, r3, #1
 8015806:	4413      	add	r3, r2
 8015808:	009b      	lsls	r3, r3, #2
 801580a:	461a      	mov	r2, r3
 801580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801580e:	4413      	add	r3, r2
 8015810:	689b      	ldr	r3, [r3, #8]
 8015812:	4619      	mov	r1, r3
 8015814:	f7ff fead 	bl	8015572 <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 8015818:	697a      	ldr	r2, [r7, #20]
 801581a:	4613      	mov	r3, r2
 801581c:	005b      	lsls	r3, r3, #1
 801581e:	4413      	add	r3, r2
 8015820:	009b      	lsls	r3, r3, #2
 8015822:	461a      	mov	r2, r3
 8015824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015826:	4413      	add	r3, r2
 8015828:	6818      	ldr	r0, [r3, #0]
 801582a:	697a      	ldr	r2, [r7, #20]
 801582c:	4613      	mov	r3, r2
 801582e:	005b      	lsls	r3, r3, #1
 8015830:	4413      	add	r3, r2
 8015832:	009b      	lsls	r3, r3, #2
 8015834:	461a      	mov	r2, r3
 8015836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015838:	4413      	add	r3, r2
 801583a:	689b      	ldr	r3, [r3, #8]
 801583c:	4619      	mov	r1, r3
 801583e:	f7ff fea5 	bl	801558c <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
 8015842:	697b      	ldr	r3, [r7, #20]
 8015844:	3301      	adds	r3, #1
 8015846:	617b      	str	r3, [r7, #20]
 8015848:	697a      	ldr	r2, [r7, #20]
 801584a:	6a3b      	ldr	r3, [r7, #32]
 801584c:	429a      	cmp	r2, r3
 801584e:	dbcb      	blt.n	80157e8 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
 8015850:	6a3b      	ldr	r3, [r7, #32]
}
 8015852:	4618      	mov	r0, r3
 8015854:	3718      	adds	r7, #24
 8015856:	46bd      	mov	sp, r7
 8015858:	bd80      	pop	{r7, pc}

0801585a <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 801585a:	b580      	push	{r7, lr}
 801585c:	b086      	sub	sp, #24
 801585e:	af00      	add	r7, sp, #0
 8015860:	60f8      	str	r0, [r7, #12]
 8015862:	60b9      	str	r1, [r7, #8]
 8015864:	607a      	str	r2, [r7, #4]
 8015866:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	(void)dir;
	int i;

	for (i = 0; i < nents; i++) {
 8015868:	2300      	movs	r3, #0
 801586a:	617b      	str	r3, [r7, #20]
 801586c:	e017      	b.n	801589e <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 801586e:	697a      	ldr	r2, [r7, #20]
 8015870:	4613      	mov	r3, r2
 8015872:	005b      	lsls	r3, r3, #1
 8015874:	4413      	add	r3, r2
 8015876:	009b      	lsls	r3, r3, #2
 8015878:	461a      	mov	r2, r3
 801587a:	683b      	ldr	r3, [r7, #0]
 801587c:	4413      	add	r3, r2
 801587e:	6818      	ldr	r0, [r3, #0]
 8015880:	697a      	ldr	r2, [r7, #20]
 8015882:	4613      	mov	r3, r2
 8015884:	005b      	lsls	r3, r3, #1
 8015886:	4413      	add	r3, r2
 8015888:	009b      	lsls	r3, r3, #2
 801588a:	461a      	mov	r2, r3
 801588c:	683b      	ldr	r3, [r7, #0]
 801588e:	4413      	add	r3, r2
 8015890:	689b      	ldr	r3, [r3, #8]
 8015892:	4619      	mov	r1, r3
 8015894:	f7ff fe7a 	bl	801558c <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
 8015898:	697b      	ldr	r3, [r7, #20]
 801589a:	3301      	adds	r3, #1
 801589c:	617b      	str	r3, [r7, #20]
 801589e:	697a      	ldr	r2, [r7, #20]
 80158a0:	6a3b      	ldr	r3, [r7, #32]
 80158a2:	429a      	cmp	r2, r3
 80158a4:	dbe3      	blt.n	801586e <metal_generic_dev_dma_unmap+0x14>
	}
}
 80158a6:	bf00      	nop
 80158a8:	bf00      	nop
 80158aa:	3718      	adds	r7, #24
 80158ac:	46bd      	mov	sp, r7
 80158ae:	bd80      	pop	{r7, pc}

080158b0 <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 80158b0:	b580      	push	{r7, lr}
 80158b2:	b084      	sub	sp, #16
 80158b4:	af00      	add	r7, sp, #0
 80158b6:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 80158b8:	2300      	movs	r3, #0
 80158ba:	60fb      	str	r3, [r7, #12]
 80158bc:	e013      	b.n	80158e6 <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
 80158be:	68fa      	ldr	r2, [r7, #12]
 80158c0:	4613      	mov	r3, r2
 80158c2:	005b      	lsls	r3, r3, #1
 80158c4:	4413      	add	r3, r2
 80158c6:	011b      	lsls	r3, r3, #4
 80158c8:	3308      	adds	r3, #8
 80158ca:	687a      	ldr	r2, [r7, #4]
 80158cc:	4413      	add	r3, r2
 80158ce:	3304      	adds	r3, #4
 80158d0:	60bb      	str	r3, [r7, #8]
		if (!io->size)
 80158d2:	68bb      	ldr	r3, [r7, #8]
 80158d4:	689b      	ldr	r3, [r3, #8]
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d00b      	beq.n	80158f2 <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
 80158da:	68b8      	ldr	r0, [r7, #8]
 80158dc:	f000 f81e 	bl	801591c <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	3301      	adds	r3, #1
 80158e4:	60fb      	str	r3, [r7, #12]
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	689b      	ldr	r3, [r3, #8]
 80158ea:	68fa      	ldr	r2, [r7, #12]
 80158ec:	429a      	cmp	r2, r3
 80158ee:	d3e6      	bcc.n	80158be <metal_generic_dev_sys_open+0xe>
 80158f0:	e000      	b.n	80158f4 <metal_generic_dev_sys_open+0x44>
			break;
 80158f2:	bf00      	nop
	}

	return 0;
 80158f4:	2300      	movs	r3, #0
}
 80158f6:	4618      	mov	r0, r3
 80158f8:	3710      	adds	r7, #16
 80158fa:	46bd      	mov	sp, r7
 80158fc:	bd80      	pop	{r7, pc}
	...

08015900 <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 8015900:	b580      	push	{r7, lr}
 8015902:	b082      	sub	sp, #8
 8015904:	af00      	add	r7, sp, #0
 8015906:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 8015908:	4803      	ldr	r0, [pc, #12]	; (8015918 <metal_sys_init+0x18>)
 801590a:	f7ff fe4d 	bl	80155a8 <metal_bus_register>
	return 0;
 801590e:	2300      	movs	r3, #0
}
 8015910:	4618      	mov	r0, r3
 8015912:	3708      	adds	r7, #8
 8015914:	46bd      	mov	sp, r7
 8015916:	bd80      	pop	{r7, pc}
 8015918:	24000060 	.word	0x24000060

0801591c <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 801591c:	b580      	push	{r7, lr}
 801591e:	b086      	sub	sp, #24
 8015920:	af00      	add	r7, sp, #0
 8015922:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = (size_t *)io->virt;
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	60fb      	str	r3, [r7, #12]
	psize = io->size;
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	689b      	ldr	r3, [r3, #8]
 801592e:	613b      	str	r3, [r7, #16]
	if (psize) {
 8015930:	693b      	ldr	r3, [r7, #16]
 8015932:	2b00      	cmp	r3, #0
 8015934:	d02c      	beq.n	8015990 <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	68db      	ldr	r3, [r3, #12]
 801593a:	693a      	ldr	r2, [r7, #16]
 801593c:	fa22 f303 	lsr.w	r3, r2, r3
 8015940:	2b00      	cmp	r3, #0
 8015942:	d005      	beq.n	8015950 <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	68db      	ldr	r3, [r3, #12]
 8015948:	2201      	movs	r2, #1
 801594a:	fa02 f303 	lsl.w	r3, r2, r3
 801594e:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8015950:	2300      	movs	r3, #0
 8015952:	617b      	str	r3, [r7, #20]
 8015954:	e013      	b.n	801597e <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	685a      	ldr	r2, [r3, #4]
 801595a:	697b      	ldr	r3, [r7, #20]
 801595c:	009b      	lsls	r3, r3, #2
 801595e:	4413      	add	r3, r2
 8015960:	6819      	ldr	r1, [r3, #0]
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	695b      	ldr	r3, [r3, #20]
 8015966:	693a      	ldr	r2, [r7, #16]
 8015968:	68f8      	ldr	r0, [r7, #12]
 801596a:	f001 fd91 	bl	8017490 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 801596e:	693b      	ldr	r3, [r7, #16]
 8015970:	009b      	lsls	r3, r3, #2
 8015972:	68fa      	ldr	r2, [r7, #12]
 8015974:	4413      	add	r3, r2
 8015976:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8015978:	697b      	ldr	r3, [r7, #20]
 801597a:	3301      	adds	r3, #1
 801597c:	617b      	str	r3, [r7, #20]
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	689a      	ldr	r2, [r3, #8]
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	68db      	ldr	r3, [r3, #12]
 8015986:	fa22 f303 	lsr.w	r3, r2, r3
 801598a:	697a      	ldr	r2, [r7, #20]
 801598c:	429a      	cmp	r2, r3
 801598e:	d9e2      	bls.n	8015956 <metal_sys_io_mem_map+0x3a>
		}
	}
}
 8015990:	bf00      	nop
 8015992:	3718      	adds	r7, #24
 8015994:	46bd      	mov	sp, r7
 8015996:	bd80      	pop	{r7, pc}

08015998 <metal_list_init>:
{
 8015998:	b480      	push	{r7}
 801599a:	b083      	sub	sp, #12
 801599c:	af00      	add	r7, sp, #0
 801599e:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	687a      	ldr	r2, [r7, #4]
 80159a4:	605a      	str	r2, [r3, #4]
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	685a      	ldr	r2, [r3, #4]
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	601a      	str	r2, [r3, #0]
}
 80159ae:	bf00      	nop
 80159b0:	370c      	adds	r7, #12
 80159b2:	46bd      	mov	sp, r7
 80159b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159b8:	4770      	bx	lr
	...

080159bc <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 80159bc:	b580      	push	{r7, lr}
 80159be:	b084      	sub	sp, #16
 80159c0:	af00      	add	r7, sp, #0
 80159c2:	6078      	str	r0, [r7, #4]
	int error = 0;
 80159c4:	2300      	movs	r3, #0
 80159c6:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
 80159c8:	2220      	movs	r2, #32
 80159ca:	2100      	movs	r1, #0
 80159cc:	4810      	ldr	r0, [pc, #64]	; (8015a10 <metal_init+0x54>)
 80159ce:	f006 fe8f 	bl	801c6f0 <memset>

	_metal.common.log_handler   = params->log_handler;
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	681b      	ldr	r3, [r3, #0]
 80159d6:	4a0e      	ldr	r2, [pc, #56]	; (8015a10 <metal_init+0x54>)
 80159d8:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	791a      	ldrb	r2, [r3, #4]
 80159de:	4b0c      	ldr	r3, [pc, #48]	; (8015a10 <metal_init+0x54>)
 80159e0:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
 80159e2:	480c      	ldr	r0, [pc, #48]	; (8015a14 <metal_init+0x58>)
 80159e4:	f7ff ffd8 	bl	8015998 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 80159e8:	480b      	ldr	r0, [pc, #44]	; (8015a18 <metal_init+0x5c>)
 80159ea:	f7ff ffd5 	bl	8015998 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 80159ee:	480b      	ldr	r0, [pc, #44]	; (8015a1c <metal_init+0x60>)
 80159f0:	f7ff ffd2 	bl	8015998 <metal_list_init>

	error = metal_sys_init(params);
 80159f4:	6878      	ldr	r0, [r7, #4]
 80159f6:	f7ff ff83 	bl	8015900 <metal_sys_init>
 80159fa:	60f8      	str	r0, [r7, #12]
	if (error)
 80159fc:	68fb      	ldr	r3, [r7, #12]
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d001      	beq.n	8015a06 <metal_init+0x4a>
		return error;
 8015a02:	68fb      	ldr	r3, [r7, #12]
 8015a04:	e000      	b.n	8015a08 <metal_init+0x4c>

	return error;
 8015a06:	68fb      	ldr	r3, [r7, #12]
}
 8015a08:	4618      	mov	r0, r3
 8015a0a:	3710      	adds	r7, #16
 8015a0c:	46bd      	mov	sp, r7
 8015a0e:	bd80      	pop	{r7, pc}
 8015a10:	2400b900 	.word	0x2400b900
 8015a14:	2400b908 	.word	0x2400b908
 8015a18:	2400b910 	.word	0x2400b910
 8015a1c:	2400b918 	.word	0x2400b918

08015a20 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 8015a20:	b480      	push	{r7}
 8015a22:	b083      	sub	sp, #12
 8015a24:	af00      	add	r7, sp, #0
 8015a26:	6078      	str	r0, [r7, #4]
 8015a28:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8015a2a:	687b      	ldr	r3, [r7, #4]
 8015a2c:	681b      	ldr	r3, [r3, #0]
		? (uint8_t *)io->virt + offset
		: NULL);
 8015a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a32:	d009      	beq.n	8015a48 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	689b      	ldr	r3, [r3, #8]
 8015a38:	683a      	ldr	r2, [r7, #0]
 8015a3a:	429a      	cmp	r2, r3
 8015a3c:	d804      	bhi.n	8015a48 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8015a42:	683b      	ldr	r3, [r7, #0]
 8015a44:	4413      	add	r3, r2
 8015a46:	e000      	b.n	8015a4a <metal_io_virt+0x2a>
 8015a48:	2300      	movs	r3, #0
}
 8015a4a:	4618      	mov	r0, r3
 8015a4c:	370c      	adds	r7, #12
 8015a4e:	46bd      	mov	sp, r7
 8015a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a54:	4770      	bx	lr

08015a56 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 8015a56:	b5b0      	push	{r4, r5, r7, lr}
 8015a58:	b08a      	sub	sp, #40	; 0x28
 8015a5a:	af00      	add	r7, sp, #0
 8015a5c:	60f8      	str	r0, [r7, #12]
 8015a5e:	60b9      	str	r1, [r7, #8]
 8015a60:	607a      	str	r2, [r7, #4]
 8015a62:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {NULL, NULL, NULL, NULL, NULL, NULL};
 8015a64:	f107 0310 	add.w	r3, r7, #16
 8015a68:	2200      	movs	r2, #0
 8015a6a:	601a      	str	r2, [r3, #0]
 8015a6c:	605a      	str	r2, [r3, #4]
 8015a6e:	609a      	str	r2, [r3, #8]
 8015a70:	60da      	str	r2, [r3, #12]
 8015a72:	611a      	str	r2, [r3, #16]
 8015a74:	615a      	str	r2, [r3, #20]

	io->virt = virt;
 8015a76:	68fb      	ldr	r3, [r7, #12]
 8015a78:	68ba      	ldr	r2, [r7, #8]
 8015a7a:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	687a      	ldr	r2, [r7, #4]
 8015a80:	605a      	str	r2, [r3, #4]
	io->size = size;
 8015a82:	68fb      	ldr	r3, [r7, #12]
 8015a84:	683a      	ldr	r2, [r7, #0]
 8015a86:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015a8c:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 8015a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a90:	2b1f      	cmp	r3, #31
 8015a92:	d904      	bls.n	8015a9e <metal_io_init+0x48>
		/* avoid overflow */
		io->page_mask = -1UL;
 8015a94:	68fb      	ldr	r3, [r7, #12]
 8015a96:	f04f 32ff 	mov.w	r2, #4294967295
 8015a9a:	611a      	str	r2, [r3, #16]
 8015a9c:	e006      	b.n	8015aac <metal_io_init+0x56>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 8015a9e:	2201      	movs	r2, #1
 8015aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8015aa6:	1e5a      	subs	r2, r3, #1
 8015aa8:	68fb      	ldr	r3, [r7, #12]
 8015aaa:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
 8015aac:	68fb      	ldr	r3, [r7, #12]
 8015aae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015ab0:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
 8015ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d00b      	beq.n	8015ad0 <metal_io_init+0x7a>
 8015ab8:	68fb      	ldr	r3, [r7, #12]
 8015aba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015abc:	f103 0418 	add.w	r4, r3, #24
 8015ac0:	4615      	mov	r5, r2
 8015ac2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015ac4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015ac6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015aca:	e884 0003 	stmia.w	r4, {r0, r1}
 8015ace:	e00a      	b.n	8015ae6 <metal_io_init+0x90>
 8015ad0:	68fb      	ldr	r3, [r7, #12]
 8015ad2:	f103 0418 	add.w	r4, r3, #24
 8015ad6:	f107 0510 	add.w	r5, r7, #16
 8015ada:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015adc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015ade:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015ae2:	e884 0003 	stmia.w	r4, {r0, r1}
	metal_sys_io_mem_map(io);
 8015ae6:	68f8      	ldr	r0, [r7, #12]
 8015ae8:	f7ff ff18 	bl	801591c <metal_sys_io_mem_map>
}
 8015aec:	bf00      	nop
 8015aee:	3728      	adds	r7, #40	; 0x28
 8015af0:	46bd      	mov	sp, r7
 8015af2:	bdb0      	pop	{r4, r5, r7, pc}

08015af4 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 8015af4:	b590      	push	{r4, r7, lr}
 8015af6:	b08b      	sub	sp, #44	; 0x2c
 8015af8:	af02      	add	r7, sp, #8
 8015afa:	60f8      	str	r0, [r7, #12]
 8015afc:	60b9      	str	r1, [r7, #8]
 8015afe:	607a      	str	r2, [r7, #4]
 8015b00:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8015b02:	68b9      	ldr	r1, [r7, #8]
 8015b04:	68f8      	ldr	r0, [r7, #12]
 8015b06:	f7ff ff8b 	bl	8015a20 <metal_io_virt>
 8015b0a:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8015b10:	68fb      	ldr	r3, [r7, #12]
 8015b12:	689b      	ldr	r3, [r3, #8]
 8015b14:	68ba      	ldr	r2, [r7, #8]
 8015b16:	429a      	cmp	r2, r3
 8015b18:	d902      	bls.n	8015b20 <metal_io_block_read+0x2c>
		return -ERANGE;
 8015b1a:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8015b1e:	e05c      	b.n	8015bda <metal_io_block_read+0xe6>
	if ((offset + len) > io->size)
 8015b20:	683a      	ldr	r2, [r7, #0]
 8015b22:	68bb      	ldr	r3, [r7, #8]
 8015b24:	441a      	add	r2, r3
 8015b26:	68fb      	ldr	r3, [r7, #12]
 8015b28:	689b      	ldr	r3, [r3, #8]
 8015b2a:	429a      	cmp	r2, r3
 8015b2c:	d904      	bls.n	8015b38 <metal_io_block_read+0x44>
		len = io->size - offset;
 8015b2e:	68fb      	ldr	r3, [r7, #12]
 8015b30:	689a      	ldr	r2, [r3, #8]
 8015b32:	68bb      	ldr	r3, [r7, #8]
 8015b34:	1ad3      	subs	r3, r2, r3
 8015b36:	603b      	str	r3, [r7, #0]
	retlen = len;
 8015b38:	683b      	ldr	r3, [r7, #0]
 8015b3a:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
 8015b3c:	68fb      	ldr	r3, [r7, #12]
 8015b3e:	6a1b      	ldr	r3, [r3, #32]
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d00a      	beq.n	8015b5a <metal_io_block_read+0x66>
		retlen = (*io->ops.block_read)(
 8015b44:	68fb      	ldr	r3, [r7, #12]
 8015b46:	6a1c      	ldr	r4, [r3, #32]
 8015b48:	683b      	ldr	r3, [r7, #0]
 8015b4a:	9300      	str	r3, [sp, #0]
 8015b4c:	2305      	movs	r3, #5
 8015b4e:	687a      	ldr	r2, [r7, #4]
 8015b50:	68b9      	ldr	r1, [r7, #8]
 8015b52:	68f8      	ldr	r0, [r7, #12]
 8015b54:	47a0      	blx	r4
 8015b56:	6178      	str	r0, [r7, #20]
 8015b58:	e03e      	b.n	8015bd8 <metal_io_block_read+0xe4>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 8015b5a:	f3bf 8f5b 	dmb	ish
		while ( len && (
 8015b5e:	e00c      	b.n	8015b7a <metal_io_block_read+0x86>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8015b60:	69fb      	ldr	r3, [r7, #28]
 8015b62:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8015b64:	69bb      	ldr	r3, [r7, #24]
 8015b66:	701a      	strb	r2, [r3, #0]
			dest++;
 8015b68:	69bb      	ldr	r3, [r7, #24]
 8015b6a:	3301      	adds	r3, #1
 8015b6c:	61bb      	str	r3, [r7, #24]
			ptr++;
 8015b6e:	69fb      	ldr	r3, [r7, #28]
 8015b70:	3301      	adds	r3, #1
 8015b72:	61fb      	str	r3, [r7, #28]
			len--;
 8015b74:	683b      	ldr	r3, [r7, #0]
 8015b76:	3b01      	subs	r3, #1
 8015b78:	603b      	str	r3, [r7, #0]
		while ( len && (
 8015b7a:	683b      	ldr	r3, [r7, #0]
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d017      	beq.n	8015bb0 <metal_io_block_read+0xbc>
			((uintptr_t)dest % sizeof(int)) ||
 8015b80:	69bb      	ldr	r3, [r7, #24]
 8015b82:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d1ea      	bne.n	8015b60 <metal_io_block_read+0x6c>
			((uintptr_t)ptr % sizeof(int)))) {
 8015b8a:	69fb      	ldr	r3, [r7, #28]
 8015b8c:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d1e5      	bne.n	8015b60 <metal_io_block_read+0x6c>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8015b94:	e00c      	b.n	8015bb0 <metal_io_block_read+0xbc>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 8015b96:	69fb      	ldr	r3, [r7, #28]
 8015b98:	681a      	ldr	r2, [r3, #0]
 8015b9a:	69bb      	ldr	r3, [r7, #24]
 8015b9c:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8015b9e:	69bb      	ldr	r3, [r7, #24]
 8015ba0:	3304      	adds	r3, #4
 8015ba2:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
 8015ba4:	69fb      	ldr	r3, [r7, #28]
 8015ba6:	3304      	adds	r3, #4
 8015ba8:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
 8015baa:	683b      	ldr	r3, [r7, #0]
 8015bac:	3b04      	subs	r3, #4
 8015bae:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8015bb0:	683b      	ldr	r3, [r7, #0]
 8015bb2:	2b03      	cmp	r3, #3
 8015bb4:	dcef      	bgt.n	8015b96 <metal_io_block_read+0xa2>
		for (; len != 0; dest++, ptr++, len--)
 8015bb6:	e00c      	b.n	8015bd2 <metal_io_block_read+0xde>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8015bb8:	69fb      	ldr	r3, [r7, #28]
 8015bba:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8015bbc:	69bb      	ldr	r3, [r7, #24]
 8015bbe:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
 8015bc0:	69bb      	ldr	r3, [r7, #24]
 8015bc2:	3301      	adds	r3, #1
 8015bc4:	61bb      	str	r3, [r7, #24]
 8015bc6:	69fb      	ldr	r3, [r7, #28]
 8015bc8:	3301      	adds	r3, #1
 8015bca:	61fb      	str	r3, [r7, #28]
 8015bcc:	683b      	ldr	r3, [r7, #0]
 8015bce:	3b01      	subs	r3, #1
 8015bd0:	603b      	str	r3, [r7, #0]
 8015bd2:	683b      	ldr	r3, [r7, #0]
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d1ef      	bne.n	8015bb8 <metal_io_block_read+0xc4>
	}
	return retlen;
 8015bd8:	697b      	ldr	r3, [r7, #20]
}
 8015bda:	4618      	mov	r0, r3
 8015bdc:	3724      	adds	r7, #36	; 0x24
 8015bde:	46bd      	mov	sp, r7
 8015be0:	bd90      	pop	{r4, r7, pc}

08015be2 <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 8015be2:	b590      	push	{r4, r7, lr}
 8015be4:	b08b      	sub	sp, #44	; 0x2c
 8015be6:	af02      	add	r7, sp, #8
 8015be8:	60f8      	str	r0, [r7, #12]
 8015bea:	60b9      	str	r1, [r7, #8]
 8015bec:	607a      	str	r2, [r7, #4]
 8015bee:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8015bf0:	68b9      	ldr	r1, [r7, #8]
 8015bf2:	68f8      	ldr	r0, [r7, #12]
 8015bf4:	f7ff ff14 	bl	8015a20 <metal_io_virt>
 8015bf8:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	689b      	ldr	r3, [r3, #8]
 8015c02:	68ba      	ldr	r2, [r7, #8]
 8015c04:	429a      	cmp	r2, r3
 8015c06:	d902      	bls.n	8015c0e <metal_io_block_write+0x2c>
		return -ERANGE;
 8015c08:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8015c0c:	e05b      	b.n	8015cc6 <metal_io_block_write+0xe4>
	if ((offset + len) > io->size)
 8015c0e:	683a      	ldr	r2, [r7, #0]
 8015c10:	68bb      	ldr	r3, [r7, #8]
 8015c12:	441a      	add	r2, r3
 8015c14:	68fb      	ldr	r3, [r7, #12]
 8015c16:	689b      	ldr	r3, [r3, #8]
 8015c18:	429a      	cmp	r2, r3
 8015c1a:	d904      	bls.n	8015c26 <metal_io_block_write+0x44>
		len = io->size - offset;
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	689a      	ldr	r2, [r3, #8]
 8015c20:	68bb      	ldr	r3, [r7, #8]
 8015c22:	1ad3      	subs	r3, r2, r3
 8015c24:	603b      	str	r3, [r7, #0]
	retlen = len;
 8015c26:	683b      	ldr	r3, [r7, #0]
 8015c28:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
 8015c2a:	68fb      	ldr	r3, [r7, #12]
 8015c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	d017      	beq.n	8015c62 <metal_io_block_write+0x80>
		retlen = (*io->ops.block_write)(
 8015c32:	68fb      	ldr	r3, [r7, #12]
 8015c34:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8015c36:	683b      	ldr	r3, [r7, #0]
 8015c38:	9300      	str	r3, [sp, #0]
 8015c3a:	2305      	movs	r3, #5
 8015c3c:	687a      	ldr	r2, [r7, #4]
 8015c3e:	68b9      	ldr	r1, [r7, #8]
 8015c40:	68f8      	ldr	r0, [r7, #12]
 8015c42:	47a0      	blx	r4
 8015c44:	6178      	str	r0, [r7, #20]
 8015c46:	e03d      	b.n	8015cc4 <metal_io_block_write+0xe2>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8015c48:	69bb      	ldr	r3, [r7, #24]
 8015c4a:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8015c4c:	69fb      	ldr	r3, [r7, #28]
 8015c4e:	701a      	strb	r2, [r3, #0]
			ptr++;
 8015c50:	69fb      	ldr	r3, [r7, #28]
 8015c52:	3301      	adds	r3, #1
 8015c54:	61fb      	str	r3, [r7, #28]
			source++;
 8015c56:	69bb      	ldr	r3, [r7, #24]
 8015c58:	3301      	adds	r3, #1
 8015c5a:	61bb      	str	r3, [r7, #24]
			len--;
 8015c5c:	683b      	ldr	r3, [r7, #0]
 8015c5e:	3b01      	subs	r3, #1
 8015c60:	603b      	str	r3, [r7, #0]
		while ( len && (
 8015c62:	683b      	ldr	r3, [r7, #0]
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d017      	beq.n	8015c98 <metal_io_block_write+0xb6>
			((uintptr_t)ptr % sizeof(int)) ||
 8015c68:	69fb      	ldr	r3, [r7, #28]
 8015c6a:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d1ea      	bne.n	8015c48 <metal_io_block_write+0x66>
			((uintptr_t)source % sizeof(int)))) {
 8015c72:	69bb      	ldr	r3, [r7, #24]
 8015c74:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d1e5      	bne.n	8015c48 <metal_io_block_write+0x66>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8015c7c:	e00c      	b.n	8015c98 <metal_io_block_write+0xb6>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 8015c7e:	69bb      	ldr	r3, [r7, #24]
 8015c80:	681a      	ldr	r2, [r3, #0]
 8015c82:	69fb      	ldr	r3, [r7, #28]
 8015c84:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8015c86:	69fb      	ldr	r3, [r7, #28]
 8015c88:	3304      	adds	r3, #4
 8015c8a:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
 8015c8c:	69bb      	ldr	r3, [r7, #24]
 8015c8e:	3304      	adds	r3, #4
 8015c90:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
 8015c92:	683b      	ldr	r3, [r7, #0]
 8015c94:	3b04      	subs	r3, #4
 8015c96:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8015c98:	683b      	ldr	r3, [r7, #0]
 8015c9a:	2b03      	cmp	r3, #3
 8015c9c:	dcef      	bgt.n	8015c7e <metal_io_block_write+0x9c>
		for (; len != 0; ptr++, source++, len--)
 8015c9e:	e00c      	b.n	8015cba <metal_io_block_write+0xd8>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8015ca0:	69bb      	ldr	r3, [r7, #24]
 8015ca2:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8015ca4:	69fb      	ldr	r3, [r7, #28]
 8015ca6:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
 8015ca8:	69fb      	ldr	r3, [r7, #28]
 8015caa:	3301      	adds	r3, #1
 8015cac:	61fb      	str	r3, [r7, #28]
 8015cae:	69bb      	ldr	r3, [r7, #24]
 8015cb0:	3301      	adds	r3, #1
 8015cb2:	61bb      	str	r3, [r7, #24]
 8015cb4:	683b      	ldr	r3, [r7, #0]
 8015cb6:	3b01      	subs	r3, #1
 8015cb8:	603b      	str	r3, [r7, #0]
 8015cba:	683b      	ldr	r3, [r7, #0]
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d1ef      	bne.n	8015ca0 <metal_io_block_write+0xbe>
		atomic_thread_fence(memory_order_seq_cst);
 8015cc0:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 8015cc4:	697b      	ldr	r3, [r7, #20]
}
 8015cc6:	4618      	mov	r0, r3
 8015cc8:	3724      	adds	r7, #36	; 0x24
 8015cca:	46bd      	mov	sp, r7
 8015ccc:	bd90      	pop	{r4, r7, pc}

08015cce <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
 8015cce:	b590      	push	{r4, r7, lr}
 8015cd0:	b08b      	sub	sp, #44	; 0x2c
 8015cd2:	af02      	add	r7, sp, #8
 8015cd4:	60f8      	str	r0, [r7, #12]
 8015cd6:	60b9      	str	r1, [r7, #8]
 8015cd8:	603b      	str	r3, [r7, #0]
 8015cda:	4613      	mov	r3, r2
 8015cdc:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = metal_io_virt(io, offset);
 8015cde:	68b9      	ldr	r1, [r7, #8]
 8015ce0:	68f8      	ldr	r0, [r7, #12]
 8015ce2:	f7ff fe9d 	bl	8015a20 <metal_io_virt>
 8015ce6:	61f8      	str	r0, [r7, #28]
	int retlen = len;
 8015ce8:	683b      	ldr	r3, [r7, #0]
 8015cea:	613b      	str	r3, [r7, #16]

	if (offset > io->size)
 8015cec:	68fb      	ldr	r3, [r7, #12]
 8015cee:	689b      	ldr	r3, [r3, #8]
 8015cf0:	68ba      	ldr	r2, [r7, #8]
 8015cf2:	429a      	cmp	r2, r3
 8015cf4:	d902      	bls.n	8015cfc <metal_io_block_set+0x2e>
		return -ERANGE;
 8015cf6:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8015cfa:	e05d      	b.n	8015db8 <metal_io_block_set+0xea>
	if ((offset + len) > io->size)
 8015cfc:	683a      	ldr	r2, [r7, #0]
 8015cfe:	68bb      	ldr	r3, [r7, #8]
 8015d00:	441a      	add	r2, r3
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	689b      	ldr	r3, [r3, #8]
 8015d06:	429a      	cmp	r2, r3
 8015d08:	d904      	bls.n	8015d14 <metal_io_block_set+0x46>
		len = io->size - offset;
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	689a      	ldr	r2, [r3, #8]
 8015d0e:	68bb      	ldr	r3, [r7, #8]
 8015d10:	1ad3      	subs	r3, r2, r3
 8015d12:	603b      	str	r3, [r7, #0]
	retlen = len;
 8015d14:	683b      	ldr	r3, [r7, #0]
 8015d16:	613b      	str	r3, [r7, #16]
	if (io->ops.block_set) {
 8015d18:	68fb      	ldr	r3, [r7, #12]
 8015d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d009      	beq.n	8015d34 <metal_io_block_set+0x66>
		(*io->ops.block_set)(
 8015d20:	68fb      	ldr	r3, [r7, #12]
 8015d22:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8015d24:	79fa      	ldrb	r2, [r7, #7]
 8015d26:	683b      	ldr	r3, [r7, #0]
 8015d28:	9300      	str	r3, [sp, #0]
 8015d2a:	2305      	movs	r3, #5
 8015d2c:	68b9      	ldr	r1, [r7, #8]
 8015d2e:	68f8      	ldr	r0, [r7, #12]
 8015d30:	47a0      	blx	r4
 8015d32:	e040      	b.n	8015db6 <metal_io_block_set+0xe8>
			io, offset, value, memory_order_seq_cst, len);
	} else {
		unsigned int cint = value;
 8015d34:	79fb      	ldrb	r3, [r7, #7]
 8015d36:	61bb      	str	r3, [r7, #24]
		unsigned int i;

		for (i = 1; i < sizeof(int); i++)
 8015d38:	2301      	movs	r3, #1
 8015d3a:	617b      	str	r3, [r7, #20]
 8015d3c:	e00a      	b.n	8015d54 <metal_io_block_set+0x86>
			cint |= ((unsigned int)value << (8 * i));
 8015d3e:	79fa      	ldrb	r2, [r7, #7]
 8015d40:	697b      	ldr	r3, [r7, #20]
 8015d42:	00db      	lsls	r3, r3, #3
 8015d44:	fa02 f303 	lsl.w	r3, r2, r3
 8015d48:	69ba      	ldr	r2, [r7, #24]
 8015d4a:	4313      	orrs	r3, r2
 8015d4c:	61bb      	str	r3, [r7, #24]
		for (i = 1; i < sizeof(int); i++)
 8015d4e:	697b      	ldr	r3, [r7, #20]
 8015d50:	3301      	adds	r3, #1
 8015d52:	617b      	str	r3, [r7, #20]
 8015d54:	697b      	ldr	r3, [r7, #20]
 8015d56:	2b03      	cmp	r3, #3
 8015d58:	d9f1      	bls.n	8015d3e <metal_io_block_set+0x70>

		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 8015d5a:	e008      	b.n	8015d6e <metal_io_block_set+0xa0>
			*(unsigned char *)ptr = (unsigned char) value;
 8015d5c:	69fb      	ldr	r3, [r7, #28]
 8015d5e:	79fa      	ldrb	r2, [r7, #7]
 8015d60:	701a      	strb	r2, [r3, #0]
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 8015d62:	69fb      	ldr	r3, [r7, #28]
 8015d64:	3301      	adds	r3, #1
 8015d66:	61fb      	str	r3, [r7, #28]
 8015d68:	683b      	ldr	r3, [r7, #0]
 8015d6a:	3b01      	subs	r3, #1
 8015d6c:	603b      	str	r3, [r7, #0]
 8015d6e:	683b      	ldr	r3, [r7, #0]
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d00e      	beq.n	8015d92 <metal_io_block_set+0xc4>
 8015d74:	69fb      	ldr	r3, [r7, #28]
 8015d76:	f003 0303 	and.w	r3, r3, #3
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d1ee      	bne.n	8015d5c <metal_io_block_set+0x8e>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8015d7e:	e008      	b.n	8015d92 <metal_io_block_set+0xc4>
						len -= sizeof(int))
			*(unsigned int *)ptr = cint;
 8015d80:	69fb      	ldr	r3, [r7, #28]
 8015d82:	69ba      	ldr	r2, [r7, #24]
 8015d84:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8015d86:	69fb      	ldr	r3, [r7, #28]
 8015d88:	3304      	adds	r3, #4
 8015d8a:	61fb      	str	r3, [r7, #28]
						len -= sizeof(int))
 8015d8c:	683b      	ldr	r3, [r7, #0]
 8015d8e:	3b04      	subs	r3, #4
 8015d90:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8015d92:	683b      	ldr	r3, [r7, #0]
 8015d94:	2b03      	cmp	r3, #3
 8015d96:	dcf3      	bgt.n	8015d80 <metal_io_block_set+0xb2>
		for (; len != 0; ptr++, len--)
 8015d98:	e008      	b.n	8015dac <metal_io_block_set+0xde>
			*(unsigned char *)ptr = (unsigned char) value;
 8015d9a:	69fb      	ldr	r3, [r7, #28]
 8015d9c:	79fa      	ldrb	r2, [r7, #7]
 8015d9e:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, len--)
 8015da0:	69fb      	ldr	r3, [r7, #28]
 8015da2:	3301      	adds	r3, #1
 8015da4:	61fb      	str	r3, [r7, #28]
 8015da6:	683b      	ldr	r3, [r7, #0]
 8015da8:	3b01      	subs	r3, #1
 8015daa:	603b      	str	r3, [r7, #0]
 8015dac:	683b      	ldr	r3, [r7, #0]
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d1f3      	bne.n	8015d9a <metal_io_block_set+0xcc>
		atomic_thread_fence(memory_order_seq_cst);
 8015db2:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 8015db6:	693b      	ldr	r3, [r7, #16]
}
 8015db8:	4618      	mov	r0, r3
 8015dba:	3724      	adds	r7, #36	; 0x24
 8015dbc:	46bd      	mov	sp, r7
 8015dbe:	bd90      	pop	{r4, r7, pc}

08015dc0 <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 8015dc0:	b40e      	push	{r1, r2, r3}
 8015dc2:	b480      	push	{r7}
 8015dc4:	b082      	sub	sp, #8
 8015dc6:	af00      	add	r7, sp, #0
 8015dc8:	4603      	mov	r3, r0
 8015dca:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 8015dcc:	bf00      	nop
 8015dce:	3708      	adds	r7, #8
 8015dd0:	46bd      	mov	sp, r7
 8015dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dd6:	b003      	add	sp, #12
 8015dd8:	4770      	bx	lr

08015dda <metal_io_virt>:
{
 8015dda:	b480      	push	{r7}
 8015ddc:	b083      	sub	sp, #12
 8015dde:	af00      	add	r7, sp, #0
 8015de0:	6078      	str	r0, [r7, #4]
 8015de2:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	681b      	ldr	r3, [r3, #0]
		: NULL);
 8015de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015dec:	d009      	beq.n	8015e02 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	689b      	ldr	r3, [r3, #8]
 8015df2:	683a      	ldr	r2, [r7, #0]
 8015df4:	429a      	cmp	r2, r3
 8015df6:	d804      	bhi.n	8015e02 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8015dfc:	683b      	ldr	r3, [r7, #0]
 8015dfe:	4413      	add	r3, r2
 8015e00:	e000      	b.n	8015e04 <metal_io_virt+0x2a>
 8015e02:	2300      	movs	r3, #0
}
 8015e04:	4618      	mov	r0, r3
 8015e06:	370c      	adds	r7, #12
 8015e08:	46bd      	mov	sp, r7
 8015e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e0e:	4770      	bx	lr

08015e10 <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 8015e10:	b480      	push	{r7}
 8015e12:	b085      	sub	sp, #20
 8015e14:	af00      	add	r7, sp, #0
 8015e16:	6078      	str	r0, [r7, #4]
 8015e18:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	681b      	ldr	r3, [r3, #0]
 8015e1e:	683a      	ldr	r2, [r7, #0]
 8015e20:	1ad3      	subs	r3, r2, r3
 8015e22:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	689b      	ldr	r3, [r3, #8]
 8015e28:	68fa      	ldr	r2, [r7, #12]
 8015e2a:	429a      	cmp	r2, r3
 8015e2c:	d201      	bcs.n	8015e32 <metal_io_virt_to_offset+0x22>
 8015e2e:	68fb      	ldr	r3, [r7, #12]
 8015e30:	e001      	b.n	8015e36 <metal_io_virt_to_offset+0x26>
 8015e32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015e36:	4618      	mov	r0, r3
 8015e38:	3714      	adds	r7, #20
 8015e3a:	46bd      	mov	sp, r7
 8015e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e40:	4770      	bx	lr
	...

08015e44 <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 8015e44:	b590      	push	{r4, r7, lr}
 8015e46:	b08d      	sub	sp, #52	; 0x34
 8015e48:	af00      	add	r7, sp, #0
 8015e4a:	60f8      	str	r0, [r7, #12]
 8015e4c:	60b9      	str	r1, [r7, #8]
 8015e4e:	603b      	str	r3, [r7, #0]
 8015e50:	4613      	mov	r3, r2
 8015e52:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
 8015e54:	68b9      	ldr	r1, [r7, #8]
 8015e56:	68f8      	ldr	r0, [r7, #12]
 8015e58:	f7ff ffbf 	bl	8015dda <metal_io_virt>
 8015e5c:	62f8      	str	r0, [r7, #44]	; 0x2c

	if (io->ops.read)
 8015e5e:	68fb      	ldr	r3, [r7, #12]
 8015e60:	699b      	ldr	r3, [r3, #24]
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d009      	beq.n	8015e7a <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
 8015e66:	68fb      	ldr	r3, [r7, #12]
 8015e68:	699c      	ldr	r4, [r3, #24]
 8015e6a:	79fa      	ldrb	r2, [r7, #7]
 8015e6c:	683b      	ldr	r3, [r7, #0]
 8015e6e:	68b9      	ldr	r1, [r7, #8]
 8015e70:	68f8      	ldr	r0, [r7, #12]
 8015e72:	47a0      	blx	r4
 8015e74:	4602      	mov	r2, r0
 8015e76:	460b      	mov	r3, r1
 8015e78:	e057      	b.n	8015f2a <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uchar) == width)
 8015e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d011      	beq.n	8015ea4 <metal_io_read+0x60>
 8015e80:	683b      	ldr	r3, [r7, #0]
 8015e82:	2b01      	cmp	r3, #1
 8015e84:	d10e      	bne.n	8015ea4 <metal_io_read+0x60>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 8015e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e88:	62bb      	str	r3, [r7, #40]	; 0x28
 8015e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e8c:	f3bf 8f5b 	dmb	ish
 8015e90:	781b      	ldrb	r3, [r3, #0]
 8015e92:	f3bf 8f5b 	dmb	ish
 8015e96:	b2db      	uxtb	r3, r3
 8015e98:	76fb      	strb	r3, [r7, #27]
 8015e9a:	7efb      	ldrb	r3, [r7, #27]
 8015e9c:	b2da      	uxtb	r2, r3
 8015e9e:	f04f 0300 	mov.w	r3, #0
 8015ea2:	e042      	b.n	8015f2a <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ushort) == width)
 8015ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d011      	beq.n	8015ece <metal_io_read+0x8a>
 8015eaa:	683b      	ldr	r3, [r7, #0]
 8015eac:	2b02      	cmp	r3, #2
 8015eae:	d10e      	bne.n	8015ece <metal_io_read+0x8a>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 8015eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8015eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eb6:	f3bf 8f5b 	dmb	ish
 8015eba:	881b      	ldrh	r3, [r3, #0]
 8015ebc:	f3bf 8f5b 	dmb	ish
 8015ec0:	b29b      	uxth	r3, r3
 8015ec2:	833b      	strh	r3, [r7, #24]
 8015ec4:	8b3b      	ldrh	r3, [r7, #24]
 8015ec6:	b29a      	uxth	r2, r3
 8015ec8:	f04f 0300 	mov.w	r3, #0
 8015ecc:	e02d      	b.n	8015f2a <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uint) == width)
 8015ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d010      	beq.n	8015ef6 <metal_io_read+0xb2>
 8015ed4:	683b      	ldr	r3, [r7, #0]
 8015ed6:	2b04      	cmp	r3, #4
 8015ed8:	d10d      	bne.n	8015ef6 <metal_io_read+0xb2>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 8015eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015edc:	623b      	str	r3, [r7, #32]
 8015ede:	6a3b      	ldr	r3, [r7, #32]
 8015ee0:	f3bf 8f5b 	dmb	ish
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	f3bf 8f5b 	dmb	ish
 8015eea:	617b      	str	r3, [r7, #20]
 8015eec:	697b      	ldr	r3, [r7, #20]
 8015eee:	461a      	mov	r2, r3
 8015ef0:	f04f 0300 	mov.w	r3, #0
 8015ef4:	e019      	b.n	8015f2a <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ulong) == width)
 8015ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d010      	beq.n	8015f1e <metal_io_read+0xda>
 8015efc:	683b      	ldr	r3, [r7, #0]
 8015efe:	2b04      	cmp	r3, #4
 8015f00:	d10d      	bne.n	8015f1e <metal_io_read+0xda>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 8015f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f04:	61fb      	str	r3, [r7, #28]
 8015f06:	69fb      	ldr	r3, [r7, #28]
 8015f08:	f3bf 8f5b 	dmb	ish
 8015f0c:	681b      	ldr	r3, [r3, #0]
 8015f0e:	f3bf 8f5b 	dmb	ish
 8015f12:	613b      	str	r3, [r7, #16]
 8015f14:	693b      	ldr	r3, [r7, #16]
 8015f16:	461a      	mov	r2, r3
 8015f18:	f04f 0300 	mov.w	r3, #0
 8015f1c:	e005      	b.n	8015f2a <metal_io_read+0xe6>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
 8015f1e:	4b05      	ldr	r3, [pc, #20]	; (8015f34 <metal_io_read+0xf0>)
 8015f20:	4a05      	ldr	r2, [pc, #20]	; (8015f38 <metal_io_read+0xf4>)
 8015f22:	21f0      	movs	r1, #240	; 0xf0
 8015f24:	4805      	ldr	r0, [pc, #20]	; (8015f3c <metal_io_read+0xf8>)
 8015f26:	f006 fb4d 	bl	801c5c4 <__assert_func>
	return 0; /* quiet compiler */
}
 8015f2a:	4610      	mov	r0, r2
 8015f2c:	4619      	mov	r1, r3
 8015f2e:	3734      	adds	r7, #52	; 0x34
 8015f30:	46bd      	mov	sp, r7
 8015f32:	bd90      	pop	{r4, r7, pc}
 8015f34:	080216e4 	.word	0x080216e4
 8015f38:	0802a4e8 	.word	0x0802a4e8
 8015f3c:	080216e8 	.word	0x080216e8

08015f40 <metal_io_write>:
 *			to inline cleanly.
 */
static inline void
metal_io_write(struct metal_io_region *io, unsigned long offset,
	       uint64_t value, memory_order order, int width)
{
 8015f40:	b590      	push	{r4, r7, lr}
 8015f42:	b08f      	sub	sp, #60	; 0x3c
 8015f44:	af02      	add	r7, sp, #8
 8015f46:	60f8      	str	r0, [r7, #12]
 8015f48:	60b9      	str	r1, [r7, #8]
 8015f4a:	e9c7 2300 	strd	r2, r3, [r7]
	void *ptr = metal_io_virt(io, offset);
 8015f4e:	68b9      	ldr	r1, [r7, #8]
 8015f50:	68f8      	ldr	r0, [r7, #12]
 8015f52:	f7ff ff42 	bl	8015dda <metal_io_virt>
 8015f56:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (io->ops.write)
 8015f58:	68fb      	ldr	r3, [r7, #12]
 8015f5a:	69db      	ldr	r3, [r3, #28]
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d00c      	beq.n	8015f7a <metal_io_write+0x3a>
		(*io->ops.write)(io, offset, value, order, width);
 8015f60:	68fb      	ldr	r3, [r7, #12]
 8015f62:	69dc      	ldr	r4, [r3, #28]
 8015f64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015f66:	9301      	str	r3, [sp, #4]
 8015f68:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8015f6c:	9300      	str	r3, [sp, #0]
 8015f6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015f72:	68b9      	ldr	r1, [r7, #8]
 8015f74:	68f8      	ldr	r0, [r7, #12]
 8015f76:	47a0      	blx	r4
	else if (ptr && sizeof(atomic_ullong) == width)
		atomic_store_explicit((atomic_ullong *)ptr, value, order);
#endif
	else
		metal_assert (0);
}
 8015f78:	e04e      	b.n	8016018 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uchar) == width)
 8015f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d00e      	beq.n	8015f9e <metal_io_write+0x5e>
 8015f80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015f82:	2b01      	cmp	r3, #1
 8015f84:	d10b      	bne.n	8015f9e <metal_io_write+0x5e>
		atomic_store_explicit((atomic_uchar *)ptr, value, order);
 8015f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f88:	62bb      	str	r3, [r7, #40]	; 0x28
 8015f8a:	783b      	ldrb	r3, [r7, #0]
 8015f8c:	76fb      	strb	r3, [r7, #27]
 8015f8e:	7efa      	ldrb	r2, [r7, #27]
 8015f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f92:	f3bf 8f5b 	dmb	ish
 8015f96:	701a      	strb	r2, [r3, #0]
 8015f98:	f3bf 8f5b 	dmb	ish
 8015f9c:	e03c      	b.n	8016018 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ushort) == width)
 8015f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d00e      	beq.n	8015fc2 <metal_io_write+0x82>
 8015fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015fa6:	2b02      	cmp	r3, #2
 8015fa8:	d10b      	bne.n	8015fc2 <metal_io_write+0x82>
		atomic_store_explicit((atomic_ushort *)ptr, value, order);
 8015faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fac:	627b      	str	r3, [r7, #36]	; 0x24
 8015fae:	883b      	ldrh	r3, [r7, #0]
 8015fb0:	833b      	strh	r3, [r7, #24]
 8015fb2:	8b3a      	ldrh	r2, [r7, #24]
 8015fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fb6:	f3bf 8f5b 	dmb	ish
 8015fba:	801a      	strh	r2, [r3, #0]
 8015fbc:	f3bf 8f5b 	dmb	ish
 8015fc0:	e02a      	b.n	8016018 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uint) == width)
 8015fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	d00e      	beq.n	8015fe6 <metal_io_write+0xa6>
 8015fc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015fca:	2b04      	cmp	r3, #4
 8015fcc:	d10b      	bne.n	8015fe6 <metal_io_write+0xa6>
		atomic_store_explicit((atomic_uint *)ptr, value, order);
 8015fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fd0:	623b      	str	r3, [r7, #32]
 8015fd2:	683b      	ldr	r3, [r7, #0]
 8015fd4:	617b      	str	r3, [r7, #20]
 8015fd6:	697a      	ldr	r2, [r7, #20]
 8015fd8:	6a3b      	ldr	r3, [r7, #32]
 8015fda:	f3bf 8f5b 	dmb	ish
 8015fde:	601a      	str	r2, [r3, #0]
 8015fe0:	f3bf 8f5b 	dmb	ish
 8015fe4:	e018      	b.n	8016018 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ulong) == width)
 8015fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d00e      	beq.n	801600a <metal_io_write+0xca>
 8015fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015fee:	2b04      	cmp	r3, #4
 8015ff0:	d10b      	bne.n	801600a <metal_io_write+0xca>
		atomic_store_explicit((atomic_ulong *)ptr, value, order);
 8015ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ff4:	61fb      	str	r3, [r7, #28]
 8015ff6:	683b      	ldr	r3, [r7, #0]
 8015ff8:	613b      	str	r3, [r7, #16]
 8015ffa:	693a      	ldr	r2, [r7, #16]
 8015ffc:	69fb      	ldr	r3, [r7, #28]
 8015ffe:	f3bf 8f5b 	dmb	ish
 8016002:	601a      	str	r2, [r3, #0]
 8016004:	f3bf 8f5b 	dmb	ish
 8016008:	e006      	b.n	8016018 <metal_io_write+0xd8>
		metal_assert (0);
 801600a:	4b05      	ldr	r3, [pc, #20]	; (8016020 <metal_io_write+0xe0>)
 801600c:	4a05      	ldr	r2, [pc, #20]	; (8016024 <metal_io_write+0xe4>)
 801600e:	f44f 7189 	mov.w	r1, #274	; 0x112
 8016012:	4805      	ldr	r0, [pc, #20]	; (8016028 <metal_io_write+0xe8>)
 8016014:	f006 fad6 	bl	801c5c4 <__assert_func>
}
 8016018:	bf00      	nop
 801601a:	3734      	adds	r7, #52	; 0x34
 801601c:	46bd      	mov	sp, r7
 801601e:	bd90      	pop	{r4, r7, pc}
 8016020:	080216e4 	.word	0x080216e4
 8016024:	0802a4f8 	.word	0x0802a4f8
 8016028:	080216e8 	.word	0x080216e8

0801602c <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 801602c:	b580      	push	{r7, lr}
 801602e:	b082      	sub	sp, #8
 8016030:	af00      	add	r7, sp, #0
 8016032:	6078      	str	r0, [r7, #4]
	return (malloc(size));
 8016034:	6878      	ldr	r0, [r7, #4]
 8016036:	f006 fb23 	bl	801c680 <malloc>
 801603a:	4603      	mov	r3, r0
}
 801603c:	4618      	mov	r0, r3
 801603e:	3708      	adds	r7, #8
 8016040:	46bd      	mov	sp, r7
 8016042:	bd80      	pop	{r7, pc}

08016044 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 8016044:	b580      	push	{r7, lr}
 8016046:	b082      	sub	sp, #8
 8016048:	af00      	add	r7, sp, #0
 801604a:	6078      	str	r0, [r7, #4]
	free(ptr);
 801604c:	6878      	ldr	r0, [r7, #4]
 801604e:	f006 fb1f 	bl	801c690 <free>
}
 8016052:	bf00      	nop
 8016054:	3708      	adds	r7, #8
 8016056:	46bd      	mov	sp, r7
 8016058:	bd80      	pop	{r7, pc}

0801605a <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 801605a:	b580      	push	{r7, lr}
 801605c:	b084      	sub	sp, #16
 801605e:	af00      	add	r7, sp, #0
 8016060:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	3307      	adds	r3, #7
 8016066:	00db      	lsls	r3, r3, #3
 8016068:	60fb      	str	r3, [r7, #12]
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
 801606a:	68f8      	ldr	r0, [r7, #12]
 801606c:	f7ff ffde 	bl	801602c <metal_allocate_memory>
 8016070:	60b8      	str	r0, [r7, #8]

	if (vqs) {
 8016072:	68bb      	ldr	r3, [r7, #8]
 8016074:	2b00      	cmp	r3, #0
 8016076:	d004      	beq.n	8016082 <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
 8016078:	68fa      	ldr	r2, [r7, #12]
 801607a:	2100      	movs	r1, #0
 801607c:	68b8      	ldr	r0, [r7, #8]
 801607e:	f006 fb37 	bl	801c6f0 <memset>
	}

	return vqs;
 8016082:	68bb      	ldr	r3, [r7, #8]
}
 8016084:	4618      	mov	r0, r3
 8016086:	3710      	adds	r7, #16
 8016088:	46bd      	mov	sp, r7
 801608a:	bd80      	pop	{r7, pc}

0801608c <rproc_virtio_virtqueue_notify>:
#include <openamp/virtqueue.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 801608c:	b580      	push	{r7, lr}
 801608e:	b086      	sub	sp, #24
 8016090:	af00      	add	r7, sp, #0
 8016092:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	891b      	ldrh	r3, [r3, #8]
 8016098:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	681b      	ldr	r3, [r3, #0]
 801609e:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 80160a0:	693b      	ldr	r3, [r7, #16]
 80160a2:	3b18      	subs	r3, #24
 80160a4:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id <= vdev->vrings_num);
 80160a6:	693b      	ldr	r3, [r7, #16]
 80160a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80160aa:	697a      	ldr	r2, [r7, #20]
 80160ac:	429a      	cmp	r2, r3
 80160ae:	d905      	bls.n	80160bc <rproc_virtio_virtqueue_notify+0x30>
 80160b0:	4b0d      	ldr	r3, [pc, #52]	; (80160e8 <rproc_virtio_virtqueue_notify+0x5c>)
 80160b2:	4a0e      	ldr	r2, [pc, #56]	; (80160ec <rproc_virtio_virtqueue_notify+0x60>)
 80160b4:	2133      	movs	r1, #51	; 0x33
 80160b6:	480e      	ldr	r0, [pc, #56]	; (80160f0 <rproc_virtio_virtqueue_notify+0x64>)
 80160b8:	f006 fa84 	bl	801c5c4 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 80160bc:	693b      	ldr	r3, [r7, #16]
 80160be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80160c0:	697a      	ldr	r2, [r7, #20]
 80160c2:	4613      	mov	r3, r2
 80160c4:	005b      	lsls	r3, r3, #1
 80160c6:	4413      	add	r3, r2
 80160c8:	00db      	lsls	r3, r3, #3
 80160ca:	440b      	add	r3, r1
 80160cc:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 80160ce:	68fb      	ldr	r3, [r7, #12]
 80160d0:	691b      	ldr	r3, [r3, #16]
 80160d2:	68fa      	ldr	r2, [r7, #12]
 80160d4:	6810      	ldr	r0, [r2, #0]
 80160d6:	68ba      	ldr	r2, [r7, #8]
 80160d8:	6912      	ldr	r2, [r2, #16]
 80160da:	4611      	mov	r1, r2
 80160dc:	4798      	blx	r3
}
 80160de:	bf00      	nop
 80160e0:	3718      	adds	r7, #24
 80160e2:	46bd      	mov	sp, r7
 80160e4:	bd80      	pop	{r7, pc}
 80160e6:	bf00      	nop
 80160e8:	08021730 	.word	0x08021730
 80160ec:	0802a4c8 	.word	0x0802a4c8
 80160f0:	0802174c 	.word	0x0802174c

080160f4 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 80160f4:	b580      	push	{r7, lr}
 80160f6:	b086      	sub	sp, #24
 80160f8:	af00      	add	r7, sp, #0
 80160fa:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	3b18      	subs	r3, #24
 8016100:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8016102:	697b      	ldr	r3, [r7, #20]
 8016104:	689b      	ldr	r3, [r3, #8]
 8016106:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8016108:	697b      	ldr	r3, [r7, #20]
 801610a:	68db      	ldr	r3, [r3, #12]
 801610c:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
 801610e:	693b      	ldr	r3, [r7, #16]
 8016110:	3318      	adds	r3, #24
 8016112:	4619      	mov	r1, r3
 8016114:	68f8      	ldr	r0, [r7, #12]
 8016116:	f7ff fe7b 	bl	8015e10 <metal_io_virt_to_offset>
 801611a:	4601      	mov	r1, r0
 801611c:	2301      	movs	r3, #1
 801611e:	2205      	movs	r2, #5
 8016120:	68f8      	ldr	r0, [r7, #12]
 8016122:	f7ff fe8f 	bl	8015e44 <metal_io_read>
 8016126:	4602      	mov	r2, r0
 8016128:	460b      	mov	r3, r1
 801612a:	4613      	mov	r3, r2
 801612c:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 801612e:	7afb      	ldrb	r3, [r7, #11]
}
 8016130:	4618      	mov	r0, r3
 8016132:	3718      	adds	r7, #24
 8016134:	46bd      	mov	sp, r7
 8016136:	bd80      	pop	{r7, pc}

08016138 <rproc_virtio_set_status>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_status(struct virtio_device *vdev,
				    unsigned char status)
{
 8016138:	b580      	push	{r7, lr}
 801613a:	b088      	sub	sp, #32
 801613c:	af02      	add	r7, sp, #8
 801613e:	6078      	str	r0, [r7, #4]
 8016140:	460b      	mov	r3, r1
 8016142:	70fb      	strb	r3, [r7, #3]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	3b18      	subs	r3, #24
 8016148:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 801614a:	697b      	ldr	r3, [r7, #20]
 801614c:	689b      	ldr	r3, [r3, #8]
 801614e:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8016150:	697b      	ldr	r3, [r7, #20]
 8016152:	68db      	ldr	r3, [r3, #12]
 8016154:	60fb      	str	r3, [r7, #12]
	metal_io_write8(io,
 8016156:	693b      	ldr	r3, [r7, #16]
 8016158:	3318      	adds	r3, #24
 801615a:	4619      	mov	r1, r3
 801615c:	68f8      	ldr	r0, [r7, #12]
 801615e:	f7ff fe57 	bl	8015e10 <metal_io_virt_to_offset>
 8016162:	4601      	mov	r1, r0
 8016164:	78fa      	ldrb	r2, [r7, #3]
 8016166:	f04f 0300 	mov.w	r3, #0
 801616a:	2001      	movs	r0, #1
 801616c:	9001      	str	r0, [sp, #4]
 801616e:	2005      	movs	r0, #5
 8016170:	9000      	str	r0, [sp, #0]
 8016172:	68f8      	ldr	r0, [r7, #12]
 8016174:	f7ff fee4 	bl	8015f40 <metal_io_write>
			metal_io_virt_to_offset(io, &vdev_rsc->status),
			status);
	rpvdev->notify(rpvdev->priv, vdev->index);
 8016178:	697b      	ldr	r3, [r7, #20]
 801617a:	691b      	ldr	r3, [r3, #16]
 801617c:	697a      	ldr	r2, [r7, #20]
 801617e:	6810      	ldr	r0, [r2, #0]
 8016180:	687a      	ldr	r2, [r7, #4]
 8016182:	6812      	ldr	r2, [r2, #0]
 8016184:	4611      	mov	r1, r2
 8016186:	4798      	blx	r3
}
 8016188:	bf00      	nop
 801618a:	3718      	adds	r7, #24
 801618c:	46bd      	mov	sp, r7
 801618e:	bd80      	pop	{r7, pc}

08016190 <rproc_virtio_get_features>:
#endif

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 8016190:	b580      	push	{r7, lr}
 8016192:	b086      	sub	sp, #24
 8016194:	af00      	add	r7, sp, #0
 8016196:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	3b18      	subs	r3, #24
 801619c:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 801619e:	697b      	ldr	r3, [r7, #20]
 80161a0:	689b      	ldr	r3, [r3, #8]
 80161a2:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 80161a4:	697b      	ldr	r3, [r7, #20]
 80161a6:	68db      	ldr	r3, [r3, #12]
 80161a8:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we get features based on the role ? */
	features = metal_io_read32(io,
 80161aa:	693b      	ldr	r3, [r7, #16]
 80161ac:	330c      	adds	r3, #12
 80161ae:	4619      	mov	r1, r3
 80161b0:	68f8      	ldr	r0, [r7, #12]
 80161b2:	f7ff fe2d 	bl	8015e10 <metal_io_virt_to_offset>
 80161b6:	4601      	mov	r1, r0
 80161b8:	2304      	movs	r3, #4
 80161ba:	2205      	movs	r2, #5
 80161bc:	68f8      	ldr	r0, [r7, #12]
 80161be:	f7ff fe41 	bl	8015e44 <metal_io_read>
 80161c2:	4602      	mov	r2, r0
 80161c4:	460b      	mov	r3, r1
 80161c6:	4613      	mov	r3, r2
 80161c8:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 80161ca:	68bb      	ldr	r3, [r7, #8]
}
 80161cc:	4618      	mov	r0, r3
 80161ce:	3718      	adds	r7, #24
 80161d0:	46bd      	mov	sp, r7
 80161d2:	bd80      	pop	{r7, pc}

080161d4 <rproc_virtio_set_features>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_features(struct virtio_device *vdev,
				      uint32_t features)
{
 80161d4:	b580      	push	{r7, lr}
 80161d6:	b088      	sub	sp, #32
 80161d8:	af02      	add	r7, sp, #8
 80161da:	6078      	str	r0, [r7, #4]
 80161dc:	6039      	str	r1, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	3b18      	subs	r3, #24
 80161e2:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 80161e4:	697b      	ldr	r3, [r7, #20]
 80161e6:	689b      	ldr	r3, [r3, #8]
 80161e8:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 80161ea:	697b      	ldr	r3, [r7, #20]
 80161ec:	68db      	ldr	r3, [r3, #12]
 80161ee:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we set features based on the role ? */
	metal_io_write32(io,
 80161f0:	693b      	ldr	r3, [r7, #16]
 80161f2:	330c      	adds	r3, #12
 80161f4:	4619      	mov	r1, r3
 80161f6:	68f8      	ldr	r0, [r7, #12]
 80161f8:	f7ff fe0a 	bl	8015e10 <metal_io_virt_to_offset>
 80161fc:	4601      	mov	r1, r0
 80161fe:	683b      	ldr	r3, [r7, #0]
 8016200:	461a      	mov	r2, r3
 8016202:	f04f 0300 	mov.w	r3, #0
 8016206:	2004      	movs	r0, #4
 8016208:	9001      	str	r0, [sp, #4]
 801620a:	2005      	movs	r0, #5
 801620c:	9000      	str	r0, [sp, #0]
 801620e:	68f8      	ldr	r0, [r7, #12]
 8016210:	f7ff fe96 	bl	8015f40 <metal_io_write>
			 metal_io_virt_to_offset(io, &vdev_rsc->dfeatures),
			 features);
	rpvdev->notify(rpvdev->priv, vdev->index);
 8016214:	697b      	ldr	r3, [r7, #20]
 8016216:	691b      	ldr	r3, [r3, #16]
 8016218:	697a      	ldr	r2, [r7, #20]
 801621a:	6810      	ldr	r0, [r2, #0]
 801621c:	687a      	ldr	r2, [r7, #4]
 801621e:	6812      	ldr	r2, [r2, #0]
 8016220:	4611      	mov	r1, r2
 8016222:	4798      	blx	r3
}
 8016224:	bf00      	nop
 8016226:	3718      	adds	r7, #24
 8016228:	46bd      	mov	sp, r7
 801622a:	bd80      	pop	{r7, pc}

0801622c <rproc_virtio_negotiate_features>:
#endif

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 801622c:	b480      	push	{r7}
 801622e:	b083      	sub	sp, #12
 8016230:	af00      	add	r7, sp, #0
 8016232:	6078      	str	r0, [r7, #4]
 8016234:	6039      	str	r1, [r7, #0]
	(void)vdev;
	(void)features;

	return 0;
 8016236:	2300      	movs	r3, #0
}
 8016238:	4618      	mov	r0, r3
 801623a:	370c      	adds	r7, #12
 801623c:	46bd      	mov	sp, r7
 801623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016242:	4770      	bx	lr

08016244 <rproc_virtio_read_config>:

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 8016244:	b480      	push	{r7}
 8016246:	b085      	sub	sp, #20
 8016248:	af00      	add	r7, sp, #0
 801624a:	60f8      	str	r0, [r7, #12]
 801624c:	60b9      	str	r1, [r7, #8]
 801624e:	607a      	str	r2, [r7, #4]
 8016250:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 8016252:	bf00      	nop
 8016254:	3714      	adds	r7, #20
 8016256:	46bd      	mov	sp, r7
 8016258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801625c:	4770      	bx	lr

0801625e <rproc_virtio_write_config>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_write_config(struct virtio_device *vdev,
				      uint32_t offset, void *src, int length)
{
 801625e:	b480      	push	{r7}
 8016260:	b085      	sub	sp, #20
 8016262:	af00      	add	r7, sp, #0
 8016264:	60f8      	str	r0, [r7, #12]
 8016266:	60b9      	str	r1, [r7, #8]
 8016268:	607a      	str	r2, [r7, #4]
 801626a:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)src;
	(void)length;
}
 801626c:	bf00      	nop
 801626e:	3714      	adds	r7, #20
 8016270:	46bd      	mov	sp, r7
 8016272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016276:	4770      	bx	lr

08016278 <rproc_virtio_reset_device>:

static void rproc_virtio_reset_device(struct virtio_device *vdev)
{
 8016278:	b580      	push	{r7, lr}
 801627a:	b082      	sub	sp, #8
 801627c:	af00      	add	r7, sp, #0
 801627e:	6078      	str	r0, [r7, #4]
	if (vdev->role == VIRTIO_DEV_MASTER)
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	699b      	ldr	r3, [r3, #24]
 8016284:	2b00      	cmp	r3, #0
 8016286:	d103      	bne.n	8016290 <rproc_virtio_reset_device+0x18>
		rproc_virtio_set_status(vdev,
 8016288:	2140      	movs	r1, #64	; 0x40
 801628a:	6878      	ldr	r0, [r7, #4]
 801628c:	f7ff ff54 	bl	8016138 <rproc_virtio_set_status>
					VIRTIO_CONFIG_STATUS_NEEDS_RESET);
}
 8016290:	bf00      	nop
 8016292:	3708      	adds	r7, #8
 8016294:	46bd      	mov	sp, r7
 8016296:	bd80      	pop	{r7, pc}

08016298 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 8016298:	b580      	push	{r7, lr}
 801629a:	b08e      	sub	sp, #56	; 0x38
 801629c:	af00      	add	r7, sp, #0
 801629e:	60f8      	str	r0, [r7, #12]
 80162a0:	60b9      	str	r1, [r7, #8]
 80162a2:	607a      	str	r2, [r7, #4]
 80162a4:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 80162aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162ac:	7e5b      	ldrb	r3, [r3, #25]
 80162ae:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 80162b0:	2050      	movs	r0, #80	; 0x50
 80162b2:	f7ff febb 	bl	801602c <metal_allocate_memory>
 80162b6:	6278      	str	r0, [r7, #36]	; 0x24
	if (!rpvdev)
 80162b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	d101      	bne.n	80162c2 <rproc_virtio_create_vdev+0x2a>
		return NULL;
 80162be:	2300      	movs	r3, #0
 80162c0:	e092      	b.n	80163e8 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 80162c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80162c4:	4613      	mov	r3, r2
 80162c6:	005b      	lsls	r3, r3, #1
 80162c8:	4413      	add	r3, r2
 80162ca:	00db      	lsls	r3, r3, #3
 80162cc:	4618      	mov	r0, r3
 80162ce:	f7ff fead 	bl	801602c <metal_allocate_memory>
 80162d2:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
 80162d4:	6a3b      	ldr	r3, [r7, #32]
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	f000 8081 	beq.w	80163de <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 80162dc:	2250      	movs	r2, #80	; 0x50
 80162de:	2100      	movs	r1, #0
 80162e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80162e2:	f006 fa05 	bl	801c6f0 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 80162e6:	2218      	movs	r2, #24
 80162e8:	2100      	movs	r1, #0
 80162ea:	6a38      	ldr	r0, [r7, #32]
 80162ec:	f006 fa00 	bl	801c6f0 <memset>
	vdev = &rpvdev->vdev;
 80162f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162f2:	3318      	adds	r3, #24
 80162f4:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
 80162f6:	2300      	movs	r3, #0
 80162f8:	637b      	str	r3, [r7, #52]	; 0x34
 80162fa:	e025      	b.n	8016348 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 80162fc:	2300      	movs	r3, #0
 80162fe:	633b      	str	r3, [r7, #48]	; 0x30

		vring_rsc = &vdev_rsc->vring[i];
 8016300:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016302:	4613      	mov	r3, r2
 8016304:	009b      	lsls	r3, r3, #2
 8016306:	4413      	add	r3, r2
 8016308:	009b      	lsls	r3, r3, #2
 801630a:	3318      	adds	r3, #24
 801630c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801630e:	4413      	add	r3, r2
 8016310:	3304      	adds	r3, #4
 8016312:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	2b00      	cmp	r3, #0
 8016318:	d102      	bne.n	8016320 <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
 801631a:	69bb      	ldr	r3, [r7, #24]
 801631c:	689b      	ldr	r3, [r3, #8]
 801631e:	633b      	str	r3, [r7, #48]	; 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
 8016320:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016322:	f7ff fe9a 	bl	801605a <virtqueue_allocate>
 8016326:	6178      	str	r0, [r7, #20]
		if (!vq)
 8016328:	697b      	ldr	r3, [r7, #20]
 801632a:	2b00      	cmp	r3, #0
 801632c:	d031      	beq.n	8016392 <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
 801632e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016330:	4613      	mov	r3, r2
 8016332:	005b      	lsls	r3, r3, #1
 8016334:	4413      	add	r3, r2
 8016336:	00db      	lsls	r3, r3, #3
 8016338:	461a      	mov	r2, r3
 801633a:	6a3b      	ldr	r3, [r7, #32]
 801633c:	4413      	add	r3, r2
 801633e:	697a      	ldr	r2, [r7, #20]
 8016340:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
 8016342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016344:	3301      	adds	r3, #1
 8016346:	637b      	str	r3, [r7, #52]	; 0x34
 8016348:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801634a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801634c:	429a      	cmp	r2, r3
 801634e:	d3d5      	bcc.n	80162fc <rproc_virtio_create_vdev+0x64>
	}

	/* FIXME commended as seems not nedded, already stored in vdev */
	//rpvdev->notifyid = notifyid;
	rpvdev->notify = notify;
 8016350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016352:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016354:	611a      	str	r2, [r3, #16]
	rpvdev->priv = priv;
 8016356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016358:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801635a:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
 801635c:	69fb      	ldr	r3, [r7, #28]
 801635e:	6a3a      	ldr	r2, [r7, #32]
 8016360:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 8016362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016364:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016366:	609a      	str	r2, [r3, #8]
	rpvdev->vdev_rsc_io = rsc_io;
 8016368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801636a:	683a      	ldr	r2, [r7, #0]
 801636c:	60da      	str	r2, [r3, #12]

	vdev->index = notifyid;
 801636e:	69fb      	ldr	r3, [r7, #28]
 8016370:	68ba      	ldr	r2, [r7, #8]
 8016372:	601a      	str	r2, [r3, #0]
	vdev->role = role;
 8016374:	69fb      	ldr	r3, [r7, #28]
 8016376:	68fa      	ldr	r2, [r7, #12]
 8016378:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
 801637a:	69fb      	ldr	r3, [r7, #28]
 801637c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801637e:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
 8016380:	69fb      	ldr	r3, [r7, #28]
 8016382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016384:	629a      	str	r2, [r3, #40]	; 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 8016386:	69fb      	ldr	r3, [r7, #28]
 8016388:	4a19      	ldr	r2, [pc, #100]	; (80163f0 <rproc_virtio_create_vdev+0x158>)
 801638a:	621a      	str	r2, [r3, #32]
	/* TODO: Shall we set features here ? */

	return &rpvdev->vdev;
 801638c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801638e:	3318      	adds	r3, #24
 8016390:	e02a      	b.n	80163e8 <rproc_virtio_create_vdev+0x150>
			goto err1;
 8016392:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
 8016394:	2300      	movs	r3, #0
 8016396:	637b      	str	r3, [r7, #52]	; 0x34
 8016398:	e019      	b.n	80163ce <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
 801639a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801639c:	4613      	mov	r3, r2
 801639e:	005b      	lsls	r3, r3, #1
 80163a0:	4413      	add	r3, r2
 80163a2:	00db      	lsls	r3, r3, #3
 80163a4:	461a      	mov	r2, r3
 80163a6:	6a3b      	ldr	r3, [r7, #32]
 80163a8:	4413      	add	r3, r2
 80163aa:	681b      	ldr	r3, [r3, #0]
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d00b      	beq.n	80163c8 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
 80163b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80163b2:	4613      	mov	r3, r2
 80163b4:	005b      	lsls	r3, r3, #1
 80163b6:	4413      	add	r3, r2
 80163b8:	00db      	lsls	r3, r3, #3
 80163ba:	461a      	mov	r2, r3
 80163bc:	6a3b      	ldr	r3, [r7, #32]
 80163be:	4413      	add	r3, r2
 80163c0:	681b      	ldr	r3, [r3, #0]
 80163c2:	4618      	mov	r0, r3
 80163c4:	f7ff fe3e 	bl	8016044 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
 80163c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163ca:	3301      	adds	r3, #1
 80163cc:	637b      	str	r3, [r7, #52]	; 0x34
 80163ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80163d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163d2:	429a      	cmp	r2, r3
 80163d4:	d3e1      	bcc.n	801639a <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
 80163d6:	6a38      	ldr	r0, [r7, #32]
 80163d8:	f7ff fe34 	bl	8016044 <metal_free_memory>
 80163dc:	e000      	b.n	80163e0 <rproc_virtio_create_vdev+0x148>
		goto err0;
 80163de:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
 80163e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80163e2:	f7ff fe2f 	bl	8016044 <metal_free_memory>
	return NULL;
 80163e6:	2300      	movs	r3, #0
}
 80163e8:	4618      	mov	r0, r3
 80163ea:	3738      	adds	r7, #56	; 0x38
 80163ec:	46bd      	mov	sp, r7
 80163ee:	bd80      	pop	{r7, pc}
 80163f0:	0802a4a4 	.word	0x0802a4a4

080163f4 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 80163f4:	b480      	push	{r7}
 80163f6:	b087      	sub	sp, #28
 80163f8:	af00      	add	r7, sp, #0
 80163fa:	60f8      	str	r0, [r7, #12]
 80163fc:	60b9      	str	r1, [r7, #8]
 80163fe:	607a      	str	r2, [r7, #4]
 8016400:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 8016402:	68fb      	ldr	r3, [r7, #12]
 8016404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016406:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
 8016408:	68ba      	ldr	r2, [r7, #8]
 801640a:	697b      	ldr	r3, [r7, #20]
 801640c:	429a      	cmp	r2, r3
 801640e:	d302      	bcc.n	8016416 <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
 8016410:	f06f 0301 	mvn.w	r3, #1
 8016414:	e019      	b.n	801644a <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
 8016416:	68fb      	ldr	r3, [r7, #12]
 8016418:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801641a:	68ba      	ldr	r2, [r7, #8]
 801641c:	4613      	mov	r3, r2
 801641e:	005b      	lsls	r3, r3, #1
 8016420:	4413      	add	r3, r2
 8016422:	00db      	lsls	r3, r3, #3
 8016424:	440b      	add	r3, r1
 8016426:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
 8016428:	693b      	ldr	r3, [r7, #16]
 801642a:	6a3a      	ldr	r2, [r7, #32]
 801642c:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
 801642e:	693b      	ldr	r3, [r7, #16]
 8016430:	687a      	ldr	r2, [r7, #4]
 8016432:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
 8016434:	693b      	ldr	r3, [r7, #16]
 8016436:	683a      	ldr	r2, [r7, #0]
 8016438:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
 801643a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801643c:	b29a      	uxth	r2, r3
 801643e:	693b      	ldr	r3, [r7, #16]
 8016440:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
 8016442:	693b      	ldr	r3, [r7, #16]
 8016444:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016446:	609a      	str	r2, [r3, #8]

	return 0;
 8016448:	2300      	movs	r3, #0
}
 801644a:	4618      	mov	r0, r3
 801644c:	371c      	adds	r7, #28
 801644e:	46bd      	mov	sp, r7
 8016450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016454:	4770      	bx	lr

08016456 <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 8016456:	b580      	push	{r7, lr}
 8016458:	b086      	sub	sp, #24
 801645a:	af00      	add	r7, sp, #0
 801645c:	6078      	str	r0, [r7, #4]
 801645e:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	2b00      	cmp	r3, #0
 8016464:	d102      	bne.n	801646c <rproc_virtio_notified+0x16>
		return -EINVAL;
 8016466:	f06f 0315 	mvn.w	r3, #21
 801646a:	e02c      	b.n	80164c6 <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->index == notifyid)
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	681b      	ldr	r3, [r3, #0]
 8016470:	683a      	ldr	r2, [r7, #0]
 8016472:	429a      	cmp	r2, r3
 8016474:	d101      	bne.n	801647a <rproc_virtio_notified+0x24>
		return 0;
 8016476:	2300      	movs	r3, #0
 8016478:	e025      	b.n	80164c6 <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801647e:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
 8016480:	2300      	movs	r3, #0
 8016482:	617b      	str	r3, [r7, #20]
 8016484:	e01a      	b.n	80164bc <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801648a:	697a      	ldr	r2, [r7, #20]
 801648c:	4613      	mov	r3, r2
 801648e:	005b      	lsls	r3, r3, #1
 8016490:	4413      	add	r3, r2
 8016492:	00db      	lsls	r3, r3, #3
 8016494:	440b      	add	r3, r1
 8016496:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	691b      	ldr	r3, [r3, #16]
 801649c:	683a      	ldr	r2, [r7, #0]
 801649e:	429a      	cmp	r2, r3
 80164a0:	d003      	beq.n	80164aa <rproc_virtio_notified+0x54>
 80164a2:	683b      	ldr	r3, [r7, #0]
 80164a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80164a8:	d105      	bne.n	80164b6 <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 80164aa:	68fb      	ldr	r3, [r7, #12]
 80164ac:	681b      	ldr	r3, [r3, #0]
 80164ae:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
 80164b0:	68b8      	ldr	r0, [r7, #8]
 80164b2:	f001 fb58 	bl	8017b66 <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
 80164b6:	697b      	ldr	r3, [r7, #20]
 80164b8:	3301      	adds	r3, #1
 80164ba:	617b      	str	r3, [r7, #20]
 80164bc:	697a      	ldr	r2, [r7, #20]
 80164be:	693b      	ldr	r3, [r7, #16]
 80164c0:	429a      	cmp	r2, r3
 80164c2:	d3e0      	bcc.n	8016486 <rproc_virtio_notified+0x30>
		}
	}
	return 0;
 80164c4:	2300      	movs	r3, #0
}
 80164c6:	4618      	mov	r0, r3
 80164c8:	3718      	adds	r7, #24
 80164ca:	46bd      	mov	sp, r7
 80164cc:	bd80      	pop	{r7, pc}

080164ce <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 80164ce:	b580      	push	{r7, lr}
 80164d0:	b084      	sub	sp, #16
 80164d2:	af00      	add	r7, sp, #0
 80164d4:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	699b      	ldr	r3, [r3, #24]
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d00a      	beq.n	80164f4 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 80164de:	6878      	ldr	r0, [r7, #4]
 80164e0:	f7ff fe08 	bl	80160f4 <rproc_virtio_get_status>
 80164e4:	4603      	mov	r3, r0
 80164e6:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 80164e8:	7bfb      	ldrb	r3, [r7, #15]
 80164ea:	f003 0304 	and.w	r3, r3, #4
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d102      	bne.n	80164f8 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
 80164f2:	e7f4      	b.n	80164de <rproc_virtio_wait_remote_ready+0x10>
		return;
 80164f4:	bf00      	nop
 80164f6:	e000      	b.n	80164fa <rproc_virtio_wait_remote_ready+0x2c>
			return;
 80164f8:	bf00      	nop
	}
}
 80164fa:	3710      	adds	r7, #16
 80164fc:	46bd      	mov	sp, r7
 80164fe:	bd80      	pop	{r7, pc}

08016500 <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->w);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 8016500:	b480      	push	{r7}
 8016502:	b083      	sub	sp, #12
 8016504:	af00      	add	r7, sp, #0
 8016506:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8016508:	bf00      	nop
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	2201      	movs	r2, #1
 801650e:	4611      	mov	r1, r2
 8016510:	f3bf 8f5b 	dmb	ish
 8016514:	e8d3 2f4f 	ldrexb	r2, [r3]
 8016518:	e8c3 1f40 	strexb	r0, r1, [r3]
 801651c:	2800      	cmp	r0, #0
 801651e:	d1f9      	bne.n	8016514 <__metal_mutex_acquire+0x14>
 8016520:	f3bf 8f5b 	dmb	ish
 8016524:	b2d3      	uxtb	r3, r2
 8016526:	2b00      	cmp	r3, #0
 8016528:	d1ef      	bne.n	801650a <__metal_mutex_acquire+0xa>
		;
	}
}
 801652a:	bf00      	nop
 801652c:	bf00      	nop
 801652e:	370c      	adds	r7, #12
 8016530:	46bd      	mov	sp, r7
 8016532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016536:	4770      	bx	lr

08016538 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 8016538:	b480      	push	{r7}
 801653a:	b083      	sub	sp, #12
 801653c:	af00      	add	r7, sp, #0
 801653e:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	f3bf 8f5b 	dmb	ish
 8016546:	2200      	movs	r2, #0
 8016548:	701a      	strb	r2, [r3, #0]
 801654a:	f3bf 8f5b 	dmb	ish
}
 801654e:	bf00      	nop
 8016550:	370c      	adds	r7, #12
 8016552:	46bd      	mov	sp, r7
 8016554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016558:	4770      	bx	lr

0801655a <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 801655a:	b580      	push	{r7, lr}
 801655c:	b082      	sub	sp, #8
 801655e:	af00      	add	r7, sp, #0
 8016560:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 8016562:	6878      	ldr	r0, [r7, #4]
 8016564:	f7ff ffcc 	bl	8016500 <__metal_mutex_acquire>
}
 8016568:	bf00      	nop
 801656a:	3708      	adds	r7, #8
 801656c:	46bd      	mov	sp, r7
 801656e:	bd80      	pop	{r7, pc}

08016570 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 8016570:	b580      	push	{r7, lr}
 8016572:	b082      	sub	sp, #8
 8016574:	af00      	add	r7, sp, #0
 8016576:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8016578:	6878      	ldr	r0, [r7, #4]
 801657a:	f7ff ffdd 	bl	8016538 <__metal_mutex_release>
}
 801657e:	bf00      	nop
 8016580:	3708      	adds	r7, #8
 8016582:	46bd      	mov	sp, r7
 8016584:	bd80      	pop	{r7, pc}

08016586 <metal_list_add_before>:
{
 8016586:	b480      	push	{r7}
 8016588:	b083      	sub	sp, #12
 801658a:	af00      	add	r7, sp, #0
 801658c:	6078      	str	r0, [r7, #4]
 801658e:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	685a      	ldr	r2, [r3, #4]
 8016594:	683b      	ldr	r3, [r7, #0]
 8016596:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8016598:	683b      	ldr	r3, [r7, #0]
 801659a:	687a      	ldr	r2, [r7, #4]
 801659c:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 801659e:	683b      	ldr	r3, [r7, #0]
 80165a0:	681b      	ldr	r3, [r3, #0]
 80165a2:	683a      	ldr	r2, [r7, #0]
 80165a4:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 80165a6:	683b      	ldr	r3, [r7, #0]
 80165a8:	685b      	ldr	r3, [r3, #4]
 80165aa:	683a      	ldr	r2, [r7, #0]
 80165ac:	601a      	str	r2, [r3, #0]
}
 80165ae:	bf00      	nop
 80165b0:	370c      	adds	r7, #12
 80165b2:	46bd      	mov	sp, r7
 80165b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165b8:	4770      	bx	lr

080165ba <metal_list_add_tail>:
{
 80165ba:	b580      	push	{r7, lr}
 80165bc:	b082      	sub	sp, #8
 80165be:	af00      	add	r7, sp, #0
 80165c0:	6078      	str	r0, [r7, #4]
 80165c2:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 80165c4:	6839      	ldr	r1, [r7, #0]
 80165c6:	6878      	ldr	r0, [r7, #4]
 80165c8:	f7ff ffdd 	bl	8016586 <metal_list_add_before>
}
 80165cc:	bf00      	nop
 80165ce:	3708      	adds	r7, #8
 80165d0:	46bd      	mov	sp, r7
 80165d2:	bd80      	pop	{r7, pc}

080165d4 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 80165d4:	b480      	push	{r7}
 80165d6:	b083      	sub	sp, #12
 80165d8:	af00      	add	r7, sp, #0
 80165da:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	687a      	ldr	r2, [r7, #4]
 80165e2:	6852      	ldr	r2, [r2, #4]
 80165e4:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	685b      	ldr	r3, [r3, #4]
 80165ea:	687a      	ldr	r2, [r7, #4]
 80165ec:	6812      	ldr	r2, [r2, #0]
 80165ee:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	687a      	ldr	r2, [r7, #4]
 80165f4:	605a      	str	r2, [r3, #4]
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	685a      	ldr	r2, [r3, #4]
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	601a      	str	r2, [r3, #0]
}
 80165fe:	bf00      	nop
 8016600:	370c      	adds	r7, #12
 8016602:	46bd      	mov	sp, r7
 8016604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016608:	4770      	bx	lr

0801660a <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 801660a:	b480      	push	{r7}
 801660c:	b083      	sub	sp, #12
 801660e:	af00      	add	r7, sp, #0
 8016610:	6078      	str	r0, [r7, #4]
 8016612:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8016614:	683b      	ldr	r3, [r7, #0]
 8016616:	095b      	lsrs	r3, r3, #5
 8016618:	009a      	lsls	r2, r3, #2
 801661a:	6879      	ldr	r1, [r7, #4]
 801661c:	440a      	add	r2, r1
 801661e:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8016620:	683a      	ldr	r2, [r7, #0]
 8016622:	f002 021f 	and.w	r2, r2, #31
 8016626:	2001      	movs	r0, #1
 8016628:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 801662c:	009b      	lsls	r3, r3, #2
 801662e:	6878      	ldr	r0, [r7, #4]
 8016630:	4403      	add	r3, r0
 8016632:	430a      	orrs	r2, r1
 8016634:	601a      	str	r2, [r3, #0]
}
 8016636:	bf00      	nop
 8016638:	370c      	adds	r7, #12
 801663a:	46bd      	mov	sp, r7
 801663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016640:	4770      	bx	lr

08016642 <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 8016642:	b480      	push	{r7}
 8016644:	b083      	sub	sp, #12
 8016646:	af00      	add	r7, sp, #0
 8016648:	6078      	str	r0, [r7, #4]
 801664a:	6039      	str	r1, [r7, #0]
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 801664c:	683b      	ldr	r3, [r7, #0]
 801664e:	095b      	lsrs	r3, r3, #5
 8016650:	009b      	lsls	r3, r3, #2
 8016652:	687a      	ldr	r2, [r7, #4]
 8016654:	4413      	add	r3, r2
 8016656:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8016658:	683b      	ldr	r3, [r7, #0]
 801665a:	f003 031f 	and.w	r3, r3, #31
 801665e:	2101      	movs	r1, #1
 8016660:	fa01 f303 	lsl.w	r3, r1, r3
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8016664:	4013      	ands	r3, r2
}
 8016666:	4618      	mov	r0, r3
 8016668:	370c      	adds	r7, #12
 801666a:	46bd      	mov	sp, r7
 801666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016670:	4770      	bx	lr

08016672 <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 8016672:	b480      	push	{r7}
 8016674:	b083      	sub	sp, #12
 8016676:	af00      	add	r7, sp, #0
 8016678:	6078      	str	r0, [r7, #4]
 801667a:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 801667c:	683b      	ldr	r3, [r7, #0]
 801667e:	095b      	lsrs	r3, r3, #5
 8016680:	009a      	lsls	r2, r3, #2
 8016682:	6879      	ldr	r1, [r7, #4]
 8016684:	440a      	add	r2, r1
 8016686:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8016688:	683a      	ldr	r2, [r7, #0]
 801668a:	f002 021f 	and.w	r2, r2, #31
 801668e:	2001      	movs	r0, #1
 8016690:	fa00 f202 	lsl.w	r2, r0, r2
 8016694:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8016696:	009b      	lsls	r3, r3, #2
 8016698:	6878      	ldr	r0, [r7, #4]
 801669a:	4403      	add	r3, r0
 801669c:	400a      	ands	r2, r1
 801669e:	601a      	str	r2, [r3, #0]
}
 80166a0:	bf00      	nop
 80166a2:	370c      	adds	r7, #12
 80166a4:	46bd      	mov	sp, r7
 80166a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166aa:	4770      	bx	lr

080166ac <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 80166ac:	b580      	push	{r7, lr}
 80166ae:	b082      	sub	sp, #8
 80166b0:	af00      	add	r7, sp, #0
 80166b2:	6078      	str	r0, [r7, #4]
 80166b4:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
 80166b6:	6839      	ldr	r1, [r7, #0]
 80166b8:	6878      	ldr	r0, [r7, #4]
 80166ba:	f7ff ffc2 	bl	8016642 <metal_bitmap_is_bit_set>
 80166be:	4603      	mov	r3, r0
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	bf0c      	ite	eq
 80166c4:	2301      	moveq	r3, #1
 80166c6:	2300      	movne	r3, #0
 80166c8:	b2db      	uxtb	r3, r3
}
 80166ca:	4618      	mov	r0, r3
 80166cc:	3708      	adds	r7, #8
 80166ce:	46bd      	mov	sp, r7
 80166d0:	bd80      	pop	{r7, pc}

080166d2 <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 80166d2:	b580      	push	{r7, lr}
 80166d4:	b086      	sub	sp, #24
 80166d6:	af00      	add	r7, sp, #0
 80166d8:	60f8      	str	r0, [r7, #12]
 80166da:	60b9      	str	r1, [r7, #8]
 80166dc:	607a      	str	r2, [r7, #4]
	unsigned int bit;
	for (bit = start;
 80166de:	68bb      	ldr	r3, [r7, #8]
 80166e0:	617b      	str	r3, [r7, #20]
 80166e2:	e002      	b.n	80166ea <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 80166e4:	697b      	ldr	r3, [r7, #20]
 80166e6:	3301      	adds	r3, #1
 80166e8:	617b      	str	r3, [r7, #20]
	for (bit = start;
 80166ea:	697a      	ldr	r2, [r7, #20]
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	429a      	cmp	r2, r3
 80166f0:	d207      	bcs.n	8016702 <metal_bitmap_next_clear_bit+0x30>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 80166f2:	697b      	ldr	r3, [r7, #20]
 80166f4:	4619      	mov	r1, r3
 80166f6:	68f8      	ldr	r0, [r7, #12]
 80166f8:	f7ff ffd8 	bl	80166ac <metal_bitmap_is_bit_clear>
 80166fc:	4603      	mov	r3, r0
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d0f0      	beq.n	80166e4 <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
 8016702:	697b      	ldr	r3, [r7, #20]
}
 8016704:	4618      	mov	r0, r3
 8016706:	3718      	adds	r7, #24
 8016708:	46bd      	mov	sp, r7
 801670a:	bd80      	pop	{r7, pc}

0801670c <rpmsg_init_ept>:
{
 801670c:	b580      	push	{r7, lr}
 801670e:	b084      	sub	sp, #16
 8016710:	af00      	add	r7, sp, #0
 8016712:	60f8      	str	r0, [r7, #12]
 8016714:	60b9      	str	r1, [r7, #8]
 8016716:	607a      	str	r2, [r7, #4]
 8016718:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 801671a:	68fb      	ldr	r3, [r7, #12]
 801671c:	2220      	movs	r2, #32
 801671e:	68b9      	ldr	r1, [r7, #8]
 8016720:	4618      	mov	r0, r3
 8016722:	f007 f941 	bl	801d9a8 <strncpy>
	ept->addr = src;
 8016726:	68fb      	ldr	r3, [r7, #12]
 8016728:	687a      	ldr	r2, [r7, #4]
 801672a:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 801672c:	68fb      	ldr	r3, [r7, #12]
 801672e:	683a      	ldr	r2, [r7, #0]
 8016730:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 8016732:	68fb      	ldr	r3, [r7, #12]
 8016734:	69ba      	ldr	r2, [r7, #24]
 8016736:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8016738:	68fb      	ldr	r3, [r7, #12]
 801673a:	69fa      	ldr	r2, [r7, #28]
 801673c:	631a      	str	r2, [r3, #48]	; 0x30
}
 801673e:	bf00      	nop
 8016740:	3710      	adds	r7, #16
 8016742:	46bd      	mov	sp, r7
 8016744:	bd80      	pop	{r7, pc}

08016746 <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 8016746:	b580      	push	{r7, lr}
 8016748:	b084      	sub	sp, #16
 801674a:	af00      	add	r7, sp, #0
 801674c:	6078      	str	r0, [r7, #4]
 801674e:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
 8016750:	f04f 33ff 	mov.w	r3, #4294967295
 8016754:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 8016756:	683b      	ldr	r3, [r7, #0]
 8016758:	461a      	mov	r2, r3
 801675a:	2100      	movs	r1, #0
 801675c:	6878      	ldr	r0, [r7, #4]
 801675e:	f7ff ffb8 	bl	80166d2 <metal_bitmap_next_clear_bit>
 8016762:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
 8016764:	683b      	ldr	r3, [r7, #0]
 8016766:	68ba      	ldr	r2, [r7, #8]
 8016768:	429a      	cmp	r2, r3
 801676a:	d206      	bcs.n	801677a <rpmsg_get_address+0x34>
		addr = nextbit;
 801676c:	68bb      	ldr	r3, [r7, #8]
 801676e:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
 8016770:	68bb      	ldr	r3, [r7, #8]
 8016772:	4619      	mov	r1, r3
 8016774:	6878      	ldr	r0, [r7, #4]
 8016776:	f7ff ff48 	bl	801660a <metal_bitmap_set_bit>
	}

	return addr;
 801677a:	68fb      	ldr	r3, [r7, #12]
}
 801677c:	4618      	mov	r0, r3
 801677e:	3710      	adds	r7, #16
 8016780:	46bd      	mov	sp, r7
 8016782:	bd80      	pop	{r7, pc}

08016784 <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 8016784:	b580      	push	{r7, lr}
 8016786:	b084      	sub	sp, #16
 8016788:	af00      	add	r7, sp, #0
 801678a:	60f8      	str	r0, [r7, #12]
 801678c:	60b9      	str	r1, [r7, #8]
 801678e:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8016790:	687a      	ldr	r2, [r7, #4]
 8016792:	68bb      	ldr	r3, [r7, #8]
 8016794:	429a      	cmp	r2, r3
 8016796:	da03      	bge.n	80167a0 <rpmsg_release_address+0x1c>
		metal_bitmap_clear_bit(bitmap, addr);
 8016798:	6879      	ldr	r1, [r7, #4]
 801679a:	68f8      	ldr	r0, [r7, #12]
 801679c:	f7ff ff69 	bl	8016672 <metal_bitmap_clear_bit>
}
 80167a0:	bf00      	nop
 80167a2:	3710      	adds	r7, #16
 80167a4:	46bd      	mov	sp, r7
 80167a6:	bd80      	pop	{r7, pc}

080167a8 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 80167a8:	b580      	push	{r7, lr}
 80167aa:	b084      	sub	sp, #16
 80167ac:	af00      	add	r7, sp, #0
 80167ae:	60f8      	str	r0, [r7, #12]
 80167b0:	60b9      	str	r1, [r7, #8]
 80167b2:	607a      	str	r2, [r7, #4]
	if (addr < size)
 80167b4:	687a      	ldr	r2, [r7, #4]
 80167b6:	68bb      	ldr	r3, [r7, #8]
 80167b8:	429a      	cmp	r2, r3
 80167ba:	da05      	bge.n	80167c8 <rpmsg_is_address_set+0x20>
		return metal_bitmap_is_bit_set(bitmap, addr);
 80167bc:	6879      	ldr	r1, [r7, #4]
 80167be:	68f8      	ldr	r0, [r7, #12]
 80167c0:	f7ff ff3f 	bl	8016642 <metal_bitmap_is_bit_set>
 80167c4:	4603      	mov	r3, r0
 80167c6:	e000      	b.n	80167ca <rpmsg_is_address_set+0x22>
	else
		return RPMSG_ERR_PARAM;
 80167c8:	4b02      	ldr	r3, [pc, #8]	; (80167d4 <rpmsg_is_address_set+0x2c>)
}
 80167ca:	4618      	mov	r0, r3
 80167cc:	3710      	adds	r7, #16
 80167ce:	46bd      	mov	sp, r7
 80167d0:	bd80      	pop	{r7, pc}
 80167d2:	bf00      	nop
 80167d4:	fffff82d 	.word	0xfffff82d

080167d8 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 80167d8:	b580      	push	{r7, lr}
 80167da:	b084      	sub	sp, #16
 80167dc:	af00      	add	r7, sp, #0
 80167de:	60f8      	str	r0, [r7, #12]
 80167e0:	60b9      	str	r1, [r7, #8]
 80167e2:	607a      	str	r2, [r7, #4]
	if (addr < size) {
 80167e4:	687a      	ldr	r2, [r7, #4]
 80167e6:	68bb      	ldr	r3, [r7, #8]
 80167e8:	429a      	cmp	r2, r3
 80167ea:	da05      	bge.n	80167f8 <rpmsg_set_address+0x20>
		metal_bitmap_set_bit(bitmap, addr);
 80167ec:	6879      	ldr	r1, [r7, #4]
 80167ee:	68f8      	ldr	r0, [r7, #12]
 80167f0:	f7ff ff0b 	bl	801660a <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 80167f4:	2300      	movs	r3, #0
 80167f6:	e000      	b.n	80167fa <rpmsg_set_address+0x22>
	} else {
		return RPMSG_ERR_PARAM;
 80167f8:	4b02      	ldr	r3, [pc, #8]	; (8016804 <rpmsg_set_address+0x2c>)
	}
}
 80167fa:	4618      	mov	r0, r3
 80167fc:	3710      	adds	r7, #16
 80167fe:	46bd      	mov	sp, r7
 8016800:	bd80      	pop	{r7, pc}
 8016802:	bf00      	nop
 8016804:	fffff82d 	.word	0xfffff82d

08016808 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 8016808:	b590      	push	{r4, r7, lr}
 801680a:	b089      	sub	sp, #36	; 0x24
 801680c:	af02      	add	r7, sp, #8
 801680e:	60f8      	str	r0, [r7, #12]
 8016810:	60b9      	str	r1, [r7, #8]
 8016812:	607a      	str	r2, [r7, #4]
 8016814:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 8016816:	68fb      	ldr	r3, [r7, #12]
 8016818:	2b00      	cmp	r3, #0
 801681a:	d00a      	beq.n	8016832 <rpmsg_send_offchannel_raw+0x2a>
 801681c:	68fb      	ldr	r3, [r7, #12]
 801681e:	6a1b      	ldr	r3, [r3, #32]
 8016820:	2b00      	cmp	r3, #0
 8016822:	d006      	beq.n	8016832 <rpmsg_send_offchannel_raw+0x2a>
 8016824:	683b      	ldr	r3, [r7, #0]
 8016826:	2b00      	cmp	r3, #0
 8016828:	d003      	beq.n	8016832 <rpmsg_send_offchannel_raw+0x2a>
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016830:	d101      	bne.n	8016836 <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
 8016832:	4b0d      	ldr	r3, [pc, #52]	; (8016868 <rpmsg_send_offchannel_raw+0x60>)
 8016834:	e014      	b.n	8016860 <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
 8016836:	68fb      	ldr	r3, [r7, #12]
 8016838:	6a1b      	ldr	r3, [r3, #32]
 801683a:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
 801683c:	697b      	ldr	r3, [r7, #20]
 801683e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016840:	2b00      	cmp	r3, #0
 8016842:	d00c      	beq.n	801685e <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 8016844:	697b      	ldr	r3, [r7, #20]
 8016846:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8016848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801684a:	9301      	str	r3, [sp, #4]
 801684c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801684e:	9300      	str	r3, [sp, #0]
 8016850:	683b      	ldr	r3, [r7, #0]
 8016852:	687a      	ldr	r2, [r7, #4]
 8016854:	68b9      	ldr	r1, [r7, #8]
 8016856:	6978      	ldr	r0, [r7, #20]
 8016858:	47a0      	blx	r4
 801685a:	4603      	mov	r3, r0
 801685c:	e000      	b.n	8016860 <rpmsg_send_offchannel_raw+0x58>
						      size, wait);

	return RPMSG_ERR_PARAM;
 801685e:	4b02      	ldr	r3, [pc, #8]	; (8016868 <rpmsg_send_offchannel_raw+0x60>)
}
 8016860:	4618      	mov	r0, r3
 8016862:	371c      	adds	r7, #28
 8016864:	46bd      	mov	sp, r7
 8016866:	bd90      	pop	{r4, r7, pc}
 8016868:	fffff82d 	.word	0xfffff82d

0801686c <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 801686c:	b580      	push	{r7, lr}
 801686e:	b090      	sub	sp, #64	; 0x40
 8016870:	af02      	add	r7, sp, #8
 8016872:	6078      	str	r0, [r7, #4]
 8016874:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 8016876:	683b      	ldr	r3, [r7, #0]
 8016878:	633b      	str	r3, [r7, #48]	; 0x30
	ns_msg.addr = ept->addr;
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801687e:	62fb      	str	r3, [r7, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 8016880:	6879      	ldr	r1, [r7, #4]
 8016882:	f107 030c 	add.w	r3, r7, #12
 8016886:	2220      	movs	r2, #32
 8016888:	4618      	mov	r0, r3
 801688a:	f007 f88d 	bl	801d9a8 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8016892:	f107 030c 	add.w	r3, r7, #12
 8016896:	2201      	movs	r2, #1
 8016898:	9201      	str	r2, [sp, #4]
 801689a:	2228      	movs	r2, #40	; 0x28
 801689c:	9200      	str	r2, [sp, #0]
 801689e:	2235      	movs	r2, #53	; 0x35
 80168a0:	6878      	ldr	r0, [r7, #4]
 80168a2:	f7ff ffb1 	bl	8016808 <rpmsg_send_offchannel_raw>
 80168a6:	6378      	str	r0, [r7, #52]	; 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 80168a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	da01      	bge.n	80168b2 <rpmsg_send_ns_message+0x46>
		return ret;
 80168ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80168b0:	e000      	b.n	80168b4 <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
 80168b2:	2300      	movs	r3, #0
}
 80168b4:	4618      	mov	r0, r3
 80168b6:	3738      	adds	r7, #56	; 0x38
 80168b8:	46bd      	mov	sp, r7
 80168ba:	bd80      	pop	{r7, pc}

080168bc <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 80168bc:	b580      	push	{r7, lr}
 80168be:	b088      	sub	sp, #32
 80168c0:	af00      	add	r7, sp, #0
 80168c2:	60f8      	str	r0, [r7, #12]
 80168c4:	60b9      	str	r1, [r7, #8]
 80168c6:	607a      	str	r2, [r7, #4]
 80168c8:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 80168ca:	68fb      	ldr	r3, [r7, #12]
 80168cc:	681b      	ldr	r3, [r3, #0]
 80168ce:	61fb      	str	r3, [r7, #28]
 80168d0:	e04b      	b.n	801696a <rpmsg_get_endpoint+0xae>
		int name_match = 0;
 80168d2:	2300      	movs	r3, #0
 80168d4:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 80168d6:	69fb      	ldr	r3, [r7, #28]
 80168d8:	3b34      	subs	r3, #52	; 0x34
 80168da:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80168e2:	d006      	beq.n	80168f2 <rpmsg_get_endpoint+0x36>
 80168e4:	697b      	ldr	r3, [r7, #20]
 80168e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168e8:	687a      	ldr	r2, [r7, #4]
 80168ea:	429a      	cmp	r2, r3
 80168ec:	d101      	bne.n	80168f2 <rpmsg_get_endpoint+0x36>
			return ept;
 80168ee:	697b      	ldr	r3, [r7, #20]
 80168f0:	e040      	b.n	8016974 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 80168f2:	697b      	ldr	r3, [r7, #20]
 80168f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168f6:	687a      	ldr	r2, [r7, #4]
 80168f8:	429a      	cmp	r2, r3
 80168fa:	d106      	bne.n	801690a <rpmsg_get_endpoint+0x4e>
 80168fc:	697b      	ldr	r3, [r7, #20]
 80168fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016900:	683a      	ldr	r2, [r7, #0]
 8016902:	429a      	cmp	r2, r3
 8016904:	d101      	bne.n	801690a <rpmsg_get_endpoint+0x4e>
			return ept;
 8016906:	697b      	ldr	r3, [r7, #20]
 8016908:	e034      	b.n	8016974 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
 801690a:	68bb      	ldr	r3, [r7, #8]
 801690c:	2b00      	cmp	r3, #0
 801690e:	d00c      	beq.n	801692a <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
 8016910:	697b      	ldr	r3, [r7, #20]
 8016912:	2220      	movs	r2, #32
 8016914:	68b9      	ldr	r1, [r7, #8]
 8016916:	4618      	mov	r0, r3
 8016918:	f007 f834 	bl	801d984 <strncmp>
 801691c:	4603      	mov	r3, r0
 801691e:	2b00      	cmp	r3, #0
 8016920:	bf0c      	ite	eq
 8016922:	2301      	moveq	r3, #1
 8016924:	2300      	movne	r3, #0
 8016926:	b2db      	uxtb	r3, r3
 8016928:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
 801692a:	68bb      	ldr	r3, [r7, #8]
 801692c:	2b00      	cmp	r3, #0
 801692e:	d018      	beq.n	8016962 <rpmsg_get_endpoint+0xa6>
 8016930:	69bb      	ldr	r3, [r7, #24]
 8016932:	2b00      	cmp	r3, #0
 8016934:	d015      	beq.n	8016962 <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address*/
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 8016936:	683b      	ldr	r3, [r7, #0]
 8016938:	f1b3 3fff 	cmp.w	r3, #4294967295
 801693c:	d006      	beq.n	801694c <rpmsg_get_endpoint+0x90>
 801693e:	697b      	ldr	r3, [r7, #20]
 8016940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016942:	683a      	ldr	r2, [r7, #0]
 8016944:	429a      	cmp	r2, r3
 8016946:	d101      	bne.n	801694c <rpmsg_get_endpoint+0x90>
			return ept;
 8016948:	697b      	ldr	r3, [r7, #20]
 801694a:	e013      	b.n	8016974 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept*/
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016952:	d107      	bne.n	8016964 <rpmsg_get_endpoint+0xa8>
 8016954:	697b      	ldr	r3, [r7, #20]
 8016956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016958:	f1b3 3fff 	cmp.w	r3, #4294967295
 801695c:	d102      	bne.n	8016964 <rpmsg_get_endpoint+0xa8>
			return ept;
 801695e:	697b      	ldr	r3, [r7, #20]
 8016960:	e008      	b.n	8016974 <rpmsg_get_endpoint+0xb8>
			continue;
 8016962:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
 8016964:	69fb      	ldr	r3, [r7, #28]
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	61fb      	str	r3, [r7, #28]
 801696a:	68fb      	ldr	r3, [r7, #12]
 801696c:	69fa      	ldr	r2, [r7, #28]
 801696e:	429a      	cmp	r2, r3
 8016970:	d1af      	bne.n	80168d2 <rpmsg_get_endpoint+0x16>
	}
	return NULL;
 8016972:	2300      	movs	r3, #0
}
 8016974:	4618      	mov	r0, r3
 8016976:	3720      	adds	r7, #32
 8016978:	46bd      	mov	sp, r7
 801697a:	bd80      	pop	{r7, pc}

0801697c <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 801697c:	b580      	push	{r7, lr}
 801697e:	b084      	sub	sp, #16
 8016980:	af00      	add	r7, sp, #0
 8016982:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	2b00      	cmp	r3, #0
 8016988:	d016      	beq.n	80169b8 <rpmsg_unregister_endpoint+0x3c>
		return;

	rdev = ept->rdev;
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	6a1b      	ldr	r3, [r3, #32]
 801698e:	60fb      	str	r3, [r7, #12]

	if (ept->addr != RPMSG_ADDR_ANY)
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016998:	d008      	beq.n	80169ac <rpmsg_unregister_endpoint+0x30>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 801699a:	68fb      	ldr	r3, [r7, #12]
 801699c:	f103 0048 	add.w	r0, r3, #72	; 0x48
				      ept->addr);
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 80169a4:	461a      	mov	r2, r3
 80169a6:	2180      	movs	r1, #128	; 0x80
 80169a8:	f7ff feec 	bl	8016784 <rpmsg_release_address>
	metal_list_del(&ept->node);
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	3334      	adds	r3, #52	; 0x34
 80169b0:	4618      	mov	r0, r3
 80169b2:	f7ff fe0f 	bl	80165d4 <metal_list_del>
 80169b6:	e000      	b.n	80169ba <rpmsg_unregister_endpoint+0x3e>
		return;
 80169b8:	bf00      	nop
}
 80169ba:	3710      	adds	r7, #16
 80169bc:	46bd      	mov	sp, r7
 80169be:	bd80      	pop	{r7, pc}

080169c0 <rpmsg_register_endpoint>:

int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept)
{
 80169c0:	b580      	push	{r7, lr}
 80169c2:	b082      	sub	sp, #8
 80169c4:	af00      	add	r7, sp, #0
 80169c6:	6078      	str	r0, [r7, #4]
 80169c8:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
 80169ca:	683b      	ldr	r3, [r7, #0]
 80169cc:	687a      	ldr	r2, [r7, #4]
 80169ce:	621a      	str	r2, [r3, #32]

	metal_list_add_tail(&rdev->endpoints, &ept->node);
 80169d0:	687a      	ldr	r2, [r7, #4]
 80169d2:	683b      	ldr	r3, [r7, #0]
 80169d4:	3334      	adds	r3, #52	; 0x34
 80169d6:	4619      	mov	r1, r3
 80169d8:	4610      	mov	r0, r2
 80169da:	f7ff fdee 	bl	80165ba <metal_list_add_tail>
	return RPMSG_SUCCESS;
 80169de:	2300      	movs	r3, #0
}
 80169e0:	4618      	mov	r0, r3
 80169e2:	3708      	adds	r7, #8
 80169e4:	46bd      	mov	sp, r7
 80169e6:	bd80      	pop	{r7, pc}

080169e8 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 80169e8:	b580      	push	{r7, lr}
 80169ea:	b088      	sub	sp, #32
 80169ec:	af02      	add	r7, sp, #8
 80169ee:	60f8      	str	r0, [r7, #12]
 80169f0:	60b9      	str	r1, [r7, #8]
 80169f2:	607a      	str	r2, [r7, #4]
 80169f4:	603b      	str	r3, [r7, #0]
	int status;
	uint32_t addr = src;
 80169f6:	683b      	ldr	r3, [r7, #0]
 80169f8:	613b      	str	r3, [r7, #16]

	if (!ept)
 80169fa:	68fb      	ldr	r3, [r7, #12]
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	d101      	bne.n	8016a04 <rpmsg_create_ept+0x1c>
		return RPMSG_ERR_PARAM;
 8016a00:	4b37      	ldr	r3, [pc, #220]	; (8016ae0 <rpmsg_create_ept+0xf8>)
 8016a02:	e068      	b.n	8016ad6 <rpmsg_create_ept+0xee>

	metal_mutex_acquire(&rdev->lock);
 8016a04:	68bb      	ldr	r3, [r7, #8]
 8016a06:	3358      	adds	r3, #88	; 0x58
 8016a08:	4618      	mov	r0, r3
 8016a0a:	f7ff fda6 	bl	801655a <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 8016a0e:	683b      	ldr	r3, [r7, #0]
 8016a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a14:	d018      	beq.n	8016a48 <rpmsg_create_ept+0x60>
		status = rpmsg_is_address_set(rdev->bitmap,
 8016a16:	68bb      	ldr	r3, [r7, #8]
 8016a18:	3348      	adds	r3, #72	; 0x48
 8016a1a:	683a      	ldr	r2, [r7, #0]
 8016a1c:	2180      	movs	r1, #128	; 0x80
 8016a1e:	4618      	mov	r0, r3
 8016a20:	f7ff fec2 	bl	80167a8 <rpmsg_is_address_set>
 8016a24:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 8016a26:	697b      	ldr	r3, [r7, #20]
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	d107      	bne.n	8016a3c <rpmsg_create_ept+0x54>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8016a2c:	68bb      	ldr	r3, [r7, #8]
 8016a2e:	3348      	adds	r3, #72	; 0x48
 8016a30:	683a      	ldr	r2, [r7, #0]
 8016a32:	2180      	movs	r1, #128	; 0x80
 8016a34:	4618      	mov	r0, r3
 8016a36:	f7ff fecf 	bl	80167d8 <rpmsg_set_address>
 8016a3a:	e00c      	b.n	8016a56 <rpmsg_create_ept+0x6e>
					  src);
		} else if (status > 0) {
 8016a3c:	697b      	ldr	r3, [r7, #20]
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	dd40      	ble.n	8016ac4 <rpmsg_create_ept+0xdc>
			status = RPMSG_SUCCESS;
 8016a42:	2300      	movs	r3, #0
 8016a44:	617b      	str	r3, [r7, #20]
			goto ret_status;
 8016a46:	e040      	b.n	8016aca <rpmsg_create_ept+0xe2>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 8016a48:	68bb      	ldr	r3, [r7, #8]
 8016a4a:	3348      	adds	r3, #72	; 0x48
 8016a4c:	2180      	movs	r1, #128	; 0x80
 8016a4e:	4618      	mov	r0, r3
 8016a50:	f7ff fe79 	bl	8016746 <rpmsg_get_address>
 8016a54:	6138      	str	r0, [r7, #16]
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 8016a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a58:	9301      	str	r3, [sp, #4]
 8016a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a5c:	9300      	str	r3, [sp, #0]
 8016a5e:	6a3b      	ldr	r3, [r7, #32]
 8016a60:	693a      	ldr	r2, [r7, #16]
 8016a62:	6879      	ldr	r1, [r7, #4]
 8016a64:	68f8      	ldr	r0, [r7, #12]
 8016a66:	f7ff fe51 	bl	801670c <rpmsg_init_ept>

	status = rpmsg_register_endpoint(rdev, ept);
 8016a6a:	68f9      	ldr	r1, [r7, #12]
 8016a6c:	68b8      	ldr	r0, [r7, #8]
 8016a6e:	f7ff ffa7 	bl	80169c0 <rpmsg_register_endpoint>
 8016a72:	6178      	str	r0, [r7, #20]
	if (status < 0)
 8016a74:	697b      	ldr	r3, [r7, #20]
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	da06      	bge.n	8016a88 <rpmsg_create_ept+0xa0>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE, addr);
 8016a7a:	68bb      	ldr	r3, [r7, #8]
 8016a7c:	3348      	adds	r3, #72	; 0x48
 8016a7e:	693a      	ldr	r2, [r7, #16]
 8016a80:	2180      	movs	r1, #128	; 0x80
 8016a82:	4618      	mov	r0, r3
 8016a84:	f7ff fe7e 	bl	8016784 <rpmsg_release_address>

	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
 8016a88:	697b      	ldr	r3, [r7, #20]
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	d11c      	bne.n	8016ac8 <rpmsg_create_ept+0xe0>
 8016a8e:	68fb      	ldr	r3, [r7, #12]
 8016a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a96:	d117      	bne.n	8016ac8 <rpmsg_create_ept+0xe0>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 8016a98:	68bb      	ldr	r3, [r7, #8]
 8016a9a:	3358      	adds	r3, #88	; 0x58
 8016a9c:	4618      	mov	r0, r3
 8016a9e:	f7ff fd67 	bl	8016570 <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 8016aa2:	2100      	movs	r1, #0
 8016aa4:	68f8      	ldr	r0, [r7, #12]
 8016aa6:	f7ff fee1 	bl	801686c <rpmsg_send_ns_message>
 8016aaa:	6178      	str	r0, [r7, #20]
		metal_mutex_acquire(&rdev->lock);
 8016aac:	68bb      	ldr	r3, [r7, #8]
 8016aae:	3358      	adds	r3, #88	; 0x58
 8016ab0:	4618      	mov	r0, r3
 8016ab2:	f7ff fd52 	bl	801655a <metal_mutex_acquire>
		if (status)
 8016ab6:	697b      	ldr	r3, [r7, #20]
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d005      	beq.n	8016ac8 <rpmsg_create_ept+0xe0>
			rpmsg_unregister_endpoint(ept);
 8016abc:	68f8      	ldr	r0, [r7, #12]
 8016abe:	f7ff ff5d 	bl	801697c <rpmsg_unregister_endpoint>
 8016ac2:	e002      	b.n	8016aca <rpmsg_create_ept+0xe2>
			goto ret_status;
 8016ac4:	bf00      	nop
 8016ac6:	e000      	b.n	8016aca <rpmsg_create_ept+0xe2>
	}

ret_status:
 8016ac8:	bf00      	nop
	metal_mutex_release(&rdev->lock);
 8016aca:	68bb      	ldr	r3, [r7, #8]
 8016acc:	3358      	adds	r3, #88	; 0x58
 8016ace:	4618      	mov	r0, r3
 8016ad0:	f7ff fd4e 	bl	8016570 <metal_mutex_release>
	return status;
 8016ad4:	697b      	ldr	r3, [r7, #20]
}
 8016ad6:	4618      	mov	r0, r3
 8016ad8:	3718      	adds	r7, #24
 8016ada:	46bd      	mov	sp, r7
 8016adc:	bd80      	pop	{r7, pc}
 8016ade:	bf00      	nop
 8016ae0:	fffff82d 	.word	0xfffff82d

08016ae4 <__metal_cache_invalidate>:
{
 8016ae4:	b580      	push	{r7, lr}
 8016ae6:	b082      	sub	sp, #8
 8016ae8:	af00      	add	r7, sp, #0
 8016aea:	6078      	str	r0, [r7, #4]
 8016aec:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8016aee:	6839      	ldr	r1, [r7, #0]
 8016af0:	6878      	ldr	r0, [r7, #4]
 8016af2:	f000 fcc2 	bl	801747a <metal_machine_cache_invalidate>
}
 8016af6:	bf00      	nop
 8016af8:	3708      	adds	r7, #8
 8016afa:	46bd      	mov	sp, r7
 8016afc:	bd80      	pop	{r7, pc}

08016afe <metal_cache_invalidate>:
{
 8016afe:	b580      	push	{r7, lr}
 8016b00:	b082      	sub	sp, #8
 8016b02:	af00      	add	r7, sp, #0
 8016b04:	6078      	str	r0, [r7, #4]
 8016b06:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8016b08:	6839      	ldr	r1, [r7, #0]
 8016b0a:	6878      	ldr	r0, [r7, #4]
 8016b0c:	f7ff ffea 	bl	8016ae4 <__metal_cache_invalidate>
}
 8016b10:	bf00      	nop
 8016b12:	3708      	adds	r7, #8
 8016b14:	46bd      	mov	sp, r7
 8016b16:	bd80      	pop	{r7, pc}

08016b18 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 8016b18:	b480      	push	{r7}
 8016b1a:	b083      	sub	sp, #12
 8016b1c:	af00      	add	r7, sp, #0
 8016b1e:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
 8016b20:	2300      	movs	r3, #0
}
 8016b22:	4618      	mov	r0, r3
 8016b24:	370c      	adds	r7, #12
 8016b26:	46bd      	mov	sp, r7
 8016b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b2c:	4770      	bx	lr

08016b2e <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 8016b2e:	b580      	push	{r7, lr}
 8016b30:	b082      	sub	sp, #8
 8016b32:	af00      	add	r7, sp, #0
 8016b34:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
 8016b36:	6878      	ldr	r0, [r7, #4]
 8016b38:	f7ff ffee 	bl	8016b18 <__metal_sleep_usec>
 8016b3c:	4603      	mov	r3, r0
}
 8016b3e:	4618      	mov	r0, r3
 8016b40:	3708      	adds	r7, #8
 8016b42:	46bd      	mov	sp, r7
 8016b44:	bd80      	pop	{r7, pc}

08016b46 <metal_list_init>:
{
 8016b46:	b480      	push	{r7}
 8016b48:	b083      	sub	sp, #12
 8016b4a:	af00      	add	r7, sp, #0
 8016b4c:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	687a      	ldr	r2, [r7, #4]
 8016b52:	605a      	str	r2, [r3, #4]
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	685a      	ldr	r2, [r3, #4]
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	601a      	str	r2, [r3, #0]
}
 8016b5c:	bf00      	nop
 8016b5e:	370c      	adds	r7, #12
 8016b60:	46bd      	mov	sp, r7
 8016b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b66:	4770      	bx	lr

08016b68 <metal_io_virt_to_offset>:
{
 8016b68:	b480      	push	{r7}
 8016b6a:	b085      	sub	sp, #20
 8016b6c:	af00      	add	r7, sp, #0
 8016b6e:	6078      	str	r0, [r7, #4]
 8016b70:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	681b      	ldr	r3, [r3, #0]
 8016b76:	683a      	ldr	r2, [r7, #0]
 8016b78:	1ad3      	subs	r3, r2, r3
 8016b7a:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	689b      	ldr	r3, [r3, #8]
 8016b80:	68fa      	ldr	r2, [r7, #12]
 8016b82:	429a      	cmp	r2, r3
 8016b84:	d201      	bcs.n	8016b8a <metal_io_virt_to_offset+0x22>
 8016b86:	68fb      	ldr	r3, [r7, #12]
 8016b88:	e001      	b.n	8016b8e <metal_io_virt_to_offset+0x26>
 8016b8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016b8e:	4618      	mov	r0, r3
 8016b90:	3714      	adds	r7, #20
 8016b92:	46bd      	mov	sp, r7
 8016b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b98:	4770      	bx	lr

08016b9a <__metal_mutex_init>:
{
 8016b9a:	b480      	push	{r7}
 8016b9c:	b085      	sub	sp, #20
 8016b9e:	af00      	add	r7, sp, #0
 8016ba0:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, 0);
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	60fb      	str	r3, [r7, #12]
 8016ba6:	2300      	movs	r3, #0
 8016ba8:	60bb      	str	r3, [r7, #8]
 8016baa:	68bb      	ldr	r3, [r7, #8]
 8016bac:	461a      	mov	r2, r3
 8016bae:	68fb      	ldr	r3, [r7, #12]
 8016bb0:	f3bf 8f5b 	dmb	ish
 8016bb4:	601a      	str	r2, [r3, #0]
 8016bb6:	f3bf 8f5b 	dmb	ish
}
 8016bba:	bf00      	nop
 8016bbc:	3714      	adds	r7, #20
 8016bbe:	46bd      	mov	sp, r7
 8016bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bc4:	4770      	bx	lr

08016bc6 <__metal_mutex_acquire>:
{
 8016bc6:	b480      	push	{r7}
 8016bc8:	b083      	sub	sp, #12
 8016bca:	af00      	add	r7, sp, #0
 8016bcc:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8016bce:	bf00      	nop
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	2201      	movs	r2, #1
 8016bd4:	4611      	mov	r1, r2
 8016bd6:	f3bf 8f5b 	dmb	ish
 8016bda:	e8d3 2f4f 	ldrexb	r2, [r3]
 8016bde:	e8c3 1f40 	strexb	r0, r1, [r3]
 8016be2:	2800      	cmp	r0, #0
 8016be4:	d1f9      	bne.n	8016bda <__metal_mutex_acquire+0x14>
 8016be6:	f3bf 8f5b 	dmb	ish
 8016bea:	b2d3      	uxtb	r3, r2
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	d1ef      	bne.n	8016bd0 <__metal_mutex_acquire+0xa>
}
 8016bf0:	bf00      	nop
 8016bf2:	bf00      	nop
 8016bf4:	370c      	adds	r7, #12
 8016bf6:	46bd      	mov	sp, r7
 8016bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bfc:	4770      	bx	lr

08016bfe <__metal_mutex_release>:
{
 8016bfe:	b480      	push	{r7}
 8016c00:	b083      	sub	sp, #12
 8016c02:	af00      	add	r7, sp, #0
 8016c04:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	f3bf 8f5b 	dmb	ish
 8016c0c:	2200      	movs	r2, #0
 8016c0e:	701a      	strb	r2, [r3, #0]
 8016c10:	f3bf 8f5b 	dmb	ish
}
 8016c14:	bf00      	nop
 8016c16:	370c      	adds	r7, #12
 8016c18:	46bd      	mov	sp, r7
 8016c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c1e:	4770      	bx	lr

08016c20 <metal_mutex_init>:
{
 8016c20:	b580      	push	{r7, lr}
 8016c22:	b082      	sub	sp, #8
 8016c24:	af00      	add	r7, sp, #0
 8016c26:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
 8016c28:	6878      	ldr	r0, [r7, #4]
 8016c2a:	f7ff ffb6 	bl	8016b9a <__metal_mutex_init>
}
 8016c2e:	bf00      	nop
 8016c30:	3708      	adds	r7, #8
 8016c32:	46bd      	mov	sp, r7
 8016c34:	bd80      	pop	{r7, pc}

08016c36 <metal_mutex_acquire>:
{
 8016c36:	b580      	push	{r7, lr}
 8016c38:	b082      	sub	sp, #8
 8016c3a:	af00      	add	r7, sp, #0
 8016c3c:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 8016c3e:	6878      	ldr	r0, [r7, #4]
 8016c40:	f7ff ffc1 	bl	8016bc6 <__metal_mutex_acquire>
}
 8016c44:	bf00      	nop
 8016c46:	3708      	adds	r7, #8
 8016c48:	46bd      	mov	sp, r7
 8016c4a:	bd80      	pop	{r7, pc}

08016c4c <metal_mutex_release>:
{
 8016c4c:	b580      	push	{r7, lr}
 8016c4e:	b082      	sub	sp, #8
 8016c50:	af00      	add	r7, sp, #0
 8016c52:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8016c54:	6878      	ldr	r0, [r7, #4]
 8016c56:	f7ff ffd2 	bl	8016bfe <__metal_mutex_release>
}
 8016c5a:	bf00      	nop
 8016c5c:	3708      	adds	r7, #8
 8016c5e:	46bd      	mov	sp, r7
 8016c60:	bd80      	pop	{r7, pc}

08016c62 <rpmsg_init_ept>:
{
 8016c62:	b580      	push	{r7, lr}
 8016c64:	b084      	sub	sp, #16
 8016c66:	af00      	add	r7, sp, #0
 8016c68:	60f8      	str	r0, [r7, #12]
 8016c6a:	60b9      	str	r1, [r7, #8]
 8016c6c:	607a      	str	r2, [r7, #4]
 8016c6e:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8016c70:	68fb      	ldr	r3, [r7, #12]
 8016c72:	2220      	movs	r2, #32
 8016c74:	68b9      	ldr	r1, [r7, #8]
 8016c76:	4618      	mov	r0, r3
 8016c78:	f006 fe96 	bl	801d9a8 <strncpy>
	ept->addr = src;
 8016c7c:	68fb      	ldr	r3, [r7, #12]
 8016c7e:	687a      	ldr	r2, [r7, #4]
 8016c80:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 8016c82:	68fb      	ldr	r3, [r7, #12]
 8016c84:	683a      	ldr	r2, [r7, #0]
 8016c86:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 8016c88:	68fb      	ldr	r3, [r7, #12]
 8016c8a:	69ba      	ldr	r2, [r7, #24]
 8016c8c:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8016c8e:	68fb      	ldr	r3, [r7, #12]
 8016c90:	69fa      	ldr	r2, [r7, #28]
 8016c92:	631a      	str	r2, [r3, #48]	; 0x30
}
 8016c94:	bf00      	nop
 8016c96:	3710      	adds	r7, #16
 8016c98:	46bd      	mov	sp, r7
 8016c9a:	bd80      	pop	{r7, pc}

08016c9c <rpmsg_virtio_get_role>:

#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER
static inline unsigned int
	rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 8016c9c:	b480      	push	{r7}
 8016c9e:	b083      	sub	sp, #12
 8016ca0:	af00      	add	r7, sp, #0
 8016ca2:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016ca8:	699b      	ldr	r3, [r3, #24]
}
 8016caa:	4618      	mov	r0, r3
 8016cac:	370c      	adds	r7, #12
 8016cae:	46bd      	mov	sp, r7
 8016cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cb4:	4770      	bx	lr

08016cb6 <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 8016cb6:	b580      	push	{r7, lr}
 8016cb8:	b082      	sub	sp, #8
 8016cba:	af00      	add	r7, sp, #0
 8016cbc:	6078      	str	r0, [r7, #4]
 8016cbe:	460b      	mov	r3, r1
 8016cc0:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016cc6:	6a1b      	ldr	r3, [r3, #32]
 8016cc8:	685b      	ldr	r3, [r3, #4]
 8016cca:	687a      	ldr	r2, [r7, #4]
 8016ccc:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8016cce:	78f9      	ldrb	r1, [r7, #3]
 8016cd0:	4610      	mov	r0, r2
 8016cd2:	4798      	blx	r3
}
 8016cd4:	bf00      	nop
 8016cd6:	3708      	adds	r7, #8
 8016cd8:	46bd      	mov	sp, r7
 8016cda:	bd80      	pop	{r7, pc}

08016cdc <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 8016cdc:	b580      	push	{r7, lr}
 8016cde:	b082      	sub	sp, #8
 8016ce0:	af00      	add	r7, sp, #0
 8016ce2:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016ce8:	6a1b      	ldr	r3, [r3, #32]
 8016cea:	681b      	ldr	r3, [r3, #0]
 8016cec:	687a      	ldr	r2, [r7, #4]
 8016cee:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8016cf0:	4610      	mov	r0, r2
 8016cf2:	4798      	blx	r3
 8016cf4:	4603      	mov	r3, r0
}
 8016cf6:	4618      	mov	r0, r3
 8016cf8:	3708      	adds	r7, #8
 8016cfa:	46bd      	mov	sp, r7
 8016cfc:	bd80      	pop	{r7, pc}

08016cfe <rpmsg_virtio_get_features>:

static inline uint32_t
	rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 8016cfe:	b580      	push	{r7, lr}
 8016d00:	b082      	sub	sp, #8
 8016d02:	af00      	add	r7, sp, #0
 8016d04:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016d0a:	6a1b      	ldr	r3, [r3, #32]
 8016d0c:	689b      	ldr	r3, [r3, #8]
 8016d0e:	687a      	ldr	r2, [r7, #4]
 8016d10:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8016d12:	4610      	mov	r0, r2
 8016d14:	4798      	blx	r3
 8016d16:	4603      	mov	r3, r0
}
 8016d18:	4618      	mov	r0, r3
 8016d1a:	3708      	adds	r7, #8
 8016d1c:	46bd      	mov	sp, r7
 8016d1e:	bd80      	pop	{r7, pc}

08016d20 <rpmsg_virtio_create_virtqueues>:
static inline int
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
 8016d20:	b580      	push	{r7, lr}
 8016d22:	b086      	sub	sp, #24
 8016d24:	af02      	add	r7, sp, #8
 8016d26:	60f8      	str	r0, [r7, #12]
 8016d28:	60b9      	str	r1, [r7, #8]
 8016d2a:	607a      	str	r2, [r7, #4]
 8016d2c:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 8016d2e:	68fb      	ldr	r3, [r7, #12]
 8016d30:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8016d32:	68b9      	ldr	r1, [r7, #8]
 8016d34:	69bb      	ldr	r3, [r7, #24]
 8016d36:	9300      	str	r3, [sp, #0]
 8016d38:	683b      	ldr	r3, [r7, #0]
 8016d3a:	687a      	ldr	r2, [r7, #4]
 8016d3c:	f000 fbf2 	bl	8017524 <virtio_create_virtqueues>
 8016d40:	4603      	mov	r3, r0
					callbacks);
}
 8016d42:	4618      	mov	r0, r3
 8016d44:	3710      	adds	r7, #16
 8016d46:	46bd      	mov	sp, r7
 8016d48:	bd80      	pop	{r7, pc}

08016d4a <rpmsg_get_ept_from_addr>:
int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 8016d4a:	b580      	push	{r7, lr}
 8016d4c:	b082      	sub	sp, #8
 8016d4e:	af00      	add	r7, sp, #0
 8016d50:	6078      	str	r0, [r7, #4]
 8016d52:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 8016d54:	f04f 33ff 	mov.w	r3, #4294967295
 8016d58:	683a      	ldr	r2, [r7, #0]
 8016d5a:	2100      	movs	r1, #0
 8016d5c:	6878      	ldr	r0, [r7, #4]
 8016d5e:	f7ff fdad 	bl	80168bc <rpmsg_get_endpoint>
 8016d62:	4603      	mov	r3, r0
}
 8016d64:	4618      	mov	r0, r3
 8016d66:	3708      	adds	r7, #8
 8016d68:	46bd      	mov	sp, r7
 8016d6a:	bd80      	pop	{r7, pc}

08016d6c <rpmsg_virtio_shm_pool_get_buffer>:

#ifndef VIRTIO_SLAVE_ONLY
metal_weak void *
rpmsg_virtio_shm_pool_get_buffer(struct rpmsg_virtio_shm_pool *shpool,
				 size_t size)
{
 8016d6c:	b480      	push	{r7}
 8016d6e:	b085      	sub	sp, #20
 8016d70:	af00      	add	r7, sp, #0
 8016d72:	6078      	str	r0, [r7, #4]
 8016d74:	6039      	str	r1, [r7, #0]
	void *buffer;

	if (shpool->avail < size)
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	685b      	ldr	r3, [r3, #4]
 8016d7a:	683a      	ldr	r2, [r7, #0]
 8016d7c:	429a      	cmp	r2, r3
 8016d7e:	d901      	bls.n	8016d84 <rpmsg_virtio_shm_pool_get_buffer+0x18>
		return NULL;
 8016d80:	2300      	movs	r3, #0
 8016d82:	e00f      	b.n	8016da4 <rpmsg_virtio_shm_pool_get_buffer+0x38>
	buffer =  (void *)((char *)shpool->base + shpool->size - shpool->avail);
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	681a      	ldr	r2, [r3, #0]
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	6899      	ldr	r1, [r3, #8]
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	685b      	ldr	r3, [r3, #4]
 8016d90:	1acb      	subs	r3, r1, r3
 8016d92:	4413      	add	r3, r2
 8016d94:	60fb      	str	r3, [r7, #12]
	shpool->avail -= size;
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	685a      	ldr	r2, [r3, #4]
 8016d9a:	683b      	ldr	r3, [r7, #0]
 8016d9c:	1ad2      	subs	r2, r2, r3
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	605a      	str	r2, [r3, #4]

	return buffer;
 8016da2:	68fb      	ldr	r3, [r7, #12]
}
 8016da4:	4618      	mov	r0, r3
 8016da6:	3714      	adds	r7, #20
 8016da8:	46bd      	mov	sp, r7
 8016daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dae:	4770      	bx	lr

08016db0 <rpmsg_virtio_init_shm_pool>:
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 8016db0:	b480      	push	{r7}
 8016db2:	b085      	sub	sp, #20
 8016db4:	af00      	add	r7, sp, #0
 8016db6:	60f8      	str	r0, [r7, #12]
 8016db8:	60b9      	str	r1, [r7, #8]
 8016dba:	607a      	str	r2, [r7, #4]
	if (!shpool)
 8016dbc:	68fb      	ldr	r3, [r7, #12]
 8016dbe:	2b00      	cmp	r3, #0
 8016dc0:	d01d      	beq.n	8016dfe <rpmsg_virtio_init_shm_pool+0x4e>
		return;
	shpool->base = shb;
 8016dc2:	68fb      	ldr	r3, [r7, #12]
 8016dc4:	68ba      	ldr	r2, [r7, #8]
 8016dc6:	601a      	str	r2, [r3, #0]
	shpool->size = WORD_ALIGN(size);
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	f003 0303 	and.w	r3, r3, #3
 8016dce:	2b00      	cmp	r3, #0
 8016dd0:	d004      	beq.n	8016ddc <rpmsg_virtio_init_shm_pool+0x2c>
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	f023 0303 	bic.w	r3, r3, #3
 8016dd8:	3304      	adds	r3, #4
 8016dda:	e000      	b.n	8016dde <rpmsg_virtio_init_shm_pool+0x2e>
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	68fa      	ldr	r2, [r7, #12]
 8016de0:	6093      	str	r3, [r2, #8]
	shpool->avail = WORD_ALIGN(size);
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	f003 0303 	and.w	r3, r3, #3
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d004      	beq.n	8016df6 <rpmsg_virtio_init_shm_pool+0x46>
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	f023 0303 	bic.w	r3, r3, #3
 8016df2:	3304      	adds	r3, #4
 8016df4:	e000      	b.n	8016df8 <rpmsg_virtio_init_shm_pool+0x48>
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	68fa      	ldr	r2, [r7, #12]
 8016dfa:	6053      	str	r3, [r2, #4]
 8016dfc:	e000      	b.n	8016e00 <rpmsg_virtio_init_shm_pool+0x50>
		return;
 8016dfe:	bf00      	nop
}
 8016e00:	3714      	adds	r7, #20
 8016e02:	46bd      	mov	sp, r7
 8016e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e08:	4770      	bx	lr

08016e0a <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8016e0a:	b580      	push	{r7, lr}
 8016e0c:	b08a      	sub	sp, #40	; 0x28
 8016e0e:	af02      	add	r7, sp, #8
 8016e10:	60f8      	str	r0, [r7, #12]
 8016e12:	60b9      	str	r1, [r7, #8]
 8016e14:	607a      	str	r2, [r7, #4]
 8016e16:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8016e18:	68f8      	ldr	r0, [r7, #12]
 8016e1a:	f7ff ff3f 	bl	8016c9c <rpmsg_virtio_get_role>
 8016e1e:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8016e20:	69fb      	ldr	r3, [r7, #28]
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	d10d      	bne.n	8016e42 <rpmsg_virtio_return_buffer+0x38>
		struct virtqueue_buf vqbuf;

		(void)idx;
		/* Initialize buffer node */
		vqbuf.buf = buffer;
 8016e26:	68bb      	ldr	r3, [r7, #8]
 8016e28:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	61bb      	str	r3, [r7, #24]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
 8016e2e:	68fb      	ldr	r3, [r7, #12]
 8016e30:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8016e32:	f107 0114 	add.w	r1, r7, #20
 8016e36:	68bb      	ldr	r3, [r7, #8]
 8016e38:	9300      	str	r3, [sp, #0]
 8016e3a:	2301      	movs	r3, #1
 8016e3c:	2200      	movs	r2, #0
 8016e3e:	f000 fcc0 	bl	80177c2 <virtqueue_add_buffer>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 8016e42:	bf00      	nop
 8016e44:	3720      	adds	r7, #32
 8016e46:	46bd      	mov	sp, r7
 8016e48:	bd80      	pop	{r7, pc}

08016e4a <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8016e4a:	b580      	push	{r7, lr}
 8016e4c:	b08a      	sub	sp, #40	; 0x28
 8016e4e:	af02      	add	r7, sp, #8
 8016e50:	60f8      	str	r0, [r7, #12]
 8016e52:	60b9      	str	r1, [r7, #8]
 8016e54:	607a      	str	r2, [r7, #4]
 8016e56:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8016e58:	68f8      	ldr	r0, [r7, #12]
 8016e5a:	f7ff ff1f 	bl	8016c9c <rpmsg_virtio_get_role>
 8016e5e:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8016e60:	69fb      	ldr	r3, [r7, #28]
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d10f      	bne.n	8016e86 <rpmsg_virtio_enqueue_buffer+0x3c>
		struct virtqueue_buf vqbuf;
		(void)idx;

		/* Initialize buffer node */
		vqbuf.buf = buffer;
 8016e66:	68bb      	ldr	r3, [r7, #8]
 8016e68:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	61bb      	str	r3, [r7, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
 8016e6e:	68fb      	ldr	r3, [r7, #12]
 8016e70:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8016e72:	f107 0114 	add.w	r1, r7, #20
 8016e76:	68bb      	ldr	r3, [r7, #8]
 8016e78:	9300      	str	r3, [sp, #0]
 8016e7a:	2301      	movs	r3, #1
 8016e7c:	2200      	movs	r2, #0
 8016e7e:	f000 fca0 	bl	80177c2 <virtqueue_add_buffer>
 8016e82:	4603      	mov	r3, r0
 8016e84:	e000      	b.n	8016e88 <rpmsg_virtio_enqueue_buffer+0x3e>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 8016e86:	2300      	movs	r3, #0
}
 8016e88:	4618      	mov	r0, r3
 8016e8a:	3720      	adds	r7, #32
 8016e8c:	46bd      	mov	sp, r7
 8016e8e:	bd80      	pop	{r7, pc}

08016e90 <rpmsg_virtio_get_tx_buffer>:
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8016e90:	b580      	push	{r7, lr}
 8016e92:	b086      	sub	sp, #24
 8016e94:	af00      	add	r7, sp, #0
 8016e96:	60f8      	str	r0, [r7, #12]
 8016e98:	60b9      	str	r1, [r7, #8]
 8016e9a:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8016e9c:	68f8      	ldr	r0, [r7, #12]
 8016e9e:	f7ff fefd 	bl	8016c9c <rpmsg_virtio_get_role>
 8016ea2:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 8016ea4:	2300      	movs	r3, #0
 8016ea6:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8016ea8:	693b      	ldr	r3, [r7, #16]
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d116      	bne.n	8016edc <rpmsg_virtio_get_tx_buffer+0x4c>
		data = virtqueue_get_buffer(rvdev->svq, (uint32_t *)len, idx);
 8016eae:	68fb      	ldr	r3, [r7, #12]
 8016eb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016eb2:	687a      	ldr	r2, [r7, #4]
 8016eb4:	68b9      	ldr	r1, [r7, #8]
 8016eb6:	4618      	mov	r0, r3
 8016eb8:	f000 fcc7 	bl	801784a <virtqueue_get_buffer>
 8016ebc:	6178      	str	r0, [r7, #20]
		if (data == NULL) {
 8016ebe:	697b      	ldr	r3, [r7, #20]
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	d10b      	bne.n	8016edc <rpmsg_virtio_get_tx_buffer+0x4c>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
 8016ec4:	68fb      	ldr	r3, [r7, #12]
 8016ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016ec8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8016ecc:	4618      	mov	r0, r3
 8016ece:	f7ff ff4d 	bl	8016d6c <rpmsg_virtio_shm_pool_get_buffer>
 8016ed2:	6178      	str	r0, [r7, #20]
							RPMSG_BUFFER_SIZE);
			*len = RPMSG_BUFFER_SIZE;
 8016ed4:	68bb      	ldr	r3, [r7, #8]
 8016ed6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016eda:	601a      	str	r2, [r3, #0]
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
						      (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 8016edc:	697b      	ldr	r3, [r7, #20]
}
 8016ede:	4618      	mov	r0, r3
 8016ee0:	3718      	adds	r7, #24
 8016ee2:	46bd      	mov	sp, r7
 8016ee4:	bd80      	pop	{r7, pc}

08016ee6 <rpmsg_virtio_get_rx_buffer>:
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8016ee6:	b580      	push	{r7, lr}
 8016ee8:	b086      	sub	sp, #24
 8016eea:	af00      	add	r7, sp, #0
 8016eec:	60f8      	str	r0, [r7, #12]
 8016eee:	60b9      	str	r1, [r7, #8]
 8016ef0:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8016ef2:	68f8      	ldr	r0, [r7, #12]
 8016ef4:	f7ff fed2 	bl	8016c9c <rpmsg_virtio_get_role>
 8016ef8:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 8016efa:	2300      	movs	r3, #0
 8016efc:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8016efe:	693b      	ldr	r3, [r7, #16]
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d107      	bne.n	8016f14 <rpmsg_virtio_get_rx_buffer+0x2e>
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
 8016f04:	68fb      	ldr	r3, [r7, #12]
 8016f06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016f08:	687a      	ldr	r2, [r7, #4]
 8016f0a:	68b9      	ldr	r1, [r7, #8]
 8016f0c:	4618      	mov	r0, r3
 8016f0e:	f000 fc9c 	bl	801784a <virtqueue_get_buffer>
 8016f12:	6178      	str	r0, [r7, #20]
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
						   (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	if (data) {
 8016f14:	697b      	ldr	r3, [r7, #20]
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d005      	beq.n	8016f26 <rpmsg_virtio_get_rx_buffer+0x40>
		/* FIX ME: library should not worry about if it needs
		 * to flush/invalidate cache, it is shared memory.
		 * The shared memory should be mapped properly before
		 * using it.
		 */
		metal_cache_invalidate(data, (unsigned int)(*len));
 8016f1a:	68bb      	ldr	r3, [r7, #8]
 8016f1c:	681b      	ldr	r3, [r3, #0]
 8016f1e:	4619      	mov	r1, r3
 8016f20:	6978      	ldr	r0, [r7, #20]
 8016f22:	f7ff fdec 	bl	8016afe <metal_cache_invalidate>
	}

	return data;
 8016f26:	697b      	ldr	r3, [r7, #20]
}
 8016f28:	4618      	mov	r0, r3
 8016f2a:	3718      	adds	r7, #24
 8016f2c:	46bd      	mov	sp, r7
 8016f2e:	bd80      	pop	{r7, pc}

08016f30 <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 8016f30:	b580      	push	{r7, lr}
 8016f32:	b084      	sub	sp, #16
 8016f34:	af00      	add	r7, sp, #0
 8016f36:	6078      	str	r0, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8016f38:	6878      	ldr	r0, [r7, #4]
 8016f3a:	f7ff feaf 	bl	8016c9c <rpmsg_virtio_get_role>
 8016f3e:	60b8      	str	r0, [r7, #8]
	int length = 0;
 8016f40:	2300      	movs	r3, #0
 8016f42:	60fb      	str	r3, [r7, #12]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8016f44:	68bb      	ldr	r3, [r7, #8]
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	d102      	bne.n	8016f50 <_rpmsg_virtio_get_buffer_size+0x20>
		/*
		 * If device role is Remote then buffers are provided by us
		 * (RPMSG Master), so just provide the macro.
		 */
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
 8016f4a:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8016f4e:	60fb      	str	r3, [r7, #12]
		    (int)virtqueue_get_desc_size(rvdev->svq) -
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 8016f50:	68fb      	ldr	r3, [r7, #12]
}
 8016f52:	4618      	mov	r0, r3
 8016f54:	3710      	adds	r7, #16
 8016f56:	46bd      	mov	sp, r7
 8016f58:	bd80      	pop	{r7, pc}
	...

08016f5c <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 8016f5c:	b580      	push	{r7, lr}
 8016f5e:	b090      	sub	sp, #64	; 0x40
 8016f60:	af00      	add	r7, sp, #0
 8016f62:	60f8      	str	r0, [r7, #12]
 8016f64:	60b9      	str	r1, [r7, #8]
 8016f66:	607a      	str	r2, [r7, #4]
 8016f68:	603b      	str	r3, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 8016f6a:	2300      	movs	r3, #0
 8016f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
	unsigned short idx;
	int tick_count = 0;
 8016f6e:	2300      	movs	r3, #0
 8016f70:	63bb      	str	r3, [r7, #56]	; 0x38
	unsigned long buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 8016f72:	68fb      	ldr	r3, [r7, #12]
 8016f74:	637b      	str	r3, [r7, #52]	; 0x34

	status = rpmsg_virtio_get_status(rvdev);
 8016f76:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016f78:	f7ff feb0 	bl	8016cdc <rpmsg_virtio_get_status>
 8016f7c:	4603      	mov	r3, r0
 8016f7e:	633b      	str	r3, [r7, #48]	; 0x30
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 8016f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f82:	f003 0304 	and.w	r3, r3, #4
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d101      	bne.n	8016f8e <rpmsg_virtio_send_offchannel_raw+0x32>
		return RPMSG_ERR_DEV_STATE;
 8016f8a:	4b45      	ldr	r3, [pc, #276]	; (80170a0 <rpmsg_virtio_send_offchannel_raw+0x144>)
 8016f8c:	e083      	b.n	8017096 <rpmsg_virtio_send_offchannel_raw+0x13a>
	}

	if (wait)
 8016f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d003      	beq.n	8016f9c <rpmsg_virtio_send_offchannel_raw+0x40>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 8016f94:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8016f98:	63bb      	str	r3, [r7, #56]	; 0x38
 8016f9a:	e001      	b.n	8016fa0 <rpmsg_virtio_send_offchannel_raw+0x44>
	else
		tick_count = 0;
 8016f9c:	2300      	movs	r3, #0
 8016f9e:	63bb      	str	r3, [r7, #56]	; 0x38

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 8016fa0:	68fb      	ldr	r3, [r7, #12]
 8016fa2:	3358      	adds	r3, #88	; 0x58
 8016fa4:	4618      	mov	r0, r3
 8016fa6:	f7ff fe46 	bl	8016c36 <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 8016faa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016fac:	f7ff ffc0 	bl	8016f30 <_rpmsg_virtio_get_buffer_size>
 8016fb0:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (size <= avail_size)
 8016fb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fb6:	429a      	cmp	r2, r3
 8016fb8:	dc08      	bgt.n	8016fcc <rpmsg_virtio_send_offchannel_raw+0x70>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 8016fba:	f107 0216 	add.w	r2, r7, #22
 8016fbe:	f107 0310 	add.w	r3, r7, #16
 8016fc2:	4619      	mov	r1, r3
 8016fc4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016fc6:	f7ff ff63 	bl	8016e90 <rpmsg_virtio_get_tx_buffer>
 8016fca:	63f8      	str	r0, [r7, #60]	; 0x3c
							    &idx);
		metal_mutex_release(&rdev->lock);
 8016fcc:	68fb      	ldr	r3, [r7, #12]
 8016fce:	3358      	adds	r3, #88	; 0x58
 8016fd0:	4618      	mov	r0, r3
 8016fd2:	f7ff fe3b 	bl	8016c4c <metal_mutex_release>
		if (buffer || !tick_count)
 8016fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d10e      	bne.n	8016ffa <rpmsg_virtio_send_offchannel_raw+0x9e>
 8016fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d00b      	beq.n	8016ffa <rpmsg_virtio_send_offchannel_raw+0x9e>
			break;
		if (avail_size != 0)
 8016fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	d001      	beq.n	8016fec <rpmsg_virtio_send_offchannel_raw+0x90>
			return RPMSG_ERR_BUFF_SIZE;
 8016fe8:	4b2e      	ldr	r3, [pc, #184]	; (80170a4 <rpmsg_virtio_send_offchannel_raw+0x148>)
 8016fea:	e054      	b.n	8017096 <rpmsg_virtio_send_offchannel_raw+0x13a>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 8016fec:	200a      	movs	r0, #10
 8016fee:	f7ff fd9e 	bl	8016b2e <metal_sleep_usec>
		tick_count--;
 8016ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ff4:	3b01      	subs	r3, #1
 8016ff6:	63bb      	str	r3, [r7, #56]	; 0x38
	while (1) {
 8016ff8:	e7d2      	b.n	8016fa0 <rpmsg_virtio_send_offchannel_raw+0x44>
	}
	if (!buffer)
 8016ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ffc:	2b00      	cmp	r3, #0
 8016ffe:	d101      	bne.n	8017004 <rpmsg_virtio_send_offchannel_raw+0xa8>
		return RPMSG_ERR_NO_BUFF;
 8017000:	4b29      	ldr	r3, [pc, #164]	; (80170a8 <rpmsg_virtio_send_offchannel_raw+0x14c>)
 8017002:	e048      	b.n	8017096 <rpmsg_virtio_send_offchannel_raw+0x13a>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	61fb      	str	r3, [r7, #28]
	rp_hdr.src = src;
 8017008:	68bb      	ldr	r3, [r7, #8]
 801700a:	61bb      	str	r3, [r7, #24]
	rp_hdr.len = size;
 801700c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801700e:	b29b      	uxth	r3, r3
 8017010:	84bb      	strh	r3, [r7, #36]	; 0x24
	rp_hdr.reserved = 0;
 8017012:	2300      	movs	r3, #0
 8017014:	623b      	str	r3, [r7, #32]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 8017016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801701a:	62bb      	str	r3, [r7, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 801701c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801701e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017020:	f7ff fda2 	bl	8016b68 <metal_io_virt_to_offset>
 8017024:	4601      	mov	r1, r0
 8017026:	f107 0218 	add.w	r2, r7, #24
 801702a:	2310      	movs	r3, #16
 801702c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801702e:	f7fe fdd8 	bl	8015be2 <metal_io_block_write>
 8017032:	6338      	str	r0, [r7, #48]	; 0x30
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
 8017034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017036:	2b10      	cmp	r3, #16
 8017038:	d000      	beq.n	801703c <rpmsg_virtio_send_offchannel_raw+0xe0>
 801703a:	e7fe      	b.n	801703a <rpmsg_virtio_send_offchannel_raw+0xde>

	status = metal_io_block_write(io,
 801703c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801703e:	3310      	adds	r3, #16
 8017040:	4619      	mov	r1, r3
 8017042:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017044:	f7ff fd90 	bl	8016b68 <metal_io_virt_to_offset>
 8017048:	4601      	mov	r1, r0
 801704a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801704c:	683a      	ldr	r2, [r7, #0]
 801704e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017050:	f7fe fdc7 	bl	8015be2 <metal_io_block_write>
 8017054:	6338      	str	r0, [r7, #48]	; 0x30
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
 8017056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017058:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801705a:	429a      	cmp	r2, r3
 801705c:	d000      	beq.n	8017060 <rpmsg_virtio_send_offchannel_raw+0x104>
 801705e:	e7fe      	b.n	801705e <rpmsg_virtio_send_offchannel_raw+0x102>
	metal_mutex_acquire(&rdev->lock);
 8017060:	68fb      	ldr	r3, [r7, #12]
 8017062:	3358      	adds	r3, #88	; 0x58
 8017064:	4618      	mov	r0, r3
 8017066:	f7ff fde6 	bl	8016c36 <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 801706a:	693a      	ldr	r2, [r7, #16]
 801706c:	8afb      	ldrh	r3, [r7, #22]
 801706e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017070:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017072:	f7ff feea 	bl	8016e4a <rpmsg_virtio_enqueue_buffer>
 8017076:	6338      	str	r0, [r7, #48]	; 0x30
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
 8017078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801707a:	2b00      	cmp	r3, #0
 801707c:	d000      	beq.n	8017080 <rpmsg_virtio_send_offchannel_raw+0x124>
 801707e:	e7fe      	b.n	801707e <rpmsg_virtio_send_offchannel_raw+0x122>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 8017080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017082:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017084:	4618      	mov	r0, r3
 8017086:	f000 fc5a 	bl	801793e <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 801708a:	68fb      	ldr	r3, [r7, #12]
 801708c:	3358      	adds	r3, #88	; 0x58
 801708e:	4618      	mov	r0, r3
 8017090:	f7ff fddc 	bl	8016c4c <metal_mutex_release>

	return size;
 8017094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8017096:	4618      	mov	r0, r3
 8017098:	3740      	adds	r7, #64	; 0x40
 801709a:	46bd      	mov	sp, r7
 801709c:	bd80      	pop	{r7, pc}
 801709e:	bf00      	nop
 80170a0:	fffff82c 	.word	0xfffff82c
 80170a4:	fffff82b 	.word	0xfffff82b
 80170a8:	fffff82e 	.word	0xfffff82e

080170ac <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 80170ac:	b480      	push	{r7}
 80170ae:	b083      	sub	sp, #12
 80170b0:	af00      	add	r7, sp, #0
 80170b2:	6078      	str	r0, [r7, #4]
	(void)vq;
}
 80170b4:	bf00      	nop
 80170b6:	370c      	adds	r7, #12
 80170b8:	46bd      	mov	sp, r7
 80170ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170be:	4770      	bx	lr

080170c0 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 80170c0:	b590      	push	{r4, r7, lr}
 80170c2:	b08d      	sub	sp, #52	; 0x34
 80170c4:	af02      	add	r7, sp, #8
 80170c6:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	681b      	ldr	r3, [r3, #0]
 80170cc:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 80170ce:	6a3b      	ldr	r3, [r7, #32]
 80170d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80170d2:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
 80170d4:	69fb      	ldr	r3, [r7, #28]
 80170d6:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	unsigned long len;
	unsigned short idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 80170d8:	69bb      	ldr	r3, [r7, #24]
 80170da:	3358      	adds	r3, #88	; 0x58
 80170dc:	4618      	mov	r0, r3
 80170de:	f7ff fdaa 	bl	8016c36 <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = (struct rpmsg_hdr *)rpmsg_virtio_get_rx_buffer(rvdev,
 80170e2:	f107 020a 	add.w	r2, r7, #10
 80170e6:	f107 030c 	add.w	r3, r7, #12
 80170ea:	4619      	mov	r1, r3
 80170ec:	69f8      	ldr	r0, [r7, #28]
 80170ee:	f7ff fefa 	bl	8016ee6 <rpmsg_virtio_get_rx_buffer>
 80170f2:	6278      	str	r0, [r7, #36]	; 0x24
								&len, &idx);

	metal_mutex_release(&rdev->lock);
 80170f4:	69bb      	ldr	r3, [r7, #24]
 80170f6:	3358      	adds	r3, #88	; 0x58
 80170f8:	4618      	mov	r0, r3
 80170fa:	f7ff fda7 	bl	8016c4c <metal_mutex_release>

	while (rp_hdr) {
 80170fe:	e04c      	b.n	801719a <rpmsg_virtio_rx_callback+0xda>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 8017100:	69bb      	ldr	r3, [r7, #24]
 8017102:	3358      	adds	r3, #88	; 0x58
 8017104:	4618      	mov	r0, r3
 8017106:	f7ff fd96 	bl	8016c36 <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 801710a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801710c:	685b      	ldr	r3, [r3, #4]
 801710e:	4619      	mov	r1, r3
 8017110:	69b8      	ldr	r0, [r7, #24]
 8017112:	f7ff fe1a 	bl	8016d4a <rpmsg_get_ept_from_addr>
 8017116:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
 8017118:	69bb      	ldr	r3, [r7, #24]
 801711a:	3358      	adds	r3, #88	; 0x58
 801711c:	4618      	mov	r0, r3
 801711e:	f7ff fd95 	bl	8016c4c <metal_mutex_release>

		if (!ept)
 8017122:	697b      	ldr	r3, [r7, #20]
 8017124:	2b00      	cmp	r3, #0
 8017126:	d03c      	beq.n	80171a2 <rpmsg_virtio_rx_callback+0xe2>
			/* Fatal error no endpoint for the given dst addr. */
			return;

		if (ept->dest_addr == RPMSG_ADDR_ANY) {
 8017128:	697b      	ldr	r3, [r7, #20]
 801712a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801712c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017130:	d103      	bne.n	801713a <rpmsg_virtio_rx_callback+0x7a>
			/*
			 * First message received from the remote side,
			 * update channel destination address
			 */
			ept->dest_addr = rp_hdr->src;
 8017132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017134:	681a      	ldr	r2, [r3, #0]
 8017136:	697b      	ldr	r3, [r7, #20]
 8017138:	629a      	str	r2, [r3, #40]	; 0x28
		}
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 801713a:	697b      	ldr	r3, [r7, #20]
 801713c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801713e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017140:	f103 0110 	add.w	r1, r3, #16
				   rp_hdr->len, ept->addr, ept->priv);
 8017144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017146:	899b      	ldrh	r3, [r3, #12]
 8017148:	b29b      	uxth	r3, r3
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 801714a:	4618      	mov	r0, r3
 801714c:	697b      	ldr	r3, [r7, #20]
 801714e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017150:	697b      	ldr	r3, [r7, #20]
 8017152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017154:	9300      	str	r3, [sp, #0]
 8017156:	4613      	mov	r3, r2
 8017158:	4602      	mov	r2, r0
 801715a:	6978      	ldr	r0, [r7, #20]
 801715c:	47a0      	blx	r4
 801715e:	6138      	str	r0, [r7, #16]

		RPMSG_ASSERT(status == RPMSG_SUCCESS,
 8017160:	693b      	ldr	r3, [r7, #16]
 8017162:	2b00      	cmp	r3, #0
 8017164:	d000      	beq.n	8017168 <rpmsg_virtio_rx_callback+0xa8>
 8017166:	e7fe      	b.n	8017166 <rpmsg_virtio_rx_callback+0xa6>
			     "unexpected callback status\n");
		metal_mutex_acquire(&rdev->lock);
 8017168:	69bb      	ldr	r3, [r7, #24]
 801716a:	3358      	adds	r3, #88	; 0x58
 801716c:	4618      	mov	r0, r3
 801716e:	f7ff fd62 	bl	8016c36 <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 8017172:	68fa      	ldr	r2, [r7, #12]
 8017174:	897b      	ldrh	r3, [r7, #10]
 8017176:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017178:	69f8      	ldr	r0, [r7, #28]
 801717a:	f7ff fe46 	bl	8016e0a <rpmsg_virtio_return_buffer>

		rp_hdr = (struct rpmsg_hdr *)
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 801717e:	f107 020a 	add.w	r2, r7, #10
 8017182:	f107 030c 	add.w	r3, r7, #12
 8017186:	4619      	mov	r1, r3
 8017188:	69f8      	ldr	r0, [r7, #28]
 801718a:	f7ff feac 	bl	8016ee6 <rpmsg_virtio_get_rx_buffer>
 801718e:	6278      	str	r0, [r7, #36]	; 0x24
		metal_mutex_release(&rdev->lock);
 8017190:	69bb      	ldr	r3, [r7, #24]
 8017192:	3358      	adds	r3, #88	; 0x58
 8017194:	4618      	mov	r0, r3
 8017196:	f7ff fd59 	bl	8016c4c <metal_mutex_release>
	while (rp_hdr) {
 801719a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801719c:	2b00      	cmp	r3, #0
 801719e:	d1af      	bne.n	8017100 <rpmsg_virtio_rx_callback+0x40>
 80171a0:	e000      	b.n	80171a4 <rpmsg_virtio_rx_callback+0xe4>
			return;
 80171a2:	bf00      	nop
	}
}
 80171a4:	372c      	adds	r7, #44	; 0x2c
 80171a6:	46bd      	mov	sp, r7
 80171a8:	bd90      	pop	{r4, r7, pc}

080171aa <rpmsg_virtio_ns_callback>:
#pragma push
#pragma O0
#endif
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 80171aa:	b580      	push	{r7, lr}
 80171ac:	b092      	sub	sp, #72	; 0x48
 80171ae:	af00      	add	r7, sp, #0
 80171b0:	60f8      	str	r0, [r7, #12]
 80171b2:	60b9      	str	r1, [r7, #8]
 80171b4:	607a      	str	r2, [r7, #4]
 80171b6:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
 80171b8:	68fb      	ldr	r3, [r7, #12]
 80171ba:	6a1b      	ldr	r3, [r3, #32]
 80171bc:	647b      	str	r3, [r7, #68]	; 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 80171be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80171c0:	643b      	str	r3, [r7, #64]	; 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
 80171c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80171c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80171c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = (struct rpmsg_ns_msg *)data;
 80171c8:	68bb      	ldr	r3, [r7, #8]
 80171ca:	63bb      	str	r3, [r7, #56]	; 0x38
	if (len != sizeof(*ns_msg))
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	2b28      	cmp	r3, #40	; 0x28
 80171d0:	d001      	beq.n	80171d6 <rpmsg_virtio_ns_callback+0x2c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 80171d2:	2300      	movs	r3, #0
 80171d4:	e057      	b.n	8017286 <rpmsg_virtio_ns_callback+0xdc>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 80171d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	metal_io_block_read(io,
 80171d8:	4619      	mov	r1, r3
 80171da:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80171dc:	f7ff fcc4 	bl	8016b68 <metal_io_virt_to_offset>
 80171e0:	4601      	mov	r1, r0
 80171e2:	f107 0210 	add.w	r2, r7, #16
 80171e6:	2320      	movs	r3, #32
 80171e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80171ea:	f7fe fc83 	bl	8015af4 <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
 80171ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171f0:	6a1b      	ldr	r3, [r3, #32]
 80171f2:	637b      	str	r3, [r7, #52]	; 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 80171f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80171f6:	3358      	adds	r3, #88	; 0x58
 80171f8:	4618      	mov	r0, r3
 80171fa:	f7ff fd1c 	bl	8016c36 <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 80171fe:	f107 0110 	add.w	r1, r7, #16
 8017202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017204:	f04f 32ff 	mov.w	r2, #4294967295
 8017208:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801720a:	f7ff fb57 	bl	80168bc <rpmsg_get_endpoint>
 801720e:	6338      	str	r0, [r7, #48]	; 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 8017210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017214:	f003 0301 	and.w	r3, r3, #1
 8017218:	2b00      	cmp	r3, #0
 801721a:	d017      	beq.n	801724c <rpmsg_virtio_ns_callback+0xa2>
		if (_ept)
 801721c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801721e:	2b00      	cmp	r3, #0
 8017220:	d003      	beq.n	801722a <rpmsg_virtio_ns_callback+0x80>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 8017222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017224:	f04f 32ff 	mov.w	r2, #4294967295
 8017228:	629a      	str	r2, [r3, #40]	; 0x28
		metal_mutex_release(&rdev->lock);
 801722a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801722c:	3358      	adds	r3, #88	; 0x58
 801722e:	4618      	mov	r0, r3
 8017230:	f7ff fd0c 	bl	8016c4c <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 8017234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017236:	2b00      	cmp	r3, #0
 8017238:	d024      	beq.n	8017284 <rpmsg_virtio_ns_callback+0xda>
 801723a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801723c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801723e:	2b00      	cmp	r3, #0
 8017240:	d020      	beq.n	8017284 <rpmsg_virtio_ns_callback+0xda>
			_ept->ns_unbind_cb(ept);
 8017242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017246:	68f8      	ldr	r0, [r7, #12]
 8017248:	4798      	blx	r3
 801724a:	e01b      	b.n	8017284 <rpmsg_virtio_ns_callback+0xda>
	} else {
		if (!_ept) {
 801724c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801724e:	2b00      	cmp	r3, #0
 8017250:	d110      	bne.n	8017274 <rpmsg_virtio_ns_callback+0xca>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 8017252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017254:	3358      	adds	r3, #88	; 0x58
 8017256:	4618      	mov	r0, r3
 8017258:	f7ff fcf8 	bl	8016c4c <metal_mutex_release>
			if (rdev->ns_bind_cb)
 801725c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801725e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017260:	2b00      	cmp	r3, #0
 8017262:	d00f      	beq.n	8017284 <rpmsg_virtio_ns_callback+0xda>
				rdev->ns_bind_cb(rdev, name, dest);
 8017264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017268:	f107 0110 	add.w	r1, r7, #16
 801726c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801726e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8017270:	4798      	blx	r3
 8017272:	e007      	b.n	8017284 <rpmsg_virtio_ns_callback+0xda>
		} else {
			_ept->dest_addr = dest;
 8017274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017276:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017278:	629a      	str	r2, [r3, #40]	; 0x28
			metal_mutex_release(&rdev->lock);
 801727a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801727c:	3358      	adds	r3, #88	; 0x58
 801727e:	4618      	mov	r0, r3
 8017280:	f7ff fce4 	bl	8016c4c <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 8017284:	2300      	movs	r3, #0
}
 8017286:	4618      	mov	r0, r3
 8017288:	3748      	adds	r7, #72	; 0x48
 801728a:	46bd      	mov	sp, r7
 801728c:	bd80      	pop	{r7, pc}
	...

08017290 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 8017290:	b580      	push	{r7, lr}
 8017292:	b094      	sub	sp, #80	; 0x50
 8017294:	af02      	add	r7, sp, #8
 8017296:	60f8      	str	r0, [r7, #12]
 8017298:	60b9      	str	r1, [r7, #8]
 801729a:	607a      	str	r2, [r7, #4]
 801729c:	603b      	str	r3, [r7, #0]
	vqcallback callback[RPMSG_NUM_VRINGS];
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 801729e:	68fb      	ldr	r3, [r7, #12]
 80172a0:	63bb      	str	r3, [r7, #56]	; 0x38
	memset(rdev, 0, sizeof(*rdev));
 80172a2:	2264      	movs	r2, #100	; 0x64
 80172a4:	2100      	movs	r1, #0
 80172a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80172a8:	f005 fa22 	bl	801c6f0 <memset>
	metal_mutex_init(&rdev->lock);
 80172ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172ae:	3358      	adds	r3, #88	; 0x58
 80172b0:	4618      	mov	r0, r3
 80172b2:	f7ff fcb5 	bl	8016c20 <metal_mutex_init>
	rvdev->vdev = vdev;
 80172b6:	68fb      	ldr	r3, [r7, #12]
 80172b8:	68ba      	ldr	r2, [r7, #8]
 80172ba:	665a      	str	r2, [r3, #100]	; 0x64
	rdev->ns_bind_cb = ns_bind_cb;
 80172bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172be:	687a      	ldr	r2, [r7, #4]
 80172c0:	65da      	str	r2, [r3, #92]	; 0x5c
	vdev->priv = rvdev;
 80172c2:	68bb      	ldr	r3, [r7, #8]
 80172c4:	68fa      	ldr	r2, [r7, #12]
 80172c6:	625a      	str	r2, [r3, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 80172c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172ca:	4a5d      	ldr	r2, [pc, #372]	; (8017440 <rpmsg_init_vdev+0x1b0>)
 80172cc:	661a      	str	r2, [r3, #96]	; 0x60
	role = rpmsg_virtio_get_role(rvdev);
 80172ce:	68f8      	ldr	r0, [r7, #12]
 80172d0:	f7ff fce4 	bl	8016c9c <rpmsg_virtio_get_role>
 80172d4:	6378      	str	r0, [r7, #52]	; 0x34

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 80172d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80172d8:	2b00      	cmp	r3, #0
 80172da:	d120      	bne.n	801731e <rpmsg_init_vdev+0x8e>
		/*
		 * Since device is RPMSG Remote so we need to manage the
		 * shared buffers. Create shared memory pool to handle buffers.
		 */
		if (!shpool)
 80172dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80172de:	2b00      	cmp	r3, #0
 80172e0:	d101      	bne.n	80172e6 <rpmsg_init_vdev+0x56>
			return RPMSG_ERR_PARAM;
 80172e2:	4b58      	ldr	r3, [pc, #352]	; (8017444 <rpmsg_init_vdev+0x1b4>)
 80172e4:	e0a7      	b.n	8017436 <rpmsg_init_vdev+0x1a6>
		if (!shpool->size)
 80172e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80172e8:	689b      	ldr	r3, [r3, #8]
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d101      	bne.n	80172f2 <rpmsg_init_vdev+0x62>
			return RPMSG_ERR_NO_BUFF;
 80172ee:	4b56      	ldr	r3, [pc, #344]	; (8017448 <rpmsg_init_vdev+0x1b8>)
 80172f0:	e0a1      	b.n	8017436 <rpmsg_init_vdev+0x1a6>
		rvdev->shpool = shpool;
 80172f2:	68fb      	ldr	r3, [r7, #12]
 80172f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80172f6:	675a      	str	r2, [r3, #116]	; 0x74

		vq_names[0] = "rx_vq";
 80172f8:	4b54      	ldr	r3, [pc, #336]	; (801744c <rpmsg_init_vdev+0x1bc>)
 80172fa:	623b      	str	r3, [r7, #32]
		vq_names[1] = "tx_vq";
 80172fc:	4b54      	ldr	r3, [pc, #336]	; (8017450 <rpmsg_init_vdev+0x1c0>)
 80172fe:	627b      	str	r3, [r7, #36]	; 0x24
		callback[0] = rpmsg_virtio_rx_callback;
 8017300:	4b54      	ldr	r3, [pc, #336]	; (8017454 <rpmsg_init_vdev+0x1c4>)
 8017302:	61bb      	str	r3, [r7, #24]
		callback[1] = rpmsg_virtio_tx_callback;
 8017304:	4b54      	ldr	r3, [pc, #336]	; (8017458 <rpmsg_init_vdev+0x1c8>)
 8017306:	61fb      	str	r3, [r7, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
 8017308:	68bb      	ldr	r3, [r7, #8]
 801730a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801730c:	681a      	ldr	r2, [r3, #0]
 801730e:	68fb      	ldr	r3, [r7, #12]
 8017310:	669a      	str	r2, [r3, #104]	; 0x68
		rvdev->svq  = vdev->vrings_info[1].vq;
 8017312:	68bb      	ldr	r3, [r7, #8]
 8017314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017316:	3318      	adds	r3, #24
 8017318:	681a      	ldr	r2, [r3, #0]
 801731a:	68fb      	ldr	r3, [r7, #12]
 801731c:	66da      	str	r2, [r3, #108]	; 0x6c
		callback[1] = rpmsg_virtio_rx_callback;
		rvdev->rvq  = vdev->vrings_info[1].vq;
		rvdev->svq  = vdev->vrings_info[0].vq;
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 801731e:	68fb      	ldr	r3, [r7, #12]
 8017320:	683a      	ldr	r2, [r7, #0]
 8017322:	671a      	str	r2, [r3, #112]	; 0x70
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 8017324:	f107 0220 	add.w	r2, r7, #32
 8017328:	f107 0318 	add.w	r3, r7, #24
 801732c:	9300      	str	r3, [sp, #0]
 801732e:	4613      	mov	r3, r2
 8017330:	2202      	movs	r2, #2
 8017332:	2100      	movs	r1, #0
 8017334:	68f8      	ldr	r0, [r7, #12]
 8017336:	f7ff fcf3 	bl	8016d20 <rpmsg_virtio_create_virtqueues>
 801733a:	6478      	str	r0, [r7, #68]	; 0x44
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 801733c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801733e:	2b00      	cmp	r3, #0
 8017340:	d001      	beq.n	8017346 <rpmsg_init_vdev+0xb6>
		return status;
 8017342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017344:	e077      	b.n	8017436 <rpmsg_init_vdev+0x1a6>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 8017346:	2300      	movs	r3, #0
 8017348:	643b      	str	r3, [r7, #64]	; 0x40
 801734a:	e00f      	b.n	801736c <rpmsg_init_vdev+0xdc>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 801734c:	68bb      	ldr	r3, [r7, #8]
 801734e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8017350:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017352:	4613      	mov	r3, r2
 8017354:	005b      	lsls	r3, r3, #1
 8017356:	4413      	add	r3, r2
 8017358:	00db      	lsls	r3, r3, #3
 801735a:	440b      	add	r3, r1
 801735c:	681b      	ldr	r3, [r3, #0]
 801735e:	62bb      	str	r3, [r7, #40]	; 0x28
		vq->shm_io = shm_io;
 8017360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017362:	683a      	ldr	r2, [r7, #0]
 8017364:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 8017366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017368:	3301      	adds	r3, #1
 801736a:	643b      	str	r3, [r7, #64]	; 0x40
 801736c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801736e:	2b01      	cmp	r3, #1
 8017370:	d9ec      	bls.n	801734c <rpmsg_init_vdev+0xbc>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8017372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017374:	2b00      	cmp	r3, #0
 8017376:	d137      	bne.n	80173e8 <rpmsg_init_vdev+0x158>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
 8017378:	f44f 7300 	mov.w	r3, #512	; 0x200
 801737c:	617b      	str	r3, [r7, #20]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 801737e:	2300      	movs	r3, #0
 8017380:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017382:	e02a      	b.n	80173da <rpmsg_init_vdev+0x14a>
			/* Initialize TX virtqueue buffers for remote device */
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
 8017384:	f44f 7100 	mov.w	r1, #512	; 0x200
 8017388:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801738a:	f7ff fcef 	bl	8016d6c <rpmsg_virtio_shm_pool_get_buffer>
 801738e:	6338      	str	r0, [r7, #48]	; 0x30
							RPMSG_BUFFER_SIZE);

			if (!buffer) {
 8017390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017392:	2b00      	cmp	r3, #0
 8017394:	d101      	bne.n	801739a <rpmsg_init_vdev+0x10a>
				return RPMSG_ERR_NO_BUFF;
 8017396:	4b2c      	ldr	r3, [pc, #176]	; (8017448 <rpmsg_init_vdev+0x1b8>)
 8017398:	e04d      	b.n	8017436 <rpmsg_init_vdev+0x1a6>
			}

			vqbuf.buf = buffer;
 801739a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801739c:	613b      	str	r3, [r7, #16]

			metal_io_block_set(shm_io,
 801739e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80173a0:	6838      	ldr	r0, [r7, #0]
 80173a2:	f7ff fbe1 	bl	8016b68 <metal_io_virt_to_offset>
 80173a6:	4601      	mov	r1, r0
 80173a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80173ac:	2200      	movs	r2, #0
 80173ae:	6838      	ldr	r0, [r7, #0]
 80173b0:	f7fe fc8d 	bl	8015cce <metal_io_block_set>
					   metal_io_virt_to_offset(shm_io,
								   buffer),
					   0x00, RPMSG_BUFFER_SIZE);
			status =
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
 80173b4:	68fb      	ldr	r3, [r7, #12]
 80173b6:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80173b8:	f107 0110 	add.w	r1, r7, #16
 80173bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173be:	9300      	str	r3, [sp, #0]
 80173c0:	2301      	movs	r3, #1
 80173c2:	2200      	movs	r2, #0
 80173c4:	f000 f9fd 	bl	80177c2 <virtqueue_add_buffer>
 80173c8:	6478      	str	r0, [r7, #68]	; 0x44
						     buffer);

			if (status != RPMSG_SUCCESS) {
 80173ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d001      	beq.n	80173d4 <rpmsg_init_vdev+0x144>
				return status;
 80173d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80173d2:	e030      	b.n	8017436 <rpmsg_init_vdev+0x1a6>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 80173d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80173d6:	3301      	adds	r3, #1
 80173d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80173da:	68fb      	ldr	r3, [r7, #12]
 80173dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80173de:	895b      	ldrh	r3, [r3, #10]
 80173e0:	461a      	mov	r2, r3
 80173e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80173e4:	4293      	cmp	r3, r2
 80173e6:	d3cd      	bcc.n	8017384 <rpmsg_init_vdev+0xf4>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 80173e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80173ea:	4618      	mov	r0, r3
 80173ec:	f7ff fbab 	bl	8016b46 <metal_list_init>

	dev_features = rpmsg_virtio_get_features(rvdev);
 80173f0:	68f8      	ldr	r0, [r7, #12]
 80173f2:	f7ff fc84 	bl	8016cfe <rpmsg_virtio_get_features>
 80173f6:	62f8      	str	r0, [r7, #44]	; 0x2c

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
 80173f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173fa:	f003 0301 	and.w	r3, r3, #1
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d011      	beq.n	8017426 <rpmsg_init_vdev+0x196>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 8017402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017404:	f103 0008 	add.w	r0, r3, #8
 8017408:	2300      	movs	r3, #0
 801740a:	9301      	str	r3, [sp, #4]
 801740c:	4b13      	ldr	r3, [pc, #76]	; (801745c <rpmsg_init_vdev+0x1cc>)
 801740e:	9300      	str	r3, [sp, #0]
 8017410:	2335      	movs	r3, #53	; 0x35
 8017412:	2235      	movs	r2, #53	; 0x35
 8017414:	4912      	ldr	r1, [pc, #72]	; (8017460 <rpmsg_init_vdev+0x1d0>)
 8017416:	f7ff fc24 	bl	8016c62 <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 801741a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801741c:	3308      	adds	r3, #8
 801741e:	4619      	mov	r1, r3
 8017420:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017422:	f7ff facd 	bl	80169c0 <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
 8017426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017428:	2b00      	cmp	r3, #0
 801742a:	d103      	bne.n	8017434 <rpmsg_init_vdev+0x1a4>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
 801742c:	2104      	movs	r1, #4
 801742e:	68f8      	ldr	r0, [r7, #12]
 8017430:	f7ff fc41 	bl	8016cb6 <rpmsg_virtio_set_status>
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 8017434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8017436:	4618      	mov	r0, r3
 8017438:	3748      	adds	r7, #72	; 0x48
 801743a:	46bd      	mov	sp, r7
 801743c:	bd80      	pop	{r7, pc}
 801743e:	bf00      	nop
 8017440:	08016f5d 	.word	0x08016f5d
 8017444:	fffff82d 	.word	0xfffff82d
 8017448:	fffff82e 	.word	0xfffff82e
 801744c:	080217d0 	.word	0x080217d0
 8017450:	080217d8 	.word	0x080217d8
 8017454:	080170c1 	.word	0x080170c1
 8017458:	080170ad 	.word	0x080170ad
 801745c:	080171ab 	.word	0x080171ab
 8017460:	080217e0 	.word	0x080217e0

08017464 <metal_machine_cache_flush>:
{
  return 0;
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 8017464:	b480      	push	{r7}
 8017466:	b083      	sub	sp, #12
 8017468:	af00      	add	r7, sp, #0
 801746a:	6078      	str	r0, [r7, #4]
 801746c:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 801746e:	bf00      	nop
 8017470:	370c      	adds	r7, #12
 8017472:	46bd      	mov	sp, r7
 8017474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017478:	4770      	bx	lr

0801747a <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 801747a:	b480      	push	{r7}
 801747c:	b083      	sub	sp, #12
 801747e:	af00      	add	r7, sp, #0
 8017480:	6078      	str	r0, [r7, #4]
 8017482:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 8017484:	bf00      	nop
 8017486:	370c      	adds	r7, #12
 8017488:	46bd      	mov	sp, r7
 801748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801748e:	4770      	bx	lr

08017490 <metal_machine_io_mem_map>:
{
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
 8017490:	b480      	push	{r7}
 8017492:	b085      	sub	sp, #20
 8017494:	af00      	add	r7, sp, #0
 8017496:	60f8      	str	r0, [r7, #12]
 8017498:	60b9      	str	r1, [r7, #8]
 801749a:	607a      	str	r2, [r7, #4]
 801749c:	603b      	str	r3, [r7, #0]
	(void)va;
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 801749e:	68fb      	ldr	r3, [r7, #12]
}
 80174a0:	4618      	mov	r0, r3
 80174a2:	3714      	adds	r7, #20
 80174a4:	46bd      	mov	sp, r7
 80174a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174aa:	4770      	bx	lr

080174ac <vring_size>:
 */
#define vring_used_event(vr)	((vr)->avail->ring[(vr)->num])
#define vring_avail_event(vr)	((vr)->used->ring[(vr)->num].id & 0xFFFF)

static inline int vring_size(unsigned int num, unsigned long align)
{
 80174ac:	b480      	push	{r7}
 80174ae:	b085      	sub	sp, #20
 80174b0:	af00      	add	r7, sp, #0
 80174b2:	6078      	str	r0, [r7, #4]
 80174b4:	6039      	str	r1, [r7, #0]
	int size;

	size = num * sizeof(struct vring_desc);
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	011b      	lsls	r3, r3, #4
 80174ba:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	3303      	adds	r3, #3
 80174c0:	005a      	lsls	r2, r3, #1
 80174c2:	68fb      	ldr	r3, [r7, #12]
 80174c4:	4413      	add	r3, r2
 80174c6:	60fb      	str	r3, [r7, #12]
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
 80174c8:	68fa      	ldr	r2, [r7, #12]
 80174ca:	683b      	ldr	r3, [r7, #0]
 80174cc:	4413      	add	r3, r2
 80174ce:	1e5a      	subs	r2, r3, #1
 80174d0:	683b      	ldr	r3, [r7, #0]
 80174d2:	425b      	negs	r3, r3
 80174d4:	4013      	ands	r3, r2
 80174d6:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	00da      	lsls	r2, r3, #3
	size += sizeof(struct vring_used) +
 80174dc:	68fb      	ldr	r3, [r7, #12]
 80174de:	4413      	add	r3, r2
 80174e0:	3306      	adds	r3, #6
 80174e2:	60fb      	str	r3, [r7, #12]

	return size;
 80174e4:	68fb      	ldr	r3, [r7, #12]
}
 80174e6:	4618      	mov	r0, r3
 80174e8:	3714      	adds	r7, #20
 80174ea:	46bd      	mov	sp, r7
 80174ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174f0:	4770      	bx	lr

080174f2 <metal_io_virt_to_offset>:
{
 80174f2:	b480      	push	{r7}
 80174f4:	b085      	sub	sp, #20
 80174f6:	af00      	add	r7, sp, #0
 80174f8:	6078      	str	r0, [r7, #4]
 80174fa:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	681b      	ldr	r3, [r3, #0]
 8017500:	683a      	ldr	r2, [r7, #0]
 8017502:	1ad3      	subs	r3, r2, r3
 8017504:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	689b      	ldr	r3, [r3, #8]
 801750a:	68fa      	ldr	r2, [r7, #12]
 801750c:	429a      	cmp	r2, r3
 801750e:	d201      	bcs.n	8017514 <metal_io_virt_to_offset+0x22>
 8017510:	68fb      	ldr	r3, [r7, #12]
 8017512:	e001      	b.n	8017518 <metal_io_virt_to_offset+0x26>
 8017514:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017518:	4618      	mov	r0, r3
 801751a:	3714      	adds	r7, #20
 801751c:	46bd      	mov	sp, r7
 801751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017522:	4770      	bx	lr

08017524 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 8017524:	b590      	push	{r4, r7, lr}
 8017526:	b091      	sub	sp, #68	; 0x44
 8017528:	af04      	add	r7, sp, #16
 801752a:	60f8      	str	r0, [r7, #12]
 801752c:	60b9      	str	r1, [r7, #8]
 801752e:	607a      	str	r2, [r7, #4]
 8017530:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 8017532:	68fb      	ldr	r3, [r7, #12]
 8017534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017536:	62bb      	str	r3, [r7, #40]	; 0x28
	if (nvqs > num_vrings)
 8017538:	687a      	ldr	r2, [r7, #4]
 801753a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801753c:	429a      	cmp	r2, r3
 801753e:	d902      	bls.n	8017546 <virtio_create_virtqueues+0x22>
		return -ERROR_VQUEUE_INVLD_PARAM;
 8017540:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 8017544:	e053      	b.n	80175ee <virtio_create_virtqueues+0xca>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 8017546:	2300      	movs	r3, #0
 8017548:	62fb      	str	r3, [r7, #44]	; 0x2c
 801754a:	e04b      	b.n	80175e4 <virtio_create_virtqueues+0xc0>
		vring_info = &vdev->vrings_info[i];
 801754c:	68fb      	ldr	r3, [r7, #12]
 801754e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8017550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017552:	4613      	mov	r3, r2
 8017554:	005b      	lsls	r3, r3, #1
 8017556:	4413      	add	r3, r2
 8017558:	00db      	lsls	r3, r3, #3
 801755a:	440b      	add	r3, r1
 801755c:	627b      	str	r3, [r7, #36]	; 0x24

		vring_alloc = &vring_info->info;
 801755e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017560:	3304      	adds	r3, #4
 8017562:	623b      	str	r3, [r7, #32]
#ifndef VIRTIO_SLAVE_ONLY
		if (vdev->role == VIRTIO_DEV_MASTER) {
 8017564:	68fb      	ldr	r3, [r7, #12]
 8017566:	699b      	ldr	r3, [r3, #24]
 8017568:	2b00      	cmp	r3, #0
 801756a:	d118      	bne.n	801759e <virtio_create_virtqueues+0x7a>
			size_t offset;
			struct metal_io_region *io = vring_info->io;
 801756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801756e:	695b      	ldr	r3, [r3, #20]
 8017570:	61fb      	str	r3, [r7, #28]

			offset = metal_io_virt_to_offset(io,
 8017572:	6a3b      	ldr	r3, [r7, #32]
 8017574:	681b      	ldr	r3, [r3, #0]
 8017576:	4619      	mov	r1, r3
 8017578:	69f8      	ldr	r0, [r7, #28]
 801757a:	f7ff ffba 	bl	80174f2 <metal_io_virt_to_offset>
 801757e:	61b8      	str	r0, [r7, #24]
							 vring_alloc->vaddr);
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
 8017580:	6a3b      	ldr	r3, [r7, #32]
 8017582:	891b      	ldrh	r3, [r3, #8]
			metal_io_block_set(io, offset, 0,
 8017584:	461a      	mov	r2, r3
 8017586:	6a3b      	ldr	r3, [r7, #32]
 8017588:	685b      	ldr	r3, [r3, #4]
 801758a:	4619      	mov	r1, r3
 801758c:	4610      	mov	r0, r2
 801758e:	f7ff ff8d 	bl	80174ac <vring_size>
 8017592:	4603      	mov	r3, r0
 8017594:	2200      	movs	r2, #0
 8017596:	69b9      	ldr	r1, [r7, #24]
 8017598:	69f8      	ldr	r0, [r7, #28]
 801759a:	f7fe fb98 	bl	8015cce <metal_io_block_set>
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 801759e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175a0:	b298      	uxth	r0, r3
 80175a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175a4:	009b      	lsls	r3, r3, #2
 80175a6:	683a      	ldr	r2, [r7, #0]
 80175a8:	4413      	add	r3, r2
 80175aa:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
 80175ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175ae:	009b      	lsls	r3, r3, #2
 80175b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80175b2:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 80175b4:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
 80175b6:	68fa      	ldr	r2, [r7, #12]
 80175b8:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 80175ba:	6a12      	ldr	r2, [r2, #32]
 80175bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80175be:	6809      	ldr	r1, [r1, #0]
 80175c0:	9102      	str	r1, [sp, #8]
 80175c2:	9201      	str	r2, [sp, #4]
 80175c4:	9300      	str	r3, [sp, #0]
 80175c6:	6a3b      	ldr	r3, [r7, #32]
 80175c8:	4622      	mov	r2, r4
 80175ca:	4601      	mov	r1, r0
 80175cc:	68f8      	ldr	r0, [r7, #12]
 80175ce:	f000 f8c4 	bl	801775a <virtqueue_create>
 80175d2:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
 80175d4:	697b      	ldr	r3, [r7, #20]
 80175d6:	2b00      	cmp	r3, #0
 80175d8:	d001      	beq.n	80175de <virtio_create_virtqueues+0xba>
			return ret;
 80175da:	697b      	ldr	r3, [r7, #20]
 80175dc:	e007      	b.n	80175ee <virtio_create_virtqueues+0xca>
	for (i = 0; i < nvqs; i++) {
 80175de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175e0:	3301      	adds	r3, #1
 80175e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80175e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	429a      	cmp	r2, r3
 80175ea:	d3af      	bcc.n	801754c <virtio_create_virtqueues+0x28>
	}
	return 0;
 80175ec:	2300      	movs	r3, #0
}
 80175ee:	4618      	mov	r0, r3
 80175f0:	3734      	adds	r7, #52	; 0x34
 80175f2:	46bd      	mov	sp, r7
 80175f4:	bd90      	pop	{r4, r7, pc}

080175f6 <vring_init>:

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 80175f6:	b480      	push	{r7}
 80175f8:	b085      	sub	sp, #20
 80175fa:	af00      	add	r7, sp, #0
 80175fc:	60f8      	str	r0, [r7, #12]
 80175fe:	60b9      	str	r1, [r7, #8]
 8017600:	607a      	str	r2, [r7, #4]
 8017602:	603b      	str	r3, [r7, #0]
	vr->num = num;
 8017604:	68fb      	ldr	r3, [r7, #12]
 8017606:	68ba      	ldr	r2, [r7, #8]
 8017608:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
 801760a:	68fb      	ldr	r3, [r7, #12]
 801760c:	687a      	ldr	r2, [r7, #4]
 801760e:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 8017610:	68bb      	ldr	r3, [r7, #8]
 8017612:	011b      	lsls	r3, r3, #4
 8017614:	687a      	ldr	r2, [r7, #4]
 8017616:	441a      	add	r2, r3
 8017618:	68fb      	ldr	r3, [r7, #12]
 801761a:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 801761c:	68fb      	ldr	r3, [r7, #12]
 801761e:	689a      	ldr	r2, [r3, #8]
 8017620:	68bb      	ldr	r3, [r7, #8]
 8017622:	005b      	lsls	r3, r3, #1
 8017624:	4413      	add	r3, r2
 8017626:	3304      	adds	r3, #4
 8017628:	461a      	mov	r2, r3
 801762a:	683b      	ldr	r3, [r7, #0]
 801762c:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
 801762e:	1c5a      	adds	r2, r3, #1
 8017630:	683b      	ldr	r3, [r7, #0]
 8017632:	425b      	negs	r3, r3
 8017634:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
 8017636:	461a      	mov	r2, r3
 8017638:	68fb      	ldr	r3, [r7, #12]
 801763a:	60da      	str	r2, [r3, #12]
}
 801763c:	bf00      	nop
 801763e:	3714      	adds	r7, #20
 8017640:	46bd      	mov	sp, r7
 8017642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017646:	4770      	bx	lr

08017648 <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 8017648:	b480      	push	{r7}
 801764a:	b083      	sub	sp, #12
 801764c:	af00      	add	r7, sp, #0
 801764e:	4603      	mov	r3, r0
 8017650:	80fb      	strh	r3, [r7, #6]
 8017652:	460b      	mov	r3, r1
 8017654:	80bb      	strh	r3, [r7, #4]
 8017656:	4613      	mov	r3, r2
 8017658:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
 801765a:	88ba      	ldrh	r2, [r7, #4]
 801765c:	88fb      	ldrh	r3, [r7, #6]
 801765e:	1ad3      	subs	r3, r2, r3
 8017660:	b29b      	uxth	r3, r3
 8017662:	3b01      	subs	r3, #1
 8017664:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
 8017666:	88b9      	ldrh	r1, [r7, #4]
 8017668:	887b      	ldrh	r3, [r7, #2]
 801766a:	1acb      	subs	r3, r1, r3
 801766c:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
 801766e:	429a      	cmp	r2, r3
 8017670:	bf34      	ite	cc
 8017672:	2301      	movcc	r3, #1
 8017674:	2300      	movcs	r3, #0
 8017676:	b2db      	uxtb	r3, r3
}
 8017678:	4618      	mov	r0, r3
 801767a:	370c      	adds	r7, #12
 801767c:	46bd      	mov	sp, r7
 801767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017682:	4770      	bx	lr

08017684 <metal_io_virt_to_offset>:
{
 8017684:	b480      	push	{r7}
 8017686:	b085      	sub	sp, #20
 8017688:	af00      	add	r7, sp, #0
 801768a:	6078      	str	r0, [r7, #4]
 801768c:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	681b      	ldr	r3, [r3, #0]
 8017692:	683a      	ldr	r2, [r7, #0]
 8017694:	1ad3      	subs	r3, r2, r3
 8017696:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	689b      	ldr	r3, [r3, #8]
 801769c:	68fa      	ldr	r2, [r7, #12]
 801769e:	429a      	cmp	r2, r3
 80176a0:	d201      	bcs.n	80176a6 <metal_io_virt_to_offset+0x22>
 80176a2:	68fb      	ldr	r3, [r7, #12]
 80176a4:	e001      	b.n	80176aa <metal_io_virt_to_offset+0x26>
 80176a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80176aa:	4618      	mov	r0, r3
 80176ac:	3714      	adds	r7, #20
 80176ae:	46bd      	mov	sp, r7
 80176b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176b4:	4770      	bx	lr

080176b6 <metal_io_phys>:
{
 80176b6:	b480      	push	{r7}
 80176b8:	b085      	sub	sp, #20
 80176ba:	af00      	add	r7, sp, #0
 80176bc:	6078      	str	r0, [r7, #4]
 80176be:	6039      	str	r1, [r7, #0]
	unsigned long page = (io->page_shift >=
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	68db      	ldr	r3, [r3, #12]
			     0 : offset >> io->page_shift);
 80176c4:	2b1f      	cmp	r3, #31
 80176c6:	d805      	bhi.n	80176d4 <metal_io_phys+0x1e>
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	68db      	ldr	r3, [r3, #12]
 80176cc:	683a      	ldr	r2, [r7, #0]
 80176ce:	fa22 f303 	lsr.w	r3, r2, r3
 80176d2:	e000      	b.n	80176d6 <metal_io_phys+0x20>
 80176d4:	2300      	movs	r3, #0
	unsigned long page = (io->page_shift >=
 80176d6:	60fb      	str	r3, [r7, #12]
	return (io->physmap != NULL && offset <= io->size
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	685b      	ldr	r3, [r3, #4]
		: METAL_BAD_PHYS);
 80176dc:	2b00      	cmp	r3, #0
 80176de:	d010      	beq.n	8017702 <metal_io_phys+0x4c>
	return (io->physmap != NULL && offset <= io->size
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	689b      	ldr	r3, [r3, #8]
 80176e4:	683a      	ldr	r2, [r7, #0]
 80176e6:	429a      	cmp	r2, r3
 80176e8:	d80b      	bhi.n	8017702 <metal_io_phys+0x4c>
		? io->physmap[page] + (offset & io->page_mask)
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	685a      	ldr	r2, [r3, #4]
 80176ee:	68fb      	ldr	r3, [r7, #12]
 80176f0:	009b      	lsls	r3, r3, #2
 80176f2:	4413      	add	r3, r2
 80176f4:	681a      	ldr	r2, [r3, #0]
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	6919      	ldr	r1, [r3, #16]
 80176fa:	683b      	ldr	r3, [r7, #0]
 80176fc:	400b      	ands	r3, r1
		: METAL_BAD_PHYS);
 80176fe:	4413      	add	r3, r2
 8017700:	e001      	b.n	8017706 <metal_io_phys+0x50>
 8017702:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017706:	4618      	mov	r0, r3
 8017708:	3714      	adds	r7, #20
 801770a:	46bd      	mov	sp, r7
 801770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017710:	4770      	bx	lr

08017712 <metal_io_virt_to_phys>:
{
 8017712:	b580      	push	{r7, lr}
 8017714:	b082      	sub	sp, #8
 8017716:	af00      	add	r7, sp, #0
 8017718:	6078      	str	r0, [r7, #4]
 801771a:	6039      	str	r1, [r7, #0]
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
 801771c:	6839      	ldr	r1, [r7, #0]
 801771e:	6878      	ldr	r0, [r7, #4]
 8017720:	f7ff ffb0 	bl	8017684 <metal_io_virt_to_offset>
 8017724:	4603      	mov	r3, r0
 8017726:	4619      	mov	r1, r3
 8017728:	6878      	ldr	r0, [r7, #4]
 801772a:	f7ff ffc4 	bl	80176b6 <metal_io_phys>
 801772e:	4603      	mov	r3, r0
}
 8017730:	4618      	mov	r0, r3
 8017732:	3708      	adds	r7, #8
 8017734:	46bd      	mov	sp, r7
 8017736:	bd80      	pop	{r7, pc}

08017738 <virtqueue_virt_to_phys>:
}

/* Default implementation of V2P based on libmetal */
static inline metal_phys_addr_t virtqueue_virt_to_phys(struct virtqueue *vq,
						       void *buf)
{
 8017738:	b580      	push	{r7, lr}
 801773a:	b084      	sub	sp, #16
 801773c:	af00      	add	r7, sp, #0
 801773e:	6078      	str	r0, [r7, #4]
 8017740:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017746:	60fb      	str	r3, [r7, #12]

	return metal_io_virt_to_phys(io, buf);
 8017748:	6839      	ldr	r1, [r7, #0]
 801774a:	68f8      	ldr	r0, [r7, #12]
 801774c:	f7ff ffe1 	bl	8017712 <metal_io_virt_to_phys>
 8017750:	4603      	mov	r3, r0
}
 8017752:	4618      	mov	r0, r3
 8017754:	3710      	adds	r7, #16
 8017756:	46bd      	mov	sp, r7
 8017758:	bd80      	pop	{r7, pc}

0801775a <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 801775a:	b580      	push	{r7, lr}
 801775c:	b086      	sub	sp, #24
 801775e:	af00      	add	r7, sp, #0
 8017760:	60f8      	str	r0, [r7, #12]
 8017762:	607a      	str	r2, [r7, #4]
 8017764:	603b      	str	r3, [r7, #0]
 8017766:	460b      	mov	r3, r1
 8017768:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
 801776a:	2300      	movs	r3, #0
 801776c:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 801776e:	697b      	ldr	r3, [r7, #20]
 8017770:	2b00      	cmp	r3, #0
 8017772:	d121      	bne.n	80177b8 <virtqueue_create+0x5e>
		vq->vq_dev = virt_dev;
 8017774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017776:	68fa      	ldr	r2, [r7, #12]
 8017778:	601a      	str	r2, [r3, #0]
		vq->vq_name =  name;
 801777a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801777c:	687a      	ldr	r2, [r7, #4]
 801777e:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
 8017780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017782:	897a      	ldrh	r2, [r7, #10]
 8017784:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
 8017786:	683b      	ldr	r3, [r7, #0]
 8017788:	891a      	ldrh	r2, [r3, #8]
 801778a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801778c:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 801778e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017790:	895a      	ldrh	r2, [r3, #10]
 8017792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017794:	851a      	strh	r2, [r3, #40]	; 0x28
		vq->callback = callback;
 8017796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017798:	6a3a      	ldr	r2, [r7, #32]
 801779a:	611a      	str	r2, [r3, #16]
		vq->notify = notify;
 801779c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801779e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80177a0:	615a      	str	r2, [r3, #20]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
 80177a2:	683b      	ldr	r3, [r7, #0]
 80177a4:	6819      	ldr	r1, [r3, #0]
 80177a6:	683b      	ldr	r3, [r7, #0]
 80177a8:	685b      	ldr	r3, [r3, #4]
 80177aa:	461a      	mov	r2, r3
 80177ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80177ae:	f000 f97a 	bl	8017aa6 <vq_ring_init>

		/* Disable callbacks - will be enabled by the application
		 * once initialization is completed.
		 */
		virtqueue_disable_cb(vq);
 80177b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80177b4:	f000 f899 	bl	80178ea <virtqueue_disable_cb>
	}

	return (status);
 80177b8:	697b      	ldr	r3, [r7, #20]
}
 80177ba:	4618      	mov	r0, r3
 80177bc:	3718      	adds	r7, #24
 80177be:	46bd      	mov	sp, r7
 80177c0:	bd80      	pop	{r7, pc}

080177c2 <virtqueue_add_buffer>:
 *
 * @return                  - Function status
 */
int virtqueue_add_buffer(struct virtqueue *vq, struct virtqueue_buf *buf_list,
			 int readable, int writable, void *cookie)
{
 80177c2:	b580      	push	{r7, lr}
 80177c4:	b08a      	sub	sp, #40	; 0x28
 80177c6:	af02      	add	r7, sp, #8
 80177c8:	60f8      	str	r0, [r7, #12]
 80177ca:	60b9      	str	r1, [r7, #8]
 80177cc:	607a      	str	r2, [r7, #4]
 80177ce:	603b      	str	r3, [r7, #0]
	struct vq_desc_extra *dxp = NULL;
 80177d0:	2300      	movs	r3, #0
 80177d2:	61fb      	str	r3, [r7, #28]
	int status = VQUEUE_SUCCESS;
 80177d4:	2300      	movs	r3, #0
 80177d6:	61bb      	str	r3, [r7, #24]
	uint16_t head_idx;
	uint16_t idx;
	int needed;

	needed = readable + writable;
 80177d8:	687a      	ldr	r2, [r7, #4]
 80177da:	683b      	ldr	r3, [r7, #0]
 80177dc:	4413      	add	r3, r2
 80177de:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(needed < 1, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(vq->vq_free_cnt == 0, status, ERROR_VRING_FULL);

	VQUEUE_BUSY(vq);

	if (status == VQUEUE_SUCCESS) {
 80177e0:	69bb      	ldr	r3, [r7, #24]
 80177e2:	2b00      	cmp	r3, #0
 80177e4:	d12c      	bne.n	8017840 <virtqueue_add_buffer+0x7e>
		VQASSERT(vq, cookie != NULL, "enqueuing with no cookie");

		head_idx = vq->vq_desc_head_idx;
 80177e6:	68fb      	ldr	r3, [r7, #12]
 80177e8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80177ea:	827b      	strh	r3, [r7, #18]
		VQ_RING_ASSERT_VALID_IDX(vq, head_idx);
		dxp = &vq->vq_descx[head_idx];
 80177ec:	8a7b      	ldrh	r3, [r7, #18]
 80177ee:	3307      	adds	r3, #7
 80177f0:	00db      	lsls	r3, r3, #3
 80177f2:	68fa      	ldr	r2, [r7, #12]
 80177f4:	4413      	add	r3, r2
 80177f6:	61fb      	str	r3, [r7, #28]

		VQASSERT(vq, dxp->cookie == NULL,
			 "cookie already exists for index");

		dxp->cookie = cookie;
 80177f8:	69fb      	ldr	r3, [r7, #28]
 80177fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80177fc:	601a      	str	r2, [r3, #0]
		dxp->ndescs = needed;
 80177fe:	697b      	ldr	r3, [r7, #20]
 8017800:	b29a      	uxth	r2, r3
 8017802:	69fb      	ldr	r3, [r7, #28]
 8017804:	809a      	strh	r2, [r3, #4]

		/* Enqueue buffer onto the ring. */
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
 8017806:	68fb      	ldr	r3, [r7, #12]
 8017808:	69d9      	ldr	r1, [r3, #28]
 801780a:	8a7a      	ldrh	r2, [r7, #18]
 801780c:	683b      	ldr	r3, [r7, #0]
 801780e:	9301      	str	r3, [sp, #4]
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	9300      	str	r3, [sp, #0]
 8017814:	68bb      	ldr	r3, [r7, #8]
 8017816:	68f8      	ldr	r0, [r7, #12]
 8017818:	f000 f8a7 	bl	801796a <vq_ring_add_buffer>
 801781c:	4603      	mov	r3, r0
 801781e:	823b      	strh	r3, [r7, #16]
					 buf_list, readable, writable);

		vq->vq_desc_head_idx = idx;
 8017820:	68fb      	ldr	r3, [r7, #12]
 8017822:	8a3a      	ldrh	r2, [r7, #16]
 8017824:	861a      	strh	r2, [r3, #48]	; 0x30
		vq->vq_free_cnt -= needed;
 8017826:	68fb      	ldr	r3, [r7, #12]
 8017828:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801782a:	697b      	ldr	r3, [r7, #20]
 801782c:	b29b      	uxth	r3, r3
 801782e:	1ad3      	subs	r3, r2, r3
 8017830:	b29a      	uxth	r2, r3
 8017832:	68fb      	ldr	r3, [r7, #12]
 8017834:	851a      	strh	r2, [r3, #40]	; 0x28

		/*
		 * Update vring_avail control block fields so that other
		 * side can get buffer using it.
		 */
		vq_ring_update_avail(vq, head_idx);
 8017836:	8a7b      	ldrh	r3, [r7, #18]
 8017838:	4619      	mov	r1, r3
 801783a:	68f8      	ldr	r0, [r7, #12]
 801783c:	f000 f966 	bl	8017b0c <vq_ring_update_avail>
	}

	VQUEUE_IDLE(vq);

	return status;
 8017840:	69bb      	ldr	r3, [r7, #24]
}
 8017842:	4618      	mov	r0, r3
 8017844:	3720      	adds	r7, #32
 8017846:	46bd      	mov	sp, r7
 8017848:	bd80      	pop	{r7, pc}

0801784a <virtqueue_get_buffer>:
 * @param idx           - index of the buffer
 *
 * @return              - Pointer to used buffer
 */
void *virtqueue_get_buffer(struct virtqueue *vq, uint32_t *len, uint16_t *idx)
{
 801784a:	b580      	push	{r7, lr}
 801784c:	b088      	sub	sp, #32
 801784e:	af00      	add	r7, sp, #0
 8017850:	60f8      	str	r0, [r7, #12]
 8017852:	60b9      	str	r1, [r7, #8]
 8017854:	607a      	str	r2, [r7, #4]
	struct vring_used_elem *uep;
	void *cookie;
	uint16_t used_idx, desc_idx;

	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
 8017856:	68fb      	ldr	r3, [r7, #12]
 8017858:	2b00      	cmp	r3, #0
 801785a:	d006      	beq.n	801786a <virtqueue_get_buffer+0x20>
 801785c:	68fb      	ldr	r3, [r7, #12]
 801785e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8017860:	68fb      	ldr	r3, [r7, #12]
 8017862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017864:	885b      	ldrh	r3, [r3, #2]
 8017866:	429a      	cmp	r2, r3
 8017868:	d101      	bne.n	801786e <virtqueue_get_buffer+0x24>
		return (NULL);
 801786a:	2300      	movs	r3, #0
 801786c:	e039      	b.n	80178e2 <virtqueue_get_buffer+0x98>

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
 801786e:	68fb      	ldr	r3, [r7, #12]
 8017870:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017872:	1c5a      	adds	r2, r3, #1
 8017874:	b291      	uxth	r1, r2
 8017876:	68fa      	ldr	r2, [r7, #12]
 8017878:	8651      	strh	r1, [r2, #50]	; 0x32
 801787a:	b21a      	sxth	r2, r3
 801787c:	68fb      	ldr	r3, [r7, #12]
 801787e:	895b      	ldrh	r3, [r3, #10]
 8017880:	3b01      	subs	r3, #1
 8017882:	b29b      	uxth	r3, r3
 8017884:	b21b      	sxth	r3, r3
 8017886:	4013      	ands	r3, r2
 8017888:	b21b      	sxth	r3, r3
 801788a:	83fb      	strh	r3, [r7, #30]
	uep = &vq->vq_ring.used->ring[used_idx];
 801788c:	68fb      	ldr	r3, [r7, #12]
 801788e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017890:	8bfb      	ldrh	r3, [r7, #30]
 8017892:	00db      	lsls	r3, r3, #3
 8017894:	4413      	add	r3, r2
 8017896:	3304      	adds	r3, #4
 8017898:	61bb      	str	r3, [r7, #24]

	atomic_thread_fence(memory_order_seq_cst);
 801789a:	f3bf 8f5b 	dmb	ish

	desc_idx = (uint16_t)uep->id;
 801789e:	69bb      	ldr	r3, [r7, #24]
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	82fb      	strh	r3, [r7, #22]
	if (len)
 80178a4:	68bb      	ldr	r3, [r7, #8]
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d003      	beq.n	80178b2 <virtqueue_get_buffer+0x68>
		*len = uep->len;
 80178aa:	69bb      	ldr	r3, [r7, #24]
 80178ac:	685a      	ldr	r2, [r3, #4]
 80178ae:	68bb      	ldr	r3, [r7, #8]
 80178b0:	601a      	str	r2, [r3, #0]

	vq_ring_free_chain(vq, desc_idx);
 80178b2:	8afb      	ldrh	r3, [r7, #22]
 80178b4:	4619      	mov	r1, r3
 80178b6:	68f8      	ldr	r0, [r7, #12]
 80178b8:	f000 f8ae 	bl	8017a18 <vq_ring_free_chain>

	cookie = vq->vq_descx[desc_idx].cookie;
 80178bc:	8afa      	ldrh	r2, [r7, #22]
 80178be:	68fb      	ldr	r3, [r7, #12]
 80178c0:	3207      	adds	r2, #7
 80178c2:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80178c6:	613b      	str	r3, [r7, #16]
	vq->vq_descx[desc_idx].cookie = NULL;
 80178c8:	8afa      	ldrh	r2, [r7, #22]
 80178ca:	68fb      	ldr	r3, [r7, #12]
 80178cc:	3207      	adds	r2, #7
 80178ce:	2100      	movs	r1, #0
 80178d0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

	if (idx)
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d002      	beq.n	80178e0 <virtqueue_get_buffer+0x96>
		*idx = used_idx;
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	8bfa      	ldrh	r2, [r7, #30]
 80178de:	801a      	strh	r2, [r3, #0]
	VQUEUE_IDLE(vq);

	return cookie;
 80178e0:	693b      	ldr	r3, [r7, #16]
}
 80178e2:	4618      	mov	r0, r3
 80178e4:	3720      	adds	r7, #32
 80178e6:	46bd      	mov	sp, r7
 80178e8:	bd80      	pop	{r7, pc}

080178ea <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 80178ea:	b480      	push	{r7}
 80178ec:	b083      	sub	sp, #12
 80178ee:	af00      	add	r7, sp, #0
 80178f0:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	68db      	ldr	r3, [r3, #12]
 80178f6:	f003 0302 	and.w	r3, r3, #2
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	d010      	beq.n	8017920 <virtqueue_disable_cb+0x36>
		vring_used_event(&vq->vq_ring) =
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 80178fe:	687b      	ldr	r3, [r7, #4]
 8017900:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	895b      	ldrh	r3, [r3, #10]
 8017906:	1ad3      	subs	r3, r2, r3
 8017908:	b299      	uxth	r1, r3
		vring_used_event(&vq->vq_ring) =
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	6a1a      	ldr	r2, [r3, #32]
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	699b      	ldr	r3, [r3, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8017912:	3901      	subs	r1, #1
 8017914:	b289      	uxth	r1, r1
		vring_used_event(&vq->vq_ring) =
 8017916:	005b      	lsls	r3, r3, #1
 8017918:	4413      	add	r3, r2
 801791a:	460a      	mov	r2, r1
 801791c:	809a      	strh	r2, [r3, #4]
	} else {
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
	}

	VQUEUE_IDLE(vq);
}
 801791e:	e008      	b.n	8017932 <virtqueue_disable_cb+0x48>
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	6a1b      	ldr	r3, [r3, #32]
 8017924:	881a      	ldrh	r2, [r3, #0]
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	6a1b      	ldr	r3, [r3, #32]
 801792a:	f042 0201 	orr.w	r2, r2, #1
 801792e:	b292      	uxth	r2, r2
 8017930:	801a      	strh	r2, [r3, #0]
}
 8017932:	bf00      	nop
 8017934:	370c      	adds	r7, #12
 8017936:	46bd      	mov	sp, r7
 8017938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801793c:	4770      	bx	lr

0801793e <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 801793e:	b580      	push	{r7, lr}
 8017940:	b082      	sub	sp, #8
 8017942:	af00      	add	r7, sp, #0
 8017944:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 8017946:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify_host(vq))
 801794a:	6878      	ldr	r0, [r7, #4]
 801794c:	f000 f91d 	bl	8017b8a <vq_ring_must_notify_host>
 8017950:	4603      	mov	r3, r0
 8017952:	2b00      	cmp	r3, #0
 8017954:	d002      	beq.n	801795c <virtqueue_kick+0x1e>
		vq_ring_notify_host(vq);
 8017956:	6878      	ldr	r0, [r7, #4]
 8017958:	f000 f94d 	bl	8017bf6 <vq_ring_notify_host>

	vq->vq_queued_cnt = 0;
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	2200      	movs	r2, #0
 8017960:	855a      	strh	r2, [r3, #42]	; 0x2a

	VQUEUE_IDLE(vq);
}
 8017962:	bf00      	nop
 8017964:	3708      	adds	r7, #8
 8017966:	46bd      	mov	sp, r7
 8017968:	bd80      	pop	{r7, pc}

0801796a <vq_ring_add_buffer>:
 */
static uint16_t vq_ring_add_buffer(struct virtqueue *vq,
				   struct vring_desc *desc, uint16_t head_idx,
				   struct virtqueue_buf *buf_list, int readable,
				   int writable)
{
 801796a:	b580      	push	{r7, lr}
 801796c:	b088      	sub	sp, #32
 801796e:	af00      	add	r7, sp, #0
 8017970:	60f8      	str	r0, [r7, #12]
 8017972:	60b9      	str	r1, [r7, #8]
 8017974:	603b      	str	r3, [r7, #0]
 8017976:	4613      	mov	r3, r2
 8017978:	80fb      	strh	r3, [r7, #6]
	int i, needed;
	uint16_t idx;

	(void)vq;

	needed = readable + writable;
 801797a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801797c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801797e:	4413      	add	r3, r2
 8017980:	617b      	str	r3, [r7, #20]

	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 8017982:	2300      	movs	r3, #0
 8017984:	61fb      	str	r3, [r7, #28]
 8017986:	88fb      	ldrh	r3, [r7, #6]
 8017988:	837b      	strh	r3, [r7, #26]
 801798a:	e03c      	b.n	8017a06 <vq_ring_add_buffer+0x9c>
		VQASSERT(vq, idx != VQ_RING_DESC_CHAIN_END,
			 "premature end of free desc chain");

		dp = &desc[idx];
 801798c:	8b7b      	ldrh	r3, [r7, #26]
 801798e:	011b      	lsls	r3, r3, #4
 8017990:	68ba      	ldr	r2, [r7, #8]
 8017992:	4413      	add	r3, r2
 8017994:	613b      	str	r3, [r7, #16]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
 8017996:	69fb      	ldr	r3, [r7, #28]
 8017998:	00db      	lsls	r3, r3, #3
 801799a:	683a      	ldr	r2, [r7, #0]
 801799c:	4413      	add	r3, r2
 801799e:	681b      	ldr	r3, [r3, #0]
 80179a0:	4619      	mov	r1, r3
 80179a2:	68f8      	ldr	r0, [r7, #12]
 80179a4:	f7ff fec8 	bl	8017738 <virtqueue_virt_to_phys>
 80179a8:	4603      	mov	r3, r0
 80179aa:	461a      	mov	r2, r3
 80179ac:	f04f 0300 	mov.w	r3, #0
 80179b0:	6939      	ldr	r1, [r7, #16]
 80179b2:	e9c1 2300 	strd	r2, r3, [r1]
		dp->len = buf_list[i].len;
 80179b6:	69fb      	ldr	r3, [r7, #28]
 80179b8:	00db      	lsls	r3, r3, #3
 80179ba:	683a      	ldr	r2, [r7, #0]
 80179bc:	4413      	add	r3, r2
 80179be:	685b      	ldr	r3, [r3, #4]
 80179c0:	461a      	mov	r2, r3
 80179c2:	693b      	ldr	r3, [r7, #16]
 80179c4:	609a      	str	r2, [r3, #8]
		dp->flags = 0;
 80179c6:	693b      	ldr	r3, [r7, #16]
 80179c8:	2200      	movs	r2, #0
 80179ca:	819a      	strh	r2, [r3, #12]

		if (i < needed - 1)
 80179cc:	697b      	ldr	r3, [r7, #20]
 80179ce:	3b01      	subs	r3, #1
 80179d0:	69fa      	ldr	r2, [r7, #28]
 80179d2:	429a      	cmp	r2, r3
 80179d4:	da06      	bge.n	80179e4 <vq_ring_add_buffer+0x7a>
			dp->flags |= VRING_DESC_F_NEXT;
 80179d6:	693b      	ldr	r3, [r7, #16]
 80179d8:	899b      	ldrh	r3, [r3, #12]
 80179da:	f043 0301 	orr.w	r3, r3, #1
 80179de:	b29a      	uxth	r2, r3
 80179e0:	693b      	ldr	r3, [r7, #16]
 80179e2:	819a      	strh	r2, [r3, #12]

		/*
		 * Readable buffers are inserted  into vring before the
		 * writable buffers.
		 */
		if (i >= readable)
 80179e4:	69fa      	ldr	r2, [r7, #28]
 80179e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179e8:	429a      	cmp	r2, r3
 80179ea:	db06      	blt.n	80179fa <vq_ring_add_buffer+0x90>
			dp->flags |= VRING_DESC_F_WRITE;
 80179ec:	693b      	ldr	r3, [r7, #16]
 80179ee:	899b      	ldrh	r3, [r3, #12]
 80179f0:	f043 0302 	orr.w	r3, r3, #2
 80179f4:	b29a      	uxth	r2, r3
 80179f6:	693b      	ldr	r3, [r7, #16]
 80179f8:	819a      	strh	r2, [r3, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 80179fa:	69fb      	ldr	r3, [r7, #28]
 80179fc:	3301      	adds	r3, #1
 80179fe:	61fb      	str	r3, [r7, #28]
 8017a00:	693b      	ldr	r3, [r7, #16]
 8017a02:	89db      	ldrh	r3, [r3, #14]
 8017a04:	837b      	strh	r3, [r7, #26]
 8017a06:	69fa      	ldr	r2, [r7, #28]
 8017a08:	697b      	ldr	r3, [r7, #20]
 8017a0a:	429a      	cmp	r2, r3
 8017a0c:	dbbe      	blt.n	801798c <vq_ring_add_buffer+0x22>
	}

	return (idx);
 8017a0e:	8b7b      	ldrh	r3, [r7, #26]
}
 8017a10:	4618      	mov	r0, r3
 8017a12:	3720      	adds	r7, #32
 8017a14:	46bd      	mov	sp, r7
 8017a16:	bd80      	pop	{r7, pc}

08017a18 <vq_ring_free_chain>:
 *
 * vq_ring_free_chain
 *
 */
static void vq_ring_free_chain(struct virtqueue *vq, uint16_t desc_idx)
{
 8017a18:	b480      	push	{r7}
 8017a1a:	b085      	sub	sp, #20
 8017a1c:	af00      	add	r7, sp, #0
 8017a1e:	6078      	str	r0, [r7, #4]
 8017a20:	460b      	mov	r3, r1
 8017a22:	807b      	strh	r3, [r7, #2]
	struct vring_desc *dp;
	struct vq_desc_extra *dxp;

	VQ_RING_ASSERT_VALID_IDX(vq, desc_idx);
	dp = &vq->vq_ring.desc[desc_idx];
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	69da      	ldr	r2, [r3, #28]
 8017a28:	887b      	ldrh	r3, [r7, #2]
 8017a2a:	011b      	lsls	r3, r3, #4
 8017a2c:	4413      	add	r3, r2
 8017a2e:	60fb      	str	r3, [r7, #12]
	dxp = &vq->vq_descx[desc_idx];
 8017a30:	887b      	ldrh	r3, [r7, #2]
 8017a32:	3307      	adds	r3, #7
 8017a34:	00db      	lsls	r3, r3, #3
 8017a36:	687a      	ldr	r2, [r7, #4]
 8017a38:	4413      	add	r3, r2
 8017a3a:	60bb      	str	r3, [r7, #8]

	if (vq->vq_free_cnt == 0) {
		VQ_RING_ASSERT_CHAIN_TERM(vq);
	}

	vq->vq_free_cnt += dxp->ndescs;
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8017a40:	68bb      	ldr	r3, [r7, #8]
 8017a42:	889b      	ldrh	r3, [r3, #4]
 8017a44:	4413      	add	r3, r2
 8017a46:	b29a      	uxth	r2, r3
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	851a      	strh	r2, [r3, #40]	; 0x28
	dxp->ndescs--;
 8017a4c:	68bb      	ldr	r3, [r7, #8]
 8017a4e:	889b      	ldrh	r3, [r3, #4]
 8017a50:	3b01      	subs	r3, #1
 8017a52:	b29a      	uxth	r2, r3
 8017a54:	68bb      	ldr	r3, [r7, #8]
 8017a56:	809a      	strh	r2, [r3, #4]

	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
 8017a58:	68fb      	ldr	r3, [r7, #12]
 8017a5a:	899b      	ldrh	r3, [r3, #12]
 8017a5c:	f003 0304 	and.w	r3, r3, #4
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d113      	bne.n	8017a8c <vq_ring_free_chain+0x74>
		while (dp->flags & VRING_DESC_F_NEXT) {
 8017a64:	e00c      	b.n	8017a80 <vq_ring_free_chain+0x68>
			VQ_RING_ASSERT_VALID_IDX(vq, dp->next);
			dp = &vq->vq_ring.desc[dp->next];
 8017a66:	687b      	ldr	r3, [r7, #4]
 8017a68:	69da      	ldr	r2, [r3, #28]
 8017a6a:	68fb      	ldr	r3, [r7, #12]
 8017a6c:	89db      	ldrh	r3, [r3, #14]
 8017a6e:	011b      	lsls	r3, r3, #4
 8017a70:	4413      	add	r3, r2
 8017a72:	60fb      	str	r3, [r7, #12]
			dxp->ndescs--;
 8017a74:	68bb      	ldr	r3, [r7, #8]
 8017a76:	889b      	ldrh	r3, [r3, #4]
 8017a78:	3b01      	subs	r3, #1
 8017a7a:	b29a      	uxth	r2, r3
 8017a7c:	68bb      	ldr	r3, [r7, #8]
 8017a7e:	809a      	strh	r2, [r3, #4]
		while (dp->flags & VRING_DESC_F_NEXT) {
 8017a80:	68fb      	ldr	r3, [r7, #12]
 8017a82:	899b      	ldrh	r3, [r3, #12]
 8017a84:	f003 0301 	and.w	r3, r3, #1
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	d1ec      	bne.n	8017a66 <vq_ring_free_chain+0x4e>
	/*
	 * We must append the existing free chain, if any, to the end of
	 * newly freed chain. If the virtqueue was completely used, then
	 * head would be VQ_RING_DESC_CHAIN_END (ASSERTed above).
	 */
	dp->next = vq->vq_desc_head_idx;
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8017a90:	68fb      	ldr	r3, [r7, #12]
 8017a92:	81da      	strh	r2, [r3, #14]
	vq->vq_desc_head_idx = desc_idx;
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	887a      	ldrh	r2, [r7, #2]
 8017a98:	861a      	strh	r2, [r3, #48]	; 0x30
}
 8017a9a:	bf00      	nop
 8017a9c:	3714      	adds	r7, #20
 8017a9e:	46bd      	mov	sp, r7
 8017aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aa4:	4770      	bx	lr

08017aa6 <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 8017aa6:	b580      	push	{r7, lr}
 8017aa8:	b088      	sub	sp, #32
 8017aaa:	af00      	add	r7, sp, #0
 8017aac:	60f8      	str	r0, [r7, #12]
 8017aae:	60b9      	str	r1, [r7, #8]
 8017ab0:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 8017ab2:	68fb      	ldr	r3, [r7, #12]
 8017ab4:	895b      	ldrh	r3, [r3, #10]
 8017ab6:	61bb      	str	r3, [r7, #24]
	vr = &vq->vq_ring;
 8017ab8:	68fb      	ldr	r3, [r7, #12]
 8017aba:	3318      	adds	r3, #24
 8017abc:	617b      	str	r3, [r7, #20]

	vring_init(vr, size, (unsigned char *)ring_mem, alignment);
 8017abe:	69b9      	ldr	r1, [r7, #24]
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	68ba      	ldr	r2, [r7, #8]
 8017ac4:	6978      	ldr	r0, [r7, #20]
 8017ac6:	f7ff fd96 	bl	80175f6 <vring_init>

	for (i = 0; i < size - 1; i++)
 8017aca:	2300      	movs	r3, #0
 8017acc:	61fb      	str	r3, [r7, #28]
 8017ace:	e00c      	b.n	8017aea <vq_ring_init+0x44>
		vr->desc[i].next = i + 1;
 8017ad0:	69fb      	ldr	r3, [r7, #28]
 8017ad2:	b29a      	uxth	r2, r3
 8017ad4:	697b      	ldr	r3, [r7, #20]
 8017ad6:	6859      	ldr	r1, [r3, #4]
 8017ad8:	69fb      	ldr	r3, [r7, #28]
 8017ada:	011b      	lsls	r3, r3, #4
 8017adc:	440b      	add	r3, r1
 8017ade:	3201      	adds	r2, #1
 8017ae0:	b292      	uxth	r2, r2
 8017ae2:	81da      	strh	r2, [r3, #14]
	for (i = 0; i < size - 1; i++)
 8017ae4:	69fb      	ldr	r3, [r7, #28]
 8017ae6:	3301      	adds	r3, #1
 8017ae8:	61fb      	str	r3, [r7, #28]
 8017aea:	69bb      	ldr	r3, [r7, #24]
 8017aec:	3b01      	subs	r3, #1
 8017aee:	69fa      	ldr	r2, [r7, #28]
 8017af0:	429a      	cmp	r2, r3
 8017af2:	dbed      	blt.n	8017ad0 <vq_ring_init+0x2a>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 8017af4:	697b      	ldr	r3, [r7, #20]
 8017af6:	685a      	ldr	r2, [r3, #4]
 8017af8:	69fb      	ldr	r3, [r7, #28]
 8017afa:	011b      	lsls	r3, r3, #4
 8017afc:	4413      	add	r3, r2
 8017afe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8017b02:	81da      	strh	r2, [r3, #14]
}
 8017b04:	bf00      	nop
 8017b06:	3720      	adds	r7, #32
 8017b08:	46bd      	mov	sp, r7
 8017b0a:	bd80      	pop	{r7, pc}

08017b0c <vq_ring_update_avail>:
 *
 * vq_ring_update_avail
 *
 */
static void vq_ring_update_avail(struct virtqueue *vq, uint16_t desc_idx)
{
 8017b0c:	b480      	push	{r7}
 8017b0e:	b085      	sub	sp, #20
 8017b10:	af00      	add	r7, sp, #0
 8017b12:	6078      	str	r0, [r7, #4]
 8017b14:	460b      	mov	r3, r1
 8017b16:	807b      	strh	r3, [r7, #2]
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	6a1b      	ldr	r3, [r3, #32]
 8017b1c:	885b      	ldrh	r3, [r3, #2]
 8017b1e:	b21a      	sxth	r2, r3
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	895b      	ldrh	r3, [r3, #10]
 8017b24:	3b01      	subs	r3, #1
 8017b26:	b29b      	uxth	r3, r3
 8017b28:	b21b      	sxth	r3, r3
 8017b2a:	4013      	ands	r3, r2
 8017b2c:	b21b      	sxth	r3, r3
 8017b2e:	81fb      	strh	r3, [r7, #14]
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	6a1a      	ldr	r2, [r3, #32]
 8017b34:	89fb      	ldrh	r3, [r7, #14]
 8017b36:	005b      	lsls	r3, r3, #1
 8017b38:	4413      	add	r3, r2
 8017b3a:	887a      	ldrh	r2, [r7, #2]
 8017b3c:	809a      	strh	r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 8017b3e:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	6a1b      	ldr	r3, [r3, #32]
 8017b46:	885a      	ldrh	r2, [r3, #2]
 8017b48:	3201      	adds	r2, #1
 8017b4a:	b292      	uxth	r2, r2
 8017b4c:	805a      	strh	r2, [r3, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017b52:	3301      	adds	r3, #1
 8017b54:	b29a      	uxth	r2, r3
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8017b5a:	bf00      	nop
 8017b5c:	3714      	adds	r7, #20
 8017b5e:	46bd      	mov	sp, r7
 8017b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b64:	4770      	bx	lr

08017b66 <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 8017b66:	b580      	push	{r7, lr}
 8017b68:	b082      	sub	sp, #8
 8017b6a:	af00      	add	r7, sp, #0
 8017b6c:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
 8017b6e:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	691b      	ldr	r3, [r3, #16]
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d003      	beq.n	8017b82 <virtqueue_notification+0x1c>
		vq->callback(vq);
 8017b7a:	687b      	ldr	r3, [r7, #4]
 8017b7c:	691b      	ldr	r3, [r3, #16]
 8017b7e:	6878      	ldr	r0, [r7, #4]
 8017b80:	4798      	blx	r3
}
 8017b82:	bf00      	nop
 8017b84:	3708      	adds	r7, #8
 8017b86:	46bd      	mov	sp, r7
 8017b88:	bd80      	pop	{r7, pc}

08017b8a <vq_ring_must_notify_host>:
 *
 * vq_ring_must_notify_host
 *
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
 8017b8a:	b580      	push	{r7, lr}
 8017b8c:	b084      	sub	sp, #16
 8017b8e:	af00      	add	r7, sp, #0
 8017b90:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	68db      	ldr	r3, [r3, #12]
 8017b96:	f003 0302 	and.w	r3, r3, #2
 8017b9a:	2b00      	cmp	r3, #0
 8017b9c:	d01d      	beq.n	8017bda <vq_ring_must_notify_host+0x50>
		new_idx = vq->vq_ring.avail->idx;
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	6a1b      	ldr	r3, [r3, #32]
 8017ba2:	885b      	ldrh	r3, [r3, #2]
 8017ba4:	81fb      	strh	r3, [r7, #14]
		prev_idx = new_idx - vq->vq_queued_cnt;
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017baa:	89fa      	ldrh	r2, [r7, #14]
 8017bac:	1ad3      	subs	r3, r2, r3
 8017bae:	81bb      	strh	r3, [r7, #12]
		event_idx = vring_avail_event(&vq->vq_ring);
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	699b      	ldr	r3, [r3, #24]
 8017bb8:	00db      	lsls	r3, r3, #3
 8017bba:	4413      	add	r3, r2
 8017bbc:	685b      	ldr	r3, [r3, #4]
 8017bbe:	817b      	strh	r3, [r7, #10]

		return (vring_need_event(event_idx, new_idx, prev_idx) != 0);
 8017bc0:	89ba      	ldrh	r2, [r7, #12]
 8017bc2:	89f9      	ldrh	r1, [r7, #14]
 8017bc4:	897b      	ldrh	r3, [r7, #10]
 8017bc6:	4618      	mov	r0, r3
 8017bc8:	f7ff fd3e 	bl	8017648 <vring_need_event>
 8017bcc:	4603      	mov	r3, r0
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	bf14      	ite	ne
 8017bd2:	2301      	movne	r3, #1
 8017bd4:	2300      	moveq	r3, #0
 8017bd6:	b2db      	uxtb	r3, r3
 8017bd8:	e009      	b.n	8017bee <vq_ring_must_notify_host+0x64>
	}

	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017bde:	881b      	ldrh	r3, [r3, #0]
 8017be0:	f003 0301 	and.w	r3, r3, #1
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	bf0c      	ite	eq
 8017be8:	2301      	moveq	r3, #1
 8017bea:	2300      	movne	r3, #0
 8017bec:	b2db      	uxtb	r3, r3
}
 8017bee:	4618      	mov	r0, r3
 8017bf0:	3710      	adds	r7, #16
 8017bf2:	46bd      	mov	sp, r7
 8017bf4:	bd80      	pop	{r7, pc}

08017bf6 <vq_ring_notify_host>:
 *
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
 8017bf6:	b580      	push	{r7, lr}
 8017bf8:	b082      	sub	sp, #8
 8017bfa:	af00      	add	r7, sp, #0
 8017bfc:	6078      	str	r0, [r7, #4]
	if (vq->notify)
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	695b      	ldr	r3, [r3, #20]
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	d003      	beq.n	8017c0e <vq_ring_notify_host+0x18>
		vq->notify(vq);
 8017c06:	687b      	ldr	r3, [r7, #4]
 8017c08:	695b      	ldr	r3, [r3, #20]
 8017c0a:	6878      	ldr	r0, [r7, #4]
 8017c0c:	4798      	blx	r3
}
 8017c0e:	bf00      	nop
 8017c10:	3708      	adds	r7, #8
 8017c12:	46bd      	mov	sp, r7
 8017c14:	bd80      	pop	{r7, pc}
	...

08017c18 <initSDCard>:
char logBuffer[16384] = "";
char terminalBuffer[1024] = "";


uint8_t initSDCard(void)
{
 8017c18:	b580      	push	{r7, lr}
 8017c1a:	af00      	add	r7, sp, #0

	//Open the file system
	fres = f_mount(&FatFs, "", 0); //1=mount now
 8017c1c:	2200      	movs	r2, #0
 8017c1e:	491c      	ldr	r1, [pc, #112]	; (8017c90 <initSDCard+0x78>)
 8017c20:	481c      	ldr	r0, [pc, #112]	; (8017c94 <initSDCard+0x7c>)
 8017c22:	f7fc fc8f 	bl	8014544 <f_mount>
 8017c26:	4603      	mov	r3, r0
 8017c28:	461a      	mov	r2, r3
 8017c2a:	4b1b      	ldr	r3, [pc, #108]	; (8017c98 <initSDCard+0x80>)
 8017c2c:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK)
 8017c2e:	4b1a      	ldr	r3, [pc, #104]	; (8017c98 <initSDCard+0x80>)
 8017c30:	781b      	ldrb	r3, [r3, #0]
 8017c32:	2b00      	cmp	r3, #0
 8017c34:	d002      	beq.n	8017c3c <initSDCard+0x24>
	{
		//	myprintf("f_mount error (%i)\r\n", fres);
		return (uint8_t)fres;
 8017c36:	4b18      	ldr	r3, [pc, #96]	; (8017c98 <initSDCard+0x80>)
 8017c38:	781b      	ldrb	r3, [r3, #0]
 8017c3a:	e026      	b.n	8017c8a <initSDCard+0x72>
	}


	//  fres = f_mkfs("\\", FM_FAT32, 0, buffer, sizeof(buffer));
	fres = f_getfree("", &free_clusters, &getFreeFs);
 8017c3c:	4a17      	ldr	r2, [pc, #92]	; (8017c9c <initSDCard+0x84>)
 8017c3e:	4918      	ldr	r1, [pc, #96]	; (8017ca0 <initSDCard+0x88>)
 8017c40:	4813      	ldr	r0, [pc, #76]	; (8017c90 <initSDCard+0x78>)
 8017c42:	f7fd fb34 	bl	80152ae <f_getfree>
 8017c46:	4603      	mov	r3, r0
 8017c48:	461a      	mov	r2, r3
 8017c4a:	4b13      	ldr	r3, [pc, #76]	; (8017c98 <initSDCard+0x80>)
 8017c4c:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK)
 8017c4e:	4b12      	ldr	r3, [pc, #72]	; (8017c98 <initSDCard+0x80>)
 8017c50:	781b      	ldrb	r3, [r3, #0]
 8017c52:	2b00      	cmp	r3, #0
 8017c54:	d002      	beq.n	8017c5c <initSDCard+0x44>
	{
		//	myprintf("f_getfree error (%i)\r\n", fres);
		return (uint8_t)fres;
 8017c56:	4b10      	ldr	r3, [pc, #64]	; (8017c98 <initSDCard+0x80>)
 8017c58:	781b      	ldrb	r3, [r3, #0]
 8017c5a:	e016      	b.n	8017c8a <initSDCard+0x72>
	}

	//Formula comes from ChaN's documentation
	total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8017c5c:	4b0f      	ldr	r3, [pc, #60]	; (8017c9c <initSDCard+0x84>)
 8017c5e:	681b      	ldr	r3, [r3, #0]
 8017c60:	699b      	ldr	r3, [r3, #24]
 8017c62:	3b02      	subs	r3, #2
 8017c64:	4a0d      	ldr	r2, [pc, #52]	; (8017c9c <initSDCard+0x84>)
 8017c66:	6812      	ldr	r2, [r2, #0]
 8017c68:	8952      	ldrh	r2, [r2, #10]
 8017c6a:	fb02 f303 	mul.w	r3, r2, r3
 8017c6e:	4a0d      	ldr	r2, [pc, #52]	; (8017ca4 <initSDCard+0x8c>)
 8017c70:	6013      	str	r3, [r2, #0]
	free_sectors = free_clusters * getFreeFs->csize;
 8017c72:	4b0a      	ldr	r3, [pc, #40]	; (8017c9c <initSDCard+0x84>)
 8017c74:	681b      	ldr	r3, [r3, #0]
 8017c76:	895b      	ldrh	r3, [r3, #10]
 8017c78:	461a      	mov	r2, r3
 8017c7a:	4b09      	ldr	r3, [pc, #36]	; (8017ca0 <initSDCard+0x88>)
 8017c7c:	681b      	ldr	r3, [r3, #0]
 8017c7e:	fb03 f302 	mul.w	r3, r3, r2
 8017c82:	4a09      	ldr	r2, [pc, #36]	; (8017ca8 <initSDCard+0x90>)
 8017c84:	6013      	str	r3, [r2, #0]
	return (uint8_t)fres;
 8017c86:	4b04      	ldr	r3, [pc, #16]	; (8017c98 <initSDCard+0x80>)
 8017c88:	781b      	ldrb	r3, [r3, #0]
}
 8017c8a:	4618      	mov	r0, r3
 8017c8c:	bd80      	pop	{r7, pc}
 8017c8e:	bf00      	nop
 8017c90:	080217e4 	.word	0x080217e4
 8017c94:	2400b920 	.word	0x2400b920
 8017c98:	2400bd5c 	.word	0x2400bd5c
 8017c9c:	2400bb54 	.word	0x2400bb54
 8017ca0:	2400bf90 	.word	0x2400bf90
 8017ca4:	2400bf94 	.word	0x2400bf94
 8017ca8:	2400bb58 	.word	0x2400bb58

08017cac <createNewLogFile>:

void createNewLogFile(void)
{
 8017cac:	b580      	push	{r7, lr}
 8017cae:	b088      	sub	sp, #32
 8017cb0:	af00      	add	r7, sp, #0
	unsigned int BytesWritten = 0;
 8017cb2:	2300      	movs	r3, #0
 8017cb4:	61fb      	str	r3, [r7, #28]
	unsigned int BytesRead = 0;
 8017cb6:	2300      	movs	r3, #0
 8017cb8:	61bb      	str	r3, [r7, #24]
	char localIndex[6] = "";
 8017cba:	2300      	movs	r3, #0
 8017cbc:	613b      	str	r3, [r7, #16]
 8017cbe:	2300      	movs	r3, #0
 8017cc0:	82bb      	strh	r3, [r7, #20]

	fres = f_open(&fil, "Index.txt", FA_READ);
 8017cc2:	2201      	movs	r2, #1
 8017cc4:	4957      	ldr	r1, [pc, #348]	; (8017e24 <createNewLogFile+0x178>)
 8017cc6:	4858      	ldr	r0, [pc, #352]	; (8017e28 <createNewLogFile+0x17c>)
 8017cc8:	f7fc fc82 	bl	80145d0 <f_open>
 8017ccc:	4603      	mov	r3, r0
 8017cce:	461a      	mov	r2, r3
 8017cd0:	4b56      	ldr	r3, [pc, #344]	; (8017e2c <createNewLogFile+0x180>)
 8017cd2:	701a      	strb	r2, [r3, #0]
	fres = f_read(&fil, &FileReadBuffer, sizeof(FileReadBuffer), &BytesRead);
 8017cd4:	f107 0318 	add.w	r3, r7, #24
 8017cd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017cdc:	4954      	ldr	r1, [pc, #336]	; (8017e30 <createNewLogFile+0x184>)
 8017cde:	4852      	ldr	r0, [pc, #328]	; (8017e28 <createNewLogFile+0x17c>)
 8017ce0:	f7fc fe34 	bl	801494c <f_read>
 8017ce4:	4603      	mov	r3, r0
 8017ce6:	461a      	mov	r2, r3
 8017ce8:	4b50      	ldr	r3, [pc, #320]	; (8017e2c <createNewLogFile+0x180>)
 8017cea:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK)
 8017cec:	4b4f      	ldr	r3, [pc, #316]	; (8017e2c <createNewLogFile+0x180>)
 8017cee:	781b      	ldrb	r3, [r3, #0]
 8017cf0:	2b00      	cmp	r3, #0
 8017cf2:	d021      	beq.n	8017d38 <createNewLogFile+0x8c>
	{

		do
		{
			HAL_Delay(1);
 8017cf4:	2001      	movs	r0, #1
 8017cf6:	f7ea fc63 	bl	80025c0 <HAL_Delay>
			fres = f_open(&fil, "Index.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8017cfa:	221a      	movs	r2, #26
 8017cfc:	4949      	ldr	r1, [pc, #292]	; (8017e24 <createNewLogFile+0x178>)
 8017cfe:	484a      	ldr	r0, [pc, #296]	; (8017e28 <createNewLogFile+0x17c>)
 8017d00:	f7fc fc66 	bl	80145d0 <f_open>
 8017d04:	4603      	mov	r3, r0
 8017d06:	461a      	mov	r2, r3
 8017d08:	4b48      	ldr	r3, [pc, #288]	; (8017e2c <createNewLogFile+0x180>)
 8017d0a:	701a      	strb	r2, [r3, #0]
		} while ( (fres != FR_OK) );
 8017d0c:	4b47      	ldr	r3, [pc, #284]	; (8017e2c <createNewLogFile+0x180>)
 8017d0e:	781b      	ldrb	r3, [r3, #0]
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d1ef      	bne.n	8017cf4 <createNewLogFile+0x48>

		fres = f_write(&fil, "00000\t", strlen("00000\t"), &BytesWritten);
 8017d14:	f107 031c 	add.w	r3, r7, #28
 8017d18:	2206      	movs	r2, #6
 8017d1a:	4946      	ldr	r1, [pc, #280]	; (8017e34 <createNewLogFile+0x188>)
 8017d1c:	4842      	ldr	r0, [pc, #264]	; (8017e28 <createNewLogFile+0x17c>)
 8017d1e:	f7fc ff54 	bl	8014bca <f_write>
 8017d22:	4603      	mov	r3, r0
 8017d24:	461a      	mov	r2, r3
 8017d26:	4b41      	ldr	r3, [pc, #260]	; (8017e2c <createNewLogFile+0x180>)
 8017d28:	701a      	strb	r2, [r3, #0]
		fres = f_close(&fil);
 8017d2a:	483f      	ldr	r0, [pc, #252]	; (8017e28 <createNewLogFile+0x17c>)
 8017d2c:	f7fd f940 	bl	8014fb0 <f_close>
 8017d30:	4603      	mov	r3, r0
 8017d32:	461a      	mov	r2, r3
 8017d34:	4b3d      	ldr	r3, [pc, #244]	; (8017e2c <createNewLogFile+0x180>)
 8017d36:	701a      	strb	r2, [r3, #0]
	}
	if (BytesRead == 6)
 8017d38:	69bb      	ldr	r3, [r7, #24]
 8017d3a:	2b06      	cmp	r3, #6
 8017d3c:	d112      	bne.n	8017d64 <createNewLogFile+0xb8>
	{
		memcpy(localIndex, FileReadBuffer, 5);
 8017d3e:	f107 0310 	add.w	r3, r7, #16
 8017d42:	2205      	movs	r2, #5
 8017d44:	493a      	ldr	r1, [pc, #232]	; (8017e30 <createNewLogFile+0x184>)
 8017d46:	4618      	mov	r0, r3
 8017d48:	f004 fcaa 	bl	801c6a0 <memcpy>
		localIndex[5] = '\0';
 8017d4c:	2300      	movs	r3, #0
 8017d4e:	757b      	strb	r3, [r7, #21]
		previousLogIndex = atoi(localIndex);
 8017d50:	f107 0310 	add.w	r3, r7, #16
 8017d54:	4618      	mov	r0, r3
 8017d56:	f004 fc53 	bl	801c600 <atoi>
 8017d5a:	4603      	mov	r3, r0
 8017d5c:	461a      	mov	r2, r3
 8017d5e:	4b36      	ldr	r3, [pc, #216]	; (8017e38 <createNewLogFile+0x18c>)
 8017d60:	601a      	str	r2, [r3, #0]
 8017d62:	e002      	b.n	8017d6a <createNewLogFile+0xbe>
	}
	else
	{
		//TODO: what if br is not 6
		// recreate index, etc.
		previousLogIndex = 0;
 8017d64:	4b34      	ldr	r3, [pc, #208]	; (8017e38 <createNewLogFile+0x18c>)
 8017d66:	2200      	movs	r2, #0
 8017d68:	601a      	str	r2, [r3, #0]
	}
	fres = f_close(&fil);
 8017d6a:	482f      	ldr	r0, [pc, #188]	; (8017e28 <createNewLogFile+0x17c>)
 8017d6c:	f7fd f920 	bl	8014fb0 <f_close>
 8017d70:	4603      	mov	r3, r0
 8017d72:	461a      	mov	r2, r3
 8017d74:	4b2d      	ldr	r3, [pc, #180]	; (8017e2c <createNewLogFile+0x180>)
 8017d76:	701a      	strb	r2, [r3, #0]
	fres = f_open(&fil, "Index.txt", FA_OPEN_EXISTING | FA_WRITE);
 8017d78:	2202      	movs	r2, #2
 8017d7a:	492a      	ldr	r1, [pc, #168]	; (8017e24 <createNewLogFile+0x178>)
 8017d7c:	482a      	ldr	r0, [pc, #168]	; (8017e28 <createNewLogFile+0x17c>)
 8017d7e:	f7fc fc27 	bl	80145d0 <f_open>
 8017d82:	4603      	mov	r3, r0
 8017d84:	461a      	mov	r2, r3
 8017d86:	4b29      	ldr	r3, [pc, #164]	; (8017e2c <createNewLogFile+0x180>)
 8017d88:	701a      	strb	r2, [r3, #0]

	if (previousLogIndex + 1 < 100000)
 8017d8a:	4b2b      	ldr	r3, [pc, #172]	; (8017e38 <createNewLogFile+0x18c>)
 8017d8c:	681b      	ldr	r3, [r3, #0]
 8017d8e:	3301      	adds	r3, #1
 8017d90:	4a2a      	ldr	r2, [pc, #168]	; (8017e3c <createNewLogFile+0x190>)
 8017d92:	4293      	cmp	r3, r2
 8017d94:	d902      	bls.n	8017d9c <createNewLogFile+0xf0>
	{

	}
	else
	{
		previousLogIndex = 0;
 8017d96:	4b28      	ldr	r3, [pc, #160]	; (8017e38 <createNewLogFile+0x18c>)
 8017d98:	2200      	movs	r2, #0
 8017d9a:	601a      	str	r2, [r3, #0]
	}
	previousLogIndex++;
 8017d9c:	4b26      	ldr	r3, [pc, #152]	; (8017e38 <createNewLogFile+0x18c>)
 8017d9e:	681b      	ldr	r3, [r3, #0]
 8017da0:	3301      	adds	r3, #1
 8017da2:	4a25      	ldr	r2, [pc, #148]	; (8017e38 <createNewLogFile+0x18c>)
 8017da4:	6013      	str	r3, [r2, #0]

	char localString[16] = "";
 8017da6:	2300      	movs	r3, #0
 8017da8:	603b      	str	r3, [r7, #0]
 8017daa:	1d3b      	adds	r3, r7, #4
 8017dac:	2200      	movs	r2, #0
 8017dae:	601a      	str	r2, [r3, #0]
 8017db0:	605a      	str	r2, [r3, #4]
 8017db2:	609a      	str	r2, [r3, #8]
	sprintf(localString, "%05ld\t",previousLogIndex);
 8017db4:	4b20      	ldr	r3, [pc, #128]	; (8017e38 <createNewLogFile+0x18c>)
 8017db6:	681a      	ldr	r2, [r3, #0]
 8017db8:	463b      	mov	r3, r7
 8017dba:	4921      	ldr	r1, [pc, #132]	; (8017e40 <createNewLogFile+0x194>)
 8017dbc:	4618      	mov	r0, r3
 8017dbe:	f005 fdc1 	bl	801d944 <siprintf>
	//
	fres = f_write(&fil, localString, strlen(localString), &BytesWritten);
 8017dc2:	463b      	mov	r3, r7
 8017dc4:	4618      	mov	r0, r3
 8017dc6:	f7e8 fa95 	bl	80002f4 <strlen>
 8017dca:	4602      	mov	r2, r0
 8017dcc:	f107 031c 	add.w	r3, r7, #28
 8017dd0:	4639      	mov	r1, r7
 8017dd2:	4815      	ldr	r0, [pc, #84]	; (8017e28 <createNewLogFile+0x17c>)
 8017dd4:	f7fc fef9 	bl	8014bca <f_write>
 8017dd8:	4603      	mov	r3, r0
 8017dda:	461a      	mov	r2, r3
 8017ddc:	4b13      	ldr	r3, [pc, #76]	; (8017e2c <createNewLogFile+0x180>)
 8017dde:	701a      	strb	r2, [r3, #0]
	f_close(&fil);
 8017de0:	4811      	ldr	r0, [pc, #68]	; (8017e28 <createNewLogFile+0x17c>)
 8017de2:	f7fd f8e5 	bl	8014fb0 <f_close>

	sprintf(currentLogFilename,"LOG_%05ld.CSV", previousLogIndex);
 8017de6:	4b14      	ldr	r3, [pc, #80]	; (8017e38 <createNewLogFile+0x18c>)
 8017de8:	681b      	ldr	r3, [r3, #0]
 8017dea:	461a      	mov	r2, r3
 8017dec:	4915      	ldr	r1, [pc, #84]	; (8017e44 <createNewLogFile+0x198>)
 8017dee:	4816      	ldr	r0, [pc, #88]	; (8017e48 <createNewLogFile+0x19c>)
 8017df0:	f005 fda8 	bl	801d944 <siprintf>
	fres = f_open(&fil, currentLogFilename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8017df4:	221a      	movs	r2, #26
 8017df6:	4914      	ldr	r1, [pc, #80]	; (8017e48 <createNewLogFile+0x19c>)
 8017df8:	480b      	ldr	r0, [pc, #44]	; (8017e28 <createNewLogFile+0x17c>)
 8017dfa:	f7fc fbe9 	bl	80145d0 <f_open>
 8017dfe:	4603      	mov	r3, r0
 8017e00:	461a      	mov	r2, r3
 8017e02:	4b0a      	ldr	r3, [pc, #40]	; (8017e2c <createNewLogFile+0x180>)
 8017e04:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK)
 8017e06:	4b09      	ldr	r3, [pc, #36]	; (8017e2c <createNewLogFile+0x180>)
 8017e08:	781b      	ldrb	r3, [r3, #0]
 8017e0a:	2b00      	cmp	r3, #0
 8017e0c:	d103      	bne.n	8017e16 <createNewLogFile+0x16a>
	{
		isValidLog = true;
 8017e0e:	4b0f      	ldr	r3, [pc, #60]	; (8017e4c <createNewLogFile+0x1a0>)
 8017e10:	2201      	movs	r2, #1
 8017e12:	701a      	strb	r2, [r3, #0]
	else
	{
		isValidLog = false;
	}

}
 8017e14:	e002      	b.n	8017e1c <createNewLogFile+0x170>
		isValidLog = false;
 8017e16:	4b0d      	ldr	r3, [pc, #52]	; (8017e4c <createNewLogFile+0x1a0>)
 8017e18:	2200      	movs	r2, #0
 8017e1a:	701a      	strb	r2, [r3, #0]
}
 8017e1c:	bf00      	nop
 8017e1e:	3720      	adds	r7, #32
 8017e20:	46bd      	mov	sp, r7
 8017e22:	bd80      	pop	{r7, pc}
 8017e24:	080217e8 	.word	0x080217e8
 8017e28:	2400bd60 	.word	0x2400bd60
 8017e2c:	2400bd5c 	.word	0x2400bd5c
 8017e30:	2400a664 	.word	0x2400a664
 8017e34:	080217f4 	.word	0x080217f4
 8017e38:	2400aa64 	.word	0x2400aa64
 8017e3c:	0001869f 	.word	0x0001869f
 8017e40:	080217fc 	.word	0x080217fc
 8017e44:	08021804 	.word	0x08021804
 8017e48:	2400aa70 	.word	0x2400aa70
 8017e4c:	2400aa6c 	.word	0x2400aa6c

08017e50 <closeLogFile>:

void closeLogFile(void)
{
 8017e50:	b580      	push	{r7, lr}
 8017e52:	af00      	add	r7, sp, #0
	f_sync(&fil);
 8017e54:	4803      	ldr	r0, [pc, #12]	; (8017e64 <closeLogFile+0x14>)
 8017e56:	f7fd f82d 	bl	8014eb4 <f_sync>
	f_close(&fil);
 8017e5a:	4802      	ldr	r0, [pc, #8]	; (8017e64 <closeLogFile+0x14>)
 8017e5c:	f7fd f8a8 	bl	8014fb0 <f_close>
}
 8017e60:	bf00      	nop
 8017e62:	bd80      	pop	{r7, pc}
 8017e64:	2400bd60 	.word	0x2400bd60

08017e68 <getCurrentLogSize>:
		fres = f_write(&fil, logBuffer, strlen(logBuffer), &BytesWritten);
	}
}

uint32_t getCurrentLogSize(void)
{
 8017e68:	b580      	push	{r7, lr}
 8017e6a:	b0d6      	sub	sp, #344	; 0x158
 8017e6c:	af00      	add	r7, sp, #0
    FILINFO fno1;
    DIR dp1;
    FRESULT localRes = FR_OK;
 8017e6e:	2300      	movs	r3, #0
 8017e70:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
    f_opendir(&dp1, "\\");
 8017e74:	1d3b      	adds	r3, r7, #4
 8017e76:	4920      	ldr	r1, [pc, #128]	; (8017ef8 <getCurrentLogSize+0x90>)
 8017e78:	4618      	mov	r0, r3
 8017e7a:	f7fd f8c3 	bl	8015004 <f_opendir>
    localRes = f_findfirst(&dp1, &fno1, "\\", "LOG_*");
 8017e7e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8017e82:	1d38      	adds	r0, r7, #4
 8017e84:	4b1d      	ldr	r3, [pc, #116]	; (8017efc <getCurrentLogSize+0x94>)
 8017e86:	4a1c      	ldr	r2, [pc, #112]	; (8017ef8 <getCurrentLogSize+0x90>)
 8017e88:	f7fd f9ba 	bl	8015200 <f_findfirst>
 8017e8c:	4603      	mov	r3, r0
 8017e8e:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
    while( (localRes == FR_OK) && (fno1.fname[0] != 0x00) )
 8017e92:	e01d      	b.n	8017ed0 <getCurrentLogSize+0x68>
    {
    	f_stat("\\", &fno1);
 8017e94:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8017e98:	4619      	mov	r1, r3
 8017e9a:	4817      	ldr	r0, [pc, #92]	; (8017ef8 <getCurrentLogSize+0x90>)
 8017e9c:	f7fd f9ce 	bl	801523c <f_stat>
    	if(strcmp(currentLogFilename, fno1.fname) == 0)
 8017ea0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8017ea4:	3316      	adds	r3, #22
 8017ea6:	4619      	mov	r1, r3
 8017ea8:	4815      	ldr	r0, [pc, #84]	; (8017f00 <getCurrentLogSize+0x98>)
 8017eaa:	f7e8 fa19 	bl	80002e0 <strcmp>
 8017eae:	4603      	mov	r3, r0
 8017eb0:	2b00      	cmp	r3, #0
 8017eb2:	d103      	bne.n	8017ebc <getCurrentLogSize+0x54>
    	{
    		return fno1.fsize;
 8017eb4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8017eb8:	681b      	ldr	r3, [r3, #0]
 8017eba:	e017      	b.n	8017eec <getCurrentLogSize+0x84>
    	}
    	localRes = f_findnext(&dp1, &fno1);
 8017ebc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8017ec0:	1d3b      	adds	r3, r7, #4
 8017ec2:	4611      	mov	r1, r2
 8017ec4:	4618      	mov	r0, r3
 8017ec6:	f7fd f973 	bl	80151b0 <f_findnext>
 8017eca:	4603      	mov	r3, r0
 8017ecc:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
    while( (localRes == FR_OK) && (fno1.fname[0] != 0x00) )
 8017ed0:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8017ed4:	2b00      	cmp	r3, #0
 8017ed6:	d104      	bne.n	8017ee2 <getCurrentLogSize+0x7a>
 8017ed8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8017edc:	7d9b      	ldrb	r3, [r3, #22]
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	d1d8      	bne.n	8017e94 <getCurrentLogSize+0x2c>
    }
    f_closedir(&dp1);
 8017ee2:	1d3b      	adds	r3, r7, #4
 8017ee4:	4618      	mov	r0, r3
 8017ee6:	f7fd f900 	bl	80150ea <f_closedir>
    return 0;
 8017eea:	2300      	movs	r3, #0
}
 8017eec:	4618      	mov	r0, r3
 8017eee:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8017ef2:	46bd      	mov	sp, r7
 8017ef4:	bd80      	pop	{r7, pc}
 8017ef6:	bf00      	nop
 8017ef8:	08021814 	.word	0x08021814
 8017efc:	08021818 	.word	0x08021818
 8017f00:	2400aa70 	.word	0x2400aa70

08017f04 <monitorLogSize>:

void monitorLogSize(void)
{
 8017f04:	b580      	push	{r7, lr}
 8017f06:	af00      	add	r7, sp, #0
	if ( (HAL_GetTick() - lastFileSizeCheck > 10000) && (isValidLog) )
 8017f08:	f7ea fb4e 	bl	80025a8 <HAL_GetTick>
 8017f0c:	4602      	mov	r2, r0
 8017f0e:	4b0f      	ldr	r3, [pc, #60]	; (8017f4c <monitorLogSize+0x48>)
 8017f10:	681b      	ldr	r3, [r3, #0]
 8017f12:	1ad3      	subs	r3, r2, r3
 8017f14:	f242 7210 	movw	r2, #10000	; 0x2710
 8017f18:	4293      	cmp	r3, r2
 8017f1a:	d915      	bls.n	8017f48 <monitorLogSize+0x44>
 8017f1c:	4b0c      	ldr	r3, [pc, #48]	; (8017f50 <monitorLogSize+0x4c>)
 8017f1e:	781b      	ldrb	r3, [r3, #0]
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	d011      	beq.n	8017f48 <monitorLogSize+0x44>
	{
		f_sync(&fil);
 8017f24:	480b      	ldr	r0, [pc, #44]	; (8017f54 <monitorLogSize+0x50>)
 8017f26:	f7fc ffc5 	bl	8014eb4 <f_sync>
		if (getCurrentLogSize() > MAX_LOG_SIZE)
 8017f2a:	f7ff ff9d 	bl	8017e68 <getCurrentLogSize>
 8017f2e:	4603      	mov	r3, r0
 8017f30:	4a09      	ldr	r2, [pc, #36]	; (8017f58 <monitorLogSize+0x54>)
 8017f32:	4293      	cmp	r3, r2
 8017f34:	d903      	bls.n	8017f3e <monitorLogSize+0x3a>
		{
			closeLogFile();
 8017f36:	f7ff ff8b 	bl	8017e50 <closeLogFile>
			createNewLogFile();
 8017f3a:	f7ff feb7 	bl	8017cac <createNewLogFile>
		}
		lastFileSizeCheck = HAL_GetTick();
 8017f3e:	f7ea fb33 	bl	80025a8 <HAL_GetTick>
 8017f42:	4603      	mov	r3, r0
 8017f44:	4a01      	ldr	r2, [pc, #4]	; (8017f4c <monitorLogSize+0x48>)
 8017f46:	6013      	str	r3, [r2, #0]
	}
}
 8017f48:	bf00      	nop
 8017f4a:	bd80      	pop	{r7, pc}
 8017f4c:	2400aa68 	.word	0x2400aa68
 8017f50:	2400aa6c 	.word	0x2400aa6c
 8017f54:	2400bd60 	.word	0x2400bd60
 8017f58:	017d7840 	.word	0x017d7840

08017f5c <logData>:
	f_closedir(&dp1);
//	logData("EOD", false, true, true);
}

void logData(char *dataToLog, bool doNotShowOnDisplay, bool displayOnly, bool doNotDisplayTime)
{
 8017f5c:	b590      	push	{r4, r7, lr}
 8017f5e:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
 8017f62:	af00      	add	r7, sp, #0
 8017f64:	1d3c      	adds	r4, r7, #4
 8017f66:	6020      	str	r0, [r4, #0]
 8017f68:	460c      	mov	r4, r1
 8017f6a:	4610      	mov	r0, r2
 8017f6c:	4619      	mov	r1, r3
 8017f6e:	1cfb      	adds	r3, r7, #3
 8017f70:	4622      	mov	r2, r4
 8017f72:	701a      	strb	r2, [r3, #0]
 8017f74:	1cbb      	adds	r3, r7, #2
 8017f76:	4602      	mov	r2, r0
 8017f78:	701a      	strb	r2, [r3, #0]
 8017f7a:	1c7b      	adds	r3, r7, #1
 8017f7c:	460a      	mov	r2, r1
 8017f7e:	701a      	strb	r2, [r3, #0]
    char localString[1024] = "";
 8017f80:	f107 0310 	add.w	r3, r7, #16
 8017f84:	2200      	movs	r2, #0
 8017f86:	601a      	str	r2, [r3, #0]
 8017f88:	3304      	adds	r3, #4
 8017f8a:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8017f8e:	2100      	movs	r1, #0
 8017f90:	4618      	mov	r0, r3
 8017f92:	f004 fbad 	bl	801c6f0 <memset>
    unsigned int BytesWritten = 0;
 8017f96:	f107 030c 	add.w	r3, r7, #12
 8017f9a:	2200      	movs	r2, #0
 8017f9c:	601a      	str	r2, [r3, #0]

    if ( (strcmp(dataToLog,"") != 0) && (!doNotDisplayTime) )
 8017f9e:	1d3b      	adds	r3, r7, #4
 8017fa0:	681b      	ldr	r3, [r3, #0]
 8017fa2:	781b      	ldrb	r3, [r3, #0]
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	d011      	beq.n	8017fcc <logData+0x70>
 8017fa8:	1c7b      	adds	r3, r7, #1
 8017faa:	781b      	ldrb	r3, [r3, #0]
 8017fac:	f083 0301 	eor.w	r3, r3, #1
 8017fb0:	b2db      	uxtb	r3, r3
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	d00a      	beq.n	8017fcc <logData+0x70>
    {
        sprintf(localString, "%s, %s\r\n", CT(), dataToLog);
 8017fb6:	f003 ffef 	bl	801bf98 <CT>
 8017fba:	4602      	mov	r2, r0
 8017fbc:	1d3b      	adds	r3, r7, #4
 8017fbe:	f107 0010 	add.w	r0, r7, #16
 8017fc2:	681b      	ldr	r3, [r3, #0]
 8017fc4:	4930      	ldr	r1, [pc, #192]	; (8018088 <logData+0x12c>)
 8017fc6:	f005 fcbd 	bl	801d944 <siprintf>
 8017fca:	e016      	b.n	8017ffa <logData+0x9e>
    }
    else if ( (strcmp(dataToLog,"") != 0) && (doNotDisplayTime) )
 8017fcc:	1d3b      	adds	r3, r7, #4
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	781b      	ldrb	r3, [r3, #0]
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	d00b      	beq.n	8017fee <logData+0x92>
 8017fd6:	1c7b      	adds	r3, r7, #1
 8017fd8:	781b      	ldrb	r3, [r3, #0]
 8017fda:	2b00      	cmp	r3, #0
 8017fdc:	d007      	beq.n	8017fee <logData+0x92>
    {
        sprintf(localString, "%s\r\n", dataToLog);
 8017fde:	1d3b      	adds	r3, r7, #4
 8017fe0:	f107 0010 	add.w	r0, r7, #16
 8017fe4:	681a      	ldr	r2, [r3, #0]
 8017fe6:	4929      	ldr	r1, [pc, #164]	; (801808c <logData+0x130>)
 8017fe8:	f005 fcac 	bl	801d944 <siprintf>
 8017fec:	e005      	b.n	8017ffa <logData+0x9e>
    }
    else
    {
        sprintf(localString, "\r\n");
 8017fee:	f107 0310 	add.w	r3, r7, #16
 8017ff2:	4927      	ldr	r1, [pc, #156]	; (8018090 <logData+0x134>)
 8017ff4:	4618      	mov	r0, r3
 8017ff6:	f005 fca5 	bl	801d944 <siprintf>
    }
    //TODO: disable sessionUnlocked and replace with debugLevel
    if ( (displayOnly) /*&& (!isInfwUpdateMode)*/ )
 8017ffa:	1cbb      	adds	r3, r7, #2
 8017ffc:	781b      	ldrb	r3, [r3, #0]
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	d00d      	beq.n	801801e <logData+0xc2>
    {
//    	CDC_Transmit_FS((uint8_t*)localString, strlen(localString));
    	HAL_UART_Transmit(&huart3, (uint8_t*)localString, strlen(localString), 10);
 8018002:	f107 0310 	add.w	r3, r7, #16
 8018006:	4618      	mov	r0, r3
 8018008:	f7e8 f974 	bl	80002f4 <strlen>
 801800c:	4603      	mov	r3, r0
 801800e:	b29a      	uxth	r2, r3
 8018010:	f107 0110 	add.w	r1, r7, #16
 8018014:	230a      	movs	r3, #10
 8018016:	481f      	ldr	r0, [pc, #124]	; (8018094 <logData+0x138>)
 8018018:	f7f4 f956 	bl	800c2c8 <HAL_UART_Transmit>
    	{
//    		CDC_Transmit_FS((uint8_t*)localString, strlen(localString));
    		HAL_UART_Transmit(&huart3, (uint8_t*)localString, strlen(localString), 10);
    	}
    }
}
 801801c:	e02e      	b.n	801807c <logData+0x120>
    else if (!displayOnly || !doNotShowOnDisplay)
 801801e:	1cbb      	adds	r3, r7, #2
 8018020:	781b      	ldrb	r3, [r3, #0]
 8018022:	f083 0301 	eor.w	r3, r3, #1
 8018026:	b2db      	uxtb	r3, r3
 8018028:	2b00      	cmp	r3, #0
 801802a:	d106      	bne.n	801803a <logData+0xde>
 801802c:	1cfb      	adds	r3, r7, #3
 801802e:	781b      	ldrb	r3, [r3, #0]
 8018030:	f083 0301 	eor.w	r3, r3, #1
 8018034:	b2db      	uxtb	r3, r3
 8018036:	2b00      	cmp	r3, #0
 8018038:	d020      	beq.n	801807c <logData+0x120>
    	f_write(&fil, localString, strlen(localString), &BytesWritten);
 801803a:	f107 0310 	add.w	r3, r7, #16
 801803e:	4618      	mov	r0, r3
 8018040:	f7e8 f958 	bl	80002f4 <strlen>
 8018044:	4602      	mov	r2, r0
 8018046:	f107 030c 	add.w	r3, r7, #12
 801804a:	f107 0110 	add.w	r1, r7, #16
 801804e:	4812      	ldr	r0, [pc, #72]	; (8018098 <logData+0x13c>)
 8018050:	f7fc fdbb 	bl	8014bca <f_write>
    	if ( (!doNotShowOnDisplay) /*&& (!isInfwUpdateMode)*/ )
 8018054:	1cfb      	adds	r3, r7, #3
 8018056:	781b      	ldrb	r3, [r3, #0]
 8018058:	f083 0301 	eor.w	r3, r3, #1
 801805c:	b2db      	uxtb	r3, r3
 801805e:	2b00      	cmp	r3, #0
 8018060:	d00c      	beq.n	801807c <logData+0x120>
    		HAL_UART_Transmit(&huart3, (uint8_t*)localString, strlen(localString), 10);
 8018062:	f107 0310 	add.w	r3, r7, #16
 8018066:	4618      	mov	r0, r3
 8018068:	f7e8 f944 	bl	80002f4 <strlen>
 801806c:	4603      	mov	r3, r0
 801806e:	b29a      	uxth	r2, r3
 8018070:	f107 0110 	add.w	r1, r7, #16
 8018074:	230a      	movs	r3, #10
 8018076:	4807      	ldr	r0, [pc, #28]	; (8018094 <logData+0x138>)
 8018078:	f7f4 f926 	bl	800c2c8 <HAL_UART_Transmit>
}
 801807c:	bf00      	nop
 801807e:	f207 4714 	addw	r7, r7, #1044	; 0x414
 8018082:	46bd      	mov	sp, r7
 8018084:	bd90      	pop	{r4, r7, pc}
 8018086:	bf00      	nop
 8018088:	08021820 	.word	0x08021820
 801808c:	0802182c 	.word	0x0802182c
 8018090:	08021834 	.word	0x08021834
 8018094:	2400b2c4 	.word	0x2400b2c4
 8018098:	2400bd60 	.word	0x2400bd60

0801809c <screenInit>:
tIMAGE_DATA safeairBarImageArray[5];

uint8_t nextFrameToDraw[40960] = {0xFF};

void screenInit(void)
{
 801809c:	b580      	push	{r7, lr}
 801809e:	b082      	sub	sp, #8
 80180a0:	af02      	add	r7, sp, #8
	isPortrait = true;
 80180a2:	4b63      	ldr	r3, [pc, #396]	; (8018230 <screenInit+0x194>)
 80180a4:	2201      	movs	r2, #1
 80180a6:	701a      	strb	r2, [r3, #0]
	DEV_Module_Init();
 80180a8:	f7f7 fb3c 	bl	800f724 <DEV_Module_Init>
	LCD_1IN8_SetBackLight(1000);
 80180ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80180b0:	f7f8 fcea 	bl	8010a88 <LCD_1IN8_SetBackLight>

	if (isPortrait)
 80180b4:	4b5e      	ldr	r3, [pc, #376]	; (8018230 <screenInit+0x194>)
 80180b6:	781b      	ldrb	r3, [r3, #0]
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	d00d      	beq.n	80180d8 <screenInit+0x3c>
	{
		LCD_1IN8_Init(L2R_U2D);
 80180bc:	2000      	movs	r0, #0
 80180be:	f7f8 fbc3 	bl	8010848 <LCD_1IN8_Init>
		LCD_1IN8_Clear(BLACK);
 80180c2:	2000      	movs	r0, #0
 80180c4:	f7f8 fca2 	bl	8010a0c <LCD_1IN8_Clear>
		Paint_NewImage(LCD_1IN8_HEIGHT,LCD_1IN8_WIDTH, 0, WHITE);
 80180c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80180cc:	2200      	movs	r2, #0
 80180ce:	21a0      	movs	r1, #160	; 0xa0
 80180d0:	2080      	movs	r0, #128	; 0x80
 80180d2:	f7f7 fb47 	bl	800f764 <Paint_NewImage>
 80180d6:	e00c      	b.n	80180f2 <screenInit+0x56>
	}
	else
	{
		LCD_1IN8_Init(U2D_R2L);
 80180d8:	2005      	movs	r0, #5
 80180da:	f7f8 fbb5 	bl	8010848 <LCD_1IN8_Init>
		LCD_1IN8_Clear(BLACK);
 80180de:	2000      	movs	r0, #0
 80180e0:	f7f8 fc94 	bl	8010a0c <LCD_1IN8_Clear>
		Paint_NewImage(LCD_1IN8_WIDTH,LCD_1IN8_HEIGHT, 0, WHITE);
 80180e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80180e8:	2200      	movs	r2, #0
 80180ea:	2180      	movs	r1, #128	; 0x80
 80180ec:	20a0      	movs	r0, #160	; 0xa0
 80180ee:	f7f7 fb39 	bl	800f764 <Paint_NewImage>
	}

	Paint_SetClearFuntion(LCD_1IN8_Clear);
 80180f2:	4850      	ldr	r0, [pc, #320]	; (8018234 <screenInit+0x198>)
 80180f4:	f7f7 fb82 	bl	800f7fc <Paint_SetClearFuntion>
	Paint_SetDisplayFuntion(LCD_1IN8_DrawPaint);
 80180f8:	484f      	ldr	r0, [pc, #316]	; (8018238 <screenInit+0x19c>)
 80180fa:	f7f7 fb8f 	bl	800f81c <Paint_SetDisplayFuntion>

//	printf("Paint_Clear\r\n");
	Paint_Clear(WHITE);
 80180fe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8018102:	f7f7 fc4b 	bl	800f99c <Paint_Clear>
	DEV_Delay_ms(1000);
 8018106:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801810a:	f7ea fa59 	bl	80025c0 <HAL_Delay>

	if (isPortrait)
 801810e:	4b48      	ldr	r3, [pc, #288]	; (8018230 <screenInit+0x194>)
 8018110:	781b      	ldrb	r3, [r3, #0]
 8018112:	2b00      	cmp	r3, #0
 8018114:	d042      	beq.n	801819c <screenInit+0x100>
	{
		Paint_DrawImage(gImage_Rain, 0, 0, 128, 128);
 8018116:	2380      	movs	r3, #128	; 0x80
 8018118:	9300      	str	r3, [sp, #0]
 801811a:	2380      	movs	r3, #128	; 0x80
 801811c:	2200      	movs	r2, #0
 801811e:	2100      	movs	r1, #0
 8018120:	4846      	ldr	r0, [pc, #280]	; (801823c <screenInit+0x1a0>)
 8018122:	f7f8 f953 	bl	80103cc <Paint_DrawImage>
		Paint_DrawString_EN(1, 130, "Version", &Font12, WHITE,  BLACK);
 8018126:	2300      	movs	r3, #0
 8018128:	9301      	str	r3, [sp, #4]
 801812a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801812e:	9300      	str	r3, [sp, #0]
 8018130:	4b43      	ldr	r3, [pc, #268]	; (8018240 <screenInit+0x1a4>)
 8018132:	4a44      	ldr	r2, [pc, #272]	; (8018244 <screenInit+0x1a8>)
 8018134:	2182      	movs	r1, #130	; 0x82
 8018136:	2001      	movs	r0, #1
 8018138:	f7f8 f85e 	bl	80101f8 <Paint_DrawString_EN>
		Paint_DrawFloatNum (1, 142 , versionID, 2,  &Font12, BLACK, WHITE);
 801813c:	4b42      	ldr	r3, [pc, #264]	; (8018248 <screenInit+0x1ac>)
 801813e:	edd3 7a00 	vldr	s15, [r3]
 8018142:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8018146:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801814a:	9301      	str	r3, [sp, #4]
 801814c:	2300      	movs	r3, #0
 801814e:	9300      	str	r3, [sp, #0]
 8018150:	4b3b      	ldr	r3, [pc, #236]	; (8018240 <screenInit+0x1a4>)
 8018152:	2202      	movs	r2, #2
 8018154:	eeb0 0b47 	vmov.f64	d0, d7
 8018158:	218e      	movs	r1, #142	; 0x8e
 801815a:	2001      	movs	r0, #1
 801815c:	f7f8 f8a4 	bl	80102a8 <Paint_DrawFloatNum>
		Paint_DrawString_EN(70, 130, "BuildID", &Font12, WHITE,  BLACK);
 8018160:	2300      	movs	r3, #0
 8018162:	9301      	str	r3, [sp, #4]
 8018164:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018168:	9300      	str	r3, [sp, #0]
 801816a:	4b35      	ldr	r3, [pc, #212]	; (8018240 <screenInit+0x1a4>)
 801816c:	4a37      	ldr	r2, [pc, #220]	; (801824c <screenInit+0x1b0>)
 801816e:	2182      	movs	r1, #130	; 0x82
 8018170:	2046      	movs	r0, #70	; 0x46
 8018172:	f7f8 f841 	bl	80101f8 <Paint_DrawString_EN>
		Paint_DrawFloatNum (70, 142 , buildID, 2,  &Font12, BLACK, WHITE);
 8018176:	4b36      	ldr	r3, [pc, #216]	; (8018250 <screenInit+0x1b4>)
 8018178:	edd3 7a00 	vldr	s15, [r3]
 801817c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8018180:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018184:	9301      	str	r3, [sp, #4]
 8018186:	2300      	movs	r3, #0
 8018188:	9300      	str	r3, [sp, #0]
 801818a:	4b2d      	ldr	r3, [pc, #180]	; (8018240 <screenInit+0x1a4>)
 801818c:	2202      	movs	r2, #2
 801818e:	eeb0 0b47 	vmov.f64	d0, d7
 8018192:	218e      	movs	r1, #142	; 0x8e
 8018194:	2046      	movs	r0, #70	; 0x46
 8018196:	f7f8 f887 	bl	80102a8 <Paint_DrawFloatNum>
 801819a:	e041      	b.n	8018220 <screenInit+0x184>
	}
	else
	{
		Paint_DrawImage(gImage_Rain, 16, 0, 128, 128);
 801819c:	2380      	movs	r3, #128	; 0x80
 801819e:	9300      	str	r3, [sp, #0]
 80181a0:	2380      	movs	r3, #128	; 0x80
 80181a2:	2200      	movs	r2, #0
 80181a4:	2110      	movs	r1, #16
 80181a6:	4825      	ldr	r0, [pc, #148]	; (801823c <screenInit+0x1a0>)
 80181a8:	f7f8 f910 	bl	80103cc <Paint_DrawImage>
		Paint_DrawString_EN(1, 98, "Version", &Font12, WHITE,  BLACK);
 80181ac:	2300      	movs	r3, #0
 80181ae:	9301      	str	r3, [sp, #4]
 80181b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80181b4:	9300      	str	r3, [sp, #0]
 80181b6:	4b22      	ldr	r3, [pc, #136]	; (8018240 <screenInit+0x1a4>)
 80181b8:	4a22      	ldr	r2, [pc, #136]	; (8018244 <screenInit+0x1a8>)
 80181ba:	2162      	movs	r1, #98	; 0x62
 80181bc:	2001      	movs	r0, #1
 80181be:	f7f8 f81b 	bl	80101f8 <Paint_DrawString_EN>
		Paint_DrawFloatNum (1, 110 , versionID, 2,  &Font12, BLACK, WHITE);
 80181c2:	4b21      	ldr	r3, [pc, #132]	; (8018248 <screenInit+0x1ac>)
 80181c4:	edd3 7a00 	vldr	s15, [r3]
 80181c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80181cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80181d0:	9301      	str	r3, [sp, #4]
 80181d2:	2300      	movs	r3, #0
 80181d4:	9300      	str	r3, [sp, #0]
 80181d6:	4b1a      	ldr	r3, [pc, #104]	; (8018240 <screenInit+0x1a4>)
 80181d8:	2202      	movs	r2, #2
 80181da:	eeb0 0b47 	vmov.f64	d0, d7
 80181de:	216e      	movs	r1, #110	; 0x6e
 80181e0:	2001      	movs	r0, #1
 80181e2:	f7f8 f861 	bl	80102a8 <Paint_DrawFloatNum>
		Paint_DrawString_EN(104, 98, "BuildID", &Font12, WHITE,  BLACK);
 80181e6:	2300      	movs	r3, #0
 80181e8:	9301      	str	r3, [sp, #4]
 80181ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80181ee:	9300      	str	r3, [sp, #0]
 80181f0:	4b13      	ldr	r3, [pc, #76]	; (8018240 <screenInit+0x1a4>)
 80181f2:	4a16      	ldr	r2, [pc, #88]	; (801824c <screenInit+0x1b0>)
 80181f4:	2162      	movs	r1, #98	; 0x62
 80181f6:	2068      	movs	r0, #104	; 0x68
 80181f8:	f7f7 fffe 	bl	80101f8 <Paint_DrawString_EN>
		Paint_DrawFloatNum (124, 110 , buildID, 2,  &Font12, BLACK, WHITE);
 80181fc:	4b14      	ldr	r3, [pc, #80]	; (8018250 <screenInit+0x1b4>)
 80181fe:	edd3 7a00 	vldr	s15, [r3]
 8018202:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8018206:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801820a:	9301      	str	r3, [sp, #4]
 801820c:	2300      	movs	r3, #0
 801820e:	9300      	str	r3, [sp, #0]
 8018210:	4b0b      	ldr	r3, [pc, #44]	; (8018240 <screenInit+0x1a4>)
 8018212:	2202      	movs	r2, #2
 8018214:	eeb0 0b47 	vmov.f64	d0, d7
 8018218:	216e      	movs	r1, #110	; 0x6e
 801821a:	207c      	movs	r0, #124	; 0x7c
 801821c:	f7f8 f844 	bl	80102a8 <Paint_DrawFloatNum>
	}


	HAL_Delay(1000);
 8018220:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8018224:	f7ea f9cc 	bl	80025c0 <HAL_Delay>
}
 8018228:	bf00      	nop
 801822a:	46bd      	mov	sp, r7
 801822c:	bd80      	pop	{r7, pc}
 801822e:	bf00      	nop
 8018230:	2400008c 	.word	0x2400008c
 8018234:	08010a0d 	.word	0x08010a0d
 8018238:	08010981 	.word	0x08010981
 801823c:	08022064 	.word	0x08022064
 8018240:	24000030 	.word	0x24000030
 8018244:	08021838 	.word	0x08021838
 8018248:	24000008 	.word	0x24000008
 801824c:	08021840 	.word	0x08021840
 8018250:	2400000c 	.word	0x2400000c

08018254 <screenClear>:

void screenClear(void)
{
 8018254:	b580      	push	{r7, lr}
 8018256:	af00      	add	r7, sp, #0
	if (isPortrait)
 8018258:	4b0e      	ldr	r3, [pc, #56]	; (8018294 <screenClear+0x40>)
 801825a:	781b      	ldrb	r3, [r3, #0]
 801825c:	2b00      	cmp	r3, #0
 801825e:	d007      	beq.n	8018270 <screenClear+0x1c>
	{
		Paint_NewImage(LCD_1IN8_HEIGHT,LCD_1IN8_WIDTH, 0, WHITE);
 8018260:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018264:	2200      	movs	r2, #0
 8018266:	21a0      	movs	r1, #160	; 0xa0
 8018268:	2080      	movs	r0, #128	; 0x80
 801826a:	f7f7 fa7b 	bl	800f764 <Paint_NewImage>
 801826e:	e006      	b.n	801827e <screenClear+0x2a>
	}
	else
	{
		Paint_NewImage(LCD_1IN8_WIDTH,LCD_1IN8_HEIGHT, 0, WHITE);
 8018270:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018274:	2200      	movs	r2, #0
 8018276:	2180      	movs	r1, #128	; 0x80
 8018278:	20a0      	movs	r0, #160	; 0xa0
 801827a:	f7f7 fa73 	bl	800f764 <Paint_NewImage>
	}

	Paint_Clear(WHITE);
 801827e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8018282:	f7f7 fb8b 	bl	800f99c <Paint_Clear>
	DEV_Delay_ms(1000);
 8018286:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801828a:	f7ea f999 	bl	80025c0 <HAL_Delay>
}
 801828e:	bf00      	nop
 8018290:	bd80      	pop	{r7, pc}
 8018292:	bf00      	nop
 8018294:	2400008c 	.word	0x2400008c

08018298 <centeredString>:

void centeredString(UWORD XCenterstart, UWORD Ystart, const char * pString, uint16_t textColor, uint16_t backgroundColor, uint8_t numberOfCharactersToClear, sFONT localFont)
{
 8018298:	b590      	push	{r4, r7, lr}
 801829a:	b089      	sub	sp, #36	; 0x24
 801829c:	af02      	add	r7, sp, #8
 801829e:	60ba      	str	r2, [r7, #8]
 80182a0:	461a      	mov	r2, r3
 80182a2:	4603      	mov	r3, r0
 80182a4:	81fb      	strh	r3, [r7, #14]
 80182a6:	460b      	mov	r3, r1
 80182a8:	81bb      	strh	r3, [r7, #12]
 80182aa:	4613      	mov	r3, r2
 80182ac:	80fb      	strh	r3, [r7, #6]
	uint8_t Xstart = 0;
 80182ae:	2300      	movs	r3, #0
 80182b0:	75fb      	strb	r3, [r7, #23]

	Xstart = fmax( XCenterstart - numberOfCharactersToClear * localFont.Width / 2, 0) ;
 80182b2:	89fa      	ldrh	r2, [r7, #14]
 80182b4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80182b8:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80182ba:	fb01 f303 	mul.w	r3, r1, r3
 80182be:	2b00      	cmp	r3, #0
 80182c0:	da00      	bge.n	80182c4 <centeredString+0x2c>
 80182c2:	3301      	adds	r3, #1
 80182c4:	105b      	asrs	r3, r3, #1
 80182c6:	425b      	negs	r3, r3
 80182c8:	4413      	add	r3, r2
 80182ca:	ee07 3a90 	vmov	s15, r3
 80182ce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80182d2:	ed9f 1b57 	vldr	d1, [pc, #348]	; 8018430 <centeredString+0x198>
 80182d6:	eeb0 0b47 	vmov.f64	d0, d7
 80182da:	f008 febb 	bl	8021054 <fmax>
 80182de:	eeb0 7b40 	vmov.f64	d7, d0
 80182e2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80182e6:	edc7 7a00 	vstr	s15, [r7]
 80182ea:	683b      	ldr	r3, [r7, #0]
 80182ec:	75fb      	strb	r3, [r7, #23]
//	Paint_DrawString_EN(Xstart, Ystart, "MAINTENANCE", &Font12, WHITE,  WHITE);
	if (!renderCompleteFrame)
 80182ee:	4b52      	ldr	r3, [pc, #328]	; (8018438 <centeredString+0x1a0>)
 80182f0:	781b      	ldrb	r3, [r3, #0]
 80182f2:	f083 0301 	eor.w	r3, r3, #1
 80182f6:	b2db      	uxtb	r3, r3
 80182f8:	2b00      	cmp	r3, #0
 80182fa:	d018      	beq.n	801832e <centeredString+0x96>
	{
		Paint_ClearWindows(Xstart, Ystart, Xstart + numberOfCharactersToClear * localFont.Width, Ystart + localFont.Height, WHITE);
 80182fc:	7dfb      	ldrb	r3, [r7, #23]
 80182fe:	b298      	uxth	r0, r3
 8018300:	7dfb      	ldrb	r3, [r7, #23]
 8018302:	b29a      	uxth	r2, r3
 8018304:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8018308:	b299      	uxth	r1, r3
 801830a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801830c:	fb11 f303 	smulbb	r3, r1, r3
 8018310:	b29b      	uxth	r3, r3
 8018312:	4413      	add	r3, r2
 8018314:	b29c      	uxth	r4, r3
 8018316:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8018318:	89bb      	ldrh	r3, [r7, #12]
 801831a:	4413      	add	r3, r2
 801831c:	b29b      	uxth	r3, r3
 801831e:	89b9      	ldrh	r1, [r7, #12]
 8018320:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018324:	9200      	str	r2, [sp, #0]
 8018326:	4622      	mov	r2, r4
 8018328:	f7f7 fb48 	bl	800f9bc <Paint_ClearWindows>
 801832c:	e04e      	b.n	80183cc <centeredString+0x134>
	}
	else if ( (renderCompleteFrame) && (!isMenuDisplayed) && (!isPopupDisplayed) )
 801832e:	4b42      	ldr	r3, [pc, #264]	; (8018438 <centeredString+0x1a0>)
 8018330:	781b      	ldrb	r3, [r3, #0]
 8018332:	2b00      	cmp	r3, #0
 8018334:	d026      	beq.n	8018384 <centeredString+0xec>
 8018336:	4b41      	ldr	r3, [pc, #260]	; (801843c <centeredString+0x1a4>)
 8018338:	781b      	ldrb	r3, [r3, #0]
 801833a:	f083 0301 	eor.w	r3, r3, #1
 801833e:	b2db      	uxtb	r3, r3
 8018340:	2b00      	cmp	r3, #0
 8018342:	d01f      	beq.n	8018384 <centeredString+0xec>
 8018344:	4b3e      	ldr	r3, [pc, #248]	; (8018440 <centeredString+0x1a8>)
 8018346:	781b      	ldrb	r3, [r3, #0]
 8018348:	f083 0301 	eor.w	r3, r3, #1
 801834c:	b2db      	uxtb	r3, r3
 801834e:	2b00      	cmp	r3, #0
 8018350:	d018      	beq.n	8018384 <centeredString+0xec>
	{
		Paint_ClearWindows(Xstart, Ystart, Xstart + numberOfCharactersToClear * localFont.Width, Ystart + localFont.Height, backgroundColor);
 8018352:	7dfb      	ldrb	r3, [r7, #23]
 8018354:	b298      	uxth	r0, r3
 8018356:	7dfb      	ldrb	r3, [r7, #23]
 8018358:	b29a      	uxth	r2, r3
 801835a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801835e:	b299      	uxth	r1, r3
 8018360:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018362:	fb11 f303 	smulbb	r3, r1, r3
 8018366:	b29b      	uxth	r3, r3
 8018368:	4413      	add	r3, r2
 801836a:	b29c      	uxth	r4, r3
 801836c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801836e:	89bb      	ldrh	r3, [r7, #12]
 8018370:	4413      	add	r3, r2
 8018372:	b29a      	uxth	r2, r3
 8018374:	89b9      	ldrh	r1, [r7, #12]
 8018376:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018378:	9300      	str	r3, [sp, #0]
 801837a:	4613      	mov	r3, r2
 801837c:	4622      	mov	r2, r4
 801837e:	f7f7 fb1d 	bl	800f9bc <Paint_ClearWindows>
 8018382:	e023      	b.n	80183cc <centeredString+0x134>
	}
	else if ( (renderCompleteFrame) && ( (isMenuDisplayed) || (isPopupDisplayed) ) )
 8018384:	4b2c      	ldr	r3, [pc, #176]	; (8018438 <centeredString+0x1a0>)
 8018386:	781b      	ldrb	r3, [r3, #0]
 8018388:	2b00      	cmp	r3, #0
 801838a:	d01f      	beq.n	80183cc <centeredString+0x134>
 801838c:	4b2b      	ldr	r3, [pc, #172]	; (801843c <centeredString+0x1a4>)
 801838e:	781b      	ldrb	r3, [r3, #0]
 8018390:	2b00      	cmp	r3, #0
 8018392:	d103      	bne.n	801839c <centeredString+0x104>
 8018394:	4b2a      	ldr	r3, [pc, #168]	; (8018440 <centeredString+0x1a8>)
 8018396:	781b      	ldrb	r3, [r3, #0]
 8018398:	2b00      	cmp	r3, #0
 801839a:	d017      	beq.n	80183cc <centeredString+0x134>
	{
		Paint_ClearWindows(Xstart, Ystart, Xstart + numberOfCharactersToClear * localFont.Width, Ystart + localFont.Height, WHITE);
 801839c:	7dfb      	ldrb	r3, [r7, #23]
 801839e:	b298      	uxth	r0, r3
 80183a0:	7dfb      	ldrb	r3, [r7, #23]
 80183a2:	b29a      	uxth	r2, r3
 80183a4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80183a8:	b299      	uxth	r1, r3
 80183aa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80183ac:	fb11 f303 	smulbb	r3, r1, r3
 80183b0:	b29b      	uxth	r3, r3
 80183b2:	4413      	add	r3, r2
 80183b4:	b29c      	uxth	r4, r3
 80183b6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80183b8:	89bb      	ldrh	r3, [r7, #12]
 80183ba:	4413      	add	r3, r2
 80183bc:	b29b      	uxth	r3, r3
 80183be:	89b9      	ldrh	r1, [r7, #12]
 80183c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80183c4:	9200      	str	r2, [sp, #0]
 80183c6:	4622      	mov	r2, r4
 80183c8:	f7f7 faf8 	bl	800f9bc <Paint_ClearWindows>
	}
	Xstart = strlen(pString);
 80183cc:	68b8      	ldr	r0, [r7, #8]
 80183ce:	f7e7 ff91 	bl	80002f4 <strlen>
 80183d2:	4603      	mov	r3, r0
 80183d4:	75fb      	strb	r3, [r7, #23]
	Xstart = fmax( XCenterstart - strlen(pString) * localFont.Width / 2, 0) ;
 80183d6:	89fc      	ldrh	r4, [r7, #14]
 80183d8:	68b8      	ldr	r0, [r7, #8]
 80183da:	f7e7 ff8b 	bl	80002f4 <strlen>
 80183de:	4603      	mov	r3, r0
 80183e0:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80183e2:	fb02 f303 	mul.w	r3, r2, r3
 80183e6:	085b      	lsrs	r3, r3, #1
 80183e8:	1ae3      	subs	r3, r4, r3
 80183ea:	ee07 3a90 	vmov	s15, r3
 80183ee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80183f2:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8018430 <centeredString+0x198>
 80183f6:	eeb0 0b47 	vmov.f64	d0, d7
 80183fa:	f008 fe2b 	bl	8021054 <fmax>
 80183fe:	eeb0 7b40 	vmov.f64	d7, d0
 8018402:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8018406:	edc7 7a00 	vstr	s15, [r7]
 801840a:	683b      	ldr	r3, [r7, #0]
 801840c:	75fb      	strb	r3, [r7, #23]
	Paint_DrawString_EN(Xstart, Ystart, pString, &localFont, backgroundColor,  textColor);
 801840e:	7dfb      	ldrb	r3, [r7, #23]
 8018410:	b298      	uxth	r0, r3
 8018412:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8018416:	89b9      	ldrh	r1, [r7, #12]
 8018418:	88fb      	ldrh	r3, [r7, #6]
 801841a:	9301      	str	r3, [sp, #4]
 801841c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801841e:	9300      	str	r3, [sp, #0]
 8018420:	4613      	mov	r3, r2
 8018422:	68ba      	ldr	r2, [r7, #8]
 8018424:	f7f7 fee8 	bl	80101f8 <Paint_DrawString_EN>
}
 8018428:	bf00      	nop
 801842a:	371c      	adds	r7, #28
 801842c:	46bd      	mov	sp, r7
 801842e:	bd90      	pop	{r4, r7, pc}
	...
 8018438:	2400aeb8 	.word	0x2400aeb8
 801843c:	2400aeb2 	.word	0x2400aeb2
 8018440:	2400aeb7 	.word	0x2400aeb7

08018444 <showAngles>:

void showAngles(void)
{
 8018444:	b580      	push	{r7, lr}
 8018446:	b08a      	sub	sp, #40	; 0x28
 8018448:	af02      	add	r7, sp, #8
	char localT[32] = "";
 801844a:	2300      	movs	r3, #0
 801844c:	603b      	str	r3, [r7, #0]
 801844e:	1d3b      	adds	r3, r7, #4
 8018450:	2200      	movs	r2, #0
 8018452:	601a      	str	r2, [r3, #0]
 8018454:	605a      	str	r2, [r3, #4]
 8018456:	609a      	str	r2, [r3, #8]
 8018458:	60da      	str	r2, [r3, #12]
 801845a:	611a      	str	r2, [r3, #16]
 801845c:	615a      	str	r2, [r3, #20]
 801845e:	619a      	str	r2, [r3, #24]

	snprintf(localT,sizeof(localT),"R: %04.3f", receivedAnglesData->bodyAngles.Roll);
 8018460:	4b2a      	ldr	r3, [pc, #168]	; (801850c <showAngles+0xc8>)
 8018462:	681b      	ldr	r3, [r3, #0]
 8018464:	edd3 7a01 	vldr	s15, [r3, #4]
 8018468:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801846c:	463b      	mov	r3, r7
 801846e:	ed8d 7b00 	vstr	d7, [sp]
 8018472:	4a27      	ldr	r2, [pc, #156]	; (8018510 <showAngles+0xcc>)
 8018474:	2120      	movs	r1, #32
 8018476:	4618      	mov	r0, r3
 8018478:	f005 fa30 	bl	801d8dc <sniprintf>
	Paint_DrawString_EN(VerticalRollChasisX, VerticalRollChasisY, (char *)localT, &Font8, WHITE, BLACK);
 801847c:	463a      	mov	r2, r7
 801847e:	2300      	movs	r3, #0
 8018480:	9301      	str	r3, [sp, #4]
 8018482:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018486:	9300      	str	r3, [sp, #0]
 8018488:	4b22      	ldr	r3, [pc, #136]	; (8018514 <showAngles+0xd0>)
 801848a:	218c      	movs	r1, #140	; 0x8c
 801848c:	2002      	movs	r0, #2
 801848e:	f7f7 feb3 	bl	80101f8 <Paint_DrawString_EN>

	memset(localT,0,32);
 8018492:	463b      	mov	r3, r7
 8018494:	2220      	movs	r2, #32
 8018496:	2100      	movs	r1, #0
 8018498:	4618      	mov	r0, r3
 801849a:	f004 f929 	bl	801c6f0 <memset>
	snprintf(localT,sizeof(localT),"P: %04.3f", receivedAnglesData->bodyAngles.Pitch);
 801849e:	4b1b      	ldr	r3, [pc, #108]	; (801850c <showAngles+0xc8>)
 80184a0:	681b      	ldr	r3, [r3, #0]
 80184a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80184a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80184aa:	463b      	mov	r3, r7
 80184ac:	ed8d 7b00 	vstr	d7, [sp]
 80184b0:	4a19      	ldr	r2, [pc, #100]	; (8018518 <showAngles+0xd4>)
 80184b2:	2120      	movs	r1, #32
 80184b4:	4618      	mov	r0, r3
 80184b6:	f005 fa11 	bl	801d8dc <sniprintf>
	Paint_DrawString_EN(VerticalPitchChasisX, VerticalPitchChasisY, (char *)localT, &Font8, WHITE, BLACK);
 80184ba:	463a      	mov	r2, r7
 80184bc:	2300      	movs	r3, #0
 80184be:	9301      	str	r3, [sp, #4]
 80184c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80184c4:	9300      	str	r3, [sp, #0]
 80184c6:	4b13      	ldr	r3, [pc, #76]	; (8018514 <showAngles+0xd0>)
 80184c8:	218c      	movs	r1, #140	; 0x8c
 80184ca:	2044      	movs	r0, #68	; 0x44
 80184cc:	f7f7 fe94 	bl	80101f8 <Paint_DrawString_EN>

	memset(localT,0,32);
 80184d0:	463b      	mov	r3, r7
 80184d2:	2220      	movs	r2, #32
 80184d4:	2100      	movs	r1, #0
 80184d6:	4618      	mov	r0, r3
 80184d8:	f004 f90a 	bl	801c6f0 <memset>
	snprintf(localT,sizeof(localT),"Y: %04.3f", receivedAnglesData->bodyAngles.Yaw);
 80184dc:	4b0b      	ldr	r3, [pc, #44]	; (801850c <showAngles+0xc8>)
 80184de:	681b      	ldr	r3, [r3, #0]
 80184e0:	edd3 7a03 	vldr	s15, [r3, #12]
 80184e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80184e8:	463b      	mov	r3, r7
 80184ea:	ed8d 7b00 	vstr	d7, [sp]
 80184ee:	4a0b      	ldr	r2, [pc, #44]	; (801851c <showAngles+0xd8>)
 80184f0:	2120      	movs	r1, #32
 80184f2:	4618      	mov	r0, r3
 80184f4:	f005 f9f2 	bl	801d8dc <sniprintf>
//	Paint_DrawString_EN(VerticalYawChasisX, VerticalYawChasisY, (char *)localT, &Font8, WHITE, BLACK);
	memset(localT,0,32);
 80184f8:	463b      	mov	r3, r7
 80184fa:	2220      	movs	r2, #32
 80184fc:	2100      	movs	r1, #0
 80184fe:	4618      	mov	r0, r3
 8018500:	f004 f8f6 	bl	801c6f0 <memset>
}
 8018504:	bf00      	nop
 8018506:	3720      	adds	r7, #32
 8018508:	46bd      	mov	sp, r7
 801850a:	bd80      	pop	{r7, pc}
 801850c:	2400b08c 	.word	0x2400b08c
 8018510:	08021848 	.word	0x08021848
 8018514:	24000038 	.word	0x24000038
 8018518:	08021854 	.word	0x08021854
 801851c:	08021860 	.word	0x08021860

08018520 <showLIDAR>:

void showLIDAR(void)
{
 8018520:	b590      	push	{r4, r7, lr}
 8018522:	b085      	sub	sp, #20
 8018524:	af04      	add	r7, sp, #16
	Paint_DrawCircle(  lidarCenterX, lidarCenterY, 50, BLUE, DOT_PIXEL_2X2, DRAW_FILL_EMPTY );
 8018526:	2300      	movs	r3, #0
 8018528:	9301      	str	r3, [sp, #4]
 801852a:	2302      	movs	r3, #2
 801852c:	9300      	str	r3, [sp, #0]
 801852e:	231f      	movs	r3, #31
 8018530:	2232      	movs	r2, #50	; 0x32
 8018532:	214c      	movs	r1, #76	; 0x4c
 8018534:	2040      	movs	r0, #64	; 0x40
 8018536:	f7f7 fc43 	bl	800fdc0 <Paint_DrawCircle>
	Paint_DrawCircle(  lidarCenterX, lidarCenterY, 1, RED, DOT_PIXEL_2X2, DRAW_FILL_FULL );
 801853a:	2301      	movs	r3, #1
 801853c:	9301      	str	r3, [sp, #4]
 801853e:	2302      	movs	r3, #2
 8018540:	9300      	str	r3, [sp, #0]
 8018542:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8018546:	2201      	movs	r2, #1
 8018548:	214c      	movs	r1, #76	; 0x4c
 801854a:	2040      	movs	r0, #64	; 0x40
 801854c:	f7f7 fc38 	bl	800fdc0 <Paint_DrawCircle>

	if (HAL_GetTick() - lastLidarBoresight >= 40)
 8018550:	f7ea f82a 	bl	80025a8 <HAL_GetTick>
 8018554:	4602      	mov	r2, r0
 8018556:	4b48      	ldr	r3, [pc, #288]	; (8018678 <showLIDAR+0x158>)
 8018558:	681b      	ldr	r3, [r3, #0]
 801855a:	1ad3      	subs	r3, r2, r3
 801855c:	2b27      	cmp	r3, #39	; 0x27
 801855e:	d927      	bls.n	80185b0 <showLIDAR+0x90>
	{
		currentLidarAngle = (float)((uint32_t)(1.8 * (HAL_GetTick() - lastLidarBoresight)) % (360));
 8018560:	f7ea f822 	bl	80025a8 <HAL_GetTick>
 8018564:	4602      	mov	r2, r0
 8018566:	4b44      	ldr	r3, [pc, #272]	; (8018678 <showLIDAR+0x158>)
 8018568:	681b      	ldr	r3, [r3, #0]
 801856a:	1ad3      	subs	r3, r2, r3
 801856c:	ee07 3a90 	vmov	s15, r3
 8018570:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8018574:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8018660 <showLIDAR+0x140>
 8018578:	ee27 7b06 	vmul.f64	d7, d7, d6
 801857c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8018580:	ee17 2a90 	vmov	r2, s15
 8018584:	08d3      	lsrs	r3, r2, #3
 8018586:	493d      	ldr	r1, [pc, #244]	; (801867c <showLIDAR+0x15c>)
 8018588:	fba1 1303 	umull	r1, r3, r1, r3
 801858c:	089b      	lsrs	r3, r3, #2
 801858e:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8018592:	fb01 f303 	mul.w	r3, r1, r3
 8018596:	1ad3      	subs	r3, r2, r3
 8018598:	ee07 3a90 	vmov	s15, r3
 801859c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80185a0:	4b37      	ldr	r3, [pc, #220]	; (8018680 <showLIDAR+0x160>)
 80185a2:	edc3 7a00 	vstr	s15, [r3]
		lastLidarBoresight = HAL_GetTick();
 80185a6:	f7e9 ffff 	bl	80025a8 <HAL_GetTick>
 80185aa:	4603      	mov	r3, r0
 80185ac:	4a32      	ldr	r2, [pc, #200]	; (8018678 <showLIDAR+0x158>)
 80185ae:	6013      	str	r3, [r2, #0]
	}
	Paint_DrawLine(lidarCenterX, lidarCenterY, lidarCenterX + lidarRadius * cosf(receivedAnglesData->bodyAngles.Yaw * AHRSIMU_DEG2RAD),
 80185b0:	4b34      	ldr	r3, [pc, #208]	; (8018684 <showLIDAR+0x164>)
 80185b2:	681b      	ldr	r3, [r3, #0]
 80185b4:	edd3 7a03 	vldr	s15, [r3, #12]
 80185b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80185bc:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8018668 <showLIDAR+0x148>
 80185c0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80185c4:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8018670 <showLIDAR+0x150>
 80185c8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80185cc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80185d0:	eeb0 0a67 	vmov.f32	s0, s15
 80185d4:	f008 fc90 	bl	8020ef8 <cosf>
 80185d8:	eef0 7a40 	vmov.f32	s15, s0
 80185dc:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8018688 <showLIDAR+0x168>
 80185e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80185e4:	ed9f 7a29 	vldr	s14, [pc, #164]	; 801868c <showLIDAR+0x16c>
 80185e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80185ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80185f0:	ee17 3a90 	vmov	r3, s15
 80185f4:	b29c      	uxth	r4, r3
			lidarCenterY + lidarRadius * sinf(receivedAnglesData->bodyAngles.Yaw * AHRSIMU_DEG2RAD), DARKBLUE, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 80185f6:	4b23      	ldr	r3, [pc, #140]	; (8018684 <showLIDAR+0x164>)
 80185f8:	681b      	ldr	r3, [r3, #0]
 80185fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80185fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8018602:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8018668 <showLIDAR+0x148>
 8018606:	ee27 6b06 	vmul.f64	d6, d7, d6
 801860a:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8018670 <showLIDAR+0x150>
 801860e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8018612:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8018616:	eeb0 0a67 	vmov.f32	s0, s15
 801861a:	f008 fda5 	bl	8021168 <sinf>
 801861e:	eef0 7a40 	vmov.f32	s15, s0
 8018622:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8018688 <showLIDAR+0x168>
 8018626:	ee67 7a87 	vmul.f32	s15, s15, s14
 801862a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8018690 <showLIDAR+0x170>
 801862e:	ee77 7a87 	vadd.f32	s15, s15, s14
	Paint_DrawLine(lidarCenterX, lidarCenterY, lidarCenterX + lidarRadius * cosf(receivedAnglesData->bodyAngles.Yaw * AHRSIMU_DEG2RAD),
 8018632:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018636:	ee17 3a90 	vmov	r3, s15
 801863a:	b29b      	uxth	r3, r3
 801863c:	2200      	movs	r2, #0
 801863e:	9202      	str	r2, [sp, #8]
 8018640:	2201      	movs	r2, #1
 8018642:	9201      	str	r2, [sp, #4]
 8018644:	f240 12cf 	movw	r2, #463	; 0x1cf
 8018648:	9200      	str	r2, [sp, #0]
 801864a:	4622      	mov	r2, r4
 801864c:	214c      	movs	r1, #76	; 0x4c
 801864e:	2040      	movs	r0, #64	; 0x40
 8018650:	f7f7 fa7e 	bl	800fb50 <Paint_DrawLine>

}
 8018654:	bf00      	nop
 8018656:	3704      	adds	r7, #4
 8018658:	46bd      	mov	sp, r7
 801865a:	bd90      	pop	{r4, r7, pc}
 801865c:	f3af 8000 	nop.w
 8018660:	cccccccd 	.word	0xcccccccd
 8018664:	3ffccccc 	.word	0x3ffccccc
 8018668:	54442d18 	.word	0x54442d18
 801866c:	400921fb 	.word	0x400921fb
 8018670:	00000000 	.word	0x00000000
 8018674:	40668000 	.word	0x40668000
 8018678:	2400aec0 	.word	0x2400aec0
 801867c:	16c16c17 	.word	0x16c16c17
 8018680:	2400aec4 	.word	0x2400aec4
 8018684:	2400b08c 	.word	0x2400b08c
 8018688:	42480000 	.word	0x42480000
 801868c:	42800000 	.word	0x42800000
 8018690:	42980000 	.word	0x42980000

08018694 <screenUpdate>:



void screenUpdate(bool drawDeltaImage)
{
 8018694:	b580      	push	{r7, lr}
 8018696:	b082      	sub	sp, #8
 8018698:	af00      	add	r7, sp, #0
 801869a:	4603      	mov	r3, r0
 801869c:	71fb      	strb	r3, [r7, #7]
//	numberOfDisplayedSafeAirIcons = 1 * isAutoPilotDisplayed + 1 * isPlatformDisplayed +
//			1 * isTriggerModeDisplayed + 1 * isSafeAirBatteryDisplayed;
//	setIconPositionOnScreen();
	if ( (!isMenuDisplayed) && (!isPopupDisplayed) )
 801869e:	4b21      	ldr	r3, [pc, #132]	; (8018724 <screenUpdate+0x90>)
 80186a0:	781b      	ldrb	r3, [r3, #0]
 80186a2:	f083 0301 	eor.w	r3, r3, #1
 80186a6:	b2db      	uxtb	r3, r3
 80186a8:	2b00      	cmp	r3, #0
 80186aa:	d00e      	beq.n	80186ca <screenUpdate+0x36>
 80186ac:	4b1e      	ldr	r3, [pc, #120]	; (8018728 <screenUpdate+0x94>)
 80186ae:	781b      	ldrb	r3, [r3, #0]
 80186b0:	f083 0301 	eor.w	r3, r3, #1
 80186b4:	b2db      	uxtb	r3, r3
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	d007      	beq.n	80186ca <screenUpdate+0x36>
	{
		createEmptyFrame(false);
 80186ba:	2000      	movs	r0, #0
 80186bc:	f000 fe80 	bl	80193c0 <createEmptyFrame>
		showAngles();
 80186c0:	f7ff fec0 	bl	8018444 <showAngles>
		showLIDAR();
 80186c4:	f7ff ff2c 	bl	8018520 <showLIDAR>
 80186c8:	e01f      	b.n	801870a <screenUpdate+0x76>
	}
	else if (isMenuDisplayed)
 80186ca:	4b16      	ldr	r3, [pc, #88]	; (8018724 <screenUpdate+0x90>)
 80186cc:	781b      	ldrb	r3, [r3, #0]
 80186ce:	2b00      	cmp	r3, #0
 80186d0:	d01b      	beq.n	801870a <screenUpdate+0x76>
	{
		if (shouldRenderMenu)
 80186d2:	4b16      	ldr	r3, [pc, #88]	; (801872c <screenUpdate+0x98>)
 80186d4:	781b      	ldrb	r3, [r3, #0]
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	d00a      	beq.n	80186f0 <screenUpdate+0x5c>
		{
			drawMenu(shouldClearScreen, menuDrawDirection);
 80186da:	4b15      	ldr	r3, [pc, #84]	; (8018730 <screenUpdate+0x9c>)
 80186dc:	781b      	ldrb	r3, [r3, #0]
 80186de:	4a15      	ldr	r2, [pc, #84]	; (8018734 <screenUpdate+0xa0>)
 80186e0:	7812      	ldrb	r2, [r2, #0]
 80186e2:	4611      	mov	r1, r2
 80186e4:	4618      	mov	r0, r3
 80186e6:	f000 f82d 	bl	8018744 <drawMenu>
			shouldRenderMenu = false;
 80186ea:	4b10      	ldr	r3, [pc, #64]	; (801872c <screenUpdate+0x98>)
 80186ec:	2200      	movs	r2, #0
 80186ee:	701a      	strb	r2, [r3, #0]
		}
		if (shouldRenderItem)
 80186f0:	4b11      	ldr	r3, [pc, #68]	; (8018738 <screenUpdate+0xa4>)
 80186f2:	781b      	ldrb	r3, [r3, #0]
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	d008      	beq.n	801870a <screenUpdate+0x76>
		{
			drawItem(false, itemDrawDirection);
 80186f8:	4b10      	ldr	r3, [pc, #64]	; (801873c <screenUpdate+0xa8>)
 80186fa:	781b      	ldrb	r3, [r3, #0]
 80186fc:	4619      	mov	r1, r3
 80186fe:	2000      	movs	r0, #0
 8018700:	f000 f9c4 	bl	8018a8c <drawItem>
			shouldRenderItem = false;
 8018704:	4b0c      	ldr	r3, [pc, #48]	; (8018738 <screenUpdate+0xa4>)
 8018706:	2200      	movs	r2, #0
 8018708:	701a      	strb	r2, [r3, #0]
		}

	} // End of is Menu displayed
	if(shouldRenderPopup)
 801870a:	4b0d      	ldr	r3, [pc, #52]	; (8018740 <screenUpdate+0xac>)
 801870c:	781b      	ldrb	r3, [r3, #0]
 801870e:	2b00      	cmp	r3, #0
 8018710:	d004      	beq.n	801871c <screenUpdate+0x88>
	{
		drawPopup();
 8018712:	f000 fa7b 	bl	8018c0c <drawPopup>
		shouldRenderPopup = false;
 8018716:	4b0a      	ldr	r3, [pc, #40]	; (8018740 <screenUpdate+0xac>)
 8018718:	2200      	movs	r2, #0
 801871a:	701a      	strb	r2, [r3, #0]
	}
}
 801871c:	bf00      	nop
 801871e:	3708      	adds	r7, #8
 8018720:	46bd      	mov	sp, r7
 8018722:	bd80      	pop	{r7, pc}
 8018724:	2400aeb2 	.word	0x2400aeb2
 8018728:	2400aeb7 	.word	0x2400aeb7
 801872c:	2400aeb1 	.word	0x2400aeb1
 8018730:	2400aeb3 	.word	0x2400aeb3
 8018734:	2400008d 	.word	0x2400008d
 8018738:	2400aeb4 	.word	0x2400aeb4
 801873c:	2400008e 	.word	0x2400008e
 8018740:	2400aeb6 	.word	0x2400aeb6

08018744 <drawMenu>:

void drawMenu(bool clearScreen, MENUDRAWType howToDraw)
{
 8018744:	b5b0      	push	{r4, r5, r7, lr}
 8018746:	b08a      	sub	sp, #40	; 0x28
 8018748:	af04      	add	r7, sp, #16
 801874a:	4603      	mov	r3, r0
 801874c:	460a      	mov	r2, r1
 801874e:	71fb      	strb	r3, [r7, #7]
 8018750:	4613      	mov	r3, r2
 8018752:	71bb      	strb	r3, [r7, #6]
	if (clearScreen)
 8018754:	79fb      	ldrb	r3, [r7, #7]
 8018756:	2b00      	cmp	r3, #0
 8018758:	d006      	beq.n	8018768 <drawMenu+0x24>
	{
		Paint_Clear(WHITE);
 801875a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801875e:	f7f7 f91d 	bl	800f99c <Paint_Clear>
		createEmptyFrame(true);
 8018762:	2001      	movs	r0, #1
 8018764:	f000 fe2c 	bl	80193c0 <createEmptyFrame>
	}

	uint8_t MenuRectangleStartX = 0;
 8018768:	2300      	movs	r3, #0
 801876a:	75fb      	strb	r3, [r7, #23]
	uint8_t MenuRectangleStartY = 0;
 801876c:	2300      	movs	r3, #0
 801876e:	75bb      	strb	r3, [r7, #22]
	uint8_t MenuRectangleHeight = 0;
 8018770:	2300      	movs	r3, #0
 8018772:	757b      	strb	r3, [r7, #21]
	uint8_t MenuRectangleWidth = 0;
 8018774:	2300      	movs	r3, #0
 8018776:	753b      	strb	r3, [r7, #20]
	uint8_t DisplayCenterWidth = 0;
 8018778:	2300      	movs	r3, #0
 801877a:	74fb      	strb	r3, [r7, #19]

	if (isPortrait)
 801877c:	4b89      	ldr	r3, [pc, #548]	; (80189a4 <drawMenu+0x260>)
 801877e:	781b      	ldrb	r3, [r3, #0]
 8018780:	2b00      	cmp	r3, #0
 8018782:	d009      	beq.n	8018798 <drawMenu+0x54>
	{
		MenuRectangleStartX = VerticalMenuRectangleStartX;
 8018784:	2302      	movs	r3, #2
 8018786:	75fb      	strb	r3, [r7, #23]
		MenuRectangleStartY = VerticalMenuRectangleStartY;
 8018788:	230c      	movs	r3, #12
 801878a:	75bb      	strb	r3, [r7, #22]
		MenuRectangleHeight = VerticalMenuRectangleHeight;
 801878c:	230e      	movs	r3, #14
 801878e:	757b      	strb	r3, [r7, #21]
		MenuRectangleWidth = VerticalMenuRectangleWidth;
 8018790:	237c      	movs	r3, #124	; 0x7c
 8018792:	753b      	strb	r3, [r7, #20]
		DisplayCenterWidth = VerticalDisplayCenterWidth;
 8018794:	2340      	movs	r3, #64	; 0x40
 8018796:	74fb      	strb	r3, [r7, #19]
//		MenuRectangleHeight = HorizontalMenuRectangleHeight;
//		MenuRectangleWidth = HorizontalMenuRectangleWidth;
//		DisplayCenterWidth = HorizontalDisplayCenterWidth;
	}

	if (howToDraw == FULL)
 8018798:	79bb      	ldrb	r3, [r7, #6]
 801879a:	2b02      	cmp	r3, #2
 801879c:	f040 809f 	bne.w	80188de <drawMenu+0x19a>
	{
		for (int i = 0; i < pagesArray[currentCursorPosition.currentPageID].numberOfItemsInPage; i++)
 80187a0:	2300      	movs	r3, #0
 80187a2:	60fb      	str	r3, [r7, #12]
 80187a4:	e08a      	b.n	80188bc <drawMenu+0x178>
		{
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 80187a6:	7dfb      	ldrb	r3, [r7, #23]
 80187a8:	b298      	uxth	r0, r3
 80187aa:	7dbb      	ldrb	r3, [r7, #22]
 80187ac:	b29a      	uxth	r2, r3
 80187ae:	7d7b      	ldrb	r3, [r7, #21]
 80187b0:	b299      	uxth	r1, r3
 80187b2:	68fb      	ldr	r3, [r7, #12]
 80187b4:	b29b      	uxth	r3, r3
 80187b6:	fb11 f303 	smulbb	r3, r1, r3
 80187ba:	b29b      	uxth	r3, r3
 80187bc:	4413      	add	r3, r2
 80187be:	b29c      	uxth	r4, r3
 80187c0:	7dfb      	ldrb	r3, [r7, #23]
 80187c2:	b29a      	uxth	r2, r3
 80187c4:	7d3b      	ldrb	r3, [r7, #20]
 80187c6:	b29b      	uxth	r3, r3
 80187c8:	4413      	add	r3, r2
 80187ca:	b29d      	uxth	r5, r3
 80187cc:	7dbb      	ldrb	r3, [r7, #22]
 80187ce:	b29a      	uxth	r2, r3
 80187d0:	7d7b      	ldrb	r3, [r7, #21]
 80187d2:	b299      	uxth	r1, r3
					MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * ( i + 1),
 80187d4:	68fb      	ldr	r3, [r7, #12]
 80187d6:	3301      	adds	r3, #1
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 80187d8:	b29b      	uxth	r3, r3
 80187da:	fb11 f303 	smulbb	r3, r1, r3
 80187de:	b29b      	uxth	r3, r3
 80187e0:	4413      	add	r3, r2
 80187e2:	b29b      	uxth	r3, r3
 80187e4:	2200      	movs	r2, #0
 80187e6:	9202      	str	r2, [sp, #8]
 80187e8:	2201      	movs	r2, #1
 80187ea:	9201      	str	r2, [sp, #4]
 80187ec:	2200      	movs	r2, #0
 80187ee:	9200      	str	r2, [sp, #0]
 80187f0:	462a      	mov	r2, r5
 80187f2:	4621      	mov	r1, r4
 80187f4:	f7f7 fa5c 	bl	800fcb0 <Paint_DrawRectangle>
					BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
			if (i == currentCursorPosition.cursorPosition)
 80187f8:	4b6b      	ldr	r3, [pc, #428]	; (80189a8 <drawMenu+0x264>)
 80187fa:	781b      	ldrb	r3, [r3, #0]
 80187fc:	461a      	mov	r2, r3
 80187fe:	68fb      	ldr	r3, [r7, #12]
 8018800:	4293      	cmp	r3, r2
 8018802:	d12c      	bne.n	801885e <drawMenu+0x11a>
			{
				centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * i,
 8018804:	7cfb      	ldrb	r3, [r7, #19]
 8018806:	b29c      	uxth	r4, r3
 8018808:	7dbb      	ldrb	r3, [r7, #22]
 801880a:	b29a      	uxth	r2, r3
 801880c:	7d7b      	ldrb	r3, [r7, #21]
 801880e:	b299      	uxth	r1, r3
 8018810:	68fb      	ldr	r3, [r7, #12]
 8018812:	b29b      	uxth	r3, r3
 8018814:	fb11 f303 	smulbb	r3, r1, r3
 8018818:	b29b      	uxth	r3, r3
 801881a:	4413      	add	r3, r2
 801881c:	b29b      	uxth	r3, r3
 801881e:	3301      	adds	r3, #1
 8018820:	b29d      	uxth	r5, r3
						pagesArray[currentCursorPosition.currentPageID].itemsArray[i], BLACK, LGRAY, 16, Font12);
 8018822:	4b61      	ldr	r3, [pc, #388]	; (80189a8 <drawMenu+0x264>)
 8018824:	785b      	ldrb	r3, [r3, #1]
 8018826:	4619      	mov	r1, r3
 8018828:	68fb      	ldr	r3, [r7, #12]
 801882a:	330a      	adds	r3, #10
 801882c:	011a      	lsls	r2, r3, #4
 801882e:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 8018832:	fb03 f301 	mul.w	r3, r3, r1
 8018836:	4413      	add	r3, r2
 8018838:	4a5c      	ldr	r2, [pc, #368]	; (80189ac <drawMenu+0x268>)
 801883a:	4413      	add	r3, r2
 801883c:	1c9a      	adds	r2, r3, #2
				centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * i,
 801883e:	495c      	ldr	r1, [pc, #368]	; (80189b0 <drawMenu+0x26c>)
 8018840:	ab02      	add	r3, sp, #8
 8018842:	c903      	ldmia	r1, {r0, r1}
 8018844:	e883 0003 	stmia.w	r3, {r0, r1}
 8018848:	2310      	movs	r3, #16
 801884a:	9301      	str	r3, [sp, #4]
 801884c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8018850:	9300      	str	r3, [sp, #0]
 8018852:	2300      	movs	r3, #0
 8018854:	4629      	mov	r1, r5
 8018856:	4620      	mov	r0, r4
 8018858:	f7ff fd1e 	bl	8018298 <centeredString>
 801885c:	e02b      	b.n	80188b6 <drawMenu+0x172>
			}
			else
			{
				centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * i,
 801885e:	7cfb      	ldrb	r3, [r7, #19]
 8018860:	b29c      	uxth	r4, r3
 8018862:	7dbb      	ldrb	r3, [r7, #22]
 8018864:	b29a      	uxth	r2, r3
 8018866:	7d7b      	ldrb	r3, [r7, #21]
 8018868:	b299      	uxth	r1, r3
 801886a:	68fb      	ldr	r3, [r7, #12]
 801886c:	b29b      	uxth	r3, r3
 801886e:	fb11 f303 	smulbb	r3, r1, r3
 8018872:	b29b      	uxth	r3, r3
 8018874:	4413      	add	r3, r2
 8018876:	b29b      	uxth	r3, r3
 8018878:	3301      	adds	r3, #1
 801887a:	b29d      	uxth	r5, r3
						pagesArray[currentCursorPosition.currentPageID].itemsArray[i], BLACK, WHITE, 16, Font12);
 801887c:	4b4a      	ldr	r3, [pc, #296]	; (80189a8 <drawMenu+0x264>)
 801887e:	785b      	ldrb	r3, [r3, #1]
 8018880:	4619      	mov	r1, r3
 8018882:	68fb      	ldr	r3, [r7, #12]
 8018884:	330a      	adds	r3, #10
 8018886:	011a      	lsls	r2, r3, #4
 8018888:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 801888c:	fb03 f301 	mul.w	r3, r3, r1
 8018890:	4413      	add	r3, r2
 8018892:	4a46      	ldr	r2, [pc, #280]	; (80189ac <drawMenu+0x268>)
 8018894:	4413      	add	r3, r2
 8018896:	1c9a      	adds	r2, r3, #2
				centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * i,
 8018898:	4945      	ldr	r1, [pc, #276]	; (80189b0 <drawMenu+0x26c>)
 801889a:	ab02      	add	r3, sp, #8
 801889c:	c903      	ldmia	r1, {r0, r1}
 801889e:	e883 0003 	stmia.w	r3, {r0, r1}
 80188a2:	2310      	movs	r3, #16
 80188a4:	9301      	str	r3, [sp, #4]
 80188a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80188aa:	9300      	str	r3, [sp, #0]
 80188ac:	2300      	movs	r3, #0
 80188ae:	4629      	mov	r1, r5
 80188b0:	4620      	mov	r0, r4
 80188b2:	f7ff fcf1 	bl	8018298 <centeredString>
		for (int i = 0; i < pagesArray[currentCursorPosition.currentPageID].numberOfItemsInPage; i++)
 80188b6:	68fb      	ldr	r3, [r7, #12]
 80188b8:	3301      	adds	r3, #1
 80188ba:	60fb      	str	r3, [r7, #12]
 80188bc:	4b3a      	ldr	r3, [pc, #232]	; (80189a8 <drawMenu+0x264>)
 80188be:	785b      	ldrb	r3, [r3, #1]
 80188c0:	4619      	mov	r1, r3
 80188c2:	4a3a      	ldr	r2, [pc, #232]	; (80189ac <drawMenu+0x268>)
 80188c4:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 80188c8:	fb03 f301 	mul.w	r3, r3, r1
 80188cc:	4413      	add	r3, r2
 80188ce:	33a1      	adds	r3, #161	; 0xa1
 80188d0:	781b      	ldrb	r3, [r3, #0]
 80188d2:	461a      	mov	r2, r3
 80188d4:	68fb      	ldr	r3, [r7, #12]
 80188d6:	4293      	cmp	r3, r2
 80188d8:	f6ff af65 	blt.w	80187a6 <drawMenu+0x62>
		centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * (currentCursorPosition.cursorPosition - 1),
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition - 1], BLACK, WHITE, 16, Font12);
		centeredString(DisplayCenterWidth, MenuRectangleStartY+ 1 + MenuRectangleHeight * currentCursorPosition.cursorPosition,
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition], BLACK, LGRAY, 16, Font12);
	}
}
 80188dc:	e0cb      	b.n	8018a76 <drawMenu+0x332>
	else if (howToDraw == UP)
 80188de:	79bb      	ldrb	r3, [r7, #6]
 80188e0:	2b00      	cmp	r3, #0
 80188e2:	d167      	bne.n	80189b4 <drawMenu+0x270>
		centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * (currentCursorPosition.cursorPosition + 1),
 80188e4:	7cfb      	ldrb	r3, [r7, #19]
 80188e6:	b29c      	uxth	r4, r3
 80188e8:	7dbb      	ldrb	r3, [r7, #22]
 80188ea:	b29a      	uxth	r2, r3
 80188ec:	7d7b      	ldrb	r3, [r7, #21]
 80188ee:	b299      	uxth	r1, r3
 80188f0:	4b2d      	ldr	r3, [pc, #180]	; (80189a8 <drawMenu+0x264>)
 80188f2:	781b      	ldrb	r3, [r3, #0]
 80188f4:	3301      	adds	r3, #1
 80188f6:	b29b      	uxth	r3, r3
 80188f8:	fb11 f303 	smulbb	r3, r1, r3
 80188fc:	b29b      	uxth	r3, r3
 80188fe:	4413      	add	r3, r2
 8018900:	b29b      	uxth	r3, r3
 8018902:	3301      	adds	r3, #1
 8018904:	b29d      	uxth	r5, r3
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition + 1], BLACK, WHITE, 16, Font12);
 8018906:	4b28      	ldr	r3, [pc, #160]	; (80189a8 <drawMenu+0x264>)
 8018908:	785b      	ldrb	r3, [r3, #1]
 801890a:	4619      	mov	r1, r3
 801890c:	4b26      	ldr	r3, [pc, #152]	; (80189a8 <drawMenu+0x264>)
 801890e:	781b      	ldrb	r3, [r3, #0]
 8018910:	3301      	adds	r3, #1
 8018912:	330a      	adds	r3, #10
 8018914:	011a      	lsls	r2, r3, #4
 8018916:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 801891a:	fb03 f301 	mul.w	r3, r3, r1
 801891e:	4413      	add	r3, r2
 8018920:	4a22      	ldr	r2, [pc, #136]	; (80189ac <drawMenu+0x268>)
 8018922:	4413      	add	r3, r2
 8018924:	1c9a      	adds	r2, r3, #2
		centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * (currentCursorPosition.cursorPosition + 1),
 8018926:	4922      	ldr	r1, [pc, #136]	; (80189b0 <drawMenu+0x26c>)
 8018928:	ab02      	add	r3, sp, #8
 801892a:	c903      	ldmia	r1, {r0, r1}
 801892c:	e883 0003 	stmia.w	r3, {r0, r1}
 8018930:	2310      	movs	r3, #16
 8018932:	9301      	str	r3, [sp, #4]
 8018934:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018938:	9300      	str	r3, [sp, #0]
 801893a:	2300      	movs	r3, #0
 801893c:	4629      	mov	r1, r5
 801893e:	4620      	mov	r0, r4
 8018940:	f7ff fcaa 	bl	8018298 <centeredString>
		centeredString(DisplayCenterWidth, MenuRectangleStartY+ 1 + MenuRectangleHeight * currentCursorPosition.cursorPosition,
 8018944:	7cfb      	ldrb	r3, [r7, #19]
 8018946:	b29c      	uxth	r4, r3
 8018948:	7dbb      	ldrb	r3, [r7, #22]
 801894a:	b29a      	uxth	r2, r3
 801894c:	7d7b      	ldrb	r3, [r7, #21]
 801894e:	b299      	uxth	r1, r3
 8018950:	4b15      	ldr	r3, [pc, #84]	; (80189a8 <drawMenu+0x264>)
 8018952:	781b      	ldrb	r3, [r3, #0]
 8018954:	b29b      	uxth	r3, r3
 8018956:	fb11 f303 	smulbb	r3, r1, r3
 801895a:	b29b      	uxth	r3, r3
 801895c:	4413      	add	r3, r2
 801895e:	b29b      	uxth	r3, r3
 8018960:	3301      	adds	r3, #1
 8018962:	b29d      	uxth	r5, r3
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition], BLACK, LGRAY, 16, Font12);
 8018964:	4b10      	ldr	r3, [pc, #64]	; (80189a8 <drawMenu+0x264>)
 8018966:	785b      	ldrb	r3, [r3, #1]
 8018968:	4619      	mov	r1, r3
 801896a:	4b0f      	ldr	r3, [pc, #60]	; (80189a8 <drawMenu+0x264>)
 801896c:	781b      	ldrb	r3, [r3, #0]
 801896e:	330a      	adds	r3, #10
 8018970:	011a      	lsls	r2, r3, #4
 8018972:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 8018976:	fb03 f301 	mul.w	r3, r3, r1
 801897a:	4413      	add	r3, r2
 801897c:	4a0b      	ldr	r2, [pc, #44]	; (80189ac <drawMenu+0x268>)
 801897e:	4413      	add	r3, r2
 8018980:	1c9a      	adds	r2, r3, #2
		centeredString(DisplayCenterWidth, MenuRectangleStartY+ 1 + MenuRectangleHeight * currentCursorPosition.cursorPosition,
 8018982:	490b      	ldr	r1, [pc, #44]	; (80189b0 <drawMenu+0x26c>)
 8018984:	ab02      	add	r3, sp, #8
 8018986:	c903      	ldmia	r1, {r0, r1}
 8018988:	e883 0003 	stmia.w	r3, {r0, r1}
 801898c:	2310      	movs	r3, #16
 801898e:	9301      	str	r3, [sp, #4]
 8018990:	f24c 6318 	movw	r3, #50712	; 0xc618
 8018994:	9300      	str	r3, [sp, #0]
 8018996:	2300      	movs	r3, #0
 8018998:	4629      	mov	r1, r5
 801899a:	4620      	mov	r0, r4
 801899c:	f7ff fc7c 	bl	8018298 <centeredString>
}
 80189a0:	e069      	b.n	8018a76 <drawMenu+0x332>
 80189a2:	bf00      	nop
 80189a4:	2400008c 	.word	0x2400008c
 80189a8:	2400b0dc 	.word	0x2400b0dc
 80189ac:	2400f630 	.word	0x2400f630
 80189b0:	24000030 	.word	0x24000030
	else if (howToDraw == DOWN)
 80189b4:	79bb      	ldrb	r3, [r7, #6]
 80189b6:	2b01      	cmp	r3, #1
 80189b8:	d15d      	bne.n	8018a76 <drawMenu+0x332>
		centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * (currentCursorPosition.cursorPosition - 1),
 80189ba:	7cfb      	ldrb	r3, [r7, #19]
 80189bc:	b29c      	uxth	r4, r3
 80189be:	7dbb      	ldrb	r3, [r7, #22]
 80189c0:	b29a      	uxth	r2, r3
 80189c2:	7d7b      	ldrb	r3, [r7, #21]
 80189c4:	b299      	uxth	r1, r3
 80189c6:	4b2e      	ldr	r3, [pc, #184]	; (8018a80 <drawMenu+0x33c>)
 80189c8:	781b      	ldrb	r3, [r3, #0]
 80189ca:	3b01      	subs	r3, #1
 80189cc:	b29b      	uxth	r3, r3
 80189ce:	fb11 f303 	smulbb	r3, r1, r3
 80189d2:	b29b      	uxth	r3, r3
 80189d4:	4413      	add	r3, r2
 80189d6:	b29b      	uxth	r3, r3
 80189d8:	3301      	adds	r3, #1
 80189da:	b29d      	uxth	r5, r3
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition - 1], BLACK, WHITE, 16, Font12);
 80189dc:	4b28      	ldr	r3, [pc, #160]	; (8018a80 <drawMenu+0x33c>)
 80189de:	785b      	ldrb	r3, [r3, #1]
 80189e0:	4619      	mov	r1, r3
 80189e2:	4b27      	ldr	r3, [pc, #156]	; (8018a80 <drawMenu+0x33c>)
 80189e4:	781b      	ldrb	r3, [r3, #0]
 80189e6:	3b01      	subs	r3, #1
 80189e8:	330a      	adds	r3, #10
 80189ea:	011a      	lsls	r2, r3, #4
 80189ec:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 80189f0:	fb03 f301 	mul.w	r3, r3, r1
 80189f4:	4413      	add	r3, r2
 80189f6:	4a23      	ldr	r2, [pc, #140]	; (8018a84 <drawMenu+0x340>)
 80189f8:	4413      	add	r3, r2
 80189fa:	1c9a      	adds	r2, r3, #2
		centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * (currentCursorPosition.cursorPosition - 1),
 80189fc:	4922      	ldr	r1, [pc, #136]	; (8018a88 <drawMenu+0x344>)
 80189fe:	ab02      	add	r3, sp, #8
 8018a00:	c903      	ldmia	r1, {r0, r1}
 8018a02:	e883 0003 	stmia.w	r3, {r0, r1}
 8018a06:	2310      	movs	r3, #16
 8018a08:	9301      	str	r3, [sp, #4]
 8018a0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018a0e:	9300      	str	r3, [sp, #0]
 8018a10:	2300      	movs	r3, #0
 8018a12:	4629      	mov	r1, r5
 8018a14:	4620      	mov	r0, r4
 8018a16:	f7ff fc3f 	bl	8018298 <centeredString>
		centeredString(DisplayCenterWidth, MenuRectangleStartY+ 1 + MenuRectangleHeight * currentCursorPosition.cursorPosition,
 8018a1a:	7cfb      	ldrb	r3, [r7, #19]
 8018a1c:	b29c      	uxth	r4, r3
 8018a1e:	7dbb      	ldrb	r3, [r7, #22]
 8018a20:	b29a      	uxth	r2, r3
 8018a22:	7d7b      	ldrb	r3, [r7, #21]
 8018a24:	b299      	uxth	r1, r3
 8018a26:	4b16      	ldr	r3, [pc, #88]	; (8018a80 <drawMenu+0x33c>)
 8018a28:	781b      	ldrb	r3, [r3, #0]
 8018a2a:	b29b      	uxth	r3, r3
 8018a2c:	fb11 f303 	smulbb	r3, r1, r3
 8018a30:	b29b      	uxth	r3, r3
 8018a32:	4413      	add	r3, r2
 8018a34:	b29b      	uxth	r3, r3
 8018a36:	3301      	adds	r3, #1
 8018a38:	b29d      	uxth	r5, r3
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition], BLACK, LGRAY, 16, Font12);
 8018a3a:	4b11      	ldr	r3, [pc, #68]	; (8018a80 <drawMenu+0x33c>)
 8018a3c:	785b      	ldrb	r3, [r3, #1]
 8018a3e:	4619      	mov	r1, r3
 8018a40:	4b0f      	ldr	r3, [pc, #60]	; (8018a80 <drawMenu+0x33c>)
 8018a42:	781b      	ldrb	r3, [r3, #0]
 8018a44:	330a      	adds	r3, #10
 8018a46:	011a      	lsls	r2, r3, #4
 8018a48:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 8018a4c:	fb03 f301 	mul.w	r3, r3, r1
 8018a50:	4413      	add	r3, r2
 8018a52:	4a0c      	ldr	r2, [pc, #48]	; (8018a84 <drawMenu+0x340>)
 8018a54:	4413      	add	r3, r2
 8018a56:	1c9a      	adds	r2, r3, #2
		centeredString(DisplayCenterWidth, MenuRectangleStartY+ 1 + MenuRectangleHeight * currentCursorPosition.cursorPosition,
 8018a58:	490b      	ldr	r1, [pc, #44]	; (8018a88 <drawMenu+0x344>)
 8018a5a:	ab02      	add	r3, sp, #8
 8018a5c:	c903      	ldmia	r1, {r0, r1}
 8018a5e:	e883 0003 	stmia.w	r3, {r0, r1}
 8018a62:	2310      	movs	r3, #16
 8018a64:	9301      	str	r3, [sp, #4]
 8018a66:	f24c 6318 	movw	r3, #50712	; 0xc618
 8018a6a:	9300      	str	r3, [sp, #0]
 8018a6c:	2300      	movs	r3, #0
 8018a6e:	4629      	mov	r1, r5
 8018a70:	4620      	mov	r0, r4
 8018a72:	f7ff fc11 	bl	8018298 <centeredString>
}
 8018a76:	bf00      	nop
 8018a78:	3718      	adds	r7, #24
 8018a7a:	46bd      	mov	sp, r7
 8018a7c:	bdb0      	pop	{r4, r5, r7, pc}
 8018a7e:	bf00      	nop
 8018a80:	2400b0dc 	.word	0x2400b0dc
 8018a84:	2400f630 	.word	0x2400f630
 8018a88:	24000030 	.word	0x24000030

08018a8c <drawItem>:

void drawItem(bool clearScreen, MENUDRAWType howToDraw)
{
 8018a8c:	b580      	push	{r7, lr}
 8018a8e:	b082      	sub	sp, #8
 8018a90:	af00      	add	r7, sp, #0
 8018a92:	4603      	mov	r3, r0
 8018a94:	460a      	mov	r2, r1
 8018a96:	71fb      	strb	r3, [r7, #7]
 8018a98:	4613      	mov	r3, r2
 8018a9a:	71bb      	strb	r3, [r7, #6]
	if ((clearScreen) || (!isItemDisplayed) )
 8018a9c:	79fb      	ldrb	r3, [r7, #7]
 8018a9e:	2b00      	cmp	r3, #0
 8018aa0:	d106      	bne.n	8018ab0 <drawItem+0x24>
 8018aa2:	4b53      	ldr	r3, [pc, #332]	; (8018bf0 <drawItem+0x164>)
 8018aa4:	781b      	ldrb	r3, [r3, #0]
 8018aa6:	f083 0301 	eor.w	r3, r3, #1
 8018aaa:	b2db      	uxtb	r3, r3
 8018aac:	2b00      	cmp	r3, #0
 8018aae:	d006      	beq.n	8018abe <drawItem+0x32>
	{
		Paint_Clear(WHITE);
 8018ab0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8018ab4:	f7f6 ff72 	bl	800f99c <Paint_Clear>
		createEmptyFrame(true);
 8018ab8:	2001      	movs	r0, #1
 8018aba:	f000 fc81 	bl	80193c0 <createEmptyFrame>
	}
	if ( pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth - 1]].
 8018abe:	4b4d      	ldr	r3, [pc, #308]	; (8018bf4 <drawItem+0x168>)
 8018ac0:	7b1b      	ldrb	r3, [r3, #12]
 8018ac2:	3b01      	subs	r3, #1
 8018ac4:	4a4b      	ldr	r2, [pc, #300]	; (8018bf4 <drawItem+0x168>)
 8018ac6:	4413      	add	r3, r2
 8018ac8:	789b      	ldrb	r3, [r3, #2]
 8018aca:	4618      	mov	r0, r3
			cellTypeArray[currentCursorPosition.previousPageCursorPosition[currentCursorPosition.menuDepth - 1]] == UINT16_ITEM )
 8018acc:	4b49      	ldr	r3, [pc, #292]	; (8018bf4 <drawItem+0x168>)
 8018ace:	7b1b      	ldrb	r3, [r3, #12]
 8018ad0:	3b01      	subs	r3, #1
 8018ad2:	4a48      	ldr	r2, [pc, #288]	; (8018bf4 <drawItem+0x168>)
 8018ad4:	4413      	add	r3, r2
 8018ad6:	79db      	ldrb	r3, [r3, #7]
 8018ad8:	4619      	mov	r1, r3
 8018ada:	4a47      	ldr	r2, [pc, #284]	; (8018bf8 <drawItem+0x16c>)
 8018adc:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 8018ae0:	fb03 f300 	mul.w	r3, r3, r0
 8018ae4:	4413      	add	r3, r2
 8018ae6:	440b      	add	r3, r1
 8018ae8:	3380      	adds	r3, #128	; 0x80
 8018aea:	781b      	ldrb	r3, [r3, #0]
	if ( pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth - 1]].
 8018aec:	2b02      	cmp	r3, #2
 8018aee:	d130      	bne.n	8018b52 <drawItem+0xc6>
	{
		if ( !(isItemDisplayed) )
 8018af0:	4b3f      	ldr	r3, [pc, #252]	; (8018bf0 <drawItem+0x164>)
 8018af2:	781b      	ldrb	r3, [r3, #0]
 8018af4:	f083 0301 	eor.w	r3, r3, #1
 8018af8:	b2db      	uxtb	r3, r3
 8018afa:	2b00      	cmp	r3, #0
 8018afc:	d022      	beq.n	8018b44 <drawItem+0xb8>
		{
			multiplierIndex = 0;
 8018afe:	4b3f      	ldr	r3, [pc, #252]	; (8018bfc <drawItem+0x170>)
 8018b00:	2200      	movs	r2, #0
 8018b02:	701a      	strb	r2, [r3, #0]
			memcpy(&uint16Item, (uint32_t *)pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth -1]].
 8018b04:	4b3b      	ldr	r3, [pc, #236]	; (8018bf4 <drawItem+0x168>)
 8018b06:	7b1b      	ldrb	r3, [r3, #12]
 8018b08:	3b01      	subs	r3, #1
 8018b0a:	4a3a      	ldr	r2, [pc, #232]	; (8018bf4 <drawItem+0x168>)
 8018b0c:	4413      	add	r3, r2
 8018b0e:	789b      	ldrb	r3, [r3, #2]
 8018b10:	4618      	mov	r0, r3
					nextCellIDArray[currentCursorPosition.previousPageCursorPosition[currentCursorPosition.menuDepth -1]], sizeof(tUINT16_ITEM));
 8018b12:	4b38      	ldr	r3, [pc, #224]	; (8018bf4 <drawItem+0x168>)
 8018b14:	7b1b      	ldrb	r3, [r3, #12]
 8018b16:	3b01      	subs	r3, #1
 8018b18:	4a36      	ldr	r2, [pc, #216]	; (8018bf4 <drawItem+0x168>)
 8018b1a:	4413      	add	r3, r2
 8018b1c:	79db      	ldrb	r3, [r3, #7]
 8018b1e:	4619      	mov	r1, r3
 8018b20:	4a35      	ldr	r2, [pc, #212]	; (8018bf8 <drawItem+0x16c>)
 8018b22:	23a9      	movs	r3, #169	; 0xa9
 8018b24:	fb03 f300 	mul.w	r3, r3, r0
 8018b28:	440b      	add	r3, r1
 8018b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			memcpy(&uint16Item, (uint32_t *)pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth -1]].
 8018b2e:	f44f 7204 	mov.w	r2, #528	; 0x210
 8018b32:	4619      	mov	r1, r3
 8018b34:	4832      	ldr	r0, [pc, #200]	; (8018c00 <drawItem+0x174>)
 8018b36:	f003 fdb3 	bl	801c6a0 <memcpy>
			itemIDtoUpdate = uint16Item.itemID;
 8018b3a:	4b31      	ldr	r3, [pc, #196]	; (8018c00 <drawItem+0x174>)
 8018b3c:	7b9b      	ldrb	r3, [r3, #14]
 8018b3e:	461a      	mov	r2, r3
 8018b40:	4b30      	ldr	r3, [pc, #192]	; (8018c04 <drawItem+0x178>)
 8018b42:	601a      	str	r2, [r3, #0]
		}
		isItemDisplayed = true;
 8018b44:	4b2a      	ldr	r3, [pc, #168]	; (8018bf0 <drawItem+0x164>)
 8018b46:	2201      	movs	r2, #1
 8018b48:	701a      	strb	r2, [r3, #0]
		updateUint16Item(howToDraw);
 8018b4a:	79bb      	ldrb	r3, [r7, #6]
 8018b4c:	4618      	mov	r0, r3
 8018b4e:	f000 fc9b 	bl	8019488 <updateUint16Item>
	}
	if ( pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth - 1]].
 8018b52:	4b28      	ldr	r3, [pc, #160]	; (8018bf4 <drawItem+0x168>)
 8018b54:	7b1b      	ldrb	r3, [r3, #12]
 8018b56:	3b01      	subs	r3, #1
 8018b58:	4a26      	ldr	r2, [pc, #152]	; (8018bf4 <drawItem+0x168>)
 8018b5a:	4413      	add	r3, r2
 8018b5c:	789b      	ldrb	r3, [r3, #2]
 8018b5e:	4618      	mov	r0, r3
			cellTypeArray[currentCursorPosition.previousPageCursorPosition[currentCursorPosition.menuDepth - 1]] == STRING_ITEM )
 8018b60:	4b24      	ldr	r3, [pc, #144]	; (8018bf4 <drawItem+0x168>)
 8018b62:	7b1b      	ldrb	r3, [r3, #12]
 8018b64:	3b01      	subs	r3, #1
 8018b66:	4a23      	ldr	r2, [pc, #140]	; (8018bf4 <drawItem+0x168>)
 8018b68:	4413      	add	r3, r2
 8018b6a:	79db      	ldrb	r3, [r3, #7]
 8018b6c:	4619      	mov	r1, r3
 8018b6e:	4a22      	ldr	r2, [pc, #136]	; (8018bf8 <drawItem+0x16c>)
 8018b70:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 8018b74:	fb03 f300 	mul.w	r3, r3, r0
 8018b78:	4413      	add	r3, r2
 8018b7a:	440b      	add	r3, r1
 8018b7c:	3380      	adds	r3, #128	; 0x80
 8018b7e:	781b      	ldrb	r3, [r3, #0]
	if ( pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth - 1]].
 8018b80:	2b08      	cmp	r3, #8
 8018b82:	d131      	bne.n	8018be8 <drawItem+0x15c>
	{
		if ( !(isItemDisplayed) )
 8018b84:	4b1a      	ldr	r3, [pc, #104]	; (8018bf0 <drawItem+0x164>)
 8018b86:	781b      	ldrb	r3, [r3, #0]
 8018b88:	f083 0301 	eor.w	r3, r3, #1
 8018b8c:	b2db      	uxtb	r3, r3
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	d023      	beq.n	8018bda <drawItem+0x14e>
		{
			multiplierIndex = 0;
 8018b92:	4b1a      	ldr	r3, [pc, #104]	; (8018bfc <drawItem+0x170>)
 8018b94:	2200      	movs	r2, #0
 8018b96:	701a      	strb	r2, [r3, #0]
			memcpy(&stringItem, (uint32_t *)pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth -1]].
 8018b98:	4b16      	ldr	r3, [pc, #88]	; (8018bf4 <drawItem+0x168>)
 8018b9a:	7b1b      	ldrb	r3, [r3, #12]
 8018b9c:	3b01      	subs	r3, #1
 8018b9e:	4a15      	ldr	r2, [pc, #84]	; (8018bf4 <drawItem+0x168>)
 8018ba0:	4413      	add	r3, r2
 8018ba2:	789b      	ldrb	r3, [r3, #2]
 8018ba4:	4618      	mov	r0, r3
					nextCellIDArray[currentCursorPosition.previousPageCursorPosition[currentCursorPosition.menuDepth -1]], sizeof(tSTRING_ITEM));
 8018ba6:	4b13      	ldr	r3, [pc, #76]	; (8018bf4 <drawItem+0x168>)
 8018ba8:	7b1b      	ldrb	r3, [r3, #12]
 8018baa:	3b01      	subs	r3, #1
 8018bac:	4a11      	ldr	r2, [pc, #68]	; (8018bf4 <drawItem+0x168>)
 8018bae:	4413      	add	r3, r2
 8018bb0:	79db      	ldrb	r3, [r3, #7]
 8018bb2:	4619      	mov	r1, r3
 8018bb4:	4a10      	ldr	r2, [pc, #64]	; (8018bf8 <drawItem+0x16c>)
 8018bb6:	23a9      	movs	r3, #169	; 0xa9
 8018bb8:	fb03 f300 	mul.w	r3, r3, r0
 8018bbc:	440b      	add	r3, r1
 8018bbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			memcpy(&stringItem, (uint32_t *)pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth -1]].
 8018bc2:	f240 420c 	movw	r2, #1036	; 0x40c
 8018bc6:	4619      	mov	r1, r3
 8018bc8:	480f      	ldr	r0, [pc, #60]	; (8018c08 <drawItem+0x17c>)
 8018bca:	f003 fd69 	bl	801c6a0 <memcpy>
			itemIDtoUpdate = stringItem.itemID;
 8018bce:	4b0e      	ldr	r3, [pc, #56]	; (8018c08 <drawItem+0x17c>)
 8018bd0:	f893 320a 	ldrb.w	r3, [r3, #522]	; 0x20a
 8018bd4:	461a      	mov	r2, r3
 8018bd6:	4b0b      	ldr	r3, [pc, #44]	; (8018c04 <drawItem+0x178>)
 8018bd8:	601a      	str	r2, [r3, #0]
		}
		isItemDisplayed = true;
 8018bda:	4b05      	ldr	r3, [pc, #20]	; (8018bf0 <drawItem+0x164>)
 8018bdc:	2201      	movs	r2, #1
 8018bde:	701a      	strb	r2, [r3, #0]
		updateStringItem(howToDraw);
 8018be0:	79bb      	ldrb	r3, [r7, #6]
 8018be2:	4618      	mov	r0, r3
 8018be4:	f001 ff80 	bl	801aae8 <updateStringItem>
	}
}
 8018be8:	bf00      	nop
 8018bea:	3708      	adds	r7, #8
 8018bec:	46bd      	mov	sp, r7
 8018bee:	bd80      	pop	{r7, pc}
 8018bf0:	2400aeb5 	.word	0x2400aeb5
 8018bf4:	2400b0dc 	.word	0x2400b0dc
 8018bf8:	2400f630 	.word	0x2400f630
 8018bfc:	2400a110 	.word	0x2400a110
 8018c00:	2400c22c 	.word	0x2400c22c
 8018c04:	2400af60 	.word	0x2400af60
 8018c08:	2400c440 	.word	0x2400c440

08018c0c <drawPopup>:

void drawPopup(void)
{
 8018c0c:	b5b0      	push	{r4, r5, r7, lr}
 8018c0e:	b088      	sub	sp, #32
 8018c10:	af04      	add	r7, sp, #16
	uint8_t MenuRectangleStartX = 0;
 8018c12:	2300      	movs	r3, #0
 8018c14:	73fb      	strb	r3, [r7, #15]
	uint8_t MenuRectangleStartY = 0;
 8018c16:	2300      	movs	r3, #0
 8018c18:	73bb      	strb	r3, [r7, #14]
	uint8_t MenuRectangleHeight = 0;
 8018c1a:	2300      	movs	r3, #0
 8018c1c:	737b      	strb	r3, [r7, #13]
	uint8_t MenuRectangleWidth = 0;
 8018c1e:	2300      	movs	r3, #0
 8018c20:	733b      	strb	r3, [r7, #12]
	uint8_t DisplayCenterWidth = 0;
 8018c22:	2300      	movs	r3, #0
 8018c24:	72fb      	strb	r3, [r7, #11]
	uint8_t PopupRectangleHeight = 0;
 8018c26:	2300      	movs	r3, #0
 8018c28:	72bb      	strb	r3, [r7, #10]
	uint8_t QuestionRectangleHeight = 0;
 8018c2a:	2300      	movs	r3, #0
 8018c2c:	727b      	strb	r3, [r7, #9]

	if (isPortrait)
 8018c2e:	4ba3      	ldr	r3, [pc, #652]	; (8018ebc <drawPopup+0x2b0>)
 8018c30:	781b      	ldrb	r3, [r3, #0]
 8018c32:	2b00      	cmp	r3, #0
 8018c34:	d00d      	beq.n	8018c52 <drawPopup+0x46>
	{
		MenuRectangleStartX = VerticalMenuRectangleStartX;
 8018c36:	2302      	movs	r3, #2
 8018c38:	73fb      	strb	r3, [r7, #15]
		MenuRectangleStartY = VerticalMenuRectangleStartY;
 8018c3a:	230c      	movs	r3, #12
 8018c3c:	73bb      	strb	r3, [r7, #14]
		MenuRectangleHeight = VerticalMenuRectangleHeight;
 8018c3e:	230e      	movs	r3, #14
 8018c40:	737b      	strb	r3, [r7, #13]
		MenuRectangleWidth = VerticalMenuRectangleWidth;
 8018c42:	237c      	movs	r3, #124	; 0x7c
 8018c44:	733b      	strb	r3, [r7, #12]
		DisplayCenterWidth = VerticalDisplayCenterWidth;
 8018c46:	2340      	movs	r3, #64	; 0x40
 8018c48:	72fb      	strb	r3, [r7, #11]
		PopupRectangleHeight = VerticalPopupRectangleHeight;
 8018c4a:	2364      	movs	r3, #100	; 0x64
 8018c4c:	72bb      	strb	r3, [r7, #10]
		QuestionRectangleHeight = VerticalQuestionRectangleHeight;
 8018c4e:	2356      	movs	r3, #86	; 0x56
 8018c50:	727b      	strb	r3, [r7, #9]
//		DisplayCenterWidth = HorizontalDisplayCenterWidth;
//		PopupRectangleHeight = HorizontalPopupRectangleHeight;
//		QuestionRectangleHeight = HorizontalQuestionRectangleHeight;
	}

	isPopupDisplayed = true;
 8018c52:	4b9b      	ldr	r3, [pc, #620]	; (8018ec0 <drawPopup+0x2b4>)
 8018c54:	2201      	movs	r2, #1
 8018c56:	701a      	strb	r2, [r3, #0]
	isItemDisplayed = false;
 8018c58:	4b9a      	ldr	r3, [pc, #616]	; (8018ec4 <drawPopup+0x2b8>)
 8018c5a:	2200      	movs	r2, #0
 8018c5c:	701a      	strb	r2, [r3, #0]
	isMenuDisplayed = false;
 8018c5e:	4b9a      	ldr	r3, [pc, #616]	; (8018ec8 <drawPopup+0x2bc>)
 8018c60:	2200      	movs	r2, #0
 8018c62:	701a      	strb	r2, [r3, #0]
	if (popupDrawDirection == FULL)
 8018c64:	4b99      	ldr	r3, [pc, #612]	; (8018ecc <drawPopup+0x2c0>)
 8018c66:	781b      	ldrb	r3, [r3, #0]
 8018c68:	2b02      	cmp	r3, #2
 8018c6a:	f040 8097 	bne.w	8018d9c <drawPopup+0x190>
	{
		Paint_Clear(WHITE);
 8018c6e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8018c72:	f7f6 fe93 	bl	800f99c <Paint_Clear>
		createEmptyFrame(true);
 8018c76:	2001      	movs	r0, #1
 8018c78:	f000 fba2 	bl	80193c0 <createEmptyFrame>
		Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY ,
 8018c7c:	7bfb      	ldrb	r3, [r7, #15]
 8018c7e:	b298      	uxth	r0, r3
 8018c80:	7bbb      	ldrb	r3, [r7, #14]
 8018c82:	b299      	uxth	r1, r3
 8018c84:	7bfb      	ldrb	r3, [r7, #15]
 8018c86:	b29a      	uxth	r2, r3
 8018c88:	7b3b      	ldrb	r3, [r7, #12]
 8018c8a:	b29b      	uxth	r3, r3
 8018c8c:	4413      	add	r3, r2
 8018c8e:	b29c      	uxth	r4, r3
 8018c90:	7bbb      	ldrb	r3, [r7, #14]
 8018c92:	b29a      	uxth	r2, r3
 8018c94:	7abb      	ldrb	r3, [r7, #10]
 8018c96:	b29b      	uxth	r3, r3
 8018c98:	4413      	add	r3, r2
 8018c9a:	b29b      	uxth	r3, r3
 8018c9c:	2200      	movs	r2, #0
 8018c9e:	9202      	str	r2, [sp, #8]
 8018ca0:	2201      	movs	r2, #1
 8018ca2:	9201      	str	r2, [sp, #4]
 8018ca4:	2200      	movs	r2, #0
 8018ca6:	9200      	str	r2, [sp, #0]
 8018ca8:	4622      	mov	r2, r4
 8018caa:	f7f7 f801 	bl	800fcb0 <Paint_DrawRectangle>
				MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + PopupRectangleHeight,
				BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );

		if (popupToShow.isQuestion)
 8018cae:	4b88      	ldr	r3, [pc, #544]	; (8018ed0 <drawPopup+0x2c4>)
 8018cb0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8018cb4:	2b00      	cmp	r3, #0
 8018cb6:	d020      	beq.n	8018cfa <drawPopup+0xee>
		{
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + QuestionRectangleHeight,
 8018cb8:	7bfb      	ldrb	r3, [r7, #15]
 8018cba:	b298      	uxth	r0, r3
 8018cbc:	7bbb      	ldrb	r3, [r7, #14]
 8018cbe:	b29a      	uxth	r2, r3
 8018cc0:	7a7b      	ldrb	r3, [r7, #9]
 8018cc2:	b29b      	uxth	r3, r3
 8018cc4:	4413      	add	r3, r2
 8018cc6:	b299      	uxth	r1, r3
 8018cc8:	7bfb      	ldrb	r3, [r7, #15]
 8018cca:	b29a      	uxth	r2, r3
 8018ccc:	7b3b      	ldrb	r3, [r7, #12]
 8018cce:	b29b      	uxth	r3, r3
 8018cd0:	4413      	add	r3, r2
 8018cd2:	b29c      	uxth	r4, r3
					MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + QuestionRectangleHeight + MenuRectangleHeight,
 8018cd4:	7bbb      	ldrb	r3, [r7, #14]
 8018cd6:	b29a      	uxth	r2, r3
 8018cd8:	7a7b      	ldrb	r3, [r7, #9]
 8018cda:	b29b      	uxth	r3, r3
 8018cdc:	4413      	add	r3, r2
 8018cde:	b29a      	uxth	r2, r3
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + QuestionRectangleHeight,
 8018ce0:	7b7b      	ldrb	r3, [r7, #13]
 8018ce2:	b29b      	uxth	r3, r3
 8018ce4:	4413      	add	r3, r2
 8018ce6:	b29b      	uxth	r3, r3
 8018ce8:	2200      	movs	r2, #0
 8018cea:	9202      	str	r2, [sp, #8]
 8018cec:	2201      	movs	r2, #1
 8018cee:	9201      	str	r2, [sp, #4]
 8018cf0:	2200      	movs	r2, #0
 8018cf2:	9200      	str	r2, [sp, #0]
 8018cf4:	4622      	mov	r2, r4
 8018cf6:	f7f6 ffdb 	bl	800fcb0 <Paint_DrawRectangle>
					BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
		}

		Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + PopupRectangleHeight,
 8018cfa:	7bfb      	ldrb	r3, [r7, #15]
 8018cfc:	b298      	uxth	r0, r3
 8018cfe:	7bbb      	ldrb	r3, [r7, #14]
 8018d00:	b29a      	uxth	r2, r3
 8018d02:	7abb      	ldrb	r3, [r7, #10]
 8018d04:	b29b      	uxth	r3, r3
 8018d06:	4413      	add	r3, r2
 8018d08:	b299      	uxth	r1, r3
 8018d0a:	7bfb      	ldrb	r3, [r7, #15]
 8018d0c:	b29a      	uxth	r2, r3
 8018d0e:	7b3b      	ldrb	r3, [r7, #12]
 8018d10:	b29b      	uxth	r3, r3
 8018d12:	4413      	add	r3, r2
 8018d14:	b29c      	uxth	r4, r3
				MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + PopupRectangleHeight + MenuRectangleHeight,
 8018d16:	7bbb      	ldrb	r3, [r7, #14]
 8018d18:	b29a      	uxth	r2, r3
 8018d1a:	7abb      	ldrb	r3, [r7, #10]
 8018d1c:	b29b      	uxth	r3, r3
 8018d1e:	4413      	add	r3, r2
 8018d20:	b29a      	uxth	r2, r3
		Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + PopupRectangleHeight,
 8018d22:	7b7b      	ldrb	r3, [r7, #13]
 8018d24:	b29b      	uxth	r3, r3
 8018d26:	4413      	add	r3, r2
 8018d28:	b29b      	uxth	r3, r3
 8018d2a:	2200      	movs	r2, #0
 8018d2c:	9202      	str	r2, [sp, #8]
 8018d2e:	2201      	movs	r2, #1
 8018d30:	9201      	str	r2, [sp, #4]
 8018d32:	2200      	movs	r2, #0
 8018d34:	9200      	str	r2, [sp, #0]
 8018d36:	4622      	mov	r2, r4
 8018d38:	f7f6 ffba 	bl	800fcb0 <Paint_DrawRectangle>
				BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );

		for (int i = 0 ; i < popupToShow.numberOfItemsInPopup - 2; i++)
 8018d3c:	2300      	movs	r3, #0
 8018d3e:	607b      	str	r3, [r7, #4]
 8018d40:	e026      	b.n	8018d90 <drawPopup+0x184>
		{
			centeredString( DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1) + 1,
 8018d42:	7afb      	ldrb	r3, [r7, #11]
 8018d44:	b29c      	uxth	r4, r3
 8018d46:	7bbb      	ldrb	r3, [r7, #14]
 8018d48:	b29a      	uxth	r2, r3
 8018d4a:	7b7b      	ldrb	r3, [r7, #13]
 8018d4c:	b299      	uxth	r1, r3
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	3301      	adds	r3, #1
 8018d52:	b29b      	uxth	r3, r3
 8018d54:	fb11 f303 	smulbb	r3, r1, r3
 8018d58:	b29b      	uxth	r3, r3
 8018d5a:	4413      	add	r3, r2
 8018d5c:	b29b      	uxth	r3, r3
 8018d5e:	3301      	adds	r3, #1
 8018d60:	b29d      	uxth	r5, r3
					popupToShow.itemsArray[i], BLACK, WHITE, 16, Font12);
 8018d62:	687b      	ldr	r3, [r7, #4]
 8018d64:	011b      	lsls	r3, r3, #4
 8018d66:	4a5a      	ldr	r2, [pc, #360]	; (8018ed0 <drawPopup+0x2c4>)
 8018d68:	4413      	add	r3, r2
 8018d6a:	1c9a      	adds	r2, r3, #2
			centeredString( DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1) + 1,
 8018d6c:	4959      	ldr	r1, [pc, #356]	; (8018ed4 <drawPopup+0x2c8>)
 8018d6e:	ab02      	add	r3, sp, #8
 8018d70:	c903      	ldmia	r1, {r0, r1}
 8018d72:	e883 0003 	stmia.w	r3, {r0, r1}
 8018d76:	2310      	movs	r3, #16
 8018d78:	9301      	str	r3, [sp, #4]
 8018d7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018d7e:	9300      	str	r3, [sp, #0]
 8018d80:	2300      	movs	r3, #0
 8018d82:	4629      	mov	r1, r5
 8018d84:	4620      	mov	r0, r4
 8018d86:	f7ff fa87 	bl	8018298 <centeredString>
		for (int i = 0 ; i < popupToShow.numberOfItemsInPopup - 2; i++)
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	3301      	adds	r3, #1
 8018d8e:	607b      	str	r3, [r7, #4]
 8018d90:	4b4f      	ldr	r3, [pc, #316]	; (8018ed0 <drawPopup+0x2c4>)
 8018d92:	785b      	ldrb	r3, [r3, #1]
 8018d94:	3b02      	subs	r3, #2
 8018d96:	687a      	ldr	r2, [r7, #4]
 8018d98:	429a      	cmp	r2, r3
 8018d9a:	dbd2      	blt.n	8018d42 <drawPopup+0x136>
		}
	}

	if (popupToShow.isQuestion)
 8018d9c:	4b4c      	ldr	r3, [pc, #304]	; (8018ed0 <drawPopup+0x2c4>)
 8018d9e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8018da2:	2b00      	cmp	r3, #0
 8018da4:	f000 8098 	beq.w	8018ed8 <drawPopup+0x2cc>
	{
		if ( (popupDrawDirection == FULL) || (popupDrawDirection == UP))
 8018da8:	4b48      	ldr	r3, [pc, #288]	; (8018ecc <drawPopup+0x2c0>)
 8018daa:	781b      	ldrb	r3, [r3, #0]
 8018dac:	2b02      	cmp	r3, #2
 8018dae:	d003      	beq.n	8018db8 <drawPopup+0x1ac>
 8018db0:	4b46      	ldr	r3, [pc, #280]	; (8018ecc <drawPopup+0x2c0>)
 8018db2:	781b      	ldrb	r3, [r3, #0]
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	d140      	bne.n	8018e3a <drawPopup+0x22e>
		{
			centeredString( DisplayCenterWidth, MenuRectangleStartY + QuestionRectangleHeight + 1,
 8018db8:	7afb      	ldrb	r3, [r7, #11]
 8018dba:	b29c      	uxth	r4, r3
 8018dbc:	7bbb      	ldrb	r3, [r7, #14]
 8018dbe:	b29a      	uxth	r2, r3
 8018dc0:	7a7b      	ldrb	r3, [r7, #9]
 8018dc2:	b29b      	uxth	r3, r3
 8018dc4:	4413      	add	r3, r2
 8018dc6:	b29b      	uxth	r3, r3
 8018dc8:	3301      	adds	r3, #1
 8018dca:	b29d      	uxth	r5, r3
					popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 2], BLACK, LGRAY, 16, Font12);
 8018dcc:	4b40      	ldr	r3, [pc, #256]	; (8018ed0 <drawPopup+0x2c4>)
 8018dce:	785b      	ldrb	r3, [r3, #1]
 8018dd0:	3b02      	subs	r3, #2
 8018dd2:	011b      	lsls	r3, r3, #4
 8018dd4:	4a3e      	ldr	r2, [pc, #248]	; (8018ed0 <drawPopup+0x2c4>)
 8018dd6:	4413      	add	r3, r2
 8018dd8:	1c9a      	adds	r2, r3, #2
			centeredString( DisplayCenterWidth, MenuRectangleStartY + QuestionRectangleHeight + 1,
 8018dda:	493e      	ldr	r1, [pc, #248]	; (8018ed4 <drawPopup+0x2c8>)
 8018ddc:	ab02      	add	r3, sp, #8
 8018dde:	c903      	ldmia	r1, {r0, r1}
 8018de0:	e883 0003 	stmia.w	r3, {r0, r1}
 8018de4:	2310      	movs	r3, #16
 8018de6:	9301      	str	r3, [sp, #4]
 8018de8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8018dec:	9300      	str	r3, [sp, #0]
 8018dee:	2300      	movs	r3, #0
 8018df0:	4629      	mov	r1, r5
 8018df2:	4620      	mov	r0, r4
 8018df4:	f7ff fa50 	bl	8018298 <centeredString>

			centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 8018df8:	7afb      	ldrb	r3, [r7, #11]
 8018dfa:	b29c      	uxth	r4, r3
 8018dfc:	7bbb      	ldrb	r3, [r7, #14]
 8018dfe:	b29a      	uxth	r2, r3
 8018e00:	7abb      	ldrb	r3, [r7, #10]
 8018e02:	b29b      	uxth	r3, r3
 8018e04:	4413      	add	r3, r2
 8018e06:	b29b      	uxth	r3, r3
 8018e08:	3301      	adds	r3, #1
 8018e0a:	b29d      	uxth	r5, r3
					popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 1], BLACK, WHITE, 16, Font12);
 8018e0c:	4b30      	ldr	r3, [pc, #192]	; (8018ed0 <drawPopup+0x2c4>)
 8018e0e:	785b      	ldrb	r3, [r3, #1]
 8018e10:	3b01      	subs	r3, #1
 8018e12:	011b      	lsls	r3, r3, #4
 8018e14:	4a2e      	ldr	r2, [pc, #184]	; (8018ed0 <drawPopup+0x2c4>)
 8018e16:	4413      	add	r3, r2
 8018e18:	1c9a      	adds	r2, r3, #2
			centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 8018e1a:	492e      	ldr	r1, [pc, #184]	; (8018ed4 <drawPopup+0x2c8>)
 8018e1c:	ab02      	add	r3, sp, #8
 8018e1e:	c903      	ldmia	r1, {r0, r1}
 8018e20:	e883 0003 	stmia.w	r3, {r0, r1}
 8018e24:	2310      	movs	r3, #16
 8018e26:	9301      	str	r3, [sp, #4]
 8018e28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018e2c:	9300      	str	r3, [sp, #0]
 8018e2e:	2300      	movs	r3, #0
 8018e30:	4629      	mov	r1, r5
 8018e32:	4620      	mov	r0, r4
 8018e34:	f7ff fa30 	bl	8018298 <centeredString>
	else
	{
		centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
				popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 1], BLACK, LGRAY, 16, Font12);
	}
}
 8018e38:	e06e      	b.n	8018f18 <drawPopup+0x30c>
			centeredString( DisplayCenterWidth, MenuRectangleStartY + QuestionRectangleHeight + 1,
 8018e3a:	7afb      	ldrb	r3, [r7, #11]
 8018e3c:	b29c      	uxth	r4, r3
 8018e3e:	7bbb      	ldrb	r3, [r7, #14]
 8018e40:	b29a      	uxth	r2, r3
 8018e42:	7a7b      	ldrb	r3, [r7, #9]
 8018e44:	b29b      	uxth	r3, r3
 8018e46:	4413      	add	r3, r2
 8018e48:	b29b      	uxth	r3, r3
 8018e4a:	3301      	adds	r3, #1
 8018e4c:	b29d      	uxth	r5, r3
					popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 2], BLACK, WHITE, 16, Font12);
 8018e4e:	4b20      	ldr	r3, [pc, #128]	; (8018ed0 <drawPopup+0x2c4>)
 8018e50:	785b      	ldrb	r3, [r3, #1]
 8018e52:	3b02      	subs	r3, #2
 8018e54:	011b      	lsls	r3, r3, #4
 8018e56:	4a1e      	ldr	r2, [pc, #120]	; (8018ed0 <drawPopup+0x2c4>)
 8018e58:	4413      	add	r3, r2
 8018e5a:	1c9a      	adds	r2, r3, #2
			centeredString( DisplayCenterWidth, MenuRectangleStartY + QuestionRectangleHeight + 1,
 8018e5c:	491d      	ldr	r1, [pc, #116]	; (8018ed4 <drawPopup+0x2c8>)
 8018e5e:	ab02      	add	r3, sp, #8
 8018e60:	c903      	ldmia	r1, {r0, r1}
 8018e62:	e883 0003 	stmia.w	r3, {r0, r1}
 8018e66:	2310      	movs	r3, #16
 8018e68:	9301      	str	r3, [sp, #4]
 8018e6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018e6e:	9300      	str	r3, [sp, #0]
 8018e70:	2300      	movs	r3, #0
 8018e72:	4629      	mov	r1, r5
 8018e74:	4620      	mov	r0, r4
 8018e76:	f7ff fa0f 	bl	8018298 <centeredString>
			centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 8018e7a:	7afb      	ldrb	r3, [r7, #11]
 8018e7c:	b29c      	uxth	r4, r3
 8018e7e:	7bbb      	ldrb	r3, [r7, #14]
 8018e80:	b29a      	uxth	r2, r3
 8018e82:	7abb      	ldrb	r3, [r7, #10]
 8018e84:	b29b      	uxth	r3, r3
 8018e86:	4413      	add	r3, r2
 8018e88:	b29b      	uxth	r3, r3
 8018e8a:	3301      	adds	r3, #1
 8018e8c:	b29d      	uxth	r5, r3
					popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 1], BLACK, LGRAY, 16, Font12);
 8018e8e:	4b10      	ldr	r3, [pc, #64]	; (8018ed0 <drawPopup+0x2c4>)
 8018e90:	785b      	ldrb	r3, [r3, #1]
 8018e92:	3b01      	subs	r3, #1
 8018e94:	011b      	lsls	r3, r3, #4
 8018e96:	4a0e      	ldr	r2, [pc, #56]	; (8018ed0 <drawPopup+0x2c4>)
 8018e98:	4413      	add	r3, r2
 8018e9a:	1c9a      	adds	r2, r3, #2
			centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 8018e9c:	490d      	ldr	r1, [pc, #52]	; (8018ed4 <drawPopup+0x2c8>)
 8018e9e:	ab02      	add	r3, sp, #8
 8018ea0:	c903      	ldmia	r1, {r0, r1}
 8018ea2:	e883 0003 	stmia.w	r3, {r0, r1}
 8018ea6:	2310      	movs	r3, #16
 8018ea8:	9301      	str	r3, [sp, #4]
 8018eaa:	f24c 6318 	movw	r3, #50712	; 0xc618
 8018eae:	9300      	str	r3, [sp, #0]
 8018eb0:	2300      	movs	r3, #0
 8018eb2:	4629      	mov	r1, r5
 8018eb4:	4620      	mov	r0, r4
 8018eb6:	f7ff f9ef 	bl	8018298 <centeredString>
}
 8018eba:	e02d      	b.n	8018f18 <drawPopup+0x30c>
 8018ebc:	2400008c 	.word	0x2400008c
 8018ec0:	2400aeb7 	.word	0x2400aeb7
 8018ec4:	2400aeb5 	.word	0x2400aeb5
 8018ec8:	2400aeb2 	.word	0x2400aeb2
 8018ecc:	2400008f 	.word	0x2400008f
 8018ed0:	2400ca70 	.word	0x2400ca70
 8018ed4:	24000030 	.word	0x24000030
		centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 8018ed8:	7afb      	ldrb	r3, [r7, #11]
 8018eda:	b29c      	uxth	r4, r3
 8018edc:	7bbb      	ldrb	r3, [r7, #14]
 8018ede:	b29a      	uxth	r2, r3
 8018ee0:	7abb      	ldrb	r3, [r7, #10]
 8018ee2:	b29b      	uxth	r3, r3
 8018ee4:	4413      	add	r3, r2
 8018ee6:	b29b      	uxth	r3, r3
 8018ee8:	3301      	adds	r3, #1
 8018eea:	b29d      	uxth	r5, r3
				popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 1], BLACK, LGRAY, 16, Font12);
 8018eec:	4b0c      	ldr	r3, [pc, #48]	; (8018f20 <drawPopup+0x314>)
 8018eee:	785b      	ldrb	r3, [r3, #1]
 8018ef0:	3b01      	subs	r3, #1
 8018ef2:	011b      	lsls	r3, r3, #4
 8018ef4:	4a0a      	ldr	r2, [pc, #40]	; (8018f20 <drawPopup+0x314>)
 8018ef6:	4413      	add	r3, r2
 8018ef8:	1c9a      	adds	r2, r3, #2
		centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 8018efa:	490a      	ldr	r1, [pc, #40]	; (8018f24 <drawPopup+0x318>)
 8018efc:	ab02      	add	r3, sp, #8
 8018efe:	c903      	ldmia	r1, {r0, r1}
 8018f00:	e883 0003 	stmia.w	r3, {r0, r1}
 8018f04:	2310      	movs	r3, #16
 8018f06:	9301      	str	r3, [sp, #4]
 8018f08:	f24c 6318 	movw	r3, #50712	; 0xc618
 8018f0c:	9300      	str	r3, [sp, #0]
 8018f0e:	2300      	movs	r3, #0
 8018f10:	4629      	mov	r1, r5
 8018f12:	4620      	mov	r0, r4
 8018f14:	f7ff f9c0 	bl	8018298 <centeredString>
}
 8018f18:	bf00      	nop
 8018f1a:	3710      	adds	r7, #16
 8018f1c:	46bd      	mov	sp, r7
 8018f1e:	bdb0      	pop	{r4, r5, r7, pc}
 8018f20:	2400ca70 	.word	0x2400ca70
 8018f24:	24000030 	.word	0x24000030

08018f28 <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8018f28:	b580      	push	{r7, lr}
 8018f2a:	b082      	sub	sp, #8
 8018f2c:	af00      	add	r7, sp, #0
 8018f2e:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 8018f30:	4b04      	ldr	r3, [pc, #16]	; (8018f44 <HAL_HSEM_FreeCallback+0x1c>)
 8018f32:	2201      	movs	r2, #1
 8018f34:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM7 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 8018f36:	2002      	movs	r0, #2
 8018f38:	f7ee fed4 	bl	8007ce4 <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 8018f3c:	bf00      	nop
 8018f3e:	3708      	adds	r7, #8
 8018f40:	46bd      	mov	sp, r7
 8018f42:	bd80      	pop	{r7, pc}
 8018f44:	2400aec8 	.word	0x2400aec8

08018f48 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
 8018f48:	b580      	push	{r7, lr}
 8018f4a:	b082      	sub	sp, #8
 8018f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MAILBOX_INIT */

  /* USER CODE END MAILBOX_INIT */
  __HAL_RCC_HSEM_CLK_ENABLE();
 8018f4e:	4b0b      	ldr	r3, [pc, #44]	; (8018f7c <MAILBOX_Init+0x34>)
 8018f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8018f54:	4a09      	ldr	r2, [pc, #36]	; (8018f7c <MAILBOX_Init+0x34>)
 8018f56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8018f5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8018f5e:	4b07      	ldr	r3, [pc, #28]	; (8018f7c <MAILBOX_Init+0x34>)
 8018f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8018f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018f68:	607b      	str	r3, [r7, #4]
 8018f6a:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN PRE_MAILBOX_INIT_CM7 */

  /* USER CODE END PRE_MAILBOX_INIT_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 8018f6c:	2002      	movs	r0, #2
 8018f6e:	f7ee feb9 	bl	8007ce4 <HAL_HSEM_ActivateNotification>
  /* USER CODE BEGIN POST_MAILBOX_INIT_CM4 */

  /* USER CODE END POST_MAILBOX_INIT_CM4 */
#endif

  return 0;
 8018f72:	2300      	movs	r3, #0
}
 8018f74:	4618      	mov	r0, r3
 8018f76:	3708      	adds	r7, #8
 8018f78:	46bd      	mov	sp, r7
 8018f7a:	bd80      	pop	{r7, pc}
 8018f7c:	58024400 	.word	0x58024400

08018f80 <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
 8018f80:	b580      	push	{r7, lr}
 8018f82:	b082      	sub	sp, #8
 8018f84:	af00      	add	r7, sp, #0
 8018f86:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */

  if (msg_received == RX_NEW_MSG)
 8018f88:	4b09      	ldr	r3, [pc, #36]	; (8018fb0 <MAILBOX_Poll+0x30>)
 8018f8a:	681b      	ldr	r3, [r3, #0]
 8018f8c:	2b01      	cmp	r3, #1
 8018f8e:	d108      	bne.n	8018fa2 <MAILBOX_Poll+0x22>

    /* USER CODE BEGIN PRE_NEW_MSG_CM7 */

    /* USER CODE END PRE_NEW_MSG_CM7 */

    rproc_virtio_notified(vdev, VRING0_ID);
 8018f90:	2100      	movs	r1, #0
 8018f92:	6878      	ldr	r0, [r7, #4]
 8018f94:	f7fd fa5f 	bl	8016456 <rproc_virtio_notified>

    /* USER CODE BEGIN POST_NEW_MSG_CM4 */

    /* USER CODE END POST_NEW_MSG_CM4 */
#endif
    msg_received = RX_NO_MSG;
 8018f98:	4b05      	ldr	r3, [pc, #20]	; (8018fb0 <MAILBOX_Poll+0x30>)
 8018f9a:	2200      	movs	r2, #0
 8018f9c:	601a      	str	r2, [r3, #0]
    return 0;
 8018f9e:	2300      	movs	r3, #0
 8018fa0:	e001      	b.n	8018fa6 <MAILBOX_Poll+0x26>
  }

    /* USER CODE BEGIN NO_MSG */

    /* USER CODE END NO_MSG */
  return -EAGAIN;
 8018fa2:	f06f 030a 	mvn.w	r3, #10
}
 8018fa6:	4618      	mov	r0, r3
 8018fa8:	3708      	adds	r7, #8
 8018faa:	46bd      	mov	sp, r7
 8018fac:	bd80      	pop	{r7, pc}
 8018fae:	bf00      	nop
 8018fb0:	2400aec8 	.word	0x2400aec8

08018fb4 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
 8018fb4:	b580      	push	{r7, lr}
 8018fb6:	b082      	sub	sp, #8
 8018fb8:	af00      	add	r7, sp, #0
 8018fba:	6078      	str	r0, [r7, #4]
 8018fbc:	6039      	str	r1, [r7, #0]
#ifdef CORE_CM7

  /* USER CODE BEGIN  PRE_MAILBOX_NOTIFY_CM7 */

  /* USER CODE END PRE_MAILBOX_NOTIFY_CM7 */
  HAL_HSEM_FastTake(HSEM_ID_0);
 8018fbe:	2000      	movs	r0, #0
 8018fc0:	f7ee fe62 	bl	8007c88 <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_0,0);
 8018fc4:	2100      	movs	r1, #0
 8018fc6:	2000      	movs	r0, #0
 8018fc8:	f7ee fe78 	bl	8007cbc <HAL_HSEM_Release>
  /* USER CODE BEGIN  POST_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END POST_MAILBOX_NOTIFY_CM4 */
#endif

  return 0;
 8018fcc:	2300      	movs	r3, #0
}
 8018fce:	4618      	mov	r0, r3
 8018fd0:	3708      	adds	r7, #8
 8018fd2:	46bd      	mov	sp, r7
 8018fd4:	bd80      	pop	{r7, pc}

08018fd6 <is_rpmsg_ept_ready>:
 *
 * Returns 1 if the rpmsg endpoint has both local addr and destination
 * addr set, 0 otherwise
 */
static inline unsigned int is_rpmsg_ept_ready(struct rpmsg_endpoint *ept)
{
 8018fd6:	b480      	push	{r7}
 8018fd8:	b083      	sub	sp, #12
 8018fda:	af00      	add	r7, sp, #0
 8018fdc:	6078      	str	r0, [r7, #4]
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 8018fde:	687b      	ldr	r3, [r7, #4]
 8018fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018fe6:	d006      	beq.n	8018ff6 <is_rpmsg_ept_ready+0x20>
		ept->addr != RPMSG_ADDR_ANY);
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 8018fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018ff0:	d001      	beq.n	8018ff6 <is_rpmsg_ept_ready+0x20>
 8018ff2:	2301      	movs	r3, #1
 8018ff4:	e000      	b.n	8018ff8 <is_rpmsg_ept_ready+0x22>
 8018ff6:	2300      	movs	r3, #0
}
 8018ff8:	4618      	mov	r0, r3
 8018ffa:	370c      	adds	r7, #12
 8018ffc:	46bd      	mov	sp, r7
 8018ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019002:	4770      	bx	lr

08019004 <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 8019004:	b480      	push	{r7}
 8019006:	b083      	sub	sp, #12
 8019008:	af00      	add	r7, sp, #0
 801900a:	6078      	str	r0, [r7, #4]
 801900c:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
 8019012:	683a      	ldr	r2, [r7, #0]
 8019014:	429a      	cmp	r2, r3
 8019016:	d209      	bcs.n	801902c <metal_device_io_region+0x28>
 8019018:	683a      	ldr	r2, [r7, #0]
 801901a:	4613      	mov	r3, r2
 801901c:	005b      	lsls	r3, r3, #1
 801901e:	4413      	add	r3, r2
 8019020:	011b      	lsls	r3, r3, #4
 8019022:	3308      	adds	r3, #8
 8019024:	687a      	ldr	r2, [r7, #4]
 8019026:	4413      	add	r3, r2
 8019028:	3304      	adds	r3, #4
 801902a:	e000      	b.n	801902e <metal_device_io_region+0x2a>
 801902c:	2300      	movs	r3, #0
}
 801902e:	4618      	mov	r0, r3
 8019030:	370c      	adds	r7, #12
 8019032:	46bd      	mov	sp, r7
 8019034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019038:	4770      	bx	lr
	...

0801903c <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
 801903c:	b590      	push	{r4, r7, lr}
 801903e:	b08d      	sub	sp, #52	; 0x34
 8019040:	af04      	add	r7, sp, #16
 8019042:	6078      	str	r0, [r7, #4]
  int status = 0;
 8019044:	2300      	movs	r3, #0
 8019046:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
 8019048:	2300      	movs	r3, #0
 801904a:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 801904c:	4a41      	ldr	r2, [pc, #260]	; (8019154 <OPENAMP_shmem_init+0x118>)
 801904e:	f107 0310 	add.w	r3, r7, #16
 8019052:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019056:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
 801905a:	2300      	movs	r3, #0
 801905c:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
 801905e:	2300      	movs	r3, #0
 8019060:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
 8019062:	f107 0310 	add.w	r3, r7, #16
 8019066:	4618      	mov	r0, r3
 8019068:	f7fc fca8 	bl	80159bc <metal_init>

  status = metal_register_generic_device(&shm_device);
 801906c:	483a      	ldr	r0, [pc, #232]	; (8019158 <OPENAMP_shmem_init+0x11c>)
 801906e:	f7fc fb4d 	bl	801570c <metal_register_generic_device>
 8019072:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 8019074:	69fb      	ldr	r3, [r7, #28]
 8019076:	2b00      	cmp	r3, #0
 8019078:	d001      	beq.n	801907e <OPENAMP_shmem_init+0x42>
    return status;
 801907a:	69fb      	ldr	r3, [r7, #28]
 801907c:	e066      	b.n	801914c <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 801907e:	f107 0318 	add.w	r3, r7, #24
 8019082:	461a      	mov	r2, r3
 8019084:	4935      	ldr	r1, [pc, #212]	; (801915c <OPENAMP_shmem_init+0x120>)
 8019086:	4836      	ldr	r0, [pc, #216]	; (8019160 <OPENAMP_shmem_init+0x124>)
 8019088:	f7fc fb02 	bl	8015690 <metal_device_open>
 801908c:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 801908e:	69fb      	ldr	r3, [r7, #28]
 8019090:	2b00      	cmp	r3, #0
 8019092:	d001      	beq.n	8019098 <OPENAMP_shmem_init+0x5c>
    return status;
 8019094:	69fb      	ldr	r3, [r7, #28]
 8019096:	e059      	b.n	801914c <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
 8019098:	4a32      	ldr	r2, [pc, #200]	; (8019164 <OPENAMP_shmem_init+0x128>)
 801909a:	4b33      	ldr	r3, [pc, #204]	; (8019168 <OPENAMP_shmem_init+0x12c>)
 801909c:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 801909e:	69bb      	ldr	r3, [r7, #24]
 80190a0:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, -1, 0, NULL);
 80190a4:	4a31      	ldr	r2, [pc, #196]	; (801916c <OPENAMP_shmem_init+0x130>)
 80190a6:	4b2f      	ldr	r3, [pc, #188]	; (8019164 <OPENAMP_shmem_init+0x128>)
 80190a8:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 80190aa:	461a      	mov	r2, r3
 80190ac:	2300      	movs	r3, #0
 80190ae:	9302      	str	r3, [sp, #8]
 80190b0:	2300      	movs	r3, #0
 80190b2:	9301      	str	r3, [sp, #4]
 80190b4:	f04f 33ff 	mov.w	r3, #4294967295
 80190b8:	9300      	str	r3, [sp, #0]
 80190ba:	4613      	mov	r3, r2
 80190bc:	4a2a      	ldr	r2, [pc, #168]	; (8019168 <OPENAMP_shmem_init+0x12c>)
 80190be:	4929      	ldr	r1, [pc, #164]	; (8019164 <OPENAMP_shmem_init+0x128>)
 80190c0:	f7fc fcc9 	bl	8015a56 <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
 80190c4:	69bb      	ldr	r3, [r7, #24]
 80190c6:	2100      	movs	r1, #0
 80190c8:	4618      	mov	r0, r3
 80190ca:	f7ff ff9b 	bl	8019004 <metal_device_io_region>
 80190ce:	4603      	mov	r3, r0
 80190d0:	4a27      	ldr	r2, [pc, #156]	; (8019170 <OPENAMP_shmem_init+0x134>)
 80190d2:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
 80190d4:	4b26      	ldr	r3, [pc, #152]	; (8019170 <OPENAMP_shmem_init+0x134>)
 80190d6:	681b      	ldr	r3, [r3, #0]
 80190d8:	2b00      	cmp	r3, #0
 80190da:	d102      	bne.n	80190e2 <OPENAMP_shmem_init+0xa6>
    return -1;
 80190dc:	f04f 33ff 	mov.w	r3, #4294967295
 80190e0:	e034      	b.n	801914c <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
 80190e2:	f107 0208 	add.w	r2, r7, #8
 80190e6:	f107 030c 	add.w	r3, r7, #12
 80190ea:	4619      	mov	r1, r3
 80190ec:	6878      	ldr	r0, [r7, #4]
 80190ee:	f000 f91d 	bl	801932c <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
 80190f2:	68fb      	ldr	r3, [r7, #12]
 80190f4:	4a1f      	ldr	r2, [pc, #124]	; (8019174 <OPENAMP_shmem_init+0x138>)
 80190f6:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
 80190f8:	4b1e      	ldr	r3, [pc, #120]	; (8019174 <OPENAMP_shmem_init+0x138>)
 80190fa:	681b      	ldr	r3, [r3, #0]
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	d102      	bne.n	8019106 <OPENAMP_shmem_init+0xca>
  {
    return -1;
 8019100:	f04f 33ff 	mov.w	r3, #4294967295
 8019104:	e022      	b.n	801914c <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
 8019106:	69bb      	ldr	r3, [r7, #24]
 8019108:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 801910c:	4b19      	ldr	r3, [pc, #100]	; (8019174 <OPENAMP_shmem_init+0x138>)
 801910e:	6819      	ldr	r1, [r3, #0]
 8019110:	4b18      	ldr	r3, [pc, #96]	; (8019174 <OPENAMP_shmem_init+0x138>)
 8019112:	681a      	ldr	r2, [r3, #0]
 8019114:	68bb      	ldr	r3, [r7, #8]
 8019116:	461c      	mov	r4, r3
 8019118:	2300      	movs	r3, #0
 801911a:	9302      	str	r3, [sp, #8]
 801911c:	2300      	movs	r3, #0
 801911e:	9301      	str	r3, [sp, #4]
 8019120:	f04f 33ff 	mov.w	r3, #4294967295
 8019124:	9300      	str	r3, [sp, #0]
 8019126:	4623      	mov	r3, r4
 8019128:	f7fc fc95 	bl	8015a56 <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
 801912c:	69bb      	ldr	r3, [r7, #24]
 801912e:	2101      	movs	r1, #1
 8019130:	4618      	mov	r0, r3
 8019132:	f7ff ff67 	bl	8019004 <metal_device_io_region>
 8019136:	4603      	mov	r3, r0
 8019138:	4a0f      	ldr	r2, [pc, #60]	; (8019178 <OPENAMP_shmem_init+0x13c>)
 801913a:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
 801913c:	4b0e      	ldr	r3, [pc, #56]	; (8019178 <OPENAMP_shmem_init+0x13c>)
 801913e:	681b      	ldr	r3, [r3, #0]
 8019140:	2b00      	cmp	r3, #0
 8019142:	d102      	bne.n	801914a <OPENAMP_shmem_init+0x10e>
    return -1;
 8019144:	f04f 33ff 	mov.w	r3, #4294967295
 8019148:	e000      	b.n	801914c <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
 801914a:	2300      	movs	r3, #0
}
 801914c:	4618      	mov	r0, r3
 801914e:	3724      	adds	r7, #36	; 0x24
 8019150:	46bd      	mov	sp, r7
 8019152:	bd90      	pop	{r4, r7, pc}
 8019154:	08021880 	.word	0x08021880
 8019158:	2400a090 	.word	0x2400a090
 801915c:	0802186c 	.word	0x0802186c
 8019160:	08021878 	.word	0x08021878
 8019164:	38000400 	.word	0x38000400
 8019168:	2400af5c 	.word	0x2400af5c
 801916c:	38010000 	.word	0x38010000
 8019170:	2400aecc 	.word	0x2400aecc
 8019174:	2400aed4 	.word	0x2400aed4
 8019178:	2400aed0 	.word	0x2400aed0

0801917c <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
 801917c:	b590      	push	{r4, r7, lr}
 801917e:	b08b      	sub	sp, #44	; 0x2c
 8019180:	af04      	add	r7, sp, #16
 8019182:	6078      	str	r0, [r7, #4]
 8019184:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
 8019186:	2300      	movs	r3, #0
 8019188:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
 801918a:	2300      	movs	r3, #0
 801918c:	613b      	str	r3, [r7, #16]
  int status = 0;
 801918e:	2300      	movs	r3, #0
 8019190:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
 8019192:	f7ff fed9 	bl	8018f48 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
 8019196:	6878      	ldr	r0, [r7, #4]
 8019198:	f7ff ff50 	bl	801903c <OPENAMP_shmem_init>
 801919c:	60f8      	str	r0, [r7, #12]
  if(status)
 801919e:	68fb      	ldr	r3, [r7, #12]
 80191a0:	2b00      	cmp	r3, #0
 80191a2:	d001      	beq.n	80191a8 <MX_OPENAMP_Init+0x2c>
  {
    return status;
 80191a4:	68fb      	ldr	r3, [r7, #12]
 80191a6:	e06a      	b.n	801927e <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
 80191a8:	6878      	ldr	r0, [r7, #4]
 80191aa:	4b37      	ldr	r3, [pc, #220]	; (8019288 <MX_OPENAMP_Init+0x10c>)
 80191ac:	681b      	ldr	r3, [r3, #0]
 80191ae:	f103 0218 	add.w	r2, r3, #24
 80191b2:	4b36      	ldr	r3, [pc, #216]	; (801928c <MX_OPENAMP_Init+0x110>)
 80191b4:	681b      	ldr	r3, [r3, #0]
 80191b6:	2100      	movs	r1, #0
 80191b8:	9102      	str	r1, [sp, #8]
 80191ba:	4935      	ldr	r1, [pc, #212]	; (8019290 <MX_OPENAMP_Init+0x114>)
 80191bc:	9101      	str	r1, [sp, #4]
 80191be:	2100      	movs	r1, #0
 80191c0:	9100      	str	r1, [sp, #0]
 80191c2:	21ff      	movs	r1, #255	; 0xff
 80191c4:	f7fd f868 	bl	8016298 <rproc_virtio_create_vdev>
 80191c8:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
 80191ca:	693b      	ldr	r3, [r7, #16]
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	d102      	bne.n	80191d6 <MX_OPENAMP_Init+0x5a>
  {
    return -1;
 80191d0:	f04f 33ff 	mov.w	r3, #4294967295
 80191d4:	e053      	b.n	801927e <MX_OPENAMP_Init+0x102>
  }

  rproc_virtio_wait_remote_ready(vdev);
 80191d6:	6938      	ldr	r0, [r7, #16]
 80191d8:	f7fd f979 	bl	80164ce <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
 80191dc:	4b2a      	ldr	r3, [pc, #168]	; (8019288 <MX_OPENAMP_Init+0x10c>)
 80191de:	681b      	ldr	r3, [r3, #0]
 80191e0:	3334      	adds	r3, #52	; 0x34
 80191e2:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 80191e4:	697b      	ldr	r3, [r7, #20]
 80191e6:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 80191e8:	697b      	ldr	r3, [r7, #20]
 80191ea:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 80191ec:	461c      	mov	r4, r3
 80191ee:	4b29      	ldr	r3, [pc, #164]	; (8019294 <MX_OPENAMP_Init+0x118>)
 80191f0:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 80191f2:	697a      	ldr	r2, [r7, #20]
 80191f4:	6892      	ldr	r2, [r2, #8]
 80191f6:	6979      	ldr	r1, [r7, #20]
 80191f8:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 80191fa:	9102      	str	r1, [sp, #8]
 80191fc:	9201      	str	r2, [sp, #4]
 80191fe:	9300      	str	r3, [sp, #0]
 8019200:	4623      	mov	r3, r4
 8019202:	4602      	mov	r2, r0
 8019204:	2100      	movs	r1, #0
 8019206:	6938      	ldr	r0, [r7, #16]
 8019208:	f7fd f8f4 	bl	80163f4 <rproc_virtio_init_vring>
 801920c:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 801920e:	68fb      	ldr	r3, [r7, #12]
 8019210:	2b00      	cmp	r3, #0
 8019212:	d001      	beq.n	8019218 <MX_OPENAMP_Init+0x9c>
  {
    return status;
 8019214:	68fb      	ldr	r3, [r7, #12]
 8019216:	e032      	b.n	801927e <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
 8019218:	4b1b      	ldr	r3, [pc, #108]	; (8019288 <MX_OPENAMP_Init+0x10c>)
 801921a:	681b      	ldr	r3, [r3, #0]
 801921c:	3348      	adds	r3, #72	; 0x48
 801921e:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8019220:	697b      	ldr	r3, [r7, #20]
 8019222:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 8019224:	697b      	ldr	r3, [r7, #20]
 8019226:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8019228:	461c      	mov	r4, r3
 801922a:	4b1a      	ldr	r3, [pc, #104]	; (8019294 <MX_OPENAMP_Init+0x118>)
 801922c:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 801922e:	697a      	ldr	r2, [r7, #20]
 8019230:	6892      	ldr	r2, [r2, #8]
 8019232:	6979      	ldr	r1, [r7, #20]
 8019234:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8019236:	9102      	str	r1, [sp, #8]
 8019238:	9201      	str	r2, [sp, #4]
 801923a:	9300      	str	r3, [sp, #0]
 801923c:	4623      	mov	r3, r4
 801923e:	4602      	mov	r2, r0
 8019240:	2101      	movs	r1, #1
 8019242:	6938      	ldr	r0, [r7, #16]
 8019244:	f7fd f8d6 	bl	80163f4 <rproc_virtio_init_vring>
 8019248:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 801924a:	68fb      	ldr	r3, [r7, #12]
 801924c:	2b00      	cmp	r3, #0
 801924e:	d001      	beq.n	8019254 <MX_OPENAMP_Init+0xd8>
  {
    return status;
 8019250:	68fb      	ldr	r3, [r7, #12]
 8019252:	e014      	b.n	801927e <MX_OPENAMP_Init+0x102>

  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 8019254:	4b10      	ldr	r3, [pc, #64]	; (8019298 <MX_OPENAMP_Init+0x11c>)
 8019256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801925a:	4619      	mov	r1, r3
                             (size_t)SHM_SIZE);
 801925c:	4a0f      	ldr	r2, [pc, #60]	; (801929c <MX_OPENAMP_Init+0x120>)
 801925e:	4b0e      	ldr	r3, [pc, #56]	; (8019298 <MX_OPENAMP_Init+0x11c>)
 8019260:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 8019262:	461a      	mov	r2, r3
 8019264:	480e      	ldr	r0, [pc, #56]	; (80192a0 <MX_OPENAMP_Init+0x124>)
 8019266:	f7fd fda3 	bl	8016db0 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
 801926a:	4b0a      	ldr	r3, [pc, #40]	; (8019294 <MX_OPENAMP_Init+0x118>)
 801926c:	681b      	ldr	r3, [r3, #0]
 801926e:	4a0c      	ldr	r2, [pc, #48]	; (80192a0 <MX_OPENAMP_Init+0x124>)
 8019270:	9200      	str	r2, [sp, #0]
 8019272:	683a      	ldr	r2, [r7, #0]
 8019274:	6939      	ldr	r1, [r7, #16]
 8019276:	480b      	ldr	r0, [pc, #44]	; (80192a4 <MX_OPENAMP_Init+0x128>)
 8019278:	f7fe f80a 	bl	8017290 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
 801927c:	2300      	movs	r3, #0
}
 801927e:	4618      	mov	r0, r3
 8019280:	371c      	adds	r7, #28
 8019282:	46bd      	mov	sp, r7
 8019284:	bd90      	pop	{r4, r7, pc}
 8019286:	bf00      	nop
 8019288:	2400aed4 	.word	0x2400aed4
 801928c:	2400aed0 	.word	0x2400aed0
 8019290:	08018fb5 	.word	0x08018fb5
 8019294:	2400aecc 	.word	0x2400aecc
 8019298:	38000400 	.word	0x38000400
 801929c:	38010000 	.word	0x38010000
 80192a0:	2400aed8 	.word	0x2400aed8
 80192a4:	2400aee4 	.word	0x2400aee4

080192a8 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
 80192a8:	b580      	push	{r7, lr}
 80192aa:	b08a      	sub	sp, #40	; 0x28
 80192ac:	af04      	add	r7, sp, #16
 80192ae:	60f8      	str	r0, [r7, #12]
 80192b0:	60b9      	str	r1, [r7, #8]
 80192b2:	607a      	str	r2, [r7, #4]
 80192b4:	603b      	str	r3, [r7, #0]
  int ret = 0;
 80192b6:	2300      	movs	r3, #0
 80192b8:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
 80192ba:	6a3b      	ldr	r3, [r7, #32]
 80192bc:	9302      	str	r3, [sp, #8]
 80192be:	683b      	ldr	r3, [r7, #0]
 80192c0:	9301      	str	r3, [sp, #4]
 80192c2:	687b      	ldr	r3, [r7, #4]
 80192c4:	9300      	str	r3, [sp, #0]
 80192c6:	f04f 33ff 	mov.w	r3, #4294967295
 80192ca:	68ba      	ldr	r2, [r7, #8]
 80192cc:	4904      	ldr	r1, [pc, #16]	; (80192e0 <OPENAMP_create_endpoint+0x38>)
 80192ce:	68f8      	ldr	r0, [r7, #12]
 80192d0:	f7fd fb8a 	bl	80169e8 <rpmsg_create_ept>
 80192d4:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
 80192d6:	697b      	ldr	r3, [r7, #20]
}
 80192d8:	4618      	mov	r0, r3
 80192da:	3718      	adds	r7, #24
 80192dc:	46bd      	mov	sp, r7
 80192de:	bd80      	pop	{r7, pc}
 80192e0:	2400aee4 	.word	0x2400aee4

080192e4 <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
 80192e4:	b580      	push	{r7, lr}
 80192e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
 80192e8:	4b03      	ldr	r3, [pc, #12]	; (80192f8 <OPENAMP_check_for_message+0x14>)
 80192ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80192ec:	4618      	mov	r0, r3
 80192ee:	f7ff fe47 	bl	8018f80 <MAILBOX_Poll>
}
 80192f2:	bf00      	nop
 80192f4:	bd80      	pop	{r7, pc}
 80192f6:	bf00      	nop
 80192f8:	2400aee4 	.word	0x2400aee4

080192fc <OPENAMP_Wait_EndPointready>:

void OPENAMP_Wait_EndPointready(struct rpmsg_endpoint *rp_ept)
{
 80192fc:	b580      	push	{r7, lr}
 80192fe:	b082      	sub	sp, #8
 8019300:	af00      	add	r7, sp, #0
 8019302:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EP_READY */

  /* USER CODE END EP_READY */

  while(!is_rpmsg_ept_ready(rp_ept))
 8019304:	e004      	b.n	8019310 <OPENAMP_Wait_EndPointready+0x14>
  {
    /* USER CODE BEGIN 0 */

    /* USER CODE END 0 */
      MAILBOX_Poll(rvdev.vdev);
 8019306:	4b08      	ldr	r3, [pc, #32]	; (8019328 <OPENAMP_Wait_EndPointready+0x2c>)
 8019308:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801930a:	4618      	mov	r0, r3
 801930c:	f7ff fe38 	bl	8018f80 <MAILBOX_Poll>
  while(!is_rpmsg_ept_ready(rp_ept))
 8019310:	6878      	ldr	r0, [r7, #4]
 8019312:	f7ff fe60 	bl	8018fd6 <is_rpmsg_ept_ready>
 8019316:	4603      	mov	r3, r0
 8019318:	2b00      	cmp	r3, #0
 801931a:	d0f4      	beq.n	8019306 <OPENAMP_Wait_EndPointready+0xa>

    /* USER CODE BEGIN 1 */

    /* USER CODE END 1 */
  }
}
 801931c:	bf00      	nop
 801931e:	bf00      	nop
 8019320:	3708      	adds	r7, #8
 8019322:	46bd      	mov	sp, r7
 8019324:	bd80      	pop	{r7, pc}
 8019326:	bf00      	nop
 8019328:	2400aee4 	.word	0x2400aee4

0801932c <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
 801932c:	b580      	push	{r7, lr}
 801932e:	b084      	sub	sp, #16
 8019330:	af00      	add	r7, sp, #0
 8019332:	60f8      	str	r0, [r7, #12]
 8019334:	60b9      	str	r1, [r7, #8]
 8019336:	607a      	str	r2, [r7, #4]

    /*
     * Currently the GCC linker doesn't initialize the resource_table global variable at startup
     * it is done here by the master application.
     */
	memset(&resource_table, '\0', sizeof(struct shared_resource_table));
 8019338:	228c      	movs	r2, #140	; 0x8c
 801933a:	2100      	movs	r1, #0
 801933c:	481e      	ldr	r0, [pc, #120]	; (80193b8 <resource_table_init+0x8c>)
 801933e:	f003 f9d7 	bl	801c6f0 <memset>
	resource_table.num = 1;
 8019342:	4b1d      	ldr	r3, [pc, #116]	; (80193b8 <resource_table_init+0x8c>)
 8019344:	2201      	movs	r2, #1
 8019346:	605a      	str	r2, [r3, #4]
	resource_table.version = 1;
 8019348:	4b1b      	ldr	r3, [pc, #108]	; (80193b8 <resource_table_init+0x8c>)
 801934a:	2201      	movs	r2, #1
 801934c:	601a      	str	r2, [r3, #0]
	resource_table.offset[0] = offsetof(struct shared_resource_table, vdev);
 801934e:	4b1a      	ldr	r3, [pc, #104]	; (80193b8 <resource_table_init+0x8c>)
 8019350:	2218      	movs	r2, #24
 8019352:	611a      	str	r2, [r3, #16]

	resource_table.vring0.da = VRING_TX_ADDRESS;
 8019354:	4b19      	ldr	r3, [pc, #100]	; (80193bc <resource_table_init+0x90>)
 8019356:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801935a:	4a17      	ldr	r2, [pc, #92]	; (80193b8 <resource_table_init+0x8c>)
 801935c:	6353      	str	r3, [r2, #52]	; 0x34
	resource_table.vring0.align = VRING_ALIGNMENT;
 801935e:	4b16      	ldr	r3, [pc, #88]	; (80193b8 <resource_table_init+0x8c>)
 8019360:	2204      	movs	r2, #4
 8019362:	639a      	str	r2, [r3, #56]	; 0x38
	resource_table.vring0.num = VRING_NUM_BUFFS;
 8019364:	4b14      	ldr	r3, [pc, #80]	; (80193b8 <resource_table_init+0x8c>)
 8019366:	2204      	movs	r2, #4
 8019368:	63da      	str	r2, [r3, #60]	; 0x3c
	resource_table.vring0.notifyid = VRING0_ID;
 801936a:	4b13      	ldr	r3, [pc, #76]	; (80193b8 <resource_table_init+0x8c>)
 801936c:	2200      	movs	r2, #0
 801936e:	641a      	str	r2, [r3, #64]	; 0x40

	resource_table.vring1.da = VRING_RX_ADDRESS;
 8019370:	4a12      	ldr	r2, [pc, #72]	; (80193bc <resource_table_init+0x90>)
 8019372:	4b11      	ldr	r3, [pc, #68]	; (80193b8 <resource_table_init+0x8c>)
 8019374:	649a      	str	r2, [r3, #72]	; 0x48
	resource_table.vring1.align = VRING_ALIGNMENT;
 8019376:	4b10      	ldr	r3, [pc, #64]	; (80193b8 <resource_table_init+0x8c>)
 8019378:	2204      	movs	r2, #4
 801937a:	64da      	str	r2, [r3, #76]	; 0x4c
	resource_table.vring1.num = VRING_NUM_BUFFS;
 801937c:	4b0e      	ldr	r3, [pc, #56]	; (80193b8 <resource_table_init+0x8c>)
 801937e:	2204      	movs	r2, #4
 8019380:	651a      	str	r2, [r3, #80]	; 0x50
	resource_table.vring1.notifyid = VRING1_ID;
 8019382:	4b0d      	ldr	r3, [pc, #52]	; (80193b8 <resource_table_init+0x8c>)
 8019384:	2201      	movs	r2, #1
 8019386:	655a      	str	r2, [r3, #84]	; 0x54

	resource_table.vdev.type = RSC_VDEV;
 8019388:	4b0b      	ldr	r3, [pc, #44]	; (80193b8 <resource_table_init+0x8c>)
 801938a:	2203      	movs	r2, #3
 801938c:	619a      	str	r2, [r3, #24]
	resource_table.vdev.id = VIRTIO_ID_RPMSG_;
 801938e:	4b0a      	ldr	r3, [pc, #40]	; (80193b8 <resource_table_init+0x8c>)
 8019390:	2207      	movs	r2, #7
 8019392:	61da      	str	r2, [r3, #28]
	resource_table.vdev.num_of_vrings=VRING_COUNT;
 8019394:	4b08      	ldr	r3, [pc, #32]	; (80193b8 <resource_table_init+0x8c>)
 8019396:	2202      	movs	r2, #2
 8019398:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	resource_table.vdev.dfeatures = RPMSG_IPU_C0_FEATURES;
 801939c:	4b06      	ldr	r3, [pc, #24]	; (80193b8 <resource_table_init+0x8c>)
 801939e:	2201      	movs	r2, #1
 80193a0:	625a      	str	r2, [r3, #36]	; 0x24
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
 80193a2:	687b      	ldr	r3, [r7, #4]
 80193a4:	228c      	movs	r2, #140	; 0x8c
 80193a6:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
 80193a8:	68bb      	ldr	r3, [r7, #8]
 80193aa:	4a03      	ldr	r2, [pc, #12]	; (80193b8 <resource_table_init+0x8c>)
 80193ac:	601a      	str	r2, [r3, #0]
}
 80193ae:	bf00      	nop
 80193b0:	3710      	adds	r7, #16
 80193b2:	46bd      	mov	sp, r7
 80193b4:	bd80      	pop	{r7, pc}
 80193b6:	bf00      	nop
 80193b8:	38000000 	.word	0x38000000
 80193bc:	38000400 	.word	0x38000400

080193c0 <createEmptyFrame>:
uint8_t numberOfDisplayedSafeAirIcons = 0;

uint32_t LCDArraySize = 40960;

void createEmptyFrame(bool isMenuFrame)
{
 80193c0:	b580      	push	{r7, lr}
 80193c2:	b084      	sub	sp, #16
 80193c4:	af00      	add	r7, sp, #0
 80193c6:	4603      	mov	r3, r0
 80193c8:	71fb      	strb	r3, [r7, #7]
	if (!isMenuFrame)
 80193ca:	79fb      	ldrb	r3, [r7, #7]
 80193cc:	f083 0301 	eor.w	r3, r3, #1
 80193d0:	b2db      	uxtb	r3, r3
 80193d2:	2b00      	cmp	r3, #0
 80193d4:	d024      	beq.n	8019420 <createEmptyFrame+0x60>
	{
		memset(nextFrameToDraw,0x00,LCDArraySize);
 80193d6:	4b19      	ldr	r3, [pc, #100]	; (801943c <createEmptyFrame+0x7c>)
 80193d8:	681b      	ldr	r3, [r3, #0]
 80193da:	461a      	mov	r2, r3
 80193dc:	2100      	movs	r1, #0
 80193de:	4818      	ldr	r0, [pc, #96]	; (8019440 <createEmptyFrame+0x80>)
 80193e0:	f003 f986 	bl	801c6f0 <memset>

		for (int i = 0 ; i < (LCDArraySize - SCREEN_WIDTH * STATUSBAR_HEIGHT * 2) /2 ; i++)
 80193e4:	2300      	movs	r3, #0
 80193e6:	60fb      	str	r3, [r7, #12]
 80193e8:	e011      	b.n	801940e <createEmptyFrame+0x4e>
		{
			nextFrameToDraw[(i + SCREEN_WIDTH * STATUSBAR_HEIGHT) * 2] = BACKGROUND_HIGH_BYTE;
 80193ea:	68fb      	ldr	r3, [r7, #12]
 80193ec:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 80193f0:	005b      	lsls	r3, r3, #1
 80193f2:	4a13      	ldr	r2, [pc, #76]	; (8019440 <createEmptyFrame+0x80>)
 80193f4:	21ff      	movs	r1, #255	; 0xff
 80193f6:	54d1      	strb	r1, [r2, r3]
			nextFrameToDraw[(i + SCREEN_WIDTH * STATUSBAR_HEIGHT) * 2 + 1] = BACKGROUND_LOW_BYTE;
 80193f8:	68fb      	ldr	r3, [r7, #12]
 80193fa:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 80193fe:	005b      	lsls	r3, r3, #1
 8019400:	3301      	adds	r3, #1
 8019402:	4a0f      	ldr	r2, [pc, #60]	; (8019440 <createEmptyFrame+0x80>)
 8019404:	21ff      	movs	r1, #255	; 0xff
 8019406:	54d1      	strb	r1, [r2, r3]
		for (int i = 0 ; i < (LCDArraySize - SCREEN_WIDTH * STATUSBAR_HEIGHT * 2) /2 ; i++)
 8019408:	68fb      	ldr	r3, [r7, #12]
 801940a:	3301      	adds	r3, #1
 801940c:	60fb      	str	r3, [r7, #12]
 801940e:	4b0b      	ldr	r3, [pc, #44]	; (801943c <createEmptyFrame+0x7c>)
 8019410:	681b      	ldr	r3, [r3, #0]
 8019412:	f5a3 53c8 	sub.w	r3, r3, #6400	; 0x1900
 8019416:	085a      	lsrs	r2, r3, #1
 8019418:	68fb      	ldr	r3, [r7, #12]
 801941a:	429a      	cmp	r2, r3
 801941c:	d8e5      	bhi.n	80193ea <createEmptyFrame+0x2a>
	}
	else if (isMenuFrame)
	{
		memset(nextFrameToDraw,0xFF,LCDArraySize);
	}
}
 801941e:	e009      	b.n	8019434 <createEmptyFrame+0x74>
	else if (isMenuFrame)
 8019420:	79fb      	ldrb	r3, [r7, #7]
 8019422:	2b00      	cmp	r3, #0
 8019424:	d006      	beq.n	8019434 <createEmptyFrame+0x74>
		memset(nextFrameToDraw,0xFF,LCDArraySize);
 8019426:	4b05      	ldr	r3, [pc, #20]	; (801943c <createEmptyFrame+0x7c>)
 8019428:	681b      	ldr	r3, [r3, #0]
 801942a:	461a      	mov	r2, r3
 801942c:	21ff      	movs	r1, #255	; 0xff
 801942e:	4804      	ldr	r0, [pc, #16]	; (8019440 <createEmptyFrame+0x80>)
 8019430:	f003 f95e 	bl	801c6f0 <memset>
}
 8019434:	bf00      	nop
 8019436:	3710      	adds	r7, #16
 8019438:	46bd      	mov	sp, r7
 801943a:	bd80      	pop	{r7, pc}
 801943c:	2400a10c 	.word	0x2400a10c
 8019440:	24000090 	.word	0x24000090

08019444 <displayNextFrame>:

void displayNextFrame(void)
{
 8019444:	b580      	push	{r7, lr}
 8019446:	af00      	add	r7, sp, #0
//	LCD_1IN8_SetCursor(0, 0);
	if (HAL_GetTick() - lastFrameDisplayed > 30)
 8019448:	f7e9 f8ae 	bl	80025a8 <HAL_GetTick>
 801944c:	4602      	mov	r2, r0
 801944e:	4b0a      	ldr	r3, [pc, #40]	; (8019478 <displayNextFrame+0x34>)
 8019450:	681b      	ldr	r3, [r3, #0]
 8019452:	1ad3      	subs	r3, r2, r3
 8019454:	2b1e      	cmp	r3, #30
 8019456:	d90d      	bls.n	8019474 <displayNextFrame+0x30>
	{
		HAL_SPI_Transmit(&DEV_SPI, (uint8_t *)nextFrameToDraw, LCDArraySize, 1500);
 8019458:	4b08      	ldr	r3, [pc, #32]	; (801947c <displayNextFrame+0x38>)
 801945a:	681b      	ldr	r3, [r3, #0]
 801945c:	b29a      	uxth	r2, r3
 801945e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8019462:	4907      	ldr	r1, [pc, #28]	; (8019480 <displayNextFrame+0x3c>)
 8019464:	4807      	ldr	r0, [pc, #28]	; (8019484 <displayNextFrame+0x40>)
 8019466:	f7f1 fa15 	bl	800a894 <HAL_SPI_Transmit>
//		createEmptyFrame();
		lastFrameDisplayed = HAL_GetTick();
 801946a:	f7e9 f89d 	bl	80025a8 <HAL_GetTick>
 801946e:	4603      	mov	r3, r0
 8019470:	4a01      	ldr	r2, [pc, #4]	; (8019478 <displayNextFrame+0x34>)
 8019472:	6013      	str	r3, [r2, #0]
	}
}
 8019474:	bf00      	nop
 8019476:	bd80      	pop	{r7, pc}
 8019478:	2400aebc 	.word	0x2400aebc
 801947c:	2400a10c 	.word	0x2400a10c
 8019480:	24000090 	.word	0x24000090
 8019484:	2400b174 	.word	0x2400b174

08019488 <updateUint16Item>:
		}
	}
}

void updateUint16Item(MENUDRAWType howToDraw)
{
 8019488:	b5f0      	push	{r4, r5, r6, r7, lr}
 801948a:	b08f      	sub	sp, #60	; 0x3c
 801948c:	af04      	add	r7, sp, #16
 801948e:	4603      	mov	r3, r0
 8019490:	71fb      	strb	r3, [r7, #7]

	uint8_t MenuRectangleStartX = 0;
 8019492:	2300      	movs	r3, #0
 8019494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t MenuRectangleStartY = 0;
 8019498:	2300      	movs	r3, #0
 801949a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MenuRectangleHeight = 0;
 801949e:	2300      	movs	r3, #0
 80194a0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MenuRectangleWidth = 0;
 80194a4:	2300      	movs	r3, #0
 80194a6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t DisplayCenterWidth = 0;
 80194aa:	2300      	movs	r3, #0
 80194ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if (isPortrait)
 80194b0:	4b0b      	ldr	r3, [pc, #44]	; (80194e0 <updateUint16Item+0x58>)
 80194b2:	781b      	ldrb	r3, [r3, #0]
 80194b4:	2b00      	cmp	r3, #0
 80194b6:	d00e      	beq.n	80194d6 <updateUint16Item+0x4e>
	{
		MenuRectangleStartX = VerticalMenuRectangleStartX;
 80194b8:	2302      	movs	r3, #2
 80194ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		MenuRectangleStartY = VerticalMenuRectangleStartY;
 80194be:	230c      	movs	r3, #12
 80194c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		MenuRectangleHeight = VerticalMenuRectangleHeight;
 80194c4:	230e      	movs	r3, #14
 80194c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		MenuRectangleWidth = VerticalMenuRectangleWidth;
 80194ca:	237c      	movs	r3, #124	; 0x7c
 80194cc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		DisplayCenterWidth = VerticalDisplayCenterWidth;
 80194d0:	2340      	movs	r3, #64	; 0x40
 80194d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
//		MenuRectangleHeight = HorizontalMenuRectangleHeight;
//		MenuRectangleWidth = HorizontalMenuRectangleWidth;
//		DisplayCenterWidth = HorizontalDisplayCenterWidth;
	}

	for (int i = 0; i < uint16Item.numberOfItemsInPage ; i++)
 80194d6:	2300      	movs	r3, #0
 80194d8:	61fb      	str	r3, [r7, #28]
 80194da:	f001 baf3 	b.w	801aac4 <updateUint16Item+0x163c>
 80194de:	bf00      	nop
 80194e0:	2400008c 	.word	0x2400008c
	{
		if  ( (i < 2) && (howToDraw == FULL) )
 80194e4:	69fb      	ldr	r3, [r7, #28]
 80194e6:	2b01      	cmp	r3, #1
 80194e8:	dc58      	bgt.n	801959c <updateUint16Item+0x114>
 80194ea:	79fb      	ldrb	r3, [r7, #7]
 80194ec:	2b02      	cmp	r3, #2
 80194ee:	d155      	bne.n	801959c <updateUint16Item+0x114>
		{
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 80194f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80194f4:	b298      	uxth	r0, r3
 80194f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80194fa:	b29a      	uxth	r2, r3
 80194fc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019500:	b299      	uxth	r1, r3
 8019502:	69fb      	ldr	r3, [r7, #28]
 8019504:	b29b      	uxth	r3, r3
 8019506:	fb11 f303 	smulbb	r3, r1, r3
 801950a:	b29b      	uxth	r3, r3
 801950c:	4413      	add	r3, r2
 801950e:	b29c      	uxth	r4, r3
 8019510:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019514:	b29a      	uxth	r2, r3
 8019516:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801951a:	b29b      	uxth	r3, r3
 801951c:	4413      	add	r3, r2
 801951e:	b29d      	uxth	r5, r3
 8019520:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019524:	b29a      	uxth	r2, r3
 8019526:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801952a:	b299      	uxth	r1, r3
					MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 801952c:	69fb      	ldr	r3, [r7, #28]
 801952e:	3301      	adds	r3, #1
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 8019530:	b29b      	uxth	r3, r3
 8019532:	fb11 f303 	smulbb	r3, r1, r3
 8019536:	b29b      	uxth	r3, r3
 8019538:	4413      	add	r3, r2
 801953a:	b29b      	uxth	r3, r3
 801953c:	2200      	movs	r2, #0
 801953e:	9202      	str	r2, [sp, #8]
 8019540:	2201      	movs	r2, #1
 8019542:	9201      	str	r2, [sp, #4]
 8019544:	2200      	movs	r2, #0
 8019546:	9200      	str	r2, [sp, #0]
 8019548:	462a      	mov	r2, r5
 801954a:	4621      	mov	r1, r4
 801954c:	f7f6 fbb0 	bl	800fcb0 <Paint_DrawRectangle>
					BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
			centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 8019550:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019554:	b29c      	uxth	r4, r3
 8019556:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801955a:	b29a      	uxth	r2, r3
 801955c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019560:	b299      	uxth	r1, r3
 8019562:	69fb      	ldr	r3, [r7, #28]
 8019564:	b29b      	uxth	r3, r3
 8019566:	fb11 f303 	smulbb	r3, r1, r3
 801956a:	b29b      	uxth	r3, r3
 801956c:	4413      	add	r3, r2
 801956e:	b29b      	uxth	r3, r3
 8019570:	3301      	adds	r3, #1
 8019572:	b29d      	uxth	r5, r3
					uint16Item.itemsArray[i], BLACK, WHITE, 16, Font12);
 8019574:	69fb      	ldr	r3, [r7, #28]
 8019576:	3301      	adds	r3, #1
 8019578:	011b      	lsls	r3, r3, #4
 801957a:	4a9f      	ldr	r2, [pc, #636]	; (80197f8 <updateUint16Item+0x370>)
 801957c:	441a      	add	r2, r3
			centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801957e:	499f      	ldr	r1, [pc, #636]	; (80197fc <updateUint16Item+0x374>)
 8019580:	ab02      	add	r3, sp, #8
 8019582:	c903      	ldmia	r1, {r0, r1}
 8019584:	e883 0003 	stmia.w	r3, {r0, r1}
 8019588:	2310      	movs	r3, #16
 801958a:	9301      	str	r3, [sp, #4]
 801958c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019590:	9300      	str	r3, [sp, #0]
 8019592:	2300      	movs	r3, #0
 8019594:	4629      	mov	r1, r5
 8019596:	4620      	mov	r0, r4
 8019598:	f7fe fe7e 	bl	8018298 <centeredString>
		}
		if ( (i >= 2) && (i < uint16Item.numberOfItemsInPage - 2) )
 801959c:	69fb      	ldr	r3, [r7, #28]
 801959e:	2b01      	cmp	r3, #1
 80195a0:	f340 87ed 	ble.w	801a57e <updateUint16Item+0x10f6>
 80195a4:	4b94      	ldr	r3, [pc, #592]	; (80197f8 <updateUint16Item+0x370>)
 80195a6:	7bdb      	ldrb	r3, [r3, #15]
 80195a8:	3b02      	subs	r3, #2
 80195aa:	69fa      	ldr	r2, [r7, #28]
 80195ac:	429a      	cmp	r2, r3
 80195ae:	f280 87e6 	bge.w	801a57e <updateUint16Item+0x10f6>
		{
			if (howToDraw == FULL)
 80195b2:	79fb      	ldrb	r3, [r7, #7]
 80195b4:	2b02      	cmp	r3, #2
 80195b6:	d168      	bne.n	801968a <updateUint16Item+0x202>
			{
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 80195b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80195bc:	b298      	uxth	r0, r3
 80195be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80195c2:	b29a      	uxth	r2, r3
 80195c4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80195c8:	b299      	uxth	r1, r3
 80195ca:	69fb      	ldr	r3, [r7, #28]
 80195cc:	b29b      	uxth	r3, r3
 80195ce:	fb11 f303 	smulbb	r3, r1, r3
 80195d2:	b29b      	uxth	r3, r3
 80195d4:	4413      	add	r3, r2
 80195d6:	b29c      	uxth	r4, r3
 80195d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80195dc:	b29a      	uxth	r2, r3
 80195de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80195e2:	085b      	lsrs	r3, r3, #1
 80195e4:	b2db      	uxtb	r3, r3
 80195e6:	b29b      	uxth	r3, r3
 80195e8:	4413      	add	r3, r2
 80195ea:	b29d      	uxth	r5, r3
 80195ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80195f0:	b29a      	uxth	r2, r3
 80195f2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80195f6:	b299      	uxth	r1, r3
						MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 80195f8:	69fb      	ldr	r3, [r7, #28]
 80195fa:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 80195fc:	b29b      	uxth	r3, r3
 80195fe:	fb11 f303 	smulbb	r3, r1, r3
 8019602:	b29b      	uxth	r3, r3
 8019604:	4413      	add	r3, r2
 8019606:	b29b      	uxth	r3, r3
 8019608:	2200      	movs	r2, #0
 801960a:	9202      	str	r2, [sp, #8]
 801960c:	2201      	movs	r2, #1
 801960e:	9201      	str	r2, [sp, #4]
 8019610:	2200      	movs	r2, #0
 8019612:	9200      	str	r2, [sp, #0]
 8019614:	462a      	mov	r2, r5
 8019616:	4621      	mov	r1, r4
 8019618:	f7f6 fb4a 	bl	800fcb0 <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
				Paint_DrawRectangle( MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * i,
 801961c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019620:	b29a      	uxth	r2, r3
 8019622:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019626:	085b      	lsrs	r3, r3, #1
 8019628:	b2db      	uxtb	r3, r3
 801962a:	b29b      	uxth	r3, r3
 801962c:	4413      	add	r3, r2
 801962e:	b298      	uxth	r0, r3
 8019630:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019634:	b29a      	uxth	r2, r3
 8019636:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801963a:	b299      	uxth	r1, r3
 801963c:	69fb      	ldr	r3, [r7, #28]
 801963e:	b29b      	uxth	r3, r3
 8019640:	fb11 f303 	smulbb	r3, r1, r3
 8019644:	b29b      	uxth	r3, r3
 8019646:	4413      	add	r3, r2
 8019648:	b29c      	uxth	r4, r3
 801964a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801964e:	b29a      	uxth	r2, r3
 8019650:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019654:	b29b      	uxth	r3, r3
 8019656:	4413      	add	r3, r2
 8019658:	b29d      	uxth	r5, r3
 801965a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801965e:	b29a      	uxth	r2, r3
 8019660:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019664:	b299      	uxth	r1, r3
						MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 8019666:	69fb      	ldr	r3, [r7, #28]
 8019668:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * i,
 801966a:	b29b      	uxth	r3, r3
 801966c:	fb11 f303 	smulbb	r3, r1, r3
 8019670:	b29b      	uxth	r3, r3
 8019672:	4413      	add	r3, r2
 8019674:	b29b      	uxth	r3, r3
 8019676:	2200      	movs	r2, #0
 8019678:	9202      	str	r2, [sp, #8]
 801967a:	2201      	movs	r2, #1
 801967c:	9201      	str	r2, [sp, #4]
 801967e:	2200      	movs	r2, #0
 8019680:	9200      	str	r2, [sp, #0]
 8019682:	462a      	mov	r2, r5
 8019684:	4621      	mov	r1, r4
 8019686:	f7f6 fb13 	bl	800fcb0 <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
			}

			if ( (i == 2) )
 801968a:	69fb      	ldr	r3, [r7, #28]
 801968c:	2b02      	cmp	r3, #2
 801968e:	f040 83b6 	bne.w	8019dfe <updateUint16Item+0x976>
			{
				char localString[8] = "";
 8019692:	2300      	movs	r3, #0
 8019694:	617b      	str	r3, [r7, #20]
 8019696:	2300      	movs	r3, #0
 8019698:	61bb      	str	r3, [r7, #24]
				sprintf(localString,"%04d",uint16Item.startValue);
 801969a:	4b57      	ldr	r3, [pc, #348]	; (80197f8 <updateUint16Item+0x370>)
 801969c:	891b      	ldrh	r3, [r3, #8]
 801969e:	461a      	mov	r2, r3
 80196a0:	f107 0314 	add.w	r3, r7, #20
 80196a4:	4956      	ldr	r1, [pc, #344]	; (8019800 <updateUint16Item+0x378>)
 80196a6:	4618      	mov	r0, r3
 80196a8:	f004 f94c 	bl	801d944 <siprintf>
				if (currentCursorPosition.cursorPosition == 0x02)
 80196ac:	4b55      	ldr	r3, [pc, #340]	; (8019804 <updateUint16Item+0x37c>)
 80196ae:	781b      	ldrb	r3, [r3, #0]
 80196b0:	2b02      	cmp	r3, #2
 80196b2:	f040 81cd 	bne.w	8019a50 <updateUint16Item+0x5c8>
				{
					if ( (howToDraw == LEFT) || (howToDraw == FULL) )
 80196b6:	79fb      	ldrb	r3, [r7, #7]
 80196b8:	2b03      	cmp	r3, #3
 80196ba:	d003      	beq.n	80196c4 <updateUint16Item+0x23c>
 80196bc:	79fb      	ldrb	r3, [r7, #7]
 80196be:	2b02      	cmp	r3, #2
 80196c0:	f040 80a2 	bne.w	8019808 <updateUint16Item+0x380>
					{
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80196c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80196c8:	b29b      	uxth	r3, r3
 80196ca:	3301      	adds	r3, #1
 80196cc:	b298      	uxth	r0, r3
 80196ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80196d2:	b29a      	uxth	r2, r3
 80196d4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80196d8:	b299      	uxth	r1, r3
 80196da:	69fb      	ldr	r3, [r7, #28]
 80196dc:	b29b      	uxth	r3, r3
 80196de:	fb11 f303 	smulbb	r3, r1, r3
 80196e2:	b29b      	uxth	r3, r3
 80196e4:	4413      	add	r3, r2
 80196e6:	b29b      	uxth	r3, r3
 80196e8:	3301      	adds	r3, #1
 80196ea:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, LGRAY,  BLACK);
 80196ec:	69fb      	ldr	r3, [r7, #28]
 80196ee:	3301      	adds	r3, #1
 80196f0:	011b      	lsls	r3, r3, #4
 80196f2:	4a41      	ldr	r2, [pc, #260]	; (80197f8 <updateUint16Item+0x370>)
 80196f4:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80196f6:	2300      	movs	r3, #0
 80196f8:	9301      	str	r3, [sp, #4]
 80196fa:	f24c 6318 	movw	r3, #50712	; 0xc618
 80196fe:	9300      	str	r3, [sp, #0]
 8019700:	4b3e      	ldr	r3, [pc, #248]	; (80197fc <updateUint16Item+0x374>)
 8019702:	f7f6 fd79 	bl	80101f8 <Paint_DrawString_EN>
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 8019706:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801970a:	b29a      	uxth	r2, r3
 801970c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019710:	085b      	lsrs	r3, r3, #1
 8019712:	b2db      	uxtb	r3, r3
 8019714:	b29b      	uxth	r3, r3
 8019716:	4413      	add	r3, r2
 8019718:	b29b      	uxth	r3, r3
 801971a:	3301      	adds	r3, #1
 801971c:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801971e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019722:	b29a      	uxth	r2, r3
 8019724:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019728:	b299      	uxth	r1, r3
 801972a:	69fb      	ldr	r3, [r7, #28]
 801972c:	b29b      	uxth	r3, r3
 801972e:	fb11 f303 	smulbb	r3, r1, r3
 8019732:	b29b      	uxth	r3, r3
 8019734:	4413      	add	r3, r2
 8019736:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 8019738:	3301      	adds	r3, #1
 801973a:	b29e      	uxth	r6, r3
								MenuRectangleStartX + MenuRectangleWidth / 2 + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 801973c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019740:	b29a      	uxth	r2, r3
 8019742:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019746:	085b      	lsrs	r3, r3, #1
 8019748:	b2db      	uxtb	r3, r3
 801974a:	b29b      	uxth	r3, r3
 801974c:	4413      	add	r3, r2
 801974e:	b29c      	uxth	r4, r3
 8019750:	69fb      	ldr	r3, [r7, #28]
 8019752:	3301      	adds	r3, #1
 8019754:	011b      	lsls	r3, r3, #4
 8019756:	4a28      	ldr	r2, [pc, #160]	; (80197f8 <updateUint16Item+0x370>)
 8019758:	4413      	add	r3, r2
 801975a:	4618      	mov	r0, r3
 801975c:	f7e6 fdca 	bl	80002f4 <strlen>
 8019760:	4603      	mov	r3, r0
 8019762:	b29a      	uxth	r2, r3
 8019764:	4b25      	ldr	r3, [pc, #148]	; (80197fc <updateUint16Item+0x374>)
 8019766:	889b      	ldrh	r3, [r3, #4]
 8019768:	fb12 f303 	smulbb	r3, r2, r3
 801976c:	b29b      	uxth	r3, r3
 801976e:	4423      	add	r3, r4
 8019770:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 8019772:	3301      	adds	r3, #1
 8019774:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 8019776:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801977a:	b29a      	uxth	r2, r3
 801977c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019780:	b299      	uxth	r1, r3
 8019782:	69fb      	ldr	r3, [r7, #28]
 8019784:	b29b      	uxth	r3, r3
 8019786:	fb11 f303 	smulbb	r3, r1, r3
 801978a:	b29b      	uxth	r3, r3
 801978c:	4413      	add	r3, r2
 801978e:	b29a      	uxth	r2, r3
 8019790:	4b1a      	ldr	r3, [pc, #104]	; (80197fc <updateUint16Item+0x374>)
 8019792:	88db      	ldrh	r3, [r3, #6]
 8019794:	4413      	add	r3, r2
 8019796:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 8019798:	3301      	adds	r3, #1
 801979a:	b29b      	uxth	r3, r3
 801979c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80197a0:	9200      	str	r2, [sp, #0]
 80197a2:	4602      	mov	r2, r0
 80197a4:	4631      	mov	r1, r6
 80197a6:	4628      	mov	r0, r5
 80197a8:	f7f6 f908 	bl	800f9bc <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80197ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80197b0:	b29a      	uxth	r2, r3
 80197b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80197b6:	085b      	lsrs	r3, r3, #1
 80197b8:	b2db      	uxtb	r3, r3
 80197ba:	b29b      	uxth	r3, r3
 80197bc:	4413      	add	r3, r2
 80197be:	b29b      	uxth	r3, r3
 80197c0:	3301      	adds	r3, #1
 80197c2:	b298      	uxth	r0, r3
 80197c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80197c8:	b29a      	uxth	r2, r3
 80197ca:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80197ce:	b299      	uxth	r1, r3
 80197d0:	69fb      	ldr	r3, [r7, #28]
 80197d2:	b29b      	uxth	r3, r3
 80197d4:	fb11 f303 	smulbb	r3, r1, r3
 80197d8:	b29b      	uxth	r3, r3
 80197da:	4413      	add	r3, r2
 80197dc:	b29b      	uxth	r3, r3
 80197de:	3301      	adds	r3, #1
 80197e0:	b299      	uxth	r1, r3
 80197e2:	f107 0214 	add.w	r2, r7, #20
 80197e6:	2300      	movs	r3, #0
 80197e8:	9301      	str	r3, [sp, #4]
 80197ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80197ee:	9300      	str	r3, [sp, #0]
 80197f0:	4b02      	ldr	r3, [pc, #8]	; (80197fc <updateUint16Item+0x374>)
 80197f2:	f7f6 fd01 	bl	80101f8 <Paint_DrawString_EN>
 80197f6:	e302      	b.n	8019dfe <updateUint16Item+0x976>
 80197f8:	2400c22c 	.word	0x2400c22c
 80197fc:	24000030 	.word	0x24000030
 8019800:	08021894 	.word	0x08021894
 8019804:	2400b0dc 	.word	0x2400b0dc
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == DOWN)
 8019808:	79fb      	ldrb	r3, [r7, #7]
 801980a:	2b01      	cmp	r3, #1
 801980c:	f040 808c 	bne.w	8019928 <updateUint16Item+0x4a0>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019810:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019814:	b29b      	uxth	r3, r3
 8019816:	3301      	adds	r3, #1
 8019818:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801981a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801981e:	b29a      	uxth	r2, r3
 8019820:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019824:	b299      	uxth	r1, r3
 8019826:	69fb      	ldr	r3, [r7, #28]
 8019828:	b29b      	uxth	r3, r3
 801982a:	fb11 f303 	smulbb	r3, r1, r3
 801982e:	b29b      	uxth	r3, r3
 8019830:	4413      	add	r3, r2
 8019832:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019834:	3301      	adds	r3, #1
 8019836:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 8019838:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801983c:	b29c      	uxth	r4, r3
 801983e:	69fb      	ldr	r3, [r7, #28]
 8019840:	3301      	adds	r3, #1
 8019842:	011b      	lsls	r3, r3, #4
 8019844:	4a80      	ldr	r2, [pc, #512]	; (8019a48 <updateUint16Item+0x5c0>)
 8019846:	4413      	add	r3, r2
 8019848:	4618      	mov	r0, r3
 801984a:	f7e6 fd53 	bl	80002f4 <strlen>
 801984e:	4603      	mov	r3, r0
 8019850:	b29a      	uxth	r2, r3
 8019852:	4b7e      	ldr	r3, [pc, #504]	; (8019a4c <updateUint16Item+0x5c4>)
 8019854:	889b      	ldrh	r3, [r3, #4]
 8019856:	fb12 f303 	smulbb	r3, r2, r3
 801985a:	b29b      	uxth	r3, r3
 801985c:	4423      	add	r3, r4
 801985e:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019860:	3301      	adds	r3, #1
 8019862:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 8019864:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019868:	b29a      	uxth	r2, r3
 801986a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801986e:	b299      	uxth	r1, r3
 8019870:	69fb      	ldr	r3, [r7, #28]
 8019872:	b29b      	uxth	r3, r3
 8019874:	fb11 f303 	smulbb	r3, r1, r3
 8019878:	b29b      	uxth	r3, r3
 801987a:	4413      	add	r3, r2
 801987c:	b29a      	uxth	r2, r3
 801987e:	4b73      	ldr	r3, [pc, #460]	; (8019a4c <updateUint16Item+0x5c4>)
 8019880:	88db      	ldrh	r3, [r3, #6]
 8019882:	4413      	add	r3, r2
 8019884:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019886:	3301      	adds	r3, #1
 8019888:	b29b      	uxth	r3, r3
 801988a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801988e:	9200      	str	r2, [sp, #0]
 8019890:	4602      	mov	r2, r0
 8019892:	4631      	mov	r1, r6
 8019894:	4628      	mov	r0, r5
 8019896:	f7f6 f891 	bl	800f9bc <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801989a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801989e:	b29b      	uxth	r3, r3
 80198a0:	3301      	adds	r3, #1
 80198a2:	b298      	uxth	r0, r3
 80198a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80198a8:	b29a      	uxth	r2, r3
 80198aa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80198ae:	b299      	uxth	r1, r3
 80198b0:	69fb      	ldr	r3, [r7, #28]
 80198b2:	b29b      	uxth	r3, r3
 80198b4:	fb11 f303 	smulbb	r3, r1, r3
 80198b8:	b29b      	uxth	r3, r3
 80198ba:	4413      	add	r3, r2
 80198bc:	b29b      	uxth	r3, r3
 80198be:	3301      	adds	r3, #1
 80198c0:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, WHITE,  BLACK);
 80198c2:	69fb      	ldr	r3, [r7, #28]
 80198c4:	3301      	adds	r3, #1
 80198c6:	011b      	lsls	r3, r3, #4
 80198c8:	4a5f      	ldr	r2, [pc, #380]	; (8019a48 <updateUint16Item+0x5c0>)
 80198ca:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80198cc:	2300      	movs	r3, #0
 80198ce:	9301      	str	r3, [sp, #4]
 80198d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80198d4:	9300      	str	r3, [sp, #0]
 80198d6:	4b5d      	ldr	r3, [pc, #372]	; (8019a4c <updateUint16Item+0x5c4>)
 80198d8:	f7f6 fc8e 	bl	80101f8 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80198dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80198e0:	b29a      	uxth	r2, r3
 80198e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80198e6:	085b      	lsrs	r3, r3, #1
 80198e8:	b2db      	uxtb	r3, r3
 80198ea:	b29b      	uxth	r3, r3
 80198ec:	4413      	add	r3, r2
 80198ee:	b29b      	uxth	r3, r3
 80198f0:	3301      	adds	r3, #1
 80198f2:	b298      	uxth	r0, r3
 80198f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80198f8:	b29a      	uxth	r2, r3
 80198fa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80198fe:	b299      	uxth	r1, r3
 8019900:	69fb      	ldr	r3, [r7, #28]
 8019902:	b29b      	uxth	r3, r3
 8019904:	fb11 f303 	smulbb	r3, r1, r3
 8019908:	b29b      	uxth	r3, r3
 801990a:	4413      	add	r3, r2
 801990c:	b29b      	uxth	r3, r3
 801990e:	3301      	adds	r3, #1
 8019910:	b299      	uxth	r1, r3
 8019912:	f107 0214 	add.w	r2, r7, #20
 8019916:	2300      	movs	r3, #0
 8019918:	9301      	str	r3, [sp, #4]
 801991a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801991e:	9300      	str	r3, [sp, #0]
 8019920:	4b4a      	ldr	r3, [pc, #296]	; (8019a4c <updateUint16Item+0x5c4>)
 8019922:	f7f6 fc69 	bl	80101f8 <Paint_DrawString_EN>
 8019926:	e26a      	b.n	8019dfe <updateUint16Item+0x976>
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == UP)
 8019928:	79fb      	ldrb	r3, [r7, #7]
 801992a:	2b00      	cmp	r3, #0
 801992c:	f040 8267 	bne.w	8019dfe <updateUint16Item+0x976>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019934:	b29b      	uxth	r3, r3
 8019936:	3301      	adds	r3, #1
 8019938:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801993a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801993e:	b29a      	uxth	r2, r3
 8019940:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019944:	b299      	uxth	r1, r3
 8019946:	69fb      	ldr	r3, [r7, #28]
 8019948:	b29b      	uxth	r3, r3
 801994a:	fb11 f303 	smulbb	r3, r1, r3
 801994e:	b29b      	uxth	r3, r3
 8019950:	4413      	add	r3, r2
 8019952:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019954:	3301      	adds	r3, #1
 8019956:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 8019958:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801995c:	b29c      	uxth	r4, r3
 801995e:	69fb      	ldr	r3, [r7, #28]
 8019960:	3301      	adds	r3, #1
 8019962:	011b      	lsls	r3, r3, #4
 8019964:	4a38      	ldr	r2, [pc, #224]	; (8019a48 <updateUint16Item+0x5c0>)
 8019966:	4413      	add	r3, r2
 8019968:	4618      	mov	r0, r3
 801996a:	f7e6 fcc3 	bl	80002f4 <strlen>
 801996e:	4603      	mov	r3, r0
 8019970:	b29a      	uxth	r2, r3
 8019972:	4b36      	ldr	r3, [pc, #216]	; (8019a4c <updateUint16Item+0x5c4>)
 8019974:	889b      	ldrh	r3, [r3, #4]
 8019976:	fb12 f303 	smulbb	r3, r2, r3
 801997a:	b29b      	uxth	r3, r3
 801997c:	4423      	add	r3, r4
 801997e:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019980:	3301      	adds	r3, #1
 8019982:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 8019984:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019988:	b29a      	uxth	r2, r3
 801998a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801998e:	b299      	uxth	r1, r3
 8019990:	69fb      	ldr	r3, [r7, #28]
 8019992:	b29b      	uxth	r3, r3
 8019994:	fb11 f303 	smulbb	r3, r1, r3
 8019998:	b29b      	uxth	r3, r3
 801999a:	4413      	add	r3, r2
 801999c:	b29a      	uxth	r2, r3
 801999e:	4b2b      	ldr	r3, [pc, #172]	; (8019a4c <updateUint16Item+0x5c4>)
 80199a0:	88db      	ldrh	r3, [r3, #6]
 80199a2:	4413      	add	r3, r2
 80199a4:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 80199a6:	3301      	adds	r3, #1
 80199a8:	b29b      	uxth	r3, r3
 80199aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80199ae:	9200      	str	r2, [sp, #0]
 80199b0:	4602      	mov	r2, r0
 80199b2:	4631      	mov	r1, r6
 80199b4:	4628      	mov	r0, r5
 80199b6:	f7f6 f801 	bl	800f9bc <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80199ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80199be:	b29b      	uxth	r3, r3
 80199c0:	3301      	adds	r3, #1
 80199c2:	b298      	uxth	r0, r3
 80199c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80199c8:	b29a      	uxth	r2, r3
 80199ca:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80199ce:	b299      	uxth	r1, r3
 80199d0:	69fb      	ldr	r3, [r7, #28]
 80199d2:	b29b      	uxth	r3, r3
 80199d4:	fb11 f303 	smulbb	r3, r1, r3
 80199d8:	b29b      	uxth	r3, r3
 80199da:	4413      	add	r3, r2
 80199dc:	b29b      	uxth	r3, r3
 80199de:	3301      	adds	r3, #1
 80199e0:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, LGRAY,  BLACK);
 80199e2:	69fb      	ldr	r3, [r7, #28]
 80199e4:	3301      	adds	r3, #1
 80199e6:	011b      	lsls	r3, r3, #4
 80199e8:	4a17      	ldr	r2, [pc, #92]	; (8019a48 <updateUint16Item+0x5c0>)
 80199ea:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80199ec:	2300      	movs	r3, #0
 80199ee:	9301      	str	r3, [sp, #4]
 80199f0:	f24c 6318 	movw	r3, #50712	; 0xc618
 80199f4:	9300      	str	r3, [sp, #0]
 80199f6:	4b15      	ldr	r3, [pc, #84]	; (8019a4c <updateUint16Item+0x5c4>)
 80199f8:	f7f6 fbfe 	bl	80101f8 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80199fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019a00:	b29a      	uxth	r2, r3
 8019a02:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019a06:	085b      	lsrs	r3, r3, #1
 8019a08:	b2db      	uxtb	r3, r3
 8019a0a:	b29b      	uxth	r3, r3
 8019a0c:	4413      	add	r3, r2
 8019a0e:	b29b      	uxth	r3, r3
 8019a10:	3301      	adds	r3, #1
 8019a12:	b298      	uxth	r0, r3
 8019a14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019a18:	b29a      	uxth	r2, r3
 8019a1a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019a1e:	b299      	uxth	r1, r3
 8019a20:	69fb      	ldr	r3, [r7, #28]
 8019a22:	b29b      	uxth	r3, r3
 8019a24:	fb11 f303 	smulbb	r3, r1, r3
 8019a28:	b29b      	uxth	r3, r3
 8019a2a:	4413      	add	r3, r2
 8019a2c:	b29b      	uxth	r3, r3
 8019a2e:	3301      	adds	r3, #1
 8019a30:	b299      	uxth	r1, r3
 8019a32:	f107 0214 	add.w	r2, r7, #20
 8019a36:	2300      	movs	r3, #0
 8019a38:	9301      	str	r3, [sp, #4]
 8019a3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019a3e:	9300      	str	r3, [sp, #0]
 8019a40:	4b02      	ldr	r3, [pc, #8]	; (8019a4c <updateUint16Item+0x5c4>)
 8019a42:	f7f6 fbd9 	bl	80101f8 <Paint_DrawString_EN>
 8019a46:	e1da      	b.n	8019dfe <updateUint16Item+0x976>
 8019a48:	2400c22c 	.word	0x2400c22c
 8019a4c:	24000030 	.word	0x24000030
								localString, &Font12, WHITE,  BLACK);
					}

				}
				else if (currentCursorPosition.cursorPosition == VALUE)
 8019a50:	4ba1      	ldr	r3, [pc, #644]	; (8019cd8 <updateUint16Item+0x850>)
 8019a52:	781b      	ldrb	r3, [r3, #0]
 8019a54:	2b0b      	cmp	r3, #11
 8019a56:	f040 8147 	bne.w	8019ce8 <updateUint16Item+0x860>
				{
					if (howToDraw == RIGHT)
 8019a5a:	79fb      	ldrb	r3, [r7, #7]
 8019a5c:	2b04      	cmp	r3, #4
 8019a5e:	f040 808c 	bne.w	8019b7a <updateUint16Item+0x6f2>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019a62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019a66:	b29b      	uxth	r3, r3
 8019a68:	3301      	adds	r3, #1
 8019a6a:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019a6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019a70:	b29a      	uxth	r2, r3
 8019a72:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019a76:	b299      	uxth	r1, r3
 8019a78:	69fb      	ldr	r3, [r7, #28]
 8019a7a:	b29b      	uxth	r3, r3
 8019a7c:	fb11 f303 	smulbb	r3, r1, r3
 8019a80:	b29b      	uxth	r3, r3
 8019a82:	4413      	add	r3, r2
 8019a84:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019a86:	3301      	adds	r3, #1
 8019a88:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 8019a8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019a8e:	b29c      	uxth	r4, r3
 8019a90:	69fb      	ldr	r3, [r7, #28]
 8019a92:	3301      	adds	r3, #1
 8019a94:	011b      	lsls	r3, r3, #4
 8019a96:	4a91      	ldr	r2, [pc, #580]	; (8019cdc <updateUint16Item+0x854>)
 8019a98:	4413      	add	r3, r2
 8019a9a:	4618      	mov	r0, r3
 8019a9c:	f7e6 fc2a 	bl	80002f4 <strlen>
 8019aa0:	4603      	mov	r3, r0
 8019aa2:	b29a      	uxth	r2, r3
 8019aa4:	4b8e      	ldr	r3, [pc, #568]	; (8019ce0 <updateUint16Item+0x858>)
 8019aa6:	889b      	ldrh	r3, [r3, #4]
 8019aa8:	fb12 f303 	smulbb	r3, r2, r3
 8019aac:	b29b      	uxth	r3, r3
 8019aae:	4423      	add	r3, r4
 8019ab0:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019ab2:	3301      	adds	r3, #1
 8019ab4:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 8019ab6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019aba:	b29a      	uxth	r2, r3
 8019abc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019ac0:	b299      	uxth	r1, r3
 8019ac2:	69fb      	ldr	r3, [r7, #28]
 8019ac4:	b29b      	uxth	r3, r3
 8019ac6:	fb11 f303 	smulbb	r3, r1, r3
 8019aca:	b29b      	uxth	r3, r3
 8019acc:	4413      	add	r3, r2
 8019ace:	b29a      	uxth	r2, r3
 8019ad0:	4b83      	ldr	r3, [pc, #524]	; (8019ce0 <updateUint16Item+0x858>)
 8019ad2:	88db      	ldrh	r3, [r3, #6]
 8019ad4:	4413      	add	r3, r2
 8019ad6:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019ad8:	3301      	adds	r3, #1
 8019ada:	b29b      	uxth	r3, r3
 8019adc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019ae0:	9200      	str	r2, [sp, #0]
 8019ae2:	4602      	mov	r2, r0
 8019ae4:	4631      	mov	r1, r6
 8019ae6:	4628      	mov	r0, r5
 8019ae8:	f7f5 ff68 	bl	800f9bc <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019aec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019af0:	b29b      	uxth	r3, r3
 8019af2:	3301      	adds	r3, #1
 8019af4:	b298      	uxth	r0, r3
 8019af6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019afa:	b29a      	uxth	r2, r3
 8019afc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019b00:	b299      	uxth	r1, r3
 8019b02:	69fb      	ldr	r3, [r7, #28]
 8019b04:	b29b      	uxth	r3, r3
 8019b06:	fb11 f303 	smulbb	r3, r1, r3
 8019b0a:	b29b      	uxth	r3, r3
 8019b0c:	4413      	add	r3, r2
 8019b0e:	b29b      	uxth	r3, r3
 8019b10:	3301      	adds	r3, #1
 8019b12:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, WHITE,  BLACK);
 8019b14:	69fb      	ldr	r3, [r7, #28]
 8019b16:	3301      	adds	r3, #1
 8019b18:	011b      	lsls	r3, r3, #4
 8019b1a:	4a70      	ldr	r2, [pc, #448]	; (8019cdc <updateUint16Item+0x854>)
 8019b1c:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019b1e:	2300      	movs	r3, #0
 8019b20:	9301      	str	r3, [sp, #4]
 8019b22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019b26:	9300      	str	r3, [sp, #0]
 8019b28:	4b6d      	ldr	r3, [pc, #436]	; (8019ce0 <updateUint16Item+0x858>)
 8019b2a:	f7f6 fb65 	bl	80101f8 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019b2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019b32:	b29a      	uxth	r2, r3
 8019b34:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019b38:	085b      	lsrs	r3, r3, #1
 8019b3a:	b2db      	uxtb	r3, r3
 8019b3c:	b29b      	uxth	r3, r3
 8019b3e:	4413      	add	r3, r2
 8019b40:	b29b      	uxth	r3, r3
 8019b42:	3301      	adds	r3, #1
 8019b44:	b298      	uxth	r0, r3
 8019b46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019b4a:	b29a      	uxth	r2, r3
 8019b4c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019b50:	b299      	uxth	r1, r3
 8019b52:	69fb      	ldr	r3, [r7, #28]
 8019b54:	b29b      	uxth	r3, r3
 8019b56:	fb11 f303 	smulbb	r3, r1, r3
 8019b5a:	b29b      	uxth	r3, r3
 8019b5c:	4413      	add	r3, r2
 8019b5e:	b29b      	uxth	r3, r3
 8019b60:	3301      	adds	r3, #1
 8019b62:	b299      	uxth	r1, r3
 8019b64:	f107 0214 	add.w	r2, r7, #20
 8019b68:	2300      	movs	r3, #0
 8019b6a:	9301      	str	r3, [sp, #4]
 8019b6c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8019b70:	9300      	str	r3, [sp, #0]
 8019b72:	4b5b      	ldr	r3, [pc, #364]	; (8019ce0 <updateUint16Item+0x858>)
 8019b74:	f7f6 fb40 	bl	80101f8 <Paint_DrawString_EN>
 8019b78:	e141      	b.n	8019dfe <updateUint16Item+0x976>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == DOWN)
 8019b7a:	79fb      	ldrb	r3, [r7, #7]
 8019b7c:	2b01      	cmp	r3, #1
 8019b7e:	d158      	bne.n	8019c32 <updateUint16Item+0x7aa>
					{
						if (uint16Item.deltaMultiplier < uint16Item.startValue)
 8019b80:	4b56      	ldr	r3, [pc, #344]	; (8019cdc <updateUint16Item+0x854>)
 8019b82:	899a      	ldrh	r2, [r3, #12]
 8019b84:	4b55      	ldr	r3, [pc, #340]	; (8019cdc <updateUint16Item+0x854>)
 8019b86:	891b      	ldrh	r3, [r3, #8]
 8019b88:	429a      	cmp	r2, r3
 8019b8a:	d21f      	bcs.n	8019bcc <updateUint16Item+0x744>
						{
							uint16Item.startValue = fmax(uint16Item.startValue - uint16Item.deltaMultiplier, uint16Item.minValue * 1.0);
 8019b8c:	4b53      	ldr	r3, [pc, #332]	; (8019cdc <updateUint16Item+0x854>)
 8019b8e:	891b      	ldrh	r3, [r3, #8]
 8019b90:	461a      	mov	r2, r3
 8019b92:	4b52      	ldr	r3, [pc, #328]	; (8019cdc <updateUint16Item+0x854>)
 8019b94:	899b      	ldrh	r3, [r3, #12]
 8019b96:	1ad3      	subs	r3, r2, r3
 8019b98:	ee07 3a90 	vmov	s15, r3
 8019b9c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8019ba0:	4b4e      	ldr	r3, [pc, #312]	; (8019cdc <updateUint16Item+0x854>)
 8019ba2:	889b      	ldrh	r3, [r3, #4]
 8019ba4:	ee06 3a90 	vmov	s13, r3
 8019ba8:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8019bac:	eeb0 1b46 	vmov.f64	d1, d6
 8019bb0:	eeb0 0b47 	vmov.f64	d0, d7
 8019bb4:	f007 fa4e 	bl	8021054 <fmax>
 8019bb8:	eeb0 7b40 	vmov.f64	d7, d0
 8019bbc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8019bc0:	ee17 3a90 	vmov	r3, s15
 8019bc4:	b29a      	uxth	r2, r3
 8019bc6:	4b45      	ldr	r3, [pc, #276]	; (8019cdc <updateUint16Item+0x854>)
 8019bc8:	811a      	strh	r2, [r3, #8]
 8019bca:	e003      	b.n	8019bd4 <updateUint16Item+0x74c>
						}
						else
						{
							uint16Item.startValue = uint16Item.minValue;
 8019bcc:	4b43      	ldr	r3, [pc, #268]	; (8019cdc <updateUint16Item+0x854>)
 8019bce:	889a      	ldrh	r2, [r3, #4]
 8019bd0:	4b42      	ldr	r3, [pc, #264]	; (8019cdc <updateUint16Item+0x854>)
 8019bd2:	811a      	strh	r2, [r3, #8]
						}

						sprintf(localString,"%04d",uint16Item.startValue);
 8019bd4:	4b41      	ldr	r3, [pc, #260]	; (8019cdc <updateUint16Item+0x854>)
 8019bd6:	891b      	ldrh	r3, [r3, #8]
 8019bd8:	461a      	mov	r2, r3
 8019bda:	f107 0314 	add.w	r3, r7, #20
 8019bde:	4941      	ldr	r1, [pc, #260]	; (8019ce4 <updateUint16Item+0x85c>)
 8019be0:	4618      	mov	r0, r3
 8019be2:	f003 feaf 	bl	801d944 <siprintf>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019be6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019bea:	b29a      	uxth	r2, r3
 8019bec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019bf0:	085b      	lsrs	r3, r3, #1
 8019bf2:	b2db      	uxtb	r3, r3
 8019bf4:	b29b      	uxth	r3, r3
 8019bf6:	4413      	add	r3, r2
 8019bf8:	b29b      	uxth	r3, r3
 8019bfa:	3301      	adds	r3, #1
 8019bfc:	b298      	uxth	r0, r3
 8019bfe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019c02:	b29a      	uxth	r2, r3
 8019c04:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019c08:	b299      	uxth	r1, r3
 8019c0a:	69fb      	ldr	r3, [r7, #28]
 8019c0c:	b29b      	uxth	r3, r3
 8019c0e:	fb11 f303 	smulbb	r3, r1, r3
 8019c12:	b29b      	uxth	r3, r3
 8019c14:	4413      	add	r3, r2
 8019c16:	b29b      	uxth	r3, r3
 8019c18:	3301      	adds	r3, #1
 8019c1a:	b299      	uxth	r1, r3
 8019c1c:	f107 0214 	add.w	r2, r7, #20
 8019c20:	2300      	movs	r3, #0
 8019c22:	9301      	str	r3, [sp, #4]
 8019c24:	f24c 6318 	movw	r3, #50712	; 0xc618
 8019c28:	9300      	str	r3, [sp, #0]
 8019c2a:	4b2d      	ldr	r3, [pc, #180]	; (8019ce0 <updateUint16Item+0x858>)
 8019c2c:	f7f6 fae4 	bl	80101f8 <Paint_DrawString_EN>
 8019c30:	e0e5      	b.n	8019dfe <updateUint16Item+0x976>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == UP)
 8019c32:	79fb      	ldrb	r3, [r7, #7]
 8019c34:	2b00      	cmp	r3, #0
 8019c36:	f040 80e2 	bne.w	8019dfe <updateUint16Item+0x976>
					{
						uint16Item.startValue = fmin(uint16Item.startValue + uint16Item.deltaMultiplier, uint16Item.maxValue * 1.0);
 8019c3a:	4b28      	ldr	r3, [pc, #160]	; (8019cdc <updateUint16Item+0x854>)
 8019c3c:	891b      	ldrh	r3, [r3, #8]
 8019c3e:	461a      	mov	r2, r3
 8019c40:	4b26      	ldr	r3, [pc, #152]	; (8019cdc <updateUint16Item+0x854>)
 8019c42:	899b      	ldrh	r3, [r3, #12]
 8019c44:	4413      	add	r3, r2
 8019c46:	ee07 3a90 	vmov	s15, r3
 8019c4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8019c4e:	4b23      	ldr	r3, [pc, #140]	; (8019cdc <updateUint16Item+0x854>)
 8019c50:	88db      	ldrh	r3, [r3, #6]
 8019c52:	ee06 3a90 	vmov	s13, r3
 8019c56:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8019c5a:	eeb0 1b46 	vmov.f64	d1, d6
 8019c5e:	eeb0 0b47 	vmov.f64	d0, d7
 8019c62:	f007 fa12 	bl	802108a <fmin>
 8019c66:	eeb0 7b40 	vmov.f64	d7, d0
 8019c6a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8019c6e:	ee17 3a90 	vmov	r3, s15
 8019c72:	b29a      	uxth	r2, r3
 8019c74:	4b19      	ldr	r3, [pc, #100]	; (8019cdc <updateUint16Item+0x854>)
 8019c76:	811a      	strh	r2, [r3, #8]
						sprintf(localString,"%04d",uint16Item.startValue);
 8019c78:	4b18      	ldr	r3, [pc, #96]	; (8019cdc <updateUint16Item+0x854>)
 8019c7a:	891b      	ldrh	r3, [r3, #8]
 8019c7c:	461a      	mov	r2, r3
 8019c7e:	f107 0314 	add.w	r3, r7, #20
 8019c82:	4918      	ldr	r1, [pc, #96]	; (8019ce4 <updateUint16Item+0x85c>)
 8019c84:	4618      	mov	r0, r3
 8019c86:	f003 fe5d 	bl	801d944 <siprintf>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019c8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019c8e:	b29a      	uxth	r2, r3
 8019c90:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019c94:	085b      	lsrs	r3, r3, #1
 8019c96:	b2db      	uxtb	r3, r3
 8019c98:	b29b      	uxth	r3, r3
 8019c9a:	4413      	add	r3, r2
 8019c9c:	b29b      	uxth	r3, r3
 8019c9e:	3301      	adds	r3, #1
 8019ca0:	b298      	uxth	r0, r3
 8019ca2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019ca6:	b29a      	uxth	r2, r3
 8019ca8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019cac:	b299      	uxth	r1, r3
 8019cae:	69fb      	ldr	r3, [r7, #28]
 8019cb0:	b29b      	uxth	r3, r3
 8019cb2:	fb11 f303 	smulbb	r3, r1, r3
 8019cb6:	b29b      	uxth	r3, r3
 8019cb8:	4413      	add	r3, r2
 8019cba:	b29b      	uxth	r3, r3
 8019cbc:	3301      	adds	r3, #1
 8019cbe:	b299      	uxth	r1, r3
 8019cc0:	f107 0214 	add.w	r2, r7, #20
 8019cc4:	2300      	movs	r3, #0
 8019cc6:	9301      	str	r3, [sp, #4]
 8019cc8:	f24c 6318 	movw	r3, #50712	; 0xc618
 8019ccc:	9300      	str	r3, [sp, #0]
 8019cce:	4b04      	ldr	r3, [pc, #16]	; (8019ce0 <updateUint16Item+0x858>)
 8019cd0:	f7f6 fa92 	bl	80101f8 <Paint_DrawString_EN>
 8019cd4:	e093      	b.n	8019dfe <updateUint16Item+0x976>
 8019cd6:	bf00      	nop
 8019cd8:	2400b0dc 	.word	0x2400b0dc
 8019cdc:	2400c22c 	.word	0x2400c22c
 8019ce0:	24000030 	.word	0x24000030
 8019ce4:	08021894 	.word	0x08021894
								localString, &Font12, LGRAY,  BLACK);
					}
				}
				else
				{
					Paint_ClearWindows(MenuRectangleStartX + 1,
 8019ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019cec:	b29b      	uxth	r3, r3
 8019cee:	3301      	adds	r3, #1
 8019cf0:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019cf2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019cf6:	b29a      	uxth	r2, r3
 8019cf8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019cfc:	b299      	uxth	r1, r3
 8019cfe:	69fb      	ldr	r3, [r7, #28]
 8019d00:	b29b      	uxth	r3, r3
 8019d02:	fb11 f303 	smulbb	r3, r1, r3
 8019d06:	b29b      	uxth	r3, r3
 8019d08:	4413      	add	r3, r2
 8019d0a:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 8019d0c:	3301      	adds	r3, #1
 8019d0e:	b29e      	uxth	r6, r3
							MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 8019d10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019d14:	b29c      	uxth	r4, r3
 8019d16:	69fb      	ldr	r3, [r7, #28]
 8019d18:	3301      	adds	r3, #1
 8019d1a:	011b      	lsls	r3, r3, #4
 8019d1c:	4a93      	ldr	r2, [pc, #588]	; (8019f6c <updateUint16Item+0xae4>)
 8019d1e:	4413      	add	r3, r2
 8019d20:	4618      	mov	r0, r3
 8019d22:	f7e6 fae7 	bl	80002f4 <strlen>
 8019d26:	4603      	mov	r3, r0
 8019d28:	b29a      	uxth	r2, r3
 8019d2a:	4b91      	ldr	r3, [pc, #580]	; (8019f70 <updateUint16Item+0xae8>)
 8019d2c:	889b      	ldrh	r3, [r3, #4]
 8019d2e:	fb12 f303 	smulbb	r3, r2, r3
 8019d32:	b29b      	uxth	r3, r3
 8019d34:	4423      	add	r3, r4
 8019d36:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 8019d38:	3301      	adds	r3, #1
 8019d3a:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 8019d3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019d40:	b29a      	uxth	r2, r3
 8019d42:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019d46:	b299      	uxth	r1, r3
 8019d48:	69fb      	ldr	r3, [r7, #28]
 8019d4a:	b29b      	uxth	r3, r3
 8019d4c:	fb11 f303 	smulbb	r3, r1, r3
 8019d50:	b29b      	uxth	r3, r3
 8019d52:	4413      	add	r3, r2
 8019d54:	b29a      	uxth	r2, r3
 8019d56:	4b86      	ldr	r3, [pc, #536]	; (8019f70 <updateUint16Item+0xae8>)
 8019d58:	88db      	ldrh	r3, [r3, #6]
 8019d5a:	4413      	add	r3, r2
 8019d5c:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 8019d5e:	3301      	adds	r3, #1
 8019d60:	b29b      	uxth	r3, r3
 8019d62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019d66:	9200      	str	r2, [sp, #0]
 8019d68:	4602      	mov	r2, r0
 8019d6a:	4631      	mov	r1, r6
 8019d6c:	4628      	mov	r0, r5
 8019d6e:	f7f5 fe25 	bl	800f9bc <Paint_ClearWindows>
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019d72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019d76:	b29b      	uxth	r3, r3
 8019d78:	3301      	adds	r3, #1
 8019d7a:	b298      	uxth	r0, r3
 8019d7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019d80:	b29a      	uxth	r2, r3
 8019d82:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019d86:	b299      	uxth	r1, r3
 8019d88:	69fb      	ldr	r3, [r7, #28]
 8019d8a:	b29b      	uxth	r3, r3
 8019d8c:	fb11 f303 	smulbb	r3, r1, r3
 8019d90:	b29b      	uxth	r3, r3
 8019d92:	4413      	add	r3, r2
 8019d94:	b29b      	uxth	r3, r3
 8019d96:	3301      	adds	r3, #1
 8019d98:	b299      	uxth	r1, r3
							uint16Item.itemsArray[i], &Font12, WHITE,  BLACK);
 8019d9a:	69fb      	ldr	r3, [r7, #28]
 8019d9c:	3301      	adds	r3, #1
 8019d9e:	011b      	lsls	r3, r3, #4
 8019da0:	4a72      	ldr	r2, [pc, #456]	; (8019f6c <updateUint16Item+0xae4>)
 8019da2:	441a      	add	r2, r3
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019da4:	2300      	movs	r3, #0
 8019da6:	9301      	str	r3, [sp, #4]
 8019da8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019dac:	9300      	str	r3, [sp, #0]
 8019dae:	4b70      	ldr	r3, [pc, #448]	; (8019f70 <updateUint16Item+0xae8>)
 8019db0:	f7f6 fa22 	bl	80101f8 <Paint_DrawString_EN>
					Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019db4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019db8:	b29a      	uxth	r2, r3
 8019dba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019dbe:	085b      	lsrs	r3, r3, #1
 8019dc0:	b2db      	uxtb	r3, r3
 8019dc2:	b29b      	uxth	r3, r3
 8019dc4:	4413      	add	r3, r2
 8019dc6:	b29b      	uxth	r3, r3
 8019dc8:	3301      	adds	r3, #1
 8019dca:	b298      	uxth	r0, r3
 8019dcc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019dd0:	b29a      	uxth	r2, r3
 8019dd2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019dd6:	b299      	uxth	r1, r3
 8019dd8:	69fb      	ldr	r3, [r7, #28]
 8019dda:	b29b      	uxth	r3, r3
 8019ddc:	fb11 f303 	smulbb	r3, r1, r3
 8019de0:	b29b      	uxth	r3, r3
 8019de2:	4413      	add	r3, r2
 8019de4:	b29b      	uxth	r3, r3
 8019de6:	3301      	adds	r3, #1
 8019de8:	b299      	uxth	r1, r3
 8019dea:	f107 0214 	add.w	r2, r7, #20
 8019dee:	2300      	movs	r3, #0
 8019df0:	9301      	str	r3, [sp, #4]
 8019df2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019df6:	9300      	str	r3, [sp, #0]
 8019df8:	4b5d      	ldr	r3, [pc, #372]	; (8019f70 <updateUint16Item+0xae8>)
 8019dfa:	f7f6 f9fd 	bl	80101f8 <Paint_DrawString_EN>
							localString, &Font12, WHITE,  BLACK);
				}
			}
			// Render value text of "Multiplier" with Grey or White background
			if ( (i == 3) )
 8019dfe:	69fb      	ldr	r3, [r7, #28]
 8019e00:	2b03      	cmp	r3, #3
 8019e02:	f040 83bc 	bne.w	801a57e <updateUint16Item+0x10f6>
			{
				char localString[8] = "";
 8019e06:	2300      	movs	r3, #0
 8019e08:	60fb      	str	r3, [r7, #12]
 8019e0a:	2300      	movs	r3, #0
 8019e0c:	613b      	str	r3, [r7, #16]
				sprintf(localString,"%04d",uint16Item.deltaMultiplier);
 8019e0e:	4b57      	ldr	r3, [pc, #348]	; (8019f6c <updateUint16Item+0xae4>)
 8019e10:	899b      	ldrh	r3, [r3, #12]
 8019e12:	461a      	mov	r2, r3
 8019e14:	f107 030c 	add.w	r3, r7, #12
 8019e18:	4956      	ldr	r1, [pc, #344]	; (8019f74 <updateUint16Item+0xaec>)
 8019e1a:	4618      	mov	r0, r3
 8019e1c:	f003 fd92 	bl	801d944 <siprintf>
				if (currentCursorPosition.cursorPosition == 0x03)
 8019e20:	4b55      	ldr	r3, [pc, #340]	; (8019f78 <updateUint16Item+0xaf0>)
 8019e22:	781b      	ldrb	r3, [r3, #0]
 8019e24:	2b03      	cmp	r3, #3
 8019e26:	f040 81cd 	bne.w	801a1c4 <updateUint16Item+0xd3c>
				{
					if ( (howToDraw == LEFT) || (howToDraw == FULL) )
 8019e2a:	79fb      	ldrb	r3, [r7, #7]
 8019e2c:	2b03      	cmp	r3, #3
 8019e2e:	d003      	beq.n	8019e38 <updateUint16Item+0x9b0>
 8019e30:	79fb      	ldrb	r3, [r7, #7]
 8019e32:	2b02      	cmp	r3, #2
 8019e34:	f040 80a2 	bne.w	8019f7c <updateUint16Item+0xaf4>
					{
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019e38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019e3c:	b29b      	uxth	r3, r3
 8019e3e:	3301      	adds	r3, #1
 8019e40:	b298      	uxth	r0, r3
 8019e42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019e46:	b29a      	uxth	r2, r3
 8019e48:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019e4c:	b299      	uxth	r1, r3
 8019e4e:	69fb      	ldr	r3, [r7, #28]
 8019e50:	b29b      	uxth	r3, r3
 8019e52:	fb11 f303 	smulbb	r3, r1, r3
 8019e56:	b29b      	uxth	r3, r3
 8019e58:	4413      	add	r3, r2
 8019e5a:	b29b      	uxth	r3, r3
 8019e5c:	3301      	adds	r3, #1
 8019e5e:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, LGRAY,  BLACK);
 8019e60:	69fb      	ldr	r3, [r7, #28]
 8019e62:	3301      	adds	r3, #1
 8019e64:	011b      	lsls	r3, r3, #4
 8019e66:	4a41      	ldr	r2, [pc, #260]	; (8019f6c <updateUint16Item+0xae4>)
 8019e68:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019e6a:	2300      	movs	r3, #0
 8019e6c:	9301      	str	r3, [sp, #4]
 8019e6e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8019e72:	9300      	str	r3, [sp, #0]
 8019e74:	4b3e      	ldr	r3, [pc, #248]	; (8019f70 <updateUint16Item+0xae8>)
 8019e76:	f7f6 f9bf 	bl	80101f8 <Paint_DrawString_EN>
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 8019e7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019e7e:	b29a      	uxth	r2, r3
 8019e80:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019e84:	085b      	lsrs	r3, r3, #1
 8019e86:	b2db      	uxtb	r3, r3
 8019e88:	b29b      	uxth	r3, r3
 8019e8a:	4413      	add	r3, r2
 8019e8c:	b29b      	uxth	r3, r3
 8019e8e:	3301      	adds	r3, #1
 8019e90:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019e92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019e96:	b29a      	uxth	r2, r3
 8019e98:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019e9c:	b299      	uxth	r1, r3
 8019e9e:	69fb      	ldr	r3, [r7, #28]
 8019ea0:	b29b      	uxth	r3, r3
 8019ea2:	fb11 f303 	smulbb	r3, r1, r3
 8019ea6:	b29b      	uxth	r3, r3
 8019ea8:	4413      	add	r3, r2
 8019eaa:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 8019eac:	3301      	adds	r3, #1
 8019eae:	b29e      	uxth	r6, r3
								MenuRectangleStartX + MenuRectangleWidth / 2 + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 8019eb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019eb4:	b29a      	uxth	r2, r3
 8019eb6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019eba:	085b      	lsrs	r3, r3, #1
 8019ebc:	b2db      	uxtb	r3, r3
 8019ebe:	b29b      	uxth	r3, r3
 8019ec0:	4413      	add	r3, r2
 8019ec2:	b29c      	uxth	r4, r3
 8019ec4:	69fb      	ldr	r3, [r7, #28]
 8019ec6:	3301      	adds	r3, #1
 8019ec8:	011b      	lsls	r3, r3, #4
 8019eca:	4a28      	ldr	r2, [pc, #160]	; (8019f6c <updateUint16Item+0xae4>)
 8019ecc:	4413      	add	r3, r2
 8019ece:	4618      	mov	r0, r3
 8019ed0:	f7e6 fa10 	bl	80002f4 <strlen>
 8019ed4:	4603      	mov	r3, r0
 8019ed6:	b29a      	uxth	r2, r3
 8019ed8:	4b25      	ldr	r3, [pc, #148]	; (8019f70 <updateUint16Item+0xae8>)
 8019eda:	889b      	ldrh	r3, [r3, #4]
 8019edc:	fb12 f303 	smulbb	r3, r2, r3
 8019ee0:	b29b      	uxth	r3, r3
 8019ee2:	4423      	add	r3, r4
 8019ee4:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 8019ee6:	3301      	adds	r3, #1
 8019ee8:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 8019eea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019eee:	b29a      	uxth	r2, r3
 8019ef0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019ef4:	b299      	uxth	r1, r3
 8019ef6:	69fb      	ldr	r3, [r7, #28]
 8019ef8:	b29b      	uxth	r3, r3
 8019efa:	fb11 f303 	smulbb	r3, r1, r3
 8019efe:	b29b      	uxth	r3, r3
 8019f00:	4413      	add	r3, r2
 8019f02:	b29a      	uxth	r2, r3
 8019f04:	4b1a      	ldr	r3, [pc, #104]	; (8019f70 <updateUint16Item+0xae8>)
 8019f06:	88db      	ldrh	r3, [r3, #6]
 8019f08:	4413      	add	r3, r2
 8019f0a:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 8019f0c:	3301      	adds	r3, #1
 8019f0e:	b29b      	uxth	r3, r3
 8019f10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019f14:	9200      	str	r2, [sp, #0]
 8019f16:	4602      	mov	r2, r0
 8019f18:	4631      	mov	r1, r6
 8019f1a:	4628      	mov	r0, r5
 8019f1c:	f7f5 fd4e 	bl	800f9bc <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019f20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019f24:	b29a      	uxth	r2, r3
 8019f26:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019f2a:	085b      	lsrs	r3, r3, #1
 8019f2c:	b2db      	uxtb	r3, r3
 8019f2e:	b29b      	uxth	r3, r3
 8019f30:	4413      	add	r3, r2
 8019f32:	b29b      	uxth	r3, r3
 8019f34:	3301      	adds	r3, #1
 8019f36:	b298      	uxth	r0, r3
 8019f38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019f3c:	b29a      	uxth	r2, r3
 8019f3e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019f42:	b299      	uxth	r1, r3
 8019f44:	69fb      	ldr	r3, [r7, #28]
 8019f46:	b29b      	uxth	r3, r3
 8019f48:	fb11 f303 	smulbb	r3, r1, r3
 8019f4c:	b29b      	uxth	r3, r3
 8019f4e:	4413      	add	r3, r2
 8019f50:	b29b      	uxth	r3, r3
 8019f52:	3301      	adds	r3, #1
 8019f54:	b299      	uxth	r1, r3
 8019f56:	f107 020c 	add.w	r2, r7, #12
 8019f5a:	2300      	movs	r3, #0
 8019f5c:	9301      	str	r3, [sp, #4]
 8019f5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019f62:	9300      	str	r3, [sp, #0]
 8019f64:	4b02      	ldr	r3, [pc, #8]	; (8019f70 <updateUint16Item+0xae8>)
 8019f66:	f7f6 f947 	bl	80101f8 <Paint_DrawString_EN>
 8019f6a:	e308      	b.n	801a57e <updateUint16Item+0x10f6>
 8019f6c:	2400c22c 	.word	0x2400c22c
 8019f70:	24000030 	.word	0x24000030
 8019f74:	08021894 	.word	0x08021894
 8019f78:	2400b0dc 	.word	0x2400b0dc
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == DOWN)
 8019f7c:	79fb      	ldrb	r3, [r7, #7]
 8019f7e:	2b01      	cmp	r3, #1
 8019f80:	f040 808c 	bne.w	801a09c <updateUint16Item+0xc14>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019f84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019f88:	b29b      	uxth	r3, r3
 8019f8a:	3301      	adds	r3, #1
 8019f8c:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019f8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019f92:	b29a      	uxth	r2, r3
 8019f94:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019f98:	b299      	uxth	r1, r3
 8019f9a:	69fb      	ldr	r3, [r7, #28]
 8019f9c:	b29b      	uxth	r3, r3
 8019f9e:	fb11 f303 	smulbb	r3, r1, r3
 8019fa2:	b29b      	uxth	r3, r3
 8019fa4:	4413      	add	r3, r2
 8019fa6:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019fa8:	3301      	adds	r3, #1
 8019faa:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 8019fac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019fb0:	b29c      	uxth	r4, r3
 8019fb2:	69fb      	ldr	r3, [r7, #28]
 8019fb4:	3301      	adds	r3, #1
 8019fb6:	011b      	lsls	r3, r3, #4
 8019fb8:	4a80      	ldr	r2, [pc, #512]	; (801a1bc <updateUint16Item+0xd34>)
 8019fba:	4413      	add	r3, r2
 8019fbc:	4618      	mov	r0, r3
 8019fbe:	f7e6 f999 	bl	80002f4 <strlen>
 8019fc2:	4603      	mov	r3, r0
 8019fc4:	b29a      	uxth	r2, r3
 8019fc6:	4b7e      	ldr	r3, [pc, #504]	; (801a1c0 <updateUint16Item+0xd38>)
 8019fc8:	889b      	ldrh	r3, [r3, #4]
 8019fca:	fb12 f303 	smulbb	r3, r2, r3
 8019fce:	b29b      	uxth	r3, r3
 8019fd0:	4423      	add	r3, r4
 8019fd2:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019fd4:	3301      	adds	r3, #1
 8019fd6:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 8019fd8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019fdc:	b29a      	uxth	r2, r3
 8019fde:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8019fe2:	b299      	uxth	r1, r3
 8019fe4:	69fb      	ldr	r3, [r7, #28]
 8019fe6:	b29b      	uxth	r3, r3
 8019fe8:	fb11 f303 	smulbb	r3, r1, r3
 8019fec:	b29b      	uxth	r3, r3
 8019fee:	4413      	add	r3, r2
 8019ff0:	b29a      	uxth	r2, r3
 8019ff2:	4b73      	ldr	r3, [pc, #460]	; (801a1c0 <updateUint16Item+0xd38>)
 8019ff4:	88db      	ldrh	r3, [r3, #6]
 8019ff6:	4413      	add	r3, r2
 8019ff8:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019ffa:	3301      	adds	r3, #1
 8019ffc:	b29b      	uxth	r3, r3
 8019ffe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a002:	9200      	str	r2, [sp, #0]
 801a004:	4602      	mov	r2, r0
 801a006:	4631      	mov	r1, r6
 801a008:	4628      	mov	r0, r5
 801a00a:	f7f5 fcd7 	bl	800f9bc <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a00e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a012:	b29b      	uxth	r3, r3
 801a014:	3301      	adds	r3, #1
 801a016:	b298      	uxth	r0, r3
 801a018:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a01c:	b29a      	uxth	r2, r3
 801a01e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a022:	b299      	uxth	r1, r3
 801a024:	69fb      	ldr	r3, [r7, #28]
 801a026:	b29b      	uxth	r3, r3
 801a028:	fb11 f303 	smulbb	r3, r1, r3
 801a02c:	b29b      	uxth	r3, r3
 801a02e:	4413      	add	r3, r2
 801a030:	b29b      	uxth	r3, r3
 801a032:	3301      	adds	r3, #1
 801a034:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, LGRAY,  BLACK);
 801a036:	69fb      	ldr	r3, [r7, #28]
 801a038:	3301      	adds	r3, #1
 801a03a:	011b      	lsls	r3, r3, #4
 801a03c:	4a5f      	ldr	r2, [pc, #380]	; (801a1bc <updateUint16Item+0xd34>)
 801a03e:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a040:	2300      	movs	r3, #0
 801a042:	9301      	str	r3, [sp, #4]
 801a044:	f24c 6318 	movw	r3, #50712	; 0xc618
 801a048:	9300      	str	r3, [sp, #0]
 801a04a:	4b5d      	ldr	r3, [pc, #372]	; (801a1c0 <updateUint16Item+0xd38>)
 801a04c:	f7f6 f8d4 	bl	80101f8 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a050:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a054:	b29a      	uxth	r2, r3
 801a056:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a05a:	085b      	lsrs	r3, r3, #1
 801a05c:	b2db      	uxtb	r3, r3
 801a05e:	b29b      	uxth	r3, r3
 801a060:	4413      	add	r3, r2
 801a062:	b29b      	uxth	r3, r3
 801a064:	3301      	adds	r3, #1
 801a066:	b298      	uxth	r0, r3
 801a068:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a06c:	b29a      	uxth	r2, r3
 801a06e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a072:	b299      	uxth	r1, r3
 801a074:	69fb      	ldr	r3, [r7, #28]
 801a076:	b29b      	uxth	r3, r3
 801a078:	fb11 f303 	smulbb	r3, r1, r3
 801a07c:	b29b      	uxth	r3, r3
 801a07e:	4413      	add	r3, r2
 801a080:	b29b      	uxth	r3, r3
 801a082:	3301      	adds	r3, #1
 801a084:	b299      	uxth	r1, r3
 801a086:	f107 020c 	add.w	r2, r7, #12
 801a08a:	2300      	movs	r3, #0
 801a08c:	9301      	str	r3, [sp, #4]
 801a08e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a092:	9300      	str	r3, [sp, #0]
 801a094:	4b4a      	ldr	r3, [pc, #296]	; (801a1c0 <updateUint16Item+0xd38>)
 801a096:	f7f6 f8af 	bl	80101f8 <Paint_DrawString_EN>
 801a09a:	e270      	b.n	801a57e <updateUint16Item+0x10f6>
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == UP)
 801a09c:	79fb      	ldrb	r3, [r7, #7]
 801a09e:	2b00      	cmp	r3, #0
 801a0a0:	f040 826d 	bne.w	801a57e <updateUint16Item+0x10f6>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801a0a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a0a8:	b29b      	uxth	r3, r3
 801a0aa:	3301      	adds	r3, #1
 801a0ac:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a0ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a0b2:	b29a      	uxth	r2, r3
 801a0b4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a0b8:	b299      	uxth	r1, r3
 801a0ba:	69fb      	ldr	r3, [r7, #28]
 801a0bc:	b29b      	uxth	r3, r3
 801a0be:	fb11 f303 	smulbb	r3, r1, r3
 801a0c2:	b29b      	uxth	r3, r3
 801a0c4:	4413      	add	r3, r2
 801a0c6:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801a0c8:	3301      	adds	r3, #1
 801a0ca:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 801a0cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a0d0:	b29c      	uxth	r4, r3
 801a0d2:	69fb      	ldr	r3, [r7, #28]
 801a0d4:	3301      	adds	r3, #1
 801a0d6:	011b      	lsls	r3, r3, #4
 801a0d8:	4a38      	ldr	r2, [pc, #224]	; (801a1bc <updateUint16Item+0xd34>)
 801a0da:	4413      	add	r3, r2
 801a0dc:	4618      	mov	r0, r3
 801a0de:	f7e6 f909 	bl	80002f4 <strlen>
 801a0e2:	4603      	mov	r3, r0
 801a0e4:	b29a      	uxth	r2, r3
 801a0e6:	4b36      	ldr	r3, [pc, #216]	; (801a1c0 <updateUint16Item+0xd38>)
 801a0e8:	889b      	ldrh	r3, [r3, #4]
 801a0ea:	fb12 f303 	smulbb	r3, r2, r3
 801a0ee:	b29b      	uxth	r3, r3
 801a0f0:	4423      	add	r3, r4
 801a0f2:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801a0f4:	3301      	adds	r3, #1
 801a0f6:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801a0f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a0fc:	b29a      	uxth	r2, r3
 801a0fe:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a102:	b299      	uxth	r1, r3
 801a104:	69fb      	ldr	r3, [r7, #28]
 801a106:	b29b      	uxth	r3, r3
 801a108:	fb11 f303 	smulbb	r3, r1, r3
 801a10c:	b29b      	uxth	r3, r3
 801a10e:	4413      	add	r3, r2
 801a110:	b29a      	uxth	r2, r3
 801a112:	4b2b      	ldr	r3, [pc, #172]	; (801a1c0 <updateUint16Item+0xd38>)
 801a114:	88db      	ldrh	r3, [r3, #6]
 801a116:	4413      	add	r3, r2
 801a118:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801a11a:	3301      	adds	r3, #1
 801a11c:	b29b      	uxth	r3, r3
 801a11e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a122:	9200      	str	r2, [sp, #0]
 801a124:	4602      	mov	r2, r0
 801a126:	4631      	mov	r1, r6
 801a128:	4628      	mov	r0, r5
 801a12a:	f7f5 fc47 	bl	800f9bc <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a12e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a132:	b29b      	uxth	r3, r3
 801a134:	3301      	adds	r3, #1
 801a136:	b298      	uxth	r0, r3
 801a138:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a13c:	b29a      	uxth	r2, r3
 801a13e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a142:	b299      	uxth	r1, r3
 801a144:	69fb      	ldr	r3, [r7, #28]
 801a146:	b29b      	uxth	r3, r3
 801a148:	fb11 f303 	smulbb	r3, r1, r3
 801a14c:	b29b      	uxth	r3, r3
 801a14e:	4413      	add	r3, r2
 801a150:	b29b      	uxth	r3, r3
 801a152:	3301      	adds	r3, #1
 801a154:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, LGRAY,  BLACK);
 801a156:	69fb      	ldr	r3, [r7, #28]
 801a158:	3301      	adds	r3, #1
 801a15a:	011b      	lsls	r3, r3, #4
 801a15c:	4a17      	ldr	r2, [pc, #92]	; (801a1bc <updateUint16Item+0xd34>)
 801a15e:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a160:	2300      	movs	r3, #0
 801a162:	9301      	str	r3, [sp, #4]
 801a164:	f24c 6318 	movw	r3, #50712	; 0xc618
 801a168:	9300      	str	r3, [sp, #0]
 801a16a:	4b15      	ldr	r3, [pc, #84]	; (801a1c0 <updateUint16Item+0xd38>)
 801a16c:	f7f6 f844 	bl	80101f8 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a170:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a174:	b29a      	uxth	r2, r3
 801a176:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a17a:	085b      	lsrs	r3, r3, #1
 801a17c:	b2db      	uxtb	r3, r3
 801a17e:	b29b      	uxth	r3, r3
 801a180:	4413      	add	r3, r2
 801a182:	b29b      	uxth	r3, r3
 801a184:	3301      	adds	r3, #1
 801a186:	b298      	uxth	r0, r3
 801a188:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a18c:	b29a      	uxth	r2, r3
 801a18e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a192:	b299      	uxth	r1, r3
 801a194:	69fb      	ldr	r3, [r7, #28]
 801a196:	b29b      	uxth	r3, r3
 801a198:	fb11 f303 	smulbb	r3, r1, r3
 801a19c:	b29b      	uxth	r3, r3
 801a19e:	4413      	add	r3, r2
 801a1a0:	b29b      	uxth	r3, r3
 801a1a2:	3301      	adds	r3, #1
 801a1a4:	b299      	uxth	r1, r3
 801a1a6:	f107 020c 	add.w	r2, r7, #12
 801a1aa:	2300      	movs	r3, #0
 801a1ac:	9301      	str	r3, [sp, #4]
 801a1ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a1b2:	9300      	str	r3, [sp, #0]
 801a1b4:	4b02      	ldr	r3, [pc, #8]	; (801a1c0 <updateUint16Item+0xd38>)
 801a1b6:	f7f6 f81f 	bl	80101f8 <Paint_DrawString_EN>
 801a1ba:	e1e0      	b.n	801a57e <updateUint16Item+0x10f6>
 801a1bc:	2400c22c 	.word	0x2400c22c
 801a1c0:	24000030 	.word	0x24000030
								localString, &Font12, WHITE,  BLACK);
					}
				}
				else if (currentCursorPosition.cursorPosition == MULTIPLIER)
 801a1c4:	4ba2      	ldr	r3, [pc, #648]	; (801a450 <updateUint16Item+0xfc8>)
 801a1c6:	781b      	ldrb	r3, [r3, #0]
 801a1c8:	2b0c      	cmp	r3, #12
 801a1ca:	f040 814d 	bne.w	801a468 <updateUint16Item+0xfe0>
				{
					if (howToDraw == RIGHT)
 801a1ce:	79fb      	ldrb	r3, [r7, #7]
 801a1d0:	2b04      	cmp	r3, #4
 801a1d2:	f040 808c 	bne.w	801a2ee <updateUint16Item+0xe66>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801a1d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a1da:	b29b      	uxth	r3, r3
 801a1dc:	3301      	adds	r3, #1
 801a1de:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a1e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a1e4:	b29a      	uxth	r2, r3
 801a1e6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a1ea:	b299      	uxth	r1, r3
 801a1ec:	69fb      	ldr	r3, [r7, #28]
 801a1ee:	b29b      	uxth	r3, r3
 801a1f0:	fb11 f303 	smulbb	r3, r1, r3
 801a1f4:	b29b      	uxth	r3, r3
 801a1f6:	4413      	add	r3, r2
 801a1f8:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801a1fa:	3301      	adds	r3, #1
 801a1fc:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 801a1fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a202:	b29c      	uxth	r4, r3
 801a204:	69fb      	ldr	r3, [r7, #28]
 801a206:	3301      	adds	r3, #1
 801a208:	011b      	lsls	r3, r3, #4
 801a20a:	4a92      	ldr	r2, [pc, #584]	; (801a454 <updateUint16Item+0xfcc>)
 801a20c:	4413      	add	r3, r2
 801a20e:	4618      	mov	r0, r3
 801a210:	f7e6 f870 	bl	80002f4 <strlen>
 801a214:	4603      	mov	r3, r0
 801a216:	b29a      	uxth	r2, r3
 801a218:	4b8f      	ldr	r3, [pc, #572]	; (801a458 <updateUint16Item+0xfd0>)
 801a21a:	889b      	ldrh	r3, [r3, #4]
 801a21c:	fb12 f303 	smulbb	r3, r2, r3
 801a220:	b29b      	uxth	r3, r3
 801a222:	4423      	add	r3, r4
 801a224:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801a226:	3301      	adds	r3, #1
 801a228:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801a22a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a22e:	b29a      	uxth	r2, r3
 801a230:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a234:	b299      	uxth	r1, r3
 801a236:	69fb      	ldr	r3, [r7, #28]
 801a238:	b29b      	uxth	r3, r3
 801a23a:	fb11 f303 	smulbb	r3, r1, r3
 801a23e:	b29b      	uxth	r3, r3
 801a240:	4413      	add	r3, r2
 801a242:	b29a      	uxth	r2, r3
 801a244:	4b84      	ldr	r3, [pc, #528]	; (801a458 <updateUint16Item+0xfd0>)
 801a246:	88db      	ldrh	r3, [r3, #6]
 801a248:	4413      	add	r3, r2
 801a24a:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801a24c:	3301      	adds	r3, #1
 801a24e:	b29b      	uxth	r3, r3
 801a250:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a254:	9200      	str	r2, [sp, #0]
 801a256:	4602      	mov	r2, r0
 801a258:	4631      	mov	r1, r6
 801a25a:	4628      	mov	r0, r5
 801a25c:	f7f5 fbae 	bl	800f9bc <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a260:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a264:	b29b      	uxth	r3, r3
 801a266:	3301      	adds	r3, #1
 801a268:	b298      	uxth	r0, r3
 801a26a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a26e:	b29a      	uxth	r2, r3
 801a270:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a274:	b299      	uxth	r1, r3
 801a276:	69fb      	ldr	r3, [r7, #28]
 801a278:	b29b      	uxth	r3, r3
 801a27a:	fb11 f303 	smulbb	r3, r1, r3
 801a27e:	b29b      	uxth	r3, r3
 801a280:	4413      	add	r3, r2
 801a282:	b29b      	uxth	r3, r3
 801a284:	3301      	adds	r3, #1
 801a286:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, WHITE,  BLACK);
 801a288:	69fb      	ldr	r3, [r7, #28]
 801a28a:	3301      	adds	r3, #1
 801a28c:	011b      	lsls	r3, r3, #4
 801a28e:	4a71      	ldr	r2, [pc, #452]	; (801a454 <updateUint16Item+0xfcc>)
 801a290:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a292:	2300      	movs	r3, #0
 801a294:	9301      	str	r3, [sp, #4]
 801a296:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a29a:	9300      	str	r3, [sp, #0]
 801a29c:	4b6e      	ldr	r3, [pc, #440]	; (801a458 <updateUint16Item+0xfd0>)
 801a29e:	f7f5 ffab 	bl	80101f8 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a2a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a2a6:	b29a      	uxth	r2, r3
 801a2a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a2ac:	085b      	lsrs	r3, r3, #1
 801a2ae:	b2db      	uxtb	r3, r3
 801a2b0:	b29b      	uxth	r3, r3
 801a2b2:	4413      	add	r3, r2
 801a2b4:	b29b      	uxth	r3, r3
 801a2b6:	3301      	adds	r3, #1
 801a2b8:	b298      	uxth	r0, r3
 801a2ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a2be:	b29a      	uxth	r2, r3
 801a2c0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a2c4:	b299      	uxth	r1, r3
 801a2c6:	69fb      	ldr	r3, [r7, #28]
 801a2c8:	b29b      	uxth	r3, r3
 801a2ca:	fb11 f303 	smulbb	r3, r1, r3
 801a2ce:	b29b      	uxth	r3, r3
 801a2d0:	4413      	add	r3, r2
 801a2d2:	b29b      	uxth	r3, r3
 801a2d4:	3301      	adds	r3, #1
 801a2d6:	b299      	uxth	r1, r3
 801a2d8:	f107 020c 	add.w	r2, r7, #12
 801a2dc:	2300      	movs	r3, #0
 801a2de:	9301      	str	r3, [sp, #4]
 801a2e0:	f24c 6318 	movw	r3, #50712	; 0xc618
 801a2e4:	9300      	str	r3, [sp, #0]
 801a2e6:	4b5c      	ldr	r3, [pc, #368]	; (801a458 <updateUint16Item+0xfd0>)
 801a2e8:	f7f5 ff86 	bl	80101f8 <Paint_DrawString_EN>
 801a2ec:	e147      	b.n	801a57e <updateUint16Item+0x10f6>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == DOWN)
 801a2ee:	79fb      	ldrb	r3, [r7, #7]
 801a2f0:	2b01      	cmp	r3, #1
 801a2f2:	d155      	bne.n	801a3a0 <updateUint16Item+0xf18>
					{
						if (multiplierIndex >= 1)
 801a2f4:	4b59      	ldr	r3, [pc, #356]	; (801a45c <updateUint16Item+0xfd4>)
 801a2f6:	781b      	ldrb	r3, [r3, #0]
 801a2f8:	2b00      	cmp	r3, #0
 801a2fa:	d017      	beq.n	801a32c <updateUint16Item+0xea4>
						{
							multiplierIndex = fmax(multiplierIndex - 1, 0);
 801a2fc:	4b57      	ldr	r3, [pc, #348]	; (801a45c <updateUint16Item+0xfd4>)
 801a2fe:	781b      	ldrb	r3, [r3, #0]
 801a300:	3b01      	subs	r3, #1
 801a302:	ee07 3a90 	vmov	s15, r3
 801a306:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a30a:	ed9f 1b4f 	vldr	d1, [pc, #316]	; 801a448 <updateUint16Item+0xfc0>
 801a30e:	eeb0 0b47 	vmov.f64	d0, d7
 801a312:	f006 fe9f 	bl	8021054 <fmax>
 801a316:	eeb0 7b40 	vmov.f64	d7, d0
 801a31a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 801a31e:	edc7 7a00 	vstr	s15, [r7]
 801a322:	683b      	ldr	r3, [r7, #0]
 801a324:	b2da      	uxtb	r2, r3
 801a326:	4b4d      	ldr	r3, [pc, #308]	; (801a45c <updateUint16Item+0xfd4>)
 801a328:	701a      	strb	r2, [r3, #0]
 801a32a:	e002      	b.n	801a332 <updateUint16Item+0xeaa>
						}
						else
						{
							multiplierIndex = 0;
 801a32c:	4b4b      	ldr	r3, [pc, #300]	; (801a45c <updateUint16Item+0xfd4>)
 801a32e:	2200      	movs	r2, #0
 801a330:	701a      	strb	r2, [r3, #0]
						}
						uint16Item.deltaMultiplier = uint16MultiplierArray[multiplierIndex];
 801a332:	4b4a      	ldr	r3, [pc, #296]	; (801a45c <updateUint16Item+0xfd4>)
 801a334:	781b      	ldrb	r3, [r3, #0]
 801a336:	461a      	mov	r2, r3
 801a338:	4b49      	ldr	r3, [pc, #292]	; (801a460 <updateUint16Item+0xfd8>)
 801a33a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801a33e:	4b45      	ldr	r3, [pc, #276]	; (801a454 <updateUint16Item+0xfcc>)
 801a340:	819a      	strh	r2, [r3, #12]
						sprintf(localString,"%04d",uint16Item.deltaMultiplier);
 801a342:	4b44      	ldr	r3, [pc, #272]	; (801a454 <updateUint16Item+0xfcc>)
 801a344:	899b      	ldrh	r3, [r3, #12]
 801a346:	461a      	mov	r2, r3
 801a348:	f107 030c 	add.w	r3, r7, #12
 801a34c:	4945      	ldr	r1, [pc, #276]	; (801a464 <updateUint16Item+0xfdc>)
 801a34e:	4618      	mov	r0, r3
 801a350:	f003 faf8 	bl	801d944 <siprintf>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a354:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a358:	b29a      	uxth	r2, r3
 801a35a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a35e:	085b      	lsrs	r3, r3, #1
 801a360:	b2db      	uxtb	r3, r3
 801a362:	b29b      	uxth	r3, r3
 801a364:	4413      	add	r3, r2
 801a366:	b29b      	uxth	r3, r3
 801a368:	3301      	adds	r3, #1
 801a36a:	b298      	uxth	r0, r3
 801a36c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a370:	b29a      	uxth	r2, r3
 801a372:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a376:	b299      	uxth	r1, r3
 801a378:	69fb      	ldr	r3, [r7, #28]
 801a37a:	b29b      	uxth	r3, r3
 801a37c:	fb11 f303 	smulbb	r3, r1, r3
 801a380:	b29b      	uxth	r3, r3
 801a382:	4413      	add	r3, r2
 801a384:	b29b      	uxth	r3, r3
 801a386:	3301      	adds	r3, #1
 801a388:	b299      	uxth	r1, r3
 801a38a:	f107 020c 	add.w	r2, r7, #12
 801a38e:	2300      	movs	r3, #0
 801a390:	9301      	str	r3, [sp, #4]
 801a392:	f24c 6318 	movw	r3, #50712	; 0xc618
 801a396:	9300      	str	r3, [sp, #0]
 801a398:	4b2f      	ldr	r3, [pc, #188]	; (801a458 <updateUint16Item+0xfd0>)
 801a39a:	f7f5 ff2d 	bl	80101f8 <Paint_DrawString_EN>
 801a39e:	e0ee      	b.n	801a57e <updateUint16Item+0x10f6>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == UP)
 801a3a0:	79fb      	ldrb	r3, [r7, #7]
 801a3a2:	2b00      	cmp	r3, #0
 801a3a4:	f040 80eb 	bne.w	801a57e <updateUint16Item+0x10f6>
					{
						multiplierIndex = fmin(multiplierIndex + 1, 7);
 801a3a8:	4b2c      	ldr	r3, [pc, #176]	; (801a45c <updateUint16Item+0xfd4>)
 801a3aa:	781b      	ldrb	r3, [r3, #0]
 801a3ac:	3301      	adds	r3, #1
 801a3ae:	ee07 3a90 	vmov	s15, r3
 801a3b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a3b6:	eeb1 1b0c 	vmov.f64	d1, #28	; 0x40e00000  7.0
 801a3ba:	eeb0 0b47 	vmov.f64	d0, d7
 801a3be:	f006 fe64 	bl	802108a <fmin>
 801a3c2:	eeb0 7b40 	vmov.f64	d7, d0
 801a3c6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 801a3ca:	edc7 7a00 	vstr	s15, [r7]
 801a3ce:	683b      	ldr	r3, [r7, #0]
 801a3d0:	b2da      	uxtb	r2, r3
 801a3d2:	4b22      	ldr	r3, [pc, #136]	; (801a45c <updateUint16Item+0xfd4>)
 801a3d4:	701a      	strb	r2, [r3, #0]
						uint16Item.deltaMultiplier = uint16MultiplierArray[multiplierIndex];
 801a3d6:	4b21      	ldr	r3, [pc, #132]	; (801a45c <updateUint16Item+0xfd4>)
 801a3d8:	781b      	ldrb	r3, [r3, #0]
 801a3da:	461a      	mov	r2, r3
 801a3dc:	4b20      	ldr	r3, [pc, #128]	; (801a460 <updateUint16Item+0xfd8>)
 801a3de:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801a3e2:	4b1c      	ldr	r3, [pc, #112]	; (801a454 <updateUint16Item+0xfcc>)
 801a3e4:	819a      	strh	r2, [r3, #12]
						sprintf(localString,"%04d",uint16Item.deltaMultiplier);
 801a3e6:	4b1b      	ldr	r3, [pc, #108]	; (801a454 <updateUint16Item+0xfcc>)
 801a3e8:	899b      	ldrh	r3, [r3, #12]
 801a3ea:	461a      	mov	r2, r3
 801a3ec:	f107 030c 	add.w	r3, r7, #12
 801a3f0:	491c      	ldr	r1, [pc, #112]	; (801a464 <updateUint16Item+0xfdc>)
 801a3f2:	4618      	mov	r0, r3
 801a3f4:	f003 faa6 	bl	801d944 <siprintf>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a3f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a3fc:	b29a      	uxth	r2, r3
 801a3fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a402:	085b      	lsrs	r3, r3, #1
 801a404:	b2db      	uxtb	r3, r3
 801a406:	b29b      	uxth	r3, r3
 801a408:	4413      	add	r3, r2
 801a40a:	b29b      	uxth	r3, r3
 801a40c:	3301      	adds	r3, #1
 801a40e:	b298      	uxth	r0, r3
 801a410:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a414:	b29a      	uxth	r2, r3
 801a416:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a41a:	b299      	uxth	r1, r3
 801a41c:	69fb      	ldr	r3, [r7, #28]
 801a41e:	b29b      	uxth	r3, r3
 801a420:	fb11 f303 	smulbb	r3, r1, r3
 801a424:	b29b      	uxth	r3, r3
 801a426:	4413      	add	r3, r2
 801a428:	b29b      	uxth	r3, r3
 801a42a:	3301      	adds	r3, #1
 801a42c:	b299      	uxth	r1, r3
 801a42e:	f107 020c 	add.w	r2, r7, #12
 801a432:	2300      	movs	r3, #0
 801a434:	9301      	str	r3, [sp, #4]
 801a436:	f24c 6318 	movw	r3, #50712	; 0xc618
 801a43a:	9300      	str	r3, [sp, #0]
 801a43c:	4b06      	ldr	r3, [pc, #24]	; (801a458 <updateUint16Item+0xfd0>)
 801a43e:	f7f5 fedb 	bl	80101f8 <Paint_DrawString_EN>
 801a442:	e09c      	b.n	801a57e <updateUint16Item+0x10f6>
 801a444:	f3af 8000 	nop.w
	...
 801a450:	2400b0dc 	.word	0x2400b0dc
 801a454:	2400c22c 	.word	0x2400c22c
 801a458:	24000030 	.word	0x24000030
 801a45c:	2400a110 	.word	0x2400a110
 801a460:	2400a114 	.word	0x2400a114
 801a464:	08021894 	.word	0x08021894
					//									localString, &Font12, WHITE,  BLACK);
					//						}
				}
				else
				{
					Paint_ClearWindows(MenuRectangleStartX + 1,
 801a468:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a46c:	b29b      	uxth	r3, r3
 801a46e:	3301      	adds	r3, #1
 801a470:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a472:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a476:	b29a      	uxth	r2, r3
 801a478:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a47c:	b299      	uxth	r1, r3
 801a47e:	69fb      	ldr	r3, [r7, #28]
 801a480:	b29b      	uxth	r3, r3
 801a482:	fb11 f303 	smulbb	r3, r1, r3
 801a486:	b29b      	uxth	r3, r3
 801a488:	4413      	add	r3, r2
 801a48a:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 801a48c:	3301      	adds	r3, #1
 801a48e:	b29e      	uxth	r6, r3
							MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 801a490:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a494:	b29c      	uxth	r4, r3
 801a496:	69fb      	ldr	r3, [r7, #28]
 801a498:	3301      	adds	r3, #1
 801a49a:	011b      	lsls	r3, r3, #4
 801a49c:	4a9c      	ldr	r2, [pc, #624]	; (801a710 <updateUint16Item+0x1288>)
 801a49e:	4413      	add	r3, r2
 801a4a0:	4618      	mov	r0, r3
 801a4a2:	f7e5 ff27 	bl	80002f4 <strlen>
 801a4a6:	4603      	mov	r3, r0
 801a4a8:	b29a      	uxth	r2, r3
 801a4aa:	4b9a      	ldr	r3, [pc, #616]	; (801a714 <updateUint16Item+0x128c>)
 801a4ac:	889b      	ldrh	r3, [r3, #4]
 801a4ae:	fb12 f303 	smulbb	r3, r2, r3
 801a4b2:	b29b      	uxth	r3, r3
 801a4b4:	4423      	add	r3, r4
 801a4b6:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 801a4b8:	3301      	adds	r3, #1
 801a4ba:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801a4bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a4c0:	b29a      	uxth	r2, r3
 801a4c2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a4c6:	b299      	uxth	r1, r3
 801a4c8:	69fb      	ldr	r3, [r7, #28]
 801a4ca:	b29b      	uxth	r3, r3
 801a4cc:	fb11 f303 	smulbb	r3, r1, r3
 801a4d0:	b29b      	uxth	r3, r3
 801a4d2:	4413      	add	r3, r2
 801a4d4:	b29a      	uxth	r2, r3
 801a4d6:	4b8f      	ldr	r3, [pc, #572]	; (801a714 <updateUint16Item+0x128c>)
 801a4d8:	88db      	ldrh	r3, [r3, #6]
 801a4da:	4413      	add	r3, r2
 801a4dc:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 801a4de:	3301      	adds	r3, #1
 801a4e0:	b29b      	uxth	r3, r3
 801a4e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a4e6:	9200      	str	r2, [sp, #0]
 801a4e8:	4602      	mov	r2, r0
 801a4ea:	4631      	mov	r1, r6
 801a4ec:	4628      	mov	r0, r5
 801a4ee:	f7f5 fa65 	bl	800f9bc <Paint_ClearWindows>
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a4f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a4f6:	b29b      	uxth	r3, r3
 801a4f8:	3301      	adds	r3, #1
 801a4fa:	b298      	uxth	r0, r3
 801a4fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a500:	b29a      	uxth	r2, r3
 801a502:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a506:	b299      	uxth	r1, r3
 801a508:	69fb      	ldr	r3, [r7, #28]
 801a50a:	b29b      	uxth	r3, r3
 801a50c:	fb11 f303 	smulbb	r3, r1, r3
 801a510:	b29b      	uxth	r3, r3
 801a512:	4413      	add	r3, r2
 801a514:	b29b      	uxth	r3, r3
 801a516:	3301      	adds	r3, #1
 801a518:	b299      	uxth	r1, r3
							uint16Item.itemsArray[i], &Font12, WHITE,  BLACK);
 801a51a:	69fb      	ldr	r3, [r7, #28]
 801a51c:	3301      	adds	r3, #1
 801a51e:	011b      	lsls	r3, r3, #4
 801a520:	4a7b      	ldr	r2, [pc, #492]	; (801a710 <updateUint16Item+0x1288>)
 801a522:	441a      	add	r2, r3
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a524:	2300      	movs	r3, #0
 801a526:	9301      	str	r3, [sp, #4]
 801a528:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a52c:	9300      	str	r3, [sp, #0]
 801a52e:	4b79      	ldr	r3, [pc, #484]	; (801a714 <updateUint16Item+0x128c>)
 801a530:	f7f5 fe62 	bl	80101f8 <Paint_DrawString_EN>
					Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a534:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a538:	b29a      	uxth	r2, r3
 801a53a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a53e:	085b      	lsrs	r3, r3, #1
 801a540:	b2db      	uxtb	r3, r3
 801a542:	b29b      	uxth	r3, r3
 801a544:	4413      	add	r3, r2
 801a546:	b29b      	uxth	r3, r3
 801a548:	3301      	adds	r3, #1
 801a54a:	b298      	uxth	r0, r3
 801a54c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a550:	b29a      	uxth	r2, r3
 801a552:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a556:	b299      	uxth	r1, r3
 801a558:	69fb      	ldr	r3, [r7, #28]
 801a55a:	b29b      	uxth	r3, r3
 801a55c:	fb11 f303 	smulbb	r3, r1, r3
 801a560:	b29b      	uxth	r3, r3
 801a562:	4413      	add	r3, r2
 801a564:	b29b      	uxth	r3, r3
 801a566:	3301      	adds	r3, #1
 801a568:	b299      	uxth	r1, r3
 801a56a:	f107 020c 	add.w	r2, r7, #12
 801a56e:	2300      	movs	r3, #0
 801a570:	9301      	str	r3, [sp, #4]
 801a572:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a576:	9300      	str	r3, [sp, #0]
 801a578:	4b66      	ldr	r3, [pc, #408]	; (801a714 <updateUint16Item+0x128c>)
 801a57a:	f7f5 fe3d 	bl	80101f8 <Paint_DrawString_EN>
			}
		}
		//			Paint_DrawRectangle( HorizontalMenuRectangleStartX + HorizontalMenuRectangleWidth / 2, HorizontalMenuRectangleStartY + HorizontalMenuRectangleHeight * (i + 1),
		//					HorizontalMenuRectangleStartX + HorizontalMenuRectangleWidth, HorizontalMenuRectangleStartY + HorizontalMenuRectangleHeight * (i + 2),
		//					BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
		if ( (i >= uint16Item.numberOfItemsInPage - 2) && (i < uint16Item.numberOfItemsInPage) )
 801a57e:	4b64      	ldr	r3, [pc, #400]	; (801a710 <updateUint16Item+0x1288>)
 801a580:	7bdb      	ldrb	r3, [r3, #15]
 801a582:	3b02      	subs	r3, #2
 801a584:	69fa      	ldr	r2, [r7, #28]
 801a586:	429a      	cmp	r2, r3
 801a588:	f2c0 8299 	blt.w	801aabe <updateUint16Item+0x1636>
 801a58c:	4b60      	ldr	r3, [pc, #384]	; (801a710 <updateUint16Item+0x1288>)
 801a58e:	7bdb      	ldrb	r3, [r3, #15]
 801a590:	461a      	mov	r2, r3
 801a592:	69fb      	ldr	r3, [r7, #28]
 801a594:	4293      	cmp	r3, r2
 801a596:	f280 8292 	bge.w	801aabe <updateUint16Item+0x1636>
		{
			if (howToDraw == FULL)
 801a59a:	79fb      	ldrb	r3, [r7, #7]
 801a59c:	2b02      	cmp	r3, #2
 801a59e:	f040 8084 	bne.w	801a6aa <updateUint16Item+0x1222>
			{
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 801a5a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a5a6:	b298      	uxth	r0, r3
 801a5a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a5ac:	b29a      	uxth	r2, r3
 801a5ae:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a5b2:	b299      	uxth	r1, r3
 801a5b4:	69fb      	ldr	r3, [r7, #28]
 801a5b6:	b29b      	uxth	r3, r3
 801a5b8:	fb11 f303 	smulbb	r3, r1, r3
 801a5bc:	b29b      	uxth	r3, r3
 801a5be:	4413      	add	r3, r2
 801a5c0:	b29c      	uxth	r4, r3
 801a5c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a5c6:	b29a      	uxth	r2, r3
 801a5c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a5cc:	b29b      	uxth	r3, r3
 801a5ce:	4413      	add	r3, r2
 801a5d0:	b29d      	uxth	r5, r3
 801a5d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a5d6:	b29a      	uxth	r2, r3
 801a5d8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a5dc:	b299      	uxth	r1, r3
						MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 801a5de:	69fb      	ldr	r3, [r7, #28]
 801a5e0:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 801a5e2:	b29b      	uxth	r3, r3
 801a5e4:	fb11 f303 	smulbb	r3, r1, r3
 801a5e8:	b29b      	uxth	r3, r3
 801a5ea:	4413      	add	r3, r2
 801a5ec:	b29b      	uxth	r3, r3
 801a5ee:	2200      	movs	r2, #0
 801a5f0:	9202      	str	r2, [sp, #8]
 801a5f2:	2201      	movs	r2, #1
 801a5f4:	9201      	str	r2, [sp, #4]
 801a5f6:	2200      	movs	r2, #0
 801a5f8:	9200      	str	r2, [sp, #0]
 801a5fa:	462a      	mov	r2, r5
 801a5fc:	4621      	mov	r1, r4
 801a5fe:	f7f5 fb57 	bl	800fcb0 <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
				if (currentCursorPosition.cursorPosition == i)
 801a602:	4b45      	ldr	r3, [pc, #276]	; (801a718 <updateUint16Item+0x1290>)
 801a604:	781b      	ldrb	r3, [r3, #0]
 801a606:	461a      	mov	r2, r3
 801a608:	69fb      	ldr	r3, [r7, #28]
 801a60a:	4293      	cmp	r3, r2
 801a60c:	d126      	bne.n	801a65c <updateUint16Item+0x11d4>
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801a60e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a612:	b29c      	uxth	r4, r3
 801a614:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a618:	b29a      	uxth	r2, r3
 801a61a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a61e:	b299      	uxth	r1, r3
 801a620:	69fb      	ldr	r3, [r7, #28]
 801a622:	b29b      	uxth	r3, r3
 801a624:	fb11 f303 	smulbb	r3, r1, r3
 801a628:	b29b      	uxth	r3, r3
 801a62a:	4413      	add	r3, r2
 801a62c:	b29b      	uxth	r3, r3
 801a62e:	3301      	adds	r3, #1
 801a630:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[i], BLACK, LGRAY, 16, Font12);
 801a632:	69fb      	ldr	r3, [r7, #28]
 801a634:	3301      	adds	r3, #1
 801a636:	011b      	lsls	r3, r3, #4
 801a638:	4a35      	ldr	r2, [pc, #212]	; (801a710 <updateUint16Item+0x1288>)
 801a63a:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801a63c:	4935      	ldr	r1, [pc, #212]	; (801a714 <updateUint16Item+0x128c>)
 801a63e:	ab02      	add	r3, sp, #8
 801a640:	c903      	ldmia	r1, {r0, r1}
 801a642:	e883 0003 	stmia.w	r3, {r0, r1}
 801a646:	2310      	movs	r3, #16
 801a648:	9301      	str	r3, [sp, #4]
 801a64a:	f24c 6318 	movw	r3, #50712	; 0xc618
 801a64e:	9300      	str	r3, [sp, #0]
 801a650:	2300      	movs	r3, #0
 801a652:	4629      	mov	r1, r5
 801a654:	4620      	mov	r0, r4
 801a656:	f7fd fe1f 	bl	8018298 <centeredString>
 801a65a:	e230      	b.n	801aabe <updateUint16Item+0x1636>
				}
				else
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801a65c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a660:	b29c      	uxth	r4, r3
 801a662:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a666:	b29a      	uxth	r2, r3
 801a668:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a66c:	b299      	uxth	r1, r3
 801a66e:	69fb      	ldr	r3, [r7, #28]
 801a670:	b29b      	uxth	r3, r3
 801a672:	fb11 f303 	smulbb	r3, r1, r3
 801a676:	b29b      	uxth	r3, r3
 801a678:	4413      	add	r3, r2
 801a67a:	b29b      	uxth	r3, r3
 801a67c:	3301      	adds	r3, #1
 801a67e:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[i], BLACK, WHITE, 16, Font12);
 801a680:	69fb      	ldr	r3, [r7, #28]
 801a682:	3301      	adds	r3, #1
 801a684:	011b      	lsls	r3, r3, #4
 801a686:	4a22      	ldr	r2, [pc, #136]	; (801a710 <updateUint16Item+0x1288>)
 801a688:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801a68a:	4922      	ldr	r1, [pc, #136]	; (801a714 <updateUint16Item+0x128c>)
 801a68c:	ab02      	add	r3, sp, #8
 801a68e:	c903      	ldmia	r1, {r0, r1}
 801a690:	e883 0003 	stmia.w	r3, {r0, r1}
 801a694:	2310      	movs	r3, #16
 801a696:	9301      	str	r3, [sp, #4]
 801a698:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a69c:	9300      	str	r3, [sp, #0]
 801a69e:	2300      	movs	r3, #0
 801a6a0:	4629      	mov	r1, r5
 801a6a2:	4620      	mov	r0, r4
 801a6a4:	f7fd fdf8 	bl	8018298 <centeredString>
 801a6a8:	e209      	b.n	801aabe <updateUint16Item+0x1636>
				}
			}
			else if (howToDraw == DOWN)
 801a6aa:	79fb      	ldrb	r3, [r7, #7]
 801a6ac:	2b01      	cmp	r3, #1
 801a6ae:	f040 80d1 	bne.w	801a854 <updateUint16Item+0x13cc>
			{
				if ( (currentCursorPosition.cursorPosition == 4) && (i == 4) )
 801a6b2:	4b19      	ldr	r3, [pc, #100]	; (801a718 <updateUint16Item+0x1290>)
 801a6b4:	781b      	ldrb	r3, [r3, #0]
 801a6b6:	2b04      	cmp	r3, #4
 801a6b8:	d130      	bne.n	801a71c <updateUint16Item+0x1294>
 801a6ba:	69fb      	ldr	r3, [r7, #28]
 801a6bc:	2b04      	cmp	r3, #4
 801a6be:	d12d      	bne.n	801a71c <updateUint16Item+0x1294>
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801a6c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a6c4:	b29c      	uxth	r4, r3
 801a6c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a6ca:	b29a      	uxth	r2, r3
 801a6cc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a6d0:	b299      	uxth	r1, r3
 801a6d2:	69fb      	ldr	r3, [r7, #28]
 801a6d4:	b29b      	uxth	r3, r3
 801a6d6:	fb11 f303 	smulbb	r3, r1, r3
 801a6da:	b29b      	uxth	r3, r3
 801a6dc:	4413      	add	r3, r2
 801a6de:	b29b      	uxth	r3, r3
 801a6e0:	3301      	adds	r3, #1
 801a6e2:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[i], BLACK, LGRAY, 16, Font12);
 801a6e4:	69fb      	ldr	r3, [r7, #28]
 801a6e6:	3301      	adds	r3, #1
 801a6e8:	011b      	lsls	r3, r3, #4
 801a6ea:	4a09      	ldr	r2, [pc, #36]	; (801a710 <updateUint16Item+0x1288>)
 801a6ec:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801a6ee:	4909      	ldr	r1, [pc, #36]	; (801a714 <updateUint16Item+0x128c>)
 801a6f0:	ab02      	add	r3, sp, #8
 801a6f2:	c903      	ldmia	r1, {r0, r1}
 801a6f4:	e883 0003 	stmia.w	r3, {r0, r1}
 801a6f8:	2310      	movs	r3, #16
 801a6fa:	9301      	str	r3, [sp, #4]
 801a6fc:	f24c 6318 	movw	r3, #50712	; 0xc618
 801a700:	9300      	str	r3, [sp, #0]
 801a702:	2300      	movs	r3, #0
 801a704:	4629      	mov	r1, r5
 801a706:	4620      	mov	r0, r4
 801a708:	f7fd fdc6 	bl	8018298 <centeredString>
 801a70c:	e1d7      	b.n	801aabe <updateUint16Item+0x1636>
 801a70e:	bf00      	nop
 801a710:	2400c22c 	.word	0x2400c22c
 801a714:	24000030 	.word	0x24000030
 801a718:	2400b0dc 	.word	0x2400b0dc
				}
				else if ( (currentCursorPosition.cursorPosition == 5) && (i == 5) )
 801a71c:	4b90      	ldr	r3, [pc, #576]	; (801a960 <updateUint16Item+0x14d8>)
 801a71e:	781b      	ldrb	r3, [r3, #0]
 801a720:	2b05      	cmp	r3, #5
 801a722:	f040 81cc 	bne.w	801aabe <updateUint16Item+0x1636>
 801a726:	69fb      	ldr	r3, [r7, #28]
 801a728:	2b05      	cmp	r3, #5
 801a72a:	f040 81c8 	bne.w	801aabe <updateUint16Item+0x1636>
				{
					Paint_ClearWindows(DisplayCenterWidth,
 801a72e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a732:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 801a734:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a738:	b29a      	uxth	r2, r3
 801a73a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a73e:	b299      	uxth	r1, r3
 801a740:	69fb      	ldr	r3, [r7, #28]
 801a742:	3b01      	subs	r3, #1
 801a744:	b29b      	uxth	r3, r3
 801a746:	fb11 f303 	smulbb	r3, r1, r3
 801a74a:	b29b      	uxth	r3, r3
 801a74c:	4413      	add	r3, r2
 801a74e:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth,
 801a750:	3301      	adds	r3, #1
 801a752:	b29e      	uxth	r6, r3
 801a754:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a758:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(uint16Item.itemsArray[i - 1]) * Font12.Width,
 801a75a:	69fb      	ldr	r3, [r7, #28]
 801a75c:	3b01      	subs	r3, #1
 801a75e:	3301      	adds	r3, #1
 801a760:	011b      	lsls	r3, r3, #4
 801a762:	4a80      	ldr	r2, [pc, #512]	; (801a964 <updateUint16Item+0x14dc>)
 801a764:	4413      	add	r3, r2
 801a766:	4618      	mov	r0, r3
 801a768:	f7e5 fdc4 	bl	80002f4 <strlen>
 801a76c:	4603      	mov	r3, r0
					Paint_ClearWindows(DisplayCenterWidth,
 801a76e:	b29a      	uxth	r2, r3
							DisplayCenterWidth + strlen(uint16Item.itemsArray[i - 1]) * Font12.Width,
 801a770:	4b7d      	ldr	r3, [pc, #500]	; (801a968 <updateUint16Item+0x14e0>)
 801a772:	889b      	ldrh	r3, [r3, #4]
					Paint_ClearWindows(DisplayCenterWidth,
 801a774:	fb12 f303 	smulbb	r3, r2, r3
 801a778:	b29b      	uxth	r3, r3
 801a77a:	4423      	add	r3, r4
 801a77c:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1 + Font12.Height, WHITE);
 801a77e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a782:	b29a      	uxth	r2, r3
 801a784:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a788:	b299      	uxth	r1, r3
 801a78a:	69fb      	ldr	r3, [r7, #28]
 801a78c:	3b01      	subs	r3, #1
 801a78e:	b29b      	uxth	r3, r3
 801a790:	fb11 f303 	smulbb	r3, r1, r3
 801a794:	b29b      	uxth	r3, r3
 801a796:	4413      	add	r3, r2
 801a798:	b29a      	uxth	r2, r3
 801a79a:	4b73      	ldr	r3, [pc, #460]	; (801a968 <updateUint16Item+0x14e0>)
 801a79c:	88db      	ldrh	r3, [r3, #6]
 801a79e:	4413      	add	r3, r2
 801a7a0:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth,
 801a7a2:	3301      	adds	r3, #1
 801a7a4:	b29b      	uxth	r3, r3
 801a7a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a7aa:	9200      	str	r2, [sp, #0]
 801a7ac:	4602      	mov	r2, r0
 801a7ae:	4631      	mov	r1, r6
 801a7b0:	4628      	mov	r0, r5
 801a7b2:	f7f5 f903 	bl	800f9bc <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 801a7b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a7ba:	b29c      	uxth	r4, r3
 801a7bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a7c0:	b29a      	uxth	r2, r3
 801a7c2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a7c6:	b299      	uxth	r1, r3
 801a7c8:	69fb      	ldr	r3, [r7, #28]
 801a7ca:	3b01      	subs	r3, #1
 801a7cc:	b29b      	uxth	r3, r3
 801a7ce:	fb11 f303 	smulbb	r3, r1, r3
 801a7d2:	b29b      	uxth	r3, r3
 801a7d4:	4413      	add	r3, r2
 801a7d6:	b29b      	uxth	r3, r3
 801a7d8:	3301      	adds	r3, #1
 801a7da:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[(i - 1)], BLACK, WHITE, 16, Font12);
 801a7dc:	69fb      	ldr	r3, [r7, #28]
 801a7de:	3b01      	subs	r3, #1
 801a7e0:	3301      	adds	r3, #1
 801a7e2:	011b      	lsls	r3, r3, #4
 801a7e4:	4a5f      	ldr	r2, [pc, #380]	; (801a964 <updateUint16Item+0x14dc>)
 801a7e6:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 801a7e8:	495f      	ldr	r1, [pc, #380]	; (801a968 <updateUint16Item+0x14e0>)
 801a7ea:	ab02      	add	r3, sp, #8
 801a7ec:	c903      	ldmia	r1, {r0, r1}
 801a7ee:	e883 0003 	stmia.w	r3, {r0, r1}
 801a7f2:	2310      	movs	r3, #16
 801a7f4:	9301      	str	r3, [sp, #4]
 801a7f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a7fa:	9300      	str	r3, [sp, #0]
 801a7fc:	2300      	movs	r3, #0
 801a7fe:	4629      	mov	r1, r5
 801a800:	4620      	mov	r0, r4
 801a802:	f7fd fd49 	bl	8018298 <centeredString>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801a806:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a80a:	b29c      	uxth	r4, r3
 801a80c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a810:	b29a      	uxth	r2, r3
 801a812:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a816:	b299      	uxth	r1, r3
 801a818:	69fb      	ldr	r3, [r7, #28]
 801a81a:	b29b      	uxth	r3, r3
 801a81c:	fb11 f303 	smulbb	r3, r1, r3
 801a820:	b29b      	uxth	r3, r3
 801a822:	4413      	add	r3, r2
 801a824:	b29b      	uxth	r3, r3
 801a826:	3301      	adds	r3, #1
 801a828:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[i], BLACK, LGRAY, 16, Font12);
 801a82a:	69fb      	ldr	r3, [r7, #28]
 801a82c:	3301      	adds	r3, #1
 801a82e:	011b      	lsls	r3, r3, #4
 801a830:	4a4c      	ldr	r2, [pc, #304]	; (801a964 <updateUint16Item+0x14dc>)
 801a832:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801a834:	494c      	ldr	r1, [pc, #304]	; (801a968 <updateUint16Item+0x14e0>)
 801a836:	ab02      	add	r3, sp, #8
 801a838:	c903      	ldmia	r1, {r0, r1}
 801a83a:	e883 0003 	stmia.w	r3, {r0, r1}
 801a83e:	2310      	movs	r3, #16
 801a840:	9301      	str	r3, [sp, #4]
 801a842:	f24c 6318 	movw	r3, #50712	; 0xc618
 801a846:	9300      	str	r3, [sp, #0]
 801a848:	2300      	movs	r3, #0
 801a84a:	4629      	mov	r1, r5
 801a84c:	4620      	mov	r0, r4
 801a84e:	f7fd fd23 	bl	8018298 <centeredString>
 801a852:	e134      	b.n	801aabe <updateUint16Item+0x1636>
				}
			}
			else if (howToDraw == UP)
 801a854:	79fb      	ldrb	r3, [r7, #7]
 801a856:	2b00      	cmp	r3, #0
 801a858:	f040 8131 	bne.w	801aabe <updateUint16Item+0x1636>
			{
				if ( (currentCursorPosition.cursorPosition == 3) && (i == 4) )
 801a85c:	4b40      	ldr	r3, [pc, #256]	; (801a960 <updateUint16Item+0x14d8>)
 801a85e:	781b      	ldrb	r3, [r3, #0]
 801a860:	2b03      	cmp	r3, #3
 801a862:	f040 8083 	bne.w	801a96c <updateUint16Item+0x14e4>
 801a866:	69fb      	ldr	r3, [r7, #28]
 801a868:	2b04      	cmp	r3, #4
 801a86a:	d17f      	bne.n	801a96c <updateUint16Item+0x14e4>
				{
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 801a86c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a870:	b29c      	uxth	r4, r3
 801a872:	69fb      	ldr	r3, [r7, #28]
 801a874:	3301      	adds	r3, #1
 801a876:	011b      	lsls	r3, r3, #4
 801a878:	4a3a      	ldr	r2, [pc, #232]	; (801a964 <updateUint16Item+0x14dc>)
 801a87a:	4413      	add	r3, r2
 801a87c:	4618      	mov	r0, r3
 801a87e:	f7e5 fd39 	bl	80002f4 <strlen>
 801a882:	4603      	mov	r3, r0
 801a884:	4a38      	ldr	r2, [pc, #224]	; (801a968 <updateUint16Item+0x14e0>)
 801a886:	8892      	ldrh	r2, [r2, #4]
 801a888:	fb02 f303 	mul.w	r3, r2, r3
 801a88c:	085b      	lsrs	r3, r3, #1
 801a88e:	b29b      	uxth	r3, r3
 801a890:	1ae3      	subs	r3, r4, r3
 801a892:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a894:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a898:	b29a      	uxth	r2, r3
 801a89a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a89e:	b299      	uxth	r1, r3
 801a8a0:	69fb      	ldr	r3, [r7, #28]
 801a8a2:	b29b      	uxth	r3, r3
 801a8a4:	fb11 f303 	smulbb	r3, r1, r3
 801a8a8:	b29b      	uxth	r3, r3
 801a8aa:	4413      	add	r3, r2
 801a8ac:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 801a8ae:	3301      	adds	r3, #1
 801a8b0:	b29e      	uxth	r6, r3
 801a8b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a8b6:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(uint16Item.itemsArray[i]) * Font12.Width /2,
 801a8b8:	69fb      	ldr	r3, [r7, #28]
 801a8ba:	3301      	adds	r3, #1
 801a8bc:	011b      	lsls	r3, r3, #4
 801a8be:	4a29      	ldr	r2, [pc, #164]	; (801a964 <updateUint16Item+0x14dc>)
 801a8c0:	4413      	add	r3, r2
 801a8c2:	4618      	mov	r0, r3
 801a8c4:	f7e5 fd16 	bl	80002f4 <strlen>
 801a8c8:	4603      	mov	r3, r0
 801a8ca:	4a27      	ldr	r2, [pc, #156]	; (801a968 <updateUint16Item+0x14e0>)
 801a8cc:	8892      	ldrh	r2, [r2, #4]
 801a8ce:	fb02 f303 	mul.w	r3, r2, r3
 801a8d2:	085b      	lsrs	r3, r3, #1
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 801a8d4:	b29b      	uxth	r3, r3
 801a8d6:	4423      	add	r3, r4
 801a8d8:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801a8da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a8de:	b29a      	uxth	r2, r3
 801a8e0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a8e4:	b299      	uxth	r1, r3
 801a8e6:	69fb      	ldr	r3, [r7, #28]
 801a8e8:	b29b      	uxth	r3, r3
 801a8ea:	fb11 f303 	smulbb	r3, r1, r3
 801a8ee:	b29b      	uxth	r3, r3
 801a8f0:	4413      	add	r3, r2
 801a8f2:	b29a      	uxth	r2, r3
 801a8f4:	4b1c      	ldr	r3, [pc, #112]	; (801a968 <updateUint16Item+0x14e0>)
 801a8f6:	88db      	ldrh	r3, [r3, #6]
 801a8f8:	4413      	add	r3, r2
 801a8fa:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 801a8fc:	3301      	adds	r3, #1
 801a8fe:	b29b      	uxth	r3, r3
 801a900:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a904:	9200      	str	r2, [sp, #0]
 801a906:	4602      	mov	r2, r0
 801a908:	4631      	mov	r1, r6
 801a90a:	4628      	mov	r0, r5
 801a90c:	f7f5 f856 	bl	800f9bc <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a910:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a914:	b29c      	uxth	r4, r3
 801a916:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a91a:	b29a      	uxth	r2, r3
 801a91c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a920:	b299      	uxth	r1, r3
 801a922:	69fb      	ldr	r3, [r7, #28]
 801a924:	b29b      	uxth	r3, r3
 801a926:	fb11 f303 	smulbb	r3, r1, r3
 801a92a:	b29b      	uxth	r3, r3
 801a92c:	4413      	add	r3, r2
 801a92e:	b29b      	uxth	r3, r3
 801a930:	3301      	adds	r3, #1
 801a932:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[(i)], BLACK, WHITE, 16, Font12);
 801a934:	69fb      	ldr	r3, [r7, #28]
 801a936:	3301      	adds	r3, #1
 801a938:	011b      	lsls	r3, r3, #4
 801a93a:	4a0a      	ldr	r2, [pc, #40]	; (801a964 <updateUint16Item+0x14dc>)
 801a93c:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a93e:	490a      	ldr	r1, [pc, #40]	; (801a968 <updateUint16Item+0x14e0>)
 801a940:	ab02      	add	r3, sp, #8
 801a942:	c903      	ldmia	r1, {r0, r1}
 801a944:	e883 0003 	stmia.w	r3, {r0, r1}
 801a948:	2310      	movs	r3, #16
 801a94a:	9301      	str	r3, [sp, #4]
 801a94c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a950:	9300      	str	r3, [sp, #0]
 801a952:	2300      	movs	r3, #0
 801a954:	4629      	mov	r1, r5
 801a956:	4620      	mov	r0, r4
 801a958:	f7fd fc9e 	bl	8018298 <centeredString>
 801a95c:	e0af      	b.n	801aabe <updateUint16Item+0x1636>
 801a95e:	bf00      	nop
 801a960:	2400b0dc 	.word	0x2400b0dc
 801a964:	2400c22c 	.word	0x2400c22c
 801a968:	24000030 	.word	0x24000030
					//						centeredString(HorizontalDisplayCenterWidth, HorizontalMenuRectangleStartY + HorizontalMenuRectangleHeight * i + 1,
					//								uint16Item.itemsArray[i], BLACK, LGRAY, 16);
				}
				else if ( (currentCursorPosition.cursorPosition == 4) && (i == 5) )
 801a96c:	4b5b      	ldr	r3, [pc, #364]	; (801aadc <updateUint16Item+0x1654>)
 801a96e:	781b      	ldrb	r3, [r3, #0]
 801a970:	2b04      	cmp	r3, #4
 801a972:	f040 80a4 	bne.w	801aabe <updateUint16Item+0x1636>
 801a976:	69fb      	ldr	r3, [r7, #28]
 801a978:	2b05      	cmp	r3, #5
 801a97a:	f040 80a0 	bne.w	801aabe <updateUint16Item+0x1636>
				{
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 801a97e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a982:	b29c      	uxth	r4, r3
 801a984:	69fb      	ldr	r3, [r7, #28]
 801a986:	3301      	adds	r3, #1
 801a988:	011b      	lsls	r3, r3, #4
 801a98a:	4a55      	ldr	r2, [pc, #340]	; (801aae0 <updateUint16Item+0x1658>)
 801a98c:	4413      	add	r3, r2
 801a98e:	4618      	mov	r0, r3
 801a990:	f7e5 fcb0 	bl	80002f4 <strlen>
 801a994:	4603      	mov	r3, r0
 801a996:	4a53      	ldr	r2, [pc, #332]	; (801aae4 <updateUint16Item+0x165c>)
 801a998:	8892      	ldrh	r2, [r2, #4]
 801a99a:	fb02 f303 	mul.w	r3, r2, r3
 801a99e:	085b      	lsrs	r3, r3, #1
 801a9a0:	b29b      	uxth	r3, r3
 801a9a2:	1ae3      	subs	r3, r4, r3
 801a9a4:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a9a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a9aa:	b29a      	uxth	r2, r3
 801a9ac:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a9b0:	b299      	uxth	r1, r3
 801a9b2:	69fb      	ldr	r3, [r7, #28]
 801a9b4:	b29b      	uxth	r3, r3
 801a9b6:	fb11 f303 	smulbb	r3, r1, r3
 801a9ba:	b29b      	uxth	r3, r3
 801a9bc:	4413      	add	r3, r2
 801a9be:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 801a9c0:	3301      	adds	r3, #1
 801a9c2:	b29e      	uxth	r6, r3
 801a9c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a9c8:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(uint16Item.itemsArray[i]) * Font12.Width /2,
 801a9ca:	69fb      	ldr	r3, [r7, #28]
 801a9cc:	3301      	adds	r3, #1
 801a9ce:	011b      	lsls	r3, r3, #4
 801a9d0:	4a43      	ldr	r2, [pc, #268]	; (801aae0 <updateUint16Item+0x1658>)
 801a9d2:	4413      	add	r3, r2
 801a9d4:	4618      	mov	r0, r3
 801a9d6:	f7e5 fc8d 	bl	80002f4 <strlen>
 801a9da:	4603      	mov	r3, r0
 801a9dc:	4a41      	ldr	r2, [pc, #260]	; (801aae4 <updateUint16Item+0x165c>)
 801a9de:	8892      	ldrh	r2, [r2, #4]
 801a9e0:	fb02 f303 	mul.w	r3, r2, r3
 801a9e4:	085b      	lsrs	r3, r3, #1
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 801a9e6:	b29b      	uxth	r3, r3
 801a9e8:	4423      	add	r3, r4
 801a9ea:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801a9ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a9f0:	b29a      	uxth	r2, r3
 801a9f2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801a9f6:	b299      	uxth	r1, r3
 801a9f8:	69fb      	ldr	r3, [r7, #28]
 801a9fa:	b29b      	uxth	r3, r3
 801a9fc:	fb11 f303 	smulbb	r3, r1, r3
 801aa00:	b29b      	uxth	r3, r3
 801aa02:	4413      	add	r3, r2
 801aa04:	b29a      	uxth	r2, r3
 801aa06:	4b37      	ldr	r3, [pc, #220]	; (801aae4 <updateUint16Item+0x165c>)
 801aa08:	88db      	ldrh	r3, [r3, #6]
 801aa0a:	4413      	add	r3, r2
 801aa0c:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 801aa0e:	3301      	adds	r3, #1
 801aa10:	b29b      	uxth	r3, r3
 801aa12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801aa16:	9200      	str	r2, [sp, #0]
 801aa18:	4602      	mov	r2, r0
 801aa1a:	4631      	mov	r1, r6
 801aa1c:	4628      	mov	r0, r5
 801aa1e:	f7f4 ffcd 	bl	800f9bc <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801aa22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801aa26:	b29c      	uxth	r4, r3
 801aa28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801aa2c:	b29a      	uxth	r2, r3
 801aa2e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801aa32:	b299      	uxth	r1, r3
 801aa34:	69fb      	ldr	r3, [r7, #28]
 801aa36:	b29b      	uxth	r3, r3
 801aa38:	fb11 f303 	smulbb	r3, r1, r3
 801aa3c:	b29b      	uxth	r3, r3
 801aa3e:	4413      	add	r3, r2
 801aa40:	b29b      	uxth	r3, r3
 801aa42:	3301      	adds	r3, #1
 801aa44:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[(i)], BLACK, WHITE, 16, Font12);
 801aa46:	69fb      	ldr	r3, [r7, #28]
 801aa48:	3301      	adds	r3, #1
 801aa4a:	011b      	lsls	r3, r3, #4
 801aa4c:	4a24      	ldr	r2, [pc, #144]	; (801aae0 <updateUint16Item+0x1658>)
 801aa4e:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801aa50:	4924      	ldr	r1, [pc, #144]	; (801aae4 <updateUint16Item+0x165c>)
 801aa52:	ab02      	add	r3, sp, #8
 801aa54:	c903      	ldmia	r1, {r0, r1}
 801aa56:	e883 0003 	stmia.w	r3, {r0, r1}
 801aa5a:	2310      	movs	r3, #16
 801aa5c:	9301      	str	r3, [sp, #4]
 801aa5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aa62:	9300      	str	r3, [sp, #0]
 801aa64:	2300      	movs	r3, #0
 801aa66:	4629      	mov	r1, r5
 801aa68:	4620      	mov	r0, r4
 801aa6a:	f7fd fc15 	bl	8018298 <centeredString>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 801aa6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801aa72:	b29c      	uxth	r4, r3
 801aa74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801aa78:	b29a      	uxth	r2, r3
 801aa7a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801aa7e:	b299      	uxth	r1, r3
 801aa80:	69fb      	ldr	r3, [r7, #28]
 801aa82:	3b01      	subs	r3, #1
 801aa84:	b29b      	uxth	r3, r3
 801aa86:	fb11 f303 	smulbb	r3, r1, r3
 801aa8a:	b29b      	uxth	r3, r3
 801aa8c:	4413      	add	r3, r2
 801aa8e:	b29b      	uxth	r3, r3
 801aa90:	3301      	adds	r3, #1
 801aa92:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[i - 1], BLACK, LGRAY, 16, Font12);
 801aa94:	69fb      	ldr	r3, [r7, #28]
 801aa96:	3b01      	subs	r3, #1
 801aa98:	3301      	adds	r3, #1
 801aa9a:	011b      	lsls	r3, r3, #4
 801aa9c:	4a10      	ldr	r2, [pc, #64]	; (801aae0 <updateUint16Item+0x1658>)
 801aa9e:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 801aaa0:	4910      	ldr	r1, [pc, #64]	; (801aae4 <updateUint16Item+0x165c>)
 801aaa2:	ab02      	add	r3, sp, #8
 801aaa4:	c903      	ldmia	r1, {r0, r1}
 801aaa6:	e883 0003 	stmia.w	r3, {r0, r1}
 801aaaa:	2310      	movs	r3, #16
 801aaac:	9301      	str	r3, [sp, #4]
 801aaae:	f24c 6318 	movw	r3, #50712	; 0xc618
 801aab2:	9300      	str	r3, [sp, #0]
 801aab4:	2300      	movs	r3, #0
 801aab6:	4629      	mov	r1, r5
 801aab8:	4620      	mov	r0, r4
 801aaba:	f7fd fbed 	bl	8018298 <centeredString>
	for (int i = 0; i < uint16Item.numberOfItemsInPage ; i++)
 801aabe:	69fb      	ldr	r3, [r7, #28]
 801aac0:	3301      	adds	r3, #1
 801aac2:	61fb      	str	r3, [r7, #28]
 801aac4:	4b06      	ldr	r3, [pc, #24]	; (801aae0 <updateUint16Item+0x1658>)
 801aac6:	7bdb      	ldrb	r3, [r3, #15]
 801aac8:	461a      	mov	r2, r3
 801aaca:	69fb      	ldr	r3, [r7, #28]
 801aacc:	4293      	cmp	r3, r2
 801aace:	f6fe ad09 	blt.w	80194e4 <updateUint16Item+0x5c>
				}
			}
		}
	}
}
 801aad2:	bf00      	nop
 801aad4:	bf00      	nop
 801aad6:	372c      	adds	r7, #44	; 0x2c
 801aad8:	46bd      	mov	sp, r7
 801aada:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aadc:	2400b0dc 	.word	0x2400b0dc
 801aae0:	2400c22c 	.word	0x2400c22c
 801aae4:	24000030 	.word	0x24000030

0801aae8 <updateStringItem>:
		}
	}
}

void updateStringItem(MENUDRAWType howToDraw)
{
 801aae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aaea:	b08d      	sub	sp, #52	; 0x34
 801aaec:	af04      	add	r7, sp, #16
 801aaee:	4603      	mov	r3, r0
 801aaf0:	71fb      	strb	r3, [r7, #7]
	uint8_t MenuRectangleStartX = 0;
 801aaf2:	2300      	movs	r3, #0
 801aaf4:	77fb      	strb	r3, [r7, #31]
	uint8_t MenuRectangleStartY = 0;
 801aaf6:	2300      	movs	r3, #0
 801aaf8:	77bb      	strb	r3, [r7, #30]
	uint8_t MenuRectangleHeight = 0;
 801aafa:	2300      	movs	r3, #0
 801aafc:	777b      	strb	r3, [r7, #29]
	uint8_t MenuRectangleWidth = 0;
 801aafe:	2300      	movs	r3, #0
 801ab00:	773b      	strb	r3, [r7, #28]
	uint8_t DisplayCenterWidth = 0;
 801ab02:	2300      	movs	r3, #0
 801ab04:	76fb      	strb	r3, [r7, #27]

	if (isPortrait)
 801ab06:	4b09      	ldr	r3, [pc, #36]	; (801ab2c <updateStringItem+0x44>)
 801ab08:	781b      	ldrb	r3, [r3, #0]
 801ab0a:	2b00      	cmp	r3, #0
 801ab0c:	d009      	beq.n	801ab22 <updateStringItem+0x3a>
	{
		MenuRectangleStartX = VerticalMenuRectangleStartX;
 801ab0e:	2302      	movs	r3, #2
 801ab10:	77fb      	strb	r3, [r7, #31]
		MenuRectangleStartY = VerticalMenuRectangleStartY;
 801ab12:	230c      	movs	r3, #12
 801ab14:	77bb      	strb	r3, [r7, #30]
		MenuRectangleHeight = VerticalMenuRectangleHeight;
 801ab16:	230e      	movs	r3, #14
 801ab18:	777b      	strb	r3, [r7, #29]
		MenuRectangleWidth = VerticalMenuRectangleWidth;
 801ab1a:	237c      	movs	r3, #124	; 0x7c
 801ab1c:	773b      	strb	r3, [r7, #28]
		DisplayCenterWidth = VerticalDisplayCenterWidth;
 801ab1e:	2340      	movs	r3, #64	; 0x40
 801ab20:	76fb      	strb	r3, [r7, #27]
//		MenuRectangleHeight = HorizontalMenuRectangleHeight;
//		MenuRectangleWidth = HorizontalMenuRectangleWidth;
//		DisplayCenterWidth = HorizontalDisplayCenterWidth;
	}

	for (int i = 0; i < stringItem.numberOfItemsInPage ; i++)
 801ab22:	2300      	movs	r3, #0
 801ab24:	617b      	str	r3, [r7, #20]
 801ab26:	f001 ba23 	b.w	801bf70 <updateStringItem+0x1488>
 801ab2a:	bf00      	nop
 801ab2c:	2400008c 	.word	0x2400008c
	{
		if  ( (i < 2) && (howToDraw == FULL) )
 801ab30:	697b      	ldr	r3, [r7, #20]
 801ab32:	2b01      	cmp	r3, #1
 801ab34:	dc50      	bgt.n	801abd8 <updateStringItem+0xf0>
 801ab36:	79fb      	ldrb	r3, [r7, #7]
 801ab38:	2b02      	cmp	r3, #2
 801ab3a:	d14d      	bne.n	801abd8 <updateStringItem+0xf0>
		{
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 801ab3c:	7ffb      	ldrb	r3, [r7, #31]
 801ab3e:	b298      	uxth	r0, r3
 801ab40:	7fbb      	ldrb	r3, [r7, #30]
 801ab42:	b29a      	uxth	r2, r3
 801ab44:	7f7b      	ldrb	r3, [r7, #29]
 801ab46:	b299      	uxth	r1, r3
 801ab48:	697b      	ldr	r3, [r7, #20]
 801ab4a:	b29b      	uxth	r3, r3
 801ab4c:	fb11 f303 	smulbb	r3, r1, r3
 801ab50:	b29b      	uxth	r3, r3
 801ab52:	4413      	add	r3, r2
 801ab54:	b29c      	uxth	r4, r3
 801ab56:	7ffb      	ldrb	r3, [r7, #31]
 801ab58:	b29a      	uxth	r2, r3
 801ab5a:	7f3b      	ldrb	r3, [r7, #28]
 801ab5c:	b29b      	uxth	r3, r3
 801ab5e:	4413      	add	r3, r2
 801ab60:	b29d      	uxth	r5, r3
 801ab62:	7fbb      	ldrb	r3, [r7, #30]
 801ab64:	b29a      	uxth	r2, r3
 801ab66:	7f7b      	ldrb	r3, [r7, #29]
 801ab68:	b299      	uxth	r1, r3
					MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 801ab6a:	697b      	ldr	r3, [r7, #20]
 801ab6c:	3301      	adds	r3, #1
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 801ab6e:	b29b      	uxth	r3, r3
 801ab70:	fb11 f303 	smulbb	r3, r1, r3
 801ab74:	b29b      	uxth	r3, r3
 801ab76:	4413      	add	r3, r2
 801ab78:	b29b      	uxth	r3, r3
 801ab7a:	2200      	movs	r2, #0
 801ab7c:	9202      	str	r2, [sp, #8]
 801ab7e:	2201      	movs	r2, #1
 801ab80:	9201      	str	r2, [sp, #4]
 801ab82:	2200      	movs	r2, #0
 801ab84:	9200      	str	r2, [sp, #0]
 801ab86:	462a      	mov	r2, r5
 801ab88:	4621      	mov	r1, r4
 801ab8a:	f7f5 f891 	bl	800fcb0 <Paint_DrawRectangle>
					BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
			centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801ab8e:	7efb      	ldrb	r3, [r7, #27]
 801ab90:	b29c      	uxth	r4, r3
 801ab92:	7fbb      	ldrb	r3, [r7, #30]
 801ab94:	b29a      	uxth	r2, r3
 801ab96:	7f7b      	ldrb	r3, [r7, #29]
 801ab98:	b299      	uxth	r1, r3
 801ab9a:	697b      	ldr	r3, [r7, #20]
 801ab9c:	b29b      	uxth	r3, r3
 801ab9e:	fb11 f303 	smulbb	r3, r1, r3
 801aba2:	b29b      	uxth	r3, r3
 801aba4:	4413      	add	r3, r2
 801aba6:	b29b      	uxth	r3, r3
 801aba8:	3301      	adds	r3, #1
 801abaa:	b29d      	uxth	r5, r3
					stringItem.itemsArray[i], BLACK, WHITE, 16, Font12);
 801abac:	697b      	ldr	r3, [r7, #20]
 801abae:	011b      	lsls	r3, r3, #4
 801abb0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801abb4:	4a8e      	ldr	r2, [pc, #568]	; (801adf0 <updateStringItem+0x308>)
 801abb6:	4413      	add	r3, r2
 801abb8:	1d1a      	adds	r2, r3, #4
			centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801abba:	498e      	ldr	r1, [pc, #568]	; (801adf4 <updateStringItem+0x30c>)
 801abbc:	ab02      	add	r3, sp, #8
 801abbe:	c903      	ldmia	r1, {r0, r1}
 801abc0:	e883 0003 	stmia.w	r3, {r0, r1}
 801abc4:	2310      	movs	r3, #16
 801abc6:	9301      	str	r3, [sp, #4]
 801abc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801abcc:	9300      	str	r3, [sp, #0]
 801abce:	2300      	movs	r3, #0
 801abd0:	4629      	mov	r1, r5
 801abd2:	4620      	mov	r0, r4
 801abd4:	f7fd fb60 	bl	8018298 <centeredString>
		}
		if ( (i >= 2) && (i < stringItem.numberOfItemsInPage - 2) )
 801abd8:	697b      	ldr	r3, [r7, #20]
 801abda:	2b01      	cmp	r3, #1
 801abdc:	f340 873c 	ble.w	801ba58 <updateStringItem+0xf70>
 801abe0:	4b83      	ldr	r3, [pc, #524]	; (801adf0 <updateStringItem+0x308>)
 801abe2:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 801abe6:	3b02      	subs	r3, #2
 801abe8:	697a      	ldr	r2, [r7, #20]
 801abea:	429a      	cmp	r2, r3
 801abec:	f280 8734 	bge.w	801ba58 <updateStringItem+0xf70>
		{
			if (howToDraw == FULL)
 801abf0:	79fb      	ldrb	r3, [r7, #7]
 801abf2:	2b02      	cmp	r3, #2
 801abf4:	d159      	bne.n	801acaa <updateStringItem+0x1c2>
			{
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 801abf6:	7ffb      	ldrb	r3, [r7, #31]
 801abf8:	b298      	uxth	r0, r3
 801abfa:	7fbb      	ldrb	r3, [r7, #30]
 801abfc:	b29a      	uxth	r2, r3
 801abfe:	7f7b      	ldrb	r3, [r7, #29]
 801ac00:	b299      	uxth	r1, r3
 801ac02:	697b      	ldr	r3, [r7, #20]
 801ac04:	b29b      	uxth	r3, r3
 801ac06:	fb11 f303 	smulbb	r3, r1, r3
 801ac0a:	b29b      	uxth	r3, r3
 801ac0c:	4413      	add	r3, r2
 801ac0e:	b29c      	uxth	r4, r3
 801ac10:	7ffb      	ldrb	r3, [r7, #31]
 801ac12:	b29a      	uxth	r2, r3
 801ac14:	7f3b      	ldrb	r3, [r7, #28]
 801ac16:	085b      	lsrs	r3, r3, #1
 801ac18:	b2db      	uxtb	r3, r3
 801ac1a:	b29b      	uxth	r3, r3
 801ac1c:	4413      	add	r3, r2
 801ac1e:	b29d      	uxth	r5, r3
 801ac20:	7fbb      	ldrb	r3, [r7, #30]
 801ac22:	b29a      	uxth	r2, r3
 801ac24:	7f7b      	ldrb	r3, [r7, #29]
 801ac26:	b299      	uxth	r1, r3
						MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 801ac28:	697b      	ldr	r3, [r7, #20]
 801ac2a:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 801ac2c:	b29b      	uxth	r3, r3
 801ac2e:	fb11 f303 	smulbb	r3, r1, r3
 801ac32:	b29b      	uxth	r3, r3
 801ac34:	4413      	add	r3, r2
 801ac36:	b29b      	uxth	r3, r3
 801ac38:	2200      	movs	r2, #0
 801ac3a:	9202      	str	r2, [sp, #8]
 801ac3c:	2201      	movs	r2, #1
 801ac3e:	9201      	str	r2, [sp, #4]
 801ac40:	2200      	movs	r2, #0
 801ac42:	9200      	str	r2, [sp, #0]
 801ac44:	462a      	mov	r2, r5
 801ac46:	4621      	mov	r1, r4
 801ac48:	f7f5 f832 	bl	800fcb0 <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
				Paint_DrawRectangle( MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * i,
 801ac4c:	7ffb      	ldrb	r3, [r7, #31]
 801ac4e:	b29a      	uxth	r2, r3
 801ac50:	7f3b      	ldrb	r3, [r7, #28]
 801ac52:	085b      	lsrs	r3, r3, #1
 801ac54:	b2db      	uxtb	r3, r3
 801ac56:	b29b      	uxth	r3, r3
 801ac58:	4413      	add	r3, r2
 801ac5a:	b298      	uxth	r0, r3
 801ac5c:	7fbb      	ldrb	r3, [r7, #30]
 801ac5e:	b29a      	uxth	r2, r3
 801ac60:	7f7b      	ldrb	r3, [r7, #29]
 801ac62:	b299      	uxth	r1, r3
 801ac64:	697b      	ldr	r3, [r7, #20]
 801ac66:	b29b      	uxth	r3, r3
 801ac68:	fb11 f303 	smulbb	r3, r1, r3
 801ac6c:	b29b      	uxth	r3, r3
 801ac6e:	4413      	add	r3, r2
 801ac70:	b29c      	uxth	r4, r3
 801ac72:	7ffb      	ldrb	r3, [r7, #31]
 801ac74:	b29a      	uxth	r2, r3
 801ac76:	7f3b      	ldrb	r3, [r7, #28]
 801ac78:	b29b      	uxth	r3, r3
 801ac7a:	4413      	add	r3, r2
 801ac7c:	b29d      	uxth	r5, r3
 801ac7e:	7fbb      	ldrb	r3, [r7, #30]
 801ac80:	b29a      	uxth	r2, r3
 801ac82:	7f7b      	ldrb	r3, [r7, #29]
 801ac84:	b299      	uxth	r1, r3
						MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 801ac86:	697b      	ldr	r3, [r7, #20]
 801ac88:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * i,
 801ac8a:	b29b      	uxth	r3, r3
 801ac8c:	fb11 f303 	smulbb	r3, r1, r3
 801ac90:	b29b      	uxth	r3, r3
 801ac92:	4413      	add	r3, r2
 801ac94:	b29b      	uxth	r3, r3
 801ac96:	2200      	movs	r2, #0
 801ac98:	9202      	str	r2, [sp, #8]
 801ac9a:	2201      	movs	r2, #1
 801ac9c:	9201      	str	r2, [sp, #4]
 801ac9e:	2200      	movs	r2, #0
 801aca0:	9200      	str	r2, [sp, #0]
 801aca2:	462a      	mov	r2, r5
 801aca4:	4621      	mov	r1, r4
 801aca6:	f7f5 f803 	bl	800fcb0 <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
			}

			if ( (i == 2) )
 801acaa:	697b      	ldr	r3, [r7, #20]
 801acac:	2b02      	cmp	r3, #2
 801acae:	f040 8371 	bne.w	801b394 <updateStringItem+0x8ac>
			{
//				char localString[8] = "";
//				sprintf(localString,"%03d",stringItem.startValue);
				if (currentCursorPosition.cursorPosition == 0x02)
 801acb2:	4b51      	ldr	r3, [pc, #324]	; (801adf8 <updateStringItem+0x310>)
 801acb4:	781b      	ldrb	r3, [r3, #0]
 801acb6:	2b02      	cmp	r3, #2
 801acb8:	f040 81ba 	bne.w	801b030 <updateStringItem+0x548>
				{
					if ( (howToDraw == LEFT) || (howToDraw == FULL) )
 801acbc:	79fb      	ldrb	r3, [r7, #7]
 801acbe:	2b03      	cmp	r3, #3
 801acc0:	d003      	beq.n	801acca <updateStringItem+0x1e2>
 801acc2:	79fb      	ldrb	r3, [r7, #7]
 801acc4:	2b02      	cmp	r3, #2
 801acc6:	f040 8099 	bne.w	801adfc <updateStringItem+0x314>
					{
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801acca:	7ffb      	ldrb	r3, [r7, #31]
 801accc:	b29b      	uxth	r3, r3
 801acce:	3301      	adds	r3, #1
 801acd0:	b298      	uxth	r0, r3
 801acd2:	7fbb      	ldrb	r3, [r7, #30]
 801acd4:	b29a      	uxth	r2, r3
 801acd6:	7f7b      	ldrb	r3, [r7, #29]
 801acd8:	b299      	uxth	r1, r3
 801acda:	697b      	ldr	r3, [r7, #20]
 801acdc:	b29b      	uxth	r3, r3
 801acde:	fb11 f303 	smulbb	r3, r1, r3
 801ace2:	b29b      	uxth	r3, r3
 801ace4:	4413      	add	r3, r2
 801ace6:	b29b      	uxth	r3, r3
 801ace8:	3301      	adds	r3, #1
 801acea:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, LGRAY,  BLACK);
 801acec:	697b      	ldr	r3, [r7, #20]
 801acee:	011b      	lsls	r3, r3, #4
 801acf0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801acf4:	4a3e      	ldr	r2, [pc, #248]	; (801adf0 <updateStringItem+0x308>)
 801acf6:	4413      	add	r3, r2
 801acf8:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801acfa:	2300      	movs	r3, #0
 801acfc:	9301      	str	r3, [sp, #4]
 801acfe:	f24c 6318 	movw	r3, #50712	; 0xc618
 801ad02:	9300      	str	r3, [sp, #0]
 801ad04:	4b3b      	ldr	r3, [pc, #236]	; (801adf4 <updateStringItem+0x30c>)
 801ad06:	f7f5 fa77 	bl	80101f8 <Paint_DrawString_EN>
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 801ad0a:	7ffb      	ldrb	r3, [r7, #31]
 801ad0c:	b29a      	uxth	r2, r3
 801ad0e:	7f3b      	ldrb	r3, [r7, #28]
 801ad10:	085b      	lsrs	r3, r3, #1
 801ad12:	b2db      	uxtb	r3, r3
 801ad14:	b29b      	uxth	r3, r3
 801ad16:	4413      	add	r3, r2
 801ad18:	b29b      	uxth	r3, r3
 801ad1a:	3301      	adds	r3, #1
 801ad1c:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801ad1e:	7fbb      	ldrb	r3, [r7, #30]
 801ad20:	b29a      	uxth	r2, r3
 801ad22:	7f7b      	ldrb	r3, [r7, #29]
 801ad24:	b299      	uxth	r1, r3
 801ad26:	697b      	ldr	r3, [r7, #20]
 801ad28:	b29b      	uxth	r3, r3
 801ad2a:	fb11 f303 	smulbb	r3, r1, r3
 801ad2e:	b29b      	uxth	r3, r3
 801ad30:	4413      	add	r3, r2
 801ad32:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 801ad34:	3301      	adds	r3, #1
 801ad36:	b29e      	uxth	r6, r3
								MenuRectangleStartX + MenuRectangleWidth / 2 + 1 + strlen(stringItem.valuesArray[stringItem.startValue]) * Font12.Width,
 801ad38:	7ffb      	ldrb	r3, [r7, #31]
 801ad3a:	b29a      	uxth	r2, r3
 801ad3c:	7f3b      	ldrb	r3, [r7, #28]
 801ad3e:	085b      	lsrs	r3, r3, #1
 801ad40:	b2db      	uxtb	r3, r3
 801ad42:	b29b      	uxth	r3, r3
 801ad44:	4413      	add	r3, r2
 801ad46:	b29c      	uxth	r4, r3
 801ad48:	4b29      	ldr	r3, [pc, #164]	; (801adf0 <updateStringItem+0x308>)
 801ad4a:	799b      	ldrb	r3, [r3, #6]
 801ad4c:	011b      	lsls	r3, r3, #4
 801ad4e:	3308      	adds	r3, #8
 801ad50:	4a27      	ldr	r2, [pc, #156]	; (801adf0 <updateStringItem+0x308>)
 801ad52:	4413      	add	r3, r2
 801ad54:	4618      	mov	r0, r3
 801ad56:	f7e5 facd 	bl	80002f4 <strlen>
 801ad5a:	4603      	mov	r3, r0
 801ad5c:	b29a      	uxth	r2, r3
 801ad5e:	4b25      	ldr	r3, [pc, #148]	; (801adf4 <updateStringItem+0x30c>)
 801ad60:	889b      	ldrh	r3, [r3, #4]
 801ad62:	fb12 f303 	smulbb	r3, r2, r3
 801ad66:	b29b      	uxth	r3, r3
 801ad68:	4423      	add	r3, r4
 801ad6a:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 801ad6c:	3301      	adds	r3, #1
 801ad6e:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801ad70:	7fbb      	ldrb	r3, [r7, #30]
 801ad72:	b29a      	uxth	r2, r3
 801ad74:	7f7b      	ldrb	r3, [r7, #29]
 801ad76:	b299      	uxth	r1, r3
 801ad78:	697b      	ldr	r3, [r7, #20]
 801ad7a:	b29b      	uxth	r3, r3
 801ad7c:	fb11 f303 	smulbb	r3, r1, r3
 801ad80:	b29b      	uxth	r3, r3
 801ad82:	4413      	add	r3, r2
 801ad84:	b29a      	uxth	r2, r3
 801ad86:	4b1b      	ldr	r3, [pc, #108]	; (801adf4 <updateStringItem+0x30c>)
 801ad88:	88db      	ldrh	r3, [r3, #6]
 801ad8a:	4413      	add	r3, r2
 801ad8c:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 801ad8e:	3301      	adds	r3, #1
 801ad90:	b29b      	uxth	r3, r3
 801ad92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ad96:	9200      	str	r2, [sp, #0]
 801ad98:	4602      	mov	r2, r0
 801ad9a:	4631      	mov	r1, r6
 801ad9c:	4628      	mov	r0, r5
 801ad9e:	f7f4 fe0d 	bl	800f9bc <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801ada2:	7ffb      	ldrb	r3, [r7, #31]
 801ada4:	b29a      	uxth	r2, r3
 801ada6:	7f3b      	ldrb	r3, [r7, #28]
 801ada8:	085b      	lsrs	r3, r3, #1
 801adaa:	b2db      	uxtb	r3, r3
 801adac:	b29b      	uxth	r3, r3
 801adae:	4413      	add	r3, r2
 801adb0:	b29b      	uxth	r3, r3
 801adb2:	3301      	adds	r3, #1
 801adb4:	b298      	uxth	r0, r3
 801adb6:	7fbb      	ldrb	r3, [r7, #30]
 801adb8:	b29a      	uxth	r2, r3
 801adba:	7f7b      	ldrb	r3, [r7, #29]
 801adbc:	b299      	uxth	r1, r3
 801adbe:	697b      	ldr	r3, [r7, #20]
 801adc0:	b29b      	uxth	r3, r3
 801adc2:	fb11 f303 	smulbb	r3, r1, r3
 801adc6:	b29b      	uxth	r3, r3
 801adc8:	4413      	add	r3, r2
 801adca:	b29b      	uxth	r3, r3
 801adcc:	3301      	adds	r3, #1
 801adce:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, WHITE,  BLACK);
 801add0:	4b07      	ldr	r3, [pc, #28]	; (801adf0 <updateStringItem+0x308>)
 801add2:	799b      	ldrb	r3, [r3, #6]
 801add4:	011b      	lsls	r3, r3, #4
 801add6:	3308      	adds	r3, #8
 801add8:	4a05      	ldr	r2, [pc, #20]	; (801adf0 <updateStringItem+0x308>)
 801adda:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801addc:	2300      	movs	r3, #0
 801adde:	9301      	str	r3, [sp, #4]
 801ade0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ade4:	9300      	str	r3, [sp, #0]
 801ade6:	4b03      	ldr	r3, [pc, #12]	; (801adf4 <updateStringItem+0x30c>)
 801ade8:	f7f5 fa06 	bl	80101f8 <Paint_DrawString_EN>
 801adec:	e2d2      	b.n	801b394 <updateStringItem+0x8ac>
 801adee:	bf00      	nop
 801adf0:	2400c440 	.word	0x2400c440
 801adf4:	24000030 	.word	0x24000030
 801adf8:	2400b0dc 	.word	0x2400b0dc
					}
					else if (howToDraw == DOWN)
 801adfc:	79fb      	ldrb	r3, [r7, #7]
 801adfe:	2b01      	cmp	r3, #1
 801ae00:	f040 8087 	bne.w	801af12 <updateStringItem+0x42a>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801ae04:	7ffb      	ldrb	r3, [r7, #31]
 801ae06:	b29b      	uxth	r3, r3
 801ae08:	3301      	adds	r3, #1
 801ae0a:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801ae0c:	7fbb      	ldrb	r3, [r7, #30]
 801ae0e:	b29a      	uxth	r2, r3
 801ae10:	7f7b      	ldrb	r3, [r7, #29]
 801ae12:	b299      	uxth	r1, r3
 801ae14:	697b      	ldr	r3, [r7, #20]
 801ae16:	b29b      	uxth	r3, r3
 801ae18:	fb11 f303 	smulbb	r3, r1, r3
 801ae1c:	b29b      	uxth	r3, r3
 801ae1e:	4413      	add	r3, r2
 801ae20:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801ae22:	3301      	adds	r3, #1
 801ae24:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 801ae26:	7ffb      	ldrb	r3, [r7, #31]
 801ae28:	b29c      	uxth	r4, r3
 801ae2a:	697b      	ldr	r3, [r7, #20]
 801ae2c:	011b      	lsls	r3, r3, #4
 801ae2e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801ae32:	4a7d      	ldr	r2, [pc, #500]	; (801b028 <updateStringItem+0x540>)
 801ae34:	4413      	add	r3, r2
 801ae36:	3304      	adds	r3, #4
 801ae38:	4618      	mov	r0, r3
 801ae3a:	f7e5 fa5b 	bl	80002f4 <strlen>
 801ae3e:	4603      	mov	r3, r0
 801ae40:	b29a      	uxth	r2, r3
 801ae42:	4b7a      	ldr	r3, [pc, #488]	; (801b02c <updateStringItem+0x544>)
 801ae44:	889b      	ldrh	r3, [r3, #4]
 801ae46:	fb12 f303 	smulbb	r3, r2, r3
 801ae4a:	b29b      	uxth	r3, r3
 801ae4c:	4423      	add	r3, r4
 801ae4e:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801ae50:	3301      	adds	r3, #1
 801ae52:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801ae54:	7fbb      	ldrb	r3, [r7, #30]
 801ae56:	b29a      	uxth	r2, r3
 801ae58:	7f7b      	ldrb	r3, [r7, #29]
 801ae5a:	b299      	uxth	r1, r3
 801ae5c:	697b      	ldr	r3, [r7, #20]
 801ae5e:	b29b      	uxth	r3, r3
 801ae60:	fb11 f303 	smulbb	r3, r1, r3
 801ae64:	b29b      	uxth	r3, r3
 801ae66:	4413      	add	r3, r2
 801ae68:	b29a      	uxth	r2, r3
 801ae6a:	4b70      	ldr	r3, [pc, #448]	; (801b02c <updateStringItem+0x544>)
 801ae6c:	88db      	ldrh	r3, [r3, #6]
 801ae6e:	4413      	add	r3, r2
 801ae70:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801ae72:	3301      	adds	r3, #1
 801ae74:	b29b      	uxth	r3, r3
 801ae76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ae7a:	9200      	str	r2, [sp, #0]
 801ae7c:	4602      	mov	r2, r0
 801ae7e:	4631      	mov	r1, r6
 801ae80:	4628      	mov	r0, r5
 801ae82:	f7f4 fd9b 	bl	800f9bc <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801ae86:	7ffb      	ldrb	r3, [r7, #31]
 801ae88:	b29b      	uxth	r3, r3
 801ae8a:	3301      	adds	r3, #1
 801ae8c:	b298      	uxth	r0, r3
 801ae8e:	7fbb      	ldrb	r3, [r7, #30]
 801ae90:	b29a      	uxth	r2, r3
 801ae92:	7f7b      	ldrb	r3, [r7, #29]
 801ae94:	b299      	uxth	r1, r3
 801ae96:	697b      	ldr	r3, [r7, #20]
 801ae98:	b29b      	uxth	r3, r3
 801ae9a:	fb11 f303 	smulbb	r3, r1, r3
 801ae9e:	b29b      	uxth	r3, r3
 801aea0:	4413      	add	r3, r2
 801aea2:	b29b      	uxth	r3, r3
 801aea4:	3301      	adds	r3, #1
 801aea6:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, WHITE,  BLACK);
 801aea8:	697b      	ldr	r3, [r7, #20]
 801aeaa:	011b      	lsls	r3, r3, #4
 801aeac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801aeb0:	4a5d      	ldr	r2, [pc, #372]	; (801b028 <updateStringItem+0x540>)
 801aeb2:	4413      	add	r3, r2
 801aeb4:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801aeb6:	2300      	movs	r3, #0
 801aeb8:	9301      	str	r3, [sp, #4]
 801aeba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aebe:	9300      	str	r3, [sp, #0]
 801aec0:	4b5a      	ldr	r3, [pc, #360]	; (801b02c <updateStringItem+0x544>)
 801aec2:	f7f5 f999 	bl	80101f8 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801aec6:	7ffb      	ldrb	r3, [r7, #31]
 801aec8:	b29a      	uxth	r2, r3
 801aeca:	7f3b      	ldrb	r3, [r7, #28]
 801aecc:	085b      	lsrs	r3, r3, #1
 801aece:	b2db      	uxtb	r3, r3
 801aed0:	b29b      	uxth	r3, r3
 801aed2:	4413      	add	r3, r2
 801aed4:	b29b      	uxth	r3, r3
 801aed6:	3301      	adds	r3, #1
 801aed8:	b298      	uxth	r0, r3
 801aeda:	7fbb      	ldrb	r3, [r7, #30]
 801aedc:	b29a      	uxth	r2, r3
 801aede:	7f7b      	ldrb	r3, [r7, #29]
 801aee0:	b299      	uxth	r1, r3
 801aee2:	697b      	ldr	r3, [r7, #20]
 801aee4:	b29b      	uxth	r3, r3
 801aee6:	fb11 f303 	smulbb	r3, r1, r3
 801aeea:	b29b      	uxth	r3, r3
 801aeec:	4413      	add	r3, r2
 801aeee:	b29b      	uxth	r3, r3
 801aef0:	3301      	adds	r3, #1
 801aef2:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, WHITE,  BLACK);
 801aef4:	4b4c      	ldr	r3, [pc, #304]	; (801b028 <updateStringItem+0x540>)
 801aef6:	799b      	ldrb	r3, [r3, #6]
 801aef8:	011b      	lsls	r3, r3, #4
 801aefa:	3308      	adds	r3, #8
 801aefc:	4a4a      	ldr	r2, [pc, #296]	; (801b028 <updateStringItem+0x540>)
 801aefe:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801af00:	2300      	movs	r3, #0
 801af02:	9301      	str	r3, [sp, #4]
 801af04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801af08:	9300      	str	r3, [sp, #0]
 801af0a:	4b48      	ldr	r3, [pc, #288]	; (801b02c <updateStringItem+0x544>)
 801af0c:	f7f5 f974 	bl	80101f8 <Paint_DrawString_EN>
 801af10:	e240      	b.n	801b394 <updateStringItem+0x8ac>
					}
					else if (howToDraw == UP)
 801af12:	79fb      	ldrb	r3, [r7, #7]
 801af14:	2b00      	cmp	r3, #0
 801af16:	f040 823d 	bne.w	801b394 <updateStringItem+0x8ac>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801af1a:	7ffb      	ldrb	r3, [r7, #31]
 801af1c:	b29b      	uxth	r3, r3
 801af1e:	3301      	adds	r3, #1
 801af20:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801af22:	7fbb      	ldrb	r3, [r7, #30]
 801af24:	b29a      	uxth	r2, r3
 801af26:	7f7b      	ldrb	r3, [r7, #29]
 801af28:	b299      	uxth	r1, r3
 801af2a:	697b      	ldr	r3, [r7, #20]
 801af2c:	b29b      	uxth	r3, r3
 801af2e:	fb11 f303 	smulbb	r3, r1, r3
 801af32:	b29b      	uxth	r3, r3
 801af34:	4413      	add	r3, r2
 801af36:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801af38:	3301      	adds	r3, #1
 801af3a:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 801af3c:	7ffb      	ldrb	r3, [r7, #31]
 801af3e:	b29c      	uxth	r4, r3
 801af40:	697b      	ldr	r3, [r7, #20]
 801af42:	011b      	lsls	r3, r3, #4
 801af44:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801af48:	4a37      	ldr	r2, [pc, #220]	; (801b028 <updateStringItem+0x540>)
 801af4a:	4413      	add	r3, r2
 801af4c:	3304      	adds	r3, #4
 801af4e:	4618      	mov	r0, r3
 801af50:	f7e5 f9d0 	bl	80002f4 <strlen>
 801af54:	4603      	mov	r3, r0
 801af56:	b29a      	uxth	r2, r3
 801af58:	4b34      	ldr	r3, [pc, #208]	; (801b02c <updateStringItem+0x544>)
 801af5a:	889b      	ldrh	r3, [r3, #4]
 801af5c:	fb12 f303 	smulbb	r3, r2, r3
 801af60:	b29b      	uxth	r3, r3
 801af62:	4423      	add	r3, r4
 801af64:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801af66:	3301      	adds	r3, #1
 801af68:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801af6a:	7fbb      	ldrb	r3, [r7, #30]
 801af6c:	b29a      	uxth	r2, r3
 801af6e:	7f7b      	ldrb	r3, [r7, #29]
 801af70:	b299      	uxth	r1, r3
 801af72:	697b      	ldr	r3, [r7, #20]
 801af74:	b29b      	uxth	r3, r3
 801af76:	fb11 f303 	smulbb	r3, r1, r3
 801af7a:	b29b      	uxth	r3, r3
 801af7c:	4413      	add	r3, r2
 801af7e:	b29a      	uxth	r2, r3
 801af80:	4b2a      	ldr	r3, [pc, #168]	; (801b02c <updateStringItem+0x544>)
 801af82:	88db      	ldrh	r3, [r3, #6]
 801af84:	4413      	add	r3, r2
 801af86:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801af88:	3301      	adds	r3, #1
 801af8a:	b29b      	uxth	r3, r3
 801af8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801af90:	9200      	str	r2, [sp, #0]
 801af92:	4602      	mov	r2, r0
 801af94:	4631      	mov	r1, r6
 801af96:	4628      	mov	r0, r5
 801af98:	f7f4 fd10 	bl	800f9bc <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801af9c:	7ffb      	ldrb	r3, [r7, #31]
 801af9e:	b29b      	uxth	r3, r3
 801afa0:	3301      	adds	r3, #1
 801afa2:	b298      	uxth	r0, r3
 801afa4:	7fbb      	ldrb	r3, [r7, #30]
 801afa6:	b29a      	uxth	r2, r3
 801afa8:	7f7b      	ldrb	r3, [r7, #29]
 801afaa:	b299      	uxth	r1, r3
 801afac:	697b      	ldr	r3, [r7, #20]
 801afae:	b29b      	uxth	r3, r3
 801afb0:	fb11 f303 	smulbb	r3, r1, r3
 801afb4:	b29b      	uxth	r3, r3
 801afb6:	4413      	add	r3, r2
 801afb8:	b29b      	uxth	r3, r3
 801afba:	3301      	adds	r3, #1
 801afbc:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, LGRAY,  BLACK);
 801afbe:	697b      	ldr	r3, [r7, #20]
 801afc0:	011b      	lsls	r3, r3, #4
 801afc2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801afc6:	4a18      	ldr	r2, [pc, #96]	; (801b028 <updateStringItem+0x540>)
 801afc8:	4413      	add	r3, r2
 801afca:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801afcc:	2300      	movs	r3, #0
 801afce:	9301      	str	r3, [sp, #4]
 801afd0:	f24c 6318 	movw	r3, #50712	; 0xc618
 801afd4:	9300      	str	r3, [sp, #0]
 801afd6:	4b15      	ldr	r3, [pc, #84]	; (801b02c <updateStringItem+0x544>)
 801afd8:	f7f5 f90e 	bl	80101f8 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801afdc:	7ffb      	ldrb	r3, [r7, #31]
 801afde:	b29a      	uxth	r2, r3
 801afe0:	7f3b      	ldrb	r3, [r7, #28]
 801afe2:	085b      	lsrs	r3, r3, #1
 801afe4:	b2db      	uxtb	r3, r3
 801afe6:	b29b      	uxth	r3, r3
 801afe8:	4413      	add	r3, r2
 801afea:	b29b      	uxth	r3, r3
 801afec:	3301      	adds	r3, #1
 801afee:	b298      	uxth	r0, r3
 801aff0:	7fbb      	ldrb	r3, [r7, #30]
 801aff2:	b29a      	uxth	r2, r3
 801aff4:	7f7b      	ldrb	r3, [r7, #29]
 801aff6:	b299      	uxth	r1, r3
 801aff8:	697b      	ldr	r3, [r7, #20]
 801affa:	b29b      	uxth	r3, r3
 801affc:	fb11 f303 	smulbb	r3, r1, r3
 801b000:	b29b      	uxth	r3, r3
 801b002:	4413      	add	r3, r2
 801b004:	b29b      	uxth	r3, r3
 801b006:	3301      	adds	r3, #1
 801b008:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, WHITE,  BLACK);
 801b00a:	4b07      	ldr	r3, [pc, #28]	; (801b028 <updateStringItem+0x540>)
 801b00c:	799b      	ldrb	r3, [r3, #6]
 801b00e:	011b      	lsls	r3, r3, #4
 801b010:	3308      	adds	r3, #8
 801b012:	4a05      	ldr	r2, [pc, #20]	; (801b028 <updateStringItem+0x540>)
 801b014:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b016:	2300      	movs	r3, #0
 801b018:	9301      	str	r3, [sp, #4]
 801b01a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b01e:	9300      	str	r3, [sp, #0]
 801b020:	4b02      	ldr	r3, [pc, #8]	; (801b02c <updateStringItem+0x544>)
 801b022:	f7f5 f8e9 	bl	80101f8 <Paint_DrawString_EN>
 801b026:	e1b5      	b.n	801b394 <updateStringItem+0x8ac>
 801b028:	2400c440 	.word	0x2400c440
 801b02c:	24000030 	.word	0x24000030
					}

				}
				else if (currentCursorPosition.cursorPosition == VALUE)
 801b030:	4b92      	ldr	r3, [pc, #584]	; (801b27c <updateStringItem+0x794>)
 801b032:	781b      	ldrb	r3, [r3, #0]
 801b034:	2b0b      	cmp	r3, #11
 801b036:	f040 8127 	bne.w	801b288 <updateStringItem+0x7a0>
				{
					if (howToDraw == RIGHT)
 801b03a:	79fb      	ldrb	r3, [r7, #7]
 801b03c:	2b04      	cmp	r3, #4
 801b03e:	f040 8087 	bne.w	801b150 <updateStringItem+0x668>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801b042:	7ffb      	ldrb	r3, [r7, #31]
 801b044:	b29b      	uxth	r3, r3
 801b046:	3301      	adds	r3, #1
 801b048:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b04a:	7fbb      	ldrb	r3, [r7, #30]
 801b04c:	b29a      	uxth	r2, r3
 801b04e:	7f7b      	ldrb	r3, [r7, #29]
 801b050:	b299      	uxth	r1, r3
 801b052:	697b      	ldr	r3, [r7, #20]
 801b054:	b29b      	uxth	r3, r3
 801b056:	fb11 f303 	smulbb	r3, r1, r3
 801b05a:	b29b      	uxth	r3, r3
 801b05c:	4413      	add	r3, r2
 801b05e:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801b060:	3301      	adds	r3, #1
 801b062:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 801b064:	7ffb      	ldrb	r3, [r7, #31]
 801b066:	b29c      	uxth	r4, r3
 801b068:	697b      	ldr	r3, [r7, #20]
 801b06a:	011b      	lsls	r3, r3, #4
 801b06c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801b070:	4a83      	ldr	r2, [pc, #524]	; (801b280 <updateStringItem+0x798>)
 801b072:	4413      	add	r3, r2
 801b074:	3304      	adds	r3, #4
 801b076:	4618      	mov	r0, r3
 801b078:	f7e5 f93c 	bl	80002f4 <strlen>
 801b07c:	4603      	mov	r3, r0
 801b07e:	b29a      	uxth	r2, r3
 801b080:	4b80      	ldr	r3, [pc, #512]	; (801b284 <updateStringItem+0x79c>)
 801b082:	889b      	ldrh	r3, [r3, #4]
 801b084:	fb12 f303 	smulbb	r3, r2, r3
 801b088:	b29b      	uxth	r3, r3
 801b08a:	4423      	add	r3, r4
 801b08c:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801b08e:	3301      	adds	r3, #1
 801b090:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801b092:	7fbb      	ldrb	r3, [r7, #30]
 801b094:	b29a      	uxth	r2, r3
 801b096:	7f7b      	ldrb	r3, [r7, #29]
 801b098:	b299      	uxth	r1, r3
 801b09a:	697b      	ldr	r3, [r7, #20]
 801b09c:	b29b      	uxth	r3, r3
 801b09e:	fb11 f303 	smulbb	r3, r1, r3
 801b0a2:	b29b      	uxth	r3, r3
 801b0a4:	4413      	add	r3, r2
 801b0a6:	b29a      	uxth	r2, r3
 801b0a8:	4b76      	ldr	r3, [pc, #472]	; (801b284 <updateStringItem+0x79c>)
 801b0aa:	88db      	ldrh	r3, [r3, #6]
 801b0ac:	4413      	add	r3, r2
 801b0ae:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801b0b0:	3301      	adds	r3, #1
 801b0b2:	b29b      	uxth	r3, r3
 801b0b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b0b8:	9200      	str	r2, [sp, #0]
 801b0ba:	4602      	mov	r2, r0
 801b0bc:	4631      	mov	r1, r6
 801b0be:	4628      	mov	r0, r5
 801b0c0:	f7f4 fc7c 	bl	800f9bc <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b0c4:	7ffb      	ldrb	r3, [r7, #31]
 801b0c6:	b29b      	uxth	r3, r3
 801b0c8:	3301      	adds	r3, #1
 801b0ca:	b298      	uxth	r0, r3
 801b0cc:	7fbb      	ldrb	r3, [r7, #30]
 801b0ce:	b29a      	uxth	r2, r3
 801b0d0:	7f7b      	ldrb	r3, [r7, #29]
 801b0d2:	b299      	uxth	r1, r3
 801b0d4:	697b      	ldr	r3, [r7, #20]
 801b0d6:	b29b      	uxth	r3, r3
 801b0d8:	fb11 f303 	smulbb	r3, r1, r3
 801b0dc:	b29b      	uxth	r3, r3
 801b0de:	4413      	add	r3, r2
 801b0e0:	b29b      	uxth	r3, r3
 801b0e2:	3301      	adds	r3, #1
 801b0e4:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, WHITE,  BLACK);
 801b0e6:	697b      	ldr	r3, [r7, #20]
 801b0e8:	011b      	lsls	r3, r3, #4
 801b0ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801b0ee:	4a64      	ldr	r2, [pc, #400]	; (801b280 <updateStringItem+0x798>)
 801b0f0:	4413      	add	r3, r2
 801b0f2:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b0f4:	2300      	movs	r3, #0
 801b0f6:	9301      	str	r3, [sp, #4]
 801b0f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b0fc:	9300      	str	r3, [sp, #0]
 801b0fe:	4b61      	ldr	r3, [pc, #388]	; (801b284 <updateStringItem+0x79c>)
 801b100:	f7f5 f87a 	bl	80101f8 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b104:	7ffb      	ldrb	r3, [r7, #31]
 801b106:	b29a      	uxth	r2, r3
 801b108:	7f3b      	ldrb	r3, [r7, #28]
 801b10a:	085b      	lsrs	r3, r3, #1
 801b10c:	b2db      	uxtb	r3, r3
 801b10e:	b29b      	uxth	r3, r3
 801b110:	4413      	add	r3, r2
 801b112:	b29b      	uxth	r3, r3
 801b114:	3301      	adds	r3, #1
 801b116:	b298      	uxth	r0, r3
 801b118:	7fbb      	ldrb	r3, [r7, #30]
 801b11a:	b29a      	uxth	r2, r3
 801b11c:	7f7b      	ldrb	r3, [r7, #29]
 801b11e:	b299      	uxth	r1, r3
 801b120:	697b      	ldr	r3, [r7, #20]
 801b122:	b29b      	uxth	r3, r3
 801b124:	fb11 f303 	smulbb	r3, r1, r3
 801b128:	b29b      	uxth	r3, r3
 801b12a:	4413      	add	r3, r2
 801b12c:	b29b      	uxth	r3, r3
 801b12e:	3301      	adds	r3, #1
 801b130:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, LGRAY,  BLACK);
 801b132:	4b53      	ldr	r3, [pc, #332]	; (801b280 <updateStringItem+0x798>)
 801b134:	799b      	ldrb	r3, [r3, #6]
 801b136:	011b      	lsls	r3, r3, #4
 801b138:	3308      	adds	r3, #8
 801b13a:	4a51      	ldr	r2, [pc, #324]	; (801b280 <updateStringItem+0x798>)
 801b13c:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b13e:	2300      	movs	r3, #0
 801b140:	9301      	str	r3, [sp, #4]
 801b142:	f24c 6318 	movw	r3, #50712	; 0xc618
 801b146:	9300      	str	r3, [sp, #0]
 801b148:	4b4e      	ldr	r3, [pc, #312]	; (801b284 <updateStringItem+0x79c>)
 801b14a:	f7f5 f855 	bl	80101f8 <Paint_DrawString_EN>
 801b14e:	e121      	b.n	801b394 <updateStringItem+0x8ac>
					}
					else if (howToDraw == DOWN)
 801b150:	79fb      	ldrb	r3, [r7, #7]
 801b152:	2b01      	cmp	r3, #1
 801b154:	d146      	bne.n	801b1e4 <updateStringItem+0x6fc>
					{
						stringItem.startValue = fmax(stringItem.startValue - stringItem.deltaMultiplier, stringItem.minValue * 1.0);
 801b156:	4b4a      	ldr	r3, [pc, #296]	; (801b280 <updateStringItem+0x798>)
 801b158:	799b      	ldrb	r3, [r3, #6]
 801b15a:	461a      	mov	r2, r3
 801b15c:	4b48      	ldr	r3, [pc, #288]	; (801b280 <updateStringItem+0x798>)
 801b15e:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 801b162:	1ad3      	subs	r3, r2, r3
 801b164:	ee07 3a90 	vmov	s15, r3
 801b168:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801b16c:	4b44      	ldr	r3, [pc, #272]	; (801b280 <updateStringItem+0x798>)
 801b16e:	791b      	ldrb	r3, [r3, #4]
 801b170:	ee06 3a90 	vmov	s13, r3
 801b174:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801b178:	eeb0 1b46 	vmov.f64	d1, d6
 801b17c:	eeb0 0b47 	vmov.f64	d0, d7
 801b180:	f005 ff68 	bl	8021054 <fmax>
 801b184:	eeb0 7b40 	vmov.f64	d7, d0
 801b188:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 801b18c:	edc7 7a00 	vstr	s15, [r7]
 801b190:	683b      	ldr	r3, [r7, #0]
 801b192:	b2da      	uxtb	r2, r3
 801b194:	4b3a      	ldr	r3, [pc, #232]	; (801b280 <updateStringItem+0x798>)
 801b196:	719a      	strb	r2, [r3, #6]
//						sprintf(localString,"%05d",stringItem.startValue);
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b198:	7ffb      	ldrb	r3, [r7, #31]
 801b19a:	b29a      	uxth	r2, r3
 801b19c:	7f3b      	ldrb	r3, [r7, #28]
 801b19e:	085b      	lsrs	r3, r3, #1
 801b1a0:	b2db      	uxtb	r3, r3
 801b1a2:	b29b      	uxth	r3, r3
 801b1a4:	4413      	add	r3, r2
 801b1a6:	b29b      	uxth	r3, r3
 801b1a8:	3301      	adds	r3, #1
 801b1aa:	b298      	uxth	r0, r3
 801b1ac:	7fbb      	ldrb	r3, [r7, #30]
 801b1ae:	b29a      	uxth	r2, r3
 801b1b0:	7f7b      	ldrb	r3, [r7, #29]
 801b1b2:	b299      	uxth	r1, r3
 801b1b4:	697b      	ldr	r3, [r7, #20]
 801b1b6:	b29b      	uxth	r3, r3
 801b1b8:	fb11 f303 	smulbb	r3, r1, r3
 801b1bc:	b29b      	uxth	r3, r3
 801b1be:	4413      	add	r3, r2
 801b1c0:	b29b      	uxth	r3, r3
 801b1c2:	3301      	adds	r3, #1
 801b1c4:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, LGRAY,  BLACK);
 801b1c6:	4b2e      	ldr	r3, [pc, #184]	; (801b280 <updateStringItem+0x798>)
 801b1c8:	799b      	ldrb	r3, [r3, #6]
 801b1ca:	011b      	lsls	r3, r3, #4
 801b1cc:	3308      	adds	r3, #8
 801b1ce:	4a2c      	ldr	r2, [pc, #176]	; (801b280 <updateStringItem+0x798>)
 801b1d0:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b1d2:	2300      	movs	r3, #0
 801b1d4:	9301      	str	r3, [sp, #4]
 801b1d6:	f24c 6318 	movw	r3, #50712	; 0xc618
 801b1da:	9300      	str	r3, [sp, #0]
 801b1dc:	4b29      	ldr	r3, [pc, #164]	; (801b284 <updateStringItem+0x79c>)
 801b1de:	f7f5 f80b 	bl	80101f8 <Paint_DrawString_EN>
 801b1e2:	e0d7      	b.n	801b394 <updateStringItem+0x8ac>
					}
					else if (howToDraw == UP)
 801b1e4:	79fb      	ldrb	r3, [r7, #7]
 801b1e6:	2b00      	cmp	r3, #0
 801b1e8:	f040 80d4 	bne.w	801b394 <updateStringItem+0x8ac>
					{
						stringItem.startValue = fmin(stringItem.startValue + stringItem.deltaMultiplier, stringItem.maxValue * 1.0);
 801b1ec:	4b24      	ldr	r3, [pc, #144]	; (801b280 <updateStringItem+0x798>)
 801b1ee:	799b      	ldrb	r3, [r3, #6]
 801b1f0:	461a      	mov	r2, r3
 801b1f2:	4b23      	ldr	r3, [pc, #140]	; (801b280 <updateStringItem+0x798>)
 801b1f4:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 801b1f8:	4413      	add	r3, r2
 801b1fa:	ee07 3a90 	vmov	s15, r3
 801b1fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801b202:	4b1f      	ldr	r3, [pc, #124]	; (801b280 <updateStringItem+0x798>)
 801b204:	795b      	ldrb	r3, [r3, #5]
 801b206:	ee06 3a90 	vmov	s13, r3
 801b20a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801b20e:	eeb0 1b46 	vmov.f64	d1, d6
 801b212:	eeb0 0b47 	vmov.f64	d0, d7
 801b216:	f005 ff38 	bl	802108a <fmin>
 801b21a:	eeb0 7b40 	vmov.f64	d7, d0
 801b21e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 801b222:	edc7 7a00 	vstr	s15, [r7]
 801b226:	683b      	ldr	r3, [r7, #0]
 801b228:	b2da      	uxtb	r2, r3
 801b22a:	4b15      	ldr	r3, [pc, #84]	; (801b280 <updateStringItem+0x798>)
 801b22c:	719a      	strb	r2, [r3, #6]
//						sprintf(localString,"%05d",stringItem.startValue);
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b22e:	7ffb      	ldrb	r3, [r7, #31]
 801b230:	b29a      	uxth	r2, r3
 801b232:	7f3b      	ldrb	r3, [r7, #28]
 801b234:	085b      	lsrs	r3, r3, #1
 801b236:	b2db      	uxtb	r3, r3
 801b238:	b29b      	uxth	r3, r3
 801b23a:	4413      	add	r3, r2
 801b23c:	b29b      	uxth	r3, r3
 801b23e:	3301      	adds	r3, #1
 801b240:	b298      	uxth	r0, r3
 801b242:	7fbb      	ldrb	r3, [r7, #30]
 801b244:	b29a      	uxth	r2, r3
 801b246:	7f7b      	ldrb	r3, [r7, #29]
 801b248:	b299      	uxth	r1, r3
 801b24a:	697b      	ldr	r3, [r7, #20]
 801b24c:	b29b      	uxth	r3, r3
 801b24e:	fb11 f303 	smulbb	r3, r1, r3
 801b252:	b29b      	uxth	r3, r3
 801b254:	4413      	add	r3, r2
 801b256:	b29b      	uxth	r3, r3
 801b258:	3301      	adds	r3, #1
 801b25a:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, LGRAY,  BLACK);
 801b25c:	4b08      	ldr	r3, [pc, #32]	; (801b280 <updateStringItem+0x798>)
 801b25e:	799b      	ldrb	r3, [r3, #6]
 801b260:	011b      	lsls	r3, r3, #4
 801b262:	3308      	adds	r3, #8
 801b264:	4a06      	ldr	r2, [pc, #24]	; (801b280 <updateStringItem+0x798>)
 801b266:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b268:	2300      	movs	r3, #0
 801b26a:	9301      	str	r3, [sp, #4]
 801b26c:	f24c 6318 	movw	r3, #50712	; 0xc618
 801b270:	9300      	str	r3, [sp, #0]
 801b272:	4b04      	ldr	r3, [pc, #16]	; (801b284 <updateStringItem+0x79c>)
 801b274:	f7f4 ffc0 	bl	80101f8 <Paint_DrawString_EN>
 801b278:	e08c      	b.n	801b394 <updateStringItem+0x8ac>
 801b27a:	bf00      	nop
 801b27c:	2400b0dc 	.word	0x2400b0dc
 801b280:	2400c440 	.word	0x2400c440
 801b284:	24000030 	.word	0x24000030
					}
				}
				else
				{
					Paint_ClearWindows(MenuRectangleStartX + 1,
 801b288:	7ffb      	ldrb	r3, [r7, #31]
 801b28a:	b29b      	uxth	r3, r3
 801b28c:	3301      	adds	r3, #1
 801b28e:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b290:	7fbb      	ldrb	r3, [r7, #30]
 801b292:	b29a      	uxth	r2, r3
 801b294:	7f7b      	ldrb	r3, [r7, #29]
 801b296:	b299      	uxth	r1, r3
 801b298:	697b      	ldr	r3, [r7, #20]
 801b29a:	b29b      	uxth	r3, r3
 801b29c:	fb11 f303 	smulbb	r3, r1, r3
 801b2a0:	b29b      	uxth	r3, r3
 801b2a2:	4413      	add	r3, r2
 801b2a4:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 801b2a6:	3301      	adds	r3, #1
 801b2a8:	b29e      	uxth	r6, r3
							MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 801b2aa:	7ffb      	ldrb	r3, [r7, #31]
 801b2ac:	b29c      	uxth	r4, r3
 801b2ae:	697b      	ldr	r3, [r7, #20]
 801b2b0:	011b      	lsls	r3, r3, #4
 801b2b2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801b2b6:	4a8e      	ldr	r2, [pc, #568]	; (801b4f0 <updateStringItem+0xa08>)
 801b2b8:	4413      	add	r3, r2
 801b2ba:	3304      	adds	r3, #4
 801b2bc:	4618      	mov	r0, r3
 801b2be:	f7e5 f819 	bl	80002f4 <strlen>
 801b2c2:	4603      	mov	r3, r0
 801b2c4:	b29a      	uxth	r2, r3
 801b2c6:	4b8b      	ldr	r3, [pc, #556]	; (801b4f4 <updateStringItem+0xa0c>)
 801b2c8:	889b      	ldrh	r3, [r3, #4]
 801b2ca:	fb12 f303 	smulbb	r3, r2, r3
 801b2ce:	b29b      	uxth	r3, r3
 801b2d0:	4423      	add	r3, r4
 801b2d2:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 801b2d4:	3301      	adds	r3, #1
 801b2d6:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801b2d8:	7fbb      	ldrb	r3, [r7, #30]
 801b2da:	b29a      	uxth	r2, r3
 801b2dc:	7f7b      	ldrb	r3, [r7, #29]
 801b2de:	b299      	uxth	r1, r3
 801b2e0:	697b      	ldr	r3, [r7, #20]
 801b2e2:	b29b      	uxth	r3, r3
 801b2e4:	fb11 f303 	smulbb	r3, r1, r3
 801b2e8:	b29b      	uxth	r3, r3
 801b2ea:	4413      	add	r3, r2
 801b2ec:	b29a      	uxth	r2, r3
 801b2ee:	4b81      	ldr	r3, [pc, #516]	; (801b4f4 <updateStringItem+0xa0c>)
 801b2f0:	88db      	ldrh	r3, [r3, #6]
 801b2f2:	4413      	add	r3, r2
 801b2f4:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 801b2f6:	3301      	adds	r3, #1
 801b2f8:	b29b      	uxth	r3, r3
 801b2fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b2fe:	9200      	str	r2, [sp, #0]
 801b300:	4602      	mov	r2, r0
 801b302:	4631      	mov	r1, r6
 801b304:	4628      	mov	r0, r5
 801b306:	f7f4 fb59 	bl	800f9bc <Paint_ClearWindows>
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b30a:	7ffb      	ldrb	r3, [r7, #31]
 801b30c:	b29b      	uxth	r3, r3
 801b30e:	3301      	adds	r3, #1
 801b310:	b298      	uxth	r0, r3
 801b312:	7fbb      	ldrb	r3, [r7, #30]
 801b314:	b29a      	uxth	r2, r3
 801b316:	7f7b      	ldrb	r3, [r7, #29]
 801b318:	b299      	uxth	r1, r3
 801b31a:	697b      	ldr	r3, [r7, #20]
 801b31c:	b29b      	uxth	r3, r3
 801b31e:	fb11 f303 	smulbb	r3, r1, r3
 801b322:	b29b      	uxth	r3, r3
 801b324:	4413      	add	r3, r2
 801b326:	b29b      	uxth	r3, r3
 801b328:	3301      	adds	r3, #1
 801b32a:	b299      	uxth	r1, r3
							stringItem.itemsArray[i], &Font12, WHITE,  BLACK);
 801b32c:	697b      	ldr	r3, [r7, #20]
 801b32e:	011b      	lsls	r3, r3, #4
 801b330:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801b334:	4a6e      	ldr	r2, [pc, #440]	; (801b4f0 <updateStringItem+0xa08>)
 801b336:	4413      	add	r3, r2
 801b338:	1d1a      	adds	r2, r3, #4
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b33a:	2300      	movs	r3, #0
 801b33c:	9301      	str	r3, [sp, #4]
 801b33e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b342:	9300      	str	r3, [sp, #0]
 801b344:	4b6b      	ldr	r3, [pc, #428]	; (801b4f4 <updateStringItem+0xa0c>)
 801b346:	f7f4 ff57 	bl	80101f8 <Paint_DrawString_EN>
					Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b34a:	7ffb      	ldrb	r3, [r7, #31]
 801b34c:	b29a      	uxth	r2, r3
 801b34e:	7f3b      	ldrb	r3, [r7, #28]
 801b350:	085b      	lsrs	r3, r3, #1
 801b352:	b2db      	uxtb	r3, r3
 801b354:	b29b      	uxth	r3, r3
 801b356:	4413      	add	r3, r2
 801b358:	b29b      	uxth	r3, r3
 801b35a:	3301      	adds	r3, #1
 801b35c:	b298      	uxth	r0, r3
 801b35e:	7fbb      	ldrb	r3, [r7, #30]
 801b360:	b29a      	uxth	r2, r3
 801b362:	7f7b      	ldrb	r3, [r7, #29]
 801b364:	b299      	uxth	r1, r3
 801b366:	697b      	ldr	r3, [r7, #20]
 801b368:	b29b      	uxth	r3, r3
 801b36a:	fb11 f303 	smulbb	r3, r1, r3
 801b36e:	b29b      	uxth	r3, r3
 801b370:	4413      	add	r3, r2
 801b372:	b29b      	uxth	r3, r3
 801b374:	3301      	adds	r3, #1
 801b376:	b299      	uxth	r1, r3
							stringItem.valuesArray[stringItem.startValue], &Font12, WHITE,  BLACK);
 801b378:	4b5d      	ldr	r3, [pc, #372]	; (801b4f0 <updateStringItem+0xa08>)
 801b37a:	799b      	ldrb	r3, [r3, #6]
 801b37c:	011b      	lsls	r3, r3, #4
 801b37e:	3308      	adds	r3, #8
 801b380:	4a5b      	ldr	r2, [pc, #364]	; (801b4f0 <updateStringItem+0xa08>)
 801b382:	441a      	add	r2, r3
					Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b384:	2300      	movs	r3, #0
 801b386:	9301      	str	r3, [sp, #4]
 801b388:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b38c:	9300      	str	r3, [sp, #0]
 801b38e:	4b59      	ldr	r3, [pc, #356]	; (801b4f4 <updateStringItem+0xa0c>)
 801b390:	f7f4 ff32 	bl	80101f8 <Paint_DrawString_EN>
				}
			}
			// Render value text of "Multiplier" with Grey or White background
			if ( (i == 3) )
 801b394:	697b      	ldr	r3, [r7, #20]
 801b396:	2b03      	cmp	r3, #3
 801b398:	f040 835e 	bne.w	801ba58 <updateStringItem+0xf70>
			{
				char localString[8] = "";
 801b39c:	2300      	movs	r3, #0
 801b39e:	60fb      	str	r3, [r7, #12]
 801b3a0:	2300      	movs	r3, #0
 801b3a2:	613b      	str	r3, [r7, #16]
				sprintf(localString,"%d",stringItem.deltaMultiplier);
 801b3a4:	4b52      	ldr	r3, [pc, #328]	; (801b4f0 <updateStringItem+0xa08>)
 801b3a6:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 801b3aa:	461a      	mov	r2, r3
 801b3ac:	f107 030c 	add.w	r3, r7, #12
 801b3b0:	4951      	ldr	r1, [pc, #324]	; (801b4f8 <updateStringItem+0xa10>)
 801b3b2:	4618      	mov	r0, r3
 801b3b4:	f002 fac6 	bl	801d944 <siprintf>
				if (currentCursorPosition.cursorPosition == 0x03)
 801b3b8:	4b50      	ldr	r3, [pc, #320]	; (801b4fc <updateStringItem+0xa14>)
 801b3ba:	781b      	ldrb	r3, [r3, #0]
 801b3bc:	2b03      	cmp	r3, #3
 801b3be:	f040 81b1 	bne.w	801b724 <updateStringItem+0xc3c>
				{
					if ( (howToDraw == LEFT) || (howToDraw == FULL) )
 801b3c2:	79fb      	ldrb	r3, [r7, #7]
 801b3c4:	2b03      	cmp	r3, #3
 801b3c6:	d003      	beq.n	801b3d0 <updateStringItem+0x8e8>
 801b3c8:	79fb      	ldrb	r3, [r7, #7]
 801b3ca:	2b02      	cmp	r3, #2
 801b3cc:	f040 8098 	bne.w	801b500 <updateStringItem+0xa18>
					{
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b3d0:	7ffb      	ldrb	r3, [r7, #31]
 801b3d2:	b29b      	uxth	r3, r3
 801b3d4:	3301      	adds	r3, #1
 801b3d6:	b298      	uxth	r0, r3
 801b3d8:	7fbb      	ldrb	r3, [r7, #30]
 801b3da:	b29a      	uxth	r2, r3
 801b3dc:	7f7b      	ldrb	r3, [r7, #29]
 801b3de:	b299      	uxth	r1, r3
 801b3e0:	697b      	ldr	r3, [r7, #20]
 801b3e2:	b29b      	uxth	r3, r3
 801b3e4:	fb11 f303 	smulbb	r3, r1, r3
 801b3e8:	b29b      	uxth	r3, r3
 801b3ea:	4413      	add	r3, r2
 801b3ec:	b29b      	uxth	r3, r3
 801b3ee:	3301      	adds	r3, #1
 801b3f0:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, LGRAY,  BLACK);
 801b3f2:	697b      	ldr	r3, [r7, #20]
 801b3f4:	011b      	lsls	r3, r3, #4
 801b3f6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801b3fa:	4a3d      	ldr	r2, [pc, #244]	; (801b4f0 <updateStringItem+0xa08>)
 801b3fc:	4413      	add	r3, r2
 801b3fe:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b400:	2300      	movs	r3, #0
 801b402:	9301      	str	r3, [sp, #4]
 801b404:	f24c 6318 	movw	r3, #50712	; 0xc618
 801b408:	9300      	str	r3, [sp, #0]
 801b40a:	4b3a      	ldr	r3, [pc, #232]	; (801b4f4 <updateStringItem+0xa0c>)
 801b40c:	f7f4 fef4 	bl	80101f8 <Paint_DrawString_EN>
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 801b410:	7ffb      	ldrb	r3, [r7, #31]
 801b412:	b29a      	uxth	r2, r3
 801b414:	7f3b      	ldrb	r3, [r7, #28]
 801b416:	085b      	lsrs	r3, r3, #1
 801b418:	b2db      	uxtb	r3, r3
 801b41a:	b29b      	uxth	r3, r3
 801b41c:	4413      	add	r3, r2
 801b41e:	b29b      	uxth	r3, r3
 801b420:	3301      	adds	r3, #1
 801b422:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b424:	7fbb      	ldrb	r3, [r7, #30]
 801b426:	b29a      	uxth	r2, r3
 801b428:	7f7b      	ldrb	r3, [r7, #29]
 801b42a:	b299      	uxth	r1, r3
 801b42c:	697b      	ldr	r3, [r7, #20]
 801b42e:	b29b      	uxth	r3, r3
 801b430:	fb11 f303 	smulbb	r3, r1, r3
 801b434:	b29b      	uxth	r3, r3
 801b436:	4413      	add	r3, r2
 801b438:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 801b43a:	3301      	adds	r3, #1
 801b43c:	b29e      	uxth	r6, r3
								MenuRectangleStartX + MenuRectangleWidth / 2 + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 801b43e:	7ffb      	ldrb	r3, [r7, #31]
 801b440:	b29a      	uxth	r2, r3
 801b442:	7f3b      	ldrb	r3, [r7, #28]
 801b444:	085b      	lsrs	r3, r3, #1
 801b446:	b2db      	uxtb	r3, r3
 801b448:	b29b      	uxth	r3, r3
 801b44a:	4413      	add	r3, r2
 801b44c:	b29c      	uxth	r4, r3
 801b44e:	697b      	ldr	r3, [r7, #20]
 801b450:	011b      	lsls	r3, r3, #4
 801b452:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801b456:	4a26      	ldr	r2, [pc, #152]	; (801b4f0 <updateStringItem+0xa08>)
 801b458:	4413      	add	r3, r2
 801b45a:	3304      	adds	r3, #4
 801b45c:	4618      	mov	r0, r3
 801b45e:	f7e4 ff49 	bl	80002f4 <strlen>
 801b462:	4603      	mov	r3, r0
 801b464:	b29a      	uxth	r2, r3
 801b466:	4b23      	ldr	r3, [pc, #140]	; (801b4f4 <updateStringItem+0xa0c>)
 801b468:	889b      	ldrh	r3, [r3, #4]
 801b46a:	fb12 f303 	smulbb	r3, r2, r3
 801b46e:	b29b      	uxth	r3, r3
 801b470:	4423      	add	r3, r4
 801b472:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 801b474:	3301      	adds	r3, #1
 801b476:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801b478:	7fbb      	ldrb	r3, [r7, #30]
 801b47a:	b29a      	uxth	r2, r3
 801b47c:	7f7b      	ldrb	r3, [r7, #29]
 801b47e:	b299      	uxth	r1, r3
 801b480:	697b      	ldr	r3, [r7, #20]
 801b482:	b29b      	uxth	r3, r3
 801b484:	fb11 f303 	smulbb	r3, r1, r3
 801b488:	b29b      	uxth	r3, r3
 801b48a:	4413      	add	r3, r2
 801b48c:	b29a      	uxth	r2, r3
 801b48e:	4b19      	ldr	r3, [pc, #100]	; (801b4f4 <updateStringItem+0xa0c>)
 801b490:	88db      	ldrh	r3, [r3, #6]
 801b492:	4413      	add	r3, r2
 801b494:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 801b496:	3301      	adds	r3, #1
 801b498:	b29b      	uxth	r3, r3
 801b49a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b49e:	9200      	str	r2, [sp, #0]
 801b4a0:	4602      	mov	r2, r0
 801b4a2:	4631      	mov	r1, r6
 801b4a4:	4628      	mov	r0, r5
 801b4a6:	f7f4 fa89 	bl	800f9bc <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b4aa:	7ffb      	ldrb	r3, [r7, #31]
 801b4ac:	b29a      	uxth	r2, r3
 801b4ae:	7f3b      	ldrb	r3, [r7, #28]
 801b4b0:	085b      	lsrs	r3, r3, #1
 801b4b2:	b2db      	uxtb	r3, r3
 801b4b4:	b29b      	uxth	r3, r3
 801b4b6:	4413      	add	r3, r2
 801b4b8:	b29b      	uxth	r3, r3
 801b4ba:	3301      	adds	r3, #1
 801b4bc:	b298      	uxth	r0, r3
 801b4be:	7fbb      	ldrb	r3, [r7, #30]
 801b4c0:	b29a      	uxth	r2, r3
 801b4c2:	7f7b      	ldrb	r3, [r7, #29]
 801b4c4:	b299      	uxth	r1, r3
 801b4c6:	697b      	ldr	r3, [r7, #20]
 801b4c8:	b29b      	uxth	r3, r3
 801b4ca:	fb11 f303 	smulbb	r3, r1, r3
 801b4ce:	b29b      	uxth	r3, r3
 801b4d0:	4413      	add	r3, r2
 801b4d2:	b29b      	uxth	r3, r3
 801b4d4:	3301      	adds	r3, #1
 801b4d6:	b299      	uxth	r1, r3
 801b4d8:	f107 020c 	add.w	r2, r7, #12
 801b4dc:	2300      	movs	r3, #0
 801b4de:	9301      	str	r3, [sp, #4]
 801b4e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b4e4:	9300      	str	r3, [sp, #0]
 801b4e6:	4b03      	ldr	r3, [pc, #12]	; (801b4f4 <updateStringItem+0xa0c>)
 801b4e8:	f7f4 fe86 	bl	80101f8 <Paint_DrawString_EN>
 801b4ec:	e2b4      	b.n	801ba58 <updateStringItem+0xf70>
 801b4ee:	bf00      	nop
 801b4f0:	2400c440 	.word	0x2400c440
 801b4f4:	24000030 	.word	0x24000030
 801b4f8:	080218ac 	.word	0x080218ac
 801b4fc:	2400b0dc 	.word	0x2400b0dc
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == DOWN)
 801b500:	79fb      	ldrb	r3, [r7, #7]
 801b502:	2b01      	cmp	r3, #1
 801b504:	f040 8083 	bne.w	801b60e <updateStringItem+0xb26>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801b508:	7ffb      	ldrb	r3, [r7, #31]
 801b50a:	b29b      	uxth	r3, r3
 801b50c:	3301      	adds	r3, #1
 801b50e:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b510:	7fbb      	ldrb	r3, [r7, #30]
 801b512:	b29a      	uxth	r2, r3
 801b514:	7f7b      	ldrb	r3, [r7, #29]
 801b516:	b299      	uxth	r1, r3
 801b518:	697b      	ldr	r3, [r7, #20]
 801b51a:	b29b      	uxth	r3, r3
 801b51c:	fb11 f303 	smulbb	r3, r1, r3
 801b520:	b29b      	uxth	r3, r3
 801b522:	4413      	add	r3, r2
 801b524:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801b526:	3301      	adds	r3, #1
 801b528:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 801b52a:	7ffb      	ldrb	r3, [r7, #31]
 801b52c:	b29c      	uxth	r4, r3
 801b52e:	697b      	ldr	r3, [r7, #20]
 801b530:	011b      	lsls	r3, r3, #4
 801b532:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801b536:	4a79      	ldr	r2, [pc, #484]	; (801b71c <updateStringItem+0xc34>)
 801b538:	4413      	add	r3, r2
 801b53a:	3304      	adds	r3, #4
 801b53c:	4618      	mov	r0, r3
 801b53e:	f7e4 fed9 	bl	80002f4 <strlen>
 801b542:	4603      	mov	r3, r0
 801b544:	b29a      	uxth	r2, r3
 801b546:	4b76      	ldr	r3, [pc, #472]	; (801b720 <updateStringItem+0xc38>)
 801b548:	889b      	ldrh	r3, [r3, #4]
 801b54a:	fb12 f303 	smulbb	r3, r2, r3
 801b54e:	b29b      	uxth	r3, r3
 801b550:	4423      	add	r3, r4
 801b552:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801b554:	3301      	adds	r3, #1
 801b556:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801b558:	7fbb      	ldrb	r3, [r7, #30]
 801b55a:	b29a      	uxth	r2, r3
 801b55c:	7f7b      	ldrb	r3, [r7, #29]
 801b55e:	b299      	uxth	r1, r3
 801b560:	697b      	ldr	r3, [r7, #20]
 801b562:	b29b      	uxth	r3, r3
 801b564:	fb11 f303 	smulbb	r3, r1, r3
 801b568:	b29b      	uxth	r3, r3
 801b56a:	4413      	add	r3, r2
 801b56c:	b29a      	uxth	r2, r3
 801b56e:	4b6c      	ldr	r3, [pc, #432]	; (801b720 <updateStringItem+0xc38>)
 801b570:	88db      	ldrh	r3, [r3, #6]
 801b572:	4413      	add	r3, r2
 801b574:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801b576:	3301      	adds	r3, #1
 801b578:	b29b      	uxth	r3, r3
 801b57a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b57e:	9200      	str	r2, [sp, #0]
 801b580:	4602      	mov	r2, r0
 801b582:	4631      	mov	r1, r6
 801b584:	4628      	mov	r0, r5
 801b586:	f7f4 fa19 	bl	800f9bc <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b58a:	7ffb      	ldrb	r3, [r7, #31]
 801b58c:	b29b      	uxth	r3, r3
 801b58e:	3301      	adds	r3, #1
 801b590:	b298      	uxth	r0, r3
 801b592:	7fbb      	ldrb	r3, [r7, #30]
 801b594:	b29a      	uxth	r2, r3
 801b596:	7f7b      	ldrb	r3, [r7, #29]
 801b598:	b299      	uxth	r1, r3
 801b59a:	697b      	ldr	r3, [r7, #20]
 801b59c:	b29b      	uxth	r3, r3
 801b59e:	fb11 f303 	smulbb	r3, r1, r3
 801b5a2:	b29b      	uxth	r3, r3
 801b5a4:	4413      	add	r3, r2
 801b5a6:	b29b      	uxth	r3, r3
 801b5a8:	3301      	adds	r3, #1
 801b5aa:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, LGRAY,  BLACK);
 801b5ac:	697b      	ldr	r3, [r7, #20]
 801b5ae:	011b      	lsls	r3, r3, #4
 801b5b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801b5b4:	4a59      	ldr	r2, [pc, #356]	; (801b71c <updateStringItem+0xc34>)
 801b5b6:	4413      	add	r3, r2
 801b5b8:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b5ba:	2300      	movs	r3, #0
 801b5bc:	9301      	str	r3, [sp, #4]
 801b5be:	f24c 6318 	movw	r3, #50712	; 0xc618
 801b5c2:	9300      	str	r3, [sp, #0]
 801b5c4:	4b56      	ldr	r3, [pc, #344]	; (801b720 <updateStringItem+0xc38>)
 801b5c6:	f7f4 fe17 	bl	80101f8 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b5ca:	7ffb      	ldrb	r3, [r7, #31]
 801b5cc:	b29a      	uxth	r2, r3
 801b5ce:	7f3b      	ldrb	r3, [r7, #28]
 801b5d0:	085b      	lsrs	r3, r3, #1
 801b5d2:	b2db      	uxtb	r3, r3
 801b5d4:	b29b      	uxth	r3, r3
 801b5d6:	4413      	add	r3, r2
 801b5d8:	b29b      	uxth	r3, r3
 801b5da:	3301      	adds	r3, #1
 801b5dc:	b298      	uxth	r0, r3
 801b5de:	7fbb      	ldrb	r3, [r7, #30]
 801b5e0:	b29a      	uxth	r2, r3
 801b5e2:	7f7b      	ldrb	r3, [r7, #29]
 801b5e4:	b299      	uxth	r1, r3
 801b5e6:	697b      	ldr	r3, [r7, #20]
 801b5e8:	b29b      	uxth	r3, r3
 801b5ea:	fb11 f303 	smulbb	r3, r1, r3
 801b5ee:	b29b      	uxth	r3, r3
 801b5f0:	4413      	add	r3, r2
 801b5f2:	b29b      	uxth	r3, r3
 801b5f4:	3301      	adds	r3, #1
 801b5f6:	b299      	uxth	r1, r3
 801b5f8:	f107 020c 	add.w	r2, r7, #12
 801b5fc:	2300      	movs	r3, #0
 801b5fe:	9301      	str	r3, [sp, #4]
 801b600:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b604:	9300      	str	r3, [sp, #0]
 801b606:	4b46      	ldr	r3, [pc, #280]	; (801b720 <updateStringItem+0xc38>)
 801b608:	f7f4 fdf6 	bl	80101f8 <Paint_DrawString_EN>
 801b60c:	e224      	b.n	801ba58 <updateStringItem+0xf70>
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == UP)
 801b60e:	79fb      	ldrb	r3, [r7, #7]
 801b610:	2b00      	cmp	r3, #0
 801b612:	f040 8221 	bne.w	801ba58 <updateStringItem+0xf70>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801b616:	7ffb      	ldrb	r3, [r7, #31]
 801b618:	b29b      	uxth	r3, r3
 801b61a:	3301      	adds	r3, #1
 801b61c:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b61e:	7fbb      	ldrb	r3, [r7, #30]
 801b620:	b29a      	uxth	r2, r3
 801b622:	7f7b      	ldrb	r3, [r7, #29]
 801b624:	b299      	uxth	r1, r3
 801b626:	697b      	ldr	r3, [r7, #20]
 801b628:	b29b      	uxth	r3, r3
 801b62a:	fb11 f303 	smulbb	r3, r1, r3
 801b62e:	b29b      	uxth	r3, r3
 801b630:	4413      	add	r3, r2
 801b632:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801b634:	3301      	adds	r3, #1
 801b636:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 801b638:	7ffb      	ldrb	r3, [r7, #31]
 801b63a:	b29c      	uxth	r4, r3
 801b63c:	697b      	ldr	r3, [r7, #20]
 801b63e:	011b      	lsls	r3, r3, #4
 801b640:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801b644:	4a35      	ldr	r2, [pc, #212]	; (801b71c <updateStringItem+0xc34>)
 801b646:	4413      	add	r3, r2
 801b648:	3304      	adds	r3, #4
 801b64a:	4618      	mov	r0, r3
 801b64c:	f7e4 fe52 	bl	80002f4 <strlen>
 801b650:	4603      	mov	r3, r0
 801b652:	b29a      	uxth	r2, r3
 801b654:	4b32      	ldr	r3, [pc, #200]	; (801b720 <updateStringItem+0xc38>)
 801b656:	889b      	ldrh	r3, [r3, #4]
 801b658:	fb12 f303 	smulbb	r3, r2, r3
 801b65c:	b29b      	uxth	r3, r3
 801b65e:	4423      	add	r3, r4
 801b660:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801b662:	3301      	adds	r3, #1
 801b664:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801b666:	7fbb      	ldrb	r3, [r7, #30]
 801b668:	b29a      	uxth	r2, r3
 801b66a:	7f7b      	ldrb	r3, [r7, #29]
 801b66c:	b299      	uxth	r1, r3
 801b66e:	697b      	ldr	r3, [r7, #20]
 801b670:	b29b      	uxth	r3, r3
 801b672:	fb11 f303 	smulbb	r3, r1, r3
 801b676:	b29b      	uxth	r3, r3
 801b678:	4413      	add	r3, r2
 801b67a:	b29a      	uxth	r2, r3
 801b67c:	4b28      	ldr	r3, [pc, #160]	; (801b720 <updateStringItem+0xc38>)
 801b67e:	88db      	ldrh	r3, [r3, #6]
 801b680:	4413      	add	r3, r2
 801b682:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801b684:	3301      	adds	r3, #1
 801b686:	b29b      	uxth	r3, r3
 801b688:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b68c:	9200      	str	r2, [sp, #0]
 801b68e:	4602      	mov	r2, r0
 801b690:	4631      	mov	r1, r6
 801b692:	4628      	mov	r0, r5
 801b694:	f7f4 f992 	bl	800f9bc <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b698:	7ffb      	ldrb	r3, [r7, #31]
 801b69a:	b29b      	uxth	r3, r3
 801b69c:	3301      	adds	r3, #1
 801b69e:	b298      	uxth	r0, r3
 801b6a0:	7fbb      	ldrb	r3, [r7, #30]
 801b6a2:	b29a      	uxth	r2, r3
 801b6a4:	7f7b      	ldrb	r3, [r7, #29]
 801b6a6:	b299      	uxth	r1, r3
 801b6a8:	697b      	ldr	r3, [r7, #20]
 801b6aa:	b29b      	uxth	r3, r3
 801b6ac:	fb11 f303 	smulbb	r3, r1, r3
 801b6b0:	b29b      	uxth	r3, r3
 801b6b2:	4413      	add	r3, r2
 801b6b4:	b29b      	uxth	r3, r3
 801b6b6:	3301      	adds	r3, #1
 801b6b8:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, LGRAY,  BLACK);
 801b6ba:	697b      	ldr	r3, [r7, #20]
 801b6bc:	011b      	lsls	r3, r3, #4
 801b6be:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801b6c2:	4a16      	ldr	r2, [pc, #88]	; (801b71c <updateStringItem+0xc34>)
 801b6c4:	4413      	add	r3, r2
 801b6c6:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b6c8:	2300      	movs	r3, #0
 801b6ca:	9301      	str	r3, [sp, #4]
 801b6cc:	f24c 6318 	movw	r3, #50712	; 0xc618
 801b6d0:	9300      	str	r3, [sp, #0]
 801b6d2:	4b13      	ldr	r3, [pc, #76]	; (801b720 <updateStringItem+0xc38>)
 801b6d4:	f7f4 fd90 	bl	80101f8 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b6d8:	7ffb      	ldrb	r3, [r7, #31]
 801b6da:	b29a      	uxth	r2, r3
 801b6dc:	7f3b      	ldrb	r3, [r7, #28]
 801b6de:	085b      	lsrs	r3, r3, #1
 801b6e0:	b2db      	uxtb	r3, r3
 801b6e2:	b29b      	uxth	r3, r3
 801b6e4:	4413      	add	r3, r2
 801b6e6:	b29b      	uxth	r3, r3
 801b6e8:	3301      	adds	r3, #1
 801b6ea:	b298      	uxth	r0, r3
 801b6ec:	7fbb      	ldrb	r3, [r7, #30]
 801b6ee:	b29a      	uxth	r2, r3
 801b6f0:	7f7b      	ldrb	r3, [r7, #29]
 801b6f2:	b299      	uxth	r1, r3
 801b6f4:	697b      	ldr	r3, [r7, #20]
 801b6f6:	b29b      	uxth	r3, r3
 801b6f8:	fb11 f303 	smulbb	r3, r1, r3
 801b6fc:	b29b      	uxth	r3, r3
 801b6fe:	4413      	add	r3, r2
 801b700:	b29b      	uxth	r3, r3
 801b702:	3301      	adds	r3, #1
 801b704:	b299      	uxth	r1, r3
 801b706:	f107 020c 	add.w	r2, r7, #12
 801b70a:	2300      	movs	r3, #0
 801b70c:	9301      	str	r3, [sp, #4]
 801b70e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b712:	9300      	str	r3, [sp, #0]
 801b714:	4b02      	ldr	r3, [pc, #8]	; (801b720 <updateStringItem+0xc38>)
 801b716:	f7f4 fd6f 	bl	80101f8 <Paint_DrawString_EN>
 801b71a:	e19d      	b.n	801ba58 <updateStringItem+0xf70>
 801b71c:	2400c440 	.word	0x2400c440
 801b720:	24000030 	.word	0x24000030
								localString, &Font12, WHITE,  BLACK);
					}
				}
				else if (currentCursorPosition.cursorPosition == MULTIPLIER)
 801b724:	4b85      	ldr	r3, [pc, #532]	; (801b93c <updateStringItem+0xe54>)
 801b726:	781b      	ldrb	r3, [r3, #0]
 801b728:	2b0c      	cmp	r3, #12
 801b72a:	f040 8113 	bne.w	801b954 <updateStringItem+0xe6c>
				{
					if (howToDraw == RIGHT)
 801b72e:	79fb      	ldrb	r3, [r7, #7]
 801b730:	2b04      	cmp	r3, #4
 801b732:	f040 8083 	bne.w	801b83c <updateStringItem+0xd54>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801b736:	7ffb      	ldrb	r3, [r7, #31]
 801b738:	b29b      	uxth	r3, r3
 801b73a:	3301      	adds	r3, #1
 801b73c:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b73e:	7fbb      	ldrb	r3, [r7, #30]
 801b740:	b29a      	uxth	r2, r3
 801b742:	7f7b      	ldrb	r3, [r7, #29]
 801b744:	b299      	uxth	r1, r3
 801b746:	697b      	ldr	r3, [r7, #20]
 801b748:	b29b      	uxth	r3, r3
 801b74a:	fb11 f303 	smulbb	r3, r1, r3
 801b74e:	b29b      	uxth	r3, r3
 801b750:	4413      	add	r3, r2
 801b752:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801b754:	3301      	adds	r3, #1
 801b756:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 801b758:	7ffb      	ldrb	r3, [r7, #31]
 801b75a:	b29c      	uxth	r4, r3
 801b75c:	697b      	ldr	r3, [r7, #20]
 801b75e:	011b      	lsls	r3, r3, #4
 801b760:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801b764:	4a76      	ldr	r2, [pc, #472]	; (801b940 <updateStringItem+0xe58>)
 801b766:	4413      	add	r3, r2
 801b768:	3304      	adds	r3, #4
 801b76a:	4618      	mov	r0, r3
 801b76c:	f7e4 fdc2 	bl	80002f4 <strlen>
 801b770:	4603      	mov	r3, r0
 801b772:	b29a      	uxth	r2, r3
 801b774:	4b73      	ldr	r3, [pc, #460]	; (801b944 <updateStringItem+0xe5c>)
 801b776:	889b      	ldrh	r3, [r3, #4]
 801b778:	fb12 f303 	smulbb	r3, r2, r3
 801b77c:	b29b      	uxth	r3, r3
 801b77e:	4423      	add	r3, r4
 801b780:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801b782:	3301      	adds	r3, #1
 801b784:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801b786:	7fbb      	ldrb	r3, [r7, #30]
 801b788:	b29a      	uxth	r2, r3
 801b78a:	7f7b      	ldrb	r3, [r7, #29]
 801b78c:	b299      	uxth	r1, r3
 801b78e:	697b      	ldr	r3, [r7, #20]
 801b790:	b29b      	uxth	r3, r3
 801b792:	fb11 f303 	smulbb	r3, r1, r3
 801b796:	b29b      	uxth	r3, r3
 801b798:	4413      	add	r3, r2
 801b79a:	b29a      	uxth	r2, r3
 801b79c:	4b69      	ldr	r3, [pc, #420]	; (801b944 <updateStringItem+0xe5c>)
 801b79e:	88db      	ldrh	r3, [r3, #6]
 801b7a0:	4413      	add	r3, r2
 801b7a2:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801b7a4:	3301      	adds	r3, #1
 801b7a6:	b29b      	uxth	r3, r3
 801b7a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b7ac:	9200      	str	r2, [sp, #0]
 801b7ae:	4602      	mov	r2, r0
 801b7b0:	4631      	mov	r1, r6
 801b7b2:	4628      	mov	r0, r5
 801b7b4:	f7f4 f902 	bl	800f9bc <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b7b8:	7ffb      	ldrb	r3, [r7, #31]
 801b7ba:	b29b      	uxth	r3, r3
 801b7bc:	3301      	adds	r3, #1
 801b7be:	b298      	uxth	r0, r3
 801b7c0:	7fbb      	ldrb	r3, [r7, #30]
 801b7c2:	b29a      	uxth	r2, r3
 801b7c4:	7f7b      	ldrb	r3, [r7, #29]
 801b7c6:	b299      	uxth	r1, r3
 801b7c8:	697b      	ldr	r3, [r7, #20]
 801b7ca:	b29b      	uxth	r3, r3
 801b7cc:	fb11 f303 	smulbb	r3, r1, r3
 801b7d0:	b29b      	uxth	r3, r3
 801b7d2:	4413      	add	r3, r2
 801b7d4:	b29b      	uxth	r3, r3
 801b7d6:	3301      	adds	r3, #1
 801b7d8:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, WHITE,  BLACK);
 801b7da:	697b      	ldr	r3, [r7, #20]
 801b7dc:	011b      	lsls	r3, r3, #4
 801b7de:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801b7e2:	4a57      	ldr	r2, [pc, #348]	; (801b940 <updateStringItem+0xe58>)
 801b7e4:	4413      	add	r3, r2
 801b7e6:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b7e8:	2300      	movs	r3, #0
 801b7ea:	9301      	str	r3, [sp, #4]
 801b7ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b7f0:	9300      	str	r3, [sp, #0]
 801b7f2:	4b54      	ldr	r3, [pc, #336]	; (801b944 <updateStringItem+0xe5c>)
 801b7f4:	f7f4 fd00 	bl	80101f8 <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b7f8:	7ffb      	ldrb	r3, [r7, #31]
 801b7fa:	b29a      	uxth	r2, r3
 801b7fc:	7f3b      	ldrb	r3, [r7, #28]
 801b7fe:	085b      	lsrs	r3, r3, #1
 801b800:	b2db      	uxtb	r3, r3
 801b802:	b29b      	uxth	r3, r3
 801b804:	4413      	add	r3, r2
 801b806:	b29b      	uxth	r3, r3
 801b808:	3301      	adds	r3, #1
 801b80a:	b298      	uxth	r0, r3
 801b80c:	7fbb      	ldrb	r3, [r7, #30]
 801b80e:	b29a      	uxth	r2, r3
 801b810:	7f7b      	ldrb	r3, [r7, #29]
 801b812:	b299      	uxth	r1, r3
 801b814:	697b      	ldr	r3, [r7, #20]
 801b816:	b29b      	uxth	r3, r3
 801b818:	fb11 f303 	smulbb	r3, r1, r3
 801b81c:	b29b      	uxth	r3, r3
 801b81e:	4413      	add	r3, r2
 801b820:	b29b      	uxth	r3, r3
 801b822:	3301      	adds	r3, #1
 801b824:	b299      	uxth	r1, r3
 801b826:	f107 020c 	add.w	r2, r7, #12
 801b82a:	2300      	movs	r3, #0
 801b82c:	9301      	str	r3, [sp, #4]
 801b82e:	f24c 6318 	movw	r3, #50712	; 0xc618
 801b832:	9300      	str	r3, [sp, #0]
 801b834:	4b43      	ldr	r3, [pc, #268]	; (801b944 <updateStringItem+0xe5c>)
 801b836:	f7f4 fcdf 	bl	80101f8 <Paint_DrawString_EN>
 801b83a:	e10d      	b.n	801ba58 <updateStringItem+0xf70>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == DOWN)
 801b83c:	79fb      	ldrb	r3, [r7, #7]
 801b83e:	2b01      	cmp	r3, #1
 801b840:	d136      	bne.n	801b8b0 <updateStringItem+0xdc8>
					{

						multiplierIndex = 0;
 801b842:	4b41      	ldr	r3, [pc, #260]	; (801b948 <updateStringItem+0xe60>)
 801b844:	2200      	movs	r2, #0
 801b846:	701a      	strb	r2, [r3, #0]
						stringItem.deltaMultiplier = stringMultiplierArray[multiplierIndex];
 801b848:	4b3f      	ldr	r3, [pc, #252]	; (801b948 <updateStringItem+0xe60>)
 801b84a:	781b      	ldrb	r3, [r3, #0]
 801b84c:	461a      	mov	r2, r3
 801b84e:	4b3f      	ldr	r3, [pc, #252]	; (801b94c <updateStringItem+0xe64>)
 801b850:	5c9a      	ldrb	r2, [r3, r2]
 801b852:	4b3b      	ldr	r3, [pc, #236]	; (801b940 <updateStringItem+0xe58>)
 801b854:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
						sprintf(localString,"%d",stringItem.deltaMultiplier);
 801b858:	4b39      	ldr	r3, [pc, #228]	; (801b940 <updateStringItem+0xe58>)
 801b85a:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 801b85e:	461a      	mov	r2, r3
 801b860:	f107 030c 	add.w	r3, r7, #12
 801b864:	493a      	ldr	r1, [pc, #232]	; (801b950 <updateStringItem+0xe68>)
 801b866:	4618      	mov	r0, r3
 801b868:	f002 f86c 	bl	801d944 <siprintf>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b86c:	7ffb      	ldrb	r3, [r7, #31]
 801b86e:	b29a      	uxth	r2, r3
 801b870:	7f3b      	ldrb	r3, [r7, #28]
 801b872:	085b      	lsrs	r3, r3, #1
 801b874:	b2db      	uxtb	r3, r3
 801b876:	b29b      	uxth	r3, r3
 801b878:	4413      	add	r3, r2
 801b87a:	b29b      	uxth	r3, r3
 801b87c:	3301      	adds	r3, #1
 801b87e:	b298      	uxth	r0, r3
 801b880:	7fbb      	ldrb	r3, [r7, #30]
 801b882:	b29a      	uxth	r2, r3
 801b884:	7f7b      	ldrb	r3, [r7, #29]
 801b886:	b299      	uxth	r1, r3
 801b888:	697b      	ldr	r3, [r7, #20]
 801b88a:	b29b      	uxth	r3, r3
 801b88c:	fb11 f303 	smulbb	r3, r1, r3
 801b890:	b29b      	uxth	r3, r3
 801b892:	4413      	add	r3, r2
 801b894:	b29b      	uxth	r3, r3
 801b896:	3301      	adds	r3, #1
 801b898:	b299      	uxth	r1, r3
 801b89a:	f107 020c 	add.w	r2, r7, #12
 801b89e:	2300      	movs	r3, #0
 801b8a0:	9301      	str	r3, [sp, #4]
 801b8a2:	f24c 6318 	movw	r3, #50712	; 0xc618
 801b8a6:	9300      	str	r3, [sp, #0]
 801b8a8:	4b26      	ldr	r3, [pc, #152]	; (801b944 <updateStringItem+0xe5c>)
 801b8aa:	f7f4 fca5 	bl	80101f8 <Paint_DrawString_EN>
 801b8ae:	e0d3      	b.n	801ba58 <updateStringItem+0xf70>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == UP)
 801b8b0:	79fb      	ldrb	r3, [r7, #7]
 801b8b2:	2b00      	cmp	r3, #0
 801b8b4:	f040 80d0 	bne.w	801ba58 <updateStringItem+0xf70>
					{
						multiplierIndex = fmin(multiplierIndex + 1, 7);
 801b8b8:	4b23      	ldr	r3, [pc, #140]	; (801b948 <updateStringItem+0xe60>)
 801b8ba:	781b      	ldrb	r3, [r3, #0]
 801b8bc:	3301      	adds	r3, #1
 801b8be:	ee07 3a90 	vmov	s15, r3
 801b8c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801b8c6:	eeb1 1b0c 	vmov.f64	d1, #28	; 0x40e00000  7.0
 801b8ca:	eeb0 0b47 	vmov.f64	d0, d7
 801b8ce:	f005 fbdc 	bl	802108a <fmin>
 801b8d2:	eeb0 7b40 	vmov.f64	d7, d0
 801b8d6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 801b8da:	edc7 7a00 	vstr	s15, [r7]
 801b8de:	683b      	ldr	r3, [r7, #0]
 801b8e0:	b2da      	uxtb	r2, r3
 801b8e2:	4b19      	ldr	r3, [pc, #100]	; (801b948 <updateStringItem+0xe60>)
 801b8e4:	701a      	strb	r2, [r3, #0]
						stringItem.deltaMultiplier = stringMultiplierArray[multiplierIndex];
 801b8e6:	4b18      	ldr	r3, [pc, #96]	; (801b948 <updateStringItem+0xe60>)
 801b8e8:	781b      	ldrb	r3, [r3, #0]
 801b8ea:	461a      	mov	r2, r3
 801b8ec:	4b17      	ldr	r3, [pc, #92]	; (801b94c <updateStringItem+0xe64>)
 801b8ee:	5c9a      	ldrb	r2, [r3, r2]
 801b8f0:	4b13      	ldr	r3, [pc, #76]	; (801b940 <updateStringItem+0xe58>)
 801b8f2:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
//						sprintf(localString,"%04d",stringItem.deltaMultiplier);
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b8f6:	7ffb      	ldrb	r3, [r7, #31]
 801b8f8:	b29a      	uxth	r2, r3
 801b8fa:	7f3b      	ldrb	r3, [r7, #28]
 801b8fc:	085b      	lsrs	r3, r3, #1
 801b8fe:	b2db      	uxtb	r3, r3
 801b900:	b29b      	uxth	r3, r3
 801b902:	4413      	add	r3, r2
 801b904:	b29b      	uxth	r3, r3
 801b906:	3301      	adds	r3, #1
 801b908:	b298      	uxth	r0, r3
 801b90a:	7fbb      	ldrb	r3, [r7, #30]
 801b90c:	b29a      	uxth	r2, r3
 801b90e:	7f7b      	ldrb	r3, [r7, #29]
 801b910:	b299      	uxth	r1, r3
 801b912:	697b      	ldr	r3, [r7, #20]
 801b914:	b29b      	uxth	r3, r3
 801b916:	fb11 f303 	smulbb	r3, r1, r3
 801b91a:	b29b      	uxth	r3, r3
 801b91c:	4413      	add	r3, r2
 801b91e:	b29b      	uxth	r3, r3
 801b920:	3301      	adds	r3, #1
 801b922:	b299      	uxth	r1, r3
 801b924:	f107 020c 	add.w	r2, r7, #12
 801b928:	2300      	movs	r3, #0
 801b92a:	9301      	str	r3, [sp, #4]
 801b92c:	f24c 6318 	movw	r3, #50712	; 0xc618
 801b930:	9300      	str	r3, [sp, #0]
 801b932:	4b04      	ldr	r3, [pc, #16]	; (801b944 <updateStringItem+0xe5c>)
 801b934:	f7f4 fc60 	bl	80101f8 <Paint_DrawString_EN>
 801b938:	e08e      	b.n	801ba58 <updateStringItem+0xf70>
 801b93a:	bf00      	nop
 801b93c:	2400b0dc 	.word	0x2400b0dc
 801b940:	2400c440 	.word	0x2400c440
 801b944:	24000030 	.word	0x24000030
 801b948:	2400a110 	.word	0x2400a110
 801b94c:	2400a124 	.word	0x2400a124
 801b950:	080218ac 	.word	0x080218ac
								localString, &Font12, LGRAY,  BLACK);
					}
				}
				else
				{
					Paint_ClearWindows(MenuRectangleStartX + 1,
 801b954:	7ffb      	ldrb	r3, [r7, #31]
 801b956:	b29b      	uxth	r3, r3
 801b958:	3301      	adds	r3, #1
 801b95a:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b95c:	7fbb      	ldrb	r3, [r7, #30]
 801b95e:	b29a      	uxth	r2, r3
 801b960:	7f7b      	ldrb	r3, [r7, #29]
 801b962:	b299      	uxth	r1, r3
 801b964:	697b      	ldr	r3, [r7, #20]
 801b966:	b29b      	uxth	r3, r3
 801b968:	fb11 f303 	smulbb	r3, r1, r3
 801b96c:	b29b      	uxth	r3, r3
 801b96e:	4413      	add	r3, r2
 801b970:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 801b972:	3301      	adds	r3, #1
 801b974:	b29e      	uxth	r6, r3
							MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 801b976:	7ffb      	ldrb	r3, [r7, #31]
 801b978:	b29c      	uxth	r4, r3
 801b97a:	697b      	ldr	r3, [r7, #20]
 801b97c:	011b      	lsls	r3, r3, #4
 801b97e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801b982:	4a95      	ldr	r2, [pc, #596]	; (801bbd8 <updateStringItem+0x10f0>)
 801b984:	4413      	add	r3, r2
 801b986:	3304      	adds	r3, #4
 801b988:	4618      	mov	r0, r3
 801b98a:	f7e4 fcb3 	bl	80002f4 <strlen>
 801b98e:	4603      	mov	r3, r0
 801b990:	b29a      	uxth	r2, r3
 801b992:	4b92      	ldr	r3, [pc, #584]	; (801bbdc <updateStringItem+0x10f4>)
 801b994:	889b      	ldrh	r3, [r3, #4]
 801b996:	fb12 f303 	smulbb	r3, r2, r3
 801b99a:	b29b      	uxth	r3, r3
 801b99c:	4423      	add	r3, r4
 801b99e:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 801b9a0:	3301      	adds	r3, #1
 801b9a2:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801b9a4:	7fbb      	ldrb	r3, [r7, #30]
 801b9a6:	b29a      	uxth	r2, r3
 801b9a8:	7f7b      	ldrb	r3, [r7, #29]
 801b9aa:	b299      	uxth	r1, r3
 801b9ac:	697b      	ldr	r3, [r7, #20]
 801b9ae:	b29b      	uxth	r3, r3
 801b9b0:	fb11 f303 	smulbb	r3, r1, r3
 801b9b4:	b29b      	uxth	r3, r3
 801b9b6:	4413      	add	r3, r2
 801b9b8:	b29a      	uxth	r2, r3
 801b9ba:	4b88      	ldr	r3, [pc, #544]	; (801bbdc <updateStringItem+0x10f4>)
 801b9bc:	88db      	ldrh	r3, [r3, #6]
 801b9be:	4413      	add	r3, r2
 801b9c0:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 801b9c2:	3301      	adds	r3, #1
 801b9c4:	b29b      	uxth	r3, r3
 801b9c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b9ca:	9200      	str	r2, [sp, #0]
 801b9cc:	4602      	mov	r2, r0
 801b9ce:	4631      	mov	r1, r6
 801b9d0:	4628      	mov	r0, r5
 801b9d2:	f7f3 fff3 	bl	800f9bc <Paint_ClearWindows>
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801b9d6:	7ffb      	ldrb	r3, [r7, #31]
 801b9d8:	b29b      	uxth	r3, r3
 801b9da:	3301      	adds	r3, #1
 801b9dc:	b298      	uxth	r0, r3
 801b9de:	7fbb      	ldrb	r3, [r7, #30]
 801b9e0:	b29a      	uxth	r2, r3
 801b9e2:	7f7b      	ldrb	r3, [r7, #29]
 801b9e4:	b299      	uxth	r1, r3
 801b9e6:	697b      	ldr	r3, [r7, #20]
 801b9e8:	b29b      	uxth	r3, r3
 801b9ea:	fb11 f303 	smulbb	r3, r1, r3
 801b9ee:	b29b      	uxth	r3, r3
 801b9f0:	4413      	add	r3, r2
 801b9f2:	b29b      	uxth	r3, r3
 801b9f4:	3301      	adds	r3, #1
 801b9f6:	b299      	uxth	r1, r3
							stringItem.itemsArray[i], &Font12, WHITE,  BLACK);
 801b9f8:	697b      	ldr	r3, [r7, #20]
 801b9fa:	011b      	lsls	r3, r3, #4
 801b9fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801ba00:	4a75      	ldr	r2, [pc, #468]	; (801bbd8 <updateStringItem+0x10f0>)
 801ba02:	4413      	add	r3, r2
 801ba04:	1d1a      	adds	r2, r3, #4
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801ba06:	2300      	movs	r3, #0
 801ba08:	9301      	str	r3, [sp, #4]
 801ba0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ba0e:	9300      	str	r3, [sp, #0]
 801ba10:	4b72      	ldr	r3, [pc, #456]	; (801bbdc <updateStringItem+0x10f4>)
 801ba12:	f7f4 fbf1 	bl	80101f8 <Paint_DrawString_EN>
					Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801ba16:	7ffb      	ldrb	r3, [r7, #31]
 801ba18:	b29a      	uxth	r2, r3
 801ba1a:	7f3b      	ldrb	r3, [r7, #28]
 801ba1c:	085b      	lsrs	r3, r3, #1
 801ba1e:	b2db      	uxtb	r3, r3
 801ba20:	b29b      	uxth	r3, r3
 801ba22:	4413      	add	r3, r2
 801ba24:	b29b      	uxth	r3, r3
 801ba26:	3301      	adds	r3, #1
 801ba28:	b298      	uxth	r0, r3
 801ba2a:	7fbb      	ldrb	r3, [r7, #30]
 801ba2c:	b29a      	uxth	r2, r3
 801ba2e:	7f7b      	ldrb	r3, [r7, #29]
 801ba30:	b299      	uxth	r1, r3
 801ba32:	697b      	ldr	r3, [r7, #20]
 801ba34:	b29b      	uxth	r3, r3
 801ba36:	fb11 f303 	smulbb	r3, r1, r3
 801ba3a:	b29b      	uxth	r3, r3
 801ba3c:	4413      	add	r3, r2
 801ba3e:	b29b      	uxth	r3, r3
 801ba40:	3301      	adds	r3, #1
 801ba42:	b299      	uxth	r1, r3
 801ba44:	f107 020c 	add.w	r2, r7, #12
 801ba48:	2300      	movs	r3, #0
 801ba4a:	9301      	str	r3, [sp, #4]
 801ba4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ba50:	9300      	str	r3, [sp, #0]
 801ba52:	4b62      	ldr	r3, [pc, #392]	; (801bbdc <updateStringItem+0x10f4>)
 801ba54:	f7f4 fbd0 	bl	80101f8 <Paint_DrawString_EN>
							localString, &Font12, WHITE,  BLACK);
				}
			}
		}
		if ( (i >= stringItem.numberOfItemsInPage - 2) && (i < stringItem.numberOfItemsInPage) )
 801ba58:	4b5f      	ldr	r3, [pc, #380]	; (801bbd8 <updateStringItem+0x10f0>)
 801ba5a:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 801ba5e:	3b02      	subs	r3, #2
 801ba60:	697a      	ldr	r2, [r7, #20]
 801ba62:	429a      	cmp	r2, r3
 801ba64:	f2c0 8281 	blt.w	801bf6a <updateStringItem+0x1482>
 801ba68:	4b5b      	ldr	r3, [pc, #364]	; (801bbd8 <updateStringItem+0x10f0>)
 801ba6a:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 801ba6e:	461a      	mov	r2, r3
 801ba70:	697b      	ldr	r3, [r7, #20]
 801ba72:	4293      	cmp	r3, r2
 801ba74:	f280 8279 	bge.w	801bf6a <updateStringItem+0x1482>
		{
			if (howToDraw == FULL)
 801ba78:	79fb      	ldrb	r3, [r7, #7]
 801ba7a:	2b02      	cmp	r3, #2
 801ba7c:	d17a      	bne.n	801bb74 <updateStringItem+0x108c>
			{
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 801ba7e:	7ffb      	ldrb	r3, [r7, #31]
 801ba80:	b298      	uxth	r0, r3
 801ba82:	7fbb      	ldrb	r3, [r7, #30]
 801ba84:	b29a      	uxth	r2, r3
 801ba86:	7f7b      	ldrb	r3, [r7, #29]
 801ba88:	b299      	uxth	r1, r3
 801ba8a:	697b      	ldr	r3, [r7, #20]
 801ba8c:	b29b      	uxth	r3, r3
 801ba8e:	fb11 f303 	smulbb	r3, r1, r3
 801ba92:	b29b      	uxth	r3, r3
 801ba94:	4413      	add	r3, r2
 801ba96:	b29c      	uxth	r4, r3
 801ba98:	7ffb      	ldrb	r3, [r7, #31]
 801ba9a:	b29a      	uxth	r2, r3
 801ba9c:	7f3b      	ldrb	r3, [r7, #28]
 801ba9e:	b29b      	uxth	r3, r3
 801baa0:	4413      	add	r3, r2
 801baa2:	b29d      	uxth	r5, r3
 801baa4:	7fbb      	ldrb	r3, [r7, #30]
 801baa6:	b29a      	uxth	r2, r3
 801baa8:	7f7b      	ldrb	r3, [r7, #29]
 801baaa:	b299      	uxth	r1, r3
						MenuRectangleStartX+MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 801baac:	697b      	ldr	r3, [r7, #20]
 801baae:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 801bab0:	b29b      	uxth	r3, r3
 801bab2:	fb11 f303 	smulbb	r3, r1, r3
 801bab6:	b29b      	uxth	r3, r3
 801bab8:	4413      	add	r3, r2
 801baba:	b29b      	uxth	r3, r3
 801babc:	2200      	movs	r2, #0
 801babe:	9202      	str	r2, [sp, #8]
 801bac0:	2201      	movs	r2, #1
 801bac2:	9201      	str	r2, [sp, #4]
 801bac4:	2200      	movs	r2, #0
 801bac6:	9200      	str	r2, [sp, #0]
 801bac8:	462a      	mov	r2, r5
 801baca:	4621      	mov	r1, r4
 801bacc:	f7f4 f8f0 	bl	800fcb0 <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
				if (currentCursorPosition.cursorPosition == i)
 801bad0:	4b43      	ldr	r3, [pc, #268]	; (801bbe0 <updateStringItem+0x10f8>)
 801bad2:	781b      	ldrb	r3, [r3, #0]
 801bad4:	461a      	mov	r2, r3
 801bad6:	697b      	ldr	r3, [r7, #20]
 801bad8:	4293      	cmp	r3, r2
 801bada:	d125      	bne.n	801bb28 <updateStringItem+0x1040>
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801badc:	7efb      	ldrb	r3, [r7, #27]
 801bade:	b29c      	uxth	r4, r3
 801bae0:	7fbb      	ldrb	r3, [r7, #30]
 801bae2:	b29a      	uxth	r2, r3
 801bae4:	7f7b      	ldrb	r3, [r7, #29]
 801bae6:	b299      	uxth	r1, r3
 801bae8:	697b      	ldr	r3, [r7, #20]
 801baea:	b29b      	uxth	r3, r3
 801baec:	fb11 f303 	smulbb	r3, r1, r3
 801baf0:	b29b      	uxth	r3, r3
 801baf2:	4413      	add	r3, r2
 801baf4:	b29b      	uxth	r3, r3
 801baf6:	3301      	adds	r3, #1
 801baf8:	b29d      	uxth	r5, r3
							stringItem.itemsArray[i], BLACK, LGRAY, 16, Font12);
 801bafa:	697b      	ldr	r3, [r7, #20]
 801bafc:	011b      	lsls	r3, r3, #4
 801bafe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801bb02:	4a35      	ldr	r2, [pc, #212]	; (801bbd8 <updateStringItem+0x10f0>)
 801bb04:	4413      	add	r3, r2
 801bb06:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801bb08:	4934      	ldr	r1, [pc, #208]	; (801bbdc <updateStringItem+0x10f4>)
 801bb0a:	ab02      	add	r3, sp, #8
 801bb0c:	c903      	ldmia	r1, {r0, r1}
 801bb0e:	e883 0003 	stmia.w	r3, {r0, r1}
 801bb12:	2310      	movs	r3, #16
 801bb14:	9301      	str	r3, [sp, #4]
 801bb16:	f24c 6318 	movw	r3, #50712	; 0xc618
 801bb1a:	9300      	str	r3, [sp, #0]
 801bb1c:	2300      	movs	r3, #0
 801bb1e:	4629      	mov	r1, r5
 801bb20:	4620      	mov	r0, r4
 801bb22:	f7fc fbb9 	bl	8018298 <centeredString>
 801bb26:	e220      	b.n	801bf6a <updateStringItem+0x1482>
				}
				else
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801bb28:	7efb      	ldrb	r3, [r7, #27]
 801bb2a:	b29c      	uxth	r4, r3
 801bb2c:	7fbb      	ldrb	r3, [r7, #30]
 801bb2e:	b29a      	uxth	r2, r3
 801bb30:	7f7b      	ldrb	r3, [r7, #29]
 801bb32:	b299      	uxth	r1, r3
 801bb34:	697b      	ldr	r3, [r7, #20]
 801bb36:	b29b      	uxth	r3, r3
 801bb38:	fb11 f303 	smulbb	r3, r1, r3
 801bb3c:	b29b      	uxth	r3, r3
 801bb3e:	4413      	add	r3, r2
 801bb40:	b29b      	uxth	r3, r3
 801bb42:	3301      	adds	r3, #1
 801bb44:	b29d      	uxth	r5, r3
							stringItem.itemsArray[i], BLACK, WHITE, 16, Font12);
 801bb46:	697b      	ldr	r3, [r7, #20]
 801bb48:	011b      	lsls	r3, r3, #4
 801bb4a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801bb4e:	4a22      	ldr	r2, [pc, #136]	; (801bbd8 <updateStringItem+0x10f0>)
 801bb50:	4413      	add	r3, r2
 801bb52:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801bb54:	4921      	ldr	r1, [pc, #132]	; (801bbdc <updateStringItem+0x10f4>)
 801bb56:	ab02      	add	r3, sp, #8
 801bb58:	c903      	ldmia	r1, {r0, r1}
 801bb5a:	e883 0003 	stmia.w	r3, {r0, r1}
 801bb5e:	2310      	movs	r3, #16
 801bb60:	9301      	str	r3, [sp, #4]
 801bb62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bb66:	9300      	str	r3, [sp, #0]
 801bb68:	2300      	movs	r3, #0
 801bb6a:	4629      	mov	r1, r5
 801bb6c:	4620      	mov	r0, r4
 801bb6e:	f7fc fb93 	bl	8018298 <centeredString>
 801bb72:	e1fa      	b.n	801bf6a <updateStringItem+0x1482>
				}
			}
			else if (howToDraw == DOWN)
 801bb74:	79fb      	ldrb	r3, [r7, #7]
 801bb76:	2b01      	cmp	r3, #1
 801bb78:	f040 80ca 	bne.w	801bd10 <updateStringItem+0x1228>
			{
				if ( (currentCursorPosition.cursorPosition == 4) && (i == 4) )
 801bb7c:	4b18      	ldr	r3, [pc, #96]	; (801bbe0 <updateStringItem+0x10f8>)
 801bb7e:	781b      	ldrb	r3, [r3, #0]
 801bb80:	2b04      	cmp	r3, #4
 801bb82:	d12f      	bne.n	801bbe4 <updateStringItem+0x10fc>
 801bb84:	697b      	ldr	r3, [r7, #20]
 801bb86:	2b04      	cmp	r3, #4
 801bb88:	d12c      	bne.n	801bbe4 <updateStringItem+0x10fc>
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801bb8a:	7efb      	ldrb	r3, [r7, #27]
 801bb8c:	b29c      	uxth	r4, r3
 801bb8e:	7fbb      	ldrb	r3, [r7, #30]
 801bb90:	b29a      	uxth	r2, r3
 801bb92:	7f7b      	ldrb	r3, [r7, #29]
 801bb94:	b299      	uxth	r1, r3
 801bb96:	697b      	ldr	r3, [r7, #20]
 801bb98:	b29b      	uxth	r3, r3
 801bb9a:	fb11 f303 	smulbb	r3, r1, r3
 801bb9e:	b29b      	uxth	r3, r3
 801bba0:	4413      	add	r3, r2
 801bba2:	b29b      	uxth	r3, r3
 801bba4:	3301      	adds	r3, #1
 801bba6:	b29d      	uxth	r5, r3
							stringItem.itemsArray[i], BLACK, LGRAY, 16, Font12);
 801bba8:	697b      	ldr	r3, [r7, #20]
 801bbaa:	011b      	lsls	r3, r3, #4
 801bbac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801bbb0:	4a09      	ldr	r2, [pc, #36]	; (801bbd8 <updateStringItem+0x10f0>)
 801bbb2:	4413      	add	r3, r2
 801bbb4:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801bbb6:	4909      	ldr	r1, [pc, #36]	; (801bbdc <updateStringItem+0x10f4>)
 801bbb8:	ab02      	add	r3, sp, #8
 801bbba:	c903      	ldmia	r1, {r0, r1}
 801bbbc:	e883 0003 	stmia.w	r3, {r0, r1}
 801bbc0:	2310      	movs	r3, #16
 801bbc2:	9301      	str	r3, [sp, #4]
 801bbc4:	f24c 6318 	movw	r3, #50712	; 0xc618
 801bbc8:	9300      	str	r3, [sp, #0]
 801bbca:	2300      	movs	r3, #0
 801bbcc:	4629      	mov	r1, r5
 801bbce:	4620      	mov	r0, r4
 801bbd0:	f7fc fb62 	bl	8018298 <centeredString>
 801bbd4:	e1c9      	b.n	801bf6a <updateStringItem+0x1482>
 801bbd6:	bf00      	nop
 801bbd8:	2400c440 	.word	0x2400c440
 801bbdc:	24000030 	.word	0x24000030
 801bbe0:	2400b0dc 	.word	0x2400b0dc
				}
				else if ( (currentCursorPosition.cursorPosition == 5) && (i == 5) )
 801bbe4:	4b8b      	ldr	r3, [pc, #556]	; (801be14 <updateStringItem+0x132c>)
 801bbe6:	781b      	ldrb	r3, [r3, #0]
 801bbe8:	2b05      	cmp	r3, #5
 801bbea:	f040 81be 	bne.w	801bf6a <updateStringItem+0x1482>
 801bbee:	697b      	ldr	r3, [r7, #20]
 801bbf0:	2b05      	cmp	r3, #5
 801bbf2:	f040 81ba 	bne.w	801bf6a <updateStringItem+0x1482>
				{
					Paint_ClearWindows(DisplayCenterWidth,
 801bbf6:	7efb      	ldrb	r3, [r7, #27]
 801bbf8:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 801bbfa:	7fbb      	ldrb	r3, [r7, #30]
 801bbfc:	b29a      	uxth	r2, r3
 801bbfe:	7f7b      	ldrb	r3, [r7, #29]
 801bc00:	b299      	uxth	r1, r3
 801bc02:	697b      	ldr	r3, [r7, #20]
 801bc04:	3b01      	subs	r3, #1
 801bc06:	b29b      	uxth	r3, r3
 801bc08:	fb11 f303 	smulbb	r3, r1, r3
 801bc0c:	b29b      	uxth	r3, r3
 801bc0e:	4413      	add	r3, r2
 801bc10:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth,
 801bc12:	3301      	adds	r3, #1
 801bc14:	b29e      	uxth	r6, r3
 801bc16:	7efb      	ldrb	r3, [r7, #27]
 801bc18:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(stringItem.itemsArray[i - 1]) * Font12.Width,
 801bc1a:	697b      	ldr	r3, [r7, #20]
 801bc1c:	3b01      	subs	r3, #1
 801bc1e:	011b      	lsls	r3, r3, #4
 801bc20:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801bc24:	4a7c      	ldr	r2, [pc, #496]	; (801be18 <updateStringItem+0x1330>)
 801bc26:	4413      	add	r3, r2
 801bc28:	3304      	adds	r3, #4
 801bc2a:	4618      	mov	r0, r3
 801bc2c:	f7e4 fb62 	bl	80002f4 <strlen>
 801bc30:	4603      	mov	r3, r0
					Paint_ClearWindows(DisplayCenterWidth,
 801bc32:	b29a      	uxth	r2, r3
							DisplayCenterWidth + strlen(stringItem.itemsArray[i - 1]) * Font12.Width,
 801bc34:	4b79      	ldr	r3, [pc, #484]	; (801be1c <updateStringItem+0x1334>)
 801bc36:	889b      	ldrh	r3, [r3, #4]
					Paint_ClearWindows(DisplayCenterWidth,
 801bc38:	fb12 f303 	smulbb	r3, r2, r3
 801bc3c:	b29b      	uxth	r3, r3
 801bc3e:	4423      	add	r3, r4
 801bc40:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1 + Font12.Height, WHITE);
 801bc42:	7fbb      	ldrb	r3, [r7, #30]
 801bc44:	b29a      	uxth	r2, r3
 801bc46:	7f7b      	ldrb	r3, [r7, #29]
 801bc48:	b299      	uxth	r1, r3
 801bc4a:	697b      	ldr	r3, [r7, #20]
 801bc4c:	3b01      	subs	r3, #1
 801bc4e:	b29b      	uxth	r3, r3
 801bc50:	fb11 f303 	smulbb	r3, r1, r3
 801bc54:	b29b      	uxth	r3, r3
 801bc56:	4413      	add	r3, r2
 801bc58:	b29a      	uxth	r2, r3
 801bc5a:	4b70      	ldr	r3, [pc, #448]	; (801be1c <updateStringItem+0x1334>)
 801bc5c:	88db      	ldrh	r3, [r3, #6]
 801bc5e:	4413      	add	r3, r2
 801bc60:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth,
 801bc62:	3301      	adds	r3, #1
 801bc64:	b29b      	uxth	r3, r3
 801bc66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bc6a:	9200      	str	r2, [sp, #0]
 801bc6c:	4602      	mov	r2, r0
 801bc6e:	4631      	mov	r1, r6
 801bc70:	4628      	mov	r0, r5
 801bc72:	f7f3 fea3 	bl	800f9bc <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 801bc76:	7efb      	ldrb	r3, [r7, #27]
 801bc78:	b29c      	uxth	r4, r3
 801bc7a:	7fbb      	ldrb	r3, [r7, #30]
 801bc7c:	b29a      	uxth	r2, r3
 801bc7e:	7f7b      	ldrb	r3, [r7, #29]
 801bc80:	b299      	uxth	r1, r3
 801bc82:	697b      	ldr	r3, [r7, #20]
 801bc84:	3b01      	subs	r3, #1
 801bc86:	b29b      	uxth	r3, r3
 801bc88:	fb11 f303 	smulbb	r3, r1, r3
 801bc8c:	b29b      	uxth	r3, r3
 801bc8e:	4413      	add	r3, r2
 801bc90:	b29b      	uxth	r3, r3
 801bc92:	3301      	adds	r3, #1
 801bc94:	b29d      	uxth	r5, r3
							stringItem.itemsArray[(i - 1)], BLACK, WHITE, 16, Font12);
 801bc96:	697b      	ldr	r3, [r7, #20]
 801bc98:	3b01      	subs	r3, #1
 801bc9a:	011b      	lsls	r3, r3, #4
 801bc9c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801bca0:	4a5d      	ldr	r2, [pc, #372]	; (801be18 <updateStringItem+0x1330>)
 801bca2:	4413      	add	r3, r2
 801bca4:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 801bca6:	495d      	ldr	r1, [pc, #372]	; (801be1c <updateStringItem+0x1334>)
 801bca8:	ab02      	add	r3, sp, #8
 801bcaa:	c903      	ldmia	r1, {r0, r1}
 801bcac:	e883 0003 	stmia.w	r3, {r0, r1}
 801bcb0:	2310      	movs	r3, #16
 801bcb2:	9301      	str	r3, [sp, #4]
 801bcb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bcb8:	9300      	str	r3, [sp, #0]
 801bcba:	2300      	movs	r3, #0
 801bcbc:	4629      	mov	r1, r5
 801bcbe:	4620      	mov	r0, r4
 801bcc0:	f7fc faea 	bl	8018298 <centeredString>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801bcc4:	7efb      	ldrb	r3, [r7, #27]
 801bcc6:	b29c      	uxth	r4, r3
 801bcc8:	7fbb      	ldrb	r3, [r7, #30]
 801bcca:	b29a      	uxth	r2, r3
 801bccc:	7f7b      	ldrb	r3, [r7, #29]
 801bcce:	b299      	uxth	r1, r3
 801bcd0:	697b      	ldr	r3, [r7, #20]
 801bcd2:	b29b      	uxth	r3, r3
 801bcd4:	fb11 f303 	smulbb	r3, r1, r3
 801bcd8:	b29b      	uxth	r3, r3
 801bcda:	4413      	add	r3, r2
 801bcdc:	b29b      	uxth	r3, r3
 801bcde:	3301      	adds	r3, #1
 801bce0:	b29d      	uxth	r5, r3
							stringItem.itemsArray[i], BLACK, LGRAY, 16, Font12);
 801bce2:	697b      	ldr	r3, [r7, #20]
 801bce4:	011b      	lsls	r3, r3, #4
 801bce6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801bcea:	4a4b      	ldr	r2, [pc, #300]	; (801be18 <updateStringItem+0x1330>)
 801bcec:	4413      	add	r3, r2
 801bcee:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801bcf0:	494a      	ldr	r1, [pc, #296]	; (801be1c <updateStringItem+0x1334>)
 801bcf2:	ab02      	add	r3, sp, #8
 801bcf4:	c903      	ldmia	r1, {r0, r1}
 801bcf6:	e883 0003 	stmia.w	r3, {r0, r1}
 801bcfa:	2310      	movs	r3, #16
 801bcfc:	9301      	str	r3, [sp, #4]
 801bcfe:	f24c 6318 	movw	r3, #50712	; 0xc618
 801bd02:	9300      	str	r3, [sp, #0]
 801bd04:	2300      	movs	r3, #0
 801bd06:	4629      	mov	r1, r5
 801bd08:	4620      	mov	r0, r4
 801bd0a:	f7fc fac5 	bl	8018298 <centeredString>
 801bd0e:	e12c      	b.n	801bf6a <updateStringItem+0x1482>
				}
			}
			else if (howToDraw == UP)
 801bd10:	79fb      	ldrb	r3, [r7, #7]
 801bd12:	2b00      	cmp	r3, #0
 801bd14:	f040 8129 	bne.w	801bf6a <updateStringItem+0x1482>
			{
				if ( (currentCursorPosition.cursorPosition == 3) && (i == 4) )
 801bd18:	4b3e      	ldr	r3, [pc, #248]	; (801be14 <updateStringItem+0x132c>)
 801bd1a:	781b      	ldrb	r3, [r3, #0]
 801bd1c:	2b03      	cmp	r3, #3
 801bd1e:	d17f      	bne.n	801be20 <updateStringItem+0x1338>
 801bd20:	697b      	ldr	r3, [r7, #20]
 801bd22:	2b04      	cmp	r3, #4
 801bd24:	d17c      	bne.n	801be20 <updateStringItem+0x1338>
				{
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 801bd26:	7efb      	ldrb	r3, [r7, #27]
 801bd28:	b29c      	uxth	r4, r3
 801bd2a:	697b      	ldr	r3, [r7, #20]
 801bd2c:	011b      	lsls	r3, r3, #4
 801bd2e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801bd32:	4a39      	ldr	r2, [pc, #228]	; (801be18 <updateStringItem+0x1330>)
 801bd34:	4413      	add	r3, r2
 801bd36:	3304      	adds	r3, #4
 801bd38:	4618      	mov	r0, r3
 801bd3a:	f7e4 fadb 	bl	80002f4 <strlen>
 801bd3e:	4603      	mov	r3, r0
 801bd40:	4a36      	ldr	r2, [pc, #216]	; (801be1c <updateStringItem+0x1334>)
 801bd42:	8892      	ldrh	r2, [r2, #4]
 801bd44:	fb02 f303 	mul.w	r3, r2, r3
 801bd48:	085b      	lsrs	r3, r3, #1
 801bd4a:	b29b      	uxth	r3, r3
 801bd4c:	1ae3      	subs	r3, r4, r3
 801bd4e:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801bd50:	7fbb      	ldrb	r3, [r7, #30]
 801bd52:	b29a      	uxth	r2, r3
 801bd54:	7f7b      	ldrb	r3, [r7, #29]
 801bd56:	b299      	uxth	r1, r3
 801bd58:	697b      	ldr	r3, [r7, #20]
 801bd5a:	b29b      	uxth	r3, r3
 801bd5c:	fb11 f303 	smulbb	r3, r1, r3
 801bd60:	b29b      	uxth	r3, r3
 801bd62:	4413      	add	r3, r2
 801bd64:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 801bd66:	3301      	adds	r3, #1
 801bd68:	b29e      	uxth	r6, r3
 801bd6a:	7efb      	ldrb	r3, [r7, #27]
 801bd6c:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(stringItem.itemsArray[i]) * Font12.Width /2,
 801bd6e:	697b      	ldr	r3, [r7, #20]
 801bd70:	011b      	lsls	r3, r3, #4
 801bd72:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801bd76:	4a28      	ldr	r2, [pc, #160]	; (801be18 <updateStringItem+0x1330>)
 801bd78:	4413      	add	r3, r2
 801bd7a:	3304      	adds	r3, #4
 801bd7c:	4618      	mov	r0, r3
 801bd7e:	f7e4 fab9 	bl	80002f4 <strlen>
 801bd82:	4603      	mov	r3, r0
 801bd84:	4a25      	ldr	r2, [pc, #148]	; (801be1c <updateStringItem+0x1334>)
 801bd86:	8892      	ldrh	r2, [r2, #4]
 801bd88:	fb02 f303 	mul.w	r3, r2, r3
 801bd8c:	085b      	lsrs	r3, r3, #1
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 801bd8e:	b29b      	uxth	r3, r3
 801bd90:	4423      	add	r3, r4
 801bd92:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801bd94:	7fbb      	ldrb	r3, [r7, #30]
 801bd96:	b29a      	uxth	r2, r3
 801bd98:	7f7b      	ldrb	r3, [r7, #29]
 801bd9a:	b299      	uxth	r1, r3
 801bd9c:	697b      	ldr	r3, [r7, #20]
 801bd9e:	b29b      	uxth	r3, r3
 801bda0:	fb11 f303 	smulbb	r3, r1, r3
 801bda4:	b29b      	uxth	r3, r3
 801bda6:	4413      	add	r3, r2
 801bda8:	b29a      	uxth	r2, r3
 801bdaa:	4b1c      	ldr	r3, [pc, #112]	; (801be1c <updateStringItem+0x1334>)
 801bdac:	88db      	ldrh	r3, [r3, #6]
 801bdae:	4413      	add	r3, r2
 801bdb0:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 801bdb2:	3301      	adds	r3, #1
 801bdb4:	b29b      	uxth	r3, r3
 801bdb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bdba:	9200      	str	r2, [sp, #0]
 801bdbc:	4602      	mov	r2, r0
 801bdbe:	4631      	mov	r1, r6
 801bdc0:	4628      	mov	r0, r5
 801bdc2:	f7f3 fdfb 	bl	800f9bc <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801bdc6:	7efb      	ldrb	r3, [r7, #27]
 801bdc8:	b29c      	uxth	r4, r3
 801bdca:	7fbb      	ldrb	r3, [r7, #30]
 801bdcc:	b29a      	uxth	r2, r3
 801bdce:	7f7b      	ldrb	r3, [r7, #29]
 801bdd0:	b299      	uxth	r1, r3
 801bdd2:	697b      	ldr	r3, [r7, #20]
 801bdd4:	b29b      	uxth	r3, r3
 801bdd6:	fb11 f303 	smulbb	r3, r1, r3
 801bdda:	b29b      	uxth	r3, r3
 801bddc:	4413      	add	r3, r2
 801bdde:	b29b      	uxth	r3, r3
 801bde0:	3301      	adds	r3, #1
 801bde2:	b29d      	uxth	r5, r3
							stringItem.itemsArray[(i)], BLACK, WHITE, 16, Font12);
 801bde4:	697b      	ldr	r3, [r7, #20]
 801bde6:	011b      	lsls	r3, r3, #4
 801bde8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801bdec:	4a0a      	ldr	r2, [pc, #40]	; (801be18 <updateStringItem+0x1330>)
 801bdee:	4413      	add	r3, r2
 801bdf0:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801bdf2:	490a      	ldr	r1, [pc, #40]	; (801be1c <updateStringItem+0x1334>)
 801bdf4:	ab02      	add	r3, sp, #8
 801bdf6:	c903      	ldmia	r1, {r0, r1}
 801bdf8:	e883 0003 	stmia.w	r3, {r0, r1}
 801bdfc:	2310      	movs	r3, #16
 801bdfe:	9301      	str	r3, [sp, #4]
 801be00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801be04:	9300      	str	r3, [sp, #0]
 801be06:	2300      	movs	r3, #0
 801be08:	4629      	mov	r1, r5
 801be0a:	4620      	mov	r0, r4
 801be0c:	f7fc fa44 	bl	8018298 <centeredString>
 801be10:	e0ab      	b.n	801bf6a <updateStringItem+0x1482>
 801be12:	bf00      	nop
 801be14:	2400b0dc 	.word	0x2400b0dc
 801be18:	2400c440 	.word	0x2400c440
 801be1c:	24000030 	.word	0x24000030
					//						centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
					//								uint16Item.itemsArray[i], BLACK, LGRAY, 16);
				}
				else if ( (currentCursorPosition.cursorPosition == 4) && (i == 5) )
 801be20:	4b5a      	ldr	r3, [pc, #360]	; (801bf8c <updateStringItem+0x14a4>)
 801be22:	781b      	ldrb	r3, [r3, #0]
 801be24:	2b04      	cmp	r3, #4
 801be26:	f040 80a0 	bne.w	801bf6a <updateStringItem+0x1482>
 801be2a:	697b      	ldr	r3, [r7, #20]
 801be2c:	2b05      	cmp	r3, #5
 801be2e:	f040 809c 	bne.w	801bf6a <updateStringItem+0x1482>
				{
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 801be32:	7efb      	ldrb	r3, [r7, #27]
 801be34:	b29c      	uxth	r4, r3
 801be36:	697b      	ldr	r3, [r7, #20]
 801be38:	011b      	lsls	r3, r3, #4
 801be3a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801be3e:	4a54      	ldr	r2, [pc, #336]	; (801bf90 <updateStringItem+0x14a8>)
 801be40:	4413      	add	r3, r2
 801be42:	3304      	adds	r3, #4
 801be44:	4618      	mov	r0, r3
 801be46:	f7e4 fa55 	bl	80002f4 <strlen>
 801be4a:	4603      	mov	r3, r0
 801be4c:	4a51      	ldr	r2, [pc, #324]	; (801bf94 <updateStringItem+0x14ac>)
 801be4e:	8892      	ldrh	r2, [r2, #4]
 801be50:	fb02 f303 	mul.w	r3, r2, r3
 801be54:	085b      	lsrs	r3, r3, #1
 801be56:	b29b      	uxth	r3, r3
 801be58:	1ae3      	subs	r3, r4, r3
 801be5a:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801be5c:	7fbb      	ldrb	r3, [r7, #30]
 801be5e:	b29a      	uxth	r2, r3
 801be60:	7f7b      	ldrb	r3, [r7, #29]
 801be62:	b299      	uxth	r1, r3
 801be64:	697b      	ldr	r3, [r7, #20]
 801be66:	b29b      	uxth	r3, r3
 801be68:	fb11 f303 	smulbb	r3, r1, r3
 801be6c:	b29b      	uxth	r3, r3
 801be6e:	4413      	add	r3, r2
 801be70:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 801be72:	3301      	adds	r3, #1
 801be74:	b29e      	uxth	r6, r3
 801be76:	7efb      	ldrb	r3, [r7, #27]
 801be78:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(stringItem.itemsArray[i]) * Font12.Width /2,
 801be7a:	697b      	ldr	r3, [r7, #20]
 801be7c:	011b      	lsls	r3, r3, #4
 801be7e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801be82:	4a43      	ldr	r2, [pc, #268]	; (801bf90 <updateStringItem+0x14a8>)
 801be84:	4413      	add	r3, r2
 801be86:	3304      	adds	r3, #4
 801be88:	4618      	mov	r0, r3
 801be8a:	f7e4 fa33 	bl	80002f4 <strlen>
 801be8e:	4603      	mov	r3, r0
 801be90:	4a40      	ldr	r2, [pc, #256]	; (801bf94 <updateStringItem+0x14ac>)
 801be92:	8892      	ldrh	r2, [r2, #4]
 801be94:	fb02 f303 	mul.w	r3, r2, r3
 801be98:	085b      	lsrs	r3, r3, #1
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 801be9a:	b29b      	uxth	r3, r3
 801be9c:	4423      	add	r3, r4
 801be9e:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801bea0:	7fbb      	ldrb	r3, [r7, #30]
 801bea2:	b29a      	uxth	r2, r3
 801bea4:	7f7b      	ldrb	r3, [r7, #29]
 801bea6:	b299      	uxth	r1, r3
 801bea8:	697b      	ldr	r3, [r7, #20]
 801beaa:	b29b      	uxth	r3, r3
 801beac:	fb11 f303 	smulbb	r3, r1, r3
 801beb0:	b29b      	uxth	r3, r3
 801beb2:	4413      	add	r3, r2
 801beb4:	b29a      	uxth	r2, r3
 801beb6:	4b37      	ldr	r3, [pc, #220]	; (801bf94 <updateStringItem+0x14ac>)
 801beb8:	88db      	ldrh	r3, [r3, #6]
 801beba:	4413      	add	r3, r2
 801bebc:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 801bebe:	3301      	adds	r3, #1
 801bec0:	b29b      	uxth	r3, r3
 801bec2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bec6:	9200      	str	r2, [sp, #0]
 801bec8:	4602      	mov	r2, r0
 801beca:	4631      	mov	r1, r6
 801becc:	4628      	mov	r0, r5
 801bece:	f7f3 fd75 	bl	800f9bc <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801bed2:	7efb      	ldrb	r3, [r7, #27]
 801bed4:	b29c      	uxth	r4, r3
 801bed6:	7fbb      	ldrb	r3, [r7, #30]
 801bed8:	b29a      	uxth	r2, r3
 801beda:	7f7b      	ldrb	r3, [r7, #29]
 801bedc:	b299      	uxth	r1, r3
 801bede:	697b      	ldr	r3, [r7, #20]
 801bee0:	b29b      	uxth	r3, r3
 801bee2:	fb11 f303 	smulbb	r3, r1, r3
 801bee6:	b29b      	uxth	r3, r3
 801bee8:	4413      	add	r3, r2
 801beea:	b29b      	uxth	r3, r3
 801beec:	3301      	adds	r3, #1
 801beee:	b29d      	uxth	r5, r3
							stringItem.itemsArray[(i)], BLACK, WHITE, 16, Font12);
 801bef0:	697b      	ldr	r3, [r7, #20]
 801bef2:	011b      	lsls	r3, r3, #4
 801bef4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801bef8:	4a25      	ldr	r2, [pc, #148]	; (801bf90 <updateStringItem+0x14a8>)
 801befa:	4413      	add	r3, r2
 801befc:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801befe:	4925      	ldr	r1, [pc, #148]	; (801bf94 <updateStringItem+0x14ac>)
 801bf00:	ab02      	add	r3, sp, #8
 801bf02:	c903      	ldmia	r1, {r0, r1}
 801bf04:	e883 0003 	stmia.w	r3, {r0, r1}
 801bf08:	2310      	movs	r3, #16
 801bf0a:	9301      	str	r3, [sp, #4]
 801bf0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801bf10:	9300      	str	r3, [sp, #0]
 801bf12:	2300      	movs	r3, #0
 801bf14:	4629      	mov	r1, r5
 801bf16:	4620      	mov	r0, r4
 801bf18:	f7fc f9be 	bl	8018298 <centeredString>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 801bf1c:	7efb      	ldrb	r3, [r7, #27]
 801bf1e:	b29c      	uxth	r4, r3
 801bf20:	7fbb      	ldrb	r3, [r7, #30]
 801bf22:	b29a      	uxth	r2, r3
 801bf24:	7f7b      	ldrb	r3, [r7, #29]
 801bf26:	b299      	uxth	r1, r3
 801bf28:	697b      	ldr	r3, [r7, #20]
 801bf2a:	3b01      	subs	r3, #1
 801bf2c:	b29b      	uxth	r3, r3
 801bf2e:	fb11 f303 	smulbb	r3, r1, r3
 801bf32:	b29b      	uxth	r3, r3
 801bf34:	4413      	add	r3, r2
 801bf36:	b29b      	uxth	r3, r3
 801bf38:	3301      	adds	r3, #1
 801bf3a:	b29d      	uxth	r5, r3
							stringItem.itemsArray[i - 1], BLACK, LGRAY, 16, Font12);
 801bf3c:	697b      	ldr	r3, [r7, #20]
 801bf3e:	3b01      	subs	r3, #1
 801bf40:	011b      	lsls	r3, r3, #4
 801bf42:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801bf46:	4a12      	ldr	r2, [pc, #72]	; (801bf90 <updateStringItem+0x14a8>)
 801bf48:	4413      	add	r3, r2
 801bf4a:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 801bf4c:	4911      	ldr	r1, [pc, #68]	; (801bf94 <updateStringItem+0x14ac>)
 801bf4e:	ab02      	add	r3, sp, #8
 801bf50:	c903      	ldmia	r1, {r0, r1}
 801bf52:	e883 0003 	stmia.w	r3, {r0, r1}
 801bf56:	2310      	movs	r3, #16
 801bf58:	9301      	str	r3, [sp, #4]
 801bf5a:	f24c 6318 	movw	r3, #50712	; 0xc618
 801bf5e:	9300      	str	r3, [sp, #0]
 801bf60:	2300      	movs	r3, #0
 801bf62:	4629      	mov	r1, r5
 801bf64:	4620      	mov	r0, r4
 801bf66:	f7fc f997 	bl	8018298 <centeredString>
	for (int i = 0; i < stringItem.numberOfItemsInPage ; i++)
 801bf6a:	697b      	ldr	r3, [r7, #20]
 801bf6c:	3301      	adds	r3, #1
 801bf6e:	617b      	str	r3, [r7, #20]
 801bf70:	4b07      	ldr	r3, [pc, #28]	; (801bf90 <updateStringItem+0x14a8>)
 801bf72:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 801bf76:	461a      	mov	r2, r3
 801bf78:	697b      	ldr	r3, [r7, #20]
 801bf7a:	4293      	cmp	r3, r2
 801bf7c:	f6fe add8 	blt.w	801ab30 <updateStringItem+0x48>
				}
			}
		}
	}
}
 801bf80:	bf00      	nop
 801bf82:	bf00      	nop
 801bf84:	3724      	adds	r7, #36	; 0x24
 801bf86:	46bd      	mov	sp, r7
 801bf88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bf8a:	bf00      	nop
 801bf8c:	2400b0dc 	.word	0x2400b0dc
 801bf90:	2400c440 	.word	0x2400c440
 801bf94:	24000030 	.word	0x24000030

0801bf98 <CT>:
#include "main.h"

char CTime[20] = {0};

char *CT()
{
 801bf98:	b580      	push	{r7, lr}
 801bf9a:	af00      	add	r7, sp, #0
	sprintf(CTime,"%7.3f", (float)HAL_GetTick()/1000.0);
 801bf9c:	f7e6 fb04 	bl	80025a8 <HAL_GetTick>
 801bfa0:	ee07 0a90 	vmov	s15, r0
 801bfa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bfa8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801bfac:	ed9f 6b06 	vldr	d6, [pc, #24]	; 801bfc8 <CT+0x30>
 801bfb0:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801bfb4:	ec53 2b15 	vmov	r2, r3, d5
 801bfb8:	4905      	ldr	r1, [pc, #20]	; (801bfd0 <CT+0x38>)
 801bfba:	4806      	ldr	r0, [pc, #24]	; (801bfd4 <CT+0x3c>)
 801bfbc:	f001 fcc2 	bl	801d944 <siprintf>
    return CTime;
 801bfc0:	4b04      	ldr	r3, [pc, #16]	; (801bfd4 <CT+0x3c>)
}
 801bfc2:	4618      	mov	r0, r3
 801bfc4:	bd80      	pop	{r7, pc}
 801bfc6:	bf00      	nop
 801bfc8:	00000000 	.word	0x00000000
 801bfcc:	408f4000 	.word	0x408f4000
 801bfd0:	080218b0 	.word	0x080218b0
 801bfd4:	2400af64 	.word	0x2400af64

0801bfd8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801bfd8:	b580      	push	{r7, lr}
 801bfda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801bfdc:	2201      	movs	r2, #1
 801bfde:	490e      	ldr	r1, [pc, #56]	; (801c018 <MX_USB_HOST_Init+0x40>)
 801bfe0:	480e      	ldr	r0, [pc, #56]	; (801c01c <MX_USB_HOST_Init+0x44>)
 801bfe2:	f7f5 f92d 	bl	8011240 <USBH_Init>
 801bfe6:	4603      	mov	r3, r0
 801bfe8:	2b00      	cmp	r3, #0
 801bfea:	d001      	beq.n	801bff0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 801bfec:	f7e5 fbe9 	bl	80017c2 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 801bff0:	490b      	ldr	r1, [pc, #44]	; (801c020 <MX_USB_HOST_Init+0x48>)
 801bff2:	480a      	ldr	r0, [pc, #40]	; (801c01c <MX_USB_HOST_Init+0x44>)
 801bff4:	f7f5 f9cc 	bl	8011390 <USBH_RegisterClass>
 801bff8:	4603      	mov	r3, r0
 801bffa:	2b00      	cmp	r3, #0
 801bffc:	d001      	beq.n	801c002 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801bffe:	f7e5 fbe0 	bl	80017c2 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801c002:	4806      	ldr	r0, [pc, #24]	; (801c01c <MX_USB_HOST_Init+0x44>)
 801c004:	f7f5 fa59 	bl	80114ba <USBH_Start>
 801c008:	4603      	mov	r3, r0
 801c00a:	2b00      	cmp	r3, #0
 801c00c:	d001      	beq.n	801c012 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801c00e:	f7e5 fbd8 	bl	80017c2 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801c012:	bf00      	nop
 801c014:	bd80      	pop	{r7, pc}
 801c016:	bf00      	nop
 801c018:	0801c025 	.word	0x0801c025
 801c01c:	24010af4 	.word	0x24010af4
 801c020:	24000040 	.word	0x24000040

0801c024 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 801c024:	b480      	push	{r7}
 801c026:	b083      	sub	sp, #12
 801c028:	af00      	add	r7, sp, #0
 801c02a:	6078      	str	r0, [r7, #4]
 801c02c:	460b      	mov	r3, r1
 801c02e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801c030:	78fb      	ldrb	r3, [r7, #3]
 801c032:	3b01      	subs	r3, #1
 801c034:	2b04      	cmp	r3, #4
 801c036:	d819      	bhi.n	801c06c <USBH_UserProcess+0x48>
 801c038:	a201      	add	r2, pc, #4	; (adr r2, 801c040 <USBH_UserProcess+0x1c>)
 801c03a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c03e:	bf00      	nop
 801c040:	0801c06d 	.word	0x0801c06d
 801c044:	0801c05d 	.word	0x0801c05d
 801c048:	0801c06d 	.word	0x0801c06d
 801c04c:	0801c065 	.word	0x0801c065
 801c050:	0801c055 	.word	0x0801c055
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 801c054:	4b09      	ldr	r3, [pc, #36]	; (801c07c <USBH_UserProcess+0x58>)
 801c056:	2203      	movs	r2, #3
 801c058:	701a      	strb	r2, [r3, #0]
  break;
 801c05a:	e008      	b.n	801c06e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801c05c:	4b07      	ldr	r3, [pc, #28]	; (801c07c <USBH_UserProcess+0x58>)
 801c05e:	2202      	movs	r2, #2
 801c060:	701a      	strb	r2, [r3, #0]
  break;
 801c062:	e004      	b.n	801c06e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 801c064:	4b05      	ldr	r3, [pc, #20]	; (801c07c <USBH_UserProcess+0x58>)
 801c066:	2201      	movs	r2, #1
 801c068:	701a      	strb	r2, [r3, #0]
  break;
 801c06a:	e000      	b.n	801c06e <USBH_UserProcess+0x4a>

  default:
  break;
 801c06c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801c06e:	bf00      	nop
 801c070:	370c      	adds	r7, #12
 801c072:	46bd      	mov	sp, r7
 801c074:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c078:	4770      	bx	lr
 801c07a:	bf00      	nop
 801c07c:	2400af78 	.word	0x2400af78

0801c080 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801c080:	b580      	push	{r7, lr}
 801c082:	b0b8      	sub	sp, #224	; 0xe0
 801c084:	af00      	add	r7, sp, #0
 801c086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c088:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801c08c:	2200      	movs	r2, #0
 801c08e:	601a      	str	r2, [r3, #0]
 801c090:	605a      	str	r2, [r3, #4]
 801c092:	609a      	str	r2, [r3, #8]
 801c094:	60da      	str	r2, [r3, #12]
 801c096:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801c098:	f107 0310 	add.w	r3, r7, #16
 801c09c:	22bc      	movs	r2, #188	; 0xbc
 801c09e:	2100      	movs	r1, #0
 801c0a0:	4618      	mov	r0, r3
 801c0a2:	f000 fb25 	bl	801c6f0 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 801c0a6:	687b      	ldr	r3, [r7, #4]
 801c0a8:	681b      	ldr	r3, [r3, #0]
 801c0aa:	4a3b      	ldr	r2, [pc, #236]	; (801c198 <HAL_HCD_MspInit+0x118>)
 801c0ac:	4293      	cmp	r3, r2
 801c0ae:	d16e      	bne.n	801c18e <HAL_HCD_MspInit+0x10e>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801c0b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801c0b4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 801c0b6:	2301      	movs	r3, #1
 801c0b8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 801c0ba:	2312      	movs	r3, #18
 801c0bc:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 801c0be:	2302      	movs	r3, #2
 801c0c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 801c0c2:	2303      	movs	r3, #3
 801c0c4:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 801c0c6:	2302      	movs	r3, #2
 801c0c8:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 801c0ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 801c0ce:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 801c0d0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801c0d4:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 801c0d6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801c0da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801c0de:	f107 0310 	add.w	r3, r7, #16
 801c0e2:	4618      	mov	r0, r3
 801c0e4:	f7ec ff72 	bl	8008fcc <HAL_RCCEx_PeriphCLKConfig>
 801c0e8:	4603      	mov	r3, r0
 801c0ea:	2b00      	cmp	r3, #0
 801c0ec:	d001      	beq.n	801c0f2 <HAL_HCD_MspInit+0x72>
    {
      Error_Handler();
 801c0ee:	f7e5 fb68 	bl	80017c2 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801c0f2:	f7eb ffbf 	bl	8008074 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801c0f6:	4b29      	ldr	r3, [pc, #164]	; (801c19c <HAL_HCD_MspInit+0x11c>)
 801c0f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801c0fc:	4a27      	ldr	r2, [pc, #156]	; (801c19c <HAL_HCD_MspInit+0x11c>)
 801c0fe:	f043 0301 	orr.w	r3, r3, #1
 801c102:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801c106:	4b25      	ldr	r3, [pc, #148]	; (801c19c <HAL_HCD_MspInit+0x11c>)
 801c108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801c10c:	f003 0301 	and.w	r3, r3, #1
 801c110:	60fb      	str	r3, [r7, #12]
 801c112:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 801c114:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 801c118:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801c11c:	2302      	movs	r3, #2
 801c11e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c122:	2300      	movs	r3, #0
 801c124:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801c128:	2300      	movs	r3, #0
 801c12a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801c12e:	230a      	movs	r3, #10
 801c130:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801c134:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801c138:	4619      	mov	r1, r3
 801c13a:	4819      	ldr	r0, [pc, #100]	; (801c1a0 <HAL_HCD_MspInit+0x120>)
 801c13c:	f7e9 fe60 	bl	8005e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 801c140:	f44f 7300 	mov.w	r3, #512	; 0x200
 801c144:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801c148:	2300      	movs	r3, #0
 801c14a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c14e:	2300      	movs	r3, #0
 801c150:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801c154:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801c158:	4619      	mov	r1, r3
 801c15a:	4811      	ldr	r0, [pc, #68]	; (801c1a0 <HAL_HCD_MspInit+0x120>)
 801c15c:	f7e9 fe50 	bl	8005e00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801c160:	4b0e      	ldr	r3, [pc, #56]	; (801c19c <HAL_HCD_MspInit+0x11c>)
 801c162:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801c166:	4a0d      	ldr	r2, [pc, #52]	; (801c19c <HAL_HCD_MspInit+0x11c>)
 801c168:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801c16c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801c170:	4b0a      	ldr	r3, [pc, #40]	; (801c19c <HAL_HCD_MspInit+0x11c>)
 801c172:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801c176:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801c17a:	60bb      	str	r3, [r7, #8]
 801c17c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801c17e:	2200      	movs	r2, #0
 801c180:	2100      	movs	r1, #0
 801c182:	2065      	movs	r0, #101	; 0x65
 801c184:	f7e6 fb3b 	bl	80027fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801c188:	2065      	movs	r0, #101	; 0x65
 801c18a:	f7e6 fb52 	bl	8002832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801c18e:	bf00      	nop
 801c190:	37e0      	adds	r7, #224	; 0xe0
 801c192:	46bd      	mov	sp, r7
 801c194:	bd80      	pop	{r7, pc}
 801c196:	bf00      	nop
 801c198:	40080000 	.word	0x40080000
 801c19c:	58024400 	.word	0x58024400
 801c1a0:	58020000 	.word	0x58020000

0801c1a4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801c1a4:	b580      	push	{r7, lr}
 801c1a6:	b082      	sub	sp, #8
 801c1a8:	af00      	add	r7, sp, #0
 801c1aa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801c1ac:	687b      	ldr	r3, [r7, #4]
 801c1ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801c1b2:	4618      	mov	r0, r3
 801c1b4:	f7f5 f9a2 	bl	80114fc <USBH_LL_IncTimer>
}
 801c1b8:	bf00      	nop
 801c1ba:	3708      	adds	r7, #8
 801c1bc:	46bd      	mov	sp, r7
 801c1be:	bd80      	pop	{r7, pc}

0801c1c0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801c1c0:	b580      	push	{r7, lr}
 801c1c2:	b082      	sub	sp, #8
 801c1c4:	af00      	add	r7, sp, #0
 801c1c6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801c1c8:	687b      	ldr	r3, [r7, #4]
 801c1ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801c1ce:	4618      	mov	r0, r3
 801c1d0:	f7f5 f9e6 	bl	80115a0 <USBH_LL_Connect>
}
 801c1d4:	bf00      	nop
 801c1d6:	3708      	adds	r7, #8
 801c1d8:	46bd      	mov	sp, r7
 801c1da:	bd80      	pop	{r7, pc}

0801c1dc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801c1dc:	b580      	push	{r7, lr}
 801c1de:	b082      	sub	sp, #8
 801c1e0:	af00      	add	r7, sp, #0
 801c1e2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801c1e4:	687b      	ldr	r3, [r7, #4]
 801c1e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801c1ea:	4618      	mov	r0, r3
 801c1ec:	f7f5 f9f5 	bl	80115da <USBH_LL_Disconnect>
}
 801c1f0:	bf00      	nop
 801c1f2:	3708      	adds	r7, #8
 801c1f4:	46bd      	mov	sp, r7
 801c1f6:	bd80      	pop	{r7, pc}

0801c1f8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801c1f8:	b480      	push	{r7}
 801c1fa:	b083      	sub	sp, #12
 801c1fc:	af00      	add	r7, sp, #0
 801c1fe:	6078      	str	r0, [r7, #4]
 801c200:	460b      	mov	r3, r1
 801c202:	70fb      	strb	r3, [r7, #3]
 801c204:	4613      	mov	r3, r2
 801c206:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 801c208:	bf00      	nop
 801c20a:	370c      	adds	r7, #12
 801c20c:	46bd      	mov	sp, r7
 801c20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c212:	4770      	bx	lr

0801c214 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801c214:	b580      	push	{r7, lr}
 801c216:	b082      	sub	sp, #8
 801c218:	af00      	add	r7, sp, #0
 801c21a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801c21c:	687b      	ldr	r3, [r7, #4]
 801c21e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801c222:	4618      	mov	r0, r3
 801c224:	f7f5 f99c 	bl	8011560 <USBH_LL_PortEnabled>
}
 801c228:	bf00      	nop
 801c22a:	3708      	adds	r7, #8
 801c22c:	46bd      	mov	sp, r7
 801c22e:	bd80      	pop	{r7, pc}

0801c230 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801c230:	b580      	push	{r7, lr}
 801c232:	b082      	sub	sp, #8
 801c234:	af00      	add	r7, sp, #0
 801c236:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801c238:	687b      	ldr	r3, [r7, #4]
 801c23a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801c23e:	4618      	mov	r0, r3
 801c240:	f7f5 f99e 	bl	8011580 <USBH_LL_PortDisabled>
}
 801c244:	bf00      	nop
 801c246:	3708      	adds	r7, #8
 801c248:	46bd      	mov	sp, r7
 801c24a:	bd80      	pop	{r7, pc}

0801c24c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801c24c:	b580      	push	{r7, lr}
 801c24e:	b082      	sub	sp, #8
 801c250:	af00      	add	r7, sp, #0
 801c252:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 801c254:	687a      	ldr	r2, [r7, #4]
 801c256:	f643 230c 	movw	r3, #14860	; 0x3a0c
 801c25a:	4413      	add	r3, r2
 801c25c:	781b      	ldrb	r3, [r3, #0]
 801c25e:	2b01      	cmp	r3, #1
 801c260:	d12b      	bne.n	801c2ba <USBH_LL_Init+0x6e>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801c262:	4a18      	ldr	r2, [pc, #96]	; (801c2c4 <USBH_LL_Init+0x78>)
 801c264:	687b      	ldr	r3, [r7, #4]
 801c266:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 801c26a:	687a      	ldr	r2, [r7, #4]
 801c26c:	f643 2310 	movw	r3, #14864	; 0x3a10
 801c270:	4413      	add	r3, r2
 801c272:	4a14      	ldr	r2, [pc, #80]	; (801c2c4 <USBH_LL_Init+0x78>)
 801c274:	601a      	str	r2, [r3, #0]

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801c276:	4b13      	ldr	r3, [pc, #76]	; (801c2c4 <USBH_LL_Init+0x78>)
 801c278:	4a13      	ldr	r2, [pc, #76]	; (801c2c8 <USBH_LL_Init+0x7c>)
 801c27a:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 801c27c:	4b11      	ldr	r3, [pc, #68]	; (801c2c4 <USBH_LL_Init+0x78>)
 801c27e:	2210      	movs	r2, #16
 801c280:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 801c282:	4b10      	ldr	r3, [pc, #64]	; (801c2c4 <USBH_LL_Init+0x78>)
 801c284:	2201      	movs	r2, #1
 801c286:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801c288:	4b0e      	ldr	r3, [pc, #56]	; (801c2c4 <USBH_LL_Init+0x78>)
 801c28a:	2200      	movs	r2, #0
 801c28c:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801c28e:	4b0d      	ldr	r3, [pc, #52]	; (801c2c4 <USBH_LL_Init+0x78>)
 801c290:	2202      	movs	r2, #2
 801c292:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801c294:	4b0b      	ldr	r3, [pc, #44]	; (801c2c4 <USBH_LL_Init+0x78>)
 801c296:	2200      	movs	r2, #0
 801c298:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801c29a:	480a      	ldr	r0, [pc, #40]	; (801c2c4 <USBH_LL_Init+0x78>)
 801c29c:	f7e9 ffab 	bl	80061f6 <HAL_HCD_Init>
 801c2a0:	4603      	mov	r3, r0
 801c2a2:	2b00      	cmp	r3, #0
 801c2a4:	d001      	beq.n	801c2aa <USBH_LL_Init+0x5e>
  {
    Error_Handler( );
 801c2a6:	f7e5 fa8c 	bl	80017c2 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801c2aa:	4806      	ldr	r0, [pc, #24]	; (801c2c4 <USBH_LL_Init+0x78>)
 801c2ac:	f7ea fb7a 	bl	80069a4 <HAL_HCD_GetCurrentFrame>
 801c2b0:	4603      	mov	r3, r0
 801c2b2:	4619      	mov	r1, r3
 801c2b4:	6878      	ldr	r0, [r7, #4]
 801c2b6:	f7f5 f910 	bl	80114da <USBH_LL_SetTimer>
  }
  return USBH_OK;
 801c2ba:	2300      	movs	r3, #0
}
 801c2bc:	4618      	mov	r0, r3
 801c2be:	3708      	adds	r7, #8
 801c2c0:	46bd      	mov	sp, r7
 801c2c2:	bd80      	pop	{r7, pc}
 801c2c4:	2401454c 	.word	0x2401454c
 801c2c8:	40080000 	.word	0x40080000

0801c2cc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801c2cc:	b580      	push	{r7, lr}
 801c2ce:	b084      	sub	sp, #16
 801c2d0:	af00      	add	r7, sp, #0
 801c2d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c2d4:	2300      	movs	r3, #0
 801c2d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801c2d8:	2300      	movs	r3, #0
 801c2da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 801c2dc:	687a      	ldr	r2, [r7, #4]
 801c2de:	f643 2310 	movw	r3, #14864	; 0x3a10
 801c2e2:	4413      	add	r3, r2
 801c2e4:	681b      	ldr	r3, [r3, #0]
 801c2e6:	4618      	mov	r0, r3
 801c2e8:	f7ea faf4 	bl	80068d4 <HAL_HCD_Start>
 801c2ec:	4603      	mov	r3, r0
 801c2ee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801c2f0:	7bfb      	ldrb	r3, [r7, #15]
 801c2f2:	4618      	mov	r0, r3
 801c2f4:	f000 f91e 	bl	801c534 <USBH_Get_USB_Status>
 801c2f8:	4603      	mov	r3, r0
 801c2fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c2fc:	7bbb      	ldrb	r3, [r7, #14]
}
 801c2fe:	4618      	mov	r0, r3
 801c300:	3710      	adds	r7, #16
 801c302:	46bd      	mov	sp, r7
 801c304:	bd80      	pop	{r7, pc}

0801c306 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801c306:	b580      	push	{r7, lr}
 801c308:	b084      	sub	sp, #16
 801c30a:	af00      	add	r7, sp, #0
 801c30c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c30e:	2300      	movs	r3, #0
 801c310:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801c312:	2300      	movs	r3, #0
 801c314:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801c316:	687a      	ldr	r2, [r7, #4]
 801c318:	f643 2310 	movw	r3, #14864	; 0x3a10
 801c31c:	4413      	add	r3, r2
 801c31e:	681b      	ldr	r3, [r3, #0]
 801c320:	4618      	mov	r0, r3
 801c322:	f7ea fafa 	bl	800691a <HAL_HCD_Stop>
 801c326:	4603      	mov	r3, r0
 801c328:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801c32a:	7bfb      	ldrb	r3, [r7, #15]
 801c32c:	4618      	mov	r0, r3
 801c32e:	f000 f901 	bl	801c534 <USBH_Get_USB_Status>
 801c332:	4603      	mov	r3, r0
 801c334:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c336:	7bbb      	ldrb	r3, [r7, #14]
}
 801c338:	4618      	mov	r0, r3
 801c33a:	3710      	adds	r7, #16
 801c33c:	46bd      	mov	sp, r7
 801c33e:	bd80      	pop	{r7, pc}

0801c340 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801c340:	b580      	push	{r7, lr}
 801c342:	b082      	sub	sp, #8
 801c344:	af00      	add	r7, sp, #0
 801c346:	6078      	str	r0, [r7, #4]
 801c348:	460b      	mov	r3, r1
 801c34a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801c34c:	687a      	ldr	r2, [r7, #4]
 801c34e:	f643 2310 	movw	r3, #14864	; 0x3a10
 801c352:	4413      	add	r3, r2
 801c354:	681b      	ldr	r3, [r3, #0]
 801c356:	78fa      	ldrb	r2, [r7, #3]
 801c358:	4611      	mov	r1, r2
 801c35a:	4618      	mov	r0, r3
 801c35c:	f7ea fb0e 	bl	800697c <HAL_HCD_HC_GetXferCount>
 801c360:	4603      	mov	r3, r0
}
 801c362:	4618      	mov	r0, r3
 801c364:	3708      	adds	r7, #8
 801c366:	46bd      	mov	sp, r7
 801c368:	bd80      	pop	{r7, pc}

0801c36a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801c36a:	b590      	push	{r4, r7, lr}
 801c36c:	b089      	sub	sp, #36	; 0x24
 801c36e:	af04      	add	r7, sp, #16
 801c370:	6078      	str	r0, [r7, #4]
 801c372:	4608      	mov	r0, r1
 801c374:	4611      	mov	r1, r2
 801c376:	461a      	mov	r2, r3
 801c378:	4603      	mov	r3, r0
 801c37a:	70fb      	strb	r3, [r7, #3]
 801c37c:	460b      	mov	r3, r1
 801c37e:	70bb      	strb	r3, [r7, #2]
 801c380:	4613      	mov	r3, r2
 801c382:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c384:	2300      	movs	r3, #0
 801c386:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801c388:	2300      	movs	r3, #0
 801c38a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801c38c:	687a      	ldr	r2, [r7, #4]
 801c38e:	f643 2310 	movw	r3, #14864	; 0x3a10
 801c392:	4413      	add	r3, r2
 801c394:	6818      	ldr	r0, [r3, #0]
 801c396:	787c      	ldrb	r4, [r7, #1]
 801c398:	78ba      	ldrb	r2, [r7, #2]
 801c39a:	78f9      	ldrb	r1, [r7, #3]
 801c39c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801c39e:	9302      	str	r3, [sp, #8]
 801c3a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801c3a4:	9301      	str	r3, [sp, #4]
 801c3a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 801c3aa:	9300      	str	r3, [sp, #0]
 801c3ac:	4623      	mov	r3, r4
 801c3ae:	f7e9 ff84 	bl	80062ba <HAL_HCD_HC_Init>
 801c3b2:	4603      	mov	r3, r0
 801c3b4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801c3b6:	7bfb      	ldrb	r3, [r7, #15]
 801c3b8:	4618      	mov	r0, r3
 801c3ba:	f000 f8bb 	bl	801c534 <USBH_Get_USB_Status>
 801c3be:	4603      	mov	r3, r0
 801c3c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c3c2:	7bbb      	ldrb	r3, [r7, #14]
}
 801c3c4:	4618      	mov	r0, r3
 801c3c6:	3714      	adds	r7, #20
 801c3c8:	46bd      	mov	sp, r7
 801c3ca:	bd90      	pop	{r4, r7, pc}

0801c3cc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801c3cc:	b580      	push	{r7, lr}
 801c3ce:	b084      	sub	sp, #16
 801c3d0:	af00      	add	r7, sp, #0
 801c3d2:	6078      	str	r0, [r7, #4]
 801c3d4:	460b      	mov	r3, r1
 801c3d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c3d8:	2300      	movs	r3, #0
 801c3da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801c3dc:	2300      	movs	r3, #0
 801c3de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801c3e0:	687a      	ldr	r2, [r7, #4]
 801c3e2:	f643 2310 	movw	r3, #14864	; 0x3a10
 801c3e6:	4413      	add	r3, r2
 801c3e8:	681b      	ldr	r3, [r3, #0]
 801c3ea:	78fa      	ldrb	r2, [r7, #3]
 801c3ec:	4611      	mov	r1, r2
 801c3ee:	4618      	mov	r0, r3
 801c3f0:	f7e9 fff2 	bl	80063d8 <HAL_HCD_HC_Halt>
 801c3f4:	4603      	mov	r3, r0
 801c3f6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801c3f8:	7bfb      	ldrb	r3, [r7, #15]
 801c3fa:	4618      	mov	r0, r3
 801c3fc:	f000 f89a 	bl	801c534 <USBH_Get_USB_Status>
 801c400:	4603      	mov	r3, r0
 801c402:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c404:	7bbb      	ldrb	r3, [r7, #14]
}
 801c406:	4618      	mov	r0, r3
 801c408:	3710      	adds	r7, #16
 801c40a:	46bd      	mov	sp, r7
 801c40c:	bd80      	pop	{r7, pc}

0801c40e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801c40e:	b590      	push	{r4, r7, lr}
 801c410:	b089      	sub	sp, #36	; 0x24
 801c412:	af04      	add	r7, sp, #16
 801c414:	6078      	str	r0, [r7, #4]
 801c416:	4608      	mov	r0, r1
 801c418:	4611      	mov	r1, r2
 801c41a:	461a      	mov	r2, r3
 801c41c:	4603      	mov	r3, r0
 801c41e:	70fb      	strb	r3, [r7, #3]
 801c420:	460b      	mov	r3, r1
 801c422:	70bb      	strb	r3, [r7, #2]
 801c424:	4613      	mov	r3, r2
 801c426:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c428:	2300      	movs	r3, #0
 801c42a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801c42c:	2300      	movs	r3, #0
 801c42e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801c430:	687a      	ldr	r2, [r7, #4]
 801c432:	f643 2310 	movw	r3, #14864	; 0x3a10
 801c436:	4413      	add	r3, r2
 801c438:	6818      	ldr	r0, [r3, #0]
 801c43a:	787c      	ldrb	r4, [r7, #1]
 801c43c:	78ba      	ldrb	r2, [r7, #2]
 801c43e:	78f9      	ldrb	r1, [r7, #3]
 801c440:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801c444:	9303      	str	r3, [sp, #12]
 801c446:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801c448:	9302      	str	r3, [sp, #8]
 801c44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c44c:	9301      	str	r3, [sp, #4]
 801c44e:	f897 3020 	ldrb.w	r3, [r7, #32]
 801c452:	9300      	str	r3, [sp, #0]
 801c454:	4623      	mov	r3, r4
 801c456:	f7e9 ffe3 	bl	8006420 <HAL_HCD_HC_SubmitRequest>
 801c45a:	4603      	mov	r3, r0
 801c45c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801c45e:	7bfb      	ldrb	r3, [r7, #15]
 801c460:	4618      	mov	r0, r3
 801c462:	f000 f867 	bl	801c534 <USBH_Get_USB_Status>
 801c466:	4603      	mov	r3, r0
 801c468:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801c46a:	7bbb      	ldrb	r3, [r7, #14]
}
 801c46c:	4618      	mov	r0, r3
 801c46e:	3714      	adds	r7, #20
 801c470:	46bd      	mov	sp, r7
 801c472:	bd90      	pop	{r4, r7, pc}

0801c474 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801c474:	b580      	push	{r7, lr}
 801c476:	b082      	sub	sp, #8
 801c478:	af00      	add	r7, sp, #0
 801c47a:	6078      	str	r0, [r7, #4]
 801c47c:	460b      	mov	r3, r1
 801c47e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801c480:	687a      	ldr	r2, [r7, #4]
 801c482:	f643 2310 	movw	r3, #14864	; 0x3a10
 801c486:	4413      	add	r3, r2
 801c488:	681b      	ldr	r3, [r3, #0]
 801c48a:	78fa      	ldrb	r2, [r7, #3]
 801c48c:	4611      	mov	r1, r2
 801c48e:	4618      	mov	r0, r3
 801c490:	f7ea fa60 	bl	8006954 <HAL_HCD_HC_GetURBState>
 801c494:	4603      	mov	r3, r0
}
 801c496:	4618      	mov	r0, r3
 801c498:	3708      	adds	r7, #8
 801c49a:	46bd      	mov	sp, r7
 801c49c:	bd80      	pop	{r7, pc}

0801c49e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801c49e:	b580      	push	{r7, lr}
 801c4a0:	b082      	sub	sp, #8
 801c4a2:	af00      	add	r7, sp, #0
 801c4a4:	6078      	str	r0, [r7, #4]
 801c4a6:	460b      	mov	r3, r1
 801c4a8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801c4aa:	687a      	ldr	r2, [r7, #4]
 801c4ac:	f643 230c 	movw	r3, #14860	; 0x3a0c
 801c4b0:	4413      	add	r3, r2
 801c4b2:	781b      	ldrb	r3, [r3, #0]
 801c4b4:	2b01      	cmp	r3, #1
 801c4b6:	d103      	bne.n	801c4c0 <USBH_LL_DriverVBUS+0x22>
    MX_DriverVbusFS(state);
 801c4b8:	78fb      	ldrb	r3, [r7, #3]
 801c4ba:	4618      	mov	r0, r3
 801c4bc:	f000 f866 	bl	801c58c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 801c4c0:	20c8      	movs	r0, #200	; 0xc8
 801c4c2:	f7e6 f87d 	bl	80025c0 <HAL_Delay>
  return USBH_OK;
 801c4c6:	2300      	movs	r3, #0
}
 801c4c8:	4618      	mov	r0, r3
 801c4ca:	3708      	adds	r7, #8
 801c4cc:	46bd      	mov	sp, r7
 801c4ce:	bd80      	pop	{r7, pc}

0801c4d0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801c4d0:	b480      	push	{r7}
 801c4d2:	b085      	sub	sp, #20
 801c4d4:	af00      	add	r7, sp, #0
 801c4d6:	6078      	str	r0, [r7, #4]
 801c4d8:	460b      	mov	r3, r1
 801c4da:	70fb      	strb	r3, [r7, #3]
 801c4dc:	4613      	mov	r3, r2
 801c4de:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801c4e0:	687a      	ldr	r2, [r7, #4]
 801c4e2:	f643 2310 	movw	r3, #14864	; 0x3a10
 801c4e6:	4413      	add	r3, r2
 801c4e8:	681b      	ldr	r3, [r3, #0]
 801c4ea:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801c4ec:	78fb      	ldrb	r3, [r7, #3]
 801c4ee:	68fa      	ldr	r2, [r7, #12]
 801c4f0:	212c      	movs	r1, #44	; 0x2c
 801c4f2:	fb01 f303 	mul.w	r3, r1, r3
 801c4f6:	4413      	add	r3, r2
 801c4f8:	333b      	adds	r3, #59	; 0x3b
 801c4fa:	781b      	ldrb	r3, [r3, #0]
 801c4fc:	2b00      	cmp	r3, #0
 801c4fe:	d009      	beq.n	801c514 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801c500:	78fb      	ldrb	r3, [r7, #3]
 801c502:	68fa      	ldr	r2, [r7, #12]
 801c504:	212c      	movs	r1, #44	; 0x2c
 801c506:	fb01 f303 	mul.w	r3, r1, r3
 801c50a:	4413      	add	r3, r2
 801c50c:	3354      	adds	r3, #84	; 0x54
 801c50e:	78ba      	ldrb	r2, [r7, #2]
 801c510:	701a      	strb	r2, [r3, #0]
 801c512:	e008      	b.n	801c526 <USBH_LL_SetToggle+0x56>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801c514:	78fb      	ldrb	r3, [r7, #3]
 801c516:	68fa      	ldr	r2, [r7, #12]
 801c518:	212c      	movs	r1, #44	; 0x2c
 801c51a:	fb01 f303 	mul.w	r3, r1, r3
 801c51e:	4413      	add	r3, r2
 801c520:	3355      	adds	r3, #85	; 0x55
 801c522:	78ba      	ldrb	r2, [r7, #2]
 801c524:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801c526:	2300      	movs	r3, #0
}
 801c528:	4618      	mov	r0, r3
 801c52a:	3714      	adds	r7, #20
 801c52c:	46bd      	mov	sp, r7
 801c52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c532:	4770      	bx	lr

0801c534 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801c534:	b480      	push	{r7}
 801c536:	b085      	sub	sp, #20
 801c538:	af00      	add	r7, sp, #0
 801c53a:	4603      	mov	r3, r0
 801c53c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801c53e:	2300      	movs	r3, #0
 801c540:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801c542:	79fb      	ldrb	r3, [r7, #7]
 801c544:	2b03      	cmp	r3, #3
 801c546:	d817      	bhi.n	801c578 <USBH_Get_USB_Status+0x44>
 801c548:	a201      	add	r2, pc, #4	; (adr r2, 801c550 <USBH_Get_USB_Status+0x1c>)
 801c54a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c54e:	bf00      	nop
 801c550:	0801c561 	.word	0x0801c561
 801c554:	0801c567 	.word	0x0801c567
 801c558:	0801c56d 	.word	0x0801c56d
 801c55c:	0801c573 	.word	0x0801c573
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801c560:	2300      	movs	r3, #0
 801c562:	73fb      	strb	r3, [r7, #15]
    break;
 801c564:	e00b      	b.n	801c57e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801c566:	2302      	movs	r3, #2
 801c568:	73fb      	strb	r3, [r7, #15]
    break;
 801c56a:	e008      	b.n	801c57e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801c56c:	2301      	movs	r3, #1
 801c56e:	73fb      	strb	r3, [r7, #15]
    break;
 801c570:	e005      	b.n	801c57e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801c572:	2302      	movs	r3, #2
 801c574:	73fb      	strb	r3, [r7, #15]
    break;
 801c576:	e002      	b.n	801c57e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801c578:	2302      	movs	r3, #2
 801c57a:	73fb      	strb	r3, [r7, #15]
    break;
 801c57c:	bf00      	nop
  }
  return usb_status;
 801c57e:	7bfb      	ldrb	r3, [r7, #15]
}
 801c580:	4618      	mov	r0, r3
 801c582:	3714      	adds	r7, #20
 801c584:	46bd      	mov	sp, r7
 801c586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c58a:	4770      	bx	lr

0801c58c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 801c58c:	b580      	push	{r7, lr}
 801c58e:	b084      	sub	sp, #16
 801c590:	af00      	add	r7, sp, #0
 801c592:	4603      	mov	r3, r0
 801c594:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801c596:	79fb      	ldrb	r3, [r7, #7]
 801c598:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801c59a:	79fb      	ldrb	r3, [r7, #7]
 801c59c:	2b00      	cmp	r3, #0
 801c59e:	d102      	bne.n	801c5a6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 801c5a0:	2301      	movs	r3, #1
 801c5a2:	73fb      	strb	r3, [r7, #15]
 801c5a4:	e001      	b.n	801c5aa <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801c5a6:	2300      	movs	r3, #0
 801c5a8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,(GPIO_PinState)data);
 801c5aa:	7bfb      	ldrb	r3, [r7, #15]
 801c5ac:	461a      	mov	r2, r3
 801c5ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801c5b2:	4803      	ldr	r0, [pc, #12]	; (801c5c0 <MX_DriverVbusFS+0x34>)
 801c5b4:	f7e9 fdec 	bl	8006190 <HAL_GPIO_WritePin>
}
 801c5b8:	bf00      	nop
 801c5ba:	3710      	adds	r7, #16
 801c5bc:	46bd      	mov	sp, r7
 801c5be:	bd80      	pop	{r7, pc}
 801c5c0:	58020000 	.word	0x58020000

0801c5c4 <__assert_func>:
 801c5c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c5c6:	4614      	mov	r4, r2
 801c5c8:	461a      	mov	r2, r3
 801c5ca:	4b09      	ldr	r3, [pc, #36]	; (801c5f0 <__assert_func+0x2c>)
 801c5cc:	681b      	ldr	r3, [r3, #0]
 801c5ce:	4605      	mov	r5, r0
 801c5d0:	68d8      	ldr	r0, [r3, #12]
 801c5d2:	b14c      	cbz	r4, 801c5e8 <__assert_func+0x24>
 801c5d4:	4b07      	ldr	r3, [pc, #28]	; (801c5f4 <__assert_func+0x30>)
 801c5d6:	9100      	str	r1, [sp, #0]
 801c5d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c5dc:	4906      	ldr	r1, [pc, #24]	; (801c5f8 <__assert_func+0x34>)
 801c5de:	462b      	mov	r3, r5
 801c5e0:	f000 f818 	bl	801c614 <fiprintf>
 801c5e4:	f002 f93c 	bl	801e860 <abort>
 801c5e8:	4b04      	ldr	r3, [pc, #16]	; (801c5fc <__assert_func+0x38>)
 801c5ea:	461c      	mov	r4, r3
 801c5ec:	e7f3      	b.n	801c5d6 <__assert_func+0x12>
 801c5ee:	bf00      	nop
 801c5f0:	2400a128 	.word	0x2400a128
 801c5f4:	0802a507 	.word	0x0802a507
 801c5f8:	0802a514 	.word	0x0802a514
 801c5fc:	0802a542 	.word	0x0802a542

0801c600 <atoi>:
 801c600:	220a      	movs	r2, #10
 801c602:	2100      	movs	r1, #0
 801c604:	f002 b862 	b.w	801e6cc <strtol>

0801c608 <__errno>:
 801c608:	4b01      	ldr	r3, [pc, #4]	; (801c610 <__errno+0x8>)
 801c60a:	6818      	ldr	r0, [r3, #0]
 801c60c:	4770      	bx	lr
 801c60e:	bf00      	nop
 801c610:	2400a128 	.word	0x2400a128

0801c614 <fiprintf>:
 801c614:	b40e      	push	{r1, r2, r3}
 801c616:	b503      	push	{r0, r1, lr}
 801c618:	4601      	mov	r1, r0
 801c61a:	ab03      	add	r3, sp, #12
 801c61c:	4805      	ldr	r0, [pc, #20]	; (801c634 <fiprintf+0x20>)
 801c61e:	f853 2b04 	ldr.w	r2, [r3], #4
 801c622:	6800      	ldr	r0, [r0, #0]
 801c624:	9301      	str	r3, [sp, #4]
 801c626:	f000 f93f 	bl	801c8a8 <_vfiprintf_r>
 801c62a:	b002      	add	sp, #8
 801c62c:	f85d eb04 	ldr.w	lr, [sp], #4
 801c630:	b003      	add	sp, #12
 801c632:	4770      	bx	lr
 801c634:	2400a128 	.word	0x2400a128

0801c638 <__libc_init_array>:
 801c638:	b570      	push	{r4, r5, r6, lr}
 801c63a:	4d0d      	ldr	r5, [pc, #52]	; (801c670 <__libc_init_array+0x38>)
 801c63c:	4c0d      	ldr	r4, [pc, #52]	; (801c674 <__libc_init_array+0x3c>)
 801c63e:	1b64      	subs	r4, r4, r5
 801c640:	10a4      	asrs	r4, r4, #2
 801c642:	2600      	movs	r6, #0
 801c644:	42a6      	cmp	r6, r4
 801c646:	d109      	bne.n	801c65c <__libc_init_array+0x24>
 801c648:	4d0b      	ldr	r5, [pc, #44]	; (801c678 <__libc_init_array+0x40>)
 801c64a:	4c0c      	ldr	r4, [pc, #48]	; (801c67c <__libc_init_array+0x44>)
 801c64c:	f004 fe2c 	bl	80212a8 <_init>
 801c650:	1b64      	subs	r4, r4, r5
 801c652:	10a4      	asrs	r4, r4, #2
 801c654:	2600      	movs	r6, #0
 801c656:	42a6      	cmp	r6, r4
 801c658:	d105      	bne.n	801c666 <__libc_init_array+0x2e>
 801c65a:	bd70      	pop	{r4, r5, r6, pc}
 801c65c:	f855 3b04 	ldr.w	r3, [r5], #4
 801c660:	4798      	blx	r3
 801c662:	3601      	adds	r6, #1
 801c664:	e7ee      	b.n	801c644 <__libc_init_array+0xc>
 801c666:	f855 3b04 	ldr.w	r3, [r5], #4
 801c66a:	4798      	blx	r3
 801c66c:	3601      	adds	r6, #1
 801c66e:	e7f2      	b.n	801c656 <__libc_init_array+0x1e>
 801c670:	0802ab08 	.word	0x0802ab08
 801c674:	0802ab08 	.word	0x0802ab08
 801c678:	0802ab08 	.word	0x0802ab08
 801c67c:	0802ab0c 	.word	0x0802ab0c

0801c680 <malloc>:
 801c680:	4b02      	ldr	r3, [pc, #8]	; (801c68c <malloc+0xc>)
 801c682:	4601      	mov	r1, r0
 801c684:	6818      	ldr	r0, [r3, #0]
 801c686:	f000 b88b 	b.w	801c7a0 <_malloc_r>
 801c68a:	bf00      	nop
 801c68c:	2400a128 	.word	0x2400a128

0801c690 <free>:
 801c690:	4b02      	ldr	r3, [pc, #8]	; (801c69c <free+0xc>)
 801c692:	4601      	mov	r1, r0
 801c694:	6818      	ldr	r0, [r3, #0]
 801c696:	f000 b833 	b.w	801c700 <_free_r>
 801c69a:	bf00      	nop
 801c69c:	2400a128 	.word	0x2400a128

0801c6a0 <memcpy>:
 801c6a0:	440a      	add	r2, r1
 801c6a2:	4291      	cmp	r1, r2
 801c6a4:	f100 33ff 	add.w	r3, r0, #4294967295
 801c6a8:	d100      	bne.n	801c6ac <memcpy+0xc>
 801c6aa:	4770      	bx	lr
 801c6ac:	b510      	push	{r4, lr}
 801c6ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c6b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c6b6:	4291      	cmp	r1, r2
 801c6b8:	d1f9      	bne.n	801c6ae <memcpy+0xe>
 801c6ba:	bd10      	pop	{r4, pc}

0801c6bc <memmove>:
 801c6bc:	4288      	cmp	r0, r1
 801c6be:	b510      	push	{r4, lr}
 801c6c0:	eb01 0402 	add.w	r4, r1, r2
 801c6c4:	d902      	bls.n	801c6cc <memmove+0x10>
 801c6c6:	4284      	cmp	r4, r0
 801c6c8:	4623      	mov	r3, r4
 801c6ca:	d807      	bhi.n	801c6dc <memmove+0x20>
 801c6cc:	1e43      	subs	r3, r0, #1
 801c6ce:	42a1      	cmp	r1, r4
 801c6d0:	d008      	beq.n	801c6e4 <memmove+0x28>
 801c6d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c6d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c6da:	e7f8      	b.n	801c6ce <memmove+0x12>
 801c6dc:	4402      	add	r2, r0
 801c6de:	4601      	mov	r1, r0
 801c6e0:	428a      	cmp	r2, r1
 801c6e2:	d100      	bne.n	801c6e6 <memmove+0x2a>
 801c6e4:	bd10      	pop	{r4, pc}
 801c6e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c6ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c6ee:	e7f7      	b.n	801c6e0 <memmove+0x24>

0801c6f0 <memset>:
 801c6f0:	4402      	add	r2, r0
 801c6f2:	4603      	mov	r3, r0
 801c6f4:	4293      	cmp	r3, r2
 801c6f6:	d100      	bne.n	801c6fa <memset+0xa>
 801c6f8:	4770      	bx	lr
 801c6fa:	f803 1b01 	strb.w	r1, [r3], #1
 801c6fe:	e7f9      	b.n	801c6f4 <memset+0x4>

0801c700 <_free_r>:
 801c700:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c702:	2900      	cmp	r1, #0
 801c704:	d048      	beq.n	801c798 <_free_r+0x98>
 801c706:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c70a:	9001      	str	r0, [sp, #4]
 801c70c:	2b00      	cmp	r3, #0
 801c70e:	f1a1 0404 	sub.w	r4, r1, #4
 801c712:	bfb8      	it	lt
 801c714:	18e4      	addlt	r4, r4, r3
 801c716:	f003 fc5d 	bl	801ffd4 <__malloc_lock>
 801c71a:	4a20      	ldr	r2, [pc, #128]	; (801c79c <_free_r+0x9c>)
 801c71c:	9801      	ldr	r0, [sp, #4]
 801c71e:	6813      	ldr	r3, [r2, #0]
 801c720:	4615      	mov	r5, r2
 801c722:	b933      	cbnz	r3, 801c732 <_free_r+0x32>
 801c724:	6063      	str	r3, [r4, #4]
 801c726:	6014      	str	r4, [r2, #0]
 801c728:	b003      	add	sp, #12
 801c72a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c72e:	f003 bc57 	b.w	801ffe0 <__malloc_unlock>
 801c732:	42a3      	cmp	r3, r4
 801c734:	d90b      	bls.n	801c74e <_free_r+0x4e>
 801c736:	6821      	ldr	r1, [r4, #0]
 801c738:	1862      	adds	r2, r4, r1
 801c73a:	4293      	cmp	r3, r2
 801c73c:	bf04      	itt	eq
 801c73e:	681a      	ldreq	r2, [r3, #0]
 801c740:	685b      	ldreq	r3, [r3, #4]
 801c742:	6063      	str	r3, [r4, #4]
 801c744:	bf04      	itt	eq
 801c746:	1852      	addeq	r2, r2, r1
 801c748:	6022      	streq	r2, [r4, #0]
 801c74a:	602c      	str	r4, [r5, #0]
 801c74c:	e7ec      	b.n	801c728 <_free_r+0x28>
 801c74e:	461a      	mov	r2, r3
 801c750:	685b      	ldr	r3, [r3, #4]
 801c752:	b10b      	cbz	r3, 801c758 <_free_r+0x58>
 801c754:	42a3      	cmp	r3, r4
 801c756:	d9fa      	bls.n	801c74e <_free_r+0x4e>
 801c758:	6811      	ldr	r1, [r2, #0]
 801c75a:	1855      	adds	r5, r2, r1
 801c75c:	42a5      	cmp	r5, r4
 801c75e:	d10b      	bne.n	801c778 <_free_r+0x78>
 801c760:	6824      	ldr	r4, [r4, #0]
 801c762:	4421      	add	r1, r4
 801c764:	1854      	adds	r4, r2, r1
 801c766:	42a3      	cmp	r3, r4
 801c768:	6011      	str	r1, [r2, #0]
 801c76a:	d1dd      	bne.n	801c728 <_free_r+0x28>
 801c76c:	681c      	ldr	r4, [r3, #0]
 801c76e:	685b      	ldr	r3, [r3, #4]
 801c770:	6053      	str	r3, [r2, #4]
 801c772:	4421      	add	r1, r4
 801c774:	6011      	str	r1, [r2, #0]
 801c776:	e7d7      	b.n	801c728 <_free_r+0x28>
 801c778:	d902      	bls.n	801c780 <_free_r+0x80>
 801c77a:	230c      	movs	r3, #12
 801c77c:	6003      	str	r3, [r0, #0]
 801c77e:	e7d3      	b.n	801c728 <_free_r+0x28>
 801c780:	6825      	ldr	r5, [r4, #0]
 801c782:	1961      	adds	r1, r4, r5
 801c784:	428b      	cmp	r3, r1
 801c786:	bf04      	itt	eq
 801c788:	6819      	ldreq	r1, [r3, #0]
 801c78a:	685b      	ldreq	r3, [r3, #4]
 801c78c:	6063      	str	r3, [r4, #4]
 801c78e:	bf04      	itt	eq
 801c790:	1949      	addeq	r1, r1, r5
 801c792:	6021      	streq	r1, [r4, #0]
 801c794:	6054      	str	r4, [r2, #4]
 801c796:	e7c7      	b.n	801c728 <_free_r+0x28>
 801c798:	b003      	add	sp, #12
 801c79a:	bd30      	pop	{r4, r5, pc}
 801c79c:	2400af7c 	.word	0x2400af7c

0801c7a0 <_malloc_r>:
 801c7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c7a2:	1ccd      	adds	r5, r1, #3
 801c7a4:	f025 0503 	bic.w	r5, r5, #3
 801c7a8:	3508      	adds	r5, #8
 801c7aa:	2d0c      	cmp	r5, #12
 801c7ac:	bf38      	it	cc
 801c7ae:	250c      	movcc	r5, #12
 801c7b0:	2d00      	cmp	r5, #0
 801c7b2:	4606      	mov	r6, r0
 801c7b4:	db01      	blt.n	801c7ba <_malloc_r+0x1a>
 801c7b6:	42a9      	cmp	r1, r5
 801c7b8:	d903      	bls.n	801c7c2 <_malloc_r+0x22>
 801c7ba:	230c      	movs	r3, #12
 801c7bc:	6033      	str	r3, [r6, #0]
 801c7be:	2000      	movs	r0, #0
 801c7c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c7c2:	f003 fc07 	bl	801ffd4 <__malloc_lock>
 801c7c6:	4921      	ldr	r1, [pc, #132]	; (801c84c <_malloc_r+0xac>)
 801c7c8:	680a      	ldr	r2, [r1, #0]
 801c7ca:	4614      	mov	r4, r2
 801c7cc:	b99c      	cbnz	r4, 801c7f6 <_malloc_r+0x56>
 801c7ce:	4f20      	ldr	r7, [pc, #128]	; (801c850 <_malloc_r+0xb0>)
 801c7d0:	683b      	ldr	r3, [r7, #0]
 801c7d2:	b923      	cbnz	r3, 801c7de <_malloc_r+0x3e>
 801c7d4:	4621      	mov	r1, r4
 801c7d6:	4630      	mov	r0, r6
 801c7d8:	f001 f86a 	bl	801d8b0 <_sbrk_r>
 801c7dc:	6038      	str	r0, [r7, #0]
 801c7de:	4629      	mov	r1, r5
 801c7e0:	4630      	mov	r0, r6
 801c7e2:	f001 f865 	bl	801d8b0 <_sbrk_r>
 801c7e6:	1c43      	adds	r3, r0, #1
 801c7e8:	d123      	bne.n	801c832 <_malloc_r+0x92>
 801c7ea:	230c      	movs	r3, #12
 801c7ec:	6033      	str	r3, [r6, #0]
 801c7ee:	4630      	mov	r0, r6
 801c7f0:	f003 fbf6 	bl	801ffe0 <__malloc_unlock>
 801c7f4:	e7e3      	b.n	801c7be <_malloc_r+0x1e>
 801c7f6:	6823      	ldr	r3, [r4, #0]
 801c7f8:	1b5b      	subs	r3, r3, r5
 801c7fa:	d417      	bmi.n	801c82c <_malloc_r+0x8c>
 801c7fc:	2b0b      	cmp	r3, #11
 801c7fe:	d903      	bls.n	801c808 <_malloc_r+0x68>
 801c800:	6023      	str	r3, [r4, #0]
 801c802:	441c      	add	r4, r3
 801c804:	6025      	str	r5, [r4, #0]
 801c806:	e004      	b.n	801c812 <_malloc_r+0x72>
 801c808:	6863      	ldr	r3, [r4, #4]
 801c80a:	42a2      	cmp	r2, r4
 801c80c:	bf0c      	ite	eq
 801c80e:	600b      	streq	r3, [r1, #0]
 801c810:	6053      	strne	r3, [r2, #4]
 801c812:	4630      	mov	r0, r6
 801c814:	f003 fbe4 	bl	801ffe0 <__malloc_unlock>
 801c818:	f104 000b 	add.w	r0, r4, #11
 801c81c:	1d23      	adds	r3, r4, #4
 801c81e:	f020 0007 	bic.w	r0, r0, #7
 801c822:	1ac2      	subs	r2, r0, r3
 801c824:	d0cc      	beq.n	801c7c0 <_malloc_r+0x20>
 801c826:	1a1b      	subs	r3, r3, r0
 801c828:	50a3      	str	r3, [r4, r2]
 801c82a:	e7c9      	b.n	801c7c0 <_malloc_r+0x20>
 801c82c:	4622      	mov	r2, r4
 801c82e:	6864      	ldr	r4, [r4, #4]
 801c830:	e7cc      	b.n	801c7cc <_malloc_r+0x2c>
 801c832:	1cc4      	adds	r4, r0, #3
 801c834:	f024 0403 	bic.w	r4, r4, #3
 801c838:	42a0      	cmp	r0, r4
 801c83a:	d0e3      	beq.n	801c804 <_malloc_r+0x64>
 801c83c:	1a21      	subs	r1, r4, r0
 801c83e:	4630      	mov	r0, r6
 801c840:	f001 f836 	bl	801d8b0 <_sbrk_r>
 801c844:	3001      	adds	r0, #1
 801c846:	d1dd      	bne.n	801c804 <_malloc_r+0x64>
 801c848:	e7cf      	b.n	801c7ea <_malloc_r+0x4a>
 801c84a:	bf00      	nop
 801c84c:	2400af7c 	.word	0x2400af7c
 801c850:	2400af80 	.word	0x2400af80

0801c854 <__sfputc_r>:
 801c854:	6893      	ldr	r3, [r2, #8]
 801c856:	3b01      	subs	r3, #1
 801c858:	2b00      	cmp	r3, #0
 801c85a:	b410      	push	{r4}
 801c85c:	6093      	str	r3, [r2, #8]
 801c85e:	da08      	bge.n	801c872 <__sfputc_r+0x1e>
 801c860:	6994      	ldr	r4, [r2, #24]
 801c862:	42a3      	cmp	r3, r4
 801c864:	db01      	blt.n	801c86a <__sfputc_r+0x16>
 801c866:	290a      	cmp	r1, #10
 801c868:	d103      	bne.n	801c872 <__sfputc_r+0x1e>
 801c86a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c86e:	f001 bf37 	b.w	801e6e0 <__swbuf_r>
 801c872:	6813      	ldr	r3, [r2, #0]
 801c874:	1c58      	adds	r0, r3, #1
 801c876:	6010      	str	r0, [r2, #0]
 801c878:	7019      	strb	r1, [r3, #0]
 801c87a:	4608      	mov	r0, r1
 801c87c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c880:	4770      	bx	lr

0801c882 <__sfputs_r>:
 801c882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c884:	4606      	mov	r6, r0
 801c886:	460f      	mov	r7, r1
 801c888:	4614      	mov	r4, r2
 801c88a:	18d5      	adds	r5, r2, r3
 801c88c:	42ac      	cmp	r4, r5
 801c88e:	d101      	bne.n	801c894 <__sfputs_r+0x12>
 801c890:	2000      	movs	r0, #0
 801c892:	e007      	b.n	801c8a4 <__sfputs_r+0x22>
 801c894:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c898:	463a      	mov	r2, r7
 801c89a:	4630      	mov	r0, r6
 801c89c:	f7ff ffda 	bl	801c854 <__sfputc_r>
 801c8a0:	1c43      	adds	r3, r0, #1
 801c8a2:	d1f3      	bne.n	801c88c <__sfputs_r+0xa>
 801c8a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c8a8 <_vfiprintf_r>:
 801c8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8ac:	460d      	mov	r5, r1
 801c8ae:	b09d      	sub	sp, #116	; 0x74
 801c8b0:	4614      	mov	r4, r2
 801c8b2:	4698      	mov	r8, r3
 801c8b4:	4606      	mov	r6, r0
 801c8b6:	b118      	cbz	r0, 801c8c0 <_vfiprintf_r+0x18>
 801c8b8:	6983      	ldr	r3, [r0, #24]
 801c8ba:	b90b      	cbnz	r3, 801c8c0 <_vfiprintf_r+0x18>
 801c8bc:	f002 ff00 	bl	801f6c0 <__sinit>
 801c8c0:	4b89      	ldr	r3, [pc, #548]	; (801cae8 <_vfiprintf_r+0x240>)
 801c8c2:	429d      	cmp	r5, r3
 801c8c4:	d11b      	bne.n	801c8fe <_vfiprintf_r+0x56>
 801c8c6:	6875      	ldr	r5, [r6, #4]
 801c8c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c8ca:	07d9      	lsls	r1, r3, #31
 801c8cc:	d405      	bmi.n	801c8da <_vfiprintf_r+0x32>
 801c8ce:	89ab      	ldrh	r3, [r5, #12]
 801c8d0:	059a      	lsls	r2, r3, #22
 801c8d2:	d402      	bmi.n	801c8da <_vfiprintf_r+0x32>
 801c8d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c8d6:	f003 fb04 	bl	801fee2 <__retarget_lock_acquire_recursive>
 801c8da:	89ab      	ldrh	r3, [r5, #12]
 801c8dc:	071b      	lsls	r3, r3, #28
 801c8de:	d501      	bpl.n	801c8e4 <_vfiprintf_r+0x3c>
 801c8e0:	692b      	ldr	r3, [r5, #16]
 801c8e2:	b9eb      	cbnz	r3, 801c920 <_vfiprintf_r+0x78>
 801c8e4:	4629      	mov	r1, r5
 801c8e6:	4630      	mov	r0, r6
 801c8e8:	f001 ff4c 	bl	801e784 <__swsetup_r>
 801c8ec:	b1c0      	cbz	r0, 801c920 <_vfiprintf_r+0x78>
 801c8ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c8f0:	07dc      	lsls	r4, r3, #31
 801c8f2:	d50e      	bpl.n	801c912 <_vfiprintf_r+0x6a>
 801c8f4:	f04f 30ff 	mov.w	r0, #4294967295
 801c8f8:	b01d      	add	sp, #116	; 0x74
 801c8fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8fe:	4b7b      	ldr	r3, [pc, #492]	; (801caec <_vfiprintf_r+0x244>)
 801c900:	429d      	cmp	r5, r3
 801c902:	d101      	bne.n	801c908 <_vfiprintf_r+0x60>
 801c904:	68b5      	ldr	r5, [r6, #8]
 801c906:	e7df      	b.n	801c8c8 <_vfiprintf_r+0x20>
 801c908:	4b79      	ldr	r3, [pc, #484]	; (801caf0 <_vfiprintf_r+0x248>)
 801c90a:	429d      	cmp	r5, r3
 801c90c:	bf08      	it	eq
 801c90e:	68f5      	ldreq	r5, [r6, #12]
 801c910:	e7da      	b.n	801c8c8 <_vfiprintf_r+0x20>
 801c912:	89ab      	ldrh	r3, [r5, #12]
 801c914:	0598      	lsls	r0, r3, #22
 801c916:	d4ed      	bmi.n	801c8f4 <_vfiprintf_r+0x4c>
 801c918:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c91a:	f003 fae3 	bl	801fee4 <__retarget_lock_release_recursive>
 801c91e:	e7e9      	b.n	801c8f4 <_vfiprintf_r+0x4c>
 801c920:	2300      	movs	r3, #0
 801c922:	9309      	str	r3, [sp, #36]	; 0x24
 801c924:	2320      	movs	r3, #32
 801c926:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c92a:	f8cd 800c 	str.w	r8, [sp, #12]
 801c92e:	2330      	movs	r3, #48	; 0x30
 801c930:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801caf4 <_vfiprintf_r+0x24c>
 801c934:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c938:	f04f 0901 	mov.w	r9, #1
 801c93c:	4623      	mov	r3, r4
 801c93e:	469a      	mov	sl, r3
 801c940:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c944:	b10a      	cbz	r2, 801c94a <_vfiprintf_r+0xa2>
 801c946:	2a25      	cmp	r2, #37	; 0x25
 801c948:	d1f9      	bne.n	801c93e <_vfiprintf_r+0x96>
 801c94a:	ebba 0b04 	subs.w	fp, sl, r4
 801c94e:	d00b      	beq.n	801c968 <_vfiprintf_r+0xc0>
 801c950:	465b      	mov	r3, fp
 801c952:	4622      	mov	r2, r4
 801c954:	4629      	mov	r1, r5
 801c956:	4630      	mov	r0, r6
 801c958:	f7ff ff93 	bl	801c882 <__sfputs_r>
 801c95c:	3001      	adds	r0, #1
 801c95e:	f000 80aa 	beq.w	801cab6 <_vfiprintf_r+0x20e>
 801c962:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c964:	445a      	add	r2, fp
 801c966:	9209      	str	r2, [sp, #36]	; 0x24
 801c968:	f89a 3000 	ldrb.w	r3, [sl]
 801c96c:	2b00      	cmp	r3, #0
 801c96e:	f000 80a2 	beq.w	801cab6 <_vfiprintf_r+0x20e>
 801c972:	2300      	movs	r3, #0
 801c974:	f04f 32ff 	mov.w	r2, #4294967295
 801c978:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c97c:	f10a 0a01 	add.w	sl, sl, #1
 801c980:	9304      	str	r3, [sp, #16]
 801c982:	9307      	str	r3, [sp, #28]
 801c984:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c988:	931a      	str	r3, [sp, #104]	; 0x68
 801c98a:	4654      	mov	r4, sl
 801c98c:	2205      	movs	r2, #5
 801c98e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c992:	4858      	ldr	r0, [pc, #352]	; (801caf4 <_vfiprintf_r+0x24c>)
 801c994:	f7e3 fcbc 	bl	8000310 <memchr>
 801c998:	9a04      	ldr	r2, [sp, #16]
 801c99a:	b9d8      	cbnz	r0, 801c9d4 <_vfiprintf_r+0x12c>
 801c99c:	06d1      	lsls	r1, r2, #27
 801c99e:	bf44      	itt	mi
 801c9a0:	2320      	movmi	r3, #32
 801c9a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c9a6:	0713      	lsls	r3, r2, #28
 801c9a8:	bf44      	itt	mi
 801c9aa:	232b      	movmi	r3, #43	; 0x2b
 801c9ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c9b0:	f89a 3000 	ldrb.w	r3, [sl]
 801c9b4:	2b2a      	cmp	r3, #42	; 0x2a
 801c9b6:	d015      	beq.n	801c9e4 <_vfiprintf_r+0x13c>
 801c9b8:	9a07      	ldr	r2, [sp, #28]
 801c9ba:	4654      	mov	r4, sl
 801c9bc:	2000      	movs	r0, #0
 801c9be:	f04f 0c0a 	mov.w	ip, #10
 801c9c2:	4621      	mov	r1, r4
 801c9c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c9c8:	3b30      	subs	r3, #48	; 0x30
 801c9ca:	2b09      	cmp	r3, #9
 801c9cc:	d94e      	bls.n	801ca6c <_vfiprintf_r+0x1c4>
 801c9ce:	b1b0      	cbz	r0, 801c9fe <_vfiprintf_r+0x156>
 801c9d0:	9207      	str	r2, [sp, #28]
 801c9d2:	e014      	b.n	801c9fe <_vfiprintf_r+0x156>
 801c9d4:	eba0 0308 	sub.w	r3, r0, r8
 801c9d8:	fa09 f303 	lsl.w	r3, r9, r3
 801c9dc:	4313      	orrs	r3, r2
 801c9de:	9304      	str	r3, [sp, #16]
 801c9e0:	46a2      	mov	sl, r4
 801c9e2:	e7d2      	b.n	801c98a <_vfiprintf_r+0xe2>
 801c9e4:	9b03      	ldr	r3, [sp, #12]
 801c9e6:	1d19      	adds	r1, r3, #4
 801c9e8:	681b      	ldr	r3, [r3, #0]
 801c9ea:	9103      	str	r1, [sp, #12]
 801c9ec:	2b00      	cmp	r3, #0
 801c9ee:	bfbb      	ittet	lt
 801c9f0:	425b      	neglt	r3, r3
 801c9f2:	f042 0202 	orrlt.w	r2, r2, #2
 801c9f6:	9307      	strge	r3, [sp, #28]
 801c9f8:	9307      	strlt	r3, [sp, #28]
 801c9fa:	bfb8      	it	lt
 801c9fc:	9204      	strlt	r2, [sp, #16]
 801c9fe:	7823      	ldrb	r3, [r4, #0]
 801ca00:	2b2e      	cmp	r3, #46	; 0x2e
 801ca02:	d10c      	bne.n	801ca1e <_vfiprintf_r+0x176>
 801ca04:	7863      	ldrb	r3, [r4, #1]
 801ca06:	2b2a      	cmp	r3, #42	; 0x2a
 801ca08:	d135      	bne.n	801ca76 <_vfiprintf_r+0x1ce>
 801ca0a:	9b03      	ldr	r3, [sp, #12]
 801ca0c:	1d1a      	adds	r2, r3, #4
 801ca0e:	681b      	ldr	r3, [r3, #0]
 801ca10:	9203      	str	r2, [sp, #12]
 801ca12:	2b00      	cmp	r3, #0
 801ca14:	bfb8      	it	lt
 801ca16:	f04f 33ff 	movlt.w	r3, #4294967295
 801ca1a:	3402      	adds	r4, #2
 801ca1c:	9305      	str	r3, [sp, #20]
 801ca1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801cb04 <_vfiprintf_r+0x25c>
 801ca22:	7821      	ldrb	r1, [r4, #0]
 801ca24:	2203      	movs	r2, #3
 801ca26:	4650      	mov	r0, sl
 801ca28:	f7e3 fc72 	bl	8000310 <memchr>
 801ca2c:	b140      	cbz	r0, 801ca40 <_vfiprintf_r+0x198>
 801ca2e:	2340      	movs	r3, #64	; 0x40
 801ca30:	eba0 000a 	sub.w	r0, r0, sl
 801ca34:	fa03 f000 	lsl.w	r0, r3, r0
 801ca38:	9b04      	ldr	r3, [sp, #16]
 801ca3a:	4303      	orrs	r3, r0
 801ca3c:	3401      	adds	r4, #1
 801ca3e:	9304      	str	r3, [sp, #16]
 801ca40:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ca44:	482c      	ldr	r0, [pc, #176]	; (801caf8 <_vfiprintf_r+0x250>)
 801ca46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ca4a:	2206      	movs	r2, #6
 801ca4c:	f7e3 fc60 	bl	8000310 <memchr>
 801ca50:	2800      	cmp	r0, #0
 801ca52:	d03f      	beq.n	801cad4 <_vfiprintf_r+0x22c>
 801ca54:	4b29      	ldr	r3, [pc, #164]	; (801cafc <_vfiprintf_r+0x254>)
 801ca56:	bb1b      	cbnz	r3, 801caa0 <_vfiprintf_r+0x1f8>
 801ca58:	9b03      	ldr	r3, [sp, #12]
 801ca5a:	3307      	adds	r3, #7
 801ca5c:	f023 0307 	bic.w	r3, r3, #7
 801ca60:	3308      	adds	r3, #8
 801ca62:	9303      	str	r3, [sp, #12]
 801ca64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ca66:	443b      	add	r3, r7
 801ca68:	9309      	str	r3, [sp, #36]	; 0x24
 801ca6a:	e767      	b.n	801c93c <_vfiprintf_r+0x94>
 801ca6c:	fb0c 3202 	mla	r2, ip, r2, r3
 801ca70:	460c      	mov	r4, r1
 801ca72:	2001      	movs	r0, #1
 801ca74:	e7a5      	b.n	801c9c2 <_vfiprintf_r+0x11a>
 801ca76:	2300      	movs	r3, #0
 801ca78:	3401      	adds	r4, #1
 801ca7a:	9305      	str	r3, [sp, #20]
 801ca7c:	4619      	mov	r1, r3
 801ca7e:	f04f 0c0a 	mov.w	ip, #10
 801ca82:	4620      	mov	r0, r4
 801ca84:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ca88:	3a30      	subs	r2, #48	; 0x30
 801ca8a:	2a09      	cmp	r2, #9
 801ca8c:	d903      	bls.n	801ca96 <_vfiprintf_r+0x1ee>
 801ca8e:	2b00      	cmp	r3, #0
 801ca90:	d0c5      	beq.n	801ca1e <_vfiprintf_r+0x176>
 801ca92:	9105      	str	r1, [sp, #20]
 801ca94:	e7c3      	b.n	801ca1e <_vfiprintf_r+0x176>
 801ca96:	fb0c 2101 	mla	r1, ip, r1, r2
 801ca9a:	4604      	mov	r4, r0
 801ca9c:	2301      	movs	r3, #1
 801ca9e:	e7f0      	b.n	801ca82 <_vfiprintf_r+0x1da>
 801caa0:	ab03      	add	r3, sp, #12
 801caa2:	9300      	str	r3, [sp, #0]
 801caa4:	462a      	mov	r2, r5
 801caa6:	4b16      	ldr	r3, [pc, #88]	; (801cb00 <_vfiprintf_r+0x258>)
 801caa8:	a904      	add	r1, sp, #16
 801caaa:	4630      	mov	r0, r6
 801caac:	f000 f8bc 	bl	801cc28 <_printf_float>
 801cab0:	4607      	mov	r7, r0
 801cab2:	1c78      	adds	r0, r7, #1
 801cab4:	d1d6      	bne.n	801ca64 <_vfiprintf_r+0x1bc>
 801cab6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801cab8:	07d9      	lsls	r1, r3, #31
 801caba:	d405      	bmi.n	801cac8 <_vfiprintf_r+0x220>
 801cabc:	89ab      	ldrh	r3, [r5, #12]
 801cabe:	059a      	lsls	r2, r3, #22
 801cac0:	d402      	bmi.n	801cac8 <_vfiprintf_r+0x220>
 801cac2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801cac4:	f003 fa0e 	bl	801fee4 <__retarget_lock_release_recursive>
 801cac8:	89ab      	ldrh	r3, [r5, #12]
 801caca:	065b      	lsls	r3, r3, #25
 801cacc:	f53f af12 	bmi.w	801c8f4 <_vfiprintf_r+0x4c>
 801cad0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801cad2:	e711      	b.n	801c8f8 <_vfiprintf_r+0x50>
 801cad4:	ab03      	add	r3, sp, #12
 801cad6:	9300      	str	r3, [sp, #0]
 801cad8:	462a      	mov	r2, r5
 801cada:	4b09      	ldr	r3, [pc, #36]	; (801cb00 <_vfiprintf_r+0x258>)
 801cadc:	a904      	add	r1, sp, #16
 801cade:	4630      	mov	r0, r6
 801cae0:	f000 fb2e 	bl	801d140 <_printf_i>
 801cae4:	e7e4      	b.n	801cab0 <_vfiprintf_r+0x208>
 801cae6:	bf00      	nop
 801cae8:	0802a7a0 	.word	0x0802a7a0
 801caec:	0802a7c0 	.word	0x0802a7c0
 801caf0:	0802a780 	.word	0x0802a780
 801caf4:	0802a548 	.word	0x0802a548
 801caf8:	0802a552 	.word	0x0802a552
 801cafc:	0801cc29 	.word	0x0801cc29
 801cb00:	0801c883 	.word	0x0801c883
 801cb04:	0802a54e 	.word	0x0802a54e

0801cb08 <__cvt>:
 801cb08:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cb0a:	ed2d 8b02 	vpush	{d8}
 801cb0e:	eeb0 8b40 	vmov.f64	d8, d0
 801cb12:	b085      	sub	sp, #20
 801cb14:	4617      	mov	r7, r2
 801cb16:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801cb18:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801cb1a:	ee18 2a90 	vmov	r2, s17
 801cb1e:	f025 0520 	bic.w	r5, r5, #32
 801cb22:	2a00      	cmp	r2, #0
 801cb24:	bfb6      	itet	lt
 801cb26:	222d      	movlt	r2, #45	; 0x2d
 801cb28:	2200      	movge	r2, #0
 801cb2a:	eeb1 8b40 	vneglt.f64	d8, d0
 801cb2e:	2d46      	cmp	r5, #70	; 0x46
 801cb30:	460c      	mov	r4, r1
 801cb32:	701a      	strb	r2, [r3, #0]
 801cb34:	d004      	beq.n	801cb40 <__cvt+0x38>
 801cb36:	2d45      	cmp	r5, #69	; 0x45
 801cb38:	d100      	bne.n	801cb3c <__cvt+0x34>
 801cb3a:	3401      	adds	r4, #1
 801cb3c:	2102      	movs	r1, #2
 801cb3e:	e000      	b.n	801cb42 <__cvt+0x3a>
 801cb40:	2103      	movs	r1, #3
 801cb42:	ab03      	add	r3, sp, #12
 801cb44:	9301      	str	r3, [sp, #4]
 801cb46:	ab02      	add	r3, sp, #8
 801cb48:	9300      	str	r3, [sp, #0]
 801cb4a:	4622      	mov	r2, r4
 801cb4c:	4633      	mov	r3, r6
 801cb4e:	eeb0 0b48 	vmov.f64	d0, d8
 801cb52:	f001 ff19 	bl	801e988 <_dtoa_r>
 801cb56:	2d47      	cmp	r5, #71	; 0x47
 801cb58:	d109      	bne.n	801cb6e <__cvt+0x66>
 801cb5a:	07fb      	lsls	r3, r7, #31
 801cb5c:	d407      	bmi.n	801cb6e <__cvt+0x66>
 801cb5e:	9b03      	ldr	r3, [sp, #12]
 801cb60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cb62:	1a1b      	subs	r3, r3, r0
 801cb64:	6013      	str	r3, [r2, #0]
 801cb66:	b005      	add	sp, #20
 801cb68:	ecbd 8b02 	vpop	{d8}
 801cb6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cb6e:	2d46      	cmp	r5, #70	; 0x46
 801cb70:	eb00 0204 	add.w	r2, r0, r4
 801cb74:	d10c      	bne.n	801cb90 <__cvt+0x88>
 801cb76:	7803      	ldrb	r3, [r0, #0]
 801cb78:	2b30      	cmp	r3, #48	; 0x30
 801cb7a:	d107      	bne.n	801cb8c <__cvt+0x84>
 801cb7c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801cb80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb84:	bf1c      	itt	ne
 801cb86:	f1c4 0401 	rsbne	r4, r4, #1
 801cb8a:	6034      	strne	r4, [r6, #0]
 801cb8c:	6833      	ldr	r3, [r6, #0]
 801cb8e:	441a      	add	r2, r3
 801cb90:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801cb94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb98:	bf08      	it	eq
 801cb9a:	9203      	streq	r2, [sp, #12]
 801cb9c:	2130      	movs	r1, #48	; 0x30
 801cb9e:	9b03      	ldr	r3, [sp, #12]
 801cba0:	4293      	cmp	r3, r2
 801cba2:	d2dc      	bcs.n	801cb5e <__cvt+0x56>
 801cba4:	1c5c      	adds	r4, r3, #1
 801cba6:	9403      	str	r4, [sp, #12]
 801cba8:	7019      	strb	r1, [r3, #0]
 801cbaa:	e7f8      	b.n	801cb9e <__cvt+0x96>

0801cbac <__exponent>:
 801cbac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801cbae:	4603      	mov	r3, r0
 801cbb0:	2900      	cmp	r1, #0
 801cbb2:	bfb8      	it	lt
 801cbb4:	4249      	neglt	r1, r1
 801cbb6:	f803 2b02 	strb.w	r2, [r3], #2
 801cbba:	bfb4      	ite	lt
 801cbbc:	222d      	movlt	r2, #45	; 0x2d
 801cbbe:	222b      	movge	r2, #43	; 0x2b
 801cbc0:	2909      	cmp	r1, #9
 801cbc2:	7042      	strb	r2, [r0, #1]
 801cbc4:	dd2a      	ble.n	801cc1c <__exponent+0x70>
 801cbc6:	f10d 0407 	add.w	r4, sp, #7
 801cbca:	46a4      	mov	ip, r4
 801cbcc:	270a      	movs	r7, #10
 801cbce:	46a6      	mov	lr, r4
 801cbd0:	460a      	mov	r2, r1
 801cbd2:	fb91 f6f7 	sdiv	r6, r1, r7
 801cbd6:	fb07 1516 	mls	r5, r7, r6, r1
 801cbda:	3530      	adds	r5, #48	; 0x30
 801cbdc:	2a63      	cmp	r2, #99	; 0x63
 801cbde:	f104 34ff 	add.w	r4, r4, #4294967295
 801cbe2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801cbe6:	4631      	mov	r1, r6
 801cbe8:	dcf1      	bgt.n	801cbce <__exponent+0x22>
 801cbea:	3130      	adds	r1, #48	; 0x30
 801cbec:	f1ae 0502 	sub.w	r5, lr, #2
 801cbf0:	f804 1c01 	strb.w	r1, [r4, #-1]
 801cbf4:	1c44      	adds	r4, r0, #1
 801cbf6:	4629      	mov	r1, r5
 801cbf8:	4561      	cmp	r1, ip
 801cbfa:	d30a      	bcc.n	801cc12 <__exponent+0x66>
 801cbfc:	f10d 0209 	add.w	r2, sp, #9
 801cc00:	eba2 020e 	sub.w	r2, r2, lr
 801cc04:	4565      	cmp	r5, ip
 801cc06:	bf88      	it	hi
 801cc08:	2200      	movhi	r2, #0
 801cc0a:	4413      	add	r3, r2
 801cc0c:	1a18      	subs	r0, r3, r0
 801cc0e:	b003      	add	sp, #12
 801cc10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cc12:	f811 2b01 	ldrb.w	r2, [r1], #1
 801cc16:	f804 2f01 	strb.w	r2, [r4, #1]!
 801cc1a:	e7ed      	b.n	801cbf8 <__exponent+0x4c>
 801cc1c:	2330      	movs	r3, #48	; 0x30
 801cc1e:	3130      	adds	r1, #48	; 0x30
 801cc20:	7083      	strb	r3, [r0, #2]
 801cc22:	70c1      	strb	r1, [r0, #3]
 801cc24:	1d03      	adds	r3, r0, #4
 801cc26:	e7f1      	b.n	801cc0c <__exponent+0x60>

0801cc28 <_printf_float>:
 801cc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc2c:	b08b      	sub	sp, #44	; 0x2c
 801cc2e:	460c      	mov	r4, r1
 801cc30:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801cc34:	4616      	mov	r6, r2
 801cc36:	461f      	mov	r7, r3
 801cc38:	4605      	mov	r5, r0
 801cc3a:	f003 f94d 	bl	801fed8 <_localeconv_r>
 801cc3e:	f8d0 b000 	ldr.w	fp, [r0]
 801cc42:	4658      	mov	r0, fp
 801cc44:	f7e3 fb56 	bl	80002f4 <strlen>
 801cc48:	2300      	movs	r3, #0
 801cc4a:	9308      	str	r3, [sp, #32]
 801cc4c:	f8d8 3000 	ldr.w	r3, [r8]
 801cc50:	f894 9018 	ldrb.w	r9, [r4, #24]
 801cc54:	6822      	ldr	r2, [r4, #0]
 801cc56:	3307      	adds	r3, #7
 801cc58:	f023 0307 	bic.w	r3, r3, #7
 801cc5c:	f103 0108 	add.w	r1, r3, #8
 801cc60:	f8c8 1000 	str.w	r1, [r8]
 801cc64:	4682      	mov	sl, r0
 801cc66:	e9d3 0100 	ldrd	r0, r1, [r3]
 801cc6a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801cc6e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 801ced0 <_printf_float+0x2a8>
 801cc72:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801cc76:	eeb0 6bc0 	vabs.f64	d6, d0
 801cc7a:	eeb4 6b47 	vcmp.f64	d6, d7
 801cc7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc82:	dd24      	ble.n	801ccce <_printf_float+0xa6>
 801cc84:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801cc88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc8c:	d502      	bpl.n	801cc94 <_printf_float+0x6c>
 801cc8e:	232d      	movs	r3, #45	; 0x2d
 801cc90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801cc94:	4b90      	ldr	r3, [pc, #576]	; (801ced8 <_printf_float+0x2b0>)
 801cc96:	4891      	ldr	r0, [pc, #580]	; (801cedc <_printf_float+0x2b4>)
 801cc98:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801cc9c:	bf94      	ite	ls
 801cc9e:	4698      	movls	r8, r3
 801cca0:	4680      	movhi	r8, r0
 801cca2:	2303      	movs	r3, #3
 801cca4:	6123      	str	r3, [r4, #16]
 801cca6:	f022 0204 	bic.w	r2, r2, #4
 801ccaa:	2300      	movs	r3, #0
 801ccac:	6022      	str	r2, [r4, #0]
 801ccae:	9304      	str	r3, [sp, #16]
 801ccb0:	9700      	str	r7, [sp, #0]
 801ccb2:	4633      	mov	r3, r6
 801ccb4:	aa09      	add	r2, sp, #36	; 0x24
 801ccb6:	4621      	mov	r1, r4
 801ccb8:	4628      	mov	r0, r5
 801ccba:	f000 f9d3 	bl	801d064 <_printf_common>
 801ccbe:	3001      	adds	r0, #1
 801ccc0:	f040 808a 	bne.w	801cdd8 <_printf_float+0x1b0>
 801ccc4:	f04f 30ff 	mov.w	r0, #4294967295
 801ccc8:	b00b      	add	sp, #44	; 0x2c
 801ccca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ccce:	eeb4 0b40 	vcmp.f64	d0, d0
 801ccd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ccd6:	d709      	bvc.n	801ccec <_printf_float+0xc4>
 801ccd8:	ee10 3a90 	vmov	r3, s1
 801ccdc:	2b00      	cmp	r3, #0
 801ccde:	bfbc      	itt	lt
 801cce0:	232d      	movlt	r3, #45	; 0x2d
 801cce2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801cce6:	487e      	ldr	r0, [pc, #504]	; (801cee0 <_printf_float+0x2b8>)
 801cce8:	4b7e      	ldr	r3, [pc, #504]	; (801cee4 <_printf_float+0x2bc>)
 801ccea:	e7d5      	b.n	801cc98 <_printf_float+0x70>
 801ccec:	6863      	ldr	r3, [r4, #4]
 801ccee:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801ccf2:	9104      	str	r1, [sp, #16]
 801ccf4:	1c59      	adds	r1, r3, #1
 801ccf6:	d13c      	bne.n	801cd72 <_printf_float+0x14a>
 801ccf8:	2306      	movs	r3, #6
 801ccfa:	6063      	str	r3, [r4, #4]
 801ccfc:	2300      	movs	r3, #0
 801ccfe:	9303      	str	r3, [sp, #12]
 801cd00:	ab08      	add	r3, sp, #32
 801cd02:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801cd06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801cd0a:	ab07      	add	r3, sp, #28
 801cd0c:	6861      	ldr	r1, [r4, #4]
 801cd0e:	9300      	str	r3, [sp, #0]
 801cd10:	6022      	str	r2, [r4, #0]
 801cd12:	f10d 031b 	add.w	r3, sp, #27
 801cd16:	4628      	mov	r0, r5
 801cd18:	f7ff fef6 	bl	801cb08 <__cvt>
 801cd1c:	9b04      	ldr	r3, [sp, #16]
 801cd1e:	9907      	ldr	r1, [sp, #28]
 801cd20:	2b47      	cmp	r3, #71	; 0x47
 801cd22:	4680      	mov	r8, r0
 801cd24:	d108      	bne.n	801cd38 <_printf_float+0x110>
 801cd26:	1cc8      	adds	r0, r1, #3
 801cd28:	db02      	blt.n	801cd30 <_printf_float+0x108>
 801cd2a:	6863      	ldr	r3, [r4, #4]
 801cd2c:	4299      	cmp	r1, r3
 801cd2e:	dd41      	ble.n	801cdb4 <_printf_float+0x18c>
 801cd30:	f1a9 0902 	sub.w	r9, r9, #2
 801cd34:	fa5f f989 	uxtb.w	r9, r9
 801cd38:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801cd3c:	d820      	bhi.n	801cd80 <_printf_float+0x158>
 801cd3e:	3901      	subs	r1, #1
 801cd40:	464a      	mov	r2, r9
 801cd42:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801cd46:	9107      	str	r1, [sp, #28]
 801cd48:	f7ff ff30 	bl	801cbac <__exponent>
 801cd4c:	9a08      	ldr	r2, [sp, #32]
 801cd4e:	9004      	str	r0, [sp, #16]
 801cd50:	1813      	adds	r3, r2, r0
 801cd52:	2a01      	cmp	r2, #1
 801cd54:	6123      	str	r3, [r4, #16]
 801cd56:	dc02      	bgt.n	801cd5e <_printf_float+0x136>
 801cd58:	6822      	ldr	r2, [r4, #0]
 801cd5a:	07d2      	lsls	r2, r2, #31
 801cd5c:	d501      	bpl.n	801cd62 <_printf_float+0x13a>
 801cd5e:	3301      	adds	r3, #1
 801cd60:	6123      	str	r3, [r4, #16]
 801cd62:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801cd66:	2b00      	cmp	r3, #0
 801cd68:	d0a2      	beq.n	801ccb0 <_printf_float+0x88>
 801cd6a:	232d      	movs	r3, #45	; 0x2d
 801cd6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801cd70:	e79e      	b.n	801ccb0 <_printf_float+0x88>
 801cd72:	9904      	ldr	r1, [sp, #16]
 801cd74:	2947      	cmp	r1, #71	; 0x47
 801cd76:	d1c1      	bne.n	801ccfc <_printf_float+0xd4>
 801cd78:	2b00      	cmp	r3, #0
 801cd7a:	d1bf      	bne.n	801ccfc <_printf_float+0xd4>
 801cd7c:	2301      	movs	r3, #1
 801cd7e:	e7bc      	b.n	801ccfa <_printf_float+0xd2>
 801cd80:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801cd84:	d118      	bne.n	801cdb8 <_printf_float+0x190>
 801cd86:	2900      	cmp	r1, #0
 801cd88:	6863      	ldr	r3, [r4, #4]
 801cd8a:	dd0b      	ble.n	801cda4 <_printf_float+0x17c>
 801cd8c:	6121      	str	r1, [r4, #16]
 801cd8e:	b913      	cbnz	r3, 801cd96 <_printf_float+0x16e>
 801cd90:	6822      	ldr	r2, [r4, #0]
 801cd92:	07d0      	lsls	r0, r2, #31
 801cd94:	d502      	bpl.n	801cd9c <_printf_float+0x174>
 801cd96:	3301      	adds	r3, #1
 801cd98:	440b      	add	r3, r1
 801cd9a:	6123      	str	r3, [r4, #16]
 801cd9c:	2300      	movs	r3, #0
 801cd9e:	65a1      	str	r1, [r4, #88]	; 0x58
 801cda0:	9304      	str	r3, [sp, #16]
 801cda2:	e7de      	b.n	801cd62 <_printf_float+0x13a>
 801cda4:	b913      	cbnz	r3, 801cdac <_printf_float+0x184>
 801cda6:	6822      	ldr	r2, [r4, #0]
 801cda8:	07d2      	lsls	r2, r2, #31
 801cdaa:	d501      	bpl.n	801cdb0 <_printf_float+0x188>
 801cdac:	3302      	adds	r3, #2
 801cdae:	e7f4      	b.n	801cd9a <_printf_float+0x172>
 801cdb0:	2301      	movs	r3, #1
 801cdb2:	e7f2      	b.n	801cd9a <_printf_float+0x172>
 801cdb4:	f04f 0967 	mov.w	r9, #103	; 0x67
 801cdb8:	9b08      	ldr	r3, [sp, #32]
 801cdba:	4299      	cmp	r1, r3
 801cdbc:	db05      	blt.n	801cdca <_printf_float+0x1a2>
 801cdbe:	6823      	ldr	r3, [r4, #0]
 801cdc0:	6121      	str	r1, [r4, #16]
 801cdc2:	07d8      	lsls	r0, r3, #31
 801cdc4:	d5ea      	bpl.n	801cd9c <_printf_float+0x174>
 801cdc6:	1c4b      	adds	r3, r1, #1
 801cdc8:	e7e7      	b.n	801cd9a <_printf_float+0x172>
 801cdca:	2900      	cmp	r1, #0
 801cdcc:	bfd4      	ite	le
 801cdce:	f1c1 0202 	rsble	r2, r1, #2
 801cdd2:	2201      	movgt	r2, #1
 801cdd4:	4413      	add	r3, r2
 801cdd6:	e7e0      	b.n	801cd9a <_printf_float+0x172>
 801cdd8:	6823      	ldr	r3, [r4, #0]
 801cdda:	055a      	lsls	r2, r3, #21
 801cddc:	d407      	bmi.n	801cdee <_printf_float+0x1c6>
 801cdde:	6923      	ldr	r3, [r4, #16]
 801cde0:	4642      	mov	r2, r8
 801cde2:	4631      	mov	r1, r6
 801cde4:	4628      	mov	r0, r5
 801cde6:	47b8      	blx	r7
 801cde8:	3001      	adds	r0, #1
 801cdea:	d12a      	bne.n	801ce42 <_printf_float+0x21a>
 801cdec:	e76a      	b.n	801ccc4 <_printf_float+0x9c>
 801cdee:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801cdf2:	f240 80e2 	bls.w	801cfba <_printf_float+0x392>
 801cdf6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801cdfa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801cdfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce02:	d133      	bne.n	801ce6c <_printf_float+0x244>
 801ce04:	4a38      	ldr	r2, [pc, #224]	; (801cee8 <_printf_float+0x2c0>)
 801ce06:	2301      	movs	r3, #1
 801ce08:	4631      	mov	r1, r6
 801ce0a:	4628      	mov	r0, r5
 801ce0c:	47b8      	blx	r7
 801ce0e:	3001      	adds	r0, #1
 801ce10:	f43f af58 	beq.w	801ccc4 <_printf_float+0x9c>
 801ce14:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801ce18:	429a      	cmp	r2, r3
 801ce1a:	db02      	blt.n	801ce22 <_printf_float+0x1fa>
 801ce1c:	6823      	ldr	r3, [r4, #0]
 801ce1e:	07d8      	lsls	r0, r3, #31
 801ce20:	d50f      	bpl.n	801ce42 <_printf_float+0x21a>
 801ce22:	4653      	mov	r3, sl
 801ce24:	465a      	mov	r2, fp
 801ce26:	4631      	mov	r1, r6
 801ce28:	4628      	mov	r0, r5
 801ce2a:	47b8      	blx	r7
 801ce2c:	3001      	adds	r0, #1
 801ce2e:	f43f af49 	beq.w	801ccc4 <_printf_float+0x9c>
 801ce32:	f04f 0800 	mov.w	r8, #0
 801ce36:	f104 091a 	add.w	r9, r4, #26
 801ce3a:	9b08      	ldr	r3, [sp, #32]
 801ce3c:	3b01      	subs	r3, #1
 801ce3e:	4543      	cmp	r3, r8
 801ce40:	dc09      	bgt.n	801ce56 <_printf_float+0x22e>
 801ce42:	6823      	ldr	r3, [r4, #0]
 801ce44:	079b      	lsls	r3, r3, #30
 801ce46:	f100 8108 	bmi.w	801d05a <_printf_float+0x432>
 801ce4a:	68e0      	ldr	r0, [r4, #12]
 801ce4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce4e:	4298      	cmp	r0, r3
 801ce50:	bfb8      	it	lt
 801ce52:	4618      	movlt	r0, r3
 801ce54:	e738      	b.n	801ccc8 <_printf_float+0xa0>
 801ce56:	2301      	movs	r3, #1
 801ce58:	464a      	mov	r2, r9
 801ce5a:	4631      	mov	r1, r6
 801ce5c:	4628      	mov	r0, r5
 801ce5e:	47b8      	blx	r7
 801ce60:	3001      	adds	r0, #1
 801ce62:	f43f af2f 	beq.w	801ccc4 <_printf_float+0x9c>
 801ce66:	f108 0801 	add.w	r8, r8, #1
 801ce6a:	e7e6      	b.n	801ce3a <_printf_float+0x212>
 801ce6c:	9b07      	ldr	r3, [sp, #28]
 801ce6e:	2b00      	cmp	r3, #0
 801ce70:	dc3c      	bgt.n	801ceec <_printf_float+0x2c4>
 801ce72:	4a1d      	ldr	r2, [pc, #116]	; (801cee8 <_printf_float+0x2c0>)
 801ce74:	2301      	movs	r3, #1
 801ce76:	4631      	mov	r1, r6
 801ce78:	4628      	mov	r0, r5
 801ce7a:	47b8      	blx	r7
 801ce7c:	3001      	adds	r0, #1
 801ce7e:	f43f af21 	beq.w	801ccc4 <_printf_float+0x9c>
 801ce82:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801ce86:	4313      	orrs	r3, r2
 801ce88:	d102      	bne.n	801ce90 <_printf_float+0x268>
 801ce8a:	6823      	ldr	r3, [r4, #0]
 801ce8c:	07d9      	lsls	r1, r3, #31
 801ce8e:	d5d8      	bpl.n	801ce42 <_printf_float+0x21a>
 801ce90:	4653      	mov	r3, sl
 801ce92:	465a      	mov	r2, fp
 801ce94:	4631      	mov	r1, r6
 801ce96:	4628      	mov	r0, r5
 801ce98:	47b8      	blx	r7
 801ce9a:	3001      	adds	r0, #1
 801ce9c:	f43f af12 	beq.w	801ccc4 <_printf_float+0x9c>
 801cea0:	f04f 0900 	mov.w	r9, #0
 801cea4:	f104 0a1a 	add.w	sl, r4, #26
 801cea8:	9b07      	ldr	r3, [sp, #28]
 801ceaa:	425b      	negs	r3, r3
 801ceac:	454b      	cmp	r3, r9
 801ceae:	dc01      	bgt.n	801ceb4 <_printf_float+0x28c>
 801ceb0:	9b08      	ldr	r3, [sp, #32]
 801ceb2:	e795      	b.n	801cde0 <_printf_float+0x1b8>
 801ceb4:	2301      	movs	r3, #1
 801ceb6:	4652      	mov	r2, sl
 801ceb8:	4631      	mov	r1, r6
 801ceba:	4628      	mov	r0, r5
 801cebc:	47b8      	blx	r7
 801cebe:	3001      	adds	r0, #1
 801cec0:	f43f af00 	beq.w	801ccc4 <_printf_float+0x9c>
 801cec4:	f109 0901 	add.w	r9, r9, #1
 801cec8:	e7ee      	b.n	801cea8 <_printf_float+0x280>
 801ceca:	bf00      	nop
 801cecc:	f3af 8000 	nop.w
 801ced0:	ffffffff 	.word	0xffffffff
 801ced4:	7fefffff 	.word	0x7fefffff
 801ced8:	0802a559 	.word	0x0802a559
 801cedc:	0802a55d 	.word	0x0802a55d
 801cee0:	0802a565 	.word	0x0802a565
 801cee4:	0802a561 	.word	0x0802a561
 801cee8:	0802a569 	.word	0x0802a569
 801ceec:	9a08      	ldr	r2, [sp, #32]
 801ceee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801cef0:	429a      	cmp	r2, r3
 801cef2:	bfa8      	it	ge
 801cef4:	461a      	movge	r2, r3
 801cef6:	2a00      	cmp	r2, #0
 801cef8:	4691      	mov	r9, r2
 801cefa:	dc38      	bgt.n	801cf6e <_printf_float+0x346>
 801cefc:	2300      	movs	r3, #0
 801cefe:	9305      	str	r3, [sp, #20]
 801cf00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801cf04:	f104 021a 	add.w	r2, r4, #26
 801cf08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801cf0a:	9905      	ldr	r1, [sp, #20]
 801cf0c:	9304      	str	r3, [sp, #16]
 801cf0e:	eba3 0309 	sub.w	r3, r3, r9
 801cf12:	428b      	cmp	r3, r1
 801cf14:	dc33      	bgt.n	801cf7e <_printf_float+0x356>
 801cf16:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801cf1a:	429a      	cmp	r2, r3
 801cf1c:	db3c      	blt.n	801cf98 <_printf_float+0x370>
 801cf1e:	6823      	ldr	r3, [r4, #0]
 801cf20:	07da      	lsls	r2, r3, #31
 801cf22:	d439      	bmi.n	801cf98 <_printf_float+0x370>
 801cf24:	9a08      	ldr	r2, [sp, #32]
 801cf26:	9b04      	ldr	r3, [sp, #16]
 801cf28:	9907      	ldr	r1, [sp, #28]
 801cf2a:	1ad3      	subs	r3, r2, r3
 801cf2c:	eba2 0901 	sub.w	r9, r2, r1
 801cf30:	4599      	cmp	r9, r3
 801cf32:	bfa8      	it	ge
 801cf34:	4699      	movge	r9, r3
 801cf36:	f1b9 0f00 	cmp.w	r9, #0
 801cf3a:	dc35      	bgt.n	801cfa8 <_printf_float+0x380>
 801cf3c:	f04f 0800 	mov.w	r8, #0
 801cf40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801cf44:	f104 0a1a 	add.w	sl, r4, #26
 801cf48:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801cf4c:	1a9b      	subs	r3, r3, r2
 801cf4e:	eba3 0309 	sub.w	r3, r3, r9
 801cf52:	4543      	cmp	r3, r8
 801cf54:	f77f af75 	ble.w	801ce42 <_printf_float+0x21a>
 801cf58:	2301      	movs	r3, #1
 801cf5a:	4652      	mov	r2, sl
 801cf5c:	4631      	mov	r1, r6
 801cf5e:	4628      	mov	r0, r5
 801cf60:	47b8      	blx	r7
 801cf62:	3001      	adds	r0, #1
 801cf64:	f43f aeae 	beq.w	801ccc4 <_printf_float+0x9c>
 801cf68:	f108 0801 	add.w	r8, r8, #1
 801cf6c:	e7ec      	b.n	801cf48 <_printf_float+0x320>
 801cf6e:	4613      	mov	r3, r2
 801cf70:	4631      	mov	r1, r6
 801cf72:	4642      	mov	r2, r8
 801cf74:	4628      	mov	r0, r5
 801cf76:	47b8      	blx	r7
 801cf78:	3001      	adds	r0, #1
 801cf7a:	d1bf      	bne.n	801cefc <_printf_float+0x2d4>
 801cf7c:	e6a2      	b.n	801ccc4 <_printf_float+0x9c>
 801cf7e:	2301      	movs	r3, #1
 801cf80:	4631      	mov	r1, r6
 801cf82:	4628      	mov	r0, r5
 801cf84:	9204      	str	r2, [sp, #16]
 801cf86:	47b8      	blx	r7
 801cf88:	3001      	adds	r0, #1
 801cf8a:	f43f ae9b 	beq.w	801ccc4 <_printf_float+0x9c>
 801cf8e:	9b05      	ldr	r3, [sp, #20]
 801cf90:	9a04      	ldr	r2, [sp, #16]
 801cf92:	3301      	adds	r3, #1
 801cf94:	9305      	str	r3, [sp, #20]
 801cf96:	e7b7      	b.n	801cf08 <_printf_float+0x2e0>
 801cf98:	4653      	mov	r3, sl
 801cf9a:	465a      	mov	r2, fp
 801cf9c:	4631      	mov	r1, r6
 801cf9e:	4628      	mov	r0, r5
 801cfa0:	47b8      	blx	r7
 801cfa2:	3001      	adds	r0, #1
 801cfa4:	d1be      	bne.n	801cf24 <_printf_float+0x2fc>
 801cfa6:	e68d      	b.n	801ccc4 <_printf_float+0x9c>
 801cfa8:	9a04      	ldr	r2, [sp, #16]
 801cfaa:	464b      	mov	r3, r9
 801cfac:	4442      	add	r2, r8
 801cfae:	4631      	mov	r1, r6
 801cfb0:	4628      	mov	r0, r5
 801cfb2:	47b8      	blx	r7
 801cfb4:	3001      	adds	r0, #1
 801cfb6:	d1c1      	bne.n	801cf3c <_printf_float+0x314>
 801cfb8:	e684      	b.n	801ccc4 <_printf_float+0x9c>
 801cfba:	9a08      	ldr	r2, [sp, #32]
 801cfbc:	2a01      	cmp	r2, #1
 801cfbe:	dc01      	bgt.n	801cfc4 <_printf_float+0x39c>
 801cfc0:	07db      	lsls	r3, r3, #31
 801cfc2:	d537      	bpl.n	801d034 <_printf_float+0x40c>
 801cfc4:	2301      	movs	r3, #1
 801cfc6:	4642      	mov	r2, r8
 801cfc8:	4631      	mov	r1, r6
 801cfca:	4628      	mov	r0, r5
 801cfcc:	47b8      	blx	r7
 801cfce:	3001      	adds	r0, #1
 801cfd0:	f43f ae78 	beq.w	801ccc4 <_printf_float+0x9c>
 801cfd4:	4653      	mov	r3, sl
 801cfd6:	465a      	mov	r2, fp
 801cfd8:	4631      	mov	r1, r6
 801cfda:	4628      	mov	r0, r5
 801cfdc:	47b8      	blx	r7
 801cfde:	3001      	adds	r0, #1
 801cfe0:	f43f ae70 	beq.w	801ccc4 <_printf_float+0x9c>
 801cfe4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801cfe8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801cfec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cff0:	d01b      	beq.n	801d02a <_printf_float+0x402>
 801cff2:	9b08      	ldr	r3, [sp, #32]
 801cff4:	f108 0201 	add.w	r2, r8, #1
 801cff8:	3b01      	subs	r3, #1
 801cffa:	4631      	mov	r1, r6
 801cffc:	4628      	mov	r0, r5
 801cffe:	47b8      	blx	r7
 801d000:	3001      	adds	r0, #1
 801d002:	d10e      	bne.n	801d022 <_printf_float+0x3fa>
 801d004:	e65e      	b.n	801ccc4 <_printf_float+0x9c>
 801d006:	2301      	movs	r3, #1
 801d008:	464a      	mov	r2, r9
 801d00a:	4631      	mov	r1, r6
 801d00c:	4628      	mov	r0, r5
 801d00e:	47b8      	blx	r7
 801d010:	3001      	adds	r0, #1
 801d012:	f43f ae57 	beq.w	801ccc4 <_printf_float+0x9c>
 801d016:	f108 0801 	add.w	r8, r8, #1
 801d01a:	9b08      	ldr	r3, [sp, #32]
 801d01c:	3b01      	subs	r3, #1
 801d01e:	4543      	cmp	r3, r8
 801d020:	dcf1      	bgt.n	801d006 <_printf_float+0x3de>
 801d022:	9b04      	ldr	r3, [sp, #16]
 801d024:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801d028:	e6db      	b.n	801cde2 <_printf_float+0x1ba>
 801d02a:	f04f 0800 	mov.w	r8, #0
 801d02e:	f104 091a 	add.w	r9, r4, #26
 801d032:	e7f2      	b.n	801d01a <_printf_float+0x3f2>
 801d034:	2301      	movs	r3, #1
 801d036:	4642      	mov	r2, r8
 801d038:	e7df      	b.n	801cffa <_printf_float+0x3d2>
 801d03a:	2301      	movs	r3, #1
 801d03c:	464a      	mov	r2, r9
 801d03e:	4631      	mov	r1, r6
 801d040:	4628      	mov	r0, r5
 801d042:	47b8      	blx	r7
 801d044:	3001      	adds	r0, #1
 801d046:	f43f ae3d 	beq.w	801ccc4 <_printf_float+0x9c>
 801d04a:	f108 0801 	add.w	r8, r8, #1
 801d04e:	68e3      	ldr	r3, [r4, #12]
 801d050:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d052:	1a5b      	subs	r3, r3, r1
 801d054:	4543      	cmp	r3, r8
 801d056:	dcf0      	bgt.n	801d03a <_printf_float+0x412>
 801d058:	e6f7      	b.n	801ce4a <_printf_float+0x222>
 801d05a:	f04f 0800 	mov.w	r8, #0
 801d05e:	f104 0919 	add.w	r9, r4, #25
 801d062:	e7f4      	b.n	801d04e <_printf_float+0x426>

0801d064 <_printf_common>:
 801d064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d068:	4616      	mov	r6, r2
 801d06a:	4699      	mov	r9, r3
 801d06c:	688a      	ldr	r2, [r1, #8]
 801d06e:	690b      	ldr	r3, [r1, #16]
 801d070:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801d074:	4293      	cmp	r3, r2
 801d076:	bfb8      	it	lt
 801d078:	4613      	movlt	r3, r2
 801d07a:	6033      	str	r3, [r6, #0]
 801d07c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801d080:	4607      	mov	r7, r0
 801d082:	460c      	mov	r4, r1
 801d084:	b10a      	cbz	r2, 801d08a <_printf_common+0x26>
 801d086:	3301      	adds	r3, #1
 801d088:	6033      	str	r3, [r6, #0]
 801d08a:	6823      	ldr	r3, [r4, #0]
 801d08c:	0699      	lsls	r1, r3, #26
 801d08e:	bf42      	ittt	mi
 801d090:	6833      	ldrmi	r3, [r6, #0]
 801d092:	3302      	addmi	r3, #2
 801d094:	6033      	strmi	r3, [r6, #0]
 801d096:	6825      	ldr	r5, [r4, #0]
 801d098:	f015 0506 	ands.w	r5, r5, #6
 801d09c:	d106      	bne.n	801d0ac <_printf_common+0x48>
 801d09e:	f104 0a19 	add.w	sl, r4, #25
 801d0a2:	68e3      	ldr	r3, [r4, #12]
 801d0a4:	6832      	ldr	r2, [r6, #0]
 801d0a6:	1a9b      	subs	r3, r3, r2
 801d0a8:	42ab      	cmp	r3, r5
 801d0aa:	dc26      	bgt.n	801d0fa <_printf_common+0x96>
 801d0ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801d0b0:	1e13      	subs	r3, r2, #0
 801d0b2:	6822      	ldr	r2, [r4, #0]
 801d0b4:	bf18      	it	ne
 801d0b6:	2301      	movne	r3, #1
 801d0b8:	0692      	lsls	r2, r2, #26
 801d0ba:	d42b      	bmi.n	801d114 <_printf_common+0xb0>
 801d0bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d0c0:	4649      	mov	r1, r9
 801d0c2:	4638      	mov	r0, r7
 801d0c4:	47c0      	blx	r8
 801d0c6:	3001      	adds	r0, #1
 801d0c8:	d01e      	beq.n	801d108 <_printf_common+0xa4>
 801d0ca:	6823      	ldr	r3, [r4, #0]
 801d0cc:	68e5      	ldr	r5, [r4, #12]
 801d0ce:	6832      	ldr	r2, [r6, #0]
 801d0d0:	f003 0306 	and.w	r3, r3, #6
 801d0d4:	2b04      	cmp	r3, #4
 801d0d6:	bf08      	it	eq
 801d0d8:	1aad      	subeq	r5, r5, r2
 801d0da:	68a3      	ldr	r3, [r4, #8]
 801d0dc:	6922      	ldr	r2, [r4, #16]
 801d0de:	bf0c      	ite	eq
 801d0e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d0e4:	2500      	movne	r5, #0
 801d0e6:	4293      	cmp	r3, r2
 801d0e8:	bfc4      	itt	gt
 801d0ea:	1a9b      	subgt	r3, r3, r2
 801d0ec:	18ed      	addgt	r5, r5, r3
 801d0ee:	2600      	movs	r6, #0
 801d0f0:	341a      	adds	r4, #26
 801d0f2:	42b5      	cmp	r5, r6
 801d0f4:	d11a      	bne.n	801d12c <_printf_common+0xc8>
 801d0f6:	2000      	movs	r0, #0
 801d0f8:	e008      	b.n	801d10c <_printf_common+0xa8>
 801d0fa:	2301      	movs	r3, #1
 801d0fc:	4652      	mov	r2, sl
 801d0fe:	4649      	mov	r1, r9
 801d100:	4638      	mov	r0, r7
 801d102:	47c0      	blx	r8
 801d104:	3001      	adds	r0, #1
 801d106:	d103      	bne.n	801d110 <_printf_common+0xac>
 801d108:	f04f 30ff 	mov.w	r0, #4294967295
 801d10c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d110:	3501      	adds	r5, #1
 801d112:	e7c6      	b.n	801d0a2 <_printf_common+0x3e>
 801d114:	18e1      	adds	r1, r4, r3
 801d116:	1c5a      	adds	r2, r3, #1
 801d118:	2030      	movs	r0, #48	; 0x30
 801d11a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801d11e:	4422      	add	r2, r4
 801d120:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801d124:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801d128:	3302      	adds	r3, #2
 801d12a:	e7c7      	b.n	801d0bc <_printf_common+0x58>
 801d12c:	2301      	movs	r3, #1
 801d12e:	4622      	mov	r2, r4
 801d130:	4649      	mov	r1, r9
 801d132:	4638      	mov	r0, r7
 801d134:	47c0      	blx	r8
 801d136:	3001      	adds	r0, #1
 801d138:	d0e6      	beq.n	801d108 <_printf_common+0xa4>
 801d13a:	3601      	adds	r6, #1
 801d13c:	e7d9      	b.n	801d0f2 <_printf_common+0x8e>
	...

0801d140 <_printf_i>:
 801d140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d144:	460c      	mov	r4, r1
 801d146:	4691      	mov	r9, r2
 801d148:	7e27      	ldrb	r7, [r4, #24]
 801d14a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801d14c:	2f78      	cmp	r7, #120	; 0x78
 801d14e:	4680      	mov	r8, r0
 801d150:	469a      	mov	sl, r3
 801d152:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d156:	d807      	bhi.n	801d168 <_printf_i+0x28>
 801d158:	2f62      	cmp	r7, #98	; 0x62
 801d15a:	d80a      	bhi.n	801d172 <_printf_i+0x32>
 801d15c:	2f00      	cmp	r7, #0
 801d15e:	f000 80d8 	beq.w	801d312 <_printf_i+0x1d2>
 801d162:	2f58      	cmp	r7, #88	; 0x58
 801d164:	f000 80a3 	beq.w	801d2ae <_printf_i+0x16e>
 801d168:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801d16c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801d170:	e03a      	b.n	801d1e8 <_printf_i+0xa8>
 801d172:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801d176:	2b15      	cmp	r3, #21
 801d178:	d8f6      	bhi.n	801d168 <_printf_i+0x28>
 801d17a:	a001      	add	r0, pc, #4	; (adr r0, 801d180 <_printf_i+0x40>)
 801d17c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801d180:	0801d1d9 	.word	0x0801d1d9
 801d184:	0801d1ed 	.word	0x0801d1ed
 801d188:	0801d169 	.word	0x0801d169
 801d18c:	0801d169 	.word	0x0801d169
 801d190:	0801d169 	.word	0x0801d169
 801d194:	0801d169 	.word	0x0801d169
 801d198:	0801d1ed 	.word	0x0801d1ed
 801d19c:	0801d169 	.word	0x0801d169
 801d1a0:	0801d169 	.word	0x0801d169
 801d1a4:	0801d169 	.word	0x0801d169
 801d1a8:	0801d169 	.word	0x0801d169
 801d1ac:	0801d2f9 	.word	0x0801d2f9
 801d1b0:	0801d21d 	.word	0x0801d21d
 801d1b4:	0801d2db 	.word	0x0801d2db
 801d1b8:	0801d169 	.word	0x0801d169
 801d1bc:	0801d169 	.word	0x0801d169
 801d1c0:	0801d31b 	.word	0x0801d31b
 801d1c4:	0801d169 	.word	0x0801d169
 801d1c8:	0801d21d 	.word	0x0801d21d
 801d1cc:	0801d169 	.word	0x0801d169
 801d1d0:	0801d169 	.word	0x0801d169
 801d1d4:	0801d2e3 	.word	0x0801d2e3
 801d1d8:	680b      	ldr	r3, [r1, #0]
 801d1da:	1d1a      	adds	r2, r3, #4
 801d1dc:	681b      	ldr	r3, [r3, #0]
 801d1de:	600a      	str	r2, [r1, #0]
 801d1e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801d1e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d1e8:	2301      	movs	r3, #1
 801d1ea:	e0a3      	b.n	801d334 <_printf_i+0x1f4>
 801d1ec:	6825      	ldr	r5, [r4, #0]
 801d1ee:	6808      	ldr	r0, [r1, #0]
 801d1f0:	062e      	lsls	r6, r5, #24
 801d1f2:	f100 0304 	add.w	r3, r0, #4
 801d1f6:	d50a      	bpl.n	801d20e <_printf_i+0xce>
 801d1f8:	6805      	ldr	r5, [r0, #0]
 801d1fa:	600b      	str	r3, [r1, #0]
 801d1fc:	2d00      	cmp	r5, #0
 801d1fe:	da03      	bge.n	801d208 <_printf_i+0xc8>
 801d200:	232d      	movs	r3, #45	; 0x2d
 801d202:	426d      	negs	r5, r5
 801d204:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d208:	485e      	ldr	r0, [pc, #376]	; (801d384 <_printf_i+0x244>)
 801d20a:	230a      	movs	r3, #10
 801d20c:	e019      	b.n	801d242 <_printf_i+0x102>
 801d20e:	f015 0f40 	tst.w	r5, #64	; 0x40
 801d212:	6805      	ldr	r5, [r0, #0]
 801d214:	600b      	str	r3, [r1, #0]
 801d216:	bf18      	it	ne
 801d218:	b22d      	sxthne	r5, r5
 801d21a:	e7ef      	b.n	801d1fc <_printf_i+0xbc>
 801d21c:	680b      	ldr	r3, [r1, #0]
 801d21e:	6825      	ldr	r5, [r4, #0]
 801d220:	1d18      	adds	r0, r3, #4
 801d222:	6008      	str	r0, [r1, #0]
 801d224:	0628      	lsls	r0, r5, #24
 801d226:	d501      	bpl.n	801d22c <_printf_i+0xec>
 801d228:	681d      	ldr	r5, [r3, #0]
 801d22a:	e002      	b.n	801d232 <_printf_i+0xf2>
 801d22c:	0669      	lsls	r1, r5, #25
 801d22e:	d5fb      	bpl.n	801d228 <_printf_i+0xe8>
 801d230:	881d      	ldrh	r5, [r3, #0]
 801d232:	4854      	ldr	r0, [pc, #336]	; (801d384 <_printf_i+0x244>)
 801d234:	2f6f      	cmp	r7, #111	; 0x6f
 801d236:	bf0c      	ite	eq
 801d238:	2308      	moveq	r3, #8
 801d23a:	230a      	movne	r3, #10
 801d23c:	2100      	movs	r1, #0
 801d23e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801d242:	6866      	ldr	r6, [r4, #4]
 801d244:	60a6      	str	r6, [r4, #8]
 801d246:	2e00      	cmp	r6, #0
 801d248:	bfa2      	ittt	ge
 801d24a:	6821      	ldrge	r1, [r4, #0]
 801d24c:	f021 0104 	bicge.w	r1, r1, #4
 801d250:	6021      	strge	r1, [r4, #0]
 801d252:	b90d      	cbnz	r5, 801d258 <_printf_i+0x118>
 801d254:	2e00      	cmp	r6, #0
 801d256:	d04d      	beq.n	801d2f4 <_printf_i+0x1b4>
 801d258:	4616      	mov	r6, r2
 801d25a:	fbb5 f1f3 	udiv	r1, r5, r3
 801d25e:	fb03 5711 	mls	r7, r3, r1, r5
 801d262:	5dc7      	ldrb	r7, [r0, r7]
 801d264:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d268:	462f      	mov	r7, r5
 801d26a:	42bb      	cmp	r3, r7
 801d26c:	460d      	mov	r5, r1
 801d26e:	d9f4      	bls.n	801d25a <_printf_i+0x11a>
 801d270:	2b08      	cmp	r3, #8
 801d272:	d10b      	bne.n	801d28c <_printf_i+0x14c>
 801d274:	6823      	ldr	r3, [r4, #0]
 801d276:	07df      	lsls	r7, r3, #31
 801d278:	d508      	bpl.n	801d28c <_printf_i+0x14c>
 801d27a:	6923      	ldr	r3, [r4, #16]
 801d27c:	6861      	ldr	r1, [r4, #4]
 801d27e:	4299      	cmp	r1, r3
 801d280:	bfde      	ittt	le
 801d282:	2330      	movle	r3, #48	; 0x30
 801d284:	f806 3c01 	strble.w	r3, [r6, #-1]
 801d288:	f106 36ff 	addle.w	r6, r6, #4294967295
 801d28c:	1b92      	subs	r2, r2, r6
 801d28e:	6122      	str	r2, [r4, #16]
 801d290:	f8cd a000 	str.w	sl, [sp]
 801d294:	464b      	mov	r3, r9
 801d296:	aa03      	add	r2, sp, #12
 801d298:	4621      	mov	r1, r4
 801d29a:	4640      	mov	r0, r8
 801d29c:	f7ff fee2 	bl	801d064 <_printf_common>
 801d2a0:	3001      	adds	r0, #1
 801d2a2:	d14c      	bne.n	801d33e <_printf_i+0x1fe>
 801d2a4:	f04f 30ff 	mov.w	r0, #4294967295
 801d2a8:	b004      	add	sp, #16
 801d2aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d2ae:	4835      	ldr	r0, [pc, #212]	; (801d384 <_printf_i+0x244>)
 801d2b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801d2b4:	6823      	ldr	r3, [r4, #0]
 801d2b6:	680e      	ldr	r6, [r1, #0]
 801d2b8:	061f      	lsls	r7, r3, #24
 801d2ba:	f856 5b04 	ldr.w	r5, [r6], #4
 801d2be:	600e      	str	r6, [r1, #0]
 801d2c0:	d514      	bpl.n	801d2ec <_printf_i+0x1ac>
 801d2c2:	07d9      	lsls	r1, r3, #31
 801d2c4:	bf44      	itt	mi
 801d2c6:	f043 0320 	orrmi.w	r3, r3, #32
 801d2ca:	6023      	strmi	r3, [r4, #0]
 801d2cc:	b91d      	cbnz	r5, 801d2d6 <_printf_i+0x196>
 801d2ce:	6823      	ldr	r3, [r4, #0]
 801d2d0:	f023 0320 	bic.w	r3, r3, #32
 801d2d4:	6023      	str	r3, [r4, #0]
 801d2d6:	2310      	movs	r3, #16
 801d2d8:	e7b0      	b.n	801d23c <_printf_i+0xfc>
 801d2da:	6823      	ldr	r3, [r4, #0]
 801d2dc:	f043 0320 	orr.w	r3, r3, #32
 801d2e0:	6023      	str	r3, [r4, #0]
 801d2e2:	2378      	movs	r3, #120	; 0x78
 801d2e4:	4828      	ldr	r0, [pc, #160]	; (801d388 <_printf_i+0x248>)
 801d2e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801d2ea:	e7e3      	b.n	801d2b4 <_printf_i+0x174>
 801d2ec:	065e      	lsls	r6, r3, #25
 801d2ee:	bf48      	it	mi
 801d2f0:	b2ad      	uxthmi	r5, r5
 801d2f2:	e7e6      	b.n	801d2c2 <_printf_i+0x182>
 801d2f4:	4616      	mov	r6, r2
 801d2f6:	e7bb      	b.n	801d270 <_printf_i+0x130>
 801d2f8:	680b      	ldr	r3, [r1, #0]
 801d2fa:	6826      	ldr	r6, [r4, #0]
 801d2fc:	6960      	ldr	r0, [r4, #20]
 801d2fe:	1d1d      	adds	r5, r3, #4
 801d300:	600d      	str	r5, [r1, #0]
 801d302:	0635      	lsls	r5, r6, #24
 801d304:	681b      	ldr	r3, [r3, #0]
 801d306:	d501      	bpl.n	801d30c <_printf_i+0x1cc>
 801d308:	6018      	str	r0, [r3, #0]
 801d30a:	e002      	b.n	801d312 <_printf_i+0x1d2>
 801d30c:	0671      	lsls	r1, r6, #25
 801d30e:	d5fb      	bpl.n	801d308 <_printf_i+0x1c8>
 801d310:	8018      	strh	r0, [r3, #0]
 801d312:	2300      	movs	r3, #0
 801d314:	6123      	str	r3, [r4, #16]
 801d316:	4616      	mov	r6, r2
 801d318:	e7ba      	b.n	801d290 <_printf_i+0x150>
 801d31a:	680b      	ldr	r3, [r1, #0]
 801d31c:	1d1a      	adds	r2, r3, #4
 801d31e:	600a      	str	r2, [r1, #0]
 801d320:	681e      	ldr	r6, [r3, #0]
 801d322:	6862      	ldr	r2, [r4, #4]
 801d324:	2100      	movs	r1, #0
 801d326:	4630      	mov	r0, r6
 801d328:	f7e2 fff2 	bl	8000310 <memchr>
 801d32c:	b108      	cbz	r0, 801d332 <_printf_i+0x1f2>
 801d32e:	1b80      	subs	r0, r0, r6
 801d330:	6060      	str	r0, [r4, #4]
 801d332:	6863      	ldr	r3, [r4, #4]
 801d334:	6123      	str	r3, [r4, #16]
 801d336:	2300      	movs	r3, #0
 801d338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d33c:	e7a8      	b.n	801d290 <_printf_i+0x150>
 801d33e:	6923      	ldr	r3, [r4, #16]
 801d340:	4632      	mov	r2, r6
 801d342:	4649      	mov	r1, r9
 801d344:	4640      	mov	r0, r8
 801d346:	47d0      	blx	sl
 801d348:	3001      	adds	r0, #1
 801d34a:	d0ab      	beq.n	801d2a4 <_printf_i+0x164>
 801d34c:	6823      	ldr	r3, [r4, #0]
 801d34e:	079b      	lsls	r3, r3, #30
 801d350:	d413      	bmi.n	801d37a <_printf_i+0x23a>
 801d352:	68e0      	ldr	r0, [r4, #12]
 801d354:	9b03      	ldr	r3, [sp, #12]
 801d356:	4298      	cmp	r0, r3
 801d358:	bfb8      	it	lt
 801d35a:	4618      	movlt	r0, r3
 801d35c:	e7a4      	b.n	801d2a8 <_printf_i+0x168>
 801d35e:	2301      	movs	r3, #1
 801d360:	4632      	mov	r2, r6
 801d362:	4649      	mov	r1, r9
 801d364:	4640      	mov	r0, r8
 801d366:	47d0      	blx	sl
 801d368:	3001      	adds	r0, #1
 801d36a:	d09b      	beq.n	801d2a4 <_printf_i+0x164>
 801d36c:	3501      	adds	r5, #1
 801d36e:	68e3      	ldr	r3, [r4, #12]
 801d370:	9903      	ldr	r1, [sp, #12]
 801d372:	1a5b      	subs	r3, r3, r1
 801d374:	42ab      	cmp	r3, r5
 801d376:	dcf2      	bgt.n	801d35e <_printf_i+0x21e>
 801d378:	e7eb      	b.n	801d352 <_printf_i+0x212>
 801d37a:	2500      	movs	r5, #0
 801d37c:	f104 0619 	add.w	r6, r4, #25
 801d380:	e7f5      	b.n	801d36e <_printf_i+0x22e>
 801d382:	bf00      	nop
 801d384:	0802a56b 	.word	0x0802a56b
 801d388:	0802a57c 	.word	0x0802a57c

0801d38c <_scanf_float>:
 801d38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d390:	b087      	sub	sp, #28
 801d392:	4617      	mov	r7, r2
 801d394:	9303      	str	r3, [sp, #12]
 801d396:	688b      	ldr	r3, [r1, #8]
 801d398:	1e5a      	subs	r2, r3, #1
 801d39a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801d39e:	bf83      	ittte	hi
 801d3a0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801d3a4:	195b      	addhi	r3, r3, r5
 801d3a6:	9302      	strhi	r3, [sp, #8]
 801d3a8:	2300      	movls	r3, #0
 801d3aa:	bf86      	itte	hi
 801d3ac:	f240 135d 	movwhi	r3, #349	; 0x15d
 801d3b0:	608b      	strhi	r3, [r1, #8]
 801d3b2:	9302      	strls	r3, [sp, #8]
 801d3b4:	680b      	ldr	r3, [r1, #0]
 801d3b6:	468b      	mov	fp, r1
 801d3b8:	2500      	movs	r5, #0
 801d3ba:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801d3be:	f84b 3b1c 	str.w	r3, [fp], #28
 801d3c2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801d3c6:	4680      	mov	r8, r0
 801d3c8:	460c      	mov	r4, r1
 801d3ca:	465e      	mov	r6, fp
 801d3cc:	46aa      	mov	sl, r5
 801d3ce:	46a9      	mov	r9, r5
 801d3d0:	9501      	str	r5, [sp, #4]
 801d3d2:	68a2      	ldr	r2, [r4, #8]
 801d3d4:	b152      	cbz	r2, 801d3ec <_scanf_float+0x60>
 801d3d6:	683b      	ldr	r3, [r7, #0]
 801d3d8:	781b      	ldrb	r3, [r3, #0]
 801d3da:	2b4e      	cmp	r3, #78	; 0x4e
 801d3dc:	d864      	bhi.n	801d4a8 <_scanf_float+0x11c>
 801d3de:	2b40      	cmp	r3, #64	; 0x40
 801d3e0:	d83c      	bhi.n	801d45c <_scanf_float+0xd0>
 801d3e2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801d3e6:	b2c8      	uxtb	r0, r1
 801d3e8:	280e      	cmp	r0, #14
 801d3ea:	d93a      	bls.n	801d462 <_scanf_float+0xd6>
 801d3ec:	f1b9 0f00 	cmp.w	r9, #0
 801d3f0:	d003      	beq.n	801d3fa <_scanf_float+0x6e>
 801d3f2:	6823      	ldr	r3, [r4, #0]
 801d3f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801d3f8:	6023      	str	r3, [r4, #0]
 801d3fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d3fe:	f1ba 0f01 	cmp.w	sl, #1
 801d402:	f200 8113 	bhi.w	801d62c <_scanf_float+0x2a0>
 801d406:	455e      	cmp	r6, fp
 801d408:	f200 8105 	bhi.w	801d616 <_scanf_float+0x28a>
 801d40c:	2501      	movs	r5, #1
 801d40e:	4628      	mov	r0, r5
 801d410:	b007      	add	sp, #28
 801d412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d416:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801d41a:	2a0d      	cmp	r2, #13
 801d41c:	d8e6      	bhi.n	801d3ec <_scanf_float+0x60>
 801d41e:	a101      	add	r1, pc, #4	; (adr r1, 801d424 <_scanf_float+0x98>)
 801d420:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801d424:	0801d563 	.word	0x0801d563
 801d428:	0801d3ed 	.word	0x0801d3ed
 801d42c:	0801d3ed 	.word	0x0801d3ed
 801d430:	0801d3ed 	.word	0x0801d3ed
 801d434:	0801d5c3 	.word	0x0801d5c3
 801d438:	0801d59b 	.word	0x0801d59b
 801d43c:	0801d3ed 	.word	0x0801d3ed
 801d440:	0801d3ed 	.word	0x0801d3ed
 801d444:	0801d571 	.word	0x0801d571
 801d448:	0801d3ed 	.word	0x0801d3ed
 801d44c:	0801d3ed 	.word	0x0801d3ed
 801d450:	0801d3ed 	.word	0x0801d3ed
 801d454:	0801d3ed 	.word	0x0801d3ed
 801d458:	0801d529 	.word	0x0801d529
 801d45c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801d460:	e7db      	b.n	801d41a <_scanf_float+0x8e>
 801d462:	290e      	cmp	r1, #14
 801d464:	d8c2      	bhi.n	801d3ec <_scanf_float+0x60>
 801d466:	a001      	add	r0, pc, #4	; (adr r0, 801d46c <_scanf_float+0xe0>)
 801d468:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801d46c:	0801d51b 	.word	0x0801d51b
 801d470:	0801d3ed 	.word	0x0801d3ed
 801d474:	0801d51b 	.word	0x0801d51b
 801d478:	0801d5af 	.word	0x0801d5af
 801d47c:	0801d3ed 	.word	0x0801d3ed
 801d480:	0801d4c9 	.word	0x0801d4c9
 801d484:	0801d505 	.word	0x0801d505
 801d488:	0801d505 	.word	0x0801d505
 801d48c:	0801d505 	.word	0x0801d505
 801d490:	0801d505 	.word	0x0801d505
 801d494:	0801d505 	.word	0x0801d505
 801d498:	0801d505 	.word	0x0801d505
 801d49c:	0801d505 	.word	0x0801d505
 801d4a0:	0801d505 	.word	0x0801d505
 801d4a4:	0801d505 	.word	0x0801d505
 801d4a8:	2b6e      	cmp	r3, #110	; 0x6e
 801d4aa:	d809      	bhi.n	801d4c0 <_scanf_float+0x134>
 801d4ac:	2b60      	cmp	r3, #96	; 0x60
 801d4ae:	d8b2      	bhi.n	801d416 <_scanf_float+0x8a>
 801d4b0:	2b54      	cmp	r3, #84	; 0x54
 801d4b2:	d077      	beq.n	801d5a4 <_scanf_float+0x218>
 801d4b4:	2b59      	cmp	r3, #89	; 0x59
 801d4b6:	d199      	bne.n	801d3ec <_scanf_float+0x60>
 801d4b8:	2d07      	cmp	r5, #7
 801d4ba:	d197      	bne.n	801d3ec <_scanf_float+0x60>
 801d4bc:	2508      	movs	r5, #8
 801d4be:	e029      	b.n	801d514 <_scanf_float+0x188>
 801d4c0:	2b74      	cmp	r3, #116	; 0x74
 801d4c2:	d06f      	beq.n	801d5a4 <_scanf_float+0x218>
 801d4c4:	2b79      	cmp	r3, #121	; 0x79
 801d4c6:	e7f6      	b.n	801d4b6 <_scanf_float+0x12a>
 801d4c8:	6821      	ldr	r1, [r4, #0]
 801d4ca:	05c8      	lsls	r0, r1, #23
 801d4cc:	d51a      	bpl.n	801d504 <_scanf_float+0x178>
 801d4ce:	9b02      	ldr	r3, [sp, #8]
 801d4d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801d4d4:	6021      	str	r1, [r4, #0]
 801d4d6:	f109 0901 	add.w	r9, r9, #1
 801d4da:	b11b      	cbz	r3, 801d4e4 <_scanf_float+0x158>
 801d4dc:	3b01      	subs	r3, #1
 801d4de:	3201      	adds	r2, #1
 801d4e0:	9302      	str	r3, [sp, #8]
 801d4e2:	60a2      	str	r2, [r4, #8]
 801d4e4:	68a3      	ldr	r3, [r4, #8]
 801d4e6:	3b01      	subs	r3, #1
 801d4e8:	60a3      	str	r3, [r4, #8]
 801d4ea:	6923      	ldr	r3, [r4, #16]
 801d4ec:	3301      	adds	r3, #1
 801d4ee:	6123      	str	r3, [r4, #16]
 801d4f0:	687b      	ldr	r3, [r7, #4]
 801d4f2:	3b01      	subs	r3, #1
 801d4f4:	2b00      	cmp	r3, #0
 801d4f6:	607b      	str	r3, [r7, #4]
 801d4f8:	f340 8084 	ble.w	801d604 <_scanf_float+0x278>
 801d4fc:	683b      	ldr	r3, [r7, #0]
 801d4fe:	3301      	adds	r3, #1
 801d500:	603b      	str	r3, [r7, #0]
 801d502:	e766      	b.n	801d3d2 <_scanf_float+0x46>
 801d504:	eb1a 0f05 	cmn.w	sl, r5
 801d508:	f47f af70 	bne.w	801d3ec <_scanf_float+0x60>
 801d50c:	6822      	ldr	r2, [r4, #0]
 801d50e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801d512:	6022      	str	r2, [r4, #0]
 801d514:	f806 3b01 	strb.w	r3, [r6], #1
 801d518:	e7e4      	b.n	801d4e4 <_scanf_float+0x158>
 801d51a:	6822      	ldr	r2, [r4, #0]
 801d51c:	0610      	lsls	r0, r2, #24
 801d51e:	f57f af65 	bpl.w	801d3ec <_scanf_float+0x60>
 801d522:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801d526:	e7f4      	b.n	801d512 <_scanf_float+0x186>
 801d528:	f1ba 0f00 	cmp.w	sl, #0
 801d52c:	d10e      	bne.n	801d54c <_scanf_float+0x1c0>
 801d52e:	f1b9 0f00 	cmp.w	r9, #0
 801d532:	d10e      	bne.n	801d552 <_scanf_float+0x1c6>
 801d534:	6822      	ldr	r2, [r4, #0]
 801d536:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801d53a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801d53e:	d108      	bne.n	801d552 <_scanf_float+0x1c6>
 801d540:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801d544:	6022      	str	r2, [r4, #0]
 801d546:	f04f 0a01 	mov.w	sl, #1
 801d54a:	e7e3      	b.n	801d514 <_scanf_float+0x188>
 801d54c:	f1ba 0f02 	cmp.w	sl, #2
 801d550:	d055      	beq.n	801d5fe <_scanf_float+0x272>
 801d552:	2d01      	cmp	r5, #1
 801d554:	d002      	beq.n	801d55c <_scanf_float+0x1d0>
 801d556:	2d04      	cmp	r5, #4
 801d558:	f47f af48 	bne.w	801d3ec <_scanf_float+0x60>
 801d55c:	3501      	adds	r5, #1
 801d55e:	b2ed      	uxtb	r5, r5
 801d560:	e7d8      	b.n	801d514 <_scanf_float+0x188>
 801d562:	f1ba 0f01 	cmp.w	sl, #1
 801d566:	f47f af41 	bne.w	801d3ec <_scanf_float+0x60>
 801d56a:	f04f 0a02 	mov.w	sl, #2
 801d56e:	e7d1      	b.n	801d514 <_scanf_float+0x188>
 801d570:	b97d      	cbnz	r5, 801d592 <_scanf_float+0x206>
 801d572:	f1b9 0f00 	cmp.w	r9, #0
 801d576:	f47f af3c 	bne.w	801d3f2 <_scanf_float+0x66>
 801d57a:	6822      	ldr	r2, [r4, #0]
 801d57c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801d580:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801d584:	f47f af39 	bne.w	801d3fa <_scanf_float+0x6e>
 801d588:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801d58c:	6022      	str	r2, [r4, #0]
 801d58e:	2501      	movs	r5, #1
 801d590:	e7c0      	b.n	801d514 <_scanf_float+0x188>
 801d592:	2d03      	cmp	r5, #3
 801d594:	d0e2      	beq.n	801d55c <_scanf_float+0x1d0>
 801d596:	2d05      	cmp	r5, #5
 801d598:	e7de      	b.n	801d558 <_scanf_float+0x1cc>
 801d59a:	2d02      	cmp	r5, #2
 801d59c:	f47f af26 	bne.w	801d3ec <_scanf_float+0x60>
 801d5a0:	2503      	movs	r5, #3
 801d5a2:	e7b7      	b.n	801d514 <_scanf_float+0x188>
 801d5a4:	2d06      	cmp	r5, #6
 801d5a6:	f47f af21 	bne.w	801d3ec <_scanf_float+0x60>
 801d5aa:	2507      	movs	r5, #7
 801d5ac:	e7b2      	b.n	801d514 <_scanf_float+0x188>
 801d5ae:	6822      	ldr	r2, [r4, #0]
 801d5b0:	0591      	lsls	r1, r2, #22
 801d5b2:	f57f af1b 	bpl.w	801d3ec <_scanf_float+0x60>
 801d5b6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801d5ba:	6022      	str	r2, [r4, #0]
 801d5bc:	f8cd 9004 	str.w	r9, [sp, #4]
 801d5c0:	e7a8      	b.n	801d514 <_scanf_float+0x188>
 801d5c2:	6822      	ldr	r2, [r4, #0]
 801d5c4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801d5c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801d5cc:	d006      	beq.n	801d5dc <_scanf_float+0x250>
 801d5ce:	0550      	lsls	r0, r2, #21
 801d5d0:	f57f af0c 	bpl.w	801d3ec <_scanf_float+0x60>
 801d5d4:	f1b9 0f00 	cmp.w	r9, #0
 801d5d8:	f43f af0f 	beq.w	801d3fa <_scanf_float+0x6e>
 801d5dc:	0591      	lsls	r1, r2, #22
 801d5de:	bf58      	it	pl
 801d5e0:	9901      	ldrpl	r1, [sp, #4]
 801d5e2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801d5e6:	bf58      	it	pl
 801d5e8:	eba9 0101 	subpl.w	r1, r9, r1
 801d5ec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801d5f0:	bf58      	it	pl
 801d5f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801d5f6:	6022      	str	r2, [r4, #0]
 801d5f8:	f04f 0900 	mov.w	r9, #0
 801d5fc:	e78a      	b.n	801d514 <_scanf_float+0x188>
 801d5fe:	f04f 0a03 	mov.w	sl, #3
 801d602:	e787      	b.n	801d514 <_scanf_float+0x188>
 801d604:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801d608:	4639      	mov	r1, r7
 801d60a:	4640      	mov	r0, r8
 801d60c:	4798      	blx	r3
 801d60e:	2800      	cmp	r0, #0
 801d610:	f43f aedf 	beq.w	801d3d2 <_scanf_float+0x46>
 801d614:	e6ea      	b.n	801d3ec <_scanf_float+0x60>
 801d616:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801d61a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801d61e:	463a      	mov	r2, r7
 801d620:	4640      	mov	r0, r8
 801d622:	4798      	blx	r3
 801d624:	6923      	ldr	r3, [r4, #16]
 801d626:	3b01      	subs	r3, #1
 801d628:	6123      	str	r3, [r4, #16]
 801d62a:	e6ec      	b.n	801d406 <_scanf_float+0x7a>
 801d62c:	1e6b      	subs	r3, r5, #1
 801d62e:	2b06      	cmp	r3, #6
 801d630:	d825      	bhi.n	801d67e <_scanf_float+0x2f2>
 801d632:	2d02      	cmp	r5, #2
 801d634:	d836      	bhi.n	801d6a4 <_scanf_float+0x318>
 801d636:	455e      	cmp	r6, fp
 801d638:	f67f aee8 	bls.w	801d40c <_scanf_float+0x80>
 801d63c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801d640:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801d644:	463a      	mov	r2, r7
 801d646:	4640      	mov	r0, r8
 801d648:	4798      	blx	r3
 801d64a:	6923      	ldr	r3, [r4, #16]
 801d64c:	3b01      	subs	r3, #1
 801d64e:	6123      	str	r3, [r4, #16]
 801d650:	e7f1      	b.n	801d636 <_scanf_float+0x2aa>
 801d652:	9802      	ldr	r0, [sp, #8]
 801d654:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801d658:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801d65c:	9002      	str	r0, [sp, #8]
 801d65e:	463a      	mov	r2, r7
 801d660:	4640      	mov	r0, r8
 801d662:	4798      	blx	r3
 801d664:	6923      	ldr	r3, [r4, #16]
 801d666:	3b01      	subs	r3, #1
 801d668:	6123      	str	r3, [r4, #16]
 801d66a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d66e:	fa5f fa8a 	uxtb.w	sl, sl
 801d672:	f1ba 0f02 	cmp.w	sl, #2
 801d676:	d1ec      	bne.n	801d652 <_scanf_float+0x2c6>
 801d678:	3d03      	subs	r5, #3
 801d67a:	b2ed      	uxtb	r5, r5
 801d67c:	1b76      	subs	r6, r6, r5
 801d67e:	6823      	ldr	r3, [r4, #0]
 801d680:	05da      	lsls	r2, r3, #23
 801d682:	d52f      	bpl.n	801d6e4 <_scanf_float+0x358>
 801d684:	055b      	lsls	r3, r3, #21
 801d686:	d510      	bpl.n	801d6aa <_scanf_float+0x31e>
 801d688:	455e      	cmp	r6, fp
 801d68a:	f67f aebf 	bls.w	801d40c <_scanf_float+0x80>
 801d68e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801d692:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801d696:	463a      	mov	r2, r7
 801d698:	4640      	mov	r0, r8
 801d69a:	4798      	blx	r3
 801d69c:	6923      	ldr	r3, [r4, #16]
 801d69e:	3b01      	subs	r3, #1
 801d6a0:	6123      	str	r3, [r4, #16]
 801d6a2:	e7f1      	b.n	801d688 <_scanf_float+0x2fc>
 801d6a4:	46aa      	mov	sl, r5
 801d6a6:	9602      	str	r6, [sp, #8]
 801d6a8:	e7df      	b.n	801d66a <_scanf_float+0x2de>
 801d6aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801d6ae:	6923      	ldr	r3, [r4, #16]
 801d6b0:	2965      	cmp	r1, #101	; 0x65
 801d6b2:	f103 33ff 	add.w	r3, r3, #4294967295
 801d6b6:	f106 35ff 	add.w	r5, r6, #4294967295
 801d6ba:	6123      	str	r3, [r4, #16]
 801d6bc:	d00c      	beq.n	801d6d8 <_scanf_float+0x34c>
 801d6be:	2945      	cmp	r1, #69	; 0x45
 801d6c0:	d00a      	beq.n	801d6d8 <_scanf_float+0x34c>
 801d6c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801d6c6:	463a      	mov	r2, r7
 801d6c8:	4640      	mov	r0, r8
 801d6ca:	4798      	blx	r3
 801d6cc:	6923      	ldr	r3, [r4, #16]
 801d6ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801d6d2:	3b01      	subs	r3, #1
 801d6d4:	1eb5      	subs	r5, r6, #2
 801d6d6:	6123      	str	r3, [r4, #16]
 801d6d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801d6dc:	463a      	mov	r2, r7
 801d6de:	4640      	mov	r0, r8
 801d6e0:	4798      	blx	r3
 801d6e2:	462e      	mov	r6, r5
 801d6e4:	6825      	ldr	r5, [r4, #0]
 801d6e6:	f015 0510 	ands.w	r5, r5, #16
 801d6ea:	d14d      	bne.n	801d788 <_scanf_float+0x3fc>
 801d6ec:	7035      	strb	r5, [r6, #0]
 801d6ee:	6823      	ldr	r3, [r4, #0]
 801d6f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801d6f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801d6f8:	d11a      	bne.n	801d730 <_scanf_float+0x3a4>
 801d6fa:	9b01      	ldr	r3, [sp, #4]
 801d6fc:	454b      	cmp	r3, r9
 801d6fe:	eba3 0209 	sub.w	r2, r3, r9
 801d702:	d122      	bne.n	801d74a <_scanf_float+0x3be>
 801d704:	2200      	movs	r2, #0
 801d706:	4659      	mov	r1, fp
 801d708:	4640      	mov	r0, r8
 801d70a:	f000 ff53 	bl	801e5b4 <_strtod_r>
 801d70e:	9b03      	ldr	r3, [sp, #12]
 801d710:	6821      	ldr	r1, [r4, #0]
 801d712:	681b      	ldr	r3, [r3, #0]
 801d714:	f011 0f02 	tst.w	r1, #2
 801d718:	f103 0204 	add.w	r2, r3, #4
 801d71c:	d020      	beq.n	801d760 <_scanf_float+0x3d4>
 801d71e:	9903      	ldr	r1, [sp, #12]
 801d720:	600a      	str	r2, [r1, #0]
 801d722:	681b      	ldr	r3, [r3, #0]
 801d724:	ed83 0b00 	vstr	d0, [r3]
 801d728:	68e3      	ldr	r3, [r4, #12]
 801d72a:	3301      	adds	r3, #1
 801d72c:	60e3      	str	r3, [r4, #12]
 801d72e:	e66e      	b.n	801d40e <_scanf_float+0x82>
 801d730:	9b04      	ldr	r3, [sp, #16]
 801d732:	2b00      	cmp	r3, #0
 801d734:	d0e6      	beq.n	801d704 <_scanf_float+0x378>
 801d736:	9905      	ldr	r1, [sp, #20]
 801d738:	230a      	movs	r3, #10
 801d73a:	462a      	mov	r2, r5
 801d73c:	3101      	adds	r1, #1
 801d73e:	4640      	mov	r0, r8
 801d740:	f000 ffc2 	bl	801e6c8 <_strtol_r>
 801d744:	9b04      	ldr	r3, [sp, #16]
 801d746:	9e05      	ldr	r6, [sp, #20]
 801d748:	1ac2      	subs	r2, r0, r3
 801d74a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801d74e:	429e      	cmp	r6, r3
 801d750:	bf28      	it	cs
 801d752:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801d756:	490d      	ldr	r1, [pc, #52]	; (801d78c <_scanf_float+0x400>)
 801d758:	4630      	mov	r0, r6
 801d75a:	f000 f8f3 	bl	801d944 <siprintf>
 801d75e:	e7d1      	b.n	801d704 <_scanf_float+0x378>
 801d760:	f011 0f04 	tst.w	r1, #4
 801d764:	9903      	ldr	r1, [sp, #12]
 801d766:	600a      	str	r2, [r1, #0]
 801d768:	d1db      	bne.n	801d722 <_scanf_float+0x396>
 801d76a:	eeb4 0b40 	vcmp.f64	d0, d0
 801d76e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d772:	681e      	ldr	r6, [r3, #0]
 801d774:	d705      	bvc.n	801d782 <_scanf_float+0x3f6>
 801d776:	4806      	ldr	r0, [pc, #24]	; (801d790 <_scanf_float+0x404>)
 801d778:	f000 f8aa 	bl	801d8d0 <nanf>
 801d77c:	ed86 0a00 	vstr	s0, [r6]
 801d780:	e7d2      	b.n	801d728 <_scanf_float+0x39c>
 801d782:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801d786:	e7f9      	b.n	801d77c <_scanf_float+0x3f0>
 801d788:	2500      	movs	r5, #0
 801d78a:	e640      	b.n	801d40e <_scanf_float+0x82>
 801d78c:	0802a58d 	.word	0x0802a58d
 801d790:	0802a542 	.word	0x0802a542

0801d794 <iprintf>:
 801d794:	b40f      	push	{r0, r1, r2, r3}
 801d796:	4b0a      	ldr	r3, [pc, #40]	; (801d7c0 <iprintf+0x2c>)
 801d798:	b513      	push	{r0, r1, r4, lr}
 801d79a:	681c      	ldr	r4, [r3, #0]
 801d79c:	b124      	cbz	r4, 801d7a8 <iprintf+0x14>
 801d79e:	69a3      	ldr	r3, [r4, #24]
 801d7a0:	b913      	cbnz	r3, 801d7a8 <iprintf+0x14>
 801d7a2:	4620      	mov	r0, r4
 801d7a4:	f001 ff8c 	bl	801f6c0 <__sinit>
 801d7a8:	ab05      	add	r3, sp, #20
 801d7aa:	9a04      	ldr	r2, [sp, #16]
 801d7ac:	68a1      	ldr	r1, [r4, #8]
 801d7ae:	9301      	str	r3, [sp, #4]
 801d7b0:	4620      	mov	r0, r4
 801d7b2:	f7ff f879 	bl	801c8a8 <_vfiprintf_r>
 801d7b6:	b002      	add	sp, #8
 801d7b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d7bc:	b004      	add	sp, #16
 801d7be:	4770      	bx	lr
 801d7c0:	2400a128 	.word	0x2400a128

0801d7c4 <_puts_r>:
 801d7c4:	b570      	push	{r4, r5, r6, lr}
 801d7c6:	460e      	mov	r6, r1
 801d7c8:	4605      	mov	r5, r0
 801d7ca:	b118      	cbz	r0, 801d7d4 <_puts_r+0x10>
 801d7cc:	6983      	ldr	r3, [r0, #24]
 801d7ce:	b90b      	cbnz	r3, 801d7d4 <_puts_r+0x10>
 801d7d0:	f001 ff76 	bl	801f6c0 <__sinit>
 801d7d4:	69ab      	ldr	r3, [r5, #24]
 801d7d6:	68ac      	ldr	r4, [r5, #8]
 801d7d8:	b913      	cbnz	r3, 801d7e0 <_puts_r+0x1c>
 801d7da:	4628      	mov	r0, r5
 801d7dc:	f001 ff70 	bl	801f6c0 <__sinit>
 801d7e0:	4b2c      	ldr	r3, [pc, #176]	; (801d894 <_puts_r+0xd0>)
 801d7e2:	429c      	cmp	r4, r3
 801d7e4:	d120      	bne.n	801d828 <_puts_r+0x64>
 801d7e6:	686c      	ldr	r4, [r5, #4]
 801d7e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d7ea:	07db      	lsls	r3, r3, #31
 801d7ec:	d405      	bmi.n	801d7fa <_puts_r+0x36>
 801d7ee:	89a3      	ldrh	r3, [r4, #12]
 801d7f0:	0598      	lsls	r0, r3, #22
 801d7f2:	d402      	bmi.n	801d7fa <_puts_r+0x36>
 801d7f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d7f6:	f002 fb74 	bl	801fee2 <__retarget_lock_acquire_recursive>
 801d7fa:	89a3      	ldrh	r3, [r4, #12]
 801d7fc:	0719      	lsls	r1, r3, #28
 801d7fe:	d51d      	bpl.n	801d83c <_puts_r+0x78>
 801d800:	6923      	ldr	r3, [r4, #16]
 801d802:	b1db      	cbz	r3, 801d83c <_puts_r+0x78>
 801d804:	3e01      	subs	r6, #1
 801d806:	68a3      	ldr	r3, [r4, #8]
 801d808:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801d80c:	3b01      	subs	r3, #1
 801d80e:	60a3      	str	r3, [r4, #8]
 801d810:	bb39      	cbnz	r1, 801d862 <_puts_r+0x9e>
 801d812:	2b00      	cmp	r3, #0
 801d814:	da38      	bge.n	801d888 <_puts_r+0xc4>
 801d816:	4622      	mov	r2, r4
 801d818:	210a      	movs	r1, #10
 801d81a:	4628      	mov	r0, r5
 801d81c:	f000 ff60 	bl	801e6e0 <__swbuf_r>
 801d820:	3001      	adds	r0, #1
 801d822:	d011      	beq.n	801d848 <_puts_r+0x84>
 801d824:	250a      	movs	r5, #10
 801d826:	e011      	b.n	801d84c <_puts_r+0x88>
 801d828:	4b1b      	ldr	r3, [pc, #108]	; (801d898 <_puts_r+0xd4>)
 801d82a:	429c      	cmp	r4, r3
 801d82c:	d101      	bne.n	801d832 <_puts_r+0x6e>
 801d82e:	68ac      	ldr	r4, [r5, #8]
 801d830:	e7da      	b.n	801d7e8 <_puts_r+0x24>
 801d832:	4b1a      	ldr	r3, [pc, #104]	; (801d89c <_puts_r+0xd8>)
 801d834:	429c      	cmp	r4, r3
 801d836:	bf08      	it	eq
 801d838:	68ec      	ldreq	r4, [r5, #12]
 801d83a:	e7d5      	b.n	801d7e8 <_puts_r+0x24>
 801d83c:	4621      	mov	r1, r4
 801d83e:	4628      	mov	r0, r5
 801d840:	f000 ffa0 	bl	801e784 <__swsetup_r>
 801d844:	2800      	cmp	r0, #0
 801d846:	d0dd      	beq.n	801d804 <_puts_r+0x40>
 801d848:	f04f 35ff 	mov.w	r5, #4294967295
 801d84c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d84e:	07da      	lsls	r2, r3, #31
 801d850:	d405      	bmi.n	801d85e <_puts_r+0x9a>
 801d852:	89a3      	ldrh	r3, [r4, #12]
 801d854:	059b      	lsls	r3, r3, #22
 801d856:	d402      	bmi.n	801d85e <_puts_r+0x9a>
 801d858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d85a:	f002 fb43 	bl	801fee4 <__retarget_lock_release_recursive>
 801d85e:	4628      	mov	r0, r5
 801d860:	bd70      	pop	{r4, r5, r6, pc}
 801d862:	2b00      	cmp	r3, #0
 801d864:	da04      	bge.n	801d870 <_puts_r+0xac>
 801d866:	69a2      	ldr	r2, [r4, #24]
 801d868:	429a      	cmp	r2, r3
 801d86a:	dc06      	bgt.n	801d87a <_puts_r+0xb6>
 801d86c:	290a      	cmp	r1, #10
 801d86e:	d004      	beq.n	801d87a <_puts_r+0xb6>
 801d870:	6823      	ldr	r3, [r4, #0]
 801d872:	1c5a      	adds	r2, r3, #1
 801d874:	6022      	str	r2, [r4, #0]
 801d876:	7019      	strb	r1, [r3, #0]
 801d878:	e7c5      	b.n	801d806 <_puts_r+0x42>
 801d87a:	4622      	mov	r2, r4
 801d87c:	4628      	mov	r0, r5
 801d87e:	f000 ff2f 	bl	801e6e0 <__swbuf_r>
 801d882:	3001      	adds	r0, #1
 801d884:	d1bf      	bne.n	801d806 <_puts_r+0x42>
 801d886:	e7df      	b.n	801d848 <_puts_r+0x84>
 801d888:	6823      	ldr	r3, [r4, #0]
 801d88a:	250a      	movs	r5, #10
 801d88c:	1c5a      	adds	r2, r3, #1
 801d88e:	6022      	str	r2, [r4, #0]
 801d890:	701d      	strb	r5, [r3, #0]
 801d892:	e7db      	b.n	801d84c <_puts_r+0x88>
 801d894:	0802a7a0 	.word	0x0802a7a0
 801d898:	0802a7c0 	.word	0x0802a7c0
 801d89c:	0802a780 	.word	0x0802a780

0801d8a0 <puts>:
 801d8a0:	4b02      	ldr	r3, [pc, #8]	; (801d8ac <puts+0xc>)
 801d8a2:	4601      	mov	r1, r0
 801d8a4:	6818      	ldr	r0, [r3, #0]
 801d8a6:	f7ff bf8d 	b.w	801d7c4 <_puts_r>
 801d8aa:	bf00      	nop
 801d8ac:	2400a128 	.word	0x2400a128

0801d8b0 <_sbrk_r>:
 801d8b0:	b538      	push	{r3, r4, r5, lr}
 801d8b2:	4d06      	ldr	r5, [pc, #24]	; (801d8cc <_sbrk_r+0x1c>)
 801d8b4:	2300      	movs	r3, #0
 801d8b6:	4604      	mov	r4, r0
 801d8b8:	4608      	mov	r0, r1
 801d8ba:	602b      	str	r3, [r5, #0]
 801d8bc:	f7e4 faa6 	bl	8001e0c <_sbrk>
 801d8c0:	1c43      	adds	r3, r0, #1
 801d8c2:	d102      	bne.n	801d8ca <_sbrk_r+0x1a>
 801d8c4:	682b      	ldr	r3, [r5, #0]
 801d8c6:	b103      	cbz	r3, 801d8ca <_sbrk_r+0x1a>
 801d8c8:	6023      	str	r3, [r4, #0]
 801d8ca:	bd38      	pop	{r3, r4, r5, pc}
 801d8cc:	2401485c 	.word	0x2401485c

0801d8d0 <nanf>:
 801d8d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801d8d8 <nanf+0x8>
 801d8d4:	4770      	bx	lr
 801d8d6:	bf00      	nop
 801d8d8:	7fc00000 	.word	0x7fc00000

0801d8dc <sniprintf>:
 801d8dc:	b40c      	push	{r2, r3}
 801d8de:	b530      	push	{r4, r5, lr}
 801d8e0:	4b17      	ldr	r3, [pc, #92]	; (801d940 <sniprintf+0x64>)
 801d8e2:	1e0c      	subs	r4, r1, #0
 801d8e4:	681d      	ldr	r5, [r3, #0]
 801d8e6:	b09d      	sub	sp, #116	; 0x74
 801d8e8:	da08      	bge.n	801d8fc <sniprintf+0x20>
 801d8ea:	238b      	movs	r3, #139	; 0x8b
 801d8ec:	602b      	str	r3, [r5, #0]
 801d8ee:	f04f 30ff 	mov.w	r0, #4294967295
 801d8f2:	b01d      	add	sp, #116	; 0x74
 801d8f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d8f8:	b002      	add	sp, #8
 801d8fa:	4770      	bx	lr
 801d8fc:	f44f 7302 	mov.w	r3, #520	; 0x208
 801d900:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d904:	bf14      	ite	ne
 801d906:	f104 33ff 	addne.w	r3, r4, #4294967295
 801d90a:	4623      	moveq	r3, r4
 801d90c:	9304      	str	r3, [sp, #16]
 801d90e:	9307      	str	r3, [sp, #28]
 801d910:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d914:	9002      	str	r0, [sp, #8]
 801d916:	9006      	str	r0, [sp, #24]
 801d918:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d91c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801d91e:	ab21      	add	r3, sp, #132	; 0x84
 801d920:	a902      	add	r1, sp, #8
 801d922:	4628      	mov	r0, r5
 801d924:	9301      	str	r3, [sp, #4]
 801d926:	f003 f8ad 	bl	8020a84 <_svfiprintf_r>
 801d92a:	1c43      	adds	r3, r0, #1
 801d92c:	bfbc      	itt	lt
 801d92e:	238b      	movlt	r3, #139	; 0x8b
 801d930:	602b      	strlt	r3, [r5, #0]
 801d932:	2c00      	cmp	r4, #0
 801d934:	d0dd      	beq.n	801d8f2 <sniprintf+0x16>
 801d936:	9b02      	ldr	r3, [sp, #8]
 801d938:	2200      	movs	r2, #0
 801d93a:	701a      	strb	r2, [r3, #0]
 801d93c:	e7d9      	b.n	801d8f2 <sniprintf+0x16>
 801d93e:	bf00      	nop
 801d940:	2400a128 	.word	0x2400a128

0801d944 <siprintf>:
 801d944:	b40e      	push	{r1, r2, r3}
 801d946:	b500      	push	{lr}
 801d948:	b09c      	sub	sp, #112	; 0x70
 801d94a:	ab1d      	add	r3, sp, #116	; 0x74
 801d94c:	9002      	str	r0, [sp, #8]
 801d94e:	9006      	str	r0, [sp, #24]
 801d950:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801d954:	4809      	ldr	r0, [pc, #36]	; (801d97c <siprintf+0x38>)
 801d956:	9107      	str	r1, [sp, #28]
 801d958:	9104      	str	r1, [sp, #16]
 801d95a:	4909      	ldr	r1, [pc, #36]	; (801d980 <siprintf+0x3c>)
 801d95c:	f853 2b04 	ldr.w	r2, [r3], #4
 801d960:	9105      	str	r1, [sp, #20]
 801d962:	6800      	ldr	r0, [r0, #0]
 801d964:	9301      	str	r3, [sp, #4]
 801d966:	a902      	add	r1, sp, #8
 801d968:	f003 f88c 	bl	8020a84 <_svfiprintf_r>
 801d96c:	9b02      	ldr	r3, [sp, #8]
 801d96e:	2200      	movs	r2, #0
 801d970:	701a      	strb	r2, [r3, #0]
 801d972:	b01c      	add	sp, #112	; 0x70
 801d974:	f85d eb04 	ldr.w	lr, [sp], #4
 801d978:	b003      	add	sp, #12
 801d97a:	4770      	bx	lr
 801d97c:	2400a128 	.word	0x2400a128
 801d980:	ffff0208 	.word	0xffff0208

0801d984 <strncmp>:
 801d984:	b510      	push	{r4, lr}
 801d986:	b16a      	cbz	r2, 801d9a4 <strncmp+0x20>
 801d988:	3901      	subs	r1, #1
 801d98a:	1884      	adds	r4, r0, r2
 801d98c:	f810 3b01 	ldrb.w	r3, [r0], #1
 801d990:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801d994:	4293      	cmp	r3, r2
 801d996:	d103      	bne.n	801d9a0 <strncmp+0x1c>
 801d998:	42a0      	cmp	r0, r4
 801d99a:	d001      	beq.n	801d9a0 <strncmp+0x1c>
 801d99c:	2b00      	cmp	r3, #0
 801d99e:	d1f5      	bne.n	801d98c <strncmp+0x8>
 801d9a0:	1a98      	subs	r0, r3, r2
 801d9a2:	bd10      	pop	{r4, pc}
 801d9a4:	4610      	mov	r0, r2
 801d9a6:	e7fc      	b.n	801d9a2 <strncmp+0x1e>

0801d9a8 <strncpy>:
 801d9a8:	b510      	push	{r4, lr}
 801d9aa:	3901      	subs	r1, #1
 801d9ac:	4603      	mov	r3, r0
 801d9ae:	b132      	cbz	r2, 801d9be <strncpy+0x16>
 801d9b0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d9b4:	f803 4b01 	strb.w	r4, [r3], #1
 801d9b8:	3a01      	subs	r2, #1
 801d9ba:	2c00      	cmp	r4, #0
 801d9bc:	d1f7      	bne.n	801d9ae <strncpy+0x6>
 801d9be:	441a      	add	r2, r3
 801d9c0:	2100      	movs	r1, #0
 801d9c2:	4293      	cmp	r3, r2
 801d9c4:	d100      	bne.n	801d9c8 <strncpy+0x20>
 801d9c6:	bd10      	pop	{r4, pc}
 801d9c8:	f803 1b01 	strb.w	r1, [r3], #1
 801d9cc:	e7f9      	b.n	801d9c2 <strncpy+0x1a>

0801d9ce <sulp>:
 801d9ce:	b570      	push	{r4, r5, r6, lr}
 801d9d0:	4604      	mov	r4, r0
 801d9d2:	460d      	mov	r5, r1
 801d9d4:	4616      	mov	r6, r2
 801d9d6:	ec45 4b10 	vmov	d0, r4, r5
 801d9da:	f002 fe73 	bl	80206c4 <__ulp>
 801d9de:	b17e      	cbz	r6, 801da00 <sulp+0x32>
 801d9e0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801d9e4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801d9e8:	2b00      	cmp	r3, #0
 801d9ea:	dd09      	ble.n	801da00 <sulp+0x32>
 801d9ec:	051b      	lsls	r3, r3, #20
 801d9ee:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801d9f2:	2000      	movs	r0, #0
 801d9f4:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 801d9f8:	ec41 0b17 	vmov	d7, r0, r1
 801d9fc:	ee20 0b07 	vmul.f64	d0, d0, d7
 801da00:	bd70      	pop	{r4, r5, r6, pc}
 801da02:	0000      	movs	r0, r0
 801da04:	0000      	movs	r0, r0
	...

0801da08 <_strtod_l>:
 801da08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da0c:	ed2d 8b0c 	vpush	{d8-d13}
 801da10:	b09d      	sub	sp, #116	; 0x74
 801da12:	461f      	mov	r7, r3
 801da14:	2300      	movs	r3, #0
 801da16:	9318      	str	r3, [sp, #96]	; 0x60
 801da18:	4ba6      	ldr	r3, [pc, #664]	; (801dcb4 <_strtod_l+0x2ac>)
 801da1a:	9213      	str	r2, [sp, #76]	; 0x4c
 801da1c:	681b      	ldr	r3, [r3, #0]
 801da1e:	9308      	str	r3, [sp, #32]
 801da20:	4604      	mov	r4, r0
 801da22:	4618      	mov	r0, r3
 801da24:	468a      	mov	sl, r1
 801da26:	f7e2 fc65 	bl	80002f4 <strlen>
 801da2a:	f04f 0800 	mov.w	r8, #0
 801da2e:	4605      	mov	r5, r0
 801da30:	f04f 0900 	mov.w	r9, #0
 801da34:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 801da38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801da3a:	781a      	ldrb	r2, [r3, #0]
 801da3c:	2a2b      	cmp	r2, #43	; 0x2b
 801da3e:	d04d      	beq.n	801dadc <_strtod_l+0xd4>
 801da40:	d83a      	bhi.n	801dab8 <_strtod_l+0xb0>
 801da42:	2a0d      	cmp	r2, #13
 801da44:	d833      	bhi.n	801daae <_strtod_l+0xa6>
 801da46:	2a08      	cmp	r2, #8
 801da48:	d833      	bhi.n	801dab2 <_strtod_l+0xaa>
 801da4a:	2a00      	cmp	r2, #0
 801da4c:	d03d      	beq.n	801daca <_strtod_l+0xc2>
 801da4e:	2300      	movs	r3, #0
 801da50:	930b      	str	r3, [sp, #44]	; 0x2c
 801da52:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801da54:	7833      	ldrb	r3, [r6, #0]
 801da56:	2b30      	cmp	r3, #48	; 0x30
 801da58:	f040 80b6 	bne.w	801dbc8 <_strtod_l+0x1c0>
 801da5c:	7873      	ldrb	r3, [r6, #1]
 801da5e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801da62:	2b58      	cmp	r3, #88	; 0x58
 801da64:	d16d      	bne.n	801db42 <_strtod_l+0x13a>
 801da66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801da68:	9301      	str	r3, [sp, #4]
 801da6a:	ab18      	add	r3, sp, #96	; 0x60
 801da6c:	9702      	str	r7, [sp, #8]
 801da6e:	9300      	str	r3, [sp, #0]
 801da70:	4a91      	ldr	r2, [pc, #580]	; (801dcb8 <_strtod_l+0x2b0>)
 801da72:	ab19      	add	r3, sp, #100	; 0x64
 801da74:	a917      	add	r1, sp, #92	; 0x5c
 801da76:	4620      	mov	r0, r4
 801da78:	f001 ff26 	bl	801f8c8 <__gethex>
 801da7c:	f010 0507 	ands.w	r5, r0, #7
 801da80:	4607      	mov	r7, r0
 801da82:	d005      	beq.n	801da90 <_strtod_l+0x88>
 801da84:	2d06      	cmp	r5, #6
 801da86:	d12b      	bne.n	801dae0 <_strtod_l+0xd8>
 801da88:	3601      	adds	r6, #1
 801da8a:	2300      	movs	r3, #0
 801da8c:	9617      	str	r6, [sp, #92]	; 0x5c
 801da8e:	930b      	str	r3, [sp, #44]	; 0x2c
 801da90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801da92:	2b00      	cmp	r3, #0
 801da94:	f040 856e 	bne.w	801e574 <_strtod_l+0xb6c>
 801da98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801da9a:	b1e3      	cbz	r3, 801dad6 <_strtod_l+0xce>
 801da9c:	ec49 8b17 	vmov	d7, r8, r9
 801daa0:	eeb1 0b47 	vneg.f64	d0, d7
 801daa4:	b01d      	add	sp, #116	; 0x74
 801daa6:	ecbd 8b0c 	vpop	{d8-d13}
 801daaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801daae:	2a20      	cmp	r2, #32
 801dab0:	d1cd      	bne.n	801da4e <_strtod_l+0x46>
 801dab2:	3301      	adds	r3, #1
 801dab4:	9317      	str	r3, [sp, #92]	; 0x5c
 801dab6:	e7bf      	b.n	801da38 <_strtod_l+0x30>
 801dab8:	2a2d      	cmp	r2, #45	; 0x2d
 801daba:	d1c8      	bne.n	801da4e <_strtod_l+0x46>
 801dabc:	2201      	movs	r2, #1
 801dabe:	920b      	str	r2, [sp, #44]	; 0x2c
 801dac0:	1c5a      	adds	r2, r3, #1
 801dac2:	9217      	str	r2, [sp, #92]	; 0x5c
 801dac4:	785b      	ldrb	r3, [r3, #1]
 801dac6:	2b00      	cmp	r3, #0
 801dac8:	d1c3      	bne.n	801da52 <_strtod_l+0x4a>
 801daca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801dacc:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 801dad0:	2b00      	cmp	r3, #0
 801dad2:	f040 854d 	bne.w	801e570 <_strtod_l+0xb68>
 801dad6:	ec49 8b10 	vmov	d0, r8, r9
 801dada:	e7e3      	b.n	801daa4 <_strtod_l+0x9c>
 801dadc:	2200      	movs	r2, #0
 801dade:	e7ee      	b.n	801dabe <_strtod_l+0xb6>
 801dae0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801dae2:	b13a      	cbz	r2, 801daf4 <_strtod_l+0xec>
 801dae4:	2135      	movs	r1, #53	; 0x35
 801dae6:	a81a      	add	r0, sp, #104	; 0x68
 801dae8:	f002 fef8 	bl	80208dc <__copybits>
 801daec:	9918      	ldr	r1, [sp, #96]	; 0x60
 801daee:	4620      	mov	r0, r4
 801daf0:	f002 fabc 	bl	802006c <_Bfree>
 801daf4:	3d01      	subs	r5, #1
 801daf6:	2d05      	cmp	r5, #5
 801daf8:	d807      	bhi.n	801db0a <_strtod_l+0x102>
 801dafa:	e8df f005 	tbb	[pc, r5]
 801dafe:	0b0e      	.short	0x0b0e
 801db00:	030e1d18 	.word	0x030e1d18
 801db04:	f04f 0900 	mov.w	r9, #0
 801db08:	46c8      	mov	r8, r9
 801db0a:	073b      	lsls	r3, r7, #28
 801db0c:	d5c0      	bpl.n	801da90 <_strtod_l+0x88>
 801db0e:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 801db12:	e7bd      	b.n	801da90 <_strtod_l+0x88>
 801db14:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 801db18:	e7f7      	b.n	801db0a <_strtod_l+0x102>
 801db1a:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 801db1e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801db20:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801db24:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801db28:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801db2c:	e7ed      	b.n	801db0a <_strtod_l+0x102>
 801db2e:	f8df 918c 	ldr.w	r9, [pc, #396]	; 801dcbc <_strtod_l+0x2b4>
 801db32:	f04f 0800 	mov.w	r8, #0
 801db36:	e7e8      	b.n	801db0a <_strtod_l+0x102>
 801db38:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801db3c:	f04f 38ff 	mov.w	r8, #4294967295
 801db40:	e7e3      	b.n	801db0a <_strtod_l+0x102>
 801db42:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801db44:	1c5a      	adds	r2, r3, #1
 801db46:	9217      	str	r2, [sp, #92]	; 0x5c
 801db48:	785b      	ldrb	r3, [r3, #1]
 801db4a:	2b30      	cmp	r3, #48	; 0x30
 801db4c:	d0f9      	beq.n	801db42 <_strtod_l+0x13a>
 801db4e:	2b00      	cmp	r3, #0
 801db50:	d09e      	beq.n	801da90 <_strtod_l+0x88>
 801db52:	2301      	movs	r3, #1
 801db54:	9306      	str	r3, [sp, #24]
 801db56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801db58:	930c      	str	r3, [sp, #48]	; 0x30
 801db5a:	2300      	movs	r3, #0
 801db5c:	9304      	str	r3, [sp, #16]
 801db5e:	930a      	str	r3, [sp, #40]	; 0x28
 801db60:	461e      	mov	r6, r3
 801db62:	220a      	movs	r2, #10
 801db64:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801db66:	f890 b000 	ldrb.w	fp, [r0]
 801db6a:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 801db6e:	b2d9      	uxtb	r1, r3
 801db70:	2909      	cmp	r1, #9
 801db72:	d92b      	bls.n	801dbcc <_strtod_l+0x1c4>
 801db74:	9908      	ldr	r1, [sp, #32]
 801db76:	462a      	mov	r2, r5
 801db78:	f7ff ff04 	bl	801d984 <strncmp>
 801db7c:	2800      	cmp	r0, #0
 801db7e:	d035      	beq.n	801dbec <_strtod_l+0x1e4>
 801db80:	2000      	movs	r0, #0
 801db82:	465a      	mov	r2, fp
 801db84:	4633      	mov	r3, r6
 801db86:	4683      	mov	fp, r0
 801db88:	4601      	mov	r1, r0
 801db8a:	2a65      	cmp	r2, #101	; 0x65
 801db8c:	d001      	beq.n	801db92 <_strtod_l+0x18a>
 801db8e:	2a45      	cmp	r2, #69	; 0x45
 801db90:	d118      	bne.n	801dbc4 <_strtod_l+0x1bc>
 801db92:	b91b      	cbnz	r3, 801db9c <_strtod_l+0x194>
 801db94:	9b06      	ldr	r3, [sp, #24]
 801db96:	4303      	orrs	r3, r0
 801db98:	d097      	beq.n	801daca <_strtod_l+0xc2>
 801db9a:	2300      	movs	r3, #0
 801db9c:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 801dba0:	f10a 0201 	add.w	r2, sl, #1
 801dba4:	9217      	str	r2, [sp, #92]	; 0x5c
 801dba6:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801dbaa:	2a2b      	cmp	r2, #43	; 0x2b
 801dbac:	d077      	beq.n	801dc9e <_strtod_l+0x296>
 801dbae:	2a2d      	cmp	r2, #45	; 0x2d
 801dbb0:	d07d      	beq.n	801dcae <_strtod_l+0x2a6>
 801dbb2:	f04f 0e00 	mov.w	lr, #0
 801dbb6:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 801dbba:	2d09      	cmp	r5, #9
 801dbbc:	f240 8084 	bls.w	801dcc8 <_strtod_l+0x2c0>
 801dbc0:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 801dbc4:	2500      	movs	r5, #0
 801dbc6:	e09f      	b.n	801dd08 <_strtod_l+0x300>
 801dbc8:	2300      	movs	r3, #0
 801dbca:	e7c3      	b.n	801db54 <_strtod_l+0x14c>
 801dbcc:	2e08      	cmp	r6, #8
 801dbce:	bfd5      	itete	le
 801dbd0:	990a      	ldrle	r1, [sp, #40]	; 0x28
 801dbd2:	9904      	ldrgt	r1, [sp, #16]
 801dbd4:	fb02 3301 	mlale	r3, r2, r1, r3
 801dbd8:	fb02 3301 	mlagt	r3, r2, r1, r3
 801dbdc:	f100 0001 	add.w	r0, r0, #1
 801dbe0:	bfd4      	ite	le
 801dbe2:	930a      	strle	r3, [sp, #40]	; 0x28
 801dbe4:	9304      	strgt	r3, [sp, #16]
 801dbe6:	3601      	adds	r6, #1
 801dbe8:	9017      	str	r0, [sp, #92]	; 0x5c
 801dbea:	e7bb      	b.n	801db64 <_strtod_l+0x15c>
 801dbec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801dbee:	195a      	adds	r2, r3, r5
 801dbf0:	9217      	str	r2, [sp, #92]	; 0x5c
 801dbf2:	5d5a      	ldrb	r2, [r3, r5]
 801dbf4:	b3ae      	cbz	r6, 801dc62 <_strtod_l+0x25a>
 801dbf6:	4683      	mov	fp, r0
 801dbf8:	4633      	mov	r3, r6
 801dbfa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801dbfe:	2909      	cmp	r1, #9
 801dc00:	d912      	bls.n	801dc28 <_strtod_l+0x220>
 801dc02:	2101      	movs	r1, #1
 801dc04:	e7c1      	b.n	801db8a <_strtod_l+0x182>
 801dc06:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801dc08:	1c5a      	adds	r2, r3, #1
 801dc0a:	9217      	str	r2, [sp, #92]	; 0x5c
 801dc0c:	785a      	ldrb	r2, [r3, #1]
 801dc0e:	3001      	adds	r0, #1
 801dc10:	2a30      	cmp	r2, #48	; 0x30
 801dc12:	d0f8      	beq.n	801dc06 <_strtod_l+0x1fe>
 801dc14:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801dc18:	2b08      	cmp	r3, #8
 801dc1a:	f200 84b0 	bhi.w	801e57e <_strtod_l+0xb76>
 801dc1e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801dc20:	930c      	str	r3, [sp, #48]	; 0x30
 801dc22:	4683      	mov	fp, r0
 801dc24:	2000      	movs	r0, #0
 801dc26:	4603      	mov	r3, r0
 801dc28:	3a30      	subs	r2, #48	; 0x30
 801dc2a:	f100 0101 	add.w	r1, r0, #1
 801dc2e:	d012      	beq.n	801dc56 <_strtod_l+0x24e>
 801dc30:	448b      	add	fp, r1
 801dc32:	eb00 0c03 	add.w	ip, r0, r3
 801dc36:	4619      	mov	r1, r3
 801dc38:	250a      	movs	r5, #10
 801dc3a:	4561      	cmp	r1, ip
 801dc3c:	d113      	bne.n	801dc66 <_strtod_l+0x25e>
 801dc3e:	1819      	adds	r1, r3, r0
 801dc40:	2908      	cmp	r1, #8
 801dc42:	f103 0301 	add.w	r3, r3, #1
 801dc46:	4403      	add	r3, r0
 801dc48:	dc1d      	bgt.n	801dc86 <_strtod_l+0x27e>
 801dc4a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801dc4c:	210a      	movs	r1, #10
 801dc4e:	fb01 2200 	mla	r2, r1, r0, r2
 801dc52:	920a      	str	r2, [sp, #40]	; 0x28
 801dc54:	2100      	movs	r1, #0
 801dc56:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801dc58:	1c50      	adds	r0, r2, #1
 801dc5a:	9017      	str	r0, [sp, #92]	; 0x5c
 801dc5c:	7852      	ldrb	r2, [r2, #1]
 801dc5e:	4608      	mov	r0, r1
 801dc60:	e7cb      	b.n	801dbfa <_strtod_l+0x1f2>
 801dc62:	4630      	mov	r0, r6
 801dc64:	e7d4      	b.n	801dc10 <_strtod_l+0x208>
 801dc66:	2908      	cmp	r1, #8
 801dc68:	dc04      	bgt.n	801dc74 <_strtod_l+0x26c>
 801dc6a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801dc6c:	436f      	muls	r7, r5
 801dc6e:	970a      	str	r7, [sp, #40]	; 0x28
 801dc70:	3101      	adds	r1, #1
 801dc72:	e7e2      	b.n	801dc3a <_strtod_l+0x232>
 801dc74:	f101 0e01 	add.w	lr, r1, #1
 801dc78:	f1be 0f10 	cmp.w	lr, #16
 801dc7c:	bfde      	ittt	le
 801dc7e:	9f04      	ldrle	r7, [sp, #16]
 801dc80:	436f      	mulle	r7, r5
 801dc82:	9704      	strle	r7, [sp, #16]
 801dc84:	e7f4      	b.n	801dc70 <_strtod_l+0x268>
 801dc86:	2b10      	cmp	r3, #16
 801dc88:	bfdf      	itttt	le
 801dc8a:	9804      	ldrle	r0, [sp, #16]
 801dc8c:	210a      	movle	r1, #10
 801dc8e:	fb01 2200 	mlale	r2, r1, r0, r2
 801dc92:	9204      	strle	r2, [sp, #16]
 801dc94:	e7de      	b.n	801dc54 <_strtod_l+0x24c>
 801dc96:	f04f 0b00 	mov.w	fp, #0
 801dc9a:	2101      	movs	r1, #1
 801dc9c:	e77a      	b.n	801db94 <_strtod_l+0x18c>
 801dc9e:	f04f 0e00 	mov.w	lr, #0
 801dca2:	f10a 0202 	add.w	r2, sl, #2
 801dca6:	9217      	str	r2, [sp, #92]	; 0x5c
 801dca8:	f89a 2002 	ldrb.w	r2, [sl, #2]
 801dcac:	e783      	b.n	801dbb6 <_strtod_l+0x1ae>
 801dcae:	f04f 0e01 	mov.w	lr, #1
 801dcb2:	e7f6      	b.n	801dca2 <_strtod_l+0x29a>
 801dcb4:	0802a84c 	.word	0x0802a84c
 801dcb8:	0802a594 	.word	0x0802a594
 801dcbc:	7ff00000 	.word	0x7ff00000
 801dcc0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801dcc2:	1c55      	adds	r5, r2, #1
 801dcc4:	9517      	str	r5, [sp, #92]	; 0x5c
 801dcc6:	7852      	ldrb	r2, [r2, #1]
 801dcc8:	2a30      	cmp	r2, #48	; 0x30
 801dcca:	d0f9      	beq.n	801dcc0 <_strtod_l+0x2b8>
 801dccc:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 801dcd0:	2d08      	cmp	r5, #8
 801dcd2:	f63f af77 	bhi.w	801dbc4 <_strtod_l+0x1bc>
 801dcd6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 801dcda:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801dcdc:	9208      	str	r2, [sp, #32]
 801dcde:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801dce0:	1c55      	adds	r5, r2, #1
 801dce2:	9517      	str	r5, [sp, #92]	; 0x5c
 801dce4:	7852      	ldrb	r2, [r2, #1]
 801dce6:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 801dcea:	2f09      	cmp	r7, #9
 801dcec:	d937      	bls.n	801dd5e <_strtod_l+0x356>
 801dcee:	9f08      	ldr	r7, [sp, #32]
 801dcf0:	1bed      	subs	r5, r5, r7
 801dcf2:	2d08      	cmp	r5, #8
 801dcf4:	f644 651f 	movw	r5, #19999	; 0x4e1f
 801dcf8:	dc02      	bgt.n	801dd00 <_strtod_l+0x2f8>
 801dcfa:	4565      	cmp	r5, ip
 801dcfc:	bfa8      	it	ge
 801dcfe:	4665      	movge	r5, ip
 801dd00:	f1be 0f00 	cmp.w	lr, #0
 801dd04:	d000      	beq.n	801dd08 <_strtod_l+0x300>
 801dd06:	426d      	negs	r5, r5
 801dd08:	2b00      	cmp	r3, #0
 801dd0a:	d14f      	bne.n	801ddac <_strtod_l+0x3a4>
 801dd0c:	9b06      	ldr	r3, [sp, #24]
 801dd0e:	4303      	orrs	r3, r0
 801dd10:	f47f aebe 	bne.w	801da90 <_strtod_l+0x88>
 801dd14:	2900      	cmp	r1, #0
 801dd16:	f47f aed8 	bne.w	801daca <_strtod_l+0xc2>
 801dd1a:	2a69      	cmp	r2, #105	; 0x69
 801dd1c:	d027      	beq.n	801dd6e <_strtod_l+0x366>
 801dd1e:	dc24      	bgt.n	801dd6a <_strtod_l+0x362>
 801dd20:	2a49      	cmp	r2, #73	; 0x49
 801dd22:	d024      	beq.n	801dd6e <_strtod_l+0x366>
 801dd24:	2a4e      	cmp	r2, #78	; 0x4e
 801dd26:	f47f aed0 	bne.w	801daca <_strtod_l+0xc2>
 801dd2a:	499b      	ldr	r1, [pc, #620]	; (801df98 <_strtod_l+0x590>)
 801dd2c:	a817      	add	r0, sp, #92	; 0x5c
 801dd2e:	f002 f823 	bl	801fd78 <__match>
 801dd32:	2800      	cmp	r0, #0
 801dd34:	f43f aec9 	beq.w	801daca <_strtod_l+0xc2>
 801dd38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801dd3a:	781b      	ldrb	r3, [r3, #0]
 801dd3c:	2b28      	cmp	r3, #40	; 0x28
 801dd3e:	d12d      	bne.n	801dd9c <_strtod_l+0x394>
 801dd40:	4996      	ldr	r1, [pc, #600]	; (801df9c <_strtod_l+0x594>)
 801dd42:	aa1a      	add	r2, sp, #104	; 0x68
 801dd44:	a817      	add	r0, sp, #92	; 0x5c
 801dd46:	f002 f82b 	bl	801fda0 <__hexnan>
 801dd4a:	2805      	cmp	r0, #5
 801dd4c:	d126      	bne.n	801dd9c <_strtod_l+0x394>
 801dd4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801dd50:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 801dd54:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801dd58:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801dd5c:	e698      	b.n	801da90 <_strtod_l+0x88>
 801dd5e:	250a      	movs	r5, #10
 801dd60:	fb05 250c 	mla	r5, r5, ip, r2
 801dd64:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 801dd68:	e7b9      	b.n	801dcde <_strtod_l+0x2d6>
 801dd6a:	2a6e      	cmp	r2, #110	; 0x6e
 801dd6c:	e7db      	b.n	801dd26 <_strtod_l+0x31e>
 801dd6e:	498c      	ldr	r1, [pc, #560]	; (801dfa0 <_strtod_l+0x598>)
 801dd70:	a817      	add	r0, sp, #92	; 0x5c
 801dd72:	f002 f801 	bl	801fd78 <__match>
 801dd76:	2800      	cmp	r0, #0
 801dd78:	f43f aea7 	beq.w	801daca <_strtod_l+0xc2>
 801dd7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801dd7e:	4989      	ldr	r1, [pc, #548]	; (801dfa4 <_strtod_l+0x59c>)
 801dd80:	3b01      	subs	r3, #1
 801dd82:	a817      	add	r0, sp, #92	; 0x5c
 801dd84:	9317      	str	r3, [sp, #92]	; 0x5c
 801dd86:	f001 fff7 	bl	801fd78 <__match>
 801dd8a:	b910      	cbnz	r0, 801dd92 <_strtod_l+0x38a>
 801dd8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801dd8e:	3301      	adds	r3, #1
 801dd90:	9317      	str	r3, [sp, #92]	; 0x5c
 801dd92:	f8df 9224 	ldr.w	r9, [pc, #548]	; 801dfb8 <_strtod_l+0x5b0>
 801dd96:	f04f 0800 	mov.w	r8, #0
 801dd9a:	e679      	b.n	801da90 <_strtod_l+0x88>
 801dd9c:	4882      	ldr	r0, [pc, #520]	; (801dfa8 <_strtod_l+0x5a0>)
 801dd9e:	f002 ff73 	bl	8020c88 <nan>
 801dda2:	ed8d 0b04 	vstr	d0, [sp, #16]
 801dda6:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801ddaa:	e671      	b.n	801da90 <_strtod_l+0x88>
 801ddac:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 801ddb0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801ddb4:	eba5 020b 	sub.w	r2, r5, fp
 801ddb8:	2e00      	cmp	r6, #0
 801ddba:	bf08      	it	eq
 801ddbc:	461e      	moveq	r6, r3
 801ddbe:	2b10      	cmp	r3, #16
 801ddc0:	ed8d 7b08 	vstr	d7, [sp, #32]
 801ddc4:	9206      	str	r2, [sp, #24]
 801ddc6:	461a      	mov	r2, r3
 801ddc8:	bfa8      	it	ge
 801ddca:	2210      	movge	r2, #16
 801ddcc:	2b09      	cmp	r3, #9
 801ddce:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 801ddd2:	dd0e      	ble.n	801ddf2 <_strtod_l+0x3ea>
 801ddd4:	4975      	ldr	r1, [pc, #468]	; (801dfac <_strtod_l+0x5a4>)
 801ddd6:	eddd 7a04 	vldr	s15, [sp, #16]
 801ddda:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801ddde:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 801dde2:	ed9d 5b08 	vldr	d5, [sp, #32]
 801dde6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801ddea:	eea5 7b06 	vfma.f64	d7, d5, d6
 801ddee:	ec59 8b17 	vmov	r8, r9, d7
 801ddf2:	2b0f      	cmp	r3, #15
 801ddf4:	dc37      	bgt.n	801de66 <_strtod_l+0x45e>
 801ddf6:	9906      	ldr	r1, [sp, #24]
 801ddf8:	2900      	cmp	r1, #0
 801ddfa:	f43f ae49 	beq.w	801da90 <_strtod_l+0x88>
 801ddfe:	dd23      	ble.n	801de48 <_strtod_l+0x440>
 801de00:	2916      	cmp	r1, #22
 801de02:	dc0b      	bgt.n	801de1c <_strtod_l+0x414>
 801de04:	4b69      	ldr	r3, [pc, #420]	; (801dfac <_strtod_l+0x5a4>)
 801de06:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801de0a:	ed93 7b00 	vldr	d7, [r3]
 801de0e:	ec49 8b16 	vmov	d6, r8, r9
 801de12:	ee27 7b06 	vmul.f64	d7, d7, d6
 801de16:	ec59 8b17 	vmov	r8, r9, d7
 801de1a:	e639      	b.n	801da90 <_strtod_l+0x88>
 801de1c:	9806      	ldr	r0, [sp, #24]
 801de1e:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801de22:	4281      	cmp	r1, r0
 801de24:	db1f      	blt.n	801de66 <_strtod_l+0x45e>
 801de26:	4a61      	ldr	r2, [pc, #388]	; (801dfac <_strtod_l+0x5a4>)
 801de28:	f1c3 030f 	rsb	r3, r3, #15
 801de2c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801de30:	ed91 7b00 	vldr	d7, [r1]
 801de34:	ec49 8b16 	vmov	d6, r8, r9
 801de38:	1ac3      	subs	r3, r0, r3
 801de3a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801de3e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801de42:	ed92 6b00 	vldr	d6, [r2]
 801de46:	e7e4      	b.n	801de12 <_strtod_l+0x40a>
 801de48:	9906      	ldr	r1, [sp, #24]
 801de4a:	3116      	adds	r1, #22
 801de4c:	db0b      	blt.n	801de66 <_strtod_l+0x45e>
 801de4e:	4b57      	ldr	r3, [pc, #348]	; (801dfac <_strtod_l+0x5a4>)
 801de50:	ebab 0505 	sub.w	r5, fp, r5
 801de54:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801de58:	ed95 7b00 	vldr	d7, [r5]
 801de5c:	ec49 8b16 	vmov	d6, r8, r9
 801de60:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801de64:	e7d7      	b.n	801de16 <_strtod_l+0x40e>
 801de66:	9906      	ldr	r1, [sp, #24]
 801de68:	1a9a      	subs	r2, r3, r2
 801de6a:	440a      	add	r2, r1
 801de6c:	2a00      	cmp	r2, #0
 801de6e:	dd74      	ble.n	801df5a <_strtod_l+0x552>
 801de70:	f012 000f 	ands.w	r0, r2, #15
 801de74:	d00a      	beq.n	801de8c <_strtod_l+0x484>
 801de76:	494d      	ldr	r1, [pc, #308]	; (801dfac <_strtod_l+0x5a4>)
 801de78:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801de7c:	ed91 7b00 	vldr	d7, [r1]
 801de80:	ec49 8b16 	vmov	d6, r8, r9
 801de84:	ee27 7b06 	vmul.f64	d7, d7, d6
 801de88:	ec59 8b17 	vmov	r8, r9, d7
 801de8c:	f032 020f 	bics.w	r2, r2, #15
 801de90:	d04f      	beq.n	801df32 <_strtod_l+0x52a>
 801de92:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801de96:	dd22      	ble.n	801dede <_strtod_l+0x4d6>
 801de98:	2500      	movs	r5, #0
 801de9a:	462e      	mov	r6, r5
 801de9c:	950a      	str	r5, [sp, #40]	; 0x28
 801de9e:	462f      	mov	r7, r5
 801dea0:	2322      	movs	r3, #34	; 0x22
 801dea2:	f8df 9114 	ldr.w	r9, [pc, #276]	; 801dfb8 <_strtod_l+0x5b0>
 801dea6:	6023      	str	r3, [r4, #0]
 801dea8:	f04f 0800 	mov.w	r8, #0
 801deac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801deae:	2b00      	cmp	r3, #0
 801deb0:	f43f adee 	beq.w	801da90 <_strtod_l+0x88>
 801deb4:	9918      	ldr	r1, [sp, #96]	; 0x60
 801deb6:	4620      	mov	r0, r4
 801deb8:	f002 f8d8 	bl	802006c <_Bfree>
 801debc:	4639      	mov	r1, r7
 801debe:	4620      	mov	r0, r4
 801dec0:	f002 f8d4 	bl	802006c <_Bfree>
 801dec4:	4631      	mov	r1, r6
 801dec6:	4620      	mov	r0, r4
 801dec8:	f002 f8d0 	bl	802006c <_Bfree>
 801decc:	990a      	ldr	r1, [sp, #40]	; 0x28
 801dece:	4620      	mov	r0, r4
 801ded0:	f002 f8cc 	bl	802006c <_Bfree>
 801ded4:	4629      	mov	r1, r5
 801ded6:	4620      	mov	r0, r4
 801ded8:	f002 f8c8 	bl	802006c <_Bfree>
 801dedc:	e5d8      	b.n	801da90 <_strtod_l+0x88>
 801dede:	e9cd 8904 	strd	r8, r9, [sp, #16]
 801dee2:	2000      	movs	r0, #0
 801dee4:	4f32      	ldr	r7, [pc, #200]	; (801dfb0 <_strtod_l+0x5a8>)
 801dee6:	1112      	asrs	r2, r2, #4
 801dee8:	4601      	mov	r1, r0
 801deea:	2a01      	cmp	r2, #1
 801deec:	dc24      	bgt.n	801df38 <_strtod_l+0x530>
 801deee:	b108      	cbz	r0, 801def4 <_strtod_l+0x4ec>
 801def0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801def4:	4a2e      	ldr	r2, [pc, #184]	; (801dfb0 <_strtod_l+0x5a8>)
 801def6:	482f      	ldr	r0, [pc, #188]	; (801dfb4 <_strtod_l+0x5ac>)
 801def8:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 801defc:	ed91 7b00 	vldr	d7, [r1]
 801df00:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801df04:	ec49 8b16 	vmov	d6, r8, r9
 801df08:	ee27 7b06 	vmul.f64	d7, d7, d6
 801df0c:	ed8d 7b04 	vstr	d7, [sp, #16]
 801df10:	9905      	ldr	r1, [sp, #20]
 801df12:	4a29      	ldr	r2, [pc, #164]	; (801dfb8 <_strtod_l+0x5b0>)
 801df14:	400a      	ands	r2, r1
 801df16:	4282      	cmp	r2, r0
 801df18:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801df1c:	d8bc      	bhi.n	801de98 <_strtod_l+0x490>
 801df1e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801df22:	4282      	cmp	r2, r0
 801df24:	bf86      	itte	hi
 801df26:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 801dfbc <_strtod_l+0x5b4>
 801df2a:	f04f 38ff 	movhi.w	r8, #4294967295
 801df2e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801df32:	2200      	movs	r2, #0
 801df34:	9204      	str	r2, [sp, #16]
 801df36:	e07f      	b.n	801e038 <_strtod_l+0x630>
 801df38:	f012 0f01 	tst.w	r2, #1
 801df3c:	d00a      	beq.n	801df54 <_strtod_l+0x54c>
 801df3e:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 801df42:	ed90 7b00 	vldr	d7, [r0]
 801df46:	ed9d 6b04 	vldr	d6, [sp, #16]
 801df4a:	ee26 7b07 	vmul.f64	d7, d6, d7
 801df4e:	ed8d 7b04 	vstr	d7, [sp, #16]
 801df52:	2001      	movs	r0, #1
 801df54:	3101      	adds	r1, #1
 801df56:	1052      	asrs	r2, r2, #1
 801df58:	e7c7      	b.n	801deea <_strtod_l+0x4e2>
 801df5a:	d0ea      	beq.n	801df32 <_strtod_l+0x52a>
 801df5c:	4252      	negs	r2, r2
 801df5e:	f012 000f 	ands.w	r0, r2, #15
 801df62:	d00a      	beq.n	801df7a <_strtod_l+0x572>
 801df64:	4911      	ldr	r1, [pc, #68]	; (801dfac <_strtod_l+0x5a4>)
 801df66:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801df6a:	ed91 7b00 	vldr	d7, [r1]
 801df6e:	ec49 8b16 	vmov	d6, r8, r9
 801df72:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801df76:	ec59 8b17 	vmov	r8, r9, d7
 801df7a:	1112      	asrs	r2, r2, #4
 801df7c:	d0d9      	beq.n	801df32 <_strtod_l+0x52a>
 801df7e:	2a1f      	cmp	r2, #31
 801df80:	dd1e      	ble.n	801dfc0 <_strtod_l+0x5b8>
 801df82:	2500      	movs	r5, #0
 801df84:	462e      	mov	r6, r5
 801df86:	950a      	str	r5, [sp, #40]	; 0x28
 801df88:	462f      	mov	r7, r5
 801df8a:	2322      	movs	r3, #34	; 0x22
 801df8c:	f04f 0800 	mov.w	r8, #0
 801df90:	f04f 0900 	mov.w	r9, #0
 801df94:	6023      	str	r3, [r4, #0]
 801df96:	e789      	b.n	801deac <_strtod_l+0x4a4>
 801df98:	0802a566 	.word	0x0802a566
 801df9c:	0802a5a8 	.word	0x0802a5a8
 801dfa0:	0802a55e 	.word	0x0802a55e
 801dfa4:	0802a6ec 	.word	0x0802a6ec
 801dfa8:	0802a542 	.word	0x0802a542
 801dfac:	0802a8e8 	.word	0x0802a8e8
 801dfb0:	0802a8c0 	.word	0x0802a8c0
 801dfb4:	7ca00000 	.word	0x7ca00000
 801dfb8:	7ff00000 	.word	0x7ff00000
 801dfbc:	7fefffff 	.word	0x7fefffff
 801dfc0:	f012 0110 	ands.w	r1, r2, #16
 801dfc4:	bf18      	it	ne
 801dfc6:	216a      	movne	r1, #106	; 0x6a
 801dfc8:	e9cd 8908 	strd	r8, r9, [sp, #32]
 801dfcc:	9104      	str	r1, [sp, #16]
 801dfce:	49c0      	ldr	r1, [pc, #768]	; (801e2d0 <_strtod_l+0x8c8>)
 801dfd0:	2000      	movs	r0, #0
 801dfd2:	07d7      	lsls	r7, r2, #31
 801dfd4:	d508      	bpl.n	801dfe8 <_strtod_l+0x5e0>
 801dfd6:	ed9d 6b08 	vldr	d6, [sp, #32]
 801dfda:	ed91 7b00 	vldr	d7, [r1]
 801dfde:	ee26 7b07 	vmul.f64	d7, d6, d7
 801dfe2:	ed8d 7b08 	vstr	d7, [sp, #32]
 801dfe6:	2001      	movs	r0, #1
 801dfe8:	1052      	asrs	r2, r2, #1
 801dfea:	f101 0108 	add.w	r1, r1, #8
 801dfee:	d1f0      	bne.n	801dfd2 <_strtod_l+0x5ca>
 801dff0:	b108      	cbz	r0, 801dff6 <_strtod_l+0x5ee>
 801dff2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 801dff6:	9a04      	ldr	r2, [sp, #16]
 801dff8:	b1ba      	cbz	r2, 801e02a <_strtod_l+0x622>
 801dffa:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801dffe:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 801e002:	2a00      	cmp	r2, #0
 801e004:	4649      	mov	r1, r9
 801e006:	dd10      	ble.n	801e02a <_strtod_l+0x622>
 801e008:	2a1f      	cmp	r2, #31
 801e00a:	f340 8132 	ble.w	801e272 <_strtod_l+0x86a>
 801e00e:	2a34      	cmp	r2, #52	; 0x34
 801e010:	bfde      	ittt	le
 801e012:	3a20      	suble	r2, #32
 801e014:	f04f 30ff 	movle.w	r0, #4294967295
 801e018:	fa00 f202 	lslle.w	r2, r0, r2
 801e01c:	f04f 0800 	mov.w	r8, #0
 801e020:	bfcc      	ite	gt
 801e022:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801e026:	ea02 0901 	andle.w	r9, r2, r1
 801e02a:	ec49 8b17 	vmov	d7, r8, r9
 801e02e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e036:	d0a4      	beq.n	801df82 <_strtod_l+0x57a>
 801e038:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e03a:	9200      	str	r2, [sp, #0]
 801e03c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e03e:	4632      	mov	r2, r6
 801e040:	4620      	mov	r0, r4
 801e042:	f002 f87f 	bl	8020144 <__s2b>
 801e046:	900a      	str	r0, [sp, #40]	; 0x28
 801e048:	2800      	cmp	r0, #0
 801e04a:	f43f af25 	beq.w	801de98 <_strtod_l+0x490>
 801e04e:	9b06      	ldr	r3, [sp, #24]
 801e050:	ebab 0505 	sub.w	r5, fp, r5
 801e054:	2b00      	cmp	r3, #0
 801e056:	bfb4      	ite	lt
 801e058:	462b      	movlt	r3, r5
 801e05a:	2300      	movge	r3, #0
 801e05c:	930c      	str	r3, [sp, #48]	; 0x30
 801e05e:	9b06      	ldr	r3, [sp, #24]
 801e060:	ed9f 9b95 	vldr	d9, [pc, #596]	; 801e2b8 <_strtod_l+0x8b0>
 801e064:	ed9f ab96 	vldr	d10, [pc, #600]	; 801e2c0 <_strtod_l+0x8b8>
 801e068:	ed9f bb97 	vldr	d11, [pc, #604]	; 801e2c8 <_strtod_l+0x8c0>
 801e06c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e070:	2500      	movs	r5, #0
 801e072:	9312      	str	r3, [sp, #72]	; 0x48
 801e074:	462e      	mov	r6, r5
 801e076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e078:	4620      	mov	r0, r4
 801e07a:	6859      	ldr	r1, [r3, #4]
 801e07c:	f001 ffb6 	bl	801ffec <_Balloc>
 801e080:	4607      	mov	r7, r0
 801e082:	2800      	cmp	r0, #0
 801e084:	f43f af0c 	beq.w	801dea0 <_strtod_l+0x498>
 801e088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e08a:	691a      	ldr	r2, [r3, #16]
 801e08c:	3202      	adds	r2, #2
 801e08e:	f103 010c 	add.w	r1, r3, #12
 801e092:	0092      	lsls	r2, r2, #2
 801e094:	300c      	adds	r0, #12
 801e096:	f7fe fb03 	bl	801c6a0 <memcpy>
 801e09a:	ec49 8b10 	vmov	d0, r8, r9
 801e09e:	aa1a      	add	r2, sp, #104	; 0x68
 801e0a0:	a919      	add	r1, sp, #100	; 0x64
 801e0a2:	4620      	mov	r0, r4
 801e0a4:	e9cd 8908 	strd	r8, r9, [sp, #32]
 801e0a8:	f002 fb88 	bl	80207bc <__d2b>
 801e0ac:	9018      	str	r0, [sp, #96]	; 0x60
 801e0ae:	2800      	cmp	r0, #0
 801e0b0:	f43f aef6 	beq.w	801dea0 <_strtod_l+0x498>
 801e0b4:	2101      	movs	r1, #1
 801e0b6:	4620      	mov	r0, r4
 801e0b8:	f002 f8de 	bl	8020278 <__i2b>
 801e0bc:	4606      	mov	r6, r0
 801e0be:	2800      	cmp	r0, #0
 801e0c0:	f43f aeee 	beq.w	801dea0 <_strtod_l+0x498>
 801e0c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e0c6:	991a      	ldr	r1, [sp, #104]	; 0x68
 801e0c8:	2b00      	cmp	r3, #0
 801e0ca:	bfab      	itete	ge
 801e0cc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801e0ce:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801e0d0:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 801e0d4:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 801e0d8:	bfac      	ite	ge
 801e0da:	eb03 0b02 	addge.w	fp, r3, r2
 801e0de:	eba2 0a03 	sublt.w	sl, r2, r3
 801e0e2:	9a04      	ldr	r2, [sp, #16]
 801e0e4:	1a9b      	subs	r3, r3, r2
 801e0e6:	440b      	add	r3, r1
 801e0e8:	4a7a      	ldr	r2, [pc, #488]	; (801e2d4 <_strtod_l+0x8cc>)
 801e0ea:	3b01      	subs	r3, #1
 801e0ec:	4293      	cmp	r3, r2
 801e0ee:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 801e0f2:	f280 80d1 	bge.w	801e298 <_strtod_l+0x890>
 801e0f6:	1ad2      	subs	r2, r2, r3
 801e0f8:	2a1f      	cmp	r2, #31
 801e0fa:	eba1 0102 	sub.w	r1, r1, r2
 801e0fe:	f04f 0001 	mov.w	r0, #1
 801e102:	f300 80bd 	bgt.w	801e280 <_strtod_l+0x878>
 801e106:	fa00 f302 	lsl.w	r3, r0, r2
 801e10a:	930e      	str	r3, [sp, #56]	; 0x38
 801e10c:	2300      	movs	r3, #0
 801e10e:	930d      	str	r3, [sp, #52]	; 0x34
 801e110:	eb0b 0301 	add.w	r3, fp, r1
 801e114:	9a04      	ldr	r2, [sp, #16]
 801e116:	459b      	cmp	fp, r3
 801e118:	448a      	add	sl, r1
 801e11a:	4492      	add	sl, r2
 801e11c:	465a      	mov	r2, fp
 801e11e:	bfa8      	it	ge
 801e120:	461a      	movge	r2, r3
 801e122:	4552      	cmp	r2, sl
 801e124:	bfa8      	it	ge
 801e126:	4652      	movge	r2, sl
 801e128:	2a00      	cmp	r2, #0
 801e12a:	bfc2      	ittt	gt
 801e12c:	1a9b      	subgt	r3, r3, r2
 801e12e:	ebaa 0a02 	subgt.w	sl, sl, r2
 801e132:	ebab 0b02 	subgt.w	fp, fp, r2
 801e136:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e138:	2a00      	cmp	r2, #0
 801e13a:	dd18      	ble.n	801e16e <_strtod_l+0x766>
 801e13c:	4631      	mov	r1, r6
 801e13e:	4620      	mov	r0, r4
 801e140:	9315      	str	r3, [sp, #84]	; 0x54
 801e142:	f002 f955 	bl	80203f0 <__pow5mult>
 801e146:	4606      	mov	r6, r0
 801e148:	2800      	cmp	r0, #0
 801e14a:	f43f aea9 	beq.w	801dea0 <_strtod_l+0x498>
 801e14e:	4601      	mov	r1, r0
 801e150:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801e152:	4620      	mov	r0, r4
 801e154:	f002 f8a6 	bl	80202a4 <__multiply>
 801e158:	9014      	str	r0, [sp, #80]	; 0x50
 801e15a:	2800      	cmp	r0, #0
 801e15c:	f43f aea0 	beq.w	801dea0 <_strtod_l+0x498>
 801e160:	9918      	ldr	r1, [sp, #96]	; 0x60
 801e162:	4620      	mov	r0, r4
 801e164:	f001 ff82 	bl	802006c <_Bfree>
 801e168:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801e16a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e16c:	9218      	str	r2, [sp, #96]	; 0x60
 801e16e:	2b00      	cmp	r3, #0
 801e170:	f300 8097 	bgt.w	801e2a2 <_strtod_l+0x89a>
 801e174:	9b06      	ldr	r3, [sp, #24]
 801e176:	2b00      	cmp	r3, #0
 801e178:	dd08      	ble.n	801e18c <_strtod_l+0x784>
 801e17a:	4639      	mov	r1, r7
 801e17c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e17e:	4620      	mov	r0, r4
 801e180:	f002 f936 	bl	80203f0 <__pow5mult>
 801e184:	4607      	mov	r7, r0
 801e186:	2800      	cmp	r0, #0
 801e188:	f43f ae8a 	beq.w	801dea0 <_strtod_l+0x498>
 801e18c:	f1ba 0f00 	cmp.w	sl, #0
 801e190:	dd08      	ble.n	801e1a4 <_strtod_l+0x79c>
 801e192:	4639      	mov	r1, r7
 801e194:	4652      	mov	r2, sl
 801e196:	4620      	mov	r0, r4
 801e198:	f002 f984 	bl	80204a4 <__lshift>
 801e19c:	4607      	mov	r7, r0
 801e19e:	2800      	cmp	r0, #0
 801e1a0:	f43f ae7e 	beq.w	801dea0 <_strtod_l+0x498>
 801e1a4:	f1bb 0f00 	cmp.w	fp, #0
 801e1a8:	dd08      	ble.n	801e1bc <_strtod_l+0x7b4>
 801e1aa:	4631      	mov	r1, r6
 801e1ac:	465a      	mov	r2, fp
 801e1ae:	4620      	mov	r0, r4
 801e1b0:	f002 f978 	bl	80204a4 <__lshift>
 801e1b4:	4606      	mov	r6, r0
 801e1b6:	2800      	cmp	r0, #0
 801e1b8:	f43f ae72 	beq.w	801dea0 <_strtod_l+0x498>
 801e1bc:	9918      	ldr	r1, [sp, #96]	; 0x60
 801e1be:	463a      	mov	r2, r7
 801e1c0:	4620      	mov	r0, r4
 801e1c2:	f002 f9f7 	bl	80205b4 <__mdiff>
 801e1c6:	4605      	mov	r5, r0
 801e1c8:	2800      	cmp	r0, #0
 801e1ca:	f43f ae69 	beq.w	801dea0 <_strtod_l+0x498>
 801e1ce:	2300      	movs	r3, #0
 801e1d0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 801e1d4:	60c3      	str	r3, [r0, #12]
 801e1d6:	4631      	mov	r1, r6
 801e1d8:	f002 f9d0 	bl	802057c <__mcmp>
 801e1dc:	2800      	cmp	r0, #0
 801e1de:	da7f      	bge.n	801e2e0 <_strtod_l+0x8d8>
 801e1e0:	ea5a 0308 	orrs.w	r3, sl, r8
 801e1e4:	f040 80a5 	bne.w	801e332 <_strtod_l+0x92a>
 801e1e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e1ec:	2b00      	cmp	r3, #0
 801e1ee:	f040 80a0 	bne.w	801e332 <_strtod_l+0x92a>
 801e1f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801e1f6:	0d1b      	lsrs	r3, r3, #20
 801e1f8:	051b      	lsls	r3, r3, #20
 801e1fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801e1fe:	f240 8098 	bls.w	801e332 <_strtod_l+0x92a>
 801e202:	696b      	ldr	r3, [r5, #20]
 801e204:	b91b      	cbnz	r3, 801e20e <_strtod_l+0x806>
 801e206:	692b      	ldr	r3, [r5, #16]
 801e208:	2b01      	cmp	r3, #1
 801e20a:	f340 8092 	ble.w	801e332 <_strtod_l+0x92a>
 801e20e:	4629      	mov	r1, r5
 801e210:	2201      	movs	r2, #1
 801e212:	4620      	mov	r0, r4
 801e214:	f002 f946 	bl	80204a4 <__lshift>
 801e218:	4631      	mov	r1, r6
 801e21a:	4605      	mov	r5, r0
 801e21c:	f002 f9ae 	bl	802057c <__mcmp>
 801e220:	2800      	cmp	r0, #0
 801e222:	f340 8086 	ble.w	801e332 <_strtod_l+0x92a>
 801e226:	9904      	ldr	r1, [sp, #16]
 801e228:	4a2b      	ldr	r2, [pc, #172]	; (801e2d8 <_strtod_l+0x8d0>)
 801e22a:	464b      	mov	r3, r9
 801e22c:	2900      	cmp	r1, #0
 801e22e:	f000 80a1 	beq.w	801e374 <_strtod_l+0x96c>
 801e232:	ea02 0109 	and.w	r1, r2, r9
 801e236:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801e23a:	f300 809b 	bgt.w	801e374 <_strtod_l+0x96c>
 801e23e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801e242:	f77f aea2 	ble.w	801df8a <_strtod_l+0x582>
 801e246:	4a25      	ldr	r2, [pc, #148]	; (801e2dc <_strtod_l+0x8d4>)
 801e248:	2300      	movs	r3, #0
 801e24a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 801e24e:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 801e252:	ec49 8b17 	vmov	d7, r8, r9
 801e256:	ee27 7b06 	vmul.f64	d7, d7, d6
 801e25a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801e25e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801e262:	4313      	orrs	r3, r2
 801e264:	bf08      	it	eq
 801e266:	2322      	moveq	r3, #34	; 0x22
 801e268:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801e26c:	bf08      	it	eq
 801e26e:	6023      	streq	r3, [r4, #0]
 801e270:	e620      	b.n	801deb4 <_strtod_l+0x4ac>
 801e272:	f04f 31ff 	mov.w	r1, #4294967295
 801e276:	fa01 f202 	lsl.w	r2, r1, r2
 801e27a:	ea02 0808 	and.w	r8, r2, r8
 801e27e:	e6d4      	b.n	801e02a <_strtod_l+0x622>
 801e280:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801e284:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801e288:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801e28c:	33e2      	adds	r3, #226	; 0xe2
 801e28e:	fa00 f303 	lsl.w	r3, r0, r3
 801e292:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 801e296:	e73b      	b.n	801e110 <_strtod_l+0x708>
 801e298:	2000      	movs	r0, #0
 801e29a:	2301      	movs	r3, #1
 801e29c:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 801e2a0:	e736      	b.n	801e110 <_strtod_l+0x708>
 801e2a2:	9918      	ldr	r1, [sp, #96]	; 0x60
 801e2a4:	461a      	mov	r2, r3
 801e2a6:	4620      	mov	r0, r4
 801e2a8:	f002 f8fc 	bl	80204a4 <__lshift>
 801e2ac:	9018      	str	r0, [sp, #96]	; 0x60
 801e2ae:	2800      	cmp	r0, #0
 801e2b0:	f47f af60 	bne.w	801e174 <_strtod_l+0x76c>
 801e2b4:	e5f4      	b.n	801dea0 <_strtod_l+0x498>
 801e2b6:	bf00      	nop
 801e2b8:	94a03595 	.word	0x94a03595
 801e2bc:	3fcfffff 	.word	0x3fcfffff
 801e2c0:	94a03595 	.word	0x94a03595
 801e2c4:	3fdfffff 	.word	0x3fdfffff
 801e2c8:	35afe535 	.word	0x35afe535
 801e2cc:	3fe00000 	.word	0x3fe00000
 801e2d0:	0802a5c0 	.word	0x0802a5c0
 801e2d4:	fffffc02 	.word	0xfffffc02
 801e2d8:	7ff00000 	.word	0x7ff00000
 801e2dc:	39500000 	.word	0x39500000
 801e2e0:	46cb      	mov	fp, r9
 801e2e2:	d165      	bne.n	801e3b0 <_strtod_l+0x9a8>
 801e2e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e2e8:	f1ba 0f00 	cmp.w	sl, #0
 801e2ec:	d02a      	beq.n	801e344 <_strtod_l+0x93c>
 801e2ee:	4aaa      	ldr	r2, [pc, #680]	; (801e598 <_strtod_l+0xb90>)
 801e2f0:	4293      	cmp	r3, r2
 801e2f2:	d12b      	bne.n	801e34c <_strtod_l+0x944>
 801e2f4:	9b04      	ldr	r3, [sp, #16]
 801e2f6:	4641      	mov	r1, r8
 801e2f8:	b1fb      	cbz	r3, 801e33a <_strtod_l+0x932>
 801e2fa:	4aa8      	ldr	r2, [pc, #672]	; (801e59c <_strtod_l+0xb94>)
 801e2fc:	ea09 0202 	and.w	r2, r9, r2
 801e300:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801e304:	f04f 30ff 	mov.w	r0, #4294967295
 801e308:	d81a      	bhi.n	801e340 <_strtod_l+0x938>
 801e30a:	0d12      	lsrs	r2, r2, #20
 801e30c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801e310:	fa00 f303 	lsl.w	r3, r0, r3
 801e314:	4299      	cmp	r1, r3
 801e316:	d119      	bne.n	801e34c <_strtod_l+0x944>
 801e318:	4ba1      	ldr	r3, [pc, #644]	; (801e5a0 <_strtod_l+0xb98>)
 801e31a:	459b      	cmp	fp, r3
 801e31c:	d102      	bne.n	801e324 <_strtod_l+0x91c>
 801e31e:	3101      	adds	r1, #1
 801e320:	f43f adbe 	beq.w	801dea0 <_strtod_l+0x498>
 801e324:	4b9d      	ldr	r3, [pc, #628]	; (801e59c <_strtod_l+0xb94>)
 801e326:	ea0b 0303 	and.w	r3, fp, r3
 801e32a:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801e32e:	f04f 0800 	mov.w	r8, #0
 801e332:	9b04      	ldr	r3, [sp, #16]
 801e334:	2b00      	cmp	r3, #0
 801e336:	d186      	bne.n	801e246 <_strtod_l+0x83e>
 801e338:	e5bc      	b.n	801deb4 <_strtod_l+0x4ac>
 801e33a:	f04f 33ff 	mov.w	r3, #4294967295
 801e33e:	e7e9      	b.n	801e314 <_strtod_l+0x90c>
 801e340:	4603      	mov	r3, r0
 801e342:	e7e7      	b.n	801e314 <_strtod_l+0x90c>
 801e344:	ea53 0308 	orrs.w	r3, r3, r8
 801e348:	f43f af6d 	beq.w	801e226 <_strtod_l+0x81e>
 801e34c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e34e:	b1db      	cbz	r3, 801e388 <_strtod_l+0x980>
 801e350:	ea13 0f0b 	tst.w	r3, fp
 801e354:	d0ed      	beq.n	801e332 <_strtod_l+0x92a>
 801e356:	9a04      	ldr	r2, [sp, #16]
 801e358:	4640      	mov	r0, r8
 801e35a:	4649      	mov	r1, r9
 801e35c:	f1ba 0f00 	cmp.w	sl, #0
 801e360:	d016      	beq.n	801e390 <_strtod_l+0x988>
 801e362:	f7ff fb34 	bl	801d9ce <sulp>
 801e366:	ed9d 7b08 	vldr	d7, [sp, #32]
 801e36a:	ee37 7b00 	vadd.f64	d7, d7, d0
 801e36e:	ec59 8b17 	vmov	r8, r9, d7
 801e372:	e7de      	b.n	801e332 <_strtod_l+0x92a>
 801e374:	4013      	ands	r3, r2
 801e376:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801e37a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801e37e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801e382:	f04f 38ff 	mov.w	r8, #4294967295
 801e386:	e7d4      	b.n	801e332 <_strtod_l+0x92a>
 801e388:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e38a:	ea13 0f08 	tst.w	r3, r8
 801e38e:	e7e1      	b.n	801e354 <_strtod_l+0x94c>
 801e390:	f7ff fb1d 	bl	801d9ce <sulp>
 801e394:	ed9d 7b08 	vldr	d7, [sp, #32]
 801e398:	ee37 7b40 	vsub.f64	d7, d7, d0
 801e39c:	ed8d 7b06 	vstr	d7, [sp, #24]
 801e3a0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e3a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e3a8:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 801e3ac:	d1c1      	bne.n	801e332 <_strtod_l+0x92a>
 801e3ae:	e5ec      	b.n	801df8a <_strtod_l+0x582>
 801e3b0:	4631      	mov	r1, r6
 801e3b2:	4628      	mov	r0, r5
 801e3b4:	f002 fa5e 	bl	8020874 <__ratio>
 801e3b8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801e3bc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801e3c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e3c4:	d867      	bhi.n	801e496 <_strtod_l+0xa8e>
 801e3c6:	f1ba 0f00 	cmp.w	sl, #0
 801e3ca:	d044      	beq.n	801e456 <_strtod_l+0xa4e>
 801e3cc:	4b75      	ldr	r3, [pc, #468]	; (801e5a4 <_strtod_l+0xb9c>)
 801e3ce:	2200      	movs	r2, #0
 801e3d0:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 801e3d4:	4971      	ldr	r1, [pc, #452]	; (801e59c <_strtod_l+0xb94>)
 801e3d6:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 801e5b0 <_strtod_l+0xba8>
 801e3da:	ea0b 0001 	and.w	r0, fp, r1
 801e3de:	4560      	cmp	r0, ip
 801e3e0:	900d      	str	r0, [sp, #52]	; 0x34
 801e3e2:	f040 808b 	bne.w	801e4fc <_strtod_l+0xaf4>
 801e3e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801e3ea:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 801e3ee:	ec49 8b10 	vmov	d0, r8, r9
 801e3f2:	ec43 2b1c 	vmov	d12, r2, r3
 801e3f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801e3fa:	f002 f963 	bl	80206c4 <__ulp>
 801e3fe:	ec49 8b1d 	vmov	d13, r8, r9
 801e402:	eeac db00 	vfma.f64	d13, d12, d0
 801e406:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 801e40a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e40c:	4963      	ldr	r1, [pc, #396]	; (801e59c <_strtod_l+0xb94>)
 801e40e:	4a66      	ldr	r2, [pc, #408]	; (801e5a8 <_strtod_l+0xba0>)
 801e410:	4019      	ands	r1, r3
 801e412:	4291      	cmp	r1, r2
 801e414:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 801e418:	d947      	bls.n	801e4aa <_strtod_l+0xaa2>
 801e41a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e41c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801e420:	4293      	cmp	r3, r2
 801e422:	d103      	bne.n	801e42c <_strtod_l+0xa24>
 801e424:	9b08      	ldr	r3, [sp, #32]
 801e426:	3301      	adds	r3, #1
 801e428:	f43f ad3a 	beq.w	801dea0 <_strtod_l+0x498>
 801e42c:	f8df 9170 	ldr.w	r9, [pc, #368]	; 801e5a0 <_strtod_l+0xb98>
 801e430:	f04f 38ff 	mov.w	r8, #4294967295
 801e434:	9918      	ldr	r1, [sp, #96]	; 0x60
 801e436:	4620      	mov	r0, r4
 801e438:	f001 fe18 	bl	802006c <_Bfree>
 801e43c:	4639      	mov	r1, r7
 801e43e:	4620      	mov	r0, r4
 801e440:	f001 fe14 	bl	802006c <_Bfree>
 801e444:	4631      	mov	r1, r6
 801e446:	4620      	mov	r0, r4
 801e448:	f001 fe10 	bl	802006c <_Bfree>
 801e44c:	4629      	mov	r1, r5
 801e44e:	4620      	mov	r0, r4
 801e450:	f001 fe0c 	bl	802006c <_Bfree>
 801e454:	e60f      	b.n	801e076 <_strtod_l+0x66e>
 801e456:	f1b8 0f00 	cmp.w	r8, #0
 801e45a:	d112      	bne.n	801e482 <_strtod_l+0xa7a>
 801e45c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e460:	b9b3      	cbnz	r3, 801e490 <_strtod_l+0xa88>
 801e462:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801e466:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801e46a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e46e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 801e472:	d401      	bmi.n	801e478 <_strtod_l+0xa70>
 801e474:	ee20 8b08 	vmul.f64	d8, d0, d8
 801e478:	eeb1 7b48 	vneg.f64	d7, d8
 801e47c:	ec53 2b17 	vmov	r2, r3, d7
 801e480:	e7a8      	b.n	801e3d4 <_strtod_l+0x9cc>
 801e482:	f1b8 0f01 	cmp.w	r8, #1
 801e486:	d103      	bne.n	801e490 <_strtod_l+0xa88>
 801e488:	f1b9 0f00 	cmp.w	r9, #0
 801e48c:	f43f ad7d 	beq.w	801df8a <_strtod_l+0x582>
 801e490:	4b46      	ldr	r3, [pc, #280]	; (801e5ac <_strtod_l+0xba4>)
 801e492:	2200      	movs	r2, #0
 801e494:	e79c      	b.n	801e3d0 <_strtod_l+0x9c8>
 801e496:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 801e49a:	ee20 8b08 	vmul.f64	d8, d0, d8
 801e49e:	f1ba 0f00 	cmp.w	sl, #0
 801e4a2:	d0e9      	beq.n	801e478 <_strtod_l+0xa70>
 801e4a4:	ec53 2b18 	vmov	r2, r3, d8
 801e4a8:	e794      	b.n	801e3d4 <_strtod_l+0x9cc>
 801e4aa:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801e4ae:	9b04      	ldr	r3, [sp, #16]
 801e4b0:	2b00      	cmp	r3, #0
 801e4b2:	d1bf      	bne.n	801e434 <_strtod_l+0xa2c>
 801e4b4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801e4b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e4ba:	0d1b      	lsrs	r3, r3, #20
 801e4bc:	051b      	lsls	r3, r3, #20
 801e4be:	429a      	cmp	r2, r3
 801e4c0:	d1b8      	bne.n	801e434 <_strtod_l+0xa2c>
 801e4c2:	ec51 0b18 	vmov	r0, r1, d8
 801e4c6:	f7e2 f947 	bl	8000758 <__aeabi_d2lz>
 801e4ca:	f7e2 f8ff 	bl	80006cc <__aeabi_l2d>
 801e4ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801e4d2:	ec41 0b17 	vmov	d7, r0, r1
 801e4d6:	ea43 0308 	orr.w	r3, r3, r8
 801e4da:	ea53 030a 	orrs.w	r3, r3, sl
 801e4de:	ee38 8b47 	vsub.f64	d8, d8, d7
 801e4e2:	d03e      	beq.n	801e562 <_strtod_l+0xb5a>
 801e4e4:	eeb4 8bca 	vcmpe.f64	d8, d10
 801e4e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4ec:	f53f ace2 	bmi.w	801deb4 <_strtod_l+0x4ac>
 801e4f0:	eeb4 8bcb 	vcmpe.f64	d8, d11
 801e4f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4f8:	dd9c      	ble.n	801e434 <_strtod_l+0xa2c>
 801e4fa:	e4db      	b.n	801deb4 <_strtod_l+0x4ac>
 801e4fc:	9904      	ldr	r1, [sp, #16]
 801e4fe:	b301      	cbz	r1, 801e542 <_strtod_l+0xb3a>
 801e500:	990d      	ldr	r1, [sp, #52]	; 0x34
 801e502:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 801e506:	d81c      	bhi.n	801e542 <_strtod_l+0xb3a>
 801e508:	ed9f 7b21 	vldr	d7, [pc, #132]	; 801e590 <_strtod_l+0xb88>
 801e50c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801e510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e514:	d811      	bhi.n	801e53a <_strtod_l+0xb32>
 801e516:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 801e51a:	ee18 3a10 	vmov	r3, s16
 801e51e:	2b01      	cmp	r3, #1
 801e520:	bf38      	it	cc
 801e522:	2301      	movcc	r3, #1
 801e524:	ee08 3a10 	vmov	s16, r3
 801e528:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 801e52c:	f1ba 0f00 	cmp.w	sl, #0
 801e530:	d114      	bne.n	801e55c <_strtod_l+0xb54>
 801e532:	eeb1 7b48 	vneg.f64	d7, d8
 801e536:	ec53 2b17 	vmov	r2, r3, d7
 801e53a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e53c:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 801e540:	1a0b      	subs	r3, r1, r0
 801e542:	ed9d 0b08 	vldr	d0, [sp, #32]
 801e546:	ec43 2b1c 	vmov	d12, r2, r3
 801e54a:	f002 f8bb 	bl	80206c4 <__ulp>
 801e54e:	ed9d 7b08 	vldr	d7, [sp, #32]
 801e552:	eeac 7b00 	vfma.f64	d7, d12, d0
 801e556:	ec59 8b17 	vmov	r8, r9, d7
 801e55a:	e7a8      	b.n	801e4ae <_strtod_l+0xaa6>
 801e55c:	ec53 2b18 	vmov	r2, r3, d8
 801e560:	e7eb      	b.n	801e53a <_strtod_l+0xb32>
 801e562:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801e566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e56a:	f57f af63 	bpl.w	801e434 <_strtod_l+0xa2c>
 801e56e:	e4a1      	b.n	801deb4 <_strtod_l+0x4ac>
 801e570:	2300      	movs	r3, #0
 801e572:	930b      	str	r3, [sp, #44]	; 0x2c
 801e574:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801e576:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e578:	6013      	str	r3, [r2, #0]
 801e57a:	f7ff ba8d 	b.w	801da98 <_strtod_l+0x90>
 801e57e:	2a65      	cmp	r2, #101	; 0x65
 801e580:	f43f ab89 	beq.w	801dc96 <_strtod_l+0x28e>
 801e584:	2a45      	cmp	r2, #69	; 0x45
 801e586:	f43f ab86 	beq.w	801dc96 <_strtod_l+0x28e>
 801e58a:	2101      	movs	r1, #1
 801e58c:	f7ff bbbe 	b.w	801dd0c <_strtod_l+0x304>
 801e590:	ffc00000 	.word	0xffc00000
 801e594:	41dfffff 	.word	0x41dfffff
 801e598:	000fffff 	.word	0x000fffff
 801e59c:	7ff00000 	.word	0x7ff00000
 801e5a0:	7fefffff 	.word	0x7fefffff
 801e5a4:	3ff00000 	.word	0x3ff00000
 801e5a8:	7c9fffff 	.word	0x7c9fffff
 801e5ac:	bff00000 	.word	0xbff00000
 801e5b0:	7fe00000 	.word	0x7fe00000

0801e5b4 <_strtod_r>:
 801e5b4:	4b01      	ldr	r3, [pc, #4]	; (801e5bc <_strtod_r+0x8>)
 801e5b6:	f7ff ba27 	b.w	801da08 <_strtod_l>
 801e5ba:	bf00      	nop
 801e5bc:	2400a190 	.word	0x2400a190

0801e5c0 <_strtol_l.isra.0>:
 801e5c0:	2b01      	cmp	r3, #1
 801e5c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e5c6:	d001      	beq.n	801e5cc <_strtol_l.isra.0+0xc>
 801e5c8:	2b24      	cmp	r3, #36	; 0x24
 801e5ca:	d906      	bls.n	801e5da <_strtol_l.isra.0+0x1a>
 801e5cc:	f7fe f81c 	bl	801c608 <__errno>
 801e5d0:	2316      	movs	r3, #22
 801e5d2:	6003      	str	r3, [r0, #0]
 801e5d4:	2000      	movs	r0, #0
 801e5d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e5da:	4f3a      	ldr	r7, [pc, #232]	; (801e6c4 <_strtol_l.isra.0+0x104>)
 801e5dc:	468e      	mov	lr, r1
 801e5de:	4676      	mov	r6, lr
 801e5e0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801e5e4:	5de5      	ldrb	r5, [r4, r7]
 801e5e6:	f015 0508 	ands.w	r5, r5, #8
 801e5ea:	d1f8      	bne.n	801e5de <_strtol_l.isra.0+0x1e>
 801e5ec:	2c2d      	cmp	r4, #45	; 0x2d
 801e5ee:	d134      	bne.n	801e65a <_strtol_l.isra.0+0x9a>
 801e5f0:	f89e 4000 	ldrb.w	r4, [lr]
 801e5f4:	f04f 0801 	mov.w	r8, #1
 801e5f8:	f106 0e02 	add.w	lr, r6, #2
 801e5fc:	2b00      	cmp	r3, #0
 801e5fe:	d05c      	beq.n	801e6ba <_strtol_l.isra.0+0xfa>
 801e600:	2b10      	cmp	r3, #16
 801e602:	d10c      	bne.n	801e61e <_strtol_l.isra.0+0x5e>
 801e604:	2c30      	cmp	r4, #48	; 0x30
 801e606:	d10a      	bne.n	801e61e <_strtol_l.isra.0+0x5e>
 801e608:	f89e 4000 	ldrb.w	r4, [lr]
 801e60c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801e610:	2c58      	cmp	r4, #88	; 0x58
 801e612:	d14d      	bne.n	801e6b0 <_strtol_l.isra.0+0xf0>
 801e614:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801e618:	2310      	movs	r3, #16
 801e61a:	f10e 0e02 	add.w	lr, lr, #2
 801e61e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801e622:	f10c 3cff 	add.w	ip, ip, #4294967295
 801e626:	2600      	movs	r6, #0
 801e628:	fbbc f9f3 	udiv	r9, ip, r3
 801e62c:	4635      	mov	r5, r6
 801e62e:	fb03 ca19 	mls	sl, r3, r9, ip
 801e632:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801e636:	2f09      	cmp	r7, #9
 801e638:	d818      	bhi.n	801e66c <_strtol_l.isra.0+0xac>
 801e63a:	463c      	mov	r4, r7
 801e63c:	42a3      	cmp	r3, r4
 801e63e:	dd24      	ble.n	801e68a <_strtol_l.isra.0+0xca>
 801e640:	2e00      	cmp	r6, #0
 801e642:	db1f      	blt.n	801e684 <_strtol_l.isra.0+0xc4>
 801e644:	45a9      	cmp	r9, r5
 801e646:	d31d      	bcc.n	801e684 <_strtol_l.isra.0+0xc4>
 801e648:	d101      	bne.n	801e64e <_strtol_l.isra.0+0x8e>
 801e64a:	45a2      	cmp	sl, r4
 801e64c:	db1a      	blt.n	801e684 <_strtol_l.isra.0+0xc4>
 801e64e:	fb05 4503 	mla	r5, r5, r3, r4
 801e652:	2601      	movs	r6, #1
 801e654:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801e658:	e7eb      	b.n	801e632 <_strtol_l.isra.0+0x72>
 801e65a:	2c2b      	cmp	r4, #43	; 0x2b
 801e65c:	bf08      	it	eq
 801e65e:	f89e 4000 	ldrbeq.w	r4, [lr]
 801e662:	46a8      	mov	r8, r5
 801e664:	bf08      	it	eq
 801e666:	f106 0e02 	addeq.w	lr, r6, #2
 801e66a:	e7c7      	b.n	801e5fc <_strtol_l.isra.0+0x3c>
 801e66c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801e670:	2f19      	cmp	r7, #25
 801e672:	d801      	bhi.n	801e678 <_strtol_l.isra.0+0xb8>
 801e674:	3c37      	subs	r4, #55	; 0x37
 801e676:	e7e1      	b.n	801e63c <_strtol_l.isra.0+0x7c>
 801e678:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801e67c:	2f19      	cmp	r7, #25
 801e67e:	d804      	bhi.n	801e68a <_strtol_l.isra.0+0xca>
 801e680:	3c57      	subs	r4, #87	; 0x57
 801e682:	e7db      	b.n	801e63c <_strtol_l.isra.0+0x7c>
 801e684:	f04f 36ff 	mov.w	r6, #4294967295
 801e688:	e7e4      	b.n	801e654 <_strtol_l.isra.0+0x94>
 801e68a:	2e00      	cmp	r6, #0
 801e68c:	da05      	bge.n	801e69a <_strtol_l.isra.0+0xda>
 801e68e:	2322      	movs	r3, #34	; 0x22
 801e690:	6003      	str	r3, [r0, #0]
 801e692:	4665      	mov	r5, ip
 801e694:	b942      	cbnz	r2, 801e6a8 <_strtol_l.isra.0+0xe8>
 801e696:	4628      	mov	r0, r5
 801e698:	e79d      	b.n	801e5d6 <_strtol_l.isra.0+0x16>
 801e69a:	f1b8 0f00 	cmp.w	r8, #0
 801e69e:	d000      	beq.n	801e6a2 <_strtol_l.isra.0+0xe2>
 801e6a0:	426d      	negs	r5, r5
 801e6a2:	2a00      	cmp	r2, #0
 801e6a4:	d0f7      	beq.n	801e696 <_strtol_l.isra.0+0xd6>
 801e6a6:	b10e      	cbz	r6, 801e6ac <_strtol_l.isra.0+0xec>
 801e6a8:	f10e 31ff 	add.w	r1, lr, #4294967295
 801e6ac:	6011      	str	r1, [r2, #0]
 801e6ae:	e7f2      	b.n	801e696 <_strtol_l.isra.0+0xd6>
 801e6b0:	2430      	movs	r4, #48	; 0x30
 801e6b2:	2b00      	cmp	r3, #0
 801e6b4:	d1b3      	bne.n	801e61e <_strtol_l.isra.0+0x5e>
 801e6b6:	2308      	movs	r3, #8
 801e6b8:	e7b1      	b.n	801e61e <_strtol_l.isra.0+0x5e>
 801e6ba:	2c30      	cmp	r4, #48	; 0x30
 801e6bc:	d0a4      	beq.n	801e608 <_strtol_l.isra.0+0x48>
 801e6be:	230a      	movs	r3, #10
 801e6c0:	e7ad      	b.n	801e61e <_strtol_l.isra.0+0x5e>
 801e6c2:	bf00      	nop
 801e6c4:	0802a5e9 	.word	0x0802a5e9

0801e6c8 <_strtol_r>:
 801e6c8:	f7ff bf7a 	b.w	801e5c0 <_strtol_l.isra.0>

0801e6cc <strtol>:
 801e6cc:	4613      	mov	r3, r2
 801e6ce:	460a      	mov	r2, r1
 801e6d0:	4601      	mov	r1, r0
 801e6d2:	4802      	ldr	r0, [pc, #8]	; (801e6dc <strtol+0x10>)
 801e6d4:	6800      	ldr	r0, [r0, #0]
 801e6d6:	f7ff bf73 	b.w	801e5c0 <_strtol_l.isra.0>
 801e6da:	bf00      	nop
 801e6dc:	2400a128 	.word	0x2400a128

0801e6e0 <__swbuf_r>:
 801e6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e6e2:	460e      	mov	r6, r1
 801e6e4:	4614      	mov	r4, r2
 801e6e6:	4605      	mov	r5, r0
 801e6e8:	b118      	cbz	r0, 801e6f2 <__swbuf_r+0x12>
 801e6ea:	6983      	ldr	r3, [r0, #24]
 801e6ec:	b90b      	cbnz	r3, 801e6f2 <__swbuf_r+0x12>
 801e6ee:	f000 ffe7 	bl	801f6c0 <__sinit>
 801e6f2:	4b21      	ldr	r3, [pc, #132]	; (801e778 <__swbuf_r+0x98>)
 801e6f4:	429c      	cmp	r4, r3
 801e6f6:	d12b      	bne.n	801e750 <__swbuf_r+0x70>
 801e6f8:	686c      	ldr	r4, [r5, #4]
 801e6fa:	69a3      	ldr	r3, [r4, #24]
 801e6fc:	60a3      	str	r3, [r4, #8]
 801e6fe:	89a3      	ldrh	r3, [r4, #12]
 801e700:	071a      	lsls	r2, r3, #28
 801e702:	d52f      	bpl.n	801e764 <__swbuf_r+0x84>
 801e704:	6923      	ldr	r3, [r4, #16]
 801e706:	b36b      	cbz	r3, 801e764 <__swbuf_r+0x84>
 801e708:	6923      	ldr	r3, [r4, #16]
 801e70a:	6820      	ldr	r0, [r4, #0]
 801e70c:	1ac0      	subs	r0, r0, r3
 801e70e:	6963      	ldr	r3, [r4, #20]
 801e710:	b2f6      	uxtb	r6, r6
 801e712:	4283      	cmp	r3, r0
 801e714:	4637      	mov	r7, r6
 801e716:	dc04      	bgt.n	801e722 <__swbuf_r+0x42>
 801e718:	4621      	mov	r1, r4
 801e71a:	4628      	mov	r0, r5
 801e71c:	f000 ff3c 	bl	801f598 <_fflush_r>
 801e720:	bb30      	cbnz	r0, 801e770 <__swbuf_r+0x90>
 801e722:	68a3      	ldr	r3, [r4, #8]
 801e724:	3b01      	subs	r3, #1
 801e726:	60a3      	str	r3, [r4, #8]
 801e728:	6823      	ldr	r3, [r4, #0]
 801e72a:	1c5a      	adds	r2, r3, #1
 801e72c:	6022      	str	r2, [r4, #0]
 801e72e:	701e      	strb	r6, [r3, #0]
 801e730:	6963      	ldr	r3, [r4, #20]
 801e732:	3001      	adds	r0, #1
 801e734:	4283      	cmp	r3, r0
 801e736:	d004      	beq.n	801e742 <__swbuf_r+0x62>
 801e738:	89a3      	ldrh	r3, [r4, #12]
 801e73a:	07db      	lsls	r3, r3, #31
 801e73c:	d506      	bpl.n	801e74c <__swbuf_r+0x6c>
 801e73e:	2e0a      	cmp	r6, #10
 801e740:	d104      	bne.n	801e74c <__swbuf_r+0x6c>
 801e742:	4621      	mov	r1, r4
 801e744:	4628      	mov	r0, r5
 801e746:	f000 ff27 	bl	801f598 <_fflush_r>
 801e74a:	b988      	cbnz	r0, 801e770 <__swbuf_r+0x90>
 801e74c:	4638      	mov	r0, r7
 801e74e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e750:	4b0a      	ldr	r3, [pc, #40]	; (801e77c <__swbuf_r+0x9c>)
 801e752:	429c      	cmp	r4, r3
 801e754:	d101      	bne.n	801e75a <__swbuf_r+0x7a>
 801e756:	68ac      	ldr	r4, [r5, #8]
 801e758:	e7cf      	b.n	801e6fa <__swbuf_r+0x1a>
 801e75a:	4b09      	ldr	r3, [pc, #36]	; (801e780 <__swbuf_r+0xa0>)
 801e75c:	429c      	cmp	r4, r3
 801e75e:	bf08      	it	eq
 801e760:	68ec      	ldreq	r4, [r5, #12]
 801e762:	e7ca      	b.n	801e6fa <__swbuf_r+0x1a>
 801e764:	4621      	mov	r1, r4
 801e766:	4628      	mov	r0, r5
 801e768:	f000 f80c 	bl	801e784 <__swsetup_r>
 801e76c:	2800      	cmp	r0, #0
 801e76e:	d0cb      	beq.n	801e708 <__swbuf_r+0x28>
 801e770:	f04f 37ff 	mov.w	r7, #4294967295
 801e774:	e7ea      	b.n	801e74c <__swbuf_r+0x6c>
 801e776:	bf00      	nop
 801e778:	0802a7a0 	.word	0x0802a7a0
 801e77c:	0802a7c0 	.word	0x0802a7c0
 801e780:	0802a780 	.word	0x0802a780

0801e784 <__swsetup_r>:
 801e784:	4b32      	ldr	r3, [pc, #200]	; (801e850 <__swsetup_r+0xcc>)
 801e786:	b570      	push	{r4, r5, r6, lr}
 801e788:	681d      	ldr	r5, [r3, #0]
 801e78a:	4606      	mov	r6, r0
 801e78c:	460c      	mov	r4, r1
 801e78e:	b125      	cbz	r5, 801e79a <__swsetup_r+0x16>
 801e790:	69ab      	ldr	r3, [r5, #24]
 801e792:	b913      	cbnz	r3, 801e79a <__swsetup_r+0x16>
 801e794:	4628      	mov	r0, r5
 801e796:	f000 ff93 	bl	801f6c0 <__sinit>
 801e79a:	4b2e      	ldr	r3, [pc, #184]	; (801e854 <__swsetup_r+0xd0>)
 801e79c:	429c      	cmp	r4, r3
 801e79e:	d10f      	bne.n	801e7c0 <__swsetup_r+0x3c>
 801e7a0:	686c      	ldr	r4, [r5, #4]
 801e7a2:	89a3      	ldrh	r3, [r4, #12]
 801e7a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e7a8:	0719      	lsls	r1, r3, #28
 801e7aa:	d42c      	bmi.n	801e806 <__swsetup_r+0x82>
 801e7ac:	06dd      	lsls	r5, r3, #27
 801e7ae:	d411      	bmi.n	801e7d4 <__swsetup_r+0x50>
 801e7b0:	2309      	movs	r3, #9
 801e7b2:	6033      	str	r3, [r6, #0]
 801e7b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e7b8:	81a3      	strh	r3, [r4, #12]
 801e7ba:	f04f 30ff 	mov.w	r0, #4294967295
 801e7be:	e03e      	b.n	801e83e <__swsetup_r+0xba>
 801e7c0:	4b25      	ldr	r3, [pc, #148]	; (801e858 <__swsetup_r+0xd4>)
 801e7c2:	429c      	cmp	r4, r3
 801e7c4:	d101      	bne.n	801e7ca <__swsetup_r+0x46>
 801e7c6:	68ac      	ldr	r4, [r5, #8]
 801e7c8:	e7eb      	b.n	801e7a2 <__swsetup_r+0x1e>
 801e7ca:	4b24      	ldr	r3, [pc, #144]	; (801e85c <__swsetup_r+0xd8>)
 801e7cc:	429c      	cmp	r4, r3
 801e7ce:	bf08      	it	eq
 801e7d0:	68ec      	ldreq	r4, [r5, #12]
 801e7d2:	e7e6      	b.n	801e7a2 <__swsetup_r+0x1e>
 801e7d4:	0758      	lsls	r0, r3, #29
 801e7d6:	d512      	bpl.n	801e7fe <__swsetup_r+0x7a>
 801e7d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e7da:	b141      	cbz	r1, 801e7ee <__swsetup_r+0x6a>
 801e7dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e7e0:	4299      	cmp	r1, r3
 801e7e2:	d002      	beq.n	801e7ea <__swsetup_r+0x66>
 801e7e4:	4630      	mov	r0, r6
 801e7e6:	f7fd ff8b 	bl	801c700 <_free_r>
 801e7ea:	2300      	movs	r3, #0
 801e7ec:	6363      	str	r3, [r4, #52]	; 0x34
 801e7ee:	89a3      	ldrh	r3, [r4, #12]
 801e7f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e7f4:	81a3      	strh	r3, [r4, #12]
 801e7f6:	2300      	movs	r3, #0
 801e7f8:	6063      	str	r3, [r4, #4]
 801e7fa:	6923      	ldr	r3, [r4, #16]
 801e7fc:	6023      	str	r3, [r4, #0]
 801e7fe:	89a3      	ldrh	r3, [r4, #12]
 801e800:	f043 0308 	orr.w	r3, r3, #8
 801e804:	81a3      	strh	r3, [r4, #12]
 801e806:	6923      	ldr	r3, [r4, #16]
 801e808:	b94b      	cbnz	r3, 801e81e <__swsetup_r+0x9a>
 801e80a:	89a3      	ldrh	r3, [r4, #12]
 801e80c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e814:	d003      	beq.n	801e81e <__swsetup_r+0x9a>
 801e816:	4621      	mov	r1, r4
 801e818:	4630      	mov	r0, r6
 801e81a:	f001 fb89 	bl	801ff30 <__smakebuf_r>
 801e81e:	89a0      	ldrh	r0, [r4, #12]
 801e820:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e824:	f010 0301 	ands.w	r3, r0, #1
 801e828:	d00a      	beq.n	801e840 <__swsetup_r+0xbc>
 801e82a:	2300      	movs	r3, #0
 801e82c:	60a3      	str	r3, [r4, #8]
 801e82e:	6963      	ldr	r3, [r4, #20]
 801e830:	425b      	negs	r3, r3
 801e832:	61a3      	str	r3, [r4, #24]
 801e834:	6923      	ldr	r3, [r4, #16]
 801e836:	b943      	cbnz	r3, 801e84a <__swsetup_r+0xc6>
 801e838:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e83c:	d1ba      	bne.n	801e7b4 <__swsetup_r+0x30>
 801e83e:	bd70      	pop	{r4, r5, r6, pc}
 801e840:	0781      	lsls	r1, r0, #30
 801e842:	bf58      	it	pl
 801e844:	6963      	ldrpl	r3, [r4, #20]
 801e846:	60a3      	str	r3, [r4, #8]
 801e848:	e7f4      	b.n	801e834 <__swsetup_r+0xb0>
 801e84a:	2000      	movs	r0, #0
 801e84c:	e7f7      	b.n	801e83e <__swsetup_r+0xba>
 801e84e:	bf00      	nop
 801e850:	2400a128 	.word	0x2400a128
 801e854:	0802a7a0 	.word	0x0802a7a0
 801e858:	0802a7c0 	.word	0x0802a7c0
 801e85c:	0802a780 	.word	0x0802a780

0801e860 <abort>:
 801e860:	b508      	push	{r3, lr}
 801e862:	2006      	movs	r0, #6
 801e864:	f002 fa40 	bl	8020ce8 <raise>
 801e868:	2001      	movs	r0, #1
 801e86a:	f7e3 fa57 	bl	8001d1c <_exit>

0801e86e <quorem>:
 801e86e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e872:	6903      	ldr	r3, [r0, #16]
 801e874:	690c      	ldr	r4, [r1, #16]
 801e876:	42a3      	cmp	r3, r4
 801e878:	4607      	mov	r7, r0
 801e87a:	f2c0 8081 	blt.w	801e980 <quorem+0x112>
 801e87e:	3c01      	subs	r4, #1
 801e880:	f101 0814 	add.w	r8, r1, #20
 801e884:	f100 0514 	add.w	r5, r0, #20
 801e888:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e88c:	9301      	str	r3, [sp, #4]
 801e88e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801e892:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e896:	3301      	adds	r3, #1
 801e898:	429a      	cmp	r2, r3
 801e89a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801e89e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801e8a2:	fbb2 f6f3 	udiv	r6, r2, r3
 801e8a6:	d331      	bcc.n	801e90c <quorem+0x9e>
 801e8a8:	f04f 0e00 	mov.w	lr, #0
 801e8ac:	4640      	mov	r0, r8
 801e8ae:	46ac      	mov	ip, r5
 801e8b0:	46f2      	mov	sl, lr
 801e8b2:	f850 2b04 	ldr.w	r2, [r0], #4
 801e8b6:	b293      	uxth	r3, r2
 801e8b8:	fb06 e303 	mla	r3, r6, r3, lr
 801e8bc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801e8c0:	b29b      	uxth	r3, r3
 801e8c2:	ebaa 0303 	sub.w	r3, sl, r3
 801e8c6:	0c12      	lsrs	r2, r2, #16
 801e8c8:	f8dc a000 	ldr.w	sl, [ip]
 801e8cc:	fb06 e202 	mla	r2, r6, r2, lr
 801e8d0:	fa13 f38a 	uxtah	r3, r3, sl
 801e8d4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801e8d8:	fa1f fa82 	uxth.w	sl, r2
 801e8dc:	f8dc 2000 	ldr.w	r2, [ip]
 801e8e0:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801e8e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801e8e8:	b29b      	uxth	r3, r3
 801e8ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e8ee:	4581      	cmp	r9, r0
 801e8f0:	f84c 3b04 	str.w	r3, [ip], #4
 801e8f4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801e8f8:	d2db      	bcs.n	801e8b2 <quorem+0x44>
 801e8fa:	f855 300b 	ldr.w	r3, [r5, fp]
 801e8fe:	b92b      	cbnz	r3, 801e90c <quorem+0x9e>
 801e900:	9b01      	ldr	r3, [sp, #4]
 801e902:	3b04      	subs	r3, #4
 801e904:	429d      	cmp	r5, r3
 801e906:	461a      	mov	r2, r3
 801e908:	d32e      	bcc.n	801e968 <quorem+0xfa>
 801e90a:	613c      	str	r4, [r7, #16]
 801e90c:	4638      	mov	r0, r7
 801e90e:	f001 fe35 	bl	802057c <__mcmp>
 801e912:	2800      	cmp	r0, #0
 801e914:	db24      	blt.n	801e960 <quorem+0xf2>
 801e916:	3601      	adds	r6, #1
 801e918:	4628      	mov	r0, r5
 801e91a:	f04f 0c00 	mov.w	ip, #0
 801e91e:	f858 2b04 	ldr.w	r2, [r8], #4
 801e922:	f8d0 e000 	ldr.w	lr, [r0]
 801e926:	b293      	uxth	r3, r2
 801e928:	ebac 0303 	sub.w	r3, ip, r3
 801e92c:	0c12      	lsrs	r2, r2, #16
 801e92e:	fa13 f38e 	uxtah	r3, r3, lr
 801e932:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801e936:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801e93a:	b29b      	uxth	r3, r3
 801e93c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e940:	45c1      	cmp	r9, r8
 801e942:	f840 3b04 	str.w	r3, [r0], #4
 801e946:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801e94a:	d2e8      	bcs.n	801e91e <quorem+0xb0>
 801e94c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e950:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e954:	b922      	cbnz	r2, 801e960 <quorem+0xf2>
 801e956:	3b04      	subs	r3, #4
 801e958:	429d      	cmp	r5, r3
 801e95a:	461a      	mov	r2, r3
 801e95c:	d30a      	bcc.n	801e974 <quorem+0x106>
 801e95e:	613c      	str	r4, [r7, #16]
 801e960:	4630      	mov	r0, r6
 801e962:	b003      	add	sp, #12
 801e964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e968:	6812      	ldr	r2, [r2, #0]
 801e96a:	3b04      	subs	r3, #4
 801e96c:	2a00      	cmp	r2, #0
 801e96e:	d1cc      	bne.n	801e90a <quorem+0x9c>
 801e970:	3c01      	subs	r4, #1
 801e972:	e7c7      	b.n	801e904 <quorem+0x96>
 801e974:	6812      	ldr	r2, [r2, #0]
 801e976:	3b04      	subs	r3, #4
 801e978:	2a00      	cmp	r2, #0
 801e97a:	d1f0      	bne.n	801e95e <quorem+0xf0>
 801e97c:	3c01      	subs	r4, #1
 801e97e:	e7eb      	b.n	801e958 <quorem+0xea>
 801e980:	2000      	movs	r0, #0
 801e982:	e7ee      	b.n	801e962 <quorem+0xf4>
 801e984:	0000      	movs	r0, r0
	...

0801e988 <_dtoa_r>:
 801e988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e98c:	ec59 8b10 	vmov	r8, r9, d0
 801e990:	b095      	sub	sp, #84	; 0x54
 801e992:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801e994:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801e996:	9107      	str	r1, [sp, #28]
 801e998:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801e99c:	4606      	mov	r6, r0
 801e99e:	9209      	str	r2, [sp, #36]	; 0x24
 801e9a0:	9310      	str	r3, [sp, #64]	; 0x40
 801e9a2:	b975      	cbnz	r5, 801e9c2 <_dtoa_r+0x3a>
 801e9a4:	2010      	movs	r0, #16
 801e9a6:	f7fd fe6b 	bl	801c680 <malloc>
 801e9aa:	4602      	mov	r2, r0
 801e9ac:	6270      	str	r0, [r6, #36]	; 0x24
 801e9ae:	b920      	cbnz	r0, 801e9ba <_dtoa_r+0x32>
 801e9b0:	4bab      	ldr	r3, [pc, #684]	; (801ec60 <_dtoa_r+0x2d8>)
 801e9b2:	21ea      	movs	r1, #234	; 0xea
 801e9b4:	48ab      	ldr	r0, [pc, #684]	; (801ec64 <_dtoa_r+0x2dc>)
 801e9b6:	f7fd fe05 	bl	801c5c4 <__assert_func>
 801e9ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801e9be:	6005      	str	r5, [r0, #0]
 801e9c0:	60c5      	str	r5, [r0, #12]
 801e9c2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801e9c4:	6819      	ldr	r1, [r3, #0]
 801e9c6:	b151      	cbz	r1, 801e9de <_dtoa_r+0x56>
 801e9c8:	685a      	ldr	r2, [r3, #4]
 801e9ca:	604a      	str	r2, [r1, #4]
 801e9cc:	2301      	movs	r3, #1
 801e9ce:	4093      	lsls	r3, r2
 801e9d0:	608b      	str	r3, [r1, #8]
 801e9d2:	4630      	mov	r0, r6
 801e9d4:	f001 fb4a 	bl	802006c <_Bfree>
 801e9d8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801e9da:	2200      	movs	r2, #0
 801e9dc:	601a      	str	r2, [r3, #0]
 801e9de:	f1b9 0300 	subs.w	r3, r9, #0
 801e9e2:	bfbb      	ittet	lt
 801e9e4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801e9e8:	9303      	strlt	r3, [sp, #12]
 801e9ea:	2300      	movge	r3, #0
 801e9ec:	2201      	movlt	r2, #1
 801e9ee:	bfac      	ite	ge
 801e9f0:	6023      	strge	r3, [r4, #0]
 801e9f2:	6022      	strlt	r2, [r4, #0]
 801e9f4:	4b9c      	ldr	r3, [pc, #624]	; (801ec68 <_dtoa_r+0x2e0>)
 801e9f6:	9c03      	ldr	r4, [sp, #12]
 801e9f8:	43a3      	bics	r3, r4
 801e9fa:	d11a      	bne.n	801ea32 <_dtoa_r+0xaa>
 801e9fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e9fe:	f242 730f 	movw	r3, #9999	; 0x270f
 801ea02:	6013      	str	r3, [r2, #0]
 801ea04:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801ea08:	ea53 0308 	orrs.w	r3, r3, r8
 801ea0c:	f000 8512 	beq.w	801f434 <_dtoa_r+0xaac>
 801ea10:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ea12:	b953      	cbnz	r3, 801ea2a <_dtoa_r+0xa2>
 801ea14:	4b95      	ldr	r3, [pc, #596]	; (801ec6c <_dtoa_r+0x2e4>)
 801ea16:	e01f      	b.n	801ea58 <_dtoa_r+0xd0>
 801ea18:	4b95      	ldr	r3, [pc, #596]	; (801ec70 <_dtoa_r+0x2e8>)
 801ea1a:	9300      	str	r3, [sp, #0]
 801ea1c:	3308      	adds	r3, #8
 801ea1e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801ea20:	6013      	str	r3, [r2, #0]
 801ea22:	9800      	ldr	r0, [sp, #0]
 801ea24:	b015      	add	sp, #84	; 0x54
 801ea26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea2a:	4b90      	ldr	r3, [pc, #576]	; (801ec6c <_dtoa_r+0x2e4>)
 801ea2c:	9300      	str	r3, [sp, #0]
 801ea2e:	3303      	adds	r3, #3
 801ea30:	e7f5      	b.n	801ea1e <_dtoa_r+0x96>
 801ea32:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ea36:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ea3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ea3e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801ea42:	d10b      	bne.n	801ea5c <_dtoa_r+0xd4>
 801ea44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ea46:	2301      	movs	r3, #1
 801ea48:	6013      	str	r3, [r2, #0]
 801ea4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ea4c:	2b00      	cmp	r3, #0
 801ea4e:	f000 84ee 	beq.w	801f42e <_dtoa_r+0xaa6>
 801ea52:	4888      	ldr	r0, [pc, #544]	; (801ec74 <_dtoa_r+0x2ec>)
 801ea54:	6018      	str	r0, [r3, #0]
 801ea56:	1e43      	subs	r3, r0, #1
 801ea58:	9300      	str	r3, [sp, #0]
 801ea5a:	e7e2      	b.n	801ea22 <_dtoa_r+0x9a>
 801ea5c:	a913      	add	r1, sp, #76	; 0x4c
 801ea5e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801ea62:	aa12      	add	r2, sp, #72	; 0x48
 801ea64:	4630      	mov	r0, r6
 801ea66:	f001 fea9 	bl	80207bc <__d2b>
 801ea6a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801ea6e:	4605      	mov	r5, r0
 801ea70:	9812      	ldr	r0, [sp, #72]	; 0x48
 801ea72:	2900      	cmp	r1, #0
 801ea74:	d047      	beq.n	801eb06 <_dtoa_r+0x17e>
 801ea76:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ea78:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801ea7c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801ea80:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801ea84:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801ea88:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801ea8c:	2400      	movs	r4, #0
 801ea8e:	ec43 2b16 	vmov	d6, r2, r3
 801ea92:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801ea96:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 801ec48 <_dtoa_r+0x2c0>
 801ea9a:	ee36 7b47 	vsub.f64	d7, d6, d7
 801ea9e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 801ec50 <_dtoa_r+0x2c8>
 801eaa2:	eea7 6b05 	vfma.f64	d6, d7, d5
 801eaa6:	eeb0 7b46 	vmov.f64	d7, d6
 801eaaa:	ee06 1a90 	vmov	s13, r1
 801eaae:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 801eab2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 801ec58 <_dtoa_r+0x2d0>
 801eab6:	eea5 7b06 	vfma.f64	d7, d5, d6
 801eaba:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801eabe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801eac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eac6:	ee16 ba90 	vmov	fp, s13
 801eaca:	9411      	str	r4, [sp, #68]	; 0x44
 801eacc:	d508      	bpl.n	801eae0 <_dtoa_r+0x158>
 801eace:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801ead2:	eeb4 6b47 	vcmp.f64	d6, d7
 801ead6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eada:	bf18      	it	ne
 801eadc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801eae0:	f1bb 0f16 	cmp.w	fp, #22
 801eae4:	d832      	bhi.n	801eb4c <_dtoa_r+0x1c4>
 801eae6:	4b64      	ldr	r3, [pc, #400]	; (801ec78 <_dtoa_r+0x2f0>)
 801eae8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801eaec:	ed93 7b00 	vldr	d7, [r3]
 801eaf0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801eaf4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801eaf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eafc:	d501      	bpl.n	801eb02 <_dtoa_r+0x17a>
 801eafe:	f10b 3bff 	add.w	fp, fp, #4294967295
 801eb02:	2300      	movs	r3, #0
 801eb04:	e023      	b.n	801eb4e <_dtoa_r+0x1c6>
 801eb06:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801eb08:	4401      	add	r1, r0
 801eb0a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 801eb0e:	2b20      	cmp	r3, #32
 801eb10:	bfc3      	ittte	gt
 801eb12:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801eb16:	fa04 f303 	lslgt.w	r3, r4, r3
 801eb1a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 801eb1e:	f1c3 0320 	rsble	r3, r3, #32
 801eb22:	bfc6      	itte	gt
 801eb24:	fa28 f804 	lsrgt.w	r8, r8, r4
 801eb28:	ea43 0308 	orrgt.w	r3, r3, r8
 801eb2c:	fa08 f303 	lslle.w	r3, r8, r3
 801eb30:	ee07 3a90 	vmov	s15, r3
 801eb34:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801eb38:	3901      	subs	r1, #1
 801eb3a:	ed8d 7b00 	vstr	d7, [sp]
 801eb3e:	9c01      	ldr	r4, [sp, #4]
 801eb40:	e9dd 2300 	ldrd	r2, r3, [sp]
 801eb44:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 801eb48:	2401      	movs	r4, #1
 801eb4a:	e7a0      	b.n	801ea8e <_dtoa_r+0x106>
 801eb4c:	2301      	movs	r3, #1
 801eb4e:	930f      	str	r3, [sp, #60]	; 0x3c
 801eb50:	1a43      	subs	r3, r0, r1
 801eb52:	1e5a      	subs	r2, r3, #1
 801eb54:	bf45      	ittet	mi
 801eb56:	f1c3 0301 	rsbmi	r3, r3, #1
 801eb5a:	9305      	strmi	r3, [sp, #20]
 801eb5c:	2300      	movpl	r3, #0
 801eb5e:	2300      	movmi	r3, #0
 801eb60:	9206      	str	r2, [sp, #24]
 801eb62:	bf54      	ite	pl
 801eb64:	9305      	strpl	r3, [sp, #20]
 801eb66:	9306      	strmi	r3, [sp, #24]
 801eb68:	f1bb 0f00 	cmp.w	fp, #0
 801eb6c:	db18      	blt.n	801eba0 <_dtoa_r+0x218>
 801eb6e:	9b06      	ldr	r3, [sp, #24]
 801eb70:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801eb74:	445b      	add	r3, fp
 801eb76:	9306      	str	r3, [sp, #24]
 801eb78:	2300      	movs	r3, #0
 801eb7a:	9a07      	ldr	r2, [sp, #28]
 801eb7c:	2a09      	cmp	r2, #9
 801eb7e:	d849      	bhi.n	801ec14 <_dtoa_r+0x28c>
 801eb80:	2a05      	cmp	r2, #5
 801eb82:	bfc4      	itt	gt
 801eb84:	3a04      	subgt	r2, #4
 801eb86:	9207      	strgt	r2, [sp, #28]
 801eb88:	9a07      	ldr	r2, [sp, #28]
 801eb8a:	f1a2 0202 	sub.w	r2, r2, #2
 801eb8e:	bfcc      	ite	gt
 801eb90:	2400      	movgt	r4, #0
 801eb92:	2401      	movle	r4, #1
 801eb94:	2a03      	cmp	r2, #3
 801eb96:	d848      	bhi.n	801ec2a <_dtoa_r+0x2a2>
 801eb98:	e8df f002 	tbb	[pc, r2]
 801eb9c:	3a2c2e0b 	.word	0x3a2c2e0b
 801eba0:	9b05      	ldr	r3, [sp, #20]
 801eba2:	2200      	movs	r2, #0
 801eba4:	eba3 030b 	sub.w	r3, r3, fp
 801eba8:	9305      	str	r3, [sp, #20]
 801ebaa:	920e      	str	r2, [sp, #56]	; 0x38
 801ebac:	f1cb 0300 	rsb	r3, fp, #0
 801ebb0:	e7e3      	b.n	801eb7a <_dtoa_r+0x1f2>
 801ebb2:	2200      	movs	r2, #0
 801ebb4:	9208      	str	r2, [sp, #32]
 801ebb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ebb8:	2a00      	cmp	r2, #0
 801ebba:	dc39      	bgt.n	801ec30 <_dtoa_r+0x2a8>
 801ebbc:	f04f 0a01 	mov.w	sl, #1
 801ebc0:	46d1      	mov	r9, sl
 801ebc2:	4652      	mov	r2, sl
 801ebc4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801ebc8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801ebca:	2100      	movs	r1, #0
 801ebcc:	6079      	str	r1, [r7, #4]
 801ebce:	2004      	movs	r0, #4
 801ebd0:	f100 0c14 	add.w	ip, r0, #20
 801ebd4:	4594      	cmp	ip, r2
 801ebd6:	6879      	ldr	r1, [r7, #4]
 801ebd8:	d92f      	bls.n	801ec3a <_dtoa_r+0x2b2>
 801ebda:	4630      	mov	r0, r6
 801ebdc:	930c      	str	r3, [sp, #48]	; 0x30
 801ebde:	f001 fa05 	bl	801ffec <_Balloc>
 801ebe2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ebe4:	9000      	str	r0, [sp, #0]
 801ebe6:	4602      	mov	r2, r0
 801ebe8:	2800      	cmp	r0, #0
 801ebea:	d149      	bne.n	801ec80 <_dtoa_r+0x2f8>
 801ebec:	4b23      	ldr	r3, [pc, #140]	; (801ec7c <_dtoa_r+0x2f4>)
 801ebee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801ebf2:	e6df      	b.n	801e9b4 <_dtoa_r+0x2c>
 801ebf4:	2201      	movs	r2, #1
 801ebf6:	e7dd      	b.n	801ebb4 <_dtoa_r+0x22c>
 801ebf8:	2200      	movs	r2, #0
 801ebfa:	9208      	str	r2, [sp, #32]
 801ebfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ebfe:	eb0b 0a02 	add.w	sl, fp, r2
 801ec02:	f10a 0901 	add.w	r9, sl, #1
 801ec06:	464a      	mov	r2, r9
 801ec08:	2a01      	cmp	r2, #1
 801ec0a:	bfb8      	it	lt
 801ec0c:	2201      	movlt	r2, #1
 801ec0e:	e7db      	b.n	801ebc8 <_dtoa_r+0x240>
 801ec10:	2201      	movs	r2, #1
 801ec12:	e7f2      	b.n	801ebfa <_dtoa_r+0x272>
 801ec14:	2401      	movs	r4, #1
 801ec16:	2200      	movs	r2, #0
 801ec18:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801ec1c:	f04f 3aff 	mov.w	sl, #4294967295
 801ec20:	2100      	movs	r1, #0
 801ec22:	46d1      	mov	r9, sl
 801ec24:	2212      	movs	r2, #18
 801ec26:	9109      	str	r1, [sp, #36]	; 0x24
 801ec28:	e7ce      	b.n	801ebc8 <_dtoa_r+0x240>
 801ec2a:	2201      	movs	r2, #1
 801ec2c:	9208      	str	r2, [sp, #32]
 801ec2e:	e7f5      	b.n	801ec1c <_dtoa_r+0x294>
 801ec30:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 801ec34:	46d1      	mov	r9, sl
 801ec36:	4652      	mov	r2, sl
 801ec38:	e7c6      	b.n	801ebc8 <_dtoa_r+0x240>
 801ec3a:	3101      	adds	r1, #1
 801ec3c:	6079      	str	r1, [r7, #4]
 801ec3e:	0040      	lsls	r0, r0, #1
 801ec40:	e7c6      	b.n	801ebd0 <_dtoa_r+0x248>
 801ec42:	bf00      	nop
 801ec44:	f3af 8000 	nop.w
 801ec48:	636f4361 	.word	0x636f4361
 801ec4c:	3fd287a7 	.word	0x3fd287a7
 801ec50:	8b60c8b3 	.word	0x8b60c8b3
 801ec54:	3fc68a28 	.word	0x3fc68a28
 801ec58:	509f79fb 	.word	0x509f79fb
 801ec5c:	3fd34413 	.word	0x3fd34413
 801ec60:	0802a6f6 	.word	0x0802a6f6
 801ec64:	0802a70d 	.word	0x0802a70d
 801ec68:	7ff00000 	.word	0x7ff00000
 801ec6c:	0802a6f2 	.word	0x0802a6f2
 801ec70:	0802a6e9 	.word	0x0802a6e9
 801ec74:	0802a56a 	.word	0x0802a56a
 801ec78:	0802a8e8 	.word	0x0802a8e8
 801ec7c:	0802a76c 	.word	0x0802a76c
 801ec80:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801ec82:	9900      	ldr	r1, [sp, #0]
 801ec84:	6011      	str	r1, [r2, #0]
 801ec86:	f1b9 0f0e 	cmp.w	r9, #14
 801ec8a:	d872      	bhi.n	801ed72 <_dtoa_r+0x3ea>
 801ec8c:	2c00      	cmp	r4, #0
 801ec8e:	d070      	beq.n	801ed72 <_dtoa_r+0x3ea>
 801ec90:	f1bb 0f00 	cmp.w	fp, #0
 801ec94:	f340 80a6 	ble.w	801ede4 <_dtoa_r+0x45c>
 801ec98:	49ca      	ldr	r1, [pc, #808]	; (801efc4 <_dtoa_r+0x63c>)
 801ec9a:	f00b 020f 	and.w	r2, fp, #15
 801ec9e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801eca2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801eca6:	ed92 7b00 	vldr	d7, [r2]
 801ecaa:	ea4f 112b 	mov.w	r1, fp, asr #4
 801ecae:	f000 808d 	beq.w	801edcc <_dtoa_r+0x444>
 801ecb2:	4ac5      	ldr	r2, [pc, #788]	; (801efc8 <_dtoa_r+0x640>)
 801ecb4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 801ecb8:	ed92 6b08 	vldr	d6, [r2, #32]
 801ecbc:	ee85 6b06 	vdiv.f64	d6, d5, d6
 801ecc0:	ed8d 6b02 	vstr	d6, [sp, #8]
 801ecc4:	f001 010f 	and.w	r1, r1, #15
 801ecc8:	2203      	movs	r2, #3
 801ecca:	48bf      	ldr	r0, [pc, #764]	; (801efc8 <_dtoa_r+0x640>)
 801eccc:	2900      	cmp	r1, #0
 801ecce:	d17f      	bne.n	801edd0 <_dtoa_r+0x448>
 801ecd0:	ed9d 6b02 	vldr	d6, [sp, #8]
 801ecd4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801ecd8:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ecdc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801ecde:	2900      	cmp	r1, #0
 801ece0:	f000 80b2 	beq.w	801ee48 <_dtoa_r+0x4c0>
 801ece4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801ece8:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ecec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801ecf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ecf4:	f140 80a8 	bpl.w	801ee48 <_dtoa_r+0x4c0>
 801ecf8:	f1b9 0f00 	cmp.w	r9, #0
 801ecfc:	f000 80a4 	beq.w	801ee48 <_dtoa_r+0x4c0>
 801ed00:	f1ba 0f00 	cmp.w	sl, #0
 801ed04:	dd31      	ble.n	801ed6a <_dtoa_r+0x3e2>
 801ed06:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801ed0a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ed0e:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ed12:	f10b 37ff 	add.w	r7, fp, #4294967295
 801ed16:	3201      	adds	r2, #1
 801ed18:	4650      	mov	r0, sl
 801ed1a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801ed1e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801ed22:	ee07 2a90 	vmov	s15, r2
 801ed26:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801ed2a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801ed2e:	ed8d 5b02 	vstr	d5, [sp, #8]
 801ed32:	9c03      	ldr	r4, [sp, #12]
 801ed34:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801ed38:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801ed3c:	2800      	cmp	r0, #0
 801ed3e:	f040 8086 	bne.w	801ee4e <_dtoa_r+0x4c6>
 801ed42:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801ed46:	ee36 6b47 	vsub.f64	d6, d6, d7
 801ed4a:	ec42 1b17 	vmov	d7, r1, r2
 801ed4e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ed52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ed56:	f300 8272 	bgt.w	801f23e <_dtoa_r+0x8b6>
 801ed5a:	eeb1 7b47 	vneg.f64	d7, d7
 801ed5e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ed62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ed66:	f100 8267 	bmi.w	801f238 <_dtoa_r+0x8b0>
 801ed6a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 801ed6e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801ed72:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ed74:	2a00      	cmp	r2, #0
 801ed76:	f2c0 8129 	blt.w	801efcc <_dtoa_r+0x644>
 801ed7a:	f1bb 0f0e 	cmp.w	fp, #14
 801ed7e:	f300 8125 	bgt.w	801efcc <_dtoa_r+0x644>
 801ed82:	4b90      	ldr	r3, [pc, #576]	; (801efc4 <_dtoa_r+0x63c>)
 801ed84:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801ed88:	ed93 6b00 	vldr	d6, [r3]
 801ed8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ed8e:	2b00      	cmp	r3, #0
 801ed90:	f280 80c3 	bge.w	801ef1a <_dtoa_r+0x592>
 801ed94:	f1b9 0f00 	cmp.w	r9, #0
 801ed98:	f300 80bf 	bgt.w	801ef1a <_dtoa_r+0x592>
 801ed9c:	f040 824c 	bne.w	801f238 <_dtoa_r+0x8b0>
 801eda0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801eda4:	ee26 6b07 	vmul.f64	d6, d6, d7
 801eda8:	ed9d 7b02 	vldr	d7, [sp, #8]
 801edac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801edb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801edb4:	464c      	mov	r4, r9
 801edb6:	464f      	mov	r7, r9
 801edb8:	f280 8222 	bge.w	801f200 <_dtoa_r+0x878>
 801edbc:	f8dd 8000 	ldr.w	r8, [sp]
 801edc0:	2331      	movs	r3, #49	; 0x31
 801edc2:	f808 3b01 	strb.w	r3, [r8], #1
 801edc6:	f10b 0b01 	add.w	fp, fp, #1
 801edca:	e21e      	b.n	801f20a <_dtoa_r+0x882>
 801edcc:	2202      	movs	r2, #2
 801edce:	e77c      	b.n	801ecca <_dtoa_r+0x342>
 801edd0:	07cc      	lsls	r4, r1, #31
 801edd2:	d504      	bpl.n	801edde <_dtoa_r+0x456>
 801edd4:	ed90 6b00 	vldr	d6, [r0]
 801edd8:	3201      	adds	r2, #1
 801edda:	ee27 7b06 	vmul.f64	d7, d7, d6
 801edde:	1049      	asrs	r1, r1, #1
 801ede0:	3008      	adds	r0, #8
 801ede2:	e773      	b.n	801eccc <_dtoa_r+0x344>
 801ede4:	d02e      	beq.n	801ee44 <_dtoa_r+0x4bc>
 801ede6:	f1cb 0100 	rsb	r1, fp, #0
 801edea:	4a76      	ldr	r2, [pc, #472]	; (801efc4 <_dtoa_r+0x63c>)
 801edec:	f001 000f 	and.w	r0, r1, #15
 801edf0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801edf4:	ed92 7b00 	vldr	d7, [r2]
 801edf8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801edfc:	ee26 7b07 	vmul.f64	d7, d6, d7
 801ee00:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801ee04:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 801ee08:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801ee0c:	486e      	ldr	r0, [pc, #440]	; (801efc8 <_dtoa_r+0x640>)
 801ee0e:	1109      	asrs	r1, r1, #4
 801ee10:	2400      	movs	r4, #0
 801ee12:	2202      	movs	r2, #2
 801ee14:	b939      	cbnz	r1, 801ee26 <_dtoa_r+0x49e>
 801ee16:	2c00      	cmp	r4, #0
 801ee18:	f43f af60 	beq.w	801ecdc <_dtoa_r+0x354>
 801ee1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801ee20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ee24:	e75a      	b.n	801ecdc <_dtoa_r+0x354>
 801ee26:	07cf      	lsls	r7, r1, #31
 801ee28:	d509      	bpl.n	801ee3e <_dtoa_r+0x4b6>
 801ee2a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801ee2e:	ed90 7b00 	vldr	d7, [r0]
 801ee32:	ee26 7b07 	vmul.f64	d7, d6, d7
 801ee36:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801ee3a:	3201      	adds	r2, #1
 801ee3c:	2401      	movs	r4, #1
 801ee3e:	1049      	asrs	r1, r1, #1
 801ee40:	3008      	adds	r0, #8
 801ee42:	e7e7      	b.n	801ee14 <_dtoa_r+0x48c>
 801ee44:	2202      	movs	r2, #2
 801ee46:	e749      	b.n	801ecdc <_dtoa_r+0x354>
 801ee48:	465f      	mov	r7, fp
 801ee4a:	4648      	mov	r0, r9
 801ee4c:	e765      	b.n	801ed1a <_dtoa_r+0x392>
 801ee4e:	ec42 1b17 	vmov	d7, r1, r2
 801ee52:	4a5c      	ldr	r2, [pc, #368]	; (801efc4 <_dtoa_r+0x63c>)
 801ee54:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801ee58:	ed12 4b02 	vldr	d4, [r2, #-8]
 801ee5c:	9a00      	ldr	r2, [sp, #0]
 801ee5e:	1814      	adds	r4, r2, r0
 801ee60:	9a08      	ldr	r2, [sp, #32]
 801ee62:	b352      	cbz	r2, 801eeba <_dtoa_r+0x532>
 801ee64:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801ee68:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801ee6c:	f8dd 8000 	ldr.w	r8, [sp]
 801ee70:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801ee74:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801ee78:	ee35 7b47 	vsub.f64	d7, d5, d7
 801ee7c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801ee80:	ee14 2a90 	vmov	r2, s9
 801ee84:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801ee88:	3230      	adds	r2, #48	; 0x30
 801ee8a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801ee8e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ee92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee96:	f808 2b01 	strb.w	r2, [r8], #1
 801ee9a:	d439      	bmi.n	801ef10 <_dtoa_r+0x588>
 801ee9c:	ee32 5b46 	vsub.f64	d5, d2, d6
 801eea0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801eea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eea8:	d472      	bmi.n	801ef90 <_dtoa_r+0x608>
 801eeaa:	45a0      	cmp	r8, r4
 801eeac:	f43f af5d 	beq.w	801ed6a <_dtoa_r+0x3e2>
 801eeb0:	ee27 7b03 	vmul.f64	d7, d7, d3
 801eeb4:	ee26 6b03 	vmul.f64	d6, d6, d3
 801eeb8:	e7e0      	b.n	801ee7c <_dtoa_r+0x4f4>
 801eeba:	f8dd 8000 	ldr.w	r8, [sp]
 801eebe:	ee27 7b04 	vmul.f64	d7, d7, d4
 801eec2:	4621      	mov	r1, r4
 801eec4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801eec8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801eecc:	ee14 2a90 	vmov	r2, s9
 801eed0:	3230      	adds	r2, #48	; 0x30
 801eed2:	f808 2b01 	strb.w	r2, [r8], #1
 801eed6:	45a0      	cmp	r8, r4
 801eed8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801eedc:	ee36 6b45 	vsub.f64	d6, d6, d5
 801eee0:	d118      	bne.n	801ef14 <_dtoa_r+0x58c>
 801eee2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801eee6:	ee37 4b05 	vadd.f64	d4, d7, d5
 801eeea:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801eeee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eef2:	dc4d      	bgt.n	801ef90 <_dtoa_r+0x608>
 801eef4:	ee35 7b47 	vsub.f64	d7, d5, d7
 801eef8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801eefc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef00:	f57f af33 	bpl.w	801ed6a <_dtoa_r+0x3e2>
 801ef04:	4688      	mov	r8, r1
 801ef06:	3901      	subs	r1, #1
 801ef08:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801ef0c:	2b30      	cmp	r3, #48	; 0x30
 801ef0e:	d0f9      	beq.n	801ef04 <_dtoa_r+0x57c>
 801ef10:	46bb      	mov	fp, r7
 801ef12:	e02a      	b.n	801ef6a <_dtoa_r+0x5e2>
 801ef14:	ee26 6b03 	vmul.f64	d6, d6, d3
 801ef18:	e7d6      	b.n	801eec8 <_dtoa_r+0x540>
 801ef1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ef1e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801ef22:	f8dd 8000 	ldr.w	r8, [sp]
 801ef26:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801ef2a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801ef2e:	ee15 3a10 	vmov	r3, s10
 801ef32:	3330      	adds	r3, #48	; 0x30
 801ef34:	f808 3b01 	strb.w	r3, [r8], #1
 801ef38:	9b00      	ldr	r3, [sp, #0]
 801ef3a:	eba8 0303 	sub.w	r3, r8, r3
 801ef3e:	4599      	cmp	r9, r3
 801ef40:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801ef44:	eea3 7b46 	vfms.f64	d7, d3, d6
 801ef48:	d133      	bne.n	801efb2 <_dtoa_r+0x62a>
 801ef4a:	ee37 7b07 	vadd.f64	d7, d7, d7
 801ef4e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801ef52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef56:	dc1a      	bgt.n	801ef8e <_dtoa_r+0x606>
 801ef58:	eeb4 7b46 	vcmp.f64	d7, d6
 801ef5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ef60:	d103      	bne.n	801ef6a <_dtoa_r+0x5e2>
 801ef62:	ee15 3a10 	vmov	r3, s10
 801ef66:	07d9      	lsls	r1, r3, #31
 801ef68:	d411      	bmi.n	801ef8e <_dtoa_r+0x606>
 801ef6a:	4629      	mov	r1, r5
 801ef6c:	4630      	mov	r0, r6
 801ef6e:	f001 f87d 	bl	802006c <_Bfree>
 801ef72:	2300      	movs	r3, #0
 801ef74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ef76:	f888 3000 	strb.w	r3, [r8]
 801ef7a:	f10b 0301 	add.w	r3, fp, #1
 801ef7e:	6013      	str	r3, [r2, #0]
 801ef80:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ef82:	2b00      	cmp	r3, #0
 801ef84:	f43f ad4d 	beq.w	801ea22 <_dtoa_r+0x9a>
 801ef88:	f8c3 8000 	str.w	r8, [r3]
 801ef8c:	e549      	b.n	801ea22 <_dtoa_r+0x9a>
 801ef8e:	465f      	mov	r7, fp
 801ef90:	4643      	mov	r3, r8
 801ef92:	4698      	mov	r8, r3
 801ef94:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ef98:	2a39      	cmp	r2, #57	; 0x39
 801ef9a:	d106      	bne.n	801efaa <_dtoa_r+0x622>
 801ef9c:	9a00      	ldr	r2, [sp, #0]
 801ef9e:	429a      	cmp	r2, r3
 801efa0:	d1f7      	bne.n	801ef92 <_dtoa_r+0x60a>
 801efa2:	9900      	ldr	r1, [sp, #0]
 801efa4:	2230      	movs	r2, #48	; 0x30
 801efa6:	3701      	adds	r7, #1
 801efa8:	700a      	strb	r2, [r1, #0]
 801efaa:	781a      	ldrb	r2, [r3, #0]
 801efac:	3201      	adds	r2, #1
 801efae:	701a      	strb	r2, [r3, #0]
 801efb0:	e7ae      	b.n	801ef10 <_dtoa_r+0x588>
 801efb2:	ee27 7b04 	vmul.f64	d7, d7, d4
 801efb6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801efba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801efbe:	d1b2      	bne.n	801ef26 <_dtoa_r+0x59e>
 801efc0:	e7d3      	b.n	801ef6a <_dtoa_r+0x5e2>
 801efc2:	bf00      	nop
 801efc4:	0802a8e8 	.word	0x0802a8e8
 801efc8:	0802a8c0 	.word	0x0802a8c0
 801efcc:	9908      	ldr	r1, [sp, #32]
 801efce:	2900      	cmp	r1, #0
 801efd0:	f000 80d1 	beq.w	801f176 <_dtoa_r+0x7ee>
 801efd4:	9907      	ldr	r1, [sp, #28]
 801efd6:	2901      	cmp	r1, #1
 801efd8:	f300 80b4 	bgt.w	801f144 <_dtoa_r+0x7bc>
 801efdc:	9911      	ldr	r1, [sp, #68]	; 0x44
 801efde:	2900      	cmp	r1, #0
 801efe0:	f000 80ac 	beq.w	801f13c <_dtoa_r+0x7b4>
 801efe4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801efe8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801efec:	461c      	mov	r4, r3
 801efee:	930a      	str	r3, [sp, #40]	; 0x28
 801eff0:	9b05      	ldr	r3, [sp, #20]
 801eff2:	4413      	add	r3, r2
 801eff4:	9305      	str	r3, [sp, #20]
 801eff6:	9b06      	ldr	r3, [sp, #24]
 801eff8:	2101      	movs	r1, #1
 801effa:	4413      	add	r3, r2
 801effc:	4630      	mov	r0, r6
 801effe:	9306      	str	r3, [sp, #24]
 801f000:	f001 f93a 	bl	8020278 <__i2b>
 801f004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f006:	4607      	mov	r7, r0
 801f008:	f1b8 0f00 	cmp.w	r8, #0
 801f00c:	dd0d      	ble.n	801f02a <_dtoa_r+0x6a2>
 801f00e:	9a06      	ldr	r2, [sp, #24]
 801f010:	2a00      	cmp	r2, #0
 801f012:	dd0a      	ble.n	801f02a <_dtoa_r+0x6a2>
 801f014:	4542      	cmp	r2, r8
 801f016:	9905      	ldr	r1, [sp, #20]
 801f018:	bfa8      	it	ge
 801f01a:	4642      	movge	r2, r8
 801f01c:	1a89      	subs	r1, r1, r2
 801f01e:	9105      	str	r1, [sp, #20]
 801f020:	9906      	ldr	r1, [sp, #24]
 801f022:	eba8 0802 	sub.w	r8, r8, r2
 801f026:	1a8a      	subs	r2, r1, r2
 801f028:	9206      	str	r2, [sp, #24]
 801f02a:	b303      	cbz	r3, 801f06e <_dtoa_r+0x6e6>
 801f02c:	9a08      	ldr	r2, [sp, #32]
 801f02e:	2a00      	cmp	r2, #0
 801f030:	f000 80a6 	beq.w	801f180 <_dtoa_r+0x7f8>
 801f034:	2c00      	cmp	r4, #0
 801f036:	dd13      	ble.n	801f060 <_dtoa_r+0x6d8>
 801f038:	4639      	mov	r1, r7
 801f03a:	4622      	mov	r2, r4
 801f03c:	4630      	mov	r0, r6
 801f03e:	930c      	str	r3, [sp, #48]	; 0x30
 801f040:	f001 f9d6 	bl	80203f0 <__pow5mult>
 801f044:	462a      	mov	r2, r5
 801f046:	4601      	mov	r1, r0
 801f048:	4607      	mov	r7, r0
 801f04a:	4630      	mov	r0, r6
 801f04c:	f001 f92a 	bl	80202a4 <__multiply>
 801f050:	4629      	mov	r1, r5
 801f052:	900a      	str	r0, [sp, #40]	; 0x28
 801f054:	4630      	mov	r0, r6
 801f056:	f001 f809 	bl	802006c <_Bfree>
 801f05a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f05c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f05e:	4615      	mov	r5, r2
 801f060:	1b1a      	subs	r2, r3, r4
 801f062:	d004      	beq.n	801f06e <_dtoa_r+0x6e6>
 801f064:	4629      	mov	r1, r5
 801f066:	4630      	mov	r0, r6
 801f068:	f001 f9c2 	bl	80203f0 <__pow5mult>
 801f06c:	4605      	mov	r5, r0
 801f06e:	2101      	movs	r1, #1
 801f070:	4630      	mov	r0, r6
 801f072:	f001 f901 	bl	8020278 <__i2b>
 801f076:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f078:	2b00      	cmp	r3, #0
 801f07a:	4604      	mov	r4, r0
 801f07c:	f340 8082 	ble.w	801f184 <_dtoa_r+0x7fc>
 801f080:	461a      	mov	r2, r3
 801f082:	4601      	mov	r1, r0
 801f084:	4630      	mov	r0, r6
 801f086:	f001 f9b3 	bl	80203f0 <__pow5mult>
 801f08a:	9b07      	ldr	r3, [sp, #28]
 801f08c:	2b01      	cmp	r3, #1
 801f08e:	4604      	mov	r4, r0
 801f090:	dd7b      	ble.n	801f18a <_dtoa_r+0x802>
 801f092:	2300      	movs	r3, #0
 801f094:	930a      	str	r3, [sp, #40]	; 0x28
 801f096:	6922      	ldr	r2, [r4, #16]
 801f098:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801f09c:	6910      	ldr	r0, [r2, #16]
 801f09e:	f001 f89b 	bl	80201d8 <__hi0bits>
 801f0a2:	f1c0 0020 	rsb	r0, r0, #32
 801f0a6:	9b06      	ldr	r3, [sp, #24]
 801f0a8:	4418      	add	r0, r3
 801f0aa:	f010 001f 	ands.w	r0, r0, #31
 801f0ae:	f000 808d 	beq.w	801f1cc <_dtoa_r+0x844>
 801f0b2:	f1c0 0220 	rsb	r2, r0, #32
 801f0b6:	2a04      	cmp	r2, #4
 801f0b8:	f340 8086 	ble.w	801f1c8 <_dtoa_r+0x840>
 801f0bc:	f1c0 001c 	rsb	r0, r0, #28
 801f0c0:	9b05      	ldr	r3, [sp, #20]
 801f0c2:	4403      	add	r3, r0
 801f0c4:	9305      	str	r3, [sp, #20]
 801f0c6:	9b06      	ldr	r3, [sp, #24]
 801f0c8:	4403      	add	r3, r0
 801f0ca:	4480      	add	r8, r0
 801f0cc:	9306      	str	r3, [sp, #24]
 801f0ce:	9b05      	ldr	r3, [sp, #20]
 801f0d0:	2b00      	cmp	r3, #0
 801f0d2:	dd05      	ble.n	801f0e0 <_dtoa_r+0x758>
 801f0d4:	4629      	mov	r1, r5
 801f0d6:	461a      	mov	r2, r3
 801f0d8:	4630      	mov	r0, r6
 801f0da:	f001 f9e3 	bl	80204a4 <__lshift>
 801f0de:	4605      	mov	r5, r0
 801f0e0:	9b06      	ldr	r3, [sp, #24]
 801f0e2:	2b00      	cmp	r3, #0
 801f0e4:	dd05      	ble.n	801f0f2 <_dtoa_r+0x76a>
 801f0e6:	4621      	mov	r1, r4
 801f0e8:	461a      	mov	r2, r3
 801f0ea:	4630      	mov	r0, r6
 801f0ec:	f001 f9da 	bl	80204a4 <__lshift>
 801f0f0:	4604      	mov	r4, r0
 801f0f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f0f4:	2b00      	cmp	r3, #0
 801f0f6:	d06b      	beq.n	801f1d0 <_dtoa_r+0x848>
 801f0f8:	4621      	mov	r1, r4
 801f0fa:	4628      	mov	r0, r5
 801f0fc:	f001 fa3e 	bl	802057c <__mcmp>
 801f100:	2800      	cmp	r0, #0
 801f102:	da65      	bge.n	801f1d0 <_dtoa_r+0x848>
 801f104:	2300      	movs	r3, #0
 801f106:	4629      	mov	r1, r5
 801f108:	220a      	movs	r2, #10
 801f10a:	4630      	mov	r0, r6
 801f10c:	f000 ffd0 	bl	80200b0 <__multadd>
 801f110:	9b08      	ldr	r3, [sp, #32]
 801f112:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f116:	4605      	mov	r5, r0
 801f118:	2b00      	cmp	r3, #0
 801f11a:	f000 8192 	beq.w	801f442 <_dtoa_r+0xaba>
 801f11e:	4639      	mov	r1, r7
 801f120:	2300      	movs	r3, #0
 801f122:	220a      	movs	r2, #10
 801f124:	4630      	mov	r0, r6
 801f126:	f000 ffc3 	bl	80200b0 <__multadd>
 801f12a:	f1ba 0f00 	cmp.w	sl, #0
 801f12e:	4607      	mov	r7, r0
 801f130:	f300 808e 	bgt.w	801f250 <_dtoa_r+0x8c8>
 801f134:	9b07      	ldr	r3, [sp, #28]
 801f136:	2b02      	cmp	r3, #2
 801f138:	dc51      	bgt.n	801f1de <_dtoa_r+0x856>
 801f13a:	e089      	b.n	801f250 <_dtoa_r+0x8c8>
 801f13c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f13e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801f142:	e751      	b.n	801efe8 <_dtoa_r+0x660>
 801f144:	f109 34ff 	add.w	r4, r9, #4294967295
 801f148:	42a3      	cmp	r3, r4
 801f14a:	bfbf      	itttt	lt
 801f14c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 801f14e:	1ae3      	sublt	r3, r4, r3
 801f150:	18d2      	addlt	r2, r2, r3
 801f152:	4613      	movlt	r3, r2
 801f154:	bfb7      	itett	lt
 801f156:	930e      	strlt	r3, [sp, #56]	; 0x38
 801f158:	1b1c      	subge	r4, r3, r4
 801f15a:	4623      	movlt	r3, r4
 801f15c:	2400      	movlt	r4, #0
 801f15e:	f1b9 0f00 	cmp.w	r9, #0
 801f162:	bfb5      	itete	lt
 801f164:	9a05      	ldrlt	r2, [sp, #20]
 801f166:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 801f16a:	eba2 0809 	sublt.w	r8, r2, r9
 801f16e:	464a      	movge	r2, r9
 801f170:	bfb8      	it	lt
 801f172:	2200      	movlt	r2, #0
 801f174:	e73b      	b.n	801efee <_dtoa_r+0x666>
 801f176:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801f17a:	9f08      	ldr	r7, [sp, #32]
 801f17c:	461c      	mov	r4, r3
 801f17e:	e743      	b.n	801f008 <_dtoa_r+0x680>
 801f180:	461a      	mov	r2, r3
 801f182:	e76f      	b.n	801f064 <_dtoa_r+0x6dc>
 801f184:	9b07      	ldr	r3, [sp, #28]
 801f186:	2b01      	cmp	r3, #1
 801f188:	dc18      	bgt.n	801f1bc <_dtoa_r+0x834>
 801f18a:	9b02      	ldr	r3, [sp, #8]
 801f18c:	b9b3      	cbnz	r3, 801f1bc <_dtoa_r+0x834>
 801f18e:	9b03      	ldr	r3, [sp, #12]
 801f190:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801f194:	b9a2      	cbnz	r2, 801f1c0 <_dtoa_r+0x838>
 801f196:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801f19a:	0d12      	lsrs	r2, r2, #20
 801f19c:	0512      	lsls	r2, r2, #20
 801f19e:	b18a      	cbz	r2, 801f1c4 <_dtoa_r+0x83c>
 801f1a0:	9b05      	ldr	r3, [sp, #20]
 801f1a2:	3301      	adds	r3, #1
 801f1a4:	9305      	str	r3, [sp, #20]
 801f1a6:	9b06      	ldr	r3, [sp, #24]
 801f1a8:	3301      	adds	r3, #1
 801f1aa:	9306      	str	r3, [sp, #24]
 801f1ac:	2301      	movs	r3, #1
 801f1ae:	930a      	str	r3, [sp, #40]	; 0x28
 801f1b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f1b2:	2b00      	cmp	r3, #0
 801f1b4:	f47f af6f 	bne.w	801f096 <_dtoa_r+0x70e>
 801f1b8:	2001      	movs	r0, #1
 801f1ba:	e774      	b.n	801f0a6 <_dtoa_r+0x71e>
 801f1bc:	2300      	movs	r3, #0
 801f1be:	e7f6      	b.n	801f1ae <_dtoa_r+0x826>
 801f1c0:	9b02      	ldr	r3, [sp, #8]
 801f1c2:	e7f4      	b.n	801f1ae <_dtoa_r+0x826>
 801f1c4:	920a      	str	r2, [sp, #40]	; 0x28
 801f1c6:	e7f3      	b.n	801f1b0 <_dtoa_r+0x828>
 801f1c8:	d081      	beq.n	801f0ce <_dtoa_r+0x746>
 801f1ca:	4610      	mov	r0, r2
 801f1cc:	301c      	adds	r0, #28
 801f1ce:	e777      	b.n	801f0c0 <_dtoa_r+0x738>
 801f1d0:	f1b9 0f00 	cmp.w	r9, #0
 801f1d4:	dc37      	bgt.n	801f246 <_dtoa_r+0x8be>
 801f1d6:	9b07      	ldr	r3, [sp, #28]
 801f1d8:	2b02      	cmp	r3, #2
 801f1da:	dd34      	ble.n	801f246 <_dtoa_r+0x8be>
 801f1dc:	46ca      	mov	sl, r9
 801f1de:	f1ba 0f00 	cmp.w	sl, #0
 801f1e2:	d10d      	bne.n	801f200 <_dtoa_r+0x878>
 801f1e4:	4621      	mov	r1, r4
 801f1e6:	4653      	mov	r3, sl
 801f1e8:	2205      	movs	r2, #5
 801f1ea:	4630      	mov	r0, r6
 801f1ec:	f000 ff60 	bl	80200b0 <__multadd>
 801f1f0:	4601      	mov	r1, r0
 801f1f2:	4604      	mov	r4, r0
 801f1f4:	4628      	mov	r0, r5
 801f1f6:	f001 f9c1 	bl	802057c <__mcmp>
 801f1fa:	2800      	cmp	r0, #0
 801f1fc:	f73f adde 	bgt.w	801edbc <_dtoa_r+0x434>
 801f200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f202:	f8dd 8000 	ldr.w	r8, [sp]
 801f206:	ea6f 0b03 	mvn.w	fp, r3
 801f20a:	f04f 0900 	mov.w	r9, #0
 801f20e:	4621      	mov	r1, r4
 801f210:	4630      	mov	r0, r6
 801f212:	f000 ff2b 	bl	802006c <_Bfree>
 801f216:	2f00      	cmp	r7, #0
 801f218:	f43f aea7 	beq.w	801ef6a <_dtoa_r+0x5e2>
 801f21c:	f1b9 0f00 	cmp.w	r9, #0
 801f220:	d005      	beq.n	801f22e <_dtoa_r+0x8a6>
 801f222:	45b9      	cmp	r9, r7
 801f224:	d003      	beq.n	801f22e <_dtoa_r+0x8a6>
 801f226:	4649      	mov	r1, r9
 801f228:	4630      	mov	r0, r6
 801f22a:	f000 ff1f 	bl	802006c <_Bfree>
 801f22e:	4639      	mov	r1, r7
 801f230:	4630      	mov	r0, r6
 801f232:	f000 ff1b 	bl	802006c <_Bfree>
 801f236:	e698      	b.n	801ef6a <_dtoa_r+0x5e2>
 801f238:	2400      	movs	r4, #0
 801f23a:	4627      	mov	r7, r4
 801f23c:	e7e0      	b.n	801f200 <_dtoa_r+0x878>
 801f23e:	46bb      	mov	fp, r7
 801f240:	4604      	mov	r4, r0
 801f242:	4607      	mov	r7, r0
 801f244:	e5ba      	b.n	801edbc <_dtoa_r+0x434>
 801f246:	9b08      	ldr	r3, [sp, #32]
 801f248:	46ca      	mov	sl, r9
 801f24a:	2b00      	cmp	r3, #0
 801f24c:	f000 8100 	beq.w	801f450 <_dtoa_r+0xac8>
 801f250:	f1b8 0f00 	cmp.w	r8, #0
 801f254:	dd05      	ble.n	801f262 <_dtoa_r+0x8da>
 801f256:	4639      	mov	r1, r7
 801f258:	4642      	mov	r2, r8
 801f25a:	4630      	mov	r0, r6
 801f25c:	f001 f922 	bl	80204a4 <__lshift>
 801f260:	4607      	mov	r7, r0
 801f262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f264:	2b00      	cmp	r3, #0
 801f266:	d05d      	beq.n	801f324 <_dtoa_r+0x99c>
 801f268:	6879      	ldr	r1, [r7, #4]
 801f26a:	4630      	mov	r0, r6
 801f26c:	f000 febe 	bl	801ffec <_Balloc>
 801f270:	4680      	mov	r8, r0
 801f272:	b928      	cbnz	r0, 801f280 <_dtoa_r+0x8f8>
 801f274:	4b82      	ldr	r3, [pc, #520]	; (801f480 <_dtoa_r+0xaf8>)
 801f276:	4602      	mov	r2, r0
 801f278:	f240 21ea 	movw	r1, #746	; 0x2ea
 801f27c:	f7ff bb9a 	b.w	801e9b4 <_dtoa_r+0x2c>
 801f280:	693a      	ldr	r2, [r7, #16]
 801f282:	3202      	adds	r2, #2
 801f284:	0092      	lsls	r2, r2, #2
 801f286:	f107 010c 	add.w	r1, r7, #12
 801f28a:	300c      	adds	r0, #12
 801f28c:	f7fd fa08 	bl	801c6a0 <memcpy>
 801f290:	2201      	movs	r2, #1
 801f292:	4641      	mov	r1, r8
 801f294:	4630      	mov	r0, r6
 801f296:	f001 f905 	bl	80204a4 <__lshift>
 801f29a:	9b00      	ldr	r3, [sp, #0]
 801f29c:	3301      	adds	r3, #1
 801f29e:	9305      	str	r3, [sp, #20]
 801f2a0:	9b00      	ldr	r3, [sp, #0]
 801f2a2:	4453      	add	r3, sl
 801f2a4:	9309      	str	r3, [sp, #36]	; 0x24
 801f2a6:	9b02      	ldr	r3, [sp, #8]
 801f2a8:	f003 0301 	and.w	r3, r3, #1
 801f2ac:	46b9      	mov	r9, r7
 801f2ae:	9308      	str	r3, [sp, #32]
 801f2b0:	4607      	mov	r7, r0
 801f2b2:	9b05      	ldr	r3, [sp, #20]
 801f2b4:	4621      	mov	r1, r4
 801f2b6:	3b01      	subs	r3, #1
 801f2b8:	4628      	mov	r0, r5
 801f2ba:	9302      	str	r3, [sp, #8]
 801f2bc:	f7ff fad7 	bl	801e86e <quorem>
 801f2c0:	4603      	mov	r3, r0
 801f2c2:	3330      	adds	r3, #48	; 0x30
 801f2c4:	9006      	str	r0, [sp, #24]
 801f2c6:	4649      	mov	r1, r9
 801f2c8:	4628      	mov	r0, r5
 801f2ca:	930a      	str	r3, [sp, #40]	; 0x28
 801f2cc:	f001 f956 	bl	802057c <__mcmp>
 801f2d0:	463a      	mov	r2, r7
 801f2d2:	4682      	mov	sl, r0
 801f2d4:	4621      	mov	r1, r4
 801f2d6:	4630      	mov	r0, r6
 801f2d8:	f001 f96c 	bl	80205b4 <__mdiff>
 801f2dc:	68c2      	ldr	r2, [r0, #12]
 801f2de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f2e0:	4680      	mov	r8, r0
 801f2e2:	bb0a      	cbnz	r2, 801f328 <_dtoa_r+0x9a0>
 801f2e4:	4601      	mov	r1, r0
 801f2e6:	4628      	mov	r0, r5
 801f2e8:	f001 f948 	bl	802057c <__mcmp>
 801f2ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f2ee:	4602      	mov	r2, r0
 801f2f0:	4641      	mov	r1, r8
 801f2f2:	4630      	mov	r0, r6
 801f2f4:	920e      	str	r2, [sp, #56]	; 0x38
 801f2f6:	930a      	str	r3, [sp, #40]	; 0x28
 801f2f8:	f000 feb8 	bl	802006c <_Bfree>
 801f2fc:	9b07      	ldr	r3, [sp, #28]
 801f2fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f300:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801f304:	ea43 0102 	orr.w	r1, r3, r2
 801f308:	9b08      	ldr	r3, [sp, #32]
 801f30a:	430b      	orrs	r3, r1
 801f30c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f30e:	d10d      	bne.n	801f32c <_dtoa_r+0x9a4>
 801f310:	2b39      	cmp	r3, #57	; 0x39
 801f312:	d029      	beq.n	801f368 <_dtoa_r+0x9e0>
 801f314:	f1ba 0f00 	cmp.w	sl, #0
 801f318:	dd01      	ble.n	801f31e <_dtoa_r+0x996>
 801f31a:	9b06      	ldr	r3, [sp, #24]
 801f31c:	3331      	adds	r3, #49	; 0x31
 801f31e:	9a02      	ldr	r2, [sp, #8]
 801f320:	7013      	strb	r3, [r2, #0]
 801f322:	e774      	b.n	801f20e <_dtoa_r+0x886>
 801f324:	4638      	mov	r0, r7
 801f326:	e7b8      	b.n	801f29a <_dtoa_r+0x912>
 801f328:	2201      	movs	r2, #1
 801f32a:	e7e1      	b.n	801f2f0 <_dtoa_r+0x968>
 801f32c:	f1ba 0f00 	cmp.w	sl, #0
 801f330:	db06      	blt.n	801f340 <_dtoa_r+0x9b8>
 801f332:	9907      	ldr	r1, [sp, #28]
 801f334:	ea41 0a0a 	orr.w	sl, r1, sl
 801f338:	9908      	ldr	r1, [sp, #32]
 801f33a:	ea5a 0101 	orrs.w	r1, sl, r1
 801f33e:	d120      	bne.n	801f382 <_dtoa_r+0x9fa>
 801f340:	2a00      	cmp	r2, #0
 801f342:	ddec      	ble.n	801f31e <_dtoa_r+0x996>
 801f344:	4629      	mov	r1, r5
 801f346:	2201      	movs	r2, #1
 801f348:	4630      	mov	r0, r6
 801f34a:	9305      	str	r3, [sp, #20]
 801f34c:	f001 f8aa 	bl	80204a4 <__lshift>
 801f350:	4621      	mov	r1, r4
 801f352:	4605      	mov	r5, r0
 801f354:	f001 f912 	bl	802057c <__mcmp>
 801f358:	2800      	cmp	r0, #0
 801f35a:	9b05      	ldr	r3, [sp, #20]
 801f35c:	dc02      	bgt.n	801f364 <_dtoa_r+0x9dc>
 801f35e:	d1de      	bne.n	801f31e <_dtoa_r+0x996>
 801f360:	07da      	lsls	r2, r3, #31
 801f362:	d5dc      	bpl.n	801f31e <_dtoa_r+0x996>
 801f364:	2b39      	cmp	r3, #57	; 0x39
 801f366:	d1d8      	bne.n	801f31a <_dtoa_r+0x992>
 801f368:	9a02      	ldr	r2, [sp, #8]
 801f36a:	2339      	movs	r3, #57	; 0x39
 801f36c:	7013      	strb	r3, [r2, #0]
 801f36e:	4643      	mov	r3, r8
 801f370:	4698      	mov	r8, r3
 801f372:	3b01      	subs	r3, #1
 801f374:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801f378:	2a39      	cmp	r2, #57	; 0x39
 801f37a:	d051      	beq.n	801f420 <_dtoa_r+0xa98>
 801f37c:	3201      	adds	r2, #1
 801f37e:	701a      	strb	r2, [r3, #0]
 801f380:	e745      	b.n	801f20e <_dtoa_r+0x886>
 801f382:	2a00      	cmp	r2, #0
 801f384:	dd03      	ble.n	801f38e <_dtoa_r+0xa06>
 801f386:	2b39      	cmp	r3, #57	; 0x39
 801f388:	d0ee      	beq.n	801f368 <_dtoa_r+0x9e0>
 801f38a:	3301      	adds	r3, #1
 801f38c:	e7c7      	b.n	801f31e <_dtoa_r+0x996>
 801f38e:	9a05      	ldr	r2, [sp, #20]
 801f390:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f392:	f802 3c01 	strb.w	r3, [r2, #-1]
 801f396:	428a      	cmp	r2, r1
 801f398:	d02b      	beq.n	801f3f2 <_dtoa_r+0xa6a>
 801f39a:	4629      	mov	r1, r5
 801f39c:	2300      	movs	r3, #0
 801f39e:	220a      	movs	r2, #10
 801f3a0:	4630      	mov	r0, r6
 801f3a2:	f000 fe85 	bl	80200b0 <__multadd>
 801f3a6:	45b9      	cmp	r9, r7
 801f3a8:	4605      	mov	r5, r0
 801f3aa:	f04f 0300 	mov.w	r3, #0
 801f3ae:	f04f 020a 	mov.w	r2, #10
 801f3b2:	4649      	mov	r1, r9
 801f3b4:	4630      	mov	r0, r6
 801f3b6:	d107      	bne.n	801f3c8 <_dtoa_r+0xa40>
 801f3b8:	f000 fe7a 	bl	80200b0 <__multadd>
 801f3bc:	4681      	mov	r9, r0
 801f3be:	4607      	mov	r7, r0
 801f3c0:	9b05      	ldr	r3, [sp, #20]
 801f3c2:	3301      	adds	r3, #1
 801f3c4:	9305      	str	r3, [sp, #20]
 801f3c6:	e774      	b.n	801f2b2 <_dtoa_r+0x92a>
 801f3c8:	f000 fe72 	bl	80200b0 <__multadd>
 801f3cc:	4639      	mov	r1, r7
 801f3ce:	4681      	mov	r9, r0
 801f3d0:	2300      	movs	r3, #0
 801f3d2:	220a      	movs	r2, #10
 801f3d4:	4630      	mov	r0, r6
 801f3d6:	f000 fe6b 	bl	80200b0 <__multadd>
 801f3da:	4607      	mov	r7, r0
 801f3dc:	e7f0      	b.n	801f3c0 <_dtoa_r+0xa38>
 801f3de:	f1ba 0f00 	cmp.w	sl, #0
 801f3e2:	9a00      	ldr	r2, [sp, #0]
 801f3e4:	bfcc      	ite	gt
 801f3e6:	46d0      	movgt	r8, sl
 801f3e8:	f04f 0801 	movle.w	r8, #1
 801f3ec:	4490      	add	r8, r2
 801f3ee:	f04f 0900 	mov.w	r9, #0
 801f3f2:	4629      	mov	r1, r5
 801f3f4:	2201      	movs	r2, #1
 801f3f6:	4630      	mov	r0, r6
 801f3f8:	9302      	str	r3, [sp, #8]
 801f3fa:	f001 f853 	bl	80204a4 <__lshift>
 801f3fe:	4621      	mov	r1, r4
 801f400:	4605      	mov	r5, r0
 801f402:	f001 f8bb 	bl	802057c <__mcmp>
 801f406:	2800      	cmp	r0, #0
 801f408:	dcb1      	bgt.n	801f36e <_dtoa_r+0x9e6>
 801f40a:	d102      	bne.n	801f412 <_dtoa_r+0xa8a>
 801f40c:	9b02      	ldr	r3, [sp, #8]
 801f40e:	07db      	lsls	r3, r3, #31
 801f410:	d4ad      	bmi.n	801f36e <_dtoa_r+0x9e6>
 801f412:	4643      	mov	r3, r8
 801f414:	4698      	mov	r8, r3
 801f416:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f41a:	2a30      	cmp	r2, #48	; 0x30
 801f41c:	d0fa      	beq.n	801f414 <_dtoa_r+0xa8c>
 801f41e:	e6f6      	b.n	801f20e <_dtoa_r+0x886>
 801f420:	9a00      	ldr	r2, [sp, #0]
 801f422:	429a      	cmp	r2, r3
 801f424:	d1a4      	bne.n	801f370 <_dtoa_r+0x9e8>
 801f426:	f10b 0b01 	add.w	fp, fp, #1
 801f42a:	2331      	movs	r3, #49	; 0x31
 801f42c:	e778      	b.n	801f320 <_dtoa_r+0x998>
 801f42e:	4b15      	ldr	r3, [pc, #84]	; (801f484 <_dtoa_r+0xafc>)
 801f430:	f7ff bb12 	b.w	801ea58 <_dtoa_r+0xd0>
 801f434:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f436:	2b00      	cmp	r3, #0
 801f438:	f47f aaee 	bne.w	801ea18 <_dtoa_r+0x90>
 801f43c:	4b12      	ldr	r3, [pc, #72]	; (801f488 <_dtoa_r+0xb00>)
 801f43e:	f7ff bb0b 	b.w	801ea58 <_dtoa_r+0xd0>
 801f442:	f1ba 0f00 	cmp.w	sl, #0
 801f446:	dc03      	bgt.n	801f450 <_dtoa_r+0xac8>
 801f448:	9b07      	ldr	r3, [sp, #28]
 801f44a:	2b02      	cmp	r3, #2
 801f44c:	f73f aec7 	bgt.w	801f1de <_dtoa_r+0x856>
 801f450:	f8dd 8000 	ldr.w	r8, [sp]
 801f454:	4621      	mov	r1, r4
 801f456:	4628      	mov	r0, r5
 801f458:	f7ff fa09 	bl	801e86e <quorem>
 801f45c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801f460:	f808 3b01 	strb.w	r3, [r8], #1
 801f464:	9a00      	ldr	r2, [sp, #0]
 801f466:	eba8 0202 	sub.w	r2, r8, r2
 801f46a:	4592      	cmp	sl, r2
 801f46c:	ddb7      	ble.n	801f3de <_dtoa_r+0xa56>
 801f46e:	4629      	mov	r1, r5
 801f470:	2300      	movs	r3, #0
 801f472:	220a      	movs	r2, #10
 801f474:	4630      	mov	r0, r6
 801f476:	f000 fe1b 	bl	80200b0 <__multadd>
 801f47a:	4605      	mov	r5, r0
 801f47c:	e7ea      	b.n	801f454 <_dtoa_r+0xacc>
 801f47e:	bf00      	nop
 801f480:	0802a76c 	.word	0x0802a76c
 801f484:	0802a569 	.word	0x0802a569
 801f488:	0802a6e9 	.word	0x0802a6e9

0801f48c <__sflush_r>:
 801f48c:	898a      	ldrh	r2, [r1, #12]
 801f48e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f492:	4605      	mov	r5, r0
 801f494:	0710      	lsls	r0, r2, #28
 801f496:	460c      	mov	r4, r1
 801f498:	d458      	bmi.n	801f54c <__sflush_r+0xc0>
 801f49a:	684b      	ldr	r3, [r1, #4]
 801f49c:	2b00      	cmp	r3, #0
 801f49e:	dc05      	bgt.n	801f4ac <__sflush_r+0x20>
 801f4a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801f4a2:	2b00      	cmp	r3, #0
 801f4a4:	dc02      	bgt.n	801f4ac <__sflush_r+0x20>
 801f4a6:	2000      	movs	r0, #0
 801f4a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f4ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f4ae:	2e00      	cmp	r6, #0
 801f4b0:	d0f9      	beq.n	801f4a6 <__sflush_r+0x1a>
 801f4b2:	2300      	movs	r3, #0
 801f4b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801f4b8:	682f      	ldr	r7, [r5, #0]
 801f4ba:	602b      	str	r3, [r5, #0]
 801f4bc:	d032      	beq.n	801f524 <__sflush_r+0x98>
 801f4be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801f4c0:	89a3      	ldrh	r3, [r4, #12]
 801f4c2:	075a      	lsls	r2, r3, #29
 801f4c4:	d505      	bpl.n	801f4d2 <__sflush_r+0x46>
 801f4c6:	6863      	ldr	r3, [r4, #4]
 801f4c8:	1ac0      	subs	r0, r0, r3
 801f4ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f4cc:	b10b      	cbz	r3, 801f4d2 <__sflush_r+0x46>
 801f4ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f4d0:	1ac0      	subs	r0, r0, r3
 801f4d2:	2300      	movs	r3, #0
 801f4d4:	4602      	mov	r2, r0
 801f4d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f4d8:	6a21      	ldr	r1, [r4, #32]
 801f4da:	4628      	mov	r0, r5
 801f4dc:	47b0      	blx	r6
 801f4de:	1c43      	adds	r3, r0, #1
 801f4e0:	89a3      	ldrh	r3, [r4, #12]
 801f4e2:	d106      	bne.n	801f4f2 <__sflush_r+0x66>
 801f4e4:	6829      	ldr	r1, [r5, #0]
 801f4e6:	291d      	cmp	r1, #29
 801f4e8:	d82c      	bhi.n	801f544 <__sflush_r+0xb8>
 801f4ea:	4a2a      	ldr	r2, [pc, #168]	; (801f594 <__sflush_r+0x108>)
 801f4ec:	40ca      	lsrs	r2, r1
 801f4ee:	07d6      	lsls	r6, r2, #31
 801f4f0:	d528      	bpl.n	801f544 <__sflush_r+0xb8>
 801f4f2:	2200      	movs	r2, #0
 801f4f4:	6062      	str	r2, [r4, #4]
 801f4f6:	04d9      	lsls	r1, r3, #19
 801f4f8:	6922      	ldr	r2, [r4, #16]
 801f4fa:	6022      	str	r2, [r4, #0]
 801f4fc:	d504      	bpl.n	801f508 <__sflush_r+0x7c>
 801f4fe:	1c42      	adds	r2, r0, #1
 801f500:	d101      	bne.n	801f506 <__sflush_r+0x7a>
 801f502:	682b      	ldr	r3, [r5, #0]
 801f504:	b903      	cbnz	r3, 801f508 <__sflush_r+0x7c>
 801f506:	6560      	str	r0, [r4, #84]	; 0x54
 801f508:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f50a:	602f      	str	r7, [r5, #0]
 801f50c:	2900      	cmp	r1, #0
 801f50e:	d0ca      	beq.n	801f4a6 <__sflush_r+0x1a>
 801f510:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f514:	4299      	cmp	r1, r3
 801f516:	d002      	beq.n	801f51e <__sflush_r+0x92>
 801f518:	4628      	mov	r0, r5
 801f51a:	f7fd f8f1 	bl	801c700 <_free_r>
 801f51e:	2000      	movs	r0, #0
 801f520:	6360      	str	r0, [r4, #52]	; 0x34
 801f522:	e7c1      	b.n	801f4a8 <__sflush_r+0x1c>
 801f524:	6a21      	ldr	r1, [r4, #32]
 801f526:	2301      	movs	r3, #1
 801f528:	4628      	mov	r0, r5
 801f52a:	47b0      	blx	r6
 801f52c:	1c41      	adds	r1, r0, #1
 801f52e:	d1c7      	bne.n	801f4c0 <__sflush_r+0x34>
 801f530:	682b      	ldr	r3, [r5, #0]
 801f532:	2b00      	cmp	r3, #0
 801f534:	d0c4      	beq.n	801f4c0 <__sflush_r+0x34>
 801f536:	2b1d      	cmp	r3, #29
 801f538:	d001      	beq.n	801f53e <__sflush_r+0xb2>
 801f53a:	2b16      	cmp	r3, #22
 801f53c:	d101      	bne.n	801f542 <__sflush_r+0xb6>
 801f53e:	602f      	str	r7, [r5, #0]
 801f540:	e7b1      	b.n	801f4a6 <__sflush_r+0x1a>
 801f542:	89a3      	ldrh	r3, [r4, #12]
 801f544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f548:	81a3      	strh	r3, [r4, #12]
 801f54a:	e7ad      	b.n	801f4a8 <__sflush_r+0x1c>
 801f54c:	690f      	ldr	r7, [r1, #16]
 801f54e:	2f00      	cmp	r7, #0
 801f550:	d0a9      	beq.n	801f4a6 <__sflush_r+0x1a>
 801f552:	0793      	lsls	r3, r2, #30
 801f554:	680e      	ldr	r6, [r1, #0]
 801f556:	bf08      	it	eq
 801f558:	694b      	ldreq	r3, [r1, #20]
 801f55a:	600f      	str	r7, [r1, #0]
 801f55c:	bf18      	it	ne
 801f55e:	2300      	movne	r3, #0
 801f560:	eba6 0807 	sub.w	r8, r6, r7
 801f564:	608b      	str	r3, [r1, #8]
 801f566:	f1b8 0f00 	cmp.w	r8, #0
 801f56a:	dd9c      	ble.n	801f4a6 <__sflush_r+0x1a>
 801f56c:	6a21      	ldr	r1, [r4, #32]
 801f56e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801f570:	4643      	mov	r3, r8
 801f572:	463a      	mov	r2, r7
 801f574:	4628      	mov	r0, r5
 801f576:	47b0      	blx	r6
 801f578:	2800      	cmp	r0, #0
 801f57a:	dc06      	bgt.n	801f58a <__sflush_r+0xfe>
 801f57c:	89a3      	ldrh	r3, [r4, #12]
 801f57e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f582:	81a3      	strh	r3, [r4, #12]
 801f584:	f04f 30ff 	mov.w	r0, #4294967295
 801f588:	e78e      	b.n	801f4a8 <__sflush_r+0x1c>
 801f58a:	4407      	add	r7, r0
 801f58c:	eba8 0800 	sub.w	r8, r8, r0
 801f590:	e7e9      	b.n	801f566 <__sflush_r+0xda>
 801f592:	bf00      	nop
 801f594:	20400001 	.word	0x20400001

0801f598 <_fflush_r>:
 801f598:	b538      	push	{r3, r4, r5, lr}
 801f59a:	690b      	ldr	r3, [r1, #16]
 801f59c:	4605      	mov	r5, r0
 801f59e:	460c      	mov	r4, r1
 801f5a0:	b913      	cbnz	r3, 801f5a8 <_fflush_r+0x10>
 801f5a2:	2500      	movs	r5, #0
 801f5a4:	4628      	mov	r0, r5
 801f5a6:	bd38      	pop	{r3, r4, r5, pc}
 801f5a8:	b118      	cbz	r0, 801f5b2 <_fflush_r+0x1a>
 801f5aa:	6983      	ldr	r3, [r0, #24]
 801f5ac:	b90b      	cbnz	r3, 801f5b2 <_fflush_r+0x1a>
 801f5ae:	f000 f887 	bl	801f6c0 <__sinit>
 801f5b2:	4b14      	ldr	r3, [pc, #80]	; (801f604 <_fflush_r+0x6c>)
 801f5b4:	429c      	cmp	r4, r3
 801f5b6:	d11b      	bne.n	801f5f0 <_fflush_r+0x58>
 801f5b8:	686c      	ldr	r4, [r5, #4]
 801f5ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f5be:	2b00      	cmp	r3, #0
 801f5c0:	d0ef      	beq.n	801f5a2 <_fflush_r+0xa>
 801f5c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801f5c4:	07d0      	lsls	r0, r2, #31
 801f5c6:	d404      	bmi.n	801f5d2 <_fflush_r+0x3a>
 801f5c8:	0599      	lsls	r1, r3, #22
 801f5ca:	d402      	bmi.n	801f5d2 <_fflush_r+0x3a>
 801f5cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f5ce:	f000 fc88 	bl	801fee2 <__retarget_lock_acquire_recursive>
 801f5d2:	4628      	mov	r0, r5
 801f5d4:	4621      	mov	r1, r4
 801f5d6:	f7ff ff59 	bl	801f48c <__sflush_r>
 801f5da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f5dc:	07da      	lsls	r2, r3, #31
 801f5de:	4605      	mov	r5, r0
 801f5e0:	d4e0      	bmi.n	801f5a4 <_fflush_r+0xc>
 801f5e2:	89a3      	ldrh	r3, [r4, #12]
 801f5e4:	059b      	lsls	r3, r3, #22
 801f5e6:	d4dd      	bmi.n	801f5a4 <_fflush_r+0xc>
 801f5e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f5ea:	f000 fc7b 	bl	801fee4 <__retarget_lock_release_recursive>
 801f5ee:	e7d9      	b.n	801f5a4 <_fflush_r+0xc>
 801f5f0:	4b05      	ldr	r3, [pc, #20]	; (801f608 <_fflush_r+0x70>)
 801f5f2:	429c      	cmp	r4, r3
 801f5f4:	d101      	bne.n	801f5fa <_fflush_r+0x62>
 801f5f6:	68ac      	ldr	r4, [r5, #8]
 801f5f8:	e7df      	b.n	801f5ba <_fflush_r+0x22>
 801f5fa:	4b04      	ldr	r3, [pc, #16]	; (801f60c <_fflush_r+0x74>)
 801f5fc:	429c      	cmp	r4, r3
 801f5fe:	bf08      	it	eq
 801f600:	68ec      	ldreq	r4, [r5, #12]
 801f602:	e7da      	b.n	801f5ba <_fflush_r+0x22>
 801f604:	0802a7a0 	.word	0x0802a7a0
 801f608:	0802a7c0 	.word	0x0802a7c0
 801f60c:	0802a780 	.word	0x0802a780

0801f610 <std>:
 801f610:	2300      	movs	r3, #0
 801f612:	b510      	push	{r4, lr}
 801f614:	4604      	mov	r4, r0
 801f616:	e9c0 3300 	strd	r3, r3, [r0]
 801f61a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f61e:	6083      	str	r3, [r0, #8]
 801f620:	8181      	strh	r1, [r0, #12]
 801f622:	6643      	str	r3, [r0, #100]	; 0x64
 801f624:	81c2      	strh	r2, [r0, #14]
 801f626:	6183      	str	r3, [r0, #24]
 801f628:	4619      	mov	r1, r3
 801f62a:	2208      	movs	r2, #8
 801f62c:	305c      	adds	r0, #92	; 0x5c
 801f62e:	f7fd f85f 	bl	801c6f0 <memset>
 801f632:	4b05      	ldr	r3, [pc, #20]	; (801f648 <std+0x38>)
 801f634:	6263      	str	r3, [r4, #36]	; 0x24
 801f636:	4b05      	ldr	r3, [pc, #20]	; (801f64c <std+0x3c>)
 801f638:	62a3      	str	r3, [r4, #40]	; 0x28
 801f63a:	4b05      	ldr	r3, [pc, #20]	; (801f650 <std+0x40>)
 801f63c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801f63e:	4b05      	ldr	r3, [pc, #20]	; (801f654 <std+0x44>)
 801f640:	6224      	str	r4, [r4, #32]
 801f642:	6323      	str	r3, [r4, #48]	; 0x30
 801f644:	bd10      	pop	{r4, pc}
 801f646:	bf00      	nop
 801f648:	08020d21 	.word	0x08020d21
 801f64c:	08020d43 	.word	0x08020d43
 801f650:	08020d7b 	.word	0x08020d7b
 801f654:	08020d9f 	.word	0x08020d9f

0801f658 <_cleanup_r>:
 801f658:	4901      	ldr	r1, [pc, #4]	; (801f660 <_cleanup_r+0x8>)
 801f65a:	f000 b8af 	b.w	801f7bc <_fwalk_reent>
 801f65e:	bf00      	nop
 801f660:	0801f599 	.word	0x0801f599

0801f664 <__sfmoreglue>:
 801f664:	b570      	push	{r4, r5, r6, lr}
 801f666:	1e4a      	subs	r2, r1, #1
 801f668:	2568      	movs	r5, #104	; 0x68
 801f66a:	4355      	muls	r5, r2
 801f66c:	460e      	mov	r6, r1
 801f66e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801f672:	f7fd f895 	bl	801c7a0 <_malloc_r>
 801f676:	4604      	mov	r4, r0
 801f678:	b140      	cbz	r0, 801f68c <__sfmoreglue+0x28>
 801f67a:	2100      	movs	r1, #0
 801f67c:	e9c0 1600 	strd	r1, r6, [r0]
 801f680:	300c      	adds	r0, #12
 801f682:	60a0      	str	r0, [r4, #8]
 801f684:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801f688:	f7fd f832 	bl	801c6f0 <memset>
 801f68c:	4620      	mov	r0, r4
 801f68e:	bd70      	pop	{r4, r5, r6, pc}

0801f690 <__sfp_lock_acquire>:
 801f690:	4801      	ldr	r0, [pc, #4]	; (801f698 <__sfp_lock_acquire+0x8>)
 801f692:	f000 bc26 	b.w	801fee2 <__retarget_lock_acquire_recursive>
 801f696:	bf00      	nop
 801f698:	24014858 	.word	0x24014858

0801f69c <__sfp_lock_release>:
 801f69c:	4801      	ldr	r0, [pc, #4]	; (801f6a4 <__sfp_lock_release+0x8>)
 801f69e:	f000 bc21 	b.w	801fee4 <__retarget_lock_release_recursive>
 801f6a2:	bf00      	nop
 801f6a4:	24014858 	.word	0x24014858

0801f6a8 <__sinit_lock_acquire>:
 801f6a8:	4801      	ldr	r0, [pc, #4]	; (801f6b0 <__sinit_lock_acquire+0x8>)
 801f6aa:	f000 bc1a 	b.w	801fee2 <__retarget_lock_acquire_recursive>
 801f6ae:	bf00      	nop
 801f6b0:	24014853 	.word	0x24014853

0801f6b4 <__sinit_lock_release>:
 801f6b4:	4801      	ldr	r0, [pc, #4]	; (801f6bc <__sinit_lock_release+0x8>)
 801f6b6:	f000 bc15 	b.w	801fee4 <__retarget_lock_release_recursive>
 801f6ba:	bf00      	nop
 801f6bc:	24014853 	.word	0x24014853

0801f6c0 <__sinit>:
 801f6c0:	b510      	push	{r4, lr}
 801f6c2:	4604      	mov	r4, r0
 801f6c4:	f7ff fff0 	bl	801f6a8 <__sinit_lock_acquire>
 801f6c8:	69a3      	ldr	r3, [r4, #24]
 801f6ca:	b11b      	cbz	r3, 801f6d4 <__sinit+0x14>
 801f6cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f6d0:	f7ff bff0 	b.w	801f6b4 <__sinit_lock_release>
 801f6d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801f6d8:	6523      	str	r3, [r4, #80]	; 0x50
 801f6da:	4b13      	ldr	r3, [pc, #76]	; (801f728 <__sinit+0x68>)
 801f6dc:	4a13      	ldr	r2, [pc, #76]	; (801f72c <__sinit+0x6c>)
 801f6de:	681b      	ldr	r3, [r3, #0]
 801f6e0:	62a2      	str	r2, [r4, #40]	; 0x28
 801f6e2:	42a3      	cmp	r3, r4
 801f6e4:	bf04      	itt	eq
 801f6e6:	2301      	moveq	r3, #1
 801f6e8:	61a3      	streq	r3, [r4, #24]
 801f6ea:	4620      	mov	r0, r4
 801f6ec:	f000 f820 	bl	801f730 <__sfp>
 801f6f0:	6060      	str	r0, [r4, #4]
 801f6f2:	4620      	mov	r0, r4
 801f6f4:	f000 f81c 	bl	801f730 <__sfp>
 801f6f8:	60a0      	str	r0, [r4, #8]
 801f6fa:	4620      	mov	r0, r4
 801f6fc:	f000 f818 	bl	801f730 <__sfp>
 801f700:	2200      	movs	r2, #0
 801f702:	60e0      	str	r0, [r4, #12]
 801f704:	2104      	movs	r1, #4
 801f706:	6860      	ldr	r0, [r4, #4]
 801f708:	f7ff ff82 	bl	801f610 <std>
 801f70c:	68a0      	ldr	r0, [r4, #8]
 801f70e:	2201      	movs	r2, #1
 801f710:	2109      	movs	r1, #9
 801f712:	f7ff ff7d 	bl	801f610 <std>
 801f716:	68e0      	ldr	r0, [r4, #12]
 801f718:	2202      	movs	r2, #2
 801f71a:	2112      	movs	r1, #18
 801f71c:	f7ff ff78 	bl	801f610 <std>
 801f720:	2301      	movs	r3, #1
 801f722:	61a3      	str	r3, [r4, #24]
 801f724:	e7d2      	b.n	801f6cc <__sinit+0xc>
 801f726:	bf00      	nop
 801f728:	0802a544 	.word	0x0802a544
 801f72c:	0801f659 	.word	0x0801f659

0801f730 <__sfp>:
 801f730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f732:	4607      	mov	r7, r0
 801f734:	f7ff ffac 	bl	801f690 <__sfp_lock_acquire>
 801f738:	4b1e      	ldr	r3, [pc, #120]	; (801f7b4 <__sfp+0x84>)
 801f73a:	681e      	ldr	r6, [r3, #0]
 801f73c:	69b3      	ldr	r3, [r6, #24]
 801f73e:	b913      	cbnz	r3, 801f746 <__sfp+0x16>
 801f740:	4630      	mov	r0, r6
 801f742:	f7ff ffbd 	bl	801f6c0 <__sinit>
 801f746:	3648      	adds	r6, #72	; 0x48
 801f748:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801f74c:	3b01      	subs	r3, #1
 801f74e:	d503      	bpl.n	801f758 <__sfp+0x28>
 801f750:	6833      	ldr	r3, [r6, #0]
 801f752:	b30b      	cbz	r3, 801f798 <__sfp+0x68>
 801f754:	6836      	ldr	r6, [r6, #0]
 801f756:	e7f7      	b.n	801f748 <__sfp+0x18>
 801f758:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801f75c:	b9d5      	cbnz	r5, 801f794 <__sfp+0x64>
 801f75e:	4b16      	ldr	r3, [pc, #88]	; (801f7b8 <__sfp+0x88>)
 801f760:	60e3      	str	r3, [r4, #12]
 801f762:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801f766:	6665      	str	r5, [r4, #100]	; 0x64
 801f768:	f000 fbba 	bl	801fee0 <__retarget_lock_init_recursive>
 801f76c:	f7ff ff96 	bl	801f69c <__sfp_lock_release>
 801f770:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801f774:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801f778:	6025      	str	r5, [r4, #0]
 801f77a:	61a5      	str	r5, [r4, #24]
 801f77c:	2208      	movs	r2, #8
 801f77e:	4629      	mov	r1, r5
 801f780:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801f784:	f7fc ffb4 	bl	801c6f0 <memset>
 801f788:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801f78c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801f790:	4620      	mov	r0, r4
 801f792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f794:	3468      	adds	r4, #104	; 0x68
 801f796:	e7d9      	b.n	801f74c <__sfp+0x1c>
 801f798:	2104      	movs	r1, #4
 801f79a:	4638      	mov	r0, r7
 801f79c:	f7ff ff62 	bl	801f664 <__sfmoreglue>
 801f7a0:	4604      	mov	r4, r0
 801f7a2:	6030      	str	r0, [r6, #0]
 801f7a4:	2800      	cmp	r0, #0
 801f7a6:	d1d5      	bne.n	801f754 <__sfp+0x24>
 801f7a8:	f7ff ff78 	bl	801f69c <__sfp_lock_release>
 801f7ac:	230c      	movs	r3, #12
 801f7ae:	603b      	str	r3, [r7, #0]
 801f7b0:	e7ee      	b.n	801f790 <__sfp+0x60>
 801f7b2:	bf00      	nop
 801f7b4:	0802a544 	.word	0x0802a544
 801f7b8:	ffff0001 	.word	0xffff0001

0801f7bc <_fwalk_reent>:
 801f7bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f7c0:	4606      	mov	r6, r0
 801f7c2:	4688      	mov	r8, r1
 801f7c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801f7c8:	2700      	movs	r7, #0
 801f7ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801f7ce:	f1b9 0901 	subs.w	r9, r9, #1
 801f7d2:	d505      	bpl.n	801f7e0 <_fwalk_reent+0x24>
 801f7d4:	6824      	ldr	r4, [r4, #0]
 801f7d6:	2c00      	cmp	r4, #0
 801f7d8:	d1f7      	bne.n	801f7ca <_fwalk_reent+0xe>
 801f7da:	4638      	mov	r0, r7
 801f7dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f7e0:	89ab      	ldrh	r3, [r5, #12]
 801f7e2:	2b01      	cmp	r3, #1
 801f7e4:	d907      	bls.n	801f7f6 <_fwalk_reent+0x3a>
 801f7e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801f7ea:	3301      	adds	r3, #1
 801f7ec:	d003      	beq.n	801f7f6 <_fwalk_reent+0x3a>
 801f7ee:	4629      	mov	r1, r5
 801f7f0:	4630      	mov	r0, r6
 801f7f2:	47c0      	blx	r8
 801f7f4:	4307      	orrs	r7, r0
 801f7f6:	3568      	adds	r5, #104	; 0x68
 801f7f8:	e7e9      	b.n	801f7ce <_fwalk_reent+0x12>

0801f7fa <rshift>:
 801f7fa:	6903      	ldr	r3, [r0, #16]
 801f7fc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801f800:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f804:	ea4f 1261 	mov.w	r2, r1, asr #5
 801f808:	f100 0414 	add.w	r4, r0, #20
 801f80c:	dd45      	ble.n	801f89a <rshift+0xa0>
 801f80e:	f011 011f 	ands.w	r1, r1, #31
 801f812:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801f816:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801f81a:	d10c      	bne.n	801f836 <rshift+0x3c>
 801f81c:	f100 0710 	add.w	r7, r0, #16
 801f820:	4629      	mov	r1, r5
 801f822:	42b1      	cmp	r1, r6
 801f824:	d334      	bcc.n	801f890 <rshift+0x96>
 801f826:	1a9b      	subs	r3, r3, r2
 801f828:	009b      	lsls	r3, r3, #2
 801f82a:	1eea      	subs	r2, r5, #3
 801f82c:	4296      	cmp	r6, r2
 801f82e:	bf38      	it	cc
 801f830:	2300      	movcc	r3, #0
 801f832:	4423      	add	r3, r4
 801f834:	e015      	b.n	801f862 <rshift+0x68>
 801f836:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801f83a:	f1c1 0820 	rsb	r8, r1, #32
 801f83e:	40cf      	lsrs	r7, r1
 801f840:	f105 0e04 	add.w	lr, r5, #4
 801f844:	46a1      	mov	r9, r4
 801f846:	4576      	cmp	r6, lr
 801f848:	46f4      	mov	ip, lr
 801f84a:	d815      	bhi.n	801f878 <rshift+0x7e>
 801f84c:	1a9b      	subs	r3, r3, r2
 801f84e:	009a      	lsls	r2, r3, #2
 801f850:	3a04      	subs	r2, #4
 801f852:	3501      	adds	r5, #1
 801f854:	42ae      	cmp	r6, r5
 801f856:	bf38      	it	cc
 801f858:	2200      	movcc	r2, #0
 801f85a:	18a3      	adds	r3, r4, r2
 801f85c:	50a7      	str	r7, [r4, r2]
 801f85e:	b107      	cbz	r7, 801f862 <rshift+0x68>
 801f860:	3304      	adds	r3, #4
 801f862:	1b1a      	subs	r2, r3, r4
 801f864:	42a3      	cmp	r3, r4
 801f866:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801f86a:	bf08      	it	eq
 801f86c:	2300      	moveq	r3, #0
 801f86e:	6102      	str	r2, [r0, #16]
 801f870:	bf08      	it	eq
 801f872:	6143      	streq	r3, [r0, #20]
 801f874:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f878:	f8dc c000 	ldr.w	ip, [ip]
 801f87c:	fa0c fc08 	lsl.w	ip, ip, r8
 801f880:	ea4c 0707 	orr.w	r7, ip, r7
 801f884:	f849 7b04 	str.w	r7, [r9], #4
 801f888:	f85e 7b04 	ldr.w	r7, [lr], #4
 801f88c:	40cf      	lsrs	r7, r1
 801f88e:	e7da      	b.n	801f846 <rshift+0x4c>
 801f890:	f851 cb04 	ldr.w	ip, [r1], #4
 801f894:	f847 cf04 	str.w	ip, [r7, #4]!
 801f898:	e7c3      	b.n	801f822 <rshift+0x28>
 801f89a:	4623      	mov	r3, r4
 801f89c:	e7e1      	b.n	801f862 <rshift+0x68>

0801f89e <__hexdig_fun>:
 801f89e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801f8a2:	2b09      	cmp	r3, #9
 801f8a4:	d802      	bhi.n	801f8ac <__hexdig_fun+0xe>
 801f8a6:	3820      	subs	r0, #32
 801f8a8:	b2c0      	uxtb	r0, r0
 801f8aa:	4770      	bx	lr
 801f8ac:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801f8b0:	2b05      	cmp	r3, #5
 801f8b2:	d801      	bhi.n	801f8b8 <__hexdig_fun+0x1a>
 801f8b4:	3847      	subs	r0, #71	; 0x47
 801f8b6:	e7f7      	b.n	801f8a8 <__hexdig_fun+0xa>
 801f8b8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801f8bc:	2b05      	cmp	r3, #5
 801f8be:	d801      	bhi.n	801f8c4 <__hexdig_fun+0x26>
 801f8c0:	3827      	subs	r0, #39	; 0x27
 801f8c2:	e7f1      	b.n	801f8a8 <__hexdig_fun+0xa>
 801f8c4:	2000      	movs	r0, #0
 801f8c6:	4770      	bx	lr

0801f8c8 <__gethex>:
 801f8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f8cc:	ed2d 8b02 	vpush	{d8}
 801f8d0:	b089      	sub	sp, #36	; 0x24
 801f8d2:	ee08 0a10 	vmov	s16, r0
 801f8d6:	9304      	str	r3, [sp, #16]
 801f8d8:	4bbc      	ldr	r3, [pc, #752]	; (801fbcc <__gethex+0x304>)
 801f8da:	681b      	ldr	r3, [r3, #0]
 801f8dc:	9301      	str	r3, [sp, #4]
 801f8de:	4618      	mov	r0, r3
 801f8e0:	468b      	mov	fp, r1
 801f8e2:	4690      	mov	r8, r2
 801f8e4:	f7e0 fd06 	bl	80002f4 <strlen>
 801f8e8:	9b01      	ldr	r3, [sp, #4]
 801f8ea:	f8db 2000 	ldr.w	r2, [fp]
 801f8ee:	4403      	add	r3, r0
 801f8f0:	4682      	mov	sl, r0
 801f8f2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801f8f6:	9305      	str	r3, [sp, #20]
 801f8f8:	1c93      	adds	r3, r2, #2
 801f8fa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801f8fe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801f902:	32fe      	adds	r2, #254	; 0xfe
 801f904:	18d1      	adds	r1, r2, r3
 801f906:	461f      	mov	r7, r3
 801f908:	f813 0b01 	ldrb.w	r0, [r3], #1
 801f90c:	9100      	str	r1, [sp, #0]
 801f90e:	2830      	cmp	r0, #48	; 0x30
 801f910:	d0f8      	beq.n	801f904 <__gethex+0x3c>
 801f912:	f7ff ffc4 	bl	801f89e <__hexdig_fun>
 801f916:	4604      	mov	r4, r0
 801f918:	2800      	cmp	r0, #0
 801f91a:	d13a      	bne.n	801f992 <__gethex+0xca>
 801f91c:	9901      	ldr	r1, [sp, #4]
 801f91e:	4652      	mov	r2, sl
 801f920:	4638      	mov	r0, r7
 801f922:	f7fe f82f 	bl	801d984 <strncmp>
 801f926:	4605      	mov	r5, r0
 801f928:	2800      	cmp	r0, #0
 801f92a:	d168      	bne.n	801f9fe <__gethex+0x136>
 801f92c:	f817 000a 	ldrb.w	r0, [r7, sl]
 801f930:	eb07 060a 	add.w	r6, r7, sl
 801f934:	f7ff ffb3 	bl	801f89e <__hexdig_fun>
 801f938:	2800      	cmp	r0, #0
 801f93a:	d062      	beq.n	801fa02 <__gethex+0x13a>
 801f93c:	4633      	mov	r3, r6
 801f93e:	7818      	ldrb	r0, [r3, #0]
 801f940:	2830      	cmp	r0, #48	; 0x30
 801f942:	461f      	mov	r7, r3
 801f944:	f103 0301 	add.w	r3, r3, #1
 801f948:	d0f9      	beq.n	801f93e <__gethex+0x76>
 801f94a:	f7ff ffa8 	bl	801f89e <__hexdig_fun>
 801f94e:	2301      	movs	r3, #1
 801f950:	fab0 f480 	clz	r4, r0
 801f954:	0964      	lsrs	r4, r4, #5
 801f956:	4635      	mov	r5, r6
 801f958:	9300      	str	r3, [sp, #0]
 801f95a:	463a      	mov	r2, r7
 801f95c:	4616      	mov	r6, r2
 801f95e:	3201      	adds	r2, #1
 801f960:	7830      	ldrb	r0, [r6, #0]
 801f962:	f7ff ff9c 	bl	801f89e <__hexdig_fun>
 801f966:	2800      	cmp	r0, #0
 801f968:	d1f8      	bne.n	801f95c <__gethex+0x94>
 801f96a:	9901      	ldr	r1, [sp, #4]
 801f96c:	4652      	mov	r2, sl
 801f96e:	4630      	mov	r0, r6
 801f970:	f7fe f808 	bl	801d984 <strncmp>
 801f974:	b980      	cbnz	r0, 801f998 <__gethex+0xd0>
 801f976:	b94d      	cbnz	r5, 801f98c <__gethex+0xc4>
 801f978:	eb06 050a 	add.w	r5, r6, sl
 801f97c:	462a      	mov	r2, r5
 801f97e:	4616      	mov	r6, r2
 801f980:	3201      	adds	r2, #1
 801f982:	7830      	ldrb	r0, [r6, #0]
 801f984:	f7ff ff8b 	bl	801f89e <__hexdig_fun>
 801f988:	2800      	cmp	r0, #0
 801f98a:	d1f8      	bne.n	801f97e <__gethex+0xb6>
 801f98c:	1bad      	subs	r5, r5, r6
 801f98e:	00ad      	lsls	r5, r5, #2
 801f990:	e004      	b.n	801f99c <__gethex+0xd4>
 801f992:	2400      	movs	r4, #0
 801f994:	4625      	mov	r5, r4
 801f996:	e7e0      	b.n	801f95a <__gethex+0x92>
 801f998:	2d00      	cmp	r5, #0
 801f99a:	d1f7      	bne.n	801f98c <__gethex+0xc4>
 801f99c:	7833      	ldrb	r3, [r6, #0]
 801f99e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801f9a2:	2b50      	cmp	r3, #80	; 0x50
 801f9a4:	d13b      	bne.n	801fa1e <__gethex+0x156>
 801f9a6:	7873      	ldrb	r3, [r6, #1]
 801f9a8:	2b2b      	cmp	r3, #43	; 0x2b
 801f9aa:	d02c      	beq.n	801fa06 <__gethex+0x13e>
 801f9ac:	2b2d      	cmp	r3, #45	; 0x2d
 801f9ae:	d02e      	beq.n	801fa0e <__gethex+0x146>
 801f9b0:	1c71      	adds	r1, r6, #1
 801f9b2:	f04f 0900 	mov.w	r9, #0
 801f9b6:	7808      	ldrb	r0, [r1, #0]
 801f9b8:	f7ff ff71 	bl	801f89e <__hexdig_fun>
 801f9bc:	1e43      	subs	r3, r0, #1
 801f9be:	b2db      	uxtb	r3, r3
 801f9c0:	2b18      	cmp	r3, #24
 801f9c2:	d82c      	bhi.n	801fa1e <__gethex+0x156>
 801f9c4:	f1a0 0210 	sub.w	r2, r0, #16
 801f9c8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801f9cc:	f7ff ff67 	bl	801f89e <__hexdig_fun>
 801f9d0:	1e43      	subs	r3, r0, #1
 801f9d2:	b2db      	uxtb	r3, r3
 801f9d4:	2b18      	cmp	r3, #24
 801f9d6:	d91d      	bls.n	801fa14 <__gethex+0x14c>
 801f9d8:	f1b9 0f00 	cmp.w	r9, #0
 801f9dc:	d000      	beq.n	801f9e0 <__gethex+0x118>
 801f9de:	4252      	negs	r2, r2
 801f9e0:	4415      	add	r5, r2
 801f9e2:	f8cb 1000 	str.w	r1, [fp]
 801f9e6:	b1e4      	cbz	r4, 801fa22 <__gethex+0x15a>
 801f9e8:	9b00      	ldr	r3, [sp, #0]
 801f9ea:	2b00      	cmp	r3, #0
 801f9ec:	bf14      	ite	ne
 801f9ee:	2700      	movne	r7, #0
 801f9f0:	2706      	moveq	r7, #6
 801f9f2:	4638      	mov	r0, r7
 801f9f4:	b009      	add	sp, #36	; 0x24
 801f9f6:	ecbd 8b02 	vpop	{d8}
 801f9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f9fe:	463e      	mov	r6, r7
 801fa00:	4625      	mov	r5, r4
 801fa02:	2401      	movs	r4, #1
 801fa04:	e7ca      	b.n	801f99c <__gethex+0xd4>
 801fa06:	f04f 0900 	mov.w	r9, #0
 801fa0a:	1cb1      	adds	r1, r6, #2
 801fa0c:	e7d3      	b.n	801f9b6 <__gethex+0xee>
 801fa0e:	f04f 0901 	mov.w	r9, #1
 801fa12:	e7fa      	b.n	801fa0a <__gethex+0x142>
 801fa14:	230a      	movs	r3, #10
 801fa16:	fb03 0202 	mla	r2, r3, r2, r0
 801fa1a:	3a10      	subs	r2, #16
 801fa1c:	e7d4      	b.n	801f9c8 <__gethex+0x100>
 801fa1e:	4631      	mov	r1, r6
 801fa20:	e7df      	b.n	801f9e2 <__gethex+0x11a>
 801fa22:	1bf3      	subs	r3, r6, r7
 801fa24:	3b01      	subs	r3, #1
 801fa26:	4621      	mov	r1, r4
 801fa28:	2b07      	cmp	r3, #7
 801fa2a:	dc0b      	bgt.n	801fa44 <__gethex+0x17c>
 801fa2c:	ee18 0a10 	vmov	r0, s16
 801fa30:	f000 fadc 	bl	801ffec <_Balloc>
 801fa34:	4604      	mov	r4, r0
 801fa36:	b940      	cbnz	r0, 801fa4a <__gethex+0x182>
 801fa38:	4b65      	ldr	r3, [pc, #404]	; (801fbd0 <__gethex+0x308>)
 801fa3a:	4602      	mov	r2, r0
 801fa3c:	21de      	movs	r1, #222	; 0xde
 801fa3e:	4865      	ldr	r0, [pc, #404]	; (801fbd4 <__gethex+0x30c>)
 801fa40:	f7fc fdc0 	bl	801c5c4 <__assert_func>
 801fa44:	3101      	adds	r1, #1
 801fa46:	105b      	asrs	r3, r3, #1
 801fa48:	e7ee      	b.n	801fa28 <__gethex+0x160>
 801fa4a:	f100 0914 	add.w	r9, r0, #20
 801fa4e:	f04f 0b00 	mov.w	fp, #0
 801fa52:	f1ca 0301 	rsb	r3, sl, #1
 801fa56:	f8cd 9008 	str.w	r9, [sp, #8]
 801fa5a:	f8cd b000 	str.w	fp, [sp]
 801fa5e:	9306      	str	r3, [sp, #24]
 801fa60:	42b7      	cmp	r7, r6
 801fa62:	d340      	bcc.n	801fae6 <__gethex+0x21e>
 801fa64:	9802      	ldr	r0, [sp, #8]
 801fa66:	9b00      	ldr	r3, [sp, #0]
 801fa68:	f840 3b04 	str.w	r3, [r0], #4
 801fa6c:	eba0 0009 	sub.w	r0, r0, r9
 801fa70:	1080      	asrs	r0, r0, #2
 801fa72:	0146      	lsls	r6, r0, #5
 801fa74:	6120      	str	r0, [r4, #16]
 801fa76:	4618      	mov	r0, r3
 801fa78:	f000 fbae 	bl	80201d8 <__hi0bits>
 801fa7c:	1a30      	subs	r0, r6, r0
 801fa7e:	f8d8 6000 	ldr.w	r6, [r8]
 801fa82:	42b0      	cmp	r0, r6
 801fa84:	dd63      	ble.n	801fb4e <__gethex+0x286>
 801fa86:	1b87      	subs	r7, r0, r6
 801fa88:	4639      	mov	r1, r7
 801fa8a:	4620      	mov	r0, r4
 801fa8c:	f000 ff49 	bl	8020922 <__any_on>
 801fa90:	4682      	mov	sl, r0
 801fa92:	b1a8      	cbz	r0, 801fac0 <__gethex+0x1f8>
 801fa94:	1e7b      	subs	r3, r7, #1
 801fa96:	1159      	asrs	r1, r3, #5
 801fa98:	f003 021f 	and.w	r2, r3, #31
 801fa9c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801faa0:	f04f 0a01 	mov.w	sl, #1
 801faa4:	fa0a f202 	lsl.w	r2, sl, r2
 801faa8:	420a      	tst	r2, r1
 801faaa:	d009      	beq.n	801fac0 <__gethex+0x1f8>
 801faac:	4553      	cmp	r3, sl
 801faae:	dd05      	ble.n	801fabc <__gethex+0x1f4>
 801fab0:	1eb9      	subs	r1, r7, #2
 801fab2:	4620      	mov	r0, r4
 801fab4:	f000 ff35 	bl	8020922 <__any_on>
 801fab8:	2800      	cmp	r0, #0
 801faba:	d145      	bne.n	801fb48 <__gethex+0x280>
 801fabc:	f04f 0a02 	mov.w	sl, #2
 801fac0:	4639      	mov	r1, r7
 801fac2:	4620      	mov	r0, r4
 801fac4:	f7ff fe99 	bl	801f7fa <rshift>
 801fac8:	443d      	add	r5, r7
 801faca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801face:	42ab      	cmp	r3, r5
 801fad0:	da4c      	bge.n	801fb6c <__gethex+0x2a4>
 801fad2:	ee18 0a10 	vmov	r0, s16
 801fad6:	4621      	mov	r1, r4
 801fad8:	f000 fac8 	bl	802006c <_Bfree>
 801fadc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fade:	2300      	movs	r3, #0
 801fae0:	6013      	str	r3, [r2, #0]
 801fae2:	27a3      	movs	r7, #163	; 0xa3
 801fae4:	e785      	b.n	801f9f2 <__gethex+0x12a>
 801fae6:	1e73      	subs	r3, r6, #1
 801fae8:	9a05      	ldr	r2, [sp, #20]
 801faea:	9303      	str	r3, [sp, #12]
 801faec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801faf0:	4293      	cmp	r3, r2
 801faf2:	d019      	beq.n	801fb28 <__gethex+0x260>
 801faf4:	f1bb 0f20 	cmp.w	fp, #32
 801faf8:	d107      	bne.n	801fb0a <__gethex+0x242>
 801fafa:	9b02      	ldr	r3, [sp, #8]
 801fafc:	9a00      	ldr	r2, [sp, #0]
 801fafe:	f843 2b04 	str.w	r2, [r3], #4
 801fb02:	9302      	str	r3, [sp, #8]
 801fb04:	2300      	movs	r3, #0
 801fb06:	9300      	str	r3, [sp, #0]
 801fb08:	469b      	mov	fp, r3
 801fb0a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801fb0e:	f7ff fec6 	bl	801f89e <__hexdig_fun>
 801fb12:	9b00      	ldr	r3, [sp, #0]
 801fb14:	f000 000f 	and.w	r0, r0, #15
 801fb18:	fa00 f00b 	lsl.w	r0, r0, fp
 801fb1c:	4303      	orrs	r3, r0
 801fb1e:	9300      	str	r3, [sp, #0]
 801fb20:	f10b 0b04 	add.w	fp, fp, #4
 801fb24:	9b03      	ldr	r3, [sp, #12]
 801fb26:	e00d      	b.n	801fb44 <__gethex+0x27c>
 801fb28:	9b03      	ldr	r3, [sp, #12]
 801fb2a:	9a06      	ldr	r2, [sp, #24]
 801fb2c:	4413      	add	r3, r2
 801fb2e:	42bb      	cmp	r3, r7
 801fb30:	d3e0      	bcc.n	801faf4 <__gethex+0x22c>
 801fb32:	4618      	mov	r0, r3
 801fb34:	9901      	ldr	r1, [sp, #4]
 801fb36:	9307      	str	r3, [sp, #28]
 801fb38:	4652      	mov	r2, sl
 801fb3a:	f7fd ff23 	bl	801d984 <strncmp>
 801fb3e:	9b07      	ldr	r3, [sp, #28]
 801fb40:	2800      	cmp	r0, #0
 801fb42:	d1d7      	bne.n	801faf4 <__gethex+0x22c>
 801fb44:	461e      	mov	r6, r3
 801fb46:	e78b      	b.n	801fa60 <__gethex+0x198>
 801fb48:	f04f 0a03 	mov.w	sl, #3
 801fb4c:	e7b8      	b.n	801fac0 <__gethex+0x1f8>
 801fb4e:	da0a      	bge.n	801fb66 <__gethex+0x29e>
 801fb50:	1a37      	subs	r7, r6, r0
 801fb52:	4621      	mov	r1, r4
 801fb54:	ee18 0a10 	vmov	r0, s16
 801fb58:	463a      	mov	r2, r7
 801fb5a:	f000 fca3 	bl	80204a4 <__lshift>
 801fb5e:	1bed      	subs	r5, r5, r7
 801fb60:	4604      	mov	r4, r0
 801fb62:	f100 0914 	add.w	r9, r0, #20
 801fb66:	f04f 0a00 	mov.w	sl, #0
 801fb6a:	e7ae      	b.n	801faca <__gethex+0x202>
 801fb6c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801fb70:	42a8      	cmp	r0, r5
 801fb72:	dd72      	ble.n	801fc5a <__gethex+0x392>
 801fb74:	1b45      	subs	r5, r0, r5
 801fb76:	42ae      	cmp	r6, r5
 801fb78:	dc36      	bgt.n	801fbe8 <__gethex+0x320>
 801fb7a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801fb7e:	2b02      	cmp	r3, #2
 801fb80:	d02a      	beq.n	801fbd8 <__gethex+0x310>
 801fb82:	2b03      	cmp	r3, #3
 801fb84:	d02c      	beq.n	801fbe0 <__gethex+0x318>
 801fb86:	2b01      	cmp	r3, #1
 801fb88:	d115      	bne.n	801fbb6 <__gethex+0x2ee>
 801fb8a:	42ae      	cmp	r6, r5
 801fb8c:	d113      	bne.n	801fbb6 <__gethex+0x2ee>
 801fb8e:	2e01      	cmp	r6, #1
 801fb90:	d10b      	bne.n	801fbaa <__gethex+0x2e2>
 801fb92:	9a04      	ldr	r2, [sp, #16]
 801fb94:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801fb98:	6013      	str	r3, [r2, #0]
 801fb9a:	2301      	movs	r3, #1
 801fb9c:	6123      	str	r3, [r4, #16]
 801fb9e:	f8c9 3000 	str.w	r3, [r9]
 801fba2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801fba4:	2762      	movs	r7, #98	; 0x62
 801fba6:	601c      	str	r4, [r3, #0]
 801fba8:	e723      	b.n	801f9f2 <__gethex+0x12a>
 801fbaa:	1e71      	subs	r1, r6, #1
 801fbac:	4620      	mov	r0, r4
 801fbae:	f000 feb8 	bl	8020922 <__any_on>
 801fbb2:	2800      	cmp	r0, #0
 801fbb4:	d1ed      	bne.n	801fb92 <__gethex+0x2ca>
 801fbb6:	ee18 0a10 	vmov	r0, s16
 801fbba:	4621      	mov	r1, r4
 801fbbc:	f000 fa56 	bl	802006c <_Bfree>
 801fbc0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801fbc2:	2300      	movs	r3, #0
 801fbc4:	6013      	str	r3, [r2, #0]
 801fbc6:	2750      	movs	r7, #80	; 0x50
 801fbc8:	e713      	b.n	801f9f2 <__gethex+0x12a>
 801fbca:	bf00      	nop
 801fbcc:	0802a84c 	.word	0x0802a84c
 801fbd0:	0802a76c 	.word	0x0802a76c
 801fbd4:	0802a7e0 	.word	0x0802a7e0
 801fbd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fbda:	2b00      	cmp	r3, #0
 801fbdc:	d1eb      	bne.n	801fbb6 <__gethex+0x2ee>
 801fbde:	e7d8      	b.n	801fb92 <__gethex+0x2ca>
 801fbe0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fbe2:	2b00      	cmp	r3, #0
 801fbe4:	d1d5      	bne.n	801fb92 <__gethex+0x2ca>
 801fbe6:	e7e6      	b.n	801fbb6 <__gethex+0x2ee>
 801fbe8:	1e6f      	subs	r7, r5, #1
 801fbea:	f1ba 0f00 	cmp.w	sl, #0
 801fbee:	d131      	bne.n	801fc54 <__gethex+0x38c>
 801fbf0:	b127      	cbz	r7, 801fbfc <__gethex+0x334>
 801fbf2:	4639      	mov	r1, r7
 801fbf4:	4620      	mov	r0, r4
 801fbf6:	f000 fe94 	bl	8020922 <__any_on>
 801fbfa:	4682      	mov	sl, r0
 801fbfc:	117b      	asrs	r3, r7, #5
 801fbfe:	2101      	movs	r1, #1
 801fc00:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801fc04:	f007 071f 	and.w	r7, r7, #31
 801fc08:	fa01 f707 	lsl.w	r7, r1, r7
 801fc0c:	421f      	tst	r7, r3
 801fc0e:	4629      	mov	r1, r5
 801fc10:	4620      	mov	r0, r4
 801fc12:	bf18      	it	ne
 801fc14:	f04a 0a02 	orrne.w	sl, sl, #2
 801fc18:	1b76      	subs	r6, r6, r5
 801fc1a:	f7ff fdee 	bl	801f7fa <rshift>
 801fc1e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801fc22:	2702      	movs	r7, #2
 801fc24:	f1ba 0f00 	cmp.w	sl, #0
 801fc28:	d048      	beq.n	801fcbc <__gethex+0x3f4>
 801fc2a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801fc2e:	2b02      	cmp	r3, #2
 801fc30:	d015      	beq.n	801fc5e <__gethex+0x396>
 801fc32:	2b03      	cmp	r3, #3
 801fc34:	d017      	beq.n	801fc66 <__gethex+0x39e>
 801fc36:	2b01      	cmp	r3, #1
 801fc38:	d109      	bne.n	801fc4e <__gethex+0x386>
 801fc3a:	f01a 0f02 	tst.w	sl, #2
 801fc3e:	d006      	beq.n	801fc4e <__gethex+0x386>
 801fc40:	f8d9 0000 	ldr.w	r0, [r9]
 801fc44:	ea4a 0a00 	orr.w	sl, sl, r0
 801fc48:	f01a 0f01 	tst.w	sl, #1
 801fc4c:	d10e      	bne.n	801fc6c <__gethex+0x3a4>
 801fc4e:	f047 0710 	orr.w	r7, r7, #16
 801fc52:	e033      	b.n	801fcbc <__gethex+0x3f4>
 801fc54:	f04f 0a01 	mov.w	sl, #1
 801fc58:	e7d0      	b.n	801fbfc <__gethex+0x334>
 801fc5a:	2701      	movs	r7, #1
 801fc5c:	e7e2      	b.n	801fc24 <__gethex+0x35c>
 801fc5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fc60:	f1c3 0301 	rsb	r3, r3, #1
 801fc64:	9315      	str	r3, [sp, #84]	; 0x54
 801fc66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801fc68:	2b00      	cmp	r3, #0
 801fc6a:	d0f0      	beq.n	801fc4e <__gethex+0x386>
 801fc6c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801fc70:	f104 0314 	add.w	r3, r4, #20
 801fc74:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801fc78:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801fc7c:	f04f 0c00 	mov.w	ip, #0
 801fc80:	4618      	mov	r0, r3
 801fc82:	f853 2b04 	ldr.w	r2, [r3], #4
 801fc86:	f1b2 3fff 	cmp.w	r2, #4294967295
 801fc8a:	d01c      	beq.n	801fcc6 <__gethex+0x3fe>
 801fc8c:	3201      	adds	r2, #1
 801fc8e:	6002      	str	r2, [r0, #0]
 801fc90:	2f02      	cmp	r7, #2
 801fc92:	f104 0314 	add.w	r3, r4, #20
 801fc96:	d13f      	bne.n	801fd18 <__gethex+0x450>
 801fc98:	f8d8 2000 	ldr.w	r2, [r8]
 801fc9c:	3a01      	subs	r2, #1
 801fc9e:	42b2      	cmp	r2, r6
 801fca0:	d10a      	bne.n	801fcb8 <__gethex+0x3f0>
 801fca2:	1171      	asrs	r1, r6, #5
 801fca4:	2201      	movs	r2, #1
 801fca6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801fcaa:	f006 061f 	and.w	r6, r6, #31
 801fcae:	fa02 f606 	lsl.w	r6, r2, r6
 801fcb2:	421e      	tst	r6, r3
 801fcb4:	bf18      	it	ne
 801fcb6:	4617      	movne	r7, r2
 801fcb8:	f047 0720 	orr.w	r7, r7, #32
 801fcbc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801fcbe:	601c      	str	r4, [r3, #0]
 801fcc0:	9b04      	ldr	r3, [sp, #16]
 801fcc2:	601d      	str	r5, [r3, #0]
 801fcc4:	e695      	b.n	801f9f2 <__gethex+0x12a>
 801fcc6:	4299      	cmp	r1, r3
 801fcc8:	f843 cc04 	str.w	ip, [r3, #-4]
 801fccc:	d8d8      	bhi.n	801fc80 <__gethex+0x3b8>
 801fcce:	68a3      	ldr	r3, [r4, #8]
 801fcd0:	459b      	cmp	fp, r3
 801fcd2:	db19      	blt.n	801fd08 <__gethex+0x440>
 801fcd4:	6861      	ldr	r1, [r4, #4]
 801fcd6:	ee18 0a10 	vmov	r0, s16
 801fcda:	3101      	adds	r1, #1
 801fcdc:	f000 f986 	bl	801ffec <_Balloc>
 801fce0:	4681      	mov	r9, r0
 801fce2:	b918      	cbnz	r0, 801fcec <__gethex+0x424>
 801fce4:	4b1a      	ldr	r3, [pc, #104]	; (801fd50 <__gethex+0x488>)
 801fce6:	4602      	mov	r2, r0
 801fce8:	2184      	movs	r1, #132	; 0x84
 801fcea:	e6a8      	b.n	801fa3e <__gethex+0x176>
 801fcec:	6922      	ldr	r2, [r4, #16]
 801fcee:	3202      	adds	r2, #2
 801fcf0:	f104 010c 	add.w	r1, r4, #12
 801fcf4:	0092      	lsls	r2, r2, #2
 801fcf6:	300c      	adds	r0, #12
 801fcf8:	f7fc fcd2 	bl	801c6a0 <memcpy>
 801fcfc:	4621      	mov	r1, r4
 801fcfe:	ee18 0a10 	vmov	r0, s16
 801fd02:	f000 f9b3 	bl	802006c <_Bfree>
 801fd06:	464c      	mov	r4, r9
 801fd08:	6923      	ldr	r3, [r4, #16]
 801fd0a:	1c5a      	adds	r2, r3, #1
 801fd0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801fd10:	6122      	str	r2, [r4, #16]
 801fd12:	2201      	movs	r2, #1
 801fd14:	615a      	str	r2, [r3, #20]
 801fd16:	e7bb      	b.n	801fc90 <__gethex+0x3c8>
 801fd18:	6922      	ldr	r2, [r4, #16]
 801fd1a:	455a      	cmp	r2, fp
 801fd1c:	dd0b      	ble.n	801fd36 <__gethex+0x46e>
 801fd1e:	2101      	movs	r1, #1
 801fd20:	4620      	mov	r0, r4
 801fd22:	f7ff fd6a 	bl	801f7fa <rshift>
 801fd26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801fd2a:	3501      	adds	r5, #1
 801fd2c:	42ab      	cmp	r3, r5
 801fd2e:	f6ff aed0 	blt.w	801fad2 <__gethex+0x20a>
 801fd32:	2701      	movs	r7, #1
 801fd34:	e7c0      	b.n	801fcb8 <__gethex+0x3f0>
 801fd36:	f016 061f 	ands.w	r6, r6, #31
 801fd3a:	d0fa      	beq.n	801fd32 <__gethex+0x46a>
 801fd3c:	449a      	add	sl, r3
 801fd3e:	f1c6 0620 	rsb	r6, r6, #32
 801fd42:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801fd46:	f000 fa47 	bl	80201d8 <__hi0bits>
 801fd4a:	42b0      	cmp	r0, r6
 801fd4c:	dbe7      	blt.n	801fd1e <__gethex+0x456>
 801fd4e:	e7f0      	b.n	801fd32 <__gethex+0x46a>
 801fd50:	0802a76c 	.word	0x0802a76c

0801fd54 <L_shift>:
 801fd54:	f1c2 0208 	rsb	r2, r2, #8
 801fd58:	0092      	lsls	r2, r2, #2
 801fd5a:	b570      	push	{r4, r5, r6, lr}
 801fd5c:	f1c2 0620 	rsb	r6, r2, #32
 801fd60:	6843      	ldr	r3, [r0, #4]
 801fd62:	6804      	ldr	r4, [r0, #0]
 801fd64:	fa03 f506 	lsl.w	r5, r3, r6
 801fd68:	432c      	orrs	r4, r5
 801fd6a:	40d3      	lsrs	r3, r2
 801fd6c:	6004      	str	r4, [r0, #0]
 801fd6e:	f840 3f04 	str.w	r3, [r0, #4]!
 801fd72:	4288      	cmp	r0, r1
 801fd74:	d3f4      	bcc.n	801fd60 <L_shift+0xc>
 801fd76:	bd70      	pop	{r4, r5, r6, pc}

0801fd78 <__match>:
 801fd78:	b530      	push	{r4, r5, lr}
 801fd7a:	6803      	ldr	r3, [r0, #0]
 801fd7c:	3301      	adds	r3, #1
 801fd7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801fd82:	b914      	cbnz	r4, 801fd8a <__match+0x12>
 801fd84:	6003      	str	r3, [r0, #0]
 801fd86:	2001      	movs	r0, #1
 801fd88:	bd30      	pop	{r4, r5, pc}
 801fd8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fd8e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801fd92:	2d19      	cmp	r5, #25
 801fd94:	bf98      	it	ls
 801fd96:	3220      	addls	r2, #32
 801fd98:	42a2      	cmp	r2, r4
 801fd9a:	d0f0      	beq.n	801fd7e <__match+0x6>
 801fd9c:	2000      	movs	r0, #0
 801fd9e:	e7f3      	b.n	801fd88 <__match+0x10>

0801fda0 <__hexnan>:
 801fda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fda4:	680b      	ldr	r3, [r1, #0]
 801fda6:	6801      	ldr	r1, [r0, #0]
 801fda8:	115e      	asrs	r6, r3, #5
 801fdaa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801fdae:	f013 031f 	ands.w	r3, r3, #31
 801fdb2:	b087      	sub	sp, #28
 801fdb4:	bf18      	it	ne
 801fdb6:	3604      	addne	r6, #4
 801fdb8:	2500      	movs	r5, #0
 801fdba:	1f37      	subs	r7, r6, #4
 801fdbc:	4682      	mov	sl, r0
 801fdbe:	4690      	mov	r8, r2
 801fdc0:	9301      	str	r3, [sp, #4]
 801fdc2:	f846 5c04 	str.w	r5, [r6, #-4]
 801fdc6:	46b9      	mov	r9, r7
 801fdc8:	463c      	mov	r4, r7
 801fdca:	9502      	str	r5, [sp, #8]
 801fdcc:	46ab      	mov	fp, r5
 801fdce:	784a      	ldrb	r2, [r1, #1]
 801fdd0:	1c4b      	adds	r3, r1, #1
 801fdd2:	9303      	str	r3, [sp, #12]
 801fdd4:	b342      	cbz	r2, 801fe28 <__hexnan+0x88>
 801fdd6:	4610      	mov	r0, r2
 801fdd8:	9105      	str	r1, [sp, #20]
 801fdda:	9204      	str	r2, [sp, #16]
 801fddc:	f7ff fd5f 	bl	801f89e <__hexdig_fun>
 801fde0:	2800      	cmp	r0, #0
 801fde2:	d14f      	bne.n	801fe84 <__hexnan+0xe4>
 801fde4:	9a04      	ldr	r2, [sp, #16]
 801fde6:	9905      	ldr	r1, [sp, #20]
 801fde8:	2a20      	cmp	r2, #32
 801fdea:	d818      	bhi.n	801fe1e <__hexnan+0x7e>
 801fdec:	9b02      	ldr	r3, [sp, #8]
 801fdee:	459b      	cmp	fp, r3
 801fdf0:	dd13      	ble.n	801fe1a <__hexnan+0x7a>
 801fdf2:	454c      	cmp	r4, r9
 801fdf4:	d206      	bcs.n	801fe04 <__hexnan+0x64>
 801fdf6:	2d07      	cmp	r5, #7
 801fdf8:	dc04      	bgt.n	801fe04 <__hexnan+0x64>
 801fdfa:	462a      	mov	r2, r5
 801fdfc:	4649      	mov	r1, r9
 801fdfe:	4620      	mov	r0, r4
 801fe00:	f7ff ffa8 	bl	801fd54 <L_shift>
 801fe04:	4544      	cmp	r4, r8
 801fe06:	d950      	bls.n	801feaa <__hexnan+0x10a>
 801fe08:	2300      	movs	r3, #0
 801fe0a:	f1a4 0904 	sub.w	r9, r4, #4
 801fe0e:	f844 3c04 	str.w	r3, [r4, #-4]
 801fe12:	f8cd b008 	str.w	fp, [sp, #8]
 801fe16:	464c      	mov	r4, r9
 801fe18:	461d      	mov	r5, r3
 801fe1a:	9903      	ldr	r1, [sp, #12]
 801fe1c:	e7d7      	b.n	801fdce <__hexnan+0x2e>
 801fe1e:	2a29      	cmp	r2, #41	; 0x29
 801fe20:	d156      	bne.n	801fed0 <__hexnan+0x130>
 801fe22:	3102      	adds	r1, #2
 801fe24:	f8ca 1000 	str.w	r1, [sl]
 801fe28:	f1bb 0f00 	cmp.w	fp, #0
 801fe2c:	d050      	beq.n	801fed0 <__hexnan+0x130>
 801fe2e:	454c      	cmp	r4, r9
 801fe30:	d206      	bcs.n	801fe40 <__hexnan+0xa0>
 801fe32:	2d07      	cmp	r5, #7
 801fe34:	dc04      	bgt.n	801fe40 <__hexnan+0xa0>
 801fe36:	462a      	mov	r2, r5
 801fe38:	4649      	mov	r1, r9
 801fe3a:	4620      	mov	r0, r4
 801fe3c:	f7ff ff8a 	bl	801fd54 <L_shift>
 801fe40:	4544      	cmp	r4, r8
 801fe42:	d934      	bls.n	801feae <__hexnan+0x10e>
 801fe44:	f1a8 0204 	sub.w	r2, r8, #4
 801fe48:	4623      	mov	r3, r4
 801fe4a:	f853 1b04 	ldr.w	r1, [r3], #4
 801fe4e:	f842 1f04 	str.w	r1, [r2, #4]!
 801fe52:	429f      	cmp	r7, r3
 801fe54:	d2f9      	bcs.n	801fe4a <__hexnan+0xaa>
 801fe56:	1b3b      	subs	r3, r7, r4
 801fe58:	f023 0303 	bic.w	r3, r3, #3
 801fe5c:	3304      	adds	r3, #4
 801fe5e:	3401      	adds	r4, #1
 801fe60:	3e03      	subs	r6, #3
 801fe62:	42b4      	cmp	r4, r6
 801fe64:	bf88      	it	hi
 801fe66:	2304      	movhi	r3, #4
 801fe68:	4443      	add	r3, r8
 801fe6a:	2200      	movs	r2, #0
 801fe6c:	f843 2b04 	str.w	r2, [r3], #4
 801fe70:	429f      	cmp	r7, r3
 801fe72:	d2fb      	bcs.n	801fe6c <__hexnan+0xcc>
 801fe74:	683b      	ldr	r3, [r7, #0]
 801fe76:	b91b      	cbnz	r3, 801fe80 <__hexnan+0xe0>
 801fe78:	4547      	cmp	r7, r8
 801fe7a:	d127      	bne.n	801fecc <__hexnan+0x12c>
 801fe7c:	2301      	movs	r3, #1
 801fe7e:	603b      	str	r3, [r7, #0]
 801fe80:	2005      	movs	r0, #5
 801fe82:	e026      	b.n	801fed2 <__hexnan+0x132>
 801fe84:	3501      	adds	r5, #1
 801fe86:	2d08      	cmp	r5, #8
 801fe88:	f10b 0b01 	add.w	fp, fp, #1
 801fe8c:	dd06      	ble.n	801fe9c <__hexnan+0xfc>
 801fe8e:	4544      	cmp	r4, r8
 801fe90:	d9c3      	bls.n	801fe1a <__hexnan+0x7a>
 801fe92:	2300      	movs	r3, #0
 801fe94:	f844 3c04 	str.w	r3, [r4, #-4]
 801fe98:	2501      	movs	r5, #1
 801fe9a:	3c04      	subs	r4, #4
 801fe9c:	6822      	ldr	r2, [r4, #0]
 801fe9e:	f000 000f 	and.w	r0, r0, #15
 801fea2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801fea6:	6022      	str	r2, [r4, #0]
 801fea8:	e7b7      	b.n	801fe1a <__hexnan+0x7a>
 801feaa:	2508      	movs	r5, #8
 801feac:	e7b5      	b.n	801fe1a <__hexnan+0x7a>
 801feae:	9b01      	ldr	r3, [sp, #4]
 801feb0:	2b00      	cmp	r3, #0
 801feb2:	d0df      	beq.n	801fe74 <__hexnan+0xd4>
 801feb4:	f04f 32ff 	mov.w	r2, #4294967295
 801feb8:	f1c3 0320 	rsb	r3, r3, #32
 801febc:	fa22 f303 	lsr.w	r3, r2, r3
 801fec0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801fec4:	401a      	ands	r2, r3
 801fec6:	f846 2c04 	str.w	r2, [r6, #-4]
 801feca:	e7d3      	b.n	801fe74 <__hexnan+0xd4>
 801fecc:	3f04      	subs	r7, #4
 801fece:	e7d1      	b.n	801fe74 <__hexnan+0xd4>
 801fed0:	2004      	movs	r0, #4
 801fed2:	b007      	add	sp, #28
 801fed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fed8 <_localeconv_r>:
 801fed8:	4800      	ldr	r0, [pc, #0]	; (801fedc <_localeconv_r+0x4>)
 801feda:	4770      	bx	lr
 801fedc:	2400a280 	.word	0x2400a280

0801fee0 <__retarget_lock_init_recursive>:
 801fee0:	4770      	bx	lr

0801fee2 <__retarget_lock_acquire_recursive>:
 801fee2:	4770      	bx	lr

0801fee4 <__retarget_lock_release_recursive>:
 801fee4:	4770      	bx	lr

0801fee6 <__swhatbuf_r>:
 801fee6:	b570      	push	{r4, r5, r6, lr}
 801fee8:	460e      	mov	r6, r1
 801feea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801feee:	2900      	cmp	r1, #0
 801fef0:	b096      	sub	sp, #88	; 0x58
 801fef2:	4614      	mov	r4, r2
 801fef4:	461d      	mov	r5, r3
 801fef6:	da07      	bge.n	801ff08 <__swhatbuf_r+0x22>
 801fef8:	2300      	movs	r3, #0
 801fefa:	602b      	str	r3, [r5, #0]
 801fefc:	89b3      	ldrh	r3, [r6, #12]
 801fefe:	061a      	lsls	r2, r3, #24
 801ff00:	d410      	bmi.n	801ff24 <__swhatbuf_r+0x3e>
 801ff02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ff06:	e00e      	b.n	801ff26 <__swhatbuf_r+0x40>
 801ff08:	466a      	mov	r2, sp
 801ff0a:	f000 ff7b 	bl	8020e04 <_fstat_r>
 801ff0e:	2800      	cmp	r0, #0
 801ff10:	dbf2      	blt.n	801fef8 <__swhatbuf_r+0x12>
 801ff12:	9a01      	ldr	r2, [sp, #4]
 801ff14:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ff18:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ff1c:	425a      	negs	r2, r3
 801ff1e:	415a      	adcs	r2, r3
 801ff20:	602a      	str	r2, [r5, #0]
 801ff22:	e7ee      	b.n	801ff02 <__swhatbuf_r+0x1c>
 801ff24:	2340      	movs	r3, #64	; 0x40
 801ff26:	2000      	movs	r0, #0
 801ff28:	6023      	str	r3, [r4, #0]
 801ff2a:	b016      	add	sp, #88	; 0x58
 801ff2c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801ff30 <__smakebuf_r>:
 801ff30:	898b      	ldrh	r3, [r1, #12]
 801ff32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ff34:	079d      	lsls	r5, r3, #30
 801ff36:	4606      	mov	r6, r0
 801ff38:	460c      	mov	r4, r1
 801ff3a:	d507      	bpl.n	801ff4c <__smakebuf_r+0x1c>
 801ff3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ff40:	6023      	str	r3, [r4, #0]
 801ff42:	6123      	str	r3, [r4, #16]
 801ff44:	2301      	movs	r3, #1
 801ff46:	6163      	str	r3, [r4, #20]
 801ff48:	b002      	add	sp, #8
 801ff4a:	bd70      	pop	{r4, r5, r6, pc}
 801ff4c:	ab01      	add	r3, sp, #4
 801ff4e:	466a      	mov	r2, sp
 801ff50:	f7ff ffc9 	bl	801fee6 <__swhatbuf_r>
 801ff54:	9900      	ldr	r1, [sp, #0]
 801ff56:	4605      	mov	r5, r0
 801ff58:	4630      	mov	r0, r6
 801ff5a:	f7fc fc21 	bl	801c7a0 <_malloc_r>
 801ff5e:	b948      	cbnz	r0, 801ff74 <__smakebuf_r+0x44>
 801ff60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ff64:	059a      	lsls	r2, r3, #22
 801ff66:	d4ef      	bmi.n	801ff48 <__smakebuf_r+0x18>
 801ff68:	f023 0303 	bic.w	r3, r3, #3
 801ff6c:	f043 0302 	orr.w	r3, r3, #2
 801ff70:	81a3      	strh	r3, [r4, #12]
 801ff72:	e7e3      	b.n	801ff3c <__smakebuf_r+0xc>
 801ff74:	4b0d      	ldr	r3, [pc, #52]	; (801ffac <__smakebuf_r+0x7c>)
 801ff76:	62b3      	str	r3, [r6, #40]	; 0x28
 801ff78:	89a3      	ldrh	r3, [r4, #12]
 801ff7a:	6020      	str	r0, [r4, #0]
 801ff7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ff80:	81a3      	strh	r3, [r4, #12]
 801ff82:	9b00      	ldr	r3, [sp, #0]
 801ff84:	6163      	str	r3, [r4, #20]
 801ff86:	9b01      	ldr	r3, [sp, #4]
 801ff88:	6120      	str	r0, [r4, #16]
 801ff8a:	b15b      	cbz	r3, 801ffa4 <__smakebuf_r+0x74>
 801ff8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ff90:	4630      	mov	r0, r6
 801ff92:	f000 ff49 	bl	8020e28 <_isatty_r>
 801ff96:	b128      	cbz	r0, 801ffa4 <__smakebuf_r+0x74>
 801ff98:	89a3      	ldrh	r3, [r4, #12]
 801ff9a:	f023 0303 	bic.w	r3, r3, #3
 801ff9e:	f043 0301 	orr.w	r3, r3, #1
 801ffa2:	81a3      	strh	r3, [r4, #12]
 801ffa4:	89a0      	ldrh	r0, [r4, #12]
 801ffa6:	4305      	orrs	r5, r0
 801ffa8:	81a5      	strh	r5, [r4, #12]
 801ffaa:	e7cd      	b.n	801ff48 <__smakebuf_r+0x18>
 801ffac:	0801f659 	.word	0x0801f659

0801ffb0 <__ascii_mbtowc>:
 801ffb0:	b082      	sub	sp, #8
 801ffb2:	b901      	cbnz	r1, 801ffb6 <__ascii_mbtowc+0x6>
 801ffb4:	a901      	add	r1, sp, #4
 801ffb6:	b142      	cbz	r2, 801ffca <__ascii_mbtowc+0x1a>
 801ffb8:	b14b      	cbz	r3, 801ffce <__ascii_mbtowc+0x1e>
 801ffba:	7813      	ldrb	r3, [r2, #0]
 801ffbc:	600b      	str	r3, [r1, #0]
 801ffbe:	7812      	ldrb	r2, [r2, #0]
 801ffc0:	1e10      	subs	r0, r2, #0
 801ffc2:	bf18      	it	ne
 801ffc4:	2001      	movne	r0, #1
 801ffc6:	b002      	add	sp, #8
 801ffc8:	4770      	bx	lr
 801ffca:	4610      	mov	r0, r2
 801ffcc:	e7fb      	b.n	801ffc6 <__ascii_mbtowc+0x16>
 801ffce:	f06f 0001 	mvn.w	r0, #1
 801ffd2:	e7f8      	b.n	801ffc6 <__ascii_mbtowc+0x16>

0801ffd4 <__malloc_lock>:
 801ffd4:	4801      	ldr	r0, [pc, #4]	; (801ffdc <__malloc_lock+0x8>)
 801ffd6:	f7ff bf84 	b.w	801fee2 <__retarget_lock_acquire_recursive>
 801ffda:	bf00      	nop
 801ffdc:	24014854 	.word	0x24014854

0801ffe0 <__malloc_unlock>:
 801ffe0:	4801      	ldr	r0, [pc, #4]	; (801ffe8 <__malloc_unlock+0x8>)
 801ffe2:	f7ff bf7f 	b.w	801fee4 <__retarget_lock_release_recursive>
 801ffe6:	bf00      	nop
 801ffe8:	24014854 	.word	0x24014854

0801ffec <_Balloc>:
 801ffec:	b570      	push	{r4, r5, r6, lr}
 801ffee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801fff0:	4604      	mov	r4, r0
 801fff2:	460d      	mov	r5, r1
 801fff4:	b976      	cbnz	r6, 8020014 <_Balloc+0x28>
 801fff6:	2010      	movs	r0, #16
 801fff8:	f7fc fb42 	bl	801c680 <malloc>
 801fffc:	4602      	mov	r2, r0
 801fffe:	6260      	str	r0, [r4, #36]	; 0x24
 8020000:	b920      	cbnz	r0, 802000c <_Balloc+0x20>
 8020002:	4b18      	ldr	r3, [pc, #96]	; (8020064 <_Balloc+0x78>)
 8020004:	4818      	ldr	r0, [pc, #96]	; (8020068 <_Balloc+0x7c>)
 8020006:	2166      	movs	r1, #102	; 0x66
 8020008:	f7fc fadc 	bl	801c5c4 <__assert_func>
 802000c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020010:	6006      	str	r6, [r0, #0]
 8020012:	60c6      	str	r6, [r0, #12]
 8020014:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8020016:	68f3      	ldr	r3, [r6, #12]
 8020018:	b183      	cbz	r3, 802003c <_Balloc+0x50>
 802001a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802001c:	68db      	ldr	r3, [r3, #12]
 802001e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8020022:	b9b8      	cbnz	r0, 8020054 <_Balloc+0x68>
 8020024:	2101      	movs	r1, #1
 8020026:	fa01 f605 	lsl.w	r6, r1, r5
 802002a:	1d72      	adds	r2, r6, #5
 802002c:	0092      	lsls	r2, r2, #2
 802002e:	4620      	mov	r0, r4
 8020030:	f000 fc98 	bl	8020964 <_calloc_r>
 8020034:	b160      	cbz	r0, 8020050 <_Balloc+0x64>
 8020036:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802003a:	e00e      	b.n	802005a <_Balloc+0x6e>
 802003c:	2221      	movs	r2, #33	; 0x21
 802003e:	2104      	movs	r1, #4
 8020040:	4620      	mov	r0, r4
 8020042:	f000 fc8f 	bl	8020964 <_calloc_r>
 8020046:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020048:	60f0      	str	r0, [r6, #12]
 802004a:	68db      	ldr	r3, [r3, #12]
 802004c:	2b00      	cmp	r3, #0
 802004e:	d1e4      	bne.n	802001a <_Balloc+0x2e>
 8020050:	2000      	movs	r0, #0
 8020052:	bd70      	pop	{r4, r5, r6, pc}
 8020054:	6802      	ldr	r2, [r0, #0]
 8020056:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802005a:	2300      	movs	r3, #0
 802005c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8020060:	e7f7      	b.n	8020052 <_Balloc+0x66>
 8020062:	bf00      	nop
 8020064:	0802a6f6 	.word	0x0802a6f6
 8020068:	0802a860 	.word	0x0802a860

0802006c <_Bfree>:
 802006c:	b570      	push	{r4, r5, r6, lr}
 802006e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8020070:	4605      	mov	r5, r0
 8020072:	460c      	mov	r4, r1
 8020074:	b976      	cbnz	r6, 8020094 <_Bfree+0x28>
 8020076:	2010      	movs	r0, #16
 8020078:	f7fc fb02 	bl	801c680 <malloc>
 802007c:	4602      	mov	r2, r0
 802007e:	6268      	str	r0, [r5, #36]	; 0x24
 8020080:	b920      	cbnz	r0, 802008c <_Bfree+0x20>
 8020082:	4b09      	ldr	r3, [pc, #36]	; (80200a8 <_Bfree+0x3c>)
 8020084:	4809      	ldr	r0, [pc, #36]	; (80200ac <_Bfree+0x40>)
 8020086:	218a      	movs	r1, #138	; 0x8a
 8020088:	f7fc fa9c 	bl	801c5c4 <__assert_func>
 802008c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020090:	6006      	str	r6, [r0, #0]
 8020092:	60c6      	str	r6, [r0, #12]
 8020094:	b13c      	cbz	r4, 80200a6 <_Bfree+0x3a>
 8020096:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8020098:	6862      	ldr	r2, [r4, #4]
 802009a:	68db      	ldr	r3, [r3, #12]
 802009c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80200a0:	6021      	str	r1, [r4, #0]
 80200a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80200a6:	bd70      	pop	{r4, r5, r6, pc}
 80200a8:	0802a6f6 	.word	0x0802a6f6
 80200ac:	0802a860 	.word	0x0802a860

080200b0 <__multadd>:
 80200b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80200b4:	690e      	ldr	r6, [r1, #16]
 80200b6:	4607      	mov	r7, r0
 80200b8:	4698      	mov	r8, r3
 80200ba:	460c      	mov	r4, r1
 80200bc:	f101 0014 	add.w	r0, r1, #20
 80200c0:	2300      	movs	r3, #0
 80200c2:	6805      	ldr	r5, [r0, #0]
 80200c4:	b2a9      	uxth	r1, r5
 80200c6:	fb02 8101 	mla	r1, r2, r1, r8
 80200ca:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80200ce:	0c2d      	lsrs	r5, r5, #16
 80200d0:	fb02 c505 	mla	r5, r2, r5, ip
 80200d4:	b289      	uxth	r1, r1
 80200d6:	3301      	adds	r3, #1
 80200d8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80200dc:	429e      	cmp	r6, r3
 80200de:	f840 1b04 	str.w	r1, [r0], #4
 80200e2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80200e6:	dcec      	bgt.n	80200c2 <__multadd+0x12>
 80200e8:	f1b8 0f00 	cmp.w	r8, #0
 80200ec:	d022      	beq.n	8020134 <__multadd+0x84>
 80200ee:	68a3      	ldr	r3, [r4, #8]
 80200f0:	42b3      	cmp	r3, r6
 80200f2:	dc19      	bgt.n	8020128 <__multadd+0x78>
 80200f4:	6861      	ldr	r1, [r4, #4]
 80200f6:	4638      	mov	r0, r7
 80200f8:	3101      	adds	r1, #1
 80200fa:	f7ff ff77 	bl	801ffec <_Balloc>
 80200fe:	4605      	mov	r5, r0
 8020100:	b928      	cbnz	r0, 802010e <__multadd+0x5e>
 8020102:	4602      	mov	r2, r0
 8020104:	4b0d      	ldr	r3, [pc, #52]	; (802013c <__multadd+0x8c>)
 8020106:	480e      	ldr	r0, [pc, #56]	; (8020140 <__multadd+0x90>)
 8020108:	21b5      	movs	r1, #181	; 0xb5
 802010a:	f7fc fa5b 	bl	801c5c4 <__assert_func>
 802010e:	6922      	ldr	r2, [r4, #16]
 8020110:	3202      	adds	r2, #2
 8020112:	f104 010c 	add.w	r1, r4, #12
 8020116:	0092      	lsls	r2, r2, #2
 8020118:	300c      	adds	r0, #12
 802011a:	f7fc fac1 	bl	801c6a0 <memcpy>
 802011e:	4621      	mov	r1, r4
 8020120:	4638      	mov	r0, r7
 8020122:	f7ff ffa3 	bl	802006c <_Bfree>
 8020126:	462c      	mov	r4, r5
 8020128:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 802012c:	3601      	adds	r6, #1
 802012e:	f8c3 8014 	str.w	r8, [r3, #20]
 8020132:	6126      	str	r6, [r4, #16]
 8020134:	4620      	mov	r0, r4
 8020136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802013a:	bf00      	nop
 802013c:	0802a76c 	.word	0x0802a76c
 8020140:	0802a860 	.word	0x0802a860

08020144 <__s2b>:
 8020144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020148:	460c      	mov	r4, r1
 802014a:	4615      	mov	r5, r2
 802014c:	461f      	mov	r7, r3
 802014e:	2209      	movs	r2, #9
 8020150:	3308      	adds	r3, #8
 8020152:	4606      	mov	r6, r0
 8020154:	fb93 f3f2 	sdiv	r3, r3, r2
 8020158:	2100      	movs	r1, #0
 802015a:	2201      	movs	r2, #1
 802015c:	429a      	cmp	r2, r3
 802015e:	db09      	blt.n	8020174 <__s2b+0x30>
 8020160:	4630      	mov	r0, r6
 8020162:	f7ff ff43 	bl	801ffec <_Balloc>
 8020166:	b940      	cbnz	r0, 802017a <__s2b+0x36>
 8020168:	4602      	mov	r2, r0
 802016a:	4b19      	ldr	r3, [pc, #100]	; (80201d0 <__s2b+0x8c>)
 802016c:	4819      	ldr	r0, [pc, #100]	; (80201d4 <__s2b+0x90>)
 802016e:	21ce      	movs	r1, #206	; 0xce
 8020170:	f7fc fa28 	bl	801c5c4 <__assert_func>
 8020174:	0052      	lsls	r2, r2, #1
 8020176:	3101      	adds	r1, #1
 8020178:	e7f0      	b.n	802015c <__s2b+0x18>
 802017a:	9b08      	ldr	r3, [sp, #32]
 802017c:	6143      	str	r3, [r0, #20]
 802017e:	2d09      	cmp	r5, #9
 8020180:	f04f 0301 	mov.w	r3, #1
 8020184:	6103      	str	r3, [r0, #16]
 8020186:	dd16      	ble.n	80201b6 <__s2b+0x72>
 8020188:	f104 0909 	add.w	r9, r4, #9
 802018c:	46c8      	mov	r8, r9
 802018e:	442c      	add	r4, r5
 8020190:	f818 3b01 	ldrb.w	r3, [r8], #1
 8020194:	4601      	mov	r1, r0
 8020196:	3b30      	subs	r3, #48	; 0x30
 8020198:	220a      	movs	r2, #10
 802019a:	4630      	mov	r0, r6
 802019c:	f7ff ff88 	bl	80200b0 <__multadd>
 80201a0:	45a0      	cmp	r8, r4
 80201a2:	d1f5      	bne.n	8020190 <__s2b+0x4c>
 80201a4:	f1a5 0408 	sub.w	r4, r5, #8
 80201a8:	444c      	add	r4, r9
 80201aa:	1b2d      	subs	r5, r5, r4
 80201ac:	1963      	adds	r3, r4, r5
 80201ae:	42bb      	cmp	r3, r7
 80201b0:	db04      	blt.n	80201bc <__s2b+0x78>
 80201b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80201b6:	340a      	adds	r4, #10
 80201b8:	2509      	movs	r5, #9
 80201ba:	e7f6      	b.n	80201aa <__s2b+0x66>
 80201bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80201c0:	4601      	mov	r1, r0
 80201c2:	3b30      	subs	r3, #48	; 0x30
 80201c4:	220a      	movs	r2, #10
 80201c6:	4630      	mov	r0, r6
 80201c8:	f7ff ff72 	bl	80200b0 <__multadd>
 80201cc:	e7ee      	b.n	80201ac <__s2b+0x68>
 80201ce:	bf00      	nop
 80201d0:	0802a76c 	.word	0x0802a76c
 80201d4:	0802a860 	.word	0x0802a860

080201d8 <__hi0bits>:
 80201d8:	0c03      	lsrs	r3, r0, #16
 80201da:	041b      	lsls	r3, r3, #16
 80201dc:	b9d3      	cbnz	r3, 8020214 <__hi0bits+0x3c>
 80201de:	0400      	lsls	r0, r0, #16
 80201e0:	2310      	movs	r3, #16
 80201e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80201e6:	bf04      	itt	eq
 80201e8:	0200      	lsleq	r0, r0, #8
 80201ea:	3308      	addeq	r3, #8
 80201ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80201f0:	bf04      	itt	eq
 80201f2:	0100      	lsleq	r0, r0, #4
 80201f4:	3304      	addeq	r3, #4
 80201f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80201fa:	bf04      	itt	eq
 80201fc:	0080      	lsleq	r0, r0, #2
 80201fe:	3302      	addeq	r3, #2
 8020200:	2800      	cmp	r0, #0
 8020202:	db05      	blt.n	8020210 <__hi0bits+0x38>
 8020204:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8020208:	f103 0301 	add.w	r3, r3, #1
 802020c:	bf08      	it	eq
 802020e:	2320      	moveq	r3, #32
 8020210:	4618      	mov	r0, r3
 8020212:	4770      	bx	lr
 8020214:	2300      	movs	r3, #0
 8020216:	e7e4      	b.n	80201e2 <__hi0bits+0xa>

08020218 <__lo0bits>:
 8020218:	6803      	ldr	r3, [r0, #0]
 802021a:	f013 0207 	ands.w	r2, r3, #7
 802021e:	4601      	mov	r1, r0
 8020220:	d00b      	beq.n	802023a <__lo0bits+0x22>
 8020222:	07da      	lsls	r2, r3, #31
 8020224:	d424      	bmi.n	8020270 <__lo0bits+0x58>
 8020226:	0798      	lsls	r0, r3, #30
 8020228:	bf49      	itett	mi
 802022a:	085b      	lsrmi	r3, r3, #1
 802022c:	089b      	lsrpl	r3, r3, #2
 802022e:	2001      	movmi	r0, #1
 8020230:	600b      	strmi	r3, [r1, #0]
 8020232:	bf5c      	itt	pl
 8020234:	600b      	strpl	r3, [r1, #0]
 8020236:	2002      	movpl	r0, #2
 8020238:	4770      	bx	lr
 802023a:	b298      	uxth	r0, r3
 802023c:	b9b0      	cbnz	r0, 802026c <__lo0bits+0x54>
 802023e:	0c1b      	lsrs	r3, r3, #16
 8020240:	2010      	movs	r0, #16
 8020242:	f013 0fff 	tst.w	r3, #255	; 0xff
 8020246:	bf04      	itt	eq
 8020248:	0a1b      	lsreq	r3, r3, #8
 802024a:	3008      	addeq	r0, #8
 802024c:	071a      	lsls	r2, r3, #28
 802024e:	bf04      	itt	eq
 8020250:	091b      	lsreq	r3, r3, #4
 8020252:	3004      	addeq	r0, #4
 8020254:	079a      	lsls	r2, r3, #30
 8020256:	bf04      	itt	eq
 8020258:	089b      	lsreq	r3, r3, #2
 802025a:	3002      	addeq	r0, #2
 802025c:	07da      	lsls	r2, r3, #31
 802025e:	d403      	bmi.n	8020268 <__lo0bits+0x50>
 8020260:	085b      	lsrs	r3, r3, #1
 8020262:	f100 0001 	add.w	r0, r0, #1
 8020266:	d005      	beq.n	8020274 <__lo0bits+0x5c>
 8020268:	600b      	str	r3, [r1, #0]
 802026a:	4770      	bx	lr
 802026c:	4610      	mov	r0, r2
 802026e:	e7e8      	b.n	8020242 <__lo0bits+0x2a>
 8020270:	2000      	movs	r0, #0
 8020272:	4770      	bx	lr
 8020274:	2020      	movs	r0, #32
 8020276:	4770      	bx	lr

08020278 <__i2b>:
 8020278:	b510      	push	{r4, lr}
 802027a:	460c      	mov	r4, r1
 802027c:	2101      	movs	r1, #1
 802027e:	f7ff feb5 	bl	801ffec <_Balloc>
 8020282:	4602      	mov	r2, r0
 8020284:	b928      	cbnz	r0, 8020292 <__i2b+0x1a>
 8020286:	4b05      	ldr	r3, [pc, #20]	; (802029c <__i2b+0x24>)
 8020288:	4805      	ldr	r0, [pc, #20]	; (80202a0 <__i2b+0x28>)
 802028a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 802028e:	f7fc f999 	bl	801c5c4 <__assert_func>
 8020292:	2301      	movs	r3, #1
 8020294:	6144      	str	r4, [r0, #20]
 8020296:	6103      	str	r3, [r0, #16]
 8020298:	bd10      	pop	{r4, pc}
 802029a:	bf00      	nop
 802029c:	0802a76c 	.word	0x0802a76c
 80202a0:	0802a860 	.word	0x0802a860

080202a4 <__multiply>:
 80202a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202a8:	4614      	mov	r4, r2
 80202aa:	690a      	ldr	r2, [r1, #16]
 80202ac:	6923      	ldr	r3, [r4, #16]
 80202ae:	429a      	cmp	r2, r3
 80202b0:	bfb8      	it	lt
 80202b2:	460b      	movlt	r3, r1
 80202b4:	460d      	mov	r5, r1
 80202b6:	bfbc      	itt	lt
 80202b8:	4625      	movlt	r5, r4
 80202ba:	461c      	movlt	r4, r3
 80202bc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80202c0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80202c4:	68ab      	ldr	r3, [r5, #8]
 80202c6:	6869      	ldr	r1, [r5, #4]
 80202c8:	eb0a 0709 	add.w	r7, sl, r9
 80202cc:	42bb      	cmp	r3, r7
 80202ce:	b085      	sub	sp, #20
 80202d0:	bfb8      	it	lt
 80202d2:	3101      	addlt	r1, #1
 80202d4:	f7ff fe8a 	bl	801ffec <_Balloc>
 80202d8:	b930      	cbnz	r0, 80202e8 <__multiply+0x44>
 80202da:	4602      	mov	r2, r0
 80202dc:	4b42      	ldr	r3, [pc, #264]	; (80203e8 <__multiply+0x144>)
 80202de:	4843      	ldr	r0, [pc, #268]	; (80203ec <__multiply+0x148>)
 80202e0:	f240 115d 	movw	r1, #349	; 0x15d
 80202e4:	f7fc f96e 	bl	801c5c4 <__assert_func>
 80202e8:	f100 0614 	add.w	r6, r0, #20
 80202ec:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80202f0:	4633      	mov	r3, r6
 80202f2:	2200      	movs	r2, #0
 80202f4:	4543      	cmp	r3, r8
 80202f6:	d31e      	bcc.n	8020336 <__multiply+0x92>
 80202f8:	f105 0c14 	add.w	ip, r5, #20
 80202fc:	f104 0314 	add.w	r3, r4, #20
 8020300:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8020304:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8020308:	9202      	str	r2, [sp, #8]
 802030a:	ebac 0205 	sub.w	r2, ip, r5
 802030e:	3a15      	subs	r2, #21
 8020310:	f022 0203 	bic.w	r2, r2, #3
 8020314:	3204      	adds	r2, #4
 8020316:	f105 0115 	add.w	r1, r5, #21
 802031a:	458c      	cmp	ip, r1
 802031c:	bf38      	it	cc
 802031e:	2204      	movcc	r2, #4
 8020320:	9201      	str	r2, [sp, #4]
 8020322:	9a02      	ldr	r2, [sp, #8]
 8020324:	9303      	str	r3, [sp, #12]
 8020326:	429a      	cmp	r2, r3
 8020328:	d808      	bhi.n	802033c <__multiply+0x98>
 802032a:	2f00      	cmp	r7, #0
 802032c:	dc55      	bgt.n	80203da <__multiply+0x136>
 802032e:	6107      	str	r7, [r0, #16]
 8020330:	b005      	add	sp, #20
 8020332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020336:	f843 2b04 	str.w	r2, [r3], #4
 802033a:	e7db      	b.n	80202f4 <__multiply+0x50>
 802033c:	f8b3 a000 	ldrh.w	sl, [r3]
 8020340:	f1ba 0f00 	cmp.w	sl, #0
 8020344:	d020      	beq.n	8020388 <__multiply+0xe4>
 8020346:	f105 0e14 	add.w	lr, r5, #20
 802034a:	46b1      	mov	r9, r6
 802034c:	2200      	movs	r2, #0
 802034e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8020352:	f8d9 b000 	ldr.w	fp, [r9]
 8020356:	b2a1      	uxth	r1, r4
 8020358:	fa1f fb8b 	uxth.w	fp, fp
 802035c:	fb0a b101 	mla	r1, sl, r1, fp
 8020360:	4411      	add	r1, r2
 8020362:	f8d9 2000 	ldr.w	r2, [r9]
 8020366:	0c24      	lsrs	r4, r4, #16
 8020368:	0c12      	lsrs	r2, r2, #16
 802036a:	fb0a 2404 	mla	r4, sl, r4, r2
 802036e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8020372:	b289      	uxth	r1, r1
 8020374:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8020378:	45f4      	cmp	ip, lr
 802037a:	f849 1b04 	str.w	r1, [r9], #4
 802037e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8020382:	d8e4      	bhi.n	802034e <__multiply+0xaa>
 8020384:	9901      	ldr	r1, [sp, #4]
 8020386:	5072      	str	r2, [r6, r1]
 8020388:	9a03      	ldr	r2, [sp, #12]
 802038a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802038e:	3304      	adds	r3, #4
 8020390:	f1b9 0f00 	cmp.w	r9, #0
 8020394:	d01f      	beq.n	80203d6 <__multiply+0x132>
 8020396:	6834      	ldr	r4, [r6, #0]
 8020398:	f105 0114 	add.w	r1, r5, #20
 802039c:	46b6      	mov	lr, r6
 802039e:	f04f 0a00 	mov.w	sl, #0
 80203a2:	880a      	ldrh	r2, [r1, #0]
 80203a4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80203a8:	fb09 b202 	mla	r2, r9, r2, fp
 80203ac:	4492      	add	sl, r2
 80203ae:	b2a4      	uxth	r4, r4
 80203b0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80203b4:	f84e 4b04 	str.w	r4, [lr], #4
 80203b8:	f851 4b04 	ldr.w	r4, [r1], #4
 80203bc:	f8be 2000 	ldrh.w	r2, [lr]
 80203c0:	0c24      	lsrs	r4, r4, #16
 80203c2:	fb09 2404 	mla	r4, r9, r4, r2
 80203c6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80203ca:	458c      	cmp	ip, r1
 80203cc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80203d0:	d8e7      	bhi.n	80203a2 <__multiply+0xfe>
 80203d2:	9a01      	ldr	r2, [sp, #4]
 80203d4:	50b4      	str	r4, [r6, r2]
 80203d6:	3604      	adds	r6, #4
 80203d8:	e7a3      	b.n	8020322 <__multiply+0x7e>
 80203da:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80203de:	2b00      	cmp	r3, #0
 80203e0:	d1a5      	bne.n	802032e <__multiply+0x8a>
 80203e2:	3f01      	subs	r7, #1
 80203e4:	e7a1      	b.n	802032a <__multiply+0x86>
 80203e6:	bf00      	nop
 80203e8:	0802a76c 	.word	0x0802a76c
 80203ec:	0802a860 	.word	0x0802a860

080203f0 <__pow5mult>:
 80203f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80203f4:	4615      	mov	r5, r2
 80203f6:	f012 0203 	ands.w	r2, r2, #3
 80203fa:	4606      	mov	r6, r0
 80203fc:	460f      	mov	r7, r1
 80203fe:	d007      	beq.n	8020410 <__pow5mult+0x20>
 8020400:	4c25      	ldr	r4, [pc, #148]	; (8020498 <__pow5mult+0xa8>)
 8020402:	3a01      	subs	r2, #1
 8020404:	2300      	movs	r3, #0
 8020406:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802040a:	f7ff fe51 	bl	80200b0 <__multadd>
 802040e:	4607      	mov	r7, r0
 8020410:	10ad      	asrs	r5, r5, #2
 8020412:	d03d      	beq.n	8020490 <__pow5mult+0xa0>
 8020414:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8020416:	b97c      	cbnz	r4, 8020438 <__pow5mult+0x48>
 8020418:	2010      	movs	r0, #16
 802041a:	f7fc f931 	bl	801c680 <malloc>
 802041e:	4602      	mov	r2, r0
 8020420:	6270      	str	r0, [r6, #36]	; 0x24
 8020422:	b928      	cbnz	r0, 8020430 <__pow5mult+0x40>
 8020424:	4b1d      	ldr	r3, [pc, #116]	; (802049c <__pow5mult+0xac>)
 8020426:	481e      	ldr	r0, [pc, #120]	; (80204a0 <__pow5mult+0xb0>)
 8020428:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 802042c:	f7fc f8ca 	bl	801c5c4 <__assert_func>
 8020430:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8020434:	6004      	str	r4, [r0, #0]
 8020436:	60c4      	str	r4, [r0, #12]
 8020438:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 802043c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8020440:	b94c      	cbnz	r4, 8020456 <__pow5mult+0x66>
 8020442:	f240 2171 	movw	r1, #625	; 0x271
 8020446:	4630      	mov	r0, r6
 8020448:	f7ff ff16 	bl	8020278 <__i2b>
 802044c:	2300      	movs	r3, #0
 802044e:	f8c8 0008 	str.w	r0, [r8, #8]
 8020452:	4604      	mov	r4, r0
 8020454:	6003      	str	r3, [r0, #0]
 8020456:	f04f 0900 	mov.w	r9, #0
 802045a:	07eb      	lsls	r3, r5, #31
 802045c:	d50a      	bpl.n	8020474 <__pow5mult+0x84>
 802045e:	4639      	mov	r1, r7
 8020460:	4622      	mov	r2, r4
 8020462:	4630      	mov	r0, r6
 8020464:	f7ff ff1e 	bl	80202a4 <__multiply>
 8020468:	4639      	mov	r1, r7
 802046a:	4680      	mov	r8, r0
 802046c:	4630      	mov	r0, r6
 802046e:	f7ff fdfd 	bl	802006c <_Bfree>
 8020472:	4647      	mov	r7, r8
 8020474:	106d      	asrs	r5, r5, #1
 8020476:	d00b      	beq.n	8020490 <__pow5mult+0xa0>
 8020478:	6820      	ldr	r0, [r4, #0]
 802047a:	b938      	cbnz	r0, 802048c <__pow5mult+0x9c>
 802047c:	4622      	mov	r2, r4
 802047e:	4621      	mov	r1, r4
 8020480:	4630      	mov	r0, r6
 8020482:	f7ff ff0f 	bl	80202a4 <__multiply>
 8020486:	6020      	str	r0, [r4, #0]
 8020488:	f8c0 9000 	str.w	r9, [r0]
 802048c:	4604      	mov	r4, r0
 802048e:	e7e4      	b.n	802045a <__pow5mult+0x6a>
 8020490:	4638      	mov	r0, r7
 8020492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020496:	bf00      	nop
 8020498:	0802a9b0 	.word	0x0802a9b0
 802049c:	0802a6f6 	.word	0x0802a6f6
 80204a0:	0802a860 	.word	0x0802a860

080204a4 <__lshift>:
 80204a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80204a8:	460c      	mov	r4, r1
 80204aa:	6849      	ldr	r1, [r1, #4]
 80204ac:	6923      	ldr	r3, [r4, #16]
 80204ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80204b2:	68a3      	ldr	r3, [r4, #8]
 80204b4:	4607      	mov	r7, r0
 80204b6:	4691      	mov	r9, r2
 80204b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80204bc:	f108 0601 	add.w	r6, r8, #1
 80204c0:	42b3      	cmp	r3, r6
 80204c2:	db0b      	blt.n	80204dc <__lshift+0x38>
 80204c4:	4638      	mov	r0, r7
 80204c6:	f7ff fd91 	bl	801ffec <_Balloc>
 80204ca:	4605      	mov	r5, r0
 80204cc:	b948      	cbnz	r0, 80204e2 <__lshift+0x3e>
 80204ce:	4602      	mov	r2, r0
 80204d0:	4b28      	ldr	r3, [pc, #160]	; (8020574 <__lshift+0xd0>)
 80204d2:	4829      	ldr	r0, [pc, #164]	; (8020578 <__lshift+0xd4>)
 80204d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80204d8:	f7fc f874 	bl	801c5c4 <__assert_func>
 80204dc:	3101      	adds	r1, #1
 80204de:	005b      	lsls	r3, r3, #1
 80204e0:	e7ee      	b.n	80204c0 <__lshift+0x1c>
 80204e2:	2300      	movs	r3, #0
 80204e4:	f100 0114 	add.w	r1, r0, #20
 80204e8:	f100 0210 	add.w	r2, r0, #16
 80204ec:	4618      	mov	r0, r3
 80204ee:	4553      	cmp	r3, sl
 80204f0:	db33      	blt.n	802055a <__lshift+0xb6>
 80204f2:	6920      	ldr	r0, [r4, #16]
 80204f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80204f8:	f104 0314 	add.w	r3, r4, #20
 80204fc:	f019 091f 	ands.w	r9, r9, #31
 8020500:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8020504:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8020508:	d02b      	beq.n	8020562 <__lshift+0xbe>
 802050a:	f1c9 0e20 	rsb	lr, r9, #32
 802050e:	468a      	mov	sl, r1
 8020510:	2200      	movs	r2, #0
 8020512:	6818      	ldr	r0, [r3, #0]
 8020514:	fa00 f009 	lsl.w	r0, r0, r9
 8020518:	4302      	orrs	r2, r0
 802051a:	f84a 2b04 	str.w	r2, [sl], #4
 802051e:	f853 2b04 	ldr.w	r2, [r3], #4
 8020522:	459c      	cmp	ip, r3
 8020524:	fa22 f20e 	lsr.w	r2, r2, lr
 8020528:	d8f3      	bhi.n	8020512 <__lshift+0x6e>
 802052a:	ebac 0304 	sub.w	r3, ip, r4
 802052e:	3b15      	subs	r3, #21
 8020530:	f023 0303 	bic.w	r3, r3, #3
 8020534:	3304      	adds	r3, #4
 8020536:	f104 0015 	add.w	r0, r4, #21
 802053a:	4584      	cmp	ip, r0
 802053c:	bf38      	it	cc
 802053e:	2304      	movcc	r3, #4
 8020540:	50ca      	str	r2, [r1, r3]
 8020542:	b10a      	cbz	r2, 8020548 <__lshift+0xa4>
 8020544:	f108 0602 	add.w	r6, r8, #2
 8020548:	3e01      	subs	r6, #1
 802054a:	4638      	mov	r0, r7
 802054c:	612e      	str	r6, [r5, #16]
 802054e:	4621      	mov	r1, r4
 8020550:	f7ff fd8c 	bl	802006c <_Bfree>
 8020554:	4628      	mov	r0, r5
 8020556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802055a:	f842 0f04 	str.w	r0, [r2, #4]!
 802055e:	3301      	adds	r3, #1
 8020560:	e7c5      	b.n	80204ee <__lshift+0x4a>
 8020562:	3904      	subs	r1, #4
 8020564:	f853 2b04 	ldr.w	r2, [r3], #4
 8020568:	f841 2f04 	str.w	r2, [r1, #4]!
 802056c:	459c      	cmp	ip, r3
 802056e:	d8f9      	bhi.n	8020564 <__lshift+0xc0>
 8020570:	e7ea      	b.n	8020548 <__lshift+0xa4>
 8020572:	bf00      	nop
 8020574:	0802a76c 	.word	0x0802a76c
 8020578:	0802a860 	.word	0x0802a860

0802057c <__mcmp>:
 802057c:	b530      	push	{r4, r5, lr}
 802057e:	6902      	ldr	r2, [r0, #16]
 8020580:	690c      	ldr	r4, [r1, #16]
 8020582:	1b12      	subs	r2, r2, r4
 8020584:	d10e      	bne.n	80205a4 <__mcmp+0x28>
 8020586:	f100 0314 	add.w	r3, r0, #20
 802058a:	3114      	adds	r1, #20
 802058c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8020590:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8020594:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8020598:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 802059c:	42a5      	cmp	r5, r4
 802059e:	d003      	beq.n	80205a8 <__mcmp+0x2c>
 80205a0:	d305      	bcc.n	80205ae <__mcmp+0x32>
 80205a2:	2201      	movs	r2, #1
 80205a4:	4610      	mov	r0, r2
 80205a6:	bd30      	pop	{r4, r5, pc}
 80205a8:	4283      	cmp	r3, r0
 80205aa:	d3f3      	bcc.n	8020594 <__mcmp+0x18>
 80205ac:	e7fa      	b.n	80205a4 <__mcmp+0x28>
 80205ae:	f04f 32ff 	mov.w	r2, #4294967295
 80205b2:	e7f7      	b.n	80205a4 <__mcmp+0x28>

080205b4 <__mdiff>:
 80205b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205b8:	460c      	mov	r4, r1
 80205ba:	4606      	mov	r6, r0
 80205bc:	4611      	mov	r1, r2
 80205be:	4620      	mov	r0, r4
 80205c0:	4617      	mov	r7, r2
 80205c2:	f7ff ffdb 	bl	802057c <__mcmp>
 80205c6:	1e05      	subs	r5, r0, #0
 80205c8:	d110      	bne.n	80205ec <__mdiff+0x38>
 80205ca:	4629      	mov	r1, r5
 80205cc:	4630      	mov	r0, r6
 80205ce:	f7ff fd0d 	bl	801ffec <_Balloc>
 80205d2:	b930      	cbnz	r0, 80205e2 <__mdiff+0x2e>
 80205d4:	4b39      	ldr	r3, [pc, #228]	; (80206bc <__mdiff+0x108>)
 80205d6:	4602      	mov	r2, r0
 80205d8:	f240 2132 	movw	r1, #562	; 0x232
 80205dc:	4838      	ldr	r0, [pc, #224]	; (80206c0 <__mdiff+0x10c>)
 80205de:	f7fb fff1 	bl	801c5c4 <__assert_func>
 80205e2:	2301      	movs	r3, #1
 80205e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80205e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80205ec:	bfa4      	itt	ge
 80205ee:	463b      	movge	r3, r7
 80205f0:	4627      	movge	r7, r4
 80205f2:	4630      	mov	r0, r6
 80205f4:	6879      	ldr	r1, [r7, #4]
 80205f6:	bfa6      	itte	ge
 80205f8:	461c      	movge	r4, r3
 80205fa:	2500      	movge	r5, #0
 80205fc:	2501      	movlt	r5, #1
 80205fe:	f7ff fcf5 	bl	801ffec <_Balloc>
 8020602:	b920      	cbnz	r0, 802060e <__mdiff+0x5a>
 8020604:	4b2d      	ldr	r3, [pc, #180]	; (80206bc <__mdiff+0x108>)
 8020606:	4602      	mov	r2, r0
 8020608:	f44f 7110 	mov.w	r1, #576	; 0x240
 802060c:	e7e6      	b.n	80205dc <__mdiff+0x28>
 802060e:	693e      	ldr	r6, [r7, #16]
 8020610:	60c5      	str	r5, [r0, #12]
 8020612:	6925      	ldr	r5, [r4, #16]
 8020614:	f107 0114 	add.w	r1, r7, #20
 8020618:	f104 0914 	add.w	r9, r4, #20
 802061c:	f100 0e14 	add.w	lr, r0, #20
 8020620:	f107 0210 	add.w	r2, r7, #16
 8020624:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8020628:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 802062c:	46f2      	mov	sl, lr
 802062e:	2700      	movs	r7, #0
 8020630:	f859 3b04 	ldr.w	r3, [r9], #4
 8020634:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8020638:	fa1f f883 	uxth.w	r8, r3
 802063c:	fa17 f78b 	uxtah	r7, r7, fp
 8020640:	0c1b      	lsrs	r3, r3, #16
 8020642:	eba7 0808 	sub.w	r8, r7, r8
 8020646:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802064a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 802064e:	fa1f f888 	uxth.w	r8, r8
 8020652:	141f      	asrs	r7, r3, #16
 8020654:	454d      	cmp	r5, r9
 8020656:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802065a:	f84a 3b04 	str.w	r3, [sl], #4
 802065e:	d8e7      	bhi.n	8020630 <__mdiff+0x7c>
 8020660:	1b2b      	subs	r3, r5, r4
 8020662:	3b15      	subs	r3, #21
 8020664:	f023 0303 	bic.w	r3, r3, #3
 8020668:	3304      	adds	r3, #4
 802066a:	3415      	adds	r4, #21
 802066c:	42a5      	cmp	r5, r4
 802066e:	bf38      	it	cc
 8020670:	2304      	movcc	r3, #4
 8020672:	4419      	add	r1, r3
 8020674:	4473      	add	r3, lr
 8020676:	469e      	mov	lr, r3
 8020678:	460d      	mov	r5, r1
 802067a:	4565      	cmp	r5, ip
 802067c:	d30e      	bcc.n	802069c <__mdiff+0xe8>
 802067e:	f10c 0203 	add.w	r2, ip, #3
 8020682:	1a52      	subs	r2, r2, r1
 8020684:	f022 0203 	bic.w	r2, r2, #3
 8020688:	3903      	subs	r1, #3
 802068a:	458c      	cmp	ip, r1
 802068c:	bf38      	it	cc
 802068e:	2200      	movcc	r2, #0
 8020690:	441a      	add	r2, r3
 8020692:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8020696:	b17b      	cbz	r3, 80206b8 <__mdiff+0x104>
 8020698:	6106      	str	r6, [r0, #16]
 802069a:	e7a5      	b.n	80205e8 <__mdiff+0x34>
 802069c:	f855 8b04 	ldr.w	r8, [r5], #4
 80206a0:	fa17 f488 	uxtah	r4, r7, r8
 80206a4:	1422      	asrs	r2, r4, #16
 80206a6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80206aa:	b2a4      	uxth	r4, r4
 80206ac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80206b0:	f84e 4b04 	str.w	r4, [lr], #4
 80206b4:	1417      	asrs	r7, r2, #16
 80206b6:	e7e0      	b.n	802067a <__mdiff+0xc6>
 80206b8:	3e01      	subs	r6, #1
 80206ba:	e7ea      	b.n	8020692 <__mdiff+0xde>
 80206bc:	0802a76c 	.word	0x0802a76c
 80206c0:	0802a860 	.word	0x0802a860

080206c4 <__ulp>:
 80206c4:	b082      	sub	sp, #8
 80206c6:	ed8d 0b00 	vstr	d0, [sp]
 80206ca:	9b01      	ldr	r3, [sp, #4]
 80206cc:	4912      	ldr	r1, [pc, #72]	; (8020718 <__ulp+0x54>)
 80206ce:	4019      	ands	r1, r3
 80206d0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80206d4:	2900      	cmp	r1, #0
 80206d6:	dd05      	ble.n	80206e4 <__ulp+0x20>
 80206d8:	2200      	movs	r2, #0
 80206da:	460b      	mov	r3, r1
 80206dc:	ec43 2b10 	vmov	d0, r2, r3
 80206e0:	b002      	add	sp, #8
 80206e2:	4770      	bx	lr
 80206e4:	4249      	negs	r1, r1
 80206e6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80206ea:	ea4f 5021 	mov.w	r0, r1, asr #20
 80206ee:	f04f 0200 	mov.w	r2, #0
 80206f2:	f04f 0300 	mov.w	r3, #0
 80206f6:	da04      	bge.n	8020702 <__ulp+0x3e>
 80206f8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80206fc:	fa41 f300 	asr.w	r3, r1, r0
 8020700:	e7ec      	b.n	80206dc <__ulp+0x18>
 8020702:	f1a0 0114 	sub.w	r1, r0, #20
 8020706:	291e      	cmp	r1, #30
 8020708:	bfda      	itte	le
 802070a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 802070e:	fa20 f101 	lsrle.w	r1, r0, r1
 8020712:	2101      	movgt	r1, #1
 8020714:	460a      	mov	r2, r1
 8020716:	e7e1      	b.n	80206dc <__ulp+0x18>
 8020718:	7ff00000 	.word	0x7ff00000

0802071c <__b2d>:
 802071c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802071e:	6905      	ldr	r5, [r0, #16]
 8020720:	f100 0714 	add.w	r7, r0, #20
 8020724:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8020728:	1f2e      	subs	r6, r5, #4
 802072a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 802072e:	4620      	mov	r0, r4
 8020730:	f7ff fd52 	bl	80201d8 <__hi0bits>
 8020734:	f1c0 0320 	rsb	r3, r0, #32
 8020738:	280a      	cmp	r0, #10
 802073a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80207b8 <__b2d+0x9c>
 802073e:	600b      	str	r3, [r1, #0]
 8020740:	dc14      	bgt.n	802076c <__b2d+0x50>
 8020742:	f1c0 0e0b 	rsb	lr, r0, #11
 8020746:	fa24 f10e 	lsr.w	r1, r4, lr
 802074a:	42b7      	cmp	r7, r6
 802074c:	ea41 030c 	orr.w	r3, r1, ip
 8020750:	bf34      	ite	cc
 8020752:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8020756:	2100      	movcs	r1, #0
 8020758:	3015      	adds	r0, #21
 802075a:	fa04 f000 	lsl.w	r0, r4, r0
 802075e:	fa21 f10e 	lsr.w	r1, r1, lr
 8020762:	ea40 0201 	orr.w	r2, r0, r1
 8020766:	ec43 2b10 	vmov	d0, r2, r3
 802076a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802076c:	42b7      	cmp	r7, r6
 802076e:	bf3a      	itte	cc
 8020770:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8020774:	f1a5 0608 	subcc.w	r6, r5, #8
 8020778:	2100      	movcs	r1, #0
 802077a:	380b      	subs	r0, #11
 802077c:	d017      	beq.n	80207ae <__b2d+0x92>
 802077e:	f1c0 0c20 	rsb	ip, r0, #32
 8020782:	fa04 f500 	lsl.w	r5, r4, r0
 8020786:	42be      	cmp	r6, r7
 8020788:	fa21 f40c 	lsr.w	r4, r1, ip
 802078c:	ea45 0504 	orr.w	r5, r5, r4
 8020790:	bf8c      	ite	hi
 8020792:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8020796:	2400      	movls	r4, #0
 8020798:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 802079c:	fa01 f000 	lsl.w	r0, r1, r0
 80207a0:	fa24 f40c 	lsr.w	r4, r4, ip
 80207a4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80207a8:	ea40 0204 	orr.w	r2, r0, r4
 80207ac:	e7db      	b.n	8020766 <__b2d+0x4a>
 80207ae:	ea44 030c 	orr.w	r3, r4, ip
 80207b2:	460a      	mov	r2, r1
 80207b4:	e7d7      	b.n	8020766 <__b2d+0x4a>
 80207b6:	bf00      	nop
 80207b8:	3ff00000 	.word	0x3ff00000

080207bc <__d2b>:
 80207bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80207c0:	4689      	mov	r9, r1
 80207c2:	2101      	movs	r1, #1
 80207c4:	ec57 6b10 	vmov	r6, r7, d0
 80207c8:	4690      	mov	r8, r2
 80207ca:	f7ff fc0f 	bl	801ffec <_Balloc>
 80207ce:	4604      	mov	r4, r0
 80207d0:	b930      	cbnz	r0, 80207e0 <__d2b+0x24>
 80207d2:	4602      	mov	r2, r0
 80207d4:	4b25      	ldr	r3, [pc, #148]	; (802086c <__d2b+0xb0>)
 80207d6:	4826      	ldr	r0, [pc, #152]	; (8020870 <__d2b+0xb4>)
 80207d8:	f240 310a 	movw	r1, #778	; 0x30a
 80207dc:	f7fb fef2 	bl	801c5c4 <__assert_func>
 80207e0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80207e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80207e8:	bb35      	cbnz	r5, 8020838 <__d2b+0x7c>
 80207ea:	2e00      	cmp	r6, #0
 80207ec:	9301      	str	r3, [sp, #4]
 80207ee:	d028      	beq.n	8020842 <__d2b+0x86>
 80207f0:	4668      	mov	r0, sp
 80207f2:	9600      	str	r6, [sp, #0]
 80207f4:	f7ff fd10 	bl	8020218 <__lo0bits>
 80207f8:	9900      	ldr	r1, [sp, #0]
 80207fa:	b300      	cbz	r0, 802083e <__d2b+0x82>
 80207fc:	9a01      	ldr	r2, [sp, #4]
 80207fe:	f1c0 0320 	rsb	r3, r0, #32
 8020802:	fa02 f303 	lsl.w	r3, r2, r3
 8020806:	430b      	orrs	r3, r1
 8020808:	40c2      	lsrs	r2, r0
 802080a:	6163      	str	r3, [r4, #20]
 802080c:	9201      	str	r2, [sp, #4]
 802080e:	9b01      	ldr	r3, [sp, #4]
 8020810:	61a3      	str	r3, [r4, #24]
 8020812:	2b00      	cmp	r3, #0
 8020814:	bf14      	ite	ne
 8020816:	2202      	movne	r2, #2
 8020818:	2201      	moveq	r2, #1
 802081a:	6122      	str	r2, [r4, #16]
 802081c:	b1d5      	cbz	r5, 8020854 <__d2b+0x98>
 802081e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8020822:	4405      	add	r5, r0
 8020824:	f8c9 5000 	str.w	r5, [r9]
 8020828:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802082c:	f8c8 0000 	str.w	r0, [r8]
 8020830:	4620      	mov	r0, r4
 8020832:	b003      	add	sp, #12
 8020834:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020838:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802083c:	e7d5      	b.n	80207ea <__d2b+0x2e>
 802083e:	6161      	str	r1, [r4, #20]
 8020840:	e7e5      	b.n	802080e <__d2b+0x52>
 8020842:	a801      	add	r0, sp, #4
 8020844:	f7ff fce8 	bl	8020218 <__lo0bits>
 8020848:	9b01      	ldr	r3, [sp, #4]
 802084a:	6163      	str	r3, [r4, #20]
 802084c:	2201      	movs	r2, #1
 802084e:	6122      	str	r2, [r4, #16]
 8020850:	3020      	adds	r0, #32
 8020852:	e7e3      	b.n	802081c <__d2b+0x60>
 8020854:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8020858:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802085c:	f8c9 0000 	str.w	r0, [r9]
 8020860:	6918      	ldr	r0, [r3, #16]
 8020862:	f7ff fcb9 	bl	80201d8 <__hi0bits>
 8020866:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802086a:	e7df      	b.n	802082c <__d2b+0x70>
 802086c:	0802a76c 	.word	0x0802a76c
 8020870:	0802a860 	.word	0x0802a860

08020874 <__ratio>:
 8020874:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020878:	468a      	mov	sl, r1
 802087a:	4669      	mov	r1, sp
 802087c:	4683      	mov	fp, r0
 802087e:	f7ff ff4d 	bl	802071c <__b2d>
 8020882:	a901      	add	r1, sp, #4
 8020884:	4650      	mov	r0, sl
 8020886:	ec59 8b10 	vmov	r8, r9, d0
 802088a:	ee10 6a10 	vmov	r6, s0
 802088e:	f7ff ff45 	bl	802071c <__b2d>
 8020892:	f8db 3010 	ldr.w	r3, [fp, #16]
 8020896:	f8da 2010 	ldr.w	r2, [sl, #16]
 802089a:	eba3 0c02 	sub.w	ip, r3, r2
 802089e:	e9dd 3200 	ldrd	r3, r2, [sp]
 80208a2:	1a9b      	subs	r3, r3, r2
 80208a4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80208a8:	ec55 4b10 	vmov	r4, r5, d0
 80208ac:	2b00      	cmp	r3, #0
 80208ae:	ee10 0a10 	vmov	r0, s0
 80208b2:	bfce      	itee	gt
 80208b4:	464a      	movgt	r2, r9
 80208b6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80208ba:	462a      	movle	r2, r5
 80208bc:	464f      	mov	r7, r9
 80208be:	4629      	mov	r1, r5
 80208c0:	bfcc      	ite	gt
 80208c2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80208c6:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80208ca:	ec47 6b17 	vmov	d7, r6, r7
 80208ce:	ec41 0b16 	vmov	d6, r0, r1
 80208d2:	ee87 0b06 	vdiv.f64	d0, d7, d6
 80208d6:	b003      	add	sp, #12
 80208d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080208dc <__copybits>:
 80208dc:	3901      	subs	r1, #1
 80208de:	b570      	push	{r4, r5, r6, lr}
 80208e0:	1149      	asrs	r1, r1, #5
 80208e2:	6914      	ldr	r4, [r2, #16]
 80208e4:	3101      	adds	r1, #1
 80208e6:	f102 0314 	add.w	r3, r2, #20
 80208ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80208ee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80208f2:	1f05      	subs	r5, r0, #4
 80208f4:	42a3      	cmp	r3, r4
 80208f6:	d30c      	bcc.n	8020912 <__copybits+0x36>
 80208f8:	1aa3      	subs	r3, r4, r2
 80208fa:	3b11      	subs	r3, #17
 80208fc:	f023 0303 	bic.w	r3, r3, #3
 8020900:	3211      	adds	r2, #17
 8020902:	42a2      	cmp	r2, r4
 8020904:	bf88      	it	hi
 8020906:	2300      	movhi	r3, #0
 8020908:	4418      	add	r0, r3
 802090a:	2300      	movs	r3, #0
 802090c:	4288      	cmp	r0, r1
 802090e:	d305      	bcc.n	802091c <__copybits+0x40>
 8020910:	bd70      	pop	{r4, r5, r6, pc}
 8020912:	f853 6b04 	ldr.w	r6, [r3], #4
 8020916:	f845 6f04 	str.w	r6, [r5, #4]!
 802091a:	e7eb      	b.n	80208f4 <__copybits+0x18>
 802091c:	f840 3b04 	str.w	r3, [r0], #4
 8020920:	e7f4      	b.n	802090c <__copybits+0x30>

08020922 <__any_on>:
 8020922:	f100 0214 	add.w	r2, r0, #20
 8020926:	6900      	ldr	r0, [r0, #16]
 8020928:	114b      	asrs	r3, r1, #5
 802092a:	4298      	cmp	r0, r3
 802092c:	b510      	push	{r4, lr}
 802092e:	db11      	blt.n	8020954 <__any_on+0x32>
 8020930:	dd0a      	ble.n	8020948 <__any_on+0x26>
 8020932:	f011 011f 	ands.w	r1, r1, #31
 8020936:	d007      	beq.n	8020948 <__any_on+0x26>
 8020938:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802093c:	fa24 f001 	lsr.w	r0, r4, r1
 8020940:	fa00 f101 	lsl.w	r1, r0, r1
 8020944:	428c      	cmp	r4, r1
 8020946:	d10b      	bne.n	8020960 <__any_on+0x3e>
 8020948:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802094c:	4293      	cmp	r3, r2
 802094e:	d803      	bhi.n	8020958 <__any_on+0x36>
 8020950:	2000      	movs	r0, #0
 8020952:	bd10      	pop	{r4, pc}
 8020954:	4603      	mov	r3, r0
 8020956:	e7f7      	b.n	8020948 <__any_on+0x26>
 8020958:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802095c:	2900      	cmp	r1, #0
 802095e:	d0f5      	beq.n	802094c <__any_on+0x2a>
 8020960:	2001      	movs	r0, #1
 8020962:	e7f6      	b.n	8020952 <__any_on+0x30>

08020964 <_calloc_r>:
 8020964:	b513      	push	{r0, r1, r4, lr}
 8020966:	434a      	muls	r2, r1
 8020968:	4611      	mov	r1, r2
 802096a:	9201      	str	r2, [sp, #4]
 802096c:	f7fb ff18 	bl	801c7a0 <_malloc_r>
 8020970:	4604      	mov	r4, r0
 8020972:	b118      	cbz	r0, 802097c <_calloc_r+0x18>
 8020974:	9a01      	ldr	r2, [sp, #4]
 8020976:	2100      	movs	r1, #0
 8020978:	f7fb feba 	bl	801c6f0 <memset>
 802097c:	4620      	mov	r0, r4
 802097e:	b002      	add	sp, #8
 8020980:	bd10      	pop	{r4, pc}

08020982 <_realloc_r>:
 8020982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020984:	4607      	mov	r7, r0
 8020986:	4614      	mov	r4, r2
 8020988:	460e      	mov	r6, r1
 802098a:	b921      	cbnz	r1, 8020996 <_realloc_r+0x14>
 802098c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8020990:	4611      	mov	r1, r2
 8020992:	f7fb bf05 	b.w	801c7a0 <_malloc_r>
 8020996:	b922      	cbnz	r2, 80209a2 <_realloc_r+0x20>
 8020998:	f7fb feb2 	bl	801c700 <_free_r>
 802099c:	4625      	mov	r5, r4
 802099e:	4628      	mov	r0, r5
 80209a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80209a2:	f000 fa63 	bl	8020e6c <_malloc_usable_size_r>
 80209a6:	42a0      	cmp	r0, r4
 80209a8:	d20f      	bcs.n	80209ca <_realloc_r+0x48>
 80209aa:	4621      	mov	r1, r4
 80209ac:	4638      	mov	r0, r7
 80209ae:	f7fb fef7 	bl	801c7a0 <_malloc_r>
 80209b2:	4605      	mov	r5, r0
 80209b4:	2800      	cmp	r0, #0
 80209b6:	d0f2      	beq.n	802099e <_realloc_r+0x1c>
 80209b8:	4631      	mov	r1, r6
 80209ba:	4622      	mov	r2, r4
 80209bc:	f7fb fe70 	bl	801c6a0 <memcpy>
 80209c0:	4631      	mov	r1, r6
 80209c2:	4638      	mov	r0, r7
 80209c4:	f7fb fe9c 	bl	801c700 <_free_r>
 80209c8:	e7e9      	b.n	802099e <_realloc_r+0x1c>
 80209ca:	4635      	mov	r5, r6
 80209cc:	e7e7      	b.n	802099e <_realloc_r+0x1c>

080209ce <__ssputs_r>:
 80209ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80209d2:	688e      	ldr	r6, [r1, #8]
 80209d4:	429e      	cmp	r6, r3
 80209d6:	4682      	mov	sl, r0
 80209d8:	460c      	mov	r4, r1
 80209da:	4690      	mov	r8, r2
 80209dc:	461f      	mov	r7, r3
 80209de:	d838      	bhi.n	8020a52 <__ssputs_r+0x84>
 80209e0:	898a      	ldrh	r2, [r1, #12]
 80209e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80209e6:	d032      	beq.n	8020a4e <__ssputs_r+0x80>
 80209e8:	6825      	ldr	r5, [r4, #0]
 80209ea:	6909      	ldr	r1, [r1, #16]
 80209ec:	eba5 0901 	sub.w	r9, r5, r1
 80209f0:	6965      	ldr	r5, [r4, #20]
 80209f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80209f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80209fa:	3301      	adds	r3, #1
 80209fc:	444b      	add	r3, r9
 80209fe:	106d      	asrs	r5, r5, #1
 8020a00:	429d      	cmp	r5, r3
 8020a02:	bf38      	it	cc
 8020a04:	461d      	movcc	r5, r3
 8020a06:	0553      	lsls	r3, r2, #21
 8020a08:	d531      	bpl.n	8020a6e <__ssputs_r+0xa0>
 8020a0a:	4629      	mov	r1, r5
 8020a0c:	f7fb fec8 	bl	801c7a0 <_malloc_r>
 8020a10:	4606      	mov	r6, r0
 8020a12:	b950      	cbnz	r0, 8020a2a <__ssputs_r+0x5c>
 8020a14:	230c      	movs	r3, #12
 8020a16:	f8ca 3000 	str.w	r3, [sl]
 8020a1a:	89a3      	ldrh	r3, [r4, #12]
 8020a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020a20:	81a3      	strh	r3, [r4, #12]
 8020a22:	f04f 30ff 	mov.w	r0, #4294967295
 8020a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020a2a:	6921      	ldr	r1, [r4, #16]
 8020a2c:	464a      	mov	r2, r9
 8020a2e:	f7fb fe37 	bl	801c6a0 <memcpy>
 8020a32:	89a3      	ldrh	r3, [r4, #12]
 8020a34:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8020a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020a3c:	81a3      	strh	r3, [r4, #12]
 8020a3e:	6126      	str	r6, [r4, #16]
 8020a40:	6165      	str	r5, [r4, #20]
 8020a42:	444e      	add	r6, r9
 8020a44:	eba5 0509 	sub.w	r5, r5, r9
 8020a48:	6026      	str	r6, [r4, #0]
 8020a4a:	60a5      	str	r5, [r4, #8]
 8020a4c:	463e      	mov	r6, r7
 8020a4e:	42be      	cmp	r6, r7
 8020a50:	d900      	bls.n	8020a54 <__ssputs_r+0x86>
 8020a52:	463e      	mov	r6, r7
 8020a54:	4632      	mov	r2, r6
 8020a56:	6820      	ldr	r0, [r4, #0]
 8020a58:	4641      	mov	r1, r8
 8020a5a:	f7fb fe2f 	bl	801c6bc <memmove>
 8020a5e:	68a3      	ldr	r3, [r4, #8]
 8020a60:	6822      	ldr	r2, [r4, #0]
 8020a62:	1b9b      	subs	r3, r3, r6
 8020a64:	4432      	add	r2, r6
 8020a66:	60a3      	str	r3, [r4, #8]
 8020a68:	6022      	str	r2, [r4, #0]
 8020a6a:	2000      	movs	r0, #0
 8020a6c:	e7db      	b.n	8020a26 <__ssputs_r+0x58>
 8020a6e:	462a      	mov	r2, r5
 8020a70:	f7ff ff87 	bl	8020982 <_realloc_r>
 8020a74:	4606      	mov	r6, r0
 8020a76:	2800      	cmp	r0, #0
 8020a78:	d1e1      	bne.n	8020a3e <__ssputs_r+0x70>
 8020a7a:	6921      	ldr	r1, [r4, #16]
 8020a7c:	4650      	mov	r0, sl
 8020a7e:	f7fb fe3f 	bl	801c700 <_free_r>
 8020a82:	e7c7      	b.n	8020a14 <__ssputs_r+0x46>

08020a84 <_svfiprintf_r>:
 8020a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a88:	4698      	mov	r8, r3
 8020a8a:	898b      	ldrh	r3, [r1, #12]
 8020a8c:	061b      	lsls	r3, r3, #24
 8020a8e:	b09d      	sub	sp, #116	; 0x74
 8020a90:	4607      	mov	r7, r0
 8020a92:	460d      	mov	r5, r1
 8020a94:	4614      	mov	r4, r2
 8020a96:	d50e      	bpl.n	8020ab6 <_svfiprintf_r+0x32>
 8020a98:	690b      	ldr	r3, [r1, #16]
 8020a9a:	b963      	cbnz	r3, 8020ab6 <_svfiprintf_r+0x32>
 8020a9c:	2140      	movs	r1, #64	; 0x40
 8020a9e:	f7fb fe7f 	bl	801c7a0 <_malloc_r>
 8020aa2:	6028      	str	r0, [r5, #0]
 8020aa4:	6128      	str	r0, [r5, #16]
 8020aa6:	b920      	cbnz	r0, 8020ab2 <_svfiprintf_r+0x2e>
 8020aa8:	230c      	movs	r3, #12
 8020aaa:	603b      	str	r3, [r7, #0]
 8020aac:	f04f 30ff 	mov.w	r0, #4294967295
 8020ab0:	e0d1      	b.n	8020c56 <_svfiprintf_r+0x1d2>
 8020ab2:	2340      	movs	r3, #64	; 0x40
 8020ab4:	616b      	str	r3, [r5, #20]
 8020ab6:	2300      	movs	r3, #0
 8020ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8020aba:	2320      	movs	r3, #32
 8020abc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020ac0:	f8cd 800c 	str.w	r8, [sp, #12]
 8020ac4:	2330      	movs	r3, #48	; 0x30
 8020ac6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8020c70 <_svfiprintf_r+0x1ec>
 8020aca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020ace:	f04f 0901 	mov.w	r9, #1
 8020ad2:	4623      	mov	r3, r4
 8020ad4:	469a      	mov	sl, r3
 8020ad6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020ada:	b10a      	cbz	r2, 8020ae0 <_svfiprintf_r+0x5c>
 8020adc:	2a25      	cmp	r2, #37	; 0x25
 8020ade:	d1f9      	bne.n	8020ad4 <_svfiprintf_r+0x50>
 8020ae0:	ebba 0b04 	subs.w	fp, sl, r4
 8020ae4:	d00b      	beq.n	8020afe <_svfiprintf_r+0x7a>
 8020ae6:	465b      	mov	r3, fp
 8020ae8:	4622      	mov	r2, r4
 8020aea:	4629      	mov	r1, r5
 8020aec:	4638      	mov	r0, r7
 8020aee:	f7ff ff6e 	bl	80209ce <__ssputs_r>
 8020af2:	3001      	adds	r0, #1
 8020af4:	f000 80aa 	beq.w	8020c4c <_svfiprintf_r+0x1c8>
 8020af8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020afa:	445a      	add	r2, fp
 8020afc:	9209      	str	r2, [sp, #36]	; 0x24
 8020afe:	f89a 3000 	ldrb.w	r3, [sl]
 8020b02:	2b00      	cmp	r3, #0
 8020b04:	f000 80a2 	beq.w	8020c4c <_svfiprintf_r+0x1c8>
 8020b08:	2300      	movs	r3, #0
 8020b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8020b0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020b12:	f10a 0a01 	add.w	sl, sl, #1
 8020b16:	9304      	str	r3, [sp, #16]
 8020b18:	9307      	str	r3, [sp, #28]
 8020b1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020b1e:	931a      	str	r3, [sp, #104]	; 0x68
 8020b20:	4654      	mov	r4, sl
 8020b22:	2205      	movs	r2, #5
 8020b24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020b28:	4851      	ldr	r0, [pc, #324]	; (8020c70 <_svfiprintf_r+0x1ec>)
 8020b2a:	f7df fbf1 	bl	8000310 <memchr>
 8020b2e:	9a04      	ldr	r2, [sp, #16]
 8020b30:	b9d8      	cbnz	r0, 8020b6a <_svfiprintf_r+0xe6>
 8020b32:	06d0      	lsls	r0, r2, #27
 8020b34:	bf44      	itt	mi
 8020b36:	2320      	movmi	r3, #32
 8020b38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020b3c:	0711      	lsls	r1, r2, #28
 8020b3e:	bf44      	itt	mi
 8020b40:	232b      	movmi	r3, #43	; 0x2b
 8020b42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020b46:	f89a 3000 	ldrb.w	r3, [sl]
 8020b4a:	2b2a      	cmp	r3, #42	; 0x2a
 8020b4c:	d015      	beq.n	8020b7a <_svfiprintf_r+0xf6>
 8020b4e:	9a07      	ldr	r2, [sp, #28]
 8020b50:	4654      	mov	r4, sl
 8020b52:	2000      	movs	r0, #0
 8020b54:	f04f 0c0a 	mov.w	ip, #10
 8020b58:	4621      	mov	r1, r4
 8020b5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020b5e:	3b30      	subs	r3, #48	; 0x30
 8020b60:	2b09      	cmp	r3, #9
 8020b62:	d94e      	bls.n	8020c02 <_svfiprintf_r+0x17e>
 8020b64:	b1b0      	cbz	r0, 8020b94 <_svfiprintf_r+0x110>
 8020b66:	9207      	str	r2, [sp, #28]
 8020b68:	e014      	b.n	8020b94 <_svfiprintf_r+0x110>
 8020b6a:	eba0 0308 	sub.w	r3, r0, r8
 8020b6e:	fa09 f303 	lsl.w	r3, r9, r3
 8020b72:	4313      	orrs	r3, r2
 8020b74:	9304      	str	r3, [sp, #16]
 8020b76:	46a2      	mov	sl, r4
 8020b78:	e7d2      	b.n	8020b20 <_svfiprintf_r+0x9c>
 8020b7a:	9b03      	ldr	r3, [sp, #12]
 8020b7c:	1d19      	adds	r1, r3, #4
 8020b7e:	681b      	ldr	r3, [r3, #0]
 8020b80:	9103      	str	r1, [sp, #12]
 8020b82:	2b00      	cmp	r3, #0
 8020b84:	bfbb      	ittet	lt
 8020b86:	425b      	neglt	r3, r3
 8020b88:	f042 0202 	orrlt.w	r2, r2, #2
 8020b8c:	9307      	strge	r3, [sp, #28]
 8020b8e:	9307      	strlt	r3, [sp, #28]
 8020b90:	bfb8      	it	lt
 8020b92:	9204      	strlt	r2, [sp, #16]
 8020b94:	7823      	ldrb	r3, [r4, #0]
 8020b96:	2b2e      	cmp	r3, #46	; 0x2e
 8020b98:	d10c      	bne.n	8020bb4 <_svfiprintf_r+0x130>
 8020b9a:	7863      	ldrb	r3, [r4, #1]
 8020b9c:	2b2a      	cmp	r3, #42	; 0x2a
 8020b9e:	d135      	bne.n	8020c0c <_svfiprintf_r+0x188>
 8020ba0:	9b03      	ldr	r3, [sp, #12]
 8020ba2:	1d1a      	adds	r2, r3, #4
 8020ba4:	681b      	ldr	r3, [r3, #0]
 8020ba6:	9203      	str	r2, [sp, #12]
 8020ba8:	2b00      	cmp	r3, #0
 8020baa:	bfb8      	it	lt
 8020bac:	f04f 33ff 	movlt.w	r3, #4294967295
 8020bb0:	3402      	adds	r4, #2
 8020bb2:	9305      	str	r3, [sp, #20]
 8020bb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8020c80 <_svfiprintf_r+0x1fc>
 8020bb8:	7821      	ldrb	r1, [r4, #0]
 8020bba:	2203      	movs	r2, #3
 8020bbc:	4650      	mov	r0, sl
 8020bbe:	f7df fba7 	bl	8000310 <memchr>
 8020bc2:	b140      	cbz	r0, 8020bd6 <_svfiprintf_r+0x152>
 8020bc4:	2340      	movs	r3, #64	; 0x40
 8020bc6:	eba0 000a 	sub.w	r0, r0, sl
 8020bca:	fa03 f000 	lsl.w	r0, r3, r0
 8020bce:	9b04      	ldr	r3, [sp, #16]
 8020bd0:	4303      	orrs	r3, r0
 8020bd2:	3401      	adds	r4, #1
 8020bd4:	9304      	str	r3, [sp, #16]
 8020bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020bda:	4826      	ldr	r0, [pc, #152]	; (8020c74 <_svfiprintf_r+0x1f0>)
 8020bdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020be0:	2206      	movs	r2, #6
 8020be2:	f7df fb95 	bl	8000310 <memchr>
 8020be6:	2800      	cmp	r0, #0
 8020be8:	d038      	beq.n	8020c5c <_svfiprintf_r+0x1d8>
 8020bea:	4b23      	ldr	r3, [pc, #140]	; (8020c78 <_svfiprintf_r+0x1f4>)
 8020bec:	bb1b      	cbnz	r3, 8020c36 <_svfiprintf_r+0x1b2>
 8020bee:	9b03      	ldr	r3, [sp, #12]
 8020bf0:	3307      	adds	r3, #7
 8020bf2:	f023 0307 	bic.w	r3, r3, #7
 8020bf6:	3308      	adds	r3, #8
 8020bf8:	9303      	str	r3, [sp, #12]
 8020bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020bfc:	4433      	add	r3, r6
 8020bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8020c00:	e767      	b.n	8020ad2 <_svfiprintf_r+0x4e>
 8020c02:	fb0c 3202 	mla	r2, ip, r2, r3
 8020c06:	460c      	mov	r4, r1
 8020c08:	2001      	movs	r0, #1
 8020c0a:	e7a5      	b.n	8020b58 <_svfiprintf_r+0xd4>
 8020c0c:	2300      	movs	r3, #0
 8020c0e:	3401      	adds	r4, #1
 8020c10:	9305      	str	r3, [sp, #20]
 8020c12:	4619      	mov	r1, r3
 8020c14:	f04f 0c0a 	mov.w	ip, #10
 8020c18:	4620      	mov	r0, r4
 8020c1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020c1e:	3a30      	subs	r2, #48	; 0x30
 8020c20:	2a09      	cmp	r2, #9
 8020c22:	d903      	bls.n	8020c2c <_svfiprintf_r+0x1a8>
 8020c24:	2b00      	cmp	r3, #0
 8020c26:	d0c5      	beq.n	8020bb4 <_svfiprintf_r+0x130>
 8020c28:	9105      	str	r1, [sp, #20]
 8020c2a:	e7c3      	b.n	8020bb4 <_svfiprintf_r+0x130>
 8020c2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8020c30:	4604      	mov	r4, r0
 8020c32:	2301      	movs	r3, #1
 8020c34:	e7f0      	b.n	8020c18 <_svfiprintf_r+0x194>
 8020c36:	ab03      	add	r3, sp, #12
 8020c38:	9300      	str	r3, [sp, #0]
 8020c3a:	462a      	mov	r2, r5
 8020c3c:	4b0f      	ldr	r3, [pc, #60]	; (8020c7c <_svfiprintf_r+0x1f8>)
 8020c3e:	a904      	add	r1, sp, #16
 8020c40:	4638      	mov	r0, r7
 8020c42:	f7fb fff1 	bl	801cc28 <_printf_float>
 8020c46:	1c42      	adds	r2, r0, #1
 8020c48:	4606      	mov	r6, r0
 8020c4a:	d1d6      	bne.n	8020bfa <_svfiprintf_r+0x176>
 8020c4c:	89ab      	ldrh	r3, [r5, #12]
 8020c4e:	065b      	lsls	r3, r3, #25
 8020c50:	f53f af2c 	bmi.w	8020aac <_svfiprintf_r+0x28>
 8020c54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020c56:	b01d      	add	sp, #116	; 0x74
 8020c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020c5c:	ab03      	add	r3, sp, #12
 8020c5e:	9300      	str	r3, [sp, #0]
 8020c60:	462a      	mov	r2, r5
 8020c62:	4b06      	ldr	r3, [pc, #24]	; (8020c7c <_svfiprintf_r+0x1f8>)
 8020c64:	a904      	add	r1, sp, #16
 8020c66:	4638      	mov	r0, r7
 8020c68:	f7fc fa6a 	bl	801d140 <_printf_i>
 8020c6c:	e7eb      	b.n	8020c46 <_svfiprintf_r+0x1c2>
 8020c6e:	bf00      	nop
 8020c70:	0802a548 	.word	0x0802a548
 8020c74:	0802a552 	.word	0x0802a552
 8020c78:	0801cc29 	.word	0x0801cc29
 8020c7c:	080209cf 	.word	0x080209cf
 8020c80:	0802a54e 	.word	0x0802a54e
 8020c84:	00000000 	.word	0x00000000

08020c88 <nan>:
 8020c88:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8020c90 <nan+0x8>
 8020c8c:	4770      	bx	lr
 8020c8e:	bf00      	nop
 8020c90:	00000000 	.word	0x00000000
 8020c94:	7ff80000 	.word	0x7ff80000

08020c98 <_raise_r>:
 8020c98:	291f      	cmp	r1, #31
 8020c9a:	b538      	push	{r3, r4, r5, lr}
 8020c9c:	4604      	mov	r4, r0
 8020c9e:	460d      	mov	r5, r1
 8020ca0:	d904      	bls.n	8020cac <_raise_r+0x14>
 8020ca2:	2316      	movs	r3, #22
 8020ca4:	6003      	str	r3, [r0, #0]
 8020ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8020caa:	bd38      	pop	{r3, r4, r5, pc}
 8020cac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8020cae:	b112      	cbz	r2, 8020cb6 <_raise_r+0x1e>
 8020cb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020cb4:	b94b      	cbnz	r3, 8020cca <_raise_r+0x32>
 8020cb6:	4620      	mov	r0, r4
 8020cb8:	f000 f830 	bl	8020d1c <_getpid_r>
 8020cbc:	462a      	mov	r2, r5
 8020cbe:	4601      	mov	r1, r0
 8020cc0:	4620      	mov	r0, r4
 8020cc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020cc6:	f000 b817 	b.w	8020cf8 <_kill_r>
 8020cca:	2b01      	cmp	r3, #1
 8020ccc:	d00a      	beq.n	8020ce4 <_raise_r+0x4c>
 8020cce:	1c59      	adds	r1, r3, #1
 8020cd0:	d103      	bne.n	8020cda <_raise_r+0x42>
 8020cd2:	2316      	movs	r3, #22
 8020cd4:	6003      	str	r3, [r0, #0]
 8020cd6:	2001      	movs	r0, #1
 8020cd8:	e7e7      	b.n	8020caa <_raise_r+0x12>
 8020cda:	2400      	movs	r4, #0
 8020cdc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8020ce0:	4628      	mov	r0, r5
 8020ce2:	4798      	blx	r3
 8020ce4:	2000      	movs	r0, #0
 8020ce6:	e7e0      	b.n	8020caa <_raise_r+0x12>

08020ce8 <raise>:
 8020ce8:	4b02      	ldr	r3, [pc, #8]	; (8020cf4 <raise+0xc>)
 8020cea:	4601      	mov	r1, r0
 8020cec:	6818      	ldr	r0, [r3, #0]
 8020cee:	f7ff bfd3 	b.w	8020c98 <_raise_r>
 8020cf2:	bf00      	nop
 8020cf4:	2400a128 	.word	0x2400a128

08020cf8 <_kill_r>:
 8020cf8:	b538      	push	{r3, r4, r5, lr}
 8020cfa:	4d07      	ldr	r5, [pc, #28]	; (8020d18 <_kill_r+0x20>)
 8020cfc:	2300      	movs	r3, #0
 8020cfe:	4604      	mov	r4, r0
 8020d00:	4608      	mov	r0, r1
 8020d02:	4611      	mov	r1, r2
 8020d04:	602b      	str	r3, [r5, #0]
 8020d06:	f7e0 fff9 	bl	8001cfc <_kill>
 8020d0a:	1c43      	adds	r3, r0, #1
 8020d0c:	d102      	bne.n	8020d14 <_kill_r+0x1c>
 8020d0e:	682b      	ldr	r3, [r5, #0]
 8020d10:	b103      	cbz	r3, 8020d14 <_kill_r+0x1c>
 8020d12:	6023      	str	r3, [r4, #0]
 8020d14:	bd38      	pop	{r3, r4, r5, pc}
 8020d16:	bf00      	nop
 8020d18:	2401485c 	.word	0x2401485c

08020d1c <_getpid_r>:
 8020d1c:	f7e0 bfe6 	b.w	8001cec <_getpid>

08020d20 <__sread>:
 8020d20:	b510      	push	{r4, lr}
 8020d22:	460c      	mov	r4, r1
 8020d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020d28:	f000 f8a8 	bl	8020e7c <_read_r>
 8020d2c:	2800      	cmp	r0, #0
 8020d2e:	bfab      	itete	ge
 8020d30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8020d32:	89a3      	ldrhlt	r3, [r4, #12]
 8020d34:	181b      	addge	r3, r3, r0
 8020d36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8020d3a:	bfac      	ite	ge
 8020d3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8020d3e:	81a3      	strhlt	r3, [r4, #12]
 8020d40:	bd10      	pop	{r4, pc}

08020d42 <__swrite>:
 8020d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020d46:	461f      	mov	r7, r3
 8020d48:	898b      	ldrh	r3, [r1, #12]
 8020d4a:	05db      	lsls	r3, r3, #23
 8020d4c:	4605      	mov	r5, r0
 8020d4e:	460c      	mov	r4, r1
 8020d50:	4616      	mov	r6, r2
 8020d52:	d505      	bpl.n	8020d60 <__swrite+0x1e>
 8020d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020d58:	2302      	movs	r3, #2
 8020d5a:	2200      	movs	r2, #0
 8020d5c:	f000 f874 	bl	8020e48 <_lseek_r>
 8020d60:	89a3      	ldrh	r3, [r4, #12]
 8020d62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020d66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8020d6a:	81a3      	strh	r3, [r4, #12]
 8020d6c:	4632      	mov	r2, r6
 8020d6e:	463b      	mov	r3, r7
 8020d70:	4628      	mov	r0, r5
 8020d72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020d76:	f000 b823 	b.w	8020dc0 <_write_r>

08020d7a <__sseek>:
 8020d7a:	b510      	push	{r4, lr}
 8020d7c:	460c      	mov	r4, r1
 8020d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020d82:	f000 f861 	bl	8020e48 <_lseek_r>
 8020d86:	1c43      	adds	r3, r0, #1
 8020d88:	89a3      	ldrh	r3, [r4, #12]
 8020d8a:	bf15      	itete	ne
 8020d8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8020d8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8020d92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8020d96:	81a3      	strheq	r3, [r4, #12]
 8020d98:	bf18      	it	ne
 8020d9a:	81a3      	strhne	r3, [r4, #12]
 8020d9c:	bd10      	pop	{r4, pc}

08020d9e <__sclose>:
 8020d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020da2:	f000 b81f 	b.w	8020de4 <_close_r>

08020da6 <__ascii_wctomb>:
 8020da6:	b149      	cbz	r1, 8020dbc <__ascii_wctomb+0x16>
 8020da8:	2aff      	cmp	r2, #255	; 0xff
 8020daa:	bf85      	ittet	hi
 8020dac:	238a      	movhi	r3, #138	; 0x8a
 8020dae:	6003      	strhi	r3, [r0, #0]
 8020db0:	700a      	strbls	r2, [r1, #0]
 8020db2:	f04f 30ff 	movhi.w	r0, #4294967295
 8020db6:	bf98      	it	ls
 8020db8:	2001      	movls	r0, #1
 8020dba:	4770      	bx	lr
 8020dbc:	4608      	mov	r0, r1
 8020dbe:	4770      	bx	lr

08020dc0 <_write_r>:
 8020dc0:	b538      	push	{r3, r4, r5, lr}
 8020dc2:	4d07      	ldr	r5, [pc, #28]	; (8020de0 <_write_r+0x20>)
 8020dc4:	4604      	mov	r4, r0
 8020dc6:	4608      	mov	r0, r1
 8020dc8:	4611      	mov	r1, r2
 8020dca:	2200      	movs	r2, #0
 8020dcc:	602a      	str	r2, [r5, #0]
 8020dce:	461a      	mov	r2, r3
 8020dd0:	f7e0 ffcb 	bl	8001d6a <_write>
 8020dd4:	1c43      	adds	r3, r0, #1
 8020dd6:	d102      	bne.n	8020dde <_write_r+0x1e>
 8020dd8:	682b      	ldr	r3, [r5, #0]
 8020dda:	b103      	cbz	r3, 8020dde <_write_r+0x1e>
 8020ddc:	6023      	str	r3, [r4, #0]
 8020dde:	bd38      	pop	{r3, r4, r5, pc}
 8020de0:	2401485c 	.word	0x2401485c

08020de4 <_close_r>:
 8020de4:	b538      	push	{r3, r4, r5, lr}
 8020de6:	4d06      	ldr	r5, [pc, #24]	; (8020e00 <_close_r+0x1c>)
 8020de8:	2300      	movs	r3, #0
 8020dea:	4604      	mov	r4, r0
 8020dec:	4608      	mov	r0, r1
 8020dee:	602b      	str	r3, [r5, #0]
 8020df0:	f7e0 ffd7 	bl	8001da2 <_close>
 8020df4:	1c43      	adds	r3, r0, #1
 8020df6:	d102      	bne.n	8020dfe <_close_r+0x1a>
 8020df8:	682b      	ldr	r3, [r5, #0]
 8020dfa:	b103      	cbz	r3, 8020dfe <_close_r+0x1a>
 8020dfc:	6023      	str	r3, [r4, #0]
 8020dfe:	bd38      	pop	{r3, r4, r5, pc}
 8020e00:	2401485c 	.word	0x2401485c

08020e04 <_fstat_r>:
 8020e04:	b538      	push	{r3, r4, r5, lr}
 8020e06:	4d07      	ldr	r5, [pc, #28]	; (8020e24 <_fstat_r+0x20>)
 8020e08:	2300      	movs	r3, #0
 8020e0a:	4604      	mov	r4, r0
 8020e0c:	4608      	mov	r0, r1
 8020e0e:	4611      	mov	r1, r2
 8020e10:	602b      	str	r3, [r5, #0]
 8020e12:	f7e0 ffd2 	bl	8001dba <_fstat>
 8020e16:	1c43      	adds	r3, r0, #1
 8020e18:	d102      	bne.n	8020e20 <_fstat_r+0x1c>
 8020e1a:	682b      	ldr	r3, [r5, #0]
 8020e1c:	b103      	cbz	r3, 8020e20 <_fstat_r+0x1c>
 8020e1e:	6023      	str	r3, [r4, #0]
 8020e20:	bd38      	pop	{r3, r4, r5, pc}
 8020e22:	bf00      	nop
 8020e24:	2401485c 	.word	0x2401485c

08020e28 <_isatty_r>:
 8020e28:	b538      	push	{r3, r4, r5, lr}
 8020e2a:	4d06      	ldr	r5, [pc, #24]	; (8020e44 <_isatty_r+0x1c>)
 8020e2c:	2300      	movs	r3, #0
 8020e2e:	4604      	mov	r4, r0
 8020e30:	4608      	mov	r0, r1
 8020e32:	602b      	str	r3, [r5, #0]
 8020e34:	f7e0 ffd1 	bl	8001dda <_isatty>
 8020e38:	1c43      	adds	r3, r0, #1
 8020e3a:	d102      	bne.n	8020e42 <_isatty_r+0x1a>
 8020e3c:	682b      	ldr	r3, [r5, #0]
 8020e3e:	b103      	cbz	r3, 8020e42 <_isatty_r+0x1a>
 8020e40:	6023      	str	r3, [r4, #0]
 8020e42:	bd38      	pop	{r3, r4, r5, pc}
 8020e44:	2401485c 	.word	0x2401485c

08020e48 <_lseek_r>:
 8020e48:	b538      	push	{r3, r4, r5, lr}
 8020e4a:	4d07      	ldr	r5, [pc, #28]	; (8020e68 <_lseek_r+0x20>)
 8020e4c:	4604      	mov	r4, r0
 8020e4e:	4608      	mov	r0, r1
 8020e50:	4611      	mov	r1, r2
 8020e52:	2200      	movs	r2, #0
 8020e54:	602a      	str	r2, [r5, #0]
 8020e56:	461a      	mov	r2, r3
 8020e58:	f7e0 ffca 	bl	8001df0 <_lseek>
 8020e5c:	1c43      	adds	r3, r0, #1
 8020e5e:	d102      	bne.n	8020e66 <_lseek_r+0x1e>
 8020e60:	682b      	ldr	r3, [r5, #0]
 8020e62:	b103      	cbz	r3, 8020e66 <_lseek_r+0x1e>
 8020e64:	6023      	str	r3, [r4, #0]
 8020e66:	bd38      	pop	{r3, r4, r5, pc}
 8020e68:	2401485c 	.word	0x2401485c

08020e6c <_malloc_usable_size_r>:
 8020e6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020e70:	1f18      	subs	r0, r3, #4
 8020e72:	2b00      	cmp	r3, #0
 8020e74:	bfbc      	itt	lt
 8020e76:	580b      	ldrlt	r3, [r1, r0]
 8020e78:	18c0      	addlt	r0, r0, r3
 8020e7a:	4770      	bx	lr

08020e7c <_read_r>:
 8020e7c:	b538      	push	{r3, r4, r5, lr}
 8020e7e:	4d07      	ldr	r5, [pc, #28]	; (8020e9c <_read_r+0x20>)
 8020e80:	4604      	mov	r4, r0
 8020e82:	4608      	mov	r0, r1
 8020e84:	4611      	mov	r1, r2
 8020e86:	2200      	movs	r2, #0
 8020e88:	602a      	str	r2, [r5, #0]
 8020e8a:	461a      	mov	r2, r3
 8020e8c:	f7e0 ff50 	bl	8001d30 <_read>
 8020e90:	1c43      	adds	r3, r0, #1
 8020e92:	d102      	bne.n	8020e9a <_read_r+0x1e>
 8020e94:	682b      	ldr	r3, [r5, #0]
 8020e96:	b103      	cbz	r3, 8020e9a <_read_r+0x1e>
 8020e98:	6023      	str	r3, [r4, #0]
 8020e9a:	bd38      	pop	{r3, r4, r5, pc}
 8020e9c:	2401485c 	.word	0x2401485c

08020ea0 <sinf_poly>:
 8020ea0:	07cb      	lsls	r3, r1, #31
 8020ea2:	d412      	bmi.n	8020eca <sinf_poly+0x2a>
 8020ea4:	ee21 6b00 	vmul.f64	d6, d1, d0
 8020ea8:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 8020eac:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 8020eb0:	eea5 7b01 	vfma.f64	d7, d5, d1
 8020eb4:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 8020eb8:	ee21 1b06 	vmul.f64	d1, d1, d6
 8020ebc:	eea5 0b06 	vfma.f64	d0, d5, d6
 8020ec0:	eea7 0b01 	vfma.f64	d0, d7, d1
 8020ec4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8020ec8:	4770      	bx	lr
 8020eca:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 8020ece:	ee21 6b01 	vmul.f64	d6, d1, d1
 8020ed2:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 8020ed6:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 8020eda:	eea1 7b05 	vfma.f64	d7, d1, d5
 8020ede:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 8020ee2:	eea1 0b05 	vfma.f64	d0, d1, d5
 8020ee6:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 8020eea:	ee21 1b06 	vmul.f64	d1, d1, d6
 8020eee:	eea6 0b05 	vfma.f64	d0, d6, d5
 8020ef2:	e7e5      	b.n	8020ec0 <sinf_poly+0x20>
 8020ef4:	0000      	movs	r0, r0
	...

08020ef8 <cosf>:
 8020ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020efa:	ee10 4a10 	vmov	r4, s0
 8020efe:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8020f02:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8020f06:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8020f0a:	d20c      	bcs.n	8020f26 <cosf+0x2e>
 8020f0c:	ee26 1b06 	vmul.f64	d1, d6, d6
 8020f10:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 8020f14:	d378      	bcc.n	8021008 <cosf+0x110>
 8020f16:	eeb0 0b46 	vmov.f64	d0, d6
 8020f1a:	483f      	ldr	r0, [pc, #252]	; (8021018 <cosf+0x120>)
 8020f1c:	2101      	movs	r1, #1
 8020f1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8020f22:	f7ff bfbd 	b.w	8020ea0 <sinf_poly>
 8020f26:	f240 422e 	movw	r2, #1070	; 0x42e
 8020f2a:	4293      	cmp	r3, r2
 8020f2c:	d826      	bhi.n	8020f7c <cosf+0x84>
 8020f2e:	4b3a      	ldr	r3, [pc, #232]	; (8021018 <cosf+0x120>)
 8020f30:	ed93 7b08 	vldr	d7, [r3, #32]
 8020f34:	ee26 7b07 	vmul.f64	d7, d6, d7
 8020f38:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8020f3c:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8020f40:	ee17 1a90 	vmov	r1, s15
 8020f44:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 8020f48:	1609      	asrs	r1, r1, #24
 8020f4a:	ee07 1a90 	vmov	s15, r1
 8020f4e:	f001 0203 	and.w	r2, r1, #3
 8020f52:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8020f56:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8020f5a:	ed92 0b00 	vldr	d0, [r2]
 8020f5e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8020f62:	f011 0f02 	tst.w	r1, #2
 8020f66:	eea5 6b47 	vfms.f64	d6, d5, d7
 8020f6a:	f081 0101 	eor.w	r1, r1, #1
 8020f6e:	bf08      	it	eq
 8020f70:	4618      	moveq	r0, r3
 8020f72:	ee26 1b06 	vmul.f64	d1, d6, d6
 8020f76:	ee20 0b06 	vmul.f64	d0, d0, d6
 8020f7a:	e7d0      	b.n	8020f1e <cosf+0x26>
 8020f7c:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8020f80:	d23e      	bcs.n	8021000 <cosf+0x108>
 8020f82:	4b26      	ldr	r3, [pc, #152]	; (802101c <cosf+0x124>)
 8020f84:	f3c4 6283 	ubfx	r2, r4, #26, #4
 8020f88:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8020f8c:	f3c4 0116 	ubfx	r1, r4, #0, #23
 8020f90:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8020f94:	6a06      	ldr	r6, [r0, #32]
 8020f96:	6900      	ldr	r0, [r0, #16]
 8020f98:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8020f9c:	40a9      	lsls	r1, r5
 8020f9e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8020fa2:	fba1 6706 	umull	r6, r7, r1, r6
 8020fa6:	fb05 f301 	mul.w	r3, r5, r1
 8020faa:	463a      	mov	r2, r7
 8020fac:	fbe0 2301 	umlal	r2, r3, r0, r1
 8020fb0:	1c11      	adds	r1, r2, #0
 8020fb2:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 8020fb6:	2000      	movs	r0, #0
 8020fb8:	1a10      	subs	r0, r2, r0
 8020fba:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 8020fbe:	eb63 0101 	sbc.w	r1, r3, r1
 8020fc2:	f7df fb83 	bl	80006cc <__aeabi_l2d>
 8020fc6:	0fb5      	lsrs	r5, r6, #30
 8020fc8:	4b13      	ldr	r3, [pc, #76]	; (8021018 <cosf+0x120>)
 8020fca:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8020fce:	ed9f 0b10 	vldr	d0, [pc, #64]	; 8021010 <cosf+0x118>
 8020fd2:	ec41 0b17 	vmov	d7, r0, r1
 8020fd6:	f004 0203 	and.w	r2, r4, #3
 8020fda:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8020fde:	ee27 0b00 	vmul.f64	d0, d7, d0
 8020fe2:	ed92 7b00 	vldr	d7, [r2]
 8020fe6:	ee20 1b00 	vmul.f64	d1, d0, d0
 8020fea:	f014 0f02 	tst.w	r4, #2
 8020fee:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8020ff2:	f085 0101 	eor.w	r1, r5, #1
 8020ff6:	bf08      	it	eq
 8020ff8:	4618      	moveq	r0, r3
 8020ffa:	ee27 0b00 	vmul.f64	d0, d7, d0
 8020ffe:	e78e      	b.n	8020f1e <cosf+0x26>
 8021000:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8021004:	f000 b817 	b.w	8021036 <__math_invalidf>
 8021008:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 802100c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802100e:	bf00      	nop
 8021010:	54442d18 	.word	0x54442d18
 8021014:	3c1921fb 	.word	0x3c1921fb
 8021018:	0802aa20 	.word	0x0802aa20
 802101c:	0802a9bc 	.word	0x0802a9bc

08021020 <with_errnof>:
 8021020:	b513      	push	{r0, r1, r4, lr}
 8021022:	4604      	mov	r4, r0
 8021024:	ed8d 0a01 	vstr	s0, [sp, #4]
 8021028:	f7fb faee 	bl	801c608 <__errno>
 802102c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8021030:	6004      	str	r4, [r0, #0]
 8021032:	b002      	add	sp, #8
 8021034:	bd10      	pop	{r4, pc}

08021036 <__math_invalidf>:
 8021036:	eef0 7a40 	vmov.f32	s15, s0
 802103a:	ee30 7a40 	vsub.f32	s14, s0, s0
 802103e:	eef4 7a67 	vcmp.f32	s15, s15
 8021042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021046:	ee87 0a07 	vdiv.f32	s0, s14, s14
 802104a:	d602      	bvs.n	8021052 <__math_invalidf+0x1c>
 802104c:	2021      	movs	r0, #33	; 0x21
 802104e:	f7ff bfe7 	b.w	8021020 <with_errnof>
 8021052:	4770      	bx	lr

08021054 <fmax>:
 8021054:	b508      	push	{r3, lr}
 8021056:	ed2d 8b04 	vpush	{d8-d9}
 802105a:	eeb0 8b40 	vmov.f64	d8, d0
 802105e:	eeb0 9b41 	vmov.f64	d9, d1
 8021062:	f000 f82d 	bl	80210c0 <__fpclassifyd>
 8021066:	b148      	cbz	r0, 802107c <fmax+0x28>
 8021068:	eeb0 0b49 	vmov.f64	d0, d9
 802106c:	f000 f828 	bl	80210c0 <__fpclassifyd>
 8021070:	b130      	cbz	r0, 8021080 <fmax+0x2c>
 8021072:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8021076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802107a:	dc01      	bgt.n	8021080 <fmax+0x2c>
 802107c:	eeb0 8b49 	vmov.f64	d8, d9
 8021080:	eeb0 0b48 	vmov.f64	d0, d8
 8021084:	ecbd 8b04 	vpop	{d8-d9}
 8021088:	bd08      	pop	{r3, pc}

0802108a <fmin>:
 802108a:	b508      	push	{r3, lr}
 802108c:	ed2d 8b04 	vpush	{d8-d9}
 8021090:	eeb0 8b40 	vmov.f64	d8, d0
 8021094:	eeb0 9b41 	vmov.f64	d9, d1
 8021098:	f000 f812 	bl	80210c0 <__fpclassifyd>
 802109c:	b148      	cbz	r0, 80210b2 <fmin+0x28>
 802109e:	eeb0 0b49 	vmov.f64	d0, d9
 80210a2:	f000 f80d 	bl	80210c0 <__fpclassifyd>
 80210a6:	b130      	cbz	r0, 80210b6 <fmin+0x2c>
 80210a8:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80210ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80210b0:	d401      	bmi.n	80210b6 <fmin+0x2c>
 80210b2:	eeb0 8b49 	vmov.f64	d8, d9
 80210b6:	eeb0 0b48 	vmov.f64	d0, d8
 80210ba:	ecbd 8b04 	vpop	{d8-d9}
 80210be:	bd08      	pop	{r3, pc}

080210c0 <__fpclassifyd>:
 80210c0:	ec51 0b10 	vmov	r0, r1, d0
 80210c4:	b510      	push	{r4, lr}
 80210c6:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 80210ca:	460b      	mov	r3, r1
 80210cc:	d019      	beq.n	8021102 <__fpclassifyd+0x42>
 80210ce:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 80210d2:	490e      	ldr	r1, [pc, #56]	; (802110c <__fpclassifyd+0x4c>)
 80210d4:	428a      	cmp	r2, r1
 80210d6:	d90e      	bls.n	80210f6 <__fpclassifyd+0x36>
 80210d8:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 80210dc:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 80210e0:	428a      	cmp	r2, r1
 80210e2:	d908      	bls.n	80210f6 <__fpclassifyd+0x36>
 80210e4:	4a0a      	ldr	r2, [pc, #40]	; (8021110 <__fpclassifyd+0x50>)
 80210e6:	4213      	tst	r3, r2
 80210e8:	d007      	beq.n	80210fa <__fpclassifyd+0x3a>
 80210ea:	4294      	cmp	r4, r2
 80210ec:	d107      	bne.n	80210fe <__fpclassifyd+0x3e>
 80210ee:	fab0 f080 	clz	r0, r0
 80210f2:	0940      	lsrs	r0, r0, #5
 80210f4:	bd10      	pop	{r4, pc}
 80210f6:	2004      	movs	r0, #4
 80210f8:	e7fc      	b.n	80210f4 <__fpclassifyd+0x34>
 80210fa:	2003      	movs	r0, #3
 80210fc:	e7fa      	b.n	80210f4 <__fpclassifyd+0x34>
 80210fe:	2000      	movs	r0, #0
 8021100:	e7f8      	b.n	80210f4 <__fpclassifyd+0x34>
 8021102:	2800      	cmp	r0, #0
 8021104:	d1ee      	bne.n	80210e4 <__fpclassifyd+0x24>
 8021106:	2002      	movs	r0, #2
 8021108:	e7f4      	b.n	80210f4 <__fpclassifyd+0x34>
 802110a:	bf00      	nop
 802110c:	7fdfffff 	.word	0x7fdfffff
 8021110:	7ff00000 	.word	0x7ff00000

08021114 <sinf_poly>:
 8021114:	07cb      	lsls	r3, r1, #31
 8021116:	d412      	bmi.n	802113e <sinf_poly+0x2a>
 8021118:	ee21 6b00 	vmul.f64	d6, d1, d0
 802111c:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 8021120:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 8021124:	eea5 7b01 	vfma.f64	d7, d5, d1
 8021128:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 802112c:	ee21 1b06 	vmul.f64	d1, d1, d6
 8021130:	eea5 0b06 	vfma.f64	d0, d5, d6
 8021134:	eea7 0b01 	vfma.f64	d0, d7, d1
 8021138:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 802113c:	4770      	bx	lr
 802113e:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 8021142:	ee21 6b01 	vmul.f64	d6, d1, d1
 8021146:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 802114a:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 802114e:	eea1 7b05 	vfma.f64	d7, d1, d5
 8021152:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 8021156:	eea1 0b05 	vfma.f64	d0, d1, d5
 802115a:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 802115e:	ee21 1b06 	vmul.f64	d1, d1, d6
 8021162:	eea6 0b05 	vfma.f64	d0, d6, d5
 8021166:	e7e5      	b.n	8021134 <sinf_poly+0x20>

08021168 <sinf>:
 8021168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802116a:	ee10 4a10 	vmov	r4, s0
 802116e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8021172:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 8021176:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 802117a:	eef0 7a40 	vmov.f32	s15, s0
 802117e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 8021182:	d218      	bcs.n	80211b6 <sinf+0x4e>
 8021184:	ee26 1b06 	vmul.f64	d1, d6, d6
 8021188:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 802118c:	d20a      	bcs.n	80211a4 <sinf+0x3c>
 802118e:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 8021192:	d103      	bne.n	802119c <sinf+0x34>
 8021194:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8021198:	ed8d 1a01 	vstr	s2, [sp, #4]
 802119c:	eeb0 0a67 	vmov.f32	s0, s15
 80211a0:	b003      	add	sp, #12
 80211a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80211a4:	483e      	ldr	r0, [pc, #248]	; (80212a0 <sinf+0x138>)
 80211a6:	eeb0 0b46 	vmov.f64	d0, d6
 80211aa:	2100      	movs	r1, #0
 80211ac:	b003      	add	sp, #12
 80211ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80211b2:	f7ff bfaf 	b.w	8021114 <sinf_poly>
 80211b6:	f240 422e 	movw	r2, #1070	; 0x42e
 80211ba:	4293      	cmp	r3, r2
 80211bc:	d824      	bhi.n	8021208 <sinf+0xa0>
 80211be:	4b38      	ldr	r3, [pc, #224]	; (80212a0 <sinf+0x138>)
 80211c0:	ed93 7b08 	vldr	d7, [r3, #32]
 80211c4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80211c8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80211cc:	f103 0070 	add.w	r0, r3, #112	; 0x70
 80211d0:	ee17 1a90 	vmov	r1, s15
 80211d4:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 80211d8:	1609      	asrs	r1, r1, #24
 80211da:	ee07 1a90 	vmov	s15, r1
 80211de:	f001 0203 	and.w	r2, r1, #3
 80211e2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80211e6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80211ea:	ed92 0b00 	vldr	d0, [r2]
 80211ee:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80211f2:	f011 0f02 	tst.w	r1, #2
 80211f6:	eea5 6b47 	vfms.f64	d6, d5, d7
 80211fa:	bf08      	it	eq
 80211fc:	4618      	moveq	r0, r3
 80211fe:	ee26 1b06 	vmul.f64	d1, d6, d6
 8021202:	ee20 0b06 	vmul.f64	d0, d0, d6
 8021206:	e7d1      	b.n	80211ac <sinf+0x44>
 8021208:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 802120c:	d23d      	bcs.n	802128a <sinf+0x122>
 802120e:	4b25      	ldr	r3, [pc, #148]	; (80212a4 <sinf+0x13c>)
 8021210:	f3c4 6283 	ubfx	r2, r4, #26, #4
 8021214:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8021218:	f3c4 0116 	ubfx	r1, r4, #0, #23
 802121c:	6a06      	ldr	r6, [r0, #32]
 802121e:	6900      	ldr	r0, [r0, #16]
 8021220:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8021224:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8021228:	40a9      	lsls	r1, r5
 802122a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 802122e:	fba1 6706 	umull	r6, r7, r1, r6
 8021232:	fb05 f301 	mul.w	r3, r5, r1
 8021236:	463a      	mov	r2, r7
 8021238:	fbe0 2301 	umlal	r2, r3, r0, r1
 802123c:	1c11      	adds	r1, r2, #0
 802123e:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 8021242:	2000      	movs	r0, #0
 8021244:	1a10      	subs	r0, r2, r0
 8021246:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 802124a:	eb63 0101 	sbc.w	r1, r3, r1
 802124e:	f7df fa3d 	bl	80006cc <__aeabi_l2d>
 8021252:	0fb5      	lsrs	r5, r6, #30
 8021254:	4a12      	ldr	r2, [pc, #72]	; (80212a0 <sinf+0x138>)
 8021256:	eb05 73d4 	add.w	r3, r5, r4, lsr #31
 802125a:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8021298 <sinf+0x130>
 802125e:	ec41 0b17 	vmov	d7, r0, r1
 8021262:	f003 0103 	and.w	r1, r3, #3
 8021266:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 802126a:	ee27 0b00 	vmul.f64	d0, d7, d0
 802126e:	ed91 7b00 	vldr	d7, [r1]
 8021272:	ee20 1b00 	vmul.f64	d1, d0, d0
 8021276:	f013 0f02 	tst.w	r3, #2
 802127a:	f102 0070 	add.w	r0, r2, #112	; 0x70
 802127e:	4629      	mov	r1, r5
 8021280:	bf08      	it	eq
 8021282:	4610      	moveq	r0, r2
 8021284:	ee27 0b00 	vmul.f64	d0, d7, d0
 8021288:	e790      	b.n	80211ac <sinf+0x44>
 802128a:	b003      	add	sp, #12
 802128c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8021290:	f7ff bed1 	b.w	8021036 <__math_invalidf>
 8021294:	f3af 8000 	nop.w
 8021298:	54442d18 	.word	0x54442d18
 802129c:	3c1921fb 	.word	0x3c1921fb
 80212a0:	0802aa20 	.word	0x0802aa20
 80212a4:	0802a9bc 	.word	0x0802a9bc

080212a8 <_init>:
 80212a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80212aa:	bf00      	nop
 80212ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80212ae:	bc08      	pop	{r3}
 80212b0:	469e      	mov	lr, r3
 80212b2:	4770      	bx	lr

080212b4 <_fini>:
 80212b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80212b6:	bf00      	nop
 80212b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80212ba:	bc08      	pop	{r3}
 80212bc:	469e      	mov	lr, r3
 80212be:	4770      	bx	lr
