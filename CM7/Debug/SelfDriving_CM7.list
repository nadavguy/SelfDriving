
SelfDriving_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f140  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009810  0801f3e0  0801f3e0  0002f3e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08028bf0  08028bf0  0004a3bc  2**0
                  CONTENTS
  4 .ARM          00000008  08028bf0  08028bf0  00038bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08028bf8  08028bf8  0004a3bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08028bf8  08028bf8  00038bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08028bfc  08028bfc  00038bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000a2fc  24000000  08028c00  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  2400a2fc  08032efc  0004a2fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  2400a35c  08032f5c  0004a35c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000e07c  2400a3bc  08032fbc  0004a3bc  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24018438  08032fbc  00058438  2**0
                  ALLOC
 13 .data_RAM_D2  00000000  30000000  30000000  0004a3bc  2**0
                  CONTENTS
 14 .bss_RAM_D2   00000000  30000000  30000000  0004a3bc  2**0
                  CONTENTS
 15 .openamp_section 0000008c  38000000  08032fbc  00050000  2**2
                  ALLOC
 16 .ARM.attributes 0000002e  00000000  00000000  0004a3bc  2**0
                  CONTENTS, READONLY
 17 .debug_info   0009c51b  00000000  00000000  0004a3ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000d50a  00000000  00000000  000e6905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002e70  00000000  00000000  000f3e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 000029e8  00000000  00000000  000f6c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00052f82  00000000  00000000  000f9668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0005d150  00000000  00000000  0014c5ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    001a00d5  00000000  00000000  001a973a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000053  00000000  00000000  0034980f  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000d394  00000000  00000000  00349864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400a3bc 	.word	0x2400a3bc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801f3c8 	.word	0x0801f3c8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400a3c0 	.word	0x2400a3c0
 80002dc:	0801f3c8 	.word	0x0801f3c8

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	; 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295
 8000738:	f04f 30ff 	movne.w	r0, #4294967295
 800073c:	f000 b9a6 	b.w	8000a8c <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f83e 	bl	80007c8 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__aeabi_d2lz>:
 8000758:	b508      	push	{r3, lr}
 800075a:	4602      	mov	r2, r0
 800075c:	460b      	mov	r3, r1
 800075e:	ec43 2b17 	vmov	d7, r2, r3
 8000762:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076a:	d403      	bmi.n	8000774 <__aeabi_d2lz+0x1c>
 800076c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000770:	f000 b80a 	b.w	8000788 <__aeabi_d2ulz>
 8000774:	eeb1 7b47 	vneg.f64	d7, d7
 8000778:	ec51 0b17 	vmov	r0, r1, d7
 800077c:	f000 f804 	bl	8000788 <__aeabi_d2ulz>
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	bd08      	pop	{r3, pc}

08000788 <__aeabi_d2ulz>:
 8000788:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007b8 <__aeabi_d2ulz+0x30>
 800078c:	ec41 0b17 	vmov	d7, r0, r1
 8000790:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007c0 <__aeabi_d2ulz+0x38>
 8000794:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000798:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800079c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007a0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007a4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007a8:	ee16 1a10 	vmov	r1, s12
 80007ac:	ee17 0a90 	vmov	r0, s15
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	f3af 8000 	nop.w
 80007b8:	00000000 	.word	0x00000000
 80007bc:	3df00000 	.word	0x3df00000
 80007c0:	00000000 	.word	0x00000000
 80007c4:	41f00000 	.word	0x41f00000

080007c8 <__udivmoddi4>:
 80007c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007cc:	9d08      	ldr	r5, [sp, #32]
 80007ce:	4604      	mov	r4, r0
 80007d0:	468c      	mov	ip, r1
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	f040 8083 	bne.w	80008de <__udivmoddi4+0x116>
 80007d8:	428a      	cmp	r2, r1
 80007da:	4617      	mov	r7, r2
 80007dc:	d947      	bls.n	800086e <__udivmoddi4+0xa6>
 80007de:	fab2 f282 	clz	r2, r2
 80007e2:	b142      	cbz	r2, 80007f6 <__udivmoddi4+0x2e>
 80007e4:	f1c2 0020 	rsb	r0, r2, #32
 80007e8:	fa24 f000 	lsr.w	r0, r4, r0
 80007ec:	4091      	lsls	r1, r2
 80007ee:	4097      	lsls	r7, r2
 80007f0:	ea40 0c01 	orr.w	ip, r0, r1
 80007f4:	4094      	lsls	r4, r2
 80007f6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80007fa:	0c23      	lsrs	r3, r4, #16
 80007fc:	fbbc f6f8 	udiv	r6, ip, r8
 8000800:	fa1f fe87 	uxth.w	lr, r7
 8000804:	fb08 c116 	mls	r1, r8, r6, ip
 8000808:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800080c:	fb06 f10e 	mul.w	r1, r6, lr
 8000810:	4299      	cmp	r1, r3
 8000812:	d909      	bls.n	8000828 <__udivmoddi4+0x60>
 8000814:	18fb      	adds	r3, r7, r3
 8000816:	f106 30ff 	add.w	r0, r6, #4294967295
 800081a:	f080 8119 	bcs.w	8000a50 <__udivmoddi4+0x288>
 800081e:	4299      	cmp	r1, r3
 8000820:	f240 8116 	bls.w	8000a50 <__udivmoddi4+0x288>
 8000824:	3e02      	subs	r6, #2
 8000826:	443b      	add	r3, r7
 8000828:	1a5b      	subs	r3, r3, r1
 800082a:	b2a4      	uxth	r4, r4
 800082c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000830:	fb08 3310 	mls	r3, r8, r0, r3
 8000834:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000838:	fb00 fe0e 	mul.w	lr, r0, lr
 800083c:	45a6      	cmp	lr, r4
 800083e:	d909      	bls.n	8000854 <__udivmoddi4+0x8c>
 8000840:	193c      	adds	r4, r7, r4
 8000842:	f100 33ff 	add.w	r3, r0, #4294967295
 8000846:	f080 8105 	bcs.w	8000a54 <__udivmoddi4+0x28c>
 800084a:	45a6      	cmp	lr, r4
 800084c:	f240 8102 	bls.w	8000a54 <__udivmoddi4+0x28c>
 8000850:	3802      	subs	r0, #2
 8000852:	443c      	add	r4, r7
 8000854:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000858:	eba4 040e 	sub.w	r4, r4, lr
 800085c:	2600      	movs	r6, #0
 800085e:	b11d      	cbz	r5, 8000868 <__udivmoddi4+0xa0>
 8000860:	40d4      	lsrs	r4, r2
 8000862:	2300      	movs	r3, #0
 8000864:	e9c5 4300 	strd	r4, r3, [r5]
 8000868:	4631      	mov	r1, r6
 800086a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800086e:	b902      	cbnz	r2, 8000872 <__udivmoddi4+0xaa>
 8000870:	deff      	udf	#255	; 0xff
 8000872:	fab2 f282 	clz	r2, r2
 8000876:	2a00      	cmp	r2, #0
 8000878:	d150      	bne.n	800091c <__udivmoddi4+0x154>
 800087a:	1bcb      	subs	r3, r1, r7
 800087c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000880:	fa1f f887 	uxth.w	r8, r7
 8000884:	2601      	movs	r6, #1
 8000886:	fbb3 fcfe 	udiv	ip, r3, lr
 800088a:	0c21      	lsrs	r1, r4, #16
 800088c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000890:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000894:	fb08 f30c 	mul.w	r3, r8, ip
 8000898:	428b      	cmp	r3, r1
 800089a:	d907      	bls.n	80008ac <__udivmoddi4+0xe4>
 800089c:	1879      	adds	r1, r7, r1
 800089e:	f10c 30ff 	add.w	r0, ip, #4294967295
 80008a2:	d202      	bcs.n	80008aa <__udivmoddi4+0xe2>
 80008a4:	428b      	cmp	r3, r1
 80008a6:	f200 80e9 	bhi.w	8000a7c <__udivmoddi4+0x2b4>
 80008aa:	4684      	mov	ip, r0
 80008ac:	1ac9      	subs	r1, r1, r3
 80008ae:	b2a3      	uxth	r3, r4
 80008b0:	fbb1 f0fe 	udiv	r0, r1, lr
 80008b4:	fb0e 1110 	mls	r1, lr, r0, r1
 80008b8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80008bc:	fb08 f800 	mul.w	r8, r8, r0
 80008c0:	45a0      	cmp	r8, r4
 80008c2:	d907      	bls.n	80008d4 <__udivmoddi4+0x10c>
 80008c4:	193c      	adds	r4, r7, r4
 80008c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80008ca:	d202      	bcs.n	80008d2 <__udivmoddi4+0x10a>
 80008cc:	45a0      	cmp	r8, r4
 80008ce:	f200 80d9 	bhi.w	8000a84 <__udivmoddi4+0x2bc>
 80008d2:	4618      	mov	r0, r3
 80008d4:	eba4 0408 	sub.w	r4, r4, r8
 80008d8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008dc:	e7bf      	b.n	800085e <__udivmoddi4+0x96>
 80008de:	428b      	cmp	r3, r1
 80008e0:	d909      	bls.n	80008f6 <__udivmoddi4+0x12e>
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	f000 80b1 	beq.w	8000a4a <__udivmoddi4+0x282>
 80008e8:	2600      	movs	r6, #0
 80008ea:	e9c5 0100 	strd	r0, r1, [r5]
 80008ee:	4630      	mov	r0, r6
 80008f0:	4631      	mov	r1, r6
 80008f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008f6:	fab3 f683 	clz	r6, r3
 80008fa:	2e00      	cmp	r6, #0
 80008fc:	d14a      	bne.n	8000994 <__udivmoddi4+0x1cc>
 80008fe:	428b      	cmp	r3, r1
 8000900:	d302      	bcc.n	8000908 <__udivmoddi4+0x140>
 8000902:	4282      	cmp	r2, r0
 8000904:	f200 80b8 	bhi.w	8000a78 <__udivmoddi4+0x2b0>
 8000908:	1a84      	subs	r4, r0, r2
 800090a:	eb61 0103 	sbc.w	r1, r1, r3
 800090e:	2001      	movs	r0, #1
 8000910:	468c      	mov	ip, r1
 8000912:	2d00      	cmp	r5, #0
 8000914:	d0a8      	beq.n	8000868 <__udivmoddi4+0xa0>
 8000916:	e9c5 4c00 	strd	r4, ip, [r5]
 800091a:	e7a5      	b.n	8000868 <__udivmoddi4+0xa0>
 800091c:	f1c2 0320 	rsb	r3, r2, #32
 8000920:	fa20 f603 	lsr.w	r6, r0, r3
 8000924:	4097      	lsls	r7, r2
 8000926:	fa01 f002 	lsl.w	r0, r1, r2
 800092a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800092e:	40d9      	lsrs	r1, r3
 8000930:	4330      	orrs	r0, r6
 8000932:	0c03      	lsrs	r3, r0, #16
 8000934:	fbb1 f6fe 	udiv	r6, r1, lr
 8000938:	fa1f f887 	uxth.w	r8, r7
 800093c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000940:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000944:	fb06 f108 	mul.w	r1, r6, r8
 8000948:	4299      	cmp	r1, r3
 800094a:	fa04 f402 	lsl.w	r4, r4, r2
 800094e:	d909      	bls.n	8000964 <__udivmoddi4+0x19c>
 8000950:	18fb      	adds	r3, r7, r3
 8000952:	f106 3cff 	add.w	ip, r6, #4294967295
 8000956:	f080 808d 	bcs.w	8000a74 <__udivmoddi4+0x2ac>
 800095a:	4299      	cmp	r1, r3
 800095c:	f240 808a 	bls.w	8000a74 <__udivmoddi4+0x2ac>
 8000960:	3e02      	subs	r6, #2
 8000962:	443b      	add	r3, r7
 8000964:	1a5b      	subs	r3, r3, r1
 8000966:	b281      	uxth	r1, r0
 8000968:	fbb3 f0fe 	udiv	r0, r3, lr
 800096c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000970:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000974:	fb00 f308 	mul.w	r3, r0, r8
 8000978:	428b      	cmp	r3, r1
 800097a:	d907      	bls.n	800098c <__udivmoddi4+0x1c4>
 800097c:	1879      	adds	r1, r7, r1
 800097e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000982:	d273      	bcs.n	8000a6c <__udivmoddi4+0x2a4>
 8000984:	428b      	cmp	r3, r1
 8000986:	d971      	bls.n	8000a6c <__udivmoddi4+0x2a4>
 8000988:	3802      	subs	r0, #2
 800098a:	4439      	add	r1, r7
 800098c:	1acb      	subs	r3, r1, r3
 800098e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000992:	e778      	b.n	8000886 <__udivmoddi4+0xbe>
 8000994:	f1c6 0c20 	rsb	ip, r6, #32
 8000998:	fa03 f406 	lsl.w	r4, r3, r6
 800099c:	fa22 f30c 	lsr.w	r3, r2, ip
 80009a0:	431c      	orrs	r4, r3
 80009a2:	fa20 f70c 	lsr.w	r7, r0, ip
 80009a6:	fa01 f306 	lsl.w	r3, r1, r6
 80009aa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80009ae:	fa21 f10c 	lsr.w	r1, r1, ip
 80009b2:	431f      	orrs	r7, r3
 80009b4:	0c3b      	lsrs	r3, r7, #16
 80009b6:	fbb1 f9fe 	udiv	r9, r1, lr
 80009ba:	fa1f f884 	uxth.w	r8, r4
 80009be:	fb0e 1119 	mls	r1, lr, r9, r1
 80009c2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80009c6:	fb09 fa08 	mul.w	sl, r9, r8
 80009ca:	458a      	cmp	sl, r1
 80009cc:	fa02 f206 	lsl.w	r2, r2, r6
 80009d0:	fa00 f306 	lsl.w	r3, r0, r6
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x220>
 80009d6:	1861      	adds	r1, r4, r1
 80009d8:	f109 30ff 	add.w	r0, r9, #4294967295
 80009dc:	d248      	bcs.n	8000a70 <__udivmoddi4+0x2a8>
 80009de:	458a      	cmp	sl, r1
 80009e0:	d946      	bls.n	8000a70 <__udivmoddi4+0x2a8>
 80009e2:	f1a9 0902 	sub.w	r9, r9, #2
 80009e6:	4421      	add	r1, r4
 80009e8:	eba1 010a 	sub.w	r1, r1, sl
 80009ec:	b2bf      	uxth	r7, r7
 80009ee:	fbb1 f0fe 	udiv	r0, r1, lr
 80009f2:	fb0e 1110 	mls	r1, lr, r0, r1
 80009f6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80009fa:	fb00 f808 	mul.w	r8, r0, r8
 80009fe:	45b8      	cmp	r8, r7
 8000a00:	d907      	bls.n	8000a12 <__udivmoddi4+0x24a>
 8000a02:	19e7      	adds	r7, r4, r7
 8000a04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a08:	d22e      	bcs.n	8000a68 <__udivmoddi4+0x2a0>
 8000a0a:	45b8      	cmp	r8, r7
 8000a0c:	d92c      	bls.n	8000a68 <__udivmoddi4+0x2a0>
 8000a0e:	3802      	subs	r0, #2
 8000a10:	4427      	add	r7, r4
 8000a12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a16:	eba7 0708 	sub.w	r7, r7, r8
 8000a1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000a1e:	454f      	cmp	r7, r9
 8000a20:	46c6      	mov	lr, r8
 8000a22:	4649      	mov	r1, r9
 8000a24:	d31a      	bcc.n	8000a5c <__udivmoddi4+0x294>
 8000a26:	d017      	beq.n	8000a58 <__udivmoddi4+0x290>
 8000a28:	b15d      	cbz	r5, 8000a42 <__udivmoddi4+0x27a>
 8000a2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000a2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000a32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000a36:	40f2      	lsrs	r2, r6
 8000a38:	ea4c 0202 	orr.w	r2, ip, r2
 8000a3c:	40f7      	lsrs	r7, r6
 8000a3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000a42:	2600      	movs	r6, #0
 8000a44:	4631      	mov	r1, r6
 8000a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a4a:	462e      	mov	r6, r5
 8000a4c:	4628      	mov	r0, r5
 8000a4e:	e70b      	b.n	8000868 <__udivmoddi4+0xa0>
 8000a50:	4606      	mov	r6, r0
 8000a52:	e6e9      	b.n	8000828 <__udivmoddi4+0x60>
 8000a54:	4618      	mov	r0, r3
 8000a56:	e6fd      	b.n	8000854 <__udivmoddi4+0x8c>
 8000a58:	4543      	cmp	r3, r8
 8000a5a:	d2e5      	bcs.n	8000a28 <__udivmoddi4+0x260>
 8000a5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a60:	eb69 0104 	sbc.w	r1, r9, r4
 8000a64:	3801      	subs	r0, #1
 8000a66:	e7df      	b.n	8000a28 <__udivmoddi4+0x260>
 8000a68:	4608      	mov	r0, r1
 8000a6a:	e7d2      	b.n	8000a12 <__udivmoddi4+0x24a>
 8000a6c:	4660      	mov	r0, ip
 8000a6e:	e78d      	b.n	800098c <__udivmoddi4+0x1c4>
 8000a70:	4681      	mov	r9, r0
 8000a72:	e7b9      	b.n	80009e8 <__udivmoddi4+0x220>
 8000a74:	4666      	mov	r6, ip
 8000a76:	e775      	b.n	8000964 <__udivmoddi4+0x19c>
 8000a78:	4630      	mov	r0, r6
 8000a7a:	e74a      	b.n	8000912 <__udivmoddi4+0x14a>
 8000a7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a80:	4439      	add	r1, r7
 8000a82:	e713      	b.n	80008ac <__udivmoddi4+0xe4>
 8000a84:	3802      	subs	r0, #2
 8000a86:	443c      	add	r4, r7
 8000a88:	e724      	b.n	80008d4 <__udivmoddi4+0x10c>
 8000a8a:	bf00      	nop

08000a8c <__aeabi_idiv0>:
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop

08000a90 <rpmsg_recv_callback>:

uint32_t receivedDataPointer = 0;

int rpmsg_recv_callback(struct rpmsg_endpoint *ept, void *data,
		size_t len, uint32_t src, void *priv)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
 8000a9c:	603b      	str	r3, [r7, #0]
	received_data = *((unsigned int *) data);
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a09      	ldr	r2, [pc, #36]	; (8000ac8 <rpmsg_recv_callback+0x38>)
 8000aa4:	6013      	str	r3, [r2, #0]
	receivedDataPointer = (uint32_t)((unsigned int *) data);
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	4a08      	ldr	r2, [pc, #32]	; (8000acc <rpmsg_recv_callback+0x3c>)
 8000aaa:	6013      	str	r3, [r2, #0]
	message_received=1;
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <rpmsg_recv_callback+0x40>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	601a      	str	r2, [r3, #0]
	parseRecievedMessages((uint8_t)received_data);
 8000ab2:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <rpmsg_recv_callback+0x38>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f000 f853 	bl	8000b64 <parseRecievedMessages>
	return 0;
 8000abe:	2300      	movs	r3, #0
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	2400ac38 	.word	0x2400ac38
 8000acc:	2400a3d8 	.word	0x2400a3d8
 8000ad0:	2400ac80 	.word	0x2400ac80

08000ad4 <receive_message>:
}
#endif

#ifdef CORE_CM7
unsigned int receive_message(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	while (message_received == 0 && service_created == 1)
 8000ad8:	e001      	b.n	8000ade <receive_message+0xa>
	{
		OPENAMP_check_for_message();
 8000ada:	f016 fcb3 	bl	8017444 <OPENAMP_check_for_message>
	while (message_received == 0 && service_created == 1)
 8000ade:	4b07      	ldr	r3, [pc, #28]	; (8000afc <receive_message+0x28>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d103      	bne.n	8000aee <receive_message+0x1a>
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <receive_message+0x2c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d0f5      	beq.n	8000ada <receive_message+0x6>
	}
	message_received = 0;
 8000aee:	4b03      	ldr	r3, [pc, #12]	; (8000afc <receive_message+0x28>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]

	return received_data;
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <receive_message+0x30>)
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	2400ac80 	.word	0x2400ac80
 8000b00:	2400ac3c 	.word	0x2400ac3c
 8000b04:	2400ac38 	.word	0x2400ac38

08000b08 <service_destroy_cb>:
void service_destroy_cb(struct rpmsg_endpoint *ept)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	/* this function is called while remote endpoint as been destroyed, the
	 * service is no more available
	 */
	service_created = 0;
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <service_destroy_cb+0x1c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	2400ac3c 	.word	0x2400ac3c

08000b28 <new_service_cb>:

void new_service_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af02      	add	r7, sp, #8
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
	/* create a endpoint for rmpsg communication */
	OPENAMP_create_endpoint(&rp_endpoint, name, dest, rpmsg_recv_callback,
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <new_service_cb+0x2c>)
 8000b36:	9300      	str	r3, [sp, #0]
 8000b38:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <new_service_cb+0x30>)
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	4807      	ldr	r0, [pc, #28]	; (8000b5c <new_service_cb+0x34>)
 8000b40:	f016 fc62 	bl	8017408 <OPENAMP_create_endpoint>
			service_destroy_cb);
	service_created = 1;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <new_service_cb+0x38>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	601a      	str	r2, [r3, #0]
}
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	08000b09 	.word	0x08000b09
 8000b58:	08000a91 	.word	0x08000a91
 8000b5c:	2400ac40 	.word	0x2400ac40
 8000b60:	2400ac3c 	.word	0x2400ac3c

08000b64 <parseRecievedMessages>:
#ifdef CORE_CM7
#include "GUI_Paint.h"
#endif

void parseRecievedMessages(uint8_t opCode)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
	switch (opCode)
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d108      	bne.n	8000b86 <parseRecievedMessages+0x22>
	{
#ifdef CORE_CM7
		case (1):
		{
			memcpy(receivedAnglesData, (uint32_t *)receivedDataPointer, sizeof(tANGLESMESSAGES));
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <parseRecievedMessages+0x2c>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a06      	ldr	r2, [pc, #24]	; (8000b94 <parseRecievedMessages+0x30>)
 8000b7a:	6812      	ldr	r2, [r2, #0]
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	221c      	movs	r2, #28
 8000b80:	4618      	mov	r0, r3
 8000b82:	f019 fe1d 	bl	801a7c0 <memcpy>
		default:
		{

		}
	}
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	2400ac34 	.word	0x2400ac34
 8000b94:	2400a3d8 	.word	0x2400a3d8

08000b98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b9c:	4b3f      	ldr	r3, [pc, #252]	; (8000c9c <SystemInit+0x104>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba2:	4a3e      	ldr	r2, [pc, #248]	; (8000c9c <SystemInit+0x104>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000bac:	4b3b      	ldr	r3, [pc, #236]	; (8000c9c <SystemInit+0x104>)
 8000bae:	691b      	ldr	r3, [r3, #16]
 8000bb0:	4a3a      	ldr	r2, [pc, #232]	; (8000c9c <SystemInit+0x104>)
 8000bb2:	f043 0310 	orr.w	r3, r3, #16
 8000bb6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bb8:	4b39      	ldr	r3, [pc, #228]	; (8000ca0 <SystemInit+0x108>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f003 030f 	and.w	r3, r3, #15
 8000bc0:	2b06      	cmp	r3, #6
 8000bc2:	d807      	bhi.n	8000bd4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bc4:	4b36      	ldr	r3, [pc, #216]	; (8000ca0 <SystemInit+0x108>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f023 030f 	bic.w	r3, r3, #15
 8000bcc:	4a34      	ldr	r2, [pc, #208]	; (8000ca0 <SystemInit+0x108>)
 8000bce:	f043 0307 	orr.w	r3, r3, #7
 8000bd2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bd4:	4b33      	ldr	r3, [pc, #204]	; (8000ca4 <SystemInit+0x10c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a32      	ldr	r2, [pc, #200]	; (8000ca4 <SystemInit+0x10c>)
 8000bda:	f043 0301 	orr.w	r3, r3, #1
 8000bde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000be0:	4b30      	ldr	r3, [pc, #192]	; (8000ca4 <SystemInit+0x10c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000be6:	4b2f      	ldr	r3, [pc, #188]	; (8000ca4 <SystemInit+0x10c>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	492e      	ldr	r1, [pc, #184]	; (8000ca4 <SystemInit+0x10c>)
 8000bec:	4b2e      	ldr	r3, [pc, #184]	; (8000ca8 <SystemInit+0x110>)
 8000bee:	4013      	ands	r3, r2
 8000bf0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bf2:	4b2b      	ldr	r3, [pc, #172]	; (8000ca0 <SystemInit+0x108>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f003 0308 	and.w	r3, r3, #8
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d007      	beq.n	8000c0e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bfe:	4b28      	ldr	r3, [pc, #160]	; (8000ca0 <SystemInit+0x108>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f023 030f 	bic.w	r3, r3, #15
 8000c06:	4a26      	ldr	r2, [pc, #152]	; (8000ca0 <SystemInit+0x108>)
 8000c08:	f043 0307 	orr.w	r3, r3, #7
 8000c0c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c0e:	4b25      	ldr	r3, [pc, #148]	; (8000ca4 <SystemInit+0x10c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c14:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <SystemInit+0x10c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c1a:	4b22      	ldr	r3, [pc, #136]	; (8000ca4 <SystemInit+0x10c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c20:	4b20      	ldr	r3, [pc, #128]	; (8000ca4 <SystemInit+0x10c>)
 8000c22:	4a22      	ldr	r2, [pc, #136]	; (8000cac <SystemInit+0x114>)
 8000c24:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c26:	4b1f      	ldr	r3, [pc, #124]	; (8000ca4 <SystemInit+0x10c>)
 8000c28:	4a21      	ldr	r2, [pc, #132]	; (8000cb0 <SystemInit+0x118>)
 8000c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <SystemInit+0x10c>)
 8000c2e:	4a21      	ldr	r2, [pc, #132]	; (8000cb4 <SystemInit+0x11c>)
 8000c30:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c32:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <SystemInit+0x10c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c38:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <SystemInit+0x10c>)
 8000c3a:	4a1e      	ldr	r2, [pc, #120]	; (8000cb4 <SystemInit+0x11c>)
 8000c3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c3e:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <SystemInit+0x10c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c44:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <SystemInit+0x10c>)
 8000c46:	4a1b      	ldr	r2, [pc, #108]	; (8000cb4 <SystemInit+0x11c>)
 8000c48:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c4a:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <SystemInit+0x10c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <SystemInit+0x10c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a13      	ldr	r2, [pc, #76]	; (8000ca4 <SystemInit+0x10c>)
 8000c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c5a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <SystemInit+0x10c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <SystemInit+0x120>)
 8000c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c66:	4a14      	ldr	r2, [pc, #80]	; (8000cb8 <SystemInit+0x120>)
 8000c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <SystemInit+0x124>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <SystemInit+0x128>)
 8000c74:	4013      	ands	r3, r2
 8000c76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000c7a:	d202      	bcs.n	8000c82 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <SystemInit+0x12c>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <SystemInit+0x130>)
 8000c84:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000c88:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000c8a:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <SystemInit+0x104>)
 8000c8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c90:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00
 8000ca0:	52002000 	.word	0x52002000
 8000ca4:	58024400 	.word	0x58024400
 8000ca8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cac:	02020200 	.word	0x02020200
 8000cb0:	01ff0000 	.word	0x01ff0000
 8000cb4:	01010280 	.word	0x01010280
 8000cb8:	580000c0 	.word	0x580000c0
 8000cbc:	5c001000 	.word	0x5c001000
 8000cc0:	ffff0000 	.word	0xffff0000
 8000cc4:	51008108 	.word	0x51008108
 8000cc8:	52004000 	.word	0x52004000

08000ccc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cd2:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <MX_DMA_Init+0x3c>)
 8000cd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cd8:	4a0b      	ldr	r2, [pc, #44]	; (8000d08 <MX_DMA_Init+0x3c>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <MX_DMA_Init+0x3c>)
 8000ce4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	200b      	movs	r0, #11
 8000cf6:	f001 fdc4 	bl	8002882 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000cfa:	200b      	movs	r0, #11
 8000cfc:	f001 fddb 	bl	80028b6 <HAL_NVIC_EnableIRQ>

}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	58024400 	.word	0x58024400

08000d0c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000d10:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <MX_ETH_Init+0x80>)
 8000d12:	4a1f      	ldr	r2, [pc, #124]	; (8000d90 <MX_ETH_Init+0x84>)
 8000d14:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000d16:	4b1f      	ldr	r3, [pc, #124]	; (8000d94 <MX_ETH_Init+0x88>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000d1c:	4b1d      	ldr	r3, [pc, #116]	; (8000d94 <MX_ETH_Init+0x88>)
 8000d1e:	2280      	movs	r2, #128	; 0x80
 8000d20:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000d22:	4b1c      	ldr	r3, [pc, #112]	; (8000d94 <MX_ETH_Init+0x88>)
 8000d24:	22e1      	movs	r2, #225	; 0xe1
 8000d26:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000d28:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <MX_ETH_Init+0x88>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000d2e:	4b19      	ldr	r3, [pc, #100]	; (8000d94 <MX_ETH_Init+0x88>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000d34:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <MX_ETH_Init+0x88>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000d3a:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <MX_ETH_Init+0x80>)
 8000d3c:	4a15      	ldr	r2, [pc, #84]	; (8000d94 <MX_ETH_Init+0x88>)
 8000d3e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <MX_ETH_Init+0x80>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <MX_ETH_Init+0x80>)
 8000d48:	4a13      	ldr	r2, [pc, #76]	; (8000d98 <MX_ETH_Init+0x8c>)
 8000d4a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <MX_ETH_Init+0x80>)
 8000d4e:	4a13      	ldr	r2, [pc, #76]	; (8000d9c <MX_ETH_Init+0x90>)
 8000d50:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <MX_ETH_Init+0x80>)
 8000d54:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000d58:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000d5a:	480c      	ldr	r0, [pc, #48]	; (8000d8c <MX_ETH_Init+0x80>)
 8000d5c:	f003 fd48 	bl	80047f0 <HAL_ETH_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000d66:	f000 fcec 	bl	8001742 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d6a:	2234      	movs	r2, #52	; 0x34
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	480c      	ldr	r0, [pc, #48]	; (8000da0 <MX_ETH_Init+0x94>)
 8000d70:	f019 fd4e 	bl	801a810 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d74:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <MX_ETH_Init+0x94>)
 8000d76:	2221      	movs	r2, #33	; 0x21
 8000d78:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <MX_ETH_Init+0x94>)
 8000d7c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d80:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d82:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <MX_ETH_Init+0x94>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	2400ab28 	.word	0x2400ab28
 8000d90:	40028000 	.word	0x40028000
 8000d94:	2400a3dc 	.word	0x2400a3dc
 8000d98:	2400a35c 	.word	0x2400a35c
 8000d9c:	2400a2fc 	.word	0x2400a2fc
 8000da0:	2400abb0 	.word	0x2400abb0

08000da4 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08e      	sub	sp, #56	; 0x38
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a59      	ldr	r2, [pc, #356]	; (8000f28 <HAL_ETH_MspInit+0x184>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	f040 80ab 	bne.w	8000f1e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000dc8:	4b58      	ldr	r3, [pc, #352]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000dca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dce:	4a57      	ldr	r2, [pc, #348]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000dd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dd4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000dd8:	4b54      	ldr	r3, [pc, #336]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000dda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000de2:	623b      	str	r3, [r7, #32]
 8000de4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000de6:	4b51      	ldr	r3, [pc, #324]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000de8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dec:	4a4f      	ldr	r2, [pc, #316]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000dee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000df2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000df6:	4b4d      	ldr	r3, [pc, #308]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000df8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e00:	61fb      	str	r3, [r7, #28]
 8000e02:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000e04:	4b49      	ldr	r3, [pc, #292]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e0a:	4a48      	ldr	r2, [pc, #288]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e10:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e14:	4b45      	ldr	r3, [pc, #276]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e1e:	61bb      	str	r3, [r7, #24]
 8000e20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e22:	4b42      	ldr	r3, [pc, #264]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e28:	4a40      	ldr	r2, [pc, #256]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e2a:	f043 0304 	orr.w	r3, r3, #4
 8000e2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e32:	4b3e      	ldr	r3, [pc, #248]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e38:	f003 0304 	and.w	r3, r3, #4
 8000e3c:	617b      	str	r3, [r7, #20]
 8000e3e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e40:	4b3a      	ldr	r3, [pc, #232]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e46:	4a39      	ldr	r2, [pc, #228]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e50:	4b36      	ldr	r3, [pc, #216]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5e:	4b33      	ldr	r3, [pc, #204]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e64:	4a31      	ldr	r2, [pc, #196]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e66:	f043 0302 	orr.w	r3, r3, #2
 8000e6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e6e:	4b2f      	ldr	r3, [pc, #188]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e74:	f003 0302 	and.w	r3, r3, #2
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e7c:	4b2b      	ldr	r3, [pc, #172]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e82:	4a2a      	ldr	r2, [pc, #168]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e8c:	4b27      	ldr	r3, [pc, #156]	; (8000f2c <HAL_ETH_MspInit+0x188>)
 8000e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e9a:	2332      	movs	r3, #50	; 0x32
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eaa:	230b      	movs	r3, #11
 8000eac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	481e      	ldr	r0, [pc, #120]	; (8000f30 <HAL_ETH_MspInit+0x18c>)
 8000eb6:	f004 f8b1 	bl	800501c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000eba:	2386      	movs	r3, #134	; 0x86
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eca:	230b      	movs	r3, #11
 8000ecc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4817      	ldr	r0, [pc, #92]	; (8000f34 <HAL_ETH_MspInit+0x190>)
 8000ed6:	f004 f8a1 	bl	800501c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000eda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eec:	230b      	movs	r3, #11
 8000eee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4810      	ldr	r0, [pc, #64]	; (8000f38 <HAL_ETH_MspInit+0x194>)
 8000ef8:	f004 f890 	bl	800501c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000efc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f0e:	230b      	movs	r3, #11
 8000f10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f16:	4619      	mov	r1, r3
 8000f18:	4808      	ldr	r0, [pc, #32]	; (8000f3c <HAL_ETH_MspInit+0x198>)
 8000f1a:	f004 f87f 	bl	800501c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000f1e:	bf00      	nop
 8000f20:	3738      	adds	r7, #56	; 0x38
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40028000 	.word	0x40028000
 8000f2c:	58024400 	.word	0x58024400
 8000f30:	58020800 	.word	0x58020800
 8000f34:	58020000 	.word	0x58020000
 8000f38:	58020400 	.word	0x58020400
 8000f3c:	58021800 	.word	0x58021800

08000f40 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08e      	sub	sp, #56	; 0x38
 8000f44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
 8000f54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f56:	4b93      	ldr	r3, [pc, #588]	; (80011a4 <MX_GPIO_Init+0x264>)
 8000f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f5c:	4a91      	ldr	r2, [pc, #580]	; (80011a4 <MX_GPIO_Init+0x264>)
 8000f5e:	f043 0304 	orr.w	r3, r3, #4
 8000f62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f66:	4b8f      	ldr	r3, [pc, #572]	; (80011a4 <MX_GPIO_Init+0x264>)
 8000f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f6c:	f003 0304 	and.w	r3, r3, #4
 8000f70:	623b      	str	r3, [r7, #32]
 8000f72:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f74:	4b8b      	ldr	r3, [pc, #556]	; (80011a4 <MX_GPIO_Init+0x264>)
 8000f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f7a:	4a8a      	ldr	r2, [pc, #552]	; (80011a4 <MX_GPIO_Init+0x264>)
 8000f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f84:	4b87      	ldr	r3, [pc, #540]	; (80011a4 <MX_GPIO_Init+0x264>)
 8000f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f8e:	61fb      	str	r3, [r7, #28]
 8000f90:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f92:	4b84      	ldr	r3, [pc, #528]	; (80011a4 <MX_GPIO_Init+0x264>)
 8000f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f98:	4a82      	ldr	r2, [pc, #520]	; (80011a4 <MX_GPIO_Init+0x264>)
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fa2:	4b80      	ldr	r3, [pc, #512]	; (80011a4 <MX_GPIO_Init+0x264>)
 8000fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	61bb      	str	r3, [r7, #24]
 8000fae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb0:	4b7c      	ldr	r3, [pc, #496]	; (80011a4 <MX_GPIO_Init+0x264>)
 8000fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb6:	4a7b      	ldr	r2, [pc, #492]	; (80011a4 <MX_GPIO_Init+0x264>)
 8000fb8:	f043 0302 	orr.w	r3, r3, #2
 8000fbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fc0:	4b78      	ldr	r3, [pc, #480]	; (80011a4 <MX_GPIO_Init+0x264>)
 8000fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fce:	4b75      	ldr	r3, [pc, #468]	; (80011a4 <MX_GPIO_Init+0x264>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd4:	4a73      	ldr	r2, [pc, #460]	; (80011a4 <MX_GPIO_Init+0x264>)
 8000fd6:	f043 0320 	orr.w	r3, r3, #32
 8000fda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fde:	4b71      	ldr	r3, [pc, #452]	; (80011a4 <MX_GPIO_Init+0x264>)
 8000fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe4:	f003 0320 	and.w	r3, r3, #32
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fec:	4b6d      	ldr	r3, [pc, #436]	; (80011a4 <MX_GPIO_Init+0x264>)
 8000fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff2:	4a6c      	ldr	r2, [pc, #432]	; (80011a4 <MX_GPIO_Init+0x264>)
 8000ff4:	f043 0310 	orr.w	r3, r3, #16
 8000ff8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ffc:	4b69      	ldr	r3, [pc, #420]	; (80011a4 <MX_GPIO_Init+0x264>)
 8000ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001002:	f003 0310 	and.w	r3, r3, #16
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800100a:	4b66      	ldr	r3, [pc, #408]	; (80011a4 <MX_GPIO_Init+0x264>)
 800100c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001010:	4a64      	ldr	r2, [pc, #400]	; (80011a4 <MX_GPIO_Init+0x264>)
 8001012:	f043 0308 	orr.w	r3, r3, #8
 8001016:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800101a:	4b62      	ldr	r3, [pc, #392]	; (80011a4 <MX_GPIO_Init+0x264>)
 800101c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001020:	f003 0308 	and.w	r3, r3, #8
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001028:	4b5e      	ldr	r3, [pc, #376]	; (80011a4 <MX_GPIO_Init+0x264>)
 800102a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800102e:	4a5d      	ldr	r2, [pc, #372]	; (80011a4 <MX_GPIO_Init+0x264>)
 8001030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001034:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001038:	4b5a      	ldr	r3, [pc, #360]	; (80011a4 <MX_GPIO_Init+0x264>)
 800103a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	f244 0101 	movw	r1, #16385	; 0x4001
 800104c:	4856      	ldr	r0, [pc, #344]	; (80011a8 <MX_GPIO_Init+0x268>)
 800104e:	f004 f9ad 	bl	80053ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_15, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001058:	4854      	ldr	r0, [pc, #336]	; (80011ac <MX_GPIO_Init+0x26c>)
 800105a:	f004 f9a7 	bl	80053ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|GPIO_NRF_CE_Pin|GPIO_NRF_CS_Pin, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8001064:	4852      	ldr	r0, [pc, #328]	; (80011b0 <MX_GPIO_Init+0x270>)
 8001066:	f004 f9a1 	bl	80053ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO___LCD_CS_Pin|GPIO___LCD_DC_Pin, GPIO_PIN_RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001070:	4850      	ldr	r0, [pc, #320]	; (80011b4 <MX_GPIO_Init+0x274>)
 8001072:	f004 f99b 	bl	80053ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800107c:	484e      	ldr	r0, [pc, #312]	; (80011b8 <MX_GPIO_Init+0x278>)
 800107e:	f004 f995 	bl	80053ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_SD_CS_GPIO_Port, GPIO_SD_CS_Pin, GPIO_PIN_SET);
 8001082:	2201      	movs	r2, #1
 8001084:	2110      	movs	r1, #16
 8001086:	484a      	ldr	r0, [pc, #296]	; (80011b0 <MX_GPIO_Init+0x270>)
 8001088:	f004 f990 	bl	80053ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	2102      	movs	r1, #2
 8001090:	484a      	ldr	r0, [pc, #296]	; (80011bc <MX_GPIO_Init+0x27c>)
 8001092:	f004 f98b 	bl	80053ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001096:	f244 0301 	movw	r3, #16385	; 0x4001
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109c:	2301      	movs	r3, #1
 800109e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ac:	4619      	mov	r1, r3
 80010ae:	483e      	ldr	r0, [pc, #248]	; (80011a8 <MX_GPIO_Init+0x268>)
 80010b0:	f003 ffb4 	bl	800501c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ba:	2301      	movs	r3, #1
 80010bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ca:	4619      	mov	r1, r3
 80010cc:	4837      	ldr	r0, [pc, #220]	; (80011ac <MX_GPIO_Init+0x26c>)
 80010ce:	f003 ffa5 	bl	800501c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|GPIO_NRF_CE_Pin|GPIO_NRF_CS_Pin;
 80010d2:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d8:	2301      	movs	r3, #1
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	2300      	movs	r3, #0
 80010e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e8:	4619      	mov	r1, r3
 80010ea:	4831      	ldr	r0, [pc, #196]	; (80011b0 <MX_GPIO_Init+0x270>)
 80010ec:	f003 ff96 	bl	800501c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = GPIO___LCD_CS_Pin|GPIO___LCD_DC_Pin;
 80010f0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f6:	2301      	movs	r3, #1
 80010f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001102:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001106:	4619      	mov	r1, r3
 8001108:	482a      	ldr	r0, [pc, #168]	; (80011b4 <MX_GPIO_Init+0x274>)
 800110a:	f003 ff87 	bl	800501c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800110e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001114:	2301      	movs	r3, #1
 8001116:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001120:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001124:	4619      	mov	r1, r3
 8001126:	4824      	ldr	r0, [pc, #144]	; (80011b8 <MX_GPIO_Init+0x278>)
 8001128:	f003 ff78 	bl	800501c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800112c:	2303      	movs	r3, #3
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001130:	4b23      	ldr	r3, [pc, #140]	; (80011c0 <MX_GPIO_Init+0x280>)
 8001132:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113c:	4619      	mov	r1, r3
 800113e:	481c      	ldr	r0, [pc, #112]	; (80011b0 <MX_GPIO_Init+0x270>)
 8001140:	f003 ff6c 	bl	800501c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_SD_CS_Pin;
 8001144:	2310      	movs	r3, #16
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001148:	2301      	movs	r3, #1
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800114c:	2301      	movs	r3, #1
 800114e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIO_SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001154:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001158:	4619      	mov	r1, r3
 800115a:	4815      	ldr	r0, [pc, #84]	; (80011b0 <MX_GPIO_Init+0x270>)
 800115c:	f003 ff5e 	bl	800501c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001160:	2302      	movs	r3, #2
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001164:	2301      	movs	r3, #1
 8001166:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001174:	4619      	mov	r1, r3
 8001176:	4811      	ldr	r0, [pc, #68]	; (80011bc <MX_GPIO_Init+0x27c>)
 8001178:	f003 ff50 	bl	800501c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800117c:	2200      	movs	r2, #0
 800117e:	2100      	movs	r1, #0
 8001180:	2006      	movs	r0, #6
 8001182:	f001 fb7e 	bl	8002882 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001186:	2006      	movs	r0, #6
 8001188:	f001 fb95 	bl	80028b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	2100      	movs	r1, #0
 8001190:	2007      	movs	r0, #7
 8001192:	f001 fb76 	bl	8002882 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001196:	2007      	movs	r0, #7
 8001198:	f001 fb8d 	bl	80028b6 <HAL_NVIC_EnableIRQ>

}
 800119c:	bf00      	nop
 800119e:	3738      	adds	r7, #56	; 0x38
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	58024400 	.word	0x58024400
 80011a8:	58020400 	.word	0x58020400
 80011ac:	58021400 	.word	0x58021400
 80011b0:	58020c00 	.word	0x58020c00
 80011b4:	58021800 	.word	0x58021800
 80011b8:	58020000 	.word	0x58020000
 80011bc:	58021000 	.word	0x58021000
 80011c0:	11310000 	.word	0x11310000

080011c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011c8:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <MX_I2C1_Init+0x74>)
 80011ca:	4a1c      	ldr	r2, [pc, #112]	; (800123c <MX_I2C1_Init+0x78>)
 80011cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301242;
 80011ce:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <MX_I2C1_Init+0x74>)
 80011d0:	4a1b      	ldr	r2, [pc, #108]	; (8001240 <MX_I2C1_Init+0x7c>)
 80011d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011d4:	4b18      	ldr	r3, [pc, #96]	; (8001238 <MX_I2C1_Init+0x74>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011da:	4b17      	ldr	r3, [pc, #92]	; (8001238 <MX_I2C1_Init+0x74>)
 80011dc:	2201      	movs	r2, #1
 80011de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e0:	4b15      	ldr	r3, [pc, #84]	; (8001238 <MX_I2C1_Init+0x74>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011e6:	4b14      	ldr	r3, [pc, #80]	; (8001238 <MX_I2C1_Init+0x74>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011ec:	4b12      	ldr	r3, [pc, #72]	; (8001238 <MX_I2C1_Init+0x74>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011f2:	4b11      	ldr	r3, [pc, #68]	; (8001238 <MX_I2C1_Init+0x74>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011f8:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <MX_I2C1_Init+0x74>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011fe:	480e      	ldr	r0, [pc, #56]	; (8001238 <MX_I2C1_Init+0x74>)
 8001200:	f005 feaa 	bl	8006f58 <HAL_I2C_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800120a:	f000 fa9a 	bl	8001742 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800120e:	2100      	movs	r1, #0
 8001210:	4809      	ldr	r0, [pc, #36]	; (8001238 <MX_I2C1_Init+0x74>)
 8001212:	f005 ff4b 	bl	80070ac <HAL_I2CEx_ConfigAnalogFilter>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800121c:	f000 fa91 	bl	8001742 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001220:	2100      	movs	r1, #0
 8001222:	4805      	ldr	r0, [pc, #20]	; (8001238 <MX_I2C1_Init+0x74>)
 8001224:	f005 ff8d 	bl	8007142 <HAL_I2CEx_ConfigDigitalFilter>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800122e:	f000 fa88 	bl	8001742 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	2400abe4 	.word	0x2400abe4
 800123c:	40005400 	.word	0x40005400
 8001240:	00301242 	.word	0x00301242

08001244 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b0b8      	sub	sp, #224	; 0xe0
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800125c:	f107 0310 	add.w	r3, r7, #16
 8001260:	22bc      	movs	r2, #188	; 0xbc
 8001262:	2100      	movs	r1, #0
 8001264:	4618      	mov	r0, r3
 8001266:	f019 fad3 	bl	801a810 <memset>
  if(i2cHandle->Instance==I2C1)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a29      	ldr	r2, [pc, #164]	; (8001314 <HAL_I2C_MspInit+0xd0>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d14a      	bne.n	800130a <HAL_I2C_MspInit+0xc6>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001274:	2308      	movs	r3, #8
 8001276:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001278:	2300      	movs	r3, #0
 800127a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800127e:	f107 0310 	add.w	r3, r7, #16
 8001282:	4618      	mov	r0, r3
 8001284:	f006 ffb0 	bl	80081e8 <HAL_RCCEx_PeriphCLKConfig>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800128e:	f000 fa58 	bl	8001742 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001292:	4b21      	ldr	r3, [pc, #132]	; (8001318 <HAL_I2C_MspInit+0xd4>)
 8001294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001298:	4a1f      	ldr	r2, [pc, #124]	; (8001318 <HAL_I2C_MspInit+0xd4>)
 800129a:	f043 0302 	orr.w	r3, r3, #2
 800129e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012a2:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <HAL_I2C_MspInit+0xd4>)
 80012a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA___ChassisMPU_Pin|I2C1_SCL___ChassisMPU_Pin;
 80012b0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80012b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012b8:	2312      	movs	r3, #18
 80012ba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012be:	2301      	movs	r3, #1
 80012c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012ca:	2304      	movs	r3, #4
 80012cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012d4:	4619      	mov	r1, r3
 80012d6:	4811      	ldr	r0, [pc, #68]	; (800131c <HAL_I2C_MspInit+0xd8>)
 80012d8:	f003 fea0 	bl	800501c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012dc:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <HAL_I2C_MspInit+0xd4>)
 80012de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012e2:	4a0d      	ldr	r2, [pc, #52]	; (8001318 <HAL_I2C_MspInit+0xd4>)
 80012e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80012ec:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <HAL_I2C_MspInit+0xd4>)
 80012ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 4, 0);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2104      	movs	r1, #4
 80012fe:	201f      	movs	r0, #31
 8001300:	f001 fabf 	bl	8002882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001304:	201f      	movs	r0, #31
 8001306:	f001 fad6 	bl	80028b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800130a:	bf00      	nop
 800130c:	37e0      	adds	r7, #224	; 0xe0
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40005400 	.word	0x40005400
 8001318:	58024400 	.word	0x58024400
 800131c:	58020400 	.word	0x58020400

08001320 <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af02      	add	r7, sp, #8
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001334:	d101      	bne.n	800133a <rpmsg_send+0x1a>
		return RPMSG_ERR_ADDR;
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <rpmsg_send+0x3c>)
 8001338:	e00c      	b.n	8001354 <rpmsg_send+0x34>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001342:	2301      	movs	r3, #1
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	68f8      	ldr	r0, [r7, #12]
 800134e:	f013 fc2f 	bl	8014bb0 <rpmsg_send_offchannel_raw>
 8001352:	4603      	mov	r3, r0
					 len, true);
}
 8001354:	4618      	mov	r0, r3
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	fffff829 	.word	0xfffff829

08001360 <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
 800136c:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2220      	movs	r2, #32
 8001372:	68b9      	ldr	r1, [r7, #8]
 8001374:	4618      	mov	r0, r3
 8001376:	f01a fba7 	bl	801bac8 <strncpy>
	ept->addr = src;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	687a      	ldr	r2, [r7, #4]
 800137e:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	683a      	ldr	r2, [r7, #0]
 8001384:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	69fa      	ldr	r2, [r7, #28]
 8001390:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001392:	bf00      	nop
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b088      	sub	sp, #32
 80013a0:	af02      	add	r7, sp, #8
/* USER CODE BEGIN Boot_Mode_Sequence_0 */

/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	MPU_Config();
 80013a2:	f000 f9a7 	bl	80016f4 <MPU_Config>
	CPU_CACHE_Enable();
 80013a6:	f000 f937 	bl	8001618 <CPU_CACHE_Enable>
//	timeout = 0xFFFF;
	while (__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET)
 80013aa:	e000      	b.n	80013ae <main+0x12>
	{
		asm("nop");
 80013ac:	bf00      	nop
	while (__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET)
 80013ae:	4b50      	ldr	r3, [pc, #320]	; (80014f0 <main+0x154>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1f8      	bne.n	80013ac <main+0x10>
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ba:	f001 f8b1 	bl	8002520 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013be:	f000 f8a3 	bl	8001508 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 80013c2:	4b4b      	ldr	r3, [pc, #300]	; (80014f0 <main+0x154>)
 80013c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c8:	4a49      	ldr	r2, [pc, #292]	; (80014f0 <main+0x154>)
 80013ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013d2:	4b47      	ldr	r3, [pc, #284]	; (80014f0 <main+0x154>)
 80013d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	68bb      	ldr	r3, [r7, #8]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 80013e0:	2000      	movs	r0, #0
 80013e2:	f005 fd5f 	bl	8006ea4 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 80013e6:	2100      	movs	r1, #0
 80013e8:	2000      	movs	r0, #0
 80013ea:	f005 fd75 	bl	8006ed8 <HAL_HSEM_Release>


/* USER CODE END Boot_Mode_Sequence_2 */

  /* USER CODE BEGIN SysInit */
	__HAL_RCC_D2SRAM1_CLK_ENABLE();
 80013ee:	4b40      	ldr	r3, [pc, #256]	; (80014f0 <main+0x154>)
 80013f0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80013f4:	4a3e      	ldr	r2, [pc, #248]	; (80014f0 <main+0x154>)
 80013f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80013fa:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80013fe:	4b3c      	ldr	r3, [pc, #240]	; (80014f0 <main+0x154>)
 8001400:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001404:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	687b      	ldr	r3, [r7, #4]
//  __HAL_RCC_AHBSRAM1_CLK_ENABLE();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800140c:	f7ff fd98 	bl	8000f40 <MX_GPIO_Init>
  MX_DMA_Init();
 8001410:	f7ff fc5c 	bl	8000ccc <MX_DMA_Init>
  MX_ETH_Init();
 8001414:	f7ff fc7a 	bl	8000d0c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001418:	f000 fef2 	bl	8002200 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800141c:	f7ff fed2 	bl	80011c4 <MX_I2C1_Init>
  MX_SPI3_Init();
 8001420:	f000 fa40 	bl	80018a4 <MX_SPI3_Init>
  MX_TIM1_Init();
 8001424:	f000 fda4 	bl	8001f70 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001428:	f000 fe9e 	bl	8002168 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 800142c:	f018 fe64 	bl	801a0f8 <MX_USB_HOST_Init>
  MX_SPI1_Init();
 8001430:	f000 f98c 	bl	800174c <MX_SPI1_Init>
  MX_FATFS_Init();
 8001434:	f00c f9c8 	bl	800d7c8 <MX_FATFS_Init>
  MX_SPI2_Init();
 8001438:	f000 f9de 	bl	80017f8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	MAILBOX_Init();
 800143c:	f015 fe34 	bl	80170a8 <MAILBOX_Init>

	uint8_t initRes = initSDCard();
 8001440:	f014 fdbe 	bl	8015fc0 <initSDCard>
 8001444:	4603      	mov	r3, r0
 8001446:	75fb      	strb	r3, [r7, #23]
	if (initRes == (uint8_t)FR_OK)
 8001448:	7dfb      	ldrb	r3, [r7, #23]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <main+0xb6>
	{
		createNewLogFile();
 800144e:	f014 fe01 	bl	8016054 <createNewLogFile>
	}

	/* Initialize the rpmsg endpoint to set default addresses to RPMSG_ADDR_ANY */
	rpmsg_init_ept(&rp_endpoint, RPMSG_CHAN_NAME, RPMSG_ADDR_ANY, RPMSG_ADDR_ANY,
 8001452:	2300      	movs	r3, #0
 8001454:	9301      	str	r3, [sp, #4]
 8001456:	2300      	movs	r3, #0
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	f04f 33ff 	mov.w	r3, #4294967295
 800145e:	f04f 32ff 	mov.w	r2, #4294967295
 8001462:	4924      	ldr	r1, [pc, #144]	; (80014f4 <main+0x158>)
 8001464:	4824      	ldr	r0, [pc, #144]	; (80014f8 <main+0x15c>)
 8001466:	f7ff ff7b 	bl	8001360 <rpmsg_init_ept>
			NULL, NULL);
	/* Initialize OpenAmp and libmetal libraries */
	if (MX_OPENAMP_Init(RPMSG_MASTER, new_service_cb)!= HAL_OK)
 800146a:	4924      	ldr	r1, [pc, #144]	; (80014fc <main+0x160>)
 800146c:	2000      	movs	r0, #0
 800146e:	f015 ff35 	bl	80172dc <MX_OPENAMP_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <main+0xe0>
	{
		Error_Handler();
 8001478:	f000 f963 	bl	8001742 <Error_Handler>
	/*
	 * The rpmsg service is initiate by the remote processor, on A7 new_service_cb
	 * callback is received on service creation. Wait for the callback
	 */
//	HAL_Delay(2000);
	OPENAMP_Wait_EndPointready(&rp_endpoint);
 800147c:	481e      	ldr	r0, [pc, #120]	; (80014f8 <main+0x15c>)
 800147e:	f015 ffed 	bl	801745c <OPENAMP_Wait_EndPointready>

	/* Send the massage to the remote CPU */
	int32_t status = OPENAMP_send(&rp_endpoint, &message, sizeof(message));
 8001482:	2204      	movs	r2, #4
 8001484:	491e      	ldr	r1, [pc, #120]	; (8001500 <main+0x164>)
 8001486:	481c      	ldr	r0, [pc, #112]	; (80014f8 <main+0x15c>)
 8001488:	f7ff ff4a 	bl	8001320 <rpmsg_send>
 800148c:	6138      	str	r0, [r7, #16]

	if (status < 0)
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	2b00      	cmp	r3, #0
 8001492:	da01      	bge.n	8001498 <main+0xfc>
	{
		Error_Handler();
 8001494:	f000 f955 	bl	8001742 <Error_Handler>

	//	ssd1306_TestAll();
//	ssd1306_Init();
//	ssd1306_TestBorder();

	uint8_t message = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	73fb      	strb	r3, [r7, #15]
	while (message < 100)
 800149c:	e011      	b.n	80014c2 <main+0x126>
	{
		/* Receive the massage from the remote CPU */
		message = receive_message();
 800149e:	f7ff fb19 	bl	8000ad4 <receive_message>
 80014a2:	4603      	mov	r3, r0
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	73fb      	strb	r3, [r7, #15]
		status = OPENAMP_send(&rp_endpoint, &message, sizeof(message));
 80014a8:	f107 030f 	add.w	r3, r7, #15
 80014ac:	2201      	movs	r2, #1
 80014ae:	4619      	mov	r1, r3
 80014b0:	4811      	ldr	r0, [pc, #68]	; (80014f8 <main+0x15c>)
 80014b2:	f7ff ff35 	bl	8001320 <rpmsg_send>
 80014b6:	6138      	str	r0, [r7, #16]
		if (status < 0)
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	da01      	bge.n	80014c2 <main+0x126>
		{
			Error_Handler();
 80014be:	f000 f940 	bl	8001742 <Error_Handler>
	while (message < 100)
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
 80014c4:	2b63      	cmp	r3, #99	; 0x63
 80014c6:	d9ea      	bls.n	800149e <main+0x102>
	}



	//	isPortrait = true;
	screenInit();
 80014c8:	f014 fe96 	bl	80161f8 <screenInit>
	screenClear();
 80014cc:	f014 ff70 	bl	80163b0 <screenClear>
	renderCompleteFrame = true;
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <main+0x168>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		message = receive_message();
 80014d6:	f7ff fafd 	bl	8000ad4 <receive_message>
 80014da:	4603      	mov	r3, r0
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	73fb      	strb	r3, [r7, #15]
		screenUpdate(true);
 80014e0:	2001      	movs	r0, #1
 80014e2:	f015 f987 	bl	80167f4 <screenUpdate>
		displayNextFrame();
 80014e6:	f016 f85d 	bl	80175a4 <displayNextFrame>
		message = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	73fb      	strb	r3, [r7, #15]
		message = receive_message();
 80014ee:	e7f2      	b.n	80014d6 <main+0x13a>
 80014f0:	58024400 	.word	0x58024400
 80014f4:	0801f3e0 	.word	0x0801f3e0
 80014f8:	2400ac40 	.word	0x2400ac40
 80014fc:	08000b29 	.word	0x08000b29
 8001500:	2400a3e4 	.word	0x2400a3e4
 8001504:	2400aa73 	.word	0x2400aa73

08001508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b09c      	sub	sp, #112	; 0x70
 800150c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800150e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001512:	224c      	movs	r2, #76	; 0x4c
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f019 f97a 	bl	801a810 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	2220      	movs	r2, #32
 8001520:	2100      	movs	r1, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f019 f974 	bl	801a810 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001528:	2004      	movs	r0, #4
 800152a:	f005 fe57 	bl	80071dc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800152e:	2300      	movs	r3, #0
 8001530:	603b      	str	r3, [r7, #0]
 8001532:	4b36      	ldr	r3, [pc, #216]	; (800160c <SystemClock_Config+0x104>)
 8001534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001536:	4a35      	ldr	r2, [pc, #212]	; (800160c <SystemClock_Config+0x104>)
 8001538:	f023 0301 	bic.w	r3, r3, #1
 800153c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800153e:	4b33      	ldr	r3, [pc, #204]	; (800160c <SystemClock_Config+0x104>)
 8001540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	603b      	str	r3, [r7, #0]
 8001548:	4b31      	ldr	r3, [pc, #196]	; (8001610 <SystemClock_Config+0x108>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001550:	4a2f      	ldr	r2, [pc, #188]	; (8001610 <SystemClock_Config+0x108>)
 8001552:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001556:	6193      	str	r3, [r2, #24]
 8001558:	4b2d      	ldr	r3, [pc, #180]	; (8001610 <SystemClock_Config+0x108>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001560:	603b      	str	r3, [r7, #0]
 8001562:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001564:	bf00      	nop
 8001566:	4b2a      	ldr	r3, [pc, #168]	; (8001610 <SystemClock_Config+0x108>)
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800156e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001572:	d1f8      	bne.n	8001566 <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001574:	4b27      	ldr	r3, [pc, #156]	; (8001614 <SystemClock_Config+0x10c>)
 8001576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001578:	f023 0303 	bic.w	r3, r3, #3
 800157c:	4a25      	ldr	r2, [pc, #148]	; (8001614 <SystemClock_Config+0x10c>)
 800157e:	f043 0302 	orr.w	r3, r3, #2
 8001582:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001584:	2301      	movs	r3, #1
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001588:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800158c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800158e:	2302      	movs	r3, #2
 8001590:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001592:	2302      	movs	r3, #2
 8001594:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001596:	2301      	movs	r3, #1
 8001598:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 800159a:	2312      	movs	r3, #18
 800159c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800159e:	2302      	movs	r3, #2
 80015a0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80015a2:	2302      	movs	r3, #2
 80015a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015a6:	2302      	movs	r3, #2
 80015a8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80015aa:	230c      	movs	r3, #12
 80015ac:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80015ae:	2302      	movs	r3, #2
 80015b0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 80015b2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80015b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015bc:	4618      	mov	r0, r3
 80015be:	f005 fe77 	bl	80072b0 <HAL_RCC_OscConfig>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80015c8:	f000 f8bb 	bl	8001742 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015cc:	233f      	movs	r3, #63	; 0x3f
 80015ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015d0:	2303      	movs	r3, #3
 80015d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80015d8:	2300      	movs	r3, #0
 80015da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80015e0:	2340      	movs	r3, #64	; 0x40
 80015e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80015e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80015ea:	2300      	movs	r3, #0
 80015ec:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	2101      	movs	r1, #1
 80015f2:	4618      	mov	r0, r3
 80015f4:	f006 fa6c 	bl	8007ad0 <HAL_RCC_ClockConfig>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 80015fe:	f000 f8a0 	bl	8001742 <Error_Handler>
  }
}
 8001602:	bf00      	nop
 8001604:	3770      	adds	r7, #112	; 0x70
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	58000400 	.word	0x58000400
 8001610:	58024800 	.word	0x58024800
 8001614:	58024400 	.word	0x58024400

08001618 <CPU_CACHE_Enable>:
 * @brief  CPU L1-Cache enable.
 * @param  None
 * @retval None
 */
static void CPU_CACHE_Enable(void)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800161e:	4b34      	ldr	r3, [pc, #208]	; (80016f0 <CPU_CACHE_Enable+0xd8>)
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d11b      	bne.n	8001662 <CPU_CACHE_Enable+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800162a:	f3bf 8f4f 	dsb	sy
}
 800162e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001630:	f3bf 8f6f 	isb	sy
}
 8001634:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001636:	4b2e      	ldr	r3, [pc, #184]	; (80016f0 <CPU_CACHE_Enable+0xd8>)
 8001638:	2200      	movs	r2, #0
 800163a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800163e:	f3bf 8f4f 	dsb	sy
}
 8001642:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001644:	f3bf 8f6f 	isb	sy
}
 8001648:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800164a:	4b29      	ldr	r3, [pc, #164]	; (80016f0 <CPU_CACHE_Enable+0xd8>)
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	4a28      	ldr	r2, [pc, #160]	; (80016f0 <CPU_CACHE_Enable+0xd8>)
 8001650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001654:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001656:	f3bf 8f4f 	dsb	sy
}
 800165a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800165c:	f3bf 8f6f 	isb	sy
}
 8001660:	e000      	b.n	8001664 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001662:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001664:	4b22      	ldr	r3, [pc, #136]	; (80016f0 <CPU_CACHE_Enable+0xd8>)
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d138      	bne.n	80016e2 <CPU_CACHE_Enable+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001670:	4b1f      	ldr	r3, [pc, #124]	; (80016f0 <CPU_CACHE_Enable+0xd8>)
 8001672:	2200      	movs	r2, #0
 8001674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001678:	f3bf 8f4f 	dsb	sy
}
 800167c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800167e:	4b1c      	ldr	r3, [pc, #112]	; (80016f0 <CPU_CACHE_Enable+0xd8>)
 8001680:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001684:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	0b5b      	lsrs	r3, r3, #13
 800168a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800168e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	08db      	lsrs	r3, r3, #3
 8001694:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001698:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	015a      	lsls	r2, r3, #5
 800169e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80016a2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80016a8:	4911      	ldr	r1, [pc, #68]	; (80016f0 <CPU_CACHE_Enable+0xd8>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	1e5a      	subs	r2, r3, #1
 80016b4:	607a      	str	r2, [r7, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1ef      	bne.n	800169a <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	1e5a      	subs	r2, r3, #1
 80016be:	60ba      	str	r2, [r7, #8]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1e5      	bne.n	8001690 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80016c4:	f3bf 8f4f 	dsb	sy
}
 80016c8:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <CPU_CACHE_Enable+0xd8>)
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	4a08      	ldr	r2, [pc, #32]	; (80016f0 <CPU_CACHE_Enable+0xd8>)
 80016d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80016d6:	f3bf 8f4f 	dsb	sy
}
 80016da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016dc:	f3bf 8f6f 	isb	sy
}
 80016e0:	e000      	b.n	80016e4 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80016e2:	bf00      	nop
	/* Enable I-Cache */
	SCB_EnableICache();

	/* Enable D-Cache */
	SCB_EnableDCache();
}
 80016e4:	bf00      	nop
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <MPU_Config>:
 *         The Region Size is 64KB.
 * @param  None
 * @retval None
 */
static void MPU_Config(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct;

	/* Disable the MPU */
	HAL_MPU_Disable();
 80016fa:	f001 f8f7 	bl	80028ec <HAL_MPU_Disable>

	/* Configure the MPU attributes as WT for SDRAM */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80016fe:	2301      	movs	r3, #1
 8001700:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.BaseAddress = D3_SRAM_BASE;
 8001702:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001706:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8001708:	230f      	movs	r3, #15
 800170a:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800170c:	2303      	movs	r3, #3
 800170e:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001710:	2300      	movs	r3, #0
 8001712:	73fb      	strb	r3, [r7, #15]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001714:	2300      	movs	r3, #0
 8001716:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001718:	2301      	movs	r3, #1
 800171a:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800171c:	2300      	movs	r3, #0
 800171e:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001720:	2300      	movs	r3, #0
 8001722:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.SubRegionDisable = 0x00;
 8001724:	2300      	movs	r3, #0
 8001726:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001728:	2300      	movs	r3, #0
 800172a:	733b      	strb	r3, [r7, #12]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800172c:	463b      	mov	r3, r7
 800172e:	4618      	mov	r0, r3
 8001730:	f001 f914 	bl	800295c <HAL_MPU_ConfigRegion>

	/* Enable the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001734:	2004      	movs	r0, #4
 8001736:	f001 f8f1 	bl	800291c <HAL_MPU_Enable>
}
 800173a:	bf00      	nop
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001746:	b672      	cpsid	i
}
 8001748:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800174a:	e7fe      	b.n	800174a <Error_Handler+0x8>

0800174c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001750:	4b27      	ldr	r3, [pc, #156]	; (80017f0 <MX_SPI1_Init+0xa4>)
 8001752:	4a28      	ldr	r2, [pc, #160]	; (80017f4 <MX_SPI1_Init+0xa8>)
 8001754:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001756:	4b26      	ldr	r3, [pc, #152]	; (80017f0 <MX_SPI1_Init+0xa4>)
 8001758:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800175c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800175e:	4b24      	ldr	r3, [pc, #144]	; (80017f0 <MX_SPI1_Init+0xa4>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001764:	4b22      	ldr	r3, [pc, #136]	; (80017f0 <MX_SPI1_Init+0xa4>)
 8001766:	2207      	movs	r2, #7
 8001768:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800176a:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <MX_SPI1_Init+0xa4>)
 800176c:	2200      	movs	r2, #0
 800176e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001770:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <MX_SPI1_Init+0xa4>)
 8001772:	2200      	movs	r2, #0
 8001774:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001776:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <MX_SPI1_Init+0xa4>)
 8001778:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800177c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800177e:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <MX_SPI1_Init+0xa4>)
 8001780:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001784:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001786:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <MX_SPI1_Init+0xa4>)
 8001788:	2200      	movs	r2, #0
 800178a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800178c:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <MX_SPI1_Init+0xa4>)
 800178e:	2200      	movs	r2, #0
 8001790:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001792:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <MX_SPI1_Init+0xa4>)
 8001794:	2200      	movs	r2, #0
 8001796:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001798:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <MX_SPI1_Init+0xa4>)
 800179a:	2200      	movs	r2, #0
 800179c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800179e:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <MX_SPI1_Init+0xa4>)
 80017a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017a4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017a6:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <MX_SPI1_Init+0xa4>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017ac:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <MX_SPI1_Init+0xa4>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017b2:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <MX_SPI1_Init+0xa4>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017b8:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <MX_SPI1_Init+0xa4>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017be:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <MX_SPI1_Init+0xa4>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017c4:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <MX_SPI1_Init+0xa4>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <MX_SPI1_Init+0xa4>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017d0:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <MX_SPI1_Init+0xa4>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <MX_SPI1_Init+0xa4>)
 80017d8:	2200      	movs	r2, #0
 80017da:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017dc:	4804      	ldr	r0, [pc, #16]	; (80017f0 <MX_SPI1_Init+0xa4>)
 80017de:	f008 f865 	bl	80098ac <HAL_SPI_Init>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80017e8:	f7ff ffab 	bl	8001742 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	2400adc4 	.word	0x2400adc4
 80017f4:	40013000 	.word	0x40013000

080017f8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80017fc:	4b27      	ldr	r3, [pc, #156]	; (800189c <MX_SPI2_Init+0xa4>)
 80017fe:	4a28      	ldr	r2, [pc, #160]	; (80018a0 <MX_SPI2_Init+0xa8>)
 8001800:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001802:	4b26      	ldr	r3, [pc, #152]	; (800189c <MX_SPI2_Init+0xa4>)
 8001804:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001808:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800180a:	4b24      	ldr	r3, [pc, #144]	; (800189c <MX_SPI2_Init+0xa4>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001810:	4b22      	ldr	r3, [pc, #136]	; (800189c <MX_SPI2_Init+0xa4>)
 8001812:	2207      	movs	r2, #7
 8001814:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001816:	4b21      	ldr	r3, [pc, #132]	; (800189c <MX_SPI2_Init+0xa4>)
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800181c:	4b1f      	ldr	r3, [pc, #124]	; (800189c <MX_SPI2_Init+0xa4>)
 800181e:	2200      	movs	r2, #0
 8001820:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001822:	4b1e      	ldr	r3, [pc, #120]	; (800189c <MX_SPI2_Init+0xa4>)
 8001824:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001828:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800182a:	4b1c      	ldr	r3, [pc, #112]	; (800189c <MX_SPI2_Init+0xa4>)
 800182c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001830:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001832:	4b1a      	ldr	r3, [pc, #104]	; (800189c <MX_SPI2_Init+0xa4>)
 8001834:	2200      	movs	r2, #0
 8001836:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001838:	4b18      	ldr	r3, [pc, #96]	; (800189c <MX_SPI2_Init+0xa4>)
 800183a:	2200      	movs	r2, #0
 800183c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800183e:	4b17      	ldr	r3, [pc, #92]	; (800189c <MX_SPI2_Init+0xa4>)
 8001840:	2200      	movs	r2, #0
 8001842:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001844:	4b15      	ldr	r3, [pc, #84]	; (800189c <MX_SPI2_Init+0xa4>)
 8001846:	2200      	movs	r2, #0
 8001848:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800184a:	4b14      	ldr	r3, [pc, #80]	; (800189c <MX_SPI2_Init+0xa4>)
 800184c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001850:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001852:	4b12      	ldr	r3, [pc, #72]	; (800189c <MX_SPI2_Init+0xa4>)
 8001854:	2200      	movs	r2, #0
 8001856:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001858:	4b10      	ldr	r3, [pc, #64]	; (800189c <MX_SPI2_Init+0xa4>)
 800185a:	2200      	movs	r2, #0
 800185c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800185e:	4b0f      	ldr	r3, [pc, #60]	; (800189c <MX_SPI2_Init+0xa4>)
 8001860:	2200      	movs	r2, #0
 8001862:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001864:	4b0d      	ldr	r3, [pc, #52]	; (800189c <MX_SPI2_Init+0xa4>)
 8001866:	2200      	movs	r2, #0
 8001868:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800186a:	4b0c      	ldr	r3, [pc, #48]	; (800189c <MX_SPI2_Init+0xa4>)
 800186c:	2200      	movs	r2, #0
 800186e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001870:	4b0a      	ldr	r3, [pc, #40]	; (800189c <MX_SPI2_Init+0xa4>)
 8001872:	2200      	movs	r2, #0
 8001874:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <MX_SPI2_Init+0xa4>)
 8001878:	2200      	movs	r2, #0
 800187a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800187c:	4b07      	ldr	r3, [pc, #28]	; (800189c <MX_SPI2_Init+0xa4>)
 800187e:	2200      	movs	r2, #0
 8001880:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <MX_SPI2_Init+0xa4>)
 8001884:	2200      	movs	r2, #0
 8001886:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001888:	4804      	ldr	r0, [pc, #16]	; (800189c <MX_SPI2_Init+0xa4>)
 800188a:	f008 f80f 	bl	80098ac <HAL_SPI_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001894:	f7ff ff55 	bl	8001742 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}
 800189c:	2400acb4 	.word	0x2400acb4
 80018a0:	40003800 	.word	0x40003800

080018a4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80018a8:	4b28      	ldr	r3, [pc, #160]	; (800194c <MX_SPI3_Init+0xa8>)
 80018aa:	4a29      	ldr	r2, [pc, #164]	; (8001950 <MX_SPI3_Init+0xac>)
 80018ac:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80018ae:	4b27      	ldr	r3, [pc, #156]	; (800194c <MX_SPI3_Init+0xa8>)
 80018b0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80018b4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 80018b6:	4b25      	ldr	r3, [pc, #148]	; (800194c <MX_SPI3_Init+0xa8>)
 80018b8:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80018bc:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80018be:	4b23      	ldr	r3, [pc, #140]	; (800194c <MX_SPI3_Init+0xa8>)
 80018c0:	2207      	movs	r2, #7
 80018c2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018c4:	4b21      	ldr	r3, [pc, #132]	; (800194c <MX_SPI3_Init+0xa8>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018ca:	4b20      	ldr	r3, [pc, #128]	; (800194c <MX_SPI3_Init+0xa8>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80018d0:	4b1e      	ldr	r3, [pc, #120]	; (800194c <MX_SPI3_Init+0xa8>)
 80018d2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80018d6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80018d8:	4b1c      	ldr	r3, [pc, #112]	; (800194c <MX_SPI3_Init+0xa8>)
 80018da:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80018de:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018e0:	4b1a      	ldr	r3, [pc, #104]	; (800194c <MX_SPI3_Init+0xa8>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80018e6:	4b19      	ldr	r3, [pc, #100]	; (800194c <MX_SPI3_Init+0xa8>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018ec:	4b17      	ldr	r3, [pc, #92]	; (800194c <MX_SPI3_Init+0xa8>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80018f2:	4b16      	ldr	r3, [pc, #88]	; (800194c <MX_SPI3_Init+0xa8>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018f8:	4b14      	ldr	r3, [pc, #80]	; (800194c <MX_SPI3_Init+0xa8>)
 80018fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018fe:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001900:	4b12      	ldr	r3, [pc, #72]	; (800194c <MX_SPI3_Init+0xa8>)
 8001902:	2200      	movs	r2, #0
 8001904:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001906:	4b11      	ldr	r3, [pc, #68]	; (800194c <MX_SPI3_Init+0xa8>)
 8001908:	2200      	movs	r2, #0
 800190a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800190c:	4b0f      	ldr	r3, [pc, #60]	; (800194c <MX_SPI3_Init+0xa8>)
 800190e:	2200      	movs	r2, #0
 8001910:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001912:	4b0e      	ldr	r3, [pc, #56]	; (800194c <MX_SPI3_Init+0xa8>)
 8001914:	2200      	movs	r2, #0
 8001916:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <MX_SPI3_Init+0xa8>)
 800191a:	2200      	movs	r2, #0
 800191c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800191e:	4b0b      	ldr	r3, [pc, #44]	; (800194c <MX_SPI3_Init+0xa8>)
 8001920:	2200      	movs	r2, #0
 8001922:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001924:	4b09      	ldr	r3, [pc, #36]	; (800194c <MX_SPI3_Init+0xa8>)
 8001926:	2200      	movs	r2, #0
 8001928:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800192a:	4b08      	ldr	r3, [pc, #32]	; (800194c <MX_SPI3_Init+0xa8>)
 800192c:	2200      	movs	r2, #0
 800192e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <MX_SPI3_Init+0xa8>)
 8001932:	2200      	movs	r2, #0
 8001934:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001936:	4805      	ldr	r0, [pc, #20]	; (800194c <MX_SPI3_Init+0xa8>)
 8001938:	f007 ffb8 	bl	80098ac <HAL_SPI_Init>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8001942:	f7ff fefe 	bl	8001742 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	2400ad3c 	.word	0x2400ad3c
 8001950:	40003c00 	.word	0x40003c00

08001954 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b0c0      	sub	sp, #256	; 0x100
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800196c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001970:	22bc      	movs	r2, #188	; 0xbc
 8001972:	2100      	movs	r1, #0
 8001974:	4618      	mov	r0, r3
 8001976:	f018 ff4b 	bl	801a810 <memset>
  if(spiHandle->Instance==SPI1)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4aa9      	ldr	r2, [pc, #676]	; (8001c24 <HAL_SPI_MspInit+0x2d0>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d16f      	bne.n	8001a64 <HAL_SPI_MspInit+0x110>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001988:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800198a:	2300      	movs	r3, #0
 800198c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001990:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001994:	4618      	mov	r0, r3
 8001996:	f006 fc27 	bl	80081e8 <HAL_RCCEx_PeriphCLKConfig>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 80019a0:	f7ff fecf 	bl	8001742 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019a4:	4ba0      	ldr	r3, [pc, #640]	; (8001c28 <HAL_SPI_MspInit+0x2d4>)
 80019a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019aa:	4a9f      	ldr	r2, [pc, #636]	; (8001c28 <HAL_SPI_MspInit+0x2d4>)
 80019ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80019b4:	4b9c      	ldr	r3, [pc, #624]	; (8001c28 <HAL_SPI_MspInit+0x2d4>)
 80019b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c2:	4b99      	ldr	r3, [pc, #612]	; (8001c28 <HAL_SPI_MspInit+0x2d4>)
 80019c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c8:	4a97      	ldr	r2, [pc, #604]	; (8001c28 <HAL_SPI_MspInit+0x2d4>)
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019d2:	4b95      	ldr	r3, [pc, #596]	; (8001c28 <HAL_SPI_MspInit+0x2d4>)
 80019d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80019de:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019e0:	4b91      	ldr	r3, [pc, #580]	; (8001c28 <HAL_SPI_MspInit+0x2d4>)
 80019e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e6:	4a90      	ldr	r2, [pc, #576]	; (8001c28 <HAL_SPI_MspInit+0x2d4>)
 80019e8:	f043 0308 	orr.w	r3, r3, #8
 80019ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019f0:	4b8d      	ldr	r3, [pc, #564]	; (8001c28 <HAL_SPI_MspInit+0x2d4>)
 80019f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_NRF_Pin|SPI1_MISO_NRF_Pin;
 80019fe:	2360      	movs	r3, #96	; 0x60
 8001a00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a04:	2302      	movs	r3, #2
 8001a06:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a10:	2300      	movs	r3, #0
 8001a12:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a16:	2305      	movs	r3, #5
 8001a18:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a20:	4619      	mov	r1, r3
 8001a22:	4882      	ldr	r0, [pc, #520]	; (8001c2c <HAL_SPI_MspInit+0x2d8>)
 8001a24:	f003 fafa 	bl	800501c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_NRF_Pin;
 8001a28:	2380      	movs	r3, #128	; 0x80
 8001a2a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a40:	2305      	movs	r3, #5
 8001a42:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(SPI1_MOSI_NRF_GPIO_Port, &GPIO_InitStruct);
 8001a46:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4878      	ldr	r0, [pc, #480]	; (8001c30 <HAL_SPI_MspInit+0x2dc>)
 8001a4e:	f003 fae5 	bl	800501c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2100      	movs	r1, #0
 8001a56:	2023      	movs	r0, #35	; 0x23
 8001a58:	f000 ff13 	bl	8002882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001a5c:	2023      	movs	r0, #35	; 0x23
 8001a5e:	f000 ff2a 	bl	80028b6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001a62:	e0d9      	b.n	8001c18 <HAL_SPI_MspInit+0x2c4>
  else if(spiHandle->Instance==SPI2)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a72      	ldr	r2, [pc, #456]	; (8001c34 <HAL_SPI_MspInit+0x2e0>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d167      	bne.n	8001b3e <HAL_SPI_MspInit+0x1ea>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001a6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a72:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f006 fbb2 	bl	80081e8 <HAL_RCCEx_PeriphCLKConfig>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_SPI_MspInit+0x13a>
      Error_Handler();
 8001a8a:	f7ff fe5a 	bl	8001742 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a8e:	4b66      	ldr	r3, [pc, #408]	; (8001c28 <HAL_SPI_MspInit+0x2d4>)
 8001a90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a94:	4a64      	ldr	r2, [pc, #400]	; (8001c28 <HAL_SPI_MspInit+0x2d4>)
 8001a96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a9a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a9e:	4b62      	ldr	r3, [pc, #392]	; (8001c28 <HAL_SPI_MspInit+0x2d4>)
 8001aa0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001aa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aa8:	623b      	str	r3, [r7, #32]
 8001aaa:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aac:	4b5e      	ldr	r3, [pc, #376]	; (8001c28 <HAL_SPI_MspInit+0x2d4>)
 8001aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ab2:	4a5d      	ldr	r2, [pc, #372]	; (8001c28 <HAL_SPI_MspInit+0x2d4>)
 8001ab4:	f043 0304 	orr.w	r3, r3, #4
 8001ab8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001abc:	4b5a      	ldr	r3, [pc, #360]	; (8001c28 <HAL_SPI_MspInit+0x2d4>)
 8001abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	61fb      	str	r3, [r7, #28]
 8001ac8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aca:	4b57      	ldr	r3, [pc, #348]	; (8001c28 <HAL_SPI_MspInit+0x2d4>)
 8001acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad0:	4a55      	ldr	r2, [pc, #340]	; (8001c28 <HAL_SPI_MspInit+0x2d4>)
 8001ad2:	f043 0308 	orr.w	r3, r3, #8
 8001ad6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ada:	4b53      	ldr	r3, [pc, #332]	; (8001c28 <HAL_SPI_MspInit+0x2d4>)
 8001adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae0:	f003 0308 	and.w	r3, r3, #8
 8001ae4:	61bb      	str	r3, [r7, #24]
 8001ae6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ae8:	230c      	movs	r3, #12
 8001aea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aee:	2302      	movs	r3, #2
 8001af0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afa:	2300      	movs	r3, #0
 8001afc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b00:	2305      	movs	r3, #5
 8001b02:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b06:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	484a      	ldr	r0, [pc, #296]	; (8001c38 <HAL_SPI_MspInit+0x2e4>)
 8001b0e:	f003 fa85 	bl	800501c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b12:	2308      	movs	r3, #8
 8001b14:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b24:	2300      	movs	r3, #0
 8001b26:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b2a:	2305      	movs	r3, #5
 8001b2c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b30:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b34:	4619      	mov	r1, r3
 8001b36:	483e      	ldr	r0, [pc, #248]	; (8001c30 <HAL_SPI_MspInit+0x2dc>)
 8001b38:	f003 fa70 	bl	800501c <HAL_GPIO_Init>
}
 8001b3c:	e06c      	b.n	8001c18 <HAL_SPI_MspInit+0x2c4>
  else if(spiHandle->Instance==SPI3)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a3e      	ldr	r2, [pc, #248]	; (8001c3c <HAL_SPI_MspInit+0x2e8>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d167      	bne.n	8001c18 <HAL_SPI_MspInit+0x2c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b4c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f006 fb45 	bl	80081e8 <HAL_RCCEx_PeriphCLKConfig>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <HAL_SPI_MspInit+0x214>
      Error_Handler();
 8001b64:	f7ff fded 	bl	8001742 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b68:	4b2f      	ldr	r3, [pc, #188]	; (8001c28 <HAL_SPI_MspInit+0x2d4>)
 8001b6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b6e:	4a2e      	ldr	r2, [pc, #184]	; (8001c28 <HAL_SPI_MspInit+0x2d4>)
 8001b70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b74:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b78:	4b2b      	ldr	r3, [pc, #172]	; (8001c28 <HAL_SPI_MspInit+0x2d4>)
 8001b7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b86:	4b28      	ldr	r3, [pc, #160]	; (8001c28 <HAL_SPI_MspInit+0x2d4>)
 8001b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b8c:	4a26      	ldr	r2, [pc, #152]	; (8001c28 <HAL_SPI_MspInit+0x2d4>)
 8001b8e:	f043 0302 	orr.w	r3, r3, #2
 8001b92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b96:	4b24      	ldr	r3, [pc, #144]	; (8001c28 <HAL_SPI_MspInit+0x2d4>)
 8001b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba4:	4b20      	ldr	r3, [pc, #128]	; (8001c28 <HAL_SPI_MspInit+0x2d4>)
 8001ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001baa:	4a1f      	ldr	r2, [pc, #124]	; (8001c28 <HAL_SPI_MspInit+0x2d4>)
 8001bac:	f043 0304 	orr.w	r3, r3, #4
 8001bb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bb4:	4b1c      	ldr	r3, [pc, #112]	; (8001c28 <HAL_SPI_MspInit+0x2d4>)
 8001bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bba:	f003 0304 	and.w	r3, r3, #4
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI3_MOSI___LCD_Pin;
 8001bc2:	2304      	movs	r3, #4
 8001bc4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001bda:	2307      	movs	r3, #7
 8001bdc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(SPI3_MOSI___LCD_GPIO_Port, &GPIO_InitStruct);
 8001be0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001be4:	4619      	mov	r1, r3
 8001be6:	4816      	ldr	r0, [pc, #88]	; (8001c40 <HAL_SPI_MspInit+0x2ec>)
 8001be8:	f003 fa18 	bl	800501c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI3_SCK___LCD_Pin;
 8001bec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bf0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c00:	2300      	movs	r3, #0
 8001c02:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c06:	2306      	movs	r3, #6
 8001c08:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(SPI3_SCK___LCD_GPIO_Port, &GPIO_InitStruct);
 8001c0c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001c10:	4619      	mov	r1, r3
 8001c12:	4809      	ldr	r0, [pc, #36]	; (8001c38 <HAL_SPI_MspInit+0x2e4>)
 8001c14:	f003 fa02 	bl	800501c <HAL_GPIO_Init>
}
 8001c18:	bf00      	nop
 8001c1a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40013000 	.word	0x40013000
 8001c28:	58024400 	.word	0x58024400
 8001c2c:	58020000 	.word	0x58020000
 8001c30:	58020c00 	.word	0x58020c00
 8001c34:	40003800 	.word	0x40003800
 8001c38:	58020800 	.word	0x58020800
 8001c3c:	40003c00 	.word	0x40003c00
 8001c40:	58020400 	.word	0x58020400

08001c44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4a:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <HAL_MspInit+0x5c>)
 8001c4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c50:	4a13      	ldr	r2, [pc, #76]	; (8001ca0 <HAL_MspInit+0x5c>)
 8001c52:	f043 0302 	orr.w	r3, r3, #2
 8001c56:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c5a:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <HAL_MspInit+0x5c>)
 8001c5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	607b      	str	r3, [r7, #4]
 8001c66:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* CM4_SEV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CM4_SEV_IRQn, 4, 0);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2104      	movs	r1, #4
 8001c6c:	2041      	movs	r0, #65	; 0x41
 8001c6e:	f000 fe08 	bl	8002882 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CM4_SEV_IRQn);
 8001c72:	2041      	movs	r0, #65	; 0x41
 8001c74:	f000 fe1f 	bl	80028b6 <HAL_NVIC_EnableIRQ>
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 4, 0);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2104      	movs	r1, #4
 8001c7c:	207d      	movs	r0, #125	; 0x7d
 8001c7e:	f000 fe00 	bl	8002882 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 8001c82:	207d      	movs	r0, #125	; 0x7d
 8001c84:	f000 fe17 	bl	80028b6 <HAL_NVIC_EnableIRQ>
  /* HOLD_CORE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HOLD_CORE_IRQn, 4, 0);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	2104      	movs	r1, #4
 8001c8c:	2094      	movs	r0, #148	; 0x94
 8001c8e:	f000 fdf8 	bl	8002882 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HOLD_CORE_IRQn);
 8001c92:	2094      	movs	r0, #148	; 0x94
 8001c94:	f000 fe0f 	bl	80028b6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c98:	bf00      	nop
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	58024400 	.word	0x58024400

08001ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ca8:	e7fe      	b.n	8001ca8 <NMI_Handler+0x4>

08001caa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cae:	e7fe      	b.n	8001cae <HardFault_Handler+0x4>

08001cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cb4:	e7fe      	b.n	8001cb4 <MemManage_Handler+0x4>

08001cb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cba:	e7fe      	b.n	8001cba <BusFault_Handler+0x4>

08001cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <UsageFault_Handler+0x4>

08001cc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cf0:	f000 fc88 	bl	8002604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cf4:	bf00      	nop
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	f003 fb6e 	bl	80053de <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001d0a:	2002      	movs	r0, #2
 8001d0c:	f003 fb67 	bl	80053de <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001d10:	bf00      	nop
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001d18:	4802      	ldr	r0, [pc, #8]	; (8001d24 <DMA1_Stream0_IRQHandler+0x10>)
 8001d1a:	f001 fc03 	bl	8003524 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	2400af2c 	.word	0x2400af2c

08001d28 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001d2c:	4802      	ldr	r0, [pc, #8]	; (8001d38 <I2C1_EV_IRQHandler+0x10>)
 8001d2e:	f005 f9a3 	bl	8007078 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	2400abe4 	.word	0x2400abe4

08001d3c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001d40:	4802      	ldr	r0, [pc, #8]	; (8001d4c <SPI1_IRQHandler+0x10>)
 8001d42:	f008 fb93 	bl	800a46c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	2400adc4 	.word	0x2400adc4

08001d50 <CM4_SEV_IRQHandler>:

/**
  * @brief This function handles CM4 send event interrupt for CM7.
  */
void CM4_SEV_IRQHandler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0

  /* USER CODE END CM4_SEV_IRQn 0 */
  /* USER CODE BEGIN CM4_SEV_IRQn 1 */

  /* USER CODE END CM4_SEV_IRQn 1 */
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
	...

08001d60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001d64:	4802      	ldr	r0, [pc, #8]	; (8001d70 <OTG_FS_IRQHandler+0x10>)
 8001d66:	f003 fdbf 	bl	80058e8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	24018124 	.word	0x24018124

08001d74 <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001d78:	f005 f8d4 	bl	8006f24 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 8001d7c:	bf00      	nop
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <HOLD_CORE_IRQHandler>:

/**
  * @brief This function handles Hold core interrupt.
  */
void HOLD_CORE_IRQHandler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0

  /* USER CODE END HOLD_CORE_IRQn 0 */
  /* USER CODE BEGIN HOLD_CORE_IRQn 1 */

  /* USER CODE END HOLD_CORE_IRQn 1 */
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0)
 8001d9a:	88fb      	ldrh	r3, [r7, #6]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d109      	bne.n	8001db4 <HAL_GPIO_EXTI_Callback+0x24>
	{
		A = HAL_GPIO_ReadPin(GPIOD, GPIO_Pin);
 8001da0:	88fb      	ldrh	r3, [r7, #6]
 8001da2:	4619      	mov	r1, r3
 8001da4:	480c      	ldr	r0, [pc, #48]	; (8001dd8 <HAL_GPIO_EXTI_Callback+0x48>)
 8001da6:	f003 fae9 	bl	800537c <HAL_GPIO_ReadPin>
 8001daa:	4603      	mov	r3, r0
 8001dac:	461a      	mov	r2, r3
 8001dae:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_GPIO_EXTI_Callback+0x4c>)
 8001db0:	701a      	strb	r2, [r3, #0]
 8001db2:	e00b      	b.n	8001dcc <HAL_GPIO_EXTI_Callback+0x3c>
	}
	else if (GPIO_Pin == GPIO_PIN_1)
 8001db4:	88fb      	ldrh	r3, [r7, #6]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d108      	bne.n	8001dcc <HAL_GPIO_EXTI_Callback+0x3c>
	{
		B = HAL_GPIO_ReadPin(GPIOD, GPIO_Pin);
 8001dba:	88fb      	ldrh	r3, [r7, #6]
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4806      	ldr	r0, [pc, #24]	; (8001dd8 <HAL_GPIO_EXTI_Callback+0x48>)
 8001dc0:	f003 fadc 	bl	800537c <HAL_GPIO_ReadPin>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <HAL_GPIO_EXTI_Callback+0x50>)
 8001dca:	701a      	strb	r2, [r3, #0]
	}
	int a = 1;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	60fb      	str	r3, [r7, #12]
}
 8001dd0:	bf00      	nop
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	58020c00 	.word	0x58020c00
 8001ddc:	2400ae4c 	.word	0x2400ae4c
 8001de0:	2400ae4d 	.word	0x2400ae4d

08001de4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
	return 1;
 8001de8:	2301      	movs	r3, #1
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <_kill>:

int _kill(int pid, int sig)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001dfe:	f018 fc93 	bl	801a728 <__errno>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2216      	movs	r2, #22
 8001e06:	601a      	str	r2, [r3, #0]
	return -1;
 8001e08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <_exit>:

void _exit (int status)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7ff ffe7 	bl	8001df4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e26:	e7fe      	b.n	8001e26 <_exit+0x12>

08001e28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	e00a      	b.n	8001e50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e3a:	f3af 8000 	nop.w
 8001e3e:	4601      	mov	r1, r0
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	1c5a      	adds	r2, r3, #1
 8001e44:	60ba      	str	r2, [r7, #8]
 8001e46:	b2ca      	uxtb	r2, r1
 8001e48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	617b      	str	r3, [r7, #20]
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	dbf0      	blt.n	8001e3a <_read+0x12>
	}

return len;
 8001e58:	687b      	ldr	r3, [r7, #4]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b086      	sub	sp, #24
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
 8001e72:	e009      	b.n	8001e88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	1c5a      	adds	r2, r3, #1
 8001e78:	60ba      	str	r2, [r7, #8]
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	3301      	adds	r3, #1
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	dbf1      	blt.n	8001e74 <_write+0x12>
	}
	return len;
 8001e90:	687b      	ldr	r3, [r7, #4]
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <_close>:

int _close(int file)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
	return -1;
 8001ea2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
 8001eba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ec2:	605a      	str	r2, [r3, #4]
	return 0;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <_isatty>:

int _isatty(int file)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
	return 1;
 8001eda:	2301      	movs	r3, #1
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
	return 0;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
	...

08001f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f0c:	4a14      	ldr	r2, [pc, #80]	; (8001f60 <_sbrk+0x5c>)
 8001f0e:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <_sbrk+0x60>)
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f18:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <_sbrk+0x64>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d102      	bne.n	8001f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f20:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <_sbrk+0x64>)
 8001f22:	4a12      	ldr	r2, [pc, #72]	; (8001f6c <_sbrk+0x68>)
 8001f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f26:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <_sbrk+0x64>)
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d207      	bcs.n	8001f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f34:	f018 fbf8 	bl	801a728 <__errno>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	220c      	movs	r2, #12
 8001f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f42:	e009      	b.n	8001f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f44:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <_sbrk+0x64>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f4a:	4b07      	ldr	r3, [pc, #28]	; (8001f68 <_sbrk+0x64>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4413      	add	r3, r2
 8001f52:	4a05      	ldr	r2, [pc, #20]	; (8001f68 <_sbrk+0x64>)
 8001f54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f56:	68fb      	ldr	r3, [r7, #12]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	24040000 	.word	0x24040000
 8001f64:	00000400 	.word	0x00000400
 8001f68:	2400a3e8 	.word	0x2400a3e8
 8001f6c:	24018438 	.word	0x24018438

08001f70 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b096      	sub	sp, #88	; 0x58
 8001f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f76:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]
 8001f80:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	605a      	str	r2, [r3, #4]
 8001f8c:	609a      	str	r2, [r3, #8]
 8001f8e:	60da      	str	r2, [r3, #12]
 8001f90:	611a      	str	r2, [r3, #16]
 8001f92:	615a      	str	r2, [r3, #20]
 8001f94:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f96:	1d3b      	adds	r3, r7, #4
 8001f98:	222c      	movs	r2, #44	; 0x2c
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f018 fc37 	bl	801a810 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fa2:	4b40      	ldr	r3, [pc, #256]	; (80020a4 <MX_TIM1_Init+0x134>)
 8001fa4:	4a40      	ldr	r2, [pc, #256]	; (80020a8 <MX_TIM1_Init+0x138>)
 8001fa6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75;
 8001fa8:	4b3e      	ldr	r3, [pc, #248]	; (80020a4 <MX_TIM1_Init+0x134>)
 8001faa:	224b      	movs	r2, #75	; 0x4b
 8001fac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fae:	4b3d      	ldr	r3, [pc, #244]	; (80020a4 <MX_TIM1_Init+0x134>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8001fb4:	4b3b      	ldr	r3, [pc, #236]	; (80020a4 <MX_TIM1_Init+0x134>)
 8001fb6:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001fba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fbc:	4b39      	ldr	r3, [pc, #228]	; (80020a4 <MX_TIM1_Init+0x134>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fc2:	4b38      	ldr	r3, [pc, #224]	; (80020a4 <MX_TIM1_Init+0x134>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fc8:	4b36      	ldr	r3, [pc, #216]	; (80020a4 <MX_TIM1_Init+0x134>)
 8001fca:	2280      	movs	r2, #128	; 0x80
 8001fcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001fce:	4835      	ldr	r0, [pc, #212]	; (80020a4 <MX_TIM1_Init+0x134>)
 8001fd0:	f008 fd57 	bl	800aa82 <HAL_TIM_PWM_Init>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001fda:	f7ff fbb2 	bl	8001742 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fee:	4619      	mov	r1, r3
 8001ff0:	482c      	ldr	r0, [pc, #176]	; (80020a4 <MX_TIM1_Init+0x134>)
 8001ff2:	f009 fb43 	bl	800b67c <HAL_TIMEx_MasterConfigSynchronization>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001ffc:	f7ff fba1 	bl	8001742 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002000:	2360      	movs	r3, #96	; 0x60
 8002002:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000;
 8002004:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002008:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800200a:	2300      	movs	r3, #0
 800200c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800200e:	2300      	movs	r3, #0
 8002010:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002012:	2300      	movs	r3, #0
 8002014:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002016:	2300      	movs	r3, #0
 8002018:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800201a:	2300      	movs	r3, #0
 800201c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800201e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002022:	2200      	movs	r2, #0
 8002024:	4619      	mov	r1, r3
 8002026:	481f      	ldr	r0, [pc, #124]	; (80020a4 <MX_TIM1_Init+0x134>)
 8002028:	f008 fe8a 	bl	800ad40 <HAL_TIM_PWM_ConfigChannel>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8002032:	f7ff fb86 	bl	8001742 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8002036:	2300      	movs	r3, #0
 8002038:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800203a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800203e:	2204      	movs	r2, #4
 8002040:	4619      	mov	r1, r3
 8002042:	4818      	ldr	r0, [pc, #96]	; (80020a4 <MX_TIM1_Init+0x134>)
 8002044:	f008 fe7c 	bl	800ad40 <HAL_TIM_PWM_ConfigChannel>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 800204e:	f7ff fb78 	bl	8001742 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002052:	2300      	movs	r3, #0
 8002054:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002056:	2300      	movs	r3, #0
 8002058:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002066:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800206a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002070:	2300      	movs	r3, #0
 8002072:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002074:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800207a:	2300      	movs	r3, #0
 800207c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800207e:	2300      	movs	r3, #0
 8002080:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002082:	1d3b      	adds	r3, r7, #4
 8002084:	4619      	mov	r1, r3
 8002086:	4807      	ldr	r0, [pc, #28]	; (80020a4 <MX_TIM1_Init+0x134>)
 8002088:	f009 fb80 	bl	800b78c <HAL_TIMEx_ConfigBreakDeadTime>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8002092:	f7ff fb56 	bl	8001742 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002096:	4803      	ldr	r0, [pc, #12]	; (80020a4 <MX_TIM1_Init+0x134>)
 8002098:	f000 f82a 	bl	80020f0 <HAL_TIM_MspPostInit>

}
 800209c:	bf00      	nop
 800209e:	3758      	adds	r7, #88	; 0x58
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	2400ae50 	.word	0x2400ae50
 80020a8:	40010000 	.word	0x40010000

080020ac <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a0b      	ldr	r2, [pc, #44]	; (80020e8 <HAL_TIM_PWM_MspInit+0x3c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d10e      	bne.n	80020dc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020be:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <HAL_TIM_PWM_MspInit+0x40>)
 80020c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020c4:	4a09      	ldr	r2, [pc, #36]	; (80020ec <HAL_TIM_PWM_MspInit+0x40>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80020ce:	4b07      	ldr	r3, [pc, #28]	; (80020ec <HAL_TIM_PWM_MspInit+0x40>)
 80020d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80020dc:	bf00      	nop
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	40010000 	.word	0x40010000
 80020ec:	58024400 	.word	0x58024400

080020f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b088      	sub	sp, #32
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	f107 030c 	add.w	r3, r7, #12
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a13      	ldr	r2, [pc, #76]	; (800215c <HAL_TIM_MspPostInit+0x6c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d11f      	bne.n	8002152 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002112:	4b13      	ldr	r3, [pc, #76]	; (8002160 <HAL_TIM_MspPostInit+0x70>)
 8002114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002118:	4a11      	ldr	r2, [pc, #68]	; (8002160 <HAL_TIM_MspPostInit+0x70>)
 800211a:	f043 0310 	orr.w	r3, r3, #16
 800211e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002122:	4b0f      	ldr	r3, [pc, #60]	; (8002160 <HAL_TIM_MspPostInit+0x70>)
 8002124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002128:	f003 0310 	and.w	r3, r3, #16
 800212c:	60bb      	str	r3, [r7, #8]
 800212e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TIM1_CH1___LCD_Brightness_Pin|TIM1_CH2___LIDAR_motor_ctrl_Pin;
 8002130:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002134:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002136:	2302      	movs	r3, #2
 8002138:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213e:	2300      	movs	r3, #0
 8002140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002142:	2301      	movs	r3, #1
 8002144:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002146:	f107 030c 	add.w	r3, r7, #12
 800214a:	4619      	mov	r1, r3
 800214c:	4805      	ldr	r0, [pc, #20]	; (8002164 <HAL_TIM_MspPostInit+0x74>)
 800214e:	f002 ff65 	bl	800501c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002152:	bf00      	nop
 8002154:	3720      	adds	r7, #32
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40010000 	.word	0x40010000
 8002160:	58024400 	.word	0x58024400
 8002164:	58021000 	.word	0x58021000

08002168 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800216c:	4b22      	ldr	r3, [pc, #136]	; (80021f8 <MX_USART1_UART_Init+0x90>)
 800216e:	4a23      	ldr	r2, [pc, #140]	; (80021fc <MX_USART1_UART_Init+0x94>)
 8002170:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002172:	4b21      	ldr	r3, [pc, #132]	; (80021f8 <MX_USART1_UART_Init+0x90>)
 8002174:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002178:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800217a:	4b1f      	ldr	r3, [pc, #124]	; (80021f8 <MX_USART1_UART_Init+0x90>)
 800217c:	2200      	movs	r2, #0
 800217e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002180:	4b1d      	ldr	r3, [pc, #116]	; (80021f8 <MX_USART1_UART_Init+0x90>)
 8002182:	2200      	movs	r2, #0
 8002184:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002186:	4b1c      	ldr	r3, [pc, #112]	; (80021f8 <MX_USART1_UART_Init+0x90>)
 8002188:	2200      	movs	r2, #0
 800218a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800218c:	4b1a      	ldr	r3, [pc, #104]	; (80021f8 <MX_USART1_UART_Init+0x90>)
 800218e:	220c      	movs	r2, #12
 8002190:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002192:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <MX_USART1_UART_Init+0x90>)
 8002194:	2200      	movs	r2, #0
 8002196:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002198:	4b17      	ldr	r3, [pc, #92]	; (80021f8 <MX_USART1_UART_Init+0x90>)
 800219a:	2200      	movs	r2, #0
 800219c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800219e:	4b16      	ldr	r3, [pc, #88]	; (80021f8 <MX_USART1_UART_Init+0x90>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021a4:	4b14      	ldr	r3, [pc, #80]	; (80021f8 <MX_USART1_UART_Init+0x90>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021aa:	4b13      	ldr	r3, [pc, #76]	; (80021f8 <MX_USART1_UART_Init+0x90>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021b0:	4811      	ldr	r0, [pc, #68]	; (80021f8 <MX_USART1_UART_Init+0x90>)
 80021b2:	f009 fb69 	bl	800b888 <HAL_UART_Init>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80021bc:	f7ff fac1 	bl	8001742 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021c0:	2100      	movs	r1, #0
 80021c2:	480d      	ldr	r0, [pc, #52]	; (80021f8 <MX_USART1_UART_Init+0x90>)
 80021c4:	f00a fab6 	bl	800c734 <HAL_UARTEx_SetTxFifoThreshold>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80021ce:	f7ff fab8 	bl	8001742 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021d2:	2100      	movs	r1, #0
 80021d4:	4808      	ldr	r0, [pc, #32]	; (80021f8 <MX_USART1_UART_Init+0x90>)
 80021d6:	f00a faeb 	bl	800c7b0 <HAL_UARTEx_SetRxFifoThreshold>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80021e0:	f7ff faaf 	bl	8001742 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80021e4:	4804      	ldr	r0, [pc, #16]	; (80021f8 <MX_USART1_UART_Init+0x90>)
 80021e6:	f00a fa6c 	bl	800c6c2 <HAL_UARTEx_DisableFifoMode>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80021f0:	f7ff faa7 	bl	8001742 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021f4:	bf00      	nop
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	2400afa4 	.word	0x2400afa4
 80021fc:	40011000 	.word	0x40011000

08002200 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002204:	4b22      	ldr	r3, [pc, #136]	; (8002290 <MX_USART3_UART_Init+0x90>)
 8002206:	4a23      	ldr	r2, [pc, #140]	; (8002294 <MX_USART3_UART_Init+0x94>)
 8002208:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800220a:	4b21      	ldr	r3, [pc, #132]	; (8002290 <MX_USART3_UART_Init+0x90>)
 800220c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002210:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002212:	4b1f      	ldr	r3, [pc, #124]	; (8002290 <MX_USART3_UART_Init+0x90>)
 8002214:	2200      	movs	r2, #0
 8002216:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002218:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <MX_USART3_UART_Init+0x90>)
 800221a:	2200      	movs	r2, #0
 800221c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800221e:	4b1c      	ldr	r3, [pc, #112]	; (8002290 <MX_USART3_UART_Init+0x90>)
 8002220:	2200      	movs	r2, #0
 8002222:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002224:	4b1a      	ldr	r3, [pc, #104]	; (8002290 <MX_USART3_UART_Init+0x90>)
 8002226:	220c      	movs	r2, #12
 8002228:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800222a:	4b19      	ldr	r3, [pc, #100]	; (8002290 <MX_USART3_UART_Init+0x90>)
 800222c:	2200      	movs	r2, #0
 800222e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002230:	4b17      	ldr	r3, [pc, #92]	; (8002290 <MX_USART3_UART_Init+0x90>)
 8002232:	2200      	movs	r2, #0
 8002234:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002236:	4b16      	ldr	r3, [pc, #88]	; (8002290 <MX_USART3_UART_Init+0x90>)
 8002238:	2200      	movs	r2, #0
 800223a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800223c:	4b14      	ldr	r3, [pc, #80]	; (8002290 <MX_USART3_UART_Init+0x90>)
 800223e:	2200      	movs	r2, #0
 8002240:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002242:	4b13      	ldr	r3, [pc, #76]	; (8002290 <MX_USART3_UART_Init+0x90>)
 8002244:	2200      	movs	r2, #0
 8002246:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002248:	4811      	ldr	r0, [pc, #68]	; (8002290 <MX_USART3_UART_Init+0x90>)
 800224a:	f009 fb1d 	bl	800b888 <HAL_UART_Init>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002254:	f7ff fa75 	bl	8001742 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002258:	2100      	movs	r1, #0
 800225a:	480d      	ldr	r0, [pc, #52]	; (8002290 <MX_USART3_UART_Init+0x90>)
 800225c:	f00a fa6a 	bl	800c734 <HAL_UARTEx_SetTxFifoThreshold>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002266:	f7ff fa6c 	bl	8001742 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800226a:	2100      	movs	r1, #0
 800226c:	4808      	ldr	r0, [pc, #32]	; (8002290 <MX_USART3_UART_Init+0x90>)
 800226e:	f00a fa9f 	bl	800c7b0 <HAL_UARTEx_SetRxFifoThreshold>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002278:	f7ff fa63 	bl	8001742 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800227c:	4804      	ldr	r0, [pc, #16]	; (8002290 <MX_USART3_UART_Init+0x90>)
 800227e:	f00a fa20 	bl	800c6c2 <HAL_UARTEx_DisableFifoMode>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002288:	f7ff fa5b 	bl	8001742 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800228c:	bf00      	nop
 800228e:	bd80      	pop	{r7, pc}
 8002290:	2400ae9c 	.word	0x2400ae9c
 8002294:	40004800 	.word	0x40004800

08002298 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b0ba      	sub	sp, #232	; 0xe8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	60da      	str	r2, [r3, #12]
 80022ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022b0:	f107 0318 	add.w	r3, r7, #24
 80022b4:	22bc      	movs	r2, #188	; 0xbc
 80022b6:	2100      	movs	r1, #0
 80022b8:	4618      	mov	r0, r3
 80022ba:	f018 faa9 	bl	801a810 <memset>
  if(uartHandle->Instance==USART1)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a6c      	ldr	r2, [pc, #432]	; (8002474 <HAL_UART_MspInit+0x1dc>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	f040 8088 	bne.w	80023da <HAL_UART_MspInit+0x142>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80022ca:	2301      	movs	r3, #1
 80022cc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80022ce:	2300      	movs	r3, #0
 80022d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022d4:	f107 0318 	add.w	r3, r7, #24
 80022d8:	4618      	mov	r0, r3
 80022da:	f005 ff85 	bl	80081e8 <HAL_RCCEx_PeriphCLKConfig>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80022e4:	f7ff fa2d 	bl	8001742 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022e8:	4b63      	ldr	r3, [pc, #396]	; (8002478 <HAL_UART_MspInit+0x1e0>)
 80022ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022ee:	4a62      	ldr	r2, [pc, #392]	; (8002478 <HAL_UART_MspInit+0x1e0>)
 80022f0:	f043 0310 	orr.w	r3, r3, #16
 80022f4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80022f8:	4b5f      	ldr	r3, [pc, #380]	; (8002478 <HAL_UART_MspInit+0x1e0>)
 80022fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022fe:	f003 0310 	and.w	r3, r3, #16
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002306:	4b5c      	ldr	r3, [pc, #368]	; (8002478 <HAL_UART_MspInit+0x1e0>)
 8002308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800230c:	4a5a      	ldr	r2, [pc, #360]	; (8002478 <HAL_UART_MspInit+0x1e0>)
 800230e:	f043 0302 	orr.w	r3, r3, #2
 8002312:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002316:	4b58      	ldr	r3, [pc, #352]	; (8002478 <HAL_UART_MspInit+0x1e0>)
 8002318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	613b      	str	r3, [r7, #16]
 8002322:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002324:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002328:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232c:	2302      	movs	r3, #2
 800232e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002338:	2300      	movs	r3, #0
 800233a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800233e:	2304      	movs	r3, #4
 8002340:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002344:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002348:	4619      	mov	r1, r3
 800234a:	484c      	ldr	r0, [pc, #304]	; (800247c <HAL_UART_MspInit+0x1e4>)
 800234c:	f002 fe66 	bl	800501c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002350:	2340      	movs	r3, #64	; 0x40
 8002352:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002356:	2302      	movs	r3, #2
 8002358:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235c:	2300      	movs	r3, #0
 800235e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002362:	2300      	movs	r3, #0
 8002364:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002368:	2307      	movs	r3, #7
 800236a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800236e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002372:	4619      	mov	r1, r3
 8002374:	4841      	ldr	r0, [pc, #260]	; (800247c <HAL_UART_MspInit+0x1e4>)
 8002376:	f002 fe51 	bl	800501c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 800237a:	4b41      	ldr	r3, [pc, #260]	; (8002480 <HAL_UART_MspInit+0x1e8>)
 800237c:	4a41      	ldr	r2, [pc, #260]	; (8002484 <HAL_UART_MspInit+0x1ec>)
 800237e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002380:	4b3f      	ldr	r3, [pc, #252]	; (8002480 <HAL_UART_MspInit+0x1e8>)
 8002382:	2229      	movs	r2, #41	; 0x29
 8002384:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002386:	4b3e      	ldr	r3, [pc, #248]	; (8002480 <HAL_UART_MspInit+0x1e8>)
 8002388:	2200      	movs	r2, #0
 800238a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800238c:	4b3c      	ldr	r3, [pc, #240]	; (8002480 <HAL_UART_MspInit+0x1e8>)
 800238e:	2200      	movs	r2, #0
 8002390:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002392:	4b3b      	ldr	r3, [pc, #236]	; (8002480 <HAL_UART_MspInit+0x1e8>)
 8002394:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002398:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800239a:	4b39      	ldr	r3, [pc, #228]	; (8002480 <HAL_UART_MspInit+0x1e8>)
 800239c:	2200      	movs	r2, #0
 800239e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023a0:	4b37      	ldr	r3, [pc, #220]	; (8002480 <HAL_UART_MspInit+0x1e8>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80023a6:	4b36      	ldr	r3, [pc, #216]	; (8002480 <HAL_UART_MspInit+0x1e8>)
 80023a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023ac:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80023ae:	4b34      	ldr	r3, [pc, #208]	; (8002480 <HAL_UART_MspInit+0x1e8>)
 80023b0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80023b4:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023b6:	4b32      	ldr	r3, [pc, #200]	; (8002480 <HAL_UART_MspInit+0x1e8>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80023bc:	4830      	ldr	r0, [pc, #192]	; (8002480 <HAL_UART_MspInit+0x1e8>)
 80023be:	f000 fb11 	bl	80029e4 <HAL_DMA_Init>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <HAL_UART_MspInit+0x134>
    {
      Error_Handler();
 80023c8:	f7ff f9bb 	bl	8001742 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a2c      	ldr	r2, [pc, #176]	; (8002480 <HAL_UART_MspInit+0x1e8>)
 80023d0:	67da      	str	r2, [r3, #124]	; 0x7c
 80023d2:	4a2b      	ldr	r2, [pc, #172]	; (8002480 <HAL_UART_MspInit+0x1e8>)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80023d8:	e047      	b.n	800246a <HAL_UART_MspInit+0x1d2>
  else if(uartHandle->Instance==USART3)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a2a      	ldr	r2, [pc, #168]	; (8002488 <HAL_UART_MspInit+0x1f0>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d142      	bne.n	800246a <HAL_UART_MspInit+0x1d2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80023e4:	2302      	movs	r3, #2
 80023e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80023e8:	2300      	movs	r3, #0
 80023ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023ee:	f107 0318 	add.w	r3, r7, #24
 80023f2:	4618      	mov	r0, r3
 80023f4:	f005 fef8 	bl	80081e8 <HAL_RCCEx_PeriphCLKConfig>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <HAL_UART_MspInit+0x16a>
      Error_Handler();
 80023fe:	f7ff f9a0 	bl	8001742 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002402:	4b1d      	ldr	r3, [pc, #116]	; (8002478 <HAL_UART_MspInit+0x1e0>)
 8002404:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002408:	4a1b      	ldr	r2, [pc, #108]	; (8002478 <HAL_UART_MspInit+0x1e0>)
 800240a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800240e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002412:	4b19      	ldr	r3, [pc, #100]	; (8002478 <HAL_UART_MspInit+0x1e0>)
 8002414:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002418:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002420:	4b15      	ldr	r3, [pc, #84]	; (8002478 <HAL_UART_MspInit+0x1e0>)
 8002422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002426:	4a14      	ldr	r2, [pc, #80]	; (8002478 <HAL_UART_MspInit+0x1e0>)
 8002428:	f043 0308 	orr.w	r3, r3, #8
 800242c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002430:	4b11      	ldr	r3, [pc, #68]	; (8002478 <HAL_UART_MspInit+0x1e0>)
 8002432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	60bb      	str	r3, [r7, #8]
 800243c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800243e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002442:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002446:	2302      	movs	r3, #2
 8002448:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244c:	2300      	movs	r3, #0
 800244e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002452:	2300      	movs	r3, #0
 8002454:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002458:	2307      	movs	r3, #7
 800245a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800245e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002462:	4619      	mov	r1, r3
 8002464:	4809      	ldr	r0, [pc, #36]	; (800248c <HAL_UART_MspInit+0x1f4>)
 8002466:	f002 fdd9 	bl	800501c <HAL_GPIO_Init>
}
 800246a:	bf00      	nop
 800246c:	37e8      	adds	r7, #232	; 0xe8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40011000 	.word	0x40011000
 8002478:	58024400 	.word	0x58024400
 800247c:	58020400 	.word	0x58020400
 8002480:	2400af2c 	.word	0x2400af2c
 8002484:	40020010 	.word	0x40020010
 8002488:	40004800 	.word	0x40004800
 800248c:	58020c00 	.word	0x58020c00

08002490 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002490:	f8df d05c 	ldr.w	sp, [pc, #92]	; 80024f0 <LoopFillZerobss_RAM_D2+0x12>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002494:	f7fe fb80 	bl	8000b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002498:	4816      	ldr	r0, [pc, #88]	; (80024f4 <LoopFillZerobss_RAM_D2+0x16>)
  ldr r1, =_edata
 800249a:	4917      	ldr	r1, [pc, #92]	; (80024f8 <LoopFillZerobss_RAM_D2+0x1a>)
  ldr r2, =_sidata
 800249c:	4a17      	ldr	r2, [pc, #92]	; (80024fc <LoopFillZerobss_RAM_D2+0x1e>)
  movs r3, #0
 800249e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024a0:	e002      	b.n	80024a8 <LoopCopyDataInit>

080024a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024a6:	3304      	adds	r3, #4

080024a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024ac:	d3f9      	bcc.n	80024a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ae:	4a14      	ldr	r2, [pc, #80]	; (8002500 <LoopFillZerobss_RAM_D2+0x22>)
  ldr r4, =_ebss
 80024b0:	4c14      	ldr	r4, [pc, #80]	; (8002504 <LoopFillZerobss_RAM_D2+0x26>)
  movs r3, #0
 80024b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024b4:	e001      	b.n	80024ba <LoopFillZerobss>

080024b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024b8:	3204      	adds	r2, #4

080024ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024bc:	d3fb      	bcc.n	80024b6 <FillZerobss>

  /* Copy the data segment initializers from flash to RAM_D2 */
  movs  r1, #0
 80024be:	2100      	movs	r1, #0
  b  LoopCopyDataInit_RAM_D2
 80024c0:	e003      	b.n	80024ca <LoopCopyDataInit_RAM_D2>

080024c2 <CopyDataInit_RAM_D2>:

CopyDataInit_RAM_D2:
  ldr  r3, =_siRAM_D2
 80024c2:	4b11      	ldr	r3, [pc, #68]	; (8002508 <LoopFillZerobss_RAM_D2+0x2a>)
  ldr  r3, [r3, r1]
 80024c4:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80024c6:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80024c8:	3104      	adds	r1, #4

080024ca <LoopCopyDataInit_RAM_D2>:

LoopCopyDataInit_RAM_D2:
  ldr  r0, =_sRAM_D2
 80024ca:	4810      	ldr	r0, [pc, #64]	; (800250c <LoopFillZerobss_RAM_D2+0x2e>)
  ldr  r3, =_eRAM_D2
 80024cc:	4b10      	ldr	r3, [pc, #64]	; (8002510 <LoopFillZerobss_RAM_D2+0x32>)
  adds  r2, r0, r1
 80024ce:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80024d0:	429a      	cmp	r2, r3
  bcc  CopyDataInit_RAM_D2
 80024d2:	d3f6      	bcc.n	80024c2 <CopyDataInit_RAM_D2>
  ldr  r2, =_sbss_RAM_D2
 80024d4:	4a0f      	ldr	r2, [pc, #60]	; (8002514 <LoopFillZerobss_RAM_D2+0x36>)
  b  LoopFillZerobss_RAM_D2
 80024d6:	e002      	b.n	80024de <LoopFillZerobss_RAM_D2>

080024d8 <FillZerobss_RAM_D2>:


/* Zero fill the bss segment. */
FillZerobss_RAM_D2:
  movs  r3, #0
 80024d8:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80024da:	f842 3b04 	str.w	r3, [r2], #4

080024de <LoopFillZerobss_RAM_D2>:

LoopFillZerobss_RAM_D2:
  ldr  r3, = _ebss_RAM_D2
 80024de:	4b0e      	ldr	r3, [pc, #56]	; (8002518 <LoopFillZerobss_RAM_D2+0x3a>)
  cmp  r2, r3
 80024e0:	429a      	cmp	r2, r3
  bcc  FillZerobss_RAM_D2
 80024e2:	d3f9      	bcc.n	80024d8 <FillZerobss_RAM_D2>

/* Call static constructors */
    bl __libc_init_array
 80024e4:	f018 f938 	bl	801a758 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024e8:	f7fe ff58 	bl	800139c <main>
  bx  lr
 80024ec:	4770      	bx	lr
 80024ee:	0000      	.short	0x0000
  ldr   sp, =_estack      /* set stack pointer */
 80024f0:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 80024f4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80024f8:	2400a2fc 	.word	0x2400a2fc
  ldr r2, =_sidata
 80024fc:	08028c00 	.word	0x08028c00
  ldr r2, =_sbss
 8002500:	2400a3bc 	.word	0x2400a3bc
  ldr r4, =_ebss
 8002504:	24018438 	.word	0x24018438
  ldr  r3, =_siRAM_D2
 8002508:	08032fbc 	.word	0x08032fbc
  ldr  r0, =_sRAM_D2
 800250c:	30000000 	.word	0x30000000
  ldr  r3, =_eRAM_D2
 8002510:	30000000 	.word	0x30000000
  ldr  r2, =_sbss_RAM_D2
 8002514:	30000000 	.word	0x30000000
  ldr  r3, = _ebss_RAM_D2
 8002518:	30000000 	.word	0x30000000

0800251c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800251c:	e7fe      	b.n	800251c <ADC3_IRQHandler>
	...

08002520 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002526:	2003      	movs	r0, #3
 8002528:	f000 f9a0 	bl	800286c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800252c:	f005 fc86 	bl	8007e3c <HAL_RCC_GetSysClockFreq>
 8002530:	4602      	mov	r2, r0
 8002532:	4b15      	ldr	r3, [pc, #84]	; (8002588 <HAL_Init+0x68>)
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	0a1b      	lsrs	r3, r3, #8
 8002538:	f003 030f 	and.w	r3, r3, #15
 800253c:	4913      	ldr	r1, [pc, #76]	; (800258c <HAL_Init+0x6c>)
 800253e:	5ccb      	ldrb	r3, [r1, r3]
 8002540:	f003 031f 	and.w	r3, r3, #31
 8002544:	fa22 f303 	lsr.w	r3, r2, r3
 8002548:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800254a:	4b0f      	ldr	r3, [pc, #60]	; (8002588 <HAL_Init+0x68>)
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	4a0e      	ldr	r2, [pc, #56]	; (800258c <HAL_Init+0x6c>)
 8002554:	5cd3      	ldrb	r3, [r2, r3]
 8002556:	f003 031f 	and.w	r3, r3, #31
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	fa22 f303 	lsr.w	r3, r2, r3
 8002560:	4a0b      	ldr	r2, [pc, #44]	; (8002590 <HAL_Init+0x70>)
 8002562:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002564:	4a0b      	ldr	r2, [pc, #44]	; (8002594 <HAL_Init+0x74>)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800256a:	2000      	movs	r0, #0
 800256c:	f000 f814 	bl	8002598 <HAL_InitTick>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e002      	b.n	8002580 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800257a:	f7ff fb63 	bl	8001c44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	58024400 	.word	0x58024400
 800258c:	0801f9a8 	.word	0x0801f9a8
 8002590:	24000004 	.word	0x24000004
 8002594:	24000000 	.word	0x24000000

08002598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80025a0:	4b15      	ldr	r3, [pc, #84]	; (80025f8 <HAL_InitTick+0x60>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e021      	b.n	80025f0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80025ac:	4b13      	ldr	r3, [pc, #76]	; (80025fc <HAL_InitTick+0x64>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <HAL_InitTick+0x60>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	4619      	mov	r1, r3
 80025b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80025be:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 f985 	bl	80028d2 <HAL_SYSTICK_Config>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e00e      	b.n	80025f0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2b0f      	cmp	r3, #15
 80025d6:	d80a      	bhi.n	80025ee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025d8:	2200      	movs	r2, #0
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	f04f 30ff 	mov.w	r0, #4294967295
 80025e0:	f000 f94f 	bl	8002882 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025e4:	4a06      	ldr	r2, [pc, #24]	; (8002600 <HAL_InitTick+0x68>)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
 80025ec:	e000      	b.n	80025f0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	24000014 	.word	0x24000014
 80025fc:	24000000 	.word	0x24000000
 8002600:	24000010 	.word	0x24000010

08002604 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002608:	4b06      	ldr	r3, [pc, #24]	; (8002624 <HAL_IncTick+0x20>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	461a      	mov	r2, r3
 800260e:	4b06      	ldr	r3, [pc, #24]	; (8002628 <HAL_IncTick+0x24>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4413      	add	r3, r2
 8002614:	4a04      	ldr	r2, [pc, #16]	; (8002628 <HAL_IncTick+0x24>)
 8002616:	6013      	str	r3, [r2, #0]
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	24000014 	.word	0x24000014
 8002628:	2400b034 	.word	0x2400b034

0800262c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  return uwTick;
 8002630:	4b03      	ldr	r3, [pc, #12]	; (8002640 <HAL_GetTick+0x14>)
 8002632:	681b      	ldr	r3, [r3, #0]
}
 8002634:	4618      	mov	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	2400b034 	.word	0x2400b034

08002644 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800264c:	f7ff ffee 	bl	800262c <HAL_GetTick>
 8002650:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800265c:	d005      	beq.n	800266a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800265e:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <HAL_Delay+0x44>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	461a      	mov	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4413      	add	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800266a:	bf00      	nop
 800266c:	f7ff ffde 	bl	800262c <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	429a      	cmp	r2, r3
 800267a:	d8f7      	bhi.n	800266c <HAL_Delay+0x28>
  {
  }
}
 800267c:	bf00      	nop
 800267e:	bf00      	nop
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	24000014 	.word	0x24000014

0800268c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002690:	4b03      	ldr	r3, [pc, #12]	; (80026a0 <HAL_GetREVID+0x14>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	0c1b      	lsrs	r3, r3, #16
}
 8002696:	4618      	mov	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	5c001000 	.word	0x5c001000

080026a4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80026ac:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80026b4:	4904      	ldr	r1, [pc, #16]	; (80026c8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	604b      	str	r3, [r1, #4]
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	58000400 	.word	0x58000400

080026cc <__NVIC_SetPriorityGrouping>:
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026dc:	4b0b      	ldr	r3, [pc, #44]	; (800270c <__NVIC_SetPriorityGrouping+0x40>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026e8:	4013      	ands	r3, r2
 80026ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80026f4:	4b06      	ldr	r3, [pc, #24]	; (8002710 <__NVIC_SetPriorityGrouping+0x44>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026fa:	4a04      	ldr	r2, [pc, #16]	; (800270c <__NVIC_SetPriorityGrouping+0x40>)
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	60d3      	str	r3, [r2, #12]
}
 8002700:	bf00      	nop
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	e000ed00 	.word	0xe000ed00
 8002710:	05fa0000 	.word	0x05fa0000

08002714 <__NVIC_GetPriorityGrouping>:
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002718:	4b04      	ldr	r3, [pc, #16]	; (800272c <__NVIC_GetPriorityGrouping+0x18>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	0a1b      	lsrs	r3, r3, #8
 800271e:	f003 0307 	and.w	r3, r3, #7
}
 8002722:	4618      	mov	r0, r3
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	e000ed00 	.word	0xe000ed00

08002730 <__NVIC_EnableIRQ>:
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800273a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800273e:	2b00      	cmp	r3, #0
 8002740:	db0b      	blt.n	800275a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002742:	88fb      	ldrh	r3, [r7, #6]
 8002744:	f003 021f 	and.w	r2, r3, #31
 8002748:	4907      	ldr	r1, [pc, #28]	; (8002768 <__NVIC_EnableIRQ+0x38>)
 800274a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800274e:	095b      	lsrs	r3, r3, #5
 8002750:	2001      	movs	r0, #1
 8002752:	fa00 f202 	lsl.w	r2, r0, r2
 8002756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	e000e100 	.word	0xe000e100

0800276c <__NVIC_SetPriority>:
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	6039      	str	r1, [r7, #0]
 8002776:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002778:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800277c:	2b00      	cmp	r3, #0
 800277e:	db0a      	blt.n	8002796 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	b2da      	uxtb	r2, r3
 8002784:	490c      	ldr	r1, [pc, #48]	; (80027b8 <__NVIC_SetPriority+0x4c>)
 8002786:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800278a:	0112      	lsls	r2, r2, #4
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	440b      	add	r3, r1
 8002790:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002794:	e00a      	b.n	80027ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	b2da      	uxtb	r2, r3
 800279a:	4908      	ldr	r1, [pc, #32]	; (80027bc <__NVIC_SetPriority+0x50>)
 800279c:	88fb      	ldrh	r3, [r7, #6]
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	3b04      	subs	r3, #4
 80027a4:	0112      	lsls	r2, r2, #4
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	440b      	add	r3, r1
 80027aa:	761a      	strb	r2, [r3, #24]
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	e000e100 	.word	0xe000e100
 80027bc:	e000ed00 	.word	0xe000ed00

080027c0 <NVIC_EncodePriority>:
{
 80027c0:	b480      	push	{r7}
 80027c2:	b089      	sub	sp, #36	; 0x24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	f1c3 0307 	rsb	r3, r3, #7
 80027da:	2b04      	cmp	r3, #4
 80027dc:	bf28      	it	cs
 80027de:	2304      	movcs	r3, #4
 80027e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	3304      	adds	r3, #4
 80027e6:	2b06      	cmp	r3, #6
 80027e8:	d902      	bls.n	80027f0 <NVIC_EncodePriority+0x30>
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	3b03      	subs	r3, #3
 80027ee:	e000      	b.n	80027f2 <NVIC_EncodePriority+0x32>
 80027f0:	2300      	movs	r3, #0
 80027f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f4:	f04f 32ff 	mov.w	r2, #4294967295
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	43da      	mvns	r2, r3
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	401a      	ands	r2, r3
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002808:	f04f 31ff 	mov.w	r1, #4294967295
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	fa01 f303 	lsl.w	r3, r1, r3
 8002812:	43d9      	mvns	r1, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002818:	4313      	orrs	r3, r2
}
 800281a:	4618      	mov	r0, r3
 800281c:	3724      	adds	r7, #36	; 0x24
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
	...

08002828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3b01      	subs	r3, #1
 8002834:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002838:	d301      	bcc.n	800283e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800283a:	2301      	movs	r3, #1
 800283c:	e00f      	b.n	800285e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800283e:	4a0a      	ldr	r2, [pc, #40]	; (8002868 <SysTick_Config+0x40>)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3b01      	subs	r3, #1
 8002844:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002846:	210f      	movs	r1, #15
 8002848:	f04f 30ff 	mov.w	r0, #4294967295
 800284c:	f7ff ff8e 	bl	800276c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002850:	4b05      	ldr	r3, [pc, #20]	; (8002868 <SysTick_Config+0x40>)
 8002852:	2200      	movs	r2, #0
 8002854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002856:	4b04      	ldr	r3, [pc, #16]	; (8002868 <SysTick_Config+0x40>)
 8002858:	2207      	movs	r2, #7
 800285a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	e000e010 	.word	0xe000e010

0800286c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f7ff ff29 	bl	80026cc <__NVIC_SetPriorityGrouping>
}
 800287a:	bf00      	nop
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b086      	sub	sp, #24
 8002886:	af00      	add	r7, sp, #0
 8002888:	4603      	mov	r3, r0
 800288a:	60b9      	str	r1, [r7, #8]
 800288c:	607a      	str	r2, [r7, #4]
 800288e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002890:	f7ff ff40 	bl	8002714 <__NVIC_GetPriorityGrouping>
 8002894:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	68b9      	ldr	r1, [r7, #8]
 800289a:	6978      	ldr	r0, [r7, #20]
 800289c:	f7ff ff90 	bl	80027c0 <NVIC_EncodePriority>
 80028a0:	4602      	mov	r2, r0
 80028a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028a6:	4611      	mov	r1, r2
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff ff5f 	bl	800276c <__NVIC_SetPriority>
}
 80028ae:	bf00      	nop
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b082      	sub	sp, #8
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	4603      	mov	r3, r0
 80028be:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff ff33 	bl	8002730 <__NVIC_EnableIRQ>
}
 80028ca:	bf00      	nop
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b082      	sub	sp, #8
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7ff ffa4 	bl	8002828 <SysTick_Config>
 80028e0:	4603      	mov	r3, r0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
	...

080028ec <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80028f0:	f3bf 8f5f 	dmb	sy
}
 80028f4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80028f6:	4b07      	ldr	r3, [pc, #28]	; (8002914 <HAL_MPU_Disable+0x28>)
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	4a06      	ldr	r2, [pc, #24]	; (8002914 <HAL_MPU_Disable+0x28>)
 80028fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002900:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002902:	4b05      	ldr	r3, [pc, #20]	; (8002918 <HAL_MPU_Disable+0x2c>)
 8002904:	2200      	movs	r2, #0
 8002906:	605a      	str	r2, [r3, #4]
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	e000ed00 	.word	0xe000ed00
 8002918:	e000ed90 	.word	0xe000ed90

0800291c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002924:	4a0b      	ldr	r2, [pc, #44]	; (8002954 <HAL_MPU_Enable+0x38>)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800292e:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <HAL_MPU_Enable+0x3c>)
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	4a09      	ldr	r2, [pc, #36]	; (8002958 <HAL_MPU_Enable+0x3c>)
 8002934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002938:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800293a:	f3bf 8f4f 	dsb	sy
}
 800293e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002940:	f3bf 8f6f 	isb	sy
}
 8002944:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	e000ed90 	.word	0xe000ed90
 8002958:	e000ed00 	.word	0xe000ed00

0800295c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	785a      	ldrb	r2, [r3, #1]
 8002968:	4b1d      	ldr	r3, [pc, #116]	; (80029e0 <HAL_MPU_ConfigRegion+0x84>)
 800296a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d029      	beq.n	80029c8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002974:	4a1a      	ldr	r2, [pc, #104]	; (80029e0 <HAL_MPU_ConfigRegion+0x84>)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	7b1b      	ldrb	r3, [r3, #12]
 8002980:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	7adb      	ldrb	r3, [r3, #11]
 8002986:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002988:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	7a9b      	ldrb	r3, [r3, #10]
 800298e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002990:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	7b5b      	ldrb	r3, [r3, #13]
 8002996:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002998:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	7b9b      	ldrb	r3, [r3, #14]
 800299e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80029a0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	7bdb      	ldrb	r3, [r3, #15]
 80029a6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80029a8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	7a5b      	ldrb	r3, [r3, #9]
 80029ae:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80029b0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	7a1b      	ldrb	r3, [r3, #8]
 80029b6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80029b8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	7812      	ldrb	r2, [r2, #0]
 80029be:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80029c0:	4a07      	ldr	r2, [pc, #28]	; (80029e0 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80029c2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80029c4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80029c6:	e005      	b.n	80029d4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80029c8:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <HAL_MPU_ConfigRegion+0x84>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80029ce:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <HAL_MPU_ConfigRegion+0x84>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	611a      	str	r2, [r3, #16]
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	e000ed90 	.word	0xe000ed90

080029e4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80029ec:	f7ff fe1e 	bl	800262c <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e316      	b.n	800302a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a66      	ldr	r2, [pc, #408]	; (8002b9c <HAL_DMA_Init+0x1b8>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d04a      	beq.n	8002a9c <HAL_DMA_Init+0xb8>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a65      	ldr	r2, [pc, #404]	; (8002ba0 <HAL_DMA_Init+0x1bc>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d045      	beq.n	8002a9c <HAL_DMA_Init+0xb8>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a63      	ldr	r2, [pc, #396]	; (8002ba4 <HAL_DMA_Init+0x1c0>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d040      	beq.n	8002a9c <HAL_DMA_Init+0xb8>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a62      	ldr	r2, [pc, #392]	; (8002ba8 <HAL_DMA_Init+0x1c4>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d03b      	beq.n	8002a9c <HAL_DMA_Init+0xb8>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a60      	ldr	r2, [pc, #384]	; (8002bac <HAL_DMA_Init+0x1c8>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d036      	beq.n	8002a9c <HAL_DMA_Init+0xb8>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a5f      	ldr	r2, [pc, #380]	; (8002bb0 <HAL_DMA_Init+0x1cc>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d031      	beq.n	8002a9c <HAL_DMA_Init+0xb8>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a5d      	ldr	r2, [pc, #372]	; (8002bb4 <HAL_DMA_Init+0x1d0>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d02c      	beq.n	8002a9c <HAL_DMA_Init+0xb8>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a5c      	ldr	r2, [pc, #368]	; (8002bb8 <HAL_DMA_Init+0x1d4>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d027      	beq.n	8002a9c <HAL_DMA_Init+0xb8>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a5a      	ldr	r2, [pc, #360]	; (8002bbc <HAL_DMA_Init+0x1d8>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d022      	beq.n	8002a9c <HAL_DMA_Init+0xb8>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a59      	ldr	r2, [pc, #356]	; (8002bc0 <HAL_DMA_Init+0x1dc>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d01d      	beq.n	8002a9c <HAL_DMA_Init+0xb8>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a57      	ldr	r2, [pc, #348]	; (8002bc4 <HAL_DMA_Init+0x1e0>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d018      	beq.n	8002a9c <HAL_DMA_Init+0xb8>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a56      	ldr	r2, [pc, #344]	; (8002bc8 <HAL_DMA_Init+0x1e4>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d013      	beq.n	8002a9c <HAL_DMA_Init+0xb8>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a54      	ldr	r2, [pc, #336]	; (8002bcc <HAL_DMA_Init+0x1e8>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d00e      	beq.n	8002a9c <HAL_DMA_Init+0xb8>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a53      	ldr	r2, [pc, #332]	; (8002bd0 <HAL_DMA_Init+0x1ec>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d009      	beq.n	8002a9c <HAL_DMA_Init+0xb8>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a51      	ldr	r2, [pc, #324]	; (8002bd4 <HAL_DMA_Init+0x1f0>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d004      	beq.n	8002a9c <HAL_DMA_Init+0xb8>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a50      	ldr	r2, [pc, #320]	; (8002bd8 <HAL_DMA_Init+0x1f4>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d101      	bne.n	8002aa0 <HAL_DMA_Init+0xbc>
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e000      	b.n	8002aa2 <HAL_DMA_Init+0xbe>
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f000 813b 	beq.w	8002d1e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a37      	ldr	r2, [pc, #220]	; (8002b9c <HAL_DMA_Init+0x1b8>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d04a      	beq.n	8002b58 <HAL_DMA_Init+0x174>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a36      	ldr	r2, [pc, #216]	; (8002ba0 <HAL_DMA_Init+0x1bc>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d045      	beq.n	8002b58 <HAL_DMA_Init+0x174>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a34      	ldr	r2, [pc, #208]	; (8002ba4 <HAL_DMA_Init+0x1c0>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d040      	beq.n	8002b58 <HAL_DMA_Init+0x174>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a33      	ldr	r2, [pc, #204]	; (8002ba8 <HAL_DMA_Init+0x1c4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d03b      	beq.n	8002b58 <HAL_DMA_Init+0x174>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a31      	ldr	r2, [pc, #196]	; (8002bac <HAL_DMA_Init+0x1c8>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d036      	beq.n	8002b58 <HAL_DMA_Init+0x174>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a30      	ldr	r2, [pc, #192]	; (8002bb0 <HAL_DMA_Init+0x1cc>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d031      	beq.n	8002b58 <HAL_DMA_Init+0x174>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a2e      	ldr	r2, [pc, #184]	; (8002bb4 <HAL_DMA_Init+0x1d0>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d02c      	beq.n	8002b58 <HAL_DMA_Init+0x174>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a2d      	ldr	r2, [pc, #180]	; (8002bb8 <HAL_DMA_Init+0x1d4>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d027      	beq.n	8002b58 <HAL_DMA_Init+0x174>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a2b      	ldr	r2, [pc, #172]	; (8002bbc <HAL_DMA_Init+0x1d8>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d022      	beq.n	8002b58 <HAL_DMA_Init+0x174>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a2a      	ldr	r2, [pc, #168]	; (8002bc0 <HAL_DMA_Init+0x1dc>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d01d      	beq.n	8002b58 <HAL_DMA_Init+0x174>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a28      	ldr	r2, [pc, #160]	; (8002bc4 <HAL_DMA_Init+0x1e0>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d018      	beq.n	8002b58 <HAL_DMA_Init+0x174>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a27      	ldr	r2, [pc, #156]	; (8002bc8 <HAL_DMA_Init+0x1e4>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d013      	beq.n	8002b58 <HAL_DMA_Init+0x174>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a25      	ldr	r2, [pc, #148]	; (8002bcc <HAL_DMA_Init+0x1e8>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d00e      	beq.n	8002b58 <HAL_DMA_Init+0x174>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a24      	ldr	r2, [pc, #144]	; (8002bd0 <HAL_DMA_Init+0x1ec>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d009      	beq.n	8002b58 <HAL_DMA_Init+0x174>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a22      	ldr	r2, [pc, #136]	; (8002bd4 <HAL_DMA_Init+0x1f0>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d004      	beq.n	8002b58 <HAL_DMA_Init+0x174>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a21      	ldr	r2, [pc, #132]	; (8002bd8 <HAL_DMA_Init+0x1f4>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d108      	bne.n	8002b6a <HAL_DMA_Init+0x186>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0201 	bic.w	r2, r2, #1
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	e007      	b.n	8002b7a <HAL_DMA_Init+0x196>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0201 	bic.w	r2, r2, #1
 8002b78:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002b7a:	e02f      	b.n	8002bdc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b7c:	f7ff fd56 	bl	800262c <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b05      	cmp	r3, #5
 8002b88:	d928      	bls.n	8002bdc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2203      	movs	r2, #3
 8002b94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e246      	b.n	800302a <HAL_DMA_Init+0x646>
 8002b9c:	40020010 	.word	0x40020010
 8002ba0:	40020028 	.word	0x40020028
 8002ba4:	40020040 	.word	0x40020040
 8002ba8:	40020058 	.word	0x40020058
 8002bac:	40020070 	.word	0x40020070
 8002bb0:	40020088 	.word	0x40020088
 8002bb4:	400200a0 	.word	0x400200a0
 8002bb8:	400200b8 	.word	0x400200b8
 8002bbc:	40020410 	.word	0x40020410
 8002bc0:	40020428 	.word	0x40020428
 8002bc4:	40020440 	.word	0x40020440
 8002bc8:	40020458 	.word	0x40020458
 8002bcc:	40020470 	.word	0x40020470
 8002bd0:	40020488 	.word	0x40020488
 8002bd4:	400204a0 	.word	0x400204a0
 8002bd8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1c8      	bne.n	8002b7c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	4b83      	ldr	r3, [pc, #524]	; (8002e04 <HAL_DMA_Init+0x420>)
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002c02:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c0e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c1a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	2b04      	cmp	r3, #4
 8002c2e:	d107      	bne.n	8002c40 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002c40:	4b71      	ldr	r3, [pc, #452]	; (8002e08 <HAL_DMA_Init+0x424>)
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	4b71      	ldr	r3, [pc, #452]	; (8002e0c <HAL_DMA_Init+0x428>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c4c:	d328      	bcc.n	8002ca0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b28      	cmp	r3, #40	; 0x28
 8002c54:	d903      	bls.n	8002c5e <HAL_DMA_Init+0x27a>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b2e      	cmp	r3, #46	; 0x2e
 8002c5c:	d917      	bls.n	8002c8e <HAL_DMA_Init+0x2aa>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b3e      	cmp	r3, #62	; 0x3e
 8002c64:	d903      	bls.n	8002c6e <HAL_DMA_Init+0x28a>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b42      	cmp	r3, #66	; 0x42
 8002c6c:	d90f      	bls.n	8002c8e <HAL_DMA_Init+0x2aa>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b46      	cmp	r3, #70	; 0x46
 8002c74:	d903      	bls.n	8002c7e <HAL_DMA_Init+0x29a>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	2b48      	cmp	r3, #72	; 0x48
 8002c7c:	d907      	bls.n	8002c8e <HAL_DMA_Init+0x2aa>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b4e      	cmp	r3, #78	; 0x4e
 8002c84:	d905      	bls.n	8002c92 <HAL_DMA_Init+0x2ae>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b52      	cmp	r3, #82	; 0x52
 8002c8c:	d801      	bhi.n	8002c92 <HAL_DMA_Init+0x2ae>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <HAL_DMA_Init+0x2b0>
 8002c92:	2300      	movs	r3, #0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c9e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	f023 0307 	bic.w	r3, r3, #7
 8002cb6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d117      	bne.n	8002cfa <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00e      	beq.n	8002cfa <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f001 fbfd 	bl	80044dc <DMA_CheckFifoParam>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d008      	beq.n	8002cfa <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2240      	movs	r2, #64	; 0x40
 8002cec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e197      	b.n	800302a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f001 fb38 	bl	8004378 <DMA_CalcBaseAndBitshift>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d10:	f003 031f 	and.w	r3, r3, #31
 8002d14:	223f      	movs	r2, #63	; 0x3f
 8002d16:	409a      	lsls	r2, r3
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	609a      	str	r2, [r3, #8]
 8002d1c:	e0cd      	b.n	8002eba <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a3b      	ldr	r2, [pc, #236]	; (8002e10 <HAL_DMA_Init+0x42c>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d022      	beq.n	8002d6e <HAL_DMA_Init+0x38a>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a39      	ldr	r2, [pc, #228]	; (8002e14 <HAL_DMA_Init+0x430>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d01d      	beq.n	8002d6e <HAL_DMA_Init+0x38a>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a38      	ldr	r2, [pc, #224]	; (8002e18 <HAL_DMA_Init+0x434>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d018      	beq.n	8002d6e <HAL_DMA_Init+0x38a>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a36      	ldr	r2, [pc, #216]	; (8002e1c <HAL_DMA_Init+0x438>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d013      	beq.n	8002d6e <HAL_DMA_Init+0x38a>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a35      	ldr	r2, [pc, #212]	; (8002e20 <HAL_DMA_Init+0x43c>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d00e      	beq.n	8002d6e <HAL_DMA_Init+0x38a>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a33      	ldr	r2, [pc, #204]	; (8002e24 <HAL_DMA_Init+0x440>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d009      	beq.n	8002d6e <HAL_DMA_Init+0x38a>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a32      	ldr	r2, [pc, #200]	; (8002e28 <HAL_DMA_Init+0x444>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d004      	beq.n	8002d6e <HAL_DMA_Init+0x38a>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a30      	ldr	r2, [pc, #192]	; (8002e2c <HAL_DMA_Init+0x448>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d101      	bne.n	8002d72 <HAL_DMA_Init+0x38e>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <HAL_DMA_Init+0x390>
 8002d72:	2300      	movs	r3, #0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 8097 	beq.w	8002ea8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a24      	ldr	r2, [pc, #144]	; (8002e10 <HAL_DMA_Init+0x42c>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d021      	beq.n	8002dc8 <HAL_DMA_Init+0x3e4>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a22      	ldr	r2, [pc, #136]	; (8002e14 <HAL_DMA_Init+0x430>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d01c      	beq.n	8002dc8 <HAL_DMA_Init+0x3e4>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a21      	ldr	r2, [pc, #132]	; (8002e18 <HAL_DMA_Init+0x434>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d017      	beq.n	8002dc8 <HAL_DMA_Init+0x3e4>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a1f      	ldr	r2, [pc, #124]	; (8002e1c <HAL_DMA_Init+0x438>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d012      	beq.n	8002dc8 <HAL_DMA_Init+0x3e4>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a1e      	ldr	r2, [pc, #120]	; (8002e20 <HAL_DMA_Init+0x43c>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d00d      	beq.n	8002dc8 <HAL_DMA_Init+0x3e4>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a1c      	ldr	r2, [pc, #112]	; (8002e24 <HAL_DMA_Init+0x440>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d008      	beq.n	8002dc8 <HAL_DMA_Init+0x3e4>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a1b      	ldr	r2, [pc, #108]	; (8002e28 <HAL_DMA_Init+0x444>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d003      	beq.n	8002dc8 <HAL_DMA_Init+0x3e4>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a19      	ldr	r2, [pc, #100]	; (8002e2c <HAL_DMA_Init+0x448>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2202      	movs	r2, #2
 8002dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <HAL_DMA_Init+0x44c>)
 8002de6:	4013      	ands	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	2b40      	cmp	r3, #64	; 0x40
 8002df0:	d020      	beq.n	8002e34 <HAL_DMA_Init+0x450>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	2b80      	cmp	r3, #128	; 0x80
 8002df8:	d102      	bne.n	8002e00 <HAL_DMA_Init+0x41c>
 8002dfa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002dfe:	e01a      	b.n	8002e36 <HAL_DMA_Init+0x452>
 8002e00:	2300      	movs	r3, #0
 8002e02:	e018      	b.n	8002e36 <HAL_DMA_Init+0x452>
 8002e04:	fe10803f 	.word	0xfe10803f
 8002e08:	5c001000 	.word	0x5c001000
 8002e0c:	ffff0000 	.word	0xffff0000
 8002e10:	58025408 	.word	0x58025408
 8002e14:	5802541c 	.word	0x5802541c
 8002e18:	58025430 	.word	0x58025430
 8002e1c:	58025444 	.word	0x58025444
 8002e20:	58025458 	.word	0x58025458
 8002e24:	5802546c 	.word	0x5802546c
 8002e28:	58025480 	.word	0x58025480
 8002e2c:	58025494 	.word	0x58025494
 8002e30:	fffe000f 	.word	0xfffe000f
 8002e34:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	68d2      	ldr	r2, [r2, #12]
 8002e3a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002e44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002e4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002e54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002e5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002e64:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	4b6e      	ldr	r3, [pc, #440]	; (8003034 <HAL_DMA_Init+0x650>)
 8002e7c:	4413      	add	r3, r2
 8002e7e:	4a6e      	ldr	r2, [pc, #440]	; (8003038 <HAL_DMA_Init+0x654>)
 8002e80:	fba2 2303 	umull	r2, r3, r2, r3
 8002e84:	091b      	lsrs	r3, r3, #4
 8002e86:	009a      	lsls	r2, r3, #2
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f001 fa73 	bl	8004378 <DMA_CalcBaseAndBitshift>
 8002e92:	4603      	mov	r3, r0
 8002e94:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9a:	f003 031f 	and.w	r3, r3, #31
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	409a      	lsls	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	605a      	str	r2, [r3, #4]
 8002ea6:	e008      	b.n	8002eba <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2240      	movs	r2, #64	; 0x40
 8002eac:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2203      	movs	r2, #3
 8002eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e0b7      	b.n	800302a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a5f      	ldr	r2, [pc, #380]	; (800303c <HAL_DMA_Init+0x658>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d072      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a5d      	ldr	r2, [pc, #372]	; (8003040 <HAL_DMA_Init+0x65c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d06d      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a5c      	ldr	r2, [pc, #368]	; (8003044 <HAL_DMA_Init+0x660>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d068      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a5a      	ldr	r2, [pc, #360]	; (8003048 <HAL_DMA_Init+0x664>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d063      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a59      	ldr	r2, [pc, #356]	; (800304c <HAL_DMA_Init+0x668>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d05e      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a57      	ldr	r2, [pc, #348]	; (8003050 <HAL_DMA_Init+0x66c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d059      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a56      	ldr	r2, [pc, #344]	; (8003054 <HAL_DMA_Init+0x670>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d054      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a54      	ldr	r2, [pc, #336]	; (8003058 <HAL_DMA_Init+0x674>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d04f      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a53      	ldr	r2, [pc, #332]	; (800305c <HAL_DMA_Init+0x678>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d04a      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a51      	ldr	r2, [pc, #324]	; (8003060 <HAL_DMA_Init+0x67c>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d045      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a50      	ldr	r2, [pc, #320]	; (8003064 <HAL_DMA_Init+0x680>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d040      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a4e      	ldr	r2, [pc, #312]	; (8003068 <HAL_DMA_Init+0x684>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d03b      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a4d      	ldr	r2, [pc, #308]	; (800306c <HAL_DMA_Init+0x688>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d036      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a4b      	ldr	r2, [pc, #300]	; (8003070 <HAL_DMA_Init+0x68c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d031      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a4a      	ldr	r2, [pc, #296]	; (8003074 <HAL_DMA_Init+0x690>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d02c      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a48      	ldr	r2, [pc, #288]	; (8003078 <HAL_DMA_Init+0x694>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d027      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a47      	ldr	r2, [pc, #284]	; (800307c <HAL_DMA_Init+0x698>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d022      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a45      	ldr	r2, [pc, #276]	; (8003080 <HAL_DMA_Init+0x69c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d01d      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a44      	ldr	r2, [pc, #272]	; (8003084 <HAL_DMA_Init+0x6a0>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d018      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a42      	ldr	r2, [pc, #264]	; (8003088 <HAL_DMA_Init+0x6a4>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d013      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a41      	ldr	r2, [pc, #260]	; (800308c <HAL_DMA_Init+0x6a8>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d00e      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a3f      	ldr	r2, [pc, #252]	; (8003090 <HAL_DMA_Init+0x6ac>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d009      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a3e      	ldr	r2, [pc, #248]	; (8003094 <HAL_DMA_Init+0x6b0>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d004      	beq.n	8002faa <HAL_DMA_Init+0x5c6>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a3c      	ldr	r2, [pc, #240]	; (8003098 <HAL_DMA_Init+0x6b4>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d101      	bne.n	8002fae <HAL_DMA_Init+0x5ca>
 8002faa:	2301      	movs	r3, #1
 8002fac:	e000      	b.n	8002fb0 <HAL_DMA_Init+0x5cc>
 8002fae:	2300      	movs	r3, #0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d032      	beq.n	800301a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f001 fb0d 	bl	80045d4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	2b80      	cmp	r3, #128	; 0x80
 8002fc0:	d102      	bne.n	8002fc8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002fdc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d010      	beq.n	8003008 <HAL_DMA_Init+0x624>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b08      	cmp	r3, #8
 8002fec:	d80c      	bhi.n	8003008 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f001 fb8a 	bl	8004708 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003004:	605a      	str	r2, [r3, #4]
 8003006:	e008      	b.n	800301a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	a7fdabf8 	.word	0xa7fdabf8
 8003038:	cccccccd 	.word	0xcccccccd
 800303c:	40020010 	.word	0x40020010
 8003040:	40020028 	.word	0x40020028
 8003044:	40020040 	.word	0x40020040
 8003048:	40020058 	.word	0x40020058
 800304c:	40020070 	.word	0x40020070
 8003050:	40020088 	.word	0x40020088
 8003054:	400200a0 	.word	0x400200a0
 8003058:	400200b8 	.word	0x400200b8
 800305c:	40020410 	.word	0x40020410
 8003060:	40020428 	.word	0x40020428
 8003064:	40020440 	.word	0x40020440
 8003068:	40020458 	.word	0x40020458
 800306c:	40020470 	.word	0x40020470
 8003070:	40020488 	.word	0x40020488
 8003074:	400204a0 	.word	0x400204a0
 8003078:	400204b8 	.word	0x400204b8
 800307c:	58025408 	.word	0x58025408
 8003080:	5802541c 	.word	0x5802541c
 8003084:	58025430 	.word	0x58025430
 8003088:	58025444 	.word	0x58025444
 800308c:	58025458 	.word	0x58025458
 8003090:	5802546c 	.word	0x5802546c
 8003094:	58025480 	.word	0x58025480
 8003098:	58025494 	.word	0x58025494

0800309c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e205      	b.n	80034ba <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d004      	beq.n	80030c4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2280      	movs	r2, #128	; 0x80
 80030be:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e1fa      	b.n	80034ba <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a8c      	ldr	r2, [pc, #560]	; (80032fc <HAL_DMA_Abort_IT+0x260>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d04a      	beq.n	8003164 <HAL_DMA_Abort_IT+0xc8>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a8b      	ldr	r2, [pc, #556]	; (8003300 <HAL_DMA_Abort_IT+0x264>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d045      	beq.n	8003164 <HAL_DMA_Abort_IT+0xc8>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a89      	ldr	r2, [pc, #548]	; (8003304 <HAL_DMA_Abort_IT+0x268>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d040      	beq.n	8003164 <HAL_DMA_Abort_IT+0xc8>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a88      	ldr	r2, [pc, #544]	; (8003308 <HAL_DMA_Abort_IT+0x26c>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d03b      	beq.n	8003164 <HAL_DMA_Abort_IT+0xc8>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a86      	ldr	r2, [pc, #536]	; (800330c <HAL_DMA_Abort_IT+0x270>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d036      	beq.n	8003164 <HAL_DMA_Abort_IT+0xc8>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a85      	ldr	r2, [pc, #532]	; (8003310 <HAL_DMA_Abort_IT+0x274>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d031      	beq.n	8003164 <HAL_DMA_Abort_IT+0xc8>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a83      	ldr	r2, [pc, #524]	; (8003314 <HAL_DMA_Abort_IT+0x278>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d02c      	beq.n	8003164 <HAL_DMA_Abort_IT+0xc8>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a82      	ldr	r2, [pc, #520]	; (8003318 <HAL_DMA_Abort_IT+0x27c>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d027      	beq.n	8003164 <HAL_DMA_Abort_IT+0xc8>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a80      	ldr	r2, [pc, #512]	; (800331c <HAL_DMA_Abort_IT+0x280>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d022      	beq.n	8003164 <HAL_DMA_Abort_IT+0xc8>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a7f      	ldr	r2, [pc, #508]	; (8003320 <HAL_DMA_Abort_IT+0x284>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d01d      	beq.n	8003164 <HAL_DMA_Abort_IT+0xc8>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a7d      	ldr	r2, [pc, #500]	; (8003324 <HAL_DMA_Abort_IT+0x288>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d018      	beq.n	8003164 <HAL_DMA_Abort_IT+0xc8>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a7c      	ldr	r2, [pc, #496]	; (8003328 <HAL_DMA_Abort_IT+0x28c>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d013      	beq.n	8003164 <HAL_DMA_Abort_IT+0xc8>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a7a      	ldr	r2, [pc, #488]	; (800332c <HAL_DMA_Abort_IT+0x290>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d00e      	beq.n	8003164 <HAL_DMA_Abort_IT+0xc8>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a79      	ldr	r2, [pc, #484]	; (8003330 <HAL_DMA_Abort_IT+0x294>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d009      	beq.n	8003164 <HAL_DMA_Abort_IT+0xc8>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a77      	ldr	r2, [pc, #476]	; (8003334 <HAL_DMA_Abort_IT+0x298>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d004      	beq.n	8003164 <HAL_DMA_Abort_IT+0xc8>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a76      	ldr	r2, [pc, #472]	; (8003338 <HAL_DMA_Abort_IT+0x29c>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d101      	bne.n	8003168 <HAL_DMA_Abort_IT+0xcc>
 8003164:	2301      	movs	r3, #1
 8003166:	e000      	b.n	800316a <HAL_DMA_Abort_IT+0xce>
 8003168:	2300      	movs	r3, #0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d065      	beq.n	800323a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2204      	movs	r2, #4
 8003172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a60      	ldr	r2, [pc, #384]	; (80032fc <HAL_DMA_Abort_IT+0x260>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d04a      	beq.n	8003216 <HAL_DMA_Abort_IT+0x17a>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a5e      	ldr	r2, [pc, #376]	; (8003300 <HAL_DMA_Abort_IT+0x264>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d045      	beq.n	8003216 <HAL_DMA_Abort_IT+0x17a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a5d      	ldr	r2, [pc, #372]	; (8003304 <HAL_DMA_Abort_IT+0x268>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d040      	beq.n	8003216 <HAL_DMA_Abort_IT+0x17a>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a5b      	ldr	r2, [pc, #364]	; (8003308 <HAL_DMA_Abort_IT+0x26c>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d03b      	beq.n	8003216 <HAL_DMA_Abort_IT+0x17a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a5a      	ldr	r2, [pc, #360]	; (800330c <HAL_DMA_Abort_IT+0x270>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d036      	beq.n	8003216 <HAL_DMA_Abort_IT+0x17a>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a58      	ldr	r2, [pc, #352]	; (8003310 <HAL_DMA_Abort_IT+0x274>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d031      	beq.n	8003216 <HAL_DMA_Abort_IT+0x17a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a57      	ldr	r2, [pc, #348]	; (8003314 <HAL_DMA_Abort_IT+0x278>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d02c      	beq.n	8003216 <HAL_DMA_Abort_IT+0x17a>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a55      	ldr	r2, [pc, #340]	; (8003318 <HAL_DMA_Abort_IT+0x27c>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d027      	beq.n	8003216 <HAL_DMA_Abort_IT+0x17a>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a54      	ldr	r2, [pc, #336]	; (800331c <HAL_DMA_Abort_IT+0x280>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d022      	beq.n	8003216 <HAL_DMA_Abort_IT+0x17a>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a52      	ldr	r2, [pc, #328]	; (8003320 <HAL_DMA_Abort_IT+0x284>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d01d      	beq.n	8003216 <HAL_DMA_Abort_IT+0x17a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a51      	ldr	r2, [pc, #324]	; (8003324 <HAL_DMA_Abort_IT+0x288>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d018      	beq.n	8003216 <HAL_DMA_Abort_IT+0x17a>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a4f      	ldr	r2, [pc, #316]	; (8003328 <HAL_DMA_Abort_IT+0x28c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d013      	beq.n	8003216 <HAL_DMA_Abort_IT+0x17a>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a4e      	ldr	r2, [pc, #312]	; (800332c <HAL_DMA_Abort_IT+0x290>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d00e      	beq.n	8003216 <HAL_DMA_Abort_IT+0x17a>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a4c      	ldr	r2, [pc, #304]	; (8003330 <HAL_DMA_Abort_IT+0x294>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d009      	beq.n	8003216 <HAL_DMA_Abort_IT+0x17a>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a4b      	ldr	r2, [pc, #300]	; (8003334 <HAL_DMA_Abort_IT+0x298>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d004      	beq.n	8003216 <HAL_DMA_Abort_IT+0x17a>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a49      	ldr	r2, [pc, #292]	; (8003338 <HAL_DMA_Abort_IT+0x29c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d108      	bne.n	8003228 <HAL_DMA_Abort_IT+0x18c>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0201 	bic.w	r2, r2, #1
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	e147      	b.n	80034b8 <HAL_DMA_Abort_IT+0x41c>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 0201 	bic.w	r2, r2, #1
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	e13e      	b.n	80034b8 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 020e 	bic.w	r2, r2, #14
 8003248:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a2b      	ldr	r2, [pc, #172]	; (80032fc <HAL_DMA_Abort_IT+0x260>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d04a      	beq.n	80032ea <HAL_DMA_Abort_IT+0x24e>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a29      	ldr	r2, [pc, #164]	; (8003300 <HAL_DMA_Abort_IT+0x264>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d045      	beq.n	80032ea <HAL_DMA_Abort_IT+0x24e>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a28      	ldr	r2, [pc, #160]	; (8003304 <HAL_DMA_Abort_IT+0x268>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d040      	beq.n	80032ea <HAL_DMA_Abort_IT+0x24e>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a26      	ldr	r2, [pc, #152]	; (8003308 <HAL_DMA_Abort_IT+0x26c>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d03b      	beq.n	80032ea <HAL_DMA_Abort_IT+0x24e>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a25      	ldr	r2, [pc, #148]	; (800330c <HAL_DMA_Abort_IT+0x270>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d036      	beq.n	80032ea <HAL_DMA_Abort_IT+0x24e>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a23      	ldr	r2, [pc, #140]	; (8003310 <HAL_DMA_Abort_IT+0x274>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d031      	beq.n	80032ea <HAL_DMA_Abort_IT+0x24e>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a22      	ldr	r2, [pc, #136]	; (8003314 <HAL_DMA_Abort_IT+0x278>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d02c      	beq.n	80032ea <HAL_DMA_Abort_IT+0x24e>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a20      	ldr	r2, [pc, #128]	; (8003318 <HAL_DMA_Abort_IT+0x27c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d027      	beq.n	80032ea <HAL_DMA_Abort_IT+0x24e>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a1f      	ldr	r2, [pc, #124]	; (800331c <HAL_DMA_Abort_IT+0x280>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d022      	beq.n	80032ea <HAL_DMA_Abort_IT+0x24e>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a1d      	ldr	r2, [pc, #116]	; (8003320 <HAL_DMA_Abort_IT+0x284>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d01d      	beq.n	80032ea <HAL_DMA_Abort_IT+0x24e>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a1c      	ldr	r2, [pc, #112]	; (8003324 <HAL_DMA_Abort_IT+0x288>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d018      	beq.n	80032ea <HAL_DMA_Abort_IT+0x24e>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a1a      	ldr	r2, [pc, #104]	; (8003328 <HAL_DMA_Abort_IT+0x28c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d013      	beq.n	80032ea <HAL_DMA_Abort_IT+0x24e>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a19      	ldr	r2, [pc, #100]	; (800332c <HAL_DMA_Abort_IT+0x290>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d00e      	beq.n	80032ea <HAL_DMA_Abort_IT+0x24e>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a17      	ldr	r2, [pc, #92]	; (8003330 <HAL_DMA_Abort_IT+0x294>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d009      	beq.n	80032ea <HAL_DMA_Abort_IT+0x24e>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a16      	ldr	r2, [pc, #88]	; (8003334 <HAL_DMA_Abort_IT+0x298>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d004      	beq.n	80032ea <HAL_DMA_Abort_IT+0x24e>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a14      	ldr	r2, [pc, #80]	; (8003338 <HAL_DMA_Abort_IT+0x29c>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d128      	bne.n	800333c <HAL_DMA_Abort_IT+0x2a0>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0201 	bic.w	r2, r2, #1
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	e027      	b.n	800334c <HAL_DMA_Abort_IT+0x2b0>
 80032fc:	40020010 	.word	0x40020010
 8003300:	40020028 	.word	0x40020028
 8003304:	40020040 	.word	0x40020040
 8003308:	40020058 	.word	0x40020058
 800330c:	40020070 	.word	0x40020070
 8003310:	40020088 	.word	0x40020088
 8003314:	400200a0 	.word	0x400200a0
 8003318:	400200b8 	.word	0x400200b8
 800331c:	40020410 	.word	0x40020410
 8003320:	40020428 	.word	0x40020428
 8003324:	40020440 	.word	0x40020440
 8003328:	40020458 	.word	0x40020458
 800332c:	40020470 	.word	0x40020470
 8003330:	40020488 	.word	0x40020488
 8003334:	400204a0 	.word	0x400204a0
 8003338:	400204b8 	.word	0x400204b8
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0201 	bic.w	r2, r2, #1
 800334a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a5c      	ldr	r2, [pc, #368]	; (80034c4 <HAL_DMA_Abort_IT+0x428>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d072      	beq.n	800343c <HAL_DMA_Abort_IT+0x3a0>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a5b      	ldr	r2, [pc, #364]	; (80034c8 <HAL_DMA_Abort_IT+0x42c>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d06d      	beq.n	800343c <HAL_DMA_Abort_IT+0x3a0>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a59      	ldr	r2, [pc, #356]	; (80034cc <HAL_DMA_Abort_IT+0x430>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d068      	beq.n	800343c <HAL_DMA_Abort_IT+0x3a0>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a58      	ldr	r2, [pc, #352]	; (80034d0 <HAL_DMA_Abort_IT+0x434>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d063      	beq.n	800343c <HAL_DMA_Abort_IT+0x3a0>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a56      	ldr	r2, [pc, #344]	; (80034d4 <HAL_DMA_Abort_IT+0x438>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d05e      	beq.n	800343c <HAL_DMA_Abort_IT+0x3a0>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a55      	ldr	r2, [pc, #340]	; (80034d8 <HAL_DMA_Abort_IT+0x43c>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d059      	beq.n	800343c <HAL_DMA_Abort_IT+0x3a0>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a53      	ldr	r2, [pc, #332]	; (80034dc <HAL_DMA_Abort_IT+0x440>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d054      	beq.n	800343c <HAL_DMA_Abort_IT+0x3a0>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a52      	ldr	r2, [pc, #328]	; (80034e0 <HAL_DMA_Abort_IT+0x444>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d04f      	beq.n	800343c <HAL_DMA_Abort_IT+0x3a0>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a50      	ldr	r2, [pc, #320]	; (80034e4 <HAL_DMA_Abort_IT+0x448>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d04a      	beq.n	800343c <HAL_DMA_Abort_IT+0x3a0>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a4f      	ldr	r2, [pc, #316]	; (80034e8 <HAL_DMA_Abort_IT+0x44c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d045      	beq.n	800343c <HAL_DMA_Abort_IT+0x3a0>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a4d      	ldr	r2, [pc, #308]	; (80034ec <HAL_DMA_Abort_IT+0x450>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d040      	beq.n	800343c <HAL_DMA_Abort_IT+0x3a0>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a4c      	ldr	r2, [pc, #304]	; (80034f0 <HAL_DMA_Abort_IT+0x454>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d03b      	beq.n	800343c <HAL_DMA_Abort_IT+0x3a0>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a4a      	ldr	r2, [pc, #296]	; (80034f4 <HAL_DMA_Abort_IT+0x458>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d036      	beq.n	800343c <HAL_DMA_Abort_IT+0x3a0>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a49      	ldr	r2, [pc, #292]	; (80034f8 <HAL_DMA_Abort_IT+0x45c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d031      	beq.n	800343c <HAL_DMA_Abort_IT+0x3a0>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a47      	ldr	r2, [pc, #284]	; (80034fc <HAL_DMA_Abort_IT+0x460>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d02c      	beq.n	800343c <HAL_DMA_Abort_IT+0x3a0>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a46      	ldr	r2, [pc, #280]	; (8003500 <HAL_DMA_Abort_IT+0x464>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d027      	beq.n	800343c <HAL_DMA_Abort_IT+0x3a0>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a44      	ldr	r2, [pc, #272]	; (8003504 <HAL_DMA_Abort_IT+0x468>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d022      	beq.n	800343c <HAL_DMA_Abort_IT+0x3a0>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a43      	ldr	r2, [pc, #268]	; (8003508 <HAL_DMA_Abort_IT+0x46c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d01d      	beq.n	800343c <HAL_DMA_Abort_IT+0x3a0>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a41      	ldr	r2, [pc, #260]	; (800350c <HAL_DMA_Abort_IT+0x470>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d018      	beq.n	800343c <HAL_DMA_Abort_IT+0x3a0>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a40      	ldr	r2, [pc, #256]	; (8003510 <HAL_DMA_Abort_IT+0x474>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d013      	beq.n	800343c <HAL_DMA_Abort_IT+0x3a0>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a3e      	ldr	r2, [pc, #248]	; (8003514 <HAL_DMA_Abort_IT+0x478>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d00e      	beq.n	800343c <HAL_DMA_Abort_IT+0x3a0>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a3d      	ldr	r2, [pc, #244]	; (8003518 <HAL_DMA_Abort_IT+0x47c>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d009      	beq.n	800343c <HAL_DMA_Abort_IT+0x3a0>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a3b      	ldr	r2, [pc, #236]	; (800351c <HAL_DMA_Abort_IT+0x480>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d004      	beq.n	800343c <HAL_DMA_Abort_IT+0x3a0>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a3a      	ldr	r2, [pc, #232]	; (8003520 <HAL_DMA_Abort_IT+0x484>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d101      	bne.n	8003440 <HAL_DMA_Abort_IT+0x3a4>
 800343c:	2301      	movs	r3, #1
 800343e:	e000      	b.n	8003442 <HAL_DMA_Abort_IT+0x3a6>
 8003440:	2300      	movs	r3, #0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d028      	beq.n	8003498 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003450:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003454:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800345a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003460:	f003 031f 	and.w	r3, r3, #31
 8003464:	2201      	movs	r2, #1
 8003466:	409a      	lsls	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003474:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00c      	beq.n	8003498 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003488:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800348c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003496:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d003      	beq.n	80034b8 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	40020010 	.word	0x40020010
 80034c8:	40020028 	.word	0x40020028
 80034cc:	40020040 	.word	0x40020040
 80034d0:	40020058 	.word	0x40020058
 80034d4:	40020070 	.word	0x40020070
 80034d8:	40020088 	.word	0x40020088
 80034dc:	400200a0 	.word	0x400200a0
 80034e0:	400200b8 	.word	0x400200b8
 80034e4:	40020410 	.word	0x40020410
 80034e8:	40020428 	.word	0x40020428
 80034ec:	40020440 	.word	0x40020440
 80034f0:	40020458 	.word	0x40020458
 80034f4:	40020470 	.word	0x40020470
 80034f8:	40020488 	.word	0x40020488
 80034fc:	400204a0 	.word	0x400204a0
 8003500:	400204b8 	.word	0x400204b8
 8003504:	58025408 	.word	0x58025408
 8003508:	5802541c 	.word	0x5802541c
 800350c:	58025430 	.word	0x58025430
 8003510:	58025444 	.word	0x58025444
 8003514:	58025458 	.word	0x58025458
 8003518:	5802546c 	.word	0x5802546c
 800351c:	58025480 	.word	0x58025480
 8003520:	58025494 	.word	0x58025494

08003524 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b08a      	sub	sp, #40	; 0x28
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800352c:	2300      	movs	r3, #0
 800352e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003530:	4b67      	ldr	r3, [pc, #412]	; (80036d0 <HAL_DMA_IRQHandler+0x1ac>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a67      	ldr	r2, [pc, #412]	; (80036d4 <HAL_DMA_IRQHandler+0x1b0>)
 8003536:	fba2 2303 	umull	r2, r3, r2, r3
 800353a:	0a9b      	lsrs	r3, r3, #10
 800353c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003542:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003548:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a5f      	ldr	r2, [pc, #380]	; (80036d8 <HAL_DMA_IRQHandler+0x1b4>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d04a      	beq.n	80035f6 <HAL_DMA_IRQHandler+0xd2>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a5d      	ldr	r2, [pc, #372]	; (80036dc <HAL_DMA_IRQHandler+0x1b8>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d045      	beq.n	80035f6 <HAL_DMA_IRQHandler+0xd2>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a5c      	ldr	r2, [pc, #368]	; (80036e0 <HAL_DMA_IRQHandler+0x1bc>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d040      	beq.n	80035f6 <HAL_DMA_IRQHandler+0xd2>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a5a      	ldr	r2, [pc, #360]	; (80036e4 <HAL_DMA_IRQHandler+0x1c0>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d03b      	beq.n	80035f6 <HAL_DMA_IRQHandler+0xd2>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a59      	ldr	r2, [pc, #356]	; (80036e8 <HAL_DMA_IRQHandler+0x1c4>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d036      	beq.n	80035f6 <HAL_DMA_IRQHandler+0xd2>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a57      	ldr	r2, [pc, #348]	; (80036ec <HAL_DMA_IRQHandler+0x1c8>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d031      	beq.n	80035f6 <HAL_DMA_IRQHandler+0xd2>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a56      	ldr	r2, [pc, #344]	; (80036f0 <HAL_DMA_IRQHandler+0x1cc>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d02c      	beq.n	80035f6 <HAL_DMA_IRQHandler+0xd2>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a54      	ldr	r2, [pc, #336]	; (80036f4 <HAL_DMA_IRQHandler+0x1d0>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d027      	beq.n	80035f6 <HAL_DMA_IRQHandler+0xd2>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a53      	ldr	r2, [pc, #332]	; (80036f8 <HAL_DMA_IRQHandler+0x1d4>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d022      	beq.n	80035f6 <HAL_DMA_IRQHandler+0xd2>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a51      	ldr	r2, [pc, #324]	; (80036fc <HAL_DMA_IRQHandler+0x1d8>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d01d      	beq.n	80035f6 <HAL_DMA_IRQHandler+0xd2>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a50      	ldr	r2, [pc, #320]	; (8003700 <HAL_DMA_IRQHandler+0x1dc>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d018      	beq.n	80035f6 <HAL_DMA_IRQHandler+0xd2>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a4e      	ldr	r2, [pc, #312]	; (8003704 <HAL_DMA_IRQHandler+0x1e0>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d013      	beq.n	80035f6 <HAL_DMA_IRQHandler+0xd2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a4d      	ldr	r2, [pc, #308]	; (8003708 <HAL_DMA_IRQHandler+0x1e4>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d00e      	beq.n	80035f6 <HAL_DMA_IRQHandler+0xd2>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a4b      	ldr	r2, [pc, #300]	; (800370c <HAL_DMA_IRQHandler+0x1e8>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d009      	beq.n	80035f6 <HAL_DMA_IRQHandler+0xd2>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a4a      	ldr	r2, [pc, #296]	; (8003710 <HAL_DMA_IRQHandler+0x1ec>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d004      	beq.n	80035f6 <HAL_DMA_IRQHandler+0xd2>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a48      	ldr	r2, [pc, #288]	; (8003714 <HAL_DMA_IRQHandler+0x1f0>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d101      	bne.n	80035fa <HAL_DMA_IRQHandler+0xd6>
 80035f6:	2301      	movs	r3, #1
 80035f8:	e000      	b.n	80035fc <HAL_DMA_IRQHandler+0xd8>
 80035fa:	2300      	movs	r3, #0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 842b 	beq.w	8003e58 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003606:	f003 031f 	and.w	r3, r3, #31
 800360a:	2208      	movs	r2, #8
 800360c:	409a      	lsls	r2, r3
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	4013      	ands	r3, r2
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 80a2 	beq.w	800375c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a2e      	ldr	r2, [pc, #184]	; (80036d8 <HAL_DMA_IRQHandler+0x1b4>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d04a      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x194>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a2d      	ldr	r2, [pc, #180]	; (80036dc <HAL_DMA_IRQHandler+0x1b8>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d045      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x194>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a2b      	ldr	r2, [pc, #172]	; (80036e0 <HAL_DMA_IRQHandler+0x1bc>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d040      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x194>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a2a      	ldr	r2, [pc, #168]	; (80036e4 <HAL_DMA_IRQHandler+0x1c0>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d03b      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x194>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a28      	ldr	r2, [pc, #160]	; (80036e8 <HAL_DMA_IRQHandler+0x1c4>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d036      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x194>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a27      	ldr	r2, [pc, #156]	; (80036ec <HAL_DMA_IRQHandler+0x1c8>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d031      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x194>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a25      	ldr	r2, [pc, #148]	; (80036f0 <HAL_DMA_IRQHandler+0x1cc>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d02c      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x194>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a24      	ldr	r2, [pc, #144]	; (80036f4 <HAL_DMA_IRQHandler+0x1d0>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d027      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x194>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a22      	ldr	r2, [pc, #136]	; (80036f8 <HAL_DMA_IRQHandler+0x1d4>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d022      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x194>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a21      	ldr	r2, [pc, #132]	; (80036fc <HAL_DMA_IRQHandler+0x1d8>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d01d      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x194>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a1f      	ldr	r2, [pc, #124]	; (8003700 <HAL_DMA_IRQHandler+0x1dc>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d018      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x194>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a1e      	ldr	r2, [pc, #120]	; (8003704 <HAL_DMA_IRQHandler+0x1e0>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d013      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x194>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a1c      	ldr	r2, [pc, #112]	; (8003708 <HAL_DMA_IRQHandler+0x1e4>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d00e      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x194>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a1b      	ldr	r2, [pc, #108]	; (800370c <HAL_DMA_IRQHandler+0x1e8>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d009      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x194>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a19      	ldr	r2, [pc, #100]	; (8003710 <HAL_DMA_IRQHandler+0x1ec>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d004      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x194>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a18      	ldr	r2, [pc, #96]	; (8003714 <HAL_DMA_IRQHandler+0x1f0>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d12f      	bne.n	8003718 <HAL_DMA_IRQHandler+0x1f4>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0304 	and.w	r3, r3, #4
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	bf14      	ite	ne
 80036c6:	2301      	movne	r3, #1
 80036c8:	2300      	moveq	r3, #0
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	e02e      	b.n	800372c <HAL_DMA_IRQHandler+0x208>
 80036ce:	bf00      	nop
 80036d0:	24000000 	.word	0x24000000
 80036d4:	1b4e81b5 	.word	0x1b4e81b5
 80036d8:	40020010 	.word	0x40020010
 80036dc:	40020028 	.word	0x40020028
 80036e0:	40020040 	.word	0x40020040
 80036e4:	40020058 	.word	0x40020058
 80036e8:	40020070 	.word	0x40020070
 80036ec:	40020088 	.word	0x40020088
 80036f0:	400200a0 	.word	0x400200a0
 80036f4:	400200b8 	.word	0x400200b8
 80036f8:	40020410 	.word	0x40020410
 80036fc:	40020428 	.word	0x40020428
 8003700:	40020440 	.word	0x40020440
 8003704:	40020458 	.word	0x40020458
 8003708:	40020470 	.word	0x40020470
 800370c:	40020488 	.word	0x40020488
 8003710:	400204a0 	.word	0x400204a0
 8003714:	400204b8 	.word	0x400204b8
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	2b00      	cmp	r3, #0
 8003724:	bf14      	ite	ne
 8003726:	2301      	movne	r3, #1
 8003728:	2300      	moveq	r3, #0
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b00      	cmp	r3, #0
 800372e:	d015      	beq.n	800375c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0204 	bic.w	r2, r2, #4
 800373e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003744:	f003 031f 	and.w	r3, r3, #31
 8003748:	2208      	movs	r2, #8
 800374a:	409a      	lsls	r2, r3
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003754:	f043 0201 	orr.w	r2, r3, #1
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003760:	f003 031f 	and.w	r3, r3, #31
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	fa22 f303 	lsr.w	r3, r2, r3
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d06e      	beq.n	8003850 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a69      	ldr	r2, [pc, #420]	; (800391c <HAL_DMA_IRQHandler+0x3f8>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d04a      	beq.n	8003812 <HAL_DMA_IRQHandler+0x2ee>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a67      	ldr	r2, [pc, #412]	; (8003920 <HAL_DMA_IRQHandler+0x3fc>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d045      	beq.n	8003812 <HAL_DMA_IRQHandler+0x2ee>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a66      	ldr	r2, [pc, #408]	; (8003924 <HAL_DMA_IRQHandler+0x400>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d040      	beq.n	8003812 <HAL_DMA_IRQHandler+0x2ee>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a64      	ldr	r2, [pc, #400]	; (8003928 <HAL_DMA_IRQHandler+0x404>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d03b      	beq.n	8003812 <HAL_DMA_IRQHandler+0x2ee>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a63      	ldr	r2, [pc, #396]	; (800392c <HAL_DMA_IRQHandler+0x408>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d036      	beq.n	8003812 <HAL_DMA_IRQHandler+0x2ee>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a61      	ldr	r2, [pc, #388]	; (8003930 <HAL_DMA_IRQHandler+0x40c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d031      	beq.n	8003812 <HAL_DMA_IRQHandler+0x2ee>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a60      	ldr	r2, [pc, #384]	; (8003934 <HAL_DMA_IRQHandler+0x410>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d02c      	beq.n	8003812 <HAL_DMA_IRQHandler+0x2ee>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a5e      	ldr	r2, [pc, #376]	; (8003938 <HAL_DMA_IRQHandler+0x414>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d027      	beq.n	8003812 <HAL_DMA_IRQHandler+0x2ee>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a5d      	ldr	r2, [pc, #372]	; (800393c <HAL_DMA_IRQHandler+0x418>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d022      	beq.n	8003812 <HAL_DMA_IRQHandler+0x2ee>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a5b      	ldr	r2, [pc, #364]	; (8003940 <HAL_DMA_IRQHandler+0x41c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d01d      	beq.n	8003812 <HAL_DMA_IRQHandler+0x2ee>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a5a      	ldr	r2, [pc, #360]	; (8003944 <HAL_DMA_IRQHandler+0x420>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d018      	beq.n	8003812 <HAL_DMA_IRQHandler+0x2ee>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a58      	ldr	r2, [pc, #352]	; (8003948 <HAL_DMA_IRQHandler+0x424>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d013      	beq.n	8003812 <HAL_DMA_IRQHandler+0x2ee>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a57      	ldr	r2, [pc, #348]	; (800394c <HAL_DMA_IRQHandler+0x428>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d00e      	beq.n	8003812 <HAL_DMA_IRQHandler+0x2ee>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a55      	ldr	r2, [pc, #340]	; (8003950 <HAL_DMA_IRQHandler+0x42c>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d009      	beq.n	8003812 <HAL_DMA_IRQHandler+0x2ee>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a54      	ldr	r2, [pc, #336]	; (8003954 <HAL_DMA_IRQHandler+0x430>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d004      	beq.n	8003812 <HAL_DMA_IRQHandler+0x2ee>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a52      	ldr	r2, [pc, #328]	; (8003958 <HAL_DMA_IRQHandler+0x434>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d10a      	bne.n	8003828 <HAL_DMA_IRQHandler+0x304>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800381c:	2b00      	cmp	r3, #0
 800381e:	bf14      	ite	ne
 8003820:	2301      	movne	r3, #1
 8003822:	2300      	moveq	r3, #0
 8003824:	b2db      	uxtb	r3, r3
 8003826:	e003      	b.n	8003830 <HAL_DMA_IRQHandler+0x30c>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2300      	movs	r3, #0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00d      	beq.n	8003850 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003838:	f003 031f 	and.w	r3, r3, #31
 800383c:	2201      	movs	r2, #1
 800383e:	409a      	lsls	r2, r3
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003848:	f043 0202 	orr.w	r2, r3, #2
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003854:	f003 031f 	and.w	r3, r3, #31
 8003858:	2204      	movs	r2, #4
 800385a:	409a      	lsls	r2, r3
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	4013      	ands	r3, r2
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 808f 	beq.w	8003984 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a2c      	ldr	r2, [pc, #176]	; (800391c <HAL_DMA_IRQHandler+0x3f8>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d04a      	beq.n	8003906 <HAL_DMA_IRQHandler+0x3e2>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a2a      	ldr	r2, [pc, #168]	; (8003920 <HAL_DMA_IRQHandler+0x3fc>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d045      	beq.n	8003906 <HAL_DMA_IRQHandler+0x3e2>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a29      	ldr	r2, [pc, #164]	; (8003924 <HAL_DMA_IRQHandler+0x400>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d040      	beq.n	8003906 <HAL_DMA_IRQHandler+0x3e2>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a27      	ldr	r2, [pc, #156]	; (8003928 <HAL_DMA_IRQHandler+0x404>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d03b      	beq.n	8003906 <HAL_DMA_IRQHandler+0x3e2>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a26      	ldr	r2, [pc, #152]	; (800392c <HAL_DMA_IRQHandler+0x408>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d036      	beq.n	8003906 <HAL_DMA_IRQHandler+0x3e2>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a24      	ldr	r2, [pc, #144]	; (8003930 <HAL_DMA_IRQHandler+0x40c>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d031      	beq.n	8003906 <HAL_DMA_IRQHandler+0x3e2>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a23      	ldr	r2, [pc, #140]	; (8003934 <HAL_DMA_IRQHandler+0x410>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d02c      	beq.n	8003906 <HAL_DMA_IRQHandler+0x3e2>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a21      	ldr	r2, [pc, #132]	; (8003938 <HAL_DMA_IRQHandler+0x414>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d027      	beq.n	8003906 <HAL_DMA_IRQHandler+0x3e2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a20      	ldr	r2, [pc, #128]	; (800393c <HAL_DMA_IRQHandler+0x418>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d022      	beq.n	8003906 <HAL_DMA_IRQHandler+0x3e2>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a1e      	ldr	r2, [pc, #120]	; (8003940 <HAL_DMA_IRQHandler+0x41c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d01d      	beq.n	8003906 <HAL_DMA_IRQHandler+0x3e2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a1d      	ldr	r2, [pc, #116]	; (8003944 <HAL_DMA_IRQHandler+0x420>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d018      	beq.n	8003906 <HAL_DMA_IRQHandler+0x3e2>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a1b      	ldr	r2, [pc, #108]	; (8003948 <HAL_DMA_IRQHandler+0x424>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d013      	beq.n	8003906 <HAL_DMA_IRQHandler+0x3e2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a1a      	ldr	r2, [pc, #104]	; (800394c <HAL_DMA_IRQHandler+0x428>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d00e      	beq.n	8003906 <HAL_DMA_IRQHandler+0x3e2>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a18      	ldr	r2, [pc, #96]	; (8003950 <HAL_DMA_IRQHandler+0x42c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d009      	beq.n	8003906 <HAL_DMA_IRQHandler+0x3e2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a17      	ldr	r2, [pc, #92]	; (8003954 <HAL_DMA_IRQHandler+0x430>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d004      	beq.n	8003906 <HAL_DMA_IRQHandler+0x3e2>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a15      	ldr	r2, [pc, #84]	; (8003958 <HAL_DMA_IRQHandler+0x434>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d12a      	bne.n	800395c <HAL_DMA_IRQHandler+0x438>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	bf14      	ite	ne
 8003914:	2301      	movne	r3, #1
 8003916:	2300      	moveq	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	e023      	b.n	8003964 <HAL_DMA_IRQHandler+0x440>
 800391c:	40020010 	.word	0x40020010
 8003920:	40020028 	.word	0x40020028
 8003924:	40020040 	.word	0x40020040
 8003928:	40020058 	.word	0x40020058
 800392c:	40020070 	.word	0x40020070
 8003930:	40020088 	.word	0x40020088
 8003934:	400200a0 	.word	0x400200a0
 8003938:	400200b8 	.word	0x400200b8
 800393c:	40020410 	.word	0x40020410
 8003940:	40020428 	.word	0x40020428
 8003944:	40020440 	.word	0x40020440
 8003948:	40020458 	.word	0x40020458
 800394c:	40020470 	.word	0x40020470
 8003950:	40020488 	.word	0x40020488
 8003954:	400204a0 	.word	0x400204a0
 8003958:	400204b8 	.word	0x400204b8
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2300      	movs	r3, #0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00d      	beq.n	8003984 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800396c:	f003 031f 	and.w	r3, r3, #31
 8003970:	2204      	movs	r2, #4
 8003972:	409a      	lsls	r2, r3
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800397c:	f043 0204 	orr.w	r2, r3, #4
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003988:	f003 031f 	and.w	r3, r3, #31
 800398c:	2210      	movs	r2, #16
 800398e:	409a      	lsls	r2, r3
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	4013      	ands	r3, r2
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 80a6 	beq.w	8003ae6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a85      	ldr	r2, [pc, #532]	; (8003bb4 <HAL_DMA_IRQHandler+0x690>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d04a      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x516>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a83      	ldr	r2, [pc, #524]	; (8003bb8 <HAL_DMA_IRQHandler+0x694>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d045      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x516>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a82      	ldr	r2, [pc, #520]	; (8003bbc <HAL_DMA_IRQHandler+0x698>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d040      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x516>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a80      	ldr	r2, [pc, #512]	; (8003bc0 <HAL_DMA_IRQHandler+0x69c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d03b      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x516>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a7f      	ldr	r2, [pc, #508]	; (8003bc4 <HAL_DMA_IRQHandler+0x6a0>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d036      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x516>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a7d      	ldr	r2, [pc, #500]	; (8003bc8 <HAL_DMA_IRQHandler+0x6a4>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d031      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x516>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a7c      	ldr	r2, [pc, #496]	; (8003bcc <HAL_DMA_IRQHandler+0x6a8>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d02c      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x516>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a7a      	ldr	r2, [pc, #488]	; (8003bd0 <HAL_DMA_IRQHandler+0x6ac>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d027      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x516>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a79      	ldr	r2, [pc, #484]	; (8003bd4 <HAL_DMA_IRQHandler+0x6b0>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d022      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x516>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a77      	ldr	r2, [pc, #476]	; (8003bd8 <HAL_DMA_IRQHandler+0x6b4>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d01d      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x516>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a76      	ldr	r2, [pc, #472]	; (8003bdc <HAL_DMA_IRQHandler+0x6b8>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d018      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x516>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a74      	ldr	r2, [pc, #464]	; (8003be0 <HAL_DMA_IRQHandler+0x6bc>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d013      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x516>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a73      	ldr	r2, [pc, #460]	; (8003be4 <HAL_DMA_IRQHandler+0x6c0>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d00e      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x516>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a71      	ldr	r2, [pc, #452]	; (8003be8 <HAL_DMA_IRQHandler+0x6c4>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d009      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x516>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a70      	ldr	r2, [pc, #448]	; (8003bec <HAL_DMA_IRQHandler+0x6c8>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d004      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x516>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a6e      	ldr	r2, [pc, #440]	; (8003bf0 <HAL_DMA_IRQHandler+0x6cc>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d10a      	bne.n	8003a50 <HAL_DMA_IRQHandler+0x52c>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0308 	and.w	r3, r3, #8
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	bf14      	ite	ne
 8003a48:	2301      	movne	r3, #1
 8003a4a:	2300      	moveq	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	e009      	b.n	8003a64 <HAL_DMA_IRQHandler+0x540>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0304 	and.w	r3, r3, #4
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	bf14      	ite	ne
 8003a5e:	2301      	movne	r3, #1
 8003a60:	2300      	moveq	r3, #0
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d03e      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6c:	f003 031f 	and.w	r3, r3, #31
 8003a70:	2210      	movs	r2, #16
 8003a72:	409a      	lsls	r2, r3
 8003a74:	6a3b      	ldr	r3, [r7, #32]
 8003a76:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d018      	beq.n	8003ab8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d108      	bne.n	8003aa6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d024      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	4798      	blx	r3
 8003aa4:	e01f      	b.n	8003ae6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d01b      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	4798      	blx	r3
 8003ab6:	e016      	b.n	8003ae6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d107      	bne.n	8003ad6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 0208 	bic.w	r2, r2, #8
 8003ad4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aea:	f003 031f 	and.w	r3, r3, #31
 8003aee:	2220      	movs	r2, #32
 8003af0:	409a      	lsls	r2, r3
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	4013      	ands	r3, r2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 8110 	beq.w	8003d1c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a2c      	ldr	r2, [pc, #176]	; (8003bb4 <HAL_DMA_IRQHandler+0x690>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d04a      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x678>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a2b      	ldr	r2, [pc, #172]	; (8003bb8 <HAL_DMA_IRQHandler+0x694>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d045      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x678>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a29      	ldr	r2, [pc, #164]	; (8003bbc <HAL_DMA_IRQHandler+0x698>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d040      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x678>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a28      	ldr	r2, [pc, #160]	; (8003bc0 <HAL_DMA_IRQHandler+0x69c>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d03b      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x678>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a26      	ldr	r2, [pc, #152]	; (8003bc4 <HAL_DMA_IRQHandler+0x6a0>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d036      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x678>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a25      	ldr	r2, [pc, #148]	; (8003bc8 <HAL_DMA_IRQHandler+0x6a4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d031      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x678>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a23      	ldr	r2, [pc, #140]	; (8003bcc <HAL_DMA_IRQHandler+0x6a8>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d02c      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x678>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a22      	ldr	r2, [pc, #136]	; (8003bd0 <HAL_DMA_IRQHandler+0x6ac>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d027      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x678>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a20      	ldr	r2, [pc, #128]	; (8003bd4 <HAL_DMA_IRQHandler+0x6b0>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d022      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x678>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a1f      	ldr	r2, [pc, #124]	; (8003bd8 <HAL_DMA_IRQHandler+0x6b4>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d01d      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x678>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a1d      	ldr	r2, [pc, #116]	; (8003bdc <HAL_DMA_IRQHandler+0x6b8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d018      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x678>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a1c      	ldr	r2, [pc, #112]	; (8003be0 <HAL_DMA_IRQHandler+0x6bc>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d013      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x678>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a1a      	ldr	r2, [pc, #104]	; (8003be4 <HAL_DMA_IRQHandler+0x6c0>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d00e      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x678>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a19      	ldr	r2, [pc, #100]	; (8003be8 <HAL_DMA_IRQHandler+0x6c4>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d009      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x678>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a17      	ldr	r2, [pc, #92]	; (8003bec <HAL_DMA_IRQHandler+0x6c8>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d004      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x678>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a16      	ldr	r2, [pc, #88]	; (8003bf0 <HAL_DMA_IRQHandler+0x6cc>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d12b      	bne.n	8003bf4 <HAL_DMA_IRQHandler+0x6d0>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0310 	and.w	r3, r3, #16
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	bf14      	ite	ne
 8003baa:	2301      	movne	r3, #1
 8003bac:	2300      	moveq	r3, #0
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	e02a      	b.n	8003c08 <HAL_DMA_IRQHandler+0x6e4>
 8003bb2:	bf00      	nop
 8003bb4:	40020010 	.word	0x40020010
 8003bb8:	40020028 	.word	0x40020028
 8003bbc:	40020040 	.word	0x40020040
 8003bc0:	40020058 	.word	0x40020058
 8003bc4:	40020070 	.word	0x40020070
 8003bc8:	40020088 	.word	0x40020088
 8003bcc:	400200a0 	.word	0x400200a0
 8003bd0:	400200b8 	.word	0x400200b8
 8003bd4:	40020410 	.word	0x40020410
 8003bd8:	40020428 	.word	0x40020428
 8003bdc:	40020440 	.word	0x40020440
 8003be0:	40020458 	.word	0x40020458
 8003be4:	40020470 	.word	0x40020470
 8003be8:	40020488 	.word	0x40020488
 8003bec:	400204a0 	.word	0x400204a0
 8003bf0:	400204b8 	.word	0x400204b8
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	bf14      	ite	ne
 8003c02:	2301      	movne	r3, #1
 8003c04:	2300      	moveq	r3, #0
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 8087 	beq.w	8003d1c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c12:	f003 031f 	and.w	r3, r3, #31
 8003c16:	2220      	movs	r2, #32
 8003c18:	409a      	lsls	r2, r3
 8003c1a:	6a3b      	ldr	r3, [r7, #32]
 8003c1c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d139      	bne.n	8003c9e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0216 	bic.w	r2, r2, #22
 8003c38:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	695a      	ldr	r2, [r3, #20]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c48:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d103      	bne.n	8003c5a <HAL_DMA_IRQHandler+0x736>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d007      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 0208 	bic.w	r2, r2, #8
 8003c68:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6e:	f003 031f 	and.w	r3, r3, #31
 8003c72:	223f      	movs	r2, #63	; 0x3f
 8003c74:	409a      	lsls	r2, r3
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 834a 	beq.w	8004328 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	4798      	blx	r3
          }
          return;
 8003c9c:	e344      	b.n	8004328 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d018      	beq.n	8003cde <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d108      	bne.n	8003ccc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d02c      	beq.n	8003d1c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	4798      	blx	r3
 8003cca:	e027      	b.n	8003d1c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d023      	beq.n	8003d1c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	4798      	blx	r3
 8003cdc:	e01e      	b.n	8003d1c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10f      	bne.n	8003d0c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f022 0210 	bic.w	r2, r2, #16
 8003cfa:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 8306 	beq.w	8004332 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f000 8088 	beq.w	8003e44 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2204      	movs	r2, #4
 8003d38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a7a      	ldr	r2, [pc, #488]	; (8003f2c <HAL_DMA_IRQHandler+0xa08>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d04a      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x8b8>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a79      	ldr	r2, [pc, #484]	; (8003f30 <HAL_DMA_IRQHandler+0xa0c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d045      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x8b8>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a77      	ldr	r2, [pc, #476]	; (8003f34 <HAL_DMA_IRQHandler+0xa10>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d040      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x8b8>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a76      	ldr	r2, [pc, #472]	; (8003f38 <HAL_DMA_IRQHandler+0xa14>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d03b      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x8b8>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a74      	ldr	r2, [pc, #464]	; (8003f3c <HAL_DMA_IRQHandler+0xa18>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d036      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x8b8>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a73      	ldr	r2, [pc, #460]	; (8003f40 <HAL_DMA_IRQHandler+0xa1c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d031      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x8b8>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a71      	ldr	r2, [pc, #452]	; (8003f44 <HAL_DMA_IRQHandler+0xa20>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d02c      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x8b8>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a70      	ldr	r2, [pc, #448]	; (8003f48 <HAL_DMA_IRQHandler+0xa24>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d027      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x8b8>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a6e      	ldr	r2, [pc, #440]	; (8003f4c <HAL_DMA_IRQHandler+0xa28>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d022      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x8b8>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a6d      	ldr	r2, [pc, #436]	; (8003f50 <HAL_DMA_IRQHandler+0xa2c>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d01d      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x8b8>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a6b      	ldr	r2, [pc, #428]	; (8003f54 <HAL_DMA_IRQHandler+0xa30>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d018      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x8b8>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a6a      	ldr	r2, [pc, #424]	; (8003f58 <HAL_DMA_IRQHandler+0xa34>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d013      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x8b8>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a68      	ldr	r2, [pc, #416]	; (8003f5c <HAL_DMA_IRQHandler+0xa38>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d00e      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x8b8>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a67      	ldr	r2, [pc, #412]	; (8003f60 <HAL_DMA_IRQHandler+0xa3c>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d009      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x8b8>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a65      	ldr	r2, [pc, #404]	; (8003f64 <HAL_DMA_IRQHandler+0xa40>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d004      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x8b8>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a64      	ldr	r2, [pc, #400]	; (8003f68 <HAL_DMA_IRQHandler+0xa44>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d108      	bne.n	8003dee <HAL_DMA_IRQHandler+0x8ca>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 0201 	bic.w	r2, r2, #1
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	e007      	b.n	8003dfe <HAL_DMA_IRQHandler+0x8da>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0201 	bic.w	r2, r2, #1
 8003dfc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	3301      	adds	r3, #1
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d307      	bcc.n	8003e1a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1f2      	bne.n	8003dfe <HAL_DMA_IRQHandler+0x8da>
 8003e18:	e000      	b.n	8003e1c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003e1a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d004      	beq.n	8003e3c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2203      	movs	r2, #3
 8003e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003e3a:	e003      	b.n	8003e44 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 8272 	beq.w	8004332 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	4798      	blx	r3
 8003e56:	e26c      	b.n	8004332 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a43      	ldr	r2, [pc, #268]	; (8003f6c <HAL_DMA_IRQHandler+0xa48>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d022      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x984>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a42      	ldr	r2, [pc, #264]	; (8003f70 <HAL_DMA_IRQHandler+0xa4c>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d01d      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x984>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a40      	ldr	r2, [pc, #256]	; (8003f74 <HAL_DMA_IRQHandler+0xa50>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d018      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x984>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a3f      	ldr	r2, [pc, #252]	; (8003f78 <HAL_DMA_IRQHandler+0xa54>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d013      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x984>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a3d      	ldr	r2, [pc, #244]	; (8003f7c <HAL_DMA_IRQHandler+0xa58>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d00e      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x984>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a3c      	ldr	r2, [pc, #240]	; (8003f80 <HAL_DMA_IRQHandler+0xa5c>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d009      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x984>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a3a      	ldr	r2, [pc, #232]	; (8003f84 <HAL_DMA_IRQHandler+0xa60>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d004      	beq.n	8003ea8 <HAL_DMA_IRQHandler+0x984>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a39      	ldr	r2, [pc, #228]	; (8003f88 <HAL_DMA_IRQHandler+0xa64>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d101      	bne.n	8003eac <HAL_DMA_IRQHandler+0x988>
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e000      	b.n	8003eae <HAL_DMA_IRQHandler+0x98a>
 8003eac:	2300      	movs	r3, #0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 823f 	beq.w	8004332 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec0:	f003 031f 	and.w	r3, r3, #31
 8003ec4:	2204      	movs	r2, #4
 8003ec6:	409a      	lsls	r2, r3
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 80cd 	beq.w	800406c <HAL_DMA_IRQHandler+0xb48>
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 80c7 	beq.w	800406c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee2:	f003 031f 	and.w	r3, r3, #31
 8003ee6:	2204      	movs	r2, #4
 8003ee8:	409a      	lsls	r2, r3
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d049      	beq.n	8003f8c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d109      	bne.n	8003f16 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 8210 	beq.w	800432c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f14:	e20a      	b.n	800432c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f000 8206 	beq.w	800432c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f28:	e200      	b.n	800432c <HAL_DMA_IRQHandler+0xe08>
 8003f2a:	bf00      	nop
 8003f2c:	40020010 	.word	0x40020010
 8003f30:	40020028 	.word	0x40020028
 8003f34:	40020040 	.word	0x40020040
 8003f38:	40020058 	.word	0x40020058
 8003f3c:	40020070 	.word	0x40020070
 8003f40:	40020088 	.word	0x40020088
 8003f44:	400200a0 	.word	0x400200a0
 8003f48:	400200b8 	.word	0x400200b8
 8003f4c:	40020410 	.word	0x40020410
 8003f50:	40020428 	.word	0x40020428
 8003f54:	40020440 	.word	0x40020440
 8003f58:	40020458 	.word	0x40020458
 8003f5c:	40020470 	.word	0x40020470
 8003f60:	40020488 	.word	0x40020488
 8003f64:	400204a0 	.word	0x400204a0
 8003f68:	400204b8 	.word	0x400204b8
 8003f6c:	58025408 	.word	0x58025408
 8003f70:	5802541c 	.word	0x5802541c
 8003f74:	58025430 	.word	0x58025430
 8003f78:	58025444 	.word	0x58025444
 8003f7c:	58025458 	.word	0x58025458
 8003f80:	5802546c 	.word	0x5802546c
 8003f84:	58025480 	.word	0x58025480
 8003f88:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	f003 0320 	and.w	r3, r3, #32
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d160      	bne.n	8004058 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a8c      	ldr	r2, [pc, #560]	; (80041cc <HAL_DMA_IRQHandler+0xca8>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d04a      	beq.n	8004036 <HAL_DMA_IRQHandler+0xb12>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a8a      	ldr	r2, [pc, #552]	; (80041d0 <HAL_DMA_IRQHandler+0xcac>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d045      	beq.n	8004036 <HAL_DMA_IRQHandler+0xb12>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a89      	ldr	r2, [pc, #548]	; (80041d4 <HAL_DMA_IRQHandler+0xcb0>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d040      	beq.n	8004036 <HAL_DMA_IRQHandler+0xb12>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a87      	ldr	r2, [pc, #540]	; (80041d8 <HAL_DMA_IRQHandler+0xcb4>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d03b      	beq.n	8004036 <HAL_DMA_IRQHandler+0xb12>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a86      	ldr	r2, [pc, #536]	; (80041dc <HAL_DMA_IRQHandler+0xcb8>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d036      	beq.n	8004036 <HAL_DMA_IRQHandler+0xb12>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a84      	ldr	r2, [pc, #528]	; (80041e0 <HAL_DMA_IRQHandler+0xcbc>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d031      	beq.n	8004036 <HAL_DMA_IRQHandler+0xb12>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a83      	ldr	r2, [pc, #524]	; (80041e4 <HAL_DMA_IRQHandler+0xcc0>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d02c      	beq.n	8004036 <HAL_DMA_IRQHandler+0xb12>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a81      	ldr	r2, [pc, #516]	; (80041e8 <HAL_DMA_IRQHandler+0xcc4>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d027      	beq.n	8004036 <HAL_DMA_IRQHandler+0xb12>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a80      	ldr	r2, [pc, #512]	; (80041ec <HAL_DMA_IRQHandler+0xcc8>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d022      	beq.n	8004036 <HAL_DMA_IRQHandler+0xb12>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a7e      	ldr	r2, [pc, #504]	; (80041f0 <HAL_DMA_IRQHandler+0xccc>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d01d      	beq.n	8004036 <HAL_DMA_IRQHandler+0xb12>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a7d      	ldr	r2, [pc, #500]	; (80041f4 <HAL_DMA_IRQHandler+0xcd0>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d018      	beq.n	8004036 <HAL_DMA_IRQHandler+0xb12>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a7b      	ldr	r2, [pc, #492]	; (80041f8 <HAL_DMA_IRQHandler+0xcd4>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d013      	beq.n	8004036 <HAL_DMA_IRQHandler+0xb12>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a7a      	ldr	r2, [pc, #488]	; (80041fc <HAL_DMA_IRQHandler+0xcd8>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d00e      	beq.n	8004036 <HAL_DMA_IRQHandler+0xb12>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a78      	ldr	r2, [pc, #480]	; (8004200 <HAL_DMA_IRQHandler+0xcdc>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d009      	beq.n	8004036 <HAL_DMA_IRQHandler+0xb12>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a77      	ldr	r2, [pc, #476]	; (8004204 <HAL_DMA_IRQHandler+0xce0>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d004      	beq.n	8004036 <HAL_DMA_IRQHandler+0xb12>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a75      	ldr	r2, [pc, #468]	; (8004208 <HAL_DMA_IRQHandler+0xce4>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d108      	bne.n	8004048 <HAL_DMA_IRQHandler+0xb24>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 0208 	bic.w	r2, r2, #8
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	e007      	b.n	8004058 <HAL_DMA_IRQHandler+0xb34>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 0204 	bic.w	r2, r2, #4
 8004056:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 8165 	beq.w	800432c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800406a:	e15f      	b.n	800432c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004070:	f003 031f 	and.w	r3, r3, #31
 8004074:	2202      	movs	r2, #2
 8004076:	409a      	lsls	r2, r3
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	4013      	ands	r3, r2
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 80c5 	beq.w	800420c <HAL_DMA_IRQHandler+0xce8>
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 80bf 	beq.w	800420c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004092:	f003 031f 	and.w	r3, r3, #31
 8004096:	2202      	movs	r2, #2
 8004098:	409a      	lsls	r2, r3
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d018      	beq.n	80040da <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d109      	bne.n	80040c6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 813a 	beq.w	8004330 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040c4:	e134      	b.n	8004330 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 8130 	beq.w	8004330 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040d8:	e12a      	b.n	8004330 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	f003 0320 	and.w	r3, r3, #32
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d168      	bne.n	80041b6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a38      	ldr	r2, [pc, #224]	; (80041cc <HAL_DMA_IRQHandler+0xca8>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d04a      	beq.n	8004184 <HAL_DMA_IRQHandler+0xc60>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a37      	ldr	r2, [pc, #220]	; (80041d0 <HAL_DMA_IRQHandler+0xcac>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d045      	beq.n	8004184 <HAL_DMA_IRQHandler+0xc60>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a35      	ldr	r2, [pc, #212]	; (80041d4 <HAL_DMA_IRQHandler+0xcb0>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d040      	beq.n	8004184 <HAL_DMA_IRQHandler+0xc60>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a34      	ldr	r2, [pc, #208]	; (80041d8 <HAL_DMA_IRQHandler+0xcb4>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d03b      	beq.n	8004184 <HAL_DMA_IRQHandler+0xc60>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a32      	ldr	r2, [pc, #200]	; (80041dc <HAL_DMA_IRQHandler+0xcb8>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d036      	beq.n	8004184 <HAL_DMA_IRQHandler+0xc60>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a31      	ldr	r2, [pc, #196]	; (80041e0 <HAL_DMA_IRQHandler+0xcbc>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d031      	beq.n	8004184 <HAL_DMA_IRQHandler+0xc60>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a2f      	ldr	r2, [pc, #188]	; (80041e4 <HAL_DMA_IRQHandler+0xcc0>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d02c      	beq.n	8004184 <HAL_DMA_IRQHandler+0xc60>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a2e      	ldr	r2, [pc, #184]	; (80041e8 <HAL_DMA_IRQHandler+0xcc4>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d027      	beq.n	8004184 <HAL_DMA_IRQHandler+0xc60>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a2c      	ldr	r2, [pc, #176]	; (80041ec <HAL_DMA_IRQHandler+0xcc8>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d022      	beq.n	8004184 <HAL_DMA_IRQHandler+0xc60>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a2b      	ldr	r2, [pc, #172]	; (80041f0 <HAL_DMA_IRQHandler+0xccc>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d01d      	beq.n	8004184 <HAL_DMA_IRQHandler+0xc60>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a29      	ldr	r2, [pc, #164]	; (80041f4 <HAL_DMA_IRQHandler+0xcd0>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d018      	beq.n	8004184 <HAL_DMA_IRQHandler+0xc60>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a28      	ldr	r2, [pc, #160]	; (80041f8 <HAL_DMA_IRQHandler+0xcd4>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d013      	beq.n	8004184 <HAL_DMA_IRQHandler+0xc60>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a26      	ldr	r2, [pc, #152]	; (80041fc <HAL_DMA_IRQHandler+0xcd8>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d00e      	beq.n	8004184 <HAL_DMA_IRQHandler+0xc60>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a25      	ldr	r2, [pc, #148]	; (8004200 <HAL_DMA_IRQHandler+0xcdc>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d009      	beq.n	8004184 <HAL_DMA_IRQHandler+0xc60>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a23      	ldr	r2, [pc, #140]	; (8004204 <HAL_DMA_IRQHandler+0xce0>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d004      	beq.n	8004184 <HAL_DMA_IRQHandler+0xc60>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a22      	ldr	r2, [pc, #136]	; (8004208 <HAL_DMA_IRQHandler+0xce4>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d108      	bne.n	8004196 <HAL_DMA_IRQHandler+0xc72>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 0214 	bic.w	r2, r2, #20
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	e007      	b.n	80041a6 <HAL_DMA_IRQHandler+0xc82>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f022 020a 	bic.w	r2, r2, #10
 80041a4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 80b8 	beq.w	8004330 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041c8:	e0b2      	b.n	8004330 <HAL_DMA_IRQHandler+0xe0c>
 80041ca:	bf00      	nop
 80041cc:	40020010 	.word	0x40020010
 80041d0:	40020028 	.word	0x40020028
 80041d4:	40020040 	.word	0x40020040
 80041d8:	40020058 	.word	0x40020058
 80041dc:	40020070 	.word	0x40020070
 80041e0:	40020088 	.word	0x40020088
 80041e4:	400200a0 	.word	0x400200a0
 80041e8:	400200b8 	.word	0x400200b8
 80041ec:	40020410 	.word	0x40020410
 80041f0:	40020428 	.word	0x40020428
 80041f4:	40020440 	.word	0x40020440
 80041f8:	40020458 	.word	0x40020458
 80041fc:	40020470 	.word	0x40020470
 8004200:	40020488 	.word	0x40020488
 8004204:	400204a0 	.word	0x400204a0
 8004208:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004210:	f003 031f 	and.w	r3, r3, #31
 8004214:	2208      	movs	r2, #8
 8004216:	409a      	lsls	r2, r3
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	4013      	ands	r3, r2
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 8088 	beq.w	8004332 <HAL_DMA_IRQHandler+0xe0e>
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	f003 0308 	and.w	r3, r3, #8
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 8082 	beq.w	8004332 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a41      	ldr	r2, [pc, #260]	; (8004338 <HAL_DMA_IRQHandler+0xe14>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d04a      	beq.n	80042ce <HAL_DMA_IRQHandler+0xdaa>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a3f      	ldr	r2, [pc, #252]	; (800433c <HAL_DMA_IRQHandler+0xe18>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d045      	beq.n	80042ce <HAL_DMA_IRQHandler+0xdaa>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a3e      	ldr	r2, [pc, #248]	; (8004340 <HAL_DMA_IRQHandler+0xe1c>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d040      	beq.n	80042ce <HAL_DMA_IRQHandler+0xdaa>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a3c      	ldr	r2, [pc, #240]	; (8004344 <HAL_DMA_IRQHandler+0xe20>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d03b      	beq.n	80042ce <HAL_DMA_IRQHandler+0xdaa>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a3b      	ldr	r2, [pc, #236]	; (8004348 <HAL_DMA_IRQHandler+0xe24>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d036      	beq.n	80042ce <HAL_DMA_IRQHandler+0xdaa>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a39      	ldr	r2, [pc, #228]	; (800434c <HAL_DMA_IRQHandler+0xe28>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d031      	beq.n	80042ce <HAL_DMA_IRQHandler+0xdaa>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a38      	ldr	r2, [pc, #224]	; (8004350 <HAL_DMA_IRQHandler+0xe2c>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d02c      	beq.n	80042ce <HAL_DMA_IRQHandler+0xdaa>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a36      	ldr	r2, [pc, #216]	; (8004354 <HAL_DMA_IRQHandler+0xe30>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d027      	beq.n	80042ce <HAL_DMA_IRQHandler+0xdaa>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a35      	ldr	r2, [pc, #212]	; (8004358 <HAL_DMA_IRQHandler+0xe34>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d022      	beq.n	80042ce <HAL_DMA_IRQHandler+0xdaa>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a33      	ldr	r2, [pc, #204]	; (800435c <HAL_DMA_IRQHandler+0xe38>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d01d      	beq.n	80042ce <HAL_DMA_IRQHandler+0xdaa>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a32      	ldr	r2, [pc, #200]	; (8004360 <HAL_DMA_IRQHandler+0xe3c>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d018      	beq.n	80042ce <HAL_DMA_IRQHandler+0xdaa>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a30      	ldr	r2, [pc, #192]	; (8004364 <HAL_DMA_IRQHandler+0xe40>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d013      	beq.n	80042ce <HAL_DMA_IRQHandler+0xdaa>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a2f      	ldr	r2, [pc, #188]	; (8004368 <HAL_DMA_IRQHandler+0xe44>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d00e      	beq.n	80042ce <HAL_DMA_IRQHandler+0xdaa>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a2d      	ldr	r2, [pc, #180]	; (800436c <HAL_DMA_IRQHandler+0xe48>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d009      	beq.n	80042ce <HAL_DMA_IRQHandler+0xdaa>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a2c      	ldr	r2, [pc, #176]	; (8004370 <HAL_DMA_IRQHandler+0xe4c>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d004      	beq.n	80042ce <HAL_DMA_IRQHandler+0xdaa>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a2a      	ldr	r2, [pc, #168]	; (8004374 <HAL_DMA_IRQHandler+0xe50>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d108      	bne.n	80042e0 <HAL_DMA_IRQHandler+0xdbc>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 021c 	bic.w	r2, r2, #28
 80042dc:	601a      	str	r2, [r3, #0]
 80042de:	e007      	b.n	80042f0 <HAL_DMA_IRQHandler+0xdcc>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 020e 	bic.w	r2, r2, #14
 80042ee:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f4:	f003 031f 	and.w	r3, r3, #31
 80042f8:	2201      	movs	r2, #1
 80042fa:	409a      	lsls	r2, r3
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800431a:	2b00      	cmp	r3, #0
 800431c:	d009      	beq.n	8004332 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	4798      	blx	r3
 8004326:	e004      	b.n	8004332 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004328:	bf00      	nop
 800432a:	e002      	b.n	8004332 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800432c:	bf00      	nop
 800432e:	e000      	b.n	8004332 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004330:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004332:	3728      	adds	r7, #40	; 0x28
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	40020010 	.word	0x40020010
 800433c:	40020028 	.word	0x40020028
 8004340:	40020040 	.word	0x40020040
 8004344:	40020058 	.word	0x40020058
 8004348:	40020070 	.word	0x40020070
 800434c:	40020088 	.word	0x40020088
 8004350:	400200a0 	.word	0x400200a0
 8004354:	400200b8 	.word	0x400200b8
 8004358:	40020410 	.word	0x40020410
 800435c:	40020428 	.word	0x40020428
 8004360:	40020440 	.word	0x40020440
 8004364:	40020458 	.word	0x40020458
 8004368:	40020470 	.word	0x40020470
 800436c:	40020488 	.word	0x40020488
 8004370:	400204a0 	.word	0x400204a0
 8004374:	400204b8 	.word	0x400204b8

08004378 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a42      	ldr	r2, [pc, #264]	; (8004490 <DMA_CalcBaseAndBitshift+0x118>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d04a      	beq.n	8004420 <DMA_CalcBaseAndBitshift+0xa8>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a41      	ldr	r2, [pc, #260]	; (8004494 <DMA_CalcBaseAndBitshift+0x11c>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d045      	beq.n	8004420 <DMA_CalcBaseAndBitshift+0xa8>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a3f      	ldr	r2, [pc, #252]	; (8004498 <DMA_CalcBaseAndBitshift+0x120>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d040      	beq.n	8004420 <DMA_CalcBaseAndBitshift+0xa8>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a3e      	ldr	r2, [pc, #248]	; (800449c <DMA_CalcBaseAndBitshift+0x124>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d03b      	beq.n	8004420 <DMA_CalcBaseAndBitshift+0xa8>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a3c      	ldr	r2, [pc, #240]	; (80044a0 <DMA_CalcBaseAndBitshift+0x128>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d036      	beq.n	8004420 <DMA_CalcBaseAndBitshift+0xa8>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a3b      	ldr	r2, [pc, #236]	; (80044a4 <DMA_CalcBaseAndBitshift+0x12c>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d031      	beq.n	8004420 <DMA_CalcBaseAndBitshift+0xa8>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a39      	ldr	r2, [pc, #228]	; (80044a8 <DMA_CalcBaseAndBitshift+0x130>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d02c      	beq.n	8004420 <DMA_CalcBaseAndBitshift+0xa8>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a38      	ldr	r2, [pc, #224]	; (80044ac <DMA_CalcBaseAndBitshift+0x134>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d027      	beq.n	8004420 <DMA_CalcBaseAndBitshift+0xa8>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a36      	ldr	r2, [pc, #216]	; (80044b0 <DMA_CalcBaseAndBitshift+0x138>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d022      	beq.n	8004420 <DMA_CalcBaseAndBitshift+0xa8>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a35      	ldr	r2, [pc, #212]	; (80044b4 <DMA_CalcBaseAndBitshift+0x13c>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d01d      	beq.n	8004420 <DMA_CalcBaseAndBitshift+0xa8>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a33      	ldr	r2, [pc, #204]	; (80044b8 <DMA_CalcBaseAndBitshift+0x140>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d018      	beq.n	8004420 <DMA_CalcBaseAndBitshift+0xa8>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a32      	ldr	r2, [pc, #200]	; (80044bc <DMA_CalcBaseAndBitshift+0x144>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d013      	beq.n	8004420 <DMA_CalcBaseAndBitshift+0xa8>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a30      	ldr	r2, [pc, #192]	; (80044c0 <DMA_CalcBaseAndBitshift+0x148>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d00e      	beq.n	8004420 <DMA_CalcBaseAndBitshift+0xa8>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a2f      	ldr	r2, [pc, #188]	; (80044c4 <DMA_CalcBaseAndBitshift+0x14c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d009      	beq.n	8004420 <DMA_CalcBaseAndBitshift+0xa8>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a2d      	ldr	r2, [pc, #180]	; (80044c8 <DMA_CalcBaseAndBitshift+0x150>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d004      	beq.n	8004420 <DMA_CalcBaseAndBitshift+0xa8>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a2c      	ldr	r2, [pc, #176]	; (80044cc <DMA_CalcBaseAndBitshift+0x154>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d101      	bne.n	8004424 <DMA_CalcBaseAndBitshift+0xac>
 8004420:	2301      	movs	r3, #1
 8004422:	e000      	b.n	8004426 <DMA_CalcBaseAndBitshift+0xae>
 8004424:	2300      	movs	r3, #0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d024      	beq.n	8004474 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	b2db      	uxtb	r3, r3
 8004430:	3b10      	subs	r3, #16
 8004432:	4a27      	ldr	r2, [pc, #156]	; (80044d0 <DMA_CalcBaseAndBitshift+0x158>)
 8004434:	fba2 2303 	umull	r2, r3, r2, r3
 8004438:	091b      	lsrs	r3, r3, #4
 800443a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f003 0307 	and.w	r3, r3, #7
 8004442:	4a24      	ldr	r2, [pc, #144]	; (80044d4 <DMA_CalcBaseAndBitshift+0x15c>)
 8004444:	5cd3      	ldrb	r3, [r2, r3]
 8004446:	461a      	mov	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2b03      	cmp	r3, #3
 8004450:	d908      	bls.n	8004464 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	461a      	mov	r2, r3
 8004458:	4b1f      	ldr	r3, [pc, #124]	; (80044d8 <DMA_CalcBaseAndBitshift+0x160>)
 800445a:	4013      	ands	r3, r2
 800445c:	1d1a      	adds	r2, r3, #4
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	659a      	str	r2, [r3, #88]	; 0x58
 8004462:	e00d      	b.n	8004480 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	461a      	mov	r2, r3
 800446a:	4b1b      	ldr	r3, [pc, #108]	; (80044d8 <DMA_CalcBaseAndBitshift+0x160>)
 800446c:	4013      	ands	r3, r2
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6593      	str	r3, [r2, #88]	; 0x58
 8004472:	e005      	b.n	8004480 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004484:	4618      	mov	r0, r3
 8004486:	3714      	adds	r7, #20
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	40020010 	.word	0x40020010
 8004494:	40020028 	.word	0x40020028
 8004498:	40020040 	.word	0x40020040
 800449c:	40020058 	.word	0x40020058
 80044a0:	40020070 	.word	0x40020070
 80044a4:	40020088 	.word	0x40020088
 80044a8:	400200a0 	.word	0x400200a0
 80044ac:	400200b8 	.word	0x400200b8
 80044b0:	40020410 	.word	0x40020410
 80044b4:	40020428 	.word	0x40020428
 80044b8:	40020440 	.word	0x40020440
 80044bc:	40020458 	.word	0x40020458
 80044c0:	40020470 	.word	0x40020470
 80044c4:	40020488 	.word	0x40020488
 80044c8:	400204a0 	.word	0x400204a0
 80044cc:	400204b8 	.word	0x400204b8
 80044d0:	aaaaaaab 	.word	0xaaaaaaab
 80044d4:	0801f9b8 	.word	0x0801f9b8
 80044d8:	fffffc00 	.word	0xfffffc00

080044dc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044e4:	2300      	movs	r3, #0
 80044e6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d120      	bne.n	8004532 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f4:	2b03      	cmp	r3, #3
 80044f6:	d858      	bhi.n	80045aa <DMA_CheckFifoParam+0xce>
 80044f8:	a201      	add	r2, pc, #4	; (adr r2, 8004500 <DMA_CheckFifoParam+0x24>)
 80044fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044fe:	bf00      	nop
 8004500:	08004511 	.word	0x08004511
 8004504:	08004523 	.word	0x08004523
 8004508:	08004511 	.word	0x08004511
 800450c:	080045ab 	.word	0x080045ab
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004514:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d048      	beq.n	80045ae <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004520:	e045      	b.n	80045ae <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004526:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800452a:	d142      	bne.n	80045b2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004530:	e03f      	b.n	80045b2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800453a:	d123      	bne.n	8004584 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004540:	2b03      	cmp	r3, #3
 8004542:	d838      	bhi.n	80045b6 <DMA_CheckFifoParam+0xda>
 8004544:	a201      	add	r2, pc, #4	; (adr r2, 800454c <DMA_CheckFifoParam+0x70>)
 8004546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454a:	bf00      	nop
 800454c:	0800455d 	.word	0x0800455d
 8004550:	08004563 	.word	0x08004563
 8004554:	0800455d 	.word	0x0800455d
 8004558:	08004575 	.word	0x08004575
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	73fb      	strb	r3, [r7, #15]
        break;
 8004560:	e030      	b.n	80045c4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004566:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d025      	beq.n	80045ba <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004572:	e022      	b.n	80045ba <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004578:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800457c:	d11f      	bne.n	80045be <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004582:	e01c      	b.n	80045be <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004588:	2b02      	cmp	r3, #2
 800458a:	d902      	bls.n	8004592 <DMA_CheckFifoParam+0xb6>
 800458c:	2b03      	cmp	r3, #3
 800458e:	d003      	beq.n	8004598 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004590:	e018      	b.n	80045c4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	73fb      	strb	r3, [r7, #15]
        break;
 8004596:	e015      	b.n	80045c4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00e      	beq.n	80045c2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	73fb      	strb	r3, [r7, #15]
    break;
 80045a8:	e00b      	b.n	80045c2 <DMA_CheckFifoParam+0xe6>
        break;
 80045aa:	bf00      	nop
 80045ac:	e00a      	b.n	80045c4 <DMA_CheckFifoParam+0xe8>
        break;
 80045ae:	bf00      	nop
 80045b0:	e008      	b.n	80045c4 <DMA_CheckFifoParam+0xe8>
        break;
 80045b2:	bf00      	nop
 80045b4:	e006      	b.n	80045c4 <DMA_CheckFifoParam+0xe8>
        break;
 80045b6:	bf00      	nop
 80045b8:	e004      	b.n	80045c4 <DMA_CheckFifoParam+0xe8>
        break;
 80045ba:	bf00      	nop
 80045bc:	e002      	b.n	80045c4 <DMA_CheckFifoParam+0xe8>
        break;
 80045be:	bf00      	nop
 80045c0:	e000      	b.n	80045c4 <DMA_CheckFifoParam+0xe8>
    break;
 80045c2:	bf00      	nop
    }
  }

  return status;
 80045c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop

080045d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a38      	ldr	r2, [pc, #224]	; (80046c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d022      	beq.n	8004632 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a36      	ldr	r2, [pc, #216]	; (80046cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d01d      	beq.n	8004632 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a35      	ldr	r2, [pc, #212]	; (80046d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d018      	beq.n	8004632 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a33      	ldr	r2, [pc, #204]	; (80046d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d013      	beq.n	8004632 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a32      	ldr	r2, [pc, #200]	; (80046d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d00e      	beq.n	8004632 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a30      	ldr	r2, [pc, #192]	; (80046dc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d009      	beq.n	8004632 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a2f      	ldr	r2, [pc, #188]	; (80046e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d004      	beq.n	8004632 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a2d      	ldr	r2, [pc, #180]	; (80046e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d101      	bne.n	8004636 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004632:	2301      	movs	r3, #1
 8004634:	e000      	b.n	8004638 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004636:	2300      	movs	r3, #0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d01a      	beq.n	8004672 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	b2db      	uxtb	r3, r3
 8004642:	3b08      	subs	r3, #8
 8004644:	4a28      	ldr	r2, [pc, #160]	; (80046e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004646:	fba2 2303 	umull	r2, r3, r2, r3
 800464a:	091b      	lsrs	r3, r3, #4
 800464c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	4b26      	ldr	r3, [pc, #152]	; (80046ec <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004652:	4413      	add	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	461a      	mov	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a24      	ldr	r2, [pc, #144]	; (80046f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004660:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f003 031f 	and.w	r3, r3, #31
 8004668:	2201      	movs	r2, #1
 800466a:	409a      	lsls	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004670:	e024      	b.n	80046bc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	b2db      	uxtb	r3, r3
 8004678:	3b10      	subs	r3, #16
 800467a:	4a1e      	ldr	r2, [pc, #120]	; (80046f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800467c:	fba2 2303 	umull	r2, r3, r2, r3
 8004680:	091b      	lsrs	r3, r3, #4
 8004682:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	4a1c      	ldr	r2, [pc, #112]	; (80046f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d806      	bhi.n	800469a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	4a1b      	ldr	r2, [pc, #108]	; (80046fc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d902      	bls.n	800469a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	3308      	adds	r3, #8
 8004698:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	4b18      	ldr	r3, [pc, #96]	; (8004700 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800469e:	4413      	add	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	461a      	mov	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a16      	ldr	r2, [pc, #88]	; (8004704 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80046ac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f003 031f 	and.w	r3, r3, #31
 80046b4:	2201      	movs	r2, #1
 80046b6:	409a      	lsls	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	669a      	str	r2, [r3, #104]	; 0x68
}
 80046bc:	bf00      	nop
 80046be:	3714      	adds	r7, #20
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	58025408 	.word	0x58025408
 80046cc:	5802541c 	.word	0x5802541c
 80046d0:	58025430 	.word	0x58025430
 80046d4:	58025444 	.word	0x58025444
 80046d8:	58025458 	.word	0x58025458
 80046dc:	5802546c 	.word	0x5802546c
 80046e0:	58025480 	.word	0x58025480
 80046e4:	58025494 	.word	0x58025494
 80046e8:	cccccccd 	.word	0xcccccccd
 80046ec:	16009600 	.word	0x16009600
 80046f0:	58025880 	.word	0x58025880
 80046f4:	aaaaaaab 	.word	0xaaaaaaab
 80046f8:	400204b8 	.word	0x400204b8
 80046fc:	4002040f 	.word	0x4002040f
 8004700:	10008200 	.word	0x10008200
 8004704:	40020880 	.word	0x40020880

08004708 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	b2db      	uxtb	r3, r3
 8004716:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d04a      	beq.n	80047b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2b08      	cmp	r3, #8
 8004722:	d847      	bhi.n	80047b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a25      	ldr	r2, [pc, #148]	; (80047c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d022      	beq.n	8004774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a24      	ldr	r2, [pc, #144]	; (80047c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d01d      	beq.n	8004774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a22      	ldr	r2, [pc, #136]	; (80047c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d018      	beq.n	8004774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a21      	ldr	r2, [pc, #132]	; (80047cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d013      	beq.n	8004774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a1f      	ldr	r2, [pc, #124]	; (80047d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d00e      	beq.n	8004774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a1e      	ldr	r2, [pc, #120]	; (80047d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d009      	beq.n	8004774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a1c      	ldr	r2, [pc, #112]	; (80047d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d004      	beq.n	8004774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a1b      	ldr	r2, [pc, #108]	; (80047dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d101      	bne.n	8004778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004774:	2301      	movs	r3, #1
 8004776:	e000      	b.n	800477a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004778:	2300      	movs	r3, #0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00a      	beq.n	8004794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	4b17      	ldr	r3, [pc, #92]	; (80047e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004782:	4413      	add	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	461a      	mov	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a15      	ldr	r2, [pc, #84]	; (80047e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004790:	671a      	str	r2, [r3, #112]	; 0x70
 8004792:	e009      	b.n	80047a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	4b14      	ldr	r3, [pc, #80]	; (80047e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004798:	4413      	add	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	461a      	mov	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a11      	ldr	r2, [pc, #68]	; (80047ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80047a6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	3b01      	subs	r3, #1
 80047ac:	2201      	movs	r2, #1
 80047ae:	409a      	lsls	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80047b4:	bf00      	nop
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	58025408 	.word	0x58025408
 80047c4:	5802541c 	.word	0x5802541c
 80047c8:	58025430 	.word	0x58025430
 80047cc:	58025444 	.word	0x58025444
 80047d0:	58025458 	.word	0x58025458
 80047d4:	5802546c 	.word	0x5802546c
 80047d8:	58025480 	.word	0x58025480
 80047dc:	58025494 	.word	0x58025494
 80047e0:	1600963f 	.word	0x1600963f
 80047e4:	58025940 	.word	0x58025940
 80047e8:	1000823f 	.word	0x1000823f
 80047ec:	40020940 	.word	0x40020940

080047f0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e0c6      	b.n	8004990 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004806:	2b00      	cmp	r3, #0
 8004808:	d102      	bne.n	8004810 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7fc faca 	bl	8000da4 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2223      	movs	r2, #35	; 0x23
 8004814:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004816:	4b60      	ldr	r3, [pc, #384]	; (8004998 <HAL_ETH_Init+0x1a8>)
 8004818:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800481c:	4a5e      	ldr	r2, [pc, #376]	; (8004998 <HAL_ETH_Init+0x1a8>)
 800481e:	f043 0302 	orr.w	r3, r3, #2
 8004822:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004826:	4b5c      	ldr	r3, [pc, #368]	; (8004998 <HAL_ETH_Init+0x1a8>)
 8004828:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	60bb      	str	r3, [r7, #8]
 8004832:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	7a1b      	ldrb	r3, [r3, #8]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d103      	bne.n	8004844 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800483c:	2000      	movs	r0, #0
 800483e:	f7fd ff31 	bl	80026a4 <HAL_SYSCFG_ETHInterfaceSelect>
 8004842:	e003      	b.n	800484c <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004844:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004848:	f7fd ff2c 	bl	80026a4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f042 0201 	orr.w	r2, r2, #1
 800485e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004862:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004864:	f7fd fee2 	bl	800262c <HAL_GetTick>
 8004868:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800486a:	e00f      	b.n	800488c <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 800486c:	f7fd fede 	bl	800262c <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800487a:	d907      	bls.n	800488c <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2204      	movs	r2, #4
 8004880:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	22e0      	movs	r2, #224	; 0xe0
 8004886:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e081      	b.n	8004990 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1e6      	bne.n	800486c <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 fac0 	bl	8004e24 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80048a4:	f003 fc44 	bl	8008130 <HAL_RCC_GetHCLKFreq>
 80048a8:	4603      	mov	r3, r0
 80048aa:	4a3c      	ldr	r2, [pc, #240]	; (800499c <HAL_ETH_Init+0x1ac>)
 80048ac:	fba2 2303 	umull	r2, r3, r2, r3
 80048b0:	0c9a      	lsrs	r2, r3, #18
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	3a01      	subs	r2, #1
 80048b8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 fa13 	bl	8004ce8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80048d8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80048dc:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	f003 0303 	and.w	r3, r3, #3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d007      	beq.n	80048fa <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	22e0      	movs	r2, #224	; 0xe0
 80048f4:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e04a      	b.n	8004990 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	f241 1308 	movw	r3, #4360	; 0x1108
 8004902:	4413      	add	r3, r2
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	4b26      	ldr	r3, [pc, #152]	; (80049a0 <HAL_ETH_Init+0x1b0>)
 8004908:	4013      	ands	r3, r2
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6952      	ldr	r2, [r2, #20]
 800490e:	0052      	lsls	r2, r2, #1
 8004910:	6879      	ldr	r1, [r7, #4]
 8004912:	6809      	ldr	r1, [r1, #0]
 8004914:	431a      	orrs	r2, r3
 8004916:	f241 1308 	movw	r3, #4360	; 0x1108
 800491a:	440b      	add	r3, r1
 800491c:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 fad8 	bl	8004ed4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 fb1c 	bl	8004f62 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	3305      	adds	r3, #5
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	021a      	lsls	r2, r3, #8
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	3304      	adds	r3, #4
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	4619      	mov	r1, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	430a      	orrs	r2, r1
 8004944:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	3303      	adds	r3, #3
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	061a      	lsls	r2, r3, #24
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	3302      	adds	r3, #2
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	041b      	lsls	r3, r3, #16
 800495c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	3301      	adds	r3, #1
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004968:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004976:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004978:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2210      	movs	r2, #16
 8004986:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2210      	movs	r2, #16
 800498c:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	58024400 	.word	0x58024400
 800499c:	431bde83 	.word	0x431bde83
 80049a0:	ffff8001 	.word	0xffff8001

080049a4 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80049b6:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	791b      	ldrb	r3, [r3, #4]
 80049bc:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80049be:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	7b1b      	ldrb	r3, [r3, #12]
 80049c4:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80049c6:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	7b5b      	ldrb	r3, [r3, #13]
 80049cc:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80049ce:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	7b9b      	ldrb	r3, [r3, #14]
 80049d4:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80049d6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	7bdb      	ldrb	r3, [r3, #15]
 80049dc:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80049de:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80049e0:	683a      	ldr	r2, [r7, #0]
 80049e2:	7c12      	ldrb	r2, [r2, #16]
 80049e4:	2a00      	cmp	r2, #0
 80049e6:	d102      	bne.n	80049ee <ETH_SetMACConfig+0x4a>
 80049e8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80049ec:	e000      	b.n	80049f0 <ETH_SetMACConfig+0x4c>
 80049ee:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80049f0:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	7c52      	ldrb	r2, [r2, #17]
 80049f6:	2a00      	cmp	r2, #0
 80049f8:	d102      	bne.n	8004a00 <ETH_SetMACConfig+0x5c>
 80049fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80049fe:	e000      	b.n	8004a02 <ETH_SetMACConfig+0x5e>
 8004a00:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004a02:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	7c9b      	ldrb	r3, [r3, #18]
 8004a08:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004a0a:	431a      	orrs	r2, r3
                                macconf->Speed |
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004a10:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8004a16:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	7f1b      	ldrb	r3, [r3, #28]
 8004a1c:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8004a1e:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	7f5b      	ldrb	r3, [r3, #29]
 8004a24:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004a26:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	7f92      	ldrb	r2, [r2, #30]
 8004a2c:	2a00      	cmp	r2, #0
 8004a2e:	d102      	bne.n	8004a36 <ETH_SetMACConfig+0x92>
 8004a30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a34:	e000      	b.n	8004a38 <ETH_SetMACConfig+0x94>
 8004a36:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004a38:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	7fdb      	ldrb	r3, [r3, #31]
 8004a3e:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004a40:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004a48:	2a00      	cmp	r2, #0
 8004a4a:	d102      	bne.n	8004a52 <ETH_SetMACConfig+0xae>
 8004a4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a50:	e000      	b.n	8004a54 <ETH_SetMACConfig+0xb0>
 8004a52:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004a54:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8004a5a:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a62:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8004a64:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	4b56      	ldr	r3, [pc, #344]	; (8004bd0 <ETH_SetMACConfig+0x22c>)
 8004a76:	4013      	ands	r3, r2
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6812      	ldr	r2, [r2, #0]
 8004a7c:	68f9      	ldr	r1, [r7, #12]
 8004a7e:	430b      	orrs	r3, r1
 8004a80:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a86:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a8e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004a90:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a98:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004a9a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004aa2:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004aa4:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004aac:	2a00      	cmp	r2, #0
 8004aae:	d102      	bne.n	8004ab6 <ETH_SetMACConfig+0x112>
 8004ab0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004ab4:	e000      	b.n	8004ab8 <ETH_SetMACConfig+0x114>
 8004ab6:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004ab8:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	4b42      	ldr	r3, [pc, #264]	; (8004bd4 <ETH_SetMACConfig+0x230>)
 8004aca:	4013      	ands	r3, r2
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	6812      	ldr	r2, [r2, #0]
 8004ad0:	68f9      	ldr	r1, [r7, #12]
 8004ad2:	430b      	orrs	r3, r1
 8004ad4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004adc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68da      	ldr	r2, [r3, #12]
 8004aec:	4b3a      	ldr	r3, [pc, #232]	; (8004bd8 <ETH_SetMACConfig+0x234>)
 8004aee:	4013      	ands	r3, r2
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	6812      	ldr	r2, [r2, #0]
 8004af4:	68f9      	ldr	r1, [r7, #12]
 8004af6:	430b      	orrs	r3, r1
 8004af8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004b00:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004b06:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004b0e:	2a00      	cmp	r2, #0
 8004b10:	d101      	bne.n	8004b16 <ETH_SetMACConfig+0x172>
 8004b12:	2280      	movs	r2, #128	; 0x80
 8004b14:	e000      	b.n	8004b18 <ETH_SetMACConfig+0x174>
 8004b16:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004b18:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b1e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004b20:	4313      	orrs	r3, r2
 8004b22:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b2a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004b2e:	4013      	ands	r3, r2
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6812      	ldr	r2, [r2, #0]
 8004b34:	68f9      	ldr	r1, [r7, #12]
 8004b36:	430b      	orrs	r3, r1
 8004b38:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004b40:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004b48:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b56:	f023 0103 	bic.w	r1, r3, #3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	430a      	orrs	r2, r1
 8004b62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004b6e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004b8a:	2a00      	cmp	r2, #0
 8004b8c:	d101      	bne.n	8004b92 <ETH_SetMACConfig+0x1ee>
 8004b8e:	2240      	movs	r2, #64	; 0x40
 8004b90:	e000      	b.n	8004b94 <ETH_SetMACConfig+0x1f0>
 8004b92:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004b94:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004b9c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004b9e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004ba6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004bb4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004bc4:	bf00      	nop
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	00048083 	.word	0x00048083
 8004bd4:	c0f88000 	.word	0xc0f88000
 8004bd8:	fffffef0 	.word	0xfffffef0

08004bdc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	4b38      	ldr	r3, [pc, #224]	; (8004cd4 <ETH_SetDMAConfig+0xf8>)
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	683a      	ldr	r2, [r7, #0]
 8004bf6:	6812      	ldr	r2, [r2, #0]
 8004bf8:	6879      	ldr	r1, [r7, #4]
 8004bfa:	6809      	ldr	r1, [r1, #0]
 8004bfc:	431a      	orrs	r2, r3
 8004bfe:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8004c02:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	791b      	ldrb	r3, [r3, #4]
 8004c08:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004c0e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	7b1b      	ldrb	r3, [r3, #12]
 8004c14:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	f241 0304 	movw	r3, #4100	; 0x1004
 8004c22:	4413      	add	r3, r2
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	4b2c      	ldr	r3, [pc, #176]	; (8004cd8 <ETH_SetDMAConfig+0xfc>)
 8004c28:	4013      	ands	r3, r2
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6811      	ldr	r1, [r2, #0]
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	431a      	orrs	r2, r3
 8004c32:	f241 0304 	movw	r3, #4100	; 0x1004
 8004c36:	440b      	add	r3, r1
 8004c38:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	7b5b      	ldrb	r3, [r3, #13]
 8004c3e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004c44:	4313      	orrs	r3, r2
 8004c46:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	4b22      	ldr	r3, [pc, #136]	; (8004cdc <ETH_SetDMAConfig+0x100>)
 8004c54:	4013      	ands	r3, r2
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	6811      	ldr	r1, [r2, #0]
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8004c62:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	7d1b      	ldrb	r3, [r3, #20]
 8004c6c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004c6e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	7f5b      	ldrb	r3, [r3, #29]
 8004c74:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004c76:	4313      	orrs	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	f241 1304 	movw	r3, #4356	; 0x1104
 8004c82:	4413      	add	r3, r2
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	4b16      	ldr	r3, [pc, #88]	; (8004ce0 <ETH_SetDMAConfig+0x104>)
 8004c88:	4013      	ands	r3, r2
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6811      	ldr	r1, [r2, #0]
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	431a      	orrs	r2, r3
 8004c92:	f241 1304 	movw	r3, #4356	; 0x1104
 8004c96:	440b      	add	r3, r1
 8004c98:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	7f1b      	ldrb	r3, [r3, #28]
 8004c9e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	f241 1308 	movw	r3, #4360	; 0x1108
 8004cb0:	4413      	add	r3, r2
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	4b0b      	ldr	r3, [pc, #44]	; (8004ce4 <ETH_SetDMAConfig+0x108>)
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	6811      	ldr	r1, [r2, #0]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	f241 1308 	movw	r3, #4360	; 0x1108
 8004cc4:	440b      	add	r3, r1
 8004cc6:	601a      	str	r2, [r3, #0]
}
 8004cc8:	bf00      	nop
 8004cca:	3714      	adds	r7, #20
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	ffff87fd 	.word	0xffff87fd
 8004cd8:	ffff2ffe 	.word	0xffff2ffe
 8004cdc:	fffec000 	.word	0xfffec000
 8004ce0:	ffc0efef 	.word	0xffc0efef
 8004ce4:	7fc0ffff 	.word	0x7fc0ffff

08004ce8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b0a4      	sub	sp, #144	; 0x90
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004d00:	2300      	movs	r3, #0
 8004d02:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004d06:	2301      	movs	r3, #1
 8004d08:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004d12:	2301      	movs	r3, #1
 8004d14:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004d24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d28:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004d30:	2300      	movs	r3, #0
 8004d32:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004d34:	2300      	movs	r3, #0
 8004d36:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004d40:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004d44:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004d46:	2300      	movs	r3, #0
 8004d48:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004d50:	2301      	movs	r3, #1
 8004d52:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004d56:	2300      	movs	r3, #0
 8004d58:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004d62:	2300      	movs	r3, #0
 8004d64:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8004d66:	2300      	movs	r3, #0
 8004d68:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004d74:	2300      	movs	r3, #0
 8004d76:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004d80:	2320      	movs	r3, #32
 8004d82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004d86:	2301      	movs	r3, #1
 8004d88:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004d92:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004d98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d9c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004da4:	2302      	movs	r3, #2
 8004da6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004daa:	2300      	movs	r3, #0
 8004dac:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004db0:	2300      	movs	r3, #0
 8004db2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004db6:	2300      	movs	r3, #0
 8004db8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004dcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7ff fde6 	bl	80049a4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004de0:	2300      	movs	r3, #0
 8004de2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004de4:	2300      	movs	r3, #0
 8004de6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004dea:	2300      	movs	r3, #0
 8004dec:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004dee:	2300      	movs	r3, #0
 8004df0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004df2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004df6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004dfc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004e00:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004e02:	2300      	movs	r3, #0
 8004e04:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8004e08:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004e0c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004e0e:	f107 0308 	add.w	r3, r7, #8
 8004e12:	4619      	mov	r1, r3
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f7ff fee1 	bl	8004bdc <ETH_SetDMAConfig>
}
 8004e1a:	bf00      	nop
 8004e1c:	3790      	adds	r7, #144	; 0x90
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
	...

08004e24 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004e34:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004e3c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004e3e:	f003 f977 	bl	8008130 <HAL_RCC_GetHCLKFreq>
 8004e42:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	4a1e      	ldr	r2, [pc, #120]	; (8004ec0 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d908      	bls.n	8004e5e <ETH_MAC_MDIO_ClkConfig+0x3a>
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	4a1d      	ldr	r2, [pc, #116]	; (8004ec4 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d804      	bhi.n	8004e5e <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e5a:	60fb      	str	r3, [r7, #12]
 8004e5c:	e027      	b.n	8004eae <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	4a18      	ldr	r2, [pc, #96]	; (8004ec4 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d908      	bls.n	8004e78 <ETH_MAC_MDIO_ClkConfig+0x54>
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	4a17      	ldr	r2, [pc, #92]	; (8004ec8 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d204      	bcs.n	8004e78 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004e74:	60fb      	str	r3, [r7, #12]
 8004e76:	e01a      	b.n	8004eae <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	4a13      	ldr	r2, [pc, #76]	; (8004ec8 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d303      	bcc.n	8004e88 <ETH_MAC_MDIO_ClkConfig+0x64>
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	4a12      	ldr	r2, [pc, #72]	; (8004ecc <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d911      	bls.n	8004eac <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	4a10      	ldr	r2, [pc, #64]	; (8004ecc <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d908      	bls.n	8004ea2 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	4a0f      	ldr	r2, [pc, #60]	; (8004ed0 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d804      	bhi.n	8004ea2 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	e005      	b.n	8004eae <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	e000      	b.n	8004eae <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004eac:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004eb8:	bf00      	nop
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	01312cff 	.word	0x01312cff
 8004ec4:	02160ebf 	.word	0x02160ebf
 8004ec8:	03938700 	.word	0x03938700
 8004ecc:	05f5e0ff 	.word	0x05f5e0ff
 8004ed0:	08f0d17f 	.word	0x08f0d17f

08004ed4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004edc:	2300      	movs	r3, #0
 8004ede:	60fb      	str	r3, [r7, #12]
 8004ee0:	e01d      	b.n	8004f1e <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	68d9      	ldr	r1, [r3, #12]
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	005b      	lsls	r3, r3, #1
 8004eec:	4413      	add	r3, r2
 8004eee:	00db      	lsls	r3, r3, #3
 8004ef0:	440b      	add	r3, r1
 8004ef2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2200      	movs	r2, #0
 8004efe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	2200      	movs	r2, #0
 8004f04:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004f0c:	68b9      	ldr	r1, [r7, #8]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	3206      	adds	r2, #6
 8004f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	60fb      	str	r3, [r7, #12]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2b03      	cmp	r3, #3
 8004f22:	d9de      	bls.n	8004ee2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	f241 132c 	movw	r3, #4396	; 0x112c
 8004f32:	4413      	add	r3, r2
 8004f34:	2203      	movs	r2, #3
 8004f36:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68d9      	ldr	r1, [r3, #12]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	f241 1314 	movw	r3, #4372	; 0x1114
 8004f44:	4413      	add	r3, r2
 8004f46:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68da      	ldr	r2, [r3, #12]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8004f54:	601a      	str	r2, [r3, #0]
}
 8004f56:	bf00      	nop
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b085      	sub	sp, #20
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	60fb      	str	r3, [r7, #12]
 8004f6e:	e024      	b.n	8004fba <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6919      	ldr	r1, [r3, #16]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	4613      	mov	r3, r2
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	4413      	add	r3, r2
 8004f7c:	00db      	lsls	r3, r3, #3
 8004f7e:	440b      	add	r3, r1
 8004f80:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	2200      	movs	r2, #0
 8004f86:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	2200      	movs	r2, #0
 8004f92:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	2200      	movs	r2, #0
 8004f98:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	6879      	ldr	r1, [r7, #4]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	3310      	adds	r3, #16
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	440b      	add	r3, r1
 8004fb2:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	60fb      	str	r3, [r7, #12]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2b03      	cmp	r3, #3
 8004fbe:	d9d7      	bls.n	8004f70 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	f241 1330 	movw	r3, #4400	; 0x1130
 8004fe6:	4413      	add	r3, r2
 8004fe8:	2203      	movs	r2, #3
 8004fea:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6919      	ldr	r1, [r3, #16]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	f241 131c 	movw	r3, #4380	; 0x111c
 8004ff8:	4413      	add	r3, r2
 8004ffa:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	f241 1328 	movw	r3, #4392	; 0x1128
 800500c:	4413      	add	r3, r2
 800500e:	6019      	str	r1, [r3, #0]
}
 8005010:	bf00      	nop
 8005012:	3714      	adds	r7, #20
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800501c:	b480      	push	{r7}
 800501e:	b089      	sub	sp, #36	; 0x24
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005026:	2300      	movs	r3, #0
 8005028:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800502a:	4b89      	ldr	r3, [pc, #548]	; (8005250 <HAL_GPIO_Init+0x234>)
 800502c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800502e:	e194      	b.n	800535a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	2101      	movs	r1, #1
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	fa01 f303 	lsl.w	r3, r1, r3
 800503c:	4013      	ands	r3, r2
 800503e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	2b00      	cmp	r3, #0
 8005044:	f000 8186 	beq.w	8005354 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d00b      	beq.n	8005068 <HAL_GPIO_Init+0x4c>
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	2b02      	cmp	r3, #2
 8005056:	d007      	beq.n	8005068 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800505c:	2b11      	cmp	r3, #17
 800505e:	d003      	beq.n	8005068 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	2b12      	cmp	r3, #18
 8005066:	d130      	bne.n	80050ca <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	005b      	lsls	r3, r3, #1
 8005072:	2203      	movs	r2, #3
 8005074:	fa02 f303 	lsl.w	r3, r2, r3
 8005078:	43db      	mvns	r3, r3
 800507a:	69ba      	ldr	r2, [r7, #24]
 800507c:	4013      	ands	r3, r2
 800507e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	68da      	ldr	r2, [r3, #12]
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	005b      	lsls	r3, r3, #1
 8005088:	fa02 f303 	lsl.w	r3, r2, r3
 800508c:	69ba      	ldr	r2, [r7, #24]
 800508e:	4313      	orrs	r3, r2
 8005090:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800509e:	2201      	movs	r2, #1
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	fa02 f303 	lsl.w	r3, r2, r3
 80050a6:	43db      	mvns	r3, r3
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	4013      	ands	r3, r2
 80050ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	091b      	lsrs	r3, r3, #4
 80050b4:	f003 0201 	and.w	r2, r3, #1
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	fa02 f303 	lsl.w	r3, r2, r3
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	69ba      	ldr	r2, [r7, #24]
 80050c8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	2203      	movs	r2, #3
 80050d6:	fa02 f303 	lsl.w	r3, r2, r3
 80050da:	43db      	mvns	r3, r3
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	4013      	ands	r3, r2
 80050e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	689a      	ldr	r2, [r3, #8]
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	005b      	lsls	r3, r3, #1
 80050ea:	fa02 f303 	lsl.w	r3, r2, r3
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d003      	beq.n	800510a <HAL_GPIO_Init+0xee>
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	2b12      	cmp	r3, #18
 8005108:	d123      	bne.n	8005152 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	08da      	lsrs	r2, r3, #3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	3208      	adds	r2, #8
 8005112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005116:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	f003 0307 	and.w	r3, r3, #7
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	220f      	movs	r2, #15
 8005122:	fa02 f303 	lsl.w	r3, r2, r3
 8005126:	43db      	mvns	r3, r3
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	4013      	ands	r3, r2
 800512c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	691a      	ldr	r2, [r3, #16]
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	f003 0307 	and.w	r3, r3, #7
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	fa02 f303 	lsl.w	r3, r2, r3
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	4313      	orrs	r3, r2
 8005142:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	08da      	lsrs	r2, r3, #3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	3208      	adds	r2, #8
 800514c:	69b9      	ldr	r1, [r7, #24]
 800514e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	005b      	lsls	r3, r3, #1
 800515c:	2203      	movs	r2, #3
 800515e:	fa02 f303 	lsl.w	r3, r2, r3
 8005162:	43db      	mvns	r3, r3
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	4013      	ands	r3, r2
 8005168:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f003 0203 	and.w	r2, r3, #3
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	005b      	lsls	r3, r3, #1
 8005176:	fa02 f303 	lsl.w	r3, r2, r3
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	4313      	orrs	r3, r2
 800517e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	69ba      	ldr	r2, [r7, #24]
 8005184:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800518e:	2b00      	cmp	r3, #0
 8005190:	f000 80e0 	beq.w	8005354 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005194:	4b2f      	ldr	r3, [pc, #188]	; (8005254 <HAL_GPIO_Init+0x238>)
 8005196:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800519a:	4a2e      	ldr	r2, [pc, #184]	; (8005254 <HAL_GPIO_Init+0x238>)
 800519c:	f043 0302 	orr.w	r3, r3, #2
 80051a0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80051a4:	4b2b      	ldr	r3, [pc, #172]	; (8005254 <HAL_GPIO_Init+0x238>)
 80051a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	60fb      	str	r3, [r7, #12]
 80051b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80051b2:	4a29      	ldr	r2, [pc, #164]	; (8005258 <HAL_GPIO_Init+0x23c>)
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	089b      	lsrs	r3, r3, #2
 80051b8:	3302      	adds	r3, #2
 80051ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	f003 0303 	and.w	r3, r3, #3
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	220f      	movs	r2, #15
 80051ca:	fa02 f303 	lsl.w	r3, r2, r3
 80051ce:	43db      	mvns	r3, r3
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	4013      	ands	r3, r2
 80051d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a20      	ldr	r2, [pc, #128]	; (800525c <HAL_GPIO_Init+0x240>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d052      	beq.n	8005284 <HAL_GPIO_Init+0x268>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a1f      	ldr	r2, [pc, #124]	; (8005260 <HAL_GPIO_Init+0x244>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d031      	beq.n	800524a <HAL_GPIO_Init+0x22e>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a1e      	ldr	r2, [pc, #120]	; (8005264 <HAL_GPIO_Init+0x248>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d02b      	beq.n	8005246 <HAL_GPIO_Init+0x22a>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a1d      	ldr	r2, [pc, #116]	; (8005268 <HAL_GPIO_Init+0x24c>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d025      	beq.n	8005242 <HAL_GPIO_Init+0x226>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a1c      	ldr	r2, [pc, #112]	; (800526c <HAL_GPIO_Init+0x250>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d01f      	beq.n	800523e <HAL_GPIO_Init+0x222>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a1b      	ldr	r2, [pc, #108]	; (8005270 <HAL_GPIO_Init+0x254>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d019      	beq.n	800523a <HAL_GPIO_Init+0x21e>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a1a      	ldr	r2, [pc, #104]	; (8005274 <HAL_GPIO_Init+0x258>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d013      	beq.n	8005236 <HAL_GPIO_Init+0x21a>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a19      	ldr	r2, [pc, #100]	; (8005278 <HAL_GPIO_Init+0x25c>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d00d      	beq.n	8005232 <HAL_GPIO_Init+0x216>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a18      	ldr	r2, [pc, #96]	; (800527c <HAL_GPIO_Init+0x260>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d007      	beq.n	800522e <HAL_GPIO_Init+0x212>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a17      	ldr	r2, [pc, #92]	; (8005280 <HAL_GPIO_Init+0x264>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d101      	bne.n	800522a <HAL_GPIO_Init+0x20e>
 8005226:	2309      	movs	r3, #9
 8005228:	e02d      	b.n	8005286 <HAL_GPIO_Init+0x26a>
 800522a:	230a      	movs	r3, #10
 800522c:	e02b      	b.n	8005286 <HAL_GPIO_Init+0x26a>
 800522e:	2308      	movs	r3, #8
 8005230:	e029      	b.n	8005286 <HAL_GPIO_Init+0x26a>
 8005232:	2307      	movs	r3, #7
 8005234:	e027      	b.n	8005286 <HAL_GPIO_Init+0x26a>
 8005236:	2306      	movs	r3, #6
 8005238:	e025      	b.n	8005286 <HAL_GPIO_Init+0x26a>
 800523a:	2305      	movs	r3, #5
 800523c:	e023      	b.n	8005286 <HAL_GPIO_Init+0x26a>
 800523e:	2304      	movs	r3, #4
 8005240:	e021      	b.n	8005286 <HAL_GPIO_Init+0x26a>
 8005242:	2303      	movs	r3, #3
 8005244:	e01f      	b.n	8005286 <HAL_GPIO_Init+0x26a>
 8005246:	2302      	movs	r3, #2
 8005248:	e01d      	b.n	8005286 <HAL_GPIO_Init+0x26a>
 800524a:	2301      	movs	r3, #1
 800524c:	e01b      	b.n	8005286 <HAL_GPIO_Init+0x26a>
 800524e:	bf00      	nop
 8005250:	58000080 	.word	0x58000080
 8005254:	58024400 	.word	0x58024400
 8005258:	58000400 	.word	0x58000400
 800525c:	58020000 	.word	0x58020000
 8005260:	58020400 	.word	0x58020400
 8005264:	58020800 	.word	0x58020800
 8005268:	58020c00 	.word	0x58020c00
 800526c:	58021000 	.word	0x58021000
 8005270:	58021400 	.word	0x58021400
 8005274:	58021800 	.word	0x58021800
 8005278:	58021c00 	.word	0x58021c00
 800527c:	58022000 	.word	0x58022000
 8005280:	58022400 	.word	0x58022400
 8005284:	2300      	movs	r3, #0
 8005286:	69fa      	ldr	r2, [r7, #28]
 8005288:	f002 0203 	and.w	r2, r2, #3
 800528c:	0092      	lsls	r2, r2, #2
 800528e:	4093      	lsls	r3, r2
 8005290:	69ba      	ldr	r2, [r7, #24]
 8005292:	4313      	orrs	r3, r2
 8005294:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005296:	4938      	ldr	r1, [pc, #224]	; (8005378 <HAL_GPIO_Init+0x35c>)
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	089b      	lsrs	r3, r3, #2
 800529c:	3302      	adds	r3, #2
 800529e:	69ba      	ldr	r2, [r7, #24]
 80052a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	43db      	mvns	r3, r3
 80052ae:	69ba      	ldr	r2, [r7, #24]
 80052b0:	4013      	ands	r3, r2
 80052b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d003      	beq.n	80052c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	69ba      	ldr	r2, [r7, #24]
 80052cc:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	43db      	mvns	r3, r3
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	4013      	ands	r3, r2
 80052dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80052ea:	69ba      	ldr	r2, [r7, #24]
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80052f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	43db      	mvns	r3, r3
 8005304:	69ba      	ldr	r2, [r7, #24]
 8005306:	4013      	ands	r3, r2
 8005308:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005316:	69ba      	ldr	r2, [r7, #24]
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	4313      	orrs	r3, r2
 800531c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800531e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	43db      	mvns	r3, r3
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	4013      	ands	r3, r2
 8005336:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d003      	beq.n	800534c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005344:	69ba      	ldr	r2, [r7, #24]
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	4313      	orrs	r3, r2
 800534a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800534c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	3301      	adds	r3, #1
 8005358:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	fa22 f303 	lsr.w	r3, r2, r3
 8005364:	2b00      	cmp	r3, #0
 8005366:	f47f ae63 	bne.w	8005030 <HAL_GPIO_Init+0x14>
  }
}
 800536a:	bf00      	nop
 800536c:	bf00      	nop
 800536e:	3724      	adds	r7, #36	; 0x24
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr
 8005378:	58000400 	.word	0x58000400

0800537c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	460b      	mov	r3, r1
 8005386:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	691a      	ldr	r2, [r3, #16]
 800538c:	887b      	ldrh	r3, [r7, #2]
 800538e:	4013      	ands	r3, r2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d002      	beq.n	800539a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005394:	2301      	movs	r3, #1
 8005396:	73fb      	strb	r3, [r7, #15]
 8005398:	e001      	b.n	800539e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800539a:	2300      	movs	r3, #0
 800539c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800539e:	7bfb      	ldrb	r3, [r7, #15]
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3714      	adds	r7, #20
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	460b      	mov	r3, r1
 80053b6:	807b      	strh	r3, [r7, #2]
 80053b8:	4613      	mov	r3, r2
 80053ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053bc:	787b      	ldrb	r3, [r7, #1]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d003      	beq.n	80053ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053c2:	887a      	ldrh	r2, [r7, #2]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80053c8:	e003      	b.n	80053d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80053ca:	887b      	ldrh	r3, [r7, #2]
 80053cc:	041a      	lsls	r2, r3, #16
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	619a      	str	r2, [r3, #24]
}
 80053d2:	bf00      	nop
 80053d4:	370c      	adds	r7, #12
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b082      	sub	sp, #8
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	4603      	mov	r3, r0
 80053e6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80053e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80053f0:	88fb      	ldrh	r3, [r7, #6]
 80053f2:	4013      	ands	r3, r2
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d008      	beq.n	800540a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80053f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053fc:	88fb      	ldrh	r3, [r7, #6]
 80053fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005402:	88fb      	ldrh	r3, [r7, #6]
 8005404:	4618      	mov	r0, r3
 8005406:	f7fc fcc3 	bl	8001d90 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800540a:	bf00      	nop
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8005412:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005414:	b08f      	sub	sp, #60	; 0x3c
 8005416:	af0a      	add	r7, sp, #40	; 0x28
 8005418:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d101      	bne.n	8005424 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e054      	b.n	80054ce <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d106      	bne.n	8005444 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f014 feae 	bl	801a1a0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2203      	movs	r2, #3
 8005448:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005454:	2b00      	cmp	r3, #0
 8005456:	d102      	bne.n	800545e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4618      	mov	r0, r3
 8005464:	f007 faaf 	bl	800c9c6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	603b      	str	r3, [r7, #0]
 800546e:	687e      	ldr	r6, [r7, #4]
 8005470:	466d      	mov	r5, sp
 8005472:	f106 0410 	add.w	r4, r6, #16
 8005476:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005478:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800547a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800547c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800547e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005482:	e885 0003 	stmia.w	r5, {r0, r1}
 8005486:	1d33      	adds	r3, r6, #4
 8005488:	cb0e      	ldmia	r3, {r1, r2, r3}
 800548a:	6838      	ldr	r0, [r7, #0]
 800548c:	f007 fa1c 	bl	800c8c8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2101      	movs	r1, #1
 8005496:	4618      	mov	r0, r3
 8005498:	f007 faa6 	bl	800c9e8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	603b      	str	r3, [r7, #0]
 80054a2:	687e      	ldr	r6, [r7, #4]
 80054a4:	466d      	mov	r5, sp
 80054a6:	f106 0410 	add.w	r4, r6, #16
 80054aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80054b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80054ba:	1d33      	adds	r3, r6, #4
 80054bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054be:	6838      	ldr	r0, [r7, #0]
 80054c0:	f007 fbf0 	bl	800cca4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080054d6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80054d6:	b590      	push	{r4, r7, lr}
 80054d8:	b089      	sub	sp, #36	; 0x24
 80054da:	af04      	add	r7, sp, #16
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	4608      	mov	r0, r1
 80054e0:	4611      	mov	r1, r2
 80054e2:	461a      	mov	r2, r3
 80054e4:	4603      	mov	r3, r0
 80054e6:	70fb      	strb	r3, [r7, #3]
 80054e8:	460b      	mov	r3, r1
 80054ea:	70bb      	strb	r3, [r7, #2]
 80054ec:	4613      	mov	r3, r2
 80054ee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d101      	bne.n	80054fe <HAL_HCD_HC_Init+0x28>
 80054fa:	2302      	movs	r3, #2
 80054fc:	e076      	b.n	80055ec <HAL_HCD_HC_Init+0x116>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8005506:	78fb      	ldrb	r3, [r7, #3]
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	212c      	movs	r1, #44	; 0x2c
 800550c:	fb01 f303 	mul.w	r3, r1, r3
 8005510:	4413      	add	r3, r2
 8005512:	333d      	adds	r3, #61	; 0x3d
 8005514:	2200      	movs	r2, #0
 8005516:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8005518:	78fb      	ldrb	r3, [r7, #3]
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	212c      	movs	r1, #44	; 0x2c
 800551e:	fb01 f303 	mul.w	r3, r1, r3
 8005522:	4413      	add	r3, r2
 8005524:	3338      	adds	r3, #56	; 0x38
 8005526:	787a      	ldrb	r2, [r7, #1]
 8005528:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800552a:	78fb      	ldrb	r3, [r7, #3]
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	212c      	movs	r1, #44	; 0x2c
 8005530:	fb01 f303 	mul.w	r3, r1, r3
 8005534:	4413      	add	r3, r2
 8005536:	3340      	adds	r3, #64	; 0x40
 8005538:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800553a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800553c:	78fb      	ldrb	r3, [r7, #3]
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	212c      	movs	r1, #44	; 0x2c
 8005542:	fb01 f303 	mul.w	r3, r1, r3
 8005546:	4413      	add	r3, r2
 8005548:	3339      	adds	r3, #57	; 0x39
 800554a:	78fa      	ldrb	r2, [r7, #3]
 800554c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800554e:	78fb      	ldrb	r3, [r7, #3]
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	212c      	movs	r1, #44	; 0x2c
 8005554:	fb01 f303 	mul.w	r3, r1, r3
 8005558:	4413      	add	r3, r2
 800555a:	333f      	adds	r3, #63	; 0x3f
 800555c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005560:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8005562:	78fb      	ldrb	r3, [r7, #3]
 8005564:	78ba      	ldrb	r2, [r7, #2]
 8005566:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800556a:	b2d0      	uxtb	r0, r2
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	212c      	movs	r1, #44	; 0x2c
 8005570:	fb01 f303 	mul.w	r3, r1, r3
 8005574:	4413      	add	r3, r2
 8005576:	333a      	adds	r3, #58	; 0x3a
 8005578:	4602      	mov	r2, r0
 800557a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800557c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005580:	2b00      	cmp	r3, #0
 8005582:	da09      	bge.n	8005598 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005584:	78fb      	ldrb	r3, [r7, #3]
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	212c      	movs	r1, #44	; 0x2c
 800558a:	fb01 f303 	mul.w	r3, r1, r3
 800558e:	4413      	add	r3, r2
 8005590:	333b      	adds	r3, #59	; 0x3b
 8005592:	2201      	movs	r2, #1
 8005594:	701a      	strb	r2, [r3, #0]
 8005596:	e008      	b.n	80055aa <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8005598:	78fb      	ldrb	r3, [r7, #3]
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	212c      	movs	r1, #44	; 0x2c
 800559e:	fb01 f303 	mul.w	r3, r1, r3
 80055a2:	4413      	add	r3, r2
 80055a4:	333b      	adds	r3, #59	; 0x3b
 80055a6:	2200      	movs	r2, #0
 80055a8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80055aa:	78fb      	ldrb	r3, [r7, #3]
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	212c      	movs	r1, #44	; 0x2c
 80055b0:	fb01 f303 	mul.w	r3, r1, r3
 80055b4:	4413      	add	r3, r2
 80055b6:	333c      	adds	r3, #60	; 0x3c
 80055b8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80055bc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6818      	ldr	r0, [r3, #0]
 80055c2:	787c      	ldrb	r4, [r7, #1]
 80055c4:	78ba      	ldrb	r2, [r7, #2]
 80055c6:	78f9      	ldrb	r1, [r7, #3]
 80055c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80055ca:	9302      	str	r3, [sp, #8]
 80055cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80055d0:	9301      	str	r3, [sp, #4]
 80055d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80055d6:	9300      	str	r3, [sp, #0]
 80055d8:	4623      	mov	r3, r4
 80055da:	f007 fcb5 	bl	800cf48 <USB_HC_Init>
 80055de:	4603      	mov	r3, r0
 80055e0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80055ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3714      	adds	r7, #20
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd90      	pop	{r4, r7, pc}

080055f4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	460b      	mov	r3, r1
 80055fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005600:	2300      	movs	r3, #0
 8005602:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800560a:	2b01      	cmp	r3, #1
 800560c:	d101      	bne.n	8005612 <HAL_HCD_HC_Halt+0x1e>
 800560e:	2302      	movs	r3, #2
 8005610:	e00f      	b.n	8005632 <HAL_HCD_HC_Halt+0x3e>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	78fa      	ldrb	r2, [r7, #3]
 8005620:	4611      	mov	r1, r2
 8005622:	4618      	mov	r0, r3
 8005624:	f007 fef1 	bl	800d40a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8005630:	7bfb      	ldrb	r3, [r7, #15]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
	...

0800563c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	4608      	mov	r0, r1
 8005646:	4611      	mov	r1, r2
 8005648:	461a      	mov	r2, r3
 800564a:	4603      	mov	r3, r0
 800564c:	70fb      	strb	r3, [r7, #3]
 800564e:	460b      	mov	r3, r1
 8005650:	70bb      	strb	r3, [r7, #2]
 8005652:	4613      	mov	r3, r2
 8005654:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8005656:	78fb      	ldrb	r3, [r7, #3]
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	212c      	movs	r1, #44	; 0x2c
 800565c:	fb01 f303 	mul.w	r3, r1, r3
 8005660:	4413      	add	r3, r2
 8005662:	333b      	adds	r3, #59	; 0x3b
 8005664:	78ba      	ldrb	r2, [r7, #2]
 8005666:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005668:	78fb      	ldrb	r3, [r7, #3]
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	212c      	movs	r1, #44	; 0x2c
 800566e:	fb01 f303 	mul.w	r3, r1, r3
 8005672:	4413      	add	r3, r2
 8005674:	333f      	adds	r3, #63	; 0x3f
 8005676:	787a      	ldrb	r2, [r7, #1]
 8005678:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800567a:	7c3b      	ldrb	r3, [r7, #16]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d112      	bne.n	80056a6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8005680:	78fb      	ldrb	r3, [r7, #3]
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	212c      	movs	r1, #44	; 0x2c
 8005686:	fb01 f303 	mul.w	r3, r1, r3
 800568a:	4413      	add	r3, r2
 800568c:	3342      	adds	r3, #66	; 0x42
 800568e:	2203      	movs	r2, #3
 8005690:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8005692:	78fb      	ldrb	r3, [r7, #3]
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	212c      	movs	r1, #44	; 0x2c
 8005698:	fb01 f303 	mul.w	r3, r1, r3
 800569c:	4413      	add	r3, r2
 800569e:	333d      	adds	r3, #61	; 0x3d
 80056a0:	7f3a      	ldrb	r2, [r7, #28]
 80056a2:	701a      	strb	r2, [r3, #0]
 80056a4:	e008      	b.n	80056b8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80056a6:	78fb      	ldrb	r3, [r7, #3]
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	212c      	movs	r1, #44	; 0x2c
 80056ac:	fb01 f303 	mul.w	r3, r1, r3
 80056b0:	4413      	add	r3, r2
 80056b2:	3342      	adds	r3, #66	; 0x42
 80056b4:	2202      	movs	r2, #2
 80056b6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80056b8:	787b      	ldrb	r3, [r7, #1]
 80056ba:	2b03      	cmp	r3, #3
 80056bc:	f200 80c6 	bhi.w	800584c <HAL_HCD_HC_SubmitRequest+0x210>
 80056c0:	a201      	add	r2, pc, #4	; (adr r2, 80056c8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80056c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c6:	bf00      	nop
 80056c8:	080056d9 	.word	0x080056d9
 80056cc:	08005839 	.word	0x08005839
 80056d0:	0800573d 	.word	0x0800573d
 80056d4:	080057bb 	.word	0x080057bb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80056d8:	7c3b      	ldrb	r3, [r7, #16]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	f040 80b8 	bne.w	8005850 <HAL_HCD_HC_SubmitRequest+0x214>
 80056e0:	78bb      	ldrb	r3, [r7, #2]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f040 80b4 	bne.w	8005850 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80056e8:	8b3b      	ldrh	r3, [r7, #24]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d108      	bne.n	8005700 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80056ee:	78fb      	ldrb	r3, [r7, #3]
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	212c      	movs	r1, #44	; 0x2c
 80056f4:	fb01 f303 	mul.w	r3, r1, r3
 80056f8:	4413      	add	r3, r2
 80056fa:	3355      	adds	r3, #85	; 0x55
 80056fc:	2201      	movs	r2, #1
 80056fe:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005700:	78fb      	ldrb	r3, [r7, #3]
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	212c      	movs	r1, #44	; 0x2c
 8005706:	fb01 f303 	mul.w	r3, r1, r3
 800570a:	4413      	add	r3, r2
 800570c:	3355      	adds	r3, #85	; 0x55
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d109      	bne.n	8005728 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005714:	78fb      	ldrb	r3, [r7, #3]
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	212c      	movs	r1, #44	; 0x2c
 800571a:	fb01 f303 	mul.w	r3, r1, r3
 800571e:	4413      	add	r3, r2
 8005720:	3342      	adds	r3, #66	; 0x42
 8005722:	2200      	movs	r2, #0
 8005724:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005726:	e093      	b.n	8005850 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005728:	78fb      	ldrb	r3, [r7, #3]
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	212c      	movs	r1, #44	; 0x2c
 800572e:	fb01 f303 	mul.w	r3, r1, r3
 8005732:	4413      	add	r3, r2
 8005734:	3342      	adds	r3, #66	; 0x42
 8005736:	2202      	movs	r2, #2
 8005738:	701a      	strb	r2, [r3, #0]
      break;
 800573a:	e089      	b.n	8005850 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800573c:	78bb      	ldrb	r3, [r7, #2]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d11d      	bne.n	800577e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005742:	78fb      	ldrb	r3, [r7, #3]
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	212c      	movs	r1, #44	; 0x2c
 8005748:	fb01 f303 	mul.w	r3, r1, r3
 800574c:	4413      	add	r3, r2
 800574e:	3355      	adds	r3, #85	; 0x55
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d109      	bne.n	800576a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005756:	78fb      	ldrb	r3, [r7, #3]
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	212c      	movs	r1, #44	; 0x2c
 800575c:	fb01 f303 	mul.w	r3, r1, r3
 8005760:	4413      	add	r3, r2
 8005762:	3342      	adds	r3, #66	; 0x42
 8005764:	2200      	movs	r2, #0
 8005766:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005768:	e073      	b.n	8005852 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800576a:	78fb      	ldrb	r3, [r7, #3]
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	212c      	movs	r1, #44	; 0x2c
 8005770:	fb01 f303 	mul.w	r3, r1, r3
 8005774:	4413      	add	r3, r2
 8005776:	3342      	adds	r3, #66	; 0x42
 8005778:	2202      	movs	r2, #2
 800577a:	701a      	strb	r2, [r3, #0]
      break;
 800577c:	e069      	b.n	8005852 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800577e:	78fb      	ldrb	r3, [r7, #3]
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	212c      	movs	r1, #44	; 0x2c
 8005784:	fb01 f303 	mul.w	r3, r1, r3
 8005788:	4413      	add	r3, r2
 800578a:	3354      	adds	r3, #84	; 0x54
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d109      	bne.n	80057a6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005792:	78fb      	ldrb	r3, [r7, #3]
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	212c      	movs	r1, #44	; 0x2c
 8005798:	fb01 f303 	mul.w	r3, r1, r3
 800579c:	4413      	add	r3, r2
 800579e:	3342      	adds	r3, #66	; 0x42
 80057a0:	2200      	movs	r2, #0
 80057a2:	701a      	strb	r2, [r3, #0]
      break;
 80057a4:	e055      	b.n	8005852 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80057a6:	78fb      	ldrb	r3, [r7, #3]
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	212c      	movs	r1, #44	; 0x2c
 80057ac:	fb01 f303 	mul.w	r3, r1, r3
 80057b0:	4413      	add	r3, r2
 80057b2:	3342      	adds	r3, #66	; 0x42
 80057b4:	2202      	movs	r2, #2
 80057b6:	701a      	strb	r2, [r3, #0]
      break;
 80057b8:	e04b      	b.n	8005852 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80057ba:	78bb      	ldrb	r3, [r7, #2]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d11d      	bne.n	80057fc <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80057c0:	78fb      	ldrb	r3, [r7, #3]
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	212c      	movs	r1, #44	; 0x2c
 80057c6:	fb01 f303 	mul.w	r3, r1, r3
 80057ca:	4413      	add	r3, r2
 80057cc:	3355      	adds	r3, #85	; 0x55
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d109      	bne.n	80057e8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80057d4:	78fb      	ldrb	r3, [r7, #3]
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	212c      	movs	r1, #44	; 0x2c
 80057da:	fb01 f303 	mul.w	r3, r1, r3
 80057de:	4413      	add	r3, r2
 80057e0:	3342      	adds	r3, #66	; 0x42
 80057e2:	2200      	movs	r2, #0
 80057e4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80057e6:	e034      	b.n	8005852 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80057e8:	78fb      	ldrb	r3, [r7, #3]
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	212c      	movs	r1, #44	; 0x2c
 80057ee:	fb01 f303 	mul.w	r3, r1, r3
 80057f2:	4413      	add	r3, r2
 80057f4:	3342      	adds	r3, #66	; 0x42
 80057f6:	2202      	movs	r2, #2
 80057f8:	701a      	strb	r2, [r3, #0]
      break;
 80057fa:	e02a      	b.n	8005852 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80057fc:	78fb      	ldrb	r3, [r7, #3]
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	212c      	movs	r1, #44	; 0x2c
 8005802:	fb01 f303 	mul.w	r3, r1, r3
 8005806:	4413      	add	r3, r2
 8005808:	3354      	adds	r3, #84	; 0x54
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d109      	bne.n	8005824 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005810:	78fb      	ldrb	r3, [r7, #3]
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	212c      	movs	r1, #44	; 0x2c
 8005816:	fb01 f303 	mul.w	r3, r1, r3
 800581a:	4413      	add	r3, r2
 800581c:	3342      	adds	r3, #66	; 0x42
 800581e:	2200      	movs	r2, #0
 8005820:	701a      	strb	r2, [r3, #0]
      break;
 8005822:	e016      	b.n	8005852 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005824:	78fb      	ldrb	r3, [r7, #3]
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	212c      	movs	r1, #44	; 0x2c
 800582a:	fb01 f303 	mul.w	r3, r1, r3
 800582e:	4413      	add	r3, r2
 8005830:	3342      	adds	r3, #66	; 0x42
 8005832:	2202      	movs	r2, #2
 8005834:	701a      	strb	r2, [r3, #0]
      break;
 8005836:	e00c      	b.n	8005852 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005838:	78fb      	ldrb	r3, [r7, #3]
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	212c      	movs	r1, #44	; 0x2c
 800583e:	fb01 f303 	mul.w	r3, r1, r3
 8005842:	4413      	add	r3, r2
 8005844:	3342      	adds	r3, #66	; 0x42
 8005846:	2200      	movs	r2, #0
 8005848:	701a      	strb	r2, [r3, #0]
      break;
 800584a:	e002      	b.n	8005852 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800584c:	bf00      	nop
 800584e:	e000      	b.n	8005852 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8005850:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005852:	78fb      	ldrb	r3, [r7, #3]
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	212c      	movs	r1, #44	; 0x2c
 8005858:	fb01 f303 	mul.w	r3, r1, r3
 800585c:	4413      	add	r3, r2
 800585e:	3344      	adds	r3, #68	; 0x44
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005864:	78fb      	ldrb	r3, [r7, #3]
 8005866:	8b3a      	ldrh	r2, [r7, #24]
 8005868:	6879      	ldr	r1, [r7, #4]
 800586a:	202c      	movs	r0, #44	; 0x2c
 800586c:	fb00 f303 	mul.w	r3, r0, r3
 8005870:	440b      	add	r3, r1
 8005872:	334c      	adds	r3, #76	; 0x4c
 8005874:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005876:	78fb      	ldrb	r3, [r7, #3]
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	212c      	movs	r1, #44	; 0x2c
 800587c:	fb01 f303 	mul.w	r3, r1, r3
 8005880:	4413      	add	r3, r2
 8005882:	3360      	adds	r3, #96	; 0x60
 8005884:	2200      	movs	r2, #0
 8005886:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8005888:	78fb      	ldrb	r3, [r7, #3]
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	212c      	movs	r1, #44	; 0x2c
 800588e:	fb01 f303 	mul.w	r3, r1, r3
 8005892:	4413      	add	r3, r2
 8005894:	3350      	adds	r3, #80	; 0x50
 8005896:	2200      	movs	r2, #0
 8005898:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800589a:	78fb      	ldrb	r3, [r7, #3]
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	212c      	movs	r1, #44	; 0x2c
 80058a0:	fb01 f303 	mul.w	r3, r1, r3
 80058a4:	4413      	add	r3, r2
 80058a6:	3339      	adds	r3, #57	; 0x39
 80058a8:	78fa      	ldrb	r2, [r7, #3]
 80058aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80058ac:	78fb      	ldrb	r3, [r7, #3]
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	212c      	movs	r1, #44	; 0x2c
 80058b2:	fb01 f303 	mul.w	r3, r1, r3
 80058b6:	4413      	add	r3, r2
 80058b8:	3361      	adds	r3, #97	; 0x61
 80058ba:	2200      	movs	r2, #0
 80058bc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6818      	ldr	r0, [r3, #0]
 80058c2:	78fb      	ldrb	r3, [r7, #3]
 80058c4:	222c      	movs	r2, #44	; 0x2c
 80058c6:	fb02 f303 	mul.w	r3, r2, r3
 80058ca:	3338      	adds	r3, #56	; 0x38
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	18d1      	adds	r1, r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	461a      	mov	r2, r3
 80058d8:	f007 fc44 	bl	800d164 <USB_HC_StartXfer>
 80058dc:	4603      	mov	r3, r0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop

080058e8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4618      	mov	r0, r3
 8005900:	f007 f98d 	bl	800cc1e <USB_GetMode>
 8005904:	4603      	mov	r3, r0
 8005906:	2b01      	cmp	r3, #1
 8005908:	f040 80ef 	bne.w	8005aea <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4618      	mov	r0, r3
 8005912:	f007 f971 	bl	800cbf8 <USB_ReadInterrupts>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	f000 80e5 	beq.w	8005ae8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4618      	mov	r0, r3
 8005924:	f007 f968 	bl	800cbf8 <USB_ReadInterrupts>
 8005928:	4603      	mov	r3, r0
 800592a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800592e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005932:	d104      	bne.n	800593e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800593c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4618      	mov	r0, r3
 8005944:	f007 f958 	bl	800cbf8 <USB_ReadInterrupts>
 8005948:	4603      	mov	r3, r0
 800594a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800594e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005952:	d104      	bne.n	800595e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800595c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4618      	mov	r0, r3
 8005964:	f007 f948 	bl	800cbf8 <USB_ReadInterrupts>
 8005968:	4603      	mov	r3, r0
 800596a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800596e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005972:	d104      	bne.n	800597e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800597c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4618      	mov	r0, r3
 8005984:	f007 f938 	bl	800cbf8 <USB_ReadInterrupts>
 8005988:	4603      	mov	r3, r0
 800598a:	f003 0302 	and.w	r3, r3, #2
 800598e:	2b02      	cmp	r3, #2
 8005990:	d103      	bne.n	800599a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2202      	movs	r2, #2
 8005998:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4618      	mov	r0, r3
 80059a0:	f007 f92a 	bl	800cbf8 <USB_ReadInterrupts>
 80059a4:	4603      	mov	r3, r0
 80059a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059ae:	d115      	bne.n	80059dc <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80059b8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d108      	bne.n	80059dc <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f014 fc96 	bl	801a2fc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2101      	movs	r1, #1
 80059d6:	4618      	mov	r0, r3
 80059d8:	f007 fa1a 	bl	800ce10 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4618      	mov	r0, r3
 80059e2:	f007 f909 	bl	800cbf8 <USB_ReadInterrupts>
 80059e6:	4603      	mov	r3, r0
 80059e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80059f0:	d102      	bne.n	80059f8 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f001 f9e3 	bl	8006dbe <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4618      	mov	r0, r3
 80059fe:	f007 f8fb 	bl	800cbf8 <USB_ReadInterrupts>
 8005a02:	4603      	mov	r3, r0
 8005a04:	f003 0308 	and.w	r3, r3, #8
 8005a08:	2b08      	cmp	r3, #8
 8005a0a:	d106      	bne.n	8005a1a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f014 fc59 	bl	801a2c4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2208      	movs	r2, #8
 8005a18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f007 f8ea 	bl	800cbf8 <USB_ReadInterrupts>
 8005a24:	4603      	mov	r3, r0
 8005a26:	f003 0310 	and.w	r3, r3, #16
 8005a2a:	2b10      	cmp	r3, #16
 8005a2c:	d101      	bne.n	8005a32 <HAL_HCD_IRQHandler+0x14a>
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e000      	b.n	8005a34 <HAL_HCD_IRQHandler+0x14c>
 8005a32:	2300      	movs	r3, #0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d012      	beq.n	8005a5e <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	699a      	ldr	r2, [r3, #24]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f022 0210 	bic.w	r2, r2, #16
 8005a46:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f001 f8e6 	bl	8006c1a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	699a      	ldr	r2, [r3, #24]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f042 0210 	orr.w	r2, r2, #16
 8005a5c:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f007 f8c8 	bl	800cbf8 <USB_ReadInterrupts>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a72:	d13a      	bne.n	8005aea <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f007 fcb5 	bl	800d3e8 <USB_HC_ReadInterrupt>
 8005a7e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005a80:	2300      	movs	r3, #0
 8005a82:	617b      	str	r3, [r7, #20]
 8005a84:	e025      	b.n	8005ad2 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f003 030f 	and.w	r3, r3, #15
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d018      	beq.n	8005acc <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	015a      	lsls	r2, r3, #5
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005aac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ab0:	d106      	bne.n	8005ac0 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 f88f 	bl	8005bdc <HCD_HC_IN_IRQHandler>
 8005abe:	e005      	b.n	8005acc <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 fcaa 	bl	8006420 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	617b      	str	r3, [r7, #20]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d3d4      	bcc.n	8005a86 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005ae4:	615a      	str	r2, [r3, #20]
 8005ae6:	e000      	b.n	8005aea <HAL_HCD_IRQHandler+0x202>
      return;
 8005ae8:	bf00      	nop
    }
  }
}
 8005aea:	3718      	adds	r7, #24
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d101      	bne.n	8005b06 <HAL_HCD_Start+0x16>
 8005b02:	2302      	movs	r3, #2
 8005b04:	e013      	b.n	8005b2e <HAL_HCD_Start+0x3e>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4618      	mov	r0, r3
 8005b14:	f006 ff46 	bl	800c9a4 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2101      	movs	r1, #1
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f007 f9b0 	bl	800ce84 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3708      	adds	r7, #8
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b082      	sub	sp, #8
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d101      	bne.n	8005b4c <HAL_HCD_Stop+0x16>
 8005b48:	2302      	movs	r3, #2
 8005b4a:	e00d      	b.n	8005b68 <HAL_HCD_Stop+0x32>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f007 fdaf 	bl	800d6bc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3708      	adds	r7, #8
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	460b      	mov	r3, r1
 8005b7a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005b7c:	78fb      	ldrb	r3, [r7, #3]
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	212c      	movs	r1, #44	; 0x2c
 8005b82:	fb01 f303 	mul.w	r3, r1, r3
 8005b86:	4413      	add	r3, r2
 8005b88:	3360      	adds	r3, #96	; 0x60
 8005b8a:	781b      	ldrb	r3, [r3, #0]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005ba4:	78fb      	ldrb	r3, [r7, #3]
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	212c      	movs	r1, #44	; 0x2c
 8005baa:	fb01 f303 	mul.w	r3, r1, r3
 8005bae:	4413      	add	r3, r2
 8005bb0:	3350      	adds	r3, #80	; 0x50
 8005bb2:	681b      	ldr	r3, [r3, #0]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f007 f9a9 	bl	800cf24 <USB_GetCurrentFrame>
 8005bd2:	4603      	mov	r3, r0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3708      	adds	r7, #8
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b086      	sub	sp, #24
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	460b      	mov	r3, r1
 8005be6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005bf2:	78fb      	ldrb	r3, [r7, #3]
 8005bf4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	015a      	lsls	r2, r3, #5
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f003 0304 	and.w	r3, r3, #4
 8005c08:	2b04      	cmp	r3, #4
 8005c0a:	d119      	bne.n	8005c40 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c18:	461a      	mov	r2, r3
 8005c1a:	2304      	movs	r3, #4
 8005c1c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	015a      	lsls	r2, r3, #5
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	4413      	add	r3, r2
 8005c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	0151      	lsls	r1, r2, #5
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	440a      	add	r2, r1
 8005c34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c38:	f043 0302 	orr.w	r3, r3, #2
 8005c3c:	60d3      	str	r3, [r2, #12]
 8005c3e:	e101      	b.n	8005e44 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	015a      	lsls	r2, r3, #5
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	4413      	add	r3, r2
 8005c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c56:	d12b      	bne.n	8005cb0 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c64:	461a      	mov	r2, r3
 8005c66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c6a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	212c      	movs	r1, #44	; 0x2c
 8005c72:	fb01 f303 	mul.w	r3, r1, r3
 8005c76:	4413      	add	r3, r2
 8005c78:	3361      	adds	r3, #97	; 0x61
 8005c7a:	2207      	movs	r2, #7
 8005c7c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	015a      	lsls	r2, r3, #5
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	4413      	add	r3, r2
 8005c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	0151      	lsls	r1, r2, #5
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	440a      	add	r2, r1
 8005c94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c98:	f043 0302 	orr.w	r3, r3, #2
 8005c9c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	b2d2      	uxtb	r2, r2
 8005ca6:	4611      	mov	r1, r2
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f007 fbae 	bl	800d40a <USB_HC_Halt>
 8005cae:	e0c9      	b.n	8005e44 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	015a      	lsls	r2, r3, #5
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f003 0320 	and.w	r3, r3, #32
 8005cc2:	2b20      	cmp	r3, #32
 8005cc4:	d109      	bne.n	8005cda <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	2320      	movs	r3, #32
 8005cd6:	6093      	str	r3, [r2, #8]
 8005cd8:	e0b4      	b.n	8005e44 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	015a      	lsls	r2, r3, #5
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f003 0308 	and.w	r3, r3, #8
 8005cec:	2b08      	cmp	r3, #8
 8005cee:	d133      	bne.n	8005d58 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	0151      	lsls	r1, r2, #5
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	440a      	add	r2, r1
 8005d06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d0a:	f043 0302 	orr.w	r3, r3, #2
 8005d0e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	212c      	movs	r1, #44	; 0x2c
 8005d16:	fb01 f303 	mul.w	r3, r1, r3
 8005d1a:	4413      	add	r3, r2
 8005d1c:	3361      	adds	r3, #97	; 0x61
 8005d1e:	2205      	movs	r2, #5
 8005d20:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d2e:	461a      	mov	r2, r3
 8005d30:	2310      	movs	r3, #16
 8005d32:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	015a      	lsls	r2, r3, #5
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d40:	461a      	mov	r2, r3
 8005d42:	2308      	movs	r3, #8
 8005d44:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	b2d2      	uxtb	r2, r2
 8005d4e:	4611      	mov	r1, r2
 8005d50:	4618      	mov	r0, r3
 8005d52:	f007 fb5a 	bl	800d40a <USB_HC_Halt>
 8005d56:	e075      	b.n	8005e44 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	015a      	lsls	r2, r3, #5
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	4413      	add	r3, r2
 8005d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d6e:	d134      	bne.n	8005dda <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	0151      	lsls	r1, r2, #5
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	440a      	add	r2, r1
 8005d86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d8a:	f043 0302 	orr.w	r3, r3, #2
 8005d8e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	212c      	movs	r1, #44	; 0x2c
 8005d96:	fb01 f303 	mul.w	r3, r1, r3
 8005d9a:	4413      	add	r3, r2
 8005d9c:	3361      	adds	r3, #97	; 0x61
 8005d9e:	2208      	movs	r2, #8
 8005da0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	015a      	lsls	r2, r3, #5
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	4413      	add	r3, r2
 8005daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dae:	461a      	mov	r2, r3
 8005db0:	2310      	movs	r3, #16
 8005db2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dc6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	b2d2      	uxtb	r2, r2
 8005dd0:	4611      	mov	r1, r2
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f007 fb19 	bl	800d40a <USB_HC_Halt>
 8005dd8:	e034      	b.n	8005e44 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dec:	2b80      	cmp	r3, #128	; 0x80
 8005dee:	d129      	bne.n	8005e44 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	0151      	lsls	r1, r2, #5
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	440a      	add	r2, r1
 8005e06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e0a:	f043 0302 	orr.w	r3, r3, #2
 8005e0e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	212c      	movs	r1, #44	; 0x2c
 8005e16:	fb01 f303 	mul.w	r3, r1, r3
 8005e1a:	4413      	add	r3, r2
 8005e1c:	3361      	adds	r3, #97	; 0x61
 8005e1e:	2206      	movs	r2, #6
 8005e20:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	b2d2      	uxtb	r2, r2
 8005e2a:	4611      	mov	r1, r2
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f007 faec 	bl	800d40a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	015a      	lsls	r2, r3, #5
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e3e:	461a      	mov	r2, r3
 8005e40:	2380      	movs	r3, #128	; 0x80
 8005e42:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e5a:	d122      	bne.n	8005ea2 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	015a      	lsls	r2, r3, #5
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	0151      	lsls	r1, r2, #5
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	440a      	add	r2, r1
 8005e72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e76:	f043 0302 	orr.w	r3, r3, #2
 8005e7a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	b2d2      	uxtb	r2, r2
 8005e84:	4611      	mov	r1, r2
 8005e86:	4618      	mov	r0, r3
 8005e88:	f007 fabf 	bl	800d40a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e98:	461a      	mov	r2, r3
 8005e9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e9e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005ea0:	e2ba      	b.n	8006418 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	f040 811b 	bne.w	80060f0 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d019      	beq.n	8005ef6 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	212c      	movs	r1, #44	; 0x2c
 8005ec8:	fb01 f303 	mul.w	r3, r1, r3
 8005ecc:	4413      	add	r3, r2
 8005ece:	3348      	adds	r3, #72	; 0x48
 8005ed0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	0159      	lsls	r1, r3, #5
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	440b      	add	r3, r1
 8005eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005ee4:	1ad2      	subs	r2, r2, r3
 8005ee6:	6879      	ldr	r1, [r7, #4]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	202c      	movs	r0, #44	; 0x2c
 8005eec:	fb00 f303 	mul.w	r3, r0, r3
 8005ef0:	440b      	add	r3, r1
 8005ef2:	3350      	adds	r3, #80	; 0x50
 8005ef4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	212c      	movs	r1, #44	; 0x2c
 8005efc:	fb01 f303 	mul.w	r3, r1, r3
 8005f00:	4413      	add	r3, r2
 8005f02:	3361      	adds	r3, #97	; 0x61
 8005f04:	2201      	movs	r2, #1
 8005f06:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	212c      	movs	r1, #44	; 0x2c
 8005f0e:	fb01 f303 	mul.w	r3, r1, r3
 8005f12:	4413      	add	r3, r2
 8005f14:	335c      	adds	r3, #92	; 0x5c
 8005f16:	2200      	movs	r2, #0
 8005f18:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	015a      	lsls	r2, r3, #5
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	4413      	add	r3, r2
 8005f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f26:	461a      	mov	r2, r3
 8005f28:	2301      	movs	r3, #1
 8005f2a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	212c      	movs	r1, #44	; 0x2c
 8005f32:	fb01 f303 	mul.w	r3, r1, r3
 8005f36:	4413      	add	r3, r2
 8005f38:	333f      	adds	r3, #63	; 0x3f
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d009      	beq.n	8005f54 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	212c      	movs	r1, #44	; 0x2c
 8005f46:	fb01 f303 	mul.w	r3, r1, r3
 8005f4a:	4413      	add	r3, r2
 8005f4c:	333f      	adds	r3, #63	; 0x3f
 8005f4e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d121      	bne.n	8005f98 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	0151      	lsls	r1, r2, #5
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	440a      	add	r2, r1
 8005f6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f6e:	f043 0302 	orr.w	r3, r3, #2
 8005f72:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	b2d2      	uxtb	r2, r2
 8005f7c:	4611      	mov	r1, r2
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f007 fa43 	bl	800d40a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	015a      	lsls	r2, r3, #5
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f90:	461a      	mov	r2, r3
 8005f92:	2310      	movs	r3, #16
 8005f94:	6093      	str	r3, [r2, #8]
 8005f96:	e066      	b.n	8006066 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	212c      	movs	r1, #44	; 0x2c
 8005f9e:	fb01 f303 	mul.w	r3, r1, r3
 8005fa2:	4413      	add	r3, r2
 8005fa4:	333f      	adds	r3, #63	; 0x3f
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	2b03      	cmp	r3, #3
 8005faa:	d127      	bne.n	8005ffc <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	0151      	lsls	r1, r2, #5
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	440a      	add	r2, r1
 8005fc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fc6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005fca:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	212c      	movs	r1, #44	; 0x2c
 8005fd2:	fb01 f303 	mul.w	r3, r1, r3
 8005fd6:	4413      	add	r3, r2
 8005fd8:	3360      	adds	r3, #96	; 0x60
 8005fda:	2201      	movs	r2, #1
 8005fdc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	b2d9      	uxtb	r1, r3
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	202c      	movs	r0, #44	; 0x2c
 8005fe8:	fb00 f303 	mul.w	r3, r0, r3
 8005fec:	4413      	add	r3, r2
 8005fee:	3360      	adds	r3, #96	; 0x60
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f014 f98f 	bl	801a318 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005ffa:	e034      	b.n	8006066 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	212c      	movs	r1, #44	; 0x2c
 8006002:	fb01 f303 	mul.w	r3, r1, r3
 8006006:	4413      	add	r3, r2
 8006008:	333f      	adds	r3, #63	; 0x3f
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d12a      	bne.n	8006066 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	212c      	movs	r1, #44	; 0x2c
 8006016:	fb01 f303 	mul.w	r3, r1, r3
 800601a:	4413      	add	r3, r2
 800601c:	3360      	adds	r3, #96	; 0x60
 800601e:	2201      	movs	r2, #1
 8006020:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	212c      	movs	r1, #44	; 0x2c
 8006028:	fb01 f303 	mul.w	r3, r1, r3
 800602c:	4413      	add	r3, r2
 800602e:	3354      	adds	r3, #84	; 0x54
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	f083 0301 	eor.w	r3, r3, #1
 8006036:	b2d8      	uxtb	r0, r3
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	212c      	movs	r1, #44	; 0x2c
 800603e:	fb01 f303 	mul.w	r3, r1, r3
 8006042:	4413      	add	r3, r2
 8006044:	3354      	adds	r3, #84	; 0x54
 8006046:	4602      	mov	r2, r0
 8006048:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	b2d9      	uxtb	r1, r3
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	202c      	movs	r0, #44	; 0x2c
 8006054:	fb00 f303 	mul.w	r3, r0, r3
 8006058:	4413      	add	r3, r2
 800605a:	3360      	adds	r3, #96	; 0x60
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	461a      	mov	r2, r3
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f014 f959 	bl	801a318 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	2b01      	cmp	r3, #1
 800606c:	d12b      	bne.n	80060c6 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	212c      	movs	r1, #44	; 0x2c
 8006074:	fb01 f303 	mul.w	r3, r1, r3
 8006078:	4413      	add	r3, r2
 800607a:	3348      	adds	r3, #72	; 0x48
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	6879      	ldr	r1, [r7, #4]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	202c      	movs	r0, #44	; 0x2c
 8006084:	fb00 f202 	mul.w	r2, r0, r2
 8006088:	440a      	add	r2, r1
 800608a:	3240      	adds	r2, #64	; 0x40
 800608c:	8812      	ldrh	r2, [r2, #0]
 800608e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006092:	f003 0301 	and.w	r3, r3, #1
 8006096:	2b00      	cmp	r3, #0
 8006098:	f000 81be 	beq.w	8006418 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	212c      	movs	r1, #44	; 0x2c
 80060a2:	fb01 f303 	mul.w	r3, r1, r3
 80060a6:	4413      	add	r3, r2
 80060a8:	3354      	adds	r3, #84	; 0x54
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	f083 0301 	eor.w	r3, r3, #1
 80060b0:	b2d8      	uxtb	r0, r3
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	212c      	movs	r1, #44	; 0x2c
 80060b8:	fb01 f303 	mul.w	r3, r1, r3
 80060bc:	4413      	add	r3, r2
 80060be:	3354      	adds	r3, #84	; 0x54
 80060c0:	4602      	mov	r2, r0
 80060c2:	701a      	strb	r2, [r3, #0]
}
 80060c4:	e1a8      	b.n	8006418 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	212c      	movs	r1, #44	; 0x2c
 80060cc:	fb01 f303 	mul.w	r3, r1, r3
 80060d0:	4413      	add	r3, r2
 80060d2:	3354      	adds	r3, #84	; 0x54
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	f083 0301 	eor.w	r3, r3, #1
 80060da:	b2d8      	uxtb	r0, r3
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	212c      	movs	r1, #44	; 0x2c
 80060e2:	fb01 f303 	mul.w	r3, r1, r3
 80060e6:	4413      	add	r3, r2
 80060e8:	3354      	adds	r3, #84	; 0x54
 80060ea:	4602      	mov	r2, r0
 80060ec:	701a      	strb	r2, [r3, #0]
}
 80060ee:	e193      	b.n	8006418 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	015a      	lsls	r2, r3, #5
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f003 0302 	and.w	r3, r3, #2
 8006102:	2b02      	cmp	r3, #2
 8006104:	f040 8106 	bne.w	8006314 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	015a      	lsls	r2, r3, #5
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	4413      	add	r3, r2
 8006110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	0151      	lsls	r1, r2, #5
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	440a      	add	r2, r1
 800611e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006122:	f023 0302 	bic.w	r3, r3, #2
 8006126:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	212c      	movs	r1, #44	; 0x2c
 800612e:	fb01 f303 	mul.w	r3, r1, r3
 8006132:	4413      	add	r3, r2
 8006134:	3361      	adds	r3, #97	; 0x61
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d109      	bne.n	8006150 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	212c      	movs	r1, #44	; 0x2c
 8006142:	fb01 f303 	mul.w	r3, r1, r3
 8006146:	4413      	add	r3, r2
 8006148:	3360      	adds	r3, #96	; 0x60
 800614a:	2201      	movs	r2, #1
 800614c:	701a      	strb	r2, [r3, #0]
 800614e:	e0c9      	b.n	80062e4 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	212c      	movs	r1, #44	; 0x2c
 8006156:	fb01 f303 	mul.w	r3, r1, r3
 800615a:	4413      	add	r3, r2
 800615c:	3361      	adds	r3, #97	; 0x61
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	2b05      	cmp	r3, #5
 8006162:	d109      	bne.n	8006178 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	212c      	movs	r1, #44	; 0x2c
 800616a:	fb01 f303 	mul.w	r3, r1, r3
 800616e:	4413      	add	r3, r2
 8006170:	3360      	adds	r3, #96	; 0x60
 8006172:	2205      	movs	r2, #5
 8006174:	701a      	strb	r2, [r3, #0]
 8006176:	e0b5      	b.n	80062e4 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	212c      	movs	r1, #44	; 0x2c
 800617e:	fb01 f303 	mul.w	r3, r1, r3
 8006182:	4413      	add	r3, r2
 8006184:	3361      	adds	r3, #97	; 0x61
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	2b06      	cmp	r3, #6
 800618a:	d009      	beq.n	80061a0 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	212c      	movs	r1, #44	; 0x2c
 8006192:	fb01 f303 	mul.w	r3, r1, r3
 8006196:	4413      	add	r3, r2
 8006198:	3361      	adds	r3, #97	; 0x61
 800619a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800619c:	2b08      	cmp	r3, #8
 800619e:	d150      	bne.n	8006242 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	212c      	movs	r1, #44	; 0x2c
 80061a6:	fb01 f303 	mul.w	r3, r1, r3
 80061aa:	4413      	add	r3, r2
 80061ac:	335c      	adds	r3, #92	; 0x5c
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	1c5a      	adds	r2, r3, #1
 80061b2:	6879      	ldr	r1, [r7, #4]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	202c      	movs	r0, #44	; 0x2c
 80061b8:	fb00 f303 	mul.w	r3, r0, r3
 80061bc:	440b      	add	r3, r1
 80061be:	335c      	adds	r3, #92	; 0x5c
 80061c0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	212c      	movs	r1, #44	; 0x2c
 80061c8:	fb01 f303 	mul.w	r3, r1, r3
 80061cc:	4413      	add	r3, r2
 80061ce:	335c      	adds	r3, #92	; 0x5c
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d912      	bls.n	80061fc <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	212c      	movs	r1, #44	; 0x2c
 80061dc:	fb01 f303 	mul.w	r3, r1, r3
 80061e0:	4413      	add	r3, r2
 80061e2:	335c      	adds	r3, #92	; 0x5c
 80061e4:	2200      	movs	r2, #0
 80061e6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	212c      	movs	r1, #44	; 0x2c
 80061ee:	fb01 f303 	mul.w	r3, r1, r3
 80061f2:	4413      	add	r3, r2
 80061f4:	3360      	adds	r3, #96	; 0x60
 80061f6:	2204      	movs	r2, #4
 80061f8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80061fa:	e073      	b.n	80062e4 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	212c      	movs	r1, #44	; 0x2c
 8006202:	fb01 f303 	mul.w	r3, r1, r3
 8006206:	4413      	add	r3, r2
 8006208:	3360      	adds	r3, #96	; 0x60
 800620a:	2202      	movs	r2, #2
 800620c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	015a      	lsls	r2, r3, #5
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	4413      	add	r3, r2
 8006216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006224:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800622c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	015a      	lsls	r2, r3, #5
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	4413      	add	r3, r2
 8006236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800623a:	461a      	mov	r2, r3
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006240:	e050      	b.n	80062e4 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	212c      	movs	r1, #44	; 0x2c
 8006248:	fb01 f303 	mul.w	r3, r1, r3
 800624c:	4413      	add	r3, r2
 800624e:	3361      	adds	r3, #97	; 0x61
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	2b03      	cmp	r3, #3
 8006254:	d122      	bne.n	800629c <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	212c      	movs	r1, #44	; 0x2c
 800625c:	fb01 f303 	mul.w	r3, r1, r3
 8006260:	4413      	add	r3, r2
 8006262:	3360      	adds	r3, #96	; 0x60
 8006264:	2202      	movs	r2, #2
 8006266:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	015a      	lsls	r2, r3, #5
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	4413      	add	r3, r2
 8006270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800627e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006286:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	015a      	lsls	r2, r3, #5
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	4413      	add	r3, r2
 8006290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006294:	461a      	mov	r2, r3
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	6013      	str	r3, [r2, #0]
 800629a:	e023      	b.n	80062e4 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	212c      	movs	r1, #44	; 0x2c
 80062a2:	fb01 f303 	mul.w	r3, r1, r3
 80062a6:	4413      	add	r3, r2
 80062a8:	3361      	adds	r3, #97	; 0x61
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	2b07      	cmp	r3, #7
 80062ae:	d119      	bne.n	80062e4 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	212c      	movs	r1, #44	; 0x2c
 80062b6:	fb01 f303 	mul.w	r3, r1, r3
 80062ba:	4413      	add	r3, r2
 80062bc:	335c      	adds	r3, #92	; 0x5c
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	1c5a      	adds	r2, r3, #1
 80062c2:	6879      	ldr	r1, [r7, #4]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	202c      	movs	r0, #44	; 0x2c
 80062c8:	fb00 f303 	mul.w	r3, r0, r3
 80062cc:	440b      	add	r3, r1
 80062ce:	335c      	adds	r3, #92	; 0x5c
 80062d0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	212c      	movs	r1, #44	; 0x2c
 80062d8:	fb01 f303 	mul.w	r3, r1, r3
 80062dc:	4413      	add	r3, r2
 80062de:	3360      	adds	r3, #96	; 0x60
 80062e0:	2204      	movs	r2, #4
 80062e2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	015a      	lsls	r2, r3, #5
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	4413      	add	r3, r2
 80062ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062f0:	461a      	mov	r2, r3
 80062f2:	2302      	movs	r3, #2
 80062f4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	b2d9      	uxtb	r1, r3
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	202c      	movs	r0, #44	; 0x2c
 8006300:	fb00 f303 	mul.w	r3, r0, r3
 8006304:	4413      	add	r3, r2
 8006306:	3360      	adds	r3, #96	; 0x60
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	461a      	mov	r2, r3
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f014 f803 	bl	801a318 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006312:	e081      	b.n	8006418 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	4413      	add	r3, r2
 800631c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f003 0310 	and.w	r3, r3, #16
 8006326:	2b10      	cmp	r3, #16
 8006328:	d176      	bne.n	8006418 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	212c      	movs	r1, #44	; 0x2c
 8006330:	fb01 f303 	mul.w	r3, r1, r3
 8006334:	4413      	add	r3, r2
 8006336:	333f      	adds	r3, #63	; 0x3f
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	2b03      	cmp	r3, #3
 800633c:	d121      	bne.n	8006382 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	212c      	movs	r1, #44	; 0x2c
 8006344:	fb01 f303 	mul.w	r3, r1, r3
 8006348:	4413      	add	r3, r2
 800634a:	335c      	adds	r3, #92	; 0x5c
 800634c:	2200      	movs	r2, #0
 800634e:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	015a      	lsls	r2, r3, #5
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	4413      	add	r3, r2
 8006358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	0151      	lsls	r1, r2, #5
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	440a      	add	r2, r1
 8006366:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800636a:	f043 0302 	orr.w	r3, r3, #2
 800636e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	b2d2      	uxtb	r2, r2
 8006378:	4611      	mov	r1, r2
 800637a:	4618      	mov	r0, r3
 800637c:	f007 f845 	bl	800d40a <USB_HC_Halt>
 8006380:	e041      	b.n	8006406 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	212c      	movs	r1, #44	; 0x2c
 8006388:	fb01 f303 	mul.w	r3, r1, r3
 800638c:	4413      	add	r3, r2
 800638e:	333f      	adds	r3, #63	; 0x3f
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d009      	beq.n	80063aa <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	212c      	movs	r1, #44	; 0x2c
 800639c:	fb01 f303 	mul.w	r3, r1, r3
 80063a0:	4413      	add	r3, r2
 80063a2:	333f      	adds	r3, #63	; 0x3f
 80063a4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d12d      	bne.n	8006406 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	212c      	movs	r1, #44	; 0x2c
 80063b0:	fb01 f303 	mul.w	r3, r1, r3
 80063b4:	4413      	add	r3, r2
 80063b6:	335c      	adds	r3, #92	; 0x5c
 80063b8:	2200      	movs	r2, #0
 80063ba:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d120      	bne.n	8006406 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	212c      	movs	r1, #44	; 0x2c
 80063ca:	fb01 f303 	mul.w	r3, r1, r3
 80063ce:	4413      	add	r3, r2
 80063d0:	3361      	adds	r3, #97	; 0x61
 80063d2:	2203      	movs	r2, #3
 80063d4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	0151      	lsls	r1, r2, #5
 80063e8:	693a      	ldr	r2, [r7, #16]
 80063ea:	440a      	add	r2, r1
 80063ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063f0:	f043 0302 	orr.w	r3, r3, #2
 80063f4:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	b2d2      	uxtb	r2, r2
 80063fe:	4611      	mov	r1, r2
 8006400:	4618      	mov	r0, r3
 8006402:	f007 f802 	bl	800d40a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	015a      	lsls	r2, r3, #5
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	4413      	add	r3, r2
 800640e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006412:	461a      	mov	r2, r3
 8006414:	2310      	movs	r3, #16
 8006416:	6093      	str	r3, [r2, #8]
}
 8006418:	bf00      	nop
 800641a:	3718      	adds	r7, #24
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b088      	sub	sp, #32
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	460b      	mov	r3, r1
 800642a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8006436:	78fb      	ldrb	r3, [r7, #3]
 8006438:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	015a      	lsls	r2, r3, #5
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	4413      	add	r3, r2
 8006442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	f003 0304 	and.w	r3, r3, #4
 800644c:	2b04      	cmp	r3, #4
 800644e:	d119      	bne.n	8006484 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	015a      	lsls	r2, r3, #5
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	4413      	add	r3, r2
 8006458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800645c:	461a      	mov	r2, r3
 800645e:	2304      	movs	r3, #4
 8006460:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	015a      	lsls	r2, r3, #5
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	4413      	add	r3, r2
 800646a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	697a      	ldr	r2, [r7, #20]
 8006472:	0151      	lsls	r1, r2, #5
 8006474:	69ba      	ldr	r2, [r7, #24]
 8006476:	440a      	add	r2, r1
 8006478:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800647c:	f043 0302 	orr.w	r3, r3, #2
 8006480:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8006482:	e3c6      	b.n	8006c12 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	015a      	lsls	r2, r3, #5
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	4413      	add	r3, r2
 800648c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	f003 0320 	and.w	r3, r3, #32
 8006496:	2b20      	cmp	r3, #32
 8006498:	d13e      	bne.n	8006518 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	015a      	lsls	r2, r3, #5
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064a6:	461a      	mov	r2, r3
 80064a8:	2320      	movs	r3, #32
 80064aa:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	212c      	movs	r1, #44	; 0x2c
 80064b2:	fb01 f303 	mul.w	r3, r1, r3
 80064b6:	4413      	add	r3, r2
 80064b8:	333d      	adds	r3, #61	; 0x3d
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	f040 83a8 	bne.w	8006c12 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	212c      	movs	r1, #44	; 0x2c
 80064c8:	fb01 f303 	mul.w	r3, r1, r3
 80064cc:	4413      	add	r3, r2
 80064ce:	333d      	adds	r3, #61	; 0x3d
 80064d0:	2200      	movs	r2, #0
 80064d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	212c      	movs	r1, #44	; 0x2c
 80064da:	fb01 f303 	mul.w	r3, r1, r3
 80064de:	4413      	add	r3, r2
 80064e0:	3360      	adds	r3, #96	; 0x60
 80064e2:	2202      	movs	r2, #2
 80064e4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	0151      	lsls	r1, r2, #5
 80064f8:	69ba      	ldr	r2, [r7, #24]
 80064fa:	440a      	add	r2, r1
 80064fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006500:	f043 0302 	orr.w	r3, r3, #2
 8006504:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	697a      	ldr	r2, [r7, #20]
 800650c:	b2d2      	uxtb	r2, r2
 800650e:	4611      	mov	r1, r2
 8006510:	4618      	mov	r0, r3
 8006512:	f006 ff7a 	bl	800d40a <USB_HC_Halt>
}
 8006516:	e37c      	b.n	8006c12 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	015a      	lsls	r2, r3, #5
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	4413      	add	r3, r2
 8006520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800652a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800652e:	d122      	bne.n	8006576 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	015a      	lsls	r2, r3, #5
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	4413      	add	r3, r2
 8006538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	0151      	lsls	r1, r2, #5
 8006542:	69ba      	ldr	r2, [r7, #24]
 8006544:	440a      	add	r2, r1
 8006546:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800654a:	f043 0302 	orr.w	r3, r3, #2
 800654e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	b2d2      	uxtb	r2, r2
 8006558:	4611      	mov	r1, r2
 800655a:	4618      	mov	r0, r3
 800655c:	f006 ff55 	bl	800d40a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	015a      	lsls	r2, r3, #5
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	4413      	add	r3, r2
 8006568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800656c:	461a      	mov	r2, r3
 800656e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006572:	6093      	str	r3, [r2, #8]
}
 8006574:	e34d      	b.n	8006c12 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	015a      	lsls	r2, r3, #5
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	4413      	add	r3, r2
 800657e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f003 0301 	and.w	r3, r3, #1
 8006588:	2b01      	cmp	r3, #1
 800658a:	d150      	bne.n	800662e <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	212c      	movs	r1, #44	; 0x2c
 8006592:	fb01 f303 	mul.w	r3, r1, r3
 8006596:	4413      	add	r3, r2
 8006598:	335c      	adds	r3, #92	; 0x5c
 800659a:	2200      	movs	r2, #0
 800659c:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	015a      	lsls	r2, r3, #5
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	4413      	add	r3, r2
 80065a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b0:	2b40      	cmp	r3, #64	; 0x40
 80065b2:	d111      	bne.n	80065d8 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	212c      	movs	r1, #44	; 0x2c
 80065ba:	fb01 f303 	mul.w	r3, r1, r3
 80065be:	4413      	add	r3, r2
 80065c0:	333d      	adds	r3, #61	; 0x3d
 80065c2:	2201      	movs	r2, #1
 80065c4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	015a      	lsls	r2, r3, #5
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	4413      	add	r3, r2
 80065ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d2:	461a      	mov	r2, r3
 80065d4:	2340      	movs	r3, #64	; 0x40
 80065d6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	015a      	lsls	r2, r3, #5
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	4413      	add	r3, r2
 80065e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	0151      	lsls	r1, r2, #5
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	440a      	add	r2, r1
 80065ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065f2:	f043 0302 	orr.w	r3, r3, #2
 80065f6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	697a      	ldr	r2, [r7, #20]
 80065fe:	b2d2      	uxtb	r2, r2
 8006600:	4611      	mov	r1, r2
 8006602:	4618      	mov	r0, r3
 8006604:	f006 ff01 	bl	800d40a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	015a      	lsls	r2, r3, #5
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	4413      	add	r3, r2
 8006610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006614:	461a      	mov	r2, r3
 8006616:	2301      	movs	r3, #1
 8006618:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	212c      	movs	r1, #44	; 0x2c
 8006620:	fb01 f303 	mul.w	r3, r1, r3
 8006624:	4413      	add	r3, r2
 8006626:	3361      	adds	r3, #97	; 0x61
 8006628:	2201      	movs	r2, #1
 800662a:	701a      	strb	r2, [r3, #0]
}
 800662c:	e2f1      	b.n	8006c12 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	015a      	lsls	r2, r3, #5
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	4413      	add	r3, r2
 8006636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006640:	2b40      	cmp	r3, #64	; 0x40
 8006642:	d13c      	bne.n	80066be <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	212c      	movs	r1, #44	; 0x2c
 800664a:	fb01 f303 	mul.w	r3, r1, r3
 800664e:	4413      	add	r3, r2
 8006650:	3361      	adds	r3, #97	; 0x61
 8006652:	2204      	movs	r2, #4
 8006654:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	212c      	movs	r1, #44	; 0x2c
 800665c:	fb01 f303 	mul.w	r3, r1, r3
 8006660:	4413      	add	r3, r2
 8006662:	333d      	adds	r3, #61	; 0x3d
 8006664:	2201      	movs	r2, #1
 8006666:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	212c      	movs	r1, #44	; 0x2c
 800666e:	fb01 f303 	mul.w	r3, r1, r3
 8006672:	4413      	add	r3, r2
 8006674:	335c      	adds	r3, #92	; 0x5c
 8006676:	2200      	movs	r2, #0
 8006678:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	015a      	lsls	r2, r3, #5
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	4413      	add	r3, r2
 8006682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	0151      	lsls	r1, r2, #5
 800668c:	69ba      	ldr	r2, [r7, #24]
 800668e:	440a      	add	r2, r1
 8006690:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006694:	f043 0302 	orr.w	r3, r3, #2
 8006698:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	b2d2      	uxtb	r2, r2
 80066a2:	4611      	mov	r1, r2
 80066a4:	4618      	mov	r0, r3
 80066a6:	f006 feb0 	bl	800d40a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066b6:	461a      	mov	r2, r3
 80066b8:	2340      	movs	r3, #64	; 0x40
 80066ba:	6093      	str	r3, [r2, #8]
}
 80066bc:	e2a9      	b.n	8006c12 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f003 0308 	and.w	r3, r3, #8
 80066d0:	2b08      	cmp	r3, #8
 80066d2:	d12a      	bne.n	800672a <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	015a      	lsls	r2, r3, #5
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	4413      	add	r3, r2
 80066dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e0:	461a      	mov	r2, r3
 80066e2:	2308      	movs	r3, #8
 80066e4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	015a      	lsls	r2, r3, #5
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	4413      	add	r3, r2
 80066ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	697a      	ldr	r2, [r7, #20]
 80066f6:	0151      	lsls	r1, r2, #5
 80066f8:	69ba      	ldr	r2, [r7, #24]
 80066fa:	440a      	add	r2, r1
 80066fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006700:	f043 0302 	orr.w	r3, r3, #2
 8006704:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	b2d2      	uxtb	r2, r2
 800670e:	4611      	mov	r1, r2
 8006710:	4618      	mov	r0, r3
 8006712:	f006 fe7a 	bl	800d40a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	212c      	movs	r1, #44	; 0x2c
 800671c:	fb01 f303 	mul.w	r3, r1, r3
 8006720:	4413      	add	r3, r2
 8006722:	3361      	adds	r3, #97	; 0x61
 8006724:	2205      	movs	r2, #5
 8006726:	701a      	strb	r2, [r3, #0]
}
 8006728:	e273      	b.n	8006c12 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	015a      	lsls	r2, r3, #5
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	4413      	add	r3, r2
 8006732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f003 0310 	and.w	r3, r3, #16
 800673c:	2b10      	cmp	r3, #16
 800673e:	d150      	bne.n	80067e2 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006740:	687a      	ldr	r2, [r7, #4]
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	212c      	movs	r1, #44	; 0x2c
 8006746:	fb01 f303 	mul.w	r3, r1, r3
 800674a:	4413      	add	r3, r2
 800674c:	335c      	adds	r3, #92	; 0x5c
 800674e:	2200      	movs	r2, #0
 8006750:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	212c      	movs	r1, #44	; 0x2c
 8006758:	fb01 f303 	mul.w	r3, r1, r3
 800675c:	4413      	add	r3, r2
 800675e:	3361      	adds	r3, #97	; 0x61
 8006760:	2203      	movs	r2, #3
 8006762:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	212c      	movs	r1, #44	; 0x2c
 800676a:	fb01 f303 	mul.w	r3, r1, r3
 800676e:	4413      	add	r3, r2
 8006770:	333d      	adds	r3, #61	; 0x3d
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d112      	bne.n	800679e <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	212c      	movs	r1, #44	; 0x2c
 800677e:	fb01 f303 	mul.w	r3, r1, r3
 8006782:	4413      	add	r3, r2
 8006784:	333c      	adds	r3, #60	; 0x3c
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d108      	bne.n	800679e <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	212c      	movs	r1, #44	; 0x2c
 8006792:	fb01 f303 	mul.w	r3, r1, r3
 8006796:	4413      	add	r3, r2
 8006798:	333d      	adds	r3, #61	; 0x3d
 800679a:	2201      	movs	r2, #1
 800679c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	015a      	lsls	r2, r3, #5
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	4413      	add	r3, r2
 80067a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	697a      	ldr	r2, [r7, #20]
 80067ae:	0151      	lsls	r1, r2, #5
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	440a      	add	r2, r1
 80067b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067b8:	f043 0302 	orr.w	r3, r3, #2
 80067bc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	b2d2      	uxtb	r2, r2
 80067c6:	4611      	mov	r1, r2
 80067c8:	4618      	mov	r0, r3
 80067ca:	f006 fe1e 	bl	800d40a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	015a      	lsls	r2, r3, #5
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	4413      	add	r3, r2
 80067d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067da:	461a      	mov	r2, r3
 80067dc:	2310      	movs	r3, #16
 80067de:	6093      	str	r3, [r2, #8]
}
 80067e0:	e217      	b.n	8006c12 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	015a      	lsls	r2, r3, #5
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	4413      	add	r3, r2
 80067ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f4:	2b80      	cmp	r3, #128	; 0x80
 80067f6:	d174      	bne.n	80068e2 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d121      	bne.n	8006844 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	212c      	movs	r1, #44	; 0x2c
 8006806:	fb01 f303 	mul.w	r3, r1, r3
 800680a:	4413      	add	r3, r2
 800680c:	3361      	adds	r3, #97	; 0x61
 800680e:	2206      	movs	r2, #6
 8006810:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	015a      	lsls	r2, r3, #5
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	4413      	add	r3, r2
 800681a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	697a      	ldr	r2, [r7, #20]
 8006822:	0151      	lsls	r1, r2, #5
 8006824:	69ba      	ldr	r2, [r7, #24]
 8006826:	440a      	add	r2, r1
 8006828:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800682c:	f043 0302 	orr.w	r3, r3, #2
 8006830:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	b2d2      	uxtb	r2, r2
 800683a:	4611      	mov	r1, r2
 800683c:	4618      	mov	r0, r3
 800683e:	f006 fde4 	bl	800d40a <USB_HC_Halt>
 8006842:	e044      	b.n	80068ce <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	212c      	movs	r1, #44	; 0x2c
 800684a:	fb01 f303 	mul.w	r3, r1, r3
 800684e:	4413      	add	r3, r2
 8006850:	335c      	adds	r3, #92	; 0x5c
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	1c5a      	adds	r2, r3, #1
 8006856:	6879      	ldr	r1, [r7, #4]
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	202c      	movs	r0, #44	; 0x2c
 800685c:	fb00 f303 	mul.w	r3, r0, r3
 8006860:	440b      	add	r3, r1
 8006862:	335c      	adds	r3, #92	; 0x5c
 8006864:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	212c      	movs	r1, #44	; 0x2c
 800686c:	fb01 f303 	mul.w	r3, r1, r3
 8006870:	4413      	add	r3, r2
 8006872:	335c      	adds	r3, #92	; 0x5c
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b02      	cmp	r3, #2
 8006878:	d920      	bls.n	80068bc <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	212c      	movs	r1, #44	; 0x2c
 8006880:	fb01 f303 	mul.w	r3, r1, r3
 8006884:	4413      	add	r3, r2
 8006886:	335c      	adds	r3, #92	; 0x5c
 8006888:	2200      	movs	r2, #0
 800688a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	212c      	movs	r1, #44	; 0x2c
 8006892:	fb01 f303 	mul.w	r3, r1, r3
 8006896:	4413      	add	r3, r2
 8006898:	3360      	adds	r3, #96	; 0x60
 800689a:	2204      	movs	r2, #4
 800689c:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	b2d9      	uxtb	r1, r3
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	202c      	movs	r0, #44	; 0x2c
 80068a8:	fb00 f303 	mul.w	r3, r0, r3
 80068ac:	4413      	add	r3, r2
 80068ae:	3360      	adds	r3, #96	; 0x60
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	461a      	mov	r2, r3
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f013 fd2f 	bl	801a318 <HAL_HCD_HC_NotifyURBChange_Callback>
 80068ba:	e008      	b.n	80068ce <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	212c      	movs	r1, #44	; 0x2c
 80068c2:	fb01 f303 	mul.w	r3, r1, r3
 80068c6:	4413      	add	r3, r2
 80068c8:	3360      	adds	r3, #96	; 0x60
 80068ca:	2202      	movs	r2, #2
 80068cc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	015a      	lsls	r2, r3, #5
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	4413      	add	r3, r2
 80068d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068da:	461a      	mov	r2, r3
 80068dc:	2380      	movs	r3, #128	; 0x80
 80068de:	6093      	str	r3, [r2, #8]
}
 80068e0:	e197      	b.n	8006c12 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	015a      	lsls	r2, r3, #5
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	4413      	add	r3, r2
 80068ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068f8:	d134      	bne.n	8006964 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	015a      	lsls	r2, r3, #5
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	4413      	add	r3, r2
 8006902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	697a      	ldr	r2, [r7, #20]
 800690a:	0151      	lsls	r1, r2, #5
 800690c:	69ba      	ldr	r2, [r7, #24]
 800690e:	440a      	add	r2, r1
 8006910:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006914:	f043 0302 	orr.w	r3, r3, #2
 8006918:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	b2d2      	uxtb	r2, r2
 8006922:	4611      	mov	r1, r2
 8006924:	4618      	mov	r0, r3
 8006926:	f006 fd70 	bl	800d40a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	015a      	lsls	r2, r3, #5
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	4413      	add	r3, r2
 8006932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006936:	461a      	mov	r2, r3
 8006938:	2310      	movs	r3, #16
 800693a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	015a      	lsls	r2, r3, #5
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	4413      	add	r3, r2
 8006944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006948:	461a      	mov	r2, r3
 800694a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800694e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	212c      	movs	r1, #44	; 0x2c
 8006956:	fb01 f303 	mul.w	r3, r1, r3
 800695a:	4413      	add	r3, r2
 800695c:	3361      	adds	r3, #97	; 0x61
 800695e:	2208      	movs	r2, #8
 8006960:	701a      	strb	r2, [r3, #0]
}
 8006962:	e156      	b.n	8006c12 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	015a      	lsls	r2, r3, #5
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	4413      	add	r3, r2
 800696c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f003 0302 	and.w	r3, r3, #2
 8006976:	2b02      	cmp	r3, #2
 8006978:	f040 814b 	bne.w	8006c12 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	015a      	lsls	r2, r3, #5
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	4413      	add	r3, r2
 8006984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	0151      	lsls	r1, r2, #5
 800698e:	69ba      	ldr	r2, [r7, #24]
 8006990:	440a      	add	r2, r1
 8006992:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006996:	f023 0302 	bic.w	r3, r3, #2
 800699a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	212c      	movs	r1, #44	; 0x2c
 80069a2:	fb01 f303 	mul.w	r3, r1, r3
 80069a6:	4413      	add	r3, r2
 80069a8:	3361      	adds	r3, #97	; 0x61
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d179      	bne.n	8006aa4 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	212c      	movs	r1, #44	; 0x2c
 80069b6:	fb01 f303 	mul.w	r3, r1, r3
 80069ba:	4413      	add	r3, r2
 80069bc:	3360      	adds	r3, #96	; 0x60
 80069be:	2201      	movs	r2, #1
 80069c0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	212c      	movs	r1, #44	; 0x2c
 80069c8:	fb01 f303 	mul.w	r3, r1, r3
 80069cc:	4413      	add	r3, r2
 80069ce:	333f      	adds	r3, #63	; 0x3f
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d00a      	beq.n	80069ec <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	212c      	movs	r1, #44	; 0x2c
 80069dc:	fb01 f303 	mul.w	r3, r1, r3
 80069e0:	4413      	add	r3, r2
 80069e2:	333f      	adds	r3, #63	; 0x3f
 80069e4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80069e6:	2b03      	cmp	r3, #3
 80069e8:	f040 80fc 	bne.w	8006be4 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d142      	bne.n	8006a7a <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	212c      	movs	r1, #44	; 0x2c
 80069fa:	fb01 f303 	mul.w	r3, r1, r3
 80069fe:	4413      	add	r3, r2
 8006a00:	334c      	adds	r3, #76	; 0x4c
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 80ed 	beq.w	8006be4 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	212c      	movs	r1, #44	; 0x2c
 8006a10:	fb01 f303 	mul.w	r3, r1, r3
 8006a14:	4413      	add	r3, r2
 8006a16:	334c      	adds	r3, #76	; 0x4c
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	6879      	ldr	r1, [r7, #4]
 8006a1c:	697a      	ldr	r2, [r7, #20]
 8006a1e:	202c      	movs	r0, #44	; 0x2c
 8006a20:	fb00 f202 	mul.w	r2, r0, r2
 8006a24:	440a      	add	r2, r1
 8006a26:	3240      	adds	r2, #64	; 0x40
 8006a28:	8812      	ldrh	r2, [r2, #0]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	3b01      	subs	r3, #1
 8006a2e:	6879      	ldr	r1, [r7, #4]
 8006a30:	697a      	ldr	r2, [r7, #20]
 8006a32:	202c      	movs	r0, #44	; 0x2c
 8006a34:	fb00 f202 	mul.w	r2, r0, r2
 8006a38:	440a      	add	r2, r1
 8006a3a:	3240      	adds	r2, #64	; 0x40
 8006a3c:	8812      	ldrh	r2, [r2, #0]
 8006a3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a42:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f003 0301 	and.w	r3, r3, #1
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f000 80ca 	beq.w	8006be4 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	212c      	movs	r1, #44	; 0x2c
 8006a56:	fb01 f303 	mul.w	r3, r1, r3
 8006a5a:	4413      	add	r3, r2
 8006a5c:	3355      	adds	r3, #85	; 0x55
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	f083 0301 	eor.w	r3, r3, #1
 8006a64:	b2d8      	uxtb	r0, r3
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	212c      	movs	r1, #44	; 0x2c
 8006a6c:	fb01 f303 	mul.w	r3, r1, r3
 8006a70:	4413      	add	r3, r2
 8006a72:	3355      	adds	r3, #85	; 0x55
 8006a74:	4602      	mov	r2, r0
 8006a76:	701a      	strb	r2, [r3, #0]
 8006a78:	e0b4      	b.n	8006be4 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	212c      	movs	r1, #44	; 0x2c
 8006a80:	fb01 f303 	mul.w	r3, r1, r3
 8006a84:	4413      	add	r3, r2
 8006a86:	3355      	adds	r3, #85	; 0x55
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	f083 0301 	eor.w	r3, r3, #1
 8006a8e:	b2d8      	uxtb	r0, r3
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	212c      	movs	r1, #44	; 0x2c
 8006a96:	fb01 f303 	mul.w	r3, r1, r3
 8006a9a:	4413      	add	r3, r2
 8006a9c:	3355      	adds	r3, #85	; 0x55
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	701a      	strb	r2, [r3, #0]
 8006aa2:	e09f      	b.n	8006be4 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	212c      	movs	r1, #44	; 0x2c
 8006aaa:	fb01 f303 	mul.w	r3, r1, r3
 8006aae:	4413      	add	r3, r2
 8006ab0:	3361      	adds	r3, #97	; 0x61
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	2b03      	cmp	r3, #3
 8006ab6:	d109      	bne.n	8006acc <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	212c      	movs	r1, #44	; 0x2c
 8006abe:	fb01 f303 	mul.w	r3, r1, r3
 8006ac2:	4413      	add	r3, r2
 8006ac4:	3360      	adds	r3, #96	; 0x60
 8006ac6:	2202      	movs	r2, #2
 8006ac8:	701a      	strb	r2, [r3, #0]
 8006aca:	e08b      	b.n	8006be4 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	212c      	movs	r1, #44	; 0x2c
 8006ad2:	fb01 f303 	mul.w	r3, r1, r3
 8006ad6:	4413      	add	r3, r2
 8006ad8:	3361      	adds	r3, #97	; 0x61
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	2b04      	cmp	r3, #4
 8006ade:	d109      	bne.n	8006af4 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	212c      	movs	r1, #44	; 0x2c
 8006ae6:	fb01 f303 	mul.w	r3, r1, r3
 8006aea:	4413      	add	r3, r2
 8006aec:	3360      	adds	r3, #96	; 0x60
 8006aee:	2202      	movs	r2, #2
 8006af0:	701a      	strb	r2, [r3, #0]
 8006af2:	e077      	b.n	8006be4 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	212c      	movs	r1, #44	; 0x2c
 8006afa:	fb01 f303 	mul.w	r3, r1, r3
 8006afe:	4413      	add	r3, r2
 8006b00:	3361      	adds	r3, #97	; 0x61
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	2b05      	cmp	r3, #5
 8006b06:	d109      	bne.n	8006b1c <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	212c      	movs	r1, #44	; 0x2c
 8006b0e:	fb01 f303 	mul.w	r3, r1, r3
 8006b12:	4413      	add	r3, r2
 8006b14:	3360      	adds	r3, #96	; 0x60
 8006b16:	2205      	movs	r2, #5
 8006b18:	701a      	strb	r2, [r3, #0]
 8006b1a:	e063      	b.n	8006be4 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	212c      	movs	r1, #44	; 0x2c
 8006b22:	fb01 f303 	mul.w	r3, r1, r3
 8006b26:	4413      	add	r3, r2
 8006b28:	3361      	adds	r3, #97	; 0x61
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	2b06      	cmp	r3, #6
 8006b2e:	d009      	beq.n	8006b44 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	212c      	movs	r1, #44	; 0x2c
 8006b36:	fb01 f303 	mul.w	r3, r1, r3
 8006b3a:	4413      	add	r3, r2
 8006b3c:	3361      	adds	r3, #97	; 0x61
 8006b3e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006b40:	2b08      	cmp	r3, #8
 8006b42:	d14f      	bne.n	8006be4 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	212c      	movs	r1, #44	; 0x2c
 8006b4a:	fb01 f303 	mul.w	r3, r1, r3
 8006b4e:	4413      	add	r3, r2
 8006b50:	335c      	adds	r3, #92	; 0x5c
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	1c5a      	adds	r2, r3, #1
 8006b56:	6879      	ldr	r1, [r7, #4]
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	202c      	movs	r0, #44	; 0x2c
 8006b5c:	fb00 f303 	mul.w	r3, r0, r3
 8006b60:	440b      	add	r3, r1
 8006b62:	335c      	adds	r3, #92	; 0x5c
 8006b64:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	212c      	movs	r1, #44	; 0x2c
 8006b6c:	fb01 f303 	mul.w	r3, r1, r3
 8006b70:	4413      	add	r3, r2
 8006b72:	335c      	adds	r3, #92	; 0x5c
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d912      	bls.n	8006ba0 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	212c      	movs	r1, #44	; 0x2c
 8006b80:	fb01 f303 	mul.w	r3, r1, r3
 8006b84:	4413      	add	r3, r2
 8006b86:	335c      	adds	r3, #92	; 0x5c
 8006b88:	2200      	movs	r2, #0
 8006b8a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	212c      	movs	r1, #44	; 0x2c
 8006b92:	fb01 f303 	mul.w	r3, r1, r3
 8006b96:	4413      	add	r3, r2
 8006b98:	3360      	adds	r3, #96	; 0x60
 8006b9a:	2204      	movs	r2, #4
 8006b9c:	701a      	strb	r2, [r3, #0]
 8006b9e:	e021      	b.n	8006be4 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	212c      	movs	r1, #44	; 0x2c
 8006ba6:	fb01 f303 	mul.w	r3, r1, r3
 8006baa:	4413      	add	r3, r2
 8006bac:	3360      	adds	r3, #96	; 0x60
 8006bae:	2202      	movs	r2, #2
 8006bb0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	015a      	lsls	r2, r3, #5
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	4413      	add	r3, r2
 8006bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006bc8:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bd0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	015a      	lsls	r2, r3, #5
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	4413      	add	r3, r2
 8006bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bde:	461a      	mov	r2, r3
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	015a      	lsls	r2, r3, #5
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	4413      	add	r3, r2
 8006bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	2302      	movs	r3, #2
 8006bf4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	b2d9      	uxtb	r1, r3
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	202c      	movs	r0, #44	; 0x2c
 8006c00:	fb00 f303 	mul.w	r3, r0, r3
 8006c04:	4413      	add	r3, r2
 8006c06:	3360      	adds	r3, #96	; 0x60
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f013 fb83 	bl	801a318 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006c12:	bf00      	nop
 8006c14:	3720      	adds	r7, #32
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b08a      	sub	sp, #40	; 0x28
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	f003 030f 	and.w	r3, r3, #15
 8006c3a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	0c5b      	lsrs	r3, r3, #17
 8006c40:	f003 030f 	and.w	r3, r3, #15
 8006c44:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	091b      	lsrs	r3, r3, #4
 8006c4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c4e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d004      	beq.n	8006c60 <HCD_RXQLVL_IRQHandler+0x46>
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	2b05      	cmp	r3, #5
 8006c5a:	f000 80a9 	beq.w	8006db0 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006c5e:	e0aa      	b.n	8006db6 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	f000 80a6 	beq.w	8006db4 <HCD_RXQLVL_IRQHandler+0x19a>
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	212c      	movs	r1, #44	; 0x2c
 8006c6e:	fb01 f303 	mul.w	r3, r1, r3
 8006c72:	4413      	add	r3, r2
 8006c74:	3344      	adds	r3, #68	; 0x44
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f000 809b 	beq.w	8006db4 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	212c      	movs	r1, #44	; 0x2c
 8006c84:	fb01 f303 	mul.w	r3, r1, r3
 8006c88:	4413      	add	r3, r2
 8006c8a:	3350      	adds	r3, #80	; 0x50
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	441a      	add	r2, r3
 8006c92:	6879      	ldr	r1, [r7, #4]
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	202c      	movs	r0, #44	; 0x2c
 8006c98:	fb00 f303 	mul.w	r3, r0, r3
 8006c9c:	440b      	add	r3, r1
 8006c9e:	334c      	adds	r3, #76	; 0x4c
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d87a      	bhi.n	8006d9c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6818      	ldr	r0, [r3, #0]
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	212c      	movs	r1, #44	; 0x2c
 8006cb0:	fb01 f303 	mul.w	r3, r1, r3
 8006cb4:	4413      	add	r3, r2
 8006cb6:	3344      	adds	r3, #68	; 0x44
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	b292      	uxth	r2, r2
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	f005 ff42 	bl	800cb48 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	212c      	movs	r1, #44	; 0x2c
 8006cca:	fb01 f303 	mul.w	r3, r1, r3
 8006cce:	4413      	add	r3, r2
 8006cd0:	3344      	adds	r3, #68	; 0x44
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	441a      	add	r2, r3
 8006cd8:	6879      	ldr	r1, [r7, #4]
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	202c      	movs	r0, #44	; 0x2c
 8006cde:	fb00 f303 	mul.w	r3, r0, r3
 8006ce2:	440b      	add	r3, r1
 8006ce4:	3344      	adds	r3, #68	; 0x44
 8006ce6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	212c      	movs	r1, #44	; 0x2c
 8006cee:	fb01 f303 	mul.w	r3, r1, r3
 8006cf2:	4413      	add	r3, r2
 8006cf4:	3350      	adds	r3, #80	; 0x50
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	441a      	add	r2, r3
 8006cfc:	6879      	ldr	r1, [r7, #4]
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	202c      	movs	r0, #44	; 0x2c
 8006d02:	fb00 f303 	mul.w	r3, r0, r3
 8006d06:	440b      	add	r3, r1
 8006d08:	3350      	adds	r3, #80	; 0x50
 8006d0a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	015a      	lsls	r2, r3, #5
 8006d10:	6a3b      	ldr	r3, [r7, #32]
 8006d12:	4413      	add	r3, r2
 8006d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	0cdb      	lsrs	r3, r3, #19
 8006d1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d20:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	212c      	movs	r1, #44	; 0x2c
 8006d28:	fb01 f303 	mul.w	r3, r1, r3
 8006d2c:	4413      	add	r3, r2
 8006d2e:	3340      	adds	r3, #64	; 0x40
 8006d30:	881b      	ldrh	r3, [r3, #0]
 8006d32:	461a      	mov	r2, r3
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d13c      	bne.n	8006db4 <HCD_RXQLVL_IRQHandler+0x19a>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d039      	beq.n	8006db4 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	015a      	lsls	r2, r3, #5
 8006d44:	6a3b      	ldr	r3, [r7, #32]
 8006d46:	4413      	add	r3, r2
 8006d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d56:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d5e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	015a      	lsls	r2, r3, #5
 8006d64:	6a3b      	ldr	r3, [r7, #32]
 8006d66:	4413      	add	r3, r2
 8006d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	212c      	movs	r1, #44	; 0x2c
 8006d78:	fb01 f303 	mul.w	r3, r1, r3
 8006d7c:	4413      	add	r3, r2
 8006d7e:	3354      	adds	r3, #84	; 0x54
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	f083 0301 	eor.w	r3, r3, #1
 8006d86:	b2d8      	uxtb	r0, r3
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	212c      	movs	r1, #44	; 0x2c
 8006d8e:	fb01 f303 	mul.w	r3, r1, r3
 8006d92:	4413      	add	r3, r2
 8006d94:	3354      	adds	r3, #84	; 0x54
 8006d96:	4602      	mov	r2, r0
 8006d98:	701a      	strb	r2, [r3, #0]
      break;
 8006d9a:	e00b      	b.n	8006db4 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	212c      	movs	r1, #44	; 0x2c
 8006da2:	fb01 f303 	mul.w	r3, r1, r3
 8006da6:	4413      	add	r3, r2
 8006da8:	3360      	adds	r3, #96	; 0x60
 8006daa:	2204      	movs	r2, #4
 8006dac:	701a      	strb	r2, [r3, #0]
      break;
 8006dae:	e001      	b.n	8006db4 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8006db0:	bf00      	nop
 8006db2:	e000      	b.n	8006db6 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8006db4:	bf00      	nop
  }
}
 8006db6:	bf00      	nop
 8006db8:	3728      	adds	r7, #40	; 0x28
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b086      	sub	sp, #24
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006dea:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f003 0302 	and.w	r3, r3, #2
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d10b      	bne.n	8006e0e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f003 0301 	and.w	r3, r3, #1
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d102      	bne.n	8006e06 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f013 fa6d 	bl	801a2e0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	f043 0302 	orr.w	r3, r3, #2
 8006e0c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f003 0308 	and.w	r3, r3, #8
 8006e14:	2b08      	cmp	r3, #8
 8006e16:	d132      	bne.n	8006e7e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	f043 0308 	orr.w	r3, r3, #8
 8006e1e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f003 0304 	and.w	r3, r3, #4
 8006e26:	2b04      	cmp	r3, #4
 8006e28:	d126      	bne.n	8006e78 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	699b      	ldr	r3, [r3, #24]
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d113      	bne.n	8006e5a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006e38:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e3c:	d106      	bne.n	8006e4c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2102      	movs	r1, #2
 8006e44:	4618      	mov	r0, r3
 8006e46:	f005 ffe3 	bl	800ce10 <USB_InitFSLSPClkSel>
 8006e4a:	e011      	b.n	8006e70 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2101      	movs	r1, #1
 8006e52:	4618      	mov	r0, r3
 8006e54:	f005 ffdc 	bl	800ce10 <USB_InitFSLSPClkSel>
 8006e58:	e00a      	b.n	8006e70 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d106      	bne.n	8006e70 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e68:	461a      	mov	r2, r3
 8006e6a:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006e6e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f013 fa5f 	bl	801a334 <HAL_HCD_PortEnabled_Callback>
 8006e76:	e002      	b.n	8006e7e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f013 fa69 	bl	801a350 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f003 0320 	and.w	r3, r3, #32
 8006e84:	2b20      	cmp	r3, #32
 8006e86:	d103      	bne.n	8006e90 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	f043 0320 	orr.w	r3, r3, #32
 8006e8e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006e96:	461a      	mov	r2, r3
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	6013      	str	r3, [r2, #0]
}
 8006e9c:	bf00      	nop
 8006e9e:	3718      	adds	r7, #24
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8006eac:	4a08      	ldr	r2, [pc, #32]	; (8006ed0 <HAL_HSEM_FastTake+0x2c>)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	3320      	adds	r3, #32
 8006eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eb6:	4a07      	ldr	r2, [pc, #28]	; (8006ed4 <HAL_HSEM_FastTake+0x30>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d101      	bne.n	8006ec0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	e000      	b.n	8006ec2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	370c      	adds	r7, #12
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	58026400 	.word	0x58026400
 8006ed4:	80000300 	.word	0x80000300

08006ed8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8006ee2:	4906      	ldr	r1, [pc, #24]	; (8006efc <HAL_HSEM_Release+0x24>)
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr
 8006efc:	58026400 	.word	0x58026400

08006f00 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8006f08:	4b05      	ldr	r3, [pc, #20]	; (8006f20 <HAL_HSEM_ActivateNotification+0x20>)
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	4904      	ldr	r1, [pc, #16]	; (8006f20 <HAL_HSEM_ActivateNotification+0x20>)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	600b      	str	r3, [r1, #0]
#endif
}
 8006f14:	bf00      	nop
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr
 8006f20:	58026500 	.word	0x58026500

08006f24 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8006f2a:	4b0a      	ldr	r3, [pc, #40]	; (8006f54 <HAL_HSEM_IRQHandler+0x30>)
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8006f30:	4b08      	ldr	r3, [pc, #32]	; (8006f54 <HAL_HSEM_IRQHandler+0x30>)
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	43db      	mvns	r3, r3
 8006f38:	4906      	ldr	r1, [pc, #24]	; (8006f54 <HAL_HSEM_IRQHandler+0x30>)
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8006f3e:	4a05      	ldr	r2, [pc, #20]	; (8006f54 <HAL_HSEM_IRQHandler+0x30>)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f010 f89f 	bl	8017088 <HAL_HSEM_FreeCallback>
}
 8006f4a:	bf00      	nop
 8006f4c:	3708      	adds	r7, #8
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	58026500 	.word	0x58026500

08006f58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d101      	bne.n	8006f6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e07f      	b.n	800706a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d106      	bne.n	8006f84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f7fa f960 	bl	8001244 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2224      	movs	r2, #36	; 0x24
 8006f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f022 0201 	bic.w	r2, r2, #1
 8006f9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	685a      	ldr	r2, [r3, #4]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006fa8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	689a      	ldr	r2, [r3, #8]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006fb8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d107      	bne.n	8006fd2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	689a      	ldr	r2, [r3, #8]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006fce:	609a      	str	r2, [r3, #8]
 8006fd0:	e006      	b.n	8006fe0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	689a      	ldr	r2, [r3, #8]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006fde:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d104      	bne.n	8006ff2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ff0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	6859      	ldr	r1, [r3, #4]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	4b1d      	ldr	r3, [pc, #116]	; (8007074 <HAL_I2C_Init+0x11c>)
 8006ffe:	430b      	orrs	r3, r1
 8007000:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68da      	ldr	r2, [r3, #12]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007010:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	691a      	ldr	r2, [r3, #16]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	ea42 0103 	orr.w	r1, r2, r3
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	699b      	ldr	r3, [r3, #24]
 8007022:	021a      	lsls	r2, r3, #8
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	430a      	orrs	r2, r1
 800702a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	69d9      	ldr	r1, [r3, #28]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a1a      	ldr	r2, [r3, #32]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	430a      	orrs	r2, r1
 800703a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f042 0201 	orr.w	r2, r2, #1
 800704a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2220      	movs	r2, #32
 8007056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3708      	adds	r7, #8
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	02008000 	.word	0x02008000

08007078 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b084      	sub	sp, #16
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007094:	2b00      	cmp	r3, #0
 8007096:	d005      	beq.n	80070a4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	68f9      	ldr	r1, [r7, #12]
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	4798      	blx	r3
  }
}
 80070a4:	bf00      	nop
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	2b20      	cmp	r3, #32
 80070c0:	d138      	bne.n	8007134 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d101      	bne.n	80070d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80070cc:	2302      	movs	r3, #2
 80070ce:	e032      	b.n	8007136 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2224      	movs	r2, #36	; 0x24
 80070dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f022 0201 	bic.w	r2, r2, #1
 80070ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80070fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	6819      	ldr	r1, [r3, #0]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	683a      	ldr	r2, [r7, #0]
 800710c:	430a      	orrs	r2, r1
 800710e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f042 0201 	orr.w	r2, r2, #1
 800711e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2220      	movs	r2, #32
 8007124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007130:	2300      	movs	r3, #0
 8007132:	e000      	b.n	8007136 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007134:	2302      	movs	r3, #2
  }
}
 8007136:	4618      	mov	r0, r3
 8007138:	370c      	adds	r7, #12
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr

08007142 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007142:	b480      	push	{r7}
 8007144:	b085      	sub	sp, #20
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
 800714a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007152:	b2db      	uxtb	r3, r3
 8007154:	2b20      	cmp	r3, #32
 8007156:	d139      	bne.n	80071cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800715e:	2b01      	cmp	r3, #1
 8007160:	d101      	bne.n	8007166 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007162:	2302      	movs	r3, #2
 8007164:	e033      	b.n	80071ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2201      	movs	r2, #1
 800716a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2224      	movs	r2, #36	; 0x24
 8007172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f022 0201 	bic.w	r2, r2, #1
 8007184:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007194:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	021b      	lsls	r3, r3, #8
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	4313      	orrs	r3, r2
 800719e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68fa      	ldr	r2, [r7, #12]
 80071a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f042 0201 	orr.w	r2, r2, #1
 80071b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2220      	movs	r2, #32
 80071bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80071c8:	2300      	movs	r3, #0
 80071ca:	e000      	b.n	80071ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80071cc:	2302      	movs	r3, #2
  }
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3714      	adds	r7, #20
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr
	...

080071dc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80071e4:	4b29      	ldr	r3, [pc, #164]	; (800728c <HAL_PWREx_ConfigSupply+0xb0>)
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	f003 0307 	and.w	r3, r3, #7
 80071ec:	2b06      	cmp	r3, #6
 80071ee:	d00a      	beq.n	8007206 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80071f0:	4b26      	ldr	r3, [pc, #152]	; (800728c <HAL_PWREx_ConfigSupply+0xb0>)
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d001      	beq.n	8007202 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	e040      	b.n	8007284 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007202:	2300      	movs	r3, #0
 8007204:	e03e      	b.n	8007284 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007206:	4b21      	ldr	r3, [pc, #132]	; (800728c <HAL_PWREx_ConfigSupply+0xb0>)
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800720e:	491f      	ldr	r1, [pc, #124]	; (800728c <HAL_PWREx_ConfigSupply+0xb0>)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4313      	orrs	r3, r2
 8007214:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007216:	f7fb fa09 	bl	800262c <HAL_GetTick>
 800721a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800721c:	e009      	b.n	8007232 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800721e:	f7fb fa05 	bl	800262c <HAL_GetTick>
 8007222:	4602      	mov	r2, r0
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	1ad3      	subs	r3, r2, r3
 8007228:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800722c:	d901      	bls.n	8007232 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e028      	b.n	8007284 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007232:	4b16      	ldr	r3, [pc, #88]	; (800728c <HAL_PWREx_ConfigSupply+0xb0>)
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800723a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800723e:	d1ee      	bne.n	800721e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2b1e      	cmp	r3, #30
 8007244:	d008      	beq.n	8007258 <HAL_PWREx_ConfigSupply+0x7c>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2b2e      	cmp	r3, #46	; 0x2e
 800724a:	d005      	beq.n	8007258 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2b1d      	cmp	r3, #29
 8007250:	d002      	beq.n	8007258 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2b2d      	cmp	r3, #45	; 0x2d
 8007256:	d114      	bne.n	8007282 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007258:	f7fb f9e8 	bl	800262c <HAL_GetTick>
 800725c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800725e:	e009      	b.n	8007274 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007260:	f7fb f9e4 	bl	800262c <HAL_GetTick>
 8007264:	4602      	mov	r2, r0
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800726e:	d901      	bls.n	8007274 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	e007      	b.n	8007284 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007274:	4b05      	ldr	r3, [pc, #20]	; (800728c <HAL_PWREx_ConfigSupply+0xb0>)
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800727c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007280:	d1ee      	bne.n	8007260 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3710      	adds	r7, #16
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	58024800 	.word	0x58024800

08007290 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007290:	b480      	push	{r7}
 8007292:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007294:	4b05      	ldr	r3, [pc, #20]	; (80072ac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	4a04      	ldr	r2, [pc, #16]	; (80072ac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800729a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800729e:	60d3      	str	r3, [r2, #12]
}
 80072a0:	bf00      	nop
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	58024800 	.word	0x58024800

080072b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b08c      	sub	sp, #48	; 0x30
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d101      	bne.n	80072c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	e3ff      	b.n	8007ac2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 0301 	and.w	r3, r3, #1
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	f000 8087 	beq.w	80073de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072d0:	4b99      	ldr	r3, [pc, #612]	; (8007538 <HAL_RCC_OscConfig+0x288>)
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80072d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80072da:	4b97      	ldr	r3, [pc, #604]	; (8007538 <HAL_RCC_OscConfig+0x288>)
 80072dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072de:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80072e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e2:	2b10      	cmp	r3, #16
 80072e4:	d007      	beq.n	80072f6 <HAL_RCC_OscConfig+0x46>
 80072e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e8:	2b18      	cmp	r3, #24
 80072ea:	d110      	bne.n	800730e <HAL_RCC_OscConfig+0x5e>
 80072ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ee:	f003 0303 	and.w	r3, r3, #3
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d10b      	bne.n	800730e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072f6:	4b90      	ldr	r3, [pc, #576]	; (8007538 <HAL_RCC_OscConfig+0x288>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d06c      	beq.n	80073dc <HAL_RCC_OscConfig+0x12c>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d168      	bne.n	80073dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	e3d9      	b.n	8007ac2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007316:	d106      	bne.n	8007326 <HAL_RCC_OscConfig+0x76>
 8007318:	4b87      	ldr	r3, [pc, #540]	; (8007538 <HAL_RCC_OscConfig+0x288>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a86      	ldr	r2, [pc, #536]	; (8007538 <HAL_RCC_OscConfig+0x288>)
 800731e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007322:	6013      	str	r3, [r2, #0]
 8007324:	e02e      	b.n	8007384 <HAL_RCC_OscConfig+0xd4>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d10c      	bne.n	8007348 <HAL_RCC_OscConfig+0x98>
 800732e:	4b82      	ldr	r3, [pc, #520]	; (8007538 <HAL_RCC_OscConfig+0x288>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a81      	ldr	r2, [pc, #516]	; (8007538 <HAL_RCC_OscConfig+0x288>)
 8007334:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007338:	6013      	str	r3, [r2, #0]
 800733a:	4b7f      	ldr	r3, [pc, #508]	; (8007538 <HAL_RCC_OscConfig+0x288>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a7e      	ldr	r2, [pc, #504]	; (8007538 <HAL_RCC_OscConfig+0x288>)
 8007340:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007344:	6013      	str	r3, [r2, #0]
 8007346:	e01d      	b.n	8007384 <HAL_RCC_OscConfig+0xd4>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007350:	d10c      	bne.n	800736c <HAL_RCC_OscConfig+0xbc>
 8007352:	4b79      	ldr	r3, [pc, #484]	; (8007538 <HAL_RCC_OscConfig+0x288>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a78      	ldr	r2, [pc, #480]	; (8007538 <HAL_RCC_OscConfig+0x288>)
 8007358:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800735c:	6013      	str	r3, [r2, #0]
 800735e:	4b76      	ldr	r3, [pc, #472]	; (8007538 <HAL_RCC_OscConfig+0x288>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a75      	ldr	r2, [pc, #468]	; (8007538 <HAL_RCC_OscConfig+0x288>)
 8007364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007368:	6013      	str	r3, [r2, #0]
 800736a:	e00b      	b.n	8007384 <HAL_RCC_OscConfig+0xd4>
 800736c:	4b72      	ldr	r3, [pc, #456]	; (8007538 <HAL_RCC_OscConfig+0x288>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a71      	ldr	r2, [pc, #452]	; (8007538 <HAL_RCC_OscConfig+0x288>)
 8007372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007376:	6013      	str	r3, [r2, #0]
 8007378:	4b6f      	ldr	r3, [pc, #444]	; (8007538 <HAL_RCC_OscConfig+0x288>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a6e      	ldr	r2, [pc, #440]	; (8007538 <HAL_RCC_OscConfig+0x288>)
 800737e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007382:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d013      	beq.n	80073b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800738c:	f7fb f94e 	bl	800262c <HAL_GetTick>
 8007390:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007392:	e008      	b.n	80073a6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007394:	f7fb f94a 	bl	800262c <HAL_GetTick>
 8007398:	4602      	mov	r2, r0
 800739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	2b64      	cmp	r3, #100	; 0x64
 80073a0:	d901      	bls.n	80073a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80073a2:	2303      	movs	r3, #3
 80073a4:	e38d      	b.n	8007ac2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80073a6:	4b64      	ldr	r3, [pc, #400]	; (8007538 <HAL_RCC_OscConfig+0x288>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d0f0      	beq.n	8007394 <HAL_RCC_OscConfig+0xe4>
 80073b2:	e014      	b.n	80073de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073b4:	f7fb f93a 	bl	800262c <HAL_GetTick>
 80073b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80073ba:	e008      	b.n	80073ce <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073bc:	f7fb f936 	bl	800262c <HAL_GetTick>
 80073c0:	4602      	mov	r2, r0
 80073c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c4:	1ad3      	subs	r3, r2, r3
 80073c6:	2b64      	cmp	r3, #100	; 0x64
 80073c8:	d901      	bls.n	80073ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80073ca:	2303      	movs	r3, #3
 80073cc:	e379      	b.n	8007ac2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80073ce:	4b5a      	ldr	r3, [pc, #360]	; (8007538 <HAL_RCC_OscConfig+0x288>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1f0      	bne.n	80073bc <HAL_RCC_OscConfig+0x10c>
 80073da:	e000      	b.n	80073de <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 0302 	and.w	r3, r3, #2
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f000 80ae 	beq.w	8007548 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073ec:	4b52      	ldr	r3, [pc, #328]	; (8007538 <HAL_RCC_OscConfig+0x288>)
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073f4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80073f6:	4b50      	ldr	r3, [pc, #320]	; (8007538 <HAL_RCC_OscConfig+0x288>)
 80073f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fa:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80073fc:	6a3b      	ldr	r3, [r7, #32]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d007      	beq.n	8007412 <HAL_RCC_OscConfig+0x162>
 8007402:	6a3b      	ldr	r3, [r7, #32]
 8007404:	2b18      	cmp	r3, #24
 8007406:	d13a      	bne.n	800747e <HAL_RCC_OscConfig+0x1ce>
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	f003 0303 	and.w	r3, r3, #3
 800740e:	2b00      	cmp	r3, #0
 8007410:	d135      	bne.n	800747e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007412:	4b49      	ldr	r3, [pc, #292]	; (8007538 <HAL_RCC_OscConfig+0x288>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 0304 	and.w	r3, r3, #4
 800741a:	2b00      	cmp	r3, #0
 800741c:	d005      	beq.n	800742a <HAL_RCC_OscConfig+0x17a>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d101      	bne.n	800742a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e34b      	b.n	8007ac2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800742a:	f7fb f92f 	bl	800268c <HAL_GetREVID>
 800742e:	4603      	mov	r3, r0
 8007430:	f241 0203 	movw	r2, #4099	; 0x1003
 8007434:	4293      	cmp	r3, r2
 8007436:	d817      	bhi.n	8007468 <HAL_RCC_OscConfig+0x1b8>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	691b      	ldr	r3, [r3, #16]
 800743c:	2b40      	cmp	r3, #64	; 0x40
 800743e:	d108      	bne.n	8007452 <HAL_RCC_OscConfig+0x1a2>
 8007440:	4b3d      	ldr	r3, [pc, #244]	; (8007538 <HAL_RCC_OscConfig+0x288>)
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007448:	4a3b      	ldr	r2, [pc, #236]	; (8007538 <HAL_RCC_OscConfig+0x288>)
 800744a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800744e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007450:	e07a      	b.n	8007548 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007452:	4b39      	ldr	r3, [pc, #228]	; (8007538 <HAL_RCC_OscConfig+0x288>)
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	691b      	ldr	r3, [r3, #16]
 800745e:	031b      	lsls	r3, r3, #12
 8007460:	4935      	ldr	r1, [pc, #212]	; (8007538 <HAL_RCC_OscConfig+0x288>)
 8007462:	4313      	orrs	r3, r2
 8007464:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007466:	e06f      	b.n	8007548 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007468:	4b33      	ldr	r3, [pc, #204]	; (8007538 <HAL_RCC_OscConfig+0x288>)
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	061b      	lsls	r3, r3, #24
 8007476:	4930      	ldr	r1, [pc, #192]	; (8007538 <HAL_RCC_OscConfig+0x288>)
 8007478:	4313      	orrs	r3, r2
 800747a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800747c:	e064      	b.n	8007548 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d045      	beq.n	8007512 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007486:	4b2c      	ldr	r3, [pc, #176]	; (8007538 <HAL_RCC_OscConfig+0x288>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f023 0219 	bic.w	r2, r3, #25
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	4929      	ldr	r1, [pc, #164]	; (8007538 <HAL_RCC_OscConfig+0x288>)
 8007494:	4313      	orrs	r3, r2
 8007496:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007498:	f7fb f8c8 	bl	800262c <HAL_GetTick>
 800749c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800749e:	e008      	b.n	80074b2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074a0:	f7fb f8c4 	bl	800262c <HAL_GetTick>
 80074a4:	4602      	mov	r2, r0
 80074a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d901      	bls.n	80074b2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80074ae:	2303      	movs	r3, #3
 80074b0:	e307      	b.n	8007ac2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80074b2:	4b21      	ldr	r3, [pc, #132]	; (8007538 <HAL_RCC_OscConfig+0x288>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 0304 	and.w	r3, r3, #4
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d0f0      	beq.n	80074a0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074be:	f7fb f8e5 	bl	800268c <HAL_GetREVID>
 80074c2:	4603      	mov	r3, r0
 80074c4:	f241 0203 	movw	r2, #4099	; 0x1003
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d817      	bhi.n	80074fc <HAL_RCC_OscConfig+0x24c>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	2b40      	cmp	r3, #64	; 0x40
 80074d2:	d108      	bne.n	80074e6 <HAL_RCC_OscConfig+0x236>
 80074d4:	4b18      	ldr	r3, [pc, #96]	; (8007538 <HAL_RCC_OscConfig+0x288>)
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80074dc:	4a16      	ldr	r2, [pc, #88]	; (8007538 <HAL_RCC_OscConfig+0x288>)
 80074de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074e2:	6053      	str	r3, [r2, #4]
 80074e4:	e030      	b.n	8007548 <HAL_RCC_OscConfig+0x298>
 80074e6:	4b14      	ldr	r3, [pc, #80]	; (8007538 <HAL_RCC_OscConfig+0x288>)
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	031b      	lsls	r3, r3, #12
 80074f4:	4910      	ldr	r1, [pc, #64]	; (8007538 <HAL_RCC_OscConfig+0x288>)
 80074f6:	4313      	orrs	r3, r2
 80074f8:	604b      	str	r3, [r1, #4]
 80074fa:	e025      	b.n	8007548 <HAL_RCC_OscConfig+0x298>
 80074fc:	4b0e      	ldr	r3, [pc, #56]	; (8007538 <HAL_RCC_OscConfig+0x288>)
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	061b      	lsls	r3, r3, #24
 800750a:	490b      	ldr	r1, [pc, #44]	; (8007538 <HAL_RCC_OscConfig+0x288>)
 800750c:	4313      	orrs	r3, r2
 800750e:	604b      	str	r3, [r1, #4]
 8007510:	e01a      	b.n	8007548 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007512:	4b09      	ldr	r3, [pc, #36]	; (8007538 <HAL_RCC_OscConfig+0x288>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a08      	ldr	r2, [pc, #32]	; (8007538 <HAL_RCC_OscConfig+0x288>)
 8007518:	f023 0301 	bic.w	r3, r3, #1
 800751c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800751e:	f7fb f885 	bl	800262c <HAL_GetTick>
 8007522:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007524:	e00a      	b.n	800753c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007526:	f7fb f881 	bl	800262c <HAL_GetTick>
 800752a:	4602      	mov	r2, r0
 800752c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752e:	1ad3      	subs	r3, r2, r3
 8007530:	2b02      	cmp	r3, #2
 8007532:	d903      	bls.n	800753c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8007534:	2303      	movs	r3, #3
 8007536:	e2c4      	b.n	8007ac2 <HAL_RCC_OscConfig+0x812>
 8007538:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800753c:	4ba4      	ldr	r3, [pc, #656]	; (80077d0 <HAL_RCC_OscConfig+0x520>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 0304 	and.w	r3, r3, #4
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1ee      	bne.n	8007526 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0310 	and.w	r3, r3, #16
 8007550:	2b00      	cmp	r3, #0
 8007552:	f000 80a9 	beq.w	80076a8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007556:	4b9e      	ldr	r3, [pc, #632]	; (80077d0 <HAL_RCC_OscConfig+0x520>)
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800755e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007560:	4b9b      	ldr	r3, [pc, #620]	; (80077d0 <HAL_RCC_OscConfig+0x520>)
 8007562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007564:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	2b08      	cmp	r3, #8
 800756a:	d007      	beq.n	800757c <HAL_RCC_OscConfig+0x2cc>
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	2b18      	cmp	r3, #24
 8007570:	d13a      	bne.n	80075e8 <HAL_RCC_OscConfig+0x338>
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	f003 0303 	and.w	r3, r3, #3
 8007578:	2b01      	cmp	r3, #1
 800757a:	d135      	bne.n	80075e8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800757c:	4b94      	ldr	r3, [pc, #592]	; (80077d0 <HAL_RCC_OscConfig+0x520>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007584:	2b00      	cmp	r3, #0
 8007586:	d005      	beq.n	8007594 <HAL_RCC_OscConfig+0x2e4>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	69db      	ldr	r3, [r3, #28]
 800758c:	2b80      	cmp	r3, #128	; 0x80
 800758e:	d001      	beq.n	8007594 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e296      	b.n	8007ac2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007594:	f7fb f87a 	bl	800268c <HAL_GetREVID>
 8007598:	4603      	mov	r3, r0
 800759a:	f241 0203 	movw	r2, #4099	; 0x1003
 800759e:	4293      	cmp	r3, r2
 80075a0:	d817      	bhi.n	80075d2 <HAL_RCC_OscConfig+0x322>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a1b      	ldr	r3, [r3, #32]
 80075a6:	2b20      	cmp	r3, #32
 80075a8:	d108      	bne.n	80075bc <HAL_RCC_OscConfig+0x30c>
 80075aa:	4b89      	ldr	r3, [pc, #548]	; (80077d0 <HAL_RCC_OscConfig+0x520>)
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80075b2:	4a87      	ldr	r2, [pc, #540]	; (80077d0 <HAL_RCC_OscConfig+0x520>)
 80075b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80075b8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80075ba:	e075      	b.n	80076a8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80075bc:	4b84      	ldr	r3, [pc, #528]	; (80077d0 <HAL_RCC_OscConfig+0x520>)
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6a1b      	ldr	r3, [r3, #32]
 80075c8:	069b      	lsls	r3, r3, #26
 80075ca:	4981      	ldr	r1, [pc, #516]	; (80077d0 <HAL_RCC_OscConfig+0x520>)
 80075cc:	4313      	orrs	r3, r2
 80075ce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80075d0:	e06a      	b.n	80076a8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80075d2:	4b7f      	ldr	r3, [pc, #508]	; (80077d0 <HAL_RCC_OscConfig+0x520>)
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	061b      	lsls	r3, r3, #24
 80075e0:	497b      	ldr	r1, [pc, #492]	; (80077d0 <HAL_RCC_OscConfig+0x520>)
 80075e2:	4313      	orrs	r3, r2
 80075e4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80075e6:	e05f      	b.n	80076a8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	69db      	ldr	r3, [r3, #28]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d042      	beq.n	8007676 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80075f0:	4b77      	ldr	r3, [pc, #476]	; (80077d0 <HAL_RCC_OscConfig+0x520>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a76      	ldr	r2, [pc, #472]	; (80077d0 <HAL_RCC_OscConfig+0x520>)
 80075f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075fc:	f7fb f816 	bl	800262c <HAL_GetTick>
 8007600:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007602:	e008      	b.n	8007616 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007604:	f7fb f812 	bl	800262c <HAL_GetTick>
 8007608:	4602      	mov	r2, r0
 800760a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760c:	1ad3      	subs	r3, r2, r3
 800760e:	2b02      	cmp	r3, #2
 8007610:	d901      	bls.n	8007616 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	e255      	b.n	8007ac2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007616:	4b6e      	ldr	r3, [pc, #440]	; (80077d0 <HAL_RCC_OscConfig+0x520>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800761e:	2b00      	cmp	r3, #0
 8007620:	d0f0      	beq.n	8007604 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007622:	f7fb f833 	bl	800268c <HAL_GetREVID>
 8007626:	4603      	mov	r3, r0
 8007628:	f241 0203 	movw	r2, #4099	; 0x1003
 800762c:	4293      	cmp	r3, r2
 800762e:	d817      	bhi.n	8007660 <HAL_RCC_OscConfig+0x3b0>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a1b      	ldr	r3, [r3, #32]
 8007634:	2b20      	cmp	r3, #32
 8007636:	d108      	bne.n	800764a <HAL_RCC_OscConfig+0x39a>
 8007638:	4b65      	ldr	r3, [pc, #404]	; (80077d0 <HAL_RCC_OscConfig+0x520>)
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007640:	4a63      	ldr	r2, [pc, #396]	; (80077d0 <HAL_RCC_OscConfig+0x520>)
 8007642:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007646:	6053      	str	r3, [r2, #4]
 8007648:	e02e      	b.n	80076a8 <HAL_RCC_OscConfig+0x3f8>
 800764a:	4b61      	ldr	r3, [pc, #388]	; (80077d0 <HAL_RCC_OscConfig+0x520>)
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	069b      	lsls	r3, r3, #26
 8007658:	495d      	ldr	r1, [pc, #372]	; (80077d0 <HAL_RCC_OscConfig+0x520>)
 800765a:	4313      	orrs	r3, r2
 800765c:	604b      	str	r3, [r1, #4]
 800765e:	e023      	b.n	80076a8 <HAL_RCC_OscConfig+0x3f8>
 8007660:	4b5b      	ldr	r3, [pc, #364]	; (80077d0 <HAL_RCC_OscConfig+0x520>)
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6a1b      	ldr	r3, [r3, #32]
 800766c:	061b      	lsls	r3, r3, #24
 800766e:	4958      	ldr	r1, [pc, #352]	; (80077d0 <HAL_RCC_OscConfig+0x520>)
 8007670:	4313      	orrs	r3, r2
 8007672:	60cb      	str	r3, [r1, #12]
 8007674:	e018      	b.n	80076a8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007676:	4b56      	ldr	r3, [pc, #344]	; (80077d0 <HAL_RCC_OscConfig+0x520>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a55      	ldr	r2, [pc, #340]	; (80077d0 <HAL_RCC_OscConfig+0x520>)
 800767c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007682:	f7fa ffd3 	bl	800262c <HAL_GetTick>
 8007686:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007688:	e008      	b.n	800769c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800768a:	f7fa ffcf 	bl	800262c <HAL_GetTick>
 800768e:	4602      	mov	r2, r0
 8007690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007692:	1ad3      	subs	r3, r2, r3
 8007694:	2b02      	cmp	r3, #2
 8007696:	d901      	bls.n	800769c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8007698:	2303      	movs	r3, #3
 800769a:	e212      	b.n	8007ac2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800769c:	4b4c      	ldr	r3, [pc, #304]	; (80077d0 <HAL_RCC_OscConfig+0x520>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d1f0      	bne.n	800768a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 0308 	and.w	r3, r3, #8
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d036      	beq.n	8007722 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	695b      	ldr	r3, [r3, #20]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d019      	beq.n	80076f0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076bc:	4b44      	ldr	r3, [pc, #272]	; (80077d0 <HAL_RCC_OscConfig+0x520>)
 80076be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076c0:	4a43      	ldr	r2, [pc, #268]	; (80077d0 <HAL_RCC_OscConfig+0x520>)
 80076c2:	f043 0301 	orr.w	r3, r3, #1
 80076c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076c8:	f7fa ffb0 	bl	800262c <HAL_GetTick>
 80076cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80076ce:	e008      	b.n	80076e2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80076d0:	f7fa ffac 	bl	800262c <HAL_GetTick>
 80076d4:	4602      	mov	r2, r0
 80076d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d8:	1ad3      	subs	r3, r2, r3
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d901      	bls.n	80076e2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80076de:	2303      	movs	r3, #3
 80076e0:	e1ef      	b.n	8007ac2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80076e2:	4b3b      	ldr	r3, [pc, #236]	; (80077d0 <HAL_RCC_OscConfig+0x520>)
 80076e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076e6:	f003 0302 	and.w	r3, r3, #2
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d0f0      	beq.n	80076d0 <HAL_RCC_OscConfig+0x420>
 80076ee:	e018      	b.n	8007722 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80076f0:	4b37      	ldr	r3, [pc, #220]	; (80077d0 <HAL_RCC_OscConfig+0x520>)
 80076f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076f4:	4a36      	ldr	r2, [pc, #216]	; (80077d0 <HAL_RCC_OscConfig+0x520>)
 80076f6:	f023 0301 	bic.w	r3, r3, #1
 80076fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076fc:	f7fa ff96 	bl	800262c <HAL_GetTick>
 8007700:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007702:	e008      	b.n	8007716 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007704:	f7fa ff92 	bl	800262c <HAL_GetTick>
 8007708:	4602      	mov	r2, r0
 800770a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	2b02      	cmp	r3, #2
 8007710:	d901      	bls.n	8007716 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8007712:	2303      	movs	r3, #3
 8007714:	e1d5      	b.n	8007ac2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007716:	4b2e      	ldr	r3, [pc, #184]	; (80077d0 <HAL_RCC_OscConfig+0x520>)
 8007718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800771a:	f003 0302 	and.w	r3, r3, #2
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1f0      	bne.n	8007704 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 0320 	and.w	r3, r3, #32
 800772a:	2b00      	cmp	r3, #0
 800772c:	d036      	beq.n	800779c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	699b      	ldr	r3, [r3, #24]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d019      	beq.n	800776a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007736:	4b26      	ldr	r3, [pc, #152]	; (80077d0 <HAL_RCC_OscConfig+0x520>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a25      	ldr	r2, [pc, #148]	; (80077d0 <HAL_RCC_OscConfig+0x520>)
 800773c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007740:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007742:	f7fa ff73 	bl	800262c <HAL_GetTick>
 8007746:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007748:	e008      	b.n	800775c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800774a:	f7fa ff6f 	bl	800262c <HAL_GetTick>
 800774e:	4602      	mov	r2, r0
 8007750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007752:	1ad3      	subs	r3, r2, r3
 8007754:	2b02      	cmp	r3, #2
 8007756:	d901      	bls.n	800775c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8007758:	2303      	movs	r3, #3
 800775a:	e1b2      	b.n	8007ac2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800775c:	4b1c      	ldr	r3, [pc, #112]	; (80077d0 <HAL_RCC_OscConfig+0x520>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007764:	2b00      	cmp	r3, #0
 8007766:	d0f0      	beq.n	800774a <HAL_RCC_OscConfig+0x49a>
 8007768:	e018      	b.n	800779c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800776a:	4b19      	ldr	r3, [pc, #100]	; (80077d0 <HAL_RCC_OscConfig+0x520>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a18      	ldr	r2, [pc, #96]	; (80077d0 <HAL_RCC_OscConfig+0x520>)
 8007770:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007774:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007776:	f7fa ff59 	bl	800262c <HAL_GetTick>
 800777a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800777c:	e008      	b.n	8007790 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800777e:	f7fa ff55 	bl	800262c <HAL_GetTick>
 8007782:	4602      	mov	r2, r0
 8007784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	2b02      	cmp	r3, #2
 800778a:	d901      	bls.n	8007790 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800778c:	2303      	movs	r3, #3
 800778e:	e198      	b.n	8007ac2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007790:	4b0f      	ldr	r3, [pc, #60]	; (80077d0 <HAL_RCC_OscConfig+0x520>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1f0      	bne.n	800777e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f003 0304 	and.w	r3, r3, #4
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f000 8085 	beq.w	80078b4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80077aa:	4b0a      	ldr	r3, [pc, #40]	; (80077d4 <HAL_RCC_OscConfig+0x524>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a09      	ldr	r2, [pc, #36]	; (80077d4 <HAL_RCC_OscConfig+0x524>)
 80077b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80077b6:	f7fa ff39 	bl	800262c <HAL_GetTick>
 80077ba:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077bc:	e00c      	b.n	80077d8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80077be:	f7fa ff35 	bl	800262c <HAL_GetTick>
 80077c2:	4602      	mov	r2, r0
 80077c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c6:	1ad3      	subs	r3, r2, r3
 80077c8:	2b64      	cmp	r3, #100	; 0x64
 80077ca:	d905      	bls.n	80077d8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80077cc:	2303      	movs	r3, #3
 80077ce:	e178      	b.n	8007ac2 <HAL_RCC_OscConfig+0x812>
 80077d0:	58024400 	.word	0x58024400
 80077d4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077d8:	4b96      	ldr	r3, [pc, #600]	; (8007a34 <HAL_RCC_OscConfig+0x784>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d0ec      	beq.n	80077be <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d106      	bne.n	80077fa <HAL_RCC_OscConfig+0x54a>
 80077ec:	4b92      	ldr	r3, [pc, #584]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 80077ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077f0:	4a91      	ldr	r2, [pc, #580]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 80077f2:	f043 0301 	orr.w	r3, r3, #1
 80077f6:	6713      	str	r3, [r2, #112]	; 0x70
 80077f8:	e02d      	b.n	8007856 <HAL_RCC_OscConfig+0x5a6>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d10c      	bne.n	800781c <HAL_RCC_OscConfig+0x56c>
 8007802:	4b8d      	ldr	r3, [pc, #564]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 8007804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007806:	4a8c      	ldr	r2, [pc, #560]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 8007808:	f023 0301 	bic.w	r3, r3, #1
 800780c:	6713      	str	r3, [r2, #112]	; 0x70
 800780e:	4b8a      	ldr	r3, [pc, #552]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 8007810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007812:	4a89      	ldr	r2, [pc, #548]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 8007814:	f023 0304 	bic.w	r3, r3, #4
 8007818:	6713      	str	r3, [r2, #112]	; 0x70
 800781a:	e01c      	b.n	8007856 <HAL_RCC_OscConfig+0x5a6>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	2b05      	cmp	r3, #5
 8007822:	d10c      	bne.n	800783e <HAL_RCC_OscConfig+0x58e>
 8007824:	4b84      	ldr	r3, [pc, #528]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 8007826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007828:	4a83      	ldr	r2, [pc, #524]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 800782a:	f043 0304 	orr.w	r3, r3, #4
 800782e:	6713      	str	r3, [r2, #112]	; 0x70
 8007830:	4b81      	ldr	r3, [pc, #516]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 8007832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007834:	4a80      	ldr	r2, [pc, #512]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 8007836:	f043 0301 	orr.w	r3, r3, #1
 800783a:	6713      	str	r3, [r2, #112]	; 0x70
 800783c:	e00b      	b.n	8007856 <HAL_RCC_OscConfig+0x5a6>
 800783e:	4b7e      	ldr	r3, [pc, #504]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 8007840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007842:	4a7d      	ldr	r2, [pc, #500]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 8007844:	f023 0301 	bic.w	r3, r3, #1
 8007848:	6713      	str	r3, [r2, #112]	; 0x70
 800784a:	4b7b      	ldr	r3, [pc, #492]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 800784c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800784e:	4a7a      	ldr	r2, [pc, #488]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 8007850:	f023 0304 	bic.w	r3, r3, #4
 8007854:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d015      	beq.n	800788a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800785e:	f7fa fee5 	bl	800262c <HAL_GetTick>
 8007862:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007864:	e00a      	b.n	800787c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007866:	f7fa fee1 	bl	800262c <HAL_GetTick>
 800786a:	4602      	mov	r2, r0
 800786c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786e:	1ad3      	subs	r3, r2, r3
 8007870:	f241 3288 	movw	r2, #5000	; 0x1388
 8007874:	4293      	cmp	r3, r2
 8007876:	d901      	bls.n	800787c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8007878:	2303      	movs	r3, #3
 800787a:	e122      	b.n	8007ac2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800787c:	4b6e      	ldr	r3, [pc, #440]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 800787e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007880:	f003 0302 	and.w	r3, r3, #2
 8007884:	2b00      	cmp	r3, #0
 8007886:	d0ee      	beq.n	8007866 <HAL_RCC_OscConfig+0x5b6>
 8007888:	e014      	b.n	80078b4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800788a:	f7fa fecf 	bl	800262c <HAL_GetTick>
 800788e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007890:	e00a      	b.n	80078a8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007892:	f7fa fecb 	bl	800262c <HAL_GetTick>
 8007896:	4602      	mov	r2, r0
 8007898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789a:	1ad3      	subs	r3, r2, r3
 800789c:	f241 3288 	movw	r2, #5000	; 0x1388
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d901      	bls.n	80078a8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80078a4:	2303      	movs	r3, #3
 80078a6:	e10c      	b.n	8007ac2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80078a8:	4b63      	ldr	r3, [pc, #396]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 80078aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ac:	f003 0302 	and.w	r3, r3, #2
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1ee      	bne.n	8007892 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f000 8101 	beq.w	8007ac0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80078be:	4b5e      	ldr	r3, [pc, #376]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 80078c0:	691b      	ldr	r3, [r3, #16]
 80078c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078c6:	2b18      	cmp	r3, #24
 80078c8:	f000 80bc 	beq.w	8007a44 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d0:	2b02      	cmp	r3, #2
 80078d2:	f040 8095 	bne.w	8007a00 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078d6:	4b58      	ldr	r3, [pc, #352]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a57      	ldr	r2, [pc, #348]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 80078dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078e2:	f7fa fea3 	bl	800262c <HAL_GetTick>
 80078e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80078e8:	e008      	b.n	80078fc <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078ea:	f7fa fe9f 	bl	800262c <HAL_GetTick>
 80078ee:	4602      	mov	r2, r0
 80078f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f2:	1ad3      	subs	r3, r2, r3
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	d901      	bls.n	80078fc <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80078f8:	2303      	movs	r3, #3
 80078fa:	e0e2      	b.n	8007ac2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80078fc:	4b4e      	ldr	r3, [pc, #312]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1f0      	bne.n	80078ea <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007908:	4b4b      	ldr	r3, [pc, #300]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 800790a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800790c:	4b4b      	ldr	r3, [pc, #300]	; (8007a3c <HAL_RCC_OscConfig+0x78c>)
 800790e:	4013      	ands	r3, r2
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007918:	0112      	lsls	r2, r2, #4
 800791a:	430a      	orrs	r2, r1
 800791c:	4946      	ldr	r1, [pc, #280]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 800791e:	4313      	orrs	r3, r2
 8007920:	628b      	str	r3, [r1, #40]	; 0x28
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007926:	3b01      	subs	r3, #1
 8007928:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007930:	3b01      	subs	r3, #1
 8007932:	025b      	lsls	r3, r3, #9
 8007934:	b29b      	uxth	r3, r3
 8007936:	431a      	orrs	r2, r3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793c:	3b01      	subs	r3, #1
 800793e:	041b      	lsls	r3, r3, #16
 8007940:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007944:	431a      	orrs	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800794a:	3b01      	subs	r3, #1
 800794c:	061b      	lsls	r3, r3, #24
 800794e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007952:	4939      	ldr	r1, [pc, #228]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 8007954:	4313      	orrs	r3, r2
 8007956:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007958:	4b37      	ldr	r3, [pc, #220]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 800795a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795c:	4a36      	ldr	r2, [pc, #216]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 800795e:	f023 0301 	bic.w	r3, r3, #1
 8007962:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007964:	4b34      	ldr	r3, [pc, #208]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 8007966:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007968:	4b35      	ldr	r3, [pc, #212]	; (8007a40 <HAL_RCC_OscConfig+0x790>)
 800796a:	4013      	ands	r3, r2
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007970:	00d2      	lsls	r2, r2, #3
 8007972:	4931      	ldr	r1, [pc, #196]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 8007974:	4313      	orrs	r3, r2
 8007976:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007978:	4b2f      	ldr	r3, [pc, #188]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 800797a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797c:	f023 020c 	bic.w	r2, r3, #12
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007984:	492c      	ldr	r1, [pc, #176]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 8007986:	4313      	orrs	r3, r2
 8007988:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800798a:	4b2b      	ldr	r3, [pc, #172]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 800798c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798e:	f023 0202 	bic.w	r2, r3, #2
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007996:	4928      	ldr	r1, [pc, #160]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 8007998:	4313      	orrs	r3, r2
 800799a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800799c:	4b26      	ldr	r3, [pc, #152]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 800799e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a0:	4a25      	ldr	r2, [pc, #148]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 80079a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079a8:	4b23      	ldr	r3, [pc, #140]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 80079aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ac:	4a22      	ldr	r2, [pc, #136]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 80079ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80079b4:	4b20      	ldr	r3, [pc, #128]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 80079b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b8:	4a1f      	ldr	r2, [pc, #124]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 80079ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80079be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80079c0:	4b1d      	ldr	r3, [pc, #116]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 80079c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c4:	4a1c      	ldr	r2, [pc, #112]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 80079c6:	f043 0301 	orr.w	r3, r3, #1
 80079ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80079cc:	4b1a      	ldr	r3, [pc, #104]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a19      	ldr	r2, [pc, #100]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 80079d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80079d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079d8:	f7fa fe28 	bl	800262c <HAL_GetTick>
 80079dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80079de:	e008      	b.n	80079f2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079e0:	f7fa fe24 	bl	800262c <HAL_GetTick>
 80079e4:	4602      	mov	r2, r0
 80079e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e8:	1ad3      	subs	r3, r2, r3
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d901      	bls.n	80079f2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80079ee:	2303      	movs	r3, #3
 80079f0:	e067      	b.n	8007ac2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80079f2:	4b11      	ldr	r3, [pc, #68]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d0f0      	beq.n	80079e0 <HAL_RCC_OscConfig+0x730>
 80079fe:	e05f      	b.n	8007ac0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a00:	4b0d      	ldr	r3, [pc, #52]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a0c      	ldr	r2, [pc, #48]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 8007a06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a0c:	f7fa fe0e 	bl	800262c <HAL_GetTick>
 8007a10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a12:	e008      	b.n	8007a26 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a14:	f7fa fe0a 	bl	800262c <HAL_GetTick>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	2b02      	cmp	r3, #2
 8007a20:	d901      	bls.n	8007a26 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8007a22:	2303      	movs	r3, #3
 8007a24:	e04d      	b.n	8007ac2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a26:	4b04      	ldr	r3, [pc, #16]	; (8007a38 <HAL_RCC_OscConfig+0x788>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1f0      	bne.n	8007a14 <HAL_RCC_OscConfig+0x764>
 8007a32:	e045      	b.n	8007ac0 <HAL_RCC_OscConfig+0x810>
 8007a34:	58024800 	.word	0x58024800
 8007a38:	58024400 	.word	0x58024400
 8007a3c:	fffffc0c 	.word	0xfffffc0c
 8007a40:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007a44:	4b21      	ldr	r3, [pc, #132]	; (8007acc <HAL_RCC_OscConfig+0x81c>)
 8007a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a48:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007a4a:	4b20      	ldr	r3, [pc, #128]	; (8007acc <HAL_RCC_OscConfig+0x81c>)
 8007a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a4e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d031      	beq.n	8007abc <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	f003 0203 	and.w	r2, r3, #3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d12a      	bne.n	8007abc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	091b      	lsrs	r3, r3, #4
 8007a6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d122      	bne.n	8007abc <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a80:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d11a      	bne.n	8007abc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	0a5b      	lsrs	r3, r3, #9
 8007a8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a92:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d111      	bne.n	8007abc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	0c1b      	lsrs	r3, r3, #16
 8007a9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d108      	bne.n	8007abc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	0e1b      	lsrs	r3, r3, #24
 8007aae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ab6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d001      	beq.n	8007ac0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	e000      	b.n	8007ac2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3730      	adds	r7, #48	; 0x30
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	58024400 	.word	0x58024400

08007ad0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b086      	sub	sp, #24
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d101      	bne.n	8007ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	e19c      	b.n	8007e1e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007ae4:	4b8a      	ldr	r3, [pc, #552]	; (8007d10 <HAL_RCC_ClockConfig+0x240>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f003 030f 	and.w	r3, r3, #15
 8007aec:	683a      	ldr	r2, [r7, #0]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d910      	bls.n	8007b14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007af2:	4b87      	ldr	r3, [pc, #540]	; (8007d10 <HAL_RCC_ClockConfig+0x240>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f023 020f 	bic.w	r2, r3, #15
 8007afa:	4985      	ldr	r1, [pc, #532]	; (8007d10 <HAL_RCC_ClockConfig+0x240>)
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b02:	4b83      	ldr	r3, [pc, #524]	; (8007d10 <HAL_RCC_ClockConfig+0x240>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 030f 	and.w	r3, r3, #15
 8007b0a:	683a      	ldr	r2, [r7, #0]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d001      	beq.n	8007b14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	e184      	b.n	8007e1e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 0304 	and.w	r3, r3, #4
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d010      	beq.n	8007b42 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	691a      	ldr	r2, [r3, #16]
 8007b24:	4b7b      	ldr	r3, [pc, #492]	; (8007d14 <HAL_RCC_ClockConfig+0x244>)
 8007b26:	699b      	ldr	r3, [r3, #24]
 8007b28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d908      	bls.n	8007b42 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007b30:	4b78      	ldr	r3, [pc, #480]	; (8007d14 <HAL_RCC_ClockConfig+0x244>)
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	4975      	ldr	r1, [pc, #468]	; (8007d14 <HAL_RCC_ClockConfig+0x244>)
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 0308 	and.w	r3, r3, #8
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d010      	beq.n	8007b70 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	695a      	ldr	r2, [r3, #20]
 8007b52:	4b70      	ldr	r3, [pc, #448]	; (8007d14 <HAL_RCC_ClockConfig+0x244>)
 8007b54:	69db      	ldr	r3, [r3, #28]
 8007b56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d908      	bls.n	8007b70 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007b5e:	4b6d      	ldr	r3, [pc, #436]	; (8007d14 <HAL_RCC_ClockConfig+0x244>)
 8007b60:	69db      	ldr	r3, [r3, #28]
 8007b62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	695b      	ldr	r3, [r3, #20]
 8007b6a:	496a      	ldr	r1, [pc, #424]	; (8007d14 <HAL_RCC_ClockConfig+0x244>)
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 0310 	and.w	r3, r3, #16
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d010      	beq.n	8007b9e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	699a      	ldr	r2, [r3, #24]
 8007b80:	4b64      	ldr	r3, [pc, #400]	; (8007d14 <HAL_RCC_ClockConfig+0x244>)
 8007b82:	69db      	ldr	r3, [r3, #28]
 8007b84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d908      	bls.n	8007b9e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007b8c:	4b61      	ldr	r3, [pc, #388]	; (8007d14 <HAL_RCC_ClockConfig+0x244>)
 8007b8e:	69db      	ldr	r3, [r3, #28]
 8007b90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	495e      	ldr	r1, [pc, #376]	; (8007d14 <HAL_RCC_ClockConfig+0x244>)
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f003 0320 	and.w	r3, r3, #32
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d010      	beq.n	8007bcc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	69da      	ldr	r2, [r3, #28]
 8007bae:	4b59      	ldr	r3, [pc, #356]	; (8007d14 <HAL_RCC_ClockConfig+0x244>)
 8007bb0:	6a1b      	ldr	r3, [r3, #32]
 8007bb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d908      	bls.n	8007bcc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007bba:	4b56      	ldr	r3, [pc, #344]	; (8007d14 <HAL_RCC_ClockConfig+0x244>)
 8007bbc:	6a1b      	ldr	r3, [r3, #32]
 8007bbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	69db      	ldr	r3, [r3, #28]
 8007bc6:	4953      	ldr	r1, [pc, #332]	; (8007d14 <HAL_RCC_ClockConfig+0x244>)
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f003 0302 	and.w	r3, r3, #2
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d010      	beq.n	8007bfa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	68da      	ldr	r2, [r3, #12]
 8007bdc:	4b4d      	ldr	r3, [pc, #308]	; (8007d14 <HAL_RCC_ClockConfig+0x244>)
 8007bde:	699b      	ldr	r3, [r3, #24]
 8007be0:	f003 030f 	and.w	r3, r3, #15
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d908      	bls.n	8007bfa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007be8:	4b4a      	ldr	r3, [pc, #296]	; (8007d14 <HAL_RCC_ClockConfig+0x244>)
 8007bea:	699b      	ldr	r3, [r3, #24]
 8007bec:	f023 020f 	bic.w	r2, r3, #15
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	4947      	ldr	r1, [pc, #284]	; (8007d14 <HAL_RCC_ClockConfig+0x244>)
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f003 0301 	and.w	r3, r3, #1
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d055      	beq.n	8007cb2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007c06:	4b43      	ldr	r3, [pc, #268]	; (8007d14 <HAL_RCC_ClockConfig+0x244>)
 8007c08:	699b      	ldr	r3, [r3, #24]
 8007c0a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	4940      	ldr	r1, [pc, #256]	; (8007d14 <HAL_RCC_ClockConfig+0x244>)
 8007c14:	4313      	orrs	r3, r2
 8007c16:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	2b02      	cmp	r3, #2
 8007c1e:	d107      	bne.n	8007c30 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007c20:	4b3c      	ldr	r3, [pc, #240]	; (8007d14 <HAL_RCC_ClockConfig+0x244>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d121      	bne.n	8007c70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e0f6      	b.n	8007e1e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	2b03      	cmp	r3, #3
 8007c36:	d107      	bne.n	8007c48 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007c38:	4b36      	ldr	r3, [pc, #216]	; (8007d14 <HAL_RCC_ClockConfig+0x244>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d115      	bne.n	8007c70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	e0ea      	b.n	8007e1e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d107      	bne.n	8007c60 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007c50:	4b30      	ldr	r3, [pc, #192]	; (8007d14 <HAL_RCC_ClockConfig+0x244>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d109      	bne.n	8007c70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e0de      	b.n	8007e1e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c60:	4b2c      	ldr	r3, [pc, #176]	; (8007d14 <HAL_RCC_ClockConfig+0x244>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 0304 	and.w	r3, r3, #4
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d101      	bne.n	8007c70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e0d6      	b.n	8007e1e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007c70:	4b28      	ldr	r3, [pc, #160]	; (8007d14 <HAL_RCC_ClockConfig+0x244>)
 8007c72:	691b      	ldr	r3, [r3, #16]
 8007c74:	f023 0207 	bic.w	r2, r3, #7
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	4925      	ldr	r1, [pc, #148]	; (8007d14 <HAL_RCC_ClockConfig+0x244>)
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c82:	f7fa fcd3 	bl	800262c <HAL_GetTick>
 8007c86:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c88:	e00a      	b.n	8007ca0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c8a:	f7fa fccf 	bl	800262c <HAL_GetTick>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	1ad3      	subs	r3, r2, r3
 8007c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d901      	bls.n	8007ca0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	e0be      	b.n	8007e1e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ca0:	4b1c      	ldr	r3, [pc, #112]	; (8007d14 <HAL_RCC_ClockConfig+0x244>)
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	00db      	lsls	r3, r3, #3
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d1eb      	bne.n	8007c8a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f003 0302 	and.w	r3, r3, #2
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d010      	beq.n	8007ce0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	68da      	ldr	r2, [r3, #12]
 8007cc2:	4b14      	ldr	r3, [pc, #80]	; (8007d14 <HAL_RCC_ClockConfig+0x244>)
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	f003 030f 	and.w	r3, r3, #15
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d208      	bcs.n	8007ce0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007cce:	4b11      	ldr	r3, [pc, #68]	; (8007d14 <HAL_RCC_ClockConfig+0x244>)
 8007cd0:	699b      	ldr	r3, [r3, #24]
 8007cd2:	f023 020f 	bic.w	r2, r3, #15
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	490e      	ldr	r1, [pc, #56]	; (8007d14 <HAL_RCC_ClockConfig+0x244>)
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007ce0:	4b0b      	ldr	r3, [pc, #44]	; (8007d10 <HAL_RCC_ClockConfig+0x240>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f003 030f 	and.w	r3, r3, #15
 8007ce8:	683a      	ldr	r2, [r7, #0]
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d214      	bcs.n	8007d18 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cee:	4b08      	ldr	r3, [pc, #32]	; (8007d10 <HAL_RCC_ClockConfig+0x240>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f023 020f 	bic.w	r2, r3, #15
 8007cf6:	4906      	ldr	r1, [pc, #24]	; (8007d10 <HAL_RCC_ClockConfig+0x240>)
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cfe:	4b04      	ldr	r3, [pc, #16]	; (8007d10 <HAL_RCC_ClockConfig+0x240>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f003 030f 	and.w	r3, r3, #15
 8007d06:	683a      	ldr	r2, [r7, #0]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d005      	beq.n	8007d18 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e086      	b.n	8007e1e <HAL_RCC_ClockConfig+0x34e>
 8007d10:	52002000 	.word	0x52002000
 8007d14:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f003 0304 	and.w	r3, r3, #4
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d010      	beq.n	8007d46 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	691a      	ldr	r2, [r3, #16]
 8007d28:	4b3f      	ldr	r3, [pc, #252]	; (8007e28 <HAL_RCC_ClockConfig+0x358>)
 8007d2a:	699b      	ldr	r3, [r3, #24]
 8007d2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d208      	bcs.n	8007d46 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007d34:	4b3c      	ldr	r3, [pc, #240]	; (8007e28 <HAL_RCC_ClockConfig+0x358>)
 8007d36:	699b      	ldr	r3, [r3, #24]
 8007d38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	4939      	ldr	r1, [pc, #228]	; (8007e28 <HAL_RCC_ClockConfig+0x358>)
 8007d42:	4313      	orrs	r3, r2
 8007d44:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f003 0308 	and.w	r3, r3, #8
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d010      	beq.n	8007d74 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	695a      	ldr	r2, [r3, #20]
 8007d56:	4b34      	ldr	r3, [pc, #208]	; (8007e28 <HAL_RCC_ClockConfig+0x358>)
 8007d58:	69db      	ldr	r3, [r3, #28]
 8007d5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d208      	bcs.n	8007d74 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007d62:	4b31      	ldr	r3, [pc, #196]	; (8007e28 <HAL_RCC_ClockConfig+0x358>)
 8007d64:	69db      	ldr	r3, [r3, #28]
 8007d66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	695b      	ldr	r3, [r3, #20]
 8007d6e:	492e      	ldr	r1, [pc, #184]	; (8007e28 <HAL_RCC_ClockConfig+0x358>)
 8007d70:	4313      	orrs	r3, r2
 8007d72:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f003 0310 	and.w	r3, r3, #16
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d010      	beq.n	8007da2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	699a      	ldr	r2, [r3, #24]
 8007d84:	4b28      	ldr	r3, [pc, #160]	; (8007e28 <HAL_RCC_ClockConfig+0x358>)
 8007d86:	69db      	ldr	r3, [r3, #28]
 8007d88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d208      	bcs.n	8007da2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007d90:	4b25      	ldr	r3, [pc, #148]	; (8007e28 <HAL_RCC_ClockConfig+0x358>)
 8007d92:	69db      	ldr	r3, [r3, #28]
 8007d94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	699b      	ldr	r3, [r3, #24]
 8007d9c:	4922      	ldr	r1, [pc, #136]	; (8007e28 <HAL_RCC_ClockConfig+0x358>)
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f003 0320 	and.w	r3, r3, #32
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d010      	beq.n	8007dd0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	69da      	ldr	r2, [r3, #28]
 8007db2:	4b1d      	ldr	r3, [pc, #116]	; (8007e28 <HAL_RCC_ClockConfig+0x358>)
 8007db4:	6a1b      	ldr	r3, [r3, #32]
 8007db6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d208      	bcs.n	8007dd0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007dbe:	4b1a      	ldr	r3, [pc, #104]	; (8007e28 <HAL_RCC_ClockConfig+0x358>)
 8007dc0:	6a1b      	ldr	r3, [r3, #32]
 8007dc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	69db      	ldr	r3, [r3, #28]
 8007dca:	4917      	ldr	r1, [pc, #92]	; (8007e28 <HAL_RCC_ClockConfig+0x358>)
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007dd0:	f000 f834 	bl	8007e3c <HAL_RCC_GetSysClockFreq>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	4b14      	ldr	r3, [pc, #80]	; (8007e28 <HAL_RCC_ClockConfig+0x358>)
 8007dd8:	699b      	ldr	r3, [r3, #24]
 8007dda:	0a1b      	lsrs	r3, r3, #8
 8007ddc:	f003 030f 	and.w	r3, r3, #15
 8007de0:	4912      	ldr	r1, [pc, #72]	; (8007e2c <HAL_RCC_ClockConfig+0x35c>)
 8007de2:	5ccb      	ldrb	r3, [r1, r3]
 8007de4:	f003 031f 	and.w	r3, r3, #31
 8007de8:	fa22 f303 	lsr.w	r3, r2, r3
 8007dec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007dee:	4b0e      	ldr	r3, [pc, #56]	; (8007e28 <HAL_RCC_ClockConfig+0x358>)
 8007df0:	699b      	ldr	r3, [r3, #24]
 8007df2:	f003 030f 	and.w	r3, r3, #15
 8007df6:	4a0d      	ldr	r2, [pc, #52]	; (8007e2c <HAL_RCC_ClockConfig+0x35c>)
 8007df8:	5cd3      	ldrb	r3, [r2, r3]
 8007dfa:	f003 031f 	and.w	r3, r3, #31
 8007dfe:	693a      	ldr	r2, [r7, #16]
 8007e00:	fa22 f303 	lsr.w	r3, r2, r3
 8007e04:	4a0a      	ldr	r2, [pc, #40]	; (8007e30 <HAL_RCC_ClockConfig+0x360>)
 8007e06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007e08:	4a0a      	ldr	r2, [pc, #40]	; (8007e34 <HAL_RCC_ClockConfig+0x364>)
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007e0e:	4b0a      	ldr	r3, [pc, #40]	; (8007e38 <HAL_RCC_ClockConfig+0x368>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7fa fbc0 	bl	8002598 <HAL_InitTick>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3718      	adds	r7, #24
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	58024400 	.word	0x58024400
 8007e2c:	0801f9a8 	.word	0x0801f9a8
 8007e30:	24000004 	.word	0x24000004
 8007e34:	24000000 	.word	0x24000000
 8007e38:	24000010 	.word	0x24000010

08007e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b089      	sub	sp, #36	; 0x24
 8007e40:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e42:	4bb3      	ldr	r3, [pc, #716]	; (8008110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e4a:	2b18      	cmp	r3, #24
 8007e4c:	f200 8155 	bhi.w	80080fa <HAL_RCC_GetSysClockFreq+0x2be>
 8007e50:	a201      	add	r2, pc, #4	; (adr r2, 8007e58 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e56:	bf00      	nop
 8007e58:	08007ebd 	.word	0x08007ebd
 8007e5c:	080080fb 	.word	0x080080fb
 8007e60:	080080fb 	.word	0x080080fb
 8007e64:	080080fb 	.word	0x080080fb
 8007e68:	080080fb 	.word	0x080080fb
 8007e6c:	080080fb 	.word	0x080080fb
 8007e70:	080080fb 	.word	0x080080fb
 8007e74:	080080fb 	.word	0x080080fb
 8007e78:	08007ee3 	.word	0x08007ee3
 8007e7c:	080080fb 	.word	0x080080fb
 8007e80:	080080fb 	.word	0x080080fb
 8007e84:	080080fb 	.word	0x080080fb
 8007e88:	080080fb 	.word	0x080080fb
 8007e8c:	080080fb 	.word	0x080080fb
 8007e90:	080080fb 	.word	0x080080fb
 8007e94:	080080fb 	.word	0x080080fb
 8007e98:	08007ee9 	.word	0x08007ee9
 8007e9c:	080080fb 	.word	0x080080fb
 8007ea0:	080080fb 	.word	0x080080fb
 8007ea4:	080080fb 	.word	0x080080fb
 8007ea8:	080080fb 	.word	0x080080fb
 8007eac:	080080fb 	.word	0x080080fb
 8007eb0:	080080fb 	.word	0x080080fb
 8007eb4:	080080fb 	.word	0x080080fb
 8007eb8:	08007eef 	.word	0x08007eef
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ebc:	4b94      	ldr	r3, [pc, #592]	; (8008110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 0320 	and.w	r3, r3, #32
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d009      	beq.n	8007edc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ec8:	4b91      	ldr	r3, [pc, #580]	; (8008110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	08db      	lsrs	r3, r3, #3
 8007ece:	f003 0303 	and.w	r3, r3, #3
 8007ed2:	4a90      	ldr	r2, [pc, #576]	; (8008114 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ed8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007eda:	e111      	b.n	8008100 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007edc:	4b8d      	ldr	r3, [pc, #564]	; (8008114 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007ede:	61bb      	str	r3, [r7, #24]
    break;
 8007ee0:	e10e      	b.n	8008100 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007ee2:	4b8d      	ldr	r3, [pc, #564]	; (8008118 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007ee4:	61bb      	str	r3, [r7, #24]
    break;
 8007ee6:	e10b      	b.n	8008100 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007ee8:	4b8c      	ldr	r3, [pc, #560]	; (800811c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007eea:	61bb      	str	r3, [r7, #24]
    break;
 8007eec:	e108      	b.n	8008100 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007eee:	4b88      	ldr	r3, [pc, #544]	; (8008110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef2:	f003 0303 	and.w	r3, r3, #3
 8007ef6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007ef8:	4b85      	ldr	r3, [pc, #532]	; (8008110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007efc:	091b      	lsrs	r3, r3, #4
 8007efe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f02:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007f04:	4b82      	ldr	r3, [pc, #520]	; (8008110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f08:	f003 0301 	and.w	r3, r3, #1
 8007f0c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007f0e:	4b80      	ldr	r3, [pc, #512]	; (8008110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f12:	08db      	lsrs	r3, r3, #3
 8007f14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	fb02 f303 	mul.w	r3, r2, r3
 8007f1e:	ee07 3a90 	vmov	s15, r3
 8007f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f26:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	f000 80e1 	beq.w	80080f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	2b02      	cmp	r3, #2
 8007f36:	f000 8083 	beq.w	8008040 <HAL_RCC_GetSysClockFreq+0x204>
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	f200 80a1 	bhi.w	8008084 <HAL_RCC_GetSysClockFreq+0x248>
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d003      	beq.n	8007f50 <HAL_RCC_GetSysClockFreq+0x114>
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d056      	beq.n	8007ffc <HAL_RCC_GetSysClockFreq+0x1c0>
 8007f4e:	e099      	b.n	8008084 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f50:	4b6f      	ldr	r3, [pc, #444]	; (8008110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f003 0320 	and.w	r3, r3, #32
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d02d      	beq.n	8007fb8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007f5c:	4b6c      	ldr	r3, [pc, #432]	; (8008110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	08db      	lsrs	r3, r3, #3
 8007f62:	f003 0303 	and.w	r3, r3, #3
 8007f66:	4a6b      	ldr	r2, [pc, #428]	; (8008114 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007f68:	fa22 f303 	lsr.w	r3, r2, r3
 8007f6c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	ee07 3a90 	vmov	s15, r3
 8007f74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	ee07 3a90 	vmov	s15, r3
 8007f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f86:	4b62      	ldr	r3, [pc, #392]	; (8008110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f8e:	ee07 3a90 	vmov	s15, r3
 8007f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f96:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f9a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008120 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fb2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007fb6:	e087      	b.n	80080c8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	ee07 3a90 	vmov	s15, r3
 8007fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fc2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008124 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fca:	4b51      	ldr	r3, [pc, #324]	; (8008110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fd2:	ee07 3a90 	vmov	s15, r3
 8007fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fda:	ed97 6a02 	vldr	s12, [r7, #8]
 8007fde:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008120 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ff6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ffa:	e065      	b.n	80080c8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	ee07 3a90 	vmov	s15, r3
 8008002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008006:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008128 <HAL_RCC_GetSysClockFreq+0x2ec>
 800800a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800800e:	4b40      	ldr	r3, [pc, #256]	; (8008110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008016:	ee07 3a90 	vmov	s15, r3
 800801a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800801e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008022:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008120 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800802a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800802e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800803a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800803e:	e043      	b.n	80080c8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	ee07 3a90 	vmov	s15, r3
 8008046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800804a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800812c <HAL_RCC_GetSysClockFreq+0x2f0>
 800804e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008052:	4b2f      	ldr	r3, [pc, #188]	; (8008110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800805a:	ee07 3a90 	vmov	s15, r3
 800805e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008062:	ed97 6a02 	vldr	s12, [r7, #8]
 8008066:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008120 <HAL_RCC_GetSysClockFreq+0x2e4>
 800806a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800806e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008072:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800807a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800807e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008082:	e021      	b.n	80080c8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	ee07 3a90 	vmov	s15, r3
 800808a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800808e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008128 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008096:	4b1e      	ldr	r3, [pc, #120]	; (8008110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800809a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800809e:	ee07 3a90 	vmov	s15, r3
 80080a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80080aa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008120 <HAL_RCC_GetSysClockFreq+0x2e4>
 80080ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080c6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80080c8:	4b11      	ldr	r3, [pc, #68]	; (8008110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80080ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080cc:	0a5b      	lsrs	r3, r3, #9
 80080ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080d2:	3301      	adds	r3, #1
 80080d4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	ee07 3a90 	vmov	s15, r3
 80080dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80080e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80080e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080ec:	ee17 3a90 	vmov	r3, s15
 80080f0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80080f2:	e005      	b.n	8008100 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80080f4:	2300      	movs	r3, #0
 80080f6:	61bb      	str	r3, [r7, #24]
    break;
 80080f8:	e002      	b.n	8008100 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80080fa:	4b07      	ldr	r3, [pc, #28]	; (8008118 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80080fc:	61bb      	str	r3, [r7, #24]
    break;
 80080fe:	bf00      	nop
  }

  return sysclockfreq;
 8008100:	69bb      	ldr	r3, [r7, #24]
}
 8008102:	4618      	mov	r0, r3
 8008104:	3724      	adds	r7, #36	; 0x24
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop
 8008110:	58024400 	.word	0x58024400
 8008114:	03d09000 	.word	0x03d09000
 8008118:	003d0900 	.word	0x003d0900
 800811c:	007a1200 	.word	0x007a1200
 8008120:	46000000 	.word	0x46000000
 8008124:	4c742400 	.word	0x4c742400
 8008128:	4a742400 	.word	0x4a742400
 800812c:	4af42400 	.word	0x4af42400

08008130 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008136:	f7ff fe81 	bl	8007e3c <HAL_RCC_GetSysClockFreq>
 800813a:	4602      	mov	r2, r0
 800813c:	4b10      	ldr	r3, [pc, #64]	; (8008180 <HAL_RCC_GetHCLKFreq+0x50>)
 800813e:	699b      	ldr	r3, [r3, #24]
 8008140:	0a1b      	lsrs	r3, r3, #8
 8008142:	f003 030f 	and.w	r3, r3, #15
 8008146:	490f      	ldr	r1, [pc, #60]	; (8008184 <HAL_RCC_GetHCLKFreq+0x54>)
 8008148:	5ccb      	ldrb	r3, [r1, r3]
 800814a:	f003 031f 	and.w	r3, r3, #31
 800814e:	fa22 f303 	lsr.w	r3, r2, r3
 8008152:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008154:	4b0a      	ldr	r3, [pc, #40]	; (8008180 <HAL_RCC_GetHCLKFreq+0x50>)
 8008156:	699b      	ldr	r3, [r3, #24]
 8008158:	f003 030f 	and.w	r3, r3, #15
 800815c:	4a09      	ldr	r2, [pc, #36]	; (8008184 <HAL_RCC_GetHCLKFreq+0x54>)
 800815e:	5cd3      	ldrb	r3, [r2, r3]
 8008160:	f003 031f 	and.w	r3, r3, #31
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	fa22 f303 	lsr.w	r3, r2, r3
 800816a:	4a07      	ldr	r2, [pc, #28]	; (8008188 <HAL_RCC_GetHCLKFreq+0x58>)
 800816c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800816e:	4a07      	ldr	r2, [pc, #28]	; (800818c <HAL_RCC_GetHCLKFreq+0x5c>)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008174:	4b04      	ldr	r3, [pc, #16]	; (8008188 <HAL_RCC_GetHCLKFreq+0x58>)
 8008176:	681b      	ldr	r3, [r3, #0]
}
 8008178:	4618      	mov	r0, r3
 800817a:	3708      	adds	r7, #8
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	58024400 	.word	0x58024400
 8008184:	0801f9a8 	.word	0x0801f9a8
 8008188:	24000004 	.word	0x24000004
 800818c:	24000000 	.word	0x24000000

08008190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008194:	f7ff ffcc 	bl	8008130 <HAL_RCC_GetHCLKFreq>
 8008198:	4602      	mov	r2, r0
 800819a:	4b06      	ldr	r3, [pc, #24]	; (80081b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800819c:	69db      	ldr	r3, [r3, #28]
 800819e:	091b      	lsrs	r3, r3, #4
 80081a0:	f003 0307 	and.w	r3, r3, #7
 80081a4:	4904      	ldr	r1, [pc, #16]	; (80081b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80081a6:	5ccb      	ldrb	r3, [r1, r3]
 80081a8:	f003 031f 	and.w	r3, r3, #31
 80081ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	58024400 	.word	0x58024400
 80081b8:	0801f9a8 	.word	0x0801f9a8

080081bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80081c0:	f7ff ffb6 	bl	8008130 <HAL_RCC_GetHCLKFreq>
 80081c4:	4602      	mov	r2, r0
 80081c6:	4b06      	ldr	r3, [pc, #24]	; (80081e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80081c8:	69db      	ldr	r3, [r3, #28]
 80081ca:	0a1b      	lsrs	r3, r3, #8
 80081cc:	f003 0307 	and.w	r3, r3, #7
 80081d0:	4904      	ldr	r1, [pc, #16]	; (80081e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80081d2:	5ccb      	ldrb	r3, [r1, r3]
 80081d4:	f003 031f 	and.w	r3, r3, #31
 80081d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80081dc:	4618      	mov	r0, r3
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	58024400 	.word	0x58024400
 80081e4:	0801f9a8 	.word	0x0801f9a8

080081e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b086      	sub	sp, #24
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80081f0:	2300      	movs	r3, #0
 80081f2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80081f4:	2300      	movs	r3, #0
 80081f6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008200:	2b00      	cmp	r3, #0
 8008202:	d03f      	beq.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008208:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800820c:	d02a      	beq.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800820e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008212:	d824      	bhi.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008214:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008218:	d018      	beq.n	800824c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800821a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800821e:	d81e      	bhi.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008220:	2b00      	cmp	r3, #0
 8008222:	d003      	beq.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008224:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008228:	d007      	beq.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800822a:	e018      	b.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800822c:	4bab      	ldr	r3, [pc, #684]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800822e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008230:	4aaa      	ldr	r2, [pc, #680]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008232:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008236:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008238:	e015      	b.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	3304      	adds	r3, #4
 800823e:	2102      	movs	r1, #2
 8008240:	4618      	mov	r0, r3
 8008242:	f001 f9cf 	bl	80095e4 <RCCEx_PLL2_Config>
 8008246:	4603      	mov	r3, r0
 8008248:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800824a:	e00c      	b.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	3324      	adds	r3, #36	; 0x24
 8008250:	2102      	movs	r1, #2
 8008252:	4618      	mov	r0, r3
 8008254:	f001 fa78 	bl	8009748 <RCCEx_PLL3_Config>
 8008258:	4603      	mov	r3, r0
 800825a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800825c:	e003      	b.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	75fb      	strb	r3, [r7, #23]
      break;
 8008262:	e000      	b.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008264:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008266:	7dfb      	ldrb	r3, [r7, #23]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d109      	bne.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800826c:	4b9b      	ldr	r3, [pc, #620]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800826e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008270:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008278:	4998      	ldr	r1, [pc, #608]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800827a:	4313      	orrs	r3, r2
 800827c:	650b      	str	r3, [r1, #80]	; 0x50
 800827e:	e001      	b.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008280:	7dfb      	ldrb	r3, [r7, #23]
 8008282:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800828c:	2b00      	cmp	r3, #0
 800828e:	d03d      	beq.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008294:	2b04      	cmp	r3, #4
 8008296:	d826      	bhi.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008298:	a201      	add	r2, pc, #4	; (adr r2, 80082a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800829a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800829e:	bf00      	nop
 80082a0:	080082b5 	.word	0x080082b5
 80082a4:	080082c3 	.word	0x080082c3
 80082a8:	080082d5 	.word	0x080082d5
 80082ac:	080082ed 	.word	0x080082ed
 80082b0:	080082ed 	.word	0x080082ed
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082b4:	4b89      	ldr	r3, [pc, #548]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80082b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b8:	4a88      	ldr	r2, [pc, #544]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80082ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80082c0:	e015      	b.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	3304      	adds	r3, #4
 80082c6:	2100      	movs	r1, #0
 80082c8:	4618      	mov	r0, r3
 80082ca:	f001 f98b 	bl	80095e4 <RCCEx_PLL2_Config>
 80082ce:	4603      	mov	r3, r0
 80082d0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80082d2:	e00c      	b.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	3324      	adds	r3, #36	; 0x24
 80082d8:	2100      	movs	r1, #0
 80082da:	4618      	mov	r0, r3
 80082dc:	f001 fa34 	bl	8009748 <RCCEx_PLL3_Config>
 80082e0:	4603      	mov	r3, r0
 80082e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80082e4:	e003      	b.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082e6:	2301      	movs	r3, #1
 80082e8:	75fb      	strb	r3, [r7, #23]
      break;
 80082ea:	e000      	b.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80082ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082ee:	7dfb      	ldrb	r3, [r7, #23]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d109      	bne.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80082f4:	4b79      	ldr	r3, [pc, #484]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80082f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082f8:	f023 0207 	bic.w	r2, r3, #7
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008300:	4976      	ldr	r1, [pc, #472]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008302:	4313      	orrs	r3, r2
 8008304:	650b      	str	r3, [r1, #80]	; 0x50
 8008306:	e001      	b.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008308:	7dfb      	ldrb	r3, [r7, #23]
 800830a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008314:	2b00      	cmp	r3, #0
 8008316:	d042      	beq.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800831c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008320:	d02b      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008326:	d825      	bhi.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008328:	2bc0      	cmp	r3, #192	; 0xc0
 800832a:	d028      	beq.n	800837e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800832c:	2bc0      	cmp	r3, #192	; 0xc0
 800832e:	d821      	bhi.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008330:	2b80      	cmp	r3, #128	; 0x80
 8008332:	d016      	beq.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008334:	2b80      	cmp	r3, #128	; 0x80
 8008336:	d81d      	bhi.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008338:	2b00      	cmp	r3, #0
 800833a:	d002      	beq.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800833c:	2b40      	cmp	r3, #64	; 0x40
 800833e:	d007      	beq.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008340:	e018      	b.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008342:	4b66      	ldr	r3, [pc, #408]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008346:	4a65      	ldr	r2, [pc, #404]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800834c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800834e:	e017      	b.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	3304      	adds	r3, #4
 8008354:	2100      	movs	r1, #0
 8008356:	4618      	mov	r0, r3
 8008358:	f001 f944 	bl	80095e4 <RCCEx_PLL2_Config>
 800835c:	4603      	mov	r3, r0
 800835e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008360:	e00e      	b.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	3324      	adds	r3, #36	; 0x24
 8008366:	2100      	movs	r1, #0
 8008368:	4618      	mov	r0, r3
 800836a:	f001 f9ed 	bl	8009748 <RCCEx_PLL3_Config>
 800836e:	4603      	mov	r3, r0
 8008370:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008372:	e005      	b.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	75fb      	strb	r3, [r7, #23]
      break;
 8008378:	e002      	b.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800837a:	bf00      	nop
 800837c:	e000      	b.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800837e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008380:	7dfb      	ldrb	r3, [r7, #23]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d109      	bne.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008386:	4b55      	ldr	r3, [pc, #340]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800838a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008392:	4952      	ldr	r1, [pc, #328]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008394:	4313      	orrs	r3, r2
 8008396:	650b      	str	r3, [r1, #80]	; 0x50
 8008398:	e001      	b.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800839a:	7dfb      	ldrb	r3, [r7, #23]
 800839c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d049      	beq.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80083b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083b4:	d030      	beq.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80083b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083ba:	d82a      	bhi.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80083bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80083c0:	d02c      	beq.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80083c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80083c6:	d824      	bhi.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80083c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083cc:	d018      	beq.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80083ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083d2:	d81e      	bhi.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d003      	beq.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80083d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083dc:	d007      	beq.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x206>
 80083de:	e018      	b.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083e0:	4b3e      	ldr	r3, [pc, #248]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e4:	4a3d      	ldr	r2, [pc, #244]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80083e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80083ec:	e017      	b.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	3304      	adds	r3, #4
 80083f2:	2100      	movs	r1, #0
 80083f4:	4618      	mov	r0, r3
 80083f6:	f001 f8f5 	bl	80095e4 <RCCEx_PLL2_Config>
 80083fa:	4603      	mov	r3, r0
 80083fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80083fe:	e00e      	b.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	3324      	adds	r3, #36	; 0x24
 8008404:	2100      	movs	r1, #0
 8008406:	4618      	mov	r0, r3
 8008408:	f001 f99e 	bl	8009748 <RCCEx_PLL3_Config>
 800840c:	4603      	mov	r3, r0
 800840e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008410:	e005      	b.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008412:	2301      	movs	r3, #1
 8008414:	75fb      	strb	r3, [r7, #23]
      break;
 8008416:	e002      	b.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008418:	bf00      	nop
 800841a:	e000      	b.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800841c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800841e:	7dfb      	ldrb	r3, [r7, #23]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10a      	bne.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008424:	4b2d      	ldr	r3, [pc, #180]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008428:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008432:	492a      	ldr	r1, [pc, #168]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008434:	4313      	orrs	r3, r2
 8008436:	658b      	str	r3, [r1, #88]	; 0x58
 8008438:	e001      	b.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800843a:	7dfb      	ldrb	r3, [r7, #23]
 800843c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008446:	2b00      	cmp	r3, #0
 8008448:	d04c      	beq.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008450:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008454:	d030      	beq.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008456:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800845a:	d82a      	bhi.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800845c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008460:	d02c      	beq.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8008462:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008466:	d824      	bhi.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008468:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800846c:	d018      	beq.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800846e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008472:	d81e      	bhi.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008474:	2b00      	cmp	r3, #0
 8008476:	d003      	beq.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008478:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800847c:	d007      	beq.n	800848e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800847e:	e018      	b.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008480:	4b16      	ldr	r3, [pc, #88]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008484:	4a15      	ldr	r2, [pc, #84]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008486:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800848a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800848c:	e017      	b.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	3304      	adds	r3, #4
 8008492:	2100      	movs	r1, #0
 8008494:	4618      	mov	r0, r3
 8008496:	f001 f8a5 	bl	80095e4 <RCCEx_PLL2_Config>
 800849a:	4603      	mov	r3, r0
 800849c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800849e:	e00e      	b.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	3324      	adds	r3, #36	; 0x24
 80084a4:	2100      	movs	r1, #0
 80084a6:	4618      	mov	r0, r3
 80084a8:	f001 f94e 	bl	8009748 <RCCEx_PLL3_Config>
 80084ac:	4603      	mov	r3, r0
 80084ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80084b0:	e005      	b.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80084b2:	2301      	movs	r3, #1
 80084b4:	75fb      	strb	r3, [r7, #23]
      break;
 80084b6:	e002      	b.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80084b8:	bf00      	nop
 80084ba:	e000      	b.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80084bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084be:	7dfb      	ldrb	r3, [r7, #23]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d10d      	bne.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80084c4:	4b05      	ldr	r3, [pc, #20]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084c8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80084d2:	4902      	ldr	r1, [pc, #8]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80084d4:	4313      	orrs	r3, r2
 80084d6:	658b      	str	r3, [r1, #88]	; 0x58
 80084d8:	e004      	b.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80084da:	bf00      	nop
 80084dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084e0:	7dfb      	ldrb	r3, [r7, #23]
 80084e2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d032      	beq.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084f4:	2b30      	cmp	r3, #48	; 0x30
 80084f6:	d01c      	beq.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80084f8:	2b30      	cmp	r3, #48	; 0x30
 80084fa:	d817      	bhi.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x344>
 80084fc:	2b20      	cmp	r3, #32
 80084fe:	d00c      	beq.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8008500:	2b20      	cmp	r3, #32
 8008502:	d813      	bhi.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008504:	2b00      	cmp	r3, #0
 8008506:	d016      	beq.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008508:	2b10      	cmp	r3, #16
 800850a:	d10f      	bne.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800850c:	4baf      	ldr	r3, [pc, #700]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800850e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008510:	4aae      	ldr	r2, [pc, #696]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008512:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008516:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008518:	e00e      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	3304      	adds	r3, #4
 800851e:	2102      	movs	r1, #2
 8008520:	4618      	mov	r0, r3
 8008522:	f001 f85f 	bl	80095e4 <RCCEx_PLL2_Config>
 8008526:	4603      	mov	r3, r0
 8008528:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800852a:	e005      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	75fb      	strb	r3, [r7, #23]
      break;
 8008530:	e002      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8008532:	bf00      	nop
 8008534:	e000      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8008536:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008538:	7dfb      	ldrb	r3, [r7, #23]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d109      	bne.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800853e:	4ba3      	ldr	r3, [pc, #652]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008542:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800854a:	49a0      	ldr	r1, [pc, #640]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800854c:	4313      	orrs	r3, r2
 800854e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008550:	e001      	b.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008552:	7dfb      	ldrb	r3, [r7, #23]
 8008554:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800855e:	2b00      	cmp	r3, #0
 8008560:	d047      	beq.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008566:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800856a:	d030      	beq.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800856c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008570:	d82a      	bhi.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008572:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008576:	d02c      	beq.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8008578:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800857c:	d824      	bhi.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800857e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008582:	d018      	beq.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8008584:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008588:	d81e      	bhi.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800858a:	2b00      	cmp	r3, #0
 800858c:	d003      	beq.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800858e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008592:	d007      	beq.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8008594:	e018      	b.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008596:	4b8d      	ldr	r3, [pc, #564]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859a:	4a8c      	ldr	r2, [pc, #560]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800859c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80085a2:	e017      	b.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	3304      	adds	r3, #4
 80085a8:	2100      	movs	r1, #0
 80085aa:	4618      	mov	r0, r3
 80085ac:	f001 f81a 	bl	80095e4 <RCCEx_PLL2_Config>
 80085b0:	4603      	mov	r3, r0
 80085b2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80085b4:	e00e      	b.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	3324      	adds	r3, #36	; 0x24
 80085ba:	2100      	movs	r1, #0
 80085bc:	4618      	mov	r0, r3
 80085be:	f001 f8c3 	bl	8009748 <RCCEx_PLL3_Config>
 80085c2:	4603      	mov	r3, r0
 80085c4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80085c6:	e005      	b.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085c8:	2301      	movs	r3, #1
 80085ca:	75fb      	strb	r3, [r7, #23]
      break;
 80085cc:	e002      	b.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80085ce:	bf00      	nop
 80085d0:	e000      	b.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80085d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085d4:	7dfb      	ldrb	r3, [r7, #23]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d109      	bne.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80085da:	4b7c      	ldr	r3, [pc, #496]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80085dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085de:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085e6:	4979      	ldr	r1, [pc, #484]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80085e8:	4313      	orrs	r3, r2
 80085ea:	650b      	str	r3, [r1, #80]	; 0x50
 80085ec:	e001      	b.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085ee:	7dfb      	ldrb	r3, [r7, #23]
 80085f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d049      	beq.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008602:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008606:	d02e      	beq.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8008608:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800860c:	d828      	bhi.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800860e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008612:	d02a      	beq.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8008614:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008618:	d822      	bhi.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800861a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800861e:	d026      	beq.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8008620:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008624:	d81c      	bhi.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008626:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800862a:	d010      	beq.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x466>
 800862c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008630:	d816      	bhi.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008632:	2b00      	cmp	r3, #0
 8008634:	d01d      	beq.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8008636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800863a:	d111      	bne.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	3304      	adds	r3, #4
 8008640:	2101      	movs	r1, #1
 8008642:	4618      	mov	r0, r3
 8008644:	f000 ffce 	bl	80095e4 <RCCEx_PLL2_Config>
 8008648:	4603      	mov	r3, r0
 800864a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800864c:	e012      	b.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	3324      	adds	r3, #36	; 0x24
 8008652:	2101      	movs	r1, #1
 8008654:	4618      	mov	r0, r3
 8008656:	f001 f877 	bl	8009748 <RCCEx_PLL3_Config>
 800865a:	4603      	mov	r3, r0
 800865c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800865e:	e009      	b.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008660:	2301      	movs	r3, #1
 8008662:	75fb      	strb	r3, [r7, #23]
      break;
 8008664:	e006      	b.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008666:	bf00      	nop
 8008668:	e004      	b.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800866a:	bf00      	nop
 800866c:	e002      	b.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800866e:	bf00      	nop
 8008670:	e000      	b.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008672:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008674:	7dfb      	ldrb	r3, [r7, #23]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d109      	bne.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800867a:	4b54      	ldr	r3, [pc, #336]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800867c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800867e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008686:	4951      	ldr	r1, [pc, #324]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008688:	4313      	orrs	r3, r2
 800868a:	650b      	str	r3, [r1, #80]	; 0x50
 800868c:	e001      	b.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800868e:	7dfb      	ldrb	r3, [r7, #23]
 8008690:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800869a:	2b00      	cmp	r3, #0
 800869c:	d04b      	beq.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80086a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086a8:	d02e      	beq.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80086aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086ae:	d828      	bhi.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80086b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086b4:	d02a      	beq.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x524>
 80086b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086ba:	d822      	bhi.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80086bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80086c0:	d026      	beq.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80086c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80086c6:	d81c      	bhi.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80086c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086cc:	d010      	beq.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80086ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086d2:	d816      	bhi.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d01d      	beq.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80086d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086dc:	d111      	bne.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	3304      	adds	r3, #4
 80086e2:	2101      	movs	r1, #1
 80086e4:	4618      	mov	r0, r3
 80086e6:	f000 ff7d 	bl	80095e4 <RCCEx_PLL2_Config>
 80086ea:	4603      	mov	r3, r0
 80086ec:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80086ee:	e012      	b.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	3324      	adds	r3, #36	; 0x24
 80086f4:	2101      	movs	r1, #1
 80086f6:	4618      	mov	r0, r3
 80086f8:	f001 f826 	bl	8009748 <RCCEx_PLL3_Config>
 80086fc:	4603      	mov	r3, r0
 80086fe:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008700:	e009      	b.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008702:	2301      	movs	r3, #1
 8008704:	75fb      	strb	r3, [r7, #23]
      break;
 8008706:	e006      	b.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008708:	bf00      	nop
 800870a:	e004      	b.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800870c:	bf00      	nop
 800870e:	e002      	b.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008710:	bf00      	nop
 8008712:	e000      	b.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008714:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008716:	7dfb      	ldrb	r3, [r7, #23]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d10a      	bne.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800871c:	4b2b      	ldr	r3, [pc, #172]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800871e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008720:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800872a:	4928      	ldr	r1, [pc, #160]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800872c:	4313      	orrs	r3, r2
 800872e:	658b      	str	r3, [r1, #88]	; 0x58
 8008730:	e001      	b.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008732:	7dfb      	ldrb	r3, [r7, #23]
 8008734:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800873e:	2b00      	cmp	r3, #0
 8008740:	d02f      	beq.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008746:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800874a:	d00e      	beq.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800874c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008750:	d814      	bhi.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8008752:	2b00      	cmp	r3, #0
 8008754:	d015      	beq.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008756:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800875a:	d10f      	bne.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800875c:	4b1b      	ldr	r3, [pc, #108]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800875e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008760:	4a1a      	ldr	r2, [pc, #104]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008762:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008766:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008768:	e00c      	b.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	3304      	adds	r3, #4
 800876e:	2101      	movs	r1, #1
 8008770:	4618      	mov	r0, r3
 8008772:	f000 ff37 	bl	80095e4 <RCCEx_PLL2_Config>
 8008776:	4603      	mov	r3, r0
 8008778:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800877a:	e003      	b.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	75fb      	strb	r3, [r7, #23]
      break;
 8008780:	e000      	b.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8008782:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008784:	7dfb      	ldrb	r3, [r7, #23]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d109      	bne.n	800879e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800878a:	4b10      	ldr	r3, [pc, #64]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800878c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800878e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008796:	490d      	ldr	r1, [pc, #52]	; (80087cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008798:	4313      	orrs	r3, r2
 800879a:	650b      	str	r3, [r1, #80]	; 0x50
 800879c:	e001      	b.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800879e:	7dfb      	ldrb	r3, [r7, #23]
 80087a0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d033      	beq.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087b2:	2b03      	cmp	r3, #3
 80087b4:	d81c      	bhi.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80087b6:	a201      	add	r2, pc, #4	; (adr r2, 80087bc <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80087b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087bc:	080087f7 	.word	0x080087f7
 80087c0:	080087d1 	.word	0x080087d1
 80087c4:	080087df 	.word	0x080087df
 80087c8:	080087f7 	.word	0x080087f7
 80087cc:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087d0:	4bb8      	ldr	r3, [pc, #736]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80087d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d4:	4ab7      	ldr	r2, [pc, #732]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80087d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80087dc:	e00c      	b.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	3304      	adds	r3, #4
 80087e2:	2102      	movs	r1, #2
 80087e4:	4618      	mov	r0, r3
 80087e6:	f000 fefd 	bl	80095e4 <RCCEx_PLL2_Config>
 80087ea:	4603      	mov	r3, r0
 80087ec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80087ee:	e003      	b.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80087f0:	2301      	movs	r3, #1
 80087f2:	75fb      	strb	r3, [r7, #23]
      break;
 80087f4:	e000      	b.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80087f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087f8:	7dfb      	ldrb	r3, [r7, #23]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d109      	bne.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80087fe:	4bad      	ldr	r3, [pc, #692]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008802:	f023 0203 	bic.w	r2, r3, #3
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800880a:	49aa      	ldr	r1, [pc, #680]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800880c:	4313      	orrs	r3, r2
 800880e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008810:	e001      	b.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008812:	7dfb      	ldrb	r3, [r7, #23]
 8008814:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800881e:	2b00      	cmp	r3, #0
 8008820:	f000 8086 	beq.w	8008930 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008824:	4ba4      	ldr	r3, [pc, #656]	; (8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4aa3      	ldr	r2, [pc, #652]	; (8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800882a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800882e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008830:	f7f9 fefc 	bl	800262c <HAL_GetTick>
 8008834:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008836:	e009      	b.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008838:	f7f9 fef8 	bl	800262c <HAL_GetTick>
 800883c:	4602      	mov	r2, r0
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	1ad3      	subs	r3, r2, r3
 8008842:	2b64      	cmp	r3, #100	; 0x64
 8008844:	d902      	bls.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008846:	2303      	movs	r3, #3
 8008848:	75fb      	strb	r3, [r7, #23]
        break;
 800884a:	e005      	b.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800884c:	4b9a      	ldr	r3, [pc, #616]	; (8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008854:	2b00      	cmp	r3, #0
 8008856:	d0ef      	beq.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008858:	7dfb      	ldrb	r3, [r7, #23]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d166      	bne.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800885e:	4b95      	ldr	r3, [pc, #596]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008860:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008868:	4053      	eors	r3, r2
 800886a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800886e:	2b00      	cmp	r3, #0
 8008870:	d013      	beq.n	800889a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008872:	4b90      	ldr	r3, [pc, #576]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008876:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800887a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800887c:	4b8d      	ldr	r3, [pc, #564]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800887e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008880:	4a8c      	ldr	r2, [pc, #560]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008886:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008888:	4b8a      	ldr	r3, [pc, #552]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800888a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800888c:	4a89      	ldr	r2, [pc, #548]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800888e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008892:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008894:	4a87      	ldr	r2, [pc, #540]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80088a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088a4:	d115      	bne.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088a6:	f7f9 fec1 	bl	800262c <HAL_GetTick>
 80088aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80088ac:	e00b      	b.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088ae:	f7f9 febd 	bl	800262c <HAL_GetTick>
 80088b2:	4602      	mov	r2, r0
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	1ad3      	subs	r3, r2, r3
 80088b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80088bc:	4293      	cmp	r3, r2
 80088be:	d902      	bls.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80088c0:	2303      	movs	r3, #3
 80088c2:	75fb      	strb	r3, [r7, #23]
            break;
 80088c4:	e005      	b.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80088c6:	4b7b      	ldr	r3, [pc, #492]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80088c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ca:	f003 0302 	and.w	r3, r3, #2
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d0ed      	beq.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80088d2:	7dfb      	ldrb	r3, [r7, #23]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d126      	bne.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80088de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80088e6:	d10d      	bne.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80088e8:	4b72      	ldr	r3, [pc, #456]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80088ea:	691b      	ldr	r3, [r3, #16]
 80088ec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80088f6:	0919      	lsrs	r1, r3, #4
 80088f8:	4b70      	ldr	r3, [pc, #448]	; (8008abc <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80088fa:	400b      	ands	r3, r1
 80088fc:	496d      	ldr	r1, [pc, #436]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80088fe:	4313      	orrs	r3, r2
 8008900:	610b      	str	r3, [r1, #16]
 8008902:	e005      	b.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008904:	4b6b      	ldr	r3, [pc, #428]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	4a6a      	ldr	r2, [pc, #424]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800890a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800890e:	6113      	str	r3, [r2, #16]
 8008910:	4b68      	ldr	r3, [pc, #416]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008912:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800891a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800891e:	4965      	ldr	r1, [pc, #404]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008920:	4313      	orrs	r3, r2
 8008922:	670b      	str	r3, [r1, #112]	; 0x70
 8008924:	e004      	b.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008926:	7dfb      	ldrb	r3, [r7, #23]
 8008928:	75bb      	strb	r3, [r7, #22]
 800892a:	e001      	b.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800892c:	7dfb      	ldrb	r3, [r7, #23]
 800892e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 0301 	and.w	r3, r3, #1
 8008938:	2b00      	cmp	r3, #0
 800893a:	d07e      	beq.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008940:	2b28      	cmp	r3, #40	; 0x28
 8008942:	d867      	bhi.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008944:	a201      	add	r2, pc, #4	; (adr r2, 800894c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800894a:	bf00      	nop
 800894c:	08008a1b 	.word	0x08008a1b
 8008950:	08008a15 	.word	0x08008a15
 8008954:	08008a15 	.word	0x08008a15
 8008958:	08008a15 	.word	0x08008a15
 800895c:	08008a15 	.word	0x08008a15
 8008960:	08008a15 	.word	0x08008a15
 8008964:	08008a15 	.word	0x08008a15
 8008968:	08008a15 	.word	0x08008a15
 800896c:	080089f1 	.word	0x080089f1
 8008970:	08008a15 	.word	0x08008a15
 8008974:	08008a15 	.word	0x08008a15
 8008978:	08008a15 	.word	0x08008a15
 800897c:	08008a15 	.word	0x08008a15
 8008980:	08008a15 	.word	0x08008a15
 8008984:	08008a15 	.word	0x08008a15
 8008988:	08008a15 	.word	0x08008a15
 800898c:	08008a03 	.word	0x08008a03
 8008990:	08008a15 	.word	0x08008a15
 8008994:	08008a15 	.word	0x08008a15
 8008998:	08008a15 	.word	0x08008a15
 800899c:	08008a15 	.word	0x08008a15
 80089a0:	08008a15 	.word	0x08008a15
 80089a4:	08008a15 	.word	0x08008a15
 80089a8:	08008a15 	.word	0x08008a15
 80089ac:	08008a1b 	.word	0x08008a1b
 80089b0:	08008a15 	.word	0x08008a15
 80089b4:	08008a15 	.word	0x08008a15
 80089b8:	08008a15 	.word	0x08008a15
 80089bc:	08008a15 	.word	0x08008a15
 80089c0:	08008a15 	.word	0x08008a15
 80089c4:	08008a15 	.word	0x08008a15
 80089c8:	08008a15 	.word	0x08008a15
 80089cc:	08008a1b 	.word	0x08008a1b
 80089d0:	08008a15 	.word	0x08008a15
 80089d4:	08008a15 	.word	0x08008a15
 80089d8:	08008a15 	.word	0x08008a15
 80089dc:	08008a15 	.word	0x08008a15
 80089e0:	08008a15 	.word	0x08008a15
 80089e4:	08008a15 	.word	0x08008a15
 80089e8:	08008a15 	.word	0x08008a15
 80089ec:	08008a1b 	.word	0x08008a1b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	3304      	adds	r3, #4
 80089f4:	2101      	movs	r1, #1
 80089f6:	4618      	mov	r0, r3
 80089f8:	f000 fdf4 	bl	80095e4 <RCCEx_PLL2_Config>
 80089fc:	4603      	mov	r3, r0
 80089fe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008a00:	e00c      	b.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	3324      	adds	r3, #36	; 0x24
 8008a06:	2101      	movs	r1, #1
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f000 fe9d 	bl	8009748 <RCCEx_PLL3_Config>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008a12:	e003      	b.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	75fb      	strb	r3, [r7, #23]
      break;
 8008a18:	e000      	b.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8008a1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a1c:	7dfb      	ldrb	r3, [r7, #23]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d109      	bne.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008a22:	4b24      	ldr	r3, [pc, #144]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a26:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a2e:	4921      	ldr	r1, [pc, #132]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008a30:	4313      	orrs	r3, r2
 8008a32:	654b      	str	r3, [r1, #84]	; 0x54
 8008a34:	e001      	b.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a36:	7dfb      	ldrb	r3, [r7, #23]
 8008a38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f003 0302 	and.w	r3, r3, #2
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d03e      	beq.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a4a:	2b05      	cmp	r3, #5
 8008a4c:	d820      	bhi.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8008a4e:	a201      	add	r2, pc, #4	; (adr r2, 8008a54 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8008a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a54:	08008a97 	.word	0x08008a97
 8008a58:	08008a6d 	.word	0x08008a6d
 8008a5c:	08008a7f 	.word	0x08008a7f
 8008a60:	08008a97 	.word	0x08008a97
 8008a64:	08008a97 	.word	0x08008a97
 8008a68:	08008a97 	.word	0x08008a97
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	3304      	adds	r3, #4
 8008a70:	2101      	movs	r1, #1
 8008a72:	4618      	mov	r0, r3
 8008a74:	f000 fdb6 	bl	80095e4 <RCCEx_PLL2_Config>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008a7c:	e00c      	b.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	3324      	adds	r3, #36	; 0x24
 8008a82:	2101      	movs	r1, #1
 8008a84:	4618      	mov	r0, r3
 8008a86:	f000 fe5f 	bl	8009748 <RCCEx_PLL3_Config>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008a8e:	e003      	b.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	75fb      	strb	r3, [r7, #23]
      break;
 8008a94:	e000      	b.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8008a96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a98:	7dfb      	ldrb	r3, [r7, #23]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d110      	bne.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008a9e:	4b05      	ldr	r3, [pc, #20]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aa2:	f023 0207 	bic.w	r2, r3, #7
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008aaa:	4902      	ldr	r1, [pc, #8]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008aac:	4313      	orrs	r3, r2
 8008aae:	654b      	str	r3, [r1, #84]	; 0x54
 8008ab0:	e008      	b.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8008ab2:	bf00      	nop
 8008ab4:	58024400 	.word	0x58024400
 8008ab8:	58024800 	.word	0x58024800
 8008abc:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ac0:	7dfb      	ldrb	r3, [r7, #23]
 8008ac2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f003 0304 	and.w	r3, r3, #4
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d039      	beq.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ad6:	2b05      	cmp	r3, #5
 8008ad8:	d820      	bhi.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0x934>
 8008ada:	a201      	add	r2, pc, #4	; (adr r2, 8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8008adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae0:	08008b23 	.word	0x08008b23
 8008ae4:	08008af9 	.word	0x08008af9
 8008ae8:	08008b0b 	.word	0x08008b0b
 8008aec:	08008b23 	.word	0x08008b23
 8008af0:	08008b23 	.word	0x08008b23
 8008af4:	08008b23 	.word	0x08008b23
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	3304      	adds	r3, #4
 8008afc:	2101      	movs	r1, #1
 8008afe:	4618      	mov	r0, r3
 8008b00:	f000 fd70 	bl	80095e4 <RCCEx_PLL2_Config>
 8008b04:	4603      	mov	r3, r0
 8008b06:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008b08:	e00c      	b.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	3324      	adds	r3, #36	; 0x24
 8008b0e:	2101      	movs	r1, #1
 8008b10:	4618      	mov	r0, r3
 8008b12:	f000 fe19 	bl	8009748 <RCCEx_PLL3_Config>
 8008b16:	4603      	mov	r3, r0
 8008b18:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008b1a:	e003      	b.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	75fb      	strb	r3, [r7, #23]
      break;
 8008b20:	e000      	b.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8008b22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b24:	7dfb      	ldrb	r3, [r7, #23]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d10a      	bne.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008b2a:	4bb7      	ldr	r3, [pc, #732]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b2e:	f023 0207 	bic.w	r2, r3, #7
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b38:	49b3      	ldr	r1, [pc, #716]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	658b      	str	r3, [r1, #88]	; 0x58
 8008b3e:	e001      	b.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b40:	7dfb      	ldrb	r3, [r7, #23]
 8008b42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f003 0320 	and.w	r3, r3, #32
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d04b      	beq.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b5a:	d02e      	beq.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8008b5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b60:	d828      	bhi.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b66:	d02a      	beq.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b6c:	d822      	bhi.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008b6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008b72:	d026      	beq.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008b74:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008b78:	d81c      	bhi.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008b7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b7e:	d010      	beq.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8008b80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b84:	d816      	bhi.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d01d      	beq.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008b8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b8e:	d111      	bne.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	3304      	adds	r3, #4
 8008b94:	2100      	movs	r1, #0
 8008b96:	4618      	mov	r0, r3
 8008b98:	f000 fd24 	bl	80095e4 <RCCEx_PLL2_Config>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008ba0:	e012      	b.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	3324      	adds	r3, #36	; 0x24
 8008ba6:	2102      	movs	r1, #2
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f000 fdcd 	bl	8009748 <RCCEx_PLL3_Config>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008bb2:	e009      	b.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	75fb      	strb	r3, [r7, #23]
      break;
 8008bb8:	e006      	b.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008bba:	bf00      	nop
 8008bbc:	e004      	b.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008bbe:	bf00      	nop
 8008bc0:	e002      	b.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008bc2:	bf00      	nop
 8008bc4:	e000      	b.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008bc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008bc8:	7dfb      	ldrb	r3, [r7, #23]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d10a      	bne.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008bce:	4b8e      	ldr	r3, [pc, #568]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bd2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bdc:	498a      	ldr	r1, [pc, #552]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008bde:	4313      	orrs	r3, r2
 8008be0:	654b      	str	r3, [r1, #84]	; 0x54
 8008be2:	e001      	b.n	8008be8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008be4:	7dfb      	ldrb	r3, [r7, #23]
 8008be6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d04b      	beq.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008bfa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008bfe:	d02e      	beq.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8008c00:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008c04:	d828      	bhi.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c0a:	d02a      	beq.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c10:	d822      	bhi.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008c12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c16:	d026      	beq.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008c18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c1c:	d81c      	bhi.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008c1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c22:	d010      	beq.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8008c24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c28:	d816      	bhi.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d01d      	beq.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8008c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c32:	d111      	bne.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	3304      	adds	r3, #4
 8008c38:	2100      	movs	r1, #0
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f000 fcd2 	bl	80095e4 <RCCEx_PLL2_Config>
 8008c40:	4603      	mov	r3, r0
 8008c42:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008c44:	e012      	b.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	3324      	adds	r3, #36	; 0x24
 8008c4a:	2102      	movs	r1, #2
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f000 fd7b 	bl	8009748 <RCCEx_PLL3_Config>
 8008c52:	4603      	mov	r3, r0
 8008c54:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008c56:	e009      	b.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	75fb      	strb	r3, [r7, #23]
      break;
 8008c5c:	e006      	b.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008c5e:	bf00      	nop
 8008c60:	e004      	b.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008c62:	bf00      	nop
 8008c64:	e002      	b.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008c66:	bf00      	nop
 8008c68:	e000      	b.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008c6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c6c:	7dfb      	ldrb	r3, [r7, #23]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d10a      	bne.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008c72:	4b65      	ldr	r3, [pc, #404]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c76:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008c80:	4961      	ldr	r1, [pc, #388]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008c82:	4313      	orrs	r3, r2
 8008c84:	658b      	str	r3, [r1, #88]	; 0x58
 8008c86:	e001      	b.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c88:	7dfb      	ldrb	r3, [r7, #23]
 8008c8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d04b      	beq.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008c9e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008ca2:	d02e      	beq.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8008ca4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008ca8:	d828      	bhi.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008caa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cae:	d02a      	beq.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8008cb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cb4:	d822      	bhi.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008cb6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008cba:	d026      	beq.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008cbc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008cc0:	d81c      	bhi.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008cc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008cc6:	d010      	beq.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8008cc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ccc:	d816      	bhi.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d01d      	beq.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cd6:	d111      	bne.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	3304      	adds	r3, #4
 8008cdc:	2100      	movs	r1, #0
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f000 fc80 	bl	80095e4 <RCCEx_PLL2_Config>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008ce8:	e012      	b.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	3324      	adds	r3, #36	; 0x24
 8008cee:	2102      	movs	r1, #2
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f000 fd29 	bl	8009748 <RCCEx_PLL3_Config>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008cfa:	e009      	b.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	75fb      	strb	r3, [r7, #23]
      break;
 8008d00:	e006      	b.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008d02:	bf00      	nop
 8008d04:	e004      	b.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008d06:	bf00      	nop
 8008d08:	e002      	b.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008d0a:	bf00      	nop
 8008d0c:	e000      	b.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008d0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d10:	7dfb      	ldrb	r3, [r7, #23]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d10a      	bne.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008d16:	4b3c      	ldr	r3, [pc, #240]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008d24:	4938      	ldr	r1, [pc, #224]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008d26:	4313      	orrs	r3, r2
 8008d28:	658b      	str	r3, [r1, #88]	; 0x58
 8008d2a:	e001      	b.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d2c:	7dfb      	ldrb	r3, [r7, #23]
 8008d2e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f003 0308 	and.w	r3, r3, #8
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d01a      	beq.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d46:	d10a      	bne.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	3324      	adds	r3, #36	; 0x24
 8008d4c:	2102      	movs	r1, #2
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f000 fcfa 	bl	8009748 <RCCEx_PLL3_Config>
 8008d54:	4603      	mov	r3, r0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d001      	beq.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008d5e:	4b2a      	ldr	r3, [pc, #168]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d62:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d6c:	4926      	ldr	r1, [pc, #152]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f003 0310 	and.w	r3, r3, #16
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d01a      	beq.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d88:	d10a      	bne.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	3324      	adds	r3, #36	; 0x24
 8008d8e:	2102      	movs	r1, #2
 8008d90:	4618      	mov	r0, r3
 8008d92:	f000 fcd9 	bl	8009748 <RCCEx_PLL3_Config>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d001      	beq.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008da0:	4b19      	ldr	r3, [pc, #100]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008da4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008dae:	4916      	ldr	r1, [pc, #88]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008db0:	4313      	orrs	r3, r2
 8008db2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d036      	beq.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008dc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008dca:	d01f      	beq.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008dcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008dd0:	d817      	bhi.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d003      	beq.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8008dd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dda:	d009      	beq.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8008ddc:	e011      	b.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	3304      	adds	r3, #4
 8008de2:	2100      	movs	r1, #0
 8008de4:	4618      	mov	r0, r3
 8008de6:	f000 fbfd 	bl	80095e4 <RCCEx_PLL2_Config>
 8008dea:	4603      	mov	r3, r0
 8008dec:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008dee:	e00e      	b.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	3324      	adds	r3, #36	; 0x24
 8008df4:	2102      	movs	r1, #2
 8008df6:	4618      	mov	r0, r3
 8008df8:	f000 fca6 	bl	8009748 <RCCEx_PLL3_Config>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008e00:	e005      	b.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e02:	2301      	movs	r3, #1
 8008e04:	75fb      	strb	r3, [r7, #23]
      break;
 8008e06:	e002      	b.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8008e08:	58024400 	.word	0x58024400
      break;
 8008e0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e0e:	7dfb      	ldrb	r3, [r7, #23]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d10a      	bne.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008e14:	4b93      	ldr	r3, [pc, #588]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008e22:	4990      	ldr	r1, [pc, #576]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008e24:	4313      	orrs	r3, r2
 8008e26:	658b      	str	r3, [r1, #88]	; 0x58
 8008e28:	e001      	b.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e2a:	7dfb      	ldrb	r3, [r7, #23]
 8008e2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d033      	beq.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e40:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008e44:	d01c      	beq.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8008e46:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008e4a:	d816      	bhi.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8008e4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e50:	d003      	beq.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8008e52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e56:	d007      	beq.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8008e58:	e00f      	b.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e5a:	4b82      	ldr	r3, [pc, #520]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e5e:	4a81      	ldr	r2, [pc, #516]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008e66:	e00c      	b.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	3324      	adds	r3, #36	; 0x24
 8008e6c:	2101      	movs	r1, #1
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f000 fc6a 	bl	8009748 <RCCEx_PLL3_Config>
 8008e74:	4603      	mov	r3, r0
 8008e76:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008e78:	e003      	b.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	75fb      	strb	r3, [r7, #23]
      break;
 8008e7e:	e000      	b.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8008e80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e82:	7dfb      	ldrb	r3, [r7, #23]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d10a      	bne.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008e88:	4b76      	ldr	r3, [pc, #472]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e96:	4973      	ldr	r1, [pc, #460]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	654b      	str	r3, [r1, #84]	; 0x54
 8008e9c:	e001      	b.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e9e:	7dfb      	ldrb	r3, [r7, #23]
 8008ea0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d029      	beq.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d003      	beq.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8008eb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008eba:	d007      	beq.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8008ebc:	e00f      	b.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ebe:	4b69      	ldr	r3, [pc, #420]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec2:	4a68      	ldr	r2, [pc, #416]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ec8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008eca:	e00b      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	3304      	adds	r3, #4
 8008ed0:	2102      	movs	r1, #2
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f000 fb86 	bl	80095e4 <RCCEx_PLL2_Config>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008edc:	e002      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	75fb      	strb	r3, [r7, #23]
      break;
 8008ee2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ee4:	7dfb      	ldrb	r3, [r7, #23]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d109      	bne.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008eea:	4b5e      	ldr	r3, [pc, #376]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008eee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ef6:	495b      	ldr	r1, [pc, #364]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008efc:	e001      	b.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008efe:	7dfb      	ldrb	r3, [r7, #23]
 8008f00:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d00a      	beq.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	3324      	adds	r3, #36	; 0x24
 8008f12:	2102      	movs	r1, #2
 8008f14:	4618      	mov	r0, r3
 8008f16:	f000 fc17 	bl	8009748 <RCCEx_PLL3_Config>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d001      	beq.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8008f20:	2301      	movs	r3, #1
 8008f22:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d030      	beq.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f38:	d017      	beq.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8008f3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f3e:	d811      	bhi.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f44:	d013      	beq.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008f46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f4a:	d80b      	bhi.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d010      	beq.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f54:	d106      	bne.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f56:	4b43      	ldr	r3, [pc, #268]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f5a:	4a42      	ldr	r2, [pc, #264]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008f62:	e007      	b.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f64:	2301      	movs	r3, #1
 8008f66:	75fb      	strb	r3, [r7, #23]
      break;
 8008f68:	e004      	b.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008f6a:	bf00      	nop
 8008f6c:	e002      	b.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008f6e:	bf00      	nop
 8008f70:	e000      	b.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008f72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f74:	7dfb      	ldrb	r3, [r7, #23]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d109      	bne.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008f7a:	4b3a      	ldr	r3, [pc, #232]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f86:	4937      	ldr	r1, [pc, #220]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	654b      	str	r3, [r1, #84]	; 0x54
 8008f8c:	e001      	b.n	8008f92 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f8e:	7dfb      	ldrb	r3, [r7, #23]
 8008f90:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d008      	beq.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008f9e:	4b31      	ldr	r3, [pc, #196]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fa2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008faa:	492e      	ldr	r1, [pc, #184]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008fac:	4313      	orrs	r3, r2
 8008fae:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d009      	beq.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008fbc:	4b29      	ldr	r3, [pc, #164]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008fbe:	691b      	ldr	r3, [r3, #16]
 8008fc0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008fca:	4926      	ldr	r1, [pc, #152]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d008      	beq.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008fdc:	4b21      	ldr	r3, [pc, #132]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fe0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fe8:	491e      	ldr	r1, [pc, #120]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008fea:	4313      	orrs	r3, r2
 8008fec:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d00d      	beq.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008ffa:	4b1a      	ldr	r3, [pc, #104]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ffc:	691b      	ldr	r3, [r3, #16]
 8008ffe:	4a19      	ldr	r2, [pc, #100]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009000:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009004:	6113      	str	r3, [r2, #16]
 8009006:	4b17      	ldr	r3, [pc, #92]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009008:	691a      	ldr	r2, [r3, #16]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009010:	4914      	ldr	r1, [pc, #80]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009012:	4313      	orrs	r3, r2
 8009014:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	2b00      	cmp	r3, #0
 800901c:	da08      	bge.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800901e:	4b11      	ldr	r3, [pc, #68]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009022:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800902a:	490e      	ldr	r1, [pc, #56]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800902c:	4313      	orrs	r3, r2
 800902e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009038:	2b00      	cmp	r3, #0
 800903a:	d009      	beq.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800903c:	4b09      	ldr	r3, [pc, #36]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800903e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009040:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800904a:	4906      	ldr	r1, [pc, #24]	; (8009064 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800904c:	4313      	orrs	r3, r2
 800904e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009050:	7dbb      	ldrb	r3, [r7, #22]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d101      	bne.n	800905a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8009056:	2300      	movs	r3, #0
 8009058:	e000      	b.n	800905c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800905a:	2301      	movs	r3, #1
}
 800905c:	4618      	mov	r0, r3
 800905e:	3718      	adds	r7, #24
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}
 8009064:	58024400 	.word	0x58024400

08009068 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800906c:	f7ff f860 	bl	8008130 <HAL_RCC_GetHCLKFreq>
 8009070:	4602      	mov	r2, r0
 8009072:	4b06      	ldr	r3, [pc, #24]	; (800908c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009074:	6a1b      	ldr	r3, [r3, #32]
 8009076:	091b      	lsrs	r3, r3, #4
 8009078:	f003 0307 	and.w	r3, r3, #7
 800907c:	4904      	ldr	r1, [pc, #16]	; (8009090 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800907e:	5ccb      	ldrb	r3, [r1, r3]
 8009080:	f003 031f 	and.w	r3, r3, #31
 8009084:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009088:	4618      	mov	r0, r3
 800908a:	bd80      	pop	{r7, pc}
 800908c:	58024400 	.word	0x58024400
 8009090:	0801f9a8 	.word	0x0801f9a8

08009094 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009094:	b480      	push	{r7}
 8009096:	b089      	sub	sp, #36	; 0x24
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800909c:	4ba1      	ldr	r3, [pc, #644]	; (8009324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800909e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090a0:	f003 0303 	and.w	r3, r3, #3
 80090a4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80090a6:	4b9f      	ldr	r3, [pc, #636]	; (8009324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090aa:	0b1b      	lsrs	r3, r3, #12
 80090ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090b0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80090b2:	4b9c      	ldr	r3, [pc, #624]	; (8009324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b6:	091b      	lsrs	r3, r3, #4
 80090b8:	f003 0301 	and.w	r3, r3, #1
 80090bc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80090be:	4b99      	ldr	r3, [pc, #612]	; (8009324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090c2:	08db      	lsrs	r3, r3, #3
 80090c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090c8:	693a      	ldr	r2, [r7, #16]
 80090ca:	fb02 f303 	mul.w	r3, r2, r3
 80090ce:	ee07 3a90 	vmov	s15, r3
 80090d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	f000 8111 	beq.w	8009304 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	f000 8083 	beq.w	80091f0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80090ea:	69bb      	ldr	r3, [r7, #24]
 80090ec:	2b02      	cmp	r3, #2
 80090ee:	f200 80a1 	bhi.w	8009234 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d003      	beq.n	8009100 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80090f8:	69bb      	ldr	r3, [r7, #24]
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d056      	beq.n	80091ac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80090fe:	e099      	b.n	8009234 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009100:	4b88      	ldr	r3, [pc, #544]	; (8009324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f003 0320 	and.w	r3, r3, #32
 8009108:	2b00      	cmp	r3, #0
 800910a:	d02d      	beq.n	8009168 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800910c:	4b85      	ldr	r3, [pc, #532]	; (8009324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	08db      	lsrs	r3, r3, #3
 8009112:	f003 0303 	and.w	r3, r3, #3
 8009116:	4a84      	ldr	r2, [pc, #528]	; (8009328 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009118:	fa22 f303 	lsr.w	r3, r2, r3
 800911c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	ee07 3a90 	vmov	s15, r3
 8009124:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	ee07 3a90 	vmov	s15, r3
 800912e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009136:	4b7b      	ldr	r3, [pc, #492]	; (8009324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800913a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800913e:	ee07 3a90 	vmov	s15, r3
 8009142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009146:	ed97 6a03 	vldr	s12, [r7, #12]
 800914a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800932c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800914e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800915a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800915e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009162:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009166:	e087      	b.n	8009278 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	ee07 3a90 	vmov	s15, r3
 800916e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009172:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009330 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800917a:	4b6a      	ldr	r3, [pc, #424]	; (8009324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800917c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800917e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009182:	ee07 3a90 	vmov	s15, r3
 8009186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800918a:	ed97 6a03 	vldr	s12, [r7, #12]
 800918e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800932c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800919a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800919e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80091aa:	e065      	b.n	8009278 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	ee07 3a90 	vmov	s15, r3
 80091b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009334 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80091ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091be:	4b59      	ldr	r3, [pc, #356]	; (8009324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091c6:	ee07 3a90 	vmov	s15, r3
 80091ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80091d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800932c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80091d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80091ee:	e043      	b.n	8009278 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	ee07 3a90 	vmov	s15, r3
 80091f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009338 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80091fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009202:	4b48      	ldr	r3, [pc, #288]	; (8009324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800920a:	ee07 3a90 	vmov	s15, r3
 800920e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009212:	ed97 6a03 	vldr	s12, [r7, #12]
 8009216:	eddf 5a45 	vldr	s11, [pc, #276]	; 800932c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800921a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800921e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800922a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800922e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009232:	e021      	b.n	8009278 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	ee07 3a90 	vmov	s15, r3
 800923a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800923e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009334 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009246:	4b37      	ldr	r3, [pc, #220]	; (8009324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800924a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800924e:	ee07 3a90 	vmov	s15, r3
 8009252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009256:	ed97 6a03 	vldr	s12, [r7, #12]
 800925a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800932c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800925e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800926a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800926e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009272:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009276:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009278:	4b2a      	ldr	r3, [pc, #168]	; (8009324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800927a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800927c:	0a5b      	lsrs	r3, r3, #9
 800927e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009282:	ee07 3a90 	vmov	s15, r3
 8009286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800928a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800928e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009292:	edd7 6a07 	vldr	s13, [r7, #28]
 8009296:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800929a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800929e:	ee17 2a90 	vmov	r2, s15
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80092a6:	4b1f      	ldr	r3, [pc, #124]	; (8009324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092aa:	0c1b      	lsrs	r3, r3, #16
 80092ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092b0:	ee07 3a90 	vmov	s15, r3
 80092b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80092c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092cc:	ee17 2a90 	vmov	r2, s15
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80092d4:	4b13      	ldr	r3, [pc, #76]	; (8009324 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d8:	0e1b      	lsrs	r3, r3, #24
 80092da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092de:	ee07 3a90 	vmov	s15, r3
 80092e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80092f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092fa:	ee17 2a90 	vmov	r2, s15
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009302:	e008      	b.n	8009316 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2200      	movs	r2, #0
 8009308:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2200      	movs	r2, #0
 8009314:	609a      	str	r2, [r3, #8]
}
 8009316:	bf00      	nop
 8009318:	3724      	adds	r7, #36	; 0x24
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr
 8009322:	bf00      	nop
 8009324:	58024400 	.word	0x58024400
 8009328:	03d09000 	.word	0x03d09000
 800932c:	46000000 	.word	0x46000000
 8009330:	4c742400 	.word	0x4c742400
 8009334:	4a742400 	.word	0x4a742400
 8009338:	4af42400 	.word	0x4af42400

0800933c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800933c:	b480      	push	{r7}
 800933e:	b089      	sub	sp, #36	; 0x24
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009344:	4ba1      	ldr	r3, [pc, #644]	; (80095cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009348:	f003 0303 	and.w	r3, r3, #3
 800934c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800934e:	4b9f      	ldr	r3, [pc, #636]	; (80095cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009352:	0d1b      	lsrs	r3, r3, #20
 8009354:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009358:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800935a:	4b9c      	ldr	r3, [pc, #624]	; (80095cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800935c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800935e:	0a1b      	lsrs	r3, r3, #8
 8009360:	f003 0301 	and.w	r3, r3, #1
 8009364:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009366:	4b99      	ldr	r3, [pc, #612]	; (80095cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800936a:	08db      	lsrs	r3, r3, #3
 800936c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009370:	693a      	ldr	r2, [r7, #16]
 8009372:	fb02 f303 	mul.w	r3, r2, r3
 8009376:	ee07 3a90 	vmov	s15, r3
 800937a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800937e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	2b00      	cmp	r3, #0
 8009386:	f000 8111 	beq.w	80095ac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800938a:	69bb      	ldr	r3, [r7, #24]
 800938c:	2b02      	cmp	r3, #2
 800938e:	f000 8083 	beq.w	8009498 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	2b02      	cmp	r3, #2
 8009396:	f200 80a1 	bhi.w	80094dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800939a:	69bb      	ldr	r3, [r7, #24]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d003      	beq.n	80093a8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80093a0:	69bb      	ldr	r3, [r7, #24]
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	d056      	beq.n	8009454 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80093a6:	e099      	b.n	80094dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093a8:	4b88      	ldr	r3, [pc, #544]	; (80095cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f003 0320 	and.w	r3, r3, #32
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d02d      	beq.n	8009410 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80093b4:	4b85      	ldr	r3, [pc, #532]	; (80095cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	08db      	lsrs	r3, r3, #3
 80093ba:	f003 0303 	and.w	r3, r3, #3
 80093be:	4a84      	ldr	r2, [pc, #528]	; (80095d0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80093c0:	fa22 f303 	lsr.w	r3, r2, r3
 80093c4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	ee07 3a90 	vmov	s15, r3
 80093cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	ee07 3a90 	vmov	s15, r3
 80093d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093de:	4b7b      	ldr	r3, [pc, #492]	; (80095cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093e6:	ee07 3a90 	vmov	s15, r3
 80093ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80093f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80095d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80093f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800940a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800940e:	e087      	b.n	8009520 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	ee07 3a90 	vmov	s15, r3
 8009416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800941a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80095d8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800941e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009422:	4b6a      	ldr	r3, [pc, #424]	; (80095cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800942a:	ee07 3a90 	vmov	s15, r3
 800942e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009432:	ed97 6a03 	vldr	s12, [r7, #12]
 8009436:	eddf 5a67 	vldr	s11, [pc, #412]	; 80095d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800943a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800943e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009442:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800944a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800944e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009452:	e065      	b.n	8009520 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	ee07 3a90 	vmov	s15, r3
 800945a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800945e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80095dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009466:	4b59      	ldr	r3, [pc, #356]	; (80095cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800946a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800946e:	ee07 3a90 	vmov	s15, r3
 8009472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009476:	ed97 6a03 	vldr	s12, [r7, #12]
 800947a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80095d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800947e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009486:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800948a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800948e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009492:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009496:	e043      	b.n	8009520 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	ee07 3a90 	vmov	s15, r3
 800949e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80095e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80094a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094aa:	4b48      	ldr	r3, [pc, #288]	; (80095cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094b2:	ee07 3a90 	vmov	s15, r3
 80094b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80094be:	eddf 5a45 	vldr	s11, [pc, #276]	; 80095d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80094c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80094da:	e021      	b.n	8009520 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	ee07 3a90 	vmov	s15, r3
 80094e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80095dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80094ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094ee:	4b37      	ldr	r3, [pc, #220]	; (80095cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094f6:	ee07 3a90 	vmov	s15, r3
 80094fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009502:	eddf 5a34 	vldr	s11, [pc, #208]	; 80095d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800950a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800950e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800951a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800951e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009520:	4b2a      	ldr	r3, [pc, #168]	; (80095cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009524:	0a5b      	lsrs	r3, r3, #9
 8009526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800952a:	ee07 3a90 	vmov	s15, r3
 800952e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009532:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009536:	ee37 7a87 	vadd.f32	s14, s15, s14
 800953a:	edd7 6a07 	vldr	s13, [r7, #28]
 800953e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009542:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009546:	ee17 2a90 	vmov	r2, s15
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800954e:	4b1f      	ldr	r3, [pc, #124]	; (80095cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009552:	0c1b      	lsrs	r3, r3, #16
 8009554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009558:	ee07 3a90 	vmov	s15, r3
 800955c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009560:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009564:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009568:	edd7 6a07 	vldr	s13, [r7, #28]
 800956c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009570:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009574:	ee17 2a90 	vmov	r2, s15
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800957c:	4b13      	ldr	r3, [pc, #76]	; (80095cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800957e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009580:	0e1b      	lsrs	r3, r3, #24
 8009582:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009586:	ee07 3a90 	vmov	s15, r3
 800958a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800958e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009592:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009596:	edd7 6a07 	vldr	s13, [r7, #28]
 800959a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800959e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095a2:	ee17 2a90 	vmov	r2, s15
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80095aa:	e008      	b.n	80095be <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2200      	movs	r2, #0
 80095b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2200      	movs	r2, #0
 80095bc:	609a      	str	r2, [r3, #8]
}
 80095be:	bf00      	nop
 80095c0:	3724      	adds	r7, #36	; 0x24
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr
 80095ca:	bf00      	nop
 80095cc:	58024400 	.word	0x58024400
 80095d0:	03d09000 	.word	0x03d09000
 80095d4:	46000000 	.word	0x46000000
 80095d8:	4c742400 	.word	0x4c742400
 80095dc:	4a742400 	.word	0x4a742400
 80095e0:	4af42400 	.word	0x4af42400

080095e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80095ee:	2300      	movs	r3, #0
 80095f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80095f2:	4b53      	ldr	r3, [pc, #332]	; (8009740 <RCCEx_PLL2_Config+0x15c>)
 80095f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095f6:	f003 0303 	and.w	r3, r3, #3
 80095fa:	2b03      	cmp	r3, #3
 80095fc:	d101      	bne.n	8009602 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80095fe:	2301      	movs	r3, #1
 8009600:	e099      	b.n	8009736 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009602:	4b4f      	ldr	r3, [pc, #316]	; (8009740 <RCCEx_PLL2_Config+0x15c>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a4e      	ldr	r2, [pc, #312]	; (8009740 <RCCEx_PLL2_Config+0x15c>)
 8009608:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800960c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800960e:	f7f9 f80d 	bl	800262c <HAL_GetTick>
 8009612:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009614:	e008      	b.n	8009628 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009616:	f7f9 f809 	bl	800262c <HAL_GetTick>
 800961a:	4602      	mov	r2, r0
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	1ad3      	subs	r3, r2, r3
 8009620:	2b02      	cmp	r3, #2
 8009622:	d901      	bls.n	8009628 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009624:	2303      	movs	r3, #3
 8009626:	e086      	b.n	8009736 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009628:	4b45      	ldr	r3, [pc, #276]	; (8009740 <RCCEx_PLL2_Config+0x15c>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009630:	2b00      	cmp	r3, #0
 8009632:	d1f0      	bne.n	8009616 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009634:	4b42      	ldr	r3, [pc, #264]	; (8009740 <RCCEx_PLL2_Config+0x15c>)
 8009636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009638:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	031b      	lsls	r3, r3, #12
 8009642:	493f      	ldr	r1, [pc, #252]	; (8009740 <RCCEx_PLL2_Config+0x15c>)
 8009644:	4313      	orrs	r3, r2
 8009646:	628b      	str	r3, [r1, #40]	; 0x28
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	3b01      	subs	r3, #1
 800964e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	689b      	ldr	r3, [r3, #8]
 8009656:	3b01      	subs	r3, #1
 8009658:	025b      	lsls	r3, r3, #9
 800965a:	b29b      	uxth	r3, r3
 800965c:	431a      	orrs	r2, r3
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	68db      	ldr	r3, [r3, #12]
 8009662:	3b01      	subs	r3, #1
 8009664:	041b      	lsls	r3, r3, #16
 8009666:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800966a:	431a      	orrs	r2, r3
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	691b      	ldr	r3, [r3, #16]
 8009670:	3b01      	subs	r3, #1
 8009672:	061b      	lsls	r3, r3, #24
 8009674:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009678:	4931      	ldr	r1, [pc, #196]	; (8009740 <RCCEx_PLL2_Config+0x15c>)
 800967a:	4313      	orrs	r3, r2
 800967c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800967e:	4b30      	ldr	r3, [pc, #192]	; (8009740 <RCCEx_PLL2_Config+0x15c>)
 8009680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009682:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	695b      	ldr	r3, [r3, #20]
 800968a:	492d      	ldr	r1, [pc, #180]	; (8009740 <RCCEx_PLL2_Config+0x15c>)
 800968c:	4313      	orrs	r3, r2
 800968e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009690:	4b2b      	ldr	r3, [pc, #172]	; (8009740 <RCCEx_PLL2_Config+0x15c>)
 8009692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009694:	f023 0220 	bic.w	r2, r3, #32
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	699b      	ldr	r3, [r3, #24]
 800969c:	4928      	ldr	r1, [pc, #160]	; (8009740 <RCCEx_PLL2_Config+0x15c>)
 800969e:	4313      	orrs	r3, r2
 80096a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80096a2:	4b27      	ldr	r3, [pc, #156]	; (8009740 <RCCEx_PLL2_Config+0x15c>)
 80096a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a6:	4a26      	ldr	r2, [pc, #152]	; (8009740 <RCCEx_PLL2_Config+0x15c>)
 80096a8:	f023 0310 	bic.w	r3, r3, #16
 80096ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80096ae:	4b24      	ldr	r3, [pc, #144]	; (8009740 <RCCEx_PLL2_Config+0x15c>)
 80096b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80096b2:	4b24      	ldr	r3, [pc, #144]	; (8009744 <RCCEx_PLL2_Config+0x160>)
 80096b4:	4013      	ands	r3, r2
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	69d2      	ldr	r2, [r2, #28]
 80096ba:	00d2      	lsls	r2, r2, #3
 80096bc:	4920      	ldr	r1, [pc, #128]	; (8009740 <RCCEx_PLL2_Config+0x15c>)
 80096be:	4313      	orrs	r3, r2
 80096c0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80096c2:	4b1f      	ldr	r3, [pc, #124]	; (8009740 <RCCEx_PLL2_Config+0x15c>)
 80096c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c6:	4a1e      	ldr	r2, [pc, #120]	; (8009740 <RCCEx_PLL2_Config+0x15c>)
 80096c8:	f043 0310 	orr.w	r3, r3, #16
 80096cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d106      	bne.n	80096e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80096d4:	4b1a      	ldr	r3, [pc, #104]	; (8009740 <RCCEx_PLL2_Config+0x15c>)
 80096d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d8:	4a19      	ldr	r2, [pc, #100]	; (8009740 <RCCEx_PLL2_Config+0x15c>)
 80096da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80096de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80096e0:	e00f      	b.n	8009702 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d106      	bne.n	80096f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80096e8:	4b15      	ldr	r3, [pc, #84]	; (8009740 <RCCEx_PLL2_Config+0x15c>)
 80096ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ec:	4a14      	ldr	r2, [pc, #80]	; (8009740 <RCCEx_PLL2_Config+0x15c>)
 80096ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80096f4:	e005      	b.n	8009702 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80096f6:	4b12      	ldr	r3, [pc, #72]	; (8009740 <RCCEx_PLL2_Config+0x15c>)
 80096f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096fa:	4a11      	ldr	r2, [pc, #68]	; (8009740 <RCCEx_PLL2_Config+0x15c>)
 80096fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009700:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009702:	4b0f      	ldr	r3, [pc, #60]	; (8009740 <RCCEx_PLL2_Config+0x15c>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4a0e      	ldr	r2, [pc, #56]	; (8009740 <RCCEx_PLL2_Config+0x15c>)
 8009708:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800970c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800970e:	f7f8 ff8d 	bl	800262c <HAL_GetTick>
 8009712:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009714:	e008      	b.n	8009728 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009716:	f7f8 ff89 	bl	800262c <HAL_GetTick>
 800971a:	4602      	mov	r2, r0
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	1ad3      	subs	r3, r2, r3
 8009720:	2b02      	cmp	r3, #2
 8009722:	d901      	bls.n	8009728 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009724:	2303      	movs	r3, #3
 8009726:	e006      	b.n	8009736 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009728:	4b05      	ldr	r3, [pc, #20]	; (8009740 <RCCEx_PLL2_Config+0x15c>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009730:	2b00      	cmp	r3, #0
 8009732:	d0f0      	beq.n	8009716 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009734:	7bfb      	ldrb	r3, [r7, #15]
}
 8009736:	4618      	mov	r0, r3
 8009738:	3710      	adds	r7, #16
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	58024400 	.word	0x58024400
 8009744:	ffff0007 	.word	0xffff0007

08009748 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b084      	sub	sp, #16
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009752:	2300      	movs	r3, #0
 8009754:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009756:	4b53      	ldr	r3, [pc, #332]	; (80098a4 <RCCEx_PLL3_Config+0x15c>)
 8009758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800975a:	f003 0303 	and.w	r3, r3, #3
 800975e:	2b03      	cmp	r3, #3
 8009760:	d101      	bne.n	8009766 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009762:	2301      	movs	r3, #1
 8009764:	e099      	b.n	800989a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009766:	4b4f      	ldr	r3, [pc, #316]	; (80098a4 <RCCEx_PLL3_Config+0x15c>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4a4e      	ldr	r2, [pc, #312]	; (80098a4 <RCCEx_PLL3_Config+0x15c>)
 800976c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009770:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009772:	f7f8 ff5b 	bl	800262c <HAL_GetTick>
 8009776:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009778:	e008      	b.n	800978c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800977a:	f7f8 ff57 	bl	800262c <HAL_GetTick>
 800977e:	4602      	mov	r2, r0
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	1ad3      	subs	r3, r2, r3
 8009784:	2b02      	cmp	r3, #2
 8009786:	d901      	bls.n	800978c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009788:	2303      	movs	r3, #3
 800978a:	e086      	b.n	800989a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800978c:	4b45      	ldr	r3, [pc, #276]	; (80098a4 <RCCEx_PLL3_Config+0x15c>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009794:	2b00      	cmp	r3, #0
 8009796:	d1f0      	bne.n	800977a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009798:	4b42      	ldr	r3, [pc, #264]	; (80098a4 <RCCEx_PLL3_Config+0x15c>)
 800979a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800979c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	051b      	lsls	r3, r3, #20
 80097a6:	493f      	ldr	r1, [pc, #252]	; (80098a4 <RCCEx_PLL3_Config+0x15c>)
 80097a8:	4313      	orrs	r3, r2
 80097aa:	628b      	str	r3, [r1, #40]	; 0x28
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	3b01      	subs	r3, #1
 80097b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	3b01      	subs	r3, #1
 80097bc:	025b      	lsls	r3, r3, #9
 80097be:	b29b      	uxth	r3, r3
 80097c0:	431a      	orrs	r2, r3
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	3b01      	subs	r3, #1
 80097c8:	041b      	lsls	r3, r3, #16
 80097ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80097ce:	431a      	orrs	r2, r3
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	691b      	ldr	r3, [r3, #16]
 80097d4:	3b01      	subs	r3, #1
 80097d6:	061b      	lsls	r3, r3, #24
 80097d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80097dc:	4931      	ldr	r1, [pc, #196]	; (80098a4 <RCCEx_PLL3_Config+0x15c>)
 80097de:	4313      	orrs	r3, r2
 80097e0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80097e2:	4b30      	ldr	r3, [pc, #192]	; (80098a4 <RCCEx_PLL3_Config+0x15c>)
 80097e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	695b      	ldr	r3, [r3, #20]
 80097ee:	492d      	ldr	r1, [pc, #180]	; (80098a4 <RCCEx_PLL3_Config+0x15c>)
 80097f0:	4313      	orrs	r3, r2
 80097f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80097f4:	4b2b      	ldr	r3, [pc, #172]	; (80098a4 <RCCEx_PLL3_Config+0x15c>)
 80097f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	699b      	ldr	r3, [r3, #24]
 8009800:	4928      	ldr	r1, [pc, #160]	; (80098a4 <RCCEx_PLL3_Config+0x15c>)
 8009802:	4313      	orrs	r3, r2
 8009804:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009806:	4b27      	ldr	r3, [pc, #156]	; (80098a4 <RCCEx_PLL3_Config+0x15c>)
 8009808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800980a:	4a26      	ldr	r2, [pc, #152]	; (80098a4 <RCCEx_PLL3_Config+0x15c>)
 800980c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009810:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009812:	4b24      	ldr	r3, [pc, #144]	; (80098a4 <RCCEx_PLL3_Config+0x15c>)
 8009814:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009816:	4b24      	ldr	r3, [pc, #144]	; (80098a8 <RCCEx_PLL3_Config+0x160>)
 8009818:	4013      	ands	r3, r2
 800981a:	687a      	ldr	r2, [r7, #4]
 800981c:	69d2      	ldr	r2, [r2, #28]
 800981e:	00d2      	lsls	r2, r2, #3
 8009820:	4920      	ldr	r1, [pc, #128]	; (80098a4 <RCCEx_PLL3_Config+0x15c>)
 8009822:	4313      	orrs	r3, r2
 8009824:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009826:	4b1f      	ldr	r3, [pc, #124]	; (80098a4 <RCCEx_PLL3_Config+0x15c>)
 8009828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800982a:	4a1e      	ldr	r2, [pc, #120]	; (80098a4 <RCCEx_PLL3_Config+0x15c>)
 800982c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009830:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d106      	bne.n	8009846 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009838:	4b1a      	ldr	r3, [pc, #104]	; (80098a4 <RCCEx_PLL3_Config+0x15c>)
 800983a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800983c:	4a19      	ldr	r2, [pc, #100]	; (80098a4 <RCCEx_PLL3_Config+0x15c>)
 800983e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009842:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009844:	e00f      	b.n	8009866 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	2b01      	cmp	r3, #1
 800984a:	d106      	bne.n	800985a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800984c:	4b15      	ldr	r3, [pc, #84]	; (80098a4 <RCCEx_PLL3_Config+0x15c>)
 800984e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009850:	4a14      	ldr	r2, [pc, #80]	; (80098a4 <RCCEx_PLL3_Config+0x15c>)
 8009852:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009856:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009858:	e005      	b.n	8009866 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800985a:	4b12      	ldr	r3, [pc, #72]	; (80098a4 <RCCEx_PLL3_Config+0x15c>)
 800985c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800985e:	4a11      	ldr	r2, [pc, #68]	; (80098a4 <RCCEx_PLL3_Config+0x15c>)
 8009860:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009864:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009866:	4b0f      	ldr	r3, [pc, #60]	; (80098a4 <RCCEx_PLL3_Config+0x15c>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a0e      	ldr	r2, [pc, #56]	; (80098a4 <RCCEx_PLL3_Config+0x15c>)
 800986c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009870:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009872:	f7f8 fedb 	bl	800262c <HAL_GetTick>
 8009876:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009878:	e008      	b.n	800988c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800987a:	f7f8 fed7 	bl	800262c <HAL_GetTick>
 800987e:	4602      	mov	r2, r0
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	1ad3      	subs	r3, r2, r3
 8009884:	2b02      	cmp	r3, #2
 8009886:	d901      	bls.n	800988c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009888:	2303      	movs	r3, #3
 800988a:	e006      	b.n	800989a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800988c:	4b05      	ldr	r3, [pc, #20]	; (80098a4 <RCCEx_PLL3_Config+0x15c>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009894:	2b00      	cmp	r3, #0
 8009896:	d0f0      	beq.n	800987a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009898:	7bfb      	ldrb	r3, [r7, #15]
}
 800989a:	4618      	mov	r0, r3
 800989c:	3710      	adds	r7, #16
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	58024400 	.word	0x58024400
 80098a8:	ffff0007 	.word	0xffff0007

080098ac <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b084      	sub	sp, #16
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 80098b4:	2300      	movs	r3, #0
 80098b6:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d101      	bne.n	80098c2 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 80098be:	2301      	movs	r3, #1
 80098c0:	e0eb      	b.n	8009a9a <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2200      	movs	r2, #0
 80098c6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a75      	ldr	r2, [pc, #468]	; (8009aa4 <HAL_SPI_Init+0x1f8>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d00f      	beq.n	80098f2 <HAL_SPI_Init+0x46>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a74      	ldr	r2, [pc, #464]	; (8009aa8 <HAL_SPI_Init+0x1fc>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d00a      	beq.n	80098f2 <HAL_SPI_Init+0x46>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a72      	ldr	r2, [pc, #456]	; (8009aac <HAL_SPI_Init+0x200>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d005      	beq.n	80098f2 <HAL_SPI_Init+0x46>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	68db      	ldr	r3, [r3, #12]
 80098ea:	2b0f      	cmp	r3, #15
 80098ec:	d901      	bls.n	80098f2 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 80098ee:	2301      	movs	r3, #1
 80098f0:	e0d3      	b.n	8009a9a <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f001 f8aa 	bl	800aa4c <SPI_GetPacketSize>
 80098f8:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4a69      	ldr	r2, [pc, #420]	; (8009aa4 <HAL_SPI_Init+0x1f8>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d00c      	beq.n	800991e <HAL_SPI_Init+0x72>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4a67      	ldr	r2, [pc, #412]	; (8009aa8 <HAL_SPI_Init+0x1fc>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d007      	beq.n	800991e <HAL_SPI_Init+0x72>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4a66      	ldr	r2, [pc, #408]	; (8009aac <HAL_SPI_Init+0x200>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d002      	beq.n	800991e <HAL_SPI_Init+0x72>
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	2b08      	cmp	r3, #8
 800991c:	d811      	bhi.n	8009942 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009922:	4a60      	ldr	r2, [pc, #384]	; (8009aa4 <HAL_SPI_Init+0x1f8>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d009      	beq.n	800993c <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4a5e      	ldr	r2, [pc, #376]	; (8009aa8 <HAL_SPI_Init+0x1fc>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d004      	beq.n	800993c <HAL_SPI_Init+0x90>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	4a5d      	ldr	r2, [pc, #372]	; (8009aac <HAL_SPI_Init+0x200>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d104      	bne.n	8009946 <HAL_SPI_Init+0x9a>
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	2b10      	cmp	r3, #16
 8009940:	d901      	bls.n	8009946 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8009942:	2301      	movs	r3, #1
 8009944:	e0a9      	b.n	8009a9a <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800994c:	b2db      	uxtb	r3, r3
 800994e:	2b00      	cmp	r3, #0
 8009950:	d106      	bne.n	8009960 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2200      	movs	r2, #0
 8009956:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f7f7 fffa 	bl	8001954 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2202      	movs	r2, #2
 8009964:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f022 0201 	bic.w	r2, r2, #1
 8009976:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	699b      	ldr	r3, [r3, #24]
 800997c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009980:	d119      	bne.n	80099b6 <HAL_SPI_Init+0x10a>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800998a:	d103      	bne.n	8009994 <HAL_SPI_Init+0xe8>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009990:	2b00      	cmp	r3, #0
 8009992:	d008      	beq.n	80099a6 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009998:	2b00      	cmp	r3, #0
 800999a:	d10c      	bne.n	80099b6 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80099a4:	d107      	bne.n	80099b6 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80099b4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	69da      	ldr	r2, [r3, #28]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099be:	431a      	orrs	r2, r3
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	431a      	orrs	r2, r3
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099c8:	ea42 0103 	orr.w	r1, r2, r3
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	68da      	ldr	r2, [r3, #12]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	430a      	orrs	r2, r1
 80099d6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e0:	431a      	orrs	r2, r3
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099e6:	431a      	orrs	r2, r3
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	699b      	ldr	r3, [r3, #24]
 80099ec:	431a      	orrs	r2, r3
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	691b      	ldr	r3, [r3, #16]
 80099f2:	431a      	orrs	r2, r3
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	695b      	ldr	r3, [r3, #20]
 80099f8:	431a      	orrs	r2, r3
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6a1b      	ldr	r3, [r3, #32]
 80099fe:	431a      	orrs	r2, r3
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	431a      	orrs	r2, r3
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a0a:	431a      	orrs	r2, r3
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	431a      	orrs	r2, r3
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a16:	ea42 0103 	orr.w	r1, r2, r3
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	430a      	orrs	r2, r1
 8009a24:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d113      	bne.n	8009a56 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a40:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009a54:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f022 0201 	bic.w	r2, r2, #1
 8009a64:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d00a      	beq.n	8009a88 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	430a      	orrs	r2, r1
 8009a86:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2201      	movs	r2, #1
 8009a94:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009a98:	2300      	movs	r3, #0
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3710      	adds	r7, #16
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	40013000 	.word	0x40013000
 8009aa8:	40003800 	.word	0x40003800
 8009aac:	40003c00 	.word	0x40003c00

08009ab0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b08a      	sub	sp, #40	; 0x28
 8009ab4:	af02      	add	r7, sp, #8
 8009ab6:	60f8      	str	r0, [r7, #12]
 8009ab8:	60b9      	str	r1, [r7, #8]
 8009aba:	603b      	str	r3, [r7, #0]
 8009abc:	4613      	mov	r3, r2
 8009abe:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	3320      	adds	r3, #32
 8009ac6:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d101      	bne.n	8009ada <HAL_SPI_Transmit+0x2a>
 8009ad6:	2302      	movs	r3, #2
 8009ad8:	e1d7      	b.n	8009e8a <HAL_SPI_Transmit+0x3da>
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2201      	movs	r2, #1
 8009ade:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009ae2:	f7f8 fda3 	bl	800262c <HAL_GetTick>
 8009ae6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	d007      	beq.n	8009b04 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8009af4:	2302      	movs	r3, #2
 8009af6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	2200      	movs	r2, #0
 8009afc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009b00:	7efb      	ldrb	r3, [r7, #27]
 8009b02:	e1c2      	b.n	8009e8a <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d002      	beq.n	8009b10 <HAL_SPI_Transmit+0x60>
 8009b0a:	88fb      	ldrh	r3, [r7, #6]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d107      	bne.n	8009b20 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8009b10:	2301      	movs	r3, #1
 8009b12:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2200      	movs	r2, #0
 8009b18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009b1c:	7efb      	ldrb	r3, [r7, #27]
 8009b1e:	e1b4      	b.n	8009e8a <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2203      	movs	r2, #3
 8009b24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	68ba      	ldr	r2, [r7, #8]
 8009b34:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	88fa      	ldrh	r2, [r7, #6]
 8009b3a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	88fa      	ldrh	r2, [r7, #6]
 8009b42:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2200      	movs	r2, #0
 8009b58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2200      	movs	r2, #0
 8009b66:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	689b      	ldr	r3, [r3, #8]
 8009b6c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8009b70:	d107      	bne.n	8009b82 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	681a      	ldr	r2, [r3, #0]
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b80:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	685a      	ldr	r2, [r3, #4]
 8009b88:	4b96      	ldr	r3, [pc, #600]	; (8009de4 <HAL_SPI_Transmit+0x334>)
 8009b8a:	4013      	ands	r3, r2
 8009b8c:	88f9      	ldrh	r1, [r7, #6]
 8009b8e:	68fa      	ldr	r2, [r7, #12]
 8009b90:	6812      	ldr	r2, [r2, #0]
 8009b92:	430b      	orrs	r3, r1
 8009b94:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f042 0201 	orr.w	r2, r2, #1
 8009ba4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	685b      	ldr	r3, [r3, #4]
 8009baa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009bae:	d107      	bne.n	8009bc0 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	681a      	ldr	r2, [r3, #0]
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009bbe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	68db      	ldr	r3, [r3, #12]
 8009bc4:	2b0f      	cmp	r3, #15
 8009bc6:	d947      	bls.n	8009c58 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009bc8:	e03f      	b.n	8009c4a <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	695b      	ldr	r3, [r3, #20]
 8009bd0:	f003 0302 	and.w	r3, r3, #2
 8009bd4:	2b02      	cmp	r3, #2
 8009bd6:	d114      	bne.n	8009c02 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	6812      	ldr	r2, [r2, #0]
 8009be2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009be8:	1d1a      	adds	r2, r3, #4
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009bf4:	b29b      	uxth	r3, r3
 8009bf6:	3b01      	subs	r3, #1
 8009bf8:	b29a      	uxth	r2, r3
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009c00:	e023      	b.n	8009c4a <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c02:	f7f8 fd13 	bl	800262c <HAL_GetTick>
 8009c06:	4602      	mov	r2, r0
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	1ad3      	subs	r3, r2, r3
 8009c0c:	683a      	ldr	r2, [r7, #0]
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d803      	bhi.n	8009c1a <HAL_SPI_Transmit+0x16a>
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c18:	d102      	bne.n	8009c20 <HAL_SPI_Transmit+0x170>
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d114      	bne.n	8009c4a <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009c20:	68f8      	ldr	r0, [r7, #12]
 8009c22:	f000 fe45 	bl	800a8b0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c34:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2201      	movs	r2, #1
 8009c42:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8009c46:	2301      	movs	r3, #1
 8009c48:	e11f      	b.n	8009e8a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d1b9      	bne.n	8009bca <HAL_SPI_Transmit+0x11a>
 8009c56:	e0f2      	b.n	8009e3e <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	2b07      	cmp	r3, #7
 8009c5e:	f240 80e7 	bls.w	8009e30 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009c62:	e05d      	b.n	8009d20 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	695b      	ldr	r3, [r3, #20]
 8009c6a:	f003 0302 	and.w	r3, r3, #2
 8009c6e:	2b02      	cmp	r3, #2
 8009c70:	d132      	bne.n	8009cd8 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d918      	bls.n	8009cb0 <HAL_SPI_Transmit+0x200>
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d014      	beq.n	8009cb0 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	6812      	ldr	r2, [r2, #0]
 8009c90:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c96:	1d1a      	adds	r2, r3, #4
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	3b02      	subs	r3, #2
 8009ca6:	b29a      	uxth	r2, r3
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009cae:	e037      	b.n	8009d20 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cb4:	881a      	ldrh	r2, [r3, #0]
 8009cb6:	69fb      	ldr	r3, [r7, #28]
 8009cb8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cbe:	1c9a      	adds	r2, r3, #2
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009cca:	b29b      	uxth	r3, r3
 8009ccc:	3b01      	subs	r3, #1
 8009cce:	b29a      	uxth	r2, r3
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009cd6:	e023      	b.n	8009d20 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009cd8:	f7f8 fca8 	bl	800262c <HAL_GetTick>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	1ad3      	subs	r3, r2, r3
 8009ce2:	683a      	ldr	r2, [r7, #0]
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d803      	bhi.n	8009cf0 <HAL_SPI_Transmit+0x240>
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cee:	d102      	bne.n	8009cf6 <HAL_SPI_Transmit+0x246>
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d114      	bne.n	8009d20 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009cf6:	68f8      	ldr	r0, [r7, #12]
 8009cf8:	f000 fdda 	bl	800a8b0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2201      	movs	r2, #1
 8009d18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	e0b4      	b.n	8009e8a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d19b      	bne.n	8009c64 <HAL_SPI_Transmit+0x1b4>
 8009d2c:	e087      	b.n	8009e3e <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	695b      	ldr	r3, [r3, #20]
 8009d34:	f003 0302 	and.w	r3, r3, #2
 8009d38:	2b02      	cmp	r3, #2
 8009d3a:	d155      	bne.n	8009de8 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009d42:	b29b      	uxth	r3, r3
 8009d44:	2b03      	cmp	r3, #3
 8009d46:	d918      	bls.n	8009d7a <HAL_SPI_Transmit+0x2ca>
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d4c:	2b40      	cmp	r3, #64	; 0x40
 8009d4e:	d914      	bls.n	8009d7a <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	6812      	ldr	r2, [r2, #0]
 8009d5a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d60:	1d1a      	adds	r2, r3, #4
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	3b04      	subs	r3, #4
 8009d70:	b29a      	uxth	r2, r3
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009d78:	e05a      	b.n	8009e30 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d917      	bls.n	8009db6 <HAL_SPI_Transmit+0x306>
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d013      	beq.n	8009db6 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d92:	881a      	ldrh	r2, [r3, #0]
 8009d94:	69fb      	ldr	r3, [r7, #28]
 8009d96:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d9c:	1c9a      	adds	r2, r3, #2
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009da8:	b29b      	uxth	r3, r3
 8009daa:	3b02      	subs	r3, #2
 8009dac:	b29a      	uxth	r2, r3
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009db4:	e03c      	b.n	8009e30 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	3320      	adds	r3, #32
 8009dc0:	7812      	ldrb	r2, [r2, #0]
 8009dc2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dc8:	1c5a      	adds	r2, r3, #1
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	3b01      	subs	r3, #1
 8009dd8:	b29a      	uxth	r2, r3
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009de0:	e026      	b.n	8009e30 <HAL_SPI_Transmit+0x380>
 8009de2:	bf00      	nop
 8009de4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009de8:	f7f8 fc20 	bl	800262c <HAL_GetTick>
 8009dec:	4602      	mov	r2, r0
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	1ad3      	subs	r3, r2, r3
 8009df2:	683a      	ldr	r2, [r7, #0]
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d803      	bhi.n	8009e00 <HAL_SPI_Transmit+0x350>
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dfe:	d102      	bne.n	8009e06 <HAL_SPI_Transmit+0x356>
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d114      	bne.n	8009e30 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009e06:	68f8      	ldr	r0, [r7, #12]
 8009e08:	f000 fd52 	bl	800a8b0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e1a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2201      	movs	r2, #1
 8009e28:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	e02c      	b.n	8009e8a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009e36:	b29b      	uxth	r3, r3
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	f47f af78 	bne.w	8009d2e <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	9300      	str	r3, [sp, #0]
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	2200      	movs	r2, #0
 8009e46:	2108      	movs	r1, #8
 8009e48:	68f8      	ldr	r0, [r7, #12]
 8009e4a:	f000 fdd1 	bl	800a9f0 <SPI_WaitOnFlagUntilTimeout>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d007      	beq.n	8009e64 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e5a:	f043 0220 	orr.w	r2, r3, #32
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009e64:	68f8      	ldr	r0, [r7, #12]
 8009e66:	f000 fd23 	bl	800a8b0 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2201      	movs	r2, #1
 8009e76:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d001      	beq.n	8009e88 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8009e84:	2301      	movs	r3, #1
 8009e86:	e000      	b.n	8009e8a <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8009e88:	7efb      	ldrb	r3, [r7, #27]
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3720      	adds	r7, #32
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop

08009e94 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b08e      	sub	sp, #56	; 0x38
 8009e98:	af02      	add	r7, sp, #8
 8009e9a:	60f8      	str	r0, [r7, #12]
 8009e9c:	60b9      	str	r1, [r7, #8]
 8009e9e:	607a      	str	r2, [r7, #4]
 8009ea0:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	3320      	adds	r3, #32
 8009eae:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	3330      	adds	r3, #48	; 0x30
 8009eb6:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d101      	bne.n	8009ec6 <HAL_SPI_TransmitReceive+0x32>
 8009ec2:	2302      	movs	r3, #2
 8009ec4:	e2ce      	b.n	800a464 <HAL_SPI_TransmitReceive+0x5d0>
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2201      	movs	r2, #1
 8009eca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009ece:	f7f8 fbad 	bl	800262c <HAL_GetTick>
 8009ed2:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8009ed4:	887b      	ldrh	r3, [r7, #2]
 8009ed6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8009ed8:	887b      	ldrh	r3, [r7, #2]
 8009eda:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009ee2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009eea:	7efb      	ldrb	r3, [r7, #27]
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d014      	beq.n	8009f1a <HAL_SPI_TransmitReceive+0x86>
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ef6:	d106      	bne.n	8009f06 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	689b      	ldr	r3, [r3, #8]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d102      	bne.n	8009f06 <HAL_SPI_TransmitReceive+0x72>
 8009f00:	7efb      	ldrb	r3, [r7, #27]
 8009f02:	2b04      	cmp	r3, #4
 8009f04:	d009      	beq.n	8009f1a <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8009f06:	2302      	movs	r3, #2
 8009f08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009f14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009f18:	e2a4      	b.n	800a464 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d005      	beq.n	8009f2c <HAL_SPI_TransmitReceive+0x98>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d002      	beq.n	8009f2c <HAL_SPI_TransmitReceive+0x98>
 8009f26:	887b      	ldrh	r3, [r7, #2]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d109      	bne.n	8009f40 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2200      	movs	r2, #0
 8009f36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009f3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009f3e:	e291      	b.n	800a464 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	2b04      	cmp	r3, #4
 8009f4a:	d003      	beq.n	8009f54 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2205      	movs	r2, #5
 8009f50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2200      	movs	r2, #0
 8009f58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	887a      	ldrh	r2, [r7, #2]
 8009f66:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	887a      	ldrh	r2, [r7, #2]
 8009f6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	68ba      	ldr	r2, [r7, #8]
 8009f76:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	887a      	ldrh	r2, [r7, #2]
 8009f7c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	887a      	ldrh	r2, [r7, #2]
 8009f84:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2200      	movs	r2, #0
 8009f92:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	685a      	ldr	r2, [r3, #4]
 8009f9a:	4b9f      	ldr	r3, [pc, #636]	; (800a218 <HAL_SPI_TransmitReceive+0x384>)
 8009f9c:	4013      	ands	r3, r2
 8009f9e:	8879      	ldrh	r1, [r7, #2]
 8009fa0:	68fa      	ldr	r2, [r7, #12]
 8009fa2:	6812      	ldr	r2, [r2, #0]
 8009fa4:	430b      	orrs	r3, r1
 8009fa6:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	681a      	ldr	r2, [r3, #0]
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f042 0201 	orr.w	r2, r2, #1
 8009fb6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009fc0:	d107      	bne.n	8009fd2 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	681a      	ldr	r2, [r3, #0]
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009fd0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	68db      	ldr	r3, [r3, #12]
 8009fd6:	2b0f      	cmp	r3, #15
 8009fd8:	d970      	bls.n	800a0bc <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009fda:	e068      	b.n	800a0ae <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	695b      	ldr	r3, [r3, #20]
 8009fe2:	f003 0302 	and.w	r3, r3, #2
 8009fe6:	2b02      	cmp	r3, #2
 8009fe8:	d11a      	bne.n	800a020 <HAL_SPI_TransmitReceive+0x18c>
 8009fea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d017      	beq.n	800a020 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	6812      	ldr	r2, [r2, #0]
 8009ffa:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a000:	1d1a      	adds	r2, r3, #4
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	3b01      	subs	r3, #1
 800a010:	b29a      	uxth	r2, r3
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a01e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	695a      	ldr	r2, [r3, #20]
 800a026:	f248 0308 	movw	r3, #32776	; 0x8008
 800a02a:	4013      	ands	r3, r2
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d01a      	beq.n	800a066 <HAL_SPI_TransmitReceive+0x1d2>
 800a030:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a032:	2b00      	cmp	r3, #0
 800a034:	d017      	beq.n	800a066 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681a      	ldr	r2, [r3, #0]
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a03e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a040:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a046:	1d1a      	adds	r2, r3, #4
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a052:	b29b      	uxth	r3, r3
 800a054:	3b01      	subs	r3, #1
 800a056:	b29a      	uxth	r2, r3
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a064:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a066:	f7f8 fae1 	bl	800262c <HAL_GetTick>
 800a06a:	4602      	mov	r2, r0
 800a06c:	69fb      	ldr	r3, [r7, #28]
 800a06e:	1ad3      	subs	r3, r2, r3
 800a070:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a072:	429a      	cmp	r2, r3
 800a074:	d803      	bhi.n	800a07e <HAL_SPI_TransmitReceive+0x1ea>
 800a076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a07c:	d102      	bne.n	800a084 <HAL_SPI_TransmitReceive+0x1f0>
 800a07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a080:	2b00      	cmp	r3, #0
 800a082:	d114      	bne.n	800a0ae <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800a084:	68f8      	ldr	r0, [r7, #12]
 800a086:	f000 fc13 	bl	800a8b0 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2200      	movs	r2, #0
 800a08e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a098:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	e1da      	b.n	800a464 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a0ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d193      	bne.n	8009fdc <HAL_SPI_TransmitReceive+0x148>
 800a0b4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d190      	bne.n	8009fdc <HAL_SPI_TransmitReceive+0x148>
 800a0ba:	e1ac      	b.n	800a416 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	2b07      	cmp	r3, #7
 800a0c2:	f240 81a0 	bls.w	800a406 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a0c6:	e0a9      	b.n	800a21c <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	695b      	ldr	r3, [r3, #20]
 800a0ce:	f003 0302 	and.w	r3, r3, #2
 800a0d2:	2b02      	cmp	r3, #2
 800a0d4:	d139      	bne.n	800a14a <HAL_SPI_TransmitReceive+0x2b6>
 800a0d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d036      	beq.n	800a14a <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a0dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d91c      	bls.n	800a11c <HAL_SPI_TransmitReceive+0x288>
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d018      	beq.n	800a11c <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	6812      	ldr	r2, [r2, #0]
 800a0f4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0fa:	1d1a      	adds	r2, r3, #4
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a106:	b29b      	uxth	r3, r3
 800a108:	3b02      	subs	r3, #2
 800a10a:	b29a      	uxth	r2, r3
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a118:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a11a:	e016      	b.n	800a14a <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a120:	881a      	ldrh	r2, [r3, #0]
 800a122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a124:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a12a:	1c9a      	adds	r2, r3, #2
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a136:	b29b      	uxth	r3, r3
 800a138:	3b01      	subs	r3, #1
 800a13a:	b29a      	uxth	r2, r3
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a148:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	695b      	ldr	r3, [r3, #20]
 800a150:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a154:	2b00      	cmp	r3, #0
 800a156:	d03a      	beq.n	800a1ce <HAL_SPI_TransmitReceive+0x33a>
 800a158:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d037      	beq.n	800a1ce <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	695b      	ldr	r3, [r3, #20]
 800a164:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d018      	beq.n	800a19e <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681a      	ldr	r2, [r3, #0]
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a174:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a176:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a17c:	1d1a      	adds	r2, r3, #4
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a188:	b29b      	uxth	r3, r3
 800a18a:	3b02      	subs	r3, #2
 800a18c:	b29a      	uxth	r2, r3
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a19a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a19c:	e017      	b.n	800a1ce <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1a2:	6a3a      	ldr	r2, [r7, #32]
 800a1a4:	8812      	ldrh	r2, [r2, #0]
 800a1a6:	b292      	uxth	r2, r2
 800a1a8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1ae:	1c9a      	adds	r2, r3, #2
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	3b01      	subs	r3, #1
 800a1be:	b29a      	uxth	r2, r3
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a1cc:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a1ce:	f7f8 fa2d 	bl	800262c <HAL_GetTick>
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	69fb      	ldr	r3, [r7, #28]
 800a1d6:	1ad3      	subs	r3, r2, r3
 800a1d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d803      	bhi.n	800a1e6 <HAL_SPI_TransmitReceive+0x352>
 800a1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1e4:	d102      	bne.n	800a1ec <HAL_SPI_TransmitReceive+0x358>
 800a1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d117      	bne.n	800a21c <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800a1ec:	68f8      	ldr	r0, [r7, #12]
 800a1ee:	f000 fb5f 	bl	800a8b0 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a200:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2201      	movs	r2, #1
 800a20e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800a212:	2301      	movs	r3, #1
 800a214:	e126      	b.n	800a464 <HAL_SPI_TransmitReceive+0x5d0>
 800a216:	bf00      	nop
 800a218:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a21c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a21e:	2b00      	cmp	r3, #0
 800a220:	f47f af52 	bne.w	800a0c8 <HAL_SPI_TransmitReceive+0x234>
 800a224:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a226:	2b00      	cmp	r3, #0
 800a228:	f47f af4e 	bne.w	800a0c8 <HAL_SPI_TransmitReceive+0x234>
 800a22c:	e0f3      	b.n	800a416 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	695b      	ldr	r3, [r3, #20]
 800a234:	f003 0302 	and.w	r3, r3, #2
 800a238:	2b02      	cmp	r3, #2
 800a23a:	d15a      	bne.n	800a2f2 <HAL_SPI_TransmitReceive+0x45e>
 800a23c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d057      	beq.n	800a2f2 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a242:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a244:	2b03      	cmp	r3, #3
 800a246:	d91c      	bls.n	800a282 <HAL_SPI_TransmitReceive+0x3ee>
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a24c:	2b40      	cmp	r3, #64	; 0x40
 800a24e:	d918      	bls.n	800a282 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	6812      	ldr	r2, [r2, #0]
 800a25a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a260:	1d1a      	adds	r2, r3, #4
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	3b04      	subs	r3, #4
 800a270:	b29a      	uxth	r2, r3
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a27e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a280:	e037      	b.n	800a2f2 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a282:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a284:	2b01      	cmp	r3, #1
 800a286:	d91b      	bls.n	800a2c0 <HAL_SPI_TransmitReceive+0x42c>
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d017      	beq.n	800a2c0 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a294:	881a      	ldrh	r2, [r3, #0]
 800a296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a298:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a29e:	1c9a      	adds	r2, r3, #2
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a2aa:	b29b      	uxth	r3, r3
 800a2ac:	3b02      	subs	r3, #2
 800a2ae:	b29a      	uxth	r2, r3
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a2bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a2be:	e018      	b.n	800a2f2 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	3320      	adds	r3, #32
 800a2ca:	7812      	ldrb	r2, [r2, #0]
 800a2cc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2d2:	1c5a      	adds	r2, r3, #1
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	3b01      	subs	r3, #1
 800a2e2:	b29a      	uxth	r2, r3
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a2f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	695b      	ldr	r3, [r3, #20]
 800a2f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d05e      	beq.n	800a3be <HAL_SPI_TransmitReceive+0x52a>
 800a300:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a302:	2b00      	cmp	r3, #0
 800a304:	d05b      	beq.n	800a3be <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	695b      	ldr	r3, [r3, #20]
 800a30c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a310:	2b00      	cmp	r3, #0
 800a312:	d018      	beq.n	800a346 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681a      	ldr	r2, [r3, #0]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a31c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a31e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a324:	1d1a      	adds	r2, r3, #4
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a330:	b29b      	uxth	r3, r3
 800a332:	3b04      	subs	r3, #4
 800a334:	b29a      	uxth	r2, r3
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a342:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a344:	e03b      	b.n	800a3be <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	695b      	ldr	r3, [r3, #20]
 800a34c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800a350:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a354:	d918      	bls.n	800a388 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a35a:	6a3a      	ldr	r2, [r7, #32]
 800a35c:	8812      	ldrh	r2, [r2, #0]
 800a35e:	b292      	uxth	r2, r2
 800a360:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a366:	1c9a      	adds	r2, r3, #2
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a372:	b29b      	uxth	r3, r3
 800a374:	3b02      	subs	r3, #2
 800a376:	b29a      	uxth	r2, r3
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a384:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a386:	e01a      	b.n	800a3be <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a394:	7812      	ldrb	r2, [r2, #0]
 800a396:	b2d2      	uxtb	r2, r2
 800a398:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a39e:	1c5a      	adds	r2, r3, #1
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	3b01      	subs	r3, #1
 800a3ae:	b29a      	uxth	r2, r3
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a3bc:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a3be:	f7f8 f935 	bl	800262c <HAL_GetTick>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	69fb      	ldr	r3, [r7, #28]
 800a3c6:	1ad3      	subs	r3, r2, r3
 800a3c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	d803      	bhi.n	800a3d6 <HAL_SPI_TransmitReceive+0x542>
 800a3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3d4:	d102      	bne.n	800a3dc <HAL_SPI_TransmitReceive+0x548>
 800a3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d114      	bne.n	800a406 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800a3dc:	68f8      	ldr	r0, [r7, #12]
 800a3de:	f000 fa67 	bl	800a8b0 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800a402:	2301      	movs	r3, #1
 800a404:	e02e      	b.n	800a464 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a406:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f47f af10 	bne.w	800a22e <HAL_SPI_TransmitReceive+0x39a>
 800a40e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a410:	2b00      	cmp	r3, #0
 800a412:	f47f af0c 	bne.w	800a22e <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800a416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a418:	9300      	str	r3, [sp, #0]
 800a41a:	69fb      	ldr	r3, [r7, #28]
 800a41c:	2200      	movs	r2, #0
 800a41e:	2108      	movs	r1, #8
 800a420:	68f8      	ldr	r0, [r7, #12]
 800a422:	f000 fae5 	bl	800a9f0 <SPI_WaitOnFlagUntilTimeout>
 800a426:	4603      	mov	r3, r0
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d007      	beq.n	800a43c <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a432:	f043 0220 	orr.w	r2, r3, #32
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a43c:	68f8      	ldr	r0, [r7, #12]
 800a43e:	f000 fa37 	bl	800a8b0 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2200      	movs	r2, #0
 800a446:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2201      	movs	r2, #1
 800a44e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d001      	beq.n	800a460 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800a45c:	2301      	movs	r3, #1
 800a45e:	e001      	b.n	800a464 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800a460:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a464:	4618      	mov	r0, r3
 800a466:	3730      	adds	r7, #48	; 0x30
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b08a      	sub	sp, #40	; 0x28
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	691b      	ldr	r3, [r3, #16]
 800a47a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	695b      	ldr	r3, [r3, #20]
 800a482:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800a484:	6a3a      	ldr	r2, [r7, #32]
 800a486:	69fb      	ldr	r3, [r7, #28]
 800a488:	4013      	ands	r3, r2
 800a48a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	689b      	ldr	r3, [r3, #8]
 800a492:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800a494:	2300      	movs	r3, #0
 800a496:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a49e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	3330      	adds	r3, #48	; 0x30
 800a4a6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d113      	bne.n	800a4da <HAL_SPI_IRQHandler+0x6e>
 800a4b2:	69bb      	ldr	r3, [r7, #24]
 800a4b4:	f003 0320 	and.w	r3, r3, #32
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d10e      	bne.n	800a4da <HAL_SPI_IRQHandler+0x6e>
 800a4bc:	69bb      	ldr	r3, [r7, #24]
 800a4be:	f003 0304 	and.w	r3, r3, #4
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d009      	beq.n	800a4da <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	4798      	blx	r3
    hspi->RxISR(hspi);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	4798      	blx	r3
    handled = 1UL;
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a4da:	69bb      	ldr	r3, [r7, #24]
 800a4dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d10f      	bne.n	800a504 <HAL_SPI_IRQHandler+0x98>
 800a4e4:	69bb      	ldr	r3, [r7, #24]
 800a4e6:	f003 0301 	and.w	r3, r3, #1
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d00a      	beq.n	800a504 <HAL_SPI_IRQHandler+0x98>
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	f003 0304 	and.w	r3, r3, #4
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d105      	bne.n	800a504 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	4798      	blx	r3
    handled = 1UL;
 800a500:	2301      	movs	r3, #1
 800a502:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a504:	69bb      	ldr	r3, [r7, #24]
 800a506:	f003 0320 	and.w	r3, r3, #32
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d10f      	bne.n	800a52e <HAL_SPI_IRQHandler+0xc2>
 800a50e:	69bb      	ldr	r3, [r7, #24]
 800a510:	f003 0302 	and.w	r3, r3, #2
 800a514:	2b00      	cmp	r3, #0
 800a516:	d00a      	beq.n	800a52e <HAL_SPI_IRQHandler+0xc2>
 800a518:	69bb      	ldr	r3, [r7, #24]
 800a51a:	f003 0304 	and.w	r3, r3, #4
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d105      	bne.n	800a52e <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	4798      	blx	r3
    handled = 1UL;
 800a52a:	2301      	movs	r3, #1
 800a52c:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_HSPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800a52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a530:	2b00      	cmp	r3, #0
 800a532:	f040 816f 	bne.w	800a814 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800a536:	69bb      	ldr	r3, [r7, #24]
 800a538:	f003 0308 	and.w	r3, r3, #8
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	f000 80a0 	beq.w	800a682 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	699a      	ldr	r2, [r3, #24]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f042 0208 	orr.w	r2, r2, #8
 800a550:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	699a      	ldr	r2, [r3, #24]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f042 0210 	orr.w	r2, r2, #16
 800a560:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	699a      	ldr	r2, [r3, #24]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a570:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	691a      	ldr	r2, [r3, #16]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f022 0208 	bic.w	r2, r2, #8
 800a580:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d00f      	beq.n	800a5ac <HAL_SPI_IRQHandler+0x140>
 800a58c:	7cfb      	ldrb	r3, [r7, #19]
 800a58e:	2b04      	cmp	r3, #4
 800a590:	d004      	beq.n	800a59c <HAL_SPI_IRQHandler+0x130>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a596:	69db      	ldr	r3, [r3, #28]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d007      	beq.n	800a5ac <HAL_SPI_IRQHandler+0x140>
 800a59c:	7cfb      	ldrb	r3, [r7, #19]
 800a59e:	2b03      	cmp	r3, #3
 800a5a0:	d059      	beq.n	800a656 <HAL_SPI_IRQHandler+0x1ea>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5a6:	69db      	ldr	r3, [r3, #28]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d154      	bne.n	800a656 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	689b      	ldr	r3, [r3, #8]
 800a5b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d13d      	bne.n	800a636 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800a5ba:	e036      	b.n	800a62a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	2b0f      	cmp	r3, #15
 800a5c2:	d90b      	bls.n	800a5dc <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a5ce:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5d4:	1d1a      	adds	r2, r3, #4
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	665a      	str	r2, [r3, #100]	; 0x64
 800a5da:	e01d      	b.n	800a618 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	68db      	ldr	r3, [r3, #12]
 800a5e0:	2b07      	cmp	r3, #7
 800a5e2:	d90b      	bls.n	800a5fc <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	8812      	ldrh	r2, [r2, #0]
 800a5ec:	b292      	uxth	r2, r2
 800a5ee:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5f4:	1c9a      	adds	r2, r3, #2
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	665a      	str	r2, [r3, #100]	; 0x64
 800a5fa:	e00d      	b.n	800a618 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a608:	7812      	ldrb	r2, [r2, #0]
 800a60a:	b2d2      	uxtb	r2, r2
 800a60c:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a612:	1c5a      	adds	r2, r3, #1
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a61e:	b29b      	uxth	r3, r3
 800a620:	3b01      	subs	r3, #1
 800a622:	b29a      	uxth	r2, r3
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a630:	b29b      	uxth	r3, r3
 800a632:	2b00      	cmp	r3, #0
 800a634:	d1c2      	bne.n	800a5bc <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f000 f93a 	bl	800a8b0 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2201      	movs	r2, #1
 800a640:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d003      	beq.n	800a656 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f000 f90a 	bl	800a868 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800a654:	e0e3      	b.n	800a81e <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800a656:	7cfb      	ldrb	r3, [r7, #19]
 800a658:	2b05      	cmp	r3, #5
 800a65a:	d103      	bne.n	800a664 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f000 f8f9 	bl	800a854 <HAL_SPI_TxRxCpltCallback>
	else
    {
      /* End of the appropriate call */
    }

    return;
 800a662:	e0d9      	b.n	800a818 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800a664:	7cfb      	ldrb	r3, [r7, #19]
 800a666:	2b04      	cmp	r3, #4
 800a668:	d103      	bne.n	800a672 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f000 f8e8 	bl	800a840 <HAL_SPI_RxCpltCallback>
    return;
 800a670:	e0d2      	b.n	800a818 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800a672:	7cfb      	ldrb	r3, [r7, #19]
 800a674:	2b03      	cmp	r3, #3
 800a676:	f040 80cf 	bne.w	800a818 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f000 f8d6 	bl	800a82c <HAL_SPI_TxCpltCallback>
    return;
 800a680:	e0ca      	b.n	800a818 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800a682:	69fb      	ldr	r3, [r7, #28]
 800a684:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d00d      	beq.n	800a6a8 <HAL_SPI_IRQHandler+0x23c>
 800a68c:	6a3b      	ldr	r3, [r7, #32]
 800a68e:	f003 0308 	and.w	r3, r3, #8
 800a692:	2b00      	cmp	r3, #0
 800a694:	d008      	beq.n	800a6a8 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	699a      	ldr	r2, [r3, #24]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a6a4:	619a      	str	r2, [r3, #24]

    return;
 800a6a6:	e0ba      	b.n	800a81e <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800a6a8:	69bb      	ldr	r3, [r7, #24]
 800a6aa:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	f000 80b5 	beq.w	800a81e <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800a6b4:	69bb      	ldr	r3, [r7, #24]
 800a6b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d00f      	beq.n	800a6de <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6c4:	f043 0204 	orr.w	r2, r3, #4
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	699a      	ldr	r2, [r3, #24]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a6dc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800a6de:	69bb      	ldr	r3, [r7, #24]
 800a6e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d00f      	beq.n	800a708 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6ee:	f043 0201 	orr.w	r2, r3, #1
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	699a      	ldr	r2, [r3, #24]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a706:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800a708:	69bb      	ldr	r3, [r7, #24]
 800a70a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d00f      	beq.n	800a732 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a718:	f043 0208 	orr.w	r2, r3, #8
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	699a      	ldr	r2, [r3, #24]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a730:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800a732:	69bb      	ldr	r3, [r7, #24]
 800a734:	f003 0320 	and.w	r3, r3, #32
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d00f      	beq.n	800a75c <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a742:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	699a      	ldr	r2, [r3, #24]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f042 0220 	orr.w	r2, r2, #32
 800a75a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a762:	2b00      	cmp	r3, #0
 800a764:	d05a      	beq.n	800a81c <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f022 0201 	bic.w	r2, r2, #1
 800a774:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	6919      	ldr	r1, [r3, #16]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681a      	ldr	r2, [r3, #0]
 800a780:	4b28      	ldr	r3, [pc, #160]	; (800a824 <HAL_SPI_IRQHandler+0x3b8>)
 800a782:	400b      	ands	r3, r1
 800a784:	6113      	str	r3, [r2, #16]

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a78c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a790:	d138      	bne.n	800a804 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	689a      	ldr	r2, [r3, #8]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a7a0:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d013      	beq.n	800a7d2 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7ae:	4a1e      	ldr	r2, [pc, #120]	; (800a828 <HAL_SPI_IRQHandler+0x3bc>)
 800a7b0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f7f8 fc70 	bl	800309c <HAL_DMA_Abort_IT>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d007      	beq.n	800a7d2 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d020      	beq.n	800a81c <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7de:	4a12      	ldr	r2, [pc, #72]	; (800a828 <HAL_SPI_IRQHandler+0x3bc>)
 800a7e0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f7f8 fc58 	bl	800309c <HAL_DMA_Abort_IT>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d014      	beq.n	800a81c <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a802:	e00b      	b.n	800a81c <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2201      	movs	r2, #1
 800a808:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f000 f82b 	bl	800a868 <HAL_SPI_ErrorCallback>
    return;
 800a812:	e003      	b.n	800a81c <HAL_SPI_IRQHandler+0x3b0>
    return;
 800a814:	bf00      	nop
 800a816:	e002      	b.n	800a81e <HAL_SPI_IRQHandler+0x3b2>
    return;
 800a818:	bf00      	nop
 800a81a:	e000      	b.n	800a81e <HAL_SPI_IRQHandler+0x3b2>
    return;
 800a81c:	bf00      	nop
  }
}
 800a81e:	3728      	adds	r7, #40	; 0x28
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}
 800a824:	fffffc94 	.word	0xfffffc94
 800a828:	0800a87d 	.word	0x0800a87d

0800a82c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b083      	sub	sp, #12
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800a834:	bf00      	nop
 800a836:	370c      	adds	r7, #12
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr

0800a840 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a840:	b480      	push	{r7}
 800a842:	b083      	sub	sp, #12
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800a848:	bf00      	nop
 800a84a:	370c      	adds	r7, #12
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr

0800a854 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a854:	b480      	push	{r7}
 800a856:	b083      	sub	sp, #12
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a85c:	bf00      	nop
 800a85e:	370c      	adds	r7, #12
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr

0800a868 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a868:	b480      	push	{r7}
 800a86a:	b083      	sub	sp, #12
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a870:	bf00      	nop
 800a872:	370c      	adds	r7, #12
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr

0800a87c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b084      	sub	sp, #16
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a888:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	2200      	movs	r2, #0
 800a88e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2200      	movs	r2, #0
 800a896:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	2201      	movs	r2, #1
 800a89e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a8a2:	68f8      	ldr	r0, [r7, #12]
 800a8a4:	f7ff ffe0 	bl	800a868 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a8a8:	bf00      	nop
 800a8aa:	3710      	adds	r7, #16
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b085      	sub	sp, #20
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	695b      	ldr	r3, [r3, #20]
 800a8be:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	699a      	ldr	r2, [r3, #24]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f042 0208 	orr.w	r2, r2, #8
 800a8ce:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	699a      	ldr	r2, [r3, #24]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f042 0210 	orr.w	r2, r2, #16
 800a8de:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	681a      	ldr	r2, [r3, #0]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f022 0201 	bic.w	r2, r2, #1
 800a8ee:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	6919      	ldr	r1, [r3, #16]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	4b3c      	ldr	r3, [pc, #240]	; (800a9ec <SPI_CloseTransfer+0x13c>)
 800a8fc:	400b      	ands	r3, r1
 800a8fe:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	689a      	ldr	r2, [r3, #8]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a90e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a916:	b2db      	uxtb	r3, r3
 800a918:	2b04      	cmp	r3, #4
 800a91a:	d014      	beq.n	800a946 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f003 0320 	and.w	r3, r3, #32
 800a922:	2b00      	cmp	r3, #0
 800a924:	d00f      	beq.n	800a946 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a92c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	699a      	ldr	r2, [r3, #24]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f042 0220 	orr.w	r2, r2, #32
 800a944:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	2b03      	cmp	r3, #3
 800a950:	d014      	beq.n	800a97c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d00f      	beq.n	800a97c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a962:	f043 0204 	orr.w	r2, r3, #4
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	699a      	ldr	r2, [r3, #24]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a97a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a982:	2b00      	cmp	r3, #0
 800a984:	d00f      	beq.n	800a9a6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a98c:	f043 0201 	orr.w	r2, r3, #1
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	699a      	ldr	r2, [r3, #24]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a9a4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d00f      	beq.n	800a9d0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9b6:	f043 0208 	orr.w	r2, r3, #8
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	699a      	ldr	r2, [r3, #24]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a9ce:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800a9e0:	bf00      	nop
 800a9e2:	3714      	adds	r7, #20
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr
 800a9ec:	fffffc90 	.word	0xfffffc90

0800a9f0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	60f8      	str	r0, [r7, #12]
 800a9f8:	60b9      	str	r1, [r7, #8]
 800a9fa:	603b      	str	r3, [r7, #0]
 800a9fc:	4613      	mov	r3, r2
 800a9fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800aa00:	e010      	b.n	800aa24 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aa02:	f7f7 fe13 	bl	800262c <HAL_GetTick>
 800aa06:	4602      	mov	r2, r0
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	1ad3      	subs	r3, r2, r3
 800aa0c:	69ba      	ldr	r2, [r7, #24]
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d803      	bhi.n	800aa1a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800aa12:	69bb      	ldr	r3, [r7, #24]
 800aa14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa18:	d102      	bne.n	800aa20 <SPI_WaitOnFlagUntilTimeout+0x30>
 800aa1a:	69bb      	ldr	r3, [r7, #24]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d101      	bne.n	800aa24 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800aa20:	2303      	movs	r3, #3
 800aa22:	e00f      	b.n	800aa44 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	695a      	ldr	r2, [r3, #20]
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	4013      	ands	r3, r2
 800aa2e:	68ba      	ldr	r2, [r7, #8]
 800aa30:	429a      	cmp	r2, r3
 800aa32:	bf0c      	ite	eq
 800aa34:	2301      	moveq	r3, #1
 800aa36:	2300      	movne	r3, #0
 800aa38:	b2db      	uxtb	r3, r3
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	79fb      	ldrb	r3, [r7, #7]
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d0df      	beq.n	800aa02 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800aa42:	2300      	movs	r3, #0
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3710      	adds	r7, #16
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b085      	sub	sp, #20
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa58:	095b      	lsrs	r3, r3, #5
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	68db      	ldr	r3, [r3, #12]
 800aa62:	3301      	adds	r3, #1
 800aa64:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	3307      	adds	r3, #7
 800aa6a:	08db      	lsrs	r3, r3, #3
 800aa6c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	68fa      	ldr	r2, [r7, #12]
 800aa72:	fb02 f303 	mul.w	r3, r2, r3
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3714      	adds	r7, #20
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa80:	4770      	bx	lr

0800aa82 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aa82:	b580      	push	{r7, lr}
 800aa84:	b082      	sub	sp, #8
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d101      	bne.n	800aa94 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aa90:	2301      	movs	r3, #1
 800aa92:	e049      	b.n	800ab28 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d106      	bne.n	800aaae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f7f7 faff 	bl	80020ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2202      	movs	r2, #2
 800aab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681a      	ldr	r2, [r3, #0]
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	3304      	adds	r3, #4
 800aabe:	4619      	mov	r1, r3
 800aac0:	4610      	mov	r0, r2
 800aac2:	f000 fa4d 	bl	800af60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2201      	movs	r2, #1
 800aaca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2201      	movs	r2, #1
 800aad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2201      	movs	r2, #1
 800aada:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2201      	movs	r2, #1
 800aae2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2201      	movs	r2, #1
 800aaea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2201      	movs	r2, #1
 800aafa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2201      	movs	r2, #1
 800ab02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2201      	movs	r2, #1
 800ab0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2201      	movs	r2, #1
 800ab12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2201      	movs	r2, #1
 800ab1a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2201      	movs	r2, #1
 800ab22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab26:	2300      	movs	r3, #0
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3708      	adds	r7, #8
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b084      	sub	sp, #16
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
 800ab38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d109      	bne.n	800ab54 <HAL_TIM_PWM_Start+0x24>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab46:	b2db      	uxtb	r3, r3
 800ab48:	2b01      	cmp	r3, #1
 800ab4a:	bf14      	ite	ne
 800ab4c:	2301      	movne	r3, #1
 800ab4e:	2300      	moveq	r3, #0
 800ab50:	b2db      	uxtb	r3, r3
 800ab52:	e03c      	b.n	800abce <HAL_TIM_PWM_Start+0x9e>
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	2b04      	cmp	r3, #4
 800ab58:	d109      	bne.n	800ab6e <HAL_TIM_PWM_Start+0x3e>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ab60:	b2db      	uxtb	r3, r3
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	bf14      	ite	ne
 800ab66:	2301      	movne	r3, #1
 800ab68:	2300      	moveq	r3, #0
 800ab6a:	b2db      	uxtb	r3, r3
 800ab6c:	e02f      	b.n	800abce <HAL_TIM_PWM_Start+0x9e>
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	2b08      	cmp	r3, #8
 800ab72:	d109      	bne.n	800ab88 <HAL_TIM_PWM_Start+0x58>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab7a:	b2db      	uxtb	r3, r3
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	bf14      	ite	ne
 800ab80:	2301      	movne	r3, #1
 800ab82:	2300      	moveq	r3, #0
 800ab84:	b2db      	uxtb	r3, r3
 800ab86:	e022      	b.n	800abce <HAL_TIM_PWM_Start+0x9e>
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	2b0c      	cmp	r3, #12
 800ab8c:	d109      	bne.n	800aba2 <HAL_TIM_PWM_Start+0x72>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	2b01      	cmp	r3, #1
 800ab98:	bf14      	ite	ne
 800ab9a:	2301      	movne	r3, #1
 800ab9c:	2300      	moveq	r3, #0
 800ab9e:	b2db      	uxtb	r3, r3
 800aba0:	e015      	b.n	800abce <HAL_TIM_PWM_Start+0x9e>
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	2b10      	cmp	r3, #16
 800aba6:	d109      	bne.n	800abbc <HAL_TIM_PWM_Start+0x8c>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800abae:	b2db      	uxtb	r3, r3
 800abb0:	2b01      	cmp	r3, #1
 800abb2:	bf14      	ite	ne
 800abb4:	2301      	movne	r3, #1
 800abb6:	2300      	moveq	r3, #0
 800abb8:	b2db      	uxtb	r3, r3
 800abba:	e008      	b.n	800abce <HAL_TIM_PWM_Start+0x9e>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	bf14      	ite	ne
 800abc8:	2301      	movne	r3, #1
 800abca:	2300      	moveq	r3, #0
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d001      	beq.n	800abd6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800abd2:	2301      	movs	r3, #1
 800abd4:	e09c      	b.n	800ad10 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d104      	bne.n	800abe6 <HAL_TIM_PWM_Start+0xb6>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2202      	movs	r2, #2
 800abe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800abe4:	e023      	b.n	800ac2e <HAL_TIM_PWM_Start+0xfe>
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	2b04      	cmp	r3, #4
 800abea:	d104      	bne.n	800abf6 <HAL_TIM_PWM_Start+0xc6>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2202      	movs	r2, #2
 800abf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800abf4:	e01b      	b.n	800ac2e <HAL_TIM_PWM_Start+0xfe>
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	2b08      	cmp	r3, #8
 800abfa:	d104      	bne.n	800ac06 <HAL_TIM_PWM_Start+0xd6>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2202      	movs	r2, #2
 800ac00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ac04:	e013      	b.n	800ac2e <HAL_TIM_PWM_Start+0xfe>
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	2b0c      	cmp	r3, #12
 800ac0a:	d104      	bne.n	800ac16 <HAL_TIM_PWM_Start+0xe6>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2202      	movs	r2, #2
 800ac10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ac14:	e00b      	b.n	800ac2e <HAL_TIM_PWM_Start+0xfe>
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	2b10      	cmp	r3, #16
 800ac1a:	d104      	bne.n	800ac26 <HAL_TIM_PWM_Start+0xf6>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2202      	movs	r2, #2
 800ac20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ac24:	e003      	b.n	800ac2e <HAL_TIM_PWM_Start+0xfe>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2202      	movs	r2, #2
 800ac2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	2201      	movs	r2, #1
 800ac34:	6839      	ldr	r1, [r7, #0]
 800ac36:	4618      	mov	r0, r3
 800ac38:	f000 fcfa 	bl	800b630 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	4a35      	ldr	r2, [pc, #212]	; (800ad18 <HAL_TIM_PWM_Start+0x1e8>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d013      	beq.n	800ac6e <HAL_TIM_PWM_Start+0x13e>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4a34      	ldr	r2, [pc, #208]	; (800ad1c <HAL_TIM_PWM_Start+0x1ec>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d00e      	beq.n	800ac6e <HAL_TIM_PWM_Start+0x13e>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4a32      	ldr	r2, [pc, #200]	; (800ad20 <HAL_TIM_PWM_Start+0x1f0>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d009      	beq.n	800ac6e <HAL_TIM_PWM_Start+0x13e>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4a31      	ldr	r2, [pc, #196]	; (800ad24 <HAL_TIM_PWM_Start+0x1f4>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d004      	beq.n	800ac6e <HAL_TIM_PWM_Start+0x13e>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4a2f      	ldr	r2, [pc, #188]	; (800ad28 <HAL_TIM_PWM_Start+0x1f8>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d101      	bne.n	800ac72 <HAL_TIM_PWM_Start+0x142>
 800ac6e:	2301      	movs	r3, #1
 800ac70:	e000      	b.n	800ac74 <HAL_TIM_PWM_Start+0x144>
 800ac72:	2300      	movs	r3, #0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d007      	beq.n	800ac88 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ac86:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4a22      	ldr	r2, [pc, #136]	; (800ad18 <HAL_TIM_PWM_Start+0x1e8>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d01d      	beq.n	800acce <HAL_TIM_PWM_Start+0x19e>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac9a:	d018      	beq.n	800acce <HAL_TIM_PWM_Start+0x19e>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4a22      	ldr	r2, [pc, #136]	; (800ad2c <HAL_TIM_PWM_Start+0x1fc>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d013      	beq.n	800acce <HAL_TIM_PWM_Start+0x19e>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4a21      	ldr	r2, [pc, #132]	; (800ad30 <HAL_TIM_PWM_Start+0x200>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d00e      	beq.n	800acce <HAL_TIM_PWM_Start+0x19e>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4a1f      	ldr	r2, [pc, #124]	; (800ad34 <HAL_TIM_PWM_Start+0x204>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d009      	beq.n	800acce <HAL_TIM_PWM_Start+0x19e>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4a17      	ldr	r2, [pc, #92]	; (800ad1c <HAL_TIM_PWM_Start+0x1ec>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d004      	beq.n	800acce <HAL_TIM_PWM_Start+0x19e>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4a1b      	ldr	r2, [pc, #108]	; (800ad38 <HAL_TIM_PWM_Start+0x208>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d115      	bne.n	800acfa <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	689a      	ldr	r2, [r3, #8]
 800acd4:	4b19      	ldr	r3, [pc, #100]	; (800ad3c <HAL_TIM_PWM_Start+0x20c>)
 800acd6:	4013      	ands	r3, r2
 800acd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	2b06      	cmp	r3, #6
 800acde:	d015      	beq.n	800ad0c <HAL_TIM_PWM_Start+0x1dc>
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ace6:	d011      	beq.n	800ad0c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	681a      	ldr	r2, [r3, #0]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f042 0201 	orr.w	r2, r2, #1
 800acf6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acf8:	e008      	b.n	800ad0c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	681a      	ldr	r2, [r3, #0]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f042 0201 	orr.w	r2, r2, #1
 800ad08:	601a      	str	r2, [r3, #0]
 800ad0a:	e000      	b.n	800ad0e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ad0e:	2300      	movs	r3, #0
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3710      	adds	r7, #16
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}
 800ad18:	40010000 	.word	0x40010000
 800ad1c:	40010400 	.word	0x40010400
 800ad20:	40014000 	.word	0x40014000
 800ad24:	40014400 	.word	0x40014400
 800ad28:	40014800 	.word	0x40014800
 800ad2c:	40000400 	.word	0x40000400
 800ad30:	40000800 	.word	0x40000800
 800ad34:	40000c00 	.word	0x40000c00
 800ad38:	40001800 	.word	0x40001800
 800ad3c:	00010007 	.word	0x00010007

0800ad40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b084      	sub	sp, #16
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	60f8      	str	r0, [r7, #12]
 800ad48:	60b9      	str	r1, [r7, #8]
 800ad4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad52:	2b01      	cmp	r3, #1
 800ad54:	d101      	bne.n	800ad5a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ad56:	2302      	movs	r3, #2
 800ad58:	e0fd      	b.n	800af56 <HAL_TIM_PWM_ConfigChannel+0x216>
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2201      	movs	r2, #1
 800ad5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2b14      	cmp	r3, #20
 800ad66:	f200 80f0 	bhi.w	800af4a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800ad6a:	a201      	add	r2, pc, #4	; (adr r2, 800ad70 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800ad6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad70:	0800adc5 	.word	0x0800adc5
 800ad74:	0800af4b 	.word	0x0800af4b
 800ad78:	0800af4b 	.word	0x0800af4b
 800ad7c:	0800af4b 	.word	0x0800af4b
 800ad80:	0800ae05 	.word	0x0800ae05
 800ad84:	0800af4b 	.word	0x0800af4b
 800ad88:	0800af4b 	.word	0x0800af4b
 800ad8c:	0800af4b 	.word	0x0800af4b
 800ad90:	0800ae47 	.word	0x0800ae47
 800ad94:	0800af4b 	.word	0x0800af4b
 800ad98:	0800af4b 	.word	0x0800af4b
 800ad9c:	0800af4b 	.word	0x0800af4b
 800ada0:	0800ae87 	.word	0x0800ae87
 800ada4:	0800af4b 	.word	0x0800af4b
 800ada8:	0800af4b 	.word	0x0800af4b
 800adac:	0800af4b 	.word	0x0800af4b
 800adb0:	0800aec9 	.word	0x0800aec9
 800adb4:	0800af4b 	.word	0x0800af4b
 800adb8:	0800af4b 	.word	0x0800af4b
 800adbc:	0800af4b 	.word	0x0800af4b
 800adc0:	0800af09 	.word	0x0800af09
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	68b9      	ldr	r1, [r7, #8]
 800adca:	4618      	mov	r0, r3
 800adcc:	f000 f962 	bl	800b094 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	699a      	ldr	r2, [r3, #24]
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f042 0208 	orr.w	r2, r2, #8
 800adde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	699a      	ldr	r2, [r3, #24]
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f022 0204 	bic.w	r2, r2, #4
 800adee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	6999      	ldr	r1, [r3, #24]
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	691a      	ldr	r2, [r3, #16]
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	430a      	orrs	r2, r1
 800ae00:	619a      	str	r2, [r3, #24]
      break;
 800ae02:	e0a3      	b.n	800af4c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	68b9      	ldr	r1, [r7, #8]
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f000 f9d2 	bl	800b1b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	699a      	ldr	r2, [r3, #24]
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ae1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	699a      	ldr	r2, [r3, #24]
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	6999      	ldr	r1, [r3, #24]
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	691b      	ldr	r3, [r3, #16]
 800ae3a:	021a      	lsls	r2, r3, #8
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	430a      	orrs	r2, r1
 800ae42:	619a      	str	r2, [r3, #24]
      break;
 800ae44:	e082      	b.n	800af4c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	68b9      	ldr	r1, [r7, #8]
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f000 fa3b 	bl	800b2c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	69da      	ldr	r2, [r3, #28]
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f042 0208 	orr.w	r2, r2, #8
 800ae60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	69da      	ldr	r2, [r3, #28]
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f022 0204 	bic.w	r2, r2, #4
 800ae70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	69d9      	ldr	r1, [r3, #28]
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	691a      	ldr	r2, [r3, #16]
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	430a      	orrs	r2, r1
 800ae82:	61da      	str	r2, [r3, #28]
      break;
 800ae84:	e062      	b.n	800af4c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	68b9      	ldr	r1, [r7, #8]
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f000 faa1 	bl	800b3d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	69da      	ldr	r2, [r3, #28]
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aea0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	69da      	ldr	r2, [r3, #28]
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aeb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	69d9      	ldr	r1, [r3, #28]
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	691b      	ldr	r3, [r3, #16]
 800aebc:	021a      	lsls	r2, r3, #8
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	430a      	orrs	r2, r1
 800aec4:	61da      	str	r2, [r3, #28]
      break;
 800aec6:	e041      	b.n	800af4c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	68b9      	ldr	r1, [r7, #8]
 800aece:	4618      	mov	r0, r3
 800aed0:	f000 fae8 	bl	800b4a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f042 0208 	orr.w	r2, r2, #8
 800aee2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f022 0204 	bic.w	r2, r2, #4
 800aef2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	691a      	ldr	r2, [r3, #16]
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	430a      	orrs	r2, r1
 800af04:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800af06:	e021      	b.n	800af4c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	68b9      	ldr	r1, [r7, #8]
 800af0e:	4618      	mov	r0, r3
 800af10:	f000 fb2a 	bl	800b568 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	691b      	ldr	r3, [r3, #16]
 800af3e:	021a      	lsls	r2, r3, #8
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	430a      	orrs	r2, r1
 800af46:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800af48:	e000      	b.n	800af4c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800af4a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	2200      	movs	r2, #0
 800af50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af54:	2300      	movs	r3, #0
}
 800af56:	4618      	mov	r0, r3
 800af58:	3710      	adds	r7, #16
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	bf00      	nop

0800af60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800af60:	b480      	push	{r7}
 800af62:	b085      	sub	sp, #20
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	4a40      	ldr	r2, [pc, #256]	; (800b074 <TIM_Base_SetConfig+0x114>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d013      	beq.n	800afa0 <TIM_Base_SetConfig+0x40>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af7e:	d00f      	beq.n	800afa0 <TIM_Base_SetConfig+0x40>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	4a3d      	ldr	r2, [pc, #244]	; (800b078 <TIM_Base_SetConfig+0x118>)
 800af84:	4293      	cmp	r3, r2
 800af86:	d00b      	beq.n	800afa0 <TIM_Base_SetConfig+0x40>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	4a3c      	ldr	r2, [pc, #240]	; (800b07c <TIM_Base_SetConfig+0x11c>)
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d007      	beq.n	800afa0 <TIM_Base_SetConfig+0x40>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	4a3b      	ldr	r2, [pc, #236]	; (800b080 <TIM_Base_SetConfig+0x120>)
 800af94:	4293      	cmp	r3, r2
 800af96:	d003      	beq.n	800afa0 <TIM_Base_SetConfig+0x40>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	4a3a      	ldr	r2, [pc, #232]	; (800b084 <TIM_Base_SetConfig+0x124>)
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d108      	bne.n	800afb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	68fa      	ldr	r2, [r7, #12]
 800afae:	4313      	orrs	r3, r2
 800afb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	4a2f      	ldr	r2, [pc, #188]	; (800b074 <TIM_Base_SetConfig+0x114>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d01f      	beq.n	800affa <TIM_Base_SetConfig+0x9a>
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afc0:	d01b      	beq.n	800affa <TIM_Base_SetConfig+0x9a>
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	4a2c      	ldr	r2, [pc, #176]	; (800b078 <TIM_Base_SetConfig+0x118>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d017      	beq.n	800affa <TIM_Base_SetConfig+0x9a>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	4a2b      	ldr	r2, [pc, #172]	; (800b07c <TIM_Base_SetConfig+0x11c>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d013      	beq.n	800affa <TIM_Base_SetConfig+0x9a>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	4a2a      	ldr	r2, [pc, #168]	; (800b080 <TIM_Base_SetConfig+0x120>)
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d00f      	beq.n	800affa <TIM_Base_SetConfig+0x9a>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	4a29      	ldr	r2, [pc, #164]	; (800b084 <TIM_Base_SetConfig+0x124>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d00b      	beq.n	800affa <TIM_Base_SetConfig+0x9a>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	4a28      	ldr	r2, [pc, #160]	; (800b088 <TIM_Base_SetConfig+0x128>)
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d007      	beq.n	800affa <TIM_Base_SetConfig+0x9a>
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	4a27      	ldr	r2, [pc, #156]	; (800b08c <TIM_Base_SetConfig+0x12c>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d003      	beq.n	800affa <TIM_Base_SetConfig+0x9a>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	4a26      	ldr	r2, [pc, #152]	; (800b090 <TIM_Base_SetConfig+0x130>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d108      	bne.n	800b00c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b000:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	68db      	ldr	r3, [r3, #12]
 800b006:	68fa      	ldr	r2, [r7, #12]
 800b008:	4313      	orrs	r3, r2
 800b00a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	695b      	ldr	r3, [r3, #20]
 800b016:	4313      	orrs	r3, r2
 800b018:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	68fa      	ldr	r2, [r7, #12]
 800b01e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	689a      	ldr	r2, [r3, #8]
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	681a      	ldr	r2, [r3, #0]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	4a10      	ldr	r2, [pc, #64]	; (800b074 <TIM_Base_SetConfig+0x114>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d00f      	beq.n	800b058 <TIM_Base_SetConfig+0xf8>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	4a12      	ldr	r2, [pc, #72]	; (800b084 <TIM_Base_SetConfig+0x124>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d00b      	beq.n	800b058 <TIM_Base_SetConfig+0xf8>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	4a11      	ldr	r2, [pc, #68]	; (800b088 <TIM_Base_SetConfig+0x128>)
 800b044:	4293      	cmp	r3, r2
 800b046:	d007      	beq.n	800b058 <TIM_Base_SetConfig+0xf8>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	4a10      	ldr	r2, [pc, #64]	; (800b08c <TIM_Base_SetConfig+0x12c>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d003      	beq.n	800b058 <TIM_Base_SetConfig+0xf8>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	4a0f      	ldr	r2, [pc, #60]	; (800b090 <TIM_Base_SetConfig+0x130>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d103      	bne.n	800b060 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	691a      	ldr	r2, [r3, #16]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2201      	movs	r2, #1
 800b064:	615a      	str	r2, [r3, #20]
}
 800b066:	bf00      	nop
 800b068:	3714      	adds	r7, #20
 800b06a:	46bd      	mov	sp, r7
 800b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b070:	4770      	bx	lr
 800b072:	bf00      	nop
 800b074:	40010000 	.word	0x40010000
 800b078:	40000400 	.word	0x40000400
 800b07c:	40000800 	.word	0x40000800
 800b080:	40000c00 	.word	0x40000c00
 800b084:	40010400 	.word	0x40010400
 800b088:	40014000 	.word	0x40014000
 800b08c:	40014400 	.word	0x40014400
 800b090:	40014800 	.word	0x40014800

0800b094 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b094:	b480      	push	{r7}
 800b096:	b087      	sub	sp, #28
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
 800b09c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6a1b      	ldr	r3, [r3, #32]
 800b0a2:	f023 0201 	bic.w	r2, r3, #1
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6a1b      	ldr	r3, [r3, #32]
 800b0ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	685b      	ldr	r3, [r3, #4]
 800b0b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	699b      	ldr	r3, [r3, #24]
 800b0ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b0bc:	68fa      	ldr	r2, [r7, #12]
 800b0be:	4b37      	ldr	r3, [pc, #220]	; (800b19c <TIM_OC1_SetConfig+0x108>)
 800b0c0:	4013      	ands	r3, r2
 800b0c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f023 0303 	bic.w	r3, r3, #3
 800b0ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	68fa      	ldr	r2, [r7, #12]
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	f023 0302 	bic.w	r3, r3, #2
 800b0dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	689b      	ldr	r3, [r3, #8]
 800b0e2:	697a      	ldr	r2, [r7, #20]
 800b0e4:	4313      	orrs	r3, r2
 800b0e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	4a2d      	ldr	r2, [pc, #180]	; (800b1a0 <TIM_OC1_SetConfig+0x10c>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d00f      	beq.n	800b110 <TIM_OC1_SetConfig+0x7c>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	4a2c      	ldr	r2, [pc, #176]	; (800b1a4 <TIM_OC1_SetConfig+0x110>)
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d00b      	beq.n	800b110 <TIM_OC1_SetConfig+0x7c>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	4a2b      	ldr	r2, [pc, #172]	; (800b1a8 <TIM_OC1_SetConfig+0x114>)
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d007      	beq.n	800b110 <TIM_OC1_SetConfig+0x7c>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	4a2a      	ldr	r2, [pc, #168]	; (800b1ac <TIM_OC1_SetConfig+0x118>)
 800b104:	4293      	cmp	r3, r2
 800b106:	d003      	beq.n	800b110 <TIM_OC1_SetConfig+0x7c>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	4a29      	ldr	r2, [pc, #164]	; (800b1b0 <TIM_OC1_SetConfig+0x11c>)
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d10c      	bne.n	800b12a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	f023 0308 	bic.w	r3, r3, #8
 800b116:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	68db      	ldr	r3, [r3, #12]
 800b11c:	697a      	ldr	r2, [r7, #20]
 800b11e:	4313      	orrs	r3, r2
 800b120:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	f023 0304 	bic.w	r3, r3, #4
 800b128:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	4a1c      	ldr	r2, [pc, #112]	; (800b1a0 <TIM_OC1_SetConfig+0x10c>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d00f      	beq.n	800b152 <TIM_OC1_SetConfig+0xbe>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	4a1b      	ldr	r2, [pc, #108]	; (800b1a4 <TIM_OC1_SetConfig+0x110>)
 800b136:	4293      	cmp	r3, r2
 800b138:	d00b      	beq.n	800b152 <TIM_OC1_SetConfig+0xbe>
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	4a1a      	ldr	r2, [pc, #104]	; (800b1a8 <TIM_OC1_SetConfig+0x114>)
 800b13e:	4293      	cmp	r3, r2
 800b140:	d007      	beq.n	800b152 <TIM_OC1_SetConfig+0xbe>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	4a19      	ldr	r2, [pc, #100]	; (800b1ac <TIM_OC1_SetConfig+0x118>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d003      	beq.n	800b152 <TIM_OC1_SetConfig+0xbe>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	4a18      	ldr	r2, [pc, #96]	; (800b1b0 <TIM_OC1_SetConfig+0x11c>)
 800b14e:	4293      	cmp	r3, r2
 800b150:	d111      	bne.n	800b176 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b158:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b160:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	695b      	ldr	r3, [r3, #20]
 800b166:	693a      	ldr	r2, [r7, #16]
 800b168:	4313      	orrs	r3, r2
 800b16a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	699b      	ldr	r3, [r3, #24]
 800b170:	693a      	ldr	r2, [r7, #16]
 800b172:	4313      	orrs	r3, r2
 800b174:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	693a      	ldr	r2, [r7, #16]
 800b17a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	68fa      	ldr	r2, [r7, #12]
 800b180:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	685a      	ldr	r2, [r3, #4]
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	697a      	ldr	r2, [r7, #20]
 800b18e:	621a      	str	r2, [r3, #32]
}
 800b190:	bf00      	nop
 800b192:	371c      	adds	r7, #28
 800b194:	46bd      	mov	sp, r7
 800b196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19a:	4770      	bx	lr
 800b19c:	fffeff8f 	.word	0xfffeff8f
 800b1a0:	40010000 	.word	0x40010000
 800b1a4:	40010400 	.word	0x40010400
 800b1a8:	40014000 	.word	0x40014000
 800b1ac:	40014400 	.word	0x40014400
 800b1b0:	40014800 	.word	0x40014800

0800b1b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b087      	sub	sp, #28
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6a1b      	ldr	r3, [r3, #32]
 800b1c2:	f023 0210 	bic.w	r2, r3, #16
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6a1b      	ldr	r3, [r3, #32]
 800b1ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	699b      	ldr	r3, [r3, #24]
 800b1da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b1dc:	68fa      	ldr	r2, [r7, #12]
 800b1de:	4b34      	ldr	r3, [pc, #208]	; (800b2b0 <TIM_OC2_SetConfig+0xfc>)
 800b1e0:	4013      	ands	r3, r2
 800b1e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	021b      	lsls	r3, r3, #8
 800b1f2:	68fa      	ldr	r2, [r7, #12]
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	f023 0320 	bic.w	r3, r3, #32
 800b1fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	689b      	ldr	r3, [r3, #8]
 800b204:	011b      	lsls	r3, r3, #4
 800b206:	697a      	ldr	r2, [r7, #20]
 800b208:	4313      	orrs	r3, r2
 800b20a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	4a29      	ldr	r2, [pc, #164]	; (800b2b4 <TIM_OC2_SetConfig+0x100>)
 800b210:	4293      	cmp	r3, r2
 800b212:	d003      	beq.n	800b21c <TIM_OC2_SetConfig+0x68>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	4a28      	ldr	r2, [pc, #160]	; (800b2b8 <TIM_OC2_SetConfig+0x104>)
 800b218:	4293      	cmp	r3, r2
 800b21a:	d10d      	bne.n	800b238 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b222:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	68db      	ldr	r3, [r3, #12]
 800b228:	011b      	lsls	r3, r3, #4
 800b22a:	697a      	ldr	r2, [r7, #20]
 800b22c:	4313      	orrs	r3, r2
 800b22e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b236:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	4a1e      	ldr	r2, [pc, #120]	; (800b2b4 <TIM_OC2_SetConfig+0x100>)
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d00f      	beq.n	800b260 <TIM_OC2_SetConfig+0xac>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	4a1d      	ldr	r2, [pc, #116]	; (800b2b8 <TIM_OC2_SetConfig+0x104>)
 800b244:	4293      	cmp	r3, r2
 800b246:	d00b      	beq.n	800b260 <TIM_OC2_SetConfig+0xac>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	4a1c      	ldr	r2, [pc, #112]	; (800b2bc <TIM_OC2_SetConfig+0x108>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d007      	beq.n	800b260 <TIM_OC2_SetConfig+0xac>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	4a1b      	ldr	r2, [pc, #108]	; (800b2c0 <TIM_OC2_SetConfig+0x10c>)
 800b254:	4293      	cmp	r3, r2
 800b256:	d003      	beq.n	800b260 <TIM_OC2_SetConfig+0xac>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	4a1a      	ldr	r2, [pc, #104]	; (800b2c4 <TIM_OC2_SetConfig+0x110>)
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d113      	bne.n	800b288 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b266:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b268:	693b      	ldr	r3, [r7, #16]
 800b26a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b26e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	695b      	ldr	r3, [r3, #20]
 800b274:	009b      	lsls	r3, r3, #2
 800b276:	693a      	ldr	r2, [r7, #16]
 800b278:	4313      	orrs	r3, r2
 800b27a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	699b      	ldr	r3, [r3, #24]
 800b280:	009b      	lsls	r3, r3, #2
 800b282:	693a      	ldr	r2, [r7, #16]
 800b284:	4313      	orrs	r3, r2
 800b286:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	693a      	ldr	r2, [r7, #16]
 800b28c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	68fa      	ldr	r2, [r7, #12]
 800b292:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	685a      	ldr	r2, [r3, #4]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	697a      	ldr	r2, [r7, #20]
 800b2a0:	621a      	str	r2, [r3, #32]
}
 800b2a2:	bf00      	nop
 800b2a4:	371c      	adds	r7, #28
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr
 800b2ae:	bf00      	nop
 800b2b0:	feff8fff 	.word	0xfeff8fff
 800b2b4:	40010000 	.word	0x40010000
 800b2b8:	40010400 	.word	0x40010400
 800b2bc:	40014000 	.word	0x40014000
 800b2c0:	40014400 	.word	0x40014400
 800b2c4:	40014800 	.word	0x40014800

0800b2c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b087      	sub	sp, #28
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6a1b      	ldr	r3, [r3, #32]
 800b2d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6a1b      	ldr	r3, [r3, #32]
 800b2e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	69db      	ldr	r3, [r3, #28]
 800b2ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f023 0303 	bic.w	r3, r3, #3
 800b2fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	68fa      	ldr	r2, [r7, #12]
 800b306:	4313      	orrs	r3, r2
 800b308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b310:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	689b      	ldr	r3, [r3, #8]
 800b316:	021b      	lsls	r3, r3, #8
 800b318:	697a      	ldr	r2, [r7, #20]
 800b31a:	4313      	orrs	r3, r2
 800b31c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	4a27      	ldr	r2, [pc, #156]	; (800b3c0 <TIM_OC3_SetConfig+0xf8>)
 800b322:	4293      	cmp	r3, r2
 800b324:	d003      	beq.n	800b32e <TIM_OC3_SetConfig+0x66>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	4a26      	ldr	r2, [pc, #152]	; (800b3c4 <TIM_OC3_SetConfig+0xfc>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d10d      	bne.n	800b34a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b334:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	68db      	ldr	r3, [r3, #12]
 800b33a:	021b      	lsls	r3, r3, #8
 800b33c:	697a      	ldr	r2, [r7, #20]
 800b33e:	4313      	orrs	r3, r2
 800b340:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b348:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	4a1c      	ldr	r2, [pc, #112]	; (800b3c0 <TIM_OC3_SetConfig+0xf8>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d00f      	beq.n	800b372 <TIM_OC3_SetConfig+0xaa>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	4a1b      	ldr	r2, [pc, #108]	; (800b3c4 <TIM_OC3_SetConfig+0xfc>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d00b      	beq.n	800b372 <TIM_OC3_SetConfig+0xaa>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	4a1a      	ldr	r2, [pc, #104]	; (800b3c8 <TIM_OC3_SetConfig+0x100>)
 800b35e:	4293      	cmp	r3, r2
 800b360:	d007      	beq.n	800b372 <TIM_OC3_SetConfig+0xaa>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	4a19      	ldr	r2, [pc, #100]	; (800b3cc <TIM_OC3_SetConfig+0x104>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d003      	beq.n	800b372 <TIM_OC3_SetConfig+0xaa>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	4a18      	ldr	r2, [pc, #96]	; (800b3d0 <TIM_OC3_SetConfig+0x108>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d113      	bne.n	800b39a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b378:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b37a:	693b      	ldr	r3, [r7, #16]
 800b37c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b380:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	695b      	ldr	r3, [r3, #20]
 800b386:	011b      	lsls	r3, r3, #4
 800b388:	693a      	ldr	r2, [r7, #16]
 800b38a:	4313      	orrs	r3, r2
 800b38c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	699b      	ldr	r3, [r3, #24]
 800b392:	011b      	lsls	r3, r3, #4
 800b394:	693a      	ldr	r2, [r7, #16]
 800b396:	4313      	orrs	r3, r2
 800b398:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	693a      	ldr	r2, [r7, #16]
 800b39e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	68fa      	ldr	r2, [r7, #12]
 800b3a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	685a      	ldr	r2, [r3, #4]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	697a      	ldr	r2, [r7, #20]
 800b3b2:	621a      	str	r2, [r3, #32]
}
 800b3b4:	bf00      	nop
 800b3b6:	371c      	adds	r7, #28
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr
 800b3c0:	40010000 	.word	0x40010000
 800b3c4:	40010400 	.word	0x40010400
 800b3c8:	40014000 	.word	0x40014000
 800b3cc:	40014400 	.word	0x40014400
 800b3d0:	40014800 	.word	0x40014800

0800b3d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b087      	sub	sp, #28
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6a1b      	ldr	r3, [r3, #32]
 800b3e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6a1b      	ldr	r3, [r3, #32]
 800b3ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	685b      	ldr	r3, [r3, #4]
 800b3f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	69db      	ldr	r3, [r3, #28]
 800b3fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b40a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	021b      	lsls	r3, r3, #8
 800b412:	68fa      	ldr	r2, [r7, #12]
 800b414:	4313      	orrs	r3, r2
 800b416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b41e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	689b      	ldr	r3, [r3, #8]
 800b424:	031b      	lsls	r3, r3, #12
 800b426:	693a      	ldr	r2, [r7, #16]
 800b428:	4313      	orrs	r3, r2
 800b42a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	4a18      	ldr	r2, [pc, #96]	; (800b490 <TIM_OC4_SetConfig+0xbc>)
 800b430:	4293      	cmp	r3, r2
 800b432:	d00f      	beq.n	800b454 <TIM_OC4_SetConfig+0x80>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	4a17      	ldr	r2, [pc, #92]	; (800b494 <TIM_OC4_SetConfig+0xc0>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d00b      	beq.n	800b454 <TIM_OC4_SetConfig+0x80>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	4a16      	ldr	r2, [pc, #88]	; (800b498 <TIM_OC4_SetConfig+0xc4>)
 800b440:	4293      	cmp	r3, r2
 800b442:	d007      	beq.n	800b454 <TIM_OC4_SetConfig+0x80>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	4a15      	ldr	r2, [pc, #84]	; (800b49c <TIM_OC4_SetConfig+0xc8>)
 800b448:	4293      	cmp	r3, r2
 800b44a:	d003      	beq.n	800b454 <TIM_OC4_SetConfig+0x80>
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	4a14      	ldr	r2, [pc, #80]	; (800b4a0 <TIM_OC4_SetConfig+0xcc>)
 800b450:	4293      	cmp	r3, r2
 800b452:	d109      	bne.n	800b468 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b45a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	695b      	ldr	r3, [r3, #20]
 800b460:	019b      	lsls	r3, r3, #6
 800b462:	697a      	ldr	r2, [r7, #20]
 800b464:	4313      	orrs	r3, r2
 800b466:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	697a      	ldr	r2, [r7, #20]
 800b46c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	68fa      	ldr	r2, [r7, #12]
 800b472:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	685a      	ldr	r2, [r3, #4]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	693a      	ldr	r2, [r7, #16]
 800b480:	621a      	str	r2, [r3, #32]
}
 800b482:	bf00      	nop
 800b484:	371c      	adds	r7, #28
 800b486:	46bd      	mov	sp, r7
 800b488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48c:	4770      	bx	lr
 800b48e:	bf00      	nop
 800b490:	40010000 	.word	0x40010000
 800b494:	40010400 	.word	0x40010400
 800b498:	40014000 	.word	0x40014000
 800b49c:	40014400 	.word	0x40014400
 800b4a0:	40014800 	.word	0x40014800

0800b4a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b087      	sub	sp, #28
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6a1b      	ldr	r3, [r3, #32]
 800b4b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6a1b      	ldr	r3, [r3, #32]
 800b4be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	68fa      	ldr	r2, [r7, #12]
 800b4da:	4313      	orrs	r3, r2
 800b4dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b4e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	689b      	ldr	r3, [r3, #8]
 800b4ea:	041b      	lsls	r3, r3, #16
 800b4ec:	693a      	ldr	r2, [r7, #16]
 800b4ee:	4313      	orrs	r3, r2
 800b4f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	4a17      	ldr	r2, [pc, #92]	; (800b554 <TIM_OC5_SetConfig+0xb0>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d00f      	beq.n	800b51a <TIM_OC5_SetConfig+0x76>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	4a16      	ldr	r2, [pc, #88]	; (800b558 <TIM_OC5_SetConfig+0xb4>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d00b      	beq.n	800b51a <TIM_OC5_SetConfig+0x76>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	4a15      	ldr	r2, [pc, #84]	; (800b55c <TIM_OC5_SetConfig+0xb8>)
 800b506:	4293      	cmp	r3, r2
 800b508:	d007      	beq.n	800b51a <TIM_OC5_SetConfig+0x76>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	4a14      	ldr	r2, [pc, #80]	; (800b560 <TIM_OC5_SetConfig+0xbc>)
 800b50e:	4293      	cmp	r3, r2
 800b510:	d003      	beq.n	800b51a <TIM_OC5_SetConfig+0x76>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	4a13      	ldr	r2, [pc, #76]	; (800b564 <TIM_OC5_SetConfig+0xc0>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d109      	bne.n	800b52e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b520:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	695b      	ldr	r3, [r3, #20]
 800b526:	021b      	lsls	r3, r3, #8
 800b528:	697a      	ldr	r2, [r7, #20]
 800b52a:	4313      	orrs	r3, r2
 800b52c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	697a      	ldr	r2, [r7, #20]
 800b532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	68fa      	ldr	r2, [r7, #12]
 800b538:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	685a      	ldr	r2, [r3, #4]
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	693a      	ldr	r2, [r7, #16]
 800b546:	621a      	str	r2, [r3, #32]
}
 800b548:	bf00      	nop
 800b54a:	371c      	adds	r7, #28
 800b54c:	46bd      	mov	sp, r7
 800b54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b552:	4770      	bx	lr
 800b554:	40010000 	.word	0x40010000
 800b558:	40010400 	.word	0x40010400
 800b55c:	40014000 	.word	0x40014000
 800b560:	40014400 	.word	0x40014400
 800b564:	40014800 	.word	0x40014800

0800b568 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b568:	b480      	push	{r7}
 800b56a:	b087      	sub	sp, #28
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6a1b      	ldr	r3, [r3, #32]
 800b576:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6a1b      	ldr	r3, [r3, #32]
 800b582:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	685b      	ldr	r3, [r3, #4]
 800b588:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b58e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	021b      	lsls	r3, r3, #8
 800b59e:	68fa      	ldr	r2, [r7, #12]
 800b5a0:	4313      	orrs	r3, r2
 800b5a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b5aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	689b      	ldr	r3, [r3, #8]
 800b5b0:	051b      	lsls	r3, r3, #20
 800b5b2:	693a      	ldr	r2, [r7, #16]
 800b5b4:	4313      	orrs	r3, r2
 800b5b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	4a18      	ldr	r2, [pc, #96]	; (800b61c <TIM_OC6_SetConfig+0xb4>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d00f      	beq.n	800b5e0 <TIM_OC6_SetConfig+0x78>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	4a17      	ldr	r2, [pc, #92]	; (800b620 <TIM_OC6_SetConfig+0xb8>)
 800b5c4:	4293      	cmp	r3, r2
 800b5c6:	d00b      	beq.n	800b5e0 <TIM_OC6_SetConfig+0x78>
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	4a16      	ldr	r2, [pc, #88]	; (800b624 <TIM_OC6_SetConfig+0xbc>)
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d007      	beq.n	800b5e0 <TIM_OC6_SetConfig+0x78>
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	4a15      	ldr	r2, [pc, #84]	; (800b628 <TIM_OC6_SetConfig+0xc0>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d003      	beq.n	800b5e0 <TIM_OC6_SetConfig+0x78>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	4a14      	ldr	r2, [pc, #80]	; (800b62c <TIM_OC6_SetConfig+0xc4>)
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d109      	bne.n	800b5f4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b5e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	695b      	ldr	r3, [r3, #20]
 800b5ec:	029b      	lsls	r3, r3, #10
 800b5ee:	697a      	ldr	r2, [r7, #20]
 800b5f0:	4313      	orrs	r3, r2
 800b5f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	697a      	ldr	r2, [r7, #20]
 800b5f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	68fa      	ldr	r2, [r7, #12]
 800b5fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	685a      	ldr	r2, [r3, #4]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	693a      	ldr	r2, [r7, #16]
 800b60c:	621a      	str	r2, [r3, #32]
}
 800b60e:	bf00      	nop
 800b610:	371c      	adds	r7, #28
 800b612:	46bd      	mov	sp, r7
 800b614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b618:	4770      	bx	lr
 800b61a:	bf00      	nop
 800b61c:	40010000 	.word	0x40010000
 800b620:	40010400 	.word	0x40010400
 800b624:	40014000 	.word	0x40014000
 800b628:	40014400 	.word	0x40014400
 800b62c:	40014800 	.word	0x40014800

0800b630 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b630:	b480      	push	{r7}
 800b632:	b087      	sub	sp, #28
 800b634:	af00      	add	r7, sp, #0
 800b636:	60f8      	str	r0, [r7, #12]
 800b638:	60b9      	str	r1, [r7, #8]
 800b63a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	f003 031f 	and.w	r3, r3, #31
 800b642:	2201      	movs	r2, #1
 800b644:	fa02 f303 	lsl.w	r3, r2, r3
 800b648:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	6a1a      	ldr	r2, [r3, #32]
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	43db      	mvns	r3, r3
 800b652:	401a      	ands	r2, r3
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	6a1a      	ldr	r2, [r3, #32]
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	f003 031f 	and.w	r3, r3, #31
 800b662:	6879      	ldr	r1, [r7, #4]
 800b664:	fa01 f303 	lsl.w	r3, r1, r3
 800b668:	431a      	orrs	r2, r3
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	621a      	str	r2, [r3, #32]
}
 800b66e:	bf00      	nop
 800b670:	371c      	adds	r7, #28
 800b672:	46bd      	mov	sp, r7
 800b674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b678:	4770      	bx	lr
	...

0800b67c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b085      	sub	sp, #20
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d101      	bne.n	800b694 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b690:	2302      	movs	r3, #2
 800b692:	e068      	b.n	800b766 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2201      	movs	r2, #1
 800b698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2202      	movs	r2, #2
 800b6a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	685b      	ldr	r3, [r3, #4]
 800b6aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	689b      	ldr	r3, [r3, #8]
 800b6b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4a2e      	ldr	r2, [pc, #184]	; (800b774 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d004      	beq.n	800b6c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	4a2d      	ldr	r2, [pc, #180]	; (800b778 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d108      	bne.n	800b6da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b6ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	685b      	ldr	r3, [r3, #4]
 800b6d4:	68fa      	ldr	r2, [r7, #12]
 800b6d6:	4313      	orrs	r3, r2
 800b6d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	68fa      	ldr	r2, [r7, #12]
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	68fa      	ldr	r2, [r7, #12]
 800b6f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	4a1e      	ldr	r2, [pc, #120]	; (800b774 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d01d      	beq.n	800b73a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b706:	d018      	beq.n	800b73a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4a1b      	ldr	r2, [pc, #108]	; (800b77c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d013      	beq.n	800b73a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	4a1a      	ldr	r2, [pc, #104]	; (800b780 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d00e      	beq.n	800b73a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4a18      	ldr	r2, [pc, #96]	; (800b784 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b722:	4293      	cmp	r3, r2
 800b724:	d009      	beq.n	800b73a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4a13      	ldr	r2, [pc, #76]	; (800b778 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d004      	beq.n	800b73a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	4a14      	ldr	r2, [pc, #80]	; (800b788 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b736:	4293      	cmp	r3, r2
 800b738:	d10c      	bne.n	800b754 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b740:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	689b      	ldr	r3, [r3, #8]
 800b746:	68ba      	ldr	r2, [r7, #8]
 800b748:	4313      	orrs	r3, r2
 800b74a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	68ba      	ldr	r2, [r7, #8]
 800b752:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2201      	movs	r2, #1
 800b758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2200      	movs	r2, #0
 800b760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b764:	2300      	movs	r3, #0
}
 800b766:	4618      	mov	r0, r3
 800b768:	3714      	adds	r7, #20
 800b76a:	46bd      	mov	sp, r7
 800b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b770:	4770      	bx	lr
 800b772:	bf00      	nop
 800b774:	40010000 	.word	0x40010000
 800b778:	40010400 	.word	0x40010400
 800b77c:	40000400 	.word	0x40000400
 800b780:	40000800 	.word	0x40000800
 800b784:	40000c00 	.word	0x40000c00
 800b788:	40001800 	.word	0x40001800

0800b78c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b085      	sub	sp, #20
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b796:	2300      	movs	r3, #0
 800b798:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	d101      	bne.n	800b7a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b7a4:	2302      	movs	r3, #2
 800b7a6:	e065      	b.n	800b874 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2201      	movs	r2, #1
 800b7ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	68db      	ldr	r3, [r3, #12]
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	689b      	ldr	r3, [r3, #8]
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	685b      	ldr	r3, [r3, #4]
 800b7d6:	4313      	orrs	r3, r2
 800b7d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	4313      	orrs	r3, r2
 800b7e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	691b      	ldr	r3, [r3, #16]
 800b7f2:	4313      	orrs	r3, r2
 800b7f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	695b      	ldr	r3, [r3, #20]
 800b800:	4313      	orrs	r3, r2
 800b802:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b80e:	4313      	orrs	r3, r2
 800b810:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	699b      	ldr	r3, [r3, #24]
 800b81c:	041b      	lsls	r3, r3, #16
 800b81e:	4313      	orrs	r3, r2
 800b820:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	4a16      	ldr	r2, [pc, #88]	; (800b880 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b828:	4293      	cmp	r3, r2
 800b82a:	d004      	beq.n	800b836 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4a14      	ldr	r2, [pc, #80]	; (800b884 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b832:	4293      	cmp	r3, r2
 800b834:	d115      	bne.n	800b862 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b840:	051b      	lsls	r3, r3, #20
 800b842:	4313      	orrs	r3, r2
 800b844:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	69db      	ldr	r3, [r3, #28]
 800b850:	4313      	orrs	r3, r2
 800b852:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	6a1b      	ldr	r3, [r3, #32]
 800b85e:	4313      	orrs	r3, r2
 800b860:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	68fa      	ldr	r2, [r7, #12]
 800b868:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2200      	movs	r2, #0
 800b86e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b872:	2300      	movs	r3, #0
}
 800b874:	4618      	mov	r0, r3
 800b876:	3714      	adds	r7, #20
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr
 800b880:	40010000 	.word	0x40010000
 800b884:	40010400 	.word	0x40010400

0800b888 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b082      	sub	sp, #8
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d101      	bne.n	800b89a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b896:	2301      	movs	r3, #1
 800b898:	e042      	b.n	800b920 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d106      	bne.n	800b8b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f7f6 fcf3 	bl	8002298 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2224      	movs	r2, #36	; 0x24
 800b8b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	681a      	ldr	r2, [r3, #0]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f022 0201 	bic.w	r2, r2, #1
 800b8c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f000 f82c 	bl	800b928 <UART_SetConfig>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	2b01      	cmp	r3, #1
 800b8d4:	d101      	bne.n	800b8da <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	e022      	b.n	800b920 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d002      	beq.n	800b8e8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f000 fd80 	bl	800c3e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	685a      	ldr	r2, [r3, #4]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b8f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	689a      	ldr	r2, [r3, #8]
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b906:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	681a      	ldr	r2, [r3, #0]
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f042 0201 	orr.w	r2, r2, #1
 800b916:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f000 fe07 	bl	800c52c <UART_CheckIdleState>
 800b91e:	4603      	mov	r3, r0
}
 800b920:	4618      	mov	r0, r3
 800b922:	3708      	adds	r7, #8
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b928:	b5b0      	push	{r4, r5, r7, lr}
 800b92a:	b08e      	sub	sp, #56	; 0x38
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b930:	2300      	movs	r3, #0
 800b932:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	689a      	ldr	r2, [r3, #8]
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	691b      	ldr	r3, [r3, #16]
 800b93e:	431a      	orrs	r2, r3
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	695b      	ldr	r3, [r3, #20]
 800b944:	431a      	orrs	r2, r3
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	69db      	ldr	r3, [r3, #28]
 800b94a:	4313      	orrs	r3, r2
 800b94c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	681a      	ldr	r2, [r3, #0]
 800b954:	4bbf      	ldr	r3, [pc, #764]	; (800bc54 <UART_SetConfig+0x32c>)
 800b956:	4013      	ands	r3, r2
 800b958:	687a      	ldr	r2, [r7, #4]
 800b95a:	6812      	ldr	r2, [r2, #0]
 800b95c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b95e:	430b      	orrs	r3, r1
 800b960:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	68da      	ldr	r2, [r3, #12]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	430a      	orrs	r2, r1
 800b976:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	699b      	ldr	r3, [r3, #24]
 800b97c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	4ab5      	ldr	r2, [pc, #724]	; (800bc58 <UART_SetConfig+0x330>)
 800b984:	4293      	cmp	r3, r2
 800b986:	d004      	beq.n	800b992 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6a1b      	ldr	r3, [r3, #32]
 800b98c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b98e:	4313      	orrs	r3, r2
 800b990:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	689a      	ldr	r2, [r3, #8]
 800b998:	4bb0      	ldr	r3, [pc, #704]	; (800bc5c <UART_SetConfig+0x334>)
 800b99a:	4013      	ands	r3, r2
 800b99c:	687a      	ldr	r2, [r7, #4]
 800b99e:	6812      	ldr	r2, [r2, #0]
 800b9a0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b9a2:	430b      	orrs	r3, r1
 800b9a4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ac:	f023 010f 	bic.w	r1, r3, #15
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	430a      	orrs	r2, r1
 800b9ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	4aa7      	ldr	r2, [pc, #668]	; (800bc60 <UART_SetConfig+0x338>)
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d176      	bne.n	800bab4 <UART_SetConfig+0x18c>
 800b9c6:	4ba7      	ldr	r3, [pc, #668]	; (800bc64 <UART_SetConfig+0x33c>)
 800b9c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b9ce:	2b28      	cmp	r3, #40	; 0x28
 800b9d0:	d86c      	bhi.n	800baac <UART_SetConfig+0x184>
 800b9d2:	a201      	add	r2, pc, #4	; (adr r2, 800b9d8 <UART_SetConfig+0xb0>)
 800b9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9d8:	0800ba7d 	.word	0x0800ba7d
 800b9dc:	0800baad 	.word	0x0800baad
 800b9e0:	0800baad 	.word	0x0800baad
 800b9e4:	0800baad 	.word	0x0800baad
 800b9e8:	0800baad 	.word	0x0800baad
 800b9ec:	0800baad 	.word	0x0800baad
 800b9f0:	0800baad 	.word	0x0800baad
 800b9f4:	0800baad 	.word	0x0800baad
 800b9f8:	0800ba85 	.word	0x0800ba85
 800b9fc:	0800baad 	.word	0x0800baad
 800ba00:	0800baad 	.word	0x0800baad
 800ba04:	0800baad 	.word	0x0800baad
 800ba08:	0800baad 	.word	0x0800baad
 800ba0c:	0800baad 	.word	0x0800baad
 800ba10:	0800baad 	.word	0x0800baad
 800ba14:	0800baad 	.word	0x0800baad
 800ba18:	0800ba8d 	.word	0x0800ba8d
 800ba1c:	0800baad 	.word	0x0800baad
 800ba20:	0800baad 	.word	0x0800baad
 800ba24:	0800baad 	.word	0x0800baad
 800ba28:	0800baad 	.word	0x0800baad
 800ba2c:	0800baad 	.word	0x0800baad
 800ba30:	0800baad 	.word	0x0800baad
 800ba34:	0800baad 	.word	0x0800baad
 800ba38:	0800ba95 	.word	0x0800ba95
 800ba3c:	0800baad 	.word	0x0800baad
 800ba40:	0800baad 	.word	0x0800baad
 800ba44:	0800baad 	.word	0x0800baad
 800ba48:	0800baad 	.word	0x0800baad
 800ba4c:	0800baad 	.word	0x0800baad
 800ba50:	0800baad 	.word	0x0800baad
 800ba54:	0800baad 	.word	0x0800baad
 800ba58:	0800ba9d 	.word	0x0800ba9d
 800ba5c:	0800baad 	.word	0x0800baad
 800ba60:	0800baad 	.word	0x0800baad
 800ba64:	0800baad 	.word	0x0800baad
 800ba68:	0800baad 	.word	0x0800baad
 800ba6c:	0800baad 	.word	0x0800baad
 800ba70:	0800baad 	.word	0x0800baad
 800ba74:	0800baad 	.word	0x0800baad
 800ba78:	0800baa5 	.word	0x0800baa5
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba82:	e222      	b.n	800beca <UART_SetConfig+0x5a2>
 800ba84:	2304      	movs	r3, #4
 800ba86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba8a:	e21e      	b.n	800beca <UART_SetConfig+0x5a2>
 800ba8c:	2308      	movs	r3, #8
 800ba8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba92:	e21a      	b.n	800beca <UART_SetConfig+0x5a2>
 800ba94:	2310      	movs	r3, #16
 800ba96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba9a:	e216      	b.n	800beca <UART_SetConfig+0x5a2>
 800ba9c:	2320      	movs	r3, #32
 800ba9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baa2:	e212      	b.n	800beca <UART_SetConfig+0x5a2>
 800baa4:	2340      	movs	r3, #64	; 0x40
 800baa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baaa:	e20e      	b.n	800beca <UART_SetConfig+0x5a2>
 800baac:	2380      	movs	r3, #128	; 0x80
 800baae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bab2:	e20a      	b.n	800beca <UART_SetConfig+0x5a2>
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	4a6b      	ldr	r2, [pc, #428]	; (800bc68 <UART_SetConfig+0x340>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d130      	bne.n	800bb20 <UART_SetConfig+0x1f8>
 800babe:	4b69      	ldr	r3, [pc, #420]	; (800bc64 <UART_SetConfig+0x33c>)
 800bac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bac2:	f003 0307 	and.w	r3, r3, #7
 800bac6:	2b05      	cmp	r3, #5
 800bac8:	d826      	bhi.n	800bb18 <UART_SetConfig+0x1f0>
 800baca:	a201      	add	r2, pc, #4	; (adr r2, 800bad0 <UART_SetConfig+0x1a8>)
 800bacc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bad0:	0800bae9 	.word	0x0800bae9
 800bad4:	0800baf1 	.word	0x0800baf1
 800bad8:	0800baf9 	.word	0x0800baf9
 800badc:	0800bb01 	.word	0x0800bb01
 800bae0:	0800bb09 	.word	0x0800bb09
 800bae4:	0800bb11 	.word	0x0800bb11
 800bae8:	2300      	movs	r3, #0
 800baea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baee:	e1ec      	b.n	800beca <UART_SetConfig+0x5a2>
 800baf0:	2304      	movs	r3, #4
 800baf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baf6:	e1e8      	b.n	800beca <UART_SetConfig+0x5a2>
 800baf8:	2308      	movs	r3, #8
 800bafa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bafe:	e1e4      	b.n	800beca <UART_SetConfig+0x5a2>
 800bb00:	2310      	movs	r3, #16
 800bb02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb06:	e1e0      	b.n	800beca <UART_SetConfig+0x5a2>
 800bb08:	2320      	movs	r3, #32
 800bb0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb0e:	e1dc      	b.n	800beca <UART_SetConfig+0x5a2>
 800bb10:	2340      	movs	r3, #64	; 0x40
 800bb12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb16:	e1d8      	b.n	800beca <UART_SetConfig+0x5a2>
 800bb18:	2380      	movs	r3, #128	; 0x80
 800bb1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb1e:	e1d4      	b.n	800beca <UART_SetConfig+0x5a2>
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	4a51      	ldr	r2, [pc, #324]	; (800bc6c <UART_SetConfig+0x344>)
 800bb26:	4293      	cmp	r3, r2
 800bb28:	d130      	bne.n	800bb8c <UART_SetConfig+0x264>
 800bb2a:	4b4e      	ldr	r3, [pc, #312]	; (800bc64 <UART_SetConfig+0x33c>)
 800bb2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb2e:	f003 0307 	and.w	r3, r3, #7
 800bb32:	2b05      	cmp	r3, #5
 800bb34:	d826      	bhi.n	800bb84 <UART_SetConfig+0x25c>
 800bb36:	a201      	add	r2, pc, #4	; (adr r2, 800bb3c <UART_SetConfig+0x214>)
 800bb38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb3c:	0800bb55 	.word	0x0800bb55
 800bb40:	0800bb5d 	.word	0x0800bb5d
 800bb44:	0800bb65 	.word	0x0800bb65
 800bb48:	0800bb6d 	.word	0x0800bb6d
 800bb4c:	0800bb75 	.word	0x0800bb75
 800bb50:	0800bb7d 	.word	0x0800bb7d
 800bb54:	2300      	movs	r3, #0
 800bb56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb5a:	e1b6      	b.n	800beca <UART_SetConfig+0x5a2>
 800bb5c:	2304      	movs	r3, #4
 800bb5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb62:	e1b2      	b.n	800beca <UART_SetConfig+0x5a2>
 800bb64:	2308      	movs	r3, #8
 800bb66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb6a:	e1ae      	b.n	800beca <UART_SetConfig+0x5a2>
 800bb6c:	2310      	movs	r3, #16
 800bb6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb72:	e1aa      	b.n	800beca <UART_SetConfig+0x5a2>
 800bb74:	2320      	movs	r3, #32
 800bb76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb7a:	e1a6      	b.n	800beca <UART_SetConfig+0x5a2>
 800bb7c:	2340      	movs	r3, #64	; 0x40
 800bb7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb82:	e1a2      	b.n	800beca <UART_SetConfig+0x5a2>
 800bb84:	2380      	movs	r3, #128	; 0x80
 800bb86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb8a:	e19e      	b.n	800beca <UART_SetConfig+0x5a2>
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	4a37      	ldr	r2, [pc, #220]	; (800bc70 <UART_SetConfig+0x348>)
 800bb92:	4293      	cmp	r3, r2
 800bb94:	d130      	bne.n	800bbf8 <UART_SetConfig+0x2d0>
 800bb96:	4b33      	ldr	r3, [pc, #204]	; (800bc64 <UART_SetConfig+0x33c>)
 800bb98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb9a:	f003 0307 	and.w	r3, r3, #7
 800bb9e:	2b05      	cmp	r3, #5
 800bba0:	d826      	bhi.n	800bbf0 <UART_SetConfig+0x2c8>
 800bba2:	a201      	add	r2, pc, #4	; (adr r2, 800bba8 <UART_SetConfig+0x280>)
 800bba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bba8:	0800bbc1 	.word	0x0800bbc1
 800bbac:	0800bbc9 	.word	0x0800bbc9
 800bbb0:	0800bbd1 	.word	0x0800bbd1
 800bbb4:	0800bbd9 	.word	0x0800bbd9
 800bbb8:	0800bbe1 	.word	0x0800bbe1
 800bbbc:	0800bbe9 	.word	0x0800bbe9
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbc6:	e180      	b.n	800beca <UART_SetConfig+0x5a2>
 800bbc8:	2304      	movs	r3, #4
 800bbca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbce:	e17c      	b.n	800beca <UART_SetConfig+0x5a2>
 800bbd0:	2308      	movs	r3, #8
 800bbd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbd6:	e178      	b.n	800beca <UART_SetConfig+0x5a2>
 800bbd8:	2310      	movs	r3, #16
 800bbda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbde:	e174      	b.n	800beca <UART_SetConfig+0x5a2>
 800bbe0:	2320      	movs	r3, #32
 800bbe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbe6:	e170      	b.n	800beca <UART_SetConfig+0x5a2>
 800bbe8:	2340      	movs	r3, #64	; 0x40
 800bbea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbee:	e16c      	b.n	800beca <UART_SetConfig+0x5a2>
 800bbf0:	2380      	movs	r3, #128	; 0x80
 800bbf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bbf6:	e168      	b.n	800beca <UART_SetConfig+0x5a2>
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	4a1d      	ldr	r2, [pc, #116]	; (800bc74 <UART_SetConfig+0x34c>)
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d142      	bne.n	800bc88 <UART_SetConfig+0x360>
 800bc02:	4b18      	ldr	r3, [pc, #96]	; (800bc64 <UART_SetConfig+0x33c>)
 800bc04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc06:	f003 0307 	and.w	r3, r3, #7
 800bc0a:	2b05      	cmp	r3, #5
 800bc0c:	d838      	bhi.n	800bc80 <UART_SetConfig+0x358>
 800bc0e:	a201      	add	r2, pc, #4	; (adr r2, 800bc14 <UART_SetConfig+0x2ec>)
 800bc10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc14:	0800bc2d 	.word	0x0800bc2d
 800bc18:	0800bc35 	.word	0x0800bc35
 800bc1c:	0800bc3d 	.word	0x0800bc3d
 800bc20:	0800bc45 	.word	0x0800bc45
 800bc24:	0800bc4d 	.word	0x0800bc4d
 800bc28:	0800bc79 	.word	0x0800bc79
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc32:	e14a      	b.n	800beca <UART_SetConfig+0x5a2>
 800bc34:	2304      	movs	r3, #4
 800bc36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc3a:	e146      	b.n	800beca <UART_SetConfig+0x5a2>
 800bc3c:	2308      	movs	r3, #8
 800bc3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc42:	e142      	b.n	800beca <UART_SetConfig+0x5a2>
 800bc44:	2310      	movs	r3, #16
 800bc46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc4a:	e13e      	b.n	800beca <UART_SetConfig+0x5a2>
 800bc4c:	2320      	movs	r3, #32
 800bc4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc52:	e13a      	b.n	800beca <UART_SetConfig+0x5a2>
 800bc54:	cfff69f3 	.word	0xcfff69f3
 800bc58:	58000c00 	.word	0x58000c00
 800bc5c:	11fff4ff 	.word	0x11fff4ff
 800bc60:	40011000 	.word	0x40011000
 800bc64:	58024400 	.word	0x58024400
 800bc68:	40004400 	.word	0x40004400
 800bc6c:	40004800 	.word	0x40004800
 800bc70:	40004c00 	.word	0x40004c00
 800bc74:	40005000 	.word	0x40005000
 800bc78:	2340      	movs	r3, #64	; 0x40
 800bc7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc7e:	e124      	b.n	800beca <UART_SetConfig+0x5a2>
 800bc80:	2380      	movs	r3, #128	; 0x80
 800bc82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc86:	e120      	b.n	800beca <UART_SetConfig+0x5a2>
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	4acc      	ldr	r2, [pc, #816]	; (800bfc0 <UART_SetConfig+0x698>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d176      	bne.n	800bd80 <UART_SetConfig+0x458>
 800bc92:	4bcc      	ldr	r3, [pc, #816]	; (800bfc4 <UART_SetConfig+0x69c>)
 800bc94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bc9a:	2b28      	cmp	r3, #40	; 0x28
 800bc9c:	d86c      	bhi.n	800bd78 <UART_SetConfig+0x450>
 800bc9e:	a201      	add	r2, pc, #4	; (adr r2, 800bca4 <UART_SetConfig+0x37c>)
 800bca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bca4:	0800bd49 	.word	0x0800bd49
 800bca8:	0800bd79 	.word	0x0800bd79
 800bcac:	0800bd79 	.word	0x0800bd79
 800bcb0:	0800bd79 	.word	0x0800bd79
 800bcb4:	0800bd79 	.word	0x0800bd79
 800bcb8:	0800bd79 	.word	0x0800bd79
 800bcbc:	0800bd79 	.word	0x0800bd79
 800bcc0:	0800bd79 	.word	0x0800bd79
 800bcc4:	0800bd51 	.word	0x0800bd51
 800bcc8:	0800bd79 	.word	0x0800bd79
 800bccc:	0800bd79 	.word	0x0800bd79
 800bcd0:	0800bd79 	.word	0x0800bd79
 800bcd4:	0800bd79 	.word	0x0800bd79
 800bcd8:	0800bd79 	.word	0x0800bd79
 800bcdc:	0800bd79 	.word	0x0800bd79
 800bce0:	0800bd79 	.word	0x0800bd79
 800bce4:	0800bd59 	.word	0x0800bd59
 800bce8:	0800bd79 	.word	0x0800bd79
 800bcec:	0800bd79 	.word	0x0800bd79
 800bcf0:	0800bd79 	.word	0x0800bd79
 800bcf4:	0800bd79 	.word	0x0800bd79
 800bcf8:	0800bd79 	.word	0x0800bd79
 800bcfc:	0800bd79 	.word	0x0800bd79
 800bd00:	0800bd79 	.word	0x0800bd79
 800bd04:	0800bd61 	.word	0x0800bd61
 800bd08:	0800bd79 	.word	0x0800bd79
 800bd0c:	0800bd79 	.word	0x0800bd79
 800bd10:	0800bd79 	.word	0x0800bd79
 800bd14:	0800bd79 	.word	0x0800bd79
 800bd18:	0800bd79 	.word	0x0800bd79
 800bd1c:	0800bd79 	.word	0x0800bd79
 800bd20:	0800bd79 	.word	0x0800bd79
 800bd24:	0800bd69 	.word	0x0800bd69
 800bd28:	0800bd79 	.word	0x0800bd79
 800bd2c:	0800bd79 	.word	0x0800bd79
 800bd30:	0800bd79 	.word	0x0800bd79
 800bd34:	0800bd79 	.word	0x0800bd79
 800bd38:	0800bd79 	.word	0x0800bd79
 800bd3c:	0800bd79 	.word	0x0800bd79
 800bd40:	0800bd79 	.word	0x0800bd79
 800bd44:	0800bd71 	.word	0x0800bd71
 800bd48:	2301      	movs	r3, #1
 800bd4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd4e:	e0bc      	b.n	800beca <UART_SetConfig+0x5a2>
 800bd50:	2304      	movs	r3, #4
 800bd52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd56:	e0b8      	b.n	800beca <UART_SetConfig+0x5a2>
 800bd58:	2308      	movs	r3, #8
 800bd5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd5e:	e0b4      	b.n	800beca <UART_SetConfig+0x5a2>
 800bd60:	2310      	movs	r3, #16
 800bd62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd66:	e0b0      	b.n	800beca <UART_SetConfig+0x5a2>
 800bd68:	2320      	movs	r3, #32
 800bd6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd6e:	e0ac      	b.n	800beca <UART_SetConfig+0x5a2>
 800bd70:	2340      	movs	r3, #64	; 0x40
 800bd72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd76:	e0a8      	b.n	800beca <UART_SetConfig+0x5a2>
 800bd78:	2380      	movs	r3, #128	; 0x80
 800bd7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd7e:	e0a4      	b.n	800beca <UART_SetConfig+0x5a2>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	4a90      	ldr	r2, [pc, #576]	; (800bfc8 <UART_SetConfig+0x6a0>)
 800bd86:	4293      	cmp	r3, r2
 800bd88:	d130      	bne.n	800bdec <UART_SetConfig+0x4c4>
 800bd8a:	4b8e      	ldr	r3, [pc, #568]	; (800bfc4 <UART_SetConfig+0x69c>)
 800bd8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd8e:	f003 0307 	and.w	r3, r3, #7
 800bd92:	2b05      	cmp	r3, #5
 800bd94:	d826      	bhi.n	800bde4 <UART_SetConfig+0x4bc>
 800bd96:	a201      	add	r2, pc, #4	; (adr r2, 800bd9c <UART_SetConfig+0x474>)
 800bd98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd9c:	0800bdb5 	.word	0x0800bdb5
 800bda0:	0800bdbd 	.word	0x0800bdbd
 800bda4:	0800bdc5 	.word	0x0800bdc5
 800bda8:	0800bdcd 	.word	0x0800bdcd
 800bdac:	0800bdd5 	.word	0x0800bdd5
 800bdb0:	0800bddd 	.word	0x0800bddd
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdba:	e086      	b.n	800beca <UART_SetConfig+0x5a2>
 800bdbc:	2304      	movs	r3, #4
 800bdbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdc2:	e082      	b.n	800beca <UART_SetConfig+0x5a2>
 800bdc4:	2308      	movs	r3, #8
 800bdc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdca:	e07e      	b.n	800beca <UART_SetConfig+0x5a2>
 800bdcc:	2310      	movs	r3, #16
 800bdce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdd2:	e07a      	b.n	800beca <UART_SetConfig+0x5a2>
 800bdd4:	2320      	movs	r3, #32
 800bdd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdda:	e076      	b.n	800beca <UART_SetConfig+0x5a2>
 800bddc:	2340      	movs	r3, #64	; 0x40
 800bdde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bde2:	e072      	b.n	800beca <UART_SetConfig+0x5a2>
 800bde4:	2380      	movs	r3, #128	; 0x80
 800bde6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bdea:	e06e      	b.n	800beca <UART_SetConfig+0x5a2>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	4a76      	ldr	r2, [pc, #472]	; (800bfcc <UART_SetConfig+0x6a4>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d130      	bne.n	800be58 <UART_SetConfig+0x530>
 800bdf6:	4b73      	ldr	r3, [pc, #460]	; (800bfc4 <UART_SetConfig+0x69c>)
 800bdf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdfa:	f003 0307 	and.w	r3, r3, #7
 800bdfe:	2b05      	cmp	r3, #5
 800be00:	d826      	bhi.n	800be50 <UART_SetConfig+0x528>
 800be02:	a201      	add	r2, pc, #4	; (adr r2, 800be08 <UART_SetConfig+0x4e0>)
 800be04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be08:	0800be21 	.word	0x0800be21
 800be0c:	0800be29 	.word	0x0800be29
 800be10:	0800be31 	.word	0x0800be31
 800be14:	0800be39 	.word	0x0800be39
 800be18:	0800be41 	.word	0x0800be41
 800be1c:	0800be49 	.word	0x0800be49
 800be20:	2300      	movs	r3, #0
 800be22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be26:	e050      	b.n	800beca <UART_SetConfig+0x5a2>
 800be28:	2304      	movs	r3, #4
 800be2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be2e:	e04c      	b.n	800beca <UART_SetConfig+0x5a2>
 800be30:	2308      	movs	r3, #8
 800be32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be36:	e048      	b.n	800beca <UART_SetConfig+0x5a2>
 800be38:	2310      	movs	r3, #16
 800be3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be3e:	e044      	b.n	800beca <UART_SetConfig+0x5a2>
 800be40:	2320      	movs	r3, #32
 800be42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be46:	e040      	b.n	800beca <UART_SetConfig+0x5a2>
 800be48:	2340      	movs	r3, #64	; 0x40
 800be4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be4e:	e03c      	b.n	800beca <UART_SetConfig+0x5a2>
 800be50:	2380      	movs	r3, #128	; 0x80
 800be52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be56:	e038      	b.n	800beca <UART_SetConfig+0x5a2>
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	4a5c      	ldr	r2, [pc, #368]	; (800bfd0 <UART_SetConfig+0x6a8>)
 800be5e:	4293      	cmp	r3, r2
 800be60:	d130      	bne.n	800bec4 <UART_SetConfig+0x59c>
 800be62:	4b58      	ldr	r3, [pc, #352]	; (800bfc4 <UART_SetConfig+0x69c>)
 800be64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be66:	f003 0307 	and.w	r3, r3, #7
 800be6a:	2b05      	cmp	r3, #5
 800be6c:	d826      	bhi.n	800bebc <UART_SetConfig+0x594>
 800be6e:	a201      	add	r2, pc, #4	; (adr r2, 800be74 <UART_SetConfig+0x54c>)
 800be70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be74:	0800be8d 	.word	0x0800be8d
 800be78:	0800be95 	.word	0x0800be95
 800be7c:	0800be9d 	.word	0x0800be9d
 800be80:	0800bea5 	.word	0x0800bea5
 800be84:	0800bead 	.word	0x0800bead
 800be88:	0800beb5 	.word	0x0800beb5
 800be8c:	2302      	movs	r3, #2
 800be8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be92:	e01a      	b.n	800beca <UART_SetConfig+0x5a2>
 800be94:	2304      	movs	r3, #4
 800be96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800be9a:	e016      	b.n	800beca <UART_SetConfig+0x5a2>
 800be9c:	2308      	movs	r3, #8
 800be9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bea2:	e012      	b.n	800beca <UART_SetConfig+0x5a2>
 800bea4:	2310      	movs	r3, #16
 800bea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800beaa:	e00e      	b.n	800beca <UART_SetConfig+0x5a2>
 800beac:	2320      	movs	r3, #32
 800beae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800beb2:	e00a      	b.n	800beca <UART_SetConfig+0x5a2>
 800beb4:	2340      	movs	r3, #64	; 0x40
 800beb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800beba:	e006      	b.n	800beca <UART_SetConfig+0x5a2>
 800bebc:	2380      	movs	r3, #128	; 0x80
 800bebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bec2:	e002      	b.n	800beca <UART_SetConfig+0x5a2>
 800bec4:	2380      	movs	r3, #128	; 0x80
 800bec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	4a40      	ldr	r2, [pc, #256]	; (800bfd0 <UART_SetConfig+0x6a8>)
 800bed0:	4293      	cmp	r3, r2
 800bed2:	f040 80ef 	bne.w	800c0b4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bed6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800beda:	2b20      	cmp	r3, #32
 800bedc:	dc46      	bgt.n	800bf6c <UART_SetConfig+0x644>
 800bede:	2b02      	cmp	r3, #2
 800bee0:	f2c0 8081 	blt.w	800bfe6 <UART_SetConfig+0x6be>
 800bee4:	3b02      	subs	r3, #2
 800bee6:	2b1e      	cmp	r3, #30
 800bee8:	d87d      	bhi.n	800bfe6 <UART_SetConfig+0x6be>
 800beea:	a201      	add	r2, pc, #4	; (adr r2, 800bef0 <UART_SetConfig+0x5c8>)
 800beec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bef0:	0800bf73 	.word	0x0800bf73
 800bef4:	0800bfe7 	.word	0x0800bfe7
 800bef8:	0800bf7b 	.word	0x0800bf7b
 800befc:	0800bfe7 	.word	0x0800bfe7
 800bf00:	0800bfe7 	.word	0x0800bfe7
 800bf04:	0800bfe7 	.word	0x0800bfe7
 800bf08:	0800bf8b 	.word	0x0800bf8b
 800bf0c:	0800bfe7 	.word	0x0800bfe7
 800bf10:	0800bfe7 	.word	0x0800bfe7
 800bf14:	0800bfe7 	.word	0x0800bfe7
 800bf18:	0800bfe7 	.word	0x0800bfe7
 800bf1c:	0800bfe7 	.word	0x0800bfe7
 800bf20:	0800bfe7 	.word	0x0800bfe7
 800bf24:	0800bfe7 	.word	0x0800bfe7
 800bf28:	0800bf9b 	.word	0x0800bf9b
 800bf2c:	0800bfe7 	.word	0x0800bfe7
 800bf30:	0800bfe7 	.word	0x0800bfe7
 800bf34:	0800bfe7 	.word	0x0800bfe7
 800bf38:	0800bfe7 	.word	0x0800bfe7
 800bf3c:	0800bfe7 	.word	0x0800bfe7
 800bf40:	0800bfe7 	.word	0x0800bfe7
 800bf44:	0800bfe7 	.word	0x0800bfe7
 800bf48:	0800bfe7 	.word	0x0800bfe7
 800bf4c:	0800bfe7 	.word	0x0800bfe7
 800bf50:	0800bfe7 	.word	0x0800bfe7
 800bf54:	0800bfe7 	.word	0x0800bfe7
 800bf58:	0800bfe7 	.word	0x0800bfe7
 800bf5c:	0800bfe7 	.word	0x0800bfe7
 800bf60:	0800bfe7 	.word	0x0800bfe7
 800bf64:	0800bfe7 	.word	0x0800bfe7
 800bf68:	0800bfd9 	.word	0x0800bfd9
 800bf6c:	2b40      	cmp	r3, #64	; 0x40
 800bf6e:	d036      	beq.n	800bfde <UART_SetConfig+0x6b6>
 800bf70:	e039      	b.n	800bfe6 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bf72:	f7fd f879 	bl	8009068 <HAL_RCCEx_GetD3PCLK1Freq>
 800bf76:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800bf78:	e03b      	b.n	800bff2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf7a:	f107 0314 	add.w	r3, r7, #20
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f7fd f888 	bl	8009094 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bf84:	69bb      	ldr	r3, [r7, #24]
 800bf86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bf88:	e033      	b.n	800bff2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf8a:	f107 0308 	add.w	r3, r7, #8
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f7fd f9d4 	bl	800933c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bf98:	e02b      	b.n	800bff2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf9a:	4b0a      	ldr	r3, [pc, #40]	; (800bfc4 <UART_SetConfig+0x69c>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f003 0320 	and.w	r3, r3, #32
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d009      	beq.n	800bfba <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bfa6:	4b07      	ldr	r3, [pc, #28]	; (800bfc4 <UART_SetConfig+0x69c>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	08db      	lsrs	r3, r3, #3
 800bfac:	f003 0303 	and.w	r3, r3, #3
 800bfb0:	4a08      	ldr	r2, [pc, #32]	; (800bfd4 <UART_SetConfig+0x6ac>)
 800bfb2:	fa22 f303 	lsr.w	r3, r2, r3
 800bfb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bfb8:	e01b      	b.n	800bff2 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800bfba:	4b06      	ldr	r3, [pc, #24]	; (800bfd4 <UART_SetConfig+0x6ac>)
 800bfbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bfbe:	e018      	b.n	800bff2 <UART_SetConfig+0x6ca>
 800bfc0:	40011400 	.word	0x40011400
 800bfc4:	58024400 	.word	0x58024400
 800bfc8:	40007800 	.word	0x40007800
 800bfcc:	40007c00 	.word	0x40007c00
 800bfd0:	58000c00 	.word	0x58000c00
 800bfd4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bfd8:	4bc4      	ldr	r3, [pc, #784]	; (800c2ec <UART_SetConfig+0x9c4>)
 800bfda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bfdc:	e009      	b.n	800bff2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bfde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bfe2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bfe4:	e005      	b.n	800bff2 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800bfea:	2301      	movs	r3, #1
 800bfec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800bff0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	f000 81da 	beq.w	800c3ae <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bffe:	4abc      	ldr	r2, [pc, #752]	; (800c2f0 <UART_SetConfig+0x9c8>)
 800c000:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c004:	461a      	mov	r2, r3
 800c006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c008:	fbb3 f3f2 	udiv	r3, r3, r2
 800c00c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	685a      	ldr	r2, [r3, #4]
 800c012:	4613      	mov	r3, r2
 800c014:	005b      	lsls	r3, r3, #1
 800c016:	4413      	add	r3, r2
 800c018:	6a3a      	ldr	r2, [r7, #32]
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d305      	bcc.n	800c02a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	685b      	ldr	r3, [r3, #4]
 800c022:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c024:	6a3a      	ldr	r2, [r7, #32]
 800c026:	429a      	cmp	r2, r3
 800c028:	d903      	bls.n	800c032 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800c02a:	2301      	movs	r3, #1
 800c02c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c030:	e1bd      	b.n	800c3ae <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c034:	4618      	mov	r0, r3
 800c036:	f04f 0100 	mov.w	r1, #0
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c03e:	4aac      	ldr	r2, [pc, #688]	; (800c2f0 <UART_SetConfig+0x9c8>)
 800c040:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c044:	b29a      	uxth	r2, r3
 800c046:	f04f 0300 	mov.w	r3, #0
 800c04a:	f7f4 fb6d 	bl	8000728 <__aeabi_uldivmod>
 800c04e:	4602      	mov	r2, r0
 800c050:	460b      	mov	r3, r1
 800c052:	4610      	mov	r0, r2
 800c054:	4619      	mov	r1, r3
 800c056:	f04f 0200 	mov.w	r2, #0
 800c05a:	f04f 0300 	mov.w	r3, #0
 800c05e:	020b      	lsls	r3, r1, #8
 800c060:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c064:	0202      	lsls	r2, r0, #8
 800c066:	6879      	ldr	r1, [r7, #4]
 800c068:	6849      	ldr	r1, [r1, #4]
 800c06a:	0849      	lsrs	r1, r1, #1
 800c06c:	4608      	mov	r0, r1
 800c06e:	f04f 0100 	mov.w	r1, #0
 800c072:	1814      	adds	r4, r2, r0
 800c074:	eb43 0501 	adc.w	r5, r3, r1
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	685b      	ldr	r3, [r3, #4]
 800c07c:	461a      	mov	r2, r3
 800c07e:	f04f 0300 	mov.w	r3, #0
 800c082:	4620      	mov	r0, r4
 800c084:	4629      	mov	r1, r5
 800c086:	f7f4 fb4f 	bl	8000728 <__aeabi_uldivmod>
 800c08a:	4602      	mov	r2, r0
 800c08c:	460b      	mov	r3, r1
 800c08e:	4613      	mov	r3, r2
 800c090:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c094:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c098:	d308      	bcc.n	800c0ac <UART_SetConfig+0x784>
 800c09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c09c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c0a0:	d204      	bcs.n	800c0ac <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0a8:	60da      	str	r2, [r3, #12]
 800c0aa:	e180      	b.n	800c3ae <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c0b2:	e17c      	b.n	800c3ae <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	69db      	ldr	r3, [r3, #28]
 800c0b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c0bc:	f040 80bf 	bne.w	800c23e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800c0c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c0c4:	2b20      	cmp	r3, #32
 800c0c6:	dc49      	bgt.n	800c15c <UART_SetConfig+0x834>
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	db7c      	blt.n	800c1c6 <UART_SetConfig+0x89e>
 800c0cc:	2b20      	cmp	r3, #32
 800c0ce:	d87a      	bhi.n	800c1c6 <UART_SetConfig+0x89e>
 800c0d0:	a201      	add	r2, pc, #4	; (adr r2, 800c0d8 <UART_SetConfig+0x7b0>)
 800c0d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0d6:	bf00      	nop
 800c0d8:	0800c163 	.word	0x0800c163
 800c0dc:	0800c16b 	.word	0x0800c16b
 800c0e0:	0800c1c7 	.word	0x0800c1c7
 800c0e4:	0800c1c7 	.word	0x0800c1c7
 800c0e8:	0800c173 	.word	0x0800c173
 800c0ec:	0800c1c7 	.word	0x0800c1c7
 800c0f0:	0800c1c7 	.word	0x0800c1c7
 800c0f4:	0800c1c7 	.word	0x0800c1c7
 800c0f8:	0800c183 	.word	0x0800c183
 800c0fc:	0800c1c7 	.word	0x0800c1c7
 800c100:	0800c1c7 	.word	0x0800c1c7
 800c104:	0800c1c7 	.word	0x0800c1c7
 800c108:	0800c1c7 	.word	0x0800c1c7
 800c10c:	0800c1c7 	.word	0x0800c1c7
 800c110:	0800c1c7 	.word	0x0800c1c7
 800c114:	0800c1c7 	.word	0x0800c1c7
 800c118:	0800c193 	.word	0x0800c193
 800c11c:	0800c1c7 	.word	0x0800c1c7
 800c120:	0800c1c7 	.word	0x0800c1c7
 800c124:	0800c1c7 	.word	0x0800c1c7
 800c128:	0800c1c7 	.word	0x0800c1c7
 800c12c:	0800c1c7 	.word	0x0800c1c7
 800c130:	0800c1c7 	.word	0x0800c1c7
 800c134:	0800c1c7 	.word	0x0800c1c7
 800c138:	0800c1c7 	.word	0x0800c1c7
 800c13c:	0800c1c7 	.word	0x0800c1c7
 800c140:	0800c1c7 	.word	0x0800c1c7
 800c144:	0800c1c7 	.word	0x0800c1c7
 800c148:	0800c1c7 	.word	0x0800c1c7
 800c14c:	0800c1c7 	.word	0x0800c1c7
 800c150:	0800c1c7 	.word	0x0800c1c7
 800c154:	0800c1c7 	.word	0x0800c1c7
 800c158:	0800c1b9 	.word	0x0800c1b9
 800c15c:	2b40      	cmp	r3, #64	; 0x40
 800c15e:	d02e      	beq.n	800c1be <UART_SetConfig+0x896>
 800c160:	e031      	b.n	800c1c6 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c162:	f7fc f815 	bl	8008190 <HAL_RCC_GetPCLK1Freq>
 800c166:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c168:	e033      	b.n	800c1d2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c16a:	f7fc f827 	bl	80081bc <HAL_RCC_GetPCLK2Freq>
 800c16e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c170:	e02f      	b.n	800c1d2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c172:	f107 0314 	add.w	r3, r7, #20
 800c176:	4618      	mov	r0, r3
 800c178:	f7fc ff8c 	bl	8009094 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c17c:	69bb      	ldr	r3, [r7, #24]
 800c17e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c180:	e027      	b.n	800c1d2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c182:	f107 0308 	add.w	r3, r7, #8
 800c186:	4618      	mov	r0, r3
 800c188:	f7fd f8d8 	bl	800933c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c190:	e01f      	b.n	800c1d2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c192:	4b58      	ldr	r3, [pc, #352]	; (800c2f4 <UART_SetConfig+0x9cc>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f003 0320 	and.w	r3, r3, #32
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d009      	beq.n	800c1b2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c19e:	4b55      	ldr	r3, [pc, #340]	; (800c2f4 <UART_SetConfig+0x9cc>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	08db      	lsrs	r3, r3, #3
 800c1a4:	f003 0303 	and.w	r3, r3, #3
 800c1a8:	4a53      	ldr	r2, [pc, #332]	; (800c2f8 <UART_SetConfig+0x9d0>)
 800c1aa:	fa22 f303 	lsr.w	r3, r2, r3
 800c1ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c1b0:	e00f      	b.n	800c1d2 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800c1b2:	4b51      	ldr	r3, [pc, #324]	; (800c2f8 <UART_SetConfig+0x9d0>)
 800c1b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c1b6:	e00c      	b.n	800c1d2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c1b8:	4b4c      	ldr	r3, [pc, #304]	; (800c2ec <UART_SetConfig+0x9c4>)
 800c1ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c1bc:	e009      	b.n	800c1d2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c1be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c1c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c1c4:	e005      	b.n	800c1d2 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c1d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	f000 80ea 	beq.w	800c3ae <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1de:	4a44      	ldr	r2, [pc, #272]	; (800c2f0 <UART_SetConfig+0x9c8>)
 800c1e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c1e4:	461a      	mov	r2, r3
 800c1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c1ec:	005a      	lsls	r2, r3, #1
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	685b      	ldr	r3, [r3, #4]
 800c1f2:	085b      	lsrs	r3, r3, #1
 800c1f4:	441a      	add	r2, r3
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	685b      	ldr	r3, [r3, #4]
 800c1fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1fe:	b29b      	uxth	r3, r3
 800c200:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c204:	2b0f      	cmp	r3, #15
 800c206:	d916      	bls.n	800c236 <UART_SetConfig+0x90e>
 800c208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c20a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c20e:	d212      	bcs.n	800c236 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c212:	b29b      	uxth	r3, r3
 800c214:	f023 030f 	bic.w	r3, r3, #15
 800c218:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c21c:	085b      	lsrs	r3, r3, #1
 800c21e:	b29b      	uxth	r3, r3
 800c220:	f003 0307 	and.w	r3, r3, #7
 800c224:	b29a      	uxth	r2, r3
 800c226:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c228:	4313      	orrs	r3, r2
 800c22a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c232:	60da      	str	r2, [r3, #12]
 800c234:	e0bb      	b.n	800c3ae <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800c236:	2301      	movs	r3, #1
 800c238:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c23c:	e0b7      	b.n	800c3ae <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c23e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c242:	2b20      	cmp	r3, #32
 800c244:	dc4a      	bgt.n	800c2dc <UART_SetConfig+0x9b4>
 800c246:	2b00      	cmp	r3, #0
 800c248:	f2c0 8086 	blt.w	800c358 <UART_SetConfig+0xa30>
 800c24c:	2b20      	cmp	r3, #32
 800c24e:	f200 8083 	bhi.w	800c358 <UART_SetConfig+0xa30>
 800c252:	a201      	add	r2, pc, #4	; (adr r2, 800c258 <UART_SetConfig+0x930>)
 800c254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c258:	0800c2e3 	.word	0x0800c2e3
 800c25c:	0800c2fd 	.word	0x0800c2fd
 800c260:	0800c359 	.word	0x0800c359
 800c264:	0800c359 	.word	0x0800c359
 800c268:	0800c305 	.word	0x0800c305
 800c26c:	0800c359 	.word	0x0800c359
 800c270:	0800c359 	.word	0x0800c359
 800c274:	0800c359 	.word	0x0800c359
 800c278:	0800c315 	.word	0x0800c315
 800c27c:	0800c359 	.word	0x0800c359
 800c280:	0800c359 	.word	0x0800c359
 800c284:	0800c359 	.word	0x0800c359
 800c288:	0800c359 	.word	0x0800c359
 800c28c:	0800c359 	.word	0x0800c359
 800c290:	0800c359 	.word	0x0800c359
 800c294:	0800c359 	.word	0x0800c359
 800c298:	0800c325 	.word	0x0800c325
 800c29c:	0800c359 	.word	0x0800c359
 800c2a0:	0800c359 	.word	0x0800c359
 800c2a4:	0800c359 	.word	0x0800c359
 800c2a8:	0800c359 	.word	0x0800c359
 800c2ac:	0800c359 	.word	0x0800c359
 800c2b0:	0800c359 	.word	0x0800c359
 800c2b4:	0800c359 	.word	0x0800c359
 800c2b8:	0800c359 	.word	0x0800c359
 800c2bc:	0800c359 	.word	0x0800c359
 800c2c0:	0800c359 	.word	0x0800c359
 800c2c4:	0800c359 	.word	0x0800c359
 800c2c8:	0800c359 	.word	0x0800c359
 800c2cc:	0800c359 	.word	0x0800c359
 800c2d0:	0800c359 	.word	0x0800c359
 800c2d4:	0800c359 	.word	0x0800c359
 800c2d8:	0800c34b 	.word	0x0800c34b
 800c2dc:	2b40      	cmp	r3, #64	; 0x40
 800c2de:	d037      	beq.n	800c350 <UART_SetConfig+0xa28>
 800c2e0:	e03a      	b.n	800c358 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c2e2:	f7fb ff55 	bl	8008190 <HAL_RCC_GetPCLK1Freq>
 800c2e6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c2e8:	e03c      	b.n	800c364 <UART_SetConfig+0xa3c>
 800c2ea:	bf00      	nop
 800c2ec:	003d0900 	.word	0x003d0900
 800c2f0:	0801f9c0 	.word	0x0801f9c0
 800c2f4:	58024400 	.word	0x58024400
 800c2f8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c2fc:	f7fb ff5e 	bl	80081bc <HAL_RCC_GetPCLK2Freq>
 800c300:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c302:	e02f      	b.n	800c364 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c304:	f107 0314 	add.w	r3, r7, #20
 800c308:	4618      	mov	r0, r3
 800c30a:	f7fc fec3 	bl	8009094 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c30e:	69bb      	ldr	r3, [r7, #24]
 800c310:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c312:	e027      	b.n	800c364 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c314:	f107 0308 	add.w	r3, r7, #8
 800c318:	4618      	mov	r0, r3
 800c31a:	f7fd f80f 	bl	800933c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c322:	e01f      	b.n	800c364 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c324:	4b2c      	ldr	r3, [pc, #176]	; (800c3d8 <UART_SetConfig+0xab0>)
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	f003 0320 	and.w	r3, r3, #32
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d009      	beq.n	800c344 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c330:	4b29      	ldr	r3, [pc, #164]	; (800c3d8 <UART_SetConfig+0xab0>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	08db      	lsrs	r3, r3, #3
 800c336:	f003 0303 	and.w	r3, r3, #3
 800c33a:	4a28      	ldr	r2, [pc, #160]	; (800c3dc <UART_SetConfig+0xab4>)
 800c33c:	fa22 f303 	lsr.w	r3, r2, r3
 800c340:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c342:	e00f      	b.n	800c364 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800c344:	4b25      	ldr	r3, [pc, #148]	; (800c3dc <UART_SetConfig+0xab4>)
 800c346:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c348:	e00c      	b.n	800c364 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c34a:	4b25      	ldr	r3, [pc, #148]	; (800c3e0 <UART_SetConfig+0xab8>)
 800c34c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c34e:	e009      	b.n	800c364 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c350:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c354:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c356:	e005      	b.n	800c364 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800c358:	2300      	movs	r3, #0
 800c35a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c35c:	2301      	movs	r3, #1
 800c35e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c362:	bf00      	nop
    }

    if (pclk != 0U)
 800c364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c366:	2b00      	cmp	r3, #0
 800c368:	d021      	beq.n	800c3ae <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c36e:	4a1d      	ldr	r2, [pc, #116]	; (800c3e4 <UART_SetConfig+0xabc>)
 800c370:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c374:	461a      	mov	r2, r3
 800c376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c378:	fbb3 f2f2 	udiv	r2, r3, r2
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	685b      	ldr	r3, [r3, #4]
 800c380:	085b      	lsrs	r3, r3, #1
 800c382:	441a      	add	r2, r3
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	685b      	ldr	r3, [r3, #4]
 800c388:	fbb2 f3f3 	udiv	r3, r2, r3
 800c38c:	b29b      	uxth	r3, r3
 800c38e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c392:	2b0f      	cmp	r3, #15
 800c394:	d908      	bls.n	800c3a8 <UART_SetConfig+0xa80>
 800c396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c39c:	d204      	bcs.n	800c3a8 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3a4:	60da      	str	r2, [r3, #12]
 800c3a6:	e002      	b.n	800c3ae <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2201      	movs	r2, #1
 800c3b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2201      	movs	r2, #1
 800c3ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c3ca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3738      	adds	r7, #56	; 0x38
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bdb0      	pop	{r4, r5, r7, pc}
 800c3d6:	bf00      	nop
 800c3d8:	58024400 	.word	0x58024400
 800c3dc:	03d09000 	.word	0x03d09000
 800c3e0:	003d0900 	.word	0x003d0900
 800c3e4:	0801f9c0 	.word	0x0801f9c0

0800c3e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c3e8:	b480      	push	{r7}
 800c3ea:	b083      	sub	sp, #12
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3f4:	f003 0301 	and.w	r3, r3, #1
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d00a      	beq.n	800c412 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	685b      	ldr	r3, [r3, #4]
 800c402:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	430a      	orrs	r2, r1
 800c410:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c416:	f003 0302 	and.w	r3, r3, #2
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d00a      	beq.n	800c434 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	685b      	ldr	r3, [r3, #4]
 800c424:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	430a      	orrs	r2, r1
 800c432:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c438:	f003 0304 	and.w	r3, r3, #4
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d00a      	beq.n	800c456 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	685b      	ldr	r3, [r3, #4]
 800c446:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	430a      	orrs	r2, r1
 800c454:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c45a:	f003 0308 	and.w	r3, r3, #8
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d00a      	beq.n	800c478 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	685b      	ldr	r3, [r3, #4]
 800c468:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	430a      	orrs	r2, r1
 800c476:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c47c:	f003 0310 	and.w	r3, r3, #16
 800c480:	2b00      	cmp	r3, #0
 800c482:	d00a      	beq.n	800c49a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	689b      	ldr	r3, [r3, #8]
 800c48a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	430a      	orrs	r2, r1
 800c498:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c49e:	f003 0320 	and.w	r3, r3, #32
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d00a      	beq.n	800c4bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	689b      	ldr	r3, [r3, #8]
 800c4ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	430a      	orrs	r2, r1
 800c4ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d01a      	beq.n	800c4fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	685b      	ldr	r3, [r3, #4]
 800c4ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	430a      	orrs	r2, r1
 800c4dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c4e6:	d10a      	bne.n	800c4fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	685b      	ldr	r3, [r3, #4]
 800c4ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	430a      	orrs	r2, r1
 800c4fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c506:	2b00      	cmp	r3, #0
 800c508:	d00a      	beq.n	800c520 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	685b      	ldr	r3, [r3, #4]
 800c510:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	430a      	orrs	r2, r1
 800c51e:	605a      	str	r2, [r3, #4]
  }
}
 800c520:	bf00      	nop
 800c522:	370c      	adds	r7, #12
 800c524:	46bd      	mov	sp, r7
 800c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52a:	4770      	bx	lr

0800c52c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b086      	sub	sp, #24
 800c530:	af02      	add	r7, sp, #8
 800c532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2200      	movs	r2, #0
 800c538:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c53c:	f7f6 f876 	bl	800262c <HAL_GetTick>
 800c540:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f003 0308 	and.w	r3, r3, #8
 800c54c:	2b08      	cmp	r3, #8
 800c54e:	d10e      	bne.n	800c56e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c550:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c554:	9300      	str	r3, [sp, #0]
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	2200      	movs	r2, #0
 800c55a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f000 f82f 	bl	800c5c2 <UART_WaitOnFlagUntilTimeout>
 800c564:	4603      	mov	r3, r0
 800c566:	2b00      	cmp	r3, #0
 800c568:	d001      	beq.n	800c56e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c56a:	2303      	movs	r3, #3
 800c56c:	e025      	b.n	800c5ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f003 0304 	and.w	r3, r3, #4
 800c578:	2b04      	cmp	r3, #4
 800c57a:	d10e      	bne.n	800c59a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c57c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c580:	9300      	str	r3, [sp, #0]
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	2200      	movs	r2, #0
 800c586:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f000 f819 	bl	800c5c2 <UART_WaitOnFlagUntilTimeout>
 800c590:	4603      	mov	r3, r0
 800c592:	2b00      	cmp	r3, #0
 800c594:	d001      	beq.n	800c59a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c596:	2303      	movs	r3, #3
 800c598:	e00f      	b.n	800c5ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2220      	movs	r2, #32
 800c59e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	2220      	movs	r2, #32
 800c5a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c5b8:	2300      	movs	r3, #0
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	3710      	adds	r7, #16
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}

0800c5c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c5c2:	b580      	push	{r7, lr}
 800c5c4:	b084      	sub	sp, #16
 800c5c6:	af00      	add	r7, sp, #0
 800c5c8:	60f8      	str	r0, [r7, #12]
 800c5ca:	60b9      	str	r1, [r7, #8]
 800c5cc:	603b      	str	r3, [r7, #0]
 800c5ce:	4613      	mov	r3, r2
 800c5d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c5d2:	e062      	b.n	800c69a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c5d4:	69bb      	ldr	r3, [r7, #24]
 800c5d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5da:	d05e      	beq.n	800c69a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c5dc:	f7f6 f826 	bl	800262c <HAL_GetTick>
 800c5e0:	4602      	mov	r2, r0
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	1ad3      	subs	r3, r2, r3
 800c5e6:	69ba      	ldr	r2, [r7, #24]
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	d302      	bcc.n	800c5f2 <UART_WaitOnFlagUntilTimeout+0x30>
 800c5ec:	69bb      	ldr	r3, [r7, #24]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d11d      	bne.n	800c62e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	681a      	ldr	r2, [r3, #0]
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c600:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	689a      	ldr	r2, [r3, #8]
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	f022 0201 	bic.w	r2, r2, #1
 800c610:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	2220      	movs	r2, #32
 800c616:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	2220      	movs	r2, #32
 800c61e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	2200      	movs	r2, #0
 800c626:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c62a:	2303      	movs	r3, #3
 800c62c:	e045      	b.n	800c6ba <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	f003 0304 	and.w	r3, r3, #4
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d02e      	beq.n	800c69a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	69db      	ldr	r3, [r3, #28]
 800c642:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c646:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c64a:	d126      	bne.n	800c69a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c654:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	681a      	ldr	r2, [r3, #0]
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c664:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	689a      	ldr	r2, [r3, #8]
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f022 0201 	bic.w	r2, r2, #1
 800c674:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	2220      	movs	r2, #32
 800c67a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	2220      	movs	r2, #32
 800c682:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	2220      	movs	r2, #32
 800c68a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	2200      	movs	r2, #0
 800c692:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c696:	2303      	movs	r3, #3
 800c698:	e00f      	b.n	800c6ba <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	69da      	ldr	r2, [r3, #28]
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	4013      	ands	r3, r2
 800c6a4:	68ba      	ldr	r2, [r7, #8]
 800c6a6:	429a      	cmp	r2, r3
 800c6a8:	bf0c      	ite	eq
 800c6aa:	2301      	moveq	r3, #1
 800c6ac:	2300      	movne	r3, #0
 800c6ae:	b2db      	uxtb	r3, r3
 800c6b0:	461a      	mov	r2, r3
 800c6b2:	79fb      	ldrb	r3, [r7, #7]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d08d      	beq.n	800c5d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c6b8:	2300      	movs	r3, #0
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3710      	adds	r7, #16
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}

0800c6c2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c6c2:	b480      	push	{r7}
 800c6c4:	b085      	sub	sp, #20
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c6d0:	2b01      	cmp	r3, #1
 800c6d2:	d101      	bne.n	800c6d8 <HAL_UARTEx_DisableFifoMode+0x16>
 800c6d4:	2302      	movs	r3, #2
 800c6d6:	e027      	b.n	800c728 <HAL_UARTEx_DisableFifoMode+0x66>
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2201      	movs	r2, #1
 800c6dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2224      	movs	r2, #36	; 0x24
 800c6e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	681a      	ldr	r2, [r3, #0]
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f022 0201 	bic.w	r2, r2, #1
 800c6fe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c706:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2200      	movs	r2, #0
 800c70c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	68fa      	ldr	r2, [r7, #12]
 800c714:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	2220      	movs	r2, #32
 800c71a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2200      	movs	r2, #0
 800c722:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c726:	2300      	movs	r3, #0
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3714      	adds	r7, #20
 800c72c:	46bd      	mov	sp, r7
 800c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c732:	4770      	bx	lr

0800c734 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b084      	sub	sp, #16
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c744:	2b01      	cmp	r3, #1
 800c746:	d101      	bne.n	800c74c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c748:	2302      	movs	r3, #2
 800c74a:	e02d      	b.n	800c7a8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2201      	movs	r2, #1
 800c750:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2224      	movs	r2, #36	; 0x24
 800c758:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	681a      	ldr	r2, [r3, #0]
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f022 0201 	bic.w	r2, r2, #1
 800c772:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	689b      	ldr	r3, [r3, #8]
 800c77a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	683a      	ldr	r2, [r7, #0]
 800c784:	430a      	orrs	r2, r1
 800c786:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f000 f84f 	bl	800c82c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	68fa      	ldr	r2, [r7, #12]
 800c794:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2220      	movs	r2, #32
 800c79a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c7a6:	2300      	movs	r3, #0
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3710      	adds	r7, #16
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b084      	sub	sp, #16
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c7c0:	2b01      	cmp	r3, #1
 800c7c2:	d101      	bne.n	800c7c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c7c4:	2302      	movs	r3, #2
 800c7c6:	e02d      	b.n	800c824 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2201      	movs	r2, #1
 800c7cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2224      	movs	r2, #36	; 0x24
 800c7d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	681a      	ldr	r2, [r3, #0]
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f022 0201 	bic.w	r2, r2, #1
 800c7ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	689b      	ldr	r3, [r3, #8]
 800c7f6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	683a      	ldr	r2, [r7, #0]
 800c800:	430a      	orrs	r2, r1
 800c802:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f000 f811 	bl	800c82c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	68fa      	ldr	r2, [r7, #12]
 800c810:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2220      	movs	r2, #32
 800c816:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2200      	movs	r2, #0
 800c81e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c822:	2300      	movs	r3, #0
}
 800c824:	4618      	mov	r0, r3
 800c826:	3710      	adds	r7, #16
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}

0800c82c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c82c:	b480      	push	{r7}
 800c82e:	b085      	sub	sp, #20
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d108      	bne.n	800c84e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2201      	movs	r2, #1
 800c840:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2201      	movs	r2, #1
 800c848:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c84c:	e031      	b.n	800c8b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c84e:	2310      	movs	r3, #16
 800c850:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c852:	2310      	movs	r3, #16
 800c854:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	689b      	ldr	r3, [r3, #8]
 800c85c:	0e5b      	lsrs	r3, r3, #25
 800c85e:	b2db      	uxtb	r3, r3
 800c860:	f003 0307 	and.w	r3, r3, #7
 800c864:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	689b      	ldr	r3, [r3, #8]
 800c86c:	0f5b      	lsrs	r3, r3, #29
 800c86e:	b2db      	uxtb	r3, r3
 800c870:	f003 0307 	and.w	r3, r3, #7
 800c874:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c876:	7bbb      	ldrb	r3, [r7, #14]
 800c878:	7b3a      	ldrb	r2, [r7, #12]
 800c87a:	4911      	ldr	r1, [pc, #68]	; (800c8c0 <UARTEx_SetNbDataToProcess+0x94>)
 800c87c:	5c8a      	ldrb	r2, [r1, r2]
 800c87e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c882:	7b3a      	ldrb	r2, [r7, #12]
 800c884:	490f      	ldr	r1, [pc, #60]	; (800c8c4 <UARTEx_SetNbDataToProcess+0x98>)
 800c886:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c888:	fb93 f3f2 	sdiv	r3, r3, r2
 800c88c:	b29a      	uxth	r2, r3
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c894:	7bfb      	ldrb	r3, [r7, #15]
 800c896:	7b7a      	ldrb	r2, [r7, #13]
 800c898:	4909      	ldr	r1, [pc, #36]	; (800c8c0 <UARTEx_SetNbDataToProcess+0x94>)
 800c89a:	5c8a      	ldrb	r2, [r1, r2]
 800c89c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c8a0:	7b7a      	ldrb	r2, [r7, #13]
 800c8a2:	4908      	ldr	r1, [pc, #32]	; (800c8c4 <UARTEx_SetNbDataToProcess+0x98>)
 800c8a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c8a6:	fb93 f3f2 	sdiv	r3, r3, r2
 800c8aa:	b29a      	uxth	r2, r3
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c8b2:	bf00      	nop
 800c8b4:	3714      	adds	r7, #20
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8bc:	4770      	bx	lr
 800c8be:	bf00      	nop
 800c8c0:	0801f9d8 	.word	0x0801f9d8
 800c8c4:	0801f9e0 	.word	0x0801f9e0

0800c8c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c8c8:	b084      	sub	sp, #16
 800c8ca:	b580      	push	{r7, lr}
 800c8cc:	b084      	sub	sp, #16
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	6078      	str	r0, [r7, #4]
 800c8d2:	f107 001c 	add.w	r0, r7, #28
 800c8d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8dc:	2b01      	cmp	r3, #1
 800c8de:	d120      	bne.n	800c922 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	68da      	ldr	r2, [r3, #12]
 800c8f0:	4b2a      	ldr	r3, [pc, #168]	; (800c99c <USB_CoreInit+0xd4>)
 800c8f2:	4013      	ands	r3, r2
 800c8f4:	687a      	ldr	r2, [r7, #4]
 800c8f6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	68db      	ldr	r3, [r3, #12]
 800c8fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c906:	2b01      	cmp	r3, #1
 800c908:	d105      	bne.n	800c916 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	68db      	ldr	r3, [r3, #12]
 800c90e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f000 f990 	bl	800cc3c <USB_CoreReset>
 800c91c:	4603      	mov	r3, r0
 800c91e:	73fb      	strb	r3, [r7, #15]
 800c920:	e01a      	b.n	800c958 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	68db      	ldr	r3, [r3, #12]
 800c926:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c92e:	6878      	ldr	r0, [r7, #4]
 800c930:	f000 f984 	bl	800cc3c <USB_CoreReset>
 800c934:	4603      	mov	r3, r0
 800c936:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d106      	bne.n	800c94c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c942:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	639a      	str	r2, [r3, #56]	; 0x38
 800c94a:	e005      	b.n	800c958 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c950:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c95a:	2b01      	cmp	r3, #1
 800c95c:	d116      	bne.n	800c98c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c962:	b29a      	uxth	r2, r3
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c96c:	4b0c      	ldr	r3, [pc, #48]	; (800c9a0 <USB_CoreInit+0xd8>)
 800c96e:	4313      	orrs	r3, r2
 800c970:	687a      	ldr	r2, [r7, #4]
 800c972:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	689b      	ldr	r3, [r3, #8]
 800c978:	f043 0206 	orr.w	r2, r3, #6
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	689b      	ldr	r3, [r3, #8]
 800c984:	f043 0220 	orr.w	r2, r3, #32
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c98c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3710      	adds	r7, #16
 800c992:	46bd      	mov	sp, r7
 800c994:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c998:	b004      	add	sp, #16
 800c99a:	4770      	bx	lr
 800c99c:	ffbdffbf 	.word	0xffbdffbf
 800c9a0:	03ee0000 	.word	0x03ee0000

0800c9a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b083      	sub	sp, #12
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	689b      	ldr	r3, [r3, #8]
 800c9b0:	f043 0201 	orr.w	r2, r3, #1
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c9b8:	2300      	movs	r3, #0
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	370c      	adds	r7, #12
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c4:	4770      	bx	lr

0800c9c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c9c6:	b480      	push	{r7}
 800c9c8:	b083      	sub	sp, #12
 800c9ca:	af00      	add	r7, sp, #0
 800c9cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	689b      	ldr	r3, [r3, #8]
 800c9d2:	f023 0201 	bic.w	r2, r3, #1
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c9da:	2300      	movs	r3, #0
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	370c      	adds	r7, #12
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr

0800c9e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b082      	sub	sp, #8
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
 800c9f0:	460b      	mov	r3, r1
 800c9f2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	68db      	ldr	r3, [r3, #12]
 800c9f8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ca00:	78fb      	ldrb	r3, [r7, #3]
 800ca02:	2b01      	cmp	r3, #1
 800ca04:	d106      	bne.n	800ca14 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	68db      	ldr	r3, [r3, #12]
 800ca0a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	60da      	str	r2, [r3, #12]
 800ca12:	e00b      	b.n	800ca2c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800ca14:	78fb      	ldrb	r3, [r7, #3]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d106      	bne.n	800ca28 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	68db      	ldr	r3, [r3, #12]
 800ca1e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	60da      	str	r2, [r3, #12]
 800ca26:	e001      	b.n	800ca2c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800ca28:	2301      	movs	r3, #1
 800ca2a:	e003      	b.n	800ca34 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800ca2c:	2032      	movs	r0, #50	; 0x32
 800ca2e:	f7f5 fe09 	bl	8002644 <HAL_Delay>

  return HAL_OK;
 800ca32:	2300      	movs	r3, #0
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	3708      	adds	r7, #8
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}

0800ca3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ca3c:	b480      	push	{r7}
 800ca3e:	b085      	sub	sp, #20
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
 800ca44:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800ca46:	2300      	movs	r3, #0
 800ca48:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	019b      	lsls	r3, r3, #6
 800ca4e:	f043 0220 	orr.w	r2, r3, #32
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	3301      	adds	r3, #1
 800ca5a:	60fb      	str	r3, [r7, #12]
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	4a09      	ldr	r2, [pc, #36]	; (800ca84 <USB_FlushTxFifo+0x48>)
 800ca60:	4293      	cmp	r3, r2
 800ca62:	d901      	bls.n	800ca68 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ca64:	2303      	movs	r3, #3
 800ca66:	e006      	b.n	800ca76 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	691b      	ldr	r3, [r3, #16]
 800ca6c:	f003 0320 	and.w	r3, r3, #32
 800ca70:	2b20      	cmp	r3, #32
 800ca72:	d0f0      	beq.n	800ca56 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ca74:	2300      	movs	r3, #0
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	3714      	adds	r7, #20
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca80:	4770      	bx	lr
 800ca82:	bf00      	nop
 800ca84:	00030d40 	.word	0x00030d40

0800ca88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b085      	sub	sp, #20
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800ca90:	2300      	movs	r3, #0
 800ca92:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2210      	movs	r2, #16
 800ca98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	3301      	adds	r3, #1
 800ca9e:	60fb      	str	r3, [r7, #12]
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	4a09      	ldr	r2, [pc, #36]	; (800cac8 <USB_FlushRxFifo+0x40>)
 800caa4:	4293      	cmp	r3, r2
 800caa6:	d901      	bls.n	800caac <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800caa8:	2303      	movs	r3, #3
 800caaa:	e006      	b.n	800caba <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	691b      	ldr	r3, [r3, #16]
 800cab0:	f003 0310 	and.w	r3, r3, #16
 800cab4:	2b10      	cmp	r3, #16
 800cab6:	d0f0      	beq.n	800ca9a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800cab8:	2300      	movs	r3, #0
}
 800caba:	4618      	mov	r0, r3
 800cabc:	3714      	adds	r7, #20
 800cabe:	46bd      	mov	sp, r7
 800cac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac4:	4770      	bx	lr
 800cac6:	bf00      	nop
 800cac8:	00030d40 	.word	0x00030d40

0800cacc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800cacc:	b480      	push	{r7}
 800cace:	b089      	sub	sp, #36	; 0x24
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	60f8      	str	r0, [r7, #12]
 800cad4:	60b9      	str	r1, [r7, #8]
 800cad6:	4611      	mov	r1, r2
 800cad8:	461a      	mov	r2, r3
 800cada:	460b      	mov	r3, r1
 800cadc:	71fb      	strb	r3, [r7, #7]
 800cade:	4613      	mov	r3, r2
 800cae0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800caea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d123      	bne.n	800cb3a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800caf2:	88bb      	ldrh	r3, [r7, #4]
 800caf4:	3303      	adds	r3, #3
 800caf6:	089b      	lsrs	r3, r3, #2
 800caf8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cafa:	2300      	movs	r3, #0
 800cafc:	61bb      	str	r3, [r7, #24]
 800cafe:	e018      	b.n	800cb32 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cb00:	79fb      	ldrb	r3, [r7, #7]
 800cb02:	031a      	lsls	r2, r3, #12
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	4413      	add	r3, r2
 800cb08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb0c:	461a      	mov	r2, r3
 800cb0e:	69fb      	ldr	r3, [r7, #28]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	6013      	str	r3, [r2, #0]
      pSrc++;
 800cb14:	69fb      	ldr	r3, [r7, #28]
 800cb16:	3301      	adds	r3, #1
 800cb18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cb1a:	69fb      	ldr	r3, [r7, #28]
 800cb1c:	3301      	adds	r3, #1
 800cb1e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cb20:	69fb      	ldr	r3, [r7, #28]
 800cb22:	3301      	adds	r3, #1
 800cb24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cb26:	69fb      	ldr	r3, [r7, #28]
 800cb28:	3301      	adds	r3, #1
 800cb2a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cb2c:	69bb      	ldr	r3, [r7, #24]
 800cb2e:	3301      	adds	r3, #1
 800cb30:	61bb      	str	r3, [r7, #24]
 800cb32:	69ba      	ldr	r2, [r7, #24]
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d3e2      	bcc.n	800cb00 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800cb3a:	2300      	movs	r3, #0
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	3724      	adds	r7, #36	; 0x24
 800cb40:	46bd      	mov	sp, r7
 800cb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb46:	4770      	bx	lr

0800cb48 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b08b      	sub	sp, #44	; 0x2c
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	60f8      	str	r0, [r7, #12]
 800cb50:	60b9      	str	r1, [r7, #8]
 800cb52:	4613      	mov	r3, r2
 800cb54:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800cb5e:	88fb      	ldrh	r3, [r7, #6]
 800cb60:	089b      	lsrs	r3, r3, #2
 800cb62:	b29b      	uxth	r3, r3
 800cb64:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800cb66:	88fb      	ldrh	r3, [r7, #6]
 800cb68:	f003 0303 	and.w	r3, r3, #3
 800cb6c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800cb6e:	2300      	movs	r3, #0
 800cb70:	623b      	str	r3, [r7, #32]
 800cb72:	e014      	b.n	800cb9e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cb74:	69bb      	ldr	r3, [r7, #24]
 800cb76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb7a:	681a      	ldr	r2, [r3, #0]
 800cb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7e:	601a      	str	r2, [r3, #0]
    pDest++;
 800cb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb82:	3301      	adds	r3, #1
 800cb84:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cb86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb88:	3301      	adds	r3, #1
 800cb8a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb8e:	3301      	adds	r3, #1
 800cb90:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb94:	3301      	adds	r3, #1
 800cb96:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800cb98:	6a3b      	ldr	r3, [r7, #32]
 800cb9a:	3301      	adds	r3, #1
 800cb9c:	623b      	str	r3, [r7, #32]
 800cb9e:	6a3a      	ldr	r2, [r7, #32]
 800cba0:	697b      	ldr	r3, [r7, #20]
 800cba2:	429a      	cmp	r2, r3
 800cba4:	d3e6      	bcc.n	800cb74 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800cba6:	8bfb      	ldrh	r3, [r7, #30]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d01e      	beq.n	800cbea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800cbac:	2300      	movs	r3, #0
 800cbae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800cbb0:	69bb      	ldr	r3, [r7, #24]
 800cbb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbb6:	461a      	mov	r2, r3
 800cbb8:	f107 0310 	add.w	r3, r7, #16
 800cbbc:	6812      	ldr	r2, [r2, #0]
 800cbbe:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800cbc0:	693a      	ldr	r2, [r7, #16]
 800cbc2:	6a3b      	ldr	r3, [r7, #32]
 800cbc4:	b2db      	uxtb	r3, r3
 800cbc6:	00db      	lsls	r3, r3, #3
 800cbc8:	fa22 f303 	lsr.w	r3, r2, r3
 800cbcc:	b2da      	uxtb	r2, r3
 800cbce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd0:	701a      	strb	r2, [r3, #0]
      i++;
 800cbd2:	6a3b      	ldr	r3, [r7, #32]
 800cbd4:	3301      	adds	r3, #1
 800cbd6:	623b      	str	r3, [r7, #32]
      pDest++;
 800cbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbda:	3301      	adds	r3, #1
 800cbdc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800cbde:	8bfb      	ldrh	r3, [r7, #30]
 800cbe0:	3b01      	subs	r3, #1
 800cbe2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800cbe4:	8bfb      	ldrh	r3, [r7, #30]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d1ea      	bne.n	800cbc0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800cbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cbec:	4618      	mov	r0, r3
 800cbee:	372c      	adds	r7, #44	; 0x2c
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf6:	4770      	bx	lr

0800cbf8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	b085      	sub	sp, #20
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	695b      	ldr	r3, [r3, #20]
 800cc04:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	699b      	ldr	r3, [r3, #24]
 800cc0a:	68fa      	ldr	r2, [r7, #12]
 800cc0c:	4013      	ands	r3, r2
 800cc0e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800cc10:	68fb      	ldr	r3, [r7, #12]
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3714      	adds	r7, #20
 800cc16:	46bd      	mov	sp, r7
 800cc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1c:	4770      	bx	lr

0800cc1e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cc1e:	b480      	push	{r7}
 800cc20:	b083      	sub	sp, #12
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	695b      	ldr	r3, [r3, #20]
 800cc2a:	f003 0301 	and.w	r3, r3, #1
}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	370c      	adds	r7, #12
 800cc32:	46bd      	mov	sp, r7
 800cc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc38:	4770      	bx	lr
	...

0800cc3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	b085      	sub	sp, #20
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800cc44:	2300      	movs	r3, #0
 800cc46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	3301      	adds	r3, #1
 800cc4c:	60fb      	str	r3, [r7, #12]
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	4a13      	ldr	r2, [pc, #76]	; (800cca0 <USB_CoreReset+0x64>)
 800cc52:	4293      	cmp	r3, r2
 800cc54:	d901      	bls.n	800cc5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cc56:	2303      	movs	r3, #3
 800cc58:	e01b      	b.n	800cc92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	691b      	ldr	r3, [r3, #16]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	daf2      	bge.n	800cc48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cc62:	2300      	movs	r3, #0
 800cc64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	691b      	ldr	r3, [r3, #16]
 800cc6a:	f043 0201 	orr.w	r2, r3, #1
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	3301      	adds	r3, #1
 800cc76:	60fb      	str	r3, [r7, #12]
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	4a09      	ldr	r2, [pc, #36]	; (800cca0 <USB_CoreReset+0x64>)
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	d901      	bls.n	800cc84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cc80:	2303      	movs	r3, #3
 800cc82:	e006      	b.n	800cc92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	691b      	ldr	r3, [r3, #16]
 800cc88:	f003 0301 	and.w	r3, r3, #1
 800cc8c:	2b01      	cmp	r3, #1
 800cc8e:	d0f0      	beq.n	800cc72 <USB_CoreReset+0x36>

  return HAL_OK;
 800cc90:	2300      	movs	r3, #0
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3714      	adds	r7, #20
 800cc96:	46bd      	mov	sp, r7
 800cc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9c:	4770      	bx	lr
 800cc9e:	bf00      	nop
 800cca0:	00030d40 	.word	0x00030d40

0800cca4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cca4:	b084      	sub	sp, #16
 800cca6:	b580      	push	{r7, lr}
 800cca8:	b084      	sub	sp, #16
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	6078      	str	r0, [r7, #4]
 800ccae:	f107 001c 	add.w	r0, r7, #28
 800ccb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ccc0:	461a      	mov	r2, r3
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccca:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccd6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d018      	beq.n	800cd1c <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800ccea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccec:	2b01      	cmp	r3, #1
 800ccee:	d10a      	bne.n	800cd06 <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	68ba      	ldr	r2, [r7, #8]
 800ccfa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ccfe:	f043 0304 	orr.w	r3, r3, #4
 800cd02:	6013      	str	r3, [r2, #0]
 800cd04:	e014      	b.n	800cd30 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800cd06:	68bb      	ldr	r3, [r7, #8]
 800cd08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	68ba      	ldr	r2, [r7, #8]
 800cd10:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cd14:	f023 0304 	bic.w	r3, r3, #4
 800cd18:	6013      	str	r3, [r2, #0]
 800cd1a:	e009      	b.n	800cd30 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	68ba      	ldr	r2, [r7, #8]
 800cd26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cd2a:	f023 0304 	bic.w	r3, r3, #4
 800cd2e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800cd30:	2110      	movs	r1, #16
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	f7ff fe82 	bl	800ca3c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f7ff fea5 	bl	800ca88 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800cd3e:	2300      	movs	r3, #0
 800cd40:	60fb      	str	r3, [r7, #12]
 800cd42:	e015      	b.n	800cd70 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	015a      	lsls	r2, r3, #5
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	4413      	add	r3, r2
 800cd4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd50:	461a      	mov	r2, r3
 800cd52:	f04f 33ff 	mov.w	r3, #4294967295
 800cd56:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	015a      	lsls	r2, r3, #5
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	4413      	add	r3, r2
 800cd60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd64:	461a      	mov	r2, r3
 800cd66:	2300      	movs	r3, #0
 800cd68:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	3301      	adds	r3, #1
 800cd6e:	60fb      	str	r3, [r7, #12]
 800cd70:	6a3b      	ldr	r3, [r7, #32]
 800cd72:	68fa      	ldr	r2, [r7, #12]
 800cd74:	429a      	cmp	r2, r3
 800cd76:	d3e5      	bcc.n	800cd44 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800cd78:	2101      	movs	r1, #1
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	f000 f882 	bl	800ce84 <USB_DriveVbus>

  HAL_Delay(200U);
 800cd80:	20c8      	movs	r0, #200	; 0xc8
 800cd82:	f7f5 fc5f 	bl	8002644 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2200      	movs	r2, #0
 800cd8a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f04f 32ff 	mov.w	r2, #4294967295
 800cd92:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d00b      	beq.n	800cdb8 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cda6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	4a14      	ldr	r2, [pc, #80]	; (800cdfc <USB_HostInit+0x158>)
 800cdac:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	4a13      	ldr	r2, [pc, #76]	; (800ce00 <USB_HostInit+0x15c>)
 800cdb2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800cdb6:	e009      	b.n	800cdcc <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2280      	movs	r2, #128	; 0x80
 800cdbc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	4a10      	ldr	r2, [pc, #64]	; (800ce04 <USB_HostInit+0x160>)
 800cdc2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	4a10      	ldr	r2, [pc, #64]	; (800ce08 <USB_HostInit+0x164>)
 800cdc8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cdcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d105      	bne.n	800cdde <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	699b      	ldr	r3, [r3, #24]
 800cdd6:	f043 0210 	orr.w	r2, r3, #16
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	699a      	ldr	r2, [r3, #24]
 800cde2:	4b0a      	ldr	r3, [pc, #40]	; (800ce0c <USB_HostInit+0x168>)
 800cde4:	4313      	orrs	r3, r2
 800cde6:	687a      	ldr	r2, [r7, #4]
 800cde8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800cdea:	2300      	movs	r3, #0
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3710      	adds	r7, #16
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cdf6:	b004      	add	sp, #16
 800cdf8:	4770      	bx	lr
 800cdfa:	bf00      	nop
 800cdfc:	01000200 	.word	0x01000200
 800ce00:	00e00300 	.word	0x00e00300
 800ce04:	00600080 	.word	0x00600080
 800ce08:	004000e0 	.word	0x004000e0
 800ce0c:	a3200008 	.word	0xa3200008

0800ce10 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800ce10:	b480      	push	{r7}
 800ce12:	b085      	sub	sp, #20
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
 800ce18:	460b      	mov	r3, r1
 800ce1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	68fa      	ldr	r2, [r7, #12]
 800ce2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ce2e:	f023 0303 	bic.w	r3, r3, #3
 800ce32:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ce3a:	681a      	ldr	r2, [r3, #0]
 800ce3c:	78fb      	ldrb	r3, [r7, #3]
 800ce3e:	f003 0303 	and.w	r3, r3, #3
 800ce42:	68f9      	ldr	r1, [r7, #12]
 800ce44:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ce48:	4313      	orrs	r3, r2
 800ce4a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800ce4c:	78fb      	ldrb	r3, [r7, #3]
 800ce4e:	2b01      	cmp	r3, #1
 800ce50:	d107      	bne.n	800ce62 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ce58:	461a      	mov	r2, r3
 800ce5a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800ce5e:	6053      	str	r3, [r2, #4]
 800ce60:	e009      	b.n	800ce76 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800ce62:	78fb      	ldrb	r3, [r7, #3]
 800ce64:	2b02      	cmp	r3, #2
 800ce66:	d106      	bne.n	800ce76 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ce6e:	461a      	mov	r2, r3
 800ce70:	f241 7370 	movw	r3, #6000	; 0x1770
 800ce74:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800ce76:	2300      	movs	r3, #0
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	3714      	adds	r7, #20
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce82:	4770      	bx	lr

0800ce84 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800ce84:	b480      	push	{r7}
 800ce86:	b085      	sub	sp, #20
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
 800ce8c:	460b      	mov	r3, r1
 800ce8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ce94:	2300      	movs	r3, #0
 800ce96:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800cea8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800ceaa:	68bb      	ldr	r3, [r7, #8]
 800ceac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d109      	bne.n	800cec8 <USB_DriveVbus+0x44>
 800ceb4:	78fb      	ldrb	r3, [r7, #3]
 800ceb6:	2b01      	cmp	r3, #1
 800ceb8:	d106      	bne.n	800cec8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	68fa      	ldr	r2, [r7, #12]
 800cebe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cec2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cec6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ced2:	d109      	bne.n	800cee8 <USB_DriveVbus+0x64>
 800ced4:	78fb      	ldrb	r3, [r7, #3]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d106      	bne.n	800cee8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	68fa      	ldr	r2, [r7, #12]
 800cede:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800cee2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cee6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800cee8:	2300      	movs	r3, #0
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	3714      	adds	r7, #20
 800ceee:	46bd      	mov	sp, r7
 800cef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef4:	4770      	bx	lr

0800cef6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800cef6:	b480      	push	{r7}
 800cef8:	b085      	sub	sp, #20
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800cf02:	2300      	movs	r3, #0
 800cf04:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	0c5b      	lsrs	r3, r3, #17
 800cf14:	f003 0303 	and.w	r3, r3, #3
}
 800cf18:	4618      	mov	r0, r3
 800cf1a:	3714      	adds	r7, #20
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf22:	4770      	bx	lr

0800cf24 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800cf24:	b480      	push	{r7}
 800cf26:	b085      	sub	sp, #20
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	b29b      	uxth	r3, r3
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	3714      	adds	r7, #20
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf44:	4770      	bx	lr
	...

0800cf48 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b088      	sub	sp, #32
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	4608      	mov	r0, r1
 800cf52:	4611      	mov	r1, r2
 800cf54:	461a      	mov	r2, r3
 800cf56:	4603      	mov	r3, r0
 800cf58:	70fb      	strb	r3, [r7, #3]
 800cf5a:	460b      	mov	r3, r1
 800cf5c:	70bb      	strb	r3, [r7, #2]
 800cf5e:	4613      	mov	r3, r2
 800cf60:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800cf62:	2300      	movs	r3, #0
 800cf64:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800cf6a:	78fb      	ldrb	r3, [r7, #3]
 800cf6c:	015a      	lsls	r2, r3, #5
 800cf6e:	693b      	ldr	r3, [r7, #16]
 800cf70:	4413      	add	r3, r2
 800cf72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf76:	461a      	mov	r2, r3
 800cf78:	f04f 33ff 	mov.w	r3, #4294967295
 800cf7c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800cf7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cf82:	2b03      	cmp	r3, #3
 800cf84:	d87e      	bhi.n	800d084 <USB_HC_Init+0x13c>
 800cf86:	a201      	add	r2, pc, #4	; (adr r2, 800cf8c <USB_HC_Init+0x44>)
 800cf88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf8c:	0800cf9d 	.word	0x0800cf9d
 800cf90:	0800d047 	.word	0x0800d047
 800cf94:	0800cf9d 	.word	0x0800cf9d
 800cf98:	0800d009 	.word	0x0800d009
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800cf9c:	78fb      	ldrb	r3, [r7, #3]
 800cf9e:	015a      	lsls	r2, r3, #5
 800cfa0:	693b      	ldr	r3, [r7, #16]
 800cfa2:	4413      	add	r3, r2
 800cfa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cfa8:	461a      	mov	r2, r3
 800cfaa:	f240 439d 	movw	r3, #1181	; 0x49d
 800cfae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800cfb0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	da10      	bge.n	800cfda <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800cfb8:	78fb      	ldrb	r3, [r7, #3]
 800cfba:	015a      	lsls	r2, r3, #5
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	4413      	add	r3, r2
 800cfc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cfc4:	68db      	ldr	r3, [r3, #12]
 800cfc6:	78fa      	ldrb	r2, [r7, #3]
 800cfc8:	0151      	lsls	r1, r2, #5
 800cfca:	693a      	ldr	r2, [r7, #16]
 800cfcc:	440a      	add	r2, r1
 800cfce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cfd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cfd6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800cfd8:	e057      	b.n	800d08a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d051      	beq.n	800d08a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800cfe6:	78fb      	ldrb	r3, [r7, #3]
 800cfe8:	015a      	lsls	r2, r3, #5
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	4413      	add	r3, r2
 800cfee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cff2:	68db      	ldr	r3, [r3, #12]
 800cff4:	78fa      	ldrb	r2, [r7, #3]
 800cff6:	0151      	lsls	r1, r2, #5
 800cff8:	693a      	ldr	r2, [r7, #16]
 800cffa:	440a      	add	r2, r1
 800cffc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d000:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d004:	60d3      	str	r3, [r2, #12]
      break;
 800d006:	e040      	b.n	800d08a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d008:	78fb      	ldrb	r3, [r7, #3]
 800d00a:	015a      	lsls	r2, r3, #5
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	4413      	add	r3, r2
 800d010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d014:	461a      	mov	r2, r3
 800d016:	f240 639d 	movw	r3, #1693	; 0x69d
 800d01a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d01c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d020:	2b00      	cmp	r3, #0
 800d022:	da34      	bge.n	800d08e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d024:	78fb      	ldrb	r3, [r7, #3]
 800d026:	015a      	lsls	r2, r3, #5
 800d028:	693b      	ldr	r3, [r7, #16]
 800d02a:	4413      	add	r3, r2
 800d02c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d030:	68db      	ldr	r3, [r3, #12]
 800d032:	78fa      	ldrb	r2, [r7, #3]
 800d034:	0151      	lsls	r1, r2, #5
 800d036:	693a      	ldr	r2, [r7, #16]
 800d038:	440a      	add	r2, r1
 800d03a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d03e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d042:	60d3      	str	r3, [r2, #12]
      }

      break;
 800d044:	e023      	b.n	800d08e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d046:	78fb      	ldrb	r3, [r7, #3]
 800d048:	015a      	lsls	r2, r3, #5
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	4413      	add	r3, r2
 800d04e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d052:	461a      	mov	r2, r3
 800d054:	f240 2325 	movw	r3, #549	; 0x225
 800d058:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d05a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	da17      	bge.n	800d092 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800d062:	78fb      	ldrb	r3, [r7, #3]
 800d064:	015a      	lsls	r2, r3, #5
 800d066:	693b      	ldr	r3, [r7, #16]
 800d068:	4413      	add	r3, r2
 800d06a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d06e:	68db      	ldr	r3, [r3, #12]
 800d070:	78fa      	ldrb	r2, [r7, #3]
 800d072:	0151      	lsls	r1, r2, #5
 800d074:	693a      	ldr	r2, [r7, #16]
 800d076:	440a      	add	r2, r1
 800d078:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d07c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800d080:	60d3      	str	r3, [r2, #12]
      }
      break;
 800d082:	e006      	b.n	800d092 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800d084:	2301      	movs	r3, #1
 800d086:	77fb      	strb	r3, [r7, #31]
      break;
 800d088:	e004      	b.n	800d094 <USB_HC_Init+0x14c>
      break;
 800d08a:	bf00      	nop
 800d08c:	e002      	b.n	800d094 <USB_HC_Init+0x14c>
      break;
 800d08e:	bf00      	nop
 800d090:	e000      	b.n	800d094 <USB_HC_Init+0x14c>
      break;
 800d092:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800d094:	693b      	ldr	r3, [r7, #16]
 800d096:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d09a:	699a      	ldr	r2, [r3, #24]
 800d09c:	78fb      	ldrb	r3, [r7, #3]
 800d09e:	f003 030f 	and.w	r3, r3, #15
 800d0a2:	2101      	movs	r1, #1
 800d0a4:	fa01 f303 	lsl.w	r3, r1, r3
 800d0a8:	6939      	ldr	r1, [r7, #16]
 800d0aa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d0ae:	4313      	orrs	r3, r2
 800d0b0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	699b      	ldr	r3, [r3, #24]
 800d0b6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800d0be:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	da03      	bge.n	800d0ce <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800d0c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d0ca:	61bb      	str	r3, [r7, #24]
 800d0cc:	e001      	b.n	800d0d2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f7ff ff0f 	bl	800cef6 <USB_GetHostSpeed>
 800d0d8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800d0da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d0de:	2b02      	cmp	r3, #2
 800d0e0:	d106      	bne.n	800d0f0 <USB_HC_Init+0x1a8>
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	2b02      	cmp	r3, #2
 800d0e6:	d003      	beq.n	800d0f0 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800d0e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d0ec:	617b      	str	r3, [r7, #20]
 800d0ee:	e001      	b.n	800d0f4 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d0f4:	787b      	ldrb	r3, [r7, #1]
 800d0f6:	059b      	lsls	r3, r3, #22
 800d0f8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d0fc:	78bb      	ldrb	r3, [r7, #2]
 800d0fe:	02db      	lsls	r3, r3, #11
 800d100:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d104:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d106:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d10a:	049b      	lsls	r3, r3, #18
 800d10c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d110:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d112:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d114:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d118:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d11a:	69bb      	ldr	r3, [r7, #24]
 800d11c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d11e:	78fb      	ldrb	r3, [r7, #3]
 800d120:	0159      	lsls	r1, r3, #5
 800d122:	693b      	ldr	r3, [r7, #16]
 800d124:	440b      	add	r3, r1
 800d126:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d12a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d130:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800d132:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d136:	2b03      	cmp	r3, #3
 800d138:	d10f      	bne.n	800d15a <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800d13a:	78fb      	ldrb	r3, [r7, #3]
 800d13c:	015a      	lsls	r2, r3, #5
 800d13e:	693b      	ldr	r3, [r7, #16]
 800d140:	4413      	add	r3, r2
 800d142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	78fa      	ldrb	r2, [r7, #3]
 800d14a:	0151      	lsls	r1, r2, #5
 800d14c:	693a      	ldr	r2, [r7, #16]
 800d14e:	440a      	add	r2, r1
 800d150:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d154:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d158:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800d15a:	7ffb      	ldrb	r3, [r7, #31]
}
 800d15c:	4618      	mov	r0, r3
 800d15e:	3720      	adds	r7, #32
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}

0800d164 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b08c      	sub	sp, #48	; 0x30
 800d168:	af02      	add	r7, sp, #8
 800d16a:	60f8      	str	r0, [r7, #12]
 800d16c:	60b9      	str	r1, [r7, #8]
 800d16e:	4613      	mov	r3, r2
 800d170:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	785b      	ldrb	r3, [r3, #1]
 800d17a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800d17c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d180:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d02d      	beq.n	800d1ea <USB_HC_StartXfer+0x86>
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	791b      	ldrb	r3, [r3, #4]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d129      	bne.n	800d1ea <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800d196:	79fb      	ldrb	r3, [r7, #7]
 800d198:	2b01      	cmp	r3, #1
 800d19a:	d117      	bne.n	800d1cc <USB_HC_StartXfer+0x68>
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	79db      	ldrb	r3, [r3, #7]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d003      	beq.n	800d1ac <USB_HC_StartXfer+0x48>
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	79db      	ldrb	r3, [r3, #7]
 800d1a8:	2b02      	cmp	r3, #2
 800d1aa:	d10f      	bne.n	800d1cc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800d1ac:	69fb      	ldr	r3, [r7, #28]
 800d1ae:	015a      	lsls	r2, r3, #5
 800d1b0:	6a3b      	ldr	r3, [r7, #32]
 800d1b2:	4413      	add	r3, r2
 800d1b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1b8:	68db      	ldr	r3, [r3, #12]
 800d1ba:	69fa      	ldr	r2, [r7, #28]
 800d1bc:	0151      	lsls	r1, r2, #5
 800d1be:	6a3a      	ldr	r2, [r7, #32]
 800d1c0:	440a      	add	r2, r1
 800d1c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d1c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1ca:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800d1cc:	79fb      	ldrb	r3, [r7, #7]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d10b      	bne.n	800d1ea <USB_HC_StartXfer+0x86>
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	795b      	ldrb	r3, [r3, #5]
 800d1d6:	2b01      	cmp	r3, #1
 800d1d8:	d107      	bne.n	800d1ea <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	785b      	ldrb	r3, [r3, #1]
 800d1de:	4619      	mov	r1, r3
 800d1e0:	68f8      	ldr	r0, [r7, #12]
 800d1e2:	f000 fa2f 	bl	800d644 <USB_DoPing>
      return HAL_OK;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	e0f8      	b.n	800d3dc <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	695b      	ldr	r3, [r3, #20]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d018      	beq.n	800d224 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800d1f2:	68bb      	ldr	r3, [r7, #8]
 800d1f4:	695b      	ldr	r3, [r3, #20]
 800d1f6:	68ba      	ldr	r2, [r7, #8]
 800d1f8:	8912      	ldrh	r2, [r2, #8]
 800d1fa:	4413      	add	r3, r2
 800d1fc:	3b01      	subs	r3, #1
 800d1fe:	68ba      	ldr	r2, [r7, #8]
 800d200:	8912      	ldrh	r2, [r2, #8]
 800d202:	fbb3 f3f2 	udiv	r3, r3, r2
 800d206:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800d208:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d20a:	8b7b      	ldrh	r3, [r7, #26]
 800d20c:	429a      	cmp	r2, r3
 800d20e:	d90b      	bls.n	800d228 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800d210:	8b7b      	ldrh	r3, [r7, #26]
 800d212:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d214:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d216:	68ba      	ldr	r2, [r7, #8]
 800d218:	8912      	ldrh	r2, [r2, #8]
 800d21a:	fb02 f203 	mul.w	r2, r2, r3
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	611a      	str	r2, [r3, #16]
 800d222:	e001      	b.n	800d228 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800d224:	2301      	movs	r3, #1
 800d226:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	78db      	ldrb	r3, [r3, #3]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d007      	beq.n	800d240 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d230:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d232:	68ba      	ldr	r2, [r7, #8]
 800d234:	8912      	ldrh	r2, [r2, #8]
 800d236:	fb02 f203 	mul.w	r2, r2, r3
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	611a      	str	r2, [r3, #16]
 800d23e:	e003      	b.n	800d248 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800d240:	68bb      	ldr	r3, [r7, #8]
 800d242:	695a      	ldr	r2, [r3, #20]
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	691b      	ldr	r3, [r3, #16]
 800d24c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d250:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d252:	04d9      	lsls	r1, r3, #19
 800d254:	4b63      	ldr	r3, [pc, #396]	; (800d3e4 <USB_HC_StartXfer+0x280>)
 800d256:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d258:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	7a9b      	ldrb	r3, [r3, #10]
 800d25e:	075b      	lsls	r3, r3, #29
 800d260:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d264:	69f9      	ldr	r1, [r7, #28]
 800d266:	0148      	lsls	r0, r1, #5
 800d268:	6a39      	ldr	r1, [r7, #32]
 800d26a:	4401      	add	r1, r0
 800d26c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d270:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d272:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800d274:	79fb      	ldrb	r3, [r7, #7]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d009      	beq.n	800d28e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	68d9      	ldr	r1, [r3, #12]
 800d27e:	69fb      	ldr	r3, [r7, #28]
 800d280:	015a      	lsls	r2, r3, #5
 800d282:	6a3b      	ldr	r3, [r7, #32]
 800d284:	4413      	add	r3, r2
 800d286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d28a:	460a      	mov	r2, r1
 800d28c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800d28e:	6a3b      	ldr	r3, [r7, #32]
 800d290:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d294:	689b      	ldr	r3, [r3, #8]
 800d296:	f003 0301 	and.w	r3, r3, #1
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	bf0c      	ite	eq
 800d29e:	2301      	moveq	r3, #1
 800d2a0:	2300      	movne	r3, #0
 800d2a2:	b2db      	uxtb	r3, r3
 800d2a4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800d2a6:	69fb      	ldr	r3, [r7, #28]
 800d2a8:	015a      	lsls	r2, r3, #5
 800d2aa:	6a3b      	ldr	r3, [r7, #32]
 800d2ac:	4413      	add	r3, r2
 800d2ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	69fa      	ldr	r2, [r7, #28]
 800d2b6:	0151      	lsls	r1, r2, #5
 800d2b8:	6a3a      	ldr	r2, [r7, #32]
 800d2ba:	440a      	add	r2, r1
 800d2bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d2c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d2c4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800d2c6:	69fb      	ldr	r3, [r7, #28]
 800d2c8:	015a      	lsls	r2, r3, #5
 800d2ca:	6a3b      	ldr	r3, [r7, #32]
 800d2cc:	4413      	add	r3, r2
 800d2ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2d2:	681a      	ldr	r2, [r3, #0]
 800d2d4:	7e7b      	ldrb	r3, [r7, #25]
 800d2d6:	075b      	lsls	r3, r3, #29
 800d2d8:	69f9      	ldr	r1, [r7, #28]
 800d2da:	0148      	lsls	r0, r1, #5
 800d2dc:	6a39      	ldr	r1, [r7, #32]
 800d2de:	4401      	add	r1, r0
 800d2e0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800d2e4:	4313      	orrs	r3, r2
 800d2e6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800d2e8:	69fb      	ldr	r3, [r7, #28]
 800d2ea:	015a      	lsls	r2, r3, #5
 800d2ec:	6a3b      	ldr	r3, [r7, #32]
 800d2ee:	4413      	add	r3, r2
 800d2f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d2f8:	693b      	ldr	r3, [r7, #16]
 800d2fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d2fe:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	78db      	ldrb	r3, [r3, #3]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d004      	beq.n	800d312 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800d308:	693b      	ldr	r3, [r7, #16]
 800d30a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d30e:	613b      	str	r3, [r7, #16]
 800d310:	e003      	b.n	800d31a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800d312:	693b      	ldr	r3, [r7, #16]
 800d314:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d318:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d320:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800d322:	69fb      	ldr	r3, [r7, #28]
 800d324:	015a      	lsls	r2, r3, #5
 800d326:	6a3b      	ldr	r3, [r7, #32]
 800d328:	4413      	add	r3, r2
 800d32a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d32e:	461a      	mov	r2, r3
 800d330:	693b      	ldr	r3, [r7, #16]
 800d332:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800d334:	79fb      	ldrb	r3, [r7, #7]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d001      	beq.n	800d33e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800d33a:	2300      	movs	r3, #0
 800d33c:	e04e      	b.n	800d3dc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	78db      	ldrb	r3, [r3, #3]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d149      	bne.n	800d3da <USB_HC_StartXfer+0x276>
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	695b      	ldr	r3, [r3, #20]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d045      	beq.n	800d3da <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800d34e:	68bb      	ldr	r3, [r7, #8]
 800d350:	79db      	ldrb	r3, [r3, #7]
 800d352:	2b03      	cmp	r3, #3
 800d354:	d830      	bhi.n	800d3b8 <USB_HC_StartXfer+0x254>
 800d356:	a201      	add	r2, pc, #4	; (adr r2, 800d35c <USB_HC_StartXfer+0x1f8>)
 800d358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d35c:	0800d36d 	.word	0x0800d36d
 800d360:	0800d391 	.word	0x0800d391
 800d364:	0800d36d 	.word	0x0800d36d
 800d368:	0800d391 	.word	0x0800d391
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	695b      	ldr	r3, [r3, #20]
 800d370:	3303      	adds	r3, #3
 800d372:	089b      	lsrs	r3, r3, #2
 800d374:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800d376:	8afa      	ldrh	r2, [r7, #22]
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d37c:	b29b      	uxth	r3, r3
 800d37e:	429a      	cmp	r2, r3
 800d380:	d91c      	bls.n	800d3bc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	699b      	ldr	r3, [r3, #24]
 800d386:	f043 0220 	orr.w	r2, r3, #32
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	619a      	str	r2, [r3, #24]
        }
        break;
 800d38e:	e015      	b.n	800d3bc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	695b      	ldr	r3, [r3, #20]
 800d394:	3303      	adds	r3, #3
 800d396:	089b      	lsrs	r3, r3, #2
 800d398:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800d39a:	8afa      	ldrh	r2, [r7, #22]
 800d39c:	6a3b      	ldr	r3, [r7, #32]
 800d39e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d3a2:	691b      	ldr	r3, [r3, #16]
 800d3a4:	b29b      	uxth	r3, r3
 800d3a6:	429a      	cmp	r2, r3
 800d3a8:	d90a      	bls.n	800d3c0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	699b      	ldr	r3, [r3, #24]
 800d3ae:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	619a      	str	r2, [r3, #24]
        }
        break;
 800d3b6:	e003      	b.n	800d3c0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800d3b8:	bf00      	nop
 800d3ba:	e002      	b.n	800d3c2 <USB_HC_StartXfer+0x25e>
        break;
 800d3bc:	bf00      	nop
 800d3be:	e000      	b.n	800d3c2 <USB_HC_StartXfer+0x25e>
        break;
 800d3c0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	68d9      	ldr	r1, [r3, #12]
 800d3c6:	68bb      	ldr	r3, [r7, #8]
 800d3c8:	785a      	ldrb	r2, [r3, #1]
 800d3ca:	68bb      	ldr	r3, [r7, #8]
 800d3cc:	695b      	ldr	r3, [r3, #20]
 800d3ce:	b29b      	uxth	r3, r3
 800d3d0:	2000      	movs	r0, #0
 800d3d2:	9000      	str	r0, [sp, #0]
 800d3d4:	68f8      	ldr	r0, [r7, #12]
 800d3d6:	f7ff fb79 	bl	800cacc <USB_WritePacket>
  }

  return HAL_OK;
 800d3da:	2300      	movs	r3, #0
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	3728      	adds	r7, #40	; 0x28
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}
 800d3e4:	1ff80000 	.word	0x1ff80000

0800d3e8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d3e8:	b480      	push	{r7}
 800d3ea:	b085      	sub	sp, #20
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d3fa:	695b      	ldr	r3, [r3, #20]
 800d3fc:	b29b      	uxth	r3, r3
}
 800d3fe:	4618      	mov	r0, r3
 800d400:	3714      	adds	r7, #20
 800d402:	46bd      	mov	sp, r7
 800d404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d408:	4770      	bx	lr

0800d40a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800d40a:	b480      	push	{r7}
 800d40c:	b089      	sub	sp, #36	; 0x24
 800d40e:	af00      	add	r7, sp, #0
 800d410:	6078      	str	r0, [r7, #4]
 800d412:	460b      	mov	r3, r1
 800d414:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800d41a:	78fb      	ldrb	r3, [r7, #3]
 800d41c:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800d41e:	2300      	movs	r3, #0
 800d420:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	015a      	lsls	r2, r3, #5
 800d426:	69bb      	ldr	r3, [r7, #24]
 800d428:	4413      	add	r3, r2
 800d42a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	0c9b      	lsrs	r3, r3, #18
 800d432:	f003 0303 	and.w	r3, r3, #3
 800d436:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800d438:	697b      	ldr	r3, [r7, #20]
 800d43a:	015a      	lsls	r2, r3, #5
 800d43c:	69bb      	ldr	r3, [r7, #24]
 800d43e:	4413      	add	r3, r2
 800d440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	0fdb      	lsrs	r3, r3, #31
 800d448:	f003 0301 	and.w	r3, r3, #1
 800d44c:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	689b      	ldr	r3, [r3, #8]
 800d452:	f003 0320 	and.w	r3, r3, #32
 800d456:	2b20      	cmp	r3, #32
 800d458:	d104      	bne.n	800d464 <USB_HC_Halt+0x5a>
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d101      	bne.n	800d464 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800d460:	2300      	movs	r3, #0
 800d462:	e0e8      	b.n	800d636 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d002      	beq.n	800d470 <USB_HC_Halt+0x66>
 800d46a:	693b      	ldr	r3, [r7, #16]
 800d46c:	2b02      	cmp	r3, #2
 800d46e:	d173      	bne.n	800d558 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d470:	697b      	ldr	r3, [r7, #20]
 800d472:	015a      	lsls	r2, r3, #5
 800d474:	69bb      	ldr	r3, [r7, #24]
 800d476:	4413      	add	r3, r2
 800d478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	697a      	ldr	r2, [r7, #20]
 800d480:	0151      	lsls	r1, r2, #5
 800d482:	69ba      	ldr	r2, [r7, #24]
 800d484:	440a      	add	r2, r1
 800d486:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d48a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d48e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	689b      	ldr	r3, [r3, #8]
 800d494:	f003 0320 	and.w	r3, r3, #32
 800d498:	2b00      	cmp	r3, #0
 800d49a:	f040 80cb 	bne.w	800d634 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d143      	bne.n	800d532 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	015a      	lsls	r2, r3, #5
 800d4ae:	69bb      	ldr	r3, [r7, #24]
 800d4b0:	4413      	add	r3, r2
 800d4b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	697a      	ldr	r2, [r7, #20]
 800d4ba:	0151      	lsls	r1, r2, #5
 800d4bc:	69ba      	ldr	r2, [r7, #24]
 800d4be:	440a      	add	r2, r1
 800d4c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d4c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d4c8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	015a      	lsls	r2, r3, #5
 800d4ce:	69bb      	ldr	r3, [r7, #24]
 800d4d0:	4413      	add	r3, r2
 800d4d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	697a      	ldr	r2, [r7, #20]
 800d4da:	0151      	lsls	r1, r2, #5
 800d4dc:	69ba      	ldr	r2, [r7, #24]
 800d4de:	440a      	add	r2, r1
 800d4e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d4e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d4e8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800d4ea:	697b      	ldr	r3, [r7, #20]
 800d4ec:	015a      	lsls	r2, r3, #5
 800d4ee:	69bb      	ldr	r3, [r7, #24]
 800d4f0:	4413      	add	r3, r2
 800d4f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	697a      	ldr	r2, [r7, #20]
 800d4fa:	0151      	lsls	r1, r2, #5
 800d4fc:	69ba      	ldr	r2, [r7, #24]
 800d4fe:	440a      	add	r2, r1
 800d500:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d504:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d508:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800d50a:	69fb      	ldr	r3, [r7, #28]
 800d50c:	3301      	adds	r3, #1
 800d50e:	61fb      	str	r3, [r7, #28]
 800d510:	69fb      	ldr	r3, [r7, #28]
 800d512:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d516:	d81d      	bhi.n	800d554 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d518:	697b      	ldr	r3, [r7, #20]
 800d51a:	015a      	lsls	r2, r3, #5
 800d51c:	69bb      	ldr	r3, [r7, #24]
 800d51e:	4413      	add	r3, r2
 800d520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d52a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d52e:	d0ec      	beq.n	800d50a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d530:	e080      	b.n	800d634 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d532:	697b      	ldr	r3, [r7, #20]
 800d534:	015a      	lsls	r2, r3, #5
 800d536:	69bb      	ldr	r3, [r7, #24]
 800d538:	4413      	add	r3, r2
 800d53a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	697a      	ldr	r2, [r7, #20]
 800d542:	0151      	lsls	r1, r2, #5
 800d544:	69ba      	ldr	r2, [r7, #24]
 800d546:	440a      	add	r2, r1
 800d548:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d54c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d550:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d552:	e06f      	b.n	800d634 <USB_HC_Halt+0x22a>
            break;
 800d554:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d556:	e06d      	b.n	800d634 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d558:	697b      	ldr	r3, [r7, #20]
 800d55a:	015a      	lsls	r2, r3, #5
 800d55c:	69bb      	ldr	r3, [r7, #24]
 800d55e:	4413      	add	r3, r2
 800d560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	697a      	ldr	r2, [r7, #20]
 800d568:	0151      	lsls	r1, r2, #5
 800d56a:	69ba      	ldr	r2, [r7, #24]
 800d56c:	440a      	add	r2, r1
 800d56e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d572:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d576:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800d578:	69bb      	ldr	r3, [r7, #24]
 800d57a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d57e:	691b      	ldr	r3, [r3, #16]
 800d580:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d584:	2b00      	cmp	r3, #0
 800d586:	d143      	bne.n	800d610 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d588:	697b      	ldr	r3, [r7, #20]
 800d58a:	015a      	lsls	r2, r3, #5
 800d58c:	69bb      	ldr	r3, [r7, #24]
 800d58e:	4413      	add	r3, r2
 800d590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	697a      	ldr	r2, [r7, #20]
 800d598:	0151      	lsls	r1, r2, #5
 800d59a:	69ba      	ldr	r2, [r7, #24]
 800d59c:	440a      	add	r2, r1
 800d59e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d5a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d5a6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d5a8:	697b      	ldr	r3, [r7, #20]
 800d5aa:	015a      	lsls	r2, r3, #5
 800d5ac:	69bb      	ldr	r3, [r7, #24]
 800d5ae:	4413      	add	r3, r2
 800d5b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	697a      	ldr	r2, [r7, #20]
 800d5b8:	0151      	lsls	r1, r2, #5
 800d5ba:	69ba      	ldr	r2, [r7, #24]
 800d5bc:	440a      	add	r2, r1
 800d5be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d5c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d5c6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800d5c8:	697b      	ldr	r3, [r7, #20]
 800d5ca:	015a      	lsls	r2, r3, #5
 800d5cc:	69bb      	ldr	r3, [r7, #24]
 800d5ce:	4413      	add	r3, r2
 800d5d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	697a      	ldr	r2, [r7, #20]
 800d5d8:	0151      	lsls	r1, r2, #5
 800d5da:	69ba      	ldr	r2, [r7, #24]
 800d5dc:	440a      	add	r2, r1
 800d5de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d5e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d5e6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800d5e8:	69fb      	ldr	r3, [r7, #28]
 800d5ea:	3301      	adds	r3, #1
 800d5ec:	61fb      	str	r3, [r7, #28]
 800d5ee:	69fb      	ldr	r3, [r7, #28]
 800d5f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d5f4:	d81d      	bhi.n	800d632 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d5f6:	697b      	ldr	r3, [r7, #20]
 800d5f8:	015a      	lsls	r2, r3, #5
 800d5fa:	69bb      	ldr	r3, [r7, #24]
 800d5fc:	4413      	add	r3, r2
 800d5fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d608:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d60c:	d0ec      	beq.n	800d5e8 <USB_HC_Halt+0x1de>
 800d60e:	e011      	b.n	800d634 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	015a      	lsls	r2, r3, #5
 800d614:	69bb      	ldr	r3, [r7, #24]
 800d616:	4413      	add	r3, r2
 800d618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	697a      	ldr	r2, [r7, #20]
 800d620:	0151      	lsls	r1, r2, #5
 800d622:	69ba      	ldr	r2, [r7, #24]
 800d624:	440a      	add	r2, r1
 800d626:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d62a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d62e:	6013      	str	r3, [r2, #0]
 800d630:	e000      	b.n	800d634 <USB_HC_Halt+0x22a>
          break;
 800d632:	bf00      	nop
    }
  }

  return HAL_OK;
 800d634:	2300      	movs	r3, #0
}
 800d636:	4618      	mov	r0, r3
 800d638:	3724      	adds	r7, #36	; 0x24
 800d63a:	46bd      	mov	sp, r7
 800d63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d640:	4770      	bx	lr
	...

0800d644 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800d644:	b480      	push	{r7}
 800d646:	b087      	sub	sp, #28
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
 800d64c:	460b      	mov	r3, r1
 800d64e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800d654:	78fb      	ldrb	r3, [r7, #3]
 800d656:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800d658:	2301      	movs	r3, #1
 800d65a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	04da      	lsls	r2, r3, #19
 800d660:	4b15      	ldr	r3, [pc, #84]	; (800d6b8 <USB_DoPing+0x74>)
 800d662:	4013      	ands	r3, r2
 800d664:	693a      	ldr	r2, [r7, #16]
 800d666:	0151      	lsls	r1, r2, #5
 800d668:	697a      	ldr	r2, [r7, #20]
 800d66a:	440a      	add	r2, r1
 800d66c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d670:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d674:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800d676:	693b      	ldr	r3, [r7, #16]
 800d678:	015a      	lsls	r2, r3, #5
 800d67a:	697b      	ldr	r3, [r7, #20]
 800d67c:	4413      	add	r3, r2
 800d67e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d68c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d68e:	68bb      	ldr	r3, [r7, #8]
 800d690:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d694:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800d696:	693b      	ldr	r3, [r7, #16]
 800d698:	015a      	lsls	r2, r3, #5
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	4413      	add	r3, r2
 800d69e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d6a2:	461a      	mov	r2, r3
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800d6a8:	2300      	movs	r3, #0
}
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	371c      	adds	r7, #28
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b4:	4770      	bx	lr
 800d6b6:	bf00      	nop
 800d6b8:	1ff80000 	.word	0x1ff80000

0800d6bc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b086      	sub	sp, #24
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800d6cc:	6878      	ldr	r0, [r7, #4]
 800d6ce:	f7ff f97a 	bl	800c9c6 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800d6d2:	2110      	movs	r1, #16
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f7ff f9b1 	bl	800ca3c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	f7ff f9d4 	bl	800ca88 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	613b      	str	r3, [r7, #16]
 800d6e4:	e01f      	b.n	800d726 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800d6e6:	693b      	ldr	r3, [r7, #16]
 800d6e8:	015a      	lsls	r2, r3, #5
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	4413      	add	r3, r2
 800d6ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d6fc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d704:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d70c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800d70e:	693b      	ldr	r3, [r7, #16]
 800d710:	015a      	lsls	r2, r3, #5
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	4413      	add	r3, r2
 800d716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d71a:	461a      	mov	r2, r3
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800d720:	693b      	ldr	r3, [r7, #16]
 800d722:	3301      	adds	r3, #1
 800d724:	613b      	str	r3, [r7, #16]
 800d726:	693b      	ldr	r3, [r7, #16]
 800d728:	2b0f      	cmp	r3, #15
 800d72a:	d9dc      	bls.n	800d6e6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800d72c:	2300      	movs	r3, #0
 800d72e:	613b      	str	r3, [r7, #16]
 800d730:	e034      	b.n	800d79c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800d732:	693b      	ldr	r3, [r7, #16]
 800d734:	015a      	lsls	r2, r3, #5
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	4413      	add	r3, r2
 800d73a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d748:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800d74a:	68bb      	ldr	r3, [r7, #8]
 800d74c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d750:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d758:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800d75a:	693b      	ldr	r3, [r7, #16]
 800d75c:	015a      	lsls	r2, r3, #5
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	4413      	add	r3, r2
 800d762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d766:	461a      	mov	r2, r3
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800d76c:	697b      	ldr	r3, [r7, #20]
 800d76e:	3301      	adds	r3, #1
 800d770:	617b      	str	r3, [r7, #20]
 800d772:	697b      	ldr	r3, [r7, #20]
 800d774:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d778:	d80c      	bhi.n	800d794 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d77a:	693b      	ldr	r3, [r7, #16]
 800d77c:	015a      	lsls	r2, r3, #5
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	4413      	add	r3, r2
 800d782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d78c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d790:	d0ec      	beq.n	800d76c <USB_StopHost+0xb0>
 800d792:	e000      	b.n	800d796 <USB_StopHost+0xda>
        break;
 800d794:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800d796:	693b      	ldr	r3, [r7, #16]
 800d798:	3301      	adds	r3, #1
 800d79a:	613b      	str	r3, [r7, #16]
 800d79c:	693b      	ldr	r3, [r7, #16]
 800d79e:	2b0f      	cmp	r3, #15
 800d7a0:	d9c7      	bls.n	800d732 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d7a8:	461a      	mov	r2, r3
 800d7aa:	f04f 33ff 	mov.w	r3, #4294967295
 800d7ae:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	f04f 32ff 	mov.w	r2, #4294967295
 800d7b6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800d7b8:	6878      	ldr	r0, [r7, #4]
 800d7ba:	f7ff f8f3 	bl	800c9a4 <USB_EnableGlobalInt>

  return HAL_OK;
 800d7be:	2300      	movs	r3, #0
}
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	3718      	adds	r7, #24
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	bd80      	pop	{r7, pc}

0800d7c8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800d7cc:	4904      	ldr	r1, [pc, #16]	; (800d7e0 <MX_FATFS_Init+0x18>)
 800d7ce:	4805      	ldr	r0, [pc, #20]	; (800d7e4 <MX_FATFS_Init+0x1c>)
 800d7d0:	f006 f842 	bl	8013858 <FATFS_LinkDriver>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	461a      	mov	r2, r3
 800d7d8:	4b03      	ldr	r3, [pc, #12]	; (800d7e8 <MX_FATFS_Init+0x20>)
 800d7da:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d7dc:	bf00      	nop
 800d7de:	bd80      	pop	{r7, pc}
 800d7e0:	2400b038 	.word	0x2400b038
 800d7e4:	24000018 	.word	0x24000018
 800d7e8:	2400b03c 	.word	0x2400b03c

0800d7ec <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d7ec:	b480      	push	{r7}
 800d7ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d7f0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fa:	4770      	bx	lr

0800d7fc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b082      	sub	sp, #8
 800d800:	af00      	add	r7, sp, #0
 800d802:	4603      	mov	r3, r0
 800d804:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800d806:	79fb      	ldrb	r3, [r7, #7]
 800d808:	4618      	mov	r0, r3
 800d80a:	f000 f9d9 	bl	800dbc0 <USER_SPI_initialize>
 800d80e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800d810:	4618      	mov	r0, r3
 800d812:	3708      	adds	r7, #8
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}

0800d818 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b082      	sub	sp, #8
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	4603      	mov	r3, r0
 800d820:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */

	return USER_SPI_status(pdrv); //ADD THIS LINE
 800d822:	79fb      	ldrb	r3, [r7, #7]
 800d824:	4618      	mov	r0, r3
 800d826:	f000 fab5 	bl	800dd94 <USER_SPI_status>
 800d82a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	3708      	adds	r7, #8
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}

0800d834 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b084      	sub	sp, #16
 800d838:	af00      	add	r7, sp, #0
 800d83a:	60b9      	str	r1, [r7, #8]
 800d83c:	607a      	str	r2, [r7, #4]
 800d83e:	603b      	str	r3, [r7, #0]
 800d840:	4603      	mov	r3, r0
 800d842:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 800d844:	7bf8      	ldrb	r0, [r7, #15]
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	687a      	ldr	r2, [r7, #4]
 800d84a:	68b9      	ldr	r1, [r7, #8]
 800d84c:	f000 fab8 	bl	800ddc0 <USER_SPI_read>
 800d850:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800d852:	4618      	mov	r0, r3
 800d854:	3710      	adds	r7, #16
 800d856:	46bd      	mov	sp, r7
 800d858:	bd80      	pop	{r7, pc}

0800d85a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800d85a:	b580      	push	{r7, lr}
 800d85c:	b084      	sub	sp, #16
 800d85e:	af00      	add	r7, sp, #0
 800d860:	60b9      	str	r1, [r7, #8]
 800d862:	607a      	str	r2, [r7, #4]
 800d864:	603b      	str	r3, [r7, #0]
 800d866:	4603      	mov	r3, r0
 800d868:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 800d86a:	7bf8      	ldrb	r0, [r7, #15]
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	687a      	ldr	r2, [r7, #4]
 800d870:	68b9      	ldr	r1, [r7, #8]
 800d872:	f000 fb0b 	bl	800de8c <USER_SPI_write>
 800d876:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800d878:	4618      	mov	r0, r3
 800d87a:	3710      	adds	r7, #16
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}

0800d880 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b082      	sub	sp, #8
 800d884:	af00      	add	r7, sp, #0
 800d886:	4603      	mov	r3, r0
 800d888:	603a      	str	r2, [r7, #0]
 800d88a:	71fb      	strb	r3, [r7, #7]
 800d88c:	460b      	mov	r3, r1
 800d88e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 800d890:	79b9      	ldrb	r1, [r7, #6]
 800d892:	79fb      	ldrb	r3, [r7, #7]
 800d894:	683a      	ldr	r2, [r7, #0]
 800d896:	4618      	mov	r0, r3
 800d898:	f000 fb74 	bl	800df84 <USER_SPI_ioctl>
 800d89c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800d89e:	4618      	mov	r0, r3
 800d8a0:	3708      	adds	r7, #8
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}
	...

0800d8a8 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b082      	sub	sp, #8
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800d8b0:	f7f4 febc 	bl	800262c <HAL_GetTick>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	4a04      	ldr	r2, [pc, #16]	; (800d8c8 <SPI_Timer_On+0x20>)
 800d8b8:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800d8ba:	4a04      	ldr	r2, [pc, #16]	; (800d8cc <SPI_Timer_On+0x24>)
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	6013      	str	r3, [r2, #0]
}
 800d8c0:	bf00      	nop
 800d8c2:	3708      	adds	r7, #8
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}
 800d8c8:	2400b4a4 	.word	0x2400b4a4
 800d8cc:	2400b4a8 	.word	0x2400b4a8

0800d8d0 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800d8d4:	f7f4 feaa 	bl	800262c <HAL_GetTick>
 800d8d8:	4602      	mov	r2, r0
 800d8da:	4b06      	ldr	r3, [pc, #24]	; (800d8f4 <SPI_Timer_Status+0x24>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	1ad2      	subs	r2, r2, r3
 800d8e0:	4b05      	ldr	r3, [pc, #20]	; (800d8f8 <SPI_Timer_Status+0x28>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	bf34      	ite	cc
 800d8e8:	2301      	movcc	r3, #1
 800d8ea:	2300      	movcs	r3, #0
 800d8ec:	b2db      	uxtb	r3, r3
}
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	bd80      	pop	{r7, pc}
 800d8f2:	bf00      	nop
 800d8f4:	2400b4a4 	.word	0x2400b4a4
 800d8f8:	2400b4a8 	.word	0x2400b4a8

0800d8fc <xchg_spi>:
/* SPI controls (Platform dependent)                                     */
/*-----------------------------------------------------------------------*/

/* Exchange a byte */
static BYTE xchg_spi (BYTE dat	/* Data to send */)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b086      	sub	sp, #24
 800d900:	af02      	add	r7, sp, #8
 800d902:	4603      	mov	r3, r0
 800d904:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800d906:	f107 020f 	add.w	r2, r7, #15
 800d90a:	1df9      	adds	r1, r7, #7
 800d90c:	2332      	movs	r3, #50	; 0x32
 800d90e:	9300      	str	r3, [sp, #0]
 800d910:	2301      	movs	r3, #1
 800d912:	4804      	ldr	r0, [pc, #16]	; (800d924 <xchg_spi+0x28>)
 800d914:	f7fc fabe 	bl	8009e94 <HAL_SPI_TransmitReceive>
    return rxDat;
 800d918:	7bfb      	ldrb	r3, [r7, #15]
}
 800d91a:	4618      	mov	r0, r3
 800d91c:	3710      	adds	r7, #16
 800d91e:	46bd      	mov	sp, r7
 800d920:	bd80      	pop	{r7, pc}
 800d922:	bf00      	nop
 800d924:	2400acb4 	.word	0x2400acb4

0800d928 <rcvr_spi_multi>:


/* Receive multiple byte */
static void rcvr_spi_multi (BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */)
{
 800d928:	b590      	push	{r4, r7, lr}
 800d92a:	b085      	sub	sp, #20
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
 800d930:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++)
 800d932:	2300      	movs	r3, #0
 800d934:	60fb      	str	r3, [r7, #12]
 800d936:	e00a      	b.n	800d94e <rcvr_spi_multi+0x26>
	{
		*(buff+i) = xchg_spi(0xFF);
 800d938:	687a      	ldr	r2, [r7, #4]
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	18d4      	adds	r4, r2, r3
 800d93e:	20ff      	movs	r0, #255	; 0xff
 800d940:	f7ff ffdc 	bl	800d8fc <xchg_spi>
 800d944:	4603      	mov	r3, r0
 800d946:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++)
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	3301      	adds	r3, #1
 800d94c:	60fb      	str	r3, [r7, #12]
 800d94e:	68fa      	ldr	r2, [r7, #12]
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	429a      	cmp	r2, r3
 800d954:	d3f0      	bcc.n	800d938 <rcvr_spi_multi+0x10>
	}
}
 800d956:	bf00      	nop
 800d958:	bf00      	nop
 800d95a:	3714      	adds	r7, #20
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd90      	pop	{r4, r7, pc}

0800d960 <xmit_spi_multi>:

#if _USE_WRITE
/* Send multiple byte */
static void xmit_spi_multi (const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b084      	sub	sp, #16
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
 800d968:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++)
 800d96a:	2300      	movs	r3, #0
 800d96c:	60fb      	str	r3, [r7, #12]
 800d96e:	e009      	b.n	800d984 <xmit_spi_multi+0x24>
	{
		xchg_spi(*(buff+i));
 800d970:	687a      	ldr	r2, [r7, #4]
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	4413      	add	r3, r2
 800d976:	781b      	ldrb	r3, [r3, #0]
 800d978:	4618      	mov	r0, r3
 800d97a:	f7ff ffbf 	bl	800d8fc <xchg_spi>
	for(UINT i=0; i<btx; i++)
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	3301      	adds	r3, #1
 800d982:	60fb      	str	r3, [r7, #12]
 800d984:	68fa      	ldr	r2, [r7, #12]
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	429a      	cmp	r2, r3
 800d98a:	d3f1      	bcc.n	800d970 <xmit_spi_multi+0x10>
	}
}
 800d98c:	bf00      	nop
 800d98e:	bf00      	nop
 800d990:	3710      	adds	r7, #16
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}

0800d996 <wait_ready>:
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/

static int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */)
{
 800d996:	b580      	push	{r7, lr}
 800d998:	b086      	sub	sp, #24
 800d99a:	af00      	add	r7, sp, #0
 800d99c:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800d99e:	f7f4 fe45 	bl	800262c <HAL_GetTick>
 800d9a2:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800d9a8:	20ff      	movs	r0, #255	; 0xff
 800d9aa:	f7ff ffa7 	bl	800d8fc <xchg_spi>
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800d9b2:	7bfb      	ldrb	r3, [r7, #15]
 800d9b4:	2bff      	cmp	r3, #255	; 0xff
 800d9b6:	d007      	beq.n	800d9c8 <wait_ready+0x32>
 800d9b8:	f7f4 fe38 	bl	800262c <HAL_GetTick>
 800d9bc:	4602      	mov	r2, r0
 800d9be:	697b      	ldr	r3, [r7, #20]
 800d9c0:	1ad3      	subs	r3, r2, r3
 800d9c2:	693a      	ldr	r2, [r7, #16]
 800d9c4:	429a      	cmp	r2, r3
 800d9c6:	d8ef      	bhi.n	800d9a8 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800d9c8:	7bfb      	ldrb	r3, [r7, #15]
 800d9ca:	2bff      	cmp	r3, #255	; 0xff
 800d9cc:	bf0c      	ite	eq
 800d9ce:	2301      	moveq	r3, #1
 800d9d0:	2300      	movne	r3, #0
 800d9d2:	b2db      	uxtb	r3, r3
}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	3718      	adds	r7, #24
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}

0800d9dc <despiselect>:
/*-----------------------------------------------------------------------*/
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static void despiselect (void)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800d9e0:	2201      	movs	r2, #1
 800d9e2:	2110      	movs	r1, #16
 800d9e4:	4803      	ldr	r0, [pc, #12]	; (800d9f4 <despiselect+0x18>)
 800d9e6:	f7f7 fce1 	bl	80053ac <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800d9ea:	20ff      	movs	r0, #255	; 0xff
 800d9ec:	f7ff ff86 	bl	800d8fc <xchg_spi>

}
 800d9f0:	bf00      	nop
 800d9f2:	bd80      	pop	{r7, pc}
 800d9f4:	58020c00 	.word	0x58020c00

0800d9f8 <spiselect>:
/*-----------------------------------------------------------------------*/
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	2110      	movs	r1, #16
 800da00:	4809      	ldr	r0, [pc, #36]	; (800da28 <spiselect+0x30>)
 800da02:	f7f7 fcd3 	bl	80053ac <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800da06:	20ff      	movs	r0, #255	; 0xff
 800da08:	f7ff ff78 	bl	800d8fc <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800da0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800da10:	f7ff ffc1 	bl	800d996 <wait_ready>
 800da14:	4603      	mov	r3, r0
 800da16:	2b00      	cmp	r3, #0
 800da18:	d001      	beq.n	800da1e <spiselect+0x26>
 800da1a:	2301      	movs	r3, #1
 800da1c:	e002      	b.n	800da24 <spiselect+0x2c>

	despiselect();
 800da1e:	f7ff ffdd 	bl	800d9dc <despiselect>
	return 0;	/* Timeout */
 800da22:	2300      	movs	r3, #0
}
 800da24:	4618      	mov	r0, r3
 800da26:	bd80      	pop	{r7, pc}
 800da28:	58020c00 	.word	0x58020c00

0800da2c <rcvr_datablock>:
/*-----------------------------------------------------------------------*/

static int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b084      	sub	sp, #16
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
 800da34:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800da36:	20c8      	movs	r0, #200	; 0xc8
 800da38:	f7ff ff36 	bl	800d8a8 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800da3c:	20ff      	movs	r0, #255	; 0xff
 800da3e:	f7ff ff5d 	bl	800d8fc <xchg_spi>
 800da42:	4603      	mov	r3, r0
 800da44:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800da46:	7bfb      	ldrb	r3, [r7, #15]
 800da48:	2bff      	cmp	r3, #255	; 0xff
 800da4a:	d104      	bne.n	800da56 <rcvr_datablock+0x2a>
 800da4c:	f7ff ff40 	bl	800d8d0 <SPI_Timer_Status>
 800da50:	4603      	mov	r3, r0
 800da52:	2b00      	cmp	r3, #0
 800da54:	d1f2      	bne.n	800da3c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800da56:	7bfb      	ldrb	r3, [r7, #15]
 800da58:	2bfe      	cmp	r3, #254	; 0xfe
 800da5a:	d001      	beq.n	800da60 <rcvr_datablock+0x34>
 800da5c:	2300      	movs	r3, #0
 800da5e:	e00a      	b.n	800da76 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800da60:	6839      	ldr	r1, [r7, #0]
 800da62:	6878      	ldr	r0, [r7, #4]
 800da64:	f7ff ff60 	bl	800d928 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800da68:	20ff      	movs	r0, #255	; 0xff
 800da6a:	f7ff ff47 	bl	800d8fc <xchg_spi>
 800da6e:	20ff      	movs	r0, #255	; 0xff
 800da70:	f7ff ff44 	bl	800d8fc <xchg_spi>

	return 1;						/* Function succeeded */
 800da74:	2301      	movs	r3, #1
}
 800da76:	4618      	mov	r0, r3
 800da78:	3710      	adds	r7, #16
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}

0800da7e <xmit_datablock>:

#if _USE_WRITE
static int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */)
{
 800da7e:	b580      	push	{r7, lr}
 800da80:	b084      	sub	sp, #16
 800da82:	af00      	add	r7, sp, #0
 800da84:	6078      	str	r0, [r7, #4]
 800da86:	460b      	mov	r3, r1
 800da88:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800da8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800da8e:	f7ff ff82 	bl	800d996 <wait_ready>
 800da92:	4603      	mov	r3, r0
 800da94:	2b00      	cmp	r3, #0
 800da96:	d101      	bne.n	800da9c <xmit_datablock+0x1e>
 800da98:	2300      	movs	r3, #0
 800da9a:	e01e      	b.n	800dada <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800da9c:	78fb      	ldrb	r3, [r7, #3]
 800da9e:	4618      	mov	r0, r3
 800daa0:	f7ff ff2c 	bl	800d8fc <xchg_spi>
	if (token != 0xFD)
 800daa4:	78fb      	ldrb	r3, [r7, #3]
 800daa6:	2bfd      	cmp	r3, #253	; 0xfd
 800daa8:	d016      	beq.n	800dad8 <xmit_datablock+0x5a>
	{				/* Send data if token is other than StopTran */
		xmit_spi_multi(buff, 512);		/* Data */
 800daaa:	f44f 7100 	mov.w	r1, #512	; 0x200
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f7ff ff56 	bl	800d960 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800dab4:	20ff      	movs	r0, #255	; 0xff
 800dab6:	f7ff ff21 	bl	800d8fc <xchg_spi>
 800daba:	20ff      	movs	r0, #255	; 0xff
 800dabc:	f7ff ff1e 	bl	800d8fc <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800dac0:	20ff      	movs	r0, #255	; 0xff
 800dac2:	f7ff ff1b 	bl	800d8fc <xchg_spi>
 800dac6:	4603      	mov	r3, r0
 800dac8:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800daca:	7bfb      	ldrb	r3, [r7, #15]
 800dacc:	f003 031f 	and.w	r3, r3, #31
 800dad0:	2b05      	cmp	r3, #5
 800dad2:	d001      	beq.n	800dad8 <xmit_datablock+0x5a>
 800dad4:	2300      	movs	r3, #0
 800dad6:	e000      	b.n	800dada <xmit_datablock+0x5c>
	}
	return 1;
 800dad8:	2301      	movs	r3, #1
}
 800dada:	4618      	mov	r0, r3
 800dadc:	3710      	adds	r7, #16
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}

0800dae2 <send_cmd>:
/*-----------------------------------------------------------------------*/

static BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */)
{
 800dae2:	b580      	push	{r7, lr}
 800dae4:	b084      	sub	sp, #16
 800dae6:	af00      	add	r7, sp, #0
 800dae8:	4603      	mov	r3, r0
 800daea:	6039      	str	r1, [r7, #0]
 800daec:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80)
 800daee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	da0e      	bge.n	800db14 <send_cmd+0x32>
	{	/* Send a CMD55 prior to ACMD<n> */
		cmd &= 0x7F;
 800daf6:	79fb      	ldrb	r3, [r7, #7]
 800daf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dafc:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800dafe:	2100      	movs	r1, #0
 800db00:	2037      	movs	r0, #55	; 0x37
 800db02:	f7ff ffee 	bl	800dae2 <send_cmd>
 800db06:	4603      	mov	r3, r0
 800db08:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800db0a:	7bbb      	ldrb	r3, [r7, #14]
 800db0c:	2b01      	cmp	r3, #1
 800db0e:	d901      	bls.n	800db14 <send_cmd+0x32>
 800db10:	7bbb      	ldrb	r3, [r7, #14]
 800db12:	e051      	b.n	800dbb8 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12)
 800db14:	79fb      	ldrb	r3, [r7, #7]
 800db16:	2b0c      	cmp	r3, #12
 800db18:	d008      	beq.n	800db2c <send_cmd+0x4a>
	{
		despiselect();
 800db1a:	f7ff ff5f 	bl	800d9dc <despiselect>
		if (!spiselect()) return 0xFF;
 800db1e:	f7ff ff6b 	bl	800d9f8 <spiselect>
 800db22:	4603      	mov	r3, r0
 800db24:	2b00      	cmp	r3, #0
 800db26:	d101      	bne.n	800db2c <send_cmd+0x4a>
 800db28:	23ff      	movs	r3, #255	; 0xff
 800db2a:	e045      	b.n	800dbb8 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800db2c:	79fb      	ldrb	r3, [r7, #7]
 800db2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db32:	b2db      	uxtb	r3, r3
 800db34:	4618      	mov	r0, r3
 800db36:	f7ff fee1 	bl	800d8fc <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	0e1b      	lsrs	r3, r3, #24
 800db3e:	b2db      	uxtb	r3, r3
 800db40:	4618      	mov	r0, r3
 800db42:	f7ff fedb 	bl	800d8fc <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	0c1b      	lsrs	r3, r3, #16
 800db4a:	b2db      	uxtb	r3, r3
 800db4c:	4618      	mov	r0, r3
 800db4e:	f7ff fed5 	bl	800d8fc <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	0a1b      	lsrs	r3, r3, #8
 800db56:	b2db      	uxtb	r3, r3
 800db58:	4618      	mov	r0, r3
 800db5a:	f7ff fecf 	bl	800d8fc <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	b2db      	uxtb	r3, r3
 800db62:	4618      	mov	r0, r3
 800db64:	f7ff feca 	bl	800d8fc <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800db68:	2301      	movs	r3, #1
 800db6a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800db6c:	79fb      	ldrb	r3, [r7, #7]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d101      	bne.n	800db76 <send_cmd+0x94>
 800db72:	2395      	movs	r3, #149	; 0x95
 800db74:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800db76:	79fb      	ldrb	r3, [r7, #7]
 800db78:	2b08      	cmp	r3, #8
 800db7a:	d101      	bne.n	800db80 <send_cmd+0x9e>
 800db7c:	2387      	movs	r3, #135	; 0x87
 800db7e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800db80:	7bfb      	ldrb	r3, [r7, #15]
 800db82:	4618      	mov	r0, r3
 800db84:	f7ff feba 	bl	800d8fc <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800db88:	79fb      	ldrb	r3, [r7, #7]
 800db8a:	2b0c      	cmp	r3, #12
 800db8c:	d102      	bne.n	800db94 <send_cmd+0xb2>
 800db8e:	20ff      	movs	r0, #255	; 0xff
 800db90:	f7ff feb4 	bl	800d8fc <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800db94:	230a      	movs	r3, #10
 800db96:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800db98:	20ff      	movs	r0, #255	; 0xff
 800db9a:	f7ff feaf 	bl	800d8fc <xchg_spi>
 800db9e:	4603      	mov	r3, r0
 800dba0:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800dba2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	da05      	bge.n	800dbb6 <send_cmd+0xd4>
 800dbaa:	7bfb      	ldrb	r3, [r7, #15]
 800dbac:	3b01      	subs	r3, #1
 800dbae:	73fb      	strb	r3, [r7, #15]
 800dbb0:	7bfb      	ldrb	r3, [r7, #15]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d1f0      	bne.n	800db98 <send_cmd+0xb6>

	return res;							/* Return received response */
 800dbb6:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbb8:	4618      	mov	r0, r3
 800dbba:	3710      	adds	r7, #16
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd80      	pop	{r7, pc}

0800dbc0 <USER_SPI_initialize>:
/* Initialize disk drive                                                 */
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */)
{
 800dbc0:	b590      	push	{r4, r7, lr}
 800dbc2:	b085      	sub	sp, #20
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800dbca:	79fb      	ldrb	r3, [r7, #7]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d001      	beq.n	800dbd4 <USER_SPI_initialize+0x14>
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	e0d4      	b.n	800dd7e <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800dbd4:	4b6c      	ldr	r3, [pc, #432]	; (800dd88 <USER_SPI_initialize+0x1c8>)
 800dbd6:	781b      	ldrb	r3, [r3, #0]
 800dbd8:	b2db      	uxtb	r3, r3
 800dbda:	f003 0302 	and.w	r3, r3, #2
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d003      	beq.n	800dbea <USER_SPI_initialize+0x2a>
 800dbe2:	4b69      	ldr	r3, [pc, #420]	; (800dd88 <USER_SPI_initialize+0x1c8>)
 800dbe4:	781b      	ldrb	r3, [r3, #0]
 800dbe6:	b2db      	uxtb	r3, r3
 800dbe8:	e0c9      	b.n	800dd7e <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 800dbea:	4b68      	ldr	r3, [pc, #416]	; (800dd8c <USER_SPI_initialize+0x1cc>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	681a      	ldr	r2, [r3, #0]
 800dbf0:	4b66      	ldr	r3, [pc, #408]	; (800dd8c <USER_SPI_initialize+0x1cc>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	f042 42e0 	orr.w	r2, r2, #1879048192	; 0x70000000
 800dbf8:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800dbfa:	230a      	movs	r3, #10
 800dbfc:	73fb      	strb	r3, [r7, #15]
 800dbfe:	e005      	b.n	800dc0c <USER_SPI_initialize+0x4c>
 800dc00:	20ff      	movs	r0, #255	; 0xff
 800dc02:	f7ff fe7b 	bl	800d8fc <xchg_spi>
 800dc06:	7bfb      	ldrb	r3, [r7, #15]
 800dc08:	3b01      	subs	r3, #1
 800dc0a:	73fb      	strb	r3, [r7, #15]
 800dc0c:	7bfb      	ldrb	r3, [r7, #15]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d1f6      	bne.n	800dc00 <USER_SPI_initialize+0x40>

	ty = 0;
 800dc12:	2300      	movs	r3, #0
 800dc14:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800dc16:	2100      	movs	r1, #0
 800dc18:	2000      	movs	r0, #0
 800dc1a:	f7ff ff62 	bl	800dae2 <send_cmd>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	2b01      	cmp	r3, #1
 800dc22:	f040 808b 	bne.w	800dd3c <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800dc26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800dc2a:	f7ff fe3d 	bl	800d8a8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800dc2e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800dc32:	2008      	movs	r0, #8
 800dc34:	f7ff ff55 	bl	800dae2 <send_cmd>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	2b01      	cmp	r3, #1
 800dc3c:	d151      	bne.n	800dce2 <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800dc3e:	2300      	movs	r3, #0
 800dc40:	73fb      	strb	r3, [r7, #15]
 800dc42:	e00d      	b.n	800dc60 <USER_SPI_initialize+0xa0>
 800dc44:	7bfc      	ldrb	r4, [r7, #15]
 800dc46:	20ff      	movs	r0, #255	; 0xff
 800dc48:	f7ff fe58 	bl	800d8fc <xchg_spi>
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	461a      	mov	r2, r3
 800dc50:	f107 0310 	add.w	r3, r7, #16
 800dc54:	4423      	add	r3, r4
 800dc56:	f803 2c08 	strb.w	r2, [r3, #-8]
 800dc5a:	7bfb      	ldrb	r3, [r7, #15]
 800dc5c:	3301      	adds	r3, #1
 800dc5e:	73fb      	strb	r3, [r7, #15]
 800dc60:	7bfb      	ldrb	r3, [r7, #15]
 800dc62:	2b03      	cmp	r3, #3
 800dc64:	d9ee      	bls.n	800dc44 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800dc66:	7abb      	ldrb	r3, [r7, #10]
 800dc68:	2b01      	cmp	r3, #1
 800dc6a:	d167      	bne.n	800dd3c <USER_SPI_initialize+0x17c>
 800dc6c:	7afb      	ldrb	r3, [r7, #11]
 800dc6e:	2baa      	cmp	r3, #170	; 0xaa
 800dc70:	d164      	bne.n	800dd3c <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800dc72:	bf00      	nop
 800dc74:	f7ff fe2c 	bl	800d8d0 <SPI_Timer_Status>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d007      	beq.n	800dc8e <USER_SPI_initialize+0xce>
 800dc7e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800dc82:	20a9      	movs	r0, #169	; 0xa9
 800dc84:	f7ff ff2d 	bl	800dae2 <send_cmd>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d1f2      	bne.n	800dc74 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800dc8e:	f7ff fe1f 	bl	800d8d0 <SPI_Timer_Status>
 800dc92:	4603      	mov	r3, r0
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d051      	beq.n	800dd3c <USER_SPI_initialize+0x17c>
 800dc98:	2100      	movs	r1, #0
 800dc9a:	203a      	movs	r0, #58	; 0x3a
 800dc9c:	f7ff ff21 	bl	800dae2 <send_cmd>
 800dca0:	4603      	mov	r3, r0
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d14a      	bne.n	800dd3c <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800dca6:	2300      	movs	r3, #0
 800dca8:	73fb      	strb	r3, [r7, #15]
 800dcaa:	e00d      	b.n	800dcc8 <USER_SPI_initialize+0x108>
 800dcac:	7bfc      	ldrb	r4, [r7, #15]
 800dcae:	20ff      	movs	r0, #255	; 0xff
 800dcb0:	f7ff fe24 	bl	800d8fc <xchg_spi>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	461a      	mov	r2, r3
 800dcb8:	f107 0310 	add.w	r3, r7, #16
 800dcbc:	4423      	add	r3, r4
 800dcbe:	f803 2c08 	strb.w	r2, [r3, #-8]
 800dcc2:	7bfb      	ldrb	r3, [r7, #15]
 800dcc4:	3301      	adds	r3, #1
 800dcc6:	73fb      	strb	r3, [r7, #15]
 800dcc8:	7bfb      	ldrb	r3, [r7, #15]
 800dcca:	2b03      	cmp	r3, #3
 800dccc:	d9ee      	bls.n	800dcac <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800dcce:	7a3b      	ldrb	r3, [r7, #8]
 800dcd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d001      	beq.n	800dcdc <USER_SPI_initialize+0x11c>
 800dcd8:	230c      	movs	r3, #12
 800dcda:	e000      	b.n	800dcde <USER_SPI_initialize+0x11e>
 800dcdc:	2304      	movs	r3, #4
 800dcde:	737b      	strb	r3, [r7, #13]
 800dce0:	e02c      	b.n	800dd3c <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800dce2:	2100      	movs	r1, #0
 800dce4:	20a9      	movs	r0, #169	; 0xa9
 800dce6:	f7ff fefc 	bl	800dae2 <send_cmd>
 800dcea:	4603      	mov	r3, r0
 800dcec:	2b01      	cmp	r3, #1
 800dcee:	d804      	bhi.n	800dcfa <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800dcf0:	2302      	movs	r3, #2
 800dcf2:	737b      	strb	r3, [r7, #13]
 800dcf4:	23a9      	movs	r3, #169	; 0xa9
 800dcf6:	73bb      	strb	r3, [r7, #14]
 800dcf8:	e003      	b.n	800dd02 <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800dcfa:	2301      	movs	r3, #1
 800dcfc:	737b      	strb	r3, [r7, #13]
 800dcfe:	2301      	movs	r3, #1
 800dd00:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800dd02:	bf00      	nop
 800dd04:	f7ff fde4 	bl	800d8d0 <SPI_Timer_Status>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d007      	beq.n	800dd1e <USER_SPI_initialize+0x15e>
 800dd0e:	7bbb      	ldrb	r3, [r7, #14]
 800dd10:	2100      	movs	r1, #0
 800dd12:	4618      	mov	r0, r3
 800dd14:	f7ff fee5 	bl	800dae2 <send_cmd>
 800dd18:	4603      	mov	r3, r0
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d1f2      	bne.n	800dd04 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800dd1e:	f7ff fdd7 	bl	800d8d0 <SPI_Timer_Status>
 800dd22:	4603      	mov	r3, r0
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d007      	beq.n	800dd38 <USER_SPI_initialize+0x178>
 800dd28:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dd2c:	2010      	movs	r0, #16
 800dd2e:	f7ff fed8 	bl	800dae2 <send_cmd>
 800dd32:	4603      	mov	r3, r0
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d001      	beq.n	800dd3c <USER_SPI_initialize+0x17c>
				ty = 0;
 800dd38:	2300      	movs	r3, #0
 800dd3a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800dd3c:	4a14      	ldr	r2, [pc, #80]	; (800dd90 <USER_SPI_initialize+0x1d0>)
 800dd3e:	7b7b      	ldrb	r3, [r7, #13]
 800dd40:	7013      	strb	r3, [r2, #0]
	despiselect();
 800dd42:	f7ff fe4b 	bl	800d9dc <despiselect>

	if (ty) {			/* OK */
 800dd46:	7b7b      	ldrb	r3, [r7, #13]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d012      	beq.n	800dd72 <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 800dd4c:	4b0f      	ldr	r3, [pc, #60]	; (800dd8c <USER_SPI_initialize+0x1cc>)
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800dd56:	4b0d      	ldr	r3, [pc, #52]	; (800dd8c <USER_SPI_initialize+0x1cc>)
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800dd5e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800dd60:	4b09      	ldr	r3, [pc, #36]	; (800dd88 <USER_SPI_initialize+0x1c8>)
 800dd62:	781b      	ldrb	r3, [r3, #0]
 800dd64:	b2db      	uxtb	r3, r3
 800dd66:	f023 0301 	bic.w	r3, r3, #1
 800dd6a:	b2da      	uxtb	r2, r3
 800dd6c:	4b06      	ldr	r3, [pc, #24]	; (800dd88 <USER_SPI_initialize+0x1c8>)
 800dd6e:	701a      	strb	r2, [r3, #0]
 800dd70:	e002      	b.n	800dd78 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800dd72:	4b05      	ldr	r3, [pc, #20]	; (800dd88 <USER_SPI_initialize+0x1c8>)
 800dd74:	2201      	movs	r2, #1
 800dd76:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800dd78:	4b03      	ldr	r3, [pc, #12]	; (800dd88 <USER_SPI_initialize+0x1c8>)
 800dd7a:	781b      	ldrb	r3, [r3, #0]
 800dd7c:	b2db      	uxtb	r3, r3
}
 800dd7e:	4618      	mov	r0, r3
 800dd80:	3714      	adds	r7, #20
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd90      	pop	{r4, r7, pc}
 800dd86:	bf00      	nop
 800dd88:	2400002c 	.word	0x2400002c
 800dd8c:	2400acb4 	.word	0x2400acb4
 800dd90:	2400a3ec 	.word	0x2400a3ec

0800dd94 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800dd94:	b480      	push	{r7}
 800dd96:	b083      	sub	sp, #12
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800dd9e:	79fb      	ldrb	r3, [r7, #7]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d001      	beq.n	800dda8 <USER_SPI_status+0x14>
 800dda4:	2301      	movs	r3, #1
 800dda6:	e002      	b.n	800ddae <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800dda8:	4b04      	ldr	r3, [pc, #16]	; (800ddbc <USER_SPI_status+0x28>)
 800ddaa:	781b      	ldrb	r3, [r3, #0]
 800ddac:	b2db      	uxtb	r3, r3
}
 800ddae:	4618      	mov	r0, r3
 800ddb0:	370c      	adds	r7, #12
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb8:	4770      	bx	lr
 800ddba:	bf00      	nop
 800ddbc:	2400002c 	.word	0x2400002c

0800ddc0 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b084      	sub	sp, #16
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	60b9      	str	r1, [r7, #8]
 800ddc8:	607a      	str	r2, [r7, #4]
 800ddca:	603b      	str	r3, [r7, #0]
 800ddcc:	4603      	mov	r3, r0
 800ddce:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800ddd0:	7bfb      	ldrb	r3, [r7, #15]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d102      	bne.n	800dddc <USER_SPI_read+0x1c>
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d101      	bne.n	800dde0 <USER_SPI_read+0x20>
 800dddc:	2304      	movs	r3, #4
 800ddde:	e04d      	b.n	800de7c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800dde0:	4b28      	ldr	r3, [pc, #160]	; (800de84 <USER_SPI_read+0xc4>)
 800dde2:	781b      	ldrb	r3, [r3, #0]
 800dde4:	b2db      	uxtb	r3, r3
 800dde6:	f003 0301 	and.w	r3, r3, #1
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d001      	beq.n	800ddf2 <USER_SPI_read+0x32>
 800ddee:	2303      	movs	r3, #3
 800ddf0:	e044      	b.n	800de7c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800ddf2:	4b25      	ldr	r3, [pc, #148]	; (800de88 <USER_SPI_read+0xc8>)
 800ddf4:	781b      	ldrb	r3, [r3, #0]
 800ddf6:	f003 0308 	and.w	r3, r3, #8
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d102      	bne.n	800de04 <USER_SPI_read+0x44>
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	025b      	lsls	r3, r3, #9
 800de02:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	2b01      	cmp	r3, #1
 800de08:	d111      	bne.n	800de2e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800de0a:	6879      	ldr	r1, [r7, #4]
 800de0c:	2011      	movs	r0, #17
 800de0e:	f7ff fe68 	bl	800dae2 <send_cmd>
 800de12:	4603      	mov	r3, r0
 800de14:	2b00      	cmp	r3, #0
 800de16:	d129      	bne.n	800de6c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800de18:	f44f 7100 	mov.w	r1, #512	; 0x200
 800de1c:	68b8      	ldr	r0, [r7, #8]
 800de1e:	f7ff fe05 	bl	800da2c <rcvr_datablock>
 800de22:	4603      	mov	r3, r0
 800de24:	2b00      	cmp	r3, #0
 800de26:	d021      	beq.n	800de6c <USER_SPI_read+0xac>
			count = 0;
 800de28:	2300      	movs	r3, #0
 800de2a:	603b      	str	r3, [r7, #0]
 800de2c:	e01e      	b.n	800de6c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800de2e:	6879      	ldr	r1, [r7, #4]
 800de30:	2012      	movs	r0, #18
 800de32:	f7ff fe56 	bl	800dae2 <send_cmd>
 800de36:	4603      	mov	r3, r0
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d117      	bne.n	800de6c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800de3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800de40:	68b8      	ldr	r0, [r7, #8]
 800de42:	f7ff fdf3 	bl	800da2c <rcvr_datablock>
 800de46:	4603      	mov	r3, r0
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d00a      	beq.n	800de62 <USER_SPI_read+0xa2>
				buff += 512;
 800de4c:	68bb      	ldr	r3, [r7, #8]
 800de4e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800de52:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	3b01      	subs	r3, #1
 800de58:	603b      	str	r3, [r7, #0]
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d1ed      	bne.n	800de3c <USER_SPI_read+0x7c>
 800de60:	e000      	b.n	800de64 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800de62:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800de64:	2100      	movs	r1, #0
 800de66:	200c      	movs	r0, #12
 800de68:	f7ff fe3b 	bl	800dae2 <send_cmd>
		}
	}
	despiselect();
 800de6c:	f7ff fdb6 	bl	800d9dc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	2b00      	cmp	r3, #0
 800de74:	bf14      	ite	ne
 800de76:	2301      	movne	r3, #1
 800de78:	2300      	moveq	r3, #0
 800de7a:	b2db      	uxtb	r3, r3
}
 800de7c:	4618      	mov	r0, r3
 800de7e:	3710      	adds	r7, #16
 800de80:	46bd      	mov	sp, r7
 800de82:	bd80      	pop	{r7, pc}
 800de84:	2400002c 	.word	0x2400002c
 800de88:	2400a3ec 	.word	0x2400a3ec

0800de8c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b084      	sub	sp, #16
 800de90:	af00      	add	r7, sp, #0
 800de92:	60b9      	str	r1, [r7, #8]
 800de94:	607a      	str	r2, [r7, #4]
 800de96:	603b      	str	r3, [r7, #0]
 800de98:	4603      	mov	r3, r0
 800de9a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800de9c:	7bfb      	ldrb	r3, [r7, #15]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d102      	bne.n	800dea8 <USER_SPI_write+0x1c>
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d101      	bne.n	800deac <USER_SPI_write+0x20>
 800dea8:	2304      	movs	r3, #4
 800deaa:	e063      	b.n	800df74 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800deac:	4b33      	ldr	r3, [pc, #204]	; (800df7c <USER_SPI_write+0xf0>)
 800deae:	781b      	ldrb	r3, [r3, #0]
 800deb0:	b2db      	uxtb	r3, r3
 800deb2:	f003 0301 	and.w	r3, r3, #1
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d001      	beq.n	800debe <USER_SPI_write+0x32>
 800deba:	2303      	movs	r3, #3
 800debc:	e05a      	b.n	800df74 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800debe:	4b2f      	ldr	r3, [pc, #188]	; (800df7c <USER_SPI_write+0xf0>)
 800dec0:	781b      	ldrb	r3, [r3, #0]
 800dec2:	b2db      	uxtb	r3, r3
 800dec4:	f003 0304 	and.w	r3, r3, #4
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d001      	beq.n	800ded0 <USER_SPI_write+0x44>
 800decc:	2302      	movs	r3, #2
 800dece:	e051      	b.n	800df74 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800ded0:	4b2b      	ldr	r3, [pc, #172]	; (800df80 <USER_SPI_write+0xf4>)
 800ded2:	781b      	ldrb	r3, [r3, #0]
 800ded4:	f003 0308 	and.w	r3, r3, #8
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d102      	bne.n	800dee2 <USER_SPI_write+0x56>
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	025b      	lsls	r3, r3, #9
 800dee0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	2b01      	cmp	r3, #1
 800dee6:	d110      	bne.n	800df0a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800dee8:	6879      	ldr	r1, [r7, #4]
 800deea:	2018      	movs	r0, #24
 800deec:	f7ff fdf9 	bl	800dae2 <send_cmd>
 800def0:	4603      	mov	r3, r0
 800def2:	2b00      	cmp	r3, #0
 800def4:	d136      	bne.n	800df64 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800def6:	21fe      	movs	r1, #254	; 0xfe
 800def8:	68b8      	ldr	r0, [r7, #8]
 800defa:	f7ff fdc0 	bl	800da7e <xmit_datablock>
 800defe:	4603      	mov	r3, r0
 800df00:	2b00      	cmp	r3, #0
 800df02:	d02f      	beq.n	800df64 <USER_SPI_write+0xd8>
			count = 0;
 800df04:	2300      	movs	r3, #0
 800df06:	603b      	str	r3, [r7, #0]
 800df08:	e02c      	b.n	800df64 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800df0a:	4b1d      	ldr	r3, [pc, #116]	; (800df80 <USER_SPI_write+0xf4>)
 800df0c:	781b      	ldrb	r3, [r3, #0]
 800df0e:	f003 0306 	and.w	r3, r3, #6
 800df12:	2b00      	cmp	r3, #0
 800df14:	d003      	beq.n	800df1e <USER_SPI_write+0x92>
 800df16:	6839      	ldr	r1, [r7, #0]
 800df18:	2097      	movs	r0, #151	; 0x97
 800df1a:	f7ff fde2 	bl	800dae2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800df1e:	6879      	ldr	r1, [r7, #4]
 800df20:	2019      	movs	r0, #25
 800df22:	f7ff fdde 	bl	800dae2 <send_cmd>
 800df26:	4603      	mov	r3, r0
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d11b      	bne.n	800df64 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800df2c:	21fc      	movs	r1, #252	; 0xfc
 800df2e:	68b8      	ldr	r0, [r7, #8]
 800df30:	f7ff fda5 	bl	800da7e <xmit_datablock>
 800df34:	4603      	mov	r3, r0
 800df36:	2b00      	cmp	r3, #0
 800df38:	d00a      	beq.n	800df50 <USER_SPI_write+0xc4>
				buff += 512;
 800df3a:	68bb      	ldr	r3, [r7, #8]
 800df3c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800df40:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	3b01      	subs	r3, #1
 800df46:	603b      	str	r3, [r7, #0]
 800df48:	683b      	ldr	r3, [r7, #0]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d1ee      	bne.n	800df2c <USER_SPI_write+0xa0>
 800df4e:	e000      	b.n	800df52 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800df50:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800df52:	21fd      	movs	r1, #253	; 0xfd
 800df54:	2000      	movs	r0, #0
 800df56:	f7ff fd92 	bl	800da7e <xmit_datablock>
 800df5a:	4603      	mov	r3, r0
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d101      	bne.n	800df64 <USER_SPI_write+0xd8>
 800df60:	2301      	movs	r3, #1
 800df62:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800df64:	f7ff fd3a 	bl	800d9dc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	bf14      	ite	ne
 800df6e:	2301      	movne	r3, #1
 800df70:	2300      	moveq	r3, #0
 800df72:	b2db      	uxtb	r3, r3
}
 800df74:	4618      	mov	r0, r3
 800df76:	3710      	adds	r7, #16
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd80      	pop	{r7, pc}
 800df7c:	2400002c 	.word	0x2400002c
 800df80:	2400a3ec 	.word	0x2400a3ec

0800df84 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b08c      	sub	sp, #48	; 0x30
 800df88:	af00      	add	r7, sp, #0
 800df8a:	4603      	mov	r3, r0
 800df8c:	603a      	str	r2, [r7, #0]
 800df8e:	71fb      	strb	r3, [r7, #7]
 800df90:	460b      	mov	r3, r1
 800df92:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800df94:	79fb      	ldrb	r3, [r7, #7]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d001      	beq.n	800df9e <USER_SPI_ioctl+0x1a>
 800df9a:	2304      	movs	r3, #4
 800df9c:	e15a      	b.n	800e254 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800df9e:	4baf      	ldr	r3, [pc, #700]	; (800e25c <USER_SPI_ioctl+0x2d8>)
 800dfa0:	781b      	ldrb	r3, [r3, #0]
 800dfa2:	b2db      	uxtb	r3, r3
 800dfa4:	f003 0301 	and.w	r3, r3, #1
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d001      	beq.n	800dfb0 <USER_SPI_ioctl+0x2c>
 800dfac:	2303      	movs	r3, #3
 800dfae:	e151      	b.n	800e254 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800dfb0:	2301      	movs	r3, #1
 800dfb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800dfb6:	79bb      	ldrb	r3, [r7, #6]
 800dfb8:	2b04      	cmp	r3, #4
 800dfba:	f200 8136 	bhi.w	800e22a <USER_SPI_ioctl+0x2a6>
 800dfbe:	a201      	add	r2, pc, #4	; (adr r2, 800dfc4 <USER_SPI_ioctl+0x40>)
 800dfc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfc4:	0800dfd9 	.word	0x0800dfd9
 800dfc8:	0800dfed 	.word	0x0800dfed
 800dfcc:	0800e22b 	.word	0x0800e22b
 800dfd0:	0800e099 	.word	0x0800e099
 800dfd4:	0800e18f 	.word	0x0800e18f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800dfd8:	f7ff fd0e 	bl	800d9f8 <spiselect>
 800dfdc:	4603      	mov	r3, r0
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	f000 8127 	beq.w	800e232 <USER_SPI_ioctl+0x2ae>
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800dfea:	e122      	b.n	800e232 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800dfec:	2100      	movs	r1, #0
 800dfee:	2009      	movs	r0, #9
 800dff0:	f7ff fd77 	bl	800dae2 <send_cmd>
 800dff4:	4603      	mov	r3, r0
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	f040 811d 	bne.w	800e236 <USER_SPI_ioctl+0x2b2>
 800dffc:	f107 030c 	add.w	r3, r7, #12
 800e000:	2110      	movs	r1, #16
 800e002:	4618      	mov	r0, r3
 800e004:	f7ff fd12 	bl	800da2c <rcvr_datablock>
 800e008:	4603      	mov	r3, r0
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	f000 8113 	beq.w	800e236 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800e010:	7b3b      	ldrb	r3, [r7, #12]
 800e012:	099b      	lsrs	r3, r3, #6
 800e014:	b2db      	uxtb	r3, r3
 800e016:	2b01      	cmp	r3, #1
 800e018:	d111      	bne.n	800e03e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800e01a:	7d7b      	ldrb	r3, [r7, #21]
 800e01c:	461a      	mov	r2, r3
 800e01e:	7d3b      	ldrb	r3, [r7, #20]
 800e020:	021b      	lsls	r3, r3, #8
 800e022:	4413      	add	r3, r2
 800e024:	461a      	mov	r2, r3
 800e026:	7cfb      	ldrb	r3, [r7, #19]
 800e028:	041b      	lsls	r3, r3, #16
 800e02a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800e02e:	4413      	add	r3, r2
 800e030:	3301      	adds	r3, #1
 800e032:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800e034:	69fb      	ldr	r3, [r7, #28]
 800e036:	029a      	lsls	r2, r3, #10
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	601a      	str	r2, [r3, #0]
 800e03c:	e028      	b.n	800e090 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800e03e:	7c7b      	ldrb	r3, [r7, #17]
 800e040:	f003 030f 	and.w	r3, r3, #15
 800e044:	b2da      	uxtb	r2, r3
 800e046:	7dbb      	ldrb	r3, [r7, #22]
 800e048:	09db      	lsrs	r3, r3, #7
 800e04a:	b2db      	uxtb	r3, r3
 800e04c:	4413      	add	r3, r2
 800e04e:	b2da      	uxtb	r2, r3
 800e050:	7d7b      	ldrb	r3, [r7, #21]
 800e052:	005b      	lsls	r3, r3, #1
 800e054:	b2db      	uxtb	r3, r3
 800e056:	f003 0306 	and.w	r3, r3, #6
 800e05a:	b2db      	uxtb	r3, r3
 800e05c:	4413      	add	r3, r2
 800e05e:	b2db      	uxtb	r3, r3
 800e060:	3302      	adds	r3, #2
 800e062:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800e066:	7d3b      	ldrb	r3, [r7, #20]
 800e068:	099b      	lsrs	r3, r3, #6
 800e06a:	b2db      	uxtb	r3, r3
 800e06c:	461a      	mov	r2, r3
 800e06e:	7cfb      	ldrb	r3, [r7, #19]
 800e070:	009b      	lsls	r3, r3, #2
 800e072:	441a      	add	r2, r3
 800e074:	7cbb      	ldrb	r3, [r7, #18]
 800e076:	029b      	lsls	r3, r3, #10
 800e078:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e07c:	4413      	add	r3, r2
 800e07e:	3301      	adds	r3, #1
 800e080:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800e082:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e086:	3b09      	subs	r3, #9
 800e088:	69fa      	ldr	r2, [r7, #28]
 800e08a:	409a      	lsls	r2, r3
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800e090:	2300      	movs	r3, #0
 800e092:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800e096:	e0ce      	b.n	800e236 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800e098:	4b71      	ldr	r3, [pc, #452]	; (800e260 <USER_SPI_ioctl+0x2dc>)
 800e09a:	781b      	ldrb	r3, [r3, #0]
 800e09c:	f003 0304 	and.w	r3, r3, #4
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d031      	beq.n	800e108 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800e0a4:	2100      	movs	r1, #0
 800e0a6:	208d      	movs	r0, #141	; 0x8d
 800e0a8:	f7ff fd1b 	bl	800dae2 <send_cmd>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	f040 80c3 	bne.w	800e23a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800e0b4:	20ff      	movs	r0, #255	; 0xff
 800e0b6:	f7ff fc21 	bl	800d8fc <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800e0ba:	f107 030c 	add.w	r3, r7, #12
 800e0be:	2110      	movs	r1, #16
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f7ff fcb3 	bl	800da2c <rcvr_datablock>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	f000 80b6 	beq.w	800e23a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800e0ce:	2330      	movs	r3, #48	; 0x30
 800e0d0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800e0d4:	e007      	b.n	800e0e6 <USER_SPI_ioctl+0x162>
 800e0d6:	20ff      	movs	r0, #255	; 0xff
 800e0d8:	f7ff fc10 	bl	800d8fc <xchg_spi>
 800e0dc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e0e0:	3b01      	subs	r3, #1
 800e0e2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800e0e6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d1f3      	bne.n	800e0d6 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800e0ee:	7dbb      	ldrb	r3, [r7, #22]
 800e0f0:	091b      	lsrs	r3, r3, #4
 800e0f2:	b2db      	uxtb	r3, r3
 800e0f4:	461a      	mov	r2, r3
 800e0f6:	2310      	movs	r3, #16
 800e0f8:	fa03 f202 	lsl.w	r2, r3, r2
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800e100:	2300      	movs	r3, #0
 800e102:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800e106:	e098      	b.n	800e23a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800e108:	2100      	movs	r1, #0
 800e10a:	2009      	movs	r0, #9
 800e10c:	f7ff fce9 	bl	800dae2 <send_cmd>
 800e110:	4603      	mov	r3, r0
 800e112:	2b00      	cmp	r3, #0
 800e114:	f040 8091 	bne.w	800e23a <USER_SPI_ioctl+0x2b6>
 800e118:	f107 030c 	add.w	r3, r7, #12
 800e11c:	2110      	movs	r1, #16
 800e11e:	4618      	mov	r0, r3
 800e120:	f7ff fc84 	bl	800da2c <rcvr_datablock>
 800e124:	4603      	mov	r3, r0
 800e126:	2b00      	cmp	r3, #0
 800e128:	f000 8087 	beq.w	800e23a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800e12c:	4b4c      	ldr	r3, [pc, #304]	; (800e260 <USER_SPI_ioctl+0x2dc>)
 800e12e:	781b      	ldrb	r3, [r3, #0]
 800e130:	f003 0302 	and.w	r3, r3, #2
 800e134:	2b00      	cmp	r3, #0
 800e136:	d012      	beq.n	800e15e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800e138:	7dbb      	ldrb	r3, [r7, #22]
 800e13a:	005b      	lsls	r3, r3, #1
 800e13c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800e140:	7dfa      	ldrb	r2, [r7, #23]
 800e142:	09d2      	lsrs	r2, r2, #7
 800e144:	b2d2      	uxtb	r2, r2
 800e146:	4413      	add	r3, r2
 800e148:	1c5a      	adds	r2, r3, #1
 800e14a:	7e7b      	ldrb	r3, [r7, #25]
 800e14c:	099b      	lsrs	r3, r3, #6
 800e14e:	b2db      	uxtb	r3, r3
 800e150:	3b01      	subs	r3, #1
 800e152:	fa02 f303 	lsl.w	r3, r2, r3
 800e156:	461a      	mov	r2, r3
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	601a      	str	r2, [r3, #0]
 800e15c:	e013      	b.n	800e186 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800e15e:	7dbb      	ldrb	r3, [r7, #22]
 800e160:	109b      	asrs	r3, r3, #2
 800e162:	b29b      	uxth	r3, r3
 800e164:	f003 031f 	and.w	r3, r3, #31
 800e168:	3301      	adds	r3, #1
 800e16a:	7dfa      	ldrb	r2, [r7, #23]
 800e16c:	00d2      	lsls	r2, r2, #3
 800e16e:	f002 0218 	and.w	r2, r2, #24
 800e172:	7df9      	ldrb	r1, [r7, #23]
 800e174:	0949      	lsrs	r1, r1, #5
 800e176:	b2c9      	uxtb	r1, r1
 800e178:	440a      	add	r2, r1
 800e17a:	3201      	adds	r2, #1
 800e17c:	fb02 f303 	mul.w	r3, r2, r3
 800e180:	461a      	mov	r2, r3
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800e186:	2300      	movs	r3, #0
 800e188:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800e18c:	e055      	b.n	800e23a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800e18e:	4b34      	ldr	r3, [pc, #208]	; (800e260 <USER_SPI_ioctl+0x2dc>)
 800e190:	781b      	ldrb	r3, [r3, #0]
 800e192:	f003 0306 	and.w	r3, r3, #6
 800e196:	2b00      	cmp	r3, #0
 800e198:	d051      	beq.n	800e23e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800e19a:	f107 020c 	add.w	r2, r7, #12
 800e19e:	79fb      	ldrb	r3, [r7, #7]
 800e1a0:	210b      	movs	r1, #11
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f7ff feee 	bl	800df84 <USER_SPI_ioctl>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d149      	bne.n	800e242 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800e1ae:	7b3b      	ldrb	r3, [r7, #12]
 800e1b0:	099b      	lsrs	r3, r3, #6
 800e1b2:	b2db      	uxtb	r3, r3
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d104      	bne.n	800e1c2 <USER_SPI_ioctl+0x23e>
 800e1b8:	7dbb      	ldrb	r3, [r7, #22]
 800e1ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d041      	beq.n	800e246 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	623b      	str	r3, [r7, #32]
 800e1c6:	6a3b      	ldr	r3, [r7, #32]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	62bb      	str	r3, [r7, #40]	; 0x28
 800e1cc:	6a3b      	ldr	r3, [r7, #32]
 800e1ce:	685b      	ldr	r3, [r3, #4]
 800e1d0:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800e1d2:	4b23      	ldr	r3, [pc, #140]	; (800e260 <USER_SPI_ioctl+0x2dc>)
 800e1d4:	781b      	ldrb	r3, [r3, #0]
 800e1d6:	f003 0308 	and.w	r3, r3, #8
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d105      	bne.n	800e1ea <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800e1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1e0:	025b      	lsls	r3, r3, #9
 800e1e2:	62bb      	str	r3, [r7, #40]	; 0x28
 800e1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1e6:	025b      	lsls	r3, r3, #9
 800e1e8:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800e1ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e1ec:	2020      	movs	r0, #32
 800e1ee:	f7ff fc78 	bl	800dae2 <send_cmd>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d128      	bne.n	800e24a <USER_SPI_ioctl+0x2c6>
 800e1f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e1fa:	2021      	movs	r0, #33	; 0x21
 800e1fc:	f7ff fc71 	bl	800dae2 <send_cmd>
 800e200:	4603      	mov	r3, r0
 800e202:	2b00      	cmp	r3, #0
 800e204:	d121      	bne.n	800e24a <USER_SPI_ioctl+0x2c6>
 800e206:	2100      	movs	r1, #0
 800e208:	2026      	movs	r0, #38	; 0x26
 800e20a:	f7ff fc6a 	bl	800dae2 <send_cmd>
 800e20e:	4603      	mov	r3, r0
 800e210:	2b00      	cmp	r3, #0
 800e212:	d11a      	bne.n	800e24a <USER_SPI_ioctl+0x2c6>
 800e214:	f247 5030 	movw	r0, #30000	; 0x7530
 800e218:	f7ff fbbd 	bl	800d996 <wait_ready>
 800e21c:	4603      	mov	r3, r0
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d013      	beq.n	800e24a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800e222:	2300      	movs	r3, #0
 800e224:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800e228:	e00f      	b.n	800e24a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800e22a:	2304      	movs	r3, #4
 800e22c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e230:	e00c      	b.n	800e24c <USER_SPI_ioctl+0x2c8>
		break;
 800e232:	bf00      	nop
 800e234:	e00a      	b.n	800e24c <USER_SPI_ioctl+0x2c8>
		break;
 800e236:	bf00      	nop
 800e238:	e008      	b.n	800e24c <USER_SPI_ioctl+0x2c8>
		break;
 800e23a:	bf00      	nop
 800e23c:	e006      	b.n	800e24c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800e23e:	bf00      	nop
 800e240:	e004      	b.n	800e24c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800e242:	bf00      	nop
 800e244:	e002      	b.n	800e24c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800e246:	bf00      	nop
 800e248:	e000      	b.n	800e24c <USER_SPI_ioctl+0x2c8>
		break;
 800e24a:	bf00      	nop
	}

	despiselect();
 800e24c:	f7ff fbc6 	bl	800d9dc <despiselect>

	return res;
 800e250:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e254:	4618      	mov	r0, r3
 800e256:	3730      	adds	r7, #48	; 0x30
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd80      	pop	{r7, pc}
 800e25c:	2400002c 	.word	0x2400002c
 800e260:	2400a3ec 	.word	0x2400a3ec

0800e264 <DEV_SPI_WRite>:
	HAL_Delay(xms);
}


void DEV_SPI_WRite(UBYTE _dat)
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b082      	sub	sp, #8
 800e268:	af00      	add	r7, sp, #0
 800e26a:	4603      	mov	r3, r0
 800e26c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&DEV_SPI, (uint8_t *)&_dat, 1, 500);
 800e26e:	1df9      	adds	r1, r7, #7
 800e270:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800e274:	2201      	movs	r2, #1
 800e276:	4803      	ldr	r0, [pc, #12]	; (800e284 <DEV_SPI_WRite+0x20>)
 800e278:	f7fb fc1a 	bl	8009ab0 <HAL_SPI_Transmit>
}
 800e27c:	bf00      	nop
 800e27e:	3708      	adds	r7, #8
 800e280:	46bd      	mov	sp, r7
 800e282:	bd80      	pop	{r7, pc}
 800e284:	2400ad3c 	.word	0x2400ad3c

0800e288 <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	af00      	add	r7, sp, #0
    DEV_Digital_Write(DEV_DC_PIN, 1);
 800e28c:	2201      	movs	r2, #1
 800e28e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e292:	480a      	ldr	r0, [pc, #40]	; (800e2bc <DEV_Module_Init+0x34>)
 800e294:	f7f7 f88a 	bl	80053ac <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_CS_PIN, 1);
 800e298:	2201      	movs	r2, #1
 800e29a:	2140      	movs	r1, #64	; 0x40
 800e29c:	4807      	ldr	r0, [pc, #28]	; (800e2bc <DEV_Module_Init+0x34>)
 800e29e:	f7f7 f885 	bl	80053ac <HAL_GPIO_WritePin>
    DEV_Digital_Write(DEV_RST_PIN, 1);
 800e2a2:	2201      	movs	r2, #1
 800e2a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e2a8:	4805      	ldr	r0, [pc, #20]	; (800e2c0 <DEV_Module_Init+0x38>)
 800e2aa:	f7f7 f87f 	bl	80053ac <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&DEV_BL_TIM, DEV_BL_CH);
 800e2ae:	2100      	movs	r1, #0
 800e2b0:	4804      	ldr	r0, [pc, #16]	; (800e2c4 <DEV_Module_Init+0x3c>)
 800e2b2:	f7fc fc3d 	bl	800ab30 <HAL_TIM_PWM_Start>
		return 0;
 800e2b6:	2300      	movs	r3, #0
}
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	bd80      	pop	{r7, pc}
 800e2bc:	58021800 	.word	0x58021800
 800e2c0:	58021400 	.word	0x58021400
 800e2c4:	2400ae50 	.word	0x2400ae50

0800e2c8 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 800e2c8:	b590      	push	{r4, r7, lr}
 800e2ca:	b083      	sub	sp, #12
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	4604      	mov	r4, r0
 800e2d0:	4608      	mov	r0, r1
 800e2d2:	4611      	mov	r1, r2
 800e2d4:	461a      	mov	r2, r3
 800e2d6:	4623      	mov	r3, r4
 800e2d8:	80fb      	strh	r3, [r7, #6]
 800e2da:	4603      	mov	r3, r0
 800e2dc:	80bb      	strh	r3, [r7, #4]
 800e2de:	460b      	mov	r3, r1
 800e2e0:	807b      	strh	r3, [r7, #2]
 800e2e2:	4613      	mov	r3, r2
 800e2e4:	803b      	strh	r3, [r7, #0]
    Paint.WidthMemory = Width;
 800e2e6:	4a1c      	ldr	r2, [pc, #112]	; (800e358 <Paint_NewImage+0x90>)
 800e2e8:	88fb      	ldrh	r3, [r7, #6]
 800e2ea:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 800e2ec:	4a1a      	ldr	r2, [pc, #104]	; (800e358 <Paint_NewImage+0x90>)
 800e2ee:	88bb      	ldrh	r3, [r7, #4]
 800e2f0:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 800e2f2:	4a19      	ldr	r2, [pc, #100]	; (800e358 <Paint_NewImage+0x90>)
 800e2f4:	883b      	ldrh	r3, [r7, #0]
 800e2f6:	8193      	strh	r3, [r2, #12]
    Paint.WidthByte = Width;
 800e2f8:	4a17      	ldr	r2, [pc, #92]	; (800e358 <Paint_NewImage+0x90>)
 800e2fa:	88fb      	ldrh	r3, [r7, #6]
 800e2fc:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 800e2fe:	4a16      	ldr	r2, [pc, #88]	; (800e358 <Paint_NewImage+0x90>)
 800e300:	88bb      	ldrh	r3, [r7, #4]
 800e302:	8293      	strh	r3, [r2, #20]
    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
 800e304:	4b14      	ldr	r3, [pc, #80]	; (800e358 <Paint_NewImage+0x90>)
 800e306:	8a5b      	ldrh	r3, [r3, #18]
 800e308:	b29b      	uxth	r3, r3
 800e30a:	4619      	mov	r1, r3
 800e30c:	4b12      	ldr	r3, [pc, #72]	; (800e358 <Paint_NewImage+0x90>)
 800e30e:	8a9b      	ldrh	r3, [r3, #20]
 800e310:	b29b      	uxth	r3, r3
 800e312:	461a      	mov	r2, r3
 800e314:	4811      	ldr	r0, [pc, #68]	; (800e35c <Paint_NewImage+0x94>)
 800e316:	f00d facd 	bl	801b8b4 <iprintf>
   
    Paint.Rotate = Rotate;
 800e31a:	4a0f      	ldr	r2, [pc, #60]	; (800e358 <Paint_NewImage+0x90>)
 800e31c:	887b      	ldrh	r3, [r7, #2]
 800e31e:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 800e320:	4b0d      	ldr	r3, [pc, #52]	; (800e358 <Paint_NewImage+0x90>)
 800e322:	2200      	movs	r2, #0
 800e324:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 800e326:	887b      	ldrh	r3, [r7, #2]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d002      	beq.n	800e332 <Paint_NewImage+0x6a>
 800e32c:	887b      	ldrh	r3, [r7, #2]
 800e32e:	2bb4      	cmp	r3, #180	; 0xb4
 800e330:	d106      	bne.n	800e340 <Paint_NewImage+0x78>
        Paint.Width = Width;
 800e332:	4a09      	ldr	r2, [pc, #36]	; (800e358 <Paint_NewImage+0x90>)
 800e334:	88fb      	ldrh	r3, [r7, #6]
 800e336:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 800e338:	4a07      	ldr	r2, [pc, #28]	; (800e358 <Paint_NewImage+0x90>)
 800e33a:	88bb      	ldrh	r3, [r7, #4]
 800e33c:	80d3      	strh	r3, [r2, #6]
 800e33e:	e006      	b.n	800e34e <Paint_NewImage+0x86>
    } else {
        Paint.Width = Height;
 800e340:	4a05      	ldr	r2, [pc, #20]	; (800e358 <Paint_NewImage+0x90>)
 800e342:	88bb      	ldrh	r3, [r7, #4]
 800e344:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 800e346:	4a04      	ldr	r2, [pc, #16]	; (800e358 <Paint_NewImage+0x90>)
 800e348:	88fb      	ldrh	r3, [r7, #6]
 800e34a:	80d3      	strh	r3, [r2, #6]
    }
}
 800e34c:	bf00      	nop
 800e34e:	bf00      	nop
 800e350:	370c      	adds	r7, #12
 800e352:	46bd      	mov	sp, r7
 800e354:	bd90      	pop	{r4, r7, pc}
 800e356:	bf00      	nop
 800e358:	2400b4b0 	.word	0x2400b4b0
 800e35c:	0801f3f8 	.word	0x0801f3f8

0800e360 <Paint_SetClearFuntion>:
function:	Select Clear Funtion
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(UWORD))
{
 800e360:	b480      	push	{r7}
 800e362:	b083      	sub	sp, #12
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
  CLEAR=Clear;
 800e368:	4a04      	ldr	r2, [pc, #16]	; (800e37c <Paint_SetClearFuntion+0x1c>)
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6013      	str	r3, [r2, #0]
}
 800e36e:	bf00      	nop
 800e370:	370c      	adds	r7, #12
 800e372:	46bd      	mov	sp, r7
 800e374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e378:	4770      	bx	lr
 800e37a:	bf00      	nop
 800e37c:	2400b4c8 	.word	0x2400b4c8

0800e380 <Paint_SetDisplayFuntion>:
function:	Select DisplayF untion
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(UWORD,UWORD,UWORD))
{
 800e380:	b480      	push	{r7}
 800e382:	b083      	sub	sp, #12
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
  DISPLAY=Display;
 800e388:	4a04      	ldr	r2, [pc, #16]	; (800e39c <Paint_SetDisplayFuntion+0x1c>)
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6013      	str	r3, [r2, #0]
}
 800e38e:	bf00      	nop
 800e390:	370c      	adds	r7, #12
 800e392:	46bd      	mov	sp, r7
 800e394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e398:	4770      	bx	lr
 800e39a:	bf00      	nop
 800e39c:	2400b4ac 	.word	0x2400b4ac

0800e3a0 <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b084      	sub	sp, #16
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	80fb      	strh	r3, [r7, #6]
 800e3aa:	460b      	mov	r3, r1
 800e3ac:	80bb      	strh	r3, [r7, #4]
 800e3ae:	4613      	mov	r3, r2
 800e3b0:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 800e3b2:	4b50      	ldr	r3, [pc, #320]	; (800e4f4 <Paint_SetPixel+0x154>)
 800e3b4:	889b      	ldrh	r3, [r3, #4]
 800e3b6:	b29b      	uxth	r3, r3
 800e3b8:	88fa      	ldrh	r2, [r7, #6]
 800e3ba:	429a      	cmp	r2, r3
 800e3bc:	d805      	bhi.n	800e3ca <Paint_SetPixel+0x2a>
 800e3be:	4b4d      	ldr	r3, [pc, #308]	; (800e4f4 <Paint_SetPixel+0x154>)
 800e3c0:	88db      	ldrh	r3, [r3, #6]
 800e3c2:	b29b      	uxth	r3, r3
 800e3c4:	88ba      	ldrh	r2, [r7, #4]
 800e3c6:	429a      	cmp	r2, r3
 800e3c8:	d903      	bls.n	800e3d2 <Paint_SetPixel+0x32>
        Debug("Exceeding display boundaries\r\n");
 800e3ca:	484b      	ldr	r0, [pc, #300]	; (800e4f8 <Paint_SetPixel+0x158>)
 800e3cc:	f00d faf8 	bl	801b9c0 <puts>
        return;
 800e3d0:	e08c      	b.n	800e4ec <Paint_SetPixel+0x14c>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 800e3d2:	4b48      	ldr	r3, [pc, #288]	; (800e4f4 <Paint_SetPixel+0x154>)
 800e3d4:	89db      	ldrh	r3, [r3, #14]
 800e3d6:	b29b      	uxth	r3, r3
 800e3d8:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800e3dc:	d02d      	beq.n	800e43a <Paint_SetPixel+0x9a>
 800e3de:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800e3e2:	f300 8080 	bgt.w	800e4e6 <Paint_SetPixel+0x146>
 800e3e6:	2bb4      	cmp	r3, #180	; 0xb4
 800e3e8:	d016      	beq.n	800e418 <Paint_SetPixel+0x78>
 800e3ea:	2bb4      	cmp	r3, #180	; 0xb4
 800e3ec:	dc7b      	bgt.n	800e4e6 <Paint_SetPixel+0x146>
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d002      	beq.n	800e3f8 <Paint_SetPixel+0x58>
 800e3f2:	2b5a      	cmp	r3, #90	; 0x5a
 800e3f4:	d005      	beq.n	800e402 <Paint_SetPixel+0x62>
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;

    default:
        return;
 800e3f6:	e076      	b.n	800e4e6 <Paint_SetPixel+0x146>
        X = Xpoint;
 800e3f8:	88fb      	ldrh	r3, [r7, #6]
 800e3fa:	81fb      	strh	r3, [r7, #14]
        Y = Ypoint;  
 800e3fc:	88bb      	ldrh	r3, [r7, #4]
 800e3fe:	81bb      	strh	r3, [r7, #12]
        break;
 800e400:	e026      	b.n	800e450 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Ypoint - 1;
 800e402:	4b3c      	ldr	r3, [pc, #240]	; (800e4f4 <Paint_SetPixel+0x154>)
 800e404:	891b      	ldrh	r3, [r3, #8]
 800e406:	b29a      	uxth	r2, r3
 800e408:	88bb      	ldrh	r3, [r7, #4]
 800e40a:	1ad3      	subs	r3, r2, r3
 800e40c:	b29b      	uxth	r3, r3
 800e40e:	3b01      	subs	r3, #1
 800e410:	81fb      	strh	r3, [r7, #14]
        Y = Xpoint;
 800e412:	88fb      	ldrh	r3, [r7, #6]
 800e414:	81bb      	strh	r3, [r7, #12]
        break;
 800e416:	e01b      	b.n	800e450 <Paint_SetPixel+0xb0>
        X = Paint.WidthMemory - Xpoint - 1;
 800e418:	4b36      	ldr	r3, [pc, #216]	; (800e4f4 <Paint_SetPixel+0x154>)
 800e41a:	891b      	ldrh	r3, [r3, #8]
 800e41c:	b29a      	uxth	r2, r3
 800e41e:	88fb      	ldrh	r3, [r7, #6]
 800e420:	1ad3      	subs	r3, r2, r3
 800e422:	b29b      	uxth	r3, r3
 800e424:	3b01      	subs	r3, #1
 800e426:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Ypoint - 1;
 800e428:	4b32      	ldr	r3, [pc, #200]	; (800e4f4 <Paint_SetPixel+0x154>)
 800e42a:	895b      	ldrh	r3, [r3, #10]
 800e42c:	b29a      	uxth	r2, r3
 800e42e:	88bb      	ldrh	r3, [r7, #4]
 800e430:	1ad3      	subs	r3, r2, r3
 800e432:	b29b      	uxth	r3, r3
 800e434:	3b01      	subs	r3, #1
 800e436:	81bb      	strh	r3, [r7, #12]
        break;
 800e438:	e00a      	b.n	800e450 <Paint_SetPixel+0xb0>
        X = Ypoint;
 800e43a:	88bb      	ldrh	r3, [r7, #4]
 800e43c:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Xpoint - 1;
 800e43e:	4b2d      	ldr	r3, [pc, #180]	; (800e4f4 <Paint_SetPixel+0x154>)
 800e440:	895b      	ldrh	r3, [r3, #10]
 800e442:	b29a      	uxth	r2, r3
 800e444:	88fb      	ldrh	r3, [r7, #6]
 800e446:	1ad3      	subs	r3, r2, r3
 800e448:	b29b      	uxth	r3, r3
 800e44a:	3b01      	subs	r3, #1
 800e44c:	81bb      	strh	r3, [r7, #12]
        break;
 800e44e:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 800e450:	4b28      	ldr	r3, [pc, #160]	; (800e4f4 <Paint_SetPixel+0x154>)
 800e452:	8a1b      	ldrh	r3, [r3, #16]
 800e454:	b29b      	uxth	r3, r3
 800e456:	2b03      	cmp	r3, #3
 800e458:	d847      	bhi.n	800e4ea <Paint_SetPixel+0x14a>
 800e45a:	a201      	add	r2, pc, #4	; (adr r2, 800e460 <Paint_SetPixel+0xc0>)
 800e45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e460:	0800e4b7 	.word	0x0800e4b7
 800e464:	0800e471 	.word	0x0800e471
 800e468:	0800e483 	.word	0x0800e483
 800e46c:	0800e495 	.word	0x0800e495
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 800e470:	4b20      	ldr	r3, [pc, #128]	; (800e4f4 <Paint_SetPixel+0x154>)
 800e472:	891b      	ldrh	r3, [r3, #8]
 800e474:	b29a      	uxth	r2, r3
 800e476:	89fb      	ldrh	r3, [r7, #14]
 800e478:	1ad3      	subs	r3, r2, r3
 800e47a:	b29b      	uxth	r3, r3
 800e47c:	3b01      	subs	r3, #1
 800e47e:	81fb      	strh	r3, [r7, #14]
        break;
 800e480:	e01a      	b.n	800e4b8 <Paint_SetPixel+0x118>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 800e482:	4b1c      	ldr	r3, [pc, #112]	; (800e4f4 <Paint_SetPixel+0x154>)
 800e484:	895b      	ldrh	r3, [r3, #10]
 800e486:	b29a      	uxth	r2, r3
 800e488:	89bb      	ldrh	r3, [r7, #12]
 800e48a:	1ad3      	subs	r3, r2, r3
 800e48c:	b29b      	uxth	r3, r3
 800e48e:	3b01      	subs	r3, #1
 800e490:	81bb      	strh	r3, [r7, #12]
        break;
 800e492:	e011      	b.n	800e4b8 <Paint_SetPixel+0x118>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 800e494:	4b17      	ldr	r3, [pc, #92]	; (800e4f4 <Paint_SetPixel+0x154>)
 800e496:	891b      	ldrh	r3, [r3, #8]
 800e498:	b29a      	uxth	r2, r3
 800e49a:	89fb      	ldrh	r3, [r7, #14]
 800e49c:	1ad3      	subs	r3, r2, r3
 800e49e:	b29b      	uxth	r3, r3
 800e4a0:	3b01      	subs	r3, #1
 800e4a2:	81fb      	strh	r3, [r7, #14]
        Y = Paint.HeightMemory - Y - 1;
 800e4a4:	4b13      	ldr	r3, [pc, #76]	; (800e4f4 <Paint_SetPixel+0x154>)
 800e4a6:	895b      	ldrh	r3, [r3, #10]
 800e4a8:	b29a      	uxth	r2, r3
 800e4aa:	89bb      	ldrh	r3, [r7, #12]
 800e4ac:	1ad3      	subs	r3, r2, r3
 800e4ae:	b29b      	uxth	r3, r3
 800e4b0:	3b01      	subs	r3, #1
 800e4b2:	81bb      	strh	r3, [r7, #12]
        break;
 800e4b4:	e000      	b.n	800e4b8 <Paint_SetPixel+0x118>
        break;
 800e4b6:	bf00      	nop
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 800e4b8:	4b0e      	ldr	r3, [pc, #56]	; (800e4f4 <Paint_SetPixel+0x154>)
 800e4ba:	891b      	ldrh	r3, [r3, #8]
 800e4bc:	b29b      	uxth	r3, r3
 800e4be:	89fa      	ldrh	r2, [r7, #14]
 800e4c0:	429a      	cmp	r2, r3
 800e4c2:	d805      	bhi.n	800e4d0 <Paint_SetPixel+0x130>
 800e4c4:	4b0b      	ldr	r3, [pc, #44]	; (800e4f4 <Paint_SetPixel+0x154>)
 800e4c6:	895b      	ldrh	r3, [r3, #10]
 800e4c8:	b29b      	uxth	r3, r3
 800e4ca:	89ba      	ldrh	r2, [r7, #12]
 800e4cc:	429a      	cmp	r2, r3
 800e4ce:	d903      	bls.n	800e4d8 <Paint_SetPixel+0x138>
        Debug("Exceeding display boundaries\r\n");
 800e4d0:	4809      	ldr	r0, [pc, #36]	; (800e4f8 <Paint_SetPixel+0x158>)
 800e4d2:	f00d fa75 	bl	801b9c0 <puts>
        return;
 800e4d6:	e009      	b.n	800e4ec <Paint_SetPixel+0x14c>
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
 800e4d8:	4b08      	ldr	r3, [pc, #32]	; (800e4fc <Paint_SetPixel+0x15c>)
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	887a      	ldrh	r2, [r7, #2]
 800e4de:	89b9      	ldrh	r1, [r7, #12]
 800e4e0:	89f8      	ldrh	r0, [r7, #14]
 800e4e2:	4798      	blx	r3
 800e4e4:	e002      	b.n	800e4ec <Paint_SetPixel+0x14c>
        return;
 800e4e6:	bf00      	nop
 800e4e8:	e000      	b.n	800e4ec <Paint_SetPixel+0x14c>
        return;
 800e4ea:	bf00      	nop
}
 800e4ec:	3710      	adds	r7, #16
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	bd80      	pop	{r7, pc}
 800e4f2:	bf00      	nop
 800e4f4:	2400b4b0 	.word	0x2400b4b0
 800e4f8:	0801f4f8 	.word	0x0801f4f8
 800e4fc:	2400b4ac 	.word	0x2400b4ac

0800e500 <Paint_Clear>:
function:	Clear the color of the picture
parameter:
    Color   :   Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{	
 800e500:	b580      	push	{r7, lr}
 800e502:	b082      	sub	sp, #8
 800e504:	af00      	add	r7, sp, #0
 800e506:	4603      	mov	r3, r0
 800e508:	80fb      	strh	r3, [r7, #6]
	CLEAR(Color);
 800e50a:	4b04      	ldr	r3, [pc, #16]	; (800e51c <Paint_Clear+0x1c>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	88fa      	ldrh	r2, [r7, #6]
 800e510:	4610      	mov	r0, r2
 800e512:	4798      	blx	r3
}
 800e514:	bf00      	nop
 800e516:	3708      	adds	r7, #8
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}
 800e51c:	2400b4c8 	.word	0x2400b4c8

0800e520 <Paint_ClearWindows>:
    Ystart :   Y starting point
    Xend   :   x end point
    Yend   :   y end point
******************************************************************************/
void Paint_ClearWindows(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, UWORD Color)
{
 800e520:	b590      	push	{r4, r7, lr}
 800e522:	b085      	sub	sp, #20
 800e524:	af00      	add	r7, sp, #0
 800e526:	4604      	mov	r4, r0
 800e528:	4608      	mov	r0, r1
 800e52a:	4611      	mov	r1, r2
 800e52c:	461a      	mov	r2, r3
 800e52e:	4623      	mov	r3, r4
 800e530:	80fb      	strh	r3, [r7, #6]
 800e532:	4603      	mov	r3, r0
 800e534:	80bb      	strh	r3, [r7, #4]
 800e536:	460b      	mov	r3, r1
 800e538:	807b      	strh	r3, [r7, #2]
 800e53a:	4613      	mov	r3, r2
 800e53c:	803b      	strh	r3, [r7, #0]
    UWORD X, Y;
    for (Y = Ystart; Y < Yend; Y++)
 800e53e:	88bb      	ldrh	r3, [r7, #4]
 800e540:	81bb      	strh	r3, [r7, #12]
 800e542:	e012      	b.n	800e56a <Paint_ClearWindows+0x4a>
    {
        for (X = Xstart; X < Xend; X++)
 800e544:	88fb      	ldrh	r3, [r7, #6]
 800e546:	81fb      	strh	r3, [r7, #14]
 800e548:	e008      	b.n	800e55c <Paint_ClearWindows+0x3c>
        {//8 pixel =  1 byte
            Paint_SetPixel(X, Y, Color);
 800e54a:	8c3a      	ldrh	r2, [r7, #32]
 800e54c:	89b9      	ldrh	r1, [r7, #12]
 800e54e:	89fb      	ldrh	r3, [r7, #14]
 800e550:	4618      	mov	r0, r3
 800e552:	f7ff ff25 	bl	800e3a0 <Paint_SetPixel>
        for (X = Xstart; X < Xend; X++)
 800e556:	89fb      	ldrh	r3, [r7, #14]
 800e558:	3301      	adds	r3, #1
 800e55a:	81fb      	strh	r3, [r7, #14]
 800e55c:	89fa      	ldrh	r2, [r7, #14]
 800e55e:	887b      	ldrh	r3, [r7, #2]
 800e560:	429a      	cmp	r2, r3
 800e562:	d3f2      	bcc.n	800e54a <Paint_ClearWindows+0x2a>
    for (Y = Ystart; Y < Yend; Y++)
 800e564:	89bb      	ldrh	r3, [r7, #12]
 800e566:	3301      	adds	r3, #1
 800e568:	81bb      	strh	r3, [r7, #12]
 800e56a:	89ba      	ldrh	r2, [r7, #12]
 800e56c:	883b      	ldrh	r3, [r7, #0]
 800e56e:	429a      	cmp	r2, r3
 800e570:	d3e8      	bcc.n	800e544 <Paint_ClearWindows+0x24>
        }
    }
}
 800e572:	bf00      	nop
 800e574:	bf00      	nop
 800e576:	3714      	adds	r7, #20
 800e578:	46bd      	mov	sp, r7
 800e57a:	bd90      	pop	{r4, r7, pc}

0800e57c <Paint_DrawPoint>:
    Color		:   Set color
    Dot_Pixel	:	point size
******************************************************************************/
void Paint_DrawPoint( UWORD Xpoint,       UWORD Ypoint, UWORD Color,
                      DOT_PIXEL Dot_Pixel,DOT_STYLE Dot_FillWay)
{
 800e57c:	b590      	push	{r4, r7, lr}
 800e57e:	b085      	sub	sp, #20
 800e580:	af00      	add	r7, sp, #0
 800e582:	4604      	mov	r4, r0
 800e584:	4608      	mov	r0, r1
 800e586:	4611      	mov	r1, r2
 800e588:	461a      	mov	r2, r3
 800e58a:	4623      	mov	r3, r4
 800e58c:	80fb      	strh	r3, [r7, #6]
 800e58e:	4603      	mov	r3, r0
 800e590:	80bb      	strh	r3, [r7, #4]
 800e592:	460b      	mov	r3, r1
 800e594:	807b      	strh	r3, [r7, #2]
 800e596:	4613      	mov	r3, r2
 800e598:	707b      	strb	r3, [r7, #1]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800e59a:	4b44      	ldr	r3, [pc, #272]	; (800e6ac <Paint_DrawPoint+0x130>)
 800e59c:	889b      	ldrh	r3, [r3, #4]
 800e59e:	b29b      	uxth	r3, r3
 800e5a0:	88fa      	ldrh	r2, [r7, #6]
 800e5a2:	429a      	cmp	r2, r3
 800e5a4:	d805      	bhi.n	800e5b2 <Paint_DrawPoint+0x36>
 800e5a6:	4b41      	ldr	r3, [pc, #260]	; (800e6ac <Paint_DrawPoint+0x130>)
 800e5a8:	88db      	ldrh	r3, [r3, #6]
 800e5aa:	b29b      	uxth	r3, r3
 800e5ac:	88ba      	ldrh	r2, [r7, #4]
 800e5ae:	429a      	cmp	r2, r3
 800e5b0:	d903      	bls.n	800e5ba <Paint_DrawPoint+0x3e>
    {
        Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 800e5b2:	483f      	ldr	r0, [pc, #252]	; (800e6b0 <Paint_DrawPoint+0x134>)
 800e5b4:	f00d fa04 	bl	801b9c0 <puts>
        return;
 800e5b8:	e074      	b.n	800e6a4 <Paint_DrawPoint+0x128>
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_FillWay == DOT_FILL_AROUND)
 800e5ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e5be:	2b01      	cmp	r3, #1
 800e5c0:	d144      	bne.n	800e64c <Paint_DrawPoint+0xd0>
    {
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++)
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	81fb      	strh	r3, [r7, #14]
 800e5c6:	e039      	b.n	800e63c <Paint_DrawPoint+0xc0>
        {
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++)
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	81bb      	strh	r3, [r7, #12]
 800e5cc:	e029      	b.n	800e622 <Paint_DrawPoint+0xa6>
            {
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 800e5ce:	88fa      	ldrh	r2, [r7, #6]
 800e5d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e5d4:	441a      	add	r2, r3
 800e5d6:	787b      	ldrb	r3, [r7, #1]
 800e5d8:	1ad3      	subs	r3, r2, r3
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	db28      	blt.n	800e630 <Paint_DrawPoint+0xb4>
 800e5de:	88ba      	ldrh	r2, [r7, #4]
 800e5e0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e5e4:	441a      	add	r2, r3
 800e5e6:	787b      	ldrb	r3, [r7, #1]
 800e5e8:	1ad3      	subs	r3, r2, r3
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	db20      	blt.n	800e630 <Paint_DrawPoint+0xb4>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 800e5ee:	89fa      	ldrh	r2, [r7, #14]
 800e5f0:	88fb      	ldrh	r3, [r7, #6]
 800e5f2:	4413      	add	r3, r2
 800e5f4:	b29a      	uxth	r2, r3
 800e5f6:	787b      	ldrb	r3, [r7, #1]
 800e5f8:	b29b      	uxth	r3, r3
 800e5fa:	1ad3      	subs	r3, r2, r3
 800e5fc:	b298      	uxth	r0, r3
 800e5fe:	89ba      	ldrh	r2, [r7, #12]
 800e600:	88bb      	ldrh	r3, [r7, #4]
 800e602:	4413      	add	r3, r2
 800e604:	b29a      	uxth	r2, r3
 800e606:	787b      	ldrb	r3, [r7, #1]
 800e608:	b29b      	uxth	r3, r3
 800e60a:	1ad3      	subs	r3, r2, r3
 800e60c:	b29b      	uxth	r3, r3
 800e60e:	887a      	ldrh	r2, [r7, #2]
 800e610:	4619      	mov	r1, r3
 800e612:	f7ff fec5 	bl	800e3a0 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++)
 800e616:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e61a:	b29b      	uxth	r3, r3
 800e61c:	3301      	adds	r3, #1
 800e61e:	b29b      	uxth	r3, r3
 800e620:	81bb      	strh	r3, [r7, #12]
 800e622:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e626:	787b      	ldrb	r3, [r7, #1]
 800e628:	005b      	lsls	r3, r3, #1
 800e62a:	3b01      	subs	r3, #1
 800e62c:	429a      	cmp	r2, r3
 800e62e:	dbce      	blt.n	800e5ce <Paint_DrawPoint+0x52>
        for (XDir_Num = 0; XDir_Num < 2*Dot_Pixel - 1; XDir_Num++)
 800e630:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e634:	b29b      	uxth	r3, r3
 800e636:	3301      	adds	r3, #1
 800e638:	b29b      	uxth	r3, r3
 800e63a:	81fb      	strh	r3, [r7, #14]
 800e63c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800e640:	787b      	ldrb	r3, [r7, #1]
 800e642:	005b      	lsls	r3, r3, #1
 800e644:	3b01      	subs	r3, #1
 800e646:	429a      	cmp	r2, r3
 800e648:	dbbe      	blt.n	800e5c8 <Paint_DrawPoint+0x4c>
 800e64a:	e02b      	b.n	800e6a4 <Paint_DrawPoint+0x128>
            }
        }
    }
    else
    {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++)
 800e64c:	2300      	movs	r3, #0
 800e64e:	81fb      	strh	r3, [r7, #14]
 800e650:	e023      	b.n	800e69a <Paint_DrawPoint+0x11e>
        {
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++)
 800e652:	2300      	movs	r3, #0
 800e654:	81bb      	strh	r3, [r7, #12]
 800e656:	e015      	b.n	800e684 <Paint_DrawPoint+0x108>
            {
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 800e658:	89fa      	ldrh	r2, [r7, #14]
 800e65a:	88fb      	ldrh	r3, [r7, #6]
 800e65c:	4413      	add	r3, r2
 800e65e:	b29b      	uxth	r3, r3
 800e660:	3b01      	subs	r3, #1
 800e662:	b298      	uxth	r0, r3
 800e664:	89ba      	ldrh	r2, [r7, #12]
 800e666:	88bb      	ldrh	r3, [r7, #4]
 800e668:	4413      	add	r3, r2
 800e66a:	b29b      	uxth	r3, r3
 800e66c:	3b01      	subs	r3, #1
 800e66e:	b29b      	uxth	r3, r3
 800e670:	887a      	ldrh	r2, [r7, #2]
 800e672:	4619      	mov	r1, r3
 800e674:	f7ff fe94 	bl	800e3a0 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++)
 800e678:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800e67c:	b29b      	uxth	r3, r3
 800e67e:	3301      	adds	r3, #1
 800e680:	b29b      	uxth	r3, r3
 800e682:	81bb      	strh	r3, [r7, #12]
 800e684:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e688:	787b      	ldrb	r3, [r7, #1]
 800e68a:	429a      	cmp	r2, r3
 800e68c:	dbe4      	blt.n	800e658 <Paint_DrawPoint+0xdc>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++)
 800e68e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e692:	b29b      	uxth	r3, r3
 800e694:	3301      	adds	r3, #1
 800e696:	b29b      	uxth	r3, r3
 800e698:	81fb      	strh	r3, [r7, #14]
 800e69a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800e69e:	787b      	ldrb	r3, [r7, #1]
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	dbd6      	blt.n	800e652 <Paint_DrawPoint+0xd6>
            }
        }
    }
}
 800e6a4:	3714      	adds	r7, #20
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	bd90      	pop	{r4, r7, pc}
 800e6aa:	bf00      	nop
 800e6ac:	2400b4b0 	.word	0x2400b4b0
 800e6b0:	0801f520 	.word	0x0801f520

0800e6b4 <Paint_DrawLine>:
    Yend   ：End point Ypoint coordinate
    Color  ：The color of the line segment
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, 
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 800e6b4:	b590      	push	{r4, r7, lr}
 800e6b6:	b08d      	sub	sp, #52	; 0x34
 800e6b8:	af02      	add	r7, sp, #8
 800e6ba:	4604      	mov	r4, r0
 800e6bc:	4608      	mov	r0, r1
 800e6be:	4611      	mov	r1, r2
 800e6c0:	461a      	mov	r2, r3
 800e6c2:	4623      	mov	r3, r4
 800e6c4:	80fb      	strh	r3, [r7, #6]
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	80bb      	strh	r3, [r7, #4]
 800e6ca:	460b      	mov	r3, r1
 800e6cc:	807b      	strh	r3, [r7, #2]
 800e6ce:	4613      	mov	r3, r2
 800e6d0:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800e6d2:	4b4d      	ldr	r3, [pc, #308]	; (800e808 <Paint_DrawLine+0x154>)
 800e6d4:	889b      	ldrh	r3, [r3, #4]
 800e6d6:	b29b      	uxth	r3, r3
 800e6d8:	88fa      	ldrh	r2, [r7, #6]
 800e6da:	429a      	cmp	r2, r3
 800e6dc:	d811      	bhi.n	800e702 <Paint_DrawLine+0x4e>
 800e6de:	4b4a      	ldr	r3, [pc, #296]	; (800e808 <Paint_DrawLine+0x154>)
 800e6e0:	88db      	ldrh	r3, [r3, #6]
 800e6e2:	b29b      	uxth	r3, r3
 800e6e4:	88ba      	ldrh	r2, [r7, #4]
 800e6e6:	429a      	cmp	r2, r3
 800e6e8:	d80b      	bhi.n	800e702 <Paint_DrawLine+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 800e6ea:	4b47      	ldr	r3, [pc, #284]	; (800e808 <Paint_DrawLine+0x154>)
 800e6ec:	889b      	ldrh	r3, [r3, #4]
 800e6ee:	b29b      	uxth	r3, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800e6f0:	887a      	ldrh	r2, [r7, #2]
 800e6f2:	429a      	cmp	r2, r3
 800e6f4:	d805      	bhi.n	800e702 <Paint_DrawLine+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 800e6f6:	4b44      	ldr	r3, [pc, #272]	; (800e808 <Paint_DrawLine+0x154>)
 800e6f8:	88db      	ldrh	r3, [r3, #6]
 800e6fa:	b29b      	uxth	r3, r3
 800e6fc:	883a      	ldrh	r2, [r7, #0]
 800e6fe:	429a      	cmp	r2, r3
 800e700:	d903      	bls.n	800e70a <Paint_DrawLine+0x56>
        Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
 800e702:	4842      	ldr	r0, [pc, #264]	; (800e80c <Paint_DrawLine+0x158>)
 800e704:	f00d f95c 	bl	801b9c0 <puts>
        return;
 800e708:	e07b      	b.n	800e802 <Paint_DrawLine+0x14e>
    }

    UWORD Xpoint = Xstart;
 800e70a:	88fb      	ldrh	r3, [r7, #6]
 800e70c:	84fb      	strh	r3, [r7, #38]	; 0x26
    UWORD Ypoint = Ystart;
 800e70e:	88bb      	ldrh	r3, [r7, #4]
 800e710:	84bb      	strh	r3, [r7, #36]	; 0x24
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 800e712:	887a      	ldrh	r2, [r7, #2]
 800e714:	88fb      	ldrh	r3, [r7, #6]
 800e716:	1ad3      	subs	r3, r2, r3
 800e718:	2b00      	cmp	r3, #0
 800e71a:	bfb8      	it	lt
 800e71c:	425b      	neglt	r3, r3
 800e71e:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 800e720:	883a      	ldrh	r2, [r7, #0]
 800e722:	88bb      	ldrh	r3, [r7, #4]
 800e724:	1ad3      	subs	r3, r2, r3
 800e726:	2b00      	cmp	r3, #0
 800e728:	bfb8      	it	lt
 800e72a:	425b      	neglt	r3, r3
 800e72c:	425b      	negs	r3, r3
 800e72e:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 800e730:	88fa      	ldrh	r2, [r7, #6]
 800e732:	887b      	ldrh	r3, [r7, #2]
 800e734:	429a      	cmp	r2, r3
 800e736:	d201      	bcs.n	800e73c <Paint_DrawLine+0x88>
 800e738:	2301      	movs	r3, #1
 800e73a:	e001      	b.n	800e740 <Paint_DrawLine+0x8c>
 800e73c:	f04f 33ff 	mov.w	r3, #4294967295
 800e740:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 800e742:	88ba      	ldrh	r2, [r7, #4]
 800e744:	883b      	ldrh	r3, [r7, #0]
 800e746:	429a      	cmp	r2, r3
 800e748:	d201      	bcs.n	800e74e <Paint_DrawLine+0x9a>
 800e74a:	2301      	movs	r3, #1
 800e74c:	e001      	b.n	800e752 <Paint_DrawLine+0x9e>
 800e74e:	f04f 33ff 	mov.w	r3, #4294967295
 800e752:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 800e754:	69ba      	ldr	r2, [r7, #24]
 800e756:	697b      	ldr	r3, [r7, #20]
 800e758:	4413      	add	r3, r2
 800e75a:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 800e75c:	2300      	movs	r3, #0
 800e75e:	77fb      	strb	r3, [r7, #31]

    for (;;)
    {
        Dotted_Len++;
 800e760:	7ffb      	ldrb	r3, [r7, #31]
 800e762:	3301      	adds	r3, #1
 800e764:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0)
 800e766:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e76a:	2b01      	cmp	r3, #1
 800e76c:	d118      	bne.n	800e7a0 <Paint_DrawLine+0xec>
 800e76e:	7ffa      	ldrb	r2, [r7, #31]
 800e770:	4b27      	ldr	r3, [pc, #156]	; (800e810 <Paint_DrawLine+0x15c>)
 800e772:	fba3 1302 	umull	r1, r3, r3, r2
 800e776:	0859      	lsrs	r1, r3, #1
 800e778:	460b      	mov	r3, r1
 800e77a:	005b      	lsls	r3, r3, #1
 800e77c:	440b      	add	r3, r1
 800e77e:	1ad3      	subs	r3, r2, r3
 800e780:	b2db      	uxtb	r3, r3
 800e782:	2b00      	cmp	r3, #0
 800e784:	d10c      	bne.n	800e7a0 <Paint_DrawLine+0xec>
        {
            //Debug("LINE_DOTTED\r\n");
            Paint_DrawPoint(Xpoint, Ypoint, IMAGE_BACKGROUND, Line_width, DOT_STYLE_DFT);
 800e786:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e78a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800e78c:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800e78e:	2201      	movs	r2, #1
 800e790:	9200      	str	r2, [sp, #0]
 800e792:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e796:	f7ff fef1 	bl	800e57c <Paint_DrawPoint>
            Dotted_Len = 0;
 800e79a:	2300      	movs	r3, #0
 800e79c:	77fb      	strb	r3, [r7, #31]
 800e79e:	e008      	b.n	800e7b2 <Paint_DrawLine+0xfe>
        }
        else
        {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 800e7a0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e7a4:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800e7a6:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800e7a8:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800e7aa:	2401      	movs	r4, #1
 800e7ac:	9400      	str	r4, [sp, #0]
 800e7ae:	f7ff fee5 	bl	800e57c <Paint_DrawPoint>
        }
        if (2 * Esp >= dy)
 800e7b2:	6a3b      	ldr	r3, [r7, #32]
 800e7b4:	005b      	lsls	r3, r3, #1
 800e7b6:	697a      	ldr	r2, [r7, #20]
 800e7b8:	429a      	cmp	r2, r3
 800e7ba:	dc0c      	bgt.n	800e7d6 <Paint_DrawLine+0x122>
        {
            if (Xpoint == Xend)
 800e7bc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e7be:	887b      	ldrh	r3, [r7, #2]
 800e7c0:	429a      	cmp	r2, r3
 800e7c2:	d01b      	beq.n	800e7fc <Paint_DrawLine+0x148>
                break;
            Esp += dy;
 800e7c4:	6a3a      	ldr	r2, [r7, #32]
 800e7c6:	697b      	ldr	r3, [r7, #20]
 800e7c8:	4413      	add	r3, r2
 800e7ca:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 800e7cc:	693b      	ldr	r3, [r7, #16]
 800e7ce:	b29a      	uxth	r2, r3
 800e7d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e7d2:	4413      	add	r3, r2
 800e7d4:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if (2 * Esp <= dx)
 800e7d6:	6a3b      	ldr	r3, [r7, #32]
 800e7d8:	005b      	lsls	r3, r3, #1
 800e7da:	69ba      	ldr	r2, [r7, #24]
 800e7dc:	429a      	cmp	r2, r3
 800e7de:	dbbf      	blt.n	800e760 <Paint_DrawLine+0xac>
        {
            if (Ypoint == Yend)
 800e7e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e7e2:	883b      	ldrh	r3, [r7, #0]
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	d00b      	beq.n	800e800 <Paint_DrawLine+0x14c>
                break;
            Esp += dx;
 800e7e8:	6a3a      	ldr	r2, [r7, #32]
 800e7ea:	69bb      	ldr	r3, [r7, #24]
 800e7ec:	4413      	add	r3, r2
 800e7ee:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	b29a      	uxth	r2, r3
 800e7f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7f6:	4413      	add	r3, r2
 800e7f8:	84bb      	strh	r3, [r7, #36]	; 0x24
        Dotted_Len++;
 800e7fa:	e7b1      	b.n	800e760 <Paint_DrawLine+0xac>
                break;
 800e7fc:	bf00      	nop
 800e7fe:	e000      	b.n	800e802 <Paint_DrawLine+0x14e>
                break;
 800e800:	bf00      	nop
        }
    }
}
 800e802:	372c      	adds	r7, #44	; 0x2c
 800e804:	46bd      	mov	sp, r7
 800e806:	bd90      	pop	{r4, r7, pc}
 800e808:	2400b4b0 	.word	0x2400b4b0
 800e80c:	0801f560 	.word	0x0801f560
 800e810:	aaaaaaab 	.word	0xaaaaaaab

0800e814 <Paint_DrawRectangle>:
    Color  ：The color of the Rectangular segment
    Filled : Whether it is filled--- 1 solid 0：empty
******************************************************************************/
void Paint_DrawRectangle( UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend, 
                          UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Filled )
{
 800e814:	b590      	push	{r4, r7, lr}
 800e816:	b089      	sub	sp, #36	; 0x24
 800e818:	af04      	add	r7, sp, #16
 800e81a:	4604      	mov	r4, r0
 800e81c:	4608      	mov	r0, r1
 800e81e:	4611      	mov	r1, r2
 800e820:	461a      	mov	r2, r3
 800e822:	4623      	mov	r3, r4
 800e824:	80fb      	strh	r3, [r7, #6]
 800e826:	4603      	mov	r3, r0
 800e828:	80bb      	strh	r3, [r7, #4]
 800e82a:	460b      	mov	r3, r1
 800e82c:	807b      	strh	r3, [r7, #2]
 800e82e:	4613      	mov	r3, r2
 800e830:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800e832:	4b3a      	ldr	r3, [pc, #232]	; (800e91c <Paint_DrawRectangle+0x108>)
 800e834:	889b      	ldrh	r3, [r3, #4]
 800e836:	b29b      	uxth	r3, r3
 800e838:	88fa      	ldrh	r2, [r7, #6]
 800e83a:	429a      	cmp	r2, r3
 800e83c:	d811      	bhi.n	800e862 <Paint_DrawRectangle+0x4e>
 800e83e:	4b37      	ldr	r3, [pc, #220]	; (800e91c <Paint_DrawRectangle+0x108>)
 800e840:	88db      	ldrh	r3, [r3, #6]
 800e842:	b29b      	uxth	r3, r3
 800e844:	88ba      	ldrh	r2, [r7, #4]
 800e846:	429a      	cmp	r2, r3
 800e848:	d80b      	bhi.n	800e862 <Paint_DrawRectangle+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 800e84a:	4b34      	ldr	r3, [pc, #208]	; (800e91c <Paint_DrawRectangle+0x108>)
 800e84c:	889b      	ldrh	r3, [r3, #4]
 800e84e:	b29b      	uxth	r3, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800e850:	887a      	ldrh	r2, [r7, #2]
 800e852:	429a      	cmp	r2, r3
 800e854:	d805      	bhi.n	800e862 <Paint_DrawRectangle+0x4e>
        Xend > Paint.Width || Yend > Paint.Height) {
 800e856:	4b31      	ldr	r3, [pc, #196]	; (800e91c <Paint_DrawRectangle+0x108>)
 800e858:	88db      	ldrh	r3, [r3, #6]
 800e85a:	b29b      	uxth	r3, r3
 800e85c:	883a      	ldrh	r2, [r7, #0]
 800e85e:	429a      	cmp	r2, r3
 800e860:	d903      	bls.n	800e86a <Paint_DrawRectangle+0x56>
        Debug("Input exceeds the normal display range\r\n");
 800e862:	482f      	ldr	r0, [pc, #188]	; (800e920 <Paint_DrawRectangle+0x10c>)
 800e864:	f00d f8ac 	bl	801b9c0 <puts>
        return;
 800e868:	e054      	b.n	800e914 <Paint_DrawRectangle+0x100>
    }

    if (Filled )
 800e86a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d018      	beq.n	800e8a4 <Paint_DrawRectangle+0x90>
    {
        UWORD Ypoint;
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++)
 800e872:	88bb      	ldrh	r3, [r7, #4]
 800e874:	81fb      	strh	r3, [r7, #14]
 800e876:	e010      	b.n	800e89a <Paint_DrawRectangle+0x86>
        {
            Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color ,Line_width, LINE_STYLE_SOLID);
 800e878:	89fc      	ldrh	r4, [r7, #14]
 800e87a:	887a      	ldrh	r2, [r7, #2]
 800e87c:	89f9      	ldrh	r1, [r7, #14]
 800e87e:	88f8      	ldrh	r0, [r7, #6]
 800e880:	2300      	movs	r3, #0
 800e882:	9302      	str	r3, [sp, #8]
 800e884:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e888:	9301      	str	r3, [sp, #4]
 800e88a:	8c3b      	ldrh	r3, [r7, #32]
 800e88c:	9300      	str	r3, [sp, #0]
 800e88e:	4623      	mov	r3, r4
 800e890:	f7ff ff10 	bl	800e6b4 <Paint_DrawLine>
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++)
 800e894:	89fb      	ldrh	r3, [r7, #14]
 800e896:	3301      	adds	r3, #1
 800e898:	81fb      	strh	r3, [r7, #14]
 800e89a:	89fa      	ldrh	r2, [r7, #14]
 800e89c:	883b      	ldrh	r3, [r7, #0]
 800e89e:	429a      	cmp	r2, r3
 800e8a0:	d3ea      	bcc.n	800e878 <Paint_DrawRectangle+0x64>
 800e8a2:	e037      	b.n	800e914 <Paint_DrawRectangle+0x100>
        }
    }
    else
    {
        Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color ,Line_width, LINE_STYLE_SOLID);
 800e8a4:	88bc      	ldrh	r4, [r7, #4]
 800e8a6:	887a      	ldrh	r2, [r7, #2]
 800e8a8:	88b9      	ldrh	r1, [r7, #4]
 800e8aa:	88f8      	ldrh	r0, [r7, #6]
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	9302      	str	r3, [sp, #8]
 800e8b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e8b4:	9301      	str	r3, [sp, #4]
 800e8b6:	8c3b      	ldrh	r3, [r7, #32]
 800e8b8:	9300      	str	r3, [sp, #0]
 800e8ba:	4623      	mov	r3, r4
 800e8bc:	f7ff fefa 	bl	800e6b4 <Paint_DrawLine>
        Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color ,Line_width, LINE_STYLE_SOLID);
 800e8c0:	883c      	ldrh	r4, [r7, #0]
 800e8c2:	88fa      	ldrh	r2, [r7, #6]
 800e8c4:	88b9      	ldrh	r1, [r7, #4]
 800e8c6:	88f8      	ldrh	r0, [r7, #6]
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	9302      	str	r3, [sp, #8]
 800e8cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e8d0:	9301      	str	r3, [sp, #4]
 800e8d2:	8c3b      	ldrh	r3, [r7, #32]
 800e8d4:	9300      	str	r3, [sp, #0]
 800e8d6:	4623      	mov	r3, r4
 800e8d8:	f7ff feec 	bl	800e6b4 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xend, Ystart, Color ,Line_width, LINE_STYLE_SOLID);
 800e8dc:	88bc      	ldrh	r4, [r7, #4]
 800e8de:	887a      	ldrh	r2, [r7, #2]
 800e8e0:	8839      	ldrh	r1, [r7, #0]
 800e8e2:	8878      	ldrh	r0, [r7, #2]
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	9302      	str	r3, [sp, #8]
 800e8e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e8ec:	9301      	str	r3, [sp, #4]
 800e8ee:	8c3b      	ldrh	r3, [r7, #32]
 800e8f0:	9300      	str	r3, [sp, #0]
 800e8f2:	4623      	mov	r3, r4
 800e8f4:	f7ff fede 	bl	800e6b4 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xstart, Yend, Color ,Line_width, LINE_STYLE_SOLID);
 800e8f8:	883c      	ldrh	r4, [r7, #0]
 800e8fa:	88fa      	ldrh	r2, [r7, #6]
 800e8fc:	8839      	ldrh	r1, [r7, #0]
 800e8fe:	8878      	ldrh	r0, [r7, #2]
 800e900:	2300      	movs	r3, #0
 800e902:	9302      	str	r3, [sp, #8]
 800e904:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e908:	9301      	str	r3, [sp, #4]
 800e90a:	8c3b      	ldrh	r3, [r7, #32]
 800e90c:	9300      	str	r3, [sp, #0]
 800e90e:	4623      	mov	r3, r4
 800e910:	f7ff fed0 	bl	800e6b4 <Paint_DrawLine>
    }
}
 800e914:	3714      	adds	r7, #20
 800e916:	46bd      	mov	sp, r7
 800e918:	bd90      	pop	{r4, r7, pc}
 800e91a:	bf00      	nop
 800e91c:	2400b4b0 	.word	0x2400b4b0
 800e920:	0801f5a0 	.word	0x0801f5a0

0800e924 <Paint_DrawCircle>:
    Color     ：The color of the ：circle segment
    Filled    : Whether it is filled: 1 filling 0：Do not
******************************************************************************/
void Paint_DrawCircle(  UWORD X_Center, UWORD Y_Center, UWORD Radius, 
                        UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill )
{
 800e924:	b590      	push	{r4, r7, lr}
 800e926:	b087      	sub	sp, #28
 800e928:	af02      	add	r7, sp, #8
 800e92a:	4604      	mov	r4, r0
 800e92c:	4608      	mov	r0, r1
 800e92e:	4611      	mov	r1, r2
 800e930:	461a      	mov	r2, r3
 800e932:	4623      	mov	r3, r4
 800e934:	80fb      	strh	r3, [r7, #6]
 800e936:	4603      	mov	r3, r0
 800e938:	80bb      	strh	r3, [r7, #4]
 800e93a:	460b      	mov	r3, r1
 800e93c:	807b      	strh	r3, [r7, #2]
 800e93e:	4613      	mov	r3, r2
 800e940:	803b      	strh	r3, [r7, #0]
    if (X_Center > Paint.Width || Y_Center >= Paint.Height) {
 800e942:	4b68      	ldr	r3, [pc, #416]	; (800eae4 <Paint_DrawCircle+0x1c0>)
 800e944:	889b      	ldrh	r3, [r3, #4]
 800e946:	b29b      	uxth	r3, r3
 800e948:	88fa      	ldrh	r2, [r7, #6]
 800e94a:	429a      	cmp	r2, r3
 800e94c:	d805      	bhi.n	800e95a <Paint_DrawCircle+0x36>
 800e94e:	4b65      	ldr	r3, [pc, #404]	; (800eae4 <Paint_DrawCircle+0x1c0>)
 800e950:	88db      	ldrh	r3, [r3, #6]
 800e952:	b29b      	uxth	r3, r3
 800e954:	88ba      	ldrh	r2, [r7, #4]
 800e956:	429a      	cmp	r2, r3
 800e958:	d303      	bcc.n	800e962 <Paint_DrawCircle+0x3e>
        Debug("Paint_DrawCircle Input exceeds the normal display range\r\n");
 800e95a:	4863      	ldr	r0, [pc, #396]	; (800eae8 <Paint_DrawCircle+0x1c4>)
 800e95c:	f00d f830 	bl	801b9c0 <puts>
        return;
 800e960:	e16b      	b.n	800ec3a <Paint_DrawCircle+0x316>
    }

    //Draw a circle from(0, R) as a starting point
    int16_t XCurrent, YCurrent;
    XCurrent = 0;
 800e962:	2300      	movs	r3, #0
 800e964:	81fb      	strh	r3, [r7, #14]
    YCurrent = Radius;
 800e966:	887b      	ldrh	r3, [r7, #2]
 800e968:	81bb      	strh	r3, [r7, #12]

    //Cumulative error,judge the next point of the logo
    int16_t Esp = 3 - (Radius << 1 );
 800e96a:	887b      	ldrh	r3, [r7, #2]
 800e96c:	005b      	lsls	r3, r3, #1
 800e96e:	b29b      	uxth	r3, r3
 800e970:	f1c3 0303 	rsb	r3, r3, #3
 800e974:	b29b      	uxth	r3, r3
 800e976:	817b      	strh	r3, [r7, #10]

    int16_t sCountY;
    if (Draw_Fill == DRAW_FILL_FULL) {
 800e978:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e97c:	2b01      	cmp	r3, #1
 800e97e:	f040 8155 	bne.w	800ec2c <Paint_DrawCircle+0x308>
        while (XCurrent <= YCurrent ) { //Realistic circles
 800e982:	e0a6      	b.n	800ead2 <Paint_DrawCircle+0x1ae>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 800e984:	89fb      	ldrh	r3, [r7, #14]
 800e986:	813b      	strh	r3, [r7, #8]
 800e988:	e075      	b.n	800ea76 <Paint_DrawCircle+0x152>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//1
 800e98a:	89fa      	ldrh	r2, [r7, #14]
 800e98c:	88fb      	ldrh	r3, [r7, #6]
 800e98e:	4413      	add	r3, r2
 800e990:	b298      	uxth	r0, r3
 800e992:	893a      	ldrh	r2, [r7, #8]
 800e994:	88bb      	ldrh	r3, [r7, #4]
 800e996:	4413      	add	r3, r2
 800e998:	b299      	uxth	r1, r3
 800e99a:	883a      	ldrh	r2, [r7, #0]
 800e99c:	2301      	movs	r3, #1
 800e99e:	9300      	str	r3, [sp, #0]
 800e9a0:	2301      	movs	r3, #1
 800e9a2:	f7ff fdeb 	bl	800e57c <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//2
 800e9a6:	89fb      	ldrh	r3, [r7, #14]
 800e9a8:	88fa      	ldrh	r2, [r7, #6]
 800e9aa:	1ad3      	subs	r3, r2, r3
 800e9ac:	b298      	uxth	r0, r3
 800e9ae:	893a      	ldrh	r2, [r7, #8]
 800e9b0:	88bb      	ldrh	r3, [r7, #4]
 800e9b2:	4413      	add	r3, r2
 800e9b4:	b299      	uxth	r1, r3
 800e9b6:	883a      	ldrh	r2, [r7, #0]
 800e9b8:	2301      	movs	r3, #1
 800e9ba:	9300      	str	r3, [sp, #0]
 800e9bc:	2301      	movs	r3, #1
 800e9be:	f7ff fddd 	bl	800e57c <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//3
 800e9c2:	893b      	ldrh	r3, [r7, #8]
 800e9c4:	88fa      	ldrh	r2, [r7, #6]
 800e9c6:	1ad3      	subs	r3, r2, r3
 800e9c8:	b298      	uxth	r0, r3
 800e9ca:	89fa      	ldrh	r2, [r7, #14]
 800e9cc:	88bb      	ldrh	r3, [r7, #4]
 800e9ce:	4413      	add	r3, r2
 800e9d0:	b299      	uxth	r1, r3
 800e9d2:	883a      	ldrh	r2, [r7, #0]
 800e9d4:	2301      	movs	r3, #1
 800e9d6:	9300      	str	r3, [sp, #0]
 800e9d8:	2301      	movs	r3, #1
 800e9da:	f7ff fdcf 	bl	800e57c <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//4
 800e9de:	893b      	ldrh	r3, [r7, #8]
 800e9e0:	88fa      	ldrh	r2, [r7, #6]
 800e9e2:	1ad3      	subs	r3, r2, r3
 800e9e4:	b298      	uxth	r0, r3
 800e9e6:	89fb      	ldrh	r3, [r7, #14]
 800e9e8:	88ba      	ldrh	r2, [r7, #4]
 800e9ea:	1ad3      	subs	r3, r2, r3
 800e9ec:	b299      	uxth	r1, r3
 800e9ee:	883a      	ldrh	r2, [r7, #0]
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	9300      	str	r3, [sp, #0]
 800e9f4:	2301      	movs	r3, #1
 800e9f6:	f7ff fdc1 	bl	800e57c <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//5
 800e9fa:	89fb      	ldrh	r3, [r7, #14]
 800e9fc:	88fa      	ldrh	r2, [r7, #6]
 800e9fe:	1ad3      	subs	r3, r2, r3
 800ea00:	b298      	uxth	r0, r3
 800ea02:	893b      	ldrh	r3, [r7, #8]
 800ea04:	88ba      	ldrh	r2, [r7, #4]
 800ea06:	1ad3      	subs	r3, r2, r3
 800ea08:	b299      	uxth	r1, r3
 800ea0a:	883a      	ldrh	r2, [r7, #0]
 800ea0c:	2301      	movs	r3, #1
 800ea0e:	9300      	str	r3, [sp, #0]
 800ea10:	2301      	movs	r3, #1
 800ea12:	f7ff fdb3 	bl	800e57c <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//6
 800ea16:	89fa      	ldrh	r2, [r7, #14]
 800ea18:	88fb      	ldrh	r3, [r7, #6]
 800ea1a:	4413      	add	r3, r2
 800ea1c:	b298      	uxth	r0, r3
 800ea1e:	893b      	ldrh	r3, [r7, #8]
 800ea20:	88ba      	ldrh	r2, [r7, #4]
 800ea22:	1ad3      	subs	r3, r2, r3
 800ea24:	b299      	uxth	r1, r3
 800ea26:	883a      	ldrh	r2, [r7, #0]
 800ea28:	2301      	movs	r3, #1
 800ea2a:	9300      	str	r3, [sp, #0]
 800ea2c:	2301      	movs	r3, #1
 800ea2e:	f7ff fda5 	bl	800e57c <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//7
 800ea32:	893a      	ldrh	r2, [r7, #8]
 800ea34:	88fb      	ldrh	r3, [r7, #6]
 800ea36:	4413      	add	r3, r2
 800ea38:	b298      	uxth	r0, r3
 800ea3a:	89fb      	ldrh	r3, [r7, #14]
 800ea3c:	88ba      	ldrh	r2, [r7, #4]
 800ea3e:	1ad3      	subs	r3, r2, r3
 800ea40:	b299      	uxth	r1, r3
 800ea42:	883a      	ldrh	r2, [r7, #0]
 800ea44:	2301      	movs	r3, #1
 800ea46:	9300      	str	r3, [sp, #0]
 800ea48:	2301      	movs	r3, #1
 800ea4a:	f7ff fd97 	bl	800e57c <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 800ea4e:	893a      	ldrh	r2, [r7, #8]
 800ea50:	88fb      	ldrh	r3, [r7, #6]
 800ea52:	4413      	add	r3, r2
 800ea54:	b298      	uxth	r0, r3
 800ea56:	89fa      	ldrh	r2, [r7, #14]
 800ea58:	88bb      	ldrh	r3, [r7, #4]
 800ea5a:	4413      	add	r3, r2
 800ea5c:	b299      	uxth	r1, r3
 800ea5e:	883a      	ldrh	r2, [r7, #0]
 800ea60:	2301      	movs	r3, #1
 800ea62:	9300      	str	r3, [sp, #0]
 800ea64:	2301      	movs	r3, #1
 800ea66:	f7ff fd89 	bl	800e57c <Paint_DrawPoint>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 800ea6a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800ea6e:	b29b      	uxth	r3, r3
 800ea70:	3301      	adds	r3, #1
 800ea72:	b29b      	uxth	r3, r3
 800ea74:	813b      	strh	r3, [r7, #8]
 800ea76:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800ea7a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ea7e:	429a      	cmp	r2, r3
 800ea80:	dd83      	ble.n	800e98a <Paint_DrawCircle+0x66>
            }
            if (Esp < 0 )
 800ea82:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	da09      	bge.n	800ea9e <Paint_DrawCircle+0x17a>
                Esp += 4 * XCurrent + 6;
 800ea8a:	89fb      	ldrh	r3, [r7, #14]
 800ea8c:	009b      	lsls	r3, r3, #2
 800ea8e:	b29a      	uxth	r2, r3
 800ea90:	897b      	ldrh	r3, [r7, #10]
 800ea92:	4413      	add	r3, r2
 800ea94:	b29b      	uxth	r3, r3
 800ea96:	3306      	adds	r3, #6
 800ea98:	b29b      	uxth	r3, r3
 800ea9a:	817b      	strh	r3, [r7, #10]
 800ea9c:	e013      	b.n	800eac6 <Paint_DrawCircle+0x1a2>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 800ea9e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800eaa2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800eaa6:	1ad3      	subs	r3, r2, r3
 800eaa8:	b29b      	uxth	r3, r3
 800eaaa:	009b      	lsls	r3, r3, #2
 800eaac:	b29a      	uxth	r2, r3
 800eaae:	897b      	ldrh	r3, [r7, #10]
 800eab0:	4413      	add	r3, r2
 800eab2:	b29b      	uxth	r3, r3
 800eab4:	330a      	adds	r3, #10
 800eab6:	b29b      	uxth	r3, r3
 800eab8:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 800eaba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800eabe:	b29b      	uxth	r3, r3
 800eac0:	3b01      	subs	r3, #1
 800eac2:	b29b      	uxth	r3, r3
 800eac4:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 800eac6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800eaca:	b29b      	uxth	r3, r3
 800eacc:	3301      	adds	r3, #1
 800eace:	b29b      	uxth	r3, r3
 800ead0:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) { //Realistic circles
 800ead2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800ead6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800eada:	429a      	cmp	r2, r3
 800eadc:	f77f af52 	ble.w	800e984 <Paint_DrawCircle+0x60>
 800eae0:	e0ab      	b.n	800ec3a <Paint_DrawCircle+0x316>
 800eae2:	bf00      	nop
 800eae4:	2400b4b0 	.word	0x2400b4b0
 800eae8:	0801f5d0 	.word	0x0801f5d0
        }
    } else { //Draw a hollow circle
        while (XCurrent <= YCurrent ) {
            Paint_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//1
 800eaec:	89fa      	ldrh	r2, [r7, #14]
 800eaee:	88fb      	ldrh	r3, [r7, #6]
 800eaf0:	4413      	add	r3, r2
 800eaf2:	b298      	uxth	r0, r3
 800eaf4:	89ba      	ldrh	r2, [r7, #12]
 800eaf6:	88bb      	ldrh	r3, [r7, #4]
 800eaf8:	4413      	add	r3, r2
 800eafa:	b299      	uxth	r1, r3
 800eafc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800eb00:	883a      	ldrh	r2, [r7, #0]
 800eb02:	2401      	movs	r4, #1
 800eb04:	9400      	str	r4, [sp, #0]
 800eb06:	f7ff fd39 	bl	800e57c <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//2
 800eb0a:	89fb      	ldrh	r3, [r7, #14]
 800eb0c:	88fa      	ldrh	r2, [r7, #6]
 800eb0e:	1ad3      	subs	r3, r2, r3
 800eb10:	b298      	uxth	r0, r3
 800eb12:	89ba      	ldrh	r2, [r7, #12]
 800eb14:	88bb      	ldrh	r3, [r7, #4]
 800eb16:	4413      	add	r3, r2
 800eb18:	b299      	uxth	r1, r3
 800eb1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800eb1e:	883a      	ldrh	r2, [r7, #0]
 800eb20:	2401      	movs	r4, #1
 800eb22:	9400      	str	r4, [sp, #0]
 800eb24:	f7ff fd2a 	bl	800e57c <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//3
 800eb28:	89bb      	ldrh	r3, [r7, #12]
 800eb2a:	88fa      	ldrh	r2, [r7, #6]
 800eb2c:	1ad3      	subs	r3, r2, r3
 800eb2e:	b298      	uxth	r0, r3
 800eb30:	89fa      	ldrh	r2, [r7, #14]
 800eb32:	88bb      	ldrh	r3, [r7, #4]
 800eb34:	4413      	add	r3, r2
 800eb36:	b299      	uxth	r1, r3
 800eb38:	f897 3020 	ldrb.w	r3, [r7, #32]
 800eb3c:	883a      	ldrh	r2, [r7, #0]
 800eb3e:	2401      	movs	r4, #1
 800eb40:	9400      	str	r4, [sp, #0]
 800eb42:	f7ff fd1b 	bl	800e57c <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//4
 800eb46:	89bb      	ldrh	r3, [r7, #12]
 800eb48:	88fa      	ldrh	r2, [r7, #6]
 800eb4a:	1ad3      	subs	r3, r2, r3
 800eb4c:	b298      	uxth	r0, r3
 800eb4e:	89fb      	ldrh	r3, [r7, #14]
 800eb50:	88ba      	ldrh	r2, [r7, #4]
 800eb52:	1ad3      	subs	r3, r2, r3
 800eb54:	b299      	uxth	r1, r3
 800eb56:	f897 3020 	ldrb.w	r3, [r7, #32]
 800eb5a:	883a      	ldrh	r2, [r7, #0]
 800eb5c:	2401      	movs	r4, #1
 800eb5e:	9400      	str	r4, [sp, #0]
 800eb60:	f7ff fd0c 	bl	800e57c <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//5
 800eb64:	89fb      	ldrh	r3, [r7, #14]
 800eb66:	88fa      	ldrh	r2, [r7, #6]
 800eb68:	1ad3      	subs	r3, r2, r3
 800eb6a:	b298      	uxth	r0, r3
 800eb6c:	89bb      	ldrh	r3, [r7, #12]
 800eb6e:	88ba      	ldrh	r2, [r7, #4]
 800eb70:	1ad3      	subs	r3, r2, r3
 800eb72:	b299      	uxth	r1, r3
 800eb74:	f897 3020 	ldrb.w	r3, [r7, #32]
 800eb78:	883a      	ldrh	r2, [r7, #0]
 800eb7a:	2401      	movs	r4, #1
 800eb7c:	9400      	str	r4, [sp, #0]
 800eb7e:	f7ff fcfd 	bl	800e57c <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//6
 800eb82:	89fa      	ldrh	r2, [r7, #14]
 800eb84:	88fb      	ldrh	r3, [r7, #6]
 800eb86:	4413      	add	r3, r2
 800eb88:	b298      	uxth	r0, r3
 800eb8a:	89bb      	ldrh	r3, [r7, #12]
 800eb8c:	88ba      	ldrh	r2, [r7, #4]
 800eb8e:	1ad3      	subs	r3, r2, r3
 800eb90:	b299      	uxth	r1, r3
 800eb92:	f897 3020 	ldrb.w	r3, [r7, #32]
 800eb96:	883a      	ldrh	r2, [r7, #0]
 800eb98:	2401      	movs	r4, #1
 800eb9a:	9400      	str	r4, [sp, #0]
 800eb9c:	f7ff fcee 	bl	800e57c <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//7
 800eba0:	89ba      	ldrh	r2, [r7, #12]
 800eba2:	88fb      	ldrh	r3, [r7, #6]
 800eba4:	4413      	add	r3, r2
 800eba6:	b298      	uxth	r0, r3
 800eba8:	89fb      	ldrh	r3, [r7, #14]
 800ebaa:	88ba      	ldrh	r2, [r7, #4]
 800ebac:	1ad3      	subs	r3, r2, r3
 800ebae:	b299      	uxth	r1, r3
 800ebb0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ebb4:	883a      	ldrh	r2, [r7, #0]
 800ebb6:	2401      	movs	r4, #1
 800ebb8:	9400      	str	r4, [sp, #0]
 800ebba:	f7ff fcdf 	bl	800e57c <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//0
 800ebbe:	89ba      	ldrh	r2, [r7, #12]
 800ebc0:	88fb      	ldrh	r3, [r7, #6]
 800ebc2:	4413      	add	r3, r2
 800ebc4:	b298      	uxth	r0, r3
 800ebc6:	89fa      	ldrh	r2, [r7, #14]
 800ebc8:	88bb      	ldrh	r3, [r7, #4]
 800ebca:	4413      	add	r3, r2
 800ebcc:	b299      	uxth	r1, r3
 800ebce:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ebd2:	883a      	ldrh	r2, [r7, #0]
 800ebd4:	2401      	movs	r4, #1
 800ebd6:	9400      	str	r4, [sp, #0]
 800ebd8:	f7ff fcd0 	bl	800e57c <Paint_DrawPoint>

            if (Esp < 0 )
 800ebdc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	da09      	bge.n	800ebf8 <Paint_DrawCircle+0x2d4>
                Esp += 4 * XCurrent + 6;
 800ebe4:	89fb      	ldrh	r3, [r7, #14]
 800ebe6:	009b      	lsls	r3, r3, #2
 800ebe8:	b29a      	uxth	r2, r3
 800ebea:	897b      	ldrh	r3, [r7, #10]
 800ebec:	4413      	add	r3, r2
 800ebee:	b29b      	uxth	r3, r3
 800ebf0:	3306      	adds	r3, #6
 800ebf2:	b29b      	uxth	r3, r3
 800ebf4:	817b      	strh	r3, [r7, #10]
 800ebf6:	e013      	b.n	800ec20 <Paint_DrawCircle+0x2fc>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 800ebf8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800ebfc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ec00:	1ad3      	subs	r3, r2, r3
 800ec02:	b29b      	uxth	r3, r3
 800ec04:	009b      	lsls	r3, r3, #2
 800ec06:	b29a      	uxth	r2, r3
 800ec08:	897b      	ldrh	r3, [r7, #10]
 800ec0a:	4413      	add	r3, r2
 800ec0c:	b29b      	uxth	r3, r3
 800ec0e:	330a      	adds	r3, #10
 800ec10:	b29b      	uxth	r3, r3
 800ec12:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 800ec14:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ec18:	b29b      	uxth	r3, r3
 800ec1a:	3b01      	subs	r3, #1
 800ec1c:	b29b      	uxth	r3, r3
 800ec1e:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 800ec20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ec24:	b29b      	uxth	r3, r3
 800ec26:	3301      	adds	r3, #1
 800ec28:	b29b      	uxth	r3, r3
 800ec2a:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) {
 800ec2c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800ec30:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ec34:	429a      	cmp	r2, r3
 800ec36:	f77f af59 	ble.w	800eaec <Paint_DrawCircle+0x1c8>
        }
    }
}
 800ec3a:	3714      	adds	r7, #20
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd90      	pop	{r4, r7, pc}

0800ec40 <Paint_DrawChar>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Background, UWORD Color_Foreground)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b088      	sub	sp, #32
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	607b      	str	r3, [r7, #4]
 800ec48:	4603      	mov	r3, r0
 800ec4a:	81fb      	strh	r3, [r7, #14]
 800ec4c:	460b      	mov	r3, r1
 800ec4e:	81bb      	strh	r3, [r7, #12]
 800ec50:	4613      	mov	r3, r2
 800ec52:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height)
 800ec54:	4b3f      	ldr	r3, [pc, #252]	; (800ed54 <Paint_DrawChar+0x114>)
 800ec56:	889b      	ldrh	r3, [r3, #4]
 800ec58:	b29b      	uxth	r3, r3
 800ec5a:	89fa      	ldrh	r2, [r7, #14]
 800ec5c:	429a      	cmp	r2, r3
 800ec5e:	d805      	bhi.n	800ec6c <Paint_DrawChar+0x2c>
 800ec60:	4b3c      	ldr	r3, [pc, #240]	; (800ed54 <Paint_DrawChar+0x114>)
 800ec62:	88db      	ldrh	r3, [r3, #6]
 800ec64:	b29b      	uxth	r3, r3
 800ec66:	89ba      	ldrh	r2, [r7, #12]
 800ec68:	429a      	cmp	r2, r3
 800ec6a:	d903      	bls.n	800ec74 <Paint_DrawChar+0x34>
    {
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 800ec6c:	483a      	ldr	r0, [pc, #232]	; (800ed58 <Paint_DrawChar+0x118>)
 800ec6e:	f00c fea7 	bl	801b9c0 <puts>
        return;
 800ec72:	e06b      	b.n	800ed4c <Paint_DrawChar+0x10c>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 800ec74:	7afb      	ldrb	r3, [r7, #11]
 800ec76:	3b20      	subs	r3, #32
 800ec78:	687a      	ldr	r2, [r7, #4]
 800ec7a:	88d2      	ldrh	r2, [r2, #6]
 800ec7c:	fb02 f303 	mul.w	r3, r2, r3
 800ec80:	687a      	ldr	r2, [r7, #4]
 800ec82:	8892      	ldrh	r2, [r2, #4]
 800ec84:	08d2      	lsrs	r2, r2, #3
 800ec86:	b292      	uxth	r2, r2
 800ec88:	4611      	mov	r1, r2
 800ec8a:	687a      	ldr	r2, [r7, #4]
 800ec8c:	8892      	ldrh	r2, [r2, #4]
 800ec8e:	f002 0207 	and.w	r2, r2, #7
 800ec92:	b292      	uxth	r2, r2
 800ec94:	2a00      	cmp	r2, #0
 800ec96:	bf14      	ite	ne
 800ec98:	2201      	movne	r2, #1
 800ec9a:	2200      	moveq	r2, #0
 800ec9c:	b2d2      	uxtb	r2, r2
 800ec9e:	440a      	add	r2, r1
 800eca0:	fb02 f303 	mul.w	r3, r2, r3
 800eca4:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681a      	ldr	r2, [r3, #0]
 800ecaa:	697b      	ldr	r3, [r7, #20]
 800ecac:	4413      	add	r3, r2
 800ecae:	61fb      	str	r3, [r7, #28]

    for (Page = 0; Page < Font->Height; Page ++ )
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	837b      	strh	r3, [r7, #26]
 800ecb4:	e045      	b.n	800ed42 <Paint_DrawChar+0x102>
    {
        for (Column = 0; Column < Font->Width; Column ++ )
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	833b      	strh	r3, [r7, #24]
 800ecba:	e030      	b.n	800ed1e <Paint_DrawChar+0xde>
                }
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            }
            else
            {
                if (*ptr & (0x80 >> (Column % 8)))
 800ecbc:	69fb      	ldr	r3, [r7, #28]
 800ecbe:	781b      	ldrb	r3, [r3, #0]
 800ecc0:	4619      	mov	r1, r3
 800ecc2:	8b3b      	ldrh	r3, [r7, #24]
 800ecc4:	f003 0307 	and.w	r3, r3, #7
 800ecc8:	2280      	movs	r2, #128	; 0x80
 800ecca:	fa42 f303 	asr.w	r3, r2, r3
 800ecce:	400b      	ands	r3, r1
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d00c      	beq.n	800ecee <Paint_DrawChar+0xae>
                {

//                    if (!renderCompleteFrame)
//                    {
                    	Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800ecd4:	89fa      	ldrh	r2, [r7, #14]
 800ecd6:	8b3b      	ldrh	r3, [r7, #24]
 800ecd8:	4413      	add	r3, r2
 800ecda:	b298      	uxth	r0, r3
 800ecdc:	89ba      	ldrh	r2, [r7, #12]
 800ecde:	8b7b      	ldrh	r3, [r7, #26]
 800ece0:	4413      	add	r3, r2
 800ece2:	b29b      	uxth	r3, r3
 800ece4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800ece6:	4619      	mov	r1, r3
 800ece8:	f7ff fb5a 	bl	800e3a0 <Paint_SetPixel>
 800ecec:	e00b      	b.n	800ed06 <Paint_DrawChar+0xc6>
                }
                else
                {
//                	if (!renderCompleteFrame)
//                	{
                		Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 800ecee:	89fa      	ldrh	r2, [r7, #14]
 800ecf0:	8b3b      	ldrh	r3, [r7, #24]
 800ecf2:	4413      	add	r3, r2
 800ecf4:	b298      	uxth	r0, r3
 800ecf6:	89ba      	ldrh	r2, [r7, #12]
 800ecf8:	8b7b      	ldrh	r3, [r7, #26]
 800ecfa:	4413      	add	r3, r2
 800ecfc:	b29b      	uxth	r3, r3
 800ecfe:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ed00:	4619      	mov	r1, r3
 800ed02:	f7ff fb4d 	bl	800e3a0 <Paint_SetPixel>
//                	}
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 800ed06:	8b3b      	ldrh	r3, [r7, #24]
 800ed08:	f003 0307 	and.w	r3, r3, #7
 800ed0c:	b29b      	uxth	r3, r3
 800ed0e:	2b07      	cmp	r3, #7
 800ed10:	d102      	bne.n	800ed18 <Paint_DrawChar+0xd8>
            {
                ptr++;
 800ed12:	69fb      	ldr	r3, [r7, #28]
 800ed14:	3301      	adds	r3, #1
 800ed16:	61fb      	str	r3, [r7, #28]
        for (Column = 0; Column < Font->Width; Column ++ )
 800ed18:	8b3b      	ldrh	r3, [r7, #24]
 800ed1a:	3301      	adds	r3, #1
 800ed1c:	833b      	strh	r3, [r7, #24]
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	889b      	ldrh	r3, [r3, #4]
 800ed22:	8b3a      	ldrh	r2, [r7, #24]
 800ed24:	429a      	cmp	r2, r3
 800ed26:	d3c9      	bcc.n	800ecbc <Paint_DrawChar+0x7c>
            }
        }// Write a line
        if (Font->Width % 8 != 0)
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	889b      	ldrh	r3, [r3, #4]
 800ed2c:	f003 0307 	and.w	r3, r3, #7
 800ed30:	b29b      	uxth	r3, r3
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d002      	beq.n	800ed3c <Paint_DrawChar+0xfc>
        {
            ptr++;
 800ed36:	69fb      	ldr	r3, [r7, #28]
 800ed38:	3301      	adds	r3, #1
 800ed3a:	61fb      	str	r3, [r7, #28]
    for (Page = 0; Page < Font->Height; Page ++ )
 800ed3c:	8b7b      	ldrh	r3, [r7, #26]
 800ed3e:	3301      	adds	r3, #1
 800ed40:	837b      	strh	r3, [r7, #26]
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	88db      	ldrh	r3, [r3, #6]
 800ed46:	8b7a      	ldrh	r2, [r7, #26]
 800ed48:	429a      	cmp	r2, r3
 800ed4a:	d3b4      	bcc.n	800ecb6 <Paint_DrawChar+0x76>
        }
    }// Write all
}
 800ed4c:	3720      	adds	r7, #32
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}
 800ed52:	bf00      	nop
 800ed54:	2400b4b0 	.word	0x2400b4b0
 800ed58:	0801f614 	.word	0x0801f614

0800ed5c <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Background, UWORD Color_Foreground )
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b088      	sub	sp, #32
 800ed60:	af02      	add	r7, sp, #8
 800ed62:	60ba      	str	r2, [r7, #8]
 800ed64:	607b      	str	r3, [r7, #4]
 800ed66:	4603      	mov	r3, r0
 800ed68:	81fb      	strh	r3, [r7, #14]
 800ed6a:	460b      	mov	r3, r1
 800ed6c:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 800ed6e:	89fb      	ldrh	r3, [r7, #14]
 800ed70:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 800ed72:	89bb      	ldrh	r3, [r7, #12]
 800ed74:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 800ed76:	4b23      	ldr	r3, [pc, #140]	; (800ee04 <Paint_DrawString_EN+0xa8>)
 800ed78:	889b      	ldrh	r3, [r3, #4]
 800ed7a:	b29b      	uxth	r3, r3
 800ed7c:	89fa      	ldrh	r2, [r7, #14]
 800ed7e:	429a      	cmp	r2, r3
 800ed80:	d805      	bhi.n	800ed8e <Paint_DrawString_EN+0x32>
 800ed82:	4b20      	ldr	r3, [pc, #128]	; (800ee04 <Paint_DrawString_EN+0xa8>)
 800ed84:	88db      	ldrh	r3, [r3, #6]
 800ed86:	b29b      	uxth	r3, r3
 800ed88:	89ba      	ldrh	r2, [r7, #12]
 800ed8a:	429a      	cmp	r2, r3
 800ed8c:	d933      	bls.n	800edf6 <Paint_DrawString_EN+0x9a>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 800ed8e:	481e      	ldr	r0, [pc, #120]	; (800ee08 <Paint_DrawString_EN+0xac>)
 800ed90:	f00c fe16 	bl	801b9c0 <puts>
        return;
 800ed94:	e033      	b.n	800edfe <Paint_DrawString_EN+0xa2>
    }

    while (* pString != '\0')
    {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width )
 800ed96:	8afb      	ldrh	r3, [r7, #22]
 800ed98:	687a      	ldr	r2, [r7, #4]
 800ed9a:	8892      	ldrh	r2, [r2, #4]
 800ed9c:	4413      	add	r3, r2
 800ed9e:	4a19      	ldr	r2, [pc, #100]	; (800ee04 <Paint_DrawString_EN+0xa8>)
 800eda0:	8892      	ldrh	r2, [r2, #4]
 800eda2:	b292      	uxth	r2, r2
 800eda4:	4293      	cmp	r3, r2
 800eda6:	dd06      	ble.n	800edb6 <Paint_DrawString_EN+0x5a>
        {
            Xpoint = Xstart;
 800eda8:	89fb      	ldrh	r3, [r7, #14]
 800edaa:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	88da      	ldrh	r2, [r3, #6]
 800edb0:	8abb      	ldrh	r3, [r7, #20]
 800edb2:	4413      	add	r3, r2
 800edb4:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height )
 800edb6:	8abb      	ldrh	r3, [r7, #20]
 800edb8:	687a      	ldr	r2, [r7, #4]
 800edba:	88d2      	ldrh	r2, [r2, #6]
 800edbc:	4413      	add	r3, r2
 800edbe:	4a11      	ldr	r2, [pc, #68]	; (800ee04 <Paint_DrawString_EN+0xa8>)
 800edc0:	88d2      	ldrh	r2, [r2, #6]
 800edc2:	b292      	uxth	r2, r2
 800edc4:	4293      	cmp	r3, r2
 800edc6:	dd03      	ble.n	800edd0 <Paint_DrawString_EN+0x74>
        {
            Xpoint = Xstart;
 800edc8:	89fb      	ldrh	r3, [r7, #14]
 800edca:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 800edcc:	89bb      	ldrh	r3, [r7, #12]
 800edce:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 800edd0:	68bb      	ldr	r3, [r7, #8]
 800edd2:	781a      	ldrb	r2, [r3, #0]
 800edd4:	8ab9      	ldrh	r1, [r7, #20]
 800edd6:	8af8      	ldrh	r0, [r7, #22]
 800edd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edda:	9301      	str	r3, [sp, #4]
 800eddc:	8c3b      	ldrh	r3, [r7, #32]
 800edde:	9300      	str	r3, [sp, #0]
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	f7ff ff2d 	bl	800ec40 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 800ede6:	68bb      	ldr	r3, [r7, #8]
 800ede8:	3301      	adds	r3, #1
 800edea:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	889a      	ldrh	r2, [r3, #4]
 800edf0:	8afb      	ldrh	r3, [r7, #22]
 800edf2:	4413      	add	r3, r2
 800edf4:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0')
 800edf6:	68bb      	ldr	r3, [r7, #8]
 800edf8:	781b      	ldrb	r3, [r3, #0]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d1cb      	bne.n	800ed96 <Paint_DrawString_EN+0x3a>
    }
}
 800edfe:	3718      	adds	r7, #24
 800ee00:	46bd      	mov	sp, r7
 800ee02:	bd80      	pop	{r7, pc}
 800ee04:	2400b4b0 	.word	0x2400b4b0
 800ee08:	0801f654 	.word	0x0801f654

0800ee0c <Paint_DrawFloatNum>:
    Font             ：A structure pointer that displays a character size
    Color            : Select the background color of the English character
******************************************************************************/
void Paint_DrawFloatNum(UWORD Xpoint, UWORD Ypoint, double Nummber,  UBYTE Decimal_Point, 
                        sFONT* Font,  UWORD Color_Background, UWORD Color_Foreground)
{
 800ee0c:	b590      	push	{r4, r7, lr}
 800ee0e:	b0cb      	sub	sp, #300	; 0x12c
 800ee10:	af02      	add	r7, sp, #8
 800ee12:	4604      	mov	r4, r0
 800ee14:	4608      	mov	r0, r1
 800ee16:	f107 0108 	add.w	r1, r7, #8
 800ee1a:	ed81 0b00 	vstr	d0, [r1]
 800ee1e:	4611      	mov	r1, r2
 800ee20:	1d3a      	adds	r2, r7, #4
 800ee22:	6013      	str	r3, [r2, #0]
 800ee24:	f107 0316 	add.w	r3, r7, #22
 800ee28:	4622      	mov	r2, r4
 800ee2a:	801a      	strh	r2, [r3, #0]
 800ee2c:	f107 0314 	add.w	r3, r7, #20
 800ee30:	4602      	mov	r2, r0
 800ee32:	801a      	strh	r2, [r3, #0]
 800ee34:	f107 0313 	add.w	r3, r7, #19
 800ee38:	460a      	mov	r2, r1
 800ee3a:	701a      	strb	r2, [r3, #0]
    char Str[ARRAY_LEN] = "";
 800ee3c:	f107 031c 	add.w	r3, r7, #28
 800ee40:	2200      	movs	r2, #0
 800ee42:	601a      	str	r2, [r3, #0]
 800ee44:	3304      	adds	r3, #4
 800ee46:	22fb      	movs	r2, #251	; 0xfb
 800ee48:	2100      	movs	r1, #0
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	f00b fce0 	bl	801a810 <memset>
    sprintf(Str,"%.*lf",Decimal_Point+2,Nummber);
 800ee50:	f107 0313 	add.w	r3, r7, #19
 800ee54:	781b      	ldrb	r3, [r3, #0]
 800ee56:	1c99      	adds	r1, r3, #2
 800ee58:	f107 001c 	add.w	r0, r7, #28
 800ee5c:	f107 0308 	add.w	r3, r7, #8
 800ee60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee64:	e9cd 2300 	strd	r2, r3, [sp]
 800ee68:	460a      	mov	r2, r1
 800ee6a:	4930      	ldr	r1, [pc, #192]	; (800ef2c <Paint_DrawFloatNum+0x120>)
 800ee6c:	f00c fdfa 	bl	801ba64 <siprintf>
    char * pStr= (char *)malloc((strlen(Str))*sizeof(char));
 800ee70:	f107 031c 	add.w	r3, r7, #28
 800ee74:	4618      	mov	r0, r3
 800ee76:	f7f1 fa3d 	bl	80002f4 <strlen>
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f00b fc8f 	bl	801a7a0 <malloc>
 800ee82:	4603      	mov	r3, r0
 800ee84:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    memcpy(pStr,Str,(strlen(Str)-2));
 800ee88:	f107 031c 	add.w	r3, r7, #28
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f7f1 fa31 	bl	80002f4 <strlen>
 800ee92:	4603      	mov	r3, r0
 800ee94:	1e9a      	subs	r2, r3, #2
 800ee96:	f107 031c 	add.w	r3, r7, #28
 800ee9a:	4619      	mov	r1, r3
 800ee9c:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800eea0:	f00b fc8e 	bl	801a7c0 <memcpy>
    * (pStr+strlen(Str)-2)='\0';
 800eea4:	f107 031c 	add.w	r3, r7, #28
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f7f1 fa23 	bl	80002f4 <strlen>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	3b02      	subs	r3, #2
 800eeb2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800eeb6:	4413      	add	r3, r2
 800eeb8:	2200      	movs	r2, #0
 800eeba:	701a      	strb	r2, [r3, #0]
    if((*(pStr+strlen(Str)-3))=='.')
 800eebc:	f107 031c 	add.w	r3, r7, #28
 800eec0:	4618      	mov	r0, r3
 800eec2:	f7f1 fa17 	bl	80002f4 <strlen>
 800eec6:	4603      	mov	r3, r0
 800eec8:	3b03      	subs	r3, #3
 800eeca:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800eece:	4413      	add	r3, r2
 800eed0:	781b      	ldrb	r3, [r3, #0]
 800eed2:	2b2e      	cmp	r3, #46	; 0x2e
 800eed4:	d10b      	bne.n	800eeee <Paint_DrawFloatNum+0xe2>
    {
      *(pStr+strlen(Str)-3)='\0';
 800eed6:	f107 031c 	add.w	r3, r7, #28
 800eeda:	4618      	mov	r0, r3
 800eedc:	f7f1 fa0a 	bl	80002f4 <strlen>
 800eee0:	4603      	mov	r3, r0
 800eee2:	3b03      	subs	r3, #3
 800eee4:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800eee8:	4413      	add	r3, r2
 800eeea:	2200      	movs	r2, #0
 800eeec:	701a      	strb	r2, [r3, #0]
    }
    //show
    Paint_DrawString_EN(Xpoint, Ypoint, (const char*)pStr, Font, Color_Foreground, Color_Background);
 800eeee:	1d3b      	adds	r3, r7, #4
 800eef0:	f107 0214 	add.w	r2, r7, #20
 800eef4:	8811      	ldrh	r1, [r2, #0]
 800eef6:	f107 0216 	add.w	r2, r7, #22
 800eefa:	8810      	ldrh	r0, [r2, #0]
 800eefc:	f8b7 2130 	ldrh.w	r2, [r7, #304]	; 0x130
 800ef00:	9201      	str	r2, [sp, #4]
 800ef02:	f8b7 2134 	ldrh.w	r2, [r7, #308]	; 0x134
 800ef06:	9200      	str	r2, [sp, #0]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800ef0e:	f7ff ff25 	bl	800ed5c <Paint_DrawString_EN>
    free(pStr);
 800ef12:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800ef16:	f00b fc4b 	bl	801a7b0 <free>
    pStr=NULL;
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
}
 800ef20:	bf00      	nop
 800ef22:	f507 7792 	add.w	r7, r7, #292	; 0x124
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd90      	pop	{r4, r7, pc}
 800ef2a:	bf00      	nop
 800ef2c:	0801f6d8 	.word	0x0801f6d8

0800ef30 <Paint_DrawImage>:
    yStart           : Y starting coordinates
    xEnd             ：Image width
    yEnd             : Image height
******************************************************************************/
void Paint_DrawImage(const unsigned char *image, UWORD xStart, UWORD yStart, UWORD W_Image, UWORD H_Image) 
{
 800ef30:	b590      	push	{r4, r7, lr}
 800ef32:	b087      	sub	sp, #28
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	60f8      	str	r0, [r7, #12]
 800ef38:	4608      	mov	r0, r1
 800ef3a:	4611      	mov	r1, r2
 800ef3c:	461a      	mov	r2, r3
 800ef3e:	4603      	mov	r3, r0
 800ef40:	817b      	strh	r3, [r7, #10]
 800ef42:	460b      	mov	r3, r1
 800ef44:	813b      	strh	r3, [r7, #8]
 800ef46:	4613      	mov	r3, r2
 800ef48:	80fb      	strh	r3, [r7, #6]
	int i,j;
	for(j = 0; j < H_Image; j++)
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	613b      	str	r3, [r7, #16]
 800ef4e:	e049      	b.n	800efe4 <Paint_DrawImage+0xb4>
	{
		for(i = 0; i < W_Image; i++)
 800ef50:	2300      	movs	r3, #0
 800ef52:	617b      	str	r3, [r7, #20]
 800ef54:	e03f      	b.n	800efd6 <Paint_DrawImage+0xa6>
		{
			if(xStart+i < Paint.WidthMemory  &&  yStart+j < Paint.HeightMemory)//Exceeded part does not display
 800ef56:	897a      	ldrh	r2, [r7, #10]
 800ef58:	697b      	ldr	r3, [r7, #20]
 800ef5a:	4413      	add	r3, r2
 800ef5c:	4a26      	ldr	r2, [pc, #152]	; (800eff8 <Paint_DrawImage+0xc8>)
 800ef5e:	8912      	ldrh	r2, [r2, #8]
 800ef60:	b292      	uxth	r2, r2
 800ef62:	4293      	cmp	r3, r2
 800ef64:	da34      	bge.n	800efd0 <Paint_DrawImage+0xa0>
 800ef66:	893a      	ldrh	r2, [r7, #8]
 800ef68:	693b      	ldr	r3, [r7, #16]
 800ef6a:	4413      	add	r3, r2
 800ef6c:	4a22      	ldr	r2, [pc, #136]	; (800eff8 <Paint_DrawImage+0xc8>)
 800ef6e:	8952      	ldrh	r2, [r2, #10]
 800ef70:	b292      	uxth	r2, r2
 800ef72:	4293      	cmp	r3, r2
 800ef74:	da2c      	bge.n	800efd0 <Paint_DrawImage+0xa0>
			{
				Paint_SetPixel(xStart + i, yStart + j, (*(image + j*W_Image*2 + i*2+1))<<8 | (*(image + j*W_Image*2 + i*2)));
 800ef76:	697b      	ldr	r3, [r7, #20]
 800ef78:	b29a      	uxth	r2, r3
 800ef7a:	897b      	ldrh	r3, [r7, #10]
 800ef7c:	4413      	add	r3, r2
 800ef7e:	b298      	uxth	r0, r3
 800ef80:	693b      	ldr	r3, [r7, #16]
 800ef82:	b29a      	uxth	r2, r3
 800ef84:	893b      	ldrh	r3, [r7, #8]
 800ef86:	4413      	add	r3, r2
 800ef88:	b29c      	uxth	r4, r3
 800ef8a:	88fb      	ldrh	r3, [r7, #6]
 800ef8c:	693a      	ldr	r2, [r7, #16]
 800ef8e:	fb02 f303 	mul.w	r3, r2, r3
 800ef92:	005b      	lsls	r3, r3, #1
 800ef94:	461a      	mov	r2, r3
 800ef96:	697b      	ldr	r3, [r7, #20]
 800ef98:	005b      	lsls	r3, r3, #1
 800ef9a:	4413      	add	r3, r2
 800ef9c:	3301      	adds	r3, #1
 800ef9e:	68fa      	ldr	r2, [r7, #12]
 800efa0:	4413      	add	r3, r2
 800efa2:	781b      	ldrb	r3, [r3, #0]
 800efa4:	021b      	lsls	r3, r3, #8
 800efa6:	b21a      	sxth	r2, r3
 800efa8:	88fb      	ldrh	r3, [r7, #6]
 800efaa:	6939      	ldr	r1, [r7, #16]
 800efac:	fb01 f303 	mul.w	r3, r1, r3
 800efb0:	005b      	lsls	r3, r3, #1
 800efb2:	4619      	mov	r1, r3
 800efb4:	697b      	ldr	r3, [r7, #20]
 800efb6:	005b      	lsls	r3, r3, #1
 800efb8:	440b      	add	r3, r1
 800efba:	68f9      	ldr	r1, [r7, #12]
 800efbc:	440b      	add	r3, r1
 800efbe:	781b      	ldrb	r3, [r3, #0]
 800efc0:	b21b      	sxth	r3, r3
 800efc2:	4313      	orrs	r3, r2
 800efc4:	b21b      	sxth	r3, r3
 800efc6:	b29b      	uxth	r3, r3
 800efc8:	461a      	mov	r2, r3
 800efca:	4621      	mov	r1, r4
 800efcc:	f7ff f9e8 	bl	800e3a0 <Paint_SetPixel>
		for(i = 0; i < W_Image; i++)
 800efd0:	697b      	ldr	r3, [r7, #20]
 800efd2:	3301      	adds	r3, #1
 800efd4:	617b      	str	r3, [r7, #20]
 800efd6:	88fb      	ldrh	r3, [r7, #6]
 800efd8:	697a      	ldr	r2, [r7, #20]
 800efda:	429a      	cmp	r2, r3
 800efdc:	dbbb      	blt.n	800ef56 <Paint_DrawImage+0x26>
	for(j = 0; j < H_Image; j++)
 800efde:	693b      	ldr	r3, [r7, #16]
 800efe0:	3301      	adds	r3, #1
 800efe2:	613b      	str	r3, [r7, #16]
 800efe4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800efe6:	693a      	ldr	r2, [r7, #16]
 800efe8:	429a      	cmp	r2, r3
 800efea:	dbb1      	blt.n	800ef50 <Paint_DrawImage+0x20>
			//Using arrays is a property of sequential storage, accessing the original array by algorithm
			//j*W_Image*2 			   Y offset
			//i*2              	   X offset
		}
	}
}
 800efec:	bf00      	nop
 800efee:	bf00      	nop
 800eff0:	371c      	adds	r7, #28
 800eff2:	46bd      	mov	sp, r7
 800eff4:	bd90      	pop	{r4, r7, pc}
 800eff6:	bf00      	nop
 800eff8:	2400b4b0 	.word	0x2400b4b0

0800effc <LCD_1IN8_Reset>:
/*******************************************************************************
function:
			Hardware reset
*******************************************************************************/
static void LCD_1IN8_Reset(void)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	af00      	add	r7, sp, #0
    LCD_1IN8_RST_1;
 800f000:	2201      	movs	r2, #1
 800f002:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f006:	480d      	ldr	r0, [pc, #52]	; (800f03c <LCD_1IN8_Reset+0x40>)
 800f008:	f7f6 f9d0 	bl	80053ac <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 800f00c:	2064      	movs	r0, #100	; 0x64
 800f00e:	f7f3 fb19 	bl	8002644 <HAL_Delay>
    LCD_1IN8_RST_0;
 800f012:	2200      	movs	r2, #0
 800f014:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f018:	4808      	ldr	r0, [pc, #32]	; (800f03c <LCD_1IN8_Reset+0x40>)
 800f01a:	f7f6 f9c7 	bl	80053ac <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 800f01e:	2064      	movs	r0, #100	; 0x64
 800f020:	f7f3 fb10 	bl	8002644 <HAL_Delay>
    LCD_1IN8_RST_1;
 800f024:	2201      	movs	r2, #1
 800f026:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f02a:	4804      	ldr	r0, [pc, #16]	; (800f03c <LCD_1IN8_Reset+0x40>)
 800f02c:	f7f6 f9be 	bl	80053ac <HAL_GPIO_WritePin>
    DEV_Delay_ms(100);
 800f030:	2064      	movs	r0, #100	; 0x64
 800f032:	f7f3 fb07 	bl	8002644 <HAL_Delay>
}
 800f036:	bf00      	nop
 800f038:	bd80      	pop	{r7, pc}
 800f03a:	bf00      	nop
 800f03c:	58021400 	.word	0x58021400

0800f040 <LCD_1IN8_WriteReg>:
/*******************************************************************************
function:
		Write register address and data
*******************************************************************************/
static void LCD_1IN8_WriteReg(uint8_t Reg)
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b082      	sub	sp, #8
 800f044:	af00      	add	r7, sp, #0
 800f046:	4603      	mov	r3, r0
 800f048:	71fb      	strb	r3, [r7, #7]
    LCD_1IN8_DC_0;
 800f04a:	2200      	movs	r2, #0
 800f04c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f050:	4807      	ldr	r0, [pc, #28]	; (800f070 <LCD_1IN8_WriteReg+0x30>)
 800f052:	f7f6 f9ab 	bl	80053ac <HAL_GPIO_WritePin>
    LCD_1IN8_CS_0;
 800f056:	2200      	movs	r2, #0
 800f058:	2140      	movs	r1, #64	; 0x40
 800f05a:	4805      	ldr	r0, [pc, #20]	; (800f070 <LCD_1IN8_WriteReg+0x30>)
 800f05c:	f7f6 f9a6 	bl	80053ac <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Reg);
 800f060:	79fb      	ldrb	r3, [r7, #7]
 800f062:	4618      	mov	r0, r3
 800f064:	f7ff f8fe 	bl	800e264 <DEV_SPI_WRite>
    //LCD_1IN8_CS_1;
}
 800f068:	bf00      	nop
 800f06a:	3708      	adds	r7, #8
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}
 800f070:	58021800 	.word	0x58021800

0800f074 <LCD_1IN8_WriteData_8Bit>:

static void LCD_1IN8_WriteData_8Bit(uint8_t Data)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b082      	sub	sp, #8
 800f078:	af00      	add	r7, sp, #0
 800f07a:	4603      	mov	r3, r0
 800f07c:	71fb      	strb	r3, [r7, #7]
    LCD_1IN8_DC_1;
 800f07e:	2201      	movs	r2, #1
 800f080:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f084:	480a      	ldr	r0, [pc, #40]	; (800f0b0 <LCD_1IN8_WriteData_8Bit+0x3c>)
 800f086:	f7f6 f991 	bl	80053ac <HAL_GPIO_WritePin>
    LCD_1IN8_CS_0;
 800f08a:	2200      	movs	r2, #0
 800f08c:	2140      	movs	r1, #64	; 0x40
 800f08e:	4808      	ldr	r0, [pc, #32]	; (800f0b0 <LCD_1IN8_WriteData_8Bit+0x3c>)
 800f090:	f7f6 f98c 	bl	80053ac <HAL_GPIO_WritePin>
    DEV_SPI_WRITE(Data);
 800f094:	79fb      	ldrb	r3, [r7, #7]
 800f096:	4618      	mov	r0, r3
 800f098:	f7ff f8e4 	bl	800e264 <DEV_SPI_WRite>
    LCD_1IN8_CS_1;
 800f09c:	2201      	movs	r2, #1
 800f09e:	2140      	movs	r1, #64	; 0x40
 800f0a0:	4803      	ldr	r0, [pc, #12]	; (800f0b0 <LCD_1IN8_WriteData_8Bit+0x3c>)
 800f0a2:	f7f6 f983 	bl	80053ac <HAL_GPIO_WritePin>
}
 800f0a6:	bf00      	nop
 800f0a8:	3708      	adds	r7, #8
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	bd80      	pop	{r7, pc}
 800f0ae:	bf00      	nop
 800f0b0:	58021800 	.word	0x58021800

0800f0b4 <LCD_1IN8_WriteData_NLen16Bit>:
    DEV_SPI_WRITE(Data & 0XFF);
    //LCD_1IN8_CS_1;
}*/

void LCD_1IN8_WriteData_NLen16Bit(uint16_t Data,uint32_t DataLen)
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b084      	sub	sp, #16
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	6039      	str	r1, [r7, #0]
 800f0be:	80fb      	strh	r3, [r7, #6]
    uint32_t i;
    LCD_1IN8_DC_1;
 800f0c0:	2201      	movs	r2, #1
 800f0c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f0c6:	480f      	ldr	r0, [pc, #60]	; (800f104 <LCD_1IN8_WriteData_NLen16Bit+0x50>)
 800f0c8:	f7f6 f970 	bl	80053ac <HAL_GPIO_WritePin>
    //LCD_1IN8_CS_0;
    for(i = 0; i < DataLen; i++) {
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	60fb      	str	r3, [r7, #12]
 800f0d0:	e00e      	b.n	800f0f0 <LCD_1IN8_WriteData_NLen16Bit+0x3c>
        DEV_SPI_WRITE( (uint8_t)(Data >> 8) );
 800f0d2:	88fb      	ldrh	r3, [r7, #6]
 800f0d4:	0a1b      	lsrs	r3, r3, #8
 800f0d6:	b29b      	uxth	r3, r3
 800f0d8:	b2db      	uxtb	r3, r3
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f7ff f8c2 	bl	800e264 <DEV_SPI_WRite>
        DEV_SPI_WRITE( (uint8_t)(Data & 0XFF) );
 800f0e0:	88fb      	ldrh	r3, [r7, #6]
 800f0e2:	b2db      	uxtb	r3, r3
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	f7ff f8bd 	bl	800e264 <DEV_SPI_WRite>
    for(i = 0; i < DataLen; i++) {
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	3301      	adds	r3, #1
 800f0ee:	60fb      	str	r3, [r7, #12]
 800f0f0:	68fa      	ldr	r2, [r7, #12]
 800f0f2:	683b      	ldr	r3, [r7, #0]
 800f0f4:	429a      	cmp	r2, r3
 800f0f6:	d3ec      	bcc.n	800f0d2 <LCD_1IN8_WriteData_NLen16Bit+0x1e>
    }
    //LCD_1IN8_CS_1;
}
 800f0f8:	bf00      	nop
 800f0fa:	bf00      	nop
 800f0fc:	3710      	adds	r7, #16
 800f0fe:	46bd      	mov	sp, r7
 800f100:	bd80      	pop	{r7, pc}
 800f102:	bf00      	nop
 800f104:	58021800 	.word	0x58021800

0800f108 <LCD_1IN8_InitReg>:
/*******************************************************************************
function:
		Common register initialization
*******************************************************************************/
static void LCD_1IN8_InitReg(void)
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	af00      	add	r7, sp, #0
    //ST7735R Frame Rate
    LCD_1IN8_WriteReg(0xB1);
 800f10c:	20b1      	movs	r0, #177	; 0xb1
 800f10e:	f7ff ff97 	bl	800f040 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 800f112:	2001      	movs	r0, #1
 800f114:	f7ff ffae 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 800f118:	202c      	movs	r0, #44	; 0x2c
 800f11a:	f7ff ffab 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 800f11e:	202d      	movs	r0, #45	; 0x2d
 800f120:	f7ff ffa8 	bl	800f074 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB2);
 800f124:	20b2      	movs	r0, #178	; 0xb2
 800f126:	f7ff ff8b 	bl	800f040 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 800f12a:	2001      	movs	r0, #1
 800f12c:	f7ff ffa2 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 800f130:	202c      	movs	r0, #44	; 0x2c
 800f132:	f7ff ff9f 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 800f136:	202d      	movs	r0, #45	; 0x2d
 800f138:	f7ff ff9c 	bl	800f074 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB3);
 800f13c:	20b3      	movs	r0, #179	; 0xb3
 800f13e:	f7ff ff7f 	bl	800f040 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 800f142:	2001      	movs	r0, #1
 800f144:	f7ff ff96 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 800f148:	202c      	movs	r0, #44	; 0x2c
 800f14a:	f7ff ff93 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 800f14e:	202d      	movs	r0, #45	; 0x2d
 800f150:	f7ff ff90 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x01);
 800f154:	2001      	movs	r0, #1
 800f156:	f7ff ff8d 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2C);
 800f15a:	202c      	movs	r0, #44	; 0x2c
 800f15c:	f7ff ff8a 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2D);
 800f160:	202d      	movs	r0, #45	; 0x2d
 800f162:	f7ff ff87 	bl	800f074 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xB4); //Column inversion
 800f166:	20b4      	movs	r0, #180	; 0xb4
 800f168:	f7ff ff6a 	bl	800f040 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x07);
 800f16c:	2007      	movs	r0, #7
 800f16e:	f7ff ff81 	bl	800f074 <LCD_1IN8_WriteData_8Bit>

    //ST7735R Power Sequence
    LCD_1IN8_WriteReg(0xC0);
 800f172:	20c0      	movs	r0, #192	; 0xc0
 800f174:	f7ff ff64 	bl	800f040 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0xA2);
 800f178:	20a2      	movs	r0, #162	; 0xa2
 800f17a:	f7ff ff7b 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x02);
 800f17e:	2002      	movs	r0, #2
 800f180:	f7ff ff78 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x84);
 800f184:	2084      	movs	r0, #132	; 0x84
 800f186:	f7ff ff75 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteReg(0xC1);
 800f18a:	20c1      	movs	r0, #193	; 0xc1
 800f18c:	f7ff ff58 	bl	800f040 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0xC5);
 800f190:	20c5      	movs	r0, #197	; 0xc5
 800f192:	f7ff ff6f 	bl	800f074 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC2);
 800f196:	20c2      	movs	r0, #194	; 0xc2
 800f198:	f7ff ff52 	bl	800f040 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0A);
 800f19c:	200a      	movs	r0, #10
 800f19e:	f7ff ff69 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 800f1a2:	2000      	movs	r0, #0
 800f1a4:	f7ff ff66 	bl	800f074 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC3);
 800f1a8:	20c3      	movs	r0, #195	; 0xc3
 800f1aa:	f7ff ff49 	bl	800f040 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x8A);
 800f1ae:	208a      	movs	r0, #138	; 0x8a
 800f1b0:	f7ff ff60 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2A);
 800f1b4:	202a      	movs	r0, #42	; 0x2a
 800f1b6:	f7ff ff5d 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteReg(0xC4);
 800f1ba:	20c4      	movs	r0, #196	; 0xc4
 800f1bc:	f7ff ff40 	bl	800f040 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x8A);
 800f1c0:	208a      	movs	r0, #138	; 0x8a
 800f1c2:	f7ff ff57 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0xEE);
 800f1c6:	20ee      	movs	r0, #238	; 0xee
 800f1c8:	f7ff ff54 	bl	800f074 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xC5); //VCOM
 800f1cc:	20c5      	movs	r0, #197	; 0xc5
 800f1ce:	f7ff ff37 	bl	800f040 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0E);
 800f1d2:	200e      	movs	r0, #14
 800f1d4:	f7ff ff4e 	bl	800f074 <LCD_1IN8_WriteData_8Bit>

    //ST7735R Gamma Sequence
    LCD_1IN8_WriteReg(0xe0);
 800f1d8:	20e0      	movs	r0, #224	; 0xe0
 800f1da:	f7ff ff31 	bl	800f040 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0f);
 800f1de:	200f      	movs	r0, #15
 800f1e0:	f7ff ff48 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1a);
 800f1e4:	201a      	movs	r0, #26
 800f1e6:	f7ff ff45 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x0f);
 800f1ea:	200f      	movs	r0, #15
 800f1ec:	f7ff ff42 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x18);
 800f1f0:	2018      	movs	r0, #24
 800f1f2:	f7ff ff3f 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2f);
 800f1f6:	202f      	movs	r0, #47	; 0x2f
 800f1f8:	f7ff ff3c 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x28);
 800f1fc:	2028      	movs	r0, #40	; 0x28
 800f1fe:	f7ff ff39 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x20);
 800f202:	2020      	movs	r0, #32
 800f204:	f7ff ff36 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x22);
 800f208:	2022      	movs	r0, #34	; 0x22
 800f20a:	f7ff ff33 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1f);
 800f20e:	201f      	movs	r0, #31
 800f210:	f7ff ff30 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1b);
 800f214:	201b      	movs	r0, #27
 800f216:	f7ff ff2d 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x23);
 800f21a:	2023      	movs	r0, #35	; 0x23
 800f21c:	f7ff ff2a 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x37);
 800f220:	2037      	movs	r0, #55	; 0x37
 800f222:	f7ff ff27 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 800f226:	2000      	movs	r0, #0
 800f228:	f7ff ff24 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x07);
 800f22c:	2007      	movs	r0, #7
 800f22e:	f7ff ff21 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x02);
 800f232:	2002      	movs	r0, #2
 800f234:	f7ff ff1e 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x10);
 800f238:	2010      	movs	r0, #16
 800f23a:	f7ff ff1b 	bl	800f074 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xe1);
 800f23e:	20e1      	movs	r0, #225	; 0xe1
 800f240:	f7ff fefe 	bl	800f040 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x0f);
 800f244:	200f      	movs	r0, #15
 800f246:	f7ff ff15 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x1b);
 800f24a:	201b      	movs	r0, #27
 800f24c:	f7ff ff12 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x0f);
 800f250:	200f      	movs	r0, #15
 800f252:	f7ff ff0f 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x17);
 800f256:	2017      	movs	r0, #23
 800f258:	f7ff ff0c 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x33);
 800f25c:	2033      	movs	r0, #51	; 0x33
 800f25e:	f7ff ff09 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2c);
 800f262:	202c      	movs	r0, #44	; 0x2c
 800f264:	f7ff ff06 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x29);
 800f268:	2029      	movs	r0, #41	; 0x29
 800f26a:	f7ff ff03 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x2e);
 800f26e:	202e      	movs	r0, #46	; 0x2e
 800f270:	f7ff ff00 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x30);
 800f274:	2030      	movs	r0, #48	; 0x30
 800f276:	f7ff fefd 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x30);
 800f27a:	2030      	movs	r0, #48	; 0x30
 800f27c:	f7ff fefa 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x39);
 800f280:	2039      	movs	r0, #57	; 0x39
 800f282:	f7ff fef7 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x3f);
 800f286:	203f      	movs	r0, #63	; 0x3f
 800f288:	f7ff fef4 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x00);
 800f28c:	2000      	movs	r0, #0
 800f28e:	f7ff fef1 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x07);
 800f292:	2007      	movs	r0, #7
 800f294:	f7ff feee 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x03);
 800f298:	2003      	movs	r0, #3
 800f29a:	f7ff feeb 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit(0x10);
 800f29e:	2010      	movs	r0, #16
 800f2a0:	f7ff fee8 	bl	800f074 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xF0); //Enable test command
 800f2a4:	20f0      	movs	r0, #240	; 0xf0
 800f2a6:	f7ff fecb 	bl	800f040 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x01);
 800f2aa:	2001      	movs	r0, #1
 800f2ac:	f7ff fee2 	bl	800f074 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0xF6); //Disable ram power save mode
 800f2b0:	20f6      	movs	r0, #246	; 0xf6
 800f2b2:	f7ff fec5 	bl	800f040 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x00);
 800f2b6:	2000      	movs	r0, #0
 800f2b8:	f7ff fedc 	bl	800f074 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0x3A); //65k mode
 800f2bc:	203a      	movs	r0, #58	; 0x3a
 800f2be:	f7ff febf 	bl	800f040 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit(0x05);
 800f2c2:	2005      	movs	r0, #5
 800f2c4:	f7ff fed6 	bl	800f074 <LCD_1IN8_WriteData_8Bit>

}
 800f2c8:	bf00      	nop
 800f2ca:	bd80      	pop	{r7, pc}

0800f2cc <LCD_1IN8_SetGramScanWay>:
parameter:
		Scan_dir   :   Scan direction
		Colorchose :   RGB or GBR color format
********************************************************************************/
void LCD_1IN8_SetGramScanWay(LCD_1IN8_SCAN_DIR Scan_dir)
{
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b084      	sub	sp, #16
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	4603      	mov	r3, r0
 800f2d4:	71fb      	strb	r3, [r7, #7]
    //Get the screen scan direction
    sLCD_1IN8_DIS.LCD_1IN8_Scan_Dir = Scan_dir;
 800f2d6:	4a34      	ldr	r2, [pc, #208]	; (800f3a8 <LCD_1IN8_SetGramScanWay+0xdc>)
 800f2d8:	79fb      	ldrb	r3, [r7, #7]
 800f2da:	7113      	strb	r3, [r2, #4]

	//Get GRAM and LCD width and height
	if(Scan_dir == L2R_U2D || Scan_dir == L2R_D2U || Scan_dir == R2L_U2D || Scan_dir == R2L_D2U)
 800f2dc:	79fb      	ldrb	r3, [r7, #7]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d008      	beq.n	800f2f4 <LCD_1IN8_SetGramScanWay+0x28>
 800f2e2:	79fb      	ldrb	r3, [r7, #7]
 800f2e4:	2b01      	cmp	r3, #1
 800f2e6:	d005      	beq.n	800f2f4 <LCD_1IN8_SetGramScanWay+0x28>
 800f2e8:	79fb      	ldrb	r3, [r7, #7]
 800f2ea:	2b02      	cmp	r3, #2
 800f2ec:	d002      	beq.n	800f2f4 <LCD_1IN8_SetGramScanWay+0x28>
 800f2ee:	79fb      	ldrb	r3, [r7, #7]
 800f2f0:	2b03      	cmp	r3, #3
 800f2f2:	d10c      	bne.n	800f30e <LCD_1IN8_SetGramScanWay+0x42>
	{
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Column	= LCD_1IN8_HEIGHT ;
 800f2f4:	4b2c      	ldr	r3, [pc, #176]	; (800f3a8 <LCD_1IN8_SetGramScanWay+0xdc>)
 800f2f6:	2280      	movs	r2, #128	; 0x80
 800f2f8:	801a      	strh	r2, [r3, #0]
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Page = LCD_1IN8_WIDTH ;
 800f2fa:	4b2b      	ldr	r3, [pc, #172]	; (800f3a8 <LCD_1IN8_SetGramScanWay+0xdc>)
 800f2fc:	22a0      	movs	r2, #160	; 0xa0
 800f2fe:	805a      	strh	r2, [r3, #2]
		sLCD_1IN8_DIS.LCD_1IN8_X_Adjust = LCD_1IN8_X;
 800f300:	4b29      	ldr	r3, [pc, #164]	; (800f3a8 <LCD_1IN8_SetGramScanWay+0xdc>)
 800f302:	2202      	movs	r2, #2
 800f304:	80da      	strh	r2, [r3, #6]
		sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust = LCD_1IN8_Y;
 800f306:	4b28      	ldr	r3, [pc, #160]	; (800f3a8 <LCD_1IN8_SetGramScanWay+0xdc>)
 800f308:	2201      	movs	r2, #1
 800f30a:	811a      	strh	r2, [r3, #8]
 800f30c:	e00b      	b.n	800f326 <LCD_1IN8_SetGramScanWay+0x5a>
	}
	else
	{
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Column	= LCD_1IN8_WIDTH ;
 800f30e:	4b26      	ldr	r3, [pc, #152]	; (800f3a8 <LCD_1IN8_SetGramScanWay+0xdc>)
 800f310:	22a0      	movs	r2, #160	; 0xa0
 800f312:	801a      	strh	r2, [r3, #0]
		sLCD_1IN8_DIS.LCD_1IN8_Dis_Page = LCD_1IN8_HEIGHT ;	
 800f314:	4b24      	ldr	r3, [pc, #144]	; (800f3a8 <LCD_1IN8_SetGramScanWay+0xdc>)
 800f316:	2280      	movs	r2, #128	; 0x80
 800f318:	805a      	strh	r2, [r3, #2]
		sLCD_1IN8_DIS.LCD_1IN8_X_Adjust = LCD_1IN8_Y;
 800f31a:	4b23      	ldr	r3, [pc, #140]	; (800f3a8 <LCD_1IN8_SetGramScanWay+0xdc>)
 800f31c:	2201      	movs	r2, #1
 800f31e:	80da      	strh	r2, [r3, #6]
		sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust = LCD_1IN8_X;
 800f320:	4b21      	ldr	r3, [pc, #132]	; (800f3a8 <LCD_1IN8_SetGramScanWay+0xdc>)
 800f322:	2202      	movs	r2, #2
 800f324:	811a      	strh	r2, [r3, #8]
	}

    // Gets the scan direction of GRAM
    uint16_t MemoryAccessReg_Data=0;  //0x36
 800f326:	2300      	movs	r3, #0
 800f328:	81fb      	strh	r3, [r7, #14]
    switch (Scan_dir) {
 800f32a:	79fb      	ldrb	r3, [r7, #7]
 800f32c:	2b07      	cmp	r3, #7
 800f32e:	d82b      	bhi.n	800f388 <LCD_1IN8_SetGramScanWay+0xbc>
 800f330:	a201      	add	r2, pc, #4	; (adr r2, 800f338 <LCD_1IN8_SetGramScanWay+0x6c>)
 800f332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f336:	bf00      	nop
 800f338:	0800f359 	.word	0x0800f359
 800f33c:	0800f35f 	.word	0x0800f35f
 800f340:	0800f365 	.word	0x0800f365
 800f344:	0800f36b 	.word	0x0800f36b
 800f348:	0800f371 	.word	0x0800f371
 800f34c:	0800f377 	.word	0x0800f377
 800f350:	0800f37d 	.word	0x0800f37d
 800f354:	0800f383 	.word	0x0800f383
    case L2R_U2D:
        MemoryAccessReg_Data = 0X00 | 0x00;//x Scan direction | y Scan direction
 800f358:	2300      	movs	r3, #0
 800f35a:	81fb      	strh	r3, [r7, #14]
        break;
 800f35c:	e014      	b.n	800f388 <LCD_1IN8_SetGramScanWay+0xbc>
    case L2R_D2U:
        MemoryAccessReg_Data = 0x00 | 0x80;//0xC8 | 0X10
 800f35e:	2380      	movs	r3, #128	; 0x80
 800f360:	81fb      	strh	r3, [r7, #14]
        break;
 800f362:	e011      	b.n	800f388 <LCD_1IN8_SetGramScanWay+0xbc>
    case R2L_U2D:	//0X04
        MemoryAccessReg_Data = 0x40 | 0x00;
 800f364:	2340      	movs	r3, #64	; 0x40
 800f366:	81fb      	strh	r3, [r7, #14]
        break;
 800f368:	e00e      	b.n	800f388 <LCD_1IN8_SetGramScanWay+0xbc>
    case R2L_D2U:	//0X0C
        MemoryAccessReg_Data = 0x40 | 0x80;
 800f36a:	23c0      	movs	r3, #192	; 0xc0
 800f36c:	81fb      	strh	r3, [r7, #14]
        break;
 800f36e:	e00b      	b.n	800f388 <LCD_1IN8_SetGramScanWay+0xbc>
    case U2D_L2R:	//0X02
        MemoryAccessReg_Data = 0X00 | 0X00 | 0x20;
 800f370:	2320      	movs	r3, #32
 800f372:	81fb      	strh	r3, [r7, #14]
        break;
 800f374:	e008      	b.n	800f388 <LCD_1IN8_SetGramScanWay+0xbc>
    case U2D_R2L:	//0X06
        MemoryAccessReg_Data = 0x00 | 0X40 | 0x20;
 800f376:	2360      	movs	r3, #96	; 0x60
 800f378:	81fb      	strh	r3, [r7, #14]
        break;
 800f37a:	e005      	b.n	800f388 <LCD_1IN8_SetGramScanWay+0xbc>
    case D2U_L2R:	//0X0A
        MemoryAccessReg_Data = 0x80 | 0x00 | 0x20;
 800f37c:	23a0      	movs	r3, #160	; 0xa0
 800f37e:	81fb      	strh	r3, [r7, #14]
        break;
 800f380:	e002      	b.n	800f388 <LCD_1IN8_SetGramScanWay+0xbc>
    case D2U_R2L:	//0X0E
        MemoryAccessReg_Data = 0x40 | 0x80 | 0x20;
 800f382:	23e0      	movs	r3, #224	; 0xe0
 800f384:	81fb      	strh	r3, [r7, #14]
        break;
 800f386:	bf00      	nop
    }

    // Set the read / write scan direction of the frame memory
    LCD_1IN8_WriteReg(0x36); //MX, MY, RGB mode
 800f388:	2036      	movs	r0, #54	; 0x36
 800f38a:	f7ff fe59 	bl	800f040 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit( MemoryAccessReg_Data & 0xf7);	//RGB color filter panel
 800f38e:	89fb      	ldrh	r3, [r7, #14]
 800f390:	b2db      	uxtb	r3, r3
 800f392:	f023 0308 	bic.w	r3, r3, #8
 800f396:	b2db      	uxtb	r3, r3
 800f398:	4618      	mov	r0, r3
 800f39a:	f7ff fe6b 	bl	800f074 <LCD_1IN8_WriteData_8Bit>

}
 800f39e:	bf00      	nop
 800f3a0:	3710      	adds	r7, #16
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	bd80      	pop	{r7, pc}
 800f3a6:	bf00      	nop
 800f3a8:	2400b4cc 	.word	0x2400b4cc

0800f3ac <LCD_1IN8_Init>:
/********************************************************************************
function:
			initialization
********************************************************************************/
void LCD_1IN8_Init( LCD_1IN8_SCAN_DIR LCD_1IN8_ScanDir )
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b082      	sub	sp, #8
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	71fb      	strb	r3, [r7, #7]

    //Hardware reset
    LCD_1IN8_Reset();
 800f3b6:	f7ff fe21 	bl	800effc <LCD_1IN8_Reset>

    //Set the initialization register
    LCD_1IN8_InitReg();
 800f3ba:	f7ff fea5 	bl	800f108 <LCD_1IN8_InitReg>

    //Set the display scan and color transfer modes
    LCD_1IN8_SetGramScanWay( LCD_1IN8_ScanDir );
 800f3be:	79fb      	ldrb	r3, [r7, #7]
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	f7ff ff83 	bl	800f2cc <LCD_1IN8_SetGramScanWay>
    DEV_Delay_ms(200);
 800f3c6:	20c8      	movs	r0, #200	; 0xc8
 800f3c8:	f7f3 f93c 	bl	8002644 <HAL_Delay>

    //sleep out
    LCD_1IN8_WriteReg(0x11);
 800f3cc:	2011      	movs	r0, #17
 800f3ce:	f7ff fe37 	bl	800f040 <LCD_1IN8_WriteReg>
    DEV_Delay_ms(120);
 800f3d2:	2078      	movs	r0, #120	; 0x78
 800f3d4:	f7f3 f936 	bl	8002644 <HAL_Delay>

    //Turn on the LCD display
    LCD_1IN8_WriteReg(0x29);
 800f3d8:	2029      	movs	r0, #41	; 0x29
 800f3da:	f7ff fe31 	bl	800f040 <LCD_1IN8_WriteReg>
}
 800f3de:	bf00      	nop
 800f3e0:	3708      	adds	r7, #8
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bd80      	pop	{r7, pc}
	...

0800f3e8 <LCD_1IN8_SetWindows>:
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_1IN8_SetWindows( POINT Xstart, POINT Ystart, POINT Xend, POINT Yend )
{
 800f3e8:	b590      	push	{r4, r7, lr}
 800f3ea:	b083      	sub	sp, #12
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	4604      	mov	r4, r0
 800f3f0:	4608      	mov	r0, r1
 800f3f2:	4611      	mov	r1, r2
 800f3f4:	461a      	mov	r2, r3
 800f3f6:	4623      	mov	r3, r4
 800f3f8:	80fb      	strh	r3, [r7, #6]
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	80bb      	strh	r3, [r7, #4]
 800f3fe:	460b      	mov	r3, r1
 800f400:	807b      	strh	r3, [r7, #2]
 800f402:	4613      	mov	r3, r2
 800f404:	803b      	strh	r3, [r7, #0]

    //set the X coordinates
    LCD_1IN8_WriteReg ( 0x2A );
 800f406:	202a      	movs	r0, #42	; 0x2a
 800f408:	f7ff fe1a 	bl	800f040 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit ( 0x00 );						//Set the horizontal starting point to the high octet
 800f40c:	2000      	movs	r0, #0
 800f40e:	f7ff fe31 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (Xstart & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_X_Adjust);			//Set the horizontal starting point to the low octet
 800f412:	88fb      	ldrh	r3, [r7, #6]
 800f414:	b2da      	uxtb	r2, r3
 800f416:	4b1e      	ldr	r3, [pc, #120]	; (800f490 <LCD_1IN8_SetWindows+0xa8>)
 800f418:	88db      	ldrh	r3, [r3, #6]
 800f41a:	b2db      	uxtb	r3, r3
 800f41c:	4413      	add	r3, r2
 800f41e:	b2db      	uxtb	r3, r3
 800f420:	4618      	mov	r0, r3
 800f422:	f7ff fe27 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( 0x00 );				//Set the horizontal end to the high octet
 800f426:	2000      	movs	r0, #0
 800f428:	f7ff fe24 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (( Xend - 1 ) & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_X_Adjust);	//Set the horizontal end to the low octet
 800f42c:	887b      	ldrh	r3, [r7, #2]
 800f42e:	b2da      	uxtb	r2, r3
 800f430:	4b17      	ldr	r3, [pc, #92]	; (800f490 <LCD_1IN8_SetWindows+0xa8>)
 800f432:	88db      	ldrh	r3, [r3, #6]
 800f434:	b2db      	uxtb	r3, r3
 800f436:	4413      	add	r3, r2
 800f438:	b2db      	uxtb	r3, r3
 800f43a:	3b01      	subs	r3, #1
 800f43c:	b2db      	uxtb	r3, r3
 800f43e:	4618      	mov	r0, r3
 800f440:	f7ff fe18 	bl	800f074 <LCD_1IN8_WriteData_8Bit>

    //set the Y coordinates
    LCD_1IN8_WriteReg ( 0x2B );
 800f444:	202b      	movs	r0, #43	; 0x2b
 800f446:	f7ff fdfb 	bl	800f040 <LCD_1IN8_WriteReg>
    LCD_1IN8_WriteData_8Bit ( 0x00 );
 800f44a:	2000      	movs	r0, #0
 800f44c:	f7ff fe12 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( (Ystart & 0xff) + sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust);
 800f450:	88bb      	ldrh	r3, [r7, #4]
 800f452:	b2da      	uxtb	r2, r3
 800f454:	4b0e      	ldr	r3, [pc, #56]	; (800f490 <LCD_1IN8_SetWindows+0xa8>)
 800f456:	891b      	ldrh	r3, [r3, #8]
 800f458:	b2db      	uxtb	r3, r3
 800f45a:	4413      	add	r3, r2
 800f45c:	b2db      	uxtb	r3, r3
 800f45e:	4618      	mov	r0, r3
 800f460:	f7ff fe08 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( 0x00 );
 800f464:	2000      	movs	r0, #0
 800f466:	f7ff fe05 	bl	800f074 <LCD_1IN8_WriteData_8Bit>
    LCD_1IN8_WriteData_8Bit ( ( (Yend - 1) & 0xff )+ sLCD_1IN8_DIS.LCD_1IN8_Y_Adjust);
 800f46a:	883b      	ldrh	r3, [r7, #0]
 800f46c:	b2da      	uxtb	r2, r3
 800f46e:	4b08      	ldr	r3, [pc, #32]	; (800f490 <LCD_1IN8_SetWindows+0xa8>)
 800f470:	891b      	ldrh	r3, [r3, #8]
 800f472:	b2db      	uxtb	r3, r3
 800f474:	4413      	add	r3, r2
 800f476:	b2db      	uxtb	r3, r3
 800f478:	3b01      	subs	r3, #1
 800f47a:	b2db      	uxtb	r3, r3
 800f47c:	4618      	mov	r0, r3
 800f47e:	f7ff fdf9 	bl	800f074 <LCD_1IN8_WriteData_8Bit>

    LCD_1IN8_WriteReg(0x2C);
 800f482:	202c      	movs	r0, #44	; 0x2c
 800f484:	f7ff fddc 	bl	800f040 <LCD_1IN8_WriteReg>

}
 800f488:	bf00      	nop
 800f48a:	370c      	adds	r7, #12
 800f48c:	46bd      	mov	sp, r7
 800f48e:	bd90      	pop	{r4, r7, pc}
 800f490:	2400b4cc 	.word	0x2400b4cc

0800f494 <LCD_1IN8_SetCursor>:
parameter:
		xStart :   X direction Start coordinates
		xEnd   :   X direction end coordinates
********************************************************************************/
void LCD_1IN8_SetCursor ( POINT Xpoint, POINT Ypoint )
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b082      	sub	sp, #8
 800f498:	af00      	add	r7, sp, #0
 800f49a:	4603      	mov	r3, r0
 800f49c:	460a      	mov	r2, r1
 800f49e:	80fb      	strh	r3, [r7, #6]
 800f4a0:	4613      	mov	r3, r2
 800f4a2:	80bb      	strh	r3, [r7, #4]
    LCD_1IN8_SetWindows ( Xpoint, Ypoint, Xpoint , Ypoint );
 800f4a4:	88bb      	ldrh	r3, [r7, #4]
 800f4a6:	88fa      	ldrh	r2, [r7, #6]
 800f4a8:	88b9      	ldrh	r1, [r7, #4]
 800f4aa:	88f8      	ldrh	r0, [r7, #6]
 800f4ac:	f7ff ff9c 	bl	800f3e8 <LCD_1IN8_SetWindows>
}
 800f4b0:	bf00      	nop
 800f4b2:	3708      	adds	r7, #8
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	bd80      	pop	{r7, pc}

0800f4b8 <LCD_1IN8_SetColor>:
parameter:
		Color  :   Set show color
********************************************************************************/
//static void LCD_1IN8_SetColor( LENGTH Dis_Width, LENGTH Dis_Height, COLOR Color ){
void LCD_1IN8_SetColor( COLOR Color ,POINT Xpoint, POINT Ypoint)
{
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b082      	sub	sp, #8
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	4603      	mov	r3, r0
 800f4c0:	80fb      	strh	r3, [r7, #6]
 800f4c2:	460b      	mov	r3, r1
 800f4c4:	80bb      	strh	r3, [r7, #4]
 800f4c6:	4613      	mov	r3, r2
 800f4c8:	807b      	strh	r3, [r7, #2]
    LCD_1IN8_WriteData_NLen16Bit(Color ,(uint32_t)Xpoint * (uint32_t)Ypoint);
 800f4ca:	88bb      	ldrh	r3, [r7, #4]
 800f4cc:	887a      	ldrh	r2, [r7, #2]
 800f4ce:	fb02 f203 	mul.w	r2, r2, r3
 800f4d2:	88fb      	ldrh	r3, [r7, #6]
 800f4d4:	4611      	mov	r1, r2
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	f7ff fdec 	bl	800f0b4 <LCD_1IN8_WriteData_NLen16Bit>
}
 800f4dc:	bf00      	nop
 800f4de:	3708      	adds	r7, #8
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	bd80      	pop	{r7, pc}

0800f4e4 <LCD_1IN8_DrawPaint>:
		Xpoint :   The x coordinate of the point
		Ypoint :   The y coordinate of the point
		Color  :   Set the color
********************************************************************************/
void LCD_1IN8_DrawPaint ( POINT Xpoint, POINT Ypoint, COLOR Color )
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b082      	sub	sp, #8
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	4603      	mov	r3, r0
 800f4ec:	80fb      	strh	r3, [r7, #6]
 800f4ee:	460b      	mov	r3, r1
 800f4f0:	80bb      	strh	r3, [r7, #4]
 800f4f2:	4613      	mov	r3, r2
 800f4f4:	807b      	strh	r3, [r7, #2]
    if ( ( Xpoint <= sLCD_1IN8_DIS.LCD_1IN8_Dis_Column ) && ( Ypoint <= sLCD_1IN8_DIS.LCD_1IN8_Dis_Page ) )
 800f4f6:	4b1b      	ldr	r3, [pc, #108]	; (800f564 <LCD_1IN8_DrawPaint+0x80>)
 800f4f8:	881b      	ldrh	r3, [r3, #0]
 800f4fa:	88fa      	ldrh	r2, [r7, #6]
 800f4fc:	429a      	cmp	r2, r3
 800f4fe:	d82d      	bhi.n	800f55c <LCD_1IN8_DrawPaint+0x78>
 800f500:	4b18      	ldr	r3, [pc, #96]	; (800f564 <LCD_1IN8_DrawPaint+0x80>)
 800f502:	885b      	ldrh	r3, [r3, #2]
 800f504:	88ba      	ldrh	r2, [r7, #4]
 800f506:	429a      	cmp	r2, r3
 800f508:	d828      	bhi.n	800f55c <LCD_1IN8_DrawPaint+0x78>
    {
    	if (!renderCompleteFrame)
 800f50a:	4b17      	ldr	r3, [pc, #92]	; (800f568 <LCD_1IN8_DrawPaint+0x84>)
 800f50c:	781b      	ldrb	r3, [r3, #0]
 800f50e:	f083 0301 	eor.w	r3, r3, #1
 800f512:	b2db      	uxtb	r3, r3
 800f514:	2b00      	cmp	r3, #0
 800f516:	d00c      	beq.n	800f532 <LCD_1IN8_DrawPaint+0x4e>
    	{
    		LCD_1IN8_SetCursor (Xpoint, Ypoint);
 800f518:	88ba      	ldrh	r2, [r7, #4]
 800f51a:	88fb      	ldrh	r3, [r7, #6]
 800f51c:	4611      	mov	r1, r2
 800f51e:	4618      	mov	r0, r3
 800f520:	f7ff ffb8 	bl	800f494 <LCD_1IN8_SetCursor>
    		LCD_1IN8_SetColor ( Color , 1 , 1);
 800f524:	887b      	ldrh	r3, [r7, #2]
 800f526:	2201      	movs	r2, #1
 800f528:	2101      	movs	r1, #1
 800f52a:	4618      	mov	r0, r3
 800f52c:	f7ff ffc4 	bl	800f4b8 <LCD_1IN8_SetColor>
    	{
    		nextFrameToDraw[(SCREEN_WIDTH * Ypoint + Xpoint) * 2] = (uint8_t)((Color & 0xFF00) >> 8 );
    		nextFrameToDraw[(SCREEN_WIDTH * Ypoint + Xpoint) * 2 + 1] = (uint8_t)((Color & 0x00FF));
    	}
    }
}
 800f530:	e014      	b.n	800f55c <LCD_1IN8_DrawPaint+0x78>
    		nextFrameToDraw[(SCREEN_WIDTH * Ypoint + Xpoint) * 2] = (uint8_t)((Color & 0xFF00) >> 8 );
 800f532:	887b      	ldrh	r3, [r7, #2]
 800f534:	0a1b      	lsrs	r3, r3, #8
 800f536:	b299      	uxth	r1, r3
 800f538:	88bb      	ldrh	r3, [r7, #4]
 800f53a:	01da      	lsls	r2, r3, #7
 800f53c:	88fb      	ldrh	r3, [r7, #6]
 800f53e:	4413      	add	r3, r2
 800f540:	005b      	lsls	r3, r3, #1
 800f542:	b2c9      	uxtb	r1, r1
 800f544:	4a09      	ldr	r2, [pc, #36]	; (800f56c <LCD_1IN8_DrawPaint+0x88>)
 800f546:	54d1      	strb	r1, [r2, r3]
    		nextFrameToDraw[(SCREEN_WIDTH * Ypoint + Xpoint) * 2 + 1] = (uint8_t)((Color & 0x00FF));
 800f548:	88bb      	ldrh	r3, [r7, #4]
 800f54a:	01da      	lsls	r2, r3, #7
 800f54c:	88fb      	ldrh	r3, [r7, #6]
 800f54e:	4413      	add	r3, r2
 800f550:	005b      	lsls	r3, r3, #1
 800f552:	3301      	adds	r3, #1
 800f554:	887a      	ldrh	r2, [r7, #2]
 800f556:	b2d1      	uxtb	r1, r2
 800f558:	4a04      	ldr	r2, [pc, #16]	; (800f56c <LCD_1IN8_DrawPaint+0x88>)
 800f55a:	54d1      	strb	r1, [r2, r3]
}
 800f55c:	bf00      	nop
 800f55e:	3708      	adds	r7, #8
 800f560:	46bd      	mov	sp, r7
 800f562:	bd80      	pop	{r7, pc}
 800f564:	2400b4cc 	.word	0x2400b4cc
 800f568:	2400aa73 	.word	0x2400aa73
 800f56c:	24000090 	.word	0x24000090

0800f570 <LCD_1IN8_Clear>:
/********************************************************************************
function:
			Clear screen
********************************************************************************/
void LCD_1IN8_Clear(COLOR  Color)
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b084      	sub	sp, #16
 800f574:	af00      	add	r7, sp, #0
 800f576:	4603      	mov	r3, r0
 800f578:	80fb      	strh	r3, [r7, #6]
    UWORD i,j;
    LCD_1IN8_SetWindows(0, 0, sLCD_1IN8_DIS.LCD_1IN8_Dis_Column, sLCD_1IN8_DIS.LCD_1IN8_Dis_Page);
 800f57a:	4b1a      	ldr	r3, [pc, #104]	; (800f5e4 <LCD_1IN8_Clear+0x74>)
 800f57c:	881a      	ldrh	r2, [r3, #0]
 800f57e:	4b19      	ldr	r3, [pc, #100]	; (800f5e4 <LCD_1IN8_Clear+0x74>)
 800f580:	885b      	ldrh	r3, [r3, #2]
 800f582:	2100      	movs	r1, #0
 800f584:	2000      	movs	r0, #0
 800f586:	f7ff ff2f 	bl	800f3e8 <LCD_1IN8_SetWindows>
    LCD_1IN8_DC_1;
 800f58a:	2201      	movs	r2, #1
 800f58c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f590:	4815      	ldr	r0, [pc, #84]	; (800f5e8 <LCD_1IN8_Clear+0x78>)
 800f592:	f7f5 ff0b 	bl	80053ac <HAL_GPIO_WritePin>
    for(i=0;i<sLCD_1IN8_DIS.LCD_1IN8_Dis_Column;i++)
 800f596:	2300      	movs	r3, #0
 800f598:	81fb      	strh	r3, [r7, #14]
 800f59a:	e019      	b.n	800f5d0 <LCD_1IN8_Clear+0x60>
	{
		for(j=0;j<sLCD_1IN8_DIS.LCD_1IN8_Dis_Page;j++)
 800f59c:	2300      	movs	r3, #0
 800f59e:	81bb      	strh	r3, [r7, #12]
 800f5a0:	e00e      	b.n	800f5c0 <LCD_1IN8_Clear+0x50>
		{
			//LCD_1IN8_WriteData_NLen16Bit(Image[i*LCD_1IN8_WIDTH+j],1);
			DEV_SPI_WRITE( (uint8_t)(Color & 0XFF) );
 800f5a2:	88fb      	ldrh	r3, [r7, #6]
 800f5a4:	b2db      	uxtb	r3, r3
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	f7fe fe5c 	bl	800e264 <DEV_SPI_WRite>
			DEV_SPI_WRITE( (uint8_t)(Color >> 8) );
 800f5ac:	88fb      	ldrh	r3, [r7, #6]
 800f5ae:	0a1b      	lsrs	r3, r3, #8
 800f5b0:	b29b      	uxth	r3, r3
 800f5b2:	b2db      	uxtb	r3, r3
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	f7fe fe55 	bl	800e264 <DEV_SPI_WRite>
		for(j=0;j<sLCD_1IN8_DIS.LCD_1IN8_Dis_Page;j++)
 800f5ba:	89bb      	ldrh	r3, [r7, #12]
 800f5bc:	3301      	adds	r3, #1
 800f5be:	81bb      	strh	r3, [r7, #12]
 800f5c0:	4b08      	ldr	r3, [pc, #32]	; (800f5e4 <LCD_1IN8_Clear+0x74>)
 800f5c2:	885b      	ldrh	r3, [r3, #2]
 800f5c4:	89ba      	ldrh	r2, [r7, #12]
 800f5c6:	429a      	cmp	r2, r3
 800f5c8:	d3eb      	bcc.n	800f5a2 <LCD_1IN8_Clear+0x32>
    for(i=0;i<sLCD_1IN8_DIS.LCD_1IN8_Dis_Column;i++)
 800f5ca:	89fb      	ldrh	r3, [r7, #14]
 800f5cc:	3301      	adds	r3, #1
 800f5ce:	81fb      	strh	r3, [r7, #14]
 800f5d0:	4b04      	ldr	r3, [pc, #16]	; (800f5e4 <LCD_1IN8_Clear+0x74>)
 800f5d2:	881b      	ldrh	r3, [r3, #0]
 800f5d4:	89fa      	ldrh	r2, [r7, #14]
 800f5d6:	429a      	cmp	r2, r3
 800f5d8:	d3e0      	bcc.n	800f59c <LCD_1IN8_Clear+0x2c>
			
		}
	}
}
 800f5da:	bf00      	nop
 800f5dc:	bf00      	nop
 800f5de:	3710      	adds	r7, #16
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	bd80      	pop	{r7, pc}
 800f5e4:	2400b4cc 	.word	0x2400b4cc
 800f5e8:	58021800 	.word	0x58021800

0800f5ec <LCD_1IN8_SetBackLight>:
	Setting backlight
parameter	:
	  value : Range 0~1000   Duty cycle is value/1000	
*******************************************************************************/
void LCD_1IN8_SetBackLight(UWORD Value)
{
 800f5ec:	b480      	push	{r7}
 800f5ee:	b083      	sub	sp, #12
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	80fb      	strh	r3, [r7, #6]
	 DEV_Set_PWM(Value);
 800f5f6:	4a04      	ldr	r2, [pc, #16]	; (800f608 <LCD_1IN8_SetBackLight+0x1c>)
 800f5f8:	88fb      	ldrh	r3, [r7, #6]
 800f5fa:	6353      	str	r3, [r2, #52]	; 0x34
}
 800f5fc:	bf00      	nop
 800f5fe:	370c      	adds	r7, #12
 800f600:	46bd      	mov	sp, r7
 800f602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f606:	4770      	bx	lr
 800f608:	40010000 	.word	0x40010000

0800f60c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800f60c:	b590      	push	{r4, r7, lr}
 800f60e:	b089      	sub	sp, #36	; 0x24
 800f610:	af04      	add	r7, sp, #16
 800f612:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800f614:	2301      	movs	r3, #1
 800f616:	2202      	movs	r2, #2
 800f618:	2102      	movs	r1, #2
 800f61a:	6878      	ldr	r0, [r7, #4]
 800f61c:	f000 fcb8 	bl	800ff90 <USBH_FindInterface>
 800f620:	4603      	mov	r3, r0
 800f622:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800f624:	7bfb      	ldrb	r3, [r7, #15]
 800f626:	2bff      	cmp	r3, #255	; 0xff
 800f628:	d002      	beq.n	800f630 <USBH_CDC_InterfaceInit+0x24>
 800f62a:	7bfb      	ldrb	r3, [r7, #15]
 800f62c:	2b01      	cmp	r3, #1
 800f62e:	d901      	bls.n	800f634 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800f630:	2302      	movs	r3, #2
 800f632:	e15a      	b.n	800f8ea <USBH_CDC_InterfaceInit+0x2de>
  }

  status = USBH_SelectInterface(phost, interface);
 800f634:	7bfb      	ldrb	r3, [r7, #15]
 800f636:	4619      	mov	r1, r3
 800f638:	6878      	ldr	r0, [r7, #4]
 800f63a:	f000 fc89 	bl	800ff50 <USBH_SelectInterface>
 800f63e:	4603      	mov	r3, r0
 800f640:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800f642:	7bbb      	ldrb	r3, [r7, #14]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d001      	beq.n	800f64c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800f648:	2302      	movs	r3, #2
 800f64a:	e14e      	b.n	800f8ea <USBH_CDC_InterfaceInit+0x2de>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800f64c:	687a      	ldr	r2, [r7, #4]
 800f64e:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800f652:	4413      	add	r3, r2
 800f654:	681c      	ldr	r4, [r3, #0]
 800f656:	2050      	movs	r0, #80	; 0x50
 800f658:	f00b f8a2 	bl	801a7a0 <malloc>
 800f65c:	4603      	mov	r3, r0
 800f65e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f660:	687a      	ldr	r2, [r7, #4]
 800f662:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800f666:	4413      	add	r3, r2
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	69db      	ldr	r3, [r3, #28]
 800f66c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800f66e:	68bb      	ldr	r3, [r7, #8]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d101      	bne.n	800f678 <USBH_CDC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800f674:	2302      	movs	r3, #2
 800f676:	e138      	b.n	800f8ea <USBH_CDC_InterfaceInit+0x2de>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800f678:	2250      	movs	r2, #80	; 0x50
 800f67a:	2100      	movs	r1, #0
 800f67c:	68b8      	ldr	r0, [r7, #8]
 800f67e:	f00b f8c7 	bl	801a810 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800f682:	7bfb      	ldrb	r3, [r7, #15]
 800f684:	687a      	ldr	r2, [r7, #4]
 800f686:	211a      	movs	r1, #26
 800f688:	fb01 f303 	mul.w	r3, r1, r3
 800f68c:	441a      	add	r2, r3
 800f68e:	f643 138e 	movw	r3, #14734	; 0x398e
 800f692:	4413      	add	r3, r2
 800f694:	781b      	ldrb	r3, [r3, #0]
 800f696:	b25b      	sxtb	r3, r3
 800f698:	2b00      	cmp	r3, #0
 800f69a:	da17      	bge.n	800f6cc <USBH_CDC_InterfaceInit+0xc0>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f69c:	7bfb      	ldrb	r3, [r7, #15]
 800f69e:	687a      	ldr	r2, [r7, #4]
 800f6a0:	211a      	movs	r1, #26
 800f6a2:	fb01 f303 	mul.w	r3, r1, r3
 800f6a6:	441a      	add	r2, r3
 800f6a8:	f643 138e 	movw	r3, #14734	; 0x398e
 800f6ac:	4413      	add	r3, r2
 800f6ae:	781a      	ldrb	r2, [r3, #0]
 800f6b0:	68bb      	ldr	r3, [r7, #8]
 800f6b2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f6b4:	7bfb      	ldrb	r3, [r7, #15]
 800f6b6:	687a      	ldr	r2, [r7, #4]
 800f6b8:	211a      	movs	r1, #26
 800f6ba:	fb01 f303 	mul.w	r3, r1, r3
 800f6be:	441a      	add	r2, r3
 800f6c0:	f643 1390 	movw	r3, #14736	; 0x3990
 800f6c4:	4413      	add	r3, r2
 800f6c6:	881a      	ldrh	r2, [r3, #0]
 800f6c8:	68bb      	ldr	r3, [r7, #8]
 800f6ca:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800f6cc:	68bb      	ldr	r3, [r7, #8]
 800f6ce:	785b      	ldrb	r3, [r3, #1]
 800f6d0:	4619      	mov	r1, r3
 800f6d2:	6878      	ldr	r0, [r7, #4]
 800f6d4:	f001 f80f 	bl	80106f6 <USBH_AllocPipe>
 800f6d8:	4603      	mov	r3, r0
 800f6da:	461a      	mov	r2, r3
 800f6dc:	68bb      	ldr	r3, [r7, #8]
 800f6de:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800f6e0:	68bb      	ldr	r3, [r7, #8]
 800f6e2:	7819      	ldrb	r1, [r3, #0]
 800f6e4:	68bb      	ldr	r3, [r7, #8]
 800f6e6:	7858      	ldrb	r0, [r3, #1]
 800f6e8:	687a      	ldr	r2, [r7, #4]
 800f6ea:	f643 135c 	movw	r3, #14684	; 0x395c
 800f6ee:	4413      	add	r3, r2
 800f6f0:	781c      	ldrb	r4, [r3, #0]
 800f6f2:	687a      	ldr	r2, [r7, #4]
 800f6f4:	f643 135d 	movw	r3, #14685	; 0x395d
 800f6f8:	4413      	add	r3, r2
 800f6fa:	781b      	ldrb	r3, [r3, #0]
 800f6fc:	68ba      	ldr	r2, [r7, #8]
 800f6fe:	8952      	ldrh	r2, [r2, #10]
 800f700:	9202      	str	r2, [sp, #8]
 800f702:	2203      	movs	r2, #3
 800f704:	9201      	str	r2, [sp, #4]
 800f706:	9300      	str	r3, [sp, #0]
 800f708:	4623      	mov	r3, r4
 800f70a:	4602      	mov	r2, r0
 800f70c:	6878      	ldr	r0, [r7, #4]
 800f70e:	f000 ffc3 	bl	8010698 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800f712:	68bb      	ldr	r3, [r7, #8]
 800f714:	781b      	ldrb	r3, [r3, #0]
 800f716:	2200      	movs	r2, #0
 800f718:	4619      	mov	r1, r3
 800f71a:	6878      	ldr	r0, [r7, #4]
 800f71c:	f00a ff68 	bl	801a5f0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800f720:	2300      	movs	r3, #0
 800f722:	2200      	movs	r2, #0
 800f724:	210a      	movs	r1, #10
 800f726:	6878      	ldr	r0, [r7, #4]
 800f728:	f000 fc32 	bl	800ff90 <USBH_FindInterface>
 800f72c:	4603      	mov	r3, r0
 800f72e:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800f730:	7bfb      	ldrb	r3, [r7, #15]
 800f732:	2bff      	cmp	r3, #255	; 0xff
 800f734:	d002      	beq.n	800f73c <USBH_CDC_InterfaceInit+0x130>
 800f736:	7bfb      	ldrb	r3, [r7, #15]
 800f738:	2b01      	cmp	r3, #1
 800f73a:	d901      	bls.n	800f740 <USBH_CDC_InterfaceInit+0x134>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800f73c:	2302      	movs	r3, #2
 800f73e:	e0d4      	b.n	800f8ea <USBH_CDC_InterfaceInit+0x2de>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800f740:	7bfb      	ldrb	r3, [r7, #15]
 800f742:	687a      	ldr	r2, [r7, #4]
 800f744:	211a      	movs	r1, #26
 800f746:	fb01 f303 	mul.w	r3, r1, r3
 800f74a:	441a      	add	r2, r3
 800f74c:	f643 138e 	movw	r3, #14734	; 0x398e
 800f750:	4413      	add	r3, r2
 800f752:	781b      	ldrb	r3, [r3, #0]
 800f754:	b25b      	sxtb	r3, r3
 800f756:	2b00      	cmp	r3, #0
 800f758:	da18      	bge.n	800f78c <USBH_CDC_InterfaceInit+0x180>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f75a:	7bfb      	ldrb	r3, [r7, #15]
 800f75c:	687a      	ldr	r2, [r7, #4]
 800f75e:	211a      	movs	r1, #26
 800f760:	fb01 f303 	mul.w	r3, r1, r3
 800f764:	441a      	add	r2, r3
 800f766:	f643 138e 	movw	r3, #14734	; 0x398e
 800f76a:	4413      	add	r3, r2
 800f76c:	781a      	ldrb	r2, [r3, #0]
 800f76e:	68bb      	ldr	r3, [r7, #8]
 800f770:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f772:	7bfb      	ldrb	r3, [r7, #15]
 800f774:	687a      	ldr	r2, [r7, #4]
 800f776:	211a      	movs	r1, #26
 800f778:	fb01 f303 	mul.w	r3, r1, r3
 800f77c:	441a      	add	r2, r3
 800f77e:	f643 1390 	movw	r3, #14736	; 0x3990
 800f782:	4413      	add	r3, r2
 800f784:	881a      	ldrh	r2, [r3, #0]
 800f786:	68bb      	ldr	r3, [r7, #8]
 800f788:	835a      	strh	r2, [r3, #26]
 800f78a:	e017      	b.n	800f7bc <USBH_CDC_InterfaceInit+0x1b0>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f78c:	7bfb      	ldrb	r3, [r7, #15]
 800f78e:	687a      	ldr	r2, [r7, #4]
 800f790:	211a      	movs	r1, #26
 800f792:	fb01 f303 	mul.w	r3, r1, r3
 800f796:	441a      	add	r2, r3
 800f798:	f643 138e 	movw	r3, #14734	; 0x398e
 800f79c:	4413      	add	r3, r2
 800f79e:	781a      	ldrb	r2, [r3, #0]
 800f7a0:	68bb      	ldr	r3, [r7, #8]
 800f7a2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f7a4:	7bfb      	ldrb	r3, [r7, #15]
 800f7a6:	687a      	ldr	r2, [r7, #4]
 800f7a8:	211a      	movs	r1, #26
 800f7aa:	fb01 f303 	mul.w	r3, r1, r3
 800f7ae:	441a      	add	r2, r3
 800f7b0:	f643 1390 	movw	r3, #14736	; 0x3990
 800f7b4:	4413      	add	r3, r2
 800f7b6:	881a      	ldrh	r2, [r3, #0]
 800f7b8:	68bb      	ldr	r3, [r7, #8]
 800f7ba:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800f7bc:	7bfb      	ldrb	r3, [r7, #15]
 800f7be:	687a      	ldr	r2, [r7, #4]
 800f7c0:	211a      	movs	r1, #26
 800f7c2:	fb01 f303 	mul.w	r3, r1, r3
 800f7c6:	441a      	add	r2, r3
 800f7c8:	f643 1396 	movw	r3, #14742	; 0x3996
 800f7cc:	4413      	add	r3, r2
 800f7ce:	781b      	ldrb	r3, [r3, #0]
 800f7d0:	b25b      	sxtb	r3, r3
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	da18      	bge.n	800f808 <USBH_CDC_InterfaceInit+0x1fc>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800f7d6:	7bfb      	ldrb	r3, [r7, #15]
 800f7d8:	687a      	ldr	r2, [r7, #4]
 800f7da:	211a      	movs	r1, #26
 800f7dc:	fb01 f303 	mul.w	r3, r1, r3
 800f7e0:	441a      	add	r2, r3
 800f7e2:	f643 1396 	movw	r3, #14742	; 0x3996
 800f7e6:	4413      	add	r3, r2
 800f7e8:	781a      	ldrb	r2, [r3, #0]
 800f7ea:	68bb      	ldr	r3, [r7, #8]
 800f7ec:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800f7ee:	7bfb      	ldrb	r3, [r7, #15]
 800f7f0:	687a      	ldr	r2, [r7, #4]
 800f7f2:	211a      	movs	r1, #26
 800f7f4:	fb01 f303 	mul.w	r3, r1, r3
 800f7f8:	441a      	add	r2, r3
 800f7fa:	f643 1398 	movw	r3, #14744	; 0x3998
 800f7fe:	4413      	add	r3, r2
 800f800:	881a      	ldrh	r2, [r3, #0]
 800f802:	68bb      	ldr	r3, [r7, #8]
 800f804:	835a      	strh	r2, [r3, #26]
 800f806:	e017      	b.n	800f838 <USBH_CDC_InterfaceInit+0x22c>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800f808:	7bfb      	ldrb	r3, [r7, #15]
 800f80a:	687a      	ldr	r2, [r7, #4]
 800f80c:	211a      	movs	r1, #26
 800f80e:	fb01 f303 	mul.w	r3, r1, r3
 800f812:	441a      	add	r2, r3
 800f814:	f643 1396 	movw	r3, #14742	; 0x3996
 800f818:	4413      	add	r3, r2
 800f81a:	781a      	ldrb	r2, [r3, #0]
 800f81c:	68bb      	ldr	r3, [r7, #8]
 800f81e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800f820:	7bfb      	ldrb	r3, [r7, #15]
 800f822:	687a      	ldr	r2, [r7, #4]
 800f824:	211a      	movs	r1, #26
 800f826:	fb01 f303 	mul.w	r3, r1, r3
 800f82a:	441a      	add	r2, r3
 800f82c:	f643 1398 	movw	r3, #14744	; 0x3998
 800f830:	4413      	add	r3, r2
 800f832:	881a      	ldrh	r2, [r3, #0]
 800f834:	68bb      	ldr	r3, [r7, #8]
 800f836:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800f838:	68bb      	ldr	r3, [r7, #8]
 800f83a:	7b9b      	ldrb	r3, [r3, #14]
 800f83c:	4619      	mov	r1, r3
 800f83e:	6878      	ldr	r0, [r7, #4]
 800f840:	f000 ff59 	bl	80106f6 <USBH_AllocPipe>
 800f844:	4603      	mov	r3, r0
 800f846:	461a      	mov	r2, r3
 800f848:	68bb      	ldr	r3, [r7, #8]
 800f84a:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800f84c:	68bb      	ldr	r3, [r7, #8]
 800f84e:	7bdb      	ldrb	r3, [r3, #15]
 800f850:	4619      	mov	r1, r3
 800f852:	6878      	ldr	r0, [r7, #4]
 800f854:	f000 ff4f 	bl	80106f6 <USBH_AllocPipe>
 800f858:	4603      	mov	r3, r0
 800f85a:	461a      	mov	r2, r3
 800f85c:	68bb      	ldr	r3, [r7, #8]
 800f85e:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800f860:	68bb      	ldr	r3, [r7, #8]
 800f862:	7b59      	ldrb	r1, [r3, #13]
 800f864:	68bb      	ldr	r3, [r7, #8]
 800f866:	7b98      	ldrb	r0, [r3, #14]
 800f868:	687a      	ldr	r2, [r7, #4]
 800f86a:	f643 135c 	movw	r3, #14684	; 0x395c
 800f86e:	4413      	add	r3, r2
 800f870:	781c      	ldrb	r4, [r3, #0]
 800f872:	687a      	ldr	r2, [r7, #4]
 800f874:	f643 135d 	movw	r3, #14685	; 0x395d
 800f878:	4413      	add	r3, r2
 800f87a:	781b      	ldrb	r3, [r3, #0]
 800f87c:	68ba      	ldr	r2, [r7, #8]
 800f87e:	8b12      	ldrh	r2, [r2, #24]
 800f880:	9202      	str	r2, [sp, #8]
 800f882:	2202      	movs	r2, #2
 800f884:	9201      	str	r2, [sp, #4]
 800f886:	9300      	str	r3, [sp, #0]
 800f888:	4623      	mov	r3, r4
 800f88a:	4602      	mov	r2, r0
 800f88c:	6878      	ldr	r0, [r7, #4]
 800f88e:	f000 ff03 	bl	8010698 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800f892:	68bb      	ldr	r3, [r7, #8]
 800f894:	7b19      	ldrb	r1, [r3, #12]
 800f896:	68bb      	ldr	r3, [r7, #8]
 800f898:	7bd8      	ldrb	r0, [r3, #15]
 800f89a:	687a      	ldr	r2, [r7, #4]
 800f89c:	f643 135c 	movw	r3, #14684	; 0x395c
 800f8a0:	4413      	add	r3, r2
 800f8a2:	781c      	ldrb	r4, [r3, #0]
 800f8a4:	687a      	ldr	r2, [r7, #4]
 800f8a6:	f643 135d 	movw	r3, #14685	; 0x395d
 800f8aa:	4413      	add	r3, r2
 800f8ac:	781b      	ldrb	r3, [r3, #0]
 800f8ae:	68ba      	ldr	r2, [r7, #8]
 800f8b0:	8b52      	ldrh	r2, [r2, #26]
 800f8b2:	9202      	str	r2, [sp, #8]
 800f8b4:	2202      	movs	r2, #2
 800f8b6:	9201      	str	r2, [sp, #4]
 800f8b8:	9300      	str	r3, [sp, #0]
 800f8ba:	4623      	mov	r3, r4
 800f8bc:	4602      	mov	r2, r0
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f000 feea 	bl	8010698 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800f8c4:	68bb      	ldr	r3, [r7, #8]
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800f8cc:	68bb      	ldr	r3, [r7, #8]
 800f8ce:	7b5b      	ldrb	r3, [r3, #13]
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	4619      	mov	r1, r3
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	f00a fe8b 	bl	801a5f0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800f8da:	68bb      	ldr	r3, [r7, #8]
 800f8dc:	7b1b      	ldrb	r3, [r3, #12]
 800f8de:	2200      	movs	r2, #0
 800f8e0:	4619      	mov	r1, r3
 800f8e2:	6878      	ldr	r0, [r7, #4]
 800f8e4:	f00a fe84 	bl	801a5f0 <USBH_LL_SetToggle>

  return USBH_OK;
 800f8e8:	2300      	movs	r3, #0
}
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	3714      	adds	r7, #20
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	bd90      	pop	{r4, r7, pc}

0800f8f2 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800f8f2:	b580      	push	{r7, lr}
 800f8f4:	b084      	sub	sp, #16
 800f8f6:	af00      	add	r7, sp, #0
 800f8f8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f8fa:	687a      	ldr	r2, [r7, #4]
 800f8fc:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800f900:	4413      	add	r3, r2
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	69db      	ldr	r3, [r3, #28]
 800f906:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	781b      	ldrb	r3, [r3, #0]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d00e      	beq.n	800f92e <USBH_CDC_InterfaceDeInit+0x3c>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	781b      	ldrb	r3, [r3, #0]
 800f914:	4619      	mov	r1, r3
 800f916:	6878      	ldr	r0, [r7, #4]
 800f918:	f000 fedd 	bl	80106d6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	781b      	ldrb	r3, [r3, #0]
 800f920:	4619      	mov	r1, r3
 800f922:	6878      	ldr	r0, [r7, #4]
 800f924:	f000 ff09 	bl	801073a <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	2200      	movs	r2, #0
 800f92c:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	7b1b      	ldrb	r3, [r3, #12]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d00e      	beq.n	800f954 <USBH_CDC_InterfaceDeInit+0x62>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	7b1b      	ldrb	r3, [r3, #12]
 800f93a:	4619      	mov	r1, r3
 800f93c:	6878      	ldr	r0, [r7, #4]
 800f93e:	f000 feca 	bl	80106d6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	7b1b      	ldrb	r3, [r3, #12]
 800f946:	4619      	mov	r1, r3
 800f948:	6878      	ldr	r0, [r7, #4]
 800f94a:	f000 fef6 	bl	801073a <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	2200      	movs	r2, #0
 800f952:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	7b5b      	ldrb	r3, [r3, #13]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d00e      	beq.n	800f97a <USBH_CDC_InterfaceDeInit+0x88>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	7b5b      	ldrb	r3, [r3, #13]
 800f960:	4619      	mov	r1, r3
 800f962:	6878      	ldr	r0, [r7, #4]
 800f964:	f000 feb7 	bl	80106d6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	7b5b      	ldrb	r3, [r3, #13]
 800f96c:	4619      	mov	r1, r3
 800f96e:	6878      	ldr	r0, [r7, #4]
 800f970:	f000 fee3 	bl	801073a <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	2200      	movs	r2, #0
 800f978:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800f97a:	687a      	ldr	r2, [r7, #4]
 800f97c:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800f980:	4413      	add	r3, r2
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	69db      	ldr	r3, [r3, #28]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d00f      	beq.n	800f9aa <USBH_CDC_InterfaceDeInit+0xb8>
  {
    USBH_free(phost->pActiveClass->pData);
 800f98a:	687a      	ldr	r2, [r7, #4]
 800f98c:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800f990:	4413      	add	r3, r2
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	69db      	ldr	r3, [r3, #28]
 800f996:	4618      	mov	r0, r3
 800f998:	f00a ff0a 	bl	801a7b0 <free>
    phost->pActiveClass->pData = 0U;
 800f99c:	687a      	ldr	r2, [r7, #4]
 800f99e:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800f9a2:	4413      	add	r3, r2
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800f9aa:	2300      	movs	r3, #0
}
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	3710      	adds	r7, #16
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	bd80      	pop	{r7, pc}

0800f9b4 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b084      	sub	sp, #16
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f9bc:	687a      	ldr	r2, [r7, #4]
 800f9be:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800f9c2:	4413      	add	r3, r2
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	69db      	ldr	r3, [r3, #28]
 800f9c8:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	3340      	adds	r3, #64	; 0x40
 800f9ce:	4619      	mov	r1, r3
 800f9d0:	6878      	ldr	r0, [r7, #4]
 800f9d2:	f000 f8b6 	bl	800fb42 <GetLineCoding>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800f9da:	7afb      	ldrb	r3, [r7, #11]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d107      	bne.n	800f9f0 <USBH_CDC_ClassRequest+0x3c>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800f9e0:	687a      	ldr	r2, [r7, #4]
 800f9e2:	f643 2314 	movw	r3, #14868	; 0x3a14
 800f9e6:	4413      	add	r3, r2
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	2102      	movs	r1, #2
 800f9ec:	6878      	ldr	r0, [r7, #4]
 800f9ee:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800f9f0:	7afb      	ldrb	r3, [r7, #11]
}
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	3710      	adds	r7, #16
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	bd80      	pop	{r7, pc}
	...

0800f9fc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b084      	sub	sp, #16
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800fa04:	2301      	movs	r3, #1
 800fa06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800fa08:	2300      	movs	r3, #0
 800fa0a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800fa0c:	687a      	ldr	r2, [r7, #4]
 800fa0e:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800fa12:	4413      	add	r3, r2
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	69db      	ldr	r3, [r3, #28]
 800fa18:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800fa1a:	68bb      	ldr	r3, [r7, #8]
 800fa1c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800fa20:	2b04      	cmp	r3, #4
 800fa22:	d877      	bhi.n	800fb14 <USBH_CDC_Process+0x118>
 800fa24:	a201      	add	r2, pc, #4	; (adr r2, 800fa2c <USBH_CDC_Process+0x30>)
 800fa26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa2a:	bf00      	nop
 800fa2c:	0800fa41 	.word	0x0800fa41
 800fa30:	0800fa47 	.word	0x0800fa47
 800fa34:	0800fa77 	.word	0x0800fa77
 800fa38:	0800faeb 	.word	0x0800faeb
 800fa3c:	0800faf9 	.word	0x0800faf9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800fa40:	2300      	movs	r3, #0
 800fa42:	73fb      	strb	r3, [r7, #15]
      break;
 800fa44:	e06d      	b.n	800fb22 <USBH_CDC_Process+0x126>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800fa46:	68bb      	ldr	r3, [r7, #8]
 800fa48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fa4a:	4619      	mov	r1, r3
 800fa4c:	6878      	ldr	r0, [r7, #4]
 800fa4e:	f000 f897 	bl	800fb80 <SetLineCoding>
 800fa52:	4603      	mov	r3, r0
 800fa54:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800fa56:	7bbb      	ldrb	r3, [r7, #14]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d104      	bne.n	800fa66 <USBH_CDC_Process+0x6a>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800fa5c:	68bb      	ldr	r3, [r7, #8]
 800fa5e:	2202      	movs	r2, #2
 800fa60:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800fa64:	e058      	b.n	800fb18 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800fa66:	7bbb      	ldrb	r3, [r7, #14]
 800fa68:	2b01      	cmp	r3, #1
 800fa6a:	d055      	beq.n	800fb18 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800fa6c:	68bb      	ldr	r3, [r7, #8]
 800fa6e:	2204      	movs	r2, #4
 800fa70:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800fa74:	e050      	b.n	800fb18 <USBH_CDC_Process+0x11c>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800fa76:	68bb      	ldr	r3, [r7, #8]
 800fa78:	3340      	adds	r3, #64	; 0x40
 800fa7a:	4619      	mov	r1, r3
 800fa7c:	6878      	ldr	r0, [r7, #4]
 800fa7e:	f000 f860 	bl	800fb42 <GetLineCoding>
 800fa82:	4603      	mov	r3, r0
 800fa84:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800fa86:	7bbb      	ldrb	r3, [r7, #14]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d126      	bne.n	800fada <USBH_CDC_Process+0xde>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800fa8c:	68bb      	ldr	r3, [r7, #8]
 800fa8e:	2200      	movs	r2, #0
 800fa90:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800fa94:	68bb      	ldr	r3, [r7, #8]
 800fa96:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800fa9a:	68bb      	ldr	r3, [r7, #8]
 800fa9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fa9e:	791b      	ldrb	r3, [r3, #4]
 800faa0:	429a      	cmp	r2, r3
 800faa2:	d13b      	bne.n	800fb1c <USBH_CDC_Process+0x120>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800faa4:	68bb      	ldr	r3, [r7, #8]
 800faa6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800faaa:	68bb      	ldr	r3, [r7, #8]
 800faac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800faae:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800fab0:	429a      	cmp	r2, r3
 800fab2:	d133      	bne.n	800fb1c <USBH_CDC_Process+0x120>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800fab4:	68bb      	ldr	r3, [r7, #8]
 800fab6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fabe:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800fac0:	429a      	cmp	r2, r3
 800fac2:	d12b      	bne.n	800fb1c <USBH_CDC_Process+0x120>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800fac4:	68bb      	ldr	r3, [r7, #8]
 800fac6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fac8:	68bb      	ldr	r3, [r7, #8]
 800faca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800facc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800face:	429a      	cmp	r2, r3
 800fad0:	d124      	bne.n	800fb1c <USBH_CDC_Process+0x120>
        {
          USBH_CDC_LineCodingChanged(phost);
 800fad2:	6878      	ldr	r0, [r7, #4]
 800fad4:	f000 f95c 	bl	800fd90 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800fad8:	e020      	b.n	800fb1c <USBH_CDC_Process+0x120>
        if (req_status != USBH_BUSY)
 800fada:	7bbb      	ldrb	r3, [r7, #14]
 800fadc:	2b01      	cmp	r3, #1
 800fade:	d01d      	beq.n	800fb1c <USBH_CDC_Process+0x120>
          CDC_Handle->state = CDC_ERROR_STATE;
 800fae0:	68bb      	ldr	r3, [r7, #8]
 800fae2:	2204      	movs	r2, #4
 800fae4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800fae8:	e018      	b.n	800fb1c <USBH_CDC_Process+0x120>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800faea:	6878      	ldr	r0, [r7, #4]
 800faec:	f000 f867 	bl	800fbbe <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800faf0:	6878      	ldr	r0, [r7, #4]
 800faf2:	f000 f8dc 	bl	800fcae <CDC_ProcessReception>
      break;
 800faf6:	e014      	b.n	800fb22 <USBH_CDC_Process+0x126>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800faf8:	2100      	movs	r1, #0
 800fafa:	6878      	ldr	r0, [r7, #4]
 800fafc:	f000 fb49 	bl	8010192 <USBH_ClrFeature>
 800fb00:	4603      	mov	r3, r0
 800fb02:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800fb04:	7bbb      	ldrb	r3, [r7, #14]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d10a      	bne.n	800fb20 <USBH_CDC_Process+0x124>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800fb0a:	68bb      	ldr	r3, [r7, #8]
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800fb12:	e005      	b.n	800fb20 <USBH_CDC_Process+0x124>

    default:
      break;
 800fb14:	bf00      	nop
 800fb16:	e004      	b.n	800fb22 <USBH_CDC_Process+0x126>
      break;
 800fb18:	bf00      	nop
 800fb1a:	e002      	b.n	800fb22 <USBH_CDC_Process+0x126>
      break;
 800fb1c:	bf00      	nop
 800fb1e:	e000      	b.n	800fb22 <USBH_CDC_Process+0x126>
      break;
 800fb20:	bf00      	nop

  }

  return status;
 800fb22:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb24:	4618      	mov	r0, r3
 800fb26:	3710      	adds	r7, #16
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	bd80      	pop	{r7, pc}

0800fb2c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800fb2c:	b480      	push	{r7}
 800fb2e:	b083      	sub	sp, #12
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800fb34:	2300      	movs	r3, #0
}
 800fb36:	4618      	mov	r0, r3
 800fb38:	370c      	adds	r7, #12
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb40:	4770      	bx	lr

0800fb42 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800fb42:	b580      	push	{r7, lr}
 800fb44:	b082      	sub	sp, #8
 800fb46:	af00      	add	r7, sp, #0
 800fb48:	6078      	str	r0, [r7, #4]
 800fb4a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	22a1      	movs	r2, #161	; 0xa1
 800fb50:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	2221      	movs	r2, #33	; 0x21
 800fb56:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	2200      	movs	r2, #0
 800fb62:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	2207      	movs	r2, #7
 800fb68:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800fb6a:	683b      	ldr	r3, [r7, #0]
 800fb6c:	2207      	movs	r2, #7
 800fb6e:	4619      	mov	r1, r3
 800fb70:	6878      	ldr	r0, [r7, #4]
 800fb72:	f000 fb32 	bl	80101da <USBH_CtlReq>
 800fb76:	4603      	mov	r3, r0
}
 800fb78:	4618      	mov	r0, r3
 800fb7a:	3708      	adds	r7, #8
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	bd80      	pop	{r7, pc}

0800fb80 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b082      	sub	sp, #8
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
 800fb88:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	2221      	movs	r2, #33	; 0x21
 800fb8e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	2220      	movs	r2, #32
 800fb94:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	2200      	movs	r2, #0
 800fb9a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	2200      	movs	r2, #0
 800fba0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	2207      	movs	r2, #7
 800fba6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800fba8:	683b      	ldr	r3, [r7, #0]
 800fbaa:	2207      	movs	r2, #7
 800fbac:	4619      	mov	r1, r3
 800fbae:	6878      	ldr	r0, [r7, #4]
 800fbb0:	f000 fb13 	bl	80101da <USBH_CtlReq>
 800fbb4:	4603      	mov	r3, r0
}
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	3708      	adds	r7, #8
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	bd80      	pop	{r7, pc}

0800fbbe <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800fbbe:	b580      	push	{r7, lr}
 800fbc0:	b086      	sub	sp, #24
 800fbc2:	af02      	add	r7, sp, #8
 800fbc4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800fbc6:	687a      	ldr	r2, [r7, #4]
 800fbc8:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800fbcc:	4413      	add	r3, r2
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	69db      	ldr	r3, [r3, #28]
 800fbd2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800fbde:	2b01      	cmp	r3, #1
 800fbe0:	d002      	beq.n	800fbe8 <CDC_ProcessTransmission+0x2a>
 800fbe2:	2b02      	cmp	r3, #2
 800fbe4:	d023      	beq.n	800fc2e <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800fbe6:	e05e      	b.n	800fca6 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbec:	68fa      	ldr	r2, [r7, #12]
 800fbee:	8b12      	ldrh	r2, [r2, #24]
 800fbf0:	4293      	cmp	r3, r2
 800fbf2:	d90b      	bls.n	800fc0c <CDC_ProcessTransmission+0x4e>
        USBH_BulkSendData(phost,
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	69d9      	ldr	r1, [r3, #28]
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	8b1a      	ldrh	r2, [r3, #24]
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	7b5b      	ldrb	r3, [r3, #13]
 800fc00:	2001      	movs	r0, #1
 800fc02:	9000      	str	r0, [sp, #0]
 800fc04:	6878      	ldr	r0, [r7, #4]
 800fc06:	f000 fd02 	bl	801060e <USBH_BulkSendData>
 800fc0a:	e00b      	b.n	800fc24 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800fc14:	b29a      	uxth	r2, r3
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	7b5b      	ldrb	r3, [r3, #13]
 800fc1a:	2001      	movs	r0, #1
 800fc1c:	9000      	str	r0, [sp, #0]
 800fc1e:	6878      	ldr	r0, [r7, #4]
 800fc20:	f000 fcf5 	bl	801060e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	2202      	movs	r2, #2
 800fc28:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800fc2c:	e03b      	b.n	800fca6 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	7b5b      	ldrb	r3, [r3, #13]
 800fc32:	4619      	mov	r1, r3
 800fc34:	6878      	ldr	r0, [r7, #4]
 800fc36:	f00a fcad 	bl	801a594 <USBH_LL_GetURBState>
 800fc3a:	4603      	mov	r3, r0
 800fc3c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800fc3e:	7afb      	ldrb	r3, [r7, #11]
 800fc40:	2b01      	cmp	r3, #1
 800fc42:	d128      	bne.n	800fc96 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc48:	68fa      	ldr	r2, [r7, #12]
 800fc4a:	8b12      	ldrh	r2, [r2, #24]
 800fc4c:	4293      	cmp	r3, r2
 800fc4e:	d90e      	bls.n	800fc6e <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc54:	68fa      	ldr	r2, [r7, #12]
 800fc56:	8b12      	ldrh	r2, [r2, #24]
 800fc58:	1a9a      	subs	r2, r3, r2
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	69db      	ldr	r3, [r3, #28]
 800fc62:	68fa      	ldr	r2, [r7, #12]
 800fc64:	8b12      	ldrh	r2, [r2, #24]
 800fc66:	441a      	add	r2, r3
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	61da      	str	r2, [r3, #28]
 800fc6c:	e002      	b.n	800fc74 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	2200      	movs	r2, #0
 800fc72:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d004      	beq.n	800fc86 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	2201      	movs	r2, #1
 800fc80:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800fc84:	e00e      	b.n	800fca4 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	2200      	movs	r2, #0
 800fc8a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	f000 f86a 	bl	800fd68 <USBH_CDC_TransmitCallback>
      break;
 800fc94:	e006      	b.n	800fca4 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 800fc96:	7afb      	ldrb	r3, [r7, #11]
 800fc98:	2b02      	cmp	r3, #2
 800fc9a:	d103      	bne.n	800fca4 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	2201      	movs	r2, #1
 800fca0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800fca4:	bf00      	nop
  }
}
 800fca6:	bf00      	nop
 800fca8:	3710      	adds	r7, #16
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	bd80      	pop	{r7, pc}

0800fcae <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800fcae:	b580      	push	{r7, lr}
 800fcb0:	b086      	sub	sp, #24
 800fcb2:	af00      	add	r7, sp, #0
 800fcb4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800fcb6:	687a      	ldr	r2, [r7, #4]
 800fcb8:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800fcbc:	4413      	add	r3, r2
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	69db      	ldr	r3, [r3, #28]
 800fcc2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800fcc8:	697b      	ldr	r3, [r7, #20]
 800fcca:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800fcce:	2b03      	cmp	r3, #3
 800fcd0:	d002      	beq.n	800fcd8 <CDC_ProcessReception+0x2a>
 800fcd2:	2b04      	cmp	r3, #4
 800fcd4:	d00e      	beq.n	800fcf4 <CDC_ProcessReception+0x46>
#endif
      }
      break;

    default:
      break;
 800fcd6:	e043      	b.n	800fd60 <CDC_ProcessReception+0xb2>
      USBH_BulkReceiveData(phost,
 800fcd8:	697b      	ldr	r3, [r7, #20]
 800fcda:	6a19      	ldr	r1, [r3, #32]
 800fcdc:	697b      	ldr	r3, [r7, #20]
 800fcde:	8b5a      	ldrh	r2, [r3, #26]
 800fce0:	697b      	ldr	r3, [r7, #20]
 800fce2:	7b1b      	ldrb	r3, [r3, #12]
 800fce4:	6878      	ldr	r0, [r7, #4]
 800fce6:	f000 fcb9 	bl	801065c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800fcea:	697b      	ldr	r3, [r7, #20]
 800fcec:	2204      	movs	r2, #4
 800fcee:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800fcf2:	e035      	b.n	800fd60 <CDC_ProcessReception+0xb2>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800fcf4:	697b      	ldr	r3, [r7, #20]
 800fcf6:	7b1b      	ldrb	r3, [r3, #12]
 800fcf8:	4619      	mov	r1, r3
 800fcfa:	6878      	ldr	r0, [r7, #4]
 800fcfc:	f00a fc4a 	bl	801a594 <USBH_LL_GetURBState>
 800fd00:	4603      	mov	r3, r0
 800fd02:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800fd04:	7cfb      	ldrb	r3, [r7, #19]
 800fd06:	2b01      	cmp	r3, #1
 800fd08:	d129      	bne.n	800fd5e <CDC_ProcessReception+0xb0>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800fd0a:	697b      	ldr	r3, [r7, #20]
 800fd0c:	7b1b      	ldrb	r3, [r3, #12]
 800fd0e:	4619      	mov	r1, r3
 800fd10:	6878      	ldr	r0, [r7, #4]
 800fd12:	f00a fba5 	bl	801a460 <USBH_LL_GetLastXferSize>
 800fd16:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800fd18:	697b      	ldr	r3, [r7, #20]
 800fd1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd1c:	68fa      	ldr	r2, [r7, #12]
 800fd1e:	429a      	cmp	r2, r3
 800fd20:	d016      	beq.n	800fd50 <CDC_ProcessReception+0xa2>
 800fd22:	697b      	ldr	r3, [r7, #20]
 800fd24:	8b5b      	ldrh	r3, [r3, #26]
 800fd26:	461a      	mov	r2, r3
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	4293      	cmp	r3, r2
 800fd2c:	d910      	bls.n	800fd50 <CDC_ProcessReception+0xa2>
          CDC_Handle->RxDataLength -= length ;
 800fd2e:	697b      	ldr	r3, [r7, #20]
 800fd30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	1ad2      	subs	r2, r2, r3
 800fd36:	697b      	ldr	r3, [r7, #20]
 800fd38:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800fd3a:	697b      	ldr	r3, [r7, #20]
 800fd3c:	6a1a      	ldr	r2, [r3, #32]
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	441a      	add	r2, r3
 800fd42:	697b      	ldr	r3, [r7, #20]
 800fd44:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800fd46:	697b      	ldr	r3, [r7, #20]
 800fd48:	2203      	movs	r2, #3
 800fd4a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800fd4e:	e006      	b.n	800fd5e <CDC_ProcessReception+0xb0>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800fd50:	697b      	ldr	r3, [r7, #20]
 800fd52:	2200      	movs	r2, #0
 800fd54:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800fd58:	6878      	ldr	r0, [r7, #4]
 800fd5a:	f000 f80f 	bl	800fd7c <USBH_CDC_ReceiveCallback>
      break;
 800fd5e:	bf00      	nop
  }
}
 800fd60:	bf00      	nop
 800fd62:	3718      	adds	r7, #24
 800fd64:	46bd      	mov	sp, r7
 800fd66:	bd80      	pop	{r7, pc}

0800fd68 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800fd68:	b480      	push	{r7}
 800fd6a:	b083      	sub	sp, #12
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800fd70:	bf00      	nop
 800fd72:	370c      	adds	r7, #12
 800fd74:	46bd      	mov	sp, r7
 800fd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7a:	4770      	bx	lr

0800fd7c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800fd7c:	b480      	push	{r7}
 800fd7e:	b083      	sub	sp, #12
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800fd84:	bf00      	nop
 800fd86:	370c      	adds	r7, #12
 800fd88:	46bd      	mov	sp, r7
 800fd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd8e:	4770      	bx	lr

0800fd90 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800fd90:	b480      	push	{r7}
 800fd92:	b083      	sub	sp, #12
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800fd98:	bf00      	nop
 800fd9a:	370c      	adds	r7, #12
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda2:	4770      	bx	lr

0800fda4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b084      	sub	sp, #16
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	60f8      	str	r0, [r7, #12]
 800fdac:	60b9      	str	r1, [r7, #8]
 800fdae:	4613      	mov	r3, r2
 800fdb0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d101      	bne.n	800fdbc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800fdb8:	2302      	movs	r3, #2
 800fdba:	e038      	b.n	800fe2e <USBH_Init+0x8a>
  }

  /* Set DRiver ID */
  phost->id = id;
 800fdbc:	68fa      	ldr	r2, [r7, #12]
 800fdbe:	f643 230c 	movw	r3, #14860	; 0x3a0c
 800fdc2:	4413      	add	r3, r2
 800fdc4:	79fa      	ldrb	r2, [r7, #7]
 800fdc6:	701a      	strb	r2, [r3, #0]

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800fdc8:	68fa      	ldr	r2, [r7, #12]
 800fdca:	f643 13bc 	movw	r3, #14780	; 0x39bc
 800fdce:	4413      	add	r3, r2
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	601a      	str	r2, [r3, #0]
  phost->ClassNumber = 0U;
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	f503 5367 	add.w	r3, r3, #14784	; 0x39c0
 800fdda:	2200      	movs	r2, #0
 800fddc:	601a      	str	r2, [r3, #0]

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800fdde:	68f8      	ldr	r0, [r7, #12]
 800fde0:	f000 f829 	bl	800fe36 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800fde4:	68fa      	ldr	r2, [r7, #12]
 800fde6:	f643 1363 	movw	r3, #14691	; 0x3963
 800fdea:	4413      	add	r3, r2
 800fdec:	2200      	movs	r2, #0
 800fdee:	701a      	strb	r2, [r3, #0]
  phost->device.is_connected = 0U;
 800fdf0:	68fa      	ldr	r2, [r7, #12]
 800fdf2:	f643 1360 	movw	r3, #14688	; 0x3960
 800fdf6:	4413      	add	r3, r2
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	701a      	strb	r2, [r3, #0]
  phost->device.is_disconnected = 0U;
 800fdfc:	68fa      	ldr	r2, [r7, #12]
 800fdfe:	f643 1361 	movw	r3, #14689	; 0x3961
 800fe02:	4413      	add	r3, r2
 800fe04:	2200      	movs	r2, #0
 800fe06:	701a      	strb	r2, [r3, #0]
  phost->device.is_ReEnumerated = 0U;
 800fe08:	68fa      	ldr	r2, [r7, #12]
 800fe0a:	f643 1362 	movw	r3, #14690	; 0x3962
 800fe0e:	4413      	add	r3, r2
 800fe10:	2200      	movs	r2, #0
 800fe12:	701a      	strb	r2, [r3, #0]

  /* Assign User process */
  if (pUsrFunc != NULL)
 800fe14:	68bb      	ldr	r3, [r7, #8]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d005      	beq.n	800fe26 <USBH_Init+0x82>
  {
    phost->pUser = pUsrFunc;
 800fe1a:	68fa      	ldr	r2, [r7, #12]
 800fe1c:	f643 2314 	movw	r3, #14868	; 0x3a14
 800fe20:	4413      	add	r3, r2
 800fe22:	68ba      	ldr	r2, [r7, #8]
 800fe24:	601a      	str	r2, [r3, #0]

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800fe26:	68f8      	ldr	r0, [r7, #12]
 800fe28:	f00a faa0 	bl	801a36c <USBH_LL_Init>

  return USBH_OK;
 800fe2c:	2300      	movs	r3, #0
}
 800fe2e:	4618      	mov	r0, r3
 800fe30:	3710      	adds	r7, #16
 800fe32:	46bd      	mov	sp, r7
 800fe34:	bd80      	pop	{r7, pc}

0800fe36 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800fe36:	b480      	push	{r7}
 800fe38:	b085      	sub	sp, #20
 800fe3a:	af00      	add	r7, sp, #0
 800fe3c:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800fe3e:	2300      	movs	r3, #0
 800fe40:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800fe42:	2300      	movs	r3, #0
 800fe44:	60fb      	str	r3, [r7, #12]
 800fe46:	e00a      	b.n	800fe5e <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 800fe48:	687a      	ldr	r2, [r7, #4]
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 800fe50:	009b      	lsls	r3, r3, #2
 800fe52:	4413      	add	r3, r2
 800fe54:	2200      	movs	r2, #0
 800fe56:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	3301      	adds	r3, #1
 800fe5c:	60fb      	str	r3, [r7, #12]
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	2b0e      	cmp	r3, #14
 800fe62:	d9f1      	bls.n	800fe48 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800fe64:	2300      	movs	r3, #0
 800fe66:	60fb      	str	r3, [r7, #12]
 800fe68:	e009      	b.n	800fe7e <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 800fe6a:	687a      	ldr	r2, [r7, #4]
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	4413      	add	r3, r2
 800fe70:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800fe74:	2200      	movs	r2, #0
 800fe76:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	3301      	adds	r3, #1
 800fe7c:	60fb      	str	r3, [r7, #12]
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
 800fe84:	d3f1      	bcc.n	800fe6a <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	2200      	movs	r2, #0
 800fe8a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	2200      	movs	r2, #0
 800fe90:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	2201      	movs	r2, #1
 800fe96:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800fe98:	687a      	ldr	r2, [r7, #4]
 800fe9a:	f643 2304 	movw	r3, #14852	; 0x3a04
 800fe9e:	4413      	add	r3, r2
 800fea0:	2200      	movs	r2, #0
 800fea2:	601a      	str	r2, [r3, #0]

  phost->Control.state = CTRL_SETUP;
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	2201      	movs	r2, #1
 800fea8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	2240      	movs	r2, #64	; 0x40
 800feae:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	2200      	movs	r2, #0
 800feb4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800feb6:	687a      	ldr	r2, [r7, #4]
 800feb8:	f643 135c 	movw	r3, #14684	; 0x395c
 800febc:	4413      	add	r3, r2
 800febe:	2200      	movs	r2, #0
 800fec0:	701a      	strb	r2, [r3, #0]
  phost->device.speed = USBH_SPEED_FULL;
 800fec2:	687a      	ldr	r2, [r7, #4]
 800fec4:	f643 135d 	movw	r3, #14685	; 0x395d
 800fec8:	4413      	add	r3, r2
 800feca:	2201      	movs	r2, #1
 800fecc:	701a      	strb	r2, [r3, #0]
  phost->device.RstCnt = 0U;
 800fece:	687a      	ldr	r2, [r7, #4]
 800fed0:	f643 135f 	movw	r3, #14687	; 0x395f
 800fed4:	4413      	add	r3, r2
 800fed6:	2200      	movs	r2, #0
 800fed8:	701a      	strb	r2, [r3, #0]
  phost->device.EnumCnt = 0U;
 800feda:	687a      	ldr	r2, [r7, #4]
 800fedc:	f643 135e 	movw	r3, #14686	; 0x395e
 800fee0:	4413      	add	r3, r2
 800fee2:	2200      	movs	r2, #0
 800fee4:	701a      	strb	r2, [r3, #0]

  return USBH_OK;
 800fee6:	2300      	movs	r3, #0
}
 800fee8:	4618      	mov	r0, r3
 800feea:	3714      	adds	r7, #20
 800feec:	46bd      	mov	sp, r7
 800feee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef2:	4770      	bx	lr

0800fef4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800fef4:	b480      	push	{r7}
 800fef6:	b085      	sub	sp, #20
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
 800fefc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800fefe:	2300      	movs	r3, #0
 800ff00:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800ff02:	683b      	ldr	r3, [r7, #0]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d01a      	beq.n	800ff3e <USBH_RegisterClass+0x4a>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	f503 5367 	add.w	r3, r3, #14784	; 0x39c0
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d111      	bne.n	800ff38 <USBH_RegisterClass+0x44>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	f503 5367 	add.w	r3, r3, #14784	; 0x39c0
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	1c59      	adds	r1, r3, #1
 800ff1e:	687a      	ldr	r2, [r7, #4]
 800ff20:	f502 5267 	add.w	r2, r2, #14784	; 0x39c0
 800ff24:	6011      	str	r1, [r2, #0]
 800ff26:	687a      	ldr	r2, [r7, #4]
 800ff28:	f603 636e 	addw	r3, r3, #3694	; 0xe6e
 800ff2c:	6839      	ldr	r1, [r7, #0]
 800ff2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800ff32:	2300      	movs	r3, #0
 800ff34:	73fb      	strb	r3, [r7, #15]
 800ff36:	e004      	b.n	800ff42 <USBH_RegisterClass+0x4e>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800ff38:	2302      	movs	r3, #2
 800ff3a:	73fb      	strb	r3, [r7, #15]
 800ff3c:	e001      	b.n	800ff42 <USBH_RegisterClass+0x4e>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800ff3e:	2302      	movs	r3, #2
 800ff40:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ff42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff44:	4618      	mov	r0, r3
 800ff46:	3714      	adds	r7, #20
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4e:	4770      	bx	lr

0800ff50 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800ff50:	b480      	push	{r7}
 800ff52:	b085      	sub	sp, #20
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
 800ff58:	460b      	mov	r3, r1
 800ff5a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800ff60:	687a      	ldr	r2, [r7, #4]
 800ff62:	f643 137c 	movw	r3, #14716	; 0x397c
 800ff66:	4413      	add	r3, r2
 800ff68:	781b      	ldrb	r3, [r3, #0]
 800ff6a:	78fa      	ldrb	r2, [r7, #3]
 800ff6c:	429a      	cmp	r2, r3
 800ff6e:	d206      	bcs.n	800ff7e <USBH_SelectInterface+0x2e>
  {
    phost->device.current_interface = interface;
 800ff70:	687a      	ldr	r2, [r7, #4]
 800ff72:	f643 1364 	movw	r3, #14692	; 0x3964
 800ff76:	4413      	add	r3, r2
 800ff78:	78fa      	ldrb	r2, [r7, #3]
 800ff7a:	701a      	strb	r2, [r3, #0]
 800ff7c:	e001      	b.n	800ff82 <USBH_SelectInterface+0x32>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800ff7e:	2302      	movs	r3, #2
 800ff80:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ff82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff84:	4618      	mov	r0, r3
 800ff86:	3714      	adds	r7, #20
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8e:	4770      	bx	lr

0800ff90 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ff90:	b480      	push	{r7}
 800ff92:	b087      	sub	sp, #28
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	6078      	str	r0, [r7, #4]
 800ff98:	4608      	mov	r0, r1
 800ff9a:	4611      	mov	r1, r2
 800ff9c:	461a      	mov	r2, r3
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	70fb      	strb	r3, [r7, #3]
 800ffa2:	460b      	mov	r3, r1
 800ffa4:	70bb      	strb	r3, [r7, #2]
 800ffa6:	4613      	mov	r3, r2
 800ffa8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800ffaa:	2300      	movs	r3, #0
 800ffac:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800ffae:	2300      	movs	r3, #0
 800ffb0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800ffb2:	687a      	ldr	r2, [r7, #4]
 800ffb4:	f643 1378 	movw	r3, #14712	; 0x3978
 800ffb8:	4413      	add	r3, r2
 800ffba:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ffbc:	e025      	b.n	801000a <USBH_FindInterface+0x7a>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800ffbe:	7dfb      	ldrb	r3, [r7, #23]
 800ffc0:	221a      	movs	r2, #26
 800ffc2:	fb02 f303 	mul.w	r3, r2, r3
 800ffc6:	3308      	adds	r3, #8
 800ffc8:	68fa      	ldr	r2, [r7, #12]
 800ffca:	4413      	add	r3, r2
 800ffcc:	3302      	adds	r3, #2
 800ffce:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ffd0:	693b      	ldr	r3, [r7, #16]
 800ffd2:	795b      	ldrb	r3, [r3, #5]
 800ffd4:	78fa      	ldrb	r2, [r7, #3]
 800ffd6:	429a      	cmp	r2, r3
 800ffd8:	d002      	beq.n	800ffe0 <USBH_FindInterface+0x50>
 800ffda:	78fb      	ldrb	r3, [r7, #3]
 800ffdc:	2bff      	cmp	r3, #255	; 0xff
 800ffde:	d111      	bne.n	8010004 <USBH_FindInterface+0x74>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ffe0:	693b      	ldr	r3, [r7, #16]
 800ffe2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ffe4:	78ba      	ldrb	r2, [r7, #2]
 800ffe6:	429a      	cmp	r2, r3
 800ffe8:	d002      	beq.n	800fff0 <USBH_FindInterface+0x60>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ffea:	78bb      	ldrb	r3, [r7, #2]
 800ffec:	2bff      	cmp	r3, #255	; 0xff
 800ffee:	d109      	bne.n	8010004 <USBH_FindInterface+0x74>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800fff0:	693b      	ldr	r3, [r7, #16]
 800fff2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800fff4:	787a      	ldrb	r2, [r7, #1]
 800fff6:	429a      	cmp	r2, r3
 800fff8:	d002      	beq.n	8010000 <USBH_FindInterface+0x70>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800fffa:	787b      	ldrb	r3, [r7, #1]
 800fffc:	2bff      	cmp	r3, #255	; 0xff
 800fffe:	d101      	bne.n	8010004 <USBH_FindInterface+0x74>
    {
      return  if_ix;
 8010000:	7dfb      	ldrb	r3, [r7, #23]
 8010002:	e006      	b.n	8010012 <USBH_FindInterface+0x82>
    }
    if_ix++;
 8010004:	7dfb      	ldrb	r3, [r7, #23]
 8010006:	3301      	adds	r3, #1
 8010008:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 801000a:	7dfb      	ldrb	r3, [r7, #23]
 801000c:	2b01      	cmp	r3, #1
 801000e:	d9d6      	bls.n	800ffbe <USBH_FindInterface+0x2e>
  }
  return 0xFFU;
 8010010:	23ff      	movs	r3, #255	; 0xff
}
 8010012:	4618      	mov	r0, r3
 8010014:	371c      	adds	r7, #28
 8010016:	46bd      	mov	sp, r7
 8010018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001c:	4770      	bx	lr

0801001e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 801001e:	b580      	push	{r7, lr}
 8010020:	b082      	sub	sp, #8
 8010022:	af00      	add	r7, sp, #0
 8010024:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8010026:	6878      	ldr	r0, [r7, #4]
 8010028:	f00a f9e0 	bl	801a3ec <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 801002c:	2101      	movs	r1, #1
 801002e:	6878      	ldr	r0, [r7, #4]
 8010030:	f00a fac5 	bl	801a5be <USBH_LL_DriverVBUS>

  return USBH_OK;
 8010034:	2300      	movs	r3, #0
}
 8010036:	4618      	mov	r0, r3
 8010038:	3708      	adds	r7, #8
 801003a:	46bd      	mov	sp, r7
 801003c:	bd80      	pop	{r7, pc}

0801003e <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 801003e:	b480      	push	{r7}
 8010040:	b083      	sub	sp, #12
 8010042:	af00      	add	r7, sp, #0
 8010044:	6078      	str	r0, [r7, #4]
 8010046:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8010048:	687a      	ldr	r2, [r7, #4]
 801004a:	f643 2304 	movw	r3, #14852	; 0x3a04
 801004e:	4413      	add	r3, r2
 8010050:	683a      	ldr	r2, [r7, #0]
 8010052:	601a      	str	r2, [r3, #0]
}
 8010054:	bf00      	nop
 8010056:	370c      	adds	r7, #12
 8010058:	46bd      	mov	sp, r7
 801005a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005e:	4770      	bx	lr

08010060 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b082      	sub	sp, #8
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8010068:	687a      	ldr	r2, [r7, #4]
 801006a:	f643 2304 	movw	r3, #14852	; 0x3a04
 801006e:	4413      	add	r3, r2
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	1c5a      	adds	r2, r3, #1
 8010074:	6879      	ldr	r1, [r7, #4]
 8010076:	f643 2304 	movw	r3, #14852	; 0x3a04
 801007a:	440b      	add	r3, r1
 801007c:	601a      	str	r2, [r3, #0]
  USBH_HandleSof(phost);
 801007e:	6878      	ldr	r0, [r7, #4]
 8010080:	f000 f804 	bl	801008c <USBH_HandleSof>
}
 8010084:	bf00      	nop
 8010086:	3708      	adds	r7, #8
 8010088:	46bd      	mov	sp, r7
 801008a:	bd80      	pop	{r7, pc}

0801008c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b082      	sub	sp, #8
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	781b      	ldrb	r3, [r3, #0]
 8010098:	b2db      	uxtb	r3, r3
 801009a:	2b0b      	cmp	r3, #11
 801009c:	d10e      	bne.n	80100bc <USBH_HandleSof+0x30>
 801009e:	687a      	ldr	r2, [r7, #4]
 80100a0:	f643 13bc 	movw	r3, #14780	; 0x39bc
 80100a4:	4413      	add	r3, r2
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d007      	beq.n	80100bc <USBH_HandleSof+0x30>
  {
    phost->pActiveClass->SOFProcess(phost);
 80100ac:	687a      	ldr	r2, [r7, #4]
 80100ae:	f643 13bc 	movw	r3, #14780	; 0x39bc
 80100b2:	4413      	add	r3, r2
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	699b      	ldr	r3, [r3, #24]
 80100b8:	6878      	ldr	r0, [r7, #4]
 80100ba:	4798      	blx	r3
  }
}
 80100bc:	bf00      	nop
 80100be:	3708      	adds	r7, #8
 80100c0:	46bd      	mov	sp, r7
 80100c2:	bd80      	pop	{r7, pc}

080100c4 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80100c4:	b480      	push	{r7}
 80100c6:	b083      	sub	sp, #12
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80100cc:	687a      	ldr	r2, [r7, #4]
 80100ce:	f643 1363 	movw	r3, #14691	; 0x3963
 80100d2:	4413      	add	r3, r2
 80100d4:	2201      	movs	r2, #1
 80100d6:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80100d8:	bf00      	nop
}
 80100da:	370c      	adds	r7, #12
 80100dc:	46bd      	mov	sp, r7
 80100de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e2:	4770      	bx	lr

080100e4 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80100e4:	b480      	push	{r7}
 80100e6:	b083      	sub	sp, #12
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80100ec:	687a      	ldr	r2, [r7, #4]
 80100ee:	f643 1363 	movw	r3, #14691	; 0x3963
 80100f2:	4413      	add	r3, r2
 80100f4:	2200      	movs	r2, #0
 80100f6:	701a      	strb	r2, [r3, #0]

  return;
 80100f8:	bf00      	nop
}
 80100fa:	370c      	adds	r7, #12
 80100fc:	46bd      	mov	sp, r7
 80100fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010102:	4770      	bx	lr

08010104 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8010104:	b480      	push	{r7}
 8010106:	b083      	sub	sp, #12
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 801010c:	687a      	ldr	r2, [r7, #4]
 801010e:	f643 1360 	movw	r3, #14688	; 0x3960
 8010112:	4413      	add	r3, r2
 8010114:	2201      	movs	r2, #1
 8010116:	701a      	strb	r2, [r3, #0]
  phost->device.is_disconnected = 0U;
 8010118:	687a      	ldr	r2, [r7, #4]
 801011a:	f643 1361 	movw	r3, #14689	; 0x3961
 801011e:	4413      	add	r3, r2
 8010120:	2200      	movs	r2, #0
 8010122:	701a      	strb	r2, [r3, #0]
  phost->device.is_ReEnumerated = 0U;
 8010124:	687a      	ldr	r2, [r7, #4]
 8010126:	f643 1362 	movw	r3, #14690	; 0x3962
 801012a:	4413      	add	r3, r2
 801012c:	2200      	movs	r2, #0
 801012e:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8010130:	2300      	movs	r3, #0
}
 8010132:	4618      	mov	r0, r3
 8010134:	370c      	adds	r7, #12
 8010136:	46bd      	mov	sp, r7
 8010138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013c:	4770      	bx	lr

0801013e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 801013e:	b580      	push	{r7, lr}
 8010140:	b082      	sub	sp, #8
 8010142:	af00      	add	r7, sp, #0
 8010144:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8010146:	687a      	ldr	r2, [r7, #4]
 8010148:	f643 1361 	movw	r3, #14689	; 0x3961
 801014c:	4413      	add	r3, r2
 801014e:	2201      	movs	r2, #1
 8010150:	701a      	strb	r2, [r3, #0]
  phost->device.is_connected = 0U;
 8010152:	687a      	ldr	r2, [r7, #4]
 8010154:	f643 1360 	movw	r3, #14688	; 0x3960
 8010158:	4413      	add	r3, r2
 801015a:	2200      	movs	r2, #0
 801015c:	701a      	strb	r2, [r3, #0]
  phost->device.PortEnabled = 0U;
 801015e:	687a      	ldr	r2, [r7, #4]
 8010160:	f643 1363 	movw	r3, #14691	; 0x3963
 8010164:	4413      	add	r3, r2
 8010166:	2200      	movs	r2, #0
 8010168:	701a      	strb	r2, [r3, #0]

  /* Stop Host */
  USBH_LL_Stop(phost);
 801016a:	6878      	ldr	r0, [r7, #4]
 801016c:	f00a f95b 	bl	801a426 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	791b      	ldrb	r3, [r3, #4]
 8010174:	4619      	mov	r1, r3
 8010176:	6878      	ldr	r0, [r7, #4]
 8010178:	f000 fadf 	bl	801073a <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	795b      	ldrb	r3, [r3, #5]
 8010180:	4619      	mov	r1, r3
 8010182:	6878      	ldr	r0, [r7, #4]
 8010184:	f000 fad9 	bl	801073a <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8010188:	2300      	movs	r3, #0
}
 801018a:	4618      	mov	r0, r3
 801018c:	3708      	adds	r7, #8
 801018e:	46bd      	mov	sp, r7
 8010190:	bd80      	pop	{r7, pc}

08010192 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8010192:	b580      	push	{r7, lr}
 8010194:	b082      	sub	sp, #8
 8010196:	af00      	add	r7, sp, #0
 8010198:	6078      	str	r0, [r7, #4]
 801019a:	460b      	mov	r3, r1
 801019c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	789b      	ldrb	r3, [r3, #2]
 80101a2:	2b01      	cmp	r3, #1
 80101a4:	d10f      	bne.n	80101c6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	2202      	movs	r2, #2
 80101aa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	2201      	movs	r2, #1
 80101b0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	2200      	movs	r2, #0
 80101b6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80101b8:	78fb      	ldrb	r3, [r7, #3]
 80101ba:	b29a      	uxth	r2, r3
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	2200      	movs	r2, #0
 80101c4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80101c6:	2200      	movs	r2, #0
 80101c8:	2100      	movs	r1, #0
 80101ca:	6878      	ldr	r0, [r7, #4]
 80101cc:	f000 f805 	bl	80101da <USBH_CtlReq>
 80101d0:	4603      	mov	r3, r0
}
 80101d2:	4618      	mov	r0, r3
 80101d4:	3708      	adds	r7, #8
 80101d6:	46bd      	mov	sp, r7
 80101d8:	bd80      	pop	{r7, pc}

080101da <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80101da:	b580      	push	{r7, lr}
 80101dc:	b086      	sub	sp, #24
 80101de:	af00      	add	r7, sp, #0
 80101e0:	60f8      	str	r0, [r7, #12]
 80101e2:	60b9      	str	r1, [r7, #8]
 80101e4:	4613      	mov	r3, r2
 80101e6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80101e8:	2301      	movs	r3, #1
 80101ea:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	789b      	ldrb	r3, [r3, #2]
 80101f0:	2b01      	cmp	r3, #1
 80101f2:	d002      	beq.n	80101fa <USBH_CtlReq+0x20>
 80101f4:	2b02      	cmp	r3, #2
 80101f6:	d00f      	beq.n	8010218 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80101f8:	e027      	b.n	801024a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	68ba      	ldr	r2, [r7, #8]
 80101fe:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	88fa      	ldrh	r2, [r7, #6]
 8010204:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	2201      	movs	r2, #1
 801020a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	2202      	movs	r2, #2
 8010210:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8010212:	2301      	movs	r3, #1
 8010214:	75fb      	strb	r3, [r7, #23]
      break;
 8010216:	e018      	b.n	801024a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8010218:	68f8      	ldr	r0, [r7, #12]
 801021a:	f000 f81b 	bl	8010254 <USBH_HandleControl>
 801021e:	4603      	mov	r3, r0
 8010220:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8010222:	7dfb      	ldrb	r3, [r7, #23]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d002      	beq.n	801022e <USBH_CtlReq+0x54>
 8010228:	7dfb      	ldrb	r3, [r7, #23]
 801022a:	2b03      	cmp	r3, #3
 801022c:	d106      	bne.n	801023c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	2201      	movs	r2, #1
 8010232:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	2200      	movs	r2, #0
 8010238:	761a      	strb	r2, [r3, #24]
      break;
 801023a:	e005      	b.n	8010248 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 801023c:	7dfb      	ldrb	r3, [r7, #23]
 801023e:	2b02      	cmp	r3, #2
 8010240:	d102      	bne.n	8010248 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	2201      	movs	r2, #1
 8010246:	709a      	strb	r2, [r3, #2]
      break;
 8010248:	bf00      	nop
  }
  return status;
 801024a:	7dfb      	ldrb	r3, [r7, #23]
}
 801024c:	4618      	mov	r0, r3
 801024e:	3718      	adds	r7, #24
 8010250:	46bd      	mov	sp, r7
 8010252:	bd80      	pop	{r7, pc}

08010254 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b086      	sub	sp, #24
 8010258:	af02      	add	r7, sp, #8
 801025a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 801025c:	2301      	movs	r3, #1
 801025e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010260:	2300      	movs	r3, #0
 8010262:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	7e1b      	ldrb	r3, [r3, #24]
 8010268:	3b01      	subs	r3, #1
 801026a:	2b0a      	cmp	r3, #10
 801026c:	f200 8160 	bhi.w	8010530 <USBH_HandleControl+0x2dc>
 8010270:	a201      	add	r2, pc, #4	; (adr r2, 8010278 <USBH_HandleControl+0x24>)
 8010272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010276:	bf00      	nop
 8010278:	080102a5 	.word	0x080102a5
 801027c:	080102bf 	.word	0x080102bf
 8010280:	08010329 	.word	0x08010329
 8010284:	08010353 	.word	0x08010353
 8010288:	0801038b 	.word	0x0801038b
 801028c:	080103b9 	.word	0x080103b9
 8010290:	0801040b 	.word	0x0801040b
 8010294:	08010431 	.word	0x08010431
 8010298:	0801046d 	.word	0x0801046d
 801029c:	08010497 	.word	0x08010497
 80102a0:	080104d5 	.word	0x080104d5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	f103 0110 	add.w	r1, r3, #16
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	795b      	ldrb	r3, [r3, #5]
 80102ae:	461a      	mov	r2, r3
 80102b0:	6878      	ldr	r0, [r7, #4]
 80102b2:	f000 f94d 	bl	8010550 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	2202      	movs	r2, #2
 80102ba:	761a      	strb	r2, [r3, #24]
      break;
 80102bc:	e143      	b.n	8010546 <USBH_HandleControl+0x2f2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	795b      	ldrb	r3, [r3, #5]
 80102c2:	4619      	mov	r1, r3
 80102c4:	6878      	ldr	r0, [r7, #4]
 80102c6:	f00a f965 	bl	801a594 <USBH_LL_GetURBState>
 80102ca:	4603      	mov	r3, r0
 80102cc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80102ce:	7bbb      	ldrb	r3, [r7, #14]
 80102d0:	2b01      	cmp	r3, #1
 80102d2:	d11e      	bne.n	8010312 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	7c1b      	ldrb	r3, [r3, #16]
 80102d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80102dc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	8adb      	ldrh	r3, [r3, #22]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d00a      	beq.n	80102fc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80102e6:	7b7b      	ldrb	r3, [r7, #13]
 80102e8:	2b80      	cmp	r3, #128	; 0x80
 80102ea:	d103      	bne.n	80102f4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	2203      	movs	r2, #3
 80102f0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80102f2:	e11f      	b.n	8010534 <USBH_HandleControl+0x2e0>
            phost->Control.state = CTRL_DATA_OUT;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2205      	movs	r2, #5
 80102f8:	761a      	strb	r2, [r3, #24]
      break;
 80102fa:	e11b      	b.n	8010534 <USBH_HandleControl+0x2e0>
          if (direction == USB_D2H)
 80102fc:	7b7b      	ldrb	r3, [r7, #13]
 80102fe:	2b80      	cmp	r3, #128	; 0x80
 8010300:	d103      	bne.n	801030a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	2209      	movs	r2, #9
 8010306:	761a      	strb	r2, [r3, #24]
      break;
 8010308:	e114      	b.n	8010534 <USBH_HandleControl+0x2e0>
            phost->Control.state = CTRL_STATUS_IN;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	2207      	movs	r2, #7
 801030e:	761a      	strb	r2, [r3, #24]
      break;
 8010310:	e110      	b.n	8010534 <USBH_HandleControl+0x2e0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8010312:	7bbb      	ldrb	r3, [r7, #14]
 8010314:	2b04      	cmp	r3, #4
 8010316:	d003      	beq.n	8010320 <USBH_HandleControl+0xcc>
 8010318:	7bbb      	ldrb	r3, [r7, #14]
 801031a:	2b02      	cmp	r3, #2
 801031c:	f040 810a 	bne.w	8010534 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	220b      	movs	r2, #11
 8010324:	761a      	strb	r2, [r3, #24]
      break;
 8010326:	e105      	b.n	8010534 <USBH_HandleControl+0x2e0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8010328:	687a      	ldr	r2, [r7, #4]
 801032a:	f643 2304 	movw	r3, #14852	; 0x3a04
 801032e:	4413      	add	r3, r2
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	b29a      	uxth	r2, r3
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	6899      	ldr	r1, [r3, #8]
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	899a      	ldrh	r2, [r3, #12]
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	791b      	ldrb	r3, [r3, #4]
 8010344:	6878      	ldr	r0, [r7, #4]
 8010346:	f000 f944 	bl	80105d2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	2204      	movs	r2, #4
 801034e:	761a      	strb	r2, [r3, #24]
      break;
 8010350:	e0f9      	b.n	8010546 <USBH_HandleControl+0x2f2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	791b      	ldrb	r3, [r3, #4]
 8010356:	4619      	mov	r1, r3
 8010358:	6878      	ldr	r0, [r7, #4]
 801035a:	f00a f91b 	bl	801a594 <USBH_LL_GetURBState>
 801035e:	4603      	mov	r3, r0
 8010360:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8010362:	7bbb      	ldrb	r3, [r7, #14]
 8010364:	2b01      	cmp	r3, #1
 8010366:	d102      	bne.n	801036e <USBH_HandleControl+0x11a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	2209      	movs	r2, #9
 801036c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 801036e:	7bbb      	ldrb	r3, [r7, #14]
 8010370:	2b05      	cmp	r3, #5
 8010372:	d102      	bne.n	801037a <USBH_HandleControl+0x126>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8010374:	2303      	movs	r3, #3
 8010376:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8010378:	e0de      	b.n	8010538 <USBH_HandleControl+0x2e4>
        if (URB_Status == USBH_URB_ERROR)
 801037a:	7bbb      	ldrb	r3, [r7, #14]
 801037c:	2b04      	cmp	r3, #4
 801037e:	f040 80db 	bne.w	8010538 <USBH_HandleControl+0x2e4>
          phost->Control.state = CTRL_ERROR;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	220b      	movs	r2, #11
 8010386:	761a      	strb	r2, [r3, #24]
      break;
 8010388:	e0d6      	b.n	8010538 <USBH_HandleControl+0x2e4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	6899      	ldr	r1, [r3, #8]
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	899a      	ldrh	r2, [r3, #12]
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	795b      	ldrb	r3, [r3, #5]
 8010396:	2001      	movs	r0, #1
 8010398:	9000      	str	r0, [sp, #0]
 801039a:	6878      	ldr	r0, [r7, #4]
 801039c:	f000 f8f2 	bl	8010584 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80103a0:	687a      	ldr	r2, [r7, #4]
 80103a2:	f643 2304 	movw	r3, #14852	; 0x3a04
 80103a6:	4413      	add	r3, r2
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	b29a      	uxth	r2, r3
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	2206      	movs	r2, #6
 80103b4:	761a      	strb	r2, [r3, #24]
      break;
 80103b6:	e0c6      	b.n	8010546 <USBH_HandleControl+0x2f2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	795b      	ldrb	r3, [r3, #5]
 80103bc:	4619      	mov	r1, r3
 80103be:	6878      	ldr	r0, [r7, #4]
 80103c0:	f00a f8e8 	bl	801a594 <USBH_LL_GetURBState>
 80103c4:	4603      	mov	r3, r0
 80103c6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80103c8:	7bbb      	ldrb	r3, [r7, #14]
 80103ca:	2b01      	cmp	r3, #1
 80103cc:	d103      	bne.n	80103d6 <USBH_HandleControl+0x182>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	2207      	movs	r2, #7
 80103d2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80103d4:	e0b2      	b.n	801053c <USBH_HandleControl+0x2e8>
      else if (URB_Status == USBH_URB_STALL)
 80103d6:	7bbb      	ldrb	r3, [r7, #14]
 80103d8:	2b05      	cmp	r3, #5
 80103da:	d105      	bne.n	80103e8 <USBH_HandleControl+0x194>
        phost->Control.state = CTRL_STALLED;
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	220c      	movs	r2, #12
 80103e0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80103e2:	2303      	movs	r3, #3
 80103e4:	73fb      	strb	r3, [r7, #15]
      break;
 80103e6:	e0a9      	b.n	801053c <USBH_HandleControl+0x2e8>
      else if (URB_Status == USBH_URB_NOTREADY)
 80103e8:	7bbb      	ldrb	r3, [r7, #14]
 80103ea:	2b02      	cmp	r3, #2
 80103ec:	d103      	bne.n	80103f6 <USBH_HandleControl+0x1a2>
        phost->Control.state = CTRL_DATA_OUT;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	2205      	movs	r2, #5
 80103f2:	761a      	strb	r2, [r3, #24]
      break;
 80103f4:	e0a2      	b.n	801053c <USBH_HandleControl+0x2e8>
        if (URB_Status == USBH_URB_ERROR)
 80103f6:	7bbb      	ldrb	r3, [r7, #14]
 80103f8:	2b04      	cmp	r3, #4
 80103fa:	f040 809f 	bne.w	801053c <USBH_HandleControl+0x2e8>
          phost->Control.state = CTRL_ERROR;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	220b      	movs	r2, #11
 8010402:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8010404:	2302      	movs	r3, #2
 8010406:	73fb      	strb	r3, [r7, #15]
      break;
 8010408:	e098      	b.n	801053c <USBH_HandleControl+0x2e8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	791b      	ldrb	r3, [r3, #4]
 801040e:	2200      	movs	r2, #0
 8010410:	2100      	movs	r1, #0
 8010412:	6878      	ldr	r0, [r7, #4]
 8010414:	f000 f8dd 	bl	80105d2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010418:	687a      	ldr	r2, [r7, #4]
 801041a:	f643 2304 	movw	r3, #14852	; 0x3a04
 801041e:	4413      	add	r3, r2
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	b29a      	uxth	r2, r3
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	2208      	movs	r2, #8
 801042c:	761a      	strb	r2, [r3, #24]

      break;
 801042e:	e08a      	b.n	8010546 <USBH_HandleControl+0x2f2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	791b      	ldrb	r3, [r3, #4]
 8010434:	4619      	mov	r1, r3
 8010436:	6878      	ldr	r0, [r7, #4]
 8010438:	f00a f8ac 	bl	801a594 <USBH_LL_GetURBState>
 801043c:	4603      	mov	r3, r0
 801043e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8010440:	7bbb      	ldrb	r3, [r7, #14]
 8010442:	2b01      	cmp	r3, #1
 8010444:	d105      	bne.n	8010452 <USBH_HandleControl+0x1fe>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	220d      	movs	r2, #13
 801044a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 801044c:	2300      	movs	r3, #0
 801044e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8010450:	e076      	b.n	8010540 <USBH_HandleControl+0x2ec>
      else if (URB_Status == USBH_URB_ERROR)
 8010452:	7bbb      	ldrb	r3, [r7, #14]
 8010454:	2b04      	cmp	r3, #4
 8010456:	d103      	bne.n	8010460 <USBH_HandleControl+0x20c>
        phost->Control.state = CTRL_ERROR;
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	220b      	movs	r2, #11
 801045c:	761a      	strb	r2, [r3, #24]
      break;
 801045e:	e06f      	b.n	8010540 <USBH_HandleControl+0x2ec>
        if (URB_Status == USBH_URB_STALL)
 8010460:	7bbb      	ldrb	r3, [r7, #14]
 8010462:	2b05      	cmp	r3, #5
 8010464:	d16c      	bne.n	8010540 <USBH_HandleControl+0x2ec>
          status = USBH_NOT_SUPPORTED;
 8010466:	2303      	movs	r3, #3
 8010468:	73fb      	strb	r3, [r7, #15]
      break;
 801046a:	e069      	b.n	8010540 <USBH_HandleControl+0x2ec>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	795b      	ldrb	r3, [r3, #5]
 8010470:	2201      	movs	r2, #1
 8010472:	9200      	str	r2, [sp, #0]
 8010474:	2200      	movs	r2, #0
 8010476:	2100      	movs	r1, #0
 8010478:	6878      	ldr	r0, [r7, #4]
 801047a:	f000 f883 	bl	8010584 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 801047e:	687a      	ldr	r2, [r7, #4]
 8010480:	f643 2304 	movw	r3, #14852	; 0x3a04
 8010484:	4413      	add	r3, r2
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	b29a      	uxth	r2, r3
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	220a      	movs	r2, #10
 8010492:	761a      	strb	r2, [r3, #24]
      break;
 8010494:	e057      	b.n	8010546 <USBH_HandleControl+0x2f2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	795b      	ldrb	r3, [r3, #5]
 801049a:	4619      	mov	r1, r3
 801049c:	6878      	ldr	r0, [r7, #4]
 801049e:	f00a f879 	bl	801a594 <USBH_LL_GetURBState>
 80104a2:	4603      	mov	r3, r0
 80104a4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80104a6:	7bbb      	ldrb	r3, [r7, #14]
 80104a8:	2b01      	cmp	r3, #1
 80104aa:	d105      	bne.n	80104b8 <USBH_HandleControl+0x264>
      {
        status = USBH_OK;
 80104ac:	2300      	movs	r3, #0
 80104ae:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	220d      	movs	r2, #13
 80104b4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80104b6:	e045      	b.n	8010544 <USBH_HandleControl+0x2f0>
      else if (URB_Status == USBH_URB_NOTREADY)
 80104b8:	7bbb      	ldrb	r3, [r7, #14]
 80104ba:	2b02      	cmp	r3, #2
 80104bc:	d103      	bne.n	80104c6 <USBH_HandleControl+0x272>
        phost->Control.state = CTRL_STATUS_OUT;
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	2209      	movs	r2, #9
 80104c2:	761a      	strb	r2, [r3, #24]
      break;
 80104c4:	e03e      	b.n	8010544 <USBH_HandleControl+0x2f0>
        if (URB_Status == USBH_URB_ERROR)
 80104c6:	7bbb      	ldrb	r3, [r7, #14]
 80104c8:	2b04      	cmp	r3, #4
 80104ca:	d13b      	bne.n	8010544 <USBH_HandleControl+0x2f0>
          phost->Control.state = CTRL_ERROR;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	220b      	movs	r2, #11
 80104d0:	761a      	strb	r2, [r3, #24]
      break;
 80104d2:	e037      	b.n	8010544 <USBH_HandleControl+0x2f0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	7e5b      	ldrb	r3, [r3, #25]
 80104d8:	3301      	adds	r3, #1
 80104da:	b2da      	uxtb	r2, r3
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	765a      	strb	r2, [r3, #25]
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	7e5b      	ldrb	r3, [r3, #25]
 80104e4:	2b02      	cmp	r3, #2
 80104e6:	d806      	bhi.n	80104f6 <USBH_HandleControl+0x2a2>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	2201      	movs	r2, #1
 80104ec:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	2201      	movs	r2, #1
 80104f2:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80104f4:	e027      	b.n	8010546 <USBH_HandleControl+0x2f2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80104f6:	687a      	ldr	r2, [r7, #4]
 80104f8:	f643 2314 	movw	r3, #14868	; 0x3a14
 80104fc:	4413      	add	r3, r2
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	2106      	movs	r1, #6
 8010502:	6878      	ldr	r0, [r7, #4]
 8010504:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	2200      	movs	r2, #0
 801050a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	795b      	ldrb	r3, [r3, #5]
 8010510:	4619      	mov	r1, r3
 8010512:	6878      	ldr	r0, [r7, #4]
 8010514:	f000 f911 	bl	801073a <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	791b      	ldrb	r3, [r3, #4]
 801051c:	4619      	mov	r1, r3
 801051e:	6878      	ldr	r0, [r7, #4]
 8010520:	f000 f90b 	bl	801073a <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	2200      	movs	r2, #0
 8010528:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 801052a:	2302      	movs	r3, #2
 801052c:	73fb      	strb	r3, [r7, #15]
      break;
 801052e:	e00a      	b.n	8010546 <USBH_HandleControl+0x2f2>

    default:
      break;
 8010530:	bf00      	nop
 8010532:	e008      	b.n	8010546 <USBH_HandleControl+0x2f2>
      break;
 8010534:	bf00      	nop
 8010536:	e006      	b.n	8010546 <USBH_HandleControl+0x2f2>
      break;
 8010538:	bf00      	nop
 801053a:	e004      	b.n	8010546 <USBH_HandleControl+0x2f2>
      break;
 801053c:	bf00      	nop
 801053e:	e002      	b.n	8010546 <USBH_HandleControl+0x2f2>
      break;
 8010540:	bf00      	nop
 8010542:	e000      	b.n	8010546 <USBH_HandleControl+0x2f2>
      break;
 8010544:	bf00      	nop
  }

  return status;
 8010546:	7bfb      	ldrb	r3, [r7, #15]
}
 8010548:	4618      	mov	r0, r3
 801054a:	3710      	adds	r7, #16
 801054c:	46bd      	mov	sp, r7
 801054e:	bd80      	pop	{r7, pc}

08010550 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b088      	sub	sp, #32
 8010554:	af04      	add	r7, sp, #16
 8010556:	60f8      	str	r0, [r7, #12]
 8010558:	60b9      	str	r1, [r7, #8]
 801055a:	4613      	mov	r3, r2
 801055c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801055e:	79f9      	ldrb	r1, [r7, #7]
 8010560:	2300      	movs	r3, #0
 8010562:	9303      	str	r3, [sp, #12]
 8010564:	2308      	movs	r3, #8
 8010566:	9302      	str	r3, [sp, #8]
 8010568:	68bb      	ldr	r3, [r7, #8]
 801056a:	9301      	str	r3, [sp, #4]
 801056c:	2300      	movs	r3, #0
 801056e:	9300      	str	r3, [sp, #0]
 8010570:	2300      	movs	r3, #0
 8010572:	2200      	movs	r2, #0
 8010574:	68f8      	ldr	r0, [r7, #12]
 8010576:	f009 ffda 	bl	801a52e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 801057a:	2300      	movs	r3, #0
}
 801057c:	4618      	mov	r0, r3
 801057e:	3710      	adds	r7, #16
 8010580:	46bd      	mov	sp, r7
 8010582:	bd80      	pop	{r7, pc}

08010584 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8010584:	b580      	push	{r7, lr}
 8010586:	b088      	sub	sp, #32
 8010588:	af04      	add	r7, sp, #16
 801058a:	60f8      	str	r0, [r7, #12]
 801058c:	60b9      	str	r1, [r7, #8]
 801058e:	4611      	mov	r1, r2
 8010590:	461a      	mov	r2, r3
 8010592:	460b      	mov	r3, r1
 8010594:	80fb      	strh	r3, [r7, #6]
 8010596:	4613      	mov	r3, r2
 8010598:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 801059a:	68fa      	ldr	r2, [r7, #12]
 801059c:	f643 135d 	movw	r3, #14685	; 0x395d
 80105a0:	4413      	add	r3, r2
 80105a2:	781b      	ldrb	r3, [r3, #0]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d001      	beq.n	80105ac <USBH_CtlSendData+0x28>
  {
    do_ping = 0U;
 80105a8:	2300      	movs	r3, #0
 80105aa:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80105ac:	7979      	ldrb	r1, [r7, #5]
 80105ae:	7e3b      	ldrb	r3, [r7, #24]
 80105b0:	9303      	str	r3, [sp, #12]
 80105b2:	88fb      	ldrh	r3, [r7, #6]
 80105b4:	9302      	str	r3, [sp, #8]
 80105b6:	68bb      	ldr	r3, [r7, #8]
 80105b8:	9301      	str	r3, [sp, #4]
 80105ba:	2301      	movs	r3, #1
 80105bc:	9300      	str	r3, [sp, #0]
 80105be:	2300      	movs	r3, #0
 80105c0:	2200      	movs	r2, #0
 80105c2:	68f8      	ldr	r0, [r7, #12]
 80105c4:	f009 ffb3 	bl	801a52e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80105c8:	2300      	movs	r3, #0
}
 80105ca:	4618      	mov	r0, r3
 80105cc:	3710      	adds	r7, #16
 80105ce:	46bd      	mov	sp, r7
 80105d0:	bd80      	pop	{r7, pc}

080105d2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80105d2:	b580      	push	{r7, lr}
 80105d4:	b088      	sub	sp, #32
 80105d6:	af04      	add	r7, sp, #16
 80105d8:	60f8      	str	r0, [r7, #12]
 80105da:	60b9      	str	r1, [r7, #8]
 80105dc:	4611      	mov	r1, r2
 80105de:	461a      	mov	r2, r3
 80105e0:	460b      	mov	r3, r1
 80105e2:	80fb      	strh	r3, [r7, #6]
 80105e4:	4613      	mov	r3, r2
 80105e6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80105e8:	7979      	ldrb	r1, [r7, #5]
 80105ea:	2300      	movs	r3, #0
 80105ec:	9303      	str	r3, [sp, #12]
 80105ee:	88fb      	ldrh	r3, [r7, #6]
 80105f0:	9302      	str	r3, [sp, #8]
 80105f2:	68bb      	ldr	r3, [r7, #8]
 80105f4:	9301      	str	r3, [sp, #4]
 80105f6:	2301      	movs	r3, #1
 80105f8:	9300      	str	r3, [sp, #0]
 80105fa:	2300      	movs	r3, #0
 80105fc:	2201      	movs	r2, #1
 80105fe:	68f8      	ldr	r0, [r7, #12]
 8010600:	f009 ff95 	bl	801a52e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8010604:	2300      	movs	r3, #0

}
 8010606:	4618      	mov	r0, r3
 8010608:	3710      	adds	r7, #16
 801060a:	46bd      	mov	sp, r7
 801060c:	bd80      	pop	{r7, pc}

0801060e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 801060e:	b580      	push	{r7, lr}
 8010610:	b088      	sub	sp, #32
 8010612:	af04      	add	r7, sp, #16
 8010614:	60f8      	str	r0, [r7, #12]
 8010616:	60b9      	str	r1, [r7, #8]
 8010618:	4611      	mov	r1, r2
 801061a:	461a      	mov	r2, r3
 801061c:	460b      	mov	r3, r1
 801061e:	80fb      	strh	r3, [r7, #6]
 8010620:	4613      	mov	r3, r2
 8010622:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8010624:	68fa      	ldr	r2, [r7, #12]
 8010626:	f643 135d 	movw	r3, #14685	; 0x395d
 801062a:	4413      	add	r3, r2
 801062c:	781b      	ldrb	r3, [r3, #0]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d001      	beq.n	8010636 <USBH_BulkSendData+0x28>
  {
    do_ping = 0U;
 8010632:	2300      	movs	r3, #0
 8010634:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8010636:	7979      	ldrb	r1, [r7, #5]
 8010638:	7e3b      	ldrb	r3, [r7, #24]
 801063a:	9303      	str	r3, [sp, #12]
 801063c:	88fb      	ldrh	r3, [r7, #6]
 801063e:	9302      	str	r3, [sp, #8]
 8010640:	68bb      	ldr	r3, [r7, #8]
 8010642:	9301      	str	r3, [sp, #4]
 8010644:	2301      	movs	r3, #1
 8010646:	9300      	str	r3, [sp, #0]
 8010648:	2302      	movs	r3, #2
 801064a:	2200      	movs	r2, #0
 801064c:	68f8      	ldr	r0, [r7, #12]
 801064e:	f009 ff6e 	bl	801a52e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8010652:	2300      	movs	r3, #0
}
 8010654:	4618      	mov	r0, r3
 8010656:	3710      	adds	r7, #16
 8010658:	46bd      	mov	sp, r7
 801065a:	bd80      	pop	{r7, pc}

0801065c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 801065c:	b580      	push	{r7, lr}
 801065e:	b088      	sub	sp, #32
 8010660:	af04      	add	r7, sp, #16
 8010662:	60f8      	str	r0, [r7, #12]
 8010664:	60b9      	str	r1, [r7, #8]
 8010666:	4611      	mov	r1, r2
 8010668:	461a      	mov	r2, r3
 801066a:	460b      	mov	r3, r1
 801066c:	80fb      	strh	r3, [r7, #6]
 801066e:	4613      	mov	r3, r2
 8010670:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8010672:	7979      	ldrb	r1, [r7, #5]
 8010674:	2300      	movs	r3, #0
 8010676:	9303      	str	r3, [sp, #12]
 8010678:	88fb      	ldrh	r3, [r7, #6]
 801067a:	9302      	str	r3, [sp, #8]
 801067c:	68bb      	ldr	r3, [r7, #8]
 801067e:	9301      	str	r3, [sp, #4]
 8010680:	2301      	movs	r3, #1
 8010682:	9300      	str	r3, [sp, #0]
 8010684:	2302      	movs	r3, #2
 8010686:	2201      	movs	r2, #1
 8010688:	68f8      	ldr	r0, [r7, #12]
 801068a:	f009 ff50 	bl	801a52e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 801068e:	2300      	movs	r3, #0
}
 8010690:	4618      	mov	r0, r3
 8010692:	3710      	adds	r7, #16
 8010694:	46bd      	mov	sp, r7
 8010696:	bd80      	pop	{r7, pc}

08010698 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010698:	b580      	push	{r7, lr}
 801069a:	b086      	sub	sp, #24
 801069c:	af04      	add	r7, sp, #16
 801069e:	6078      	str	r0, [r7, #4]
 80106a0:	4608      	mov	r0, r1
 80106a2:	4611      	mov	r1, r2
 80106a4:	461a      	mov	r2, r3
 80106a6:	4603      	mov	r3, r0
 80106a8:	70fb      	strb	r3, [r7, #3]
 80106aa:	460b      	mov	r3, r1
 80106ac:	70bb      	strb	r3, [r7, #2]
 80106ae:	4613      	mov	r3, r2
 80106b0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80106b2:	7878      	ldrb	r0, [r7, #1]
 80106b4:	78ba      	ldrb	r2, [r7, #2]
 80106b6:	78f9      	ldrb	r1, [r7, #3]
 80106b8:	8b3b      	ldrh	r3, [r7, #24]
 80106ba:	9302      	str	r3, [sp, #8]
 80106bc:	7d3b      	ldrb	r3, [r7, #20]
 80106be:	9301      	str	r3, [sp, #4]
 80106c0:	7c3b      	ldrb	r3, [r7, #16]
 80106c2:	9300      	str	r3, [sp, #0]
 80106c4:	4603      	mov	r3, r0
 80106c6:	6878      	ldr	r0, [r7, #4]
 80106c8:	f009 fedf 	bl	801a48a <USBH_LL_OpenPipe>

  return USBH_OK;
 80106cc:	2300      	movs	r3, #0
}
 80106ce:	4618      	mov	r0, r3
 80106d0:	3708      	adds	r7, #8
 80106d2:	46bd      	mov	sp, r7
 80106d4:	bd80      	pop	{r7, pc}

080106d6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80106d6:	b580      	push	{r7, lr}
 80106d8:	b082      	sub	sp, #8
 80106da:	af00      	add	r7, sp, #0
 80106dc:	6078      	str	r0, [r7, #4]
 80106de:	460b      	mov	r3, r1
 80106e0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80106e2:	78fb      	ldrb	r3, [r7, #3]
 80106e4:	4619      	mov	r1, r3
 80106e6:	6878      	ldr	r0, [r7, #4]
 80106e8:	f009 ff00 	bl	801a4ec <USBH_LL_ClosePipe>

  return USBH_OK;
 80106ec:	2300      	movs	r3, #0
}
 80106ee:	4618      	mov	r0, r3
 80106f0:	3708      	adds	r7, #8
 80106f2:	46bd      	mov	sp, r7
 80106f4:	bd80      	pop	{r7, pc}

080106f6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80106f6:	b580      	push	{r7, lr}
 80106f8:	b084      	sub	sp, #16
 80106fa:	af00      	add	r7, sp, #0
 80106fc:	6078      	str	r0, [r7, #4]
 80106fe:	460b      	mov	r3, r1
 8010700:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8010702:	6878      	ldr	r0, [r7, #4]
 8010704:	f000 f839 	bl	801077a <USBH_GetFreePipe>
 8010708:	4603      	mov	r3, r0
 801070a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 801070c:	89fb      	ldrh	r3, [r7, #14]
 801070e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010712:	4293      	cmp	r3, r2
 8010714:	d00b      	beq.n	801072e <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8010716:	78fa      	ldrb	r2, [r7, #3]
 8010718:	89fb      	ldrh	r3, [r7, #14]
 801071a:	f003 030f 	and.w	r3, r3, #15
 801071e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010722:	6879      	ldr	r1, [r7, #4]
 8010724:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 8010728:	009b      	lsls	r3, r3, #2
 801072a:	440b      	add	r3, r1
 801072c:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 801072e:	89fb      	ldrh	r3, [r7, #14]
 8010730:	b2db      	uxtb	r3, r3
}
 8010732:	4618      	mov	r0, r3
 8010734:	3710      	adds	r7, #16
 8010736:	46bd      	mov	sp, r7
 8010738:	bd80      	pop	{r7, pc}

0801073a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 801073a:	b480      	push	{r7}
 801073c:	b083      	sub	sp, #12
 801073e:	af00      	add	r7, sp, #0
 8010740:	6078      	str	r0, [r7, #4]
 8010742:	460b      	mov	r3, r1
 8010744:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8010746:	78fb      	ldrb	r3, [r7, #3]
 8010748:	2b0a      	cmp	r3, #10
 801074a:	d80f      	bhi.n	801076c <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 801074c:	78fb      	ldrb	r3, [r7, #3]
 801074e:	687a      	ldr	r2, [r7, #4]
 8010750:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 8010754:	009b      	lsls	r3, r3, #2
 8010756:	4413      	add	r3, r2
 8010758:	685a      	ldr	r2, [r3, #4]
 801075a:	78fb      	ldrb	r3, [r7, #3]
 801075c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8010760:	6879      	ldr	r1, [r7, #4]
 8010762:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 8010766:	009b      	lsls	r3, r3, #2
 8010768:	440b      	add	r3, r1
 801076a:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 801076c:	2300      	movs	r3, #0
}
 801076e:	4618      	mov	r0, r3
 8010770:	370c      	adds	r7, #12
 8010772:	46bd      	mov	sp, r7
 8010774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010778:	4770      	bx	lr

0801077a <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 801077a:	b480      	push	{r7}
 801077c:	b085      	sub	sp, #20
 801077e:	af00      	add	r7, sp, #0
 8010780:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8010782:	2300      	movs	r3, #0
 8010784:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8010786:	2300      	movs	r3, #0
 8010788:	73fb      	strb	r3, [r7, #15]
 801078a:	e010      	b.n	80107ae <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 801078c:	7bfb      	ldrb	r3, [r7, #15]
 801078e:	687a      	ldr	r2, [r7, #4]
 8010790:	f503 6367 	add.w	r3, r3, #3696	; 0xe70
 8010794:	009b      	lsls	r3, r3, #2
 8010796:	4413      	add	r3, r2
 8010798:	685b      	ldr	r3, [r3, #4]
 801079a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d102      	bne.n	80107a8 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 80107a2:	7bfb      	ldrb	r3, [r7, #15]
 80107a4:	b29b      	uxth	r3, r3
 80107a6:	e007      	b.n	80107b8 <USBH_GetFreePipe+0x3e>
  for (idx = 0U ; idx < 11U ; idx++)
 80107a8:	7bfb      	ldrb	r3, [r7, #15]
 80107aa:	3301      	adds	r3, #1
 80107ac:	73fb      	strb	r3, [r7, #15]
 80107ae:	7bfb      	ldrb	r3, [r7, #15]
 80107b0:	2b0a      	cmp	r3, #10
 80107b2:	d9eb      	bls.n	801078c <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80107b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80107b8:	4618      	mov	r0, r3
 80107ba:	3714      	adds	r7, #20
 80107bc:	46bd      	mov	sp, r7
 80107be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c2:	4770      	bx	lr

080107c4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80107c4:	b480      	push	{r7}
 80107c6:	b085      	sub	sp, #20
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	4603      	mov	r3, r0
 80107cc:	6039      	str	r1, [r7, #0]
 80107ce:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80107d0:	88fb      	ldrh	r3, [r7, #6]
 80107d2:	2b7f      	cmp	r3, #127	; 0x7f
 80107d4:	d802      	bhi.n	80107dc <ff_convert+0x18>
		c = chr;
 80107d6:	88fb      	ldrh	r3, [r7, #6]
 80107d8:	81fb      	strh	r3, [r7, #14]
 80107da:	e025      	b.n	8010828 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80107dc:	683b      	ldr	r3, [r7, #0]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d00b      	beq.n	80107fa <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80107e2:	88fb      	ldrh	r3, [r7, #6]
 80107e4:	2bff      	cmp	r3, #255	; 0xff
 80107e6:	d805      	bhi.n	80107f4 <ff_convert+0x30>
 80107e8:	88fb      	ldrh	r3, [r7, #6]
 80107ea:	3b80      	subs	r3, #128	; 0x80
 80107ec:	4a12      	ldr	r2, [pc, #72]	; (8010838 <ff_convert+0x74>)
 80107ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80107f2:	e000      	b.n	80107f6 <ff_convert+0x32>
 80107f4:	2300      	movs	r3, #0
 80107f6:	81fb      	strh	r3, [r7, #14]
 80107f8:	e016      	b.n	8010828 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80107fa:	2300      	movs	r3, #0
 80107fc:	81fb      	strh	r3, [r7, #14]
 80107fe:	e009      	b.n	8010814 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010800:	89fb      	ldrh	r3, [r7, #14]
 8010802:	4a0d      	ldr	r2, [pc, #52]	; (8010838 <ff_convert+0x74>)
 8010804:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010808:	88fa      	ldrh	r2, [r7, #6]
 801080a:	429a      	cmp	r2, r3
 801080c:	d006      	beq.n	801081c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801080e:	89fb      	ldrh	r3, [r7, #14]
 8010810:	3301      	adds	r3, #1
 8010812:	81fb      	strh	r3, [r7, #14]
 8010814:	89fb      	ldrh	r3, [r7, #14]
 8010816:	2b7f      	cmp	r3, #127	; 0x7f
 8010818:	d9f2      	bls.n	8010800 <ff_convert+0x3c>
 801081a:	e000      	b.n	801081e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801081c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801081e:	89fb      	ldrh	r3, [r7, #14]
 8010820:	3380      	adds	r3, #128	; 0x80
 8010822:	b29b      	uxth	r3, r3
 8010824:	b2db      	uxtb	r3, r3
 8010826:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8010828:	89fb      	ldrh	r3, [r7, #14]
}
 801082a:	4618      	mov	r0, r3
 801082c:	3714      	adds	r7, #20
 801082e:	46bd      	mov	sp, r7
 8010830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010834:	4770      	bx	lr
 8010836:	bf00      	nop
 8010838:	08028154 	.word	0x08028154

0801083c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801083c:	b480      	push	{r7}
 801083e:	b087      	sub	sp, #28
 8010840:	af00      	add	r7, sp, #0
 8010842:	4603      	mov	r3, r0
 8010844:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8010846:	88fb      	ldrh	r3, [r7, #6]
 8010848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801084c:	d201      	bcs.n	8010852 <ff_wtoupper+0x16>
 801084e:	4b3e      	ldr	r3, [pc, #248]	; (8010948 <ff_wtoupper+0x10c>)
 8010850:	e000      	b.n	8010854 <ff_wtoupper+0x18>
 8010852:	4b3e      	ldr	r3, [pc, #248]	; (801094c <ff_wtoupper+0x110>)
 8010854:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8010856:	697b      	ldr	r3, [r7, #20]
 8010858:	1c9a      	adds	r2, r3, #2
 801085a:	617a      	str	r2, [r7, #20]
 801085c:	881b      	ldrh	r3, [r3, #0]
 801085e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8010860:	8a7b      	ldrh	r3, [r7, #18]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d068      	beq.n	8010938 <ff_wtoupper+0xfc>
 8010866:	88fa      	ldrh	r2, [r7, #6]
 8010868:	8a7b      	ldrh	r3, [r7, #18]
 801086a:	429a      	cmp	r2, r3
 801086c:	d364      	bcc.n	8010938 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801086e:	697b      	ldr	r3, [r7, #20]
 8010870:	1c9a      	adds	r2, r3, #2
 8010872:	617a      	str	r2, [r7, #20]
 8010874:	881b      	ldrh	r3, [r3, #0]
 8010876:	823b      	strh	r3, [r7, #16]
 8010878:	8a3b      	ldrh	r3, [r7, #16]
 801087a:	0a1b      	lsrs	r3, r3, #8
 801087c:	81fb      	strh	r3, [r7, #14]
 801087e:	8a3b      	ldrh	r3, [r7, #16]
 8010880:	b2db      	uxtb	r3, r3
 8010882:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8010884:	88fa      	ldrh	r2, [r7, #6]
 8010886:	8a79      	ldrh	r1, [r7, #18]
 8010888:	8a3b      	ldrh	r3, [r7, #16]
 801088a:	440b      	add	r3, r1
 801088c:	429a      	cmp	r2, r3
 801088e:	da49      	bge.n	8010924 <ff_wtoupper+0xe8>
			switch (cmd) {
 8010890:	89fb      	ldrh	r3, [r7, #14]
 8010892:	2b08      	cmp	r3, #8
 8010894:	d84f      	bhi.n	8010936 <ff_wtoupper+0xfa>
 8010896:	a201      	add	r2, pc, #4	; (adr r2, 801089c <ff_wtoupper+0x60>)
 8010898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801089c:	080108c1 	.word	0x080108c1
 80108a0:	080108d3 	.word	0x080108d3
 80108a4:	080108e9 	.word	0x080108e9
 80108a8:	080108f1 	.word	0x080108f1
 80108ac:	080108f9 	.word	0x080108f9
 80108b0:	08010901 	.word	0x08010901
 80108b4:	08010909 	.word	0x08010909
 80108b8:	08010911 	.word	0x08010911
 80108bc:	08010919 	.word	0x08010919
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80108c0:	88fa      	ldrh	r2, [r7, #6]
 80108c2:	8a7b      	ldrh	r3, [r7, #18]
 80108c4:	1ad3      	subs	r3, r2, r3
 80108c6:	005b      	lsls	r3, r3, #1
 80108c8:	697a      	ldr	r2, [r7, #20]
 80108ca:	4413      	add	r3, r2
 80108cc:	881b      	ldrh	r3, [r3, #0]
 80108ce:	80fb      	strh	r3, [r7, #6]
 80108d0:	e027      	b.n	8010922 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80108d2:	88fa      	ldrh	r2, [r7, #6]
 80108d4:	8a7b      	ldrh	r3, [r7, #18]
 80108d6:	1ad3      	subs	r3, r2, r3
 80108d8:	b29b      	uxth	r3, r3
 80108da:	f003 0301 	and.w	r3, r3, #1
 80108de:	b29b      	uxth	r3, r3
 80108e0:	88fa      	ldrh	r2, [r7, #6]
 80108e2:	1ad3      	subs	r3, r2, r3
 80108e4:	80fb      	strh	r3, [r7, #6]
 80108e6:	e01c      	b.n	8010922 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80108e8:	88fb      	ldrh	r3, [r7, #6]
 80108ea:	3b10      	subs	r3, #16
 80108ec:	80fb      	strh	r3, [r7, #6]
 80108ee:	e018      	b.n	8010922 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80108f0:	88fb      	ldrh	r3, [r7, #6]
 80108f2:	3b20      	subs	r3, #32
 80108f4:	80fb      	strh	r3, [r7, #6]
 80108f6:	e014      	b.n	8010922 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80108f8:	88fb      	ldrh	r3, [r7, #6]
 80108fa:	3b30      	subs	r3, #48	; 0x30
 80108fc:	80fb      	strh	r3, [r7, #6]
 80108fe:	e010      	b.n	8010922 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010900:	88fb      	ldrh	r3, [r7, #6]
 8010902:	3b1a      	subs	r3, #26
 8010904:	80fb      	strh	r3, [r7, #6]
 8010906:	e00c      	b.n	8010922 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010908:	88fb      	ldrh	r3, [r7, #6]
 801090a:	3308      	adds	r3, #8
 801090c:	80fb      	strh	r3, [r7, #6]
 801090e:	e008      	b.n	8010922 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010910:	88fb      	ldrh	r3, [r7, #6]
 8010912:	3b50      	subs	r3, #80	; 0x50
 8010914:	80fb      	strh	r3, [r7, #6]
 8010916:	e004      	b.n	8010922 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8010918:	88fb      	ldrh	r3, [r7, #6]
 801091a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801091e:	80fb      	strh	r3, [r7, #6]
 8010920:	bf00      	nop
			}
			break;
 8010922:	e008      	b.n	8010936 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010924:	89fb      	ldrh	r3, [r7, #14]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d195      	bne.n	8010856 <ff_wtoupper+0x1a>
 801092a:	8a3b      	ldrh	r3, [r7, #16]
 801092c:	005b      	lsls	r3, r3, #1
 801092e:	697a      	ldr	r2, [r7, #20]
 8010930:	4413      	add	r3, r2
 8010932:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010934:	e78f      	b.n	8010856 <ff_wtoupper+0x1a>
			break;
 8010936:	bf00      	nop
	}

	return chr;
 8010938:	88fb      	ldrh	r3, [r7, #6]
}
 801093a:	4618      	mov	r0, r3
 801093c:	371c      	adds	r7, #28
 801093e:	46bd      	mov	sp, r7
 8010940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010944:	4770      	bx	lr
 8010946:	bf00      	nop
 8010948:	08028254 	.word	0x08028254
 801094c:	08028448 	.word	0x08028448

08010950 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b084      	sub	sp, #16
 8010954:	af00      	add	r7, sp, #0
 8010956:	4603      	mov	r3, r0
 8010958:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801095a:	79fb      	ldrb	r3, [r7, #7]
 801095c:	4a08      	ldr	r2, [pc, #32]	; (8010980 <disk_status+0x30>)
 801095e:	009b      	lsls	r3, r3, #2
 8010960:	4413      	add	r3, r2
 8010962:	685b      	ldr	r3, [r3, #4]
 8010964:	685b      	ldr	r3, [r3, #4]
 8010966:	79fa      	ldrb	r2, [r7, #7]
 8010968:	4905      	ldr	r1, [pc, #20]	; (8010980 <disk_status+0x30>)
 801096a:	440a      	add	r2, r1
 801096c:	7a12      	ldrb	r2, [r2, #8]
 801096e:	4610      	mov	r0, r2
 8010970:	4798      	blx	r3
 8010972:	4603      	mov	r3, r0
 8010974:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010976:	7bfb      	ldrb	r3, [r7, #15]
}
 8010978:	4618      	mov	r0, r3
 801097a:	3710      	adds	r7, #16
 801097c:	46bd      	mov	sp, r7
 801097e:	bd80      	pop	{r7, pc}
 8010980:	2400a618 	.word	0x2400a618

08010984 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010984:	b580      	push	{r7, lr}
 8010986:	b084      	sub	sp, #16
 8010988:	af00      	add	r7, sp, #0
 801098a:	4603      	mov	r3, r0
 801098c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801098e:	2300      	movs	r3, #0
 8010990:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010992:	79fb      	ldrb	r3, [r7, #7]
 8010994:	4a0d      	ldr	r2, [pc, #52]	; (80109cc <disk_initialize+0x48>)
 8010996:	5cd3      	ldrb	r3, [r2, r3]
 8010998:	2b00      	cmp	r3, #0
 801099a:	d111      	bne.n	80109c0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 801099c:	79fb      	ldrb	r3, [r7, #7]
 801099e:	4a0b      	ldr	r2, [pc, #44]	; (80109cc <disk_initialize+0x48>)
 80109a0:	2101      	movs	r1, #1
 80109a2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80109a4:	79fb      	ldrb	r3, [r7, #7]
 80109a6:	4a09      	ldr	r2, [pc, #36]	; (80109cc <disk_initialize+0x48>)
 80109a8:	009b      	lsls	r3, r3, #2
 80109aa:	4413      	add	r3, r2
 80109ac:	685b      	ldr	r3, [r3, #4]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	79fa      	ldrb	r2, [r7, #7]
 80109b2:	4906      	ldr	r1, [pc, #24]	; (80109cc <disk_initialize+0x48>)
 80109b4:	440a      	add	r2, r1
 80109b6:	7a12      	ldrb	r2, [r2, #8]
 80109b8:	4610      	mov	r0, r2
 80109ba:	4798      	blx	r3
 80109bc:	4603      	mov	r3, r0
 80109be:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80109c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80109c2:	4618      	mov	r0, r3
 80109c4:	3710      	adds	r7, #16
 80109c6:	46bd      	mov	sp, r7
 80109c8:	bd80      	pop	{r7, pc}
 80109ca:	bf00      	nop
 80109cc:	2400a618 	.word	0x2400a618

080109d0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80109d0:	b590      	push	{r4, r7, lr}
 80109d2:	b087      	sub	sp, #28
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	60b9      	str	r1, [r7, #8]
 80109d8:	607a      	str	r2, [r7, #4]
 80109da:	603b      	str	r3, [r7, #0]
 80109dc:	4603      	mov	r3, r0
 80109de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80109e0:	7bfb      	ldrb	r3, [r7, #15]
 80109e2:	4a0a      	ldr	r2, [pc, #40]	; (8010a0c <disk_read+0x3c>)
 80109e4:	009b      	lsls	r3, r3, #2
 80109e6:	4413      	add	r3, r2
 80109e8:	685b      	ldr	r3, [r3, #4]
 80109ea:	689c      	ldr	r4, [r3, #8]
 80109ec:	7bfb      	ldrb	r3, [r7, #15]
 80109ee:	4a07      	ldr	r2, [pc, #28]	; (8010a0c <disk_read+0x3c>)
 80109f0:	4413      	add	r3, r2
 80109f2:	7a18      	ldrb	r0, [r3, #8]
 80109f4:	683b      	ldr	r3, [r7, #0]
 80109f6:	687a      	ldr	r2, [r7, #4]
 80109f8:	68b9      	ldr	r1, [r7, #8]
 80109fa:	47a0      	blx	r4
 80109fc:	4603      	mov	r3, r0
 80109fe:	75fb      	strb	r3, [r7, #23]
  return res;
 8010a00:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a02:	4618      	mov	r0, r3
 8010a04:	371c      	adds	r7, #28
 8010a06:	46bd      	mov	sp, r7
 8010a08:	bd90      	pop	{r4, r7, pc}
 8010a0a:	bf00      	nop
 8010a0c:	2400a618 	.word	0x2400a618

08010a10 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010a10:	b590      	push	{r4, r7, lr}
 8010a12:	b087      	sub	sp, #28
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	60b9      	str	r1, [r7, #8]
 8010a18:	607a      	str	r2, [r7, #4]
 8010a1a:	603b      	str	r3, [r7, #0]
 8010a1c:	4603      	mov	r3, r0
 8010a1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010a20:	7bfb      	ldrb	r3, [r7, #15]
 8010a22:	4a0a      	ldr	r2, [pc, #40]	; (8010a4c <disk_write+0x3c>)
 8010a24:	009b      	lsls	r3, r3, #2
 8010a26:	4413      	add	r3, r2
 8010a28:	685b      	ldr	r3, [r3, #4]
 8010a2a:	68dc      	ldr	r4, [r3, #12]
 8010a2c:	7bfb      	ldrb	r3, [r7, #15]
 8010a2e:	4a07      	ldr	r2, [pc, #28]	; (8010a4c <disk_write+0x3c>)
 8010a30:	4413      	add	r3, r2
 8010a32:	7a18      	ldrb	r0, [r3, #8]
 8010a34:	683b      	ldr	r3, [r7, #0]
 8010a36:	687a      	ldr	r2, [r7, #4]
 8010a38:	68b9      	ldr	r1, [r7, #8]
 8010a3a:	47a0      	blx	r4
 8010a3c:	4603      	mov	r3, r0
 8010a3e:	75fb      	strb	r3, [r7, #23]
  return res;
 8010a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a42:	4618      	mov	r0, r3
 8010a44:	371c      	adds	r7, #28
 8010a46:	46bd      	mov	sp, r7
 8010a48:	bd90      	pop	{r4, r7, pc}
 8010a4a:	bf00      	nop
 8010a4c:	2400a618 	.word	0x2400a618

08010a50 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010a50:	b580      	push	{r7, lr}
 8010a52:	b084      	sub	sp, #16
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	4603      	mov	r3, r0
 8010a58:	603a      	str	r2, [r7, #0]
 8010a5a:	71fb      	strb	r3, [r7, #7]
 8010a5c:	460b      	mov	r3, r1
 8010a5e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010a60:	79fb      	ldrb	r3, [r7, #7]
 8010a62:	4a09      	ldr	r2, [pc, #36]	; (8010a88 <disk_ioctl+0x38>)
 8010a64:	009b      	lsls	r3, r3, #2
 8010a66:	4413      	add	r3, r2
 8010a68:	685b      	ldr	r3, [r3, #4]
 8010a6a:	691b      	ldr	r3, [r3, #16]
 8010a6c:	79fa      	ldrb	r2, [r7, #7]
 8010a6e:	4906      	ldr	r1, [pc, #24]	; (8010a88 <disk_ioctl+0x38>)
 8010a70:	440a      	add	r2, r1
 8010a72:	7a10      	ldrb	r0, [r2, #8]
 8010a74:	79b9      	ldrb	r1, [r7, #6]
 8010a76:	683a      	ldr	r2, [r7, #0]
 8010a78:	4798      	blx	r3
 8010a7a:	4603      	mov	r3, r0
 8010a7c:	73fb      	strb	r3, [r7, #15]
  return res;
 8010a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a80:	4618      	mov	r0, r3
 8010a82:	3710      	adds	r7, #16
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bd80      	pop	{r7, pc}
 8010a88:	2400a618 	.word	0x2400a618

08010a8c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010a8c:	b480      	push	{r7}
 8010a8e:	b085      	sub	sp, #20
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	3301      	adds	r3, #1
 8010a98:	781b      	ldrb	r3, [r3, #0]
 8010a9a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010a9c:	89fb      	ldrh	r3, [r7, #14]
 8010a9e:	021b      	lsls	r3, r3, #8
 8010aa0:	b21a      	sxth	r2, r3
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	781b      	ldrb	r3, [r3, #0]
 8010aa6:	b21b      	sxth	r3, r3
 8010aa8:	4313      	orrs	r3, r2
 8010aaa:	b21b      	sxth	r3, r3
 8010aac:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010aae:	89fb      	ldrh	r3, [r7, #14]
}
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	3714      	adds	r7, #20
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aba:	4770      	bx	lr

08010abc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010abc:	b480      	push	{r7}
 8010abe:	b085      	sub	sp, #20
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	3303      	adds	r3, #3
 8010ac8:	781b      	ldrb	r3, [r3, #0]
 8010aca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	021b      	lsls	r3, r3, #8
 8010ad0:	687a      	ldr	r2, [r7, #4]
 8010ad2:	3202      	adds	r2, #2
 8010ad4:	7812      	ldrb	r2, [r2, #0]
 8010ad6:	4313      	orrs	r3, r2
 8010ad8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	021b      	lsls	r3, r3, #8
 8010ade:	687a      	ldr	r2, [r7, #4]
 8010ae0:	3201      	adds	r2, #1
 8010ae2:	7812      	ldrb	r2, [r2, #0]
 8010ae4:	4313      	orrs	r3, r2
 8010ae6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	021b      	lsls	r3, r3, #8
 8010aec:	687a      	ldr	r2, [r7, #4]
 8010aee:	7812      	ldrb	r2, [r2, #0]
 8010af0:	4313      	orrs	r3, r2
 8010af2:	60fb      	str	r3, [r7, #12]
	return rv;
 8010af4:	68fb      	ldr	r3, [r7, #12]
}
 8010af6:	4618      	mov	r0, r3
 8010af8:	3714      	adds	r7, #20
 8010afa:	46bd      	mov	sp, r7
 8010afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b00:	4770      	bx	lr

08010b02 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8010b02:	b480      	push	{r7}
 8010b04:	b083      	sub	sp, #12
 8010b06:	af00      	add	r7, sp, #0
 8010b08:	6078      	str	r0, [r7, #4]
 8010b0a:	460b      	mov	r3, r1
 8010b0c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	1c5a      	adds	r2, r3, #1
 8010b12:	607a      	str	r2, [r7, #4]
 8010b14:	887a      	ldrh	r2, [r7, #2]
 8010b16:	b2d2      	uxtb	r2, r2
 8010b18:	701a      	strb	r2, [r3, #0]
 8010b1a:	887b      	ldrh	r3, [r7, #2]
 8010b1c:	0a1b      	lsrs	r3, r3, #8
 8010b1e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	1c5a      	adds	r2, r3, #1
 8010b24:	607a      	str	r2, [r7, #4]
 8010b26:	887a      	ldrh	r2, [r7, #2]
 8010b28:	b2d2      	uxtb	r2, r2
 8010b2a:	701a      	strb	r2, [r3, #0]
}
 8010b2c:	bf00      	nop
 8010b2e:	370c      	adds	r7, #12
 8010b30:	46bd      	mov	sp, r7
 8010b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b36:	4770      	bx	lr

08010b38 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010b38:	b480      	push	{r7}
 8010b3a:	b083      	sub	sp, #12
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
 8010b40:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	1c5a      	adds	r2, r3, #1
 8010b46:	607a      	str	r2, [r7, #4]
 8010b48:	683a      	ldr	r2, [r7, #0]
 8010b4a:	b2d2      	uxtb	r2, r2
 8010b4c:	701a      	strb	r2, [r3, #0]
 8010b4e:	683b      	ldr	r3, [r7, #0]
 8010b50:	0a1b      	lsrs	r3, r3, #8
 8010b52:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	1c5a      	adds	r2, r3, #1
 8010b58:	607a      	str	r2, [r7, #4]
 8010b5a:	683a      	ldr	r2, [r7, #0]
 8010b5c:	b2d2      	uxtb	r2, r2
 8010b5e:	701a      	strb	r2, [r3, #0]
 8010b60:	683b      	ldr	r3, [r7, #0]
 8010b62:	0a1b      	lsrs	r3, r3, #8
 8010b64:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	1c5a      	adds	r2, r3, #1
 8010b6a:	607a      	str	r2, [r7, #4]
 8010b6c:	683a      	ldr	r2, [r7, #0]
 8010b6e:	b2d2      	uxtb	r2, r2
 8010b70:	701a      	strb	r2, [r3, #0]
 8010b72:	683b      	ldr	r3, [r7, #0]
 8010b74:	0a1b      	lsrs	r3, r3, #8
 8010b76:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	1c5a      	adds	r2, r3, #1
 8010b7c:	607a      	str	r2, [r7, #4]
 8010b7e:	683a      	ldr	r2, [r7, #0]
 8010b80:	b2d2      	uxtb	r2, r2
 8010b82:	701a      	strb	r2, [r3, #0]
}
 8010b84:	bf00      	nop
 8010b86:	370c      	adds	r7, #12
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8e:	4770      	bx	lr

08010b90 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010b90:	b480      	push	{r7}
 8010b92:	b087      	sub	sp, #28
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	60f8      	str	r0, [r7, #12]
 8010b98:	60b9      	str	r1, [r7, #8]
 8010b9a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010ba0:	68bb      	ldr	r3, [r7, #8]
 8010ba2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d00d      	beq.n	8010bc6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8010baa:	693a      	ldr	r2, [r7, #16]
 8010bac:	1c53      	adds	r3, r2, #1
 8010bae:	613b      	str	r3, [r7, #16]
 8010bb0:	697b      	ldr	r3, [r7, #20]
 8010bb2:	1c59      	adds	r1, r3, #1
 8010bb4:	6179      	str	r1, [r7, #20]
 8010bb6:	7812      	ldrb	r2, [r2, #0]
 8010bb8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	3b01      	subs	r3, #1
 8010bbe:	607b      	str	r3, [r7, #4]
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d1f1      	bne.n	8010baa <mem_cpy+0x1a>
	}
}
 8010bc6:	bf00      	nop
 8010bc8:	371c      	adds	r7, #28
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd0:	4770      	bx	lr

08010bd2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8010bd2:	b480      	push	{r7}
 8010bd4:	b087      	sub	sp, #28
 8010bd6:	af00      	add	r7, sp, #0
 8010bd8:	60f8      	str	r0, [r7, #12]
 8010bda:	60b9      	str	r1, [r7, #8]
 8010bdc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8010be2:	697b      	ldr	r3, [r7, #20]
 8010be4:	1c5a      	adds	r2, r3, #1
 8010be6:	617a      	str	r2, [r7, #20]
 8010be8:	68ba      	ldr	r2, [r7, #8]
 8010bea:	b2d2      	uxtb	r2, r2
 8010bec:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	3b01      	subs	r3, #1
 8010bf2:	607b      	str	r3, [r7, #4]
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d1f3      	bne.n	8010be2 <mem_set+0x10>
}
 8010bfa:	bf00      	nop
 8010bfc:	bf00      	nop
 8010bfe:	371c      	adds	r7, #28
 8010c00:	46bd      	mov	sp, r7
 8010c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c06:	4770      	bx	lr

08010c08 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010c08:	b480      	push	{r7}
 8010c0a:	b089      	sub	sp, #36	; 0x24
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	60f8      	str	r0, [r7, #12]
 8010c10:	60b9      	str	r1, [r7, #8]
 8010c12:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	61fb      	str	r3, [r7, #28]
 8010c18:	68bb      	ldr	r3, [r7, #8]
 8010c1a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010c20:	69fb      	ldr	r3, [r7, #28]
 8010c22:	1c5a      	adds	r2, r3, #1
 8010c24:	61fa      	str	r2, [r7, #28]
 8010c26:	781b      	ldrb	r3, [r3, #0]
 8010c28:	4619      	mov	r1, r3
 8010c2a:	69bb      	ldr	r3, [r7, #24]
 8010c2c:	1c5a      	adds	r2, r3, #1
 8010c2e:	61ba      	str	r2, [r7, #24]
 8010c30:	781b      	ldrb	r3, [r3, #0]
 8010c32:	1acb      	subs	r3, r1, r3
 8010c34:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	3b01      	subs	r3, #1
 8010c3a:	607b      	str	r3, [r7, #4]
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d002      	beq.n	8010c48 <mem_cmp+0x40>
 8010c42:	697b      	ldr	r3, [r7, #20]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d0eb      	beq.n	8010c20 <mem_cmp+0x18>

	return r;
 8010c48:	697b      	ldr	r3, [r7, #20]
}
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	3724      	adds	r7, #36	; 0x24
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c54:	4770      	bx	lr

08010c56 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010c56:	b480      	push	{r7}
 8010c58:	b083      	sub	sp, #12
 8010c5a:	af00      	add	r7, sp, #0
 8010c5c:	6078      	str	r0, [r7, #4]
 8010c5e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010c60:	e002      	b.n	8010c68 <chk_chr+0x12>
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	3301      	adds	r3, #1
 8010c66:	607b      	str	r3, [r7, #4]
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	781b      	ldrb	r3, [r3, #0]
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d005      	beq.n	8010c7c <chk_chr+0x26>
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	781b      	ldrb	r3, [r3, #0]
 8010c74:	461a      	mov	r2, r3
 8010c76:	683b      	ldr	r3, [r7, #0]
 8010c78:	4293      	cmp	r3, r2
 8010c7a:	d1f2      	bne.n	8010c62 <chk_chr+0xc>
	return *str;
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	781b      	ldrb	r3, [r3, #0]
}
 8010c80:	4618      	mov	r0, r3
 8010c82:	370c      	adds	r7, #12
 8010c84:	46bd      	mov	sp, r7
 8010c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c8a:	4770      	bx	lr

08010c8c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010c8c:	b480      	push	{r7}
 8010c8e:	b085      	sub	sp, #20
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
 8010c94:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010c96:	2300      	movs	r3, #0
 8010c98:	60bb      	str	r3, [r7, #8]
 8010c9a:	68bb      	ldr	r3, [r7, #8]
 8010c9c:	60fb      	str	r3, [r7, #12]
 8010c9e:	e029      	b.n	8010cf4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8010ca0:	4a27      	ldr	r2, [pc, #156]	; (8010d40 <chk_lock+0xb4>)
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	011b      	lsls	r3, r3, #4
 8010ca6:	4413      	add	r3, r2
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d01d      	beq.n	8010cea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010cae:	4a24      	ldr	r2, [pc, #144]	; (8010d40 <chk_lock+0xb4>)
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	011b      	lsls	r3, r3, #4
 8010cb4:	4413      	add	r3, r2
 8010cb6:	681a      	ldr	r2, [r3, #0]
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	429a      	cmp	r2, r3
 8010cbe:	d116      	bne.n	8010cee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8010cc0:	4a1f      	ldr	r2, [pc, #124]	; (8010d40 <chk_lock+0xb4>)
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	011b      	lsls	r3, r3, #4
 8010cc6:	4413      	add	r3, r2
 8010cc8:	3304      	adds	r3, #4
 8010cca:	681a      	ldr	r2, [r3, #0]
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010cd0:	429a      	cmp	r2, r3
 8010cd2:	d10c      	bne.n	8010cee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010cd4:	4a1a      	ldr	r2, [pc, #104]	; (8010d40 <chk_lock+0xb4>)
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	011b      	lsls	r3, r3, #4
 8010cda:	4413      	add	r3, r2
 8010cdc:	3308      	adds	r3, #8
 8010cde:	681a      	ldr	r2, [r3, #0]
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8010ce4:	429a      	cmp	r2, r3
 8010ce6:	d102      	bne.n	8010cee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010ce8:	e007      	b.n	8010cfa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8010cea:	2301      	movs	r3, #1
 8010cec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	3301      	adds	r3, #1
 8010cf2:	60fb      	str	r3, [r7, #12]
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	2b01      	cmp	r3, #1
 8010cf8:	d9d2      	bls.n	8010ca0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	2b02      	cmp	r3, #2
 8010cfe:	d109      	bne.n	8010d14 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8010d00:	68bb      	ldr	r3, [r7, #8]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d102      	bne.n	8010d0c <chk_lock+0x80>
 8010d06:	683b      	ldr	r3, [r7, #0]
 8010d08:	2b02      	cmp	r3, #2
 8010d0a:	d101      	bne.n	8010d10 <chk_lock+0x84>
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	e010      	b.n	8010d32 <chk_lock+0xa6>
 8010d10:	2312      	movs	r3, #18
 8010d12:	e00e      	b.n	8010d32 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010d14:	683b      	ldr	r3, [r7, #0]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d108      	bne.n	8010d2c <chk_lock+0xa0>
 8010d1a:	4a09      	ldr	r2, [pc, #36]	; (8010d40 <chk_lock+0xb4>)
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	011b      	lsls	r3, r3, #4
 8010d20:	4413      	add	r3, r2
 8010d22:	330c      	adds	r3, #12
 8010d24:	881b      	ldrh	r3, [r3, #0]
 8010d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010d2a:	d101      	bne.n	8010d30 <chk_lock+0xa4>
 8010d2c:	2310      	movs	r3, #16
 8010d2e:	e000      	b.n	8010d32 <chk_lock+0xa6>
 8010d30:	2300      	movs	r3, #0
}
 8010d32:	4618      	mov	r0, r3
 8010d34:	3714      	adds	r7, #20
 8010d36:	46bd      	mov	sp, r7
 8010d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3c:	4770      	bx	lr
 8010d3e:	bf00      	nop
 8010d40:	2400a3f8 	.word	0x2400a3f8

08010d44 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010d44:	b480      	push	{r7}
 8010d46:	b083      	sub	sp, #12
 8010d48:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	607b      	str	r3, [r7, #4]
 8010d4e:	e002      	b.n	8010d56 <enq_lock+0x12>
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	3301      	adds	r3, #1
 8010d54:	607b      	str	r3, [r7, #4]
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	2b01      	cmp	r3, #1
 8010d5a:	d806      	bhi.n	8010d6a <enq_lock+0x26>
 8010d5c:	4a09      	ldr	r2, [pc, #36]	; (8010d84 <enq_lock+0x40>)
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	011b      	lsls	r3, r3, #4
 8010d62:	4413      	add	r3, r2
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d1f2      	bne.n	8010d50 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	2b02      	cmp	r3, #2
 8010d6e:	bf14      	ite	ne
 8010d70:	2301      	movne	r3, #1
 8010d72:	2300      	moveq	r3, #0
 8010d74:	b2db      	uxtb	r3, r3
}
 8010d76:	4618      	mov	r0, r3
 8010d78:	370c      	adds	r7, #12
 8010d7a:	46bd      	mov	sp, r7
 8010d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d80:	4770      	bx	lr
 8010d82:	bf00      	nop
 8010d84:	2400a3f8 	.word	0x2400a3f8

08010d88 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010d88:	b480      	push	{r7}
 8010d8a:	b085      	sub	sp, #20
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
 8010d90:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010d92:	2300      	movs	r3, #0
 8010d94:	60fb      	str	r3, [r7, #12]
 8010d96:	e01f      	b.n	8010dd8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8010d98:	4a41      	ldr	r2, [pc, #260]	; (8010ea0 <inc_lock+0x118>)
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	011b      	lsls	r3, r3, #4
 8010d9e:	4413      	add	r3, r2
 8010da0:	681a      	ldr	r2, [r3, #0]
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	429a      	cmp	r2, r3
 8010da8:	d113      	bne.n	8010dd2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8010daa:	4a3d      	ldr	r2, [pc, #244]	; (8010ea0 <inc_lock+0x118>)
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	011b      	lsls	r3, r3, #4
 8010db0:	4413      	add	r3, r2
 8010db2:	3304      	adds	r3, #4
 8010db4:	681a      	ldr	r2, [r3, #0]
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8010dba:	429a      	cmp	r2, r3
 8010dbc:	d109      	bne.n	8010dd2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8010dbe:	4a38      	ldr	r2, [pc, #224]	; (8010ea0 <inc_lock+0x118>)
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	011b      	lsls	r3, r3, #4
 8010dc4:	4413      	add	r3, r2
 8010dc6:	3308      	adds	r3, #8
 8010dc8:	681a      	ldr	r2, [r3, #0]
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8010dce:	429a      	cmp	r2, r3
 8010dd0:	d006      	beq.n	8010de0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	3301      	adds	r3, #1
 8010dd6:	60fb      	str	r3, [r7, #12]
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	2b01      	cmp	r3, #1
 8010ddc:	d9dc      	bls.n	8010d98 <inc_lock+0x10>
 8010dde:	e000      	b.n	8010de2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8010de0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	2b02      	cmp	r3, #2
 8010de6:	d132      	bne.n	8010e4e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010de8:	2300      	movs	r3, #0
 8010dea:	60fb      	str	r3, [r7, #12]
 8010dec:	e002      	b.n	8010df4 <inc_lock+0x6c>
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	3301      	adds	r3, #1
 8010df2:	60fb      	str	r3, [r7, #12]
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	2b01      	cmp	r3, #1
 8010df8:	d806      	bhi.n	8010e08 <inc_lock+0x80>
 8010dfa:	4a29      	ldr	r2, [pc, #164]	; (8010ea0 <inc_lock+0x118>)
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	011b      	lsls	r3, r3, #4
 8010e00:	4413      	add	r3, r2
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d1f2      	bne.n	8010dee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	2b02      	cmp	r3, #2
 8010e0c:	d101      	bne.n	8010e12 <inc_lock+0x8a>
 8010e0e:	2300      	movs	r3, #0
 8010e10:	e040      	b.n	8010e94 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	681a      	ldr	r2, [r3, #0]
 8010e16:	4922      	ldr	r1, [pc, #136]	; (8010ea0 <inc_lock+0x118>)
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	011b      	lsls	r3, r3, #4
 8010e1c:	440b      	add	r3, r1
 8010e1e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	689a      	ldr	r2, [r3, #8]
 8010e24:	491e      	ldr	r1, [pc, #120]	; (8010ea0 <inc_lock+0x118>)
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	011b      	lsls	r3, r3, #4
 8010e2a:	440b      	add	r3, r1
 8010e2c:	3304      	adds	r3, #4
 8010e2e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	695a      	ldr	r2, [r3, #20]
 8010e34:	491a      	ldr	r1, [pc, #104]	; (8010ea0 <inc_lock+0x118>)
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	011b      	lsls	r3, r3, #4
 8010e3a:	440b      	add	r3, r1
 8010e3c:	3308      	adds	r3, #8
 8010e3e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8010e40:	4a17      	ldr	r2, [pc, #92]	; (8010ea0 <inc_lock+0x118>)
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	011b      	lsls	r3, r3, #4
 8010e46:	4413      	add	r3, r2
 8010e48:	330c      	adds	r3, #12
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010e4e:	683b      	ldr	r3, [r7, #0]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d009      	beq.n	8010e68 <inc_lock+0xe0>
 8010e54:	4a12      	ldr	r2, [pc, #72]	; (8010ea0 <inc_lock+0x118>)
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	011b      	lsls	r3, r3, #4
 8010e5a:	4413      	add	r3, r2
 8010e5c:	330c      	adds	r3, #12
 8010e5e:	881b      	ldrh	r3, [r3, #0]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d001      	beq.n	8010e68 <inc_lock+0xe0>
 8010e64:	2300      	movs	r3, #0
 8010e66:	e015      	b.n	8010e94 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010e68:	683b      	ldr	r3, [r7, #0]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d108      	bne.n	8010e80 <inc_lock+0xf8>
 8010e6e:	4a0c      	ldr	r2, [pc, #48]	; (8010ea0 <inc_lock+0x118>)
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	011b      	lsls	r3, r3, #4
 8010e74:	4413      	add	r3, r2
 8010e76:	330c      	adds	r3, #12
 8010e78:	881b      	ldrh	r3, [r3, #0]
 8010e7a:	3301      	adds	r3, #1
 8010e7c:	b29a      	uxth	r2, r3
 8010e7e:	e001      	b.n	8010e84 <inc_lock+0xfc>
 8010e80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010e84:	4906      	ldr	r1, [pc, #24]	; (8010ea0 <inc_lock+0x118>)
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	011b      	lsls	r3, r3, #4
 8010e8a:	440b      	add	r3, r1
 8010e8c:	330c      	adds	r3, #12
 8010e8e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	3301      	adds	r3, #1
}
 8010e94:	4618      	mov	r0, r3
 8010e96:	3714      	adds	r7, #20
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9e:	4770      	bx	lr
 8010ea0:	2400a3f8 	.word	0x2400a3f8

08010ea4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8010ea4:	b480      	push	{r7}
 8010ea6:	b085      	sub	sp, #20
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	3b01      	subs	r3, #1
 8010eb0:	607b      	str	r3, [r7, #4]
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	2b01      	cmp	r3, #1
 8010eb6:	d825      	bhi.n	8010f04 <dec_lock+0x60>
		n = Files[i].ctr;
 8010eb8:	4a17      	ldr	r2, [pc, #92]	; (8010f18 <dec_lock+0x74>)
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	011b      	lsls	r3, r3, #4
 8010ebe:	4413      	add	r3, r2
 8010ec0:	330c      	adds	r3, #12
 8010ec2:	881b      	ldrh	r3, [r3, #0]
 8010ec4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8010ec6:	89fb      	ldrh	r3, [r7, #14]
 8010ec8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010ecc:	d101      	bne.n	8010ed2 <dec_lock+0x2e>
 8010ece:	2300      	movs	r3, #0
 8010ed0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8010ed2:	89fb      	ldrh	r3, [r7, #14]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d002      	beq.n	8010ede <dec_lock+0x3a>
 8010ed8:	89fb      	ldrh	r3, [r7, #14]
 8010eda:	3b01      	subs	r3, #1
 8010edc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8010ede:	4a0e      	ldr	r2, [pc, #56]	; (8010f18 <dec_lock+0x74>)
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	011b      	lsls	r3, r3, #4
 8010ee4:	4413      	add	r3, r2
 8010ee6:	330c      	adds	r3, #12
 8010ee8:	89fa      	ldrh	r2, [r7, #14]
 8010eea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8010eec:	89fb      	ldrh	r3, [r7, #14]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d105      	bne.n	8010efe <dec_lock+0x5a>
 8010ef2:	4a09      	ldr	r2, [pc, #36]	; (8010f18 <dec_lock+0x74>)
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	011b      	lsls	r3, r3, #4
 8010ef8:	4413      	add	r3, r2
 8010efa:	2200      	movs	r2, #0
 8010efc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8010efe:	2300      	movs	r3, #0
 8010f00:	737b      	strb	r3, [r7, #13]
 8010f02:	e001      	b.n	8010f08 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8010f04:	2302      	movs	r3, #2
 8010f06:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8010f08:	7b7b      	ldrb	r3, [r7, #13]
}
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	3714      	adds	r7, #20
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f14:	4770      	bx	lr
 8010f16:	bf00      	nop
 8010f18:	2400a3f8 	.word	0x2400a3f8

08010f1c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010f1c:	b480      	push	{r7}
 8010f1e:	b085      	sub	sp, #20
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010f24:	2300      	movs	r3, #0
 8010f26:	60fb      	str	r3, [r7, #12]
 8010f28:	e010      	b.n	8010f4c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010f2a:	4a0d      	ldr	r2, [pc, #52]	; (8010f60 <clear_lock+0x44>)
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	011b      	lsls	r3, r3, #4
 8010f30:	4413      	add	r3, r2
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	687a      	ldr	r2, [r7, #4]
 8010f36:	429a      	cmp	r2, r3
 8010f38:	d105      	bne.n	8010f46 <clear_lock+0x2a>
 8010f3a:	4a09      	ldr	r2, [pc, #36]	; (8010f60 <clear_lock+0x44>)
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	011b      	lsls	r3, r3, #4
 8010f40:	4413      	add	r3, r2
 8010f42:	2200      	movs	r2, #0
 8010f44:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	3301      	adds	r3, #1
 8010f4a:	60fb      	str	r3, [r7, #12]
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	2b01      	cmp	r3, #1
 8010f50:	d9eb      	bls.n	8010f2a <clear_lock+0xe>
	}
}
 8010f52:	bf00      	nop
 8010f54:	bf00      	nop
 8010f56:	3714      	adds	r7, #20
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f5e:	4770      	bx	lr
 8010f60:	2400a3f8 	.word	0x2400a3f8

08010f64 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b086      	sub	sp, #24
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	78db      	ldrb	r3, [r3, #3]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d034      	beq.n	8010fe2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f7c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	7858      	ldrb	r0, [r3, #1]
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010f88:	2301      	movs	r3, #1
 8010f8a:	697a      	ldr	r2, [r7, #20]
 8010f8c:	f7ff fd40 	bl	8010a10 <disk_write>
 8010f90:	4603      	mov	r3, r0
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d002      	beq.n	8010f9c <sync_window+0x38>
			res = FR_DISK_ERR;
 8010f96:	2301      	movs	r3, #1
 8010f98:	73fb      	strb	r3, [r7, #15]
 8010f9a:	e022      	b.n	8010fe2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fa6:	697a      	ldr	r2, [r7, #20]
 8010fa8:	1ad2      	subs	r2, r2, r3
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	69db      	ldr	r3, [r3, #28]
 8010fae:	429a      	cmp	r2, r3
 8010fb0:	d217      	bcs.n	8010fe2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	789b      	ldrb	r3, [r3, #2]
 8010fb6:	613b      	str	r3, [r7, #16]
 8010fb8:	e010      	b.n	8010fdc <sync_window+0x78>
					wsect += fs->fsize;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	69db      	ldr	r3, [r3, #28]
 8010fbe:	697a      	ldr	r2, [r7, #20]
 8010fc0:	4413      	add	r3, r2
 8010fc2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	7858      	ldrb	r0, [r3, #1]
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010fce:	2301      	movs	r3, #1
 8010fd0:	697a      	ldr	r2, [r7, #20]
 8010fd2:	f7ff fd1d 	bl	8010a10 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010fd6:	693b      	ldr	r3, [r7, #16]
 8010fd8:	3b01      	subs	r3, #1
 8010fda:	613b      	str	r3, [r7, #16]
 8010fdc:	693b      	ldr	r3, [r7, #16]
 8010fde:	2b01      	cmp	r3, #1
 8010fe0:	d8eb      	bhi.n	8010fba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8010fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	3718      	adds	r7, #24
 8010fe8:	46bd      	mov	sp, r7
 8010fea:	bd80      	pop	{r7, pc}

08010fec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b084      	sub	sp, #16
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
 8010ff4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ffe:	683a      	ldr	r2, [r7, #0]
 8011000:	429a      	cmp	r2, r3
 8011002:	d01b      	beq.n	801103c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011004:	6878      	ldr	r0, [r7, #4]
 8011006:	f7ff ffad 	bl	8010f64 <sync_window>
 801100a:	4603      	mov	r3, r0
 801100c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801100e:	7bfb      	ldrb	r3, [r7, #15]
 8011010:	2b00      	cmp	r3, #0
 8011012:	d113      	bne.n	801103c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	7858      	ldrb	r0, [r3, #1]
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801101e:	2301      	movs	r3, #1
 8011020:	683a      	ldr	r2, [r7, #0]
 8011022:	f7ff fcd5 	bl	80109d0 <disk_read>
 8011026:	4603      	mov	r3, r0
 8011028:	2b00      	cmp	r3, #0
 801102a:	d004      	beq.n	8011036 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801102c:	f04f 33ff 	mov.w	r3, #4294967295
 8011030:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011032:	2301      	movs	r3, #1
 8011034:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	683a      	ldr	r2, [r7, #0]
 801103a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 801103c:	7bfb      	ldrb	r3, [r7, #15]
}
 801103e:	4618      	mov	r0, r3
 8011040:	3710      	adds	r7, #16
 8011042:	46bd      	mov	sp, r7
 8011044:	bd80      	pop	{r7, pc}
	...

08011048 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011048:	b580      	push	{r7, lr}
 801104a:	b084      	sub	sp, #16
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011050:	6878      	ldr	r0, [r7, #4]
 8011052:	f7ff ff87 	bl	8010f64 <sync_window>
 8011056:	4603      	mov	r3, r0
 8011058:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801105a:	7bfb      	ldrb	r3, [r7, #15]
 801105c:	2b00      	cmp	r3, #0
 801105e:	d158      	bne.n	8011112 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	781b      	ldrb	r3, [r3, #0]
 8011064:	2b03      	cmp	r3, #3
 8011066:	d148      	bne.n	80110fa <sync_fs+0xb2>
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	791b      	ldrb	r3, [r3, #4]
 801106c:	2b01      	cmp	r3, #1
 801106e:	d144      	bne.n	80110fa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	3334      	adds	r3, #52	; 0x34
 8011074:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011078:	2100      	movs	r1, #0
 801107a:	4618      	mov	r0, r3
 801107c:	f7ff fda9 	bl	8010bd2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	3334      	adds	r3, #52	; 0x34
 8011084:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011088:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801108c:	4618      	mov	r0, r3
 801108e:	f7ff fd38 	bl	8010b02 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	3334      	adds	r3, #52	; 0x34
 8011096:	4921      	ldr	r1, [pc, #132]	; (801111c <sync_fs+0xd4>)
 8011098:	4618      	mov	r0, r3
 801109a:	f7ff fd4d 	bl	8010b38 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	3334      	adds	r3, #52	; 0x34
 80110a2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80110a6:	491e      	ldr	r1, [pc, #120]	; (8011120 <sync_fs+0xd8>)
 80110a8:	4618      	mov	r0, r3
 80110aa:	f7ff fd45 	bl	8010b38 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	3334      	adds	r3, #52	; 0x34
 80110b2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	695b      	ldr	r3, [r3, #20]
 80110ba:	4619      	mov	r1, r3
 80110bc:	4610      	mov	r0, r2
 80110be:	f7ff fd3b 	bl	8010b38 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	3334      	adds	r3, #52	; 0x34
 80110c6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	691b      	ldr	r3, [r3, #16]
 80110ce:	4619      	mov	r1, r3
 80110d0:	4610      	mov	r0, r2
 80110d2:	f7ff fd31 	bl	8010b38 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	6a1b      	ldr	r3, [r3, #32]
 80110da:	1c5a      	adds	r2, r3, #1
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	7858      	ldrb	r0, [r3, #1]
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80110ee:	2301      	movs	r3, #1
 80110f0:	f7ff fc8e 	bl	8010a10 <disk_write>
			fs->fsi_flag = 0;
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	2200      	movs	r2, #0
 80110f8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	785b      	ldrb	r3, [r3, #1]
 80110fe:	2200      	movs	r2, #0
 8011100:	2100      	movs	r1, #0
 8011102:	4618      	mov	r0, r3
 8011104:	f7ff fca4 	bl	8010a50 <disk_ioctl>
 8011108:	4603      	mov	r3, r0
 801110a:	2b00      	cmp	r3, #0
 801110c:	d001      	beq.n	8011112 <sync_fs+0xca>
 801110e:	2301      	movs	r3, #1
 8011110:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011112:	7bfb      	ldrb	r3, [r7, #15]
}
 8011114:	4618      	mov	r0, r3
 8011116:	3710      	adds	r7, #16
 8011118:	46bd      	mov	sp, r7
 801111a:	bd80      	pop	{r7, pc}
 801111c:	41615252 	.word	0x41615252
 8011120:	61417272 	.word	0x61417272

08011124 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011124:	b480      	push	{r7}
 8011126:	b083      	sub	sp, #12
 8011128:	af00      	add	r7, sp, #0
 801112a:	6078      	str	r0, [r7, #4]
 801112c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801112e:	683b      	ldr	r3, [r7, #0]
 8011130:	3b02      	subs	r3, #2
 8011132:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	699b      	ldr	r3, [r3, #24]
 8011138:	3b02      	subs	r3, #2
 801113a:	683a      	ldr	r2, [r7, #0]
 801113c:	429a      	cmp	r2, r3
 801113e:	d301      	bcc.n	8011144 <clust2sect+0x20>
 8011140:	2300      	movs	r3, #0
 8011142:	e008      	b.n	8011156 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	895b      	ldrh	r3, [r3, #10]
 8011148:	461a      	mov	r2, r3
 801114a:	683b      	ldr	r3, [r7, #0]
 801114c:	fb03 f202 	mul.w	r2, r3, r2
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011154:	4413      	add	r3, r2
}
 8011156:	4618      	mov	r0, r3
 8011158:	370c      	adds	r7, #12
 801115a:	46bd      	mov	sp, r7
 801115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011160:	4770      	bx	lr

08011162 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011162:	b580      	push	{r7, lr}
 8011164:	b086      	sub	sp, #24
 8011166:	af00      	add	r7, sp, #0
 8011168:	6078      	str	r0, [r7, #4]
 801116a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011172:	683b      	ldr	r3, [r7, #0]
 8011174:	2b01      	cmp	r3, #1
 8011176:	d904      	bls.n	8011182 <get_fat+0x20>
 8011178:	693b      	ldr	r3, [r7, #16]
 801117a:	699b      	ldr	r3, [r3, #24]
 801117c:	683a      	ldr	r2, [r7, #0]
 801117e:	429a      	cmp	r2, r3
 8011180:	d302      	bcc.n	8011188 <get_fat+0x26>
		val = 1;	/* Internal error */
 8011182:	2301      	movs	r3, #1
 8011184:	617b      	str	r3, [r7, #20]
 8011186:	e08f      	b.n	80112a8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011188:	f04f 33ff 	mov.w	r3, #4294967295
 801118c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801118e:	693b      	ldr	r3, [r7, #16]
 8011190:	781b      	ldrb	r3, [r3, #0]
 8011192:	2b03      	cmp	r3, #3
 8011194:	d062      	beq.n	801125c <get_fat+0xfa>
 8011196:	2b03      	cmp	r3, #3
 8011198:	dc7c      	bgt.n	8011294 <get_fat+0x132>
 801119a:	2b01      	cmp	r3, #1
 801119c:	d002      	beq.n	80111a4 <get_fat+0x42>
 801119e:	2b02      	cmp	r3, #2
 80111a0:	d042      	beq.n	8011228 <get_fat+0xc6>
 80111a2:	e077      	b.n	8011294 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80111a4:	683b      	ldr	r3, [r7, #0]
 80111a6:	60fb      	str	r3, [r7, #12]
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	085b      	lsrs	r3, r3, #1
 80111ac:	68fa      	ldr	r2, [r7, #12]
 80111ae:	4413      	add	r3, r2
 80111b0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80111b2:	693b      	ldr	r3, [r7, #16]
 80111b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	0a5b      	lsrs	r3, r3, #9
 80111ba:	4413      	add	r3, r2
 80111bc:	4619      	mov	r1, r3
 80111be:	6938      	ldr	r0, [r7, #16]
 80111c0:	f7ff ff14 	bl	8010fec <move_window>
 80111c4:	4603      	mov	r3, r0
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d167      	bne.n	801129a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	1c5a      	adds	r2, r3, #1
 80111ce:	60fa      	str	r2, [r7, #12]
 80111d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80111d4:	693a      	ldr	r2, [r7, #16]
 80111d6:	4413      	add	r3, r2
 80111d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80111dc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80111de:	693b      	ldr	r3, [r7, #16]
 80111e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	0a5b      	lsrs	r3, r3, #9
 80111e6:	4413      	add	r3, r2
 80111e8:	4619      	mov	r1, r3
 80111ea:	6938      	ldr	r0, [r7, #16]
 80111ec:	f7ff fefe 	bl	8010fec <move_window>
 80111f0:	4603      	mov	r3, r0
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d153      	bne.n	801129e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80111fc:	693a      	ldr	r2, [r7, #16]
 80111fe:	4413      	add	r3, r2
 8011200:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011204:	021b      	lsls	r3, r3, #8
 8011206:	461a      	mov	r2, r3
 8011208:	68bb      	ldr	r3, [r7, #8]
 801120a:	4313      	orrs	r3, r2
 801120c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801120e:	683b      	ldr	r3, [r7, #0]
 8011210:	f003 0301 	and.w	r3, r3, #1
 8011214:	2b00      	cmp	r3, #0
 8011216:	d002      	beq.n	801121e <get_fat+0xbc>
 8011218:	68bb      	ldr	r3, [r7, #8]
 801121a:	091b      	lsrs	r3, r3, #4
 801121c:	e002      	b.n	8011224 <get_fat+0xc2>
 801121e:	68bb      	ldr	r3, [r7, #8]
 8011220:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011224:	617b      	str	r3, [r7, #20]
			break;
 8011226:	e03f      	b.n	80112a8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011228:	693b      	ldr	r3, [r7, #16]
 801122a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801122c:	683b      	ldr	r3, [r7, #0]
 801122e:	0a1b      	lsrs	r3, r3, #8
 8011230:	4413      	add	r3, r2
 8011232:	4619      	mov	r1, r3
 8011234:	6938      	ldr	r0, [r7, #16]
 8011236:	f7ff fed9 	bl	8010fec <move_window>
 801123a:	4603      	mov	r3, r0
 801123c:	2b00      	cmp	r3, #0
 801123e:	d130      	bne.n	80112a2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011240:	693b      	ldr	r3, [r7, #16]
 8011242:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011246:	683b      	ldr	r3, [r7, #0]
 8011248:	005b      	lsls	r3, r3, #1
 801124a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801124e:	4413      	add	r3, r2
 8011250:	4618      	mov	r0, r3
 8011252:	f7ff fc1b 	bl	8010a8c <ld_word>
 8011256:	4603      	mov	r3, r0
 8011258:	617b      	str	r3, [r7, #20]
			break;
 801125a:	e025      	b.n	80112a8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801125c:	693b      	ldr	r3, [r7, #16]
 801125e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011260:	683b      	ldr	r3, [r7, #0]
 8011262:	09db      	lsrs	r3, r3, #7
 8011264:	4413      	add	r3, r2
 8011266:	4619      	mov	r1, r3
 8011268:	6938      	ldr	r0, [r7, #16]
 801126a:	f7ff febf 	bl	8010fec <move_window>
 801126e:	4603      	mov	r3, r0
 8011270:	2b00      	cmp	r3, #0
 8011272:	d118      	bne.n	80112a6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011274:	693b      	ldr	r3, [r7, #16]
 8011276:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801127a:	683b      	ldr	r3, [r7, #0]
 801127c:	009b      	lsls	r3, r3, #2
 801127e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8011282:	4413      	add	r3, r2
 8011284:	4618      	mov	r0, r3
 8011286:	f7ff fc19 	bl	8010abc <ld_dword>
 801128a:	4603      	mov	r3, r0
 801128c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011290:	617b      	str	r3, [r7, #20]
			break;
 8011292:	e009      	b.n	80112a8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011294:	2301      	movs	r3, #1
 8011296:	617b      	str	r3, [r7, #20]
 8011298:	e006      	b.n	80112a8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801129a:	bf00      	nop
 801129c:	e004      	b.n	80112a8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801129e:	bf00      	nop
 80112a0:	e002      	b.n	80112a8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80112a2:	bf00      	nop
 80112a4:	e000      	b.n	80112a8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80112a6:	bf00      	nop
		}
	}

	return val;
 80112a8:	697b      	ldr	r3, [r7, #20]
}
 80112aa:	4618      	mov	r0, r3
 80112ac:	3718      	adds	r7, #24
 80112ae:	46bd      	mov	sp, r7
 80112b0:	bd80      	pop	{r7, pc}

080112b2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80112b2:	b590      	push	{r4, r7, lr}
 80112b4:	b089      	sub	sp, #36	; 0x24
 80112b6:	af00      	add	r7, sp, #0
 80112b8:	60f8      	str	r0, [r7, #12]
 80112ba:	60b9      	str	r1, [r7, #8]
 80112bc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80112be:	2302      	movs	r3, #2
 80112c0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80112c2:	68bb      	ldr	r3, [r7, #8]
 80112c4:	2b01      	cmp	r3, #1
 80112c6:	f240 80d2 	bls.w	801146e <put_fat+0x1bc>
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	699b      	ldr	r3, [r3, #24]
 80112ce:	68ba      	ldr	r2, [r7, #8]
 80112d0:	429a      	cmp	r2, r3
 80112d2:	f080 80cc 	bcs.w	801146e <put_fat+0x1bc>
		switch (fs->fs_type) {
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	781b      	ldrb	r3, [r3, #0]
 80112da:	2b03      	cmp	r3, #3
 80112dc:	f000 8096 	beq.w	801140c <put_fat+0x15a>
 80112e0:	2b03      	cmp	r3, #3
 80112e2:	f300 80cd 	bgt.w	8011480 <put_fat+0x1ce>
 80112e6:	2b01      	cmp	r3, #1
 80112e8:	d002      	beq.n	80112f0 <put_fat+0x3e>
 80112ea:	2b02      	cmp	r3, #2
 80112ec:	d06e      	beq.n	80113cc <put_fat+0x11a>
 80112ee:	e0c7      	b.n	8011480 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80112f0:	68bb      	ldr	r3, [r7, #8]
 80112f2:	61bb      	str	r3, [r7, #24]
 80112f4:	69bb      	ldr	r3, [r7, #24]
 80112f6:	085b      	lsrs	r3, r3, #1
 80112f8:	69ba      	ldr	r2, [r7, #24]
 80112fa:	4413      	add	r3, r2
 80112fc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011302:	69bb      	ldr	r3, [r7, #24]
 8011304:	0a5b      	lsrs	r3, r3, #9
 8011306:	4413      	add	r3, r2
 8011308:	4619      	mov	r1, r3
 801130a:	68f8      	ldr	r0, [r7, #12]
 801130c:	f7ff fe6e 	bl	8010fec <move_window>
 8011310:	4603      	mov	r3, r0
 8011312:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011314:	7ffb      	ldrb	r3, [r7, #31]
 8011316:	2b00      	cmp	r3, #0
 8011318:	f040 80ab 	bne.w	8011472 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011322:	69bb      	ldr	r3, [r7, #24]
 8011324:	1c59      	adds	r1, r3, #1
 8011326:	61b9      	str	r1, [r7, #24]
 8011328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801132c:	4413      	add	r3, r2
 801132e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011330:	68bb      	ldr	r3, [r7, #8]
 8011332:	f003 0301 	and.w	r3, r3, #1
 8011336:	2b00      	cmp	r3, #0
 8011338:	d00d      	beq.n	8011356 <put_fat+0xa4>
 801133a:	697b      	ldr	r3, [r7, #20]
 801133c:	781b      	ldrb	r3, [r3, #0]
 801133e:	b25b      	sxtb	r3, r3
 8011340:	f003 030f 	and.w	r3, r3, #15
 8011344:	b25a      	sxtb	r2, r3
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	b2db      	uxtb	r3, r3
 801134a:	011b      	lsls	r3, r3, #4
 801134c:	b25b      	sxtb	r3, r3
 801134e:	4313      	orrs	r3, r2
 8011350:	b25b      	sxtb	r3, r3
 8011352:	b2db      	uxtb	r3, r3
 8011354:	e001      	b.n	801135a <put_fat+0xa8>
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	b2db      	uxtb	r3, r3
 801135a:	697a      	ldr	r2, [r7, #20]
 801135c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	2201      	movs	r2, #1
 8011362:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011368:	69bb      	ldr	r3, [r7, #24]
 801136a:	0a5b      	lsrs	r3, r3, #9
 801136c:	4413      	add	r3, r2
 801136e:	4619      	mov	r1, r3
 8011370:	68f8      	ldr	r0, [r7, #12]
 8011372:	f7ff fe3b 	bl	8010fec <move_window>
 8011376:	4603      	mov	r3, r0
 8011378:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801137a:	7ffb      	ldrb	r3, [r7, #31]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d17a      	bne.n	8011476 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011386:	69bb      	ldr	r3, [r7, #24]
 8011388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801138c:	4413      	add	r3, r2
 801138e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011390:	68bb      	ldr	r3, [r7, #8]
 8011392:	f003 0301 	and.w	r3, r3, #1
 8011396:	2b00      	cmp	r3, #0
 8011398:	d003      	beq.n	80113a2 <put_fat+0xf0>
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	091b      	lsrs	r3, r3, #4
 801139e:	b2db      	uxtb	r3, r3
 80113a0:	e00e      	b.n	80113c0 <put_fat+0x10e>
 80113a2:	697b      	ldr	r3, [r7, #20]
 80113a4:	781b      	ldrb	r3, [r3, #0]
 80113a6:	b25b      	sxtb	r3, r3
 80113a8:	f023 030f 	bic.w	r3, r3, #15
 80113ac:	b25a      	sxtb	r2, r3
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	0a1b      	lsrs	r3, r3, #8
 80113b2:	b25b      	sxtb	r3, r3
 80113b4:	f003 030f 	and.w	r3, r3, #15
 80113b8:	b25b      	sxtb	r3, r3
 80113ba:	4313      	orrs	r3, r2
 80113bc:	b25b      	sxtb	r3, r3
 80113be:	b2db      	uxtb	r3, r3
 80113c0:	697a      	ldr	r2, [r7, #20]
 80113c2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	2201      	movs	r2, #1
 80113c8:	70da      	strb	r2, [r3, #3]
			break;
 80113ca:	e059      	b.n	8011480 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80113d0:	68bb      	ldr	r3, [r7, #8]
 80113d2:	0a1b      	lsrs	r3, r3, #8
 80113d4:	4413      	add	r3, r2
 80113d6:	4619      	mov	r1, r3
 80113d8:	68f8      	ldr	r0, [r7, #12]
 80113da:	f7ff fe07 	bl	8010fec <move_window>
 80113de:	4603      	mov	r3, r0
 80113e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80113e2:	7ffb      	ldrb	r3, [r7, #31]
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d148      	bne.n	801147a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80113ee:	68bb      	ldr	r3, [r7, #8]
 80113f0:	005b      	lsls	r3, r3, #1
 80113f2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80113f6:	4413      	add	r3, r2
 80113f8:	687a      	ldr	r2, [r7, #4]
 80113fa:	b292      	uxth	r2, r2
 80113fc:	4611      	mov	r1, r2
 80113fe:	4618      	mov	r0, r3
 8011400:	f7ff fb7f 	bl	8010b02 <st_word>
			fs->wflag = 1;
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	2201      	movs	r2, #1
 8011408:	70da      	strb	r2, [r3, #3]
			break;
 801140a:	e039      	b.n	8011480 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011410:	68bb      	ldr	r3, [r7, #8]
 8011412:	09db      	lsrs	r3, r3, #7
 8011414:	4413      	add	r3, r2
 8011416:	4619      	mov	r1, r3
 8011418:	68f8      	ldr	r0, [r7, #12]
 801141a:	f7ff fde7 	bl	8010fec <move_window>
 801141e:	4603      	mov	r3, r0
 8011420:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011422:	7ffb      	ldrb	r3, [r7, #31]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d12a      	bne.n	801147e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011434:	68bb      	ldr	r3, [r7, #8]
 8011436:	009b      	lsls	r3, r3, #2
 8011438:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801143c:	4413      	add	r3, r2
 801143e:	4618      	mov	r0, r3
 8011440:	f7ff fb3c 	bl	8010abc <ld_dword>
 8011444:	4603      	mov	r3, r0
 8011446:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801144a:	4323      	orrs	r3, r4
 801144c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011454:	68bb      	ldr	r3, [r7, #8]
 8011456:	009b      	lsls	r3, r3, #2
 8011458:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801145c:	4413      	add	r3, r2
 801145e:	6879      	ldr	r1, [r7, #4]
 8011460:	4618      	mov	r0, r3
 8011462:	f7ff fb69 	bl	8010b38 <st_dword>
			fs->wflag = 1;
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	2201      	movs	r2, #1
 801146a:	70da      	strb	r2, [r3, #3]
			break;
 801146c:	e008      	b.n	8011480 <put_fat+0x1ce>
		}
	}
 801146e:	bf00      	nop
 8011470:	e006      	b.n	8011480 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8011472:	bf00      	nop
 8011474:	e004      	b.n	8011480 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8011476:	bf00      	nop
 8011478:	e002      	b.n	8011480 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801147a:	bf00      	nop
 801147c:	e000      	b.n	8011480 <put_fat+0x1ce>
			if (res != FR_OK) break;
 801147e:	bf00      	nop
	return res;
 8011480:	7ffb      	ldrb	r3, [r7, #31]
}
 8011482:	4618      	mov	r0, r3
 8011484:	3724      	adds	r7, #36	; 0x24
 8011486:	46bd      	mov	sp, r7
 8011488:	bd90      	pop	{r4, r7, pc}

0801148a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801148a:	b580      	push	{r7, lr}
 801148c:	b088      	sub	sp, #32
 801148e:	af00      	add	r7, sp, #0
 8011490:	60f8      	str	r0, [r7, #12]
 8011492:	60b9      	str	r1, [r7, #8]
 8011494:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011496:	2300      	movs	r3, #0
 8011498:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80114a0:	68bb      	ldr	r3, [r7, #8]
 80114a2:	2b01      	cmp	r3, #1
 80114a4:	d904      	bls.n	80114b0 <remove_chain+0x26>
 80114a6:	69bb      	ldr	r3, [r7, #24]
 80114a8:	699b      	ldr	r3, [r3, #24]
 80114aa:	68ba      	ldr	r2, [r7, #8]
 80114ac:	429a      	cmp	r2, r3
 80114ae:	d301      	bcc.n	80114b4 <remove_chain+0x2a>
 80114b0:	2302      	movs	r3, #2
 80114b2:	e04b      	b.n	801154c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d00c      	beq.n	80114d4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80114ba:	f04f 32ff 	mov.w	r2, #4294967295
 80114be:	6879      	ldr	r1, [r7, #4]
 80114c0:	69b8      	ldr	r0, [r7, #24]
 80114c2:	f7ff fef6 	bl	80112b2 <put_fat>
 80114c6:	4603      	mov	r3, r0
 80114c8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80114ca:	7ffb      	ldrb	r3, [r7, #31]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d001      	beq.n	80114d4 <remove_chain+0x4a>
 80114d0:	7ffb      	ldrb	r3, [r7, #31]
 80114d2:	e03b      	b.n	801154c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80114d4:	68b9      	ldr	r1, [r7, #8]
 80114d6:	68f8      	ldr	r0, [r7, #12]
 80114d8:	f7ff fe43 	bl	8011162 <get_fat>
 80114dc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80114de:	697b      	ldr	r3, [r7, #20]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d031      	beq.n	8011548 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80114e4:	697b      	ldr	r3, [r7, #20]
 80114e6:	2b01      	cmp	r3, #1
 80114e8:	d101      	bne.n	80114ee <remove_chain+0x64>
 80114ea:	2302      	movs	r3, #2
 80114ec:	e02e      	b.n	801154c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80114ee:	697b      	ldr	r3, [r7, #20]
 80114f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114f4:	d101      	bne.n	80114fa <remove_chain+0x70>
 80114f6:	2301      	movs	r3, #1
 80114f8:	e028      	b.n	801154c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80114fa:	2200      	movs	r2, #0
 80114fc:	68b9      	ldr	r1, [r7, #8]
 80114fe:	69b8      	ldr	r0, [r7, #24]
 8011500:	f7ff fed7 	bl	80112b2 <put_fat>
 8011504:	4603      	mov	r3, r0
 8011506:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011508:	7ffb      	ldrb	r3, [r7, #31]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d001      	beq.n	8011512 <remove_chain+0x88>
 801150e:	7ffb      	ldrb	r3, [r7, #31]
 8011510:	e01c      	b.n	801154c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011512:	69bb      	ldr	r3, [r7, #24]
 8011514:	695a      	ldr	r2, [r3, #20]
 8011516:	69bb      	ldr	r3, [r7, #24]
 8011518:	699b      	ldr	r3, [r3, #24]
 801151a:	3b02      	subs	r3, #2
 801151c:	429a      	cmp	r2, r3
 801151e:	d20b      	bcs.n	8011538 <remove_chain+0xae>
			fs->free_clst++;
 8011520:	69bb      	ldr	r3, [r7, #24]
 8011522:	695b      	ldr	r3, [r3, #20]
 8011524:	1c5a      	adds	r2, r3, #1
 8011526:	69bb      	ldr	r3, [r7, #24]
 8011528:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 801152a:	69bb      	ldr	r3, [r7, #24]
 801152c:	791b      	ldrb	r3, [r3, #4]
 801152e:	f043 0301 	orr.w	r3, r3, #1
 8011532:	b2da      	uxtb	r2, r3
 8011534:	69bb      	ldr	r3, [r7, #24]
 8011536:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011538:	697b      	ldr	r3, [r7, #20]
 801153a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801153c:	69bb      	ldr	r3, [r7, #24]
 801153e:	699b      	ldr	r3, [r3, #24]
 8011540:	68ba      	ldr	r2, [r7, #8]
 8011542:	429a      	cmp	r2, r3
 8011544:	d3c6      	bcc.n	80114d4 <remove_chain+0x4a>
 8011546:	e000      	b.n	801154a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011548:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801154a:	2300      	movs	r3, #0
}
 801154c:	4618      	mov	r0, r3
 801154e:	3720      	adds	r7, #32
 8011550:	46bd      	mov	sp, r7
 8011552:	bd80      	pop	{r7, pc}

08011554 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011554:	b580      	push	{r7, lr}
 8011556:	b088      	sub	sp, #32
 8011558:	af00      	add	r7, sp, #0
 801155a:	6078      	str	r0, [r7, #4]
 801155c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8011564:	683b      	ldr	r3, [r7, #0]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d10d      	bne.n	8011586 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801156a:	693b      	ldr	r3, [r7, #16]
 801156c:	691b      	ldr	r3, [r3, #16]
 801156e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011570:	69bb      	ldr	r3, [r7, #24]
 8011572:	2b00      	cmp	r3, #0
 8011574:	d004      	beq.n	8011580 <create_chain+0x2c>
 8011576:	693b      	ldr	r3, [r7, #16]
 8011578:	699b      	ldr	r3, [r3, #24]
 801157a:	69ba      	ldr	r2, [r7, #24]
 801157c:	429a      	cmp	r2, r3
 801157e:	d31b      	bcc.n	80115b8 <create_chain+0x64>
 8011580:	2301      	movs	r3, #1
 8011582:	61bb      	str	r3, [r7, #24]
 8011584:	e018      	b.n	80115b8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8011586:	6839      	ldr	r1, [r7, #0]
 8011588:	6878      	ldr	r0, [r7, #4]
 801158a:	f7ff fdea 	bl	8011162 <get_fat>
 801158e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	2b01      	cmp	r3, #1
 8011594:	d801      	bhi.n	801159a <create_chain+0x46>
 8011596:	2301      	movs	r3, #1
 8011598:	e070      	b.n	801167c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115a0:	d101      	bne.n	80115a6 <create_chain+0x52>
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	e06a      	b.n	801167c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80115a6:	693b      	ldr	r3, [r7, #16]
 80115a8:	699b      	ldr	r3, [r3, #24]
 80115aa:	68fa      	ldr	r2, [r7, #12]
 80115ac:	429a      	cmp	r2, r3
 80115ae:	d201      	bcs.n	80115b4 <create_chain+0x60>
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	e063      	b.n	801167c <create_chain+0x128>
		scl = clst;
 80115b4:	683b      	ldr	r3, [r7, #0]
 80115b6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80115b8:	69bb      	ldr	r3, [r7, #24]
 80115ba:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80115bc:	69fb      	ldr	r3, [r7, #28]
 80115be:	3301      	adds	r3, #1
 80115c0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80115c2:	693b      	ldr	r3, [r7, #16]
 80115c4:	699b      	ldr	r3, [r3, #24]
 80115c6:	69fa      	ldr	r2, [r7, #28]
 80115c8:	429a      	cmp	r2, r3
 80115ca:	d307      	bcc.n	80115dc <create_chain+0x88>
				ncl = 2;
 80115cc:	2302      	movs	r3, #2
 80115ce:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80115d0:	69fa      	ldr	r2, [r7, #28]
 80115d2:	69bb      	ldr	r3, [r7, #24]
 80115d4:	429a      	cmp	r2, r3
 80115d6:	d901      	bls.n	80115dc <create_chain+0x88>
 80115d8:	2300      	movs	r3, #0
 80115da:	e04f      	b.n	801167c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80115dc:	69f9      	ldr	r1, [r7, #28]
 80115de:	6878      	ldr	r0, [r7, #4]
 80115e0:	f7ff fdbf 	bl	8011162 <get_fat>
 80115e4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d00e      	beq.n	801160a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	2b01      	cmp	r3, #1
 80115f0:	d003      	beq.n	80115fa <create_chain+0xa6>
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115f8:	d101      	bne.n	80115fe <create_chain+0xaa>
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	e03e      	b.n	801167c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80115fe:	69fa      	ldr	r2, [r7, #28]
 8011600:	69bb      	ldr	r3, [r7, #24]
 8011602:	429a      	cmp	r2, r3
 8011604:	d1da      	bne.n	80115bc <create_chain+0x68>
 8011606:	2300      	movs	r3, #0
 8011608:	e038      	b.n	801167c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801160a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801160c:	f04f 32ff 	mov.w	r2, #4294967295
 8011610:	69f9      	ldr	r1, [r7, #28]
 8011612:	6938      	ldr	r0, [r7, #16]
 8011614:	f7ff fe4d 	bl	80112b2 <put_fat>
 8011618:	4603      	mov	r3, r0
 801161a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801161c:	7dfb      	ldrb	r3, [r7, #23]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d109      	bne.n	8011636 <create_chain+0xe2>
 8011622:	683b      	ldr	r3, [r7, #0]
 8011624:	2b00      	cmp	r3, #0
 8011626:	d006      	beq.n	8011636 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011628:	69fa      	ldr	r2, [r7, #28]
 801162a:	6839      	ldr	r1, [r7, #0]
 801162c:	6938      	ldr	r0, [r7, #16]
 801162e:	f7ff fe40 	bl	80112b2 <put_fat>
 8011632:	4603      	mov	r3, r0
 8011634:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011636:	7dfb      	ldrb	r3, [r7, #23]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d116      	bne.n	801166a <create_chain+0x116>
		fs->last_clst = ncl;
 801163c:	693b      	ldr	r3, [r7, #16]
 801163e:	69fa      	ldr	r2, [r7, #28]
 8011640:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011642:	693b      	ldr	r3, [r7, #16]
 8011644:	695a      	ldr	r2, [r3, #20]
 8011646:	693b      	ldr	r3, [r7, #16]
 8011648:	699b      	ldr	r3, [r3, #24]
 801164a:	3b02      	subs	r3, #2
 801164c:	429a      	cmp	r2, r3
 801164e:	d804      	bhi.n	801165a <create_chain+0x106>
 8011650:	693b      	ldr	r3, [r7, #16]
 8011652:	695b      	ldr	r3, [r3, #20]
 8011654:	1e5a      	subs	r2, r3, #1
 8011656:	693b      	ldr	r3, [r7, #16]
 8011658:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 801165a:	693b      	ldr	r3, [r7, #16]
 801165c:	791b      	ldrb	r3, [r3, #4]
 801165e:	f043 0301 	orr.w	r3, r3, #1
 8011662:	b2da      	uxtb	r2, r3
 8011664:	693b      	ldr	r3, [r7, #16]
 8011666:	711a      	strb	r2, [r3, #4]
 8011668:	e007      	b.n	801167a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801166a:	7dfb      	ldrb	r3, [r7, #23]
 801166c:	2b01      	cmp	r3, #1
 801166e:	d102      	bne.n	8011676 <create_chain+0x122>
 8011670:	f04f 33ff 	mov.w	r3, #4294967295
 8011674:	e000      	b.n	8011678 <create_chain+0x124>
 8011676:	2301      	movs	r3, #1
 8011678:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801167a:	69fb      	ldr	r3, [r7, #28]
}
 801167c:	4618      	mov	r0, r3
 801167e:	3720      	adds	r7, #32
 8011680:	46bd      	mov	sp, r7
 8011682:	bd80      	pop	{r7, pc}

08011684 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8011684:	b480      	push	{r7}
 8011686:	b087      	sub	sp, #28
 8011688:	af00      	add	r7, sp, #0
 801168a:	6078      	str	r0, [r7, #4]
 801168c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011698:	3304      	adds	r3, #4
 801169a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801169c:	683b      	ldr	r3, [r7, #0]
 801169e:	0a5b      	lsrs	r3, r3, #9
 80116a0:	68fa      	ldr	r2, [r7, #12]
 80116a2:	8952      	ldrh	r2, [r2, #10]
 80116a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80116a8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80116aa:	693b      	ldr	r3, [r7, #16]
 80116ac:	1d1a      	adds	r2, r3, #4
 80116ae:	613a      	str	r2, [r7, #16]
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80116b4:	68bb      	ldr	r3, [r7, #8]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d101      	bne.n	80116be <clmt_clust+0x3a>
 80116ba:	2300      	movs	r3, #0
 80116bc:	e010      	b.n	80116e0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80116be:	697a      	ldr	r2, [r7, #20]
 80116c0:	68bb      	ldr	r3, [r7, #8]
 80116c2:	429a      	cmp	r2, r3
 80116c4:	d307      	bcc.n	80116d6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80116c6:	697a      	ldr	r2, [r7, #20]
 80116c8:	68bb      	ldr	r3, [r7, #8]
 80116ca:	1ad3      	subs	r3, r2, r3
 80116cc:	617b      	str	r3, [r7, #20]
 80116ce:	693b      	ldr	r3, [r7, #16]
 80116d0:	3304      	adds	r3, #4
 80116d2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80116d4:	e7e9      	b.n	80116aa <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80116d6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80116d8:	693b      	ldr	r3, [r7, #16]
 80116da:	681a      	ldr	r2, [r3, #0]
 80116dc:	697b      	ldr	r3, [r7, #20]
 80116de:	4413      	add	r3, r2
}
 80116e0:	4618      	mov	r0, r3
 80116e2:	371c      	adds	r7, #28
 80116e4:	46bd      	mov	sp, r7
 80116e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ea:	4770      	bx	lr

080116ec <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80116ec:	b580      	push	{r7, lr}
 80116ee:	b086      	sub	sp, #24
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	6078      	str	r0, [r7, #4]
 80116f4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80116fc:	683b      	ldr	r3, [r7, #0]
 80116fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011702:	d204      	bcs.n	801170e <dir_sdi+0x22>
 8011704:	683b      	ldr	r3, [r7, #0]
 8011706:	f003 031f 	and.w	r3, r3, #31
 801170a:	2b00      	cmp	r3, #0
 801170c:	d001      	beq.n	8011712 <dir_sdi+0x26>
		return FR_INT_ERR;
 801170e:	2302      	movs	r3, #2
 8011710:	e063      	b.n	80117da <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	683a      	ldr	r2, [r7, #0]
 8011716:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	689b      	ldr	r3, [r3, #8]
 801171c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801171e:	697b      	ldr	r3, [r7, #20]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d106      	bne.n	8011732 <dir_sdi+0x46>
 8011724:	693b      	ldr	r3, [r7, #16]
 8011726:	781b      	ldrb	r3, [r3, #0]
 8011728:	2b02      	cmp	r3, #2
 801172a:	d902      	bls.n	8011732 <dir_sdi+0x46>
		clst = fs->dirbase;
 801172c:	693b      	ldr	r3, [r7, #16]
 801172e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011730:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011732:	697b      	ldr	r3, [r7, #20]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d10c      	bne.n	8011752 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011738:	683b      	ldr	r3, [r7, #0]
 801173a:	095b      	lsrs	r3, r3, #5
 801173c:	693a      	ldr	r2, [r7, #16]
 801173e:	8912      	ldrh	r2, [r2, #8]
 8011740:	4293      	cmp	r3, r2
 8011742:	d301      	bcc.n	8011748 <dir_sdi+0x5c>
 8011744:	2302      	movs	r3, #2
 8011746:	e048      	b.n	80117da <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8011748:	693b      	ldr	r3, [r7, #16]
 801174a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	61da      	str	r2, [r3, #28]
 8011750:	e029      	b.n	80117a6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011752:	693b      	ldr	r3, [r7, #16]
 8011754:	895b      	ldrh	r3, [r3, #10]
 8011756:	025b      	lsls	r3, r3, #9
 8011758:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801175a:	e019      	b.n	8011790 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	6979      	ldr	r1, [r7, #20]
 8011760:	4618      	mov	r0, r3
 8011762:	f7ff fcfe 	bl	8011162 <get_fat>
 8011766:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011768:	697b      	ldr	r3, [r7, #20]
 801176a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801176e:	d101      	bne.n	8011774 <dir_sdi+0x88>
 8011770:	2301      	movs	r3, #1
 8011772:	e032      	b.n	80117da <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011774:	697b      	ldr	r3, [r7, #20]
 8011776:	2b01      	cmp	r3, #1
 8011778:	d904      	bls.n	8011784 <dir_sdi+0x98>
 801177a:	693b      	ldr	r3, [r7, #16]
 801177c:	699b      	ldr	r3, [r3, #24]
 801177e:	697a      	ldr	r2, [r7, #20]
 8011780:	429a      	cmp	r2, r3
 8011782:	d301      	bcc.n	8011788 <dir_sdi+0x9c>
 8011784:	2302      	movs	r3, #2
 8011786:	e028      	b.n	80117da <dir_sdi+0xee>
			ofs -= csz;
 8011788:	683a      	ldr	r2, [r7, #0]
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	1ad3      	subs	r3, r2, r3
 801178e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011790:	683a      	ldr	r2, [r7, #0]
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	429a      	cmp	r2, r3
 8011796:	d2e1      	bcs.n	801175c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8011798:	6979      	ldr	r1, [r7, #20]
 801179a:	6938      	ldr	r0, [r7, #16]
 801179c:	f7ff fcc2 	bl	8011124 <clust2sect>
 80117a0:	4602      	mov	r2, r0
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	697a      	ldr	r2, [r7, #20]
 80117aa:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	69db      	ldr	r3, [r3, #28]
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d101      	bne.n	80117b8 <dir_sdi+0xcc>
 80117b4:	2302      	movs	r3, #2
 80117b6:	e010      	b.n	80117da <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	69da      	ldr	r2, [r3, #28]
 80117bc:	683b      	ldr	r3, [r7, #0]
 80117be:	0a5b      	lsrs	r3, r3, #9
 80117c0:	441a      	add	r2, r3
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80117c6:	693b      	ldr	r3, [r7, #16]
 80117c8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80117cc:	683b      	ldr	r3, [r7, #0]
 80117ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80117d2:	441a      	add	r2, r3
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80117d8:	2300      	movs	r3, #0
}
 80117da:	4618      	mov	r0, r3
 80117dc:	3718      	adds	r7, #24
 80117de:	46bd      	mov	sp, r7
 80117e0:	bd80      	pop	{r7, pc}

080117e2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80117e2:	b580      	push	{r7, lr}
 80117e4:	b086      	sub	sp, #24
 80117e6:	af00      	add	r7, sp, #0
 80117e8:	6078      	str	r0, [r7, #4]
 80117ea:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	695b      	ldr	r3, [r3, #20]
 80117f6:	3320      	adds	r3, #32
 80117f8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	69db      	ldr	r3, [r3, #28]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d003      	beq.n	801180a <dir_next+0x28>
 8011802:	68bb      	ldr	r3, [r7, #8]
 8011804:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011808:	d301      	bcc.n	801180e <dir_next+0x2c>
 801180a:	2304      	movs	r3, #4
 801180c:	e0aa      	b.n	8011964 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801180e:	68bb      	ldr	r3, [r7, #8]
 8011810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011814:	2b00      	cmp	r3, #0
 8011816:	f040 8098 	bne.w	801194a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	69db      	ldr	r3, [r3, #28]
 801181e:	1c5a      	adds	r2, r3, #1
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	699b      	ldr	r3, [r3, #24]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d10b      	bne.n	8011844 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801182c:	68bb      	ldr	r3, [r7, #8]
 801182e:	095b      	lsrs	r3, r3, #5
 8011830:	68fa      	ldr	r2, [r7, #12]
 8011832:	8912      	ldrh	r2, [r2, #8]
 8011834:	4293      	cmp	r3, r2
 8011836:	f0c0 8088 	bcc.w	801194a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	2200      	movs	r2, #0
 801183e:	61da      	str	r2, [r3, #28]
 8011840:	2304      	movs	r3, #4
 8011842:	e08f      	b.n	8011964 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011844:	68bb      	ldr	r3, [r7, #8]
 8011846:	0a5b      	lsrs	r3, r3, #9
 8011848:	68fa      	ldr	r2, [r7, #12]
 801184a:	8952      	ldrh	r2, [r2, #10]
 801184c:	3a01      	subs	r2, #1
 801184e:	4013      	ands	r3, r2
 8011850:	2b00      	cmp	r3, #0
 8011852:	d17a      	bne.n	801194a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011854:	687a      	ldr	r2, [r7, #4]
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	699b      	ldr	r3, [r3, #24]
 801185a:	4619      	mov	r1, r3
 801185c:	4610      	mov	r0, r2
 801185e:	f7ff fc80 	bl	8011162 <get_fat>
 8011862:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011864:	697b      	ldr	r3, [r7, #20]
 8011866:	2b01      	cmp	r3, #1
 8011868:	d801      	bhi.n	801186e <dir_next+0x8c>
 801186a:	2302      	movs	r3, #2
 801186c:	e07a      	b.n	8011964 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801186e:	697b      	ldr	r3, [r7, #20]
 8011870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011874:	d101      	bne.n	801187a <dir_next+0x98>
 8011876:	2301      	movs	r3, #1
 8011878:	e074      	b.n	8011964 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	699b      	ldr	r3, [r3, #24]
 801187e:	697a      	ldr	r2, [r7, #20]
 8011880:	429a      	cmp	r2, r3
 8011882:	d358      	bcc.n	8011936 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011884:	683b      	ldr	r3, [r7, #0]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d104      	bne.n	8011894 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	2200      	movs	r2, #0
 801188e:	61da      	str	r2, [r3, #28]
 8011890:	2304      	movs	r3, #4
 8011892:	e067      	b.n	8011964 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011894:	687a      	ldr	r2, [r7, #4]
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	699b      	ldr	r3, [r3, #24]
 801189a:	4619      	mov	r1, r3
 801189c:	4610      	mov	r0, r2
 801189e:	f7ff fe59 	bl	8011554 <create_chain>
 80118a2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80118a4:	697b      	ldr	r3, [r7, #20]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d101      	bne.n	80118ae <dir_next+0xcc>
 80118aa:	2307      	movs	r3, #7
 80118ac:	e05a      	b.n	8011964 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80118ae:	697b      	ldr	r3, [r7, #20]
 80118b0:	2b01      	cmp	r3, #1
 80118b2:	d101      	bne.n	80118b8 <dir_next+0xd6>
 80118b4:	2302      	movs	r3, #2
 80118b6:	e055      	b.n	8011964 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80118b8:	697b      	ldr	r3, [r7, #20]
 80118ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118be:	d101      	bne.n	80118c4 <dir_next+0xe2>
 80118c0:	2301      	movs	r3, #1
 80118c2:	e04f      	b.n	8011964 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80118c4:	68f8      	ldr	r0, [r7, #12]
 80118c6:	f7ff fb4d 	bl	8010f64 <sync_window>
 80118ca:	4603      	mov	r3, r0
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d001      	beq.n	80118d4 <dir_next+0xf2>
 80118d0:	2301      	movs	r3, #1
 80118d2:	e047      	b.n	8011964 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	3334      	adds	r3, #52	; 0x34
 80118d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80118dc:	2100      	movs	r1, #0
 80118de:	4618      	mov	r0, r3
 80118e0:	f7ff f977 	bl	8010bd2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80118e4:	2300      	movs	r3, #0
 80118e6:	613b      	str	r3, [r7, #16]
 80118e8:	6979      	ldr	r1, [r7, #20]
 80118ea:	68f8      	ldr	r0, [r7, #12]
 80118ec:	f7ff fc1a 	bl	8011124 <clust2sect>
 80118f0:	4602      	mov	r2, r0
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	631a      	str	r2, [r3, #48]	; 0x30
 80118f6:	e012      	b.n	801191e <dir_next+0x13c>
						fs->wflag = 1;
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	2201      	movs	r2, #1
 80118fc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80118fe:	68f8      	ldr	r0, [r7, #12]
 8011900:	f7ff fb30 	bl	8010f64 <sync_window>
 8011904:	4603      	mov	r3, r0
 8011906:	2b00      	cmp	r3, #0
 8011908:	d001      	beq.n	801190e <dir_next+0x12c>
 801190a:	2301      	movs	r3, #1
 801190c:	e02a      	b.n	8011964 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801190e:	693b      	ldr	r3, [r7, #16]
 8011910:	3301      	adds	r3, #1
 8011912:	613b      	str	r3, [r7, #16]
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011918:	1c5a      	adds	r2, r3, #1
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	631a      	str	r2, [r3, #48]	; 0x30
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	895b      	ldrh	r3, [r3, #10]
 8011922:	461a      	mov	r2, r3
 8011924:	693b      	ldr	r3, [r7, #16]
 8011926:	4293      	cmp	r3, r2
 8011928:	d3e6      	bcc.n	80118f8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801192e:	693b      	ldr	r3, [r7, #16]
 8011930:	1ad2      	subs	r2, r2, r3
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	697a      	ldr	r2, [r7, #20]
 801193a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801193c:	6979      	ldr	r1, [r7, #20]
 801193e:	68f8      	ldr	r0, [r7, #12]
 8011940:	f7ff fbf0 	bl	8011124 <clust2sect>
 8011944:	4602      	mov	r2, r0
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	68ba      	ldr	r2, [r7, #8]
 801194e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011956:	68bb      	ldr	r3, [r7, #8]
 8011958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801195c:	441a      	add	r2, r3
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011962:	2300      	movs	r3, #0
}
 8011964:	4618      	mov	r0, r3
 8011966:	3718      	adds	r7, #24
 8011968:	46bd      	mov	sp, r7
 801196a:	bd80      	pop	{r7, pc}

0801196c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801196c:	b580      	push	{r7, lr}
 801196e:	b086      	sub	sp, #24
 8011970:	af00      	add	r7, sp, #0
 8011972:	6078      	str	r0, [r7, #4]
 8011974:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801197c:	2100      	movs	r1, #0
 801197e:	6878      	ldr	r0, [r7, #4]
 8011980:	f7ff feb4 	bl	80116ec <dir_sdi>
 8011984:	4603      	mov	r3, r0
 8011986:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011988:	7dfb      	ldrb	r3, [r7, #23]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d12b      	bne.n	80119e6 <dir_alloc+0x7a>
		n = 0;
 801198e:	2300      	movs	r3, #0
 8011990:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	69db      	ldr	r3, [r3, #28]
 8011996:	4619      	mov	r1, r3
 8011998:	68f8      	ldr	r0, [r7, #12]
 801199a:	f7ff fb27 	bl	8010fec <move_window>
 801199e:	4603      	mov	r3, r0
 80119a0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80119a2:	7dfb      	ldrb	r3, [r7, #23]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d11d      	bne.n	80119e4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	6a1b      	ldr	r3, [r3, #32]
 80119ac:	781b      	ldrb	r3, [r3, #0]
 80119ae:	2be5      	cmp	r3, #229	; 0xe5
 80119b0:	d004      	beq.n	80119bc <dir_alloc+0x50>
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	6a1b      	ldr	r3, [r3, #32]
 80119b6:	781b      	ldrb	r3, [r3, #0]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d107      	bne.n	80119cc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80119bc:	693b      	ldr	r3, [r7, #16]
 80119be:	3301      	adds	r3, #1
 80119c0:	613b      	str	r3, [r7, #16]
 80119c2:	693a      	ldr	r2, [r7, #16]
 80119c4:	683b      	ldr	r3, [r7, #0]
 80119c6:	429a      	cmp	r2, r3
 80119c8:	d102      	bne.n	80119d0 <dir_alloc+0x64>
 80119ca:	e00c      	b.n	80119e6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80119cc:	2300      	movs	r3, #0
 80119ce:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80119d0:	2101      	movs	r1, #1
 80119d2:	6878      	ldr	r0, [r7, #4]
 80119d4:	f7ff ff05 	bl	80117e2 <dir_next>
 80119d8:	4603      	mov	r3, r0
 80119da:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80119dc:	7dfb      	ldrb	r3, [r7, #23]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d0d7      	beq.n	8011992 <dir_alloc+0x26>
 80119e2:	e000      	b.n	80119e6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80119e4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80119e6:	7dfb      	ldrb	r3, [r7, #23]
 80119e8:	2b04      	cmp	r3, #4
 80119ea:	d101      	bne.n	80119f0 <dir_alloc+0x84>
 80119ec:	2307      	movs	r3, #7
 80119ee:	75fb      	strb	r3, [r7, #23]
	return res;
 80119f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80119f2:	4618      	mov	r0, r3
 80119f4:	3718      	adds	r7, #24
 80119f6:	46bd      	mov	sp, r7
 80119f8:	bd80      	pop	{r7, pc}

080119fa <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80119fa:	b580      	push	{r7, lr}
 80119fc:	b084      	sub	sp, #16
 80119fe:	af00      	add	r7, sp, #0
 8011a00:	6078      	str	r0, [r7, #4]
 8011a02:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011a04:	683b      	ldr	r3, [r7, #0]
 8011a06:	331a      	adds	r3, #26
 8011a08:	4618      	mov	r0, r3
 8011a0a:	f7ff f83f 	bl	8010a8c <ld_word>
 8011a0e:	4603      	mov	r3, r0
 8011a10:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	781b      	ldrb	r3, [r3, #0]
 8011a16:	2b03      	cmp	r3, #3
 8011a18:	d109      	bne.n	8011a2e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011a1a:	683b      	ldr	r3, [r7, #0]
 8011a1c:	3314      	adds	r3, #20
 8011a1e:	4618      	mov	r0, r3
 8011a20:	f7ff f834 	bl	8010a8c <ld_word>
 8011a24:	4603      	mov	r3, r0
 8011a26:	041b      	lsls	r3, r3, #16
 8011a28:	68fa      	ldr	r2, [r7, #12]
 8011a2a:	4313      	orrs	r3, r2
 8011a2c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011a2e:	68fb      	ldr	r3, [r7, #12]
}
 8011a30:	4618      	mov	r0, r3
 8011a32:	3710      	adds	r7, #16
 8011a34:	46bd      	mov	sp, r7
 8011a36:	bd80      	pop	{r7, pc}

08011a38 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b084      	sub	sp, #16
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	60f8      	str	r0, [r7, #12]
 8011a40:	60b9      	str	r1, [r7, #8]
 8011a42:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011a44:	68bb      	ldr	r3, [r7, #8]
 8011a46:	331a      	adds	r3, #26
 8011a48:	687a      	ldr	r2, [r7, #4]
 8011a4a:	b292      	uxth	r2, r2
 8011a4c:	4611      	mov	r1, r2
 8011a4e:	4618      	mov	r0, r3
 8011a50:	f7ff f857 	bl	8010b02 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	781b      	ldrb	r3, [r3, #0]
 8011a58:	2b03      	cmp	r3, #3
 8011a5a:	d109      	bne.n	8011a70 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011a5c:	68bb      	ldr	r3, [r7, #8]
 8011a5e:	f103 0214 	add.w	r2, r3, #20
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	0c1b      	lsrs	r3, r3, #16
 8011a66:	b29b      	uxth	r3, r3
 8011a68:	4619      	mov	r1, r3
 8011a6a:	4610      	mov	r0, r2
 8011a6c:	f7ff f849 	bl	8010b02 <st_word>
	}
}
 8011a70:	bf00      	nop
 8011a72:	3710      	adds	r7, #16
 8011a74:	46bd      	mov	sp, r7
 8011a76:	bd80      	pop	{r7, pc}

08011a78 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8011a78:	b590      	push	{r4, r7, lr}
 8011a7a:	b087      	sub	sp, #28
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	6078      	str	r0, [r7, #4]
 8011a80:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8011a82:	683b      	ldr	r3, [r7, #0]
 8011a84:	331a      	adds	r3, #26
 8011a86:	4618      	mov	r0, r3
 8011a88:	f7ff f800 	bl	8010a8c <ld_word>
 8011a8c:	4603      	mov	r3, r0
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d001      	beq.n	8011a96 <cmp_lfn+0x1e>
 8011a92:	2300      	movs	r3, #0
 8011a94:	e059      	b.n	8011b4a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8011a96:	683b      	ldr	r3, [r7, #0]
 8011a98:	781b      	ldrb	r3, [r3, #0]
 8011a9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011a9e:	1e5a      	subs	r2, r3, #1
 8011aa0:	4613      	mov	r3, r2
 8011aa2:	005b      	lsls	r3, r3, #1
 8011aa4:	4413      	add	r3, r2
 8011aa6:	009b      	lsls	r3, r3, #2
 8011aa8:	4413      	add	r3, r2
 8011aaa:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011aac:	2301      	movs	r3, #1
 8011aae:	81fb      	strh	r3, [r7, #14]
 8011ab0:	2300      	movs	r3, #0
 8011ab2:	613b      	str	r3, [r7, #16]
 8011ab4:	e033      	b.n	8011b1e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8011ab6:	4a27      	ldr	r2, [pc, #156]	; (8011b54 <cmp_lfn+0xdc>)
 8011ab8:	693b      	ldr	r3, [r7, #16]
 8011aba:	4413      	add	r3, r2
 8011abc:	781b      	ldrb	r3, [r3, #0]
 8011abe:	461a      	mov	r2, r3
 8011ac0:	683b      	ldr	r3, [r7, #0]
 8011ac2:	4413      	add	r3, r2
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	f7fe ffe1 	bl	8010a8c <ld_word>
 8011aca:	4603      	mov	r3, r0
 8011acc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8011ace:	89fb      	ldrh	r3, [r7, #14]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d01a      	beq.n	8011b0a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8011ad4:	697b      	ldr	r3, [r7, #20]
 8011ad6:	2bfe      	cmp	r3, #254	; 0xfe
 8011ad8:	d812      	bhi.n	8011b00 <cmp_lfn+0x88>
 8011ada:	89bb      	ldrh	r3, [r7, #12]
 8011adc:	4618      	mov	r0, r3
 8011ade:	f7fe fead 	bl	801083c <ff_wtoupper>
 8011ae2:	4603      	mov	r3, r0
 8011ae4:	461c      	mov	r4, r3
 8011ae6:	697b      	ldr	r3, [r7, #20]
 8011ae8:	1c5a      	adds	r2, r3, #1
 8011aea:	617a      	str	r2, [r7, #20]
 8011aec:	005b      	lsls	r3, r3, #1
 8011aee:	687a      	ldr	r2, [r7, #4]
 8011af0:	4413      	add	r3, r2
 8011af2:	881b      	ldrh	r3, [r3, #0]
 8011af4:	4618      	mov	r0, r3
 8011af6:	f7fe fea1 	bl	801083c <ff_wtoupper>
 8011afa:	4603      	mov	r3, r0
 8011afc:	429c      	cmp	r4, r3
 8011afe:	d001      	beq.n	8011b04 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8011b00:	2300      	movs	r3, #0
 8011b02:	e022      	b.n	8011b4a <cmp_lfn+0xd2>
			}
			wc = uc;
 8011b04:	89bb      	ldrh	r3, [r7, #12]
 8011b06:	81fb      	strh	r3, [r7, #14]
 8011b08:	e006      	b.n	8011b18 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011b0a:	89bb      	ldrh	r3, [r7, #12]
 8011b0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011b10:	4293      	cmp	r3, r2
 8011b12:	d001      	beq.n	8011b18 <cmp_lfn+0xa0>
 8011b14:	2300      	movs	r3, #0
 8011b16:	e018      	b.n	8011b4a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011b18:	693b      	ldr	r3, [r7, #16]
 8011b1a:	3301      	adds	r3, #1
 8011b1c:	613b      	str	r3, [r7, #16]
 8011b1e:	693b      	ldr	r3, [r7, #16]
 8011b20:	2b0c      	cmp	r3, #12
 8011b22:	d9c8      	bls.n	8011ab6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8011b24:	683b      	ldr	r3, [r7, #0]
 8011b26:	781b      	ldrb	r3, [r3, #0]
 8011b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d00b      	beq.n	8011b48 <cmp_lfn+0xd0>
 8011b30:	89fb      	ldrh	r3, [r7, #14]
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d008      	beq.n	8011b48 <cmp_lfn+0xd0>
 8011b36:	697b      	ldr	r3, [r7, #20]
 8011b38:	005b      	lsls	r3, r3, #1
 8011b3a:	687a      	ldr	r2, [r7, #4]
 8011b3c:	4413      	add	r3, r2
 8011b3e:	881b      	ldrh	r3, [r3, #0]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d001      	beq.n	8011b48 <cmp_lfn+0xd0>
 8011b44:	2300      	movs	r3, #0
 8011b46:	e000      	b.n	8011b4a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8011b48:	2301      	movs	r3, #1
}
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	371c      	adds	r7, #28
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	bd90      	pop	{r4, r7, pc}
 8011b52:	bf00      	nop
 8011b54:	08028584 	.word	0x08028584

08011b58 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8011b58:	b580      	push	{r7, lr}
 8011b5a:	b088      	sub	sp, #32
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	60f8      	str	r0, [r7, #12]
 8011b60:	60b9      	str	r1, [r7, #8]
 8011b62:	4611      	mov	r1, r2
 8011b64:	461a      	mov	r2, r3
 8011b66:	460b      	mov	r3, r1
 8011b68:	71fb      	strb	r3, [r7, #7]
 8011b6a:	4613      	mov	r3, r2
 8011b6c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8011b6e:	68bb      	ldr	r3, [r7, #8]
 8011b70:	330d      	adds	r3, #13
 8011b72:	79ba      	ldrb	r2, [r7, #6]
 8011b74:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8011b76:	68bb      	ldr	r3, [r7, #8]
 8011b78:	330b      	adds	r3, #11
 8011b7a:	220f      	movs	r2, #15
 8011b7c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8011b7e:	68bb      	ldr	r3, [r7, #8]
 8011b80:	330c      	adds	r3, #12
 8011b82:	2200      	movs	r2, #0
 8011b84:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8011b86:	68bb      	ldr	r3, [r7, #8]
 8011b88:	331a      	adds	r3, #26
 8011b8a:	2100      	movs	r1, #0
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	f7fe ffb8 	bl	8010b02 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8011b92:	79fb      	ldrb	r3, [r7, #7]
 8011b94:	1e5a      	subs	r2, r3, #1
 8011b96:	4613      	mov	r3, r2
 8011b98:	005b      	lsls	r3, r3, #1
 8011b9a:	4413      	add	r3, r2
 8011b9c:	009b      	lsls	r3, r3, #2
 8011b9e:	4413      	add	r3, r2
 8011ba0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8011ba2:	2300      	movs	r3, #0
 8011ba4:	82fb      	strh	r3, [r7, #22]
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011baa:	8afb      	ldrh	r3, [r7, #22]
 8011bac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011bb0:	4293      	cmp	r3, r2
 8011bb2:	d007      	beq.n	8011bc4 <put_lfn+0x6c>
 8011bb4:	69fb      	ldr	r3, [r7, #28]
 8011bb6:	1c5a      	adds	r2, r3, #1
 8011bb8:	61fa      	str	r2, [r7, #28]
 8011bba:	005b      	lsls	r3, r3, #1
 8011bbc:	68fa      	ldr	r2, [r7, #12]
 8011bbe:	4413      	add	r3, r2
 8011bc0:	881b      	ldrh	r3, [r3, #0]
 8011bc2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8011bc4:	4a17      	ldr	r2, [pc, #92]	; (8011c24 <put_lfn+0xcc>)
 8011bc6:	69bb      	ldr	r3, [r7, #24]
 8011bc8:	4413      	add	r3, r2
 8011bca:	781b      	ldrb	r3, [r3, #0]
 8011bcc:	461a      	mov	r2, r3
 8011bce:	68bb      	ldr	r3, [r7, #8]
 8011bd0:	4413      	add	r3, r2
 8011bd2:	8afa      	ldrh	r2, [r7, #22]
 8011bd4:	4611      	mov	r1, r2
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	f7fe ff93 	bl	8010b02 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011bdc:	8afb      	ldrh	r3, [r7, #22]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d102      	bne.n	8011be8 <put_lfn+0x90>
 8011be2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011be6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8011be8:	69bb      	ldr	r3, [r7, #24]
 8011bea:	3301      	adds	r3, #1
 8011bec:	61bb      	str	r3, [r7, #24]
 8011bee:	69bb      	ldr	r3, [r7, #24]
 8011bf0:	2b0c      	cmp	r3, #12
 8011bf2:	d9da      	bls.n	8011baa <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8011bf4:	8afb      	ldrh	r3, [r7, #22]
 8011bf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011bfa:	4293      	cmp	r3, r2
 8011bfc:	d006      	beq.n	8011c0c <put_lfn+0xb4>
 8011bfe:	69fb      	ldr	r3, [r7, #28]
 8011c00:	005b      	lsls	r3, r3, #1
 8011c02:	68fa      	ldr	r2, [r7, #12]
 8011c04:	4413      	add	r3, r2
 8011c06:	881b      	ldrh	r3, [r3, #0]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d103      	bne.n	8011c14 <put_lfn+0xbc>
 8011c0c:	79fb      	ldrb	r3, [r7, #7]
 8011c0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c12:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8011c14:	68bb      	ldr	r3, [r7, #8]
 8011c16:	79fa      	ldrb	r2, [r7, #7]
 8011c18:	701a      	strb	r2, [r3, #0]
}
 8011c1a:	bf00      	nop
 8011c1c:	3720      	adds	r7, #32
 8011c1e:	46bd      	mov	sp, r7
 8011c20:	bd80      	pop	{r7, pc}
 8011c22:	bf00      	nop
 8011c24:	08028584 	.word	0x08028584

08011c28 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8011c28:	b580      	push	{r7, lr}
 8011c2a:	b08c      	sub	sp, #48	; 0x30
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	60f8      	str	r0, [r7, #12]
 8011c30:	60b9      	str	r1, [r7, #8]
 8011c32:	607a      	str	r2, [r7, #4]
 8011c34:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8011c36:	220b      	movs	r2, #11
 8011c38:	68b9      	ldr	r1, [r7, #8]
 8011c3a:	68f8      	ldr	r0, [r7, #12]
 8011c3c:	f7fe ffa8 	bl	8010b90 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8011c40:	683b      	ldr	r3, [r7, #0]
 8011c42:	2b05      	cmp	r3, #5
 8011c44:	d929      	bls.n	8011c9a <gen_numname+0x72>
		sr = seq;
 8011c46:	683b      	ldr	r3, [r7, #0]
 8011c48:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8011c4a:	e020      	b.n	8011c8e <gen_numname+0x66>
			wc = *lfn++;
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	1c9a      	adds	r2, r3, #2
 8011c50:	607a      	str	r2, [r7, #4]
 8011c52:	881b      	ldrh	r3, [r3, #0]
 8011c54:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8011c56:	2300      	movs	r3, #0
 8011c58:	62bb      	str	r3, [r7, #40]	; 0x28
 8011c5a:	e015      	b.n	8011c88 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8011c5c:	69fb      	ldr	r3, [r7, #28]
 8011c5e:	005a      	lsls	r2, r3, #1
 8011c60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011c62:	f003 0301 	and.w	r3, r3, #1
 8011c66:	4413      	add	r3, r2
 8011c68:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8011c6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011c6c:	085b      	lsrs	r3, r3, #1
 8011c6e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8011c70:	69fb      	ldr	r3, [r7, #28]
 8011c72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d003      	beq.n	8011c82 <gen_numname+0x5a>
 8011c7a:	69fa      	ldr	r2, [r7, #28]
 8011c7c:	4b31      	ldr	r3, [pc, #196]	; (8011d44 <gen_numname+0x11c>)
 8011c7e:	4053      	eors	r3, r2
 8011c80:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8011c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c84:	3301      	adds	r3, #1
 8011c86:	62bb      	str	r3, [r7, #40]	; 0x28
 8011c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c8a:	2b0f      	cmp	r3, #15
 8011c8c:	d9e6      	bls.n	8011c5c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	881b      	ldrh	r3, [r3, #0]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d1da      	bne.n	8011c4c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8011c96:	69fb      	ldr	r3, [r7, #28]
 8011c98:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8011c9a:	2307      	movs	r3, #7
 8011c9c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8011c9e:	683b      	ldr	r3, [r7, #0]
 8011ca0:	b2db      	uxtb	r3, r3
 8011ca2:	f003 030f 	and.w	r3, r3, #15
 8011ca6:	b2db      	uxtb	r3, r3
 8011ca8:	3330      	adds	r3, #48	; 0x30
 8011caa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8011cae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011cb2:	2b39      	cmp	r3, #57	; 0x39
 8011cb4:	d904      	bls.n	8011cc0 <gen_numname+0x98>
 8011cb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011cba:	3307      	adds	r3, #7
 8011cbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8011cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cc2:	1e5a      	subs	r2, r3, #1
 8011cc4:	62ba      	str	r2, [r7, #40]	; 0x28
 8011cc6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011cca:	4413      	add	r3, r2
 8011ccc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8011cd0:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8011cd4:	683b      	ldr	r3, [r7, #0]
 8011cd6:	091b      	lsrs	r3, r3, #4
 8011cd8:	603b      	str	r3, [r7, #0]
	} while (seq);
 8011cda:	683b      	ldr	r3, [r7, #0]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d1de      	bne.n	8011c9e <gen_numname+0x76>
	ns[i] = '~';
 8011ce0:	f107 0214 	add.w	r2, r7, #20
 8011ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ce6:	4413      	add	r3, r2
 8011ce8:	227e      	movs	r2, #126	; 0x7e
 8011cea:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8011cec:	2300      	movs	r3, #0
 8011cee:	627b      	str	r3, [r7, #36]	; 0x24
 8011cf0:	e002      	b.n	8011cf8 <gen_numname+0xd0>
 8011cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cf4:	3301      	adds	r3, #1
 8011cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8011cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cfc:	429a      	cmp	r2, r3
 8011cfe:	d205      	bcs.n	8011d0c <gen_numname+0xe4>
 8011d00:	68fa      	ldr	r2, [r7, #12]
 8011d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d04:	4413      	add	r3, r2
 8011d06:	781b      	ldrb	r3, [r3, #0]
 8011d08:	2b20      	cmp	r3, #32
 8011d0a:	d1f2      	bne.n	8011cf2 <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d0e:	2b07      	cmp	r3, #7
 8011d10:	d808      	bhi.n	8011d24 <gen_numname+0xfc>
 8011d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d14:	1c5a      	adds	r2, r3, #1
 8011d16:	62ba      	str	r2, [r7, #40]	; 0x28
 8011d18:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011d1c:	4413      	add	r3, r2
 8011d1e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8011d22:	e000      	b.n	8011d26 <gen_numname+0xfe>
 8011d24:	2120      	movs	r1, #32
 8011d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d28:	1c5a      	adds	r2, r3, #1
 8011d2a:	627a      	str	r2, [r7, #36]	; 0x24
 8011d2c:	68fa      	ldr	r2, [r7, #12]
 8011d2e:	4413      	add	r3, r2
 8011d30:	460a      	mov	r2, r1
 8011d32:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8011d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d36:	2b07      	cmp	r3, #7
 8011d38:	d9e8      	bls.n	8011d0c <gen_numname+0xe4>
}
 8011d3a:	bf00      	nop
 8011d3c:	bf00      	nop
 8011d3e:	3730      	adds	r7, #48	; 0x30
 8011d40:	46bd      	mov	sp, r7
 8011d42:	bd80      	pop	{r7, pc}
 8011d44:	00011021 	.word	0x00011021

08011d48 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8011d48:	b480      	push	{r7}
 8011d4a:	b085      	sub	sp, #20
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8011d50:	2300      	movs	r3, #0
 8011d52:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8011d54:	230b      	movs	r3, #11
 8011d56:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8011d58:	7bfb      	ldrb	r3, [r7, #15]
 8011d5a:	b2da      	uxtb	r2, r3
 8011d5c:	0852      	lsrs	r2, r2, #1
 8011d5e:	01db      	lsls	r3, r3, #7
 8011d60:	4313      	orrs	r3, r2
 8011d62:	b2da      	uxtb	r2, r3
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	1c59      	adds	r1, r3, #1
 8011d68:	6079      	str	r1, [r7, #4]
 8011d6a:	781b      	ldrb	r3, [r3, #0]
 8011d6c:	4413      	add	r3, r2
 8011d6e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8011d70:	68bb      	ldr	r3, [r7, #8]
 8011d72:	3b01      	subs	r3, #1
 8011d74:	60bb      	str	r3, [r7, #8]
 8011d76:	68bb      	ldr	r3, [r7, #8]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d1ed      	bne.n	8011d58 <sum_sfn+0x10>
	return sum;
 8011d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d7e:	4618      	mov	r0, r3
 8011d80:	3714      	adds	r7, #20
 8011d82:	46bd      	mov	sp, r7
 8011d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d88:	4770      	bx	lr

08011d8a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011d8a:	b580      	push	{r7, lr}
 8011d8c:	b086      	sub	sp, #24
 8011d8e:	af00      	add	r7, sp, #0
 8011d90:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011d98:	2100      	movs	r1, #0
 8011d9a:	6878      	ldr	r0, [r7, #4]
 8011d9c:	f7ff fca6 	bl	80116ec <dir_sdi>
 8011da0:	4603      	mov	r3, r0
 8011da2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011da4:	7dfb      	ldrb	r3, [r7, #23]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d001      	beq.n	8011dae <dir_find+0x24>
 8011daa:	7dfb      	ldrb	r3, [r7, #23]
 8011dac:	e0a9      	b.n	8011f02 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011dae:	23ff      	movs	r3, #255	; 0xff
 8011db0:	753b      	strb	r3, [r7, #20]
 8011db2:	7d3b      	ldrb	r3, [r7, #20]
 8011db4:	757b      	strb	r3, [r7, #21]
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	f04f 32ff 	mov.w	r2, #4294967295
 8011dbc:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	69db      	ldr	r3, [r3, #28]
 8011dc2:	4619      	mov	r1, r3
 8011dc4:	6938      	ldr	r0, [r7, #16]
 8011dc6:	f7ff f911 	bl	8010fec <move_window>
 8011dca:	4603      	mov	r3, r0
 8011dcc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011dce:	7dfb      	ldrb	r3, [r7, #23]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	f040 8090 	bne.w	8011ef6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	6a1b      	ldr	r3, [r3, #32]
 8011dda:	781b      	ldrb	r3, [r3, #0]
 8011ddc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011dde:	7dbb      	ldrb	r3, [r7, #22]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d102      	bne.n	8011dea <dir_find+0x60>
 8011de4:	2304      	movs	r3, #4
 8011de6:	75fb      	strb	r3, [r7, #23]
 8011de8:	e08a      	b.n	8011f00 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	6a1b      	ldr	r3, [r3, #32]
 8011dee:	330b      	adds	r3, #11
 8011df0:	781b      	ldrb	r3, [r3, #0]
 8011df2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011df6:	73fb      	strb	r3, [r7, #15]
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	7bfa      	ldrb	r2, [r7, #15]
 8011dfc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8011dfe:	7dbb      	ldrb	r3, [r7, #22]
 8011e00:	2be5      	cmp	r3, #229	; 0xe5
 8011e02:	d007      	beq.n	8011e14 <dir_find+0x8a>
 8011e04:	7bfb      	ldrb	r3, [r7, #15]
 8011e06:	f003 0308 	and.w	r3, r3, #8
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d009      	beq.n	8011e22 <dir_find+0x98>
 8011e0e:	7bfb      	ldrb	r3, [r7, #15]
 8011e10:	2b0f      	cmp	r3, #15
 8011e12:	d006      	beq.n	8011e22 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011e14:	23ff      	movs	r3, #255	; 0xff
 8011e16:	757b      	strb	r3, [r7, #21]
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8011e1e:	631a      	str	r2, [r3, #48]	; 0x30
 8011e20:	e05e      	b.n	8011ee0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8011e22:	7bfb      	ldrb	r3, [r7, #15]
 8011e24:	2b0f      	cmp	r3, #15
 8011e26:	d136      	bne.n	8011e96 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d154      	bne.n	8011ee0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8011e36:	7dbb      	ldrb	r3, [r7, #22]
 8011e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d00d      	beq.n	8011e5c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	6a1b      	ldr	r3, [r3, #32]
 8011e44:	7b5b      	ldrb	r3, [r3, #13]
 8011e46:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8011e48:	7dbb      	ldrb	r3, [r7, #22]
 8011e4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011e4e:	75bb      	strb	r3, [r7, #22]
 8011e50:	7dbb      	ldrb	r3, [r7, #22]
 8011e52:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	695a      	ldr	r2, [r3, #20]
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8011e5c:	7dba      	ldrb	r2, [r7, #22]
 8011e5e:	7d7b      	ldrb	r3, [r7, #21]
 8011e60:	429a      	cmp	r2, r3
 8011e62:	d115      	bne.n	8011e90 <dir_find+0x106>
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	6a1b      	ldr	r3, [r3, #32]
 8011e68:	330d      	adds	r3, #13
 8011e6a:	781b      	ldrb	r3, [r3, #0]
 8011e6c:	7d3a      	ldrb	r2, [r7, #20]
 8011e6e:	429a      	cmp	r2, r3
 8011e70:	d10e      	bne.n	8011e90 <dir_find+0x106>
 8011e72:	693b      	ldr	r3, [r7, #16]
 8011e74:	68da      	ldr	r2, [r3, #12]
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	6a1b      	ldr	r3, [r3, #32]
 8011e7a:	4619      	mov	r1, r3
 8011e7c:	4610      	mov	r0, r2
 8011e7e:	f7ff fdfb 	bl	8011a78 <cmp_lfn>
 8011e82:	4603      	mov	r3, r0
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d003      	beq.n	8011e90 <dir_find+0x106>
 8011e88:	7d7b      	ldrb	r3, [r7, #21]
 8011e8a:	3b01      	subs	r3, #1
 8011e8c:	b2db      	uxtb	r3, r3
 8011e8e:	e000      	b.n	8011e92 <dir_find+0x108>
 8011e90:	23ff      	movs	r3, #255	; 0xff
 8011e92:	757b      	strb	r3, [r7, #21]
 8011e94:	e024      	b.n	8011ee0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8011e96:	7d7b      	ldrb	r3, [r7, #21]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d109      	bne.n	8011eb0 <dir_find+0x126>
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	6a1b      	ldr	r3, [r3, #32]
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	f7ff ff51 	bl	8011d48 <sum_sfn>
 8011ea6:	4603      	mov	r3, r0
 8011ea8:	461a      	mov	r2, r3
 8011eaa:	7d3b      	ldrb	r3, [r7, #20]
 8011eac:	4293      	cmp	r3, r2
 8011eae:	d024      	beq.n	8011efa <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011eb6:	f003 0301 	and.w	r3, r3, #1
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d10a      	bne.n	8011ed4 <dir_find+0x14a>
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	6a18      	ldr	r0, [r3, #32]
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	3324      	adds	r3, #36	; 0x24
 8011ec6:	220b      	movs	r2, #11
 8011ec8:	4619      	mov	r1, r3
 8011eca:	f7fe fe9d 	bl	8010c08 <mem_cmp>
 8011ece:	4603      	mov	r3, r0
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d014      	beq.n	8011efe <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011ed4:	23ff      	movs	r3, #255	; 0xff
 8011ed6:	757b      	strb	r3, [r7, #21]
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	f04f 32ff 	mov.w	r2, #4294967295
 8011ede:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8011ee0:	2100      	movs	r1, #0
 8011ee2:	6878      	ldr	r0, [r7, #4]
 8011ee4:	f7ff fc7d 	bl	80117e2 <dir_next>
 8011ee8:	4603      	mov	r3, r0
 8011eea:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011eec:	7dfb      	ldrb	r3, [r7, #23]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	f43f af65 	beq.w	8011dbe <dir_find+0x34>
 8011ef4:	e004      	b.n	8011f00 <dir_find+0x176>
		if (res != FR_OK) break;
 8011ef6:	bf00      	nop
 8011ef8:	e002      	b.n	8011f00 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8011efa:	bf00      	nop
 8011efc:	e000      	b.n	8011f00 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8011efe:	bf00      	nop

	return res;
 8011f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f02:	4618      	mov	r0, r3
 8011f04:	3718      	adds	r7, #24
 8011f06:	46bd      	mov	sp, r7
 8011f08:	bd80      	pop	{r7, pc}
	...

08011f0c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011f0c:	b580      	push	{r7, lr}
 8011f0e:	b08c      	sub	sp, #48	; 0x30
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011f20:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d001      	beq.n	8011f2c <dir_register+0x20>
 8011f28:	2306      	movs	r3, #6
 8011f2a:	e0e0      	b.n	80120ee <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8011f2c:	2300      	movs	r3, #0
 8011f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8011f30:	e002      	b.n	8011f38 <dir_register+0x2c>
 8011f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f34:	3301      	adds	r3, #1
 8011f36:	627b      	str	r3, [r7, #36]	; 0x24
 8011f38:	69fb      	ldr	r3, [r7, #28]
 8011f3a:	68da      	ldr	r2, [r3, #12]
 8011f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f3e:	005b      	lsls	r3, r3, #1
 8011f40:	4413      	add	r3, r2
 8011f42:	881b      	ldrh	r3, [r3, #0]
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d1f4      	bne.n	8011f32 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8011f4e:	f107 030c 	add.w	r3, r7, #12
 8011f52:	220c      	movs	r2, #12
 8011f54:	4618      	mov	r0, r3
 8011f56:	f7fe fe1b 	bl	8010b90 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8011f5a:	7dfb      	ldrb	r3, [r7, #23]
 8011f5c:	f003 0301 	and.w	r3, r3, #1
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d032      	beq.n	8011fca <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	2240      	movs	r2, #64	; 0x40
 8011f68:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8011f6c:	2301      	movs	r3, #1
 8011f6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011f70:	e016      	b.n	8011fa0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8011f78:	69fb      	ldr	r3, [r7, #28]
 8011f7a:	68da      	ldr	r2, [r3, #12]
 8011f7c:	f107 010c 	add.w	r1, r7, #12
 8011f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f82:	f7ff fe51 	bl	8011c28 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8011f86:	6878      	ldr	r0, [r7, #4]
 8011f88:	f7ff feff 	bl	8011d8a <dir_find>
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8011f92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d106      	bne.n	8011fa8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8011f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f9c:	3301      	adds	r3, #1
 8011f9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fa2:	2b63      	cmp	r3, #99	; 0x63
 8011fa4:	d9e5      	bls.n	8011f72 <dir_register+0x66>
 8011fa6:	e000      	b.n	8011faa <dir_register+0x9e>
			if (res != FR_OK) break;
 8011fa8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8011faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fac:	2b64      	cmp	r3, #100	; 0x64
 8011fae:	d101      	bne.n	8011fb4 <dir_register+0xa8>
 8011fb0:	2307      	movs	r3, #7
 8011fb2:	e09c      	b.n	80120ee <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8011fb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011fb8:	2b04      	cmp	r3, #4
 8011fba:	d002      	beq.n	8011fc2 <dir_register+0xb6>
 8011fbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011fc0:	e095      	b.n	80120ee <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8011fc2:	7dfa      	ldrb	r2, [r7, #23]
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8011fca:	7dfb      	ldrb	r3, [r7, #23]
 8011fcc:	f003 0302 	and.w	r3, r3, #2
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d007      	beq.n	8011fe4 <dir_register+0xd8>
 8011fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fd6:	330c      	adds	r3, #12
 8011fd8:	4a47      	ldr	r2, [pc, #284]	; (80120f8 <dir_register+0x1ec>)
 8011fda:	fba2 2303 	umull	r2, r3, r2, r3
 8011fde:	089b      	lsrs	r3, r3, #2
 8011fe0:	3301      	adds	r3, #1
 8011fe2:	e000      	b.n	8011fe6 <dir_register+0xda>
 8011fe4:	2301      	movs	r3, #1
 8011fe6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8011fe8:	6a39      	ldr	r1, [r7, #32]
 8011fea:	6878      	ldr	r0, [r7, #4]
 8011fec:	f7ff fcbe 	bl	801196c <dir_alloc>
 8011ff0:	4603      	mov	r3, r0
 8011ff2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8011ff6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d148      	bne.n	8012090 <dir_register+0x184>
 8011ffe:	6a3b      	ldr	r3, [r7, #32]
 8012000:	3b01      	subs	r3, #1
 8012002:	623b      	str	r3, [r7, #32]
 8012004:	6a3b      	ldr	r3, [r7, #32]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d042      	beq.n	8012090 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	695a      	ldr	r2, [r3, #20]
 801200e:	6a3b      	ldr	r3, [r7, #32]
 8012010:	015b      	lsls	r3, r3, #5
 8012012:	1ad3      	subs	r3, r2, r3
 8012014:	4619      	mov	r1, r3
 8012016:	6878      	ldr	r0, [r7, #4]
 8012018:	f7ff fb68 	bl	80116ec <dir_sdi>
 801201c:	4603      	mov	r3, r0
 801201e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8012022:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012026:	2b00      	cmp	r3, #0
 8012028:	d132      	bne.n	8012090 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	3324      	adds	r3, #36	; 0x24
 801202e:	4618      	mov	r0, r3
 8012030:	f7ff fe8a 	bl	8011d48 <sum_sfn>
 8012034:	4603      	mov	r3, r0
 8012036:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	69db      	ldr	r3, [r3, #28]
 801203c:	4619      	mov	r1, r3
 801203e:	69f8      	ldr	r0, [r7, #28]
 8012040:	f7fe ffd4 	bl	8010fec <move_window>
 8012044:	4603      	mov	r3, r0
 8012046:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 801204a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801204e:	2b00      	cmp	r3, #0
 8012050:	d11d      	bne.n	801208e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8012052:	69fb      	ldr	r3, [r7, #28]
 8012054:	68d8      	ldr	r0, [r3, #12]
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	6a19      	ldr	r1, [r3, #32]
 801205a:	6a3b      	ldr	r3, [r7, #32]
 801205c:	b2da      	uxtb	r2, r3
 801205e:	7efb      	ldrb	r3, [r7, #27]
 8012060:	f7ff fd7a 	bl	8011b58 <put_lfn>
				fs->wflag = 1;
 8012064:	69fb      	ldr	r3, [r7, #28]
 8012066:	2201      	movs	r2, #1
 8012068:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801206a:	2100      	movs	r1, #0
 801206c:	6878      	ldr	r0, [r7, #4]
 801206e:	f7ff fbb8 	bl	80117e2 <dir_next>
 8012072:	4603      	mov	r3, r0
 8012074:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8012078:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801207c:	2b00      	cmp	r3, #0
 801207e:	d107      	bne.n	8012090 <dir_register+0x184>
 8012080:	6a3b      	ldr	r3, [r7, #32]
 8012082:	3b01      	subs	r3, #1
 8012084:	623b      	str	r3, [r7, #32]
 8012086:	6a3b      	ldr	r3, [r7, #32]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d1d5      	bne.n	8012038 <dir_register+0x12c>
 801208c:	e000      	b.n	8012090 <dir_register+0x184>
				if (res != FR_OK) break;
 801208e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012090:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012094:	2b00      	cmp	r3, #0
 8012096:	d128      	bne.n	80120ea <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	69db      	ldr	r3, [r3, #28]
 801209c:	4619      	mov	r1, r3
 801209e:	69f8      	ldr	r0, [r7, #28]
 80120a0:	f7fe ffa4 	bl	8010fec <move_window>
 80120a4:	4603      	mov	r3, r0
 80120a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80120aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d11b      	bne.n	80120ea <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	6a1b      	ldr	r3, [r3, #32]
 80120b6:	2220      	movs	r2, #32
 80120b8:	2100      	movs	r1, #0
 80120ba:	4618      	mov	r0, r3
 80120bc:	f7fe fd89 	bl	8010bd2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	6a18      	ldr	r0, [r3, #32]
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	3324      	adds	r3, #36	; 0x24
 80120c8:	220b      	movs	r2, #11
 80120ca:	4619      	mov	r1, r3
 80120cc:	f7fe fd60 	bl	8010b90 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	6a1b      	ldr	r3, [r3, #32]
 80120da:	330c      	adds	r3, #12
 80120dc:	f002 0218 	and.w	r2, r2, #24
 80120e0:	b2d2      	uxtb	r2, r2
 80120e2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80120e4:	69fb      	ldr	r3, [r7, #28]
 80120e6:	2201      	movs	r2, #1
 80120e8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80120ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80120ee:	4618      	mov	r0, r3
 80120f0:	3730      	adds	r7, #48	; 0x30
 80120f2:	46bd      	mov	sp, r7
 80120f4:	bd80      	pop	{r7, pc}
 80120f6:	bf00      	nop
 80120f8:	4ec4ec4f 	.word	0x4ec4ec4f

080120fc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80120fc:	b580      	push	{r7, lr}
 80120fe:	b08a      	sub	sp, #40	; 0x28
 8012100:	af00      	add	r7, sp, #0
 8012102:	6078      	str	r0, [r7, #4]
 8012104:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8012106:	683b      	ldr	r3, [r7, #0]
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	613b      	str	r3, [r7, #16]
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	68db      	ldr	r3, [r3, #12]
 8012112:	60fb      	str	r3, [r7, #12]
 8012114:	2300      	movs	r3, #0
 8012116:	617b      	str	r3, [r7, #20]
 8012118:	697b      	ldr	r3, [r7, #20]
 801211a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801211c:	69bb      	ldr	r3, [r7, #24]
 801211e:	1c5a      	adds	r2, r3, #1
 8012120:	61ba      	str	r2, [r7, #24]
 8012122:	693a      	ldr	r2, [r7, #16]
 8012124:	4413      	add	r3, r2
 8012126:	781b      	ldrb	r3, [r3, #0]
 8012128:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801212a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801212c:	2b1f      	cmp	r3, #31
 801212e:	d940      	bls.n	80121b2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8012130:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012132:	2b2f      	cmp	r3, #47	; 0x2f
 8012134:	d006      	beq.n	8012144 <create_name+0x48>
 8012136:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012138:	2b5c      	cmp	r3, #92	; 0x5c
 801213a:	d110      	bne.n	801215e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801213c:	e002      	b.n	8012144 <create_name+0x48>
 801213e:	69bb      	ldr	r3, [r7, #24]
 8012140:	3301      	adds	r3, #1
 8012142:	61bb      	str	r3, [r7, #24]
 8012144:	693a      	ldr	r2, [r7, #16]
 8012146:	69bb      	ldr	r3, [r7, #24]
 8012148:	4413      	add	r3, r2
 801214a:	781b      	ldrb	r3, [r3, #0]
 801214c:	2b2f      	cmp	r3, #47	; 0x2f
 801214e:	d0f6      	beq.n	801213e <create_name+0x42>
 8012150:	693a      	ldr	r2, [r7, #16]
 8012152:	69bb      	ldr	r3, [r7, #24]
 8012154:	4413      	add	r3, r2
 8012156:	781b      	ldrb	r3, [r3, #0]
 8012158:	2b5c      	cmp	r3, #92	; 0x5c
 801215a:	d0f0      	beq.n	801213e <create_name+0x42>
			break;
 801215c:	e02a      	b.n	80121b4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801215e:	697b      	ldr	r3, [r7, #20]
 8012160:	2bfe      	cmp	r3, #254	; 0xfe
 8012162:	d901      	bls.n	8012168 <create_name+0x6c>
 8012164:	2306      	movs	r3, #6
 8012166:	e177      	b.n	8012458 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8012168:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801216a:	b2db      	uxtb	r3, r3
 801216c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801216e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012170:	2101      	movs	r1, #1
 8012172:	4618      	mov	r0, r3
 8012174:	f7fe fb26 	bl	80107c4 <ff_convert>
 8012178:	4603      	mov	r3, r0
 801217a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801217c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801217e:	2b00      	cmp	r3, #0
 8012180:	d101      	bne.n	8012186 <create_name+0x8a>
 8012182:	2306      	movs	r3, #6
 8012184:	e168      	b.n	8012458 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8012186:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012188:	2b7f      	cmp	r3, #127	; 0x7f
 801218a:	d809      	bhi.n	80121a0 <create_name+0xa4>
 801218c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801218e:	4619      	mov	r1, r3
 8012190:	48b3      	ldr	r0, [pc, #716]	; (8012460 <create_name+0x364>)
 8012192:	f7fe fd60 	bl	8010c56 <chk_chr>
 8012196:	4603      	mov	r3, r0
 8012198:	2b00      	cmp	r3, #0
 801219a:	d001      	beq.n	80121a0 <create_name+0xa4>
 801219c:	2306      	movs	r3, #6
 801219e:	e15b      	b.n	8012458 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 80121a0:	697b      	ldr	r3, [r7, #20]
 80121a2:	1c5a      	adds	r2, r3, #1
 80121a4:	617a      	str	r2, [r7, #20]
 80121a6:	005b      	lsls	r3, r3, #1
 80121a8:	68fa      	ldr	r2, [r7, #12]
 80121aa:	4413      	add	r3, r2
 80121ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80121ae:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80121b0:	e7b4      	b.n	801211c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80121b2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80121b4:	693a      	ldr	r2, [r7, #16]
 80121b6:	69bb      	ldr	r3, [r7, #24]
 80121b8:	441a      	add	r2, r3
 80121ba:	683b      	ldr	r3, [r7, #0]
 80121bc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80121be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80121c0:	2b1f      	cmp	r3, #31
 80121c2:	d801      	bhi.n	80121c8 <create_name+0xcc>
 80121c4:	2304      	movs	r3, #4
 80121c6:	e000      	b.n	80121ca <create_name+0xce>
 80121c8:	2300      	movs	r3, #0
 80121ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80121ce:	e011      	b.n	80121f4 <create_name+0xf8>
		w = lfn[di - 1];
 80121d0:	697a      	ldr	r2, [r7, #20]
 80121d2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80121d6:	4413      	add	r3, r2
 80121d8:	005b      	lsls	r3, r3, #1
 80121da:	68fa      	ldr	r2, [r7, #12]
 80121dc:	4413      	add	r3, r2
 80121de:	881b      	ldrh	r3, [r3, #0]
 80121e0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80121e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80121e4:	2b20      	cmp	r3, #32
 80121e6:	d002      	beq.n	80121ee <create_name+0xf2>
 80121e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80121ea:	2b2e      	cmp	r3, #46	; 0x2e
 80121ec:	d106      	bne.n	80121fc <create_name+0x100>
		di--;
 80121ee:	697b      	ldr	r3, [r7, #20]
 80121f0:	3b01      	subs	r3, #1
 80121f2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80121f4:	697b      	ldr	r3, [r7, #20]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d1ea      	bne.n	80121d0 <create_name+0xd4>
 80121fa:	e000      	b.n	80121fe <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80121fc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80121fe:	697b      	ldr	r3, [r7, #20]
 8012200:	005b      	lsls	r3, r3, #1
 8012202:	68fa      	ldr	r2, [r7, #12]
 8012204:	4413      	add	r3, r2
 8012206:	2200      	movs	r2, #0
 8012208:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801220a:	697b      	ldr	r3, [r7, #20]
 801220c:	2b00      	cmp	r3, #0
 801220e:	d101      	bne.n	8012214 <create_name+0x118>
 8012210:	2306      	movs	r3, #6
 8012212:	e121      	b.n	8012458 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	3324      	adds	r3, #36	; 0x24
 8012218:	220b      	movs	r2, #11
 801221a:	2120      	movs	r1, #32
 801221c:	4618      	mov	r0, r3
 801221e:	f7fe fcd8 	bl	8010bd2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8012222:	2300      	movs	r3, #0
 8012224:	61bb      	str	r3, [r7, #24]
 8012226:	e002      	b.n	801222e <create_name+0x132>
 8012228:	69bb      	ldr	r3, [r7, #24]
 801222a:	3301      	adds	r3, #1
 801222c:	61bb      	str	r3, [r7, #24]
 801222e:	69bb      	ldr	r3, [r7, #24]
 8012230:	005b      	lsls	r3, r3, #1
 8012232:	68fa      	ldr	r2, [r7, #12]
 8012234:	4413      	add	r3, r2
 8012236:	881b      	ldrh	r3, [r3, #0]
 8012238:	2b20      	cmp	r3, #32
 801223a:	d0f5      	beq.n	8012228 <create_name+0x12c>
 801223c:	69bb      	ldr	r3, [r7, #24]
 801223e:	005b      	lsls	r3, r3, #1
 8012240:	68fa      	ldr	r2, [r7, #12]
 8012242:	4413      	add	r3, r2
 8012244:	881b      	ldrh	r3, [r3, #0]
 8012246:	2b2e      	cmp	r3, #46	; 0x2e
 8012248:	d0ee      	beq.n	8012228 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 801224a:	69bb      	ldr	r3, [r7, #24]
 801224c:	2b00      	cmp	r3, #0
 801224e:	d009      	beq.n	8012264 <create_name+0x168>
 8012250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012254:	f043 0303 	orr.w	r3, r3, #3
 8012258:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 801225c:	e002      	b.n	8012264 <create_name+0x168>
 801225e:	697b      	ldr	r3, [r7, #20]
 8012260:	3b01      	subs	r3, #1
 8012262:	617b      	str	r3, [r7, #20]
 8012264:	697b      	ldr	r3, [r7, #20]
 8012266:	2b00      	cmp	r3, #0
 8012268:	d009      	beq.n	801227e <create_name+0x182>
 801226a:	697a      	ldr	r2, [r7, #20]
 801226c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012270:	4413      	add	r3, r2
 8012272:	005b      	lsls	r3, r3, #1
 8012274:	68fa      	ldr	r2, [r7, #12]
 8012276:	4413      	add	r3, r2
 8012278:	881b      	ldrh	r3, [r3, #0]
 801227a:	2b2e      	cmp	r3, #46	; 0x2e
 801227c:	d1ef      	bne.n	801225e <create_name+0x162>

	i = b = 0; ni = 8;
 801227e:	2300      	movs	r3, #0
 8012280:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012284:	2300      	movs	r3, #0
 8012286:	623b      	str	r3, [r7, #32]
 8012288:	2308      	movs	r3, #8
 801228a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801228c:	69bb      	ldr	r3, [r7, #24]
 801228e:	1c5a      	adds	r2, r3, #1
 8012290:	61ba      	str	r2, [r7, #24]
 8012292:	005b      	lsls	r3, r3, #1
 8012294:	68fa      	ldr	r2, [r7, #12]
 8012296:	4413      	add	r3, r2
 8012298:	881b      	ldrh	r3, [r3, #0]
 801229a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 801229c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801229e:	2b00      	cmp	r3, #0
 80122a0:	f000 8090 	beq.w	80123c4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80122a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80122a6:	2b20      	cmp	r3, #32
 80122a8:	d006      	beq.n	80122b8 <create_name+0x1bc>
 80122aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80122ac:	2b2e      	cmp	r3, #46	; 0x2e
 80122ae:	d10a      	bne.n	80122c6 <create_name+0x1ca>
 80122b0:	69ba      	ldr	r2, [r7, #24]
 80122b2:	697b      	ldr	r3, [r7, #20]
 80122b4:	429a      	cmp	r2, r3
 80122b6:	d006      	beq.n	80122c6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80122b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80122bc:	f043 0303 	orr.w	r3, r3, #3
 80122c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80122c4:	e07d      	b.n	80123c2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80122c6:	6a3a      	ldr	r2, [r7, #32]
 80122c8:	69fb      	ldr	r3, [r7, #28]
 80122ca:	429a      	cmp	r2, r3
 80122cc:	d203      	bcs.n	80122d6 <create_name+0x1da>
 80122ce:	69ba      	ldr	r2, [r7, #24]
 80122d0:	697b      	ldr	r3, [r7, #20]
 80122d2:	429a      	cmp	r2, r3
 80122d4:	d123      	bne.n	801231e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80122d6:	69fb      	ldr	r3, [r7, #28]
 80122d8:	2b0b      	cmp	r3, #11
 80122da:	d106      	bne.n	80122ea <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80122dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80122e0:	f043 0303 	orr.w	r3, r3, #3
 80122e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80122e8:	e06f      	b.n	80123ca <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80122ea:	69ba      	ldr	r2, [r7, #24]
 80122ec:	697b      	ldr	r3, [r7, #20]
 80122ee:	429a      	cmp	r2, r3
 80122f0:	d005      	beq.n	80122fe <create_name+0x202>
 80122f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80122f6:	f043 0303 	orr.w	r3, r3, #3
 80122fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80122fe:	69ba      	ldr	r2, [r7, #24]
 8012300:	697b      	ldr	r3, [r7, #20]
 8012302:	429a      	cmp	r2, r3
 8012304:	d860      	bhi.n	80123c8 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8012306:	697b      	ldr	r3, [r7, #20]
 8012308:	61bb      	str	r3, [r7, #24]
 801230a:	2308      	movs	r3, #8
 801230c:	623b      	str	r3, [r7, #32]
 801230e:	230b      	movs	r3, #11
 8012310:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8012312:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012316:	009b      	lsls	r3, r3, #2
 8012318:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801231c:	e051      	b.n	80123c2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801231e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012320:	2b7f      	cmp	r3, #127	; 0x7f
 8012322:	d914      	bls.n	801234e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8012324:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012326:	2100      	movs	r1, #0
 8012328:	4618      	mov	r0, r3
 801232a:	f7fe fa4b 	bl	80107c4 <ff_convert>
 801232e:	4603      	mov	r3, r0
 8012330:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8012332:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012334:	2b00      	cmp	r3, #0
 8012336:	d004      	beq.n	8012342 <create_name+0x246>
 8012338:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801233a:	3b80      	subs	r3, #128	; 0x80
 801233c:	4a49      	ldr	r2, [pc, #292]	; (8012464 <create_name+0x368>)
 801233e:	5cd3      	ldrb	r3, [r2, r3]
 8012340:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8012342:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012346:	f043 0302 	orr.w	r3, r3, #2
 801234a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801234e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012350:	2b00      	cmp	r3, #0
 8012352:	d007      	beq.n	8012364 <create_name+0x268>
 8012354:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012356:	4619      	mov	r1, r3
 8012358:	4843      	ldr	r0, [pc, #268]	; (8012468 <create_name+0x36c>)
 801235a:	f7fe fc7c 	bl	8010c56 <chk_chr>
 801235e:	4603      	mov	r3, r0
 8012360:	2b00      	cmp	r3, #0
 8012362:	d008      	beq.n	8012376 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8012364:	235f      	movs	r3, #95	; 0x5f
 8012366:	84bb      	strh	r3, [r7, #36]	; 0x24
 8012368:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801236c:	f043 0303 	orr.w	r3, r3, #3
 8012370:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012374:	e01b      	b.n	80123ae <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8012376:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012378:	2b40      	cmp	r3, #64	; 0x40
 801237a:	d909      	bls.n	8012390 <create_name+0x294>
 801237c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801237e:	2b5a      	cmp	r3, #90	; 0x5a
 8012380:	d806      	bhi.n	8012390 <create_name+0x294>
					b |= 2;
 8012382:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012386:	f043 0302 	orr.w	r3, r3, #2
 801238a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801238e:	e00e      	b.n	80123ae <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8012390:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012392:	2b60      	cmp	r3, #96	; 0x60
 8012394:	d90b      	bls.n	80123ae <create_name+0x2b2>
 8012396:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012398:	2b7a      	cmp	r3, #122	; 0x7a
 801239a:	d808      	bhi.n	80123ae <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801239c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80123a0:	f043 0301 	orr.w	r3, r3, #1
 80123a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80123a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80123aa:	3b20      	subs	r3, #32
 80123ac:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80123ae:	6a3b      	ldr	r3, [r7, #32]
 80123b0:	1c5a      	adds	r2, r3, #1
 80123b2:	623a      	str	r2, [r7, #32]
 80123b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80123b6:	b2d1      	uxtb	r1, r2
 80123b8:	687a      	ldr	r2, [r7, #4]
 80123ba:	4413      	add	r3, r2
 80123bc:	460a      	mov	r2, r1
 80123be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80123c2:	e763      	b.n	801228c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80123c4:	bf00      	nop
 80123c6:	e000      	b.n	80123ca <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 80123c8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80123d0:	2be5      	cmp	r3, #229	; 0xe5
 80123d2:	d103      	bne.n	80123dc <create_name+0x2e0>
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	2205      	movs	r2, #5
 80123d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80123dc:	69fb      	ldr	r3, [r7, #28]
 80123de:	2b08      	cmp	r3, #8
 80123e0:	d104      	bne.n	80123ec <create_name+0x2f0>
 80123e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80123e6:	009b      	lsls	r3, r3, #2
 80123e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80123ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80123f0:	f003 030c 	and.w	r3, r3, #12
 80123f4:	2b0c      	cmp	r3, #12
 80123f6:	d005      	beq.n	8012404 <create_name+0x308>
 80123f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80123fc:	f003 0303 	and.w	r3, r3, #3
 8012400:	2b03      	cmp	r3, #3
 8012402:	d105      	bne.n	8012410 <create_name+0x314>
 8012404:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012408:	f043 0302 	orr.w	r3, r3, #2
 801240c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8012410:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012414:	f003 0302 	and.w	r3, r3, #2
 8012418:	2b00      	cmp	r3, #0
 801241a:	d117      	bne.n	801244c <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801241c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012420:	f003 0303 	and.w	r3, r3, #3
 8012424:	2b01      	cmp	r3, #1
 8012426:	d105      	bne.n	8012434 <create_name+0x338>
 8012428:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801242c:	f043 0310 	orr.w	r3, r3, #16
 8012430:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8012434:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012438:	f003 030c 	and.w	r3, r3, #12
 801243c:	2b04      	cmp	r3, #4
 801243e:	d105      	bne.n	801244c <create_name+0x350>
 8012440:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012444:	f043 0308 	orr.w	r3, r3, #8
 8012448:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8012452:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8012456:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8012458:	4618      	mov	r0, r3
 801245a:	3728      	adds	r7, #40	; 0x28
 801245c:	46bd      	mov	sp, r7
 801245e:	bd80      	pop	{r7, pc}
 8012460:	0801f6f0 	.word	0x0801f6f0
 8012464:	08028504 	.word	0x08028504
 8012468:	0801f6fc 	.word	0x0801f6fc

0801246c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801246c:	b580      	push	{r7, lr}
 801246e:	b086      	sub	sp, #24
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
 8012474:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801247a:	693b      	ldr	r3, [r7, #16]
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012480:	e002      	b.n	8012488 <follow_path+0x1c>
 8012482:	683b      	ldr	r3, [r7, #0]
 8012484:	3301      	adds	r3, #1
 8012486:	603b      	str	r3, [r7, #0]
 8012488:	683b      	ldr	r3, [r7, #0]
 801248a:	781b      	ldrb	r3, [r3, #0]
 801248c:	2b2f      	cmp	r3, #47	; 0x2f
 801248e:	d0f8      	beq.n	8012482 <follow_path+0x16>
 8012490:	683b      	ldr	r3, [r7, #0]
 8012492:	781b      	ldrb	r3, [r3, #0]
 8012494:	2b5c      	cmp	r3, #92	; 0x5c
 8012496:	d0f4      	beq.n	8012482 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8012498:	693b      	ldr	r3, [r7, #16]
 801249a:	2200      	movs	r2, #0
 801249c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801249e:	683b      	ldr	r3, [r7, #0]
 80124a0:	781b      	ldrb	r3, [r3, #0]
 80124a2:	2b1f      	cmp	r3, #31
 80124a4:	d80a      	bhi.n	80124bc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	2280      	movs	r2, #128	; 0x80
 80124aa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80124ae:	2100      	movs	r1, #0
 80124b0:	6878      	ldr	r0, [r7, #4]
 80124b2:	f7ff f91b 	bl	80116ec <dir_sdi>
 80124b6:	4603      	mov	r3, r0
 80124b8:	75fb      	strb	r3, [r7, #23]
 80124ba:	e043      	b.n	8012544 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80124bc:	463b      	mov	r3, r7
 80124be:	4619      	mov	r1, r3
 80124c0:	6878      	ldr	r0, [r7, #4]
 80124c2:	f7ff fe1b 	bl	80120fc <create_name>
 80124c6:	4603      	mov	r3, r0
 80124c8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80124ca:	7dfb      	ldrb	r3, [r7, #23]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d134      	bne.n	801253a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80124d0:	6878      	ldr	r0, [r7, #4]
 80124d2:	f7ff fc5a 	bl	8011d8a <dir_find>
 80124d6:	4603      	mov	r3, r0
 80124d8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80124e0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80124e2:	7dfb      	ldrb	r3, [r7, #23]
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d00a      	beq.n	80124fe <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80124e8:	7dfb      	ldrb	r3, [r7, #23]
 80124ea:	2b04      	cmp	r3, #4
 80124ec:	d127      	bne.n	801253e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80124ee:	7afb      	ldrb	r3, [r7, #11]
 80124f0:	f003 0304 	and.w	r3, r3, #4
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d122      	bne.n	801253e <follow_path+0xd2>
 80124f8:	2305      	movs	r3, #5
 80124fa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80124fc:	e01f      	b.n	801253e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80124fe:	7afb      	ldrb	r3, [r7, #11]
 8012500:	f003 0304 	and.w	r3, r3, #4
 8012504:	2b00      	cmp	r3, #0
 8012506:	d11c      	bne.n	8012542 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012508:	693b      	ldr	r3, [r7, #16]
 801250a:	799b      	ldrb	r3, [r3, #6]
 801250c:	f003 0310 	and.w	r3, r3, #16
 8012510:	2b00      	cmp	r3, #0
 8012512:	d102      	bne.n	801251a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8012514:	2305      	movs	r3, #5
 8012516:	75fb      	strb	r3, [r7, #23]
 8012518:	e014      	b.n	8012544 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	695b      	ldr	r3, [r3, #20]
 8012524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012528:	4413      	add	r3, r2
 801252a:	4619      	mov	r1, r3
 801252c:	68f8      	ldr	r0, [r7, #12]
 801252e:	f7ff fa64 	bl	80119fa <ld_clust>
 8012532:	4602      	mov	r2, r0
 8012534:	693b      	ldr	r3, [r7, #16]
 8012536:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012538:	e7c0      	b.n	80124bc <follow_path+0x50>
			if (res != FR_OK) break;
 801253a:	bf00      	nop
 801253c:	e002      	b.n	8012544 <follow_path+0xd8>
				break;
 801253e:	bf00      	nop
 8012540:	e000      	b.n	8012544 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012542:	bf00      	nop
			}
		}
	}

	return res;
 8012544:	7dfb      	ldrb	r3, [r7, #23]
}
 8012546:	4618      	mov	r0, r3
 8012548:	3718      	adds	r7, #24
 801254a:	46bd      	mov	sp, r7
 801254c:	bd80      	pop	{r7, pc}

0801254e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801254e:	b480      	push	{r7}
 8012550:	b087      	sub	sp, #28
 8012552:	af00      	add	r7, sp, #0
 8012554:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012556:	f04f 33ff 	mov.w	r3, #4294967295
 801255a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d031      	beq.n	80125c8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	617b      	str	r3, [r7, #20]
 801256a:	e002      	b.n	8012572 <get_ldnumber+0x24>
 801256c:	697b      	ldr	r3, [r7, #20]
 801256e:	3301      	adds	r3, #1
 8012570:	617b      	str	r3, [r7, #20]
 8012572:	697b      	ldr	r3, [r7, #20]
 8012574:	781b      	ldrb	r3, [r3, #0]
 8012576:	2b1f      	cmp	r3, #31
 8012578:	d903      	bls.n	8012582 <get_ldnumber+0x34>
 801257a:	697b      	ldr	r3, [r7, #20]
 801257c:	781b      	ldrb	r3, [r3, #0]
 801257e:	2b3a      	cmp	r3, #58	; 0x3a
 8012580:	d1f4      	bne.n	801256c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012582:	697b      	ldr	r3, [r7, #20]
 8012584:	781b      	ldrb	r3, [r3, #0]
 8012586:	2b3a      	cmp	r3, #58	; 0x3a
 8012588:	d11c      	bne.n	80125c4 <get_ldnumber+0x76>
			tp = *path;
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	1c5a      	adds	r2, r3, #1
 8012594:	60fa      	str	r2, [r7, #12]
 8012596:	781b      	ldrb	r3, [r3, #0]
 8012598:	3b30      	subs	r3, #48	; 0x30
 801259a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801259c:	68bb      	ldr	r3, [r7, #8]
 801259e:	2b09      	cmp	r3, #9
 80125a0:	d80e      	bhi.n	80125c0 <get_ldnumber+0x72>
 80125a2:	68fa      	ldr	r2, [r7, #12]
 80125a4:	697b      	ldr	r3, [r7, #20]
 80125a6:	429a      	cmp	r2, r3
 80125a8:	d10a      	bne.n	80125c0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80125aa:	68bb      	ldr	r3, [r7, #8]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d107      	bne.n	80125c0 <get_ldnumber+0x72>
					vol = (int)i;
 80125b0:	68bb      	ldr	r3, [r7, #8]
 80125b2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80125b4:	697b      	ldr	r3, [r7, #20]
 80125b6:	3301      	adds	r3, #1
 80125b8:	617b      	str	r3, [r7, #20]
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	697a      	ldr	r2, [r7, #20]
 80125be:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80125c0:	693b      	ldr	r3, [r7, #16]
 80125c2:	e002      	b.n	80125ca <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80125c4:	2300      	movs	r3, #0
 80125c6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80125c8:	693b      	ldr	r3, [r7, #16]
}
 80125ca:	4618      	mov	r0, r3
 80125cc:	371c      	adds	r7, #28
 80125ce:	46bd      	mov	sp, r7
 80125d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d4:	4770      	bx	lr
	...

080125d8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80125d8:	b580      	push	{r7, lr}
 80125da:	b082      	sub	sp, #8
 80125dc:	af00      	add	r7, sp, #0
 80125de:	6078      	str	r0, [r7, #4]
 80125e0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	2200      	movs	r2, #0
 80125e6:	70da      	strb	r2, [r3, #3]
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	f04f 32ff 	mov.w	r2, #4294967295
 80125ee:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80125f0:	6839      	ldr	r1, [r7, #0]
 80125f2:	6878      	ldr	r0, [r7, #4]
 80125f4:	f7fe fcfa 	bl	8010fec <move_window>
 80125f8:	4603      	mov	r3, r0
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d001      	beq.n	8012602 <check_fs+0x2a>
 80125fe:	2304      	movs	r3, #4
 8012600:	e038      	b.n	8012674 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	3334      	adds	r3, #52	; 0x34
 8012606:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801260a:	4618      	mov	r0, r3
 801260c:	f7fe fa3e 	bl	8010a8c <ld_word>
 8012610:	4603      	mov	r3, r0
 8012612:	461a      	mov	r2, r3
 8012614:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012618:	429a      	cmp	r2, r3
 801261a:	d001      	beq.n	8012620 <check_fs+0x48>
 801261c:	2303      	movs	r3, #3
 801261e:	e029      	b.n	8012674 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012626:	2be9      	cmp	r3, #233	; 0xe9
 8012628:	d009      	beq.n	801263e <check_fs+0x66>
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012630:	2beb      	cmp	r3, #235	; 0xeb
 8012632:	d11e      	bne.n	8012672 <check_fs+0x9a>
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801263a:	2b90      	cmp	r3, #144	; 0x90
 801263c:	d119      	bne.n	8012672 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	3334      	adds	r3, #52	; 0x34
 8012642:	3336      	adds	r3, #54	; 0x36
 8012644:	4618      	mov	r0, r3
 8012646:	f7fe fa39 	bl	8010abc <ld_dword>
 801264a:	4603      	mov	r3, r0
 801264c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012650:	4a0a      	ldr	r2, [pc, #40]	; (801267c <check_fs+0xa4>)
 8012652:	4293      	cmp	r3, r2
 8012654:	d101      	bne.n	801265a <check_fs+0x82>
 8012656:	2300      	movs	r3, #0
 8012658:	e00c      	b.n	8012674 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	3334      	adds	r3, #52	; 0x34
 801265e:	3352      	adds	r3, #82	; 0x52
 8012660:	4618      	mov	r0, r3
 8012662:	f7fe fa2b 	bl	8010abc <ld_dword>
 8012666:	4603      	mov	r3, r0
 8012668:	4a05      	ldr	r2, [pc, #20]	; (8012680 <check_fs+0xa8>)
 801266a:	4293      	cmp	r3, r2
 801266c:	d101      	bne.n	8012672 <check_fs+0x9a>
 801266e:	2300      	movs	r3, #0
 8012670:	e000      	b.n	8012674 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012672:	2302      	movs	r3, #2
}
 8012674:	4618      	mov	r0, r3
 8012676:	3708      	adds	r7, #8
 8012678:	46bd      	mov	sp, r7
 801267a:	bd80      	pop	{r7, pc}
 801267c:	00544146 	.word	0x00544146
 8012680:	33544146 	.word	0x33544146

08012684 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012684:	b580      	push	{r7, lr}
 8012686:	b096      	sub	sp, #88	; 0x58
 8012688:	af00      	add	r7, sp, #0
 801268a:	60f8      	str	r0, [r7, #12]
 801268c:	60b9      	str	r1, [r7, #8]
 801268e:	4613      	mov	r3, r2
 8012690:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012692:	68bb      	ldr	r3, [r7, #8]
 8012694:	2200      	movs	r2, #0
 8012696:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012698:	68f8      	ldr	r0, [r7, #12]
 801269a:	f7ff ff58 	bl	801254e <get_ldnumber>
 801269e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80126a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	da01      	bge.n	80126aa <find_volume+0x26>
 80126a6:	230b      	movs	r3, #11
 80126a8:	e231      	b.n	8012b0e <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80126aa:	4aa8      	ldr	r2, [pc, #672]	; (801294c <find_volume+0x2c8>)
 80126ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80126b2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80126b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d101      	bne.n	80126be <find_volume+0x3a>
 80126ba:	230c      	movs	r3, #12
 80126bc:	e227      	b.n	8012b0e <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80126be:	68bb      	ldr	r3, [r7, #8]
 80126c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80126c2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80126c4:	79fb      	ldrb	r3, [r7, #7]
 80126c6:	f023 0301 	bic.w	r3, r3, #1
 80126ca:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80126cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126ce:	781b      	ldrb	r3, [r3, #0]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d01a      	beq.n	801270a <find_volume+0x86>
		stat = disk_status(fs->drv);
 80126d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126d6:	785b      	ldrb	r3, [r3, #1]
 80126d8:	4618      	mov	r0, r3
 80126da:	f7fe f939 	bl	8010950 <disk_status>
 80126de:	4603      	mov	r3, r0
 80126e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80126e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80126e8:	f003 0301 	and.w	r3, r3, #1
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d10c      	bne.n	801270a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80126f0:	79fb      	ldrb	r3, [r7, #7]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d007      	beq.n	8012706 <find_volume+0x82>
 80126f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80126fa:	f003 0304 	and.w	r3, r3, #4
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d001      	beq.n	8012706 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012702:	230a      	movs	r3, #10
 8012704:	e203      	b.n	8012b0e <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 8012706:	2300      	movs	r3, #0
 8012708:	e201      	b.n	8012b0e <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801270a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801270c:	2200      	movs	r2, #0
 801270e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012712:	b2da      	uxtb	r2, r3
 8012714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012716:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801271a:	785b      	ldrb	r3, [r3, #1]
 801271c:	4618      	mov	r0, r3
 801271e:	f7fe f931 	bl	8010984 <disk_initialize>
 8012722:	4603      	mov	r3, r0
 8012724:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012728:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801272c:	f003 0301 	and.w	r3, r3, #1
 8012730:	2b00      	cmp	r3, #0
 8012732:	d001      	beq.n	8012738 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012734:	2303      	movs	r3, #3
 8012736:	e1ea      	b.n	8012b0e <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012738:	79fb      	ldrb	r3, [r7, #7]
 801273a:	2b00      	cmp	r3, #0
 801273c:	d007      	beq.n	801274e <find_volume+0xca>
 801273e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012742:	f003 0304 	and.w	r3, r3, #4
 8012746:	2b00      	cmp	r3, #0
 8012748:	d001      	beq.n	801274e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801274a:	230a      	movs	r3, #10
 801274c:	e1df      	b.n	8012b0e <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801274e:	2300      	movs	r3, #0
 8012750:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012752:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012754:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012756:	f7ff ff3f 	bl	80125d8 <check_fs>
 801275a:	4603      	mov	r3, r0
 801275c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012760:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012764:	2b02      	cmp	r3, #2
 8012766:	d14b      	bne.n	8012800 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012768:	2300      	movs	r3, #0
 801276a:	643b      	str	r3, [r7, #64]	; 0x40
 801276c:	e01f      	b.n	80127ae <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801276e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012770:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8012774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012776:	011b      	lsls	r3, r3, #4
 8012778:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801277c:	4413      	add	r3, r2
 801277e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012782:	3304      	adds	r3, #4
 8012784:	781b      	ldrb	r3, [r3, #0]
 8012786:	2b00      	cmp	r3, #0
 8012788:	d006      	beq.n	8012798 <find_volume+0x114>
 801278a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801278c:	3308      	adds	r3, #8
 801278e:	4618      	mov	r0, r3
 8012790:	f7fe f994 	bl	8010abc <ld_dword>
 8012794:	4602      	mov	r2, r0
 8012796:	e000      	b.n	801279a <find_volume+0x116>
 8012798:	2200      	movs	r2, #0
 801279a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801279c:	009b      	lsls	r3, r3, #2
 801279e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80127a2:	440b      	add	r3, r1
 80127a4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80127a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127aa:	3301      	adds	r3, #1
 80127ac:	643b      	str	r3, [r7, #64]	; 0x40
 80127ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127b0:	2b03      	cmp	r3, #3
 80127b2:	d9dc      	bls.n	801276e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80127b4:	2300      	movs	r3, #0
 80127b6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80127b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d002      	beq.n	80127c4 <find_volume+0x140>
 80127be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127c0:	3b01      	subs	r3, #1
 80127c2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80127c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127c6:	009b      	lsls	r3, r3, #2
 80127c8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80127cc:	4413      	add	r3, r2
 80127ce:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80127d2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80127d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d005      	beq.n	80127e6 <find_volume+0x162>
 80127da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80127dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80127de:	f7ff fefb 	bl	80125d8 <check_fs>
 80127e2:	4603      	mov	r3, r0
 80127e4:	e000      	b.n	80127e8 <find_volume+0x164>
 80127e6:	2303      	movs	r3, #3
 80127e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80127ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80127f0:	2b01      	cmp	r3, #1
 80127f2:	d905      	bls.n	8012800 <find_volume+0x17c>
 80127f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127f6:	3301      	adds	r3, #1
 80127f8:	643b      	str	r3, [r7, #64]	; 0x40
 80127fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127fc:	2b03      	cmp	r3, #3
 80127fe:	d9e1      	bls.n	80127c4 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012800:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012804:	2b04      	cmp	r3, #4
 8012806:	d101      	bne.n	801280c <find_volume+0x188>
 8012808:	2301      	movs	r3, #1
 801280a:	e180      	b.n	8012b0e <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801280c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012810:	2b01      	cmp	r3, #1
 8012812:	d901      	bls.n	8012818 <find_volume+0x194>
 8012814:	230d      	movs	r3, #13
 8012816:	e17a      	b.n	8012b0e <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801281a:	3334      	adds	r3, #52	; 0x34
 801281c:	330b      	adds	r3, #11
 801281e:	4618      	mov	r0, r3
 8012820:	f7fe f934 	bl	8010a8c <ld_word>
 8012824:	4603      	mov	r3, r0
 8012826:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801282a:	d001      	beq.n	8012830 <find_volume+0x1ac>
 801282c:	230d      	movs	r3, #13
 801282e:	e16e      	b.n	8012b0e <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012832:	3334      	adds	r3, #52	; 0x34
 8012834:	3316      	adds	r3, #22
 8012836:	4618      	mov	r0, r3
 8012838:	f7fe f928 	bl	8010a8c <ld_word>
 801283c:	4603      	mov	r3, r0
 801283e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012842:	2b00      	cmp	r3, #0
 8012844:	d106      	bne.n	8012854 <find_volume+0x1d0>
 8012846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012848:	3334      	adds	r3, #52	; 0x34
 801284a:	3324      	adds	r3, #36	; 0x24
 801284c:	4618      	mov	r0, r3
 801284e:	f7fe f935 	bl	8010abc <ld_dword>
 8012852:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012856:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012858:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801285a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801285c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8012860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012862:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012866:	789b      	ldrb	r3, [r3, #2]
 8012868:	2b01      	cmp	r3, #1
 801286a:	d005      	beq.n	8012878 <find_volume+0x1f4>
 801286c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801286e:	789b      	ldrb	r3, [r3, #2]
 8012870:	2b02      	cmp	r3, #2
 8012872:	d001      	beq.n	8012878 <find_volume+0x1f4>
 8012874:	230d      	movs	r3, #13
 8012876:	e14a      	b.n	8012b0e <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801287a:	789b      	ldrb	r3, [r3, #2]
 801287c:	461a      	mov	r2, r3
 801287e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012880:	fb02 f303 	mul.w	r3, r2, r3
 8012884:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012888:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801288c:	b29a      	uxth	r2, r3
 801288e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012890:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012894:	895b      	ldrh	r3, [r3, #10]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d008      	beq.n	80128ac <find_volume+0x228>
 801289a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801289c:	895b      	ldrh	r3, [r3, #10]
 801289e:	461a      	mov	r2, r3
 80128a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128a2:	895b      	ldrh	r3, [r3, #10]
 80128a4:	3b01      	subs	r3, #1
 80128a6:	4013      	ands	r3, r2
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d001      	beq.n	80128b0 <find_volume+0x22c>
 80128ac:	230d      	movs	r3, #13
 80128ae:	e12e      	b.n	8012b0e <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80128b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128b2:	3334      	adds	r3, #52	; 0x34
 80128b4:	3311      	adds	r3, #17
 80128b6:	4618      	mov	r0, r3
 80128b8:	f7fe f8e8 	bl	8010a8c <ld_word>
 80128bc:	4603      	mov	r3, r0
 80128be:	461a      	mov	r2, r3
 80128c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128c2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80128c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128c6:	891b      	ldrh	r3, [r3, #8]
 80128c8:	f003 030f 	and.w	r3, r3, #15
 80128cc:	b29b      	uxth	r3, r3
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d001      	beq.n	80128d6 <find_volume+0x252>
 80128d2:	230d      	movs	r3, #13
 80128d4:	e11b      	b.n	8012b0e <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80128d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128d8:	3334      	adds	r3, #52	; 0x34
 80128da:	3313      	adds	r3, #19
 80128dc:	4618      	mov	r0, r3
 80128de:	f7fe f8d5 	bl	8010a8c <ld_word>
 80128e2:	4603      	mov	r3, r0
 80128e4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80128e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d106      	bne.n	80128fa <find_volume+0x276>
 80128ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128ee:	3334      	adds	r3, #52	; 0x34
 80128f0:	3320      	adds	r3, #32
 80128f2:	4618      	mov	r0, r3
 80128f4:	f7fe f8e2 	bl	8010abc <ld_dword>
 80128f8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80128fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128fc:	3334      	adds	r3, #52	; 0x34
 80128fe:	330e      	adds	r3, #14
 8012900:	4618      	mov	r0, r3
 8012902:	f7fe f8c3 	bl	8010a8c <ld_word>
 8012906:	4603      	mov	r3, r0
 8012908:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801290a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801290c:	2b00      	cmp	r3, #0
 801290e:	d101      	bne.n	8012914 <find_volume+0x290>
 8012910:	230d      	movs	r3, #13
 8012912:	e0fc      	b.n	8012b0e <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012914:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012918:	4413      	add	r3, r2
 801291a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801291c:	8912      	ldrh	r2, [r2, #8]
 801291e:	0912      	lsrs	r2, r2, #4
 8012920:	b292      	uxth	r2, r2
 8012922:	4413      	add	r3, r2
 8012924:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012926:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801292a:	429a      	cmp	r2, r3
 801292c:	d201      	bcs.n	8012932 <find_volume+0x2ae>
 801292e:	230d      	movs	r3, #13
 8012930:	e0ed      	b.n	8012b0e <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012932:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012936:	1ad3      	subs	r3, r2, r3
 8012938:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801293a:	8952      	ldrh	r2, [r2, #10]
 801293c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012940:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012944:	2b00      	cmp	r3, #0
 8012946:	d103      	bne.n	8012950 <find_volume+0x2cc>
 8012948:	230d      	movs	r3, #13
 801294a:	e0e0      	b.n	8012b0e <find_volume+0x48a>
 801294c:	2400a3f0 	.word	0x2400a3f0
		fmt = FS_FAT32;
 8012950:	2303      	movs	r3, #3
 8012952:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012958:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801295c:	4293      	cmp	r3, r2
 801295e:	d802      	bhi.n	8012966 <find_volume+0x2e2>
 8012960:	2302      	movs	r3, #2
 8012962:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012968:	f640 72f5 	movw	r2, #4085	; 0xff5
 801296c:	4293      	cmp	r3, r2
 801296e:	d802      	bhi.n	8012976 <find_volume+0x2f2>
 8012970:	2301      	movs	r3, #1
 8012972:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012978:	1c9a      	adds	r2, r3, #2
 801297a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801297c:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 801297e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012980:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012982:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012984:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012988:	441a      	add	r2, r3
 801298a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801298c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 801298e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012992:	441a      	add	r2, r3
 8012994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012996:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8012998:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801299c:	2b03      	cmp	r3, #3
 801299e:	d11e      	bne.n	80129de <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80129a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129a2:	3334      	adds	r3, #52	; 0x34
 80129a4:	332a      	adds	r3, #42	; 0x2a
 80129a6:	4618      	mov	r0, r3
 80129a8:	f7fe f870 	bl	8010a8c <ld_word>
 80129ac:	4603      	mov	r3, r0
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d001      	beq.n	80129b6 <find_volume+0x332>
 80129b2:	230d      	movs	r3, #13
 80129b4:	e0ab      	b.n	8012b0e <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80129b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129b8:	891b      	ldrh	r3, [r3, #8]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d001      	beq.n	80129c2 <find_volume+0x33e>
 80129be:	230d      	movs	r3, #13
 80129c0:	e0a5      	b.n	8012b0e <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80129c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129c4:	3334      	adds	r3, #52	; 0x34
 80129c6:	332c      	adds	r3, #44	; 0x2c
 80129c8:	4618      	mov	r0, r3
 80129ca:	f7fe f877 	bl	8010abc <ld_dword>
 80129ce:	4602      	mov	r2, r0
 80129d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129d2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80129d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129d6:	699b      	ldr	r3, [r3, #24]
 80129d8:	009b      	lsls	r3, r3, #2
 80129da:	647b      	str	r3, [r7, #68]	; 0x44
 80129dc:	e01f      	b.n	8012a1e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80129de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129e0:	891b      	ldrh	r3, [r3, #8]
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d101      	bne.n	80129ea <find_volume+0x366>
 80129e6:	230d      	movs	r3, #13
 80129e8:	e091      	b.n	8012b0e <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80129ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80129ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80129f0:	441a      	add	r2, r3
 80129f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129f4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80129f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80129fa:	2b02      	cmp	r3, #2
 80129fc:	d103      	bne.n	8012a06 <find_volume+0x382>
 80129fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a00:	699b      	ldr	r3, [r3, #24]
 8012a02:	005b      	lsls	r3, r3, #1
 8012a04:	e00a      	b.n	8012a1c <find_volume+0x398>
 8012a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a08:	699a      	ldr	r2, [r3, #24]
 8012a0a:	4613      	mov	r3, r2
 8012a0c:	005b      	lsls	r3, r3, #1
 8012a0e:	4413      	add	r3, r2
 8012a10:	085a      	lsrs	r2, r3, #1
 8012a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a14:	699b      	ldr	r3, [r3, #24]
 8012a16:	f003 0301 	and.w	r3, r3, #1
 8012a1a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012a1c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a20:	69da      	ldr	r2, [r3, #28]
 8012a22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a24:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8012a28:	0a5b      	lsrs	r3, r3, #9
 8012a2a:	429a      	cmp	r2, r3
 8012a2c:	d201      	bcs.n	8012a32 <find_volume+0x3ae>
 8012a2e:	230d      	movs	r3, #13
 8012a30:	e06d      	b.n	8012b0e <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a34:	f04f 32ff 	mov.w	r2, #4294967295
 8012a38:	615a      	str	r2, [r3, #20]
 8012a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a3c:	695a      	ldr	r2, [r3, #20]
 8012a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a40:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8012a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a44:	2280      	movs	r2, #128	; 0x80
 8012a46:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012a48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012a4c:	2b03      	cmp	r3, #3
 8012a4e:	d149      	bne.n	8012ae4 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a52:	3334      	adds	r3, #52	; 0x34
 8012a54:	3330      	adds	r3, #48	; 0x30
 8012a56:	4618      	mov	r0, r3
 8012a58:	f7fe f818 	bl	8010a8c <ld_word>
 8012a5c:	4603      	mov	r3, r0
 8012a5e:	2b01      	cmp	r3, #1
 8012a60:	d140      	bne.n	8012ae4 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a64:	3301      	adds	r3, #1
 8012a66:	4619      	mov	r1, r3
 8012a68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012a6a:	f7fe fabf 	bl	8010fec <move_window>
 8012a6e:	4603      	mov	r3, r0
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d137      	bne.n	8012ae4 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8012a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a76:	2200      	movs	r2, #0
 8012a78:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a7c:	3334      	adds	r3, #52	; 0x34
 8012a7e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012a82:	4618      	mov	r0, r3
 8012a84:	f7fe f802 	bl	8010a8c <ld_word>
 8012a88:	4603      	mov	r3, r0
 8012a8a:	461a      	mov	r2, r3
 8012a8c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012a90:	429a      	cmp	r2, r3
 8012a92:	d127      	bne.n	8012ae4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a96:	3334      	adds	r3, #52	; 0x34
 8012a98:	4618      	mov	r0, r3
 8012a9a:	f7fe f80f 	bl	8010abc <ld_dword>
 8012a9e:	4603      	mov	r3, r0
 8012aa0:	4a1d      	ldr	r2, [pc, #116]	; (8012b18 <find_volume+0x494>)
 8012aa2:	4293      	cmp	r3, r2
 8012aa4:	d11e      	bne.n	8012ae4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012aa8:	3334      	adds	r3, #52	; 0x34
 8012aaa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012aae:	4618      	mov	r0, r3
 8012ab0:	f7fe f804 	bl	8010abc <ld_dword>
 8012ab4:	4603      	mov	r3, r0
 8012ab6:	4a19      	ldr	r2, [pc, #100]	; (8012b1c <find_volume+0x498>)
 8012ab8:	4293      	cmp	r3, r2
 8012aba:	d113      	bne.n	8012ae4 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012abe:	3334      	adds	r3, #52	; 0x34
 8012ac0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	f7fd fff9 	bl	8010abc <ld_dword>
 8012aca:	4602      	mov	r2, r0
 8012acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ace:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ad2:	3334      	adds	r3, #52	; 0x34
 8012ad4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8012ad8:	4618      	mov	r0, r3
 8012ada:	f7fd ffef 	bl	8010abc <ld_dword>
 8012ade:	4602      	mov	r2, r0
 8012ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ae2:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ae6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8012aea:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012aec:	4b0c      	ldr	r3, [pc, #48]	; (8012b20 <find_volume+0x49c>)
 8012aee:	881b      	ldrh	r3, [r3, #0]
 8012af0:	3301      	adds	r3, #1
 8012af2:	b29a      	uxth	r2, r3
 8012af4:	4b0a      	ldr	r3, [pc, #40]	; (8012b20 <find_volume+0x49c>)
 8012af6:	801a      	strh	r2, [r3, #0]
 8012af8:	4b09      	ldr	r3, [pc, #36]	; (8012b20 <find_volume+0x49c>)
 8012afa:	881a      	ldrh	r2, [r3, #0]
 8012afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012afe:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8012b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b02:	4a08      	ldr	r2, [pc, #32]	; (8012b24 <find_volume+0x4a0>)
 8012b04:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012b06:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012b08:	f7fe fa08 	bl	8010f1c <clear_lock>
#endif
	return FR_OK;
 8012b0c:	2300      	movs	r3, #0
}
 8012b0e:	4618      	mov	r0, r3
 8012b10:	3758      	adds	r7, #88	; 0x58
 8012b12:	46bd      	mov	sp, r7
 8012b14:	bd80      	pop	{r7, pc}
 8012b16:	bf00      	nop
 8012b18:	41615252 	.word	0x41615252
 8012b1c:	61417272 	.word	0x61417272
 8012b20:	2400a3f4 	.word	0x2400a3f4
 8012b24:	2400a418 	.word	0x2400a418

08012b28 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012b28:	b580      	push	{r7, lr}
 8012b2a:	b084      	sub	sp, #16
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	6078      	str	r0, [r7, #4]
 8012b30:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012b32:	2309      	movs	r3, #9
 8012b34:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d01c      	beq.n	8012b76 <validate+0x4e>
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d018      	beq.n	8012b76 <validate+0x4e>
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	781b      	ldrb	r3, [r3, #0]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d013      	beq.n	8012b76 <validate+0x4e>
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	889a      	ldrh	r2, [r3, #4]
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	88db      	ldrh	r3, [r3, #6]
 8012b58:	429a      	cmp	r2, r3
 8012b5a:	d10c      	bne.n	8012b76 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	785b      	ldrb	r3, [r3, #1]
 8012b62:	4618      	mov	r0, r3
 8012b64:	f7fd fef4 	bl	8010950 <disk_status>
 8012b68:	4603      	mov	r3, r0
 8012b6a:	f003 0301 	and.w	r3, r3, #1
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d101      	bne.n	8012b76 <validate+0x4e>
			res = FR_OK;
 8012b72:	2300      	movs	r3, #0
 8012b74:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012b76:	7bfb      	ldrb	r3, [r7, #15]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d102      	bne.n	8012b82 <validate+0x5a>
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	e000      	b.n	8012b84 <validate+0x5c>
 8012b82:	2300      	movs	r3, #0
 8012b84:	683a      	ldr	r2, [r7, #0]
 8012b86:	6013      	str	r3, [r2, #0]
	return res;
 8012b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b8a:	4618      	mov	r0, r3
 8012b8c:	3710      	adds	r7, #16
 8012b8e:	46bd      	mov	sp, r7
 8012b90:	bd80      	pop	{r7, pc}
	...

08012b94 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012b94:	b580      	push	{r7, lr}
 8012b96:	b088      	sub	sp, #32
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	60f8      	str	r0, [r7, #12]
 8012b9c:	60b9      	str	r1, [r7, #8]
 8012b9e:	4613      	mov	r3, r2
 8012ba0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012ba2:	68bb      	ldr	r3, [r7, #8]
 8012ba4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012ba6:	f107 0310 	add.w	r3, r7, #16
 8012baa:	4618      	mov	r0, r3
 8012bac:	f7ff fccf 	bl	801254e <get_ldnumber>
 8012bb0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012bb2:	69fb      	ldr	r3, [r7, #28]
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	da01      	bge.n	8012bbc <f_mount+0x28>
 8012bb8:	230b      	movs	r3, #11
 8012bba:	e02b      	b.n	8012c14 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012bbc:	4a17      	ldr	r2, [pc, #92]	; (8012c1c <f_mount+0x88>)
 8012bbe:	69fb      	ldr	r3, [r7, #28]
 8012bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012bc4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012bc6:	69bb      	ldr	r3, [r7, #24]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d005      	beq.n	8012bd8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012bcc:	69b8      	ldr	r0, [r7, #24]
 8012bce:	f7fe f9a5 	bl	8010f1c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8012bd2:	69bb      	ldr	r3, [r7, #24]
 8012bd4:	2200      	movs	r2, #0
 8012bd6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012bd8:	68fb      	ldr	r3, [r7, #12]
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d002      	beq.n	8012be4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	2200      	movs	r2, #0
 8012be2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012be4:	68fa      	ldr	r2, [r7, #12]
 8012be6:	490d      	ldr	r1, [pc, #52]	; (8012c1c <f_mount+0x88>)
 8012be8:	69fb      	ldr	r3, [r7, #28]
 8012bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d002      	beq.n	8012bfa <f_mount+0x66>
 8012bf4:	79fb      	ldrb	r3, [r7, #7]
 8012bf6:	2b01      	cmp	r3, #1
 8012bf8:	d001      	beq.n	8012bfe <f_mount+0x6a>
 8012bfa:	2300      	movs	r3, #0
 8012bfc:	e00a      	b.n	8012c14 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012bfe:	f107 010c 	add.w	r1, r7, #12
 8012c02:	f107 0308 	add.w	r3, r7, #8
 8012c06:	2200      	movs	r2, #0
 8012c08:	4618      	mov	r0, r3
 8012c0a:	f7ff fd3b 	bl	8012684 <find_volume>
 8012c0e:	4603      	mov	r3, r0
 8012c10:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c14:	4618      	mov	r0, r3
 8012c16:	3720      	adds	r7, #32
 8012c18:	46bd      	mov	sp, r7
 8012c1a:	bd80      	pop	{r7, pc}
 8012c1c:	2400a3f0 	.word	0x2400a3f0

08012c20 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012c20:	b580      	push	{r7, lr}
 8012c22:	b09a      	sub	sp, #104	; 0x68
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	60f8      	str	r0, [r7, #12]
 8012c28:	60b9      	str	r1, [r7, #8]
 8012c2a:	4613      	mov	r3, r2
 8012c2c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d101      	bne.n	8012c38 <f_open+0x18>
 8012c34:	2309      	movs	r3, #9
 8012c36:	e1ad      	b.n	8012f94 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012c38:	79fb      	ldrb	r3, [r7, #7]
 8012c3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012c3e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012c40:	79fa      	ldrb	r2, [r7, #7]
 8012c42:	f107 0110 	add.w	r1, r7, #16
 8012c46:	f107 0308 	add.w	r3, r7, #8
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	f7ff fd1a 	bl	8012684 <find_volume>
 8012c50:	4603      	mov	r3, r0
 8012c52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8012c56:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	f040 8191 	bne.w	8012f82 <f_open+0x362>
		dj.obj.fs = fs;
 8012c60:	693b      	ldr	r3, [r7, #16]
 8012c62:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012c64:	68ba      	ldr	r2, [r7, #8]
 8012c66:	f107 0314 	add.w	r3, r7, #20
 8012c6a:	4611      	mov	r1, r2
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	f7ff fbfd 	bl	801246c <follow_path>
 8012c72:	4603      	mov	r3, r0
 8012c74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012c78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d11a      	bne.n	8012cb6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012c80:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012c84:	b25b      	sxtb	r3, r3
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	da03      	bge.n	8012c92 <f_open+0x72>
				res = FR_INVALID_NAME;
 8012c8a:	2306      	movs	r3, #6
 8012c8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8012c90:	e011      	b.n	8012cb6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012c92:	79fb      	ldrb	r3, [r7, #7]
 8012c94:	f023 0301 	bic.w	r3, r3, #1
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	bf14      	ite	ne
 8012c9c:	2301      	movne	r3, #1
 8012c9e:	2300      	moveq	r3, #0
 8012ca0:	b2db      	uxtb	r3, r3
 8012ca2:	461a      	mov	r2, r3
 8012ca4:	f107 0314 	add.w	r3, r7, #20
 8012ca8:	4611      	mov	r1, r2
 8012caa:	4618      	mov	r0, r3
 8012cac:	f7fd ffee 	bl	8010c8c <chk_lock>
 8012cb0:	4603      	mov	r3, r0
 8012cb2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012cb6:	79fb      	ldrb	r3, [r7, #7]
 8012cb8:	f003 031c 	and.w	r3, r3, #28
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d07f      	beq.n	8012dc0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8012cc0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d017      	beq.n	8012cf8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012cc8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012ccc:	2b04      	cmp	r3, #4
 8012cce:	d10e      	bne.n	8012cee <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012cd0:	f7fe f838 	bl	8010d44 <enq_lock>
 8012cd4:	4603      	mov	r3, r0
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d006      	beq.n	8012ce8 <f_open+0xc8>
 8012cda:	f107 0314 	add.w	r3, r7, #20
 8012cde:	4618      	mov	r0, r3
 8012ce0:	f7ff f914 	bl	8011f0c <dir_register>
 8012ce4:	4603      	mov	r3, r0
 8012ce6:	e000      	b.n	8012cea <f_open+0xca>
 8012ce8:	2312      	movs	r3, #18
 8012cea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012cee:	79fb      	ldrb	r3, [r7, #7]
 8012cf0:	f043 0308 	orr.w	r3, r3, #8
 8012cf4:	71fb      	strb	r3, [r7, #7]
 8012cf6:	e010      	b.n	8012d1a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012cf8:	7ebb      	ldrb	r3, [r7, #26]
 8012cfa:	f003 0311 	and.w	r3, r3, #17
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d003      	beq.n	8012d0a <f_open+0xea>
					res = FR_DENIED;
 8012d02:	2307      	movs	r3, #7
 8012d04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8012d08:	e007      	b.n	8012d1a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012d0a:	79fb      	ldrb	r3, [r7, #7]
 8012d0c:	f003 0304 	and.w	r3, r3, #4
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d002      	beq.n	8012d1a <f_open+0xfa>
 8012d14:	2308      	movs	r3, #8
 8012d16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012d1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d168      	bne.n	8012df4 <f_open+0x1d4>
 8012d22:	79fb      	ldrb	r3, [r7, #7]
 8012d24:	f003 0308 	and.w	r3, r3, #8
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d063      	beq.n	8012df4 <f_open+0x1d4>
				dw = GET_FATTIME();
 8012d2c:	f7fa fd5e 	bl	800d7ec <get_fattime>
 8012d30:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d34:	330e      	adds	r3, #14
 8012d36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012d38:	4618      	mov	r0, r3
 8012d3a:	f7fd fefd 	bl	8010b38 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d40:	3316      	adds	r3, #22
 8012d42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012d44:	4618      	mov	r0, r3
 8012d46:	f7fd fef7 	bl	8010b38 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d4c:	330b      	adds	r3, #11
 8012d4e:	2220      	movs	r2, #32
 8012d50:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012d52:	693b      	ldr	r3, [r7, #16]
 8012d54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012d56:	4611      	mov	r1, r2
 8012d58:	4618      	mov	r0, r3
 8012d5a:	f7fe fe4e 	bl	80119fa <ld_clust>
 8012d5e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012d60:	693b      	ldr	r3, [r7, #16]
 8012d62:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012d64:	2200      	movs	r2, #0
 8012d66:	4618      	mov	r0, r3
 8012d68:	f7fe fe66 	bl	8011a38 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d6e:	331c      	adds	r3, #28
 8012d70:	2100      	movs	r1, #0
 8012d72:	4618      	mov	r0, r3
 8012d74:	f7fd fee0 	bl	8010b38 <st_dword>
					fs->wflag = 1;
 8012d78:	693b      	ldr	r3, [r7, #16]
 8012d7a:	2201      	movs	r2, #1
 8012d7c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012d7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d037      	beq.n	8012df4 <f_open+0x1d4>
						dw = fs->winsect;
 8012d84:	693b      	ldr	r3, [r7, #16]
 8012d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d88:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8012d8a:	f107 0314 	add.w	r3, r7, #20
 8012d8e:	2200      	movs	r2, #0
 8012d90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012d92:	4618      	mov	r0, r3
 8012d94:	f7fe fb79 	bl	801148a <remove_chain>
 8012d98:	4603      	mov	r3, r0
 8012d9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8012d9e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d126      	bne.n	8012df4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8012da6:	693b      	ldr	r3, [r7, #16]
 8012da8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012daa:	4618      	mov	r0, r3
 8012dac:	f7fe f91e 	bl	8010fec <move_window>
 8012db0:	4603      	mov	r3, r0
 8012db2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012db6:	693b      	ldr	r3, [r7, #16]
 8012db8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012dba:	3a01      	subs	r2, #1
 8012dbc:	611a      	str	r2, [r3, #16]
 8012dbe:	e019      	b.n	8012df4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012dc0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d115      	bne.n	8012df4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012dc8:	7ebb      	ldrb	r3, [r7, #26]
 8012dca:	f003 0310 	and.w	r3, r3, #16
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d003      	beq.n	8012dda <f_open+0x1ba>
					res = FR_NO_FILE;
 8012dd2:	2304      	movs	r3, #4
 8012dd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8012dd8:	e00c      	b.n	8012df4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012dda:	79fb      	ldrb	r3, [r7, #7]
 8012ddc:	f003 0302 	and.w	r3, r3, #2
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d007      	beq.n	8012df4 <f_open+0x1d4>
 8012de4:	7ebb      	ldrb	r3, [r7, #26]
 8012de6:	f003 0301 	and.w	r3, r3, #1
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d002      	beq.n	8012df4 <f_open+0x1d4>
						res = FR_DENIED;
 8012dee:	2307      	movs	r3, #7
 8012df0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8012df4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d128      	bne.n	8012e4e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012dfc:	79fb      	ldrb	r3, [r7, #7]
 8012dfe:	f003 0308 	and.w	r3, r3, #8
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d003      	beq.n	8012e0e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8012e06:	79fb      	ldrb	r3, [r7, #7]
 8012e08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012e0c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012e0e:	693b      	ldr	r3, [r7, #16]
 8012e10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8012e16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012e1c:	79fb      	ldrb	r3, [r7, #7]
 8012e1e:	f023 0301 	bic.w	r3, r3, #1
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	bf14      	ite	ne
 8012e26:	2301      	movne	r3, #1
 8012e28:	2300      	moveq	r3, #0
 8012e2a:	b2db      	uxtb	r3, r3
 8012e2c:	461a      	mov	r2, r3
 8012e2e:	f107 0314 	add.w	r3, r7, #20
 8012e32:	4611      	mov	r1, r2
 8012e34:	4618      	mov	r0, r3
 8012e36:	f7fd ffa7 	bl	8010d88 <inc_lock>
 8012e3a:	4602      	mov	r2, r0
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	691b      	ldr	r3, [r3, #16]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d102      	bne.n	8012e4e <f_open+0x22e>
 8012e48:	2302      	movs	r3, #2
 8012e4a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012e4e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	f040 8095 	bne.w	8012f82 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8012e58:	693b      	ldr	r3, [r7, #16]
 8012e5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012e5c:	4611      	mov	r1, r2
 8012e5e:	4618      	mov	r0, r3
 8012e60:	f7fe fdcb 	bl	80119fa <ld_clust>
 8012e64:	4602      	mov	r2, r0
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e6c:	331c      	adds	r3, #28
 8012e6e:	4618      	mov	r0, r3
 8012e70:	f7fd fe24 	bl	8010abc <ld_dword>
 8012e74:	4602      	mov	r2, r0
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	2200      	movs	r2, #0
 8012e7e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012e80:	693a      	ldr	r2, [r7, #16]
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8012e86:	693b      	ldr	r3, [r7, #16]
 8012e88:	88da      	ldrh	r2, [r3, #6]
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	79fa      	ldrb	r2, [r7, #7]
 8012e92:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	2200      	movs	r2, #0
 8012e98:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	2200      	movs	r2, #0
 8012e9e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	2200      	movs	r2, #0
 8012ea4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	3330      	adds	r3, #48	; 0x30
 8012eaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012eae:	2100      	movs	r1, #0
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	f7fd fe8e 	bl	8010bd2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8012eb6:	79fb      	ldrb	r3, [r7, #7]
 8012eb8:	f003 0320 	and.w	r3, r3, #32
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d060      	beq.n	8012f82 <f_open+0x362>
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	68db      	ldr	r3, [r3, #12]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d05c      	beq.n	8012f82 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	68da      	ldr	r2, [r3, #12]
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012ed0:	693b      	ldr	r3, [r7, #16]
 8012ed2:	895b      	ldrh	r3, [r3, #10]
 8012ed4:	025b      	lsls	r3, r3, #9
 8012ed6:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	689b      	ldr	r3, [r3, #8]
 8012edc:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	68db      	ldr	r3, [r3, #12]
 8012ee2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012ee4:	e016      	b.n	8012f14 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8012eea:	4618      	mov	r0, r3
 8012eec:	f7fe f939 	bl	8011162 <get_fat>
 8012ef0:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8012ef2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012ef4:	2b01      	cmp	r3, #1
 8012ef6:	d802      	bhi.n	8012efe <f_open+0x2de>
 8012ef8:	2302      	movs	r3, #2
 8012efa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012efe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f04:	d102      	bne.n	8012f0c <f_open+0x2ec>
 8012f06:	2301      	movs	r3, #1
 8012f08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012f0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f10:	1ad3      	subs	r3, r2, r3
 8012f12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012f14:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d103      	bne.n	8012f24 <f_open+0x304>
 8012f1c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012f1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f20:	429a      	cmp	r2, r3
 8012f22:	d8e0      	bhi.n	8012ee6 <f_open+0x2c6>
				}
				fp->clust = clst;
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012f28:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012f2a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d127      	bne.n	8012f82 <f_open+0x362>
 8012f32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d022      	beq.n	8012f82 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012f3c:	693b      	ldr	r3, [r7, #16]
 8012f3e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8012f40:	4618      	mov	r0, r3
 8012f42:	f7fe f8ef 	bl	8011124 <clust2sect>
 8012f46:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d103      	bne.n	8012f56 <f_open+0x336>
						res = FR_INT_ERR;
 8012f4e:	2302      	movs	r3, #2
 8012f50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8012f54:	e015      	b.n	8012f82 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012f56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012f58:	0a5a      	lsrs	r2, r3, #9
 8012f5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f5c:	441a      	add	r2, r3
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012f62:	693b      	ldr	r3, [r7, #16]
 8012f64:	7858      	ldrb	r0, [r3, #1]
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	6a1a      	ldr	r2, [r3, #32]
 8012f70:	2301      	movs	r3, #1
 8012f72:	f7fd fd2d 	bl	80109d0 <disk_read>
 8012f76:	4603      	mov	r3, r0
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d002      	beq.n	8012f82 <f_open+0x362>
 8012f7c:	2301      	movs	r3, #1
 8012f7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012f82:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d002      	beq.n	8012f90 <f_open+0x370>
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	2200      	movs	r2, #0
 8012f8e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012f90:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8012f94:	4618      	mov	r0, r3
 8012f96:	3768      	adds	r7, #104	; 0x68
 8012f98:	46bd      	mov	sp, r7
 8012f9a:	bd80      	pop	{r7, pc}

08012f9c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8012f9c:	b580      	push	{r7, lr}
 8012f9e:	b08e      	sub	sp, #56	; 0x38
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	60f8      	str	r0, [r7, #12]
 8012fa4:	60b9      	str	r1, [r7, #8]
 8012fa6:	607a      	str	r2, [r7, #4]
 8012fa8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8012faa:	68bb      	ldr	r3, [r7, #8]
 8012fac:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8012fae:	683b      	ldr	r3, [r7, #0]
 8012fb0:	2200      	movs	r2, #0
 8012fb2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	f107 0214 	add.w	r2, r7, #20
 8012fba:	4611      	mov	r1, r2
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	f7ff fdb3 	bl	8012b28 <validate>
 8012fc2:	4603      	mov	r3, r0
 8012fc4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012fc8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d107      	bne.n	8012fe0 <f_read+0x44>
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	7d5b      	ldrb	r3, [r3, #21]
 8012fd4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012fd8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d002      	beq.n	8012fe6 <f_read+0x4a>
 8012fe0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012fe4:	e115      	b.n	8013212 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	7d1b      	ldrb	r3, [r3, #20]
 8012fea:	f003 0301 	and.w	r3, r3, #1
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d101      	bne.n	8012ff6 <f_read+0x5a>
 8012ff2:	2307      	movs	r3, #7
 8012ff4:	e10d      	b.n	8013212 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	68da      	ldr	r2, [r3, #12]
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	699b      	ldr	r3, [r3, #24]
 8012ffe:	1ad3      	subs	r3, r2, r3
 8013000:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8013002:	687a      	ldr	r2, [r7, #4]
 8013004:	6a3b      	ldr	r3, [r7, #32]
 8013006:	429a      	cmp	r2, r3
 8013008:	f240 80fe 	bls.w	8013208 <f_read+0x26c>
 801300c:	6a3b      	ldr	r3, [r7, #32]
 801300e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8013010:	e0fa      	b.n	8013208 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	699b      	ldr	r3, [r3, #24]
 8013016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801301a:	2b00      	cmp	r3, #0
 801301c:	f040 80c6 	bne.w	80131ac <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	699b      	ldr	r3, [r3, #24]
 8013024:	0a5b      	lsrs	r3, r3, #9
 8013026:	697a      	ldr	r2, [r7, #20]
 8013028:	8952      	ldrh	r2, [r2, #10]
 801302a:	3a01      	subs	r2, #1
 801302c:	4013      	ands	r3, r2
 801302e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8013030:	69fb      	ldr	r3, [r7, #28]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d12f      	bne.n	8013096 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	699b      	ldr	r3, [r3, #24]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d103      	bne.n	8013046 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	689b      	ldr	r3, [r3, #8]
 8013042:	633b      	str	r3, [r7, #48]	; 0x30
 8013044:	e013      	b.n	801306e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801304a:	2b00      	cmp	r3, #0
 801304c:	d007      	beq.n	801305e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	699b      	ldr	r3, [r3, #24]
 8013052:	4619      	mov	r1, r3
 8013054:	68f8      	ldr	r0, [r7, #12]
 8013056:	f7fe fb15 	bl	8011684 <clmt_clust>
 801305a:	6338      	str	r0, [r7, #48]	; 0x30
 801305c:	e007      	b.n	801306e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801305e:	68fa      	ldr	r2, [r7, #12]
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	69db      	ldr	r3, [r3, #28]
 8013064:	4619      	mov	r1, r3
 8013066:	4610      	mov	r0, r2
 8013068:	f7fe f87b 	bl	8011162 <get_fat>
 801306c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801306e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013070:	2b01      	cmp	r3, #1
 8013072:	d804      	bhi.n	801307e <f_read+0xe2>
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	2202      	movs	r2, #2
 8013078:	755a      	strb	r2, [r3, #21]
 801307a:	2302      	movs	r3, #2
 801307c:	e0c9      	b.n	8013212 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801307e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013084:	d104      	bne.n	8013090 <f_read+0xf4>
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	2201      	movs	r2, #1
 801308a:	755a      	strb	r2, [r3, #21]
 801308c:	2301      	movs	r3, #1
 801308e:	e0c0      	b.n	8013212 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013094:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013096:	697a      	ldr	r2, [r7, #20]
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	69db      	ldr	r3, [r3, #28]
 801309c:	4619      	mov	r1, r3
 801309e:	4610      	mov	r0, r2
 80130a0:	f7fe f840 	bl	8011124 <clust2sect>
 80130a4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80130a6:	69bb      	ldr	r3, [r7, #24]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d104      	bne.n	80130b6 <f_read+0x11a>
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	2202      	movs	r2, #2
 80130b0:	755a      	strb	r2, [r3, #21]
 80130b2:	2302      	movs	r3, #2
 80130b4:	e0ad      	b.n	8013212 <f_read+0x276>
			sect += csect;
 80130b6:	69ba      	ldr	r2, [r7, #24]
 80130b8:	69fb      	ldr	r3, [r7, #28]
 80130ba:	4413      	add	r3, r2
 80130bc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	0a5b      	lsrs	r3, r3, #9
 80130c2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80130c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d039      	beq.n	801313e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80130ca:	69fa      	ldr	r2, [r7, #28]
 80130cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130ce:	4413      	add	r3, r2
 80130d0:	697a      	ldr	r2, [r7, #20]
 80130d2:	8952      	ldrh	r2, [r2, #10]
 80130d4:	4293      	cmp	r3, r2
 80130d6:	d905      	bls.n	80130e4 <f_read+0x148>
					cc = fs->csize - csect;
 80130d8:	697b      	ldr	r3, [r7, #20]
 80130da:	895b      	ldrh	r3, [r3, #10]
 80130dc:	461a      	mov	r2, r3
 80130de:	69fb      	ldr	r3, [r7, #28]
 80130e0:	1ad3      	subs	r3, r2, r3
 80130e2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80130e4:	697b      	ldr	r3, [r7, #20]
 80130e6:	7858      	ldrb	r0, [r3, #1]
 80130e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130ea:	69ba      	ldr	r2, [r7, #24]
 80130ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80130ee:	f7fd fc6f 	bl	80109d0 <disk_read>
 80130f2:	4603      	mov	r3, r0
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d004      	beq.n	8013102 <f_read+0x166>
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	2201      	movs	r2, #1
 80130fc:	755a      	strb	r2, [r3, #21]
 80130fe:	2301      	movs	r3, #1
 8013100:	e087      	b.n	8013212 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	7d1b      	ldrb	r3, [r3, #20]
 8013106:	b25b      	sxtb	r3, r3
 8013108:	2b00      	cmp	r3, #0
 801310a:	da14      	bge.n	8013136 <f_read+0x19a>
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	6a1a      	ldr	r2, [r3, #32]
 8013110:	69bb      	ldr	r3, [r7, #24]
 8013112:	1ad3      	subs	r3, r2, r3
 8013114:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013116:	429a      	cmp	r2, r3
 8013118:	d90d      	bls.n	8013136 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	6a1a      	ldr	r2, [r3, #32]
 801311e:	69bb      	ldr	r3, [r7, #24]
 8013120:	1ad3      	subs	r3, r2, r3
 8013122:	025b      	lsls	r3, r3, #9
 8013124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013126:	18d0      	adds	r0, r2, r3
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	3330      	adds	r3, #48	; 0x30
 801312c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013130:	4619      	mov	r1, r3
 8013132:	f7fd fd2d 	bl	8010b90 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8013136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013138:	025b      	lsls	r3, r3, #9
 801313a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 801313c:	e050      	b.n	80131e0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	6a1b      	ldr	r3, [r3, #32]
 8013142:	69ba      	ldr	r2, [r7, #24]
 8013144:	429a      	cmp	r2, r3
 8013146:	d02e      	beq.n	80131a6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	7d1b      	ldrb	r3, [r3, #20]
 801314c:	b25b      	sxtb	r3, r3
 801314e:	2b00      	cmp	r3, #0
 8013150:	da18      	bge.n	8013184 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013152:	697b      	ldr	r3, [r7, #20]
 8013154:	7858      	ldrb	r0, [r3, #1]
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	6a1a      	ldr	r2, [r3, #32]
 8013160:	2301      	movs	r3, #1
 8013162:	f7fd fc55 	bl	8010a10 <disk_write>
 8013166:	4603      	mov	r3, r0
 8013168:	2b00      	cmp	r3, #0
 801316a:	d004      	beq.n	8013176 <f_read+0x1da>
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	2201      	movs	r2, #1
 8013170:	755a      	strb	r2, [r3, #21]
 8013172:	2301      	movs	r3, #1
 8013174:	e04d      	b.n	8013212 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	7d1b      	ldrb	r3, [r3, #20]
 801317a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801317e:	b2da      	uxtb	r2, r3
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013184:	697b      	ldr	r3, [r7, #20]
 8013186:	7858      	ldrb	r0, [r3, #1]
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801318e:	2301      	movs	r3, #1
 8013190:	69ba      	ldr	r2, [r7, #24]
 8013192:	f7fd fc1d 	bl	80109d0 <disk_read>
 8013196:	4603      	mov	r3, r0
 8013198:	2b00      	cmp	r3, #0
 801319a:	d004      	beq.n	80131a6 <f_read+0x20a>
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	2201      	movs	r2, #1
 80131a0:	755a      	strb	r2, [r3, #21]
 80131a2:	2301      	movs	r3, #1
 80131a4:	e035      	b.n	8013212 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	69ba      	ldr	r2, [r7, #24]
 80131aa:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	699b      	ldr	r3, [r3, #24]
 80131b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80131b4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80131b8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80131ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	429a      	cmp	r2, r3
 80131c0:	d901      	bls.n	80131c6 <f_read+0x22a>
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	699b      	ldr	r3, [r3, #24]
 80131d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80131d4:	4413      	add	r3, r2
 80131d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80131d8:	4619      	mov	r1, r3
 80131da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80131dc:	f7fd fcd8 	bl	8010b90 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80131e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80131e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131e4:	4413      	add	r3, r2
 80131e6:	627b      	str	r3, [r7, #36]	; 0x24
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	699a      	ldr	r2, [r3, #24]
 80131ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131ee:	441a      	add	r2, r3
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	619a      	str	r2, [r3, #24]
 80131f4:	683b      	ldr	r3, [r7, #0]
 80131f6:	681a      	ldr	r2, [r3, #0]
 80131f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131fa:	441a      	add	r2, r3
 80131fc:	683b      	ldr	r3, [r7, #0]
 80131fe:	601a      	str	r2, [r3, #0]
 8013200:	687a      	ldr	r2, [r7, #4]
 8013202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013204:	1ad3      	subs	r3, r2, r3
 8013206:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	2b00      	cmp	r3, #0
 801320c:	f47f af01 	bne.w	8013012 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8013210:	2300      	movs	r3, #0
}
 8013212:	4618      	mov	r0, r3
 8013214:	3738      	adds	r7, #56	; 0x38
 8013216:	46bd      	mov	sp, r7
 8013218:	bd80      	pop	{r7, pc}

0801321a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801321a:	b580      	push	{r7, lr}
 801321c:	b08c      	sub	sp, #48	; 0x30
 801321e:	af00      	add	r7, sp, #0
 8013220:	60f8      	str	r0, [r7, #12]
 8013222:	60b9      	str	r1, [r7, #8]
 8013224:	607a      	str	r2, [r7, #4]
 8013226:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013228:	68bb      	ldr	r3, [r7, #8]
 801322a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801322c:	683b      	ldr	r3, [r7, #0]
 801322e:	2200      	movs	r2, #0
 8013230:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	f107 0210 	add.w	r2, r7, #16
 8013238:	4611      	mov	r1, r2
 801323a:	4618      	mov	r0, r3
 801323c:	f7ff fc74 	bl	8012b28 <validate>
 8013240:	4603      	mov	r3, r0
 8013242:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013246:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801324a:	2b00      	cmp	r3, #0
 801324c:	d107      	bne.n	801325e <f_write+0x44>
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	7d5b      	ldrb	r3, [r3, #21]
 8013252:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013256:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801325a:	2b00      	cmp	r3, #0
 801325c:	d002      	beq.n	8013264 <f_write+0x4a>
 801325e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013262:	e14b      	b.n	80134fc <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	7d1b      	ldrb	r3, [r3, #20]
 8013268:	f003 0302 	and.w	r3, r3, #2
 801326c:	2b00      	cmp	r3, #0
 801326e:	d101      	bne.n	8013274 <f_write+0x5a>
 8013270:	2307      	movs	r3, #7
 8013272:	e143      	b.n	80134fc <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	699a      	ldr	r2, [r3, #24]
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	441a      	add	r2, r3
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	699b      	ldr	r3, [r3, #24]
 8013280:	429a      	cmp	r2, r3
 8013282:	f080 812d 	bcs.w	80134e0 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	699b      	ldr	r3, [r3, #24]
 801328a:	43db      	mvns	r3, r3
 801328c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801328e:	e127      	b.n	80134e0 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	699b      	ldr	r3, [r3, #24]
 8013294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013298:	2b00      	cmp	r3, #0
 801329a:	f040 80e3 	bne.w	8013464 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	699b      	ldr	r3, [r3, #24]
 80132a2:	0a5b      	lsrs	r3, r3, #9
 80132a4:	693a      	ldr	r2, [r7, #16]
 80132a6:	8952      	ldrh	r2, [r2, #10]
 80132a8:	3a01      	subs	r2, #1
 80132aa:	4013      	ands	r3, r2
 80132ac:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80132ae:	69bb      	ldr	r3, [r7, #24]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d143      	bne.n	801333c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	699b      	ldr	r3, [r3, #24]
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d10c      	bne.n	80132d6 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	689b      	ldr	r3, [r3, #8]
 80132c0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80132c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d11a      	bne.n	80132fe <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	2100      	movs	r1, #0
 80132cc:	4618      	mov	r0, r3
 80132ce:	f7fe f941 	bl	8011554 <create_chain>
 80132d2:	62b8      	str	r0, [r7, #40]	; 0x28
 80132d4:	e013      	b.n	80132fe <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d007      	beq.n	80132ee <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	699b      	ldr	r3, [r3, #24]
 80132e2:	4619      	mov	r1, r3
 80132e4:	68f8      	ldr	r0, [r7, #12]
 80132e6:	f7fe f9cd 	bl	8011684 <clmt_clust>
 80132ea:	62b8      	str	r0, [r7, #40]	; 0x28
 80132ec:	e007      	b.n	80132fe <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80132ee:	68fa      	ldr	r2, [r7, #12]
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	69db      	ldr	r3, [r3, #28]
 80132f4:	4619      	mov	r1, r3
 80132f6:	4610      	mov	r0, r2
 80132f8:	f7fe f92c 	bl	8011554 <create_chain>
 80132fc:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80132fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013300:	2b00      	cmp	r3, #0
 8013302:	f000 80f2 	beq.w	80134ea <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013308:	2b01      	cmp	r3, #1
 801330a:	d104      	bne.n	8013316 <f_write+0xfc>
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	2202      	movs	r2, #2
 8013310:	755a      	strb	r2, [r3, #21]
 8013312:	2302      	movs	r3, #2
 8013314:	e0f2      	b.n	80134fc <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013318:	f1b3 3fff 	cmp.w	r3, #4294967295
 801331c:	d104      	bne.n	8013328 <f_write+0x10e>
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	2201      	movs	r2, #1
 8013322:	755a      	strb	r2, [r3, #21]
 8013324:	2301      	movs	r3, #1
 8013326:	e0e9      	b.n	80134fc <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801332c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	689b      	ldr	r3, [r3, #8]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d102      	bne.n	801333c <f_write+0x122>
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801333a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	7d1b      	ldrb	r3, [r3, #20]
 8013340:	b25b      	sxtb	r3, r3
 8013342:	2b00      	cmp	r3, #0
 8013344:	da18      	bge.n	8013378 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013346:	693b      	ldr	r3, [r7, #16]
 8013348:	7858      	ldrb	r0, [r3, #1]
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	6a1a      	ldr	r2, [r3, #32]
 8013354:	2301      	movs	r3, #1
 8013356:	f7fd fb5b 	bl	8010a10 <disk_write>
 801335a:	4603      	mov	r3, r0
 801335c:	2b00      	cmp	r3, #0
 801335e:	d004      	beq.n	801336a <f_write+0x150>
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	2201      	movs	r2, #1
 8013364:	755a      	strb	r2, [r3, #21]
 8013366:	2301      	movs	r3, #1
 8013368:	e0c8      	b.n	80134fc <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	7d1b      	ldrb	r3, [r3, #20]
 801336e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013372:	b2da      	uxtb	r2, r3
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013378:	693a      	ldr	r2, [r7, #16]
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	69db      	ldr	r3, [r3, #28]
 801337e:	4619      	mov	r1, r3
 8013380:	4610      	mov	r0, r2
 8013382:	f7fd fecf 	bl	8011124 <clust2sect>
 8013386:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013388:	697b      	ldr	r3, [r7, #20]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d104      	bne.n	8013398 <f_write+0x17e>
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	2202      	movs	r2, #2
 8013392:	755a      	strb	r2, [r3, #21]
 8013394:	2302      	movs	r3, #2
 8013396:	e0b1      	b.n	80134fc <f_write+0x2e2>
			sect += csect;
 8013398:	697a      	ldr	r2, [r7, #20]
 801339a:	69bb      	ldr	r3, [r7, #24]
 801339c:	4413      	add	r3, r2
 801339e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	0a5b      	lsrs	r3, r3, #9
 80133a4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80133a6:	6a3b      	ldr	r3, [r7, #32]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d03c      	beq.n	8013426 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80133ac:	69ba      	ldr	r2, [r7, #24]
 80133ae:	6a3b      	ldr	r3, [r7, #32]
 80133b0:	4413      	add	r3, r2
 80133b2:	693a      	ldr	r2, [r7, #16]
 80133b4:	8952      	ldrh	r2, [r2, #10]
 80133b6:	4293      	cmp	r3, r2
 80133b8:	d905      	bls.n	80133c6 <f_write+0x1ac>
					cc = fs->csize - csect;
 80133ba:	693b      	ldr	r3, [r7, #16]
 80133bc:	895b      	ldrh	r3, [r3, #10]
 80133be:	461a      	mov	r2, r3
 80133c0:	69bb      	ldr	r3, [r7, #24]
 80133c2:	1ad3      	subs	r3, r2, r3
 80133c4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80133c6:	693b      	ldr	r3, [r7, #16]
 80133c8:	7858      	ldrb	r0, [r3, #1]
 80133ca:	6a3b      	ldr	r3, [r7, #32]
 80133cc:	697a      	ldr	r2, [r7, #20]
 80133ce:	69f9      	ldr	r1, [r7, #28]
 80133d0:	f7fd fb1e 	bl	8010a10 <disk_write>
 80133d4:	4603      	mov	r3, r0
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d004      	beq.n	80133e4 <f_write+0x1ca>
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	2201      	movs	r2, #1
 80133de:	755a      	strb	r2, [r3, #21]
 80133e0:	2301      	movs	r3, #1
 80133e2:	e08b      	b.n	80134fc <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	6a1a      	ldr	r2, [r3, #32]
 80133e8:	697b      	ldr	r3, [r7, #20]
 80133ea:	1ad3      	subs	r3, r2, r3
 80133ec:	6a3a      	ldr	r2, [r7, #32]
 80133ee:	429a      	cmp	r2, r3
 80133f0:	d915      	bls.n	801341e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	6a1a      	ldr	r2, [r3, #32]
 80133fc:	697b      	ldr	r3, [r7, #20]
 80133fe:	1ad3      	subs	r3, r2, r3
 8013400:	025b      	lsls	r3, r3, #9
 8013402:	69fa      	ldr	r2, [r7, #28]
 8013404:	4413      	add	r3, r2
 8013406:	f44f 7200 	mov.w	r2, #512	; 0x200
 801340a:	4619      	mov	r1, r3
 801340c:	f7fd fbc0 	bl	8010b90 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	7d1b      	ldrb	r3, [r3, #20]
 8013414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013418:	b2da      	uxtb	r2, r3
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801341e:	6a3b      	ldr	r3, [r7, #32]
 8013420:	025b      	lsls	r3, r3, #9
 8013422:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013424:	e03f      	b.n	80134a6 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	6a1b      	ldr	r3, [r3, #32]
 801342a:	697a      	ldr	r2, [r7, #20]
 801342c:	429a      	cmp	r2, r3
 801342e:	d016      	beq.n	801345e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	699a      	ldr	r2, [r3, #24]
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013438:	429a      	cmp	r2, r3
 801343a:	d210      	bcs.n	801345e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801343c:	693b      	ldr	r3, [r7, #16]
 801343e:	7858      	ldrb	r0, [r3, #1]
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013446:	2301      	movs	r3, #1
 8013448:	697a      	ldr	r2, [r7, #20]
 801344a:	f7fd fac1 	bl	80109d0 <disk_read>
 801344e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013450:	2b00      	cmp	r3, #0
 8013452:	d004      	beq.n	801345e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8013454:	68fb      	ldr	r3, [r7, #12]
 8013456:	2201      	movs	r2, #1
 8013458:	755a      	strb	r2, [r3, #21]
 801345a:	2301      	movs	r3, #1
 801345c:	e04e      	b.n	80134fc <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	697a      	ldr	r2, [r7, #20]
 8013462:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	699b      	ldr	r3, [r3, #24]
 8013468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801346c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8013470:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	429a      	cmp	r2, r3
 8013478:	d901      	bls.n	801347e <f_write+0x264>
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	699b      	ldr	r3, [r3, #24]
 8013488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801348c:	4413      	add	r3, r2
 801348e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013490:	69f9      	ldr	r1, [r7, #28]
 8013492:	4618      	mov	r0, r3
 8013494:	f7fd fb7c 	bl	8010b90 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	7d1b      	ldrb	r3, [r3, #20]
 801349c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80134a0:	b2da      	uxtb	r2, r3
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80134a6:	69fa      	ldr	r2, [r7, #28]
 80134a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134aa:	4413      	add	r3, r2
 80134ac:	61fb      	str	r3, [r7, #28]
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	699a      	ldr	r2, [r3, #24]
 80134b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134b4:	441a      	add	r2, r3
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	619a      	str	r2, [r3, #24]
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	68da      	ldr	r2, [r3, #12]
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	699b      	ldr	r3, [r3, #24]
 80134c2:	429a      	cmp	r2, r3
 80134c4:	bf38      	it	cc
 80134c6:	461a      	movcc	r2, r3
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	60da      	str	r2, [r3, #12]
 80134cc:	683b      	ldr	r3, [r7, #0]
 80134ce:	681a      	ldr	r2, [r3, #0]
 80134d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134d2:	441a      	add	r2, r3
 80134d4:	683b      	ldr	r3, [r7, #0]
 80134d6:	601a      	str	r2, [r3, #0]
 80134d8:	687a      	ldr	r2, [r7, #4]
 80134da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134dc:	1ad3      	subs	r3, r2, r3
 80134de:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	f47f aed4 	bne.w	8013290 <f_write+0x76>
 80134e8:	e000      	b.n	80134ec <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80134ea:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	7d1b      	ldrb	r3, [r3, #20]
 80134f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80134f4:	b2da      	uxtb	r2, r3
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80134fa:	2300      	movs	r3, #0
}
 80134fc:	4618      	mov	r0, r3
 80134fe:	3730      	adds	r7, #48	; 0x30
 8013500:	46bd      	mov	sp, r7
 8013502:	bd80      	pop	{r7, pc}

08013504 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013504:	b580      	push	{r7, lr}
 8013506:	b086      	sub	sp, #24
 8013508:	af00      	add	r7, sp, #0
 801350a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	f107 0208 	add.w	r2, r7, #8
 8013512:	4611      	mov	r1, r2
 8013514:	4618      	mov	r0, r3
 8013516:	f7ff fb07 	bl	8012b28 <validate>
 801351a:	4603      	mov	r3, r0
 801351c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801351e:	7dfb      	ldrb	r3, [r7, #23]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d168      	bne.n	80135f6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	7d1b      	ldrb	r3, [r3, #20]
 8013528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801352c:	2b00      	cmp	r3, #0
 801352e:	d062      	beq.n	80135f6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	7d1b      	ldrb	r3, [r3, #20]
 8013534:	b25b      	sxtb	r3, r3
 8013536:	2b00      	cmp	r3, #0
 8013538:	da15      	bge.n	8013566 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801353a:	68bb      	ldr	r3, [r7, #8]
 801353c:	7858      	ldrb	r0, [r3, #1]
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	6a1a      	ldr	r2, [r3, #32]
 8013548:	2301      	movs	r3, #1
 801354a:	f7fd fa61 	bl	8010a10 <disk_write>
 801354e:	4603      	mov	r3, r0
 8013550:	2b00      	cmp	r3, #0
 8013552:	d001      	beq.n	8013558 <f_sync+0x54>
 8013554:	2301      	movs	r3, #1
 8013556:	e04f      	b.n	80135f8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	7d1b      	ldrb	r3, [r3, #20]
 801355c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013560:	b2da      	uxtb	r2, r3
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013566:	f7fa f941 	bl	800d7ec <get_fattime>
 801356a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801356c:	68ba      	ldr	r2, [r7, #8]
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013572:	4619      	mov	r1, r3
 8013574:	4610      	mov	r0, r2
 8013576:	f7fd fd39 	bl	8010fec <move_window>
 801357a:	4603      	mov	r3, r0
 801357c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801357e:	7dfb      	ldrb	r3, [r7, #23]
 8013580:	2b00      	cmp	r3, #0
 8013582:	d138      	bne.n	80135f6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013588:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801358a:	68fb      	ldr	r3, [r7, #12]
 801358c:	330b      	adds	r3, #11
 801358e:	781a      	ldrb	r2, [r3, #0]
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	330b      	adds	r3, #11
 8013594:	f042 0220 	orr.w	r2, r2, #32
 8013598:	b2d2      	uxtb	r2, r2
 801359a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	6818      	ldr	r0, [r3, #0]
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	689b      	ldr	r3, [r3, #8]
 80135a4:	461a      	mov	r2, r3
 80135a6:	68f9      	ldr	r1, [r7, #12]
 80135a8:	f7fe fa46 	bl	8011a38 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	f103 021c 	add.w	r2, r3, #28
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	68db      	ldr	r3, [r3, #12]
 80135b6:	4619      	mov	r1, r3
 80135b8:	4610      	mov	r0, r2
 80135ba:	f7fd fabd 	bl	8010b38 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	3316      	adds	r3, #22
 80135c2:	6939      	ldr	r1, [r7, #16]
 80135c4:	4618      	mov	r0, r3
 80135c6:	f7fd fab7 	bl	8010b38 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	3312      	adds	r3, #18
 80135ce:	2100      	movs	r1, #0
 80135d0:	4618      	mov	r0, r3
 80135d2:	f7fd fa96 	bl	8010b02 <st_word>
					fs->wflag = 1;
 80135d6:	68bb      	ldr	r3, [r7, #8]
 80135d8:	2201      	movs	r2, #1
 80135da:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80135dc:	68bb      	ldr	r3, [r7, #8]
 80135de:	4618      	mov	r0, r3
 80135e0:	f7fd fd32 	bl	8011048 <sync_fs>
 80135e4:	4603      	mov	r3, r0
 80135e6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	7d1b      	ldrb	r3, [r3, #20]
 80135ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80135f0:	b2da      	uxtb	r2, r3
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80135f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80135f8:	4618      	mov	r0, r3
 80135fa:	3718      	adds	r7, #24
 80135fc:	46bd      	mov	sp, r7
 80135fe:	bd80      	pop	{r7, pc}

08013600 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013600:	b580      	push	{r7, lr}
 8013602:	b084      	sub	sp, #16
 8013604:	af00      	add	r7, sp, #0
 8013606:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013608:	6878      	ldr	r0, [r7, #4]
 801360a:	f7ff ff7b 	bl	8013504 <f_sync>
 801360e:	4603      	mov	r3, r0
 8013610:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013612:	7bfb      	ldrb	r3, [r7, #15]
 8013614:	2b00      	cmp	r3, #0
 8013616:	d118      	bne.n	801364a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	f107 0208 	add.w	r2, r7, #8
 801361e:	4611      	mov	r1, r2
 8013620:	4618      	mov	r0, r3
 8013622:	f7ff fa81 	bl	8012b28 <validate>
 8013626:	4603      	mov	r3, r0
 8013628:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801362a:	7bfb      	ldrb	r3, [r7, #15]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d10c      	bne.n	801364a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	691b      	ldr	r3, [r3, #16]
 8013634:	4618      	mov	r0, r3
 8013636:	f7fd fc35 	bl	8010ea4 <dec_lock>
 801363a:	4603      	mov	r3, r0
 801363c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801363e:	7bfb      	ldrb	r3, [r7, #15]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d102      	bne.n	801364a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	2200      	movs	r2, #0
 8013648:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801364a:	7bfb      	ldrb	r3, [r7, #15]
}
 801364c:	4618      	mov	r0, r3
 801364e:	3710      	adds	r7, #16
 8013650:	46bd      	mov	sp, r7
 8013652:	bd80      	pop	{r7, pc}

08013654 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8013654:	b580      	push	{r7, lr}
 8013656:	b092      	sub	sp, #72	; 0x48
 8013658:	af00      	add	r7, sp, #0
 801365a:	60f8      	str	r0, [r7, #12]
 801365c:	60b9      	str	r1, [r7, #8]
 801365e:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8013660:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8013664:	f107 030c 	add.w	r3, r7, #12
 8013668:	2200      	movs	r2, #0
 801366a:	4618      	mov	r0, r3
 801366c:	f7ff f80a 	bl	8012684 <find_volume>
 8013670:	4603      	mov	r3, r0
 8013672:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8013676:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801367a:	2b00      	cmp	r3, #0
 801367c:	f040 8099 	bne.w	80137b2 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8013680:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8013686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013688:	695a      	ldr	r2, [r3, #20]
 801368a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801368c:	699b      	ldr	r3, [r3, #24]
 801368e:	3b02      	subs	r3, #2
 8013690:	429a      	cmp	r2, r3
 8013692:	d804      	bhi.n	801369e <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8013694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013696:	695a      	ldr	r2, [r3, #20]
 8013698:	68bb      	ldr	r3, [r7, #8]
 801369a:	601a      	str	r2, [r3, #0]
 801369c:	e089      	b.n	80137b2 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 801369e:	2300      	movs	r3, #0
 80136a0:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80136a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136a4:	781b      	ldrb	r3, [r3, #0]
 80136a6:	2b01      	cmp	r3, #1
 80136a8:	d128      	bne.n	80136fc <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80136aa:	2302      	movs	r3, #2
 80136ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80136ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136b0:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80136b2:	f107 0314 	add.w	r3, r7, #20
 80136b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80136b8:	4618      	mov	r0, r3
 80136ba:	f7fd fd52 	bl	8011162 <get_fat>
 80136be:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80136c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136c6:	d103      	bne.n	80136d0 <f_getfree+0x7c>
 80136c8:	2301      	movs	r3, #1
 80136ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80136ce:	e063      	b.n	8013798 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80136d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136d2:	2b01      	cmp	r3, #1
 80136d4:	d103      	bne.n	80136de <f_getfree+0x8a>
 80136d6:	2302      	movs	r3, #2
 80136d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80136dc:	e05c      	b.n	8013798 <f_getfree+0x144>
					if (stat == 0) nfree++;
 80136de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d102      	bne.n	80136ea <f_getfree+0x96>
 80136e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80136e6:	3301      	adds	r3, #1
 80136e8:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 80136ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136ec:	3301      	adds	r3, #1
 80136ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80136f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136f2:	699b      	ldr	r3, [r3, #24]
 80136f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80136f6:	429a      	cmp	r2, r3
 80136f8:	d3db      	bcc.n	80136b2 <f_getfree+0x5e>
 80136fa:	e04d      	b.n	8013798 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80136fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136fe:	699b      	ldr	r3, [r3, #24]
 8013700:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013706:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8013708:	2300      	movs	r3, #0
 801370a:	637b      	str	r3, [r7, #52]	; 0x34
 801370c:	2300      	movs	r3, #0
 801370e:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8013710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013712:	2b00      	cmp	r3, #0
 8013714:	d113      	bne.n	801373e <f_getfree+0xea>
							res = move_window(fs, sect++);
 8013716:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801371a:	1c5a      	adds	r2, r3, #1
 801371c:	63ba      	str	r2, [r7, #56]	; 0x38
 801371e:	4619      	mov	r1, r3
 8013720:	f7fd fc64 	bl	8010fec <move_window>
 8013724:	4603      	mov	r3, r0
 8013726:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 801372a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801372e:	2b00      	cmp	r3, #0
 8013730:	d131      	bne.n	8013796 <f_getfree+0x142>
							p = fs->win;
 8013732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013734:	3334      	adds	r3, #52	; 0x34
 8013736:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8013738:	f44f 7300 	mov.w	r3, #512	; 0x200
 801373c:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 801373e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013740:	781b      	ldrb	r3, [r3, #0]
 8013742:	2b02      	cmp	r3, #2
 8013744:	d10f      	bne.n	8013766 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8013746:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013748:	f7fd f9a0 	bl	8010a8c <ld_word>
 801374c:	4603      	mov	r3, r0
 801374e:	2b00      	cmp	r3, #0
 8013750:	d102      	bne.n	8013758 <f_getfree+0x104>
 8013752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013754:	3301      	adds	r3, #1
 8013756:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8013758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801375a:	3302      	adds	r3, #2
 801375c:	633b      	str	r3, [r7, #48]	; 0x30
 801375e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013760:	3b02      	subs	r3, #2
 8013762:	637b      	str	r3, [r7, #52]	; 0x34
 8013764:	e010      	b.n	8013788 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8013766:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013768:	f7fd f9a8 	bl	8010abc <ld_dword>
 801376c:	4603      	mov	r3, r0
 801376e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8013772:	2b00      	cmp	r3, #0
 8013774:	d102      	bne.n	801377c <f_getfree+0x128>
 8013776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013778:	3301      	adds	r3, #1
 801377a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 801377c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801377e:	3304      	adds	r3, #4
 8013780:	633b      	str	r3, [r7, #48]	; 0x30
 8013782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013784:	3b04      	subs	r3, #4
 8013786:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8013788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801378a:	3b01      	subs	r3, #1
 801378c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801378e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013790:	2b00      	cmp	r3, #0
 8013792:	d1bd      	bne.n	8013710 <f_getfree+0xbc>
 8013794:	e000      	b.n	8013798 <f_getfree+0x144>
							if (res != FR_OK) break;
 8013796:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8013798:	68bb      	ldr	r3, [r7, #8]
 801379a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801379c:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 801379e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80137a2:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80137a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137a6:	791a      	ldrb	r2, [r3, #4]
 80137a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137aa:	f042 0201 	orr.w	r2, r2, #1
 80137ae:	b2d2      	uxtb	r2, r2
 80137b0:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80137b2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80137b6:	4618      	mov	r0, r3
 80137b8:	3748      	adds	r7, #72	; 0x48
 80137ba:	46bd      	mov	sp, r7
 80137bc:	bd80      	pop	{r7, pc}
	...

080137c0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80137c0:	b480      	push	{r7}
 80137c2:	b087      	sub	sp, #28
 80137c4:	af00      	add	r7, sp, #0
 80137c6:	60f8      	str	r0, [r7, #12]
 80137c8:	60b9      	str	r1, [r7, #8]
 80137ca:	4613      	mov	r3, r2
 80137cc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80137ce:	2301      	movs	r3, #1
 80137d0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80137d2:	2300      	movs	r3, #0
 80137d4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80137d6:	4b1f      	ldr	r3, [pc, #124]	; (8013854 <FATFS_LinkDriverEx+0x94>)
 80137d8:	7a5b      	ldrb	r3, [r3, #9]
 80137da:	b2db      	uxtb	r3, r3
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d131      	bne.n	8013844 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80137e0:	4b1c      	ldr	r3, [pc, #112]	; (8013854 <FATFS_LinkDriverEx+0x94>)
 80137e2:	7a5b      	ldrb	r3, [r3, #9]
 80137e4:	b2db      	uxtb	r3, r3
 80137e6:	461a      	mov	r2, r3
 80137e8:	4b1a      	ldr	r3, [pc, #104]	; (8013854 <FATFS_LinkDriverEx+0x94>)
 80137ea:	2100      	movs	r1, #0
 80137ec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80137ee:	4b19      	ldr	r3, [pc, #100]	; (8013854 <FATFS_LinkDriverEx+0x94>)
 80137f0:	7a5b      	ldrb	r3, [r3, #9]
 80137f2:	b2db      	uxtb	r3, r3
 80137f4:	4a17      	ldr	r2, [pc, #92]	; (8013854 <FATFS_LinkDriverEx+0x94>)
 80137f6:	009b      	lsls	r3, r3, #2
 80137f8:	4413      	add	r3, r2
 80137fa:	68fa      	ldr	r2, [r7, #12]
 80137fc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80137fe:	4b15      	ldr	r3, [pc, #84]	; (8013854 <FATFS_LinkDriverEx+0x94>)
 8013800:	7a5b      	ldrb	r3, [r3, #9]
 8013802:	b2db      	uxtb	r3, r3
 8013804:	461a      	mov	r2, r3
 8013806:	4b13      	ldr	r3, [pc, #76]	; (8013854 <FATFS_LinkDriverEx+0x94>)
 8013808:	4413      	add	r3, r2
 801380a:	79fa      	ldrb	r2, [r7, #7]
 801380c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801380e:	4b11      	ldr	r3, [pc, #68]	; (8013854 <FATFS_LinkDriverEx+0x94>)
 8013810:	7a5b      	ldrb	r3, [r3, #9]
 8013812:	b2db      	uxtb	r3, r3
 8013814:	1c5a      	adds	r2, r3, #1
 8013816:	b2d1      	uxtb	r1, r2
 8013818:	4a0e      	ldr	r2, [pc, #56]	; (8013854 <FATFS_LinkDriverEx+0x94>)
 801381a:	7251      	strb	r1, [r2, #9]
 801381c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801381e:	7dbb      	ldrb	r3, [r7, #22]
 8013820:	3330      	adds	r3, #48	; 0x30
 8013822:	b2da      	uxtb	r2, r3
 8013824:	68bb      	ldr	r3, [r7, #8]
 8013826:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013828:	68bb      	ldr	r3, [r7, #8]
 801382a:	3301      	adds	r3, #1
 801382c:	223a      	movs	r2, #58	; 0x3a
 801382e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013830:	68bb      	ldr	r3, [r7, #8]
 8013832:	3302      	adds	r3, #2
 8013834:	222f      	movs	r2, #47	; 0x2f
 8013836:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013838:	68bb      	ldr	r3, [r7, #8]
 801383a:	3303      	adds	r3, #3
 801383c:	2200      	movs	r2, #0
 801383e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013840:	2300      	movs	r3, #0
 8013842:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013844:	7dfb      	ldrb	r3, [r7, #23]
}
 8013846:	4618      	mov	r0, r3
 8013848:	371c      	adds	r7, #28
 801384a:	46bd      	mov	sp, r7
 801384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013850:	4770      	bx	lr
 8013852:	bf00      	nop
 8013854:	2400a618 	.word	0x2400a618

08013858 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013858:	b580      	push	{r7, lr}
 801385a:	b082      	sub	sp, #8
 801385c:	af00      	add	r7, sp, #0
 801385e:	6078      	str	r0, [r7, #4]
 8013860:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8013862:	2200      	movs	r2, #0
 8013864:	6839      	ldr	r1, [r7, #0]
 8013866:	6878      	ldr	r0, [r7, #4]
 8013868:	f7ff ffaa 	bl	80137c0 <FATFS_LinkDriverEx>
 801386c:	4603      	mov	r3, r0
}
 801386e:	4618      	mov	r0, r3
 8013870:	3708      	adds	r7, #8
 8013872:	46bd      	mov	sp, r7
 8013874:	bd80      	pop	{r7, pc}

08013876 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 8013876:	b480      	push	{r7}
 8013878:	b083      	sub	sp, #12
 801387a:	af00      	add	r7, sp, #0
 801387c:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	687a      	ldr	r2, [r7, #4]
 8013882:	605a      	str	r2, [r3, #4]
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	685a      	ldr	r2, [r3, #4]
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	601a      	str	r2, [r3, #0]
}
 801388c:	bf00      	nop
 801388e:	370c      	adds	r7, #12
 8013890:	46bd      	mov	sp, r7
 8013892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013896:	4770      	bx	lr

08013898 <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 8013898:	b480      	push	{r7}
 801389a:	b083      	sub	sp, #12
 801389c:	af00      	add	r7, sp, #0
 801389e:	6078      	str	r0, [r7, #4]
 80138a0:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	685a      	ldr	r2, [r3, #4]
 80138a6:	683b      	ldr	r3, [r7, #0]
 80138a8:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 80138aa:	683b      	ldr	r3, [r7, #0]
 80138ac:	687a      	ldr	r2, [r7, #4]
 80138ae:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 80138b0:	683b      	ldr	r3, [r7, #0]
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	683a      	ldr	r2, [r7, #0]
 80138b6:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 80138b8:	683b      	ldr	r3, [r7, #0]
 80138ba:	685b      	ldr	r3, [r3, #4]
 80138bc:	683a      	ldr	r2, [r7, #0]
 80138be:	601a      	str	r2, [r3, #0]
}
 80138c0:	bf00      	nop
 80138c2:	370c      	adds	r7, #12
 80138c4:	46bd      	mov	sp, r7
 80138c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ca:	4770      	bx	lr

080138cc <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 80138cc:	b580      	push	{r7, lr}
 80138ce:	b082      	sub	sp, #8
 80138d0:	af00      	add	r7, sp, #0
 80138d2:	6078      	str	r0, [r7, #4]
 80138d4:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 80138d6:	6839      	ldr	r1, [r7, #0]
 80138d8:	6878      	ldr	r0, [r7, #4]
 80138da:	f7ff ffdd 	bl	8013898 <metal_list_add_before>
}
 80138de:	bf00      	nop
 80138e0:	3708      	adds	r7, #8
 80138e2:	46bd      	mov	sp, r7
 80138e4:	bd80      	pop	{r7, pc}

080138e6 <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 80138e6:	b580      	push	{r7, lr}
 80138e8:	b082      	sub	sp, #8
 80138ea:	af00      	add	r7, sp, #0
 80138ec:	6078      	str	r0, [r7, #4]
 80138ee:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
 80138f0:	6839      	ldr	r1, [r7, #0]
 80138f2:	6878      	ldr	r0, [r7, #4]
 80138f4:	f001 ff8a 	bl	801580c <metal_machine_cache_flush>
}
 80138f8:	bf00      	nop
 80138fa:	3708      	adds	r7, #8
 80138fc:	46bd      	mov	sp, r7
 80138fe:	bd80      	pop	{r7, pc}

08013900 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 8013900:	b580      	push	{r7, lr}
 8013902:	b082      	sub	sp, #8
 8013904:	af00      	add	r7, sp, #0
 8013906:	6078      	str	r0, [r7, #4]
 8013908:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 801390a:	6839      	ldr	r1, [r7, #0]
 801390c:	6878      	ldr	r0, [r7, #4]
 801390e:	f001 ff88 	bl	8015822 <metal_machine_cache_invalidate>
}
 8013912:	bf00      	nop
 8013914:	3708      	adds	r7, #8
 8013916:	46bd      	mov	sp, r7
 8013918:	bd80      	pop	{r7, pc}

0801391a <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 801391a:	b580      	push	{r7, lr}
 801391c:	b082      	sub	sp, #8
 801391e:	af00      	add	r7, sp, #0
 8013920:	6078      	str	r0, [r7, #4]
 8013922:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
 8013924:	6839      	ldr	r1, [r7, #0]
 8013926:	6878      	ldr	r0, [r7, #4]
 8013928:	f7ff ffdd 	bl	80138e6 <__metal_cache_flush>
}
 801392c:	bf00      	nop
 801392e:	3708      	adds	r7, #8
 8013930:	46bd      	mov	sp, r7
 8013932:	bd80      	pop	{r7, pc}

08013934 <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 8013934:	b580      	push	{r7, lr}
 8013936:	b082      	sub	sp, #8
 8013938:	af00      	add	r7, sp, #0
 801393a:	6078      	str	r0, [r7, #4]
 801393c:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 801393e:	6839      	ldr	r1, [r7, #0]
 8013940:	6878      	ldr	r0, [r7, #4]
 8013942:	f7ff ffdd 	bl	8013900 <__metal_cache_invalidate>
}
 8013946:	bf00      	nop
 8013948:	3708      	adds	r7, #8
 801394a:	46bd      	mov	sp, r7
 801394c:	bd80      	pop	{r7, pc}
	...

08013950 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 8013950:	b580      	push	{r7, lr}
 8013952:	b082      	sub	sp, #8
 8013954:	af00      	add	r7, sp, #0
 8013956:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	2b00      	cmp	r3, #0
 801395c:	d008      	beq.n	8013970 <metal_bus_register+0x20>
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	2b00      	cmp	r3, #0
 8013964:	d004      	beq.n	8013970 <metal_bus_register+0x20>
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	781b      	ldrb	r3, [r3, #0]
 801396c:	2b00      	cmp	r3, #0
 801396e:	d102      	bne.n	8013976 <metal_bus_register+0x26>
		return -EINVAL;
 8013970:	f06f 0315 	mvn.w	r3, #21
 8013974:	e026      	b.n	80139c4 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	2100      	movs	r1, #0
 801397c:	4618      	mov	r0, r3
 801397e:	f000 f82b 	bl	80139d8 <metal_bus_find>
 8013982:	4603      	mov	r3, r0
 8013984:	2b00      	cmp	r3, #0
 8013986:	d102      	bne.n	801398e <metal_bus_register+0x3e>
		return -EEXIST;
 8013988:	f06f 0310 	mvn.w	r3, #16
 801398c:	e01a      	b.n	80139c4 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	331c      	adds	r3, #28
 8013992:	4618      	mov	r0, r3
 8013994:	f7ff ff6f 	bl	8013876 <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	3324      	adds	r3, #36	; 0x24
 801399c:	4619      	mov	r1, r3
 801399e:	480b      	ldr	r0, [pc, #44]	; (80139cc <metal_bus_register+0x7c>)
 80139a0:	f7ff ff94 	bl	80138cc <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 80139a4:	4b0a      	ldr	r3, [pc, #40]	; (80139d0 <metal_bus_register+0x80>)
 80139a6:	781b      	ldrb	r3, [r3, #0]
 80139a8:	2b06      	cmp	r3, #6
 80139aa:	d90a      	bls.n	80139c2 <metal_bus_register+0x72>
 80139ac:	4b08      	ldr	r3, [pc, #32]	; (80139d0 <metal_bus_register+0x80>)
 80139ae:	685b      	ldr	r3, [r3, #4]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d006      	beq.n	80139c2 <metal_bus_register+0x72>
 80139b4:	4b06      	ldr	r3, [pc, #24]	; (80139d0 <metal_bus_register+0x80>)
 80139b6:	685b      	ldr	r3, [r3, #4]
 80139b8:	687a      	ldr	r2, [r7, #4]
 80139ba:	6812      	ldr	r2, [r2, #0]
 80139bc:	4905      	ldr	r1, [pc, #20]	; (80139d4 <metal_bus_register+0x84>)
 80139be:	2007      	movs	r0, #7
 80139c0:	4798      	blx	r3
	return 0;
 80139c2:	2300      	movs	r3, #0
}
 80139c4:	4618      	mov	r0, r3
 80139c6:	3708      	adds	r7, #8
 80139c8:	46bd      	mov	sp, r7
 80139ca:	bd80      	pop	{r7, pc}
 80139cc:	2400b4e0 	.word	0x2400b4e0
 80139d0:	2400b4d8 	.word	0x2400b4d8
 80139d4:	0801f738 	.word	0x0801f738

080139d8 <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
 80139d8:	b580      	push	{r7, lr}
 80139da:	b084      	sub	sp, #16
 80139dc:	af00      	add	r7, sp, #0
 80139de:	6078      	str	r0, [r7, #4]
 80139e0:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 80139e2:	4b13      	ldr	r3, [pc, #76]	; (8013a30 <metal_bus_find+0x58>)
 80139e4:	689b      	ldr	r3, [r3, #8]
 80139e6:	60fb      	str	r3, [r7, #12]
 80139e8:	e017      	b.n	8013a1a <metal_bus_find+0x42>
		bus = metal_container_of(node, struct metal_bus, node);
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	3b24      	subs	r3, #36	; 0x24
 80139ee:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) != 0)
 80139f0:	68bb      	ldr	r3, [r7, #8]
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	6879      	ldr	r1, [r7, #4]
 80139f6:	4618      	mov	r0, r3
 80139f8:	f7ec fc72 	bl	80002e0 <strcmp>
 80139fc:	4603      	mov	r3, r0
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d003      	beq.n	8013a0a <metal_bus_find+0x32>
	metal_list_for_each(&_metal.common.bus_list, node) {
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	60fb      	str	r3, [r7, #12]
 8013a08:	e007      	b.n	8013a1a <metal_bus_find+0x42>
			continue;
		if (result)
 8013a0a:	683b      	ldr	r3, [r7, #0]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d002      	beq.n	8013a16 <metal_bus_find+0x3e>
			*result = bus;
 8013a10:	683b      	ldr	r3, [r7, #0]
 8013a12:	68ba      	ldr	r2, [r7, #8]
 8013a14:	601a      	str	r2, [r3, #0]
		return 0;
 8013a16:	2300      	movs	r3, #0
 8013a18:	e005      	b.n	8013a26 <metal_bus_find+0x4e>
	metal_list_for_each(&_metal.common.bus_list, node) {
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	4a05      	ldr	r2, [pc, #20]	; (8013a34 <metal_bus_find+0x5c>)
 8013a1e:	4293      	cmp	r3, r2
 8013a20:	d1e3      	bne.n	80139ea <metal_bus_find+0x12>
	}
	return -ENOENT;
 8013a22:	f06f 0301 	mvn.w	r3, #1
}
 8013a26:	4618      	mov	r0, r3
 8013a28:	3710      	adds	r7, #16
 8013a2a:	46bd      	mov	sp, r7
 8013a2c:	bd80      	pop	{r7, pc}
 8013a2e:	bf00      	nop
 8013a30:	2400b4d8 	.word	0x2400b4d8
 8013a34:	2400b4e0 	.word	0x2400b4e0

08013a38 <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 8013a38:	b580      	push	{r7, lr}
 8013a3a:	b086      	sub	sp, #24
 8013a3c:	af00      	add	r7, sp, #0
 8013a3e:	60f8      	str	r0, [r7, #12]
 8013a40:	60b9      	str	r1, [r7, #8]
 8013a42:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d00d      	beq.n	8013a66 <metal_device_open+0x2e>
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	781b      	ldrb	r3, [r3, #0]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d009      	beq.n	8013a66 <metal_device_open+0x2e>
 8013a52:	68bb      	ldr	r3, [r7, #8]
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d006      	beq.n	8013a66 <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
 8013a58:	68bb      	ldr	r3, [r7, #8]
 8013a5a:	781b      	ldrb	r3, [r3, #0]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d002      	beq.n	8013a66 <metal_device_open+0x2e>
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d102      	bne.n	8013a6c <metal_device_open+0x34>
	    !device)
		return -EINVAL;
 8013a66:	f06f 0315 	mvn.w	r3, #21
 8013a6a:	e01f      	b.n	8013aac <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
 8013a6c:	f107 0310 	add.w	r3, r7, #16
 8013a70:	4619      	mov	r1, r3
 8013a72:	68f8      	ldr	r0, [r7, #12]
 8013a74:	f7ff ffb0 	bl	80139d8 <metal_bus_find>
 8013a78:	6178      	str	r0, [r7, #20]
	if (error)
 8013a7a:	697b      	ldr	r3, [r7, #20]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d001      	beq.n	8013a84 <metal_device_open+0x4c>
		return error;
 8013a80:	697b      	ldr	r3, [r7, #20]
 8013a82:	e013      	b.n	8013aac <metal_device_open+0x74>

	if (!bus->ops.dev_open)
 8013a84:	693b      	ldr	r3, [r7, #16]
 8013a86:	689b      	ldr	r3, [r3, #8]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d102      	bne.n	8013a92 <metal_device_open+0x5a>
		return -ENODEV;
 8013a8c:	f06f 0312 	mvn.w	r3, #18
 8013a90:	e00c      	b.n	8013aac <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 8013a92:	693b      	ldr	r3, [r7, #16]
 8013a94:	689b      	ldr	r3, [r3, #8]
 8013a96:	6938      	ldr	r0, [r7, #16]
 8013a98:	687a      	ldr	r2, [r7, #4]
 8013a9a:	68b9      	ldr	r1, [r7, #8]
 8013a9c:	4798      	blx	r3
 8013a9e:	6178      	str	r0, [r7, #20]
	if (error)
 8013aa0:	697b      	ldr	r3, [r7, #20]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d001      	beq.n	8013aaa <metal_device_open+0x72>
		return error;
 8013aa6:	697b      	ldr	r3, [r7, #20]
 8013aa8:	e000      	b.n	8013aac <metal_device_open+0x74>

	return 0;
 8013aaa:	2300      	movs	r3, #0
}
 8013aac:	4618      	mov	r0, r3
 8013aae:	3718      	adds	r7, #24
 8013ab0:	46bd      	mov	sp, r7
 8013ab2:	bd80      	pop	{r7, pc}

08013ab4 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
 8013ab4:	b580      	push	{r7, lr}
 8013ab6:	b082      	sub	sp, #8
 8013ab8:	af00      	add	r7, sp, #0
 8013aba:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d008      	beq.n	8013ad6 <metal_register_generic_device+0x22>
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	781b      	ldrb	r3, [r3, #0]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d003      	beq.n	8013ad6 <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
 8013ad2:	2b02      	cmp	r3, #2
 8013ad4:	d902      	bls.n	8013adc <metal_register_generic_device+0x28>
		return -EINVAL;
 8013ad6:	f06f 0315 	mvn.w	r3, #21
 8013ada:	e009      	b.n	8013af0 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	4a06      	ldr	r2, [pc, #24]	; (8013af8 <metal_register_generic_device+0x44>)
 8013ae0:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	336c      	adds	r3, #108	; 0x6c
 8013ae6:	4619      	mov	r1, r3
 8013ae8:	4804      	ldr	r0, [pc, #16]	; (8013afc <metal_register_generic_device+0x48>)
 8013aea:	f7ff feef 	bl	80138cc <metal_list_add_tail>
			    &device->node);
	return 0;
 8013aee:	2300      	movs	r3, #0
}
 8013af0:	4618      	mov	r0, r3
 8013af2:	3708      	adds	r7, #8
 8013af4:	46bd      	mov	sp, r7
 8013af6:	bd80      	pop	{r7, pc}
 8013af8:	24000060 	.word	0x24000060
 8013afc:	2400b4f0 	.word	0x2400b4f0

08013b00 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 8013b00:	b580      	push	{r7, lr}
 8013b02:	b086      	sub	sp, #24
 8013b04:	af00      	add	r7, sp, #0
 8013b06:	60f8      	str	r0, [r7, #12]
 8013b08:	60b9      	str	r1, [r7, #8]
 8013b0a:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8013b0c:	4b12      	ldr	r3, [pc, #72]	; (8013b58 <metal_generic_dev_open+0x58>)
 8013b0e:	699b      	ldr	r3, [r3, #24]
 8013b10:	617b      	str	r3, [r7, #20]
 8013b12:	e017      	b.n	8013b44 <metal_generic_dev_open+0x44>
		dev = metal_container_of(node, struct metal_device, node);
 8013b14:	697b      	ldr	r3, [r7, #20]
 8013b16:	3b6c      	subs	r3, #108	; 0x6c
 8013b18:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) != 0)
 8013b1a:	693b      	ldr	r3, [r7, #16]
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	68b9      	ldr	r1, [r7, #8]
 8013b20:	4618      	mov	r0, r3
 8013b22:	f7ec fbdd 	bl	80002e0 <strcmp>
 8013b26:	4603      	mov	r3, r0
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d003      	beq.n	8013b34 <metal_generic_dev_open+0x34>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8013b2c:	697b      	ldr	r3, [r7, #20]
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	617b      	str	r3, [r7, #20]
 8013b32:	e007      	b.n	8013b44 <metal_generic_dev_open+0x44>
			continue;
		*device = dev;
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	693a      	ldr	r2, [r7, #16]
 8013b38:	601a      	str	r2, [r3, #0]
		return metal_generic_dev_sys_open(dev);
 8013b3a:	6938      	ldr	r0, [r7, #16]
 8013b3c:	f000 f88c 	bl	8013c58 <metal_generic_dev_sys_open>
 8013b40:	4603      	mov	r3, r0
 8013b42:	e005      	b.n	8013b50 <metal_generic_dev_open+0x50>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8013b44:	697b      	ldr	r3, [r7, #20]
 8013b46:	4a05      	ldr	r2, [pc, #20]	; (8013b5c <metal_generic_dev_open+0x5c>)
 8013b48:	4293      	cmp	r3, r2
 8013b4a:	d1e3      	bne.n	8013b14 <metal_generic_dev_open+0x14>
	}

	return -ENODEV;
 8013b4c:	f06f 0312 	mvn.w	r3, #18
}
 8013b50:	4618      	mov	r0, r3
 8013b52:	3718      	adds	r7, #24
 8013b54:	46bd      	mov	sp, r7
 8013b56:	bd80      	pop	{r7, pc}
 8013b58:	2400b4d8 	.word	0x2400b4d8
 8013b5c:	2400b4f0 	.word	0x2400b4f0

08013b60 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 8013b60:	b580      	push	{r7, lr}
 8013b62:	b086      	sub	sp, #24
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	60f8      	str	r0, [r7, #12]
 8013b68:	60b9      	str	r1, [r7, #8]
 8013b6a:	607a      	str	r2, [r7, #4]
 8013b6c:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	int i;

	if (sg_out != sg_in)
 8013b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b70:	683b      	ldr	r3, [r7, #0]
 8013b72:	429a      	cmp	r2, r3
 8013b74:	d009      	beq.n	8013b8a <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 8013b76:	6a3a      	ldr	r2, [r7, #32]
 8013b78:	4613      	mov	r3, r2
 8013b7a:	005b      	lsls	r3, r3, #1
 8013b7c:	4413      	add	r3, r2
 8013b7e:	009b      	lsls	r3, r3, #2
 8013b80:	461a      	mov	r2, r3
 8013b82:	6839      	ldr	r1, [r7, #0]
 8013b84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013b86:	f006 fe1b 	bl	801a7c0 <memcpy>
	for (i = 0; i < nents_in; i++) {
 8013b8a:	2300      	movs	r3, #0
 8013b8c:	617b      	str	r3, [r7, #20]
 8013b8e:	e02f      	b.n	8013bf0 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	2b02      	cmp	r3, #2
 8013b94:	d114      	bne.n	8013bc0 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 8013b96:	697a      	ldr	r2, [r7, #20]
 8013b98:	4613      	mov	r3, r2
 8013b9a:	005b      	lsls	r3, r3, #1
 8013b9c:	4413      	add	r3, r2
 8013b9e:	009b      	lsls	r3, r3, #2
 8013ba0:	461a      	mov	r2, r3
 8013ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ba4:	4413      	add	r3, r2
 8013ba6:	6818      	ldr	r0, [r3, #0]
 8013ba8:	697a      	ldr	r2, [r7, #20]
 8013baa:	4613      	mov	r3, r2
 8013bac:	005b      	lsls	r3, r3, #1
 8013bae:	4413      	add	r3, r2
 8013bb0:	009b      	lsls	r3, r3, #2
 8013bb2:	461a      	mov	r2, r3
 8013bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bb6:	4413      	add	r3, r2
 8013bb8:	689b      	ldr	r3, [r3, #8]
 8013bba:	4619      	mov	r1, r3
 8013bbc:	f7ff fead 	bl	801391a <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 8013bc0:	697a      	ldr	r2, [r7, #20]
 8013bc2:	4613      	mov	r3, r2
 8013bc4:	005b      	lsls	r3, r3, #1
 8013bc6:	4413      	add	r3, r2
 8013bc8:	009b      	lsls	r3, r3, #2
 8013bca:	461a      	mov	r2, r3
 8013bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bce:	4413      	add	r3, r2
 8013bd0:	6818      	ldr	r0, [r3, #0]
 8013bd2:	697a      	ldr	r2, [r7, #20]
 8013bd4:	4613      	mov	r3, r2
 8013bd6:	005b      	lsls	r3, r3, #1
 8013bd8:	4413      	add	r3, r2
 8013bda:	009b      	lsls	r3, r3, #2
 8013bdc:	461a      	mov	r2, r3
 8013bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013be0:	4413      	add	r3, r2
 8013be2:	689b      	ldr	r3, [r3, #8]
 8013be4:	4619      	mov	r1, r3
 8013be6:	f7ff fea5 	bl	8013934 <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
 8013bea:	697b      	ldr	r3, [r7, #20]
 8013bec:	3301      	adds	r3, #1
 8013bee:	617b      	str	r3, [r7, #20]
 8013bf0:	697a      	ldr	r2, [r7, #20]
 8013bf2:	6a3b      	ldr	r3, [r7, #32]
 8013bf4:	429a      	cmp	r2, r3
 8013bf6:	dbcb      	blt.n	8013b90 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
 8013bf8:	6a3b      	ldr	r3, [r7, #32]
}
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	3718      	adds	r7, #24
 8013bfe:	46bd      	mov	sp, r7
 8013c00:	bd80      	pop	{r7, pc}

08013c02 <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 8013c02:	b580      	push	{r7, lr}
 8013c04:	b086      	sub	sp, #24
 8013c06:	af00      	add	r7, sp, #0
 8013c08:	60f8      	str	r0, [r7, #12]
 8013c0a:	60b9      	str	r1, [r7, #8]
 8013c0c:	607a      	str	r2, [r7, #4]
 8013c0e:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	(void)dir;
	int i;

	for (i = 0; i < nents; i++) {
 8013c10:	2300      	movs	r3, #0
 8013c12:	617b      	str	r3, [r7, #20]
 8013c14:	e017      	b.n	8013c46 <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 8013c16:	697a      	ldr	r2, [r7, #20]
 8013c18:	4613      	mov	r3, r2
 8013c1a:	005b      	lsls	r3, r3, #1
 8013c1c:	4413      	add	r3, r2
 8013c1e:	009b      	lsls	r3, r3, #2
 8013c20:	461a      	mov	r2, r3
 8013c22:	683b      	ldr	r3, [r7, #0]
 8013c24:	4413      	add	r3, r2
 8013c26:	6818      	ldr	r0, [r3, #0]
 8013c28:	697a      	ldr	r2, [r7, #20]
 8013c2a:	4613      	mov	r3, r2
 8013c2c:	005b      	lsls	r3, r3, #1
 8013c2e:	4413      	add	r3, r2
 8013c30:	009b      	lsls	r3, r3, #2
 8013c32:	461a      	mov	r2, r3
 8013c34:	683b      	ldr	r3, [r7, #0]
 8013c36:	4413      	add	r3, r2
 8013c38:	689b      	ldr	r3, [r3, #8]
 8013c3a:	4619      	mov	r1, r3
 8013c3c:	f7ff fe7a 	bl	8013934 <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
 8013c40:	697b      	ldr	r3, [r7, #20]
 8013c42:	3301      	adds	r3, #1
 8013c44:	617b      	str	r3, [r7, #20]
 8013c46:	697a      	ldr	r2, [r7, #20]
 8013c48:	6a3b      	ldr	r3, [r7, #32]
 8013c4a:	429a      	cmp	r2, r3
 8013c4c:	dbe3      	blt.n	8013c16 <metal_generic_dev_dma_unmap+0x14>
	}
}
 8013c4e:	bf00      	nop
 8013c50:	bf00      	nop
 8013c52:	3718      	adds	r7, #24
 8013c54:	46bd      	mov	sp, r7
 8013c56:	bd80      	pop	{r7, pc}

08013c58 <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 8013c58:	b580      	push	{r7, lr}
 8013c5a:	b084      	sub	sp, #16
 8013c5c:	af00      	add	r7, sp, #0
 8013c5e:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 8013c60:	2300      	movs	r3, #0
 8013c62:	60fb      	str	r3, [r7, #12]
 8013c64:	e013      	b.n	8013c8e <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
 8013c66:	68fa      	ldr	r2, [r7, #12]
 8013c68:	4613      	mov	r3, r2
 8013c6a:	005b      	lsls	r3, r3, #1
 8013c6c:	4413      	add	r3, r2
 8013c6e:	011b      	lsls	r3, r3, #4
 8013c70:	3308      	adds	r3, #8
 8013c72:	687a      	ldr	r2, [r7, #4]
 8013c74:	4413      	add	r3, r2
 8013c76:	3304      	adds	r3, #4
 8013c78:	60bb      	str	r3, [r7, #8]
		if (!io->size)
 8013c7a:	68bb      	ldr	r3, [r7, #8]
 8013c7c:	689b      	ldr	r3, [r3, #8]
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d00b      	beq.n	8013c9a <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
 8013c82:	68b8      	ldr	r0, [r7, #8]
 8013c84:	f000 f81e 	bl	8013cc4 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	3301      	adds	r3, #1
 8013c8c:	60fb      	str	r3, [r7, #12]
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	689b      	ldr	r3, [r3, #8]
 8013c92:	68fa      	ldr	r2, [r7, #12]
 8013c94:	429a      	cmp	r2, r3
 8013c96:	d3e6      	bcc.n	8013c66 <metal_generic_dev_sys_open+0xe>
 8013c98:	e000      	b.n	8013c9c <metal_generic_dev_sys_open+0x44>
			break;
 8013c9a:	bf00      	nop
	}

	return 0;
 8013c9c:	2300      	movs	r3, #0
}
 8013c9e:	4618      	mov	r0, r3
 8013ca0:	3710      	adds	r7, #16
 8013ca2:	46bd      	mov	sp, r7
 8013ca4:	bd80      	pop	{r7, pc}
	...

08013ca8 <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 8013ca8:	b580      	push	{r7, lr}
 8013caa:	b082      	sub	sp, #8
 8013cac:	af00      	add	r7, sp, #0
 8013cae:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 8013cb0:	4803      	ldr	r0, [pc, #12]	; (8013cc0 <metal_sys_init+0x18>)
 8013cb2:	f7ff fe4d 	bl	8013950 <metal_bus_register>
	return 0;
 8013cb6:	2300      	movs	r3, #0
}
 8013cb8:	4618      	mov	r0, r3
 8013cba:	3708      	adds	r7, #8
 8013cbc:	46bd      	mov	sp, r7
 8013cbe:	bd80      	pop	{r7, pc}
 8013cc0:	24000060 	.word	0x24000060

08013cc4 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b086      	sub	sp, #24
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = (size_t *)io->virt;
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	60fb      	str	r3, [r7, #12]
	psize = io->size;
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	689b      	ldr	r3, [r3, #8]
 8013cd6:	613b      	str	r3, [r7, #16]
	if (psize) {
 8013cd8:	693b      	ldr	r3, [r7, #16]
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d02c      	beq.n	8013d38 <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	68db      	ldr	r3, [r3, #12]
 8013ce2:	693a      	ldr	r2, [r7, #16]
 8013ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d005      	beq.n	8013cf8 <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	68db      	ldr	r3, [r3, #12]
 8013cf0:	2201      	movs	r2, #1
 8013cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8013cf6:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8013cf8:	2300      	movs	r3, #0
 8013cfa:	617b      	str	r3, [r7, #20]
 8013cfc:	e013      	b.n	8013d26 <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	685a      	ldr	r2, [r3, #4]
 8013d02:	697b      	ldr	r3, [r7, #20]
 8013d04:	009b      	lsls	r3, r3, #2
 8013d06:	4413      	add	r3, r2
 8013d08:	6819      	ldr	r1, [r3, #0]
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	695b      	ldr	r3, [r3, #20]
 8013d0e:	693a      	ldr	r2, [r7, #16]
 8013d10:	68f8      	ldr	r0, [r7, #12]
 8013d12:	f001 fd91 	bl	8015838 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 8013d16:	693b      	ldr	r3, [r7, #16]
 8013d18:	009b      	lsls	r3, r3, #2
 8013d1a:	68fa      	ldr	r2, [r7, #12]
 8013d1c:	4413      	add	r3, r2
 8013d1e:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8013d20:	697b      	ldr	r3, [r7, #20]
 8013d22:	3301      	adds	r3, #1
 8013d24:	617b      	str	r3, [r7, #20]
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	689a      	ldr	r2, [r3, #8]
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	68db      	ldr	r3, [r3, #12]
 8013d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8013d32:	697a      	ldr	r2, [r7, #20]
 8013d34:	429a      	cmp	r2, r3
 8013d36:	d9e2      	bls.n	8013cfe <metal_sys_io_mem_map+0x3a>
		}
	}
}
 8013d38:	bf00      	nop
 8013d3a:	3718      	adds	r7, #24
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	bd80      	pop	{r7, pc}

08013d40 <metal_list_init>:
{
 8013d40:	b480      	push	{r7}
 8013d42:	b083      	sub	sp, #12
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	687a      	ldr	r2, [r7, #4]
 8013d4c:	605a      	str	r2, [r3, #4]
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	685a      	ldr	r2, [r3, #4]
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	601a      	str	r2, [r3, #0]
}
 8013d56:	bf00      	nop
 8013d58:	370c      	adds	r7, #12
 8013d5a:	46bd      	mov	sp, r7
 8013d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d60:	4770      	bx	lr
	...

08013d64 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 8013d64:	b580      	push	{r7, lr}
 8013d66:	b084      	sub	sp, #16
 8013d68:	af00      	add	r7, sp, #0
 8013d6a:	6078      	str	r0, [r7, #4]
	int error = 0;
 8013d6c:	2300      	movs	r3, #0
 8013d6e:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
 8013d70:	2220      	movs	r2, #32
 8013d72:	2100      	movs	r1, #0
 8013d74:	4810      	ldr	r0, [pc, #64]	; (8013db8 <metal_init+0x54>)
 8013d76:	f006 fd4b 	bl	801a810 <memset>

	_metal.common.log_handler   = params->log_handler;
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	681b      	ldr	r3, [r3, #0]
 8013d7e:	4a0e      	ldr	r2, [pc, #56]	; (8013db8 <metal_init+0x54>)
 8013d80:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	791a      	ldrb	r2, [r3, #4]
 8013d86:	4b0c      	ldr	r3, [pc, #48]	; (8013db8 <metal_init+0x54>)
 8013d88:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
 8013d8a:	480c      	ldr	r0, [pc, #48]	; (8013dbc <metal_init+0x58>)
 8013d8c:	f7ff ffd8 	bl	8013d40 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 8013d90:	480b      	ldr	r0, [pc, #44]	; (8013dc0 <metal_init+0x5c>)
 8013d92:	f7ff ffd5 	bl	8013d40 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 8013d96:	480b      	ldr	r0, [pc, #44]	; (8013dc4 <metal_init+0x60>)
 8013d98:	f7ff ffd2 	bl	8013d40 <metal_list_init>

	error = metal_sys_init(params);
 8013d9c:	6878      	ldr	r0, [r7, #4]
 8013d9e:	f7ff ff83 	bl	8013ca8 <metal_sys_init>
 8013da2:	60f8      	str	r0, [r7, #12]
	if (error)
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d001      	beq.n	8013dae <metal_init+0x4a>
		return error;
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	e000      	b.n	8013db0 <metal_init+0x4c>

	return error;
 8013dae:	68fb      	ldr	r3, [r7, #12]
}
 8013db0:	4618      	mov	r0, r3
 8013db2:	3710      	adds	r7, #16
 8013db4:	46bd      	mov	sp, r7
 8013db6:	bd80      	pop	{r7, pc}
 8013db8:	2400b4d8 	.word	0x2400b4d8
 8013dbc:	2400b4e0 	.word	0x2400b4e0
 8013dc0:	2400b4e8 	.word	0x2400b4e8
 8013dc4:	2400b4f0 	.word	0x2400b4f0

08013dc8 <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 8013dc8:	b480      	push	{r7}
 8013dca:	b083      	sub	sp, #12
 8013dcc:	af00      	add	r7, sp, #0
 8013dce:	6078      	str	r0, [r7, #4]
 8013dd0:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	681b      	ldr	r3, [r3, #0]
		? (uint8_t *)io->virt + offset
		: NULL);
 8013dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013dda:	d009      	beq.n	8013df0 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	689b      	ldr	r3, [r3, #8]
 8013de0:	683a      	ldr	r2, [r7, #0]
 8013de2:	429a      	cmp	r2, r3
 8013de4:	d804      	bhi.n	8013df0 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8013dea:	683b      	ldr	r3, [r7, #0]
 8013dec:	4413      	add	r3, r2
 8013dee:	e000      	b.n	8013df2 <metal_io_virt+0x2a>
 8013df0:	2300      	movs	r3, #0
}
 8013df2:	4618      	mov	r0, r3
 8013df4:	370c      	adds	r7, #12
 8013df6:	46bd      	mov	sp, r7
 8013df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dfc:	4770      	bx	lr

08013dfe <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 8013dfe:	b5b0      	push	{r4, r5, r7, lr}
 8013e00:	b08a      	sub	sp, #40	; 0x28
 8013e02:	af00      	add	r7, sp, #0
 8013e04:	60f8      	str	r0, [r7, #12]
 8013e06:	60b9      	str	r1, [r7, #8]
 8013e08:	607a      	str	r2, [r7, #4]
 8013e0a:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {NULL, NULL, NULL, NULL, NULL, NULL};
 8013e0c:	f107 0310 	add.w	r3, r7, #16
 8013e10:	2200      	movs	r2, #0
 8013e12:	601a      	str	r2, [r3, #0]
 8013e14:	605a      	str	r2, [r3, #4]
 8013e16:	609a      	str	r2, [r3, #8]
 8013e18:	60da      	str	r2, [r3, #12]
 8013e1a:	611a      	str	r2, [r3, #16]
 8013e1c:	615a      	str	r2, [r3, #20]

	io->virt = virt;
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	68ba      	ldr	r2, [r7, #8]
 8013e22:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	687a      	ldr	r2, [r7, #4]
 8013e28:	605a      	str	r2, [r3, #4]
	io->size = size;
 8013e2a:	68fb      	ldr	r3, [r7, #12]
 8013e2c:	683a      	ldr	r2, [r7, #0]
 8013e2e:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013e34:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 8013e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e38:	2b1f      	cmp	r3, #31
 8013e3a:	d904      	bls.n	8013e46 <metal_io_init+0x48>
		/* avoid overflow */
		io->page_mask = -1UL;
 8013e3c:	68fb      	ldr	r3, [r7, #12]
 8013e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8013e42:	611a      	str	r2, [r3, #16]
 8013e44:	e006      	b.n	8013e54 <metal_io_init+0x56>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 8013e46:	2201      	movs	r2, #1
 8013e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8013e4e:	1e5a      	subs	r2, r3, #1
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013e58:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
 8013e5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d00b      	beq.n	8013e78 <metal_io_init+0x7a>
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013e64:	f103 0418 	add.w	r4, r3, #24
 8013e68:	4615      	mov	r5, r2
 8013e6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013e6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013e6e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013e72:	e884 0003 	stmia.w	r4, {r0, r1}
 8013e76:	e00a      	b.n	8013e8e <metal_io_init+0x90>
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	f103 0418 	add.w	r4, r3, #24
 8013e7e:	f107 0510 	add.w	r5, r7, #16
 8013e82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013e84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013e86:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013e8a:	e884 0003 	stmia.w	r4, {r0, r1}
	metal_sys_io_mem_map(io);
 8013e8e:	68f8      	ldr	r0, [r7, #12]
 8013e90:	f7ff ff18 	bl	8013cc4 <metal_sys_io_mem_map>
}
 8013e94:	bf00      	nop
 8013e96:	3728      	adds	r7, #40	; 0x28
 8013e98:	46bd      	mov	sp, r7
 8013e9a:	bdb0      	pop	{r4, r5, r7, pc}

08013e9c <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 8013e9c:	b590      	push	{r4, r7, lr}
 8013e9e:	b08b      	sub	sp, #44	; 0x2c
 8013ea0:	af02      	add	r7, sp, #8
 8013ea2:	60f8      	str	r0, [r7, #12]
 8013ea4:	60b9      	str	r1, [r7, #8]
 8013ea6:	607a      	str	r2, [r7, #4]
 8013ea8:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8013eaa:	68b9      	ldr	r1, [r7, #8]
 8013eac:	68f8      	ldr	r0, [r7, #12]
 8013eae:	f7ff ff8b 	bl	8013dc8 <metal_io_virt>
 8013eb2:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	689b      	ldr	r3, [r3, #8]
 8013ebc:	68ba      	ldr	r2, [r7, #8]
 8013ebe:	429a      	cmp	r2, r3
 8013ec0:	d902      	bls.n	8013ec8 <metal_io_block_read+0x2c>
		return -ERANGE;
 8013ec2:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8013ec6:	e05c      	b.n	8013f82 <metal_io_block_read+0xe6>
	if ((offset + len) > io->size)
 8013ec8:	683a      	ldr	r2, [r7, #0]
 8013eca:	68bb      	ldr	r3, [r7, #8]
 8013ecc:	441a      	add	r2, r3
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	689b      	ldr	r3, [r3, #8]
 8013ed2:	429a      	cmp	r2, r3
 8013ed4:	d904      	bls.n	8013ee0 <metal_io_block_read+0x44>
		len = io->size - offset;
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	689a      	ldr	r2, [r3, #8]
 8013eda:	68bb      	ldr	r3, [r7, #8]
 8013edc:	1ad3      	subs	r3, r2, r3
 8013ede:	603b      	str	r3, [r7, #0]
	retlen = len;
 8013ee0:	683b      	ldr	r3, [r7, #0]
 8013ee2:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	6a1b      	ldr	r3, [r3, #32]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d00a      	beq.n	8013f02 <metal_io_block_read+0x66>
		retlen = (*io->ops.block_read)(
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	6a1c      	ldr	r4, [r3, #32]
 8013ef0:	683b      	ldr	r3, [r7, #0]
 8013ef2:	9300      	str	r3, [sp, #0]
 8013ef4:	2305      	movs	r3, #5
 8013ef6:	687a      	ldr	r2, [r7, #4]
 8013ef8:	68b9      	ldr	r1, [r7, #8]
 8013efa:	68f8      	ldr	r0, [r7, #12]
 8013efc:	47a0      	blx	r4
 8013efe:	6178      	str	r0, [r7, #20]
 8013f00:	e03e      	b.n	8013f80 <metal_io_block_read+0xe4>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 8013f02:	f3bf 8f5b 	dmb	ish
		while ( len && (
 8013f06:	e00c      	b.n	8013f22 <metal_io_block_read+0x86>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8013f08:	69fb      	ldr	r3, [r7, #28]
 8013f0a:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8013f0c:	69bb      	ldr	r3, [r7, #24]
 8013f0e:	701a      	strb	r2, [r3, #0]
			dest++;
 8013f10:	69bb      	ldr	r3, [r7, #24]
 8013f12:	3301      	adds	r3, #1
 8013f14:	61bb      	str	r3, [r7, #24]
			ptr++;
 8013f16:	69fb      	ldr	r3, [r7, #28]
 8013f18:	3301      	adds	r3, #1
 8013f1a:	61fb      	str	r3, [r7, #28]
			len--;
 8013f1c:	683b      	ldr	r3, [r7, #0]
 8013f1e:	3b01      	subs	r3, #1
 8013f20:	603b      	str	r3, [r7, #0]
		while ( len && (
 8013f22:	683b      	ldr	r3, [r7, #0]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d017      	beq.n	8013f58 <metal_io_block_read+0xbc>
			((uintptr_t)dest % sizeof(int)) ||
 8013f28:	69bb      	ldr	r3, [r7, #24]
 8013f2a:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d1ea      	bne.n	8013f08 <metal_io_block_read+0x6c>
			((uintptr_t)ptr % sizeof(int)))) {
 8013f32:	69fb      	ldr	r3, [r7, #28]
 8013f34:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d1e5      	bne.n	8013f08 <metal_io_block_read+0x6c>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8013f3c:	e00c      	b.n	8013f58 <metal_io_block_read+0xbc>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 8013f3e:	69fb      	ldr	r3, [r7, #28]
 8013f40:	681a      	ldr	r2, [r3, #0]
 8013f42:	69bb      	ldr	r3, [r7, #24]
 8013f44:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8013f46:	69bb      	ldr	r3, [r7, #24]
 8013f48:	3304      	adds	r3, #4
 8013f4a:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
 8013f4c:	69fb      	ldr	r3, [r7, #28]
 8013f4e:	3304      	adds	r3, #4
 8013f50:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
 8013f52:	683b      	ldr	r3, [r7, #0]
 8013f54:	3b04      	subs	r3, #4
 8013f56:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8013f58:	683b      	ldr	r3, [r7, #0]
 8013f5a:	2b03      	cmp	r3, #3
 8013f5c:	dcef      	bgt.n	8013f3e <metal_io_block_read+0xa2>
		for (; len != 0; dest++, ptr++, len--)
 8013f5e:	e00c      	b.n	8013f7a <metal_io_block_read+0xde>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8013f60:	69fb      	ldr	r3, [r7, #28]
 8013f62:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8013f64:	69bb      	ldr	r3, [r7, #24]
 8013f66:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
 8013f68:	69bb      	ldr	r3, [r7, #24]
 8013f6a:	3301      	adds	r3, #1
 8013f6c:	61bb      	str	r3, [r7, #24]
 8013f6e:	69fb      	ldr	r3, [r7, #28]
 8013f70:	3301      	adds	r3, #1
 8013f72:	61fb      	str	r3, [r7, #28]
 8013f74:	683b      	ldr	r3, [r7, #0]
 8013f76:	3b01      	subs	r3, #1
 8013f78:	603b      	str	r3, [r7, #0]
 8013f7a:	683b      	ldr	r3, [r7, #0]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d1ef      	bne.n	8013f60 <metal_io_block_read+0xc4>
	}
	return retlen;
 8013f80:	697b      	ldr	r3, [r7, #20]
}
 8013f82:	4618      	mov	r0, r3
 8013f84:	3724      	adds	r7, #36	; 0x24
 8013f86:	46bd      	mov	sp, r7
 8013f88:	bd90      	pop	{r4, r7, pc}

08013f8a <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 8013f8a:	b590      	push	{r4, r7, lr}
 8013f8c:	b08b      	sub	sp, #44	; 0x2c
 8013f8e:	af02      	add	r7, sp, #8
 8013f90:	60f8      	str	r0, [r7, #12]
 8013f92:	60b9      	str	r1, [r7, #8]
 8013f94:	607a      	str	r2, [r7, #4]
 8013f96:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 8013f98:	68b9      	ldr	r1, [r7, #8]
 8013f9a:	68f8      	ldr	r0, [r7, #12]
 8013f9c:	f7ff ff14 	bl	8013dc8 <metal_io_virt>
 8013fa0:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	689b      	ldr	r3, [r3, #8]
 8013faa:	68ba      	ldr	r2, [r7, #8]
 8013fac:	429a      	cmp	r2, r3
 8013fae:	d902      	bls.n	8013fb6 <metal_io_block_write+0x2c>
		return -ERANGE;
 8013fb0:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8013fb4:	e05b      	b.n	801406e <metal_io_block_write+0xe4>
	if ((offset + len) > io->size)
 8013fb6:	683a      	ldr	r2, [r7, #0]
 8013fb8:	68bb      	ldr	r3, [r7, #8]
 8013fba:	441a      	add	r2, r3
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	689b      	ldr	r3, [r3, #8]
 8013fc0:	429a      	cmp	r2, r3
 8013fc2:	d904      	bls.n	8013fce <metal_io_block_write+0x44>
		len = io->size - offset;
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	689a      	ldr	r2, [r3, #8]
 8013fc8:	68bb      	ldr	r3, [r7, #8]
 8013fca:	1ad3      	subs	r3, r2, r3
 8013fcc:	603b      	str	r3, [r7, #0]
	retlen = len;
 8013fce:	683b      	ldr	r3, [r7, #0]
 8013fd0:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d017      	beq.n	801400a <metal_io_block_write+0x80>
		retlen = (*io->ops.block_write)(
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8013fde:	683b      	ldr	r3, [r7, #0]
 8013fe0:	9300      	str	r3, [sp, #0]
 8013fe2:	2305      	movs	r3, #5
 8013fe4:	687a      	ldr	r2, [r7, #4]
 8013fe6:	68b9      	ldr	r1, [r7, #8]
 8013fe8:	68f8      	ldr	r0, [r7, #12]
 8013fea:	47a0      	blx	r4
 8013fec:	6178      	str	r0, [r7, #20]
 8013fee:	e03d      	b.n	801406c <metal_io_block_write+0xe2>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8013ff0:	69bb      	ldr	r3, [r7, #24]
 8013ff2:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8013ff4:	69fb      	ldr	r3, [r7, #28]
 8013ff6:	701a      	strb	r2, [r3, #0]
			ptr++;
 8013ff8:	69fb      	ldr	r3, [r7, #28]
 8013ffa:	3301      	adds	r3, #1
 8013ffc:	61fb      	str	r3, [r7, #28]
			source++;
 8013ffe:	69bb      	ldr	r3, [r7, #24]
 8014000:	3301      	adds	r3, #1
 8014002:	61bb      	str	r3, [r7, #24]
			len--;
 8014004:	683b      	ldr	r3, [r7, #0]
 8014006:	3b01      	subs	r3, #1
 8014008:	603b      	str	r3, [r7, #0]
		while ( len && (
 801400a:	683b      	ldr	r3, [r7, #0]
 801400c:	2b00      	cmp	r3, #0
 801400e:	d017      	beq.n	8014040 <metal_io_block_write+0xb6>
			((uintptr_t)ptr % sizeof(int)) ||
 8014010:	69fb      	ldr	r3, [r7, #28]
 8014012:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8014016:	2b00      	cmp	r3, #0
 8014018:	d1ea      	bne.n	8013ff0 <metal_io_block_write+0x66>
			((uintptr_t)source % sizeof(int)))) {
 801401a:	69bb      	ldr	r3, [r7, #24]
 801401c:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
 8014020:	2b00      	cmp	r3, #0
 8014022:	d1e5      	bne.n	8013ff0 <metal_io_block_write+0x66>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8014024:	e00c      	b.n	8014040 <metal_io_block_write+0xb6>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 8014026:	69bb      	ldr	r3, [r7, #24]
 8014028:	681a      	ldr	r2, [r3, #0]
 801402a:	69fb      	ldr	r3, [r7, #28]
 801402c:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 801402e:	69fb      	ldr	r3, [r7, #28]
 8014030:	3304      	adds	r3, #4
 8014032:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
 8014034:	69bb      	ldr	r3, [r7, #24]
 8014036:	3304      	adds	r3, #4
 8014038:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
 801403a:	683b      	ldr	r3, [r7, #0]
 801403c:	3b04      	subs	r3, #4
 801403e:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8014040:	683b      	ldr	r3, [r7, #0]
 8014042:	2b03      	cmp	r3, #3
 8014044:	dcef      	bgt.n	8014026 <metal_io_block_write+0x9c>
		for (; len != 0; ptr++, source++, len--)
 8014046:	e00c      	b.n	8014062 <metal_io_block_write+0xd8>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8014048:	69bb      	ldr	r3, [r7, #24]
 801404a:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 801404c:	69fb      	ldr	r3, [r7, #28]
 801404e:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
 8014050:	69fb      	ldr	r3, [r7, #28]
 8014052:	3301      	adds	r3, #1
 8014054:	61fb      	str	r3, [r7, #28]
 8014056:	69bb      	ldr	r3, [r7, #24]
 8014058:	3301      	adds	r3, #1
 801405a:	61bb      	str	r3, [r7, #24]
 801405c:	683b      	ldr	r3, [r7, #0]
 801405e:	3b01      	subs	r3, #1
 8014060:	603b      	str	r3, [r7, #0]
 8014062:	683b      	ldr	r3, [r7, #0]
 8014064:	2b00      	cmp	r3, #0
 8014066:	d1ef      	bne.n	8014048 <metal_io_block_write+0xbe>
		atomic_thread_fence(memory_order_seq_cst);
 8014068:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 801406c:	697b      	ldr	r3, [r7, #20]
}
 801406e:	4618      	mov	r0, r3
 8014070:	3724      	adds	r7, #36	; 0x24
 8014072:	46bd      	mov	sp, r7
 8014074:	bd90      	pop	{r4, r7, pc}

08014076 <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
 8014076:	b590      	push	{r4, r7, lr}
 8014078:	b08b      	sub	sp, #44	; 0x2c
 801407a:	af02      	add	r7, sp, #8
 801407c:	60f8      	str	r0, [r7, #12]
 801407e:	60b9      	str	r1, [r7, #8]
 8014080:	603b      	str	r3, [r7, #0]
 8014082:	4613      	mov	r3, r2
 8014084:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = metal_io_virt(io, offset);
 8014086:	68b9      	ldr	r1, [r7, #8]
 8014088:	68f8      	ldr	r0, [r7, #12]
 801408a:	f7ff fe9d 	bl	8013dc8 <metal_io_virt>
 801408e:	61f8      	str	r0, [r7, #28]
	int retlen = len;
 8014090:	683b      	ldr	r3, [r7, #0]
 8014092:	613b      	str	r3, [r7, #16]

	if (offset > io->size)
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	689b      	ldr	r3, [r3, #8]
 8014098:	68ba      	ldr	r2, [r7, #8]
 801409a:	429a      	cmp	r2, r3
 801409c:	d902      	bls.n	80140a4 <metal_io_block_set+0x2e>
		return -ERANGE;
 801409e:	f06f 0321 	mvn.w	r3, #33	; 0x21
 80140a2:	e05d      	b.n	8014160 <metal_io_block_set+0xea>
	if ((offset + len) > io->size)
 80140a4:	683a      	ldr	r2, [r7, #0]
 80140a6:	68bb      	ldr	r3, [r7, #8]
 80140a8:	441a      	add	r2, r3
 80140aa:	68fb      	ldr	r3, [r7, #12]
 80140ac:	689b      	ldr	r3, [r3, #8]
 80140ae:	429a      	cmp	r2, r3
 80140b0:	d904      	bls.n	80140bc <metal_io_block_set+0x46>
		len = io->size - offset;
 80140b2:	68fb      	ldr	r3, [r7, #12]
 80140b4:	689a      	ldr	r2, [r3, #8]
 80140b6:	68bb      	ldr	r3, [r7, #8]
 80140b8:	1ad3      	subs	r3, r2, r3
 80140ba:	603b      	str	r3, [r7, #0]
	retlen = len;
 80140bc:	683b      	ldr	r3, [r7, #0]
 80140be:	613b      	str	r3, [r7, #16]
	if (io->ops.block_set) {
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d009      	beq.n	80140dc <metal_io_block_set+0x66>
		(*io->ops.block_set)(
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80140cc:	79fa      	ldrb	r2, [r7, #7]
 80140ce:	683b      	ldr	r3, [r7, #0]
 80140d0:	9300      	str	r3, [sp, #0]
 80140d2:	2305      	movs	r3, #5
 80140d4:	68b9      	ldr	r1, [r7, #8]
 80140d6:	68f8      	ldr	r0, [r7, #12]
 80140d8:	47a0      	blx	r4
 80140da:	e040      	b.n	801415e <metal_io_block_set+0xe8>
			io, offset, value, memory_order_seq_cst, len);
	} else {
		unsigned int cint = value;
 80140dc:	79fb      	ldrb	r3, [r7, #7]
 80140de:	61bb      	str	r3, [r7, #24]
		unsigned int i;

		for (i = 1; i < sizeof(int); i++)
 80140e0:	2301      	movs	r3, #1
 80140e2:	617b      	str	r3, [r7, #20]
 80140e4:	e00a      	b.n	80140fc <metal_io_block_set+0x86>
			cint |= ((unsigned int)value << (8 * i));
 80140e6:	79fa      	ldrb	r2, [r7, #7]
 80140e8:	697b      	ldr	r3, [r7, #20]
 80140ea:	00db      	lsls	r3, r3, #3
 80140ec:	fa02 f303 	lsl.w	r3, r2, r3
 80140f0:	69ba      	ldr	r2, [r7, #24]
 80140f2:	4313      	orrs	r3, r2
 80140f4:	61bb      	str	r3, [r7, #24]
		for (i = 1; i < sizeof(int); i++)
 80140f6:	697b      	ldr	r3, [r7, #20]
 80140f8:	3301      	adds	r3, #1
 80140fa:	617b      	str	r3, [r7, #20]
 80140fc:	697b      	ldr	r3, [r7, #20]
 80140fe:	2b03      	cmp	r3, #3
 8014100:	d9f1      	bls.n	80140e6 <metal_io_block_set+0x70>

		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 8014102:	e008      	b.n	8014116 <metal_io_block_set+0xa0>
			*(unsigned char *)ptr = (unsigned char) value;
 8014104:	69fb      	ldr	r3, [r7, #28]
 8014106:	79fa      	ldrb	r2, [r7, #7]
 8014108:	701a      	strb	r2, [r3, #0]
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 801410a:	69fb      	ldr	r3, [r7, #28]
 801410c:	3301      	adds	r3, #1
 801410e:	61fb      	str	r3, [r7, #28]
 8014110:	683b      	ldr	r3, [r7, #0]
 8014112:	3b01      	subs	r3, #1
 8014114:	603b      	str	r3, [r7, #0]
 8014116:	683b      	ldr	r3, [r7, #0]
 8014118:	2b00      	cmp	r3, #0
 801411a:	d00e      	beq.n	801413a <metal_io_block_set+0xc4>
 801411c:	69fb      	ldr	r3, [r7, #28]
 801411e:	f003 0303 	and.w	r3, r3, #3
 8014122:	2b00      	cmp	r3, #0
 8014124:	d1ee      	bne.n	8014104 <metal_io_block_set+0x8e>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8014126:	e008      	b.n	801413a <metal_io_block_set+0xc4>
						len -= sizeof(int))
			*(unsigned int *)ptr = cint;
 8014128:	69fb      	ldr	r3, [r7, #28]
 801412a:	69ba      	ldr	r2, [r7, #24]
 801412c:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 801412e:	69fb      	ldr	r3, [r7, #28]
 8014130:	3304      	adds	r3, #4
 8014132:	61fb      	str	r3, [r7, #28]
						len -= sizeof(int))
 8014134:	683b      	ldr	r3, [r7, #0]
 8014136:	3b04      	subs	r3, #4
 8014138:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 801413a:	683b      	ldr	r3, [r7, #0]
 801413c:	2b03      	cmp	r3, #3
 801413e:	dcf3      	bgt.n	8014128 <metal_io_block_set+0xb2>
		for (; len != 0; ptr++, len--)
 8014140:	e008      	b.n	8014154 <metal_io_block_set+0xde>
			*(unsigned char *)ptr = (unsigned char) value;
 8014142:	69fb      	ldr	r3, [r7, #28]
 8014144:	79fa      	ldrb	r2, [r7, #7]
 8014146:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, len--)
 8014148:	69fb      	ldr	r3, [r7, #28]
 801414a:	3301      	adds	r3, #1
 801414c:	61fb      	str	r3, [r7, #28]
 801414e:	683b      	ldr	r3, [r7, #0]
 8014150:	3b01      	subs	r3, #1
 8014152:	603b      	str	r3, [r7, #0]
 8014154:	683b      	ldr	r3, [r7, #0]
 8014156:	2b00      	cmp	r3, #0
 8014158:	d1f3      	bne.n	8014142 <metal_io_block_set+0xcc>
		atomic_thread_fence(memory_order_seq_cst);
 801415a:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 801415e:	693b      	ldr	r3, [r7, #16]
}
 8014160:	4618      	mov	r0, r3
 8014162:	3724      	adds	r7, #36	; 0x24
 8014164:	46bd      	mov	sp, r7
 8014166:	bd90      	pop	{r4, r7, pc}

08014168 <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 8014168:	b40e      	push	{r1, r2, r3}
 801416a:	b480      	push	{r7}
 801416c:	b082      	sub	sp, #8
 801416e:	af00      	add	r7, sp, #0
 8014170:	4603      	mov	r3, r0
 8014172:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 8014174:	bf00      	nop
 8014176:	3708      	adds	r7, #8
 8014178:	46bd      	mov	sp, r7
 801417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801417e:	b003      	add	sp, #12
 8014180:	4770      	bx	lr

08014182 <metal_io_virt>:
{
 8014182:	b480      	push	{r7}
 8014184:	b083      	sub	sp, #12
 8014186:	af00      	add	r7, sp, #0
 8014188:	6078      	str	r0, [r7, #4]
 801418a:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	681b      	ldr	r3, [r3, #0]
		: NULL);
 8014190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014194:	d009      	beq.n	80141aa <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	689b      	ldr	r3, [r3, #8]
 801419a:	683a      	ldr	r2, [r7, #0]
 801419c:	429a      	cmp	r2, r3
 801419e:	d804      	bhi.n	80141aa <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	681a      	ldr	r2, [r3, #0]
		: NULL);
 80141a4:	683b      	ldr	r3, [r7, #0]
 80141a6:	4413      	add	r3, r2
 80141a8:	e000      	b.n	80141ac <metal_io_virt+0x2a>
 80141aa:	2300      	movs	r3, #0
}
 80141ac:	4618      	mov	r0, r3
 80141ae:	370c      	adds	r7, #12
 80141b0:	46bd      	mov	sp, r7
 80141b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141b6:	4770      	bx	lr

080141b8 <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 80141b8:	b480      	push	{r7}
 80141ba:	b085      	sub	sp, #20
 80141bc:	af00      	add	r7, sp, #0
 80141be:	6078      	str	r0, [r7, #4]
 80141c0:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	683a      	ldr	r2, [r7, #0]
 80141c8:	1ad3      	subs	r3, r2, r3
 80141ca:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	689b      	ldr	r3, [r3, #8]
 80141d0:	68fa      	ldr	r2, [r7, #12]
 80141d2:	429a      	cmp	r2, r3
 80141d4:	d201      	bcs.n	80141da <metal_io_virt_to_offset+0x22>
 80141d6:	68fb      	ldr	r3, [r7, #12]
 80141d8:	e001      	b.n	80141de <metal_io_virt_to_offset+0x26>
 80141da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80141de:	4618      	mov	r0, r3
 80141e0:	3714      	adds	r7, #20
 80141e2:	46bd      	mov	sp, r7
 80141e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e8:	4770      	bx	lr
	...

080141ec <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 80141ec:	b590      	push	{r4, r7, lr}
 80141ee:	b08d      	sub	sp, #52	; 0x34
 80141f0:	af00      	add	r7, sp, #0
 80141f2:	60f8      	str	r0, [r7, #12]
 80141f4:	60b9      	str	r1, [r7, #8]
 80141f6:	603b      	str	r3, [r7, #0]
 80141f8:	4613      	mov	r3, r2
 80141fa:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
 80141fc:	68b9      	ldr	r1, [r7, #8]
 80141fe:	68f8      	ldr	r0, [r7, #12]
 8014200:	f7ff ffbf 	bl	8014182 <metal_io_virt>
 8014204:	62f8      	str	r0, [r7, #44]	; 0x2c

	if (io->ops.read)
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	699b      	ldr	r3, [r3, #24]
 801420a:	2b00      	cmp	r3, #0
 801420c:	d009      	beq.n	8014222 <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	699c      	ldr	r4, [r3, #24]
 8014212:	79fa      	ldrb	r2, [r7, #7]
 8014214:	683b      	ldr	r3, [r7, #0]
 8014216:	68b9      	ldr	r1, [r7, #8]
 8014218:	68f8      	ldr	r0, [r7, #12]
 801421a:	47a0      	blx	r4
 801421c:	4602      	mov	r2, r0
 801421e:	460b      	mov	r3, r1
 8014220:	e057      	b.n	80142d2 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uchar) == width)
 8014222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014224:	2b00      	cmp	r3, #0
 8014226:	d011      	beq.n	801424c <metal_io_read+0x60>
 8014228:	683b      	ldr	r3, [r7, #0]
 801422a:	2b01      	cmp	r3, #1
 801422c:	d10e      	bne.n	801424c <metal_io_read+0x60>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 801422e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014230:	62bb      	str	r3, [r7, #40]	; 0x28
 8014232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014234:	f3bf 8f5b 	dmb	ish
 8014238:	781b      	ldrb	r3, [r3, #0]
 801423a:	f3bf 8f5b 	dmb	ish
 801423e:	b2db      	uxtb	r3, r3
 8014240:	76fb      	strb	r3, [r7, #27]
 8014242:	7efb      	ldrb	r3, [r7, #27]
 8014244:	b2da      	uxtb	r2, r3
 8014246:	f04f 0300 	mov.w	r3, #0
 801424a:	e042      	b.n	80142d2 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ushort) == width)
 801424c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801424e:	2b00      	cmp	r3, #0
 8014250:	d011      	beq.n	8014276 <metal_io_read+0x8a>
 8014252:	683b      	ldr	r3, [r7, #0]
 8014254:	2b02      	cmp	r3, #2
 8014256:	d10e      	bne.n	8014276 <metal_io_read+0x8a>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 8014258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801425a:	627b      	str	r3, [r7, #36]	; 0x24
 801425c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801425e:	f3bf 8f5b 	dmb	ish
 8014262:	881b      	ldrh	r3, [r3, #0]
 8014264:	f3bf 8f5b 	dmb	ish
 8014268:	b29b      	uxth	r3, r3
 801426a:	833b      	strh	r3, [r7, #24]
 801426c:	8b3b      	ldrh	r3, [r7, #24]
 801426e:	b29a      	uxth	r2, r3
 8014270:	f04f 0300 	mov.w	r3, #0
 8014274:	e02d      	b.n	80142d2 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_uint) == width)
 8014276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014278:	2b00      	cmp	r3, #0
 801427a:	d010      	beq.n	801429e <metal_io_read+0xb2>
 801427c:	683b      	ldr	r3, [r7, #0]
 801427e:	2b04      	cmp	r3, #4
 8014280:	d10d      	bne.n	801429e <metal_io_read+0xb2>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 8014282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014284:	623b      	str	r3, [r7, #32]
 8014286:	6a3b      	ldr	r3, [r7, #32]
 8014288:	f3bf 8f5b 	dmb	ish
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	f3bf 8f5b 	dmb	ish
 8014292:	617b      	str	r3, [r7, #20]
 8014294:	697b      	ldr	r3, [r7, #20]
 8014296:	461a      	mov	r2, r3
 8014298:	f04f 0300 	mov.w	r3, #0
 801429c:	e019      	b.n	80142d2 <metal_io_read+0xe6>
	else if (ptr && sizeof(atomic_ulong) == width)
 801429e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d010      	beq.n	80142c6 <metal_io_read+0xda>
 80142a4:	683b      	ldr	r3, [r7, #0]
 80142a6:	2b04      	cmp	r3, #4
 80142a8:	d10d      	bne.n	80142c6 <metal_io_read+0xda>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 80142aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142ac:	61fb      	str	r3, [r7, #28]
 80142ae:	69fb      	ldr	r3, [r7, #28]
 80142b0:	f3bf 8f5b 	dmb	ish
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	f3bf 8f5b 	dmb	ish
 80142ba:	613b      	str	r3, [r7, #16]
 80142bc:	693b      	ldr	r3, [r7, #16]
 80142be:	461a      	mov	r2, r3
 80142c0:	f04f 0300 	mov.w	r3, #0
 80142c4:	e005      	b.n	80142d2 <metal_io_read+0xe6>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
 80142c6:	4b05      	ldr	r3, [pc, #20]	; (80142dc <metal_io_read+0xf0>)
 80142c8:	4a05      	ldr	r2, [pc, #20]	; (80142e0 <metal_io_read+0xf4>)
 80142ca:	21f0      	movs	r1, #240	; 0xf0
 80142cc:	4805      	ldr	r0, [pc, #20]	; (80142e4 <metal_io_read+0xf8>)
 80142ce:	f006 fa09 	bl	801a6e4 <__assert_func>
	return 0; /* quiet compiler */
}
 80142d2:	4610      	mov	r0, r2
 80142d4:	4619      	mov	r1, r3
 80142d6:	3734      	adds	r7, #52	; 0x34
 80142d8:	46bd      	mov	sp, r7
 80142da:	bd90      	pop	{r4, r7, pc}
 80142dc:	0801f7f4 	.word	0x0801f7f4
 80142e0:	080285d8 	.word	0x080285d8
 80142e4:	0801f7f8 	.word	0x0801f7f8

080142e8 <metal_io_write>:
 *			to inline cleanly.
 */
static inline void
metal_io_write(struct metal_io_region *io, unsigned long offset,
	       uint64_t value, memory_order order, int width)
{
 80142e8:	b590      	push	{r4, r7, lr}
 80142ea:	b08f      	sub	sp, #60	; 0x3c
 80142ec:	af02      	add	r7, sp, #8
 80142ee:	60f8      	str	r0, [r7, #12]
 80142f0:	60b9      	str	r1, [r7, #8]
 80142f2:	e9c7 2300 	strd	r2, r3, [r7]
	void *ptr = metal_io_virt(io, offset);
 80142f6:	68b9      	ldr	r1, [r7, #8]
 80142f8:	68f8      	ldr	r0, [r7, #12]
 80142fa:	f7ff ff42 	bl	8014182 <metal_io_virt>
 80142fe:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (io->ops.write)
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	69db      	ldr	r3, [r3, #28]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d00c      	beq.n	8014322 <metal_io_write+0x3a>
		(*io->ops.write)(io, offset, value, order, width);
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	69dc      	ldr	r4, [r3, #28]
 801430c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801430e:	9301      	str	r3, [sp, #4]
 8014310:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8014314:	9300      	str	r3, [sp, #0]
 8014316:	e9d7 2300 	ldrd	r2, r3, [r7]
 801431a:	68b9      	ldr	r1, [r7, #8]
 801431c:	68f8      	ldr	r0, [r7, #12]
 801431e:	47a0      	blx	r4
	else if (ptr && sizeof(atomic_ullong) == width)
		atomic_store_explicit((atomic_ullong *)ptr, value, order);
#endif
	else
		metal_assert (0);
}
 8014320:	e04e      	b.n	80143c0 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uchar) == width)
 8014322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014324:	2b00      	cmp	r3, #0
 8014326:	d00e      	beq.n	8014346 <metal_io_write+0x5e>
 8014328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801432a:	2b01      	cmp	r3, #1
 801432c:	d10b      	bne.n	8014346 <metal_io_write+0x5e>
		atomic_store_explicit((atomic_uchar *)ptr, value, order);
 801432e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014330:	62bb      	str	r3, [r7, #40]	; 0x28
 8014332:	783b      	ldrb	r3, [r7, #0]
 8014334:	76fb      	strb	r3, [r7, #27]
 8014336:	7efa      	ldrb	r2, [r7, #27]
 8014338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801433a:	f3bf 8f5b 	dmb	ish
 801433e:	701a      	strb	r2, [r3, #0]
 8014340:	f3bf 8f5b 	dmb	ish
 8014344:	e03c      	b.n	80143c0 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ushort) == width)
 8014346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014348:	2b00      	cmp	r3, #0
 801434a:	d00e      	beq.n	801436a <metal_io_write+0x82>
 801434c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801434e:	2b02      	cmp	r3, #2
 8014350:	d10b      	bne.n	801436a <metal_io_write+0x82>
		atomic_store_explicit((atomic_ushort *)ptr, value, order);
 8014352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014354:	627b      	str	r3, [r7, #36]	; 0x24
 8014356:	883b      	ldrh	r3, [r7, #0]
 8014358:	833b      	strh	r3, [r7, #24]
 801435a:	8b3a      	ldrh	r2, [r7, #24]
 801435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801435e:	f3bf 8f5b 	dmb	ish
 8014362:	801a      	strh	r2, [r3, #0]
 8014364:	f3bf 8f5b 	dmb	ish
 8014368:	e02a      	b.n	80143c0 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uint) == width)
 801436a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801436c:	2b00      	cmp	r3, #0
 801436e:	d00e      	beq.n	801438e <metal_io_write+0xa6>
 8014370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014372:	2b04      	cmp	r3, #4
 8014374:	d10b      	bne.n	801438e <metal_io_write+0xa6>
		atomic_store_explicit((atomic_uint *)ptr, value, order);
 8014376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014378:	623b      	str	r3, [r7, #32]
 801437a:	683b      	ldr	r3, [r7, #0]
 801437c:	617b      	str	r3, [r7, #20]
 801437e:	697a      	ldr	r2, [r7, #20]
 8014380:	6a3b      	ldr	r3, [r7, #32]
 8014382:	f3bf 8f5b 	dmb	ish
 8014386:	601a      	str	r2, [r3, #0]
 8014388:	f3bf 8f5b 	dmb	ish
 801438c:	e018      	b.n	80143c0 <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ulong) == width)
 801438e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014390:	2b00      	cmp	r3, #0
 8014392:	d00e      	beq.n	80143b2 <metal_io_write+0xca>
 8014394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014396:	2b04      	cmp	r3, #4
 8014398:	d10b      	bne.n	80143b2 <metal_io_write+0xca>
		atomic_store_explicit((atomic_ulong *)ptr, value, order);
 801439a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801439c:	61fb      	str	r3, [r7, #28]
 801439e:	683b      	ldr	r3, [r7, #0]
 80143a0:	613b      	str	r3, [r7, #16]
 80143a2:	693a      	ldr	r2, [r7, #16]
 80143a4:	69fb      	ldr	r3, [r7, #28]
 80143a6:	f3bf 8f5b 	dmb	ish
 80143aa:	601a      	str	r2, [r3, #0]
 80143ac:	f3bf 8f5b 	dmb	ish
 80143b0:	e006      	b.n	80143c0 <metal_io_write+0xd8>
		metal_assert (0);
 80143b2:	4b05      	ldr	r3, [pc, #20]	; (80143c8 <metal_io_write+0xe0>)
 80143b4:	4a05      	ldr	r2, [pc, #20]	; (80143cc <metal_io_write+0xe4>)
 80143b6:	f44f 7189 	mov.w	r1, #274	; 0x112
 80143ba:	4805      	ldr	r0, [pc, #20]	; (80143d0 <metal_io_write+0xe8>)
 80143bc:	f006 f992 	bl	801a6e4 <__assert_func>
}
 80143c0:	bf00      	nop
 80143c2:	3734      	adds	r7, #52	; 0x34
 80143c4:	46bd      	mov	sp, r7
 80143c6:	bd90      	pop	{r4, r7, pc}
 80143c8:	0801f7f4 	.word	0x0801f7f4
 80143cc:	080285e8 	.word	0x080285e8
 80143d0:	0801f7f8 	.word	0x0801f7f8

080143d4 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 80143d4:	b580      	push	{r7, lr}
 80143d6:	b082      	sub	sp, #8
 80143d8:	af00      	add	r7, sp, #0
 80143da:	6078      	str	r0, [r7, #4]
	return (malloc(size));
 80143dc:	6878      	ldr	r0, [r7, #4]
 80143de:	f006 f9df 	bl	801a7a0 <malloc>
 80143e2:	4603      	mov	r3, r0
}
 80143e4:	4618      	mov	r0, r3
 80143e6:	3708      	adds	r7, #8
 80143e8:	46bd      	mov	sp, r7
 80143ea:	bd80      	pop	{r7, pc}

080143ec <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 80143ec:	b580      	push	{r7, lr}
 80143ee:	b082      	sub	sp, #8
 80143f0:	af00      	add	r7, sp, #0
 80143f2:	6078      	str	r0, [r7, #4]
	free(ptr);
 80143f4:	6878      	ldr	r0, [r7, #4]
 80143f6:	f006 f9db 	bl	801a7b0 <free>
}
 80143fa:	bf00      	nop
 80143fc:	3708      	adds	r7, #8
 80143fe:	46bd      	mov	sp, r7
 8014400:	bd80      	pop	{r7, pc}

08014402 <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 8014402:	b580      	push	{r7, lr}
 8014404:	b084      	sub	sp, #16
 8014406:	af00      	add	r7, sp, #0
 8014408:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	3307      	adds	r3, #7
 801440e:	00db      	lsls	r3, r3, #3
 8014410:	60fb      	str	r3, [r7, #12]
		 num_desc_extra * sizeof(struct vq_desc_extra);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
 8014412:	68f8      	ldr	r0, [r7, #12]
 8014414:	f7ff ffde 	bl	80143d4 <metal_allocate_memory>
 8014418:	60b8      	str	r0, [r7, #8]

	if (vqs) {
 801441a:	68bb      	ldr	r3, [r7, #8]
 801441c:	2b00      	cmp	r3, #0
 801441e:	d004      	beq.n	801442a <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
 8014420:	68fa      	ldr	r2, [r7, #12]
 8014422:	2100      	movs	r1, #0
 8014424:	68b8      	ldr	r0, [r7, #8]
 8014426:	f006 f9f3 	bl	801a810 <memset>
	}

	return vqs;
 801442a:	68bb      	ldr	r3, [r7, #8]
}
 801442c:	4618      	mov	r0, r3
 801442e:	3710      	adds	r7, #16
 8014430:	46bd      	mov	sp, r7
 8014432:	bd80      	pop	{r7, pc}

08014434 <rproc_virtio_virtqueue_notify>:
#include <openamp/virtqueue.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 8014434:	b580      	push	{r7, lr}
 8014436:	b086      	sub	sp, #24
 8014438:	af00      	add	r7, sp, #0
 801443a:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	891b      	ldrh	r3, [r3, #8]
 8014440:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8014448:	693b      	ldr	r3, [r7, #16]
 801444a:	3b18      	subs	r3, #24
 801444c:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id <= vdev->vrings_num);
 801444e:	693b      	ldr	r3, [r7, #16]
 8014450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014452:	697a      	ldr	r2, [r7, #20]
 8014454:	429a      	cmp	r2, r3
 8014456:	d905      	bls.n	8014464 <rproc_virtio_virtqueue_notify+0x30>
 8014458:	4b0d      	ldr	r3, [pc, #52]	; (8014490 <rproc_virtio_virtqueue_notify+0x5c>)
 801445a:	4a0e      	ldr	r2, [pc, #56]	; (8014494 <rproc_virtio_virtqueue_notify+0x60>)
 801445c:	2133      	movs	r1, #51	; 0x33
 801445e:	480e      	ldr	r0, [pc, #56]	; (8014498 <rproc_virtio_virtqueue_notify+0x64>)
 8014460:	f006 f940 	bl	801a6e4 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 8014464:	693b      	ldr	r3, [r7, #16]
 8014466:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8014468:	697a      	ldr	r2, [r7, #20]
 801446a:	4613      	mov	r3, r2
 801446c:	005b      	lsls	r3, r3, #1
 801446e:	4413      	add	r3, r2
 8014470:	00db      	lsls	r3, r3, #3
 8014472:	440b      	add	r3, r1
 8014474:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	691b      	ldr	r3, [r3, #16]
 801447a:	68fa      	ldr	r2, [r7, #12]
 801447c:	6810      	ldr	r0, [r2, #0]
 801447e:	68ba      	ldr	r2, [r7, #8]
 8014480:	6912      	ldr	r2, [r2, #16]
 8014482:	4611      	mov	r1, r2
 8014484:	4798      	blx	r3
}
 8014486:	bf00      	nop
 8014488:	3718      	adds	r7, #24
 801448a:	46bd      	mov	sp, r7
 801448c:	bd80      	pop	{r7, pc}
 801448e:	bf00      	nop
 8014490:	0801f840 	.word	0x0801f840
 8014494:	080285b8 	.word	0x080285b8
 8014498:	0801f85c 	.word	0x0801f85c

0801449c <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 801449c:	b580      	push	{r7, lr}
 801449e:	b086      	sub	sp, #24
 80144a0:	af00      	add	r7, sp, #0
 80144a2:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	3b18      	subs	r3, #24
 80144a8:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 80144aa:	697b      	ldr	r3, [r7, #20]
 80144ac:	689b      	ldr	r3, [r3, #8]
 80144ae:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 80144b0:	697b      	ldr	r3, [r7, #20]
 80144b2:	68db      	ldr	r3, [r3, #12]
 80144b4:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
 80144b6:	693b      	ldr	r3, [r7, #16]
 80144b8:	3318      	adds	r3, #24
 80144ba:	4619      	mov	r1, r3
 80144bc:	68f8      	ldr	r0, [r7, #12]
 80144be:	f7ff fe7b 	bl	80141b8 <metal_io_virt_to_offset>
 80144c2:	4601      	mov	r1, r0
 80144c4:	2301      	movs	r3, #1
 80144c6:	2205      	movs	r2, #5
 80144c8:	68f8      	ldr	r0, [r7, #12]
 80144ca:	f7ff fe8f 	bl	80141ec <metal_io_read>
 80144ce:	4602      	mov	r2, r0
 80144d0:	460b      	mov	r3, r1
 80144d2:	4613      	mov	r3, r2
 80144d4:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 80144d6:	7afb      	ldrb	r3, [r7, #11]
}
 80144d8:	4618      	mov	r0, r3
 80144da:	3718      	adds	r7, #24
 80144dc:	46bd      	mov	sp, r7
 80144de:	bd80      	pop	{r7, pc}

080144e0 <rproc_virtio_set_status>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_status(struct virtio_device *vdev,
				    unsigned char status)
{
 80144e0:	b580      	push	{r7, lr}
 80144e2:	b088      	sub	sp, #32
 80144e4:	af02      	add	r7, sp, #8
 80144e6:	6078      	str	r0, [r7, #4]
 80144e8:	460b      	mov	r3, r1
 80144ea:	70fb      	strb	r3, [r7, #3]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	3b18      	subs	r3, #24
 80144f0:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 80144f2:	697b      	ldr	r3, [r7, #20]
 80144f4:	689b      	ldr	r3, [r3, #8]
 80144f6:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 80144f8:	697b      	ldr	r3, [r7, #20]
 80144fa:	68db      	ldr	r3, [r3, #12]
 80144fc:	60fb      	str	r3, [r7, #12]
	metal_io_write8(io,
 80144fe:	693b      	ldr	r3, [r7, #16]
 8014500:	3318      	adds	r3, #24
 8014502:	4619      	mov	r1, r3
 8014504:	68f8      	ldr	r0, [r7, #12]
 8014506:	f7ff fe57 	bl	80141b8 <metal_io_virt_to_offset>
 801450a:	4601      	mov	r1, r0
 801450c:	78fa      	ldrb	r2, [r7, #3]
 801450e:	f04f 0300 	mov.w	r3, #0
 8014512:	2001      	movs	r0, #1
 8014514:	9001      	str	r0, [sp, #4]
 8014516:	2005      	movs	r0, #5
 8014518:	9000      	str	r0, [sp, #0]
 801451a:	68f8      	ldr	r0, [r7, #12]
 801451c:	f7ff fee4 	bl	80142e8 <metal_io_write>
			metal_io_virt_to_offset(io, &vdev_rsc->status),
			status);
	rpvdev->notify(rpvdev->priv, vdev->index);
 8014520:	697b      	ldr	r3, [r7, #20]
 8014522:	691b      	ldr	r3, [r3, #16]
 8014524:	697a      	ldr	r2, [r7, #20]
 8014526:	6810      	ldr	r0, [r2, #0]
 8014528:	687a      	ldr	r2, [r7, #4]
 801452a:	6812      	ldr	r2, [r2, #0]
 801452c:	4611      	mov	r1, r2
 801452e:	4798      	blx	r3
}
 8014530:	bf00      	nop
 8014532:	3718      	adds	r7, #24
 8014534:	46bd      	mov	sp, r7
 8014536:	bd80      	pop	{r7, pc}

08014538 <rproc_virtio_get_features>:
#endif

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 8014538:	b580      	push	{r7, lr}
 801453a:	b086      	sub	sp, #24
 801453c:	af00      	add	r7, sp, #0
 801453e:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	3b18      	subs	r3, #24
 8014544:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8014546:	697b      	ldr	r3, [r7, #20]
 8014548:	689b      	ldr	r3, [r3, #8]
 801454a:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 801454c:	697b      	ldr	r3, [r7, #20]
 801454e:	68db      	ldr	r3, [r3, #12]
 8014550:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we get features based on the role ? */
	features = metal_io_read32(io,
 8014552:	693b      	ldr	r3, [r7, #16]
 8014554:	330c      	adds	r3, #12
 8014556:	4619      	mov	r1, r3
 8014558:	68f8      	ldr	r0, [r7, #12]
 801455a:	f7ff fe2d 	bl	80141b8 <metal_io_virt_to_offset>
 801455e:	4601      	mov	r1, r0
 8014560:	2304      	movs	r3, #4
 8014562:	2205      	movs	r2, #5
 8014564:	68f8      	ldr	r0, [r7, #12]
 8014566:	f7ff fe41 	bl	80141ec <metal_io_read>
 801456a:	4602      	mov	r2, r0
 801456c:	460b      	mov	r3, r1
 801456e:	4613      	mov	r3, r2
 8014570:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 8014572:	68bb      	ldr	r3, [r7, #8]
}
 8014574:	4618      	mov	r0, r3
 8014576:	3718      	adds	r7, #24
 8014578:	46bd      	mov	sp, r7
 801457a:	bd80      	pop	{r7, pc}

0801457c <rproc_virtio_set_features>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_features(struct virtio_device *vdev,
				      uint32_t features)
{
 801457c:	b580      	push	{r7, lr}
 801457e:	b088      	sub	sp, #32
 8014580:	af02      	add	r7, sp, #8
 8014582:	6078      	str	r0, [r7, #4]
 8014584:	6039      	str	r1, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	3b18      	subs	r3, #24
 801458a:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 801458c:	697b      	ldr	r3, [r7, #20]
 801458e:	689b      	ldr	r3, [r3, #8]
 8014590:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8014592:	697b      	ldr	r3, [r7, #20]
 8014594:	68db      	ldr	r3, [r3, #12]
 8014596:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we set features based on the role ? */
	metal_io_write32(io,
 8014598:	693b      	ldr	r3, [r7, #16]
 801459a:	330c      	adds	r3, #12
 801459c:	4619      	mov	r1, r3
 801459e:	68f8      	ldr	r0, [r7, #12]
 80145a0:	f7ff fe0a 	bl	80141b8 <metal_io_virt_to_offset>
 80145a4:	4601      	mov	r1, r0
 80145a6:	683b      	ldr	r3, [r7, #0]
 80145a8:	461a      	mov	r2, r3
 80145aa:	f04f 0300 	mov.w	r3, #0
 80145ae:	2004      	movs	r0, #4
 80145b0:	9001      	str	r0, [sp, #4]
 80145b2:	2005      	movs	r0, #5
 80145b4:	9000      	str	r0, [sp, #0]
 80145b6:	68f8      	ldr	r0, [r7, #12]
 80145b8:	f7ff fe96 	bl	80142e8 <metal_io_write>
			 metal_io_virt_to_offset(io, &vdev_rsc->dfeatures),
			 features);
	rpvdev->notify(rpvdev->priv, vdev->index);
 80145bc:	697b      	ldr	r3, [r7, #20]
 80145be:	691b      	ldr	r3, [r3, #16]
 80145c0:	697a      	ldr	r2, [r7, #20]
 80145c2:	6810      	ldr	r0, [r2, #0]
 80145c4:	687a      	ldr	r2, [r7, #4]
 80145c6:	6812      	ldr	r2, [r2, #0]
 80145c8:	4611      	mov	r1, r2
 80145ca:	4798      	blx	r3
}
 80145cc:	bf00      	nop
 80145ce:	3718      	adds	r7, #24
 80145d0:	46bd      	mov	sp, r7
 80145d2:	bd80      	pop	{r7, pc}

080145d4 <rproc_virtio_negotiate_features>:
#endif

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 80145d4:	b480      	push	{r7}
 80145d6:	b083      	sub	sp, #12
 80145d8:	af00      	add	r7, sp, #0
 80145da:	6078      	str	r0, [r7, #4]
 80145dc:	6039      	str	r1, [r7, #0]
	(void)vdev;
	(void)features;

	return 0;
 80145de:	2300      	movs	r3, #0
}
 80145e0:	4618      	mov	r0, r3
 80145e2:	370c      	adds	r7, #12
 80145e4:	46bd      	mov	sp, r7
 80145e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ea:	4770      	bx	lr

080145ec <rproc_virtio_read_config>:

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 80145ec:	b480      	push	{r7}
 80145ee:	b085      	sub	sp, #20
 80145f0:	af00      	add	r7, sp, #0
 80145f2:	60f8      	str	r0, [r7, #12]
 80145f4:	60b9      	str	r1, [r7, #8]
 80145f6:	607a      	str	r2, [r7, #4]
 80145f8:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 80145fa:	bf00      	nop
 80145fc:	3714      	adds	r7, #20
 80145fe:	46bd      	mov	sp, r7
 8014600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014604:	4770      	bx	lr

08014606 <rproc_virtio_write_config>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_write_config(struct virtio_device *vdev,
				      uint32_t offset, void *src, int length)
{
 8014606:	b480      	push	{r7}
 8014608:	b085      	sub	sp, #20
 801460a:	af00      	add	r7, sp, #0
 801460c:	60f8      	str	r0, [r7, #12]
 801460e:	60b9      	str	r1, [r7, #8]
 8014610:	607a      	str	r2, [r7, #4]
 8014612:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)src;
	(void)length;
}
 8014614:	bf00      	nop
 8014616:	3714      	adds	r7, #20
 8014618:	46bd      	mov	sp, r7
 801461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801461e:	4770      	bx	lr

08014620 <rproc_virtio_reset_device>:

static void rproc_virtio_reset_device(struct virtio_device *vdev)
{
 8014620:	b580      	push	{r7, lr}
 8014622:	b082      	sub	sp, #8
 8014624:	af00      	add	r7, sp, #0
 8014626:	6078      	str	r0, [r7, #4]
	if (vdev->role == VIRTIO_DEV_MASTER)
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	699b      	ldr	r3, [r3, #24]
 801462c:	2b00      	cmp	r3, #0
 801462e:	d103      	bne.n	8014638 <rproc_virtio_reset_device+0x18>
		rproc_virtio_set_status(vdev,
 8014630:	2140      	movs	r1, #64	; 0x40
 8014632:	6878      	ldr	r0, [r7, #4]
 8014634:	f7ff ff54 	bl	80144e0 <rproc_virtio_set_status>
					VIRTIO_CONFIG_STATUS_NEEDS_RESET);
}
 8014638:	bf00      	nop
 801463a:	3708      	adds	r7, #8
 801463c:	46bd      	mov	sp, r7
 801463e:	bd80      	pop	{r7, pc}

08014640 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 8014640:	b580      	push	{r7, lr}
 8014642:	b08e      	sub	sp, #56	; 0x38
 8014644:	af00      	add	r7, sp, #0
 8014646:	60f8      	str	r0, [r7, #12]
 8014648:	60b9      	str	r1, [r7, #8]
 801464a:	607a      	str	r2, [r7, #4]
 801464c:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 8014652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014654:	7e5b      	ldrb	r3, [r3, #25]
 8014656:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 8014658:	2050      	movs	r0, #80	; 0x50
 801465a:	f7ff febb 	bl	80143d4 <metal_allocate_memory>
 801465e:	6278      	str	r0, [r7, #36]	; 0x24
	if (!rpvdev)
 8014660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014662:	2b00      	cmp	r3, #0
 8014664:	d101      	bne.n	801466a <rproc_virtio_create_vdev+0x2a>
		return NULL;
 8014666:	2300      	movs	r3, #0
 8014668:	e092      	b.n	8014790 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 801466a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801466c:	4613      	mov	r3, r2
 801466e:	005b      	lsls	r3, r3, #1
 8014670:	4413      	add	r3, r2
 8014672:	00db      	lsls	r3, r3, #3
 8014674:	4618      	mov	r0, r3
 8014676:	f7ff fead 	bl	80143d4 <metal_allocate_memory>
 801467a:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
 801467c:	6a3b      	ldr	r3, [r7, #32]
 801467e:	2b00      	cmp	r3, #0
 8014680:	f000 8081 	beq.w	8014786 <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 8014684:	2250      	movs	r2, #80	; 0x50
 8014686:	2100      	movs	r1, #0
 8014688:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801468a:	f006 f8c1 	bl	801a810 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 801468e:	2218      	movs	r2, #24
 8014690:	2100      	movs	r1, #0
 8014692:	6a38      	ldr	r0, [r7, #32]
 8014694:	f006 f8bc 	bl	801a810 <memset>
	vdev = &rpvdev->vdev;
 8014698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801469a:	3318      	adds	r3, #24
 801469c:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
 801469e:	2300      	movs	r3, #0
 80146a0:	637b      	str	r3, [r7, #52]	; 0x34
 80146a2:	e025      	b.n	80146f0 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 80146a4:	2300      	movs	r3, #0
 80146a6:	633b      	str	r3, [r7, #48]	; 0x30

		vring_rsc = &vdev_rsc->vring[i];
 80146a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80146aa:	4613      	mov	r3, r2
 80146ac:	009b      	lsls	r3, r3, #2
 80146ae:	4413      	add	r3, r2
 80146b0:	009b      	lsls	r3, r3, #2
 80146b2:	3318      	adds	r3, #24
 80146b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80146b6:	4413      	add	r3, r2
 80146b8:	3304      	adds	r3, #4
 80146ba:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d102      	bne.n	80146c8 <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
 80146c2:	69bb      	ldr	r3, [r7, #24]
 80146c4:	689b      	ldr	r3, [r3, #8]
 80146c6:	633b      	str	r3, [r7, #48]	; 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
 80146c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80146ca:	f7ff fe9a 	bl	8014402 <virtqueue_allocate>
 80146ce:	6178      	str	r0, [r7, #20]
		if (!vq)
 80146d0:	697b      	ldr	r3, [r7, #20]
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d031      	beq.n	801473a <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
 80146d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80146d8:	4613      	mov	r3, r2
 80146da:	005b      	lsls	r3, r3, #1
 80146dc:	4413      	add	r3, r2
 80146de:	00db      	lsls	r3, r3, #3
 80146e0:	461a      	mov	r2, r3
 80146e2:	6a3b      	ldr	r3, [r7, #32]
 80146e4:	4413      	add	r3, r2
 80146e6:	697a      	ldr	r2, [r7, #20]
 80146e8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
 80146ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146ec:	3301      	adds	r3, #1
 80146ee:	637b      	str	r3, [r7, #52]	; 0x34
 80146f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80146f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146f4:	429a      	cmp	r2, r3
 80146f6:	d3d5      	bcc.n	80146a4 <rproc_virtio_create_vdev+0x64>
	}

	/* FIXME commended as seems not nedded, already stored in vdev */
	//rpvdev->notifyid = notifyid;
	rpvdev->notify = notify;
 80146f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80146fc:	611a      	str	r2, [r3, #16]
	rpvdev->priv = priv;
 80146fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014700:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014702:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
 8014704:	69fb      	ldr	r3, [r7, #28]
 8014706:	6a3a      	ldr	r2, [r7, #32]
 8014708:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 801470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801470c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801470e:	609a      	str	r2, [r3, #8]
	rpvdev->vdev_rsc_io = rsc_io;
 8014710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014712:	683a      	ldr	r2, [r7, #0]
 8014714:	60da      	str	r2, [r3, #12]

	vdev->index = notifyid;
 8014716:	69fb      	ldr	r3, [r7, #28]
 8014718:	68ba      	ldr	r2, [r7, #8]
 801471a:	601a      	str	r2, [r3, #0]
	vdev->role = role;
 801471c:	69fb      	ldr	r3, [r7, #28]
 801471e:	68fa      	ldr	r2, [r7, #12]
 8014720:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
 8014722:	69fb      	ldr	r3, [r7, #28]
 8014724:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014726:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
 8014728:	69fb      	ldr	r3, [r7, #28]
 801472a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801472c:	629a      	str	r2, [r3, #40]	; 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 801472e:	69fb      	ldr	r3, [r7, #28]
 8014730:	4a19      	ldr	r2, [pc, #100]	; (8014798 <rproc_virtio_create_vdev+0x158>)
 8014732:	621a      	str	r2, [r3, #32]
	/* TODO: Shall we set features here ? */

	return &rpvdev->vdev;
 8014734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014736:	3318      	adds	r3, #24
 8014738:	e02a      	b.n	8014790 <rproc_virtio_create_vdev+0x150>
			goto err1;
 801473a:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
 801473c:	2300      	movs	r3, #0
 801473e:	637b      	str	r3, [r7, #52]	; 0x34
 8014740:	e019      	b.n	8014776 <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
 8014742:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014744:	4613      	mov	r3, r2
 8014746:	005b      	lsls	r3, r3, #1
 8014748:	4413      	add	r3, r2
 801474a:	00db      	lsls	r3, r3, #3
 801474c:	461a      	mov	r2, r3
 801474e:	6a3b      	ldr	r3, [r7, #32]
 8014750:	4413      	add	r3, r2
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	2b00      	cmp	r3, #0
 8014756:	d00b      	beq.n	8014770 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
 8014758:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801475a:	4613      	mov	r3, r2
 801475c:	005b      	lsls	r3, r3, #1
 801475e:	4413      	add	r3, r2
 8014760:	00db      	lsls	r3, r3, #3
 8014762:	461a      	mov	r2, r3
 8014764:	6a3b      	ldr	r3, [r7, #32]
 8014766:	4413      	add	r3, r2
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	4618      	mov	r0, r3
 801476c:	f7ff fe3e 	bl	80143ec <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
 8014770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014772:	3301      	adds	r3, #1
 8014774:	637b      	str	r3, [r7, #52]	; 0x34
 8014776:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801477a:	429a      	cmp	r2, r3
 801477c:	d3e1      	bcc.n	8014742 <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
 801477e:	6a38      	ldr	r0, [r7, #32]
 8014780:	f7ff fe34 	bl	80143ec <metal_free_memory>
 8014784:	e000      	b.n	8014788 <rproc_virtio_create_vdev+0x148>
		goto err0;
 8014786:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
 8014788:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801478a:	f7ff fe2f 	bl	80143ec <metal_free_memory>
	return NULL;
 801478e:	2300      	movs	r3, #0
}
 8014790:	4618      	mov	r0, r3
 8014792:	3738      	adds	r7, #56	; 0x38
 8014794:	46bd      	mov	sp, r7
 8014796:	bd80      	pop	{r7, pc}
 8014798:	08028594 	.word	0x08028594

0801479c <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 801479c:	b480      	push	{r7}
 801479e:	b087      	sub	sp, #28
 80147a0:	af00      	add	r7, sp, #0
 80147a2:	60f8      	str	r0, [r7, #12]
 80147a4:	60b9      	str	r1, [r7, #8]
 80147a6:	607a      	str	r2, [r7, #4]
 80147a8:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80147ae:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
 80147b0:	68ba      	ldr	r2, [r7, #8]
 80147b2:	697b      	ldr	r3, [r7, #20]
 80147b4:	429a      	cmp	r2, r3
 80147b6:	d302      	bcc.n	80147be <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
 80147b8:	f06f 0301 	mvn.w	r3, #1
 80147bc:	e019      	b.n	80147f2 <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80147c2:	68ba      	ldr	r2, [r7, #8]
 80147c4:	4613      	mov	r3, r2
 80147c6:	005b      	lsls	r3, r3, #1
 80147c8:	4413      	add	r3, r2
 80147ca:	00db      	lsls	r3, r3, #3
 80147cc:	440b      	add	r3, r1
 80147ce:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
 80147d0:	693b      	ldr	r3, [r7, #16]
 80147d2:	6a3a      	ldr	r2, [r7, #32]
 80147d4:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
 80147d6:	693b      	ldr	r3, [r7, #16]
 80147d8:	687a      	ldr	r2, [r7, #4]
 80147da:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
 80147dc:	693b      	ldr	r3, [r7, #16]
 80147de:	683a      	ldr	r2, [r7, #0]
 80147e0:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
 80147e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147e4:	b29a      	uxth	r2, r3
 80147e6:	693b      	ldr	r3, [r7, #16]
 80147e8:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
 80147ea:	693b      	ldr	r3, [r7, #16]
 80147ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80147ee:	609a      	str	r2, [r3, #8]

	return 0;
 80147f0:	2300      	movs	r3, #0
}
 80147f2:	4618      	mov	r0, r3
 80147f4:	371c      	adds	r7, #28
 80147f6:	46bd      	mov	sp, r7
 80147f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147fc:	4770      	bx	lr

080147fe <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 80147fe:	b580      	push	{r7, lr}
 8014800:	b086      	sub	sp, #24
 8014802:	af00      	add	r7, sp, #0
 8014804:	6078      	str	r0, [r7, #4]
 8014806:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	2b00      	cmp	r3, #0
 801480c:	d102      	bne.n	8014814 <rproc_virtio_notified+0x16>
		return -EINVAL;
 801480e:	f06f 0315 	mvn.w	r3, #21
 8014812:	e02c      	b.n	801486e <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->index == notifyid)
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	683a      	ldr	r2, [r7, #0]
 801481a:	429a      	cmp	r2, r3
 801481c:	d101      	bne.n	8014822 <rproc_virtio_notified+0x24>
		return 0;
 801481e:	2300      	movs	r3, #0
 8014820:	e025      	b.n	801486e <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014826:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
 8014828:	2300      	movs	r3, #0
 801482a:	617b      	str	r3, [r7, #20]
 801482c:	e01a      	b.n	8014864 <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8014832:	697a      	ldr	r2, [r7, #20]
 8014834:	4613      	mov	r3, r2
 8014836:	005b      	lsls	r3, r3, #1
 8014838:	4413      	add	r3, r2
 801483a:	00db      	lsls	r3, r3, #3
 801483c:	440b      	add	r3, r1
 801483e:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	691b      	ldr	r3, [r3, #16]
 8014844:	683a      	ldr	r2, [r7, #0]
 8014846:	429a      	cmp	r2, r3
 8014848:	d003      	beq.n	8014852 <rproc_virtio_notified+0x54>
 801484a:	683b      	ldr	r3, [r7, #0]
 801484c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014850:	d105      	bne.n	801485e <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 8014852:	68fb      	ldr	r3, [r7, #12]
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
 8014858:	68b8      	ldr	r0, [r7, #8]
 801485a:	f001 fb58 	bl	8015f0e <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
 801485e:	697b      	ldr	r3, [r7, #20]
 8014860:	3301      	adds	r3, #1
 8014862:	617b      	str	r3, [r7, #20]
 8014864:	697a      	ldr	r2, [r7, #20]
 8014866:	693b      	ldr	r3, [r7, #16]
 8014868:	429a      	cmp	r2, r3
 801486a:	d3e0      	bcc.n	801482e <rproc_virtio_notified+0x30>
		}
	}
	return 0;
 801486c:	2300      	movs	r3, #0
}
 801486e:	4618      	mov	r0, r3
 8014870:	3718      	adds	r7, #24
 8014872:	46bd      	mov	sp, r7
 8014874:	bd80      	pop	{r7, pc}

08014876 <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 8014876:	b580      	push	{r7, lr}
 8014878:	b084      	sub	sp, #16
 801487a:	af00      	add	r7, sp, #0
 801487c:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	699b      	ldr	r3, [r3, #24]
 8014882:	2b00      	cmp	r3, #0
 8014884:	d00a      	beq.n	801489c <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 8014886:	6878      	ldr	r0, [r7, #4]
 8014888:	f7ff fe08 	bl	801449c <rproc_virtio_get_status>
 801488c:	4603      	mov	r3, r0
 801488e:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 8014890:	7bfb      	ldrb	r3, [r7, #15]
 8014892:	f003 0304 	and.w	r3, r3, #4
 8014896:	2b00      	cmp	r3, #0
 8014898:	d102      	bne.n	80148a0 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
 801489a:	e7f4      	b.n	8014886 <rproc_virtio_wait_remote_ready+0x10>
		return;
 801489c:	bf00      	nop
 801489e:	e000      	b.n	80148a2 <rproc_virtio_wait_remote_ready+0x2c>
			return;
 80148a0:	bf00      	nop
	}
}
 80148a2:	3710      	adds	r7, #16
 80148a4:	46bd      	mov	sp, r7
 80148a6:	bd80      	pop	{r7, pc}

080148a8 <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->w);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 80148a8:	b480      	push	{r7}
 80148aa:	b083      	sub	sp, #12
 80148ac:	af00      	add	r7, sp, #0
 80148ae:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 80148b0:	bf00      	nop
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	2201      	movs	r2, #1
 80148b6:	4611      	mov	r1, r2
 80148b8:	f3bf 8f5b 	dmb	ish
 80148bc:	e8d3 2f4f 	ldrexb	r2, [r3]
 80148c0:	e8c3 1f40 	strexb	r0, r1, [r3]
 80148c4:	2800      	cmp	r0, #0
 80148c6:	d1f9      	bne.n	80148bc <__metal_mutex_acquire+0x14>
 80148c8:	f3bf 8f5b 	dmb	ish
 80148cc:	b2d3      	uxtb	r3, r2
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d1ef      	bne.n	80148b2 <__metal_mutex_acquire+0xa>
		;
	}
}
 80148d2:	bf00      	nop
 80148d4:	bf00      	nop
 80148d6:	370c      	adds	r7, #12
 80148d8:	46bd      	mov	sp, r7
 80148da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148de:	4770      	bx	lr

080148e0 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 80148e0:	b480      	push	{r7}
 80148e2:	b083      	sub	sp, #12
 80148e4:	af00      	add	r7, sp, #0
 80148e6:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	f3bf 8f5b 	dmb	ish
 80148ee:	2200      	movs	r2, #0
 80148f0:	701a      	strb	r2, [r3, #0]
 80148f2:	f3bf 8f5b 	dmb	ish
}
 80148f6:	bf00      	nop
 80148f8:	370c      	adds	r7, #12
 80148fa:	46bd      	mov	sp, r7
 80148fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014900:	4770      	bx	lr

08014902 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 8014902:	b580      	push	{r7, lr}
 8014904:	b082      	sub	sp, #8
 8014906:	af00      	add	r7, sp, #0
 8014908:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 801490a:	6878      	ldr	r0, [r7, #4]
 801490c:	f7ff ffcc 	bl	80148a8 <__metal_mutex_acquire>
}
 8014910:	bf00      	nop
 8014912:	3708      	adds	r7, #8
 8014914:	46bd      	mov	sp, r7
 8014916:	bd80      	pop	{r7, pc}

08014918 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 8014918:	b580      	push	{r7, lr}
 801491a:	b082      	sub	sp, #8
 801491c:	af00      	add	r7, sp, #0
 801491e:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8014920:	6878      	ldr	r0, [r7, #4]
 8014922:	f7ff ffdd 	bl	80148e0 <__metal_mutex_release>
}
 8014926:	bf00      	nop
 8014928:	3708      	adds	r7, #8
 801492a:	46bd      	mov	sp, r7
 801492c:	bd80      	pop	{r7, pc}

0801492e <metal_list_add_before>:
{
 801492e:	b480      	push	{r7}
 8014930:	b083      	sub	sp, #12
 8014932:	af00      	add	r7, sp, #0
 8014934:	6078      	str	r0, [r7, #4]
 8014936:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	685a      	ldr	r2, [r3, #4]
 801493c:	683b      	ldr	r3, [r7, #0]
 801493e:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8014940:	683b      	ldr	r3, [r7, #0]
 8014942:	687a      	ldr	r2, [r7, #4]
 8014944:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 8014946:	683b      	ldr	r3, [r7, #0]
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	683a      	ldr	r2, [r7, #0]
 801494c:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 801494e:	683b      	ldr	r3, [r7, #0]
 8014950:	685b      	ldr	r3, [r3, #4]
 8014952:	683a      	ldr	r2, [r7, #0]
 8014954:	601a      	str	r2, [r3, #0]
}
 8014956:	bf00      	nop
 8014958:	370c      	adds	r7, #12
 801495a:	46bd      	mov	sp, r7
 801495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014960:	4770      	bx	lr

08014962 <metal_list_add_tail>:
{
 8014962:	b580      	push	{r7, lr}
 8014964:	b082      	sub	sp, #8
 8014966:	af00      	add	r7, sp, #0
 8014968:	6078      	str	r0, [r7, #4]
 801496a:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 801496c:	6839      	ldr	r1, [r7, #0]
 801496e:	6878      	ldr	r0, [r7, #4]
 8014970:	f7ff ffdd 	bl	801492e <metal_list_add_before>
}
 8014974:	bf00      	nop
 8014976:	3708      	adds	r7, #8
 8014978:	46bd      	mov	sp, r7
 801497a:	bd80      	pop	{r7, pc}

0801497c <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 801497c:	b480      	push	{r7}
 801497e:	b083      	sub	sp, #12
 8014980:	af00      	add	r7, sp, #0
 8014982:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	687a      	ldr	r2, [r7, #4]
 801498a:	6852      	ldr	r2, [r2, #4]
 801498c:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	685b      	ldr	r3, [r3, #4]
 8014992:	687a      	ldr	r2, [r7, #4]
 8014994:	6812      	ldr	r2, [r2, #0]
 8014996:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	687a      	ldr	r2, [r7, #4]
 801499c:	605a      	str	r2, [r3, #4]
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	685a      	ldr	r2, [r3, #4]
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	601a      	str	r2, [r3, #0]
}
 80149a6:	bf00      	nop
 80149a8:	370c      	adds	r7, #12
 80149aa:	46bd      	mov	sp, r7
 80149ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149b0:	4770      	bx	lr

080149b2 <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 80149b2:	b480      	push	{r7}
 80149b4:	b083      	sub	sp, #12
 80149b6:	af00      	add	r7, sp, #0
 80149b8:	6078      	str	r0, [r7, #4]
 80149ba:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 80149bc:	683b      	ldr	r3, [r7, #0]
 80149be:	095b      	lsrs	r3, r3, #5
 80149c0:	009a      	lsls	r2, r3, #2
 80149c2:	6879      	ldr	r1, [r7, #4]
 80149c4:	440a      	add	r2, r1
 80149c6:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 80149c8:	683a      	ldr	r2, [r7, #0]
 80149ca:	f002 021f 	and.w	r2, r2, #31
 80149ce:	2001      	movs	r0, #1
 80149d0:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 80149d4:	009b      	lsls	r3, r3, #2
 80149d6:	6878      	ldr	r0, [r7, #4]
 80149d8:	4403      	add	r3, r0
 80149da:	430a      	orrs	r2, r1
 80149dc:	601a      	str	r2, [r3, #0]
}
 80149de:	bf00      	nop
 80149e0:	370c      	adds	r7, #12
 80149e2:	46bd      	mov	sp, r7
 80149e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149e8:	4770      	bx	lr

080149ea <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 80149ea:	b480      	push	{r7}
 80149ec:	b083      	sub	sp, #12
 80149ee:	af00      	add	r7, sp, #0
 80149f0:	6078      	str	r0, [r7, #4]
 80149f2:	6039      	str	r1, [r7, #0]
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 80149f4:	683b      	ldr	r3, [r7, #0]
 80149f6:	095b      	lsrs	r3, r3, #5
 80149f8:	009b      	lsls	r3, r3, #2
 80149fa:	687a      	ldr	r2, [r7, #4]
 80149fc:	4413      	add	r3, r2
 80149fe:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8014a00:	683b      	ldr	r3, [r7, #0]
 8014a02:	f003 031f 	and.w	r3, r3, #31
 8014a06:	2101      	movs	r1, #1
 8014a08:	fa01 f303 	lsl.w	r3, r1, r3
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8014a0c:	4013      	ands	r3, r2
}
 8014a0e:	4618      	mov	r0, r3
 8014a10:	370c      	adds	r7, #12
 8014a12:	46bd      	mov	sp, r7
 8014a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a18:	4770      	bx	lr

08014a1a <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 8014a1a:	b480      	push	{r7}
 8014a1c:	b083      	sub	sp, #12
 8014a1e:	af00      	add	r7, sp, #0
 8014a20:	6078      	str	r0, [r7, #4]
 8014a22:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8014a24:	683b      	ldr	r3, [r7, #0]
 8014a26:	095b      	lsrs	r3, r3, #5
 8014a28:	009a      	lsls	r2, r3, #2
 8014a2a:	6879      	ldr	r1, [r7, #4]
 8014a2c:	440a      	add	r2, r1
 8014a2e:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8014a30:	683a      	ldr	r2, [r7, #0]
 8014a32:	f002 021f 	and.w	r2, r2, #31
 8014a36:	2001      	movs	r0, #1
 8014a38:	fa00 f202 	lsl.w	r2, r0, r2
 8014a3c:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8014a3e:	009b      	lsls	r3, r3, #2
 8014a40:	6878      	ldr	r0, [r7, #4]
 8014a42:	4403      	add	r3, r0
 8014a44:	400a      	ands	r2, r1
 8014a46:	601a      	str	r2, [r3, #0]
}
 8014a48:	bf00      	nop
 8014a4a:	370c      	adds	r7, #12
 8014a4c:	46bd      	mov	sp, r7
 8014a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a52:	4770      	bx	lr

08014a54 <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 8014a54:	b580      	push	{r7, lr}
 8014a56:	b082      	sub	sp, #8
 8014a58:	af00      	add	r7, sp, #0
 8014a5a:	6078      	str	r0, [r7, #4]
 8014a5c:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
 8014a5e:	6839      	ldr	r1, [r7, #0]
 8014a60:	6878      	ldr	r0, [r7, #4]
 8014a62:	f7ff ffc2 	bl	80149ea <metal_bitmap_is_bit_set>
 8014a66:	4603      	mov	r3, r0
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	bf0c      	ite	eq
 8014a6c:	2301      	moveq	r3, #1
 8014a6e:	2300      	movne	r3, #0
 8014a70:	b2db      	uxtb	r3, r3
}
 8014a72:	4618      	mov	r0, r3
 8014a74:	3708      	adds	r7, #8
 8014a76:	46bd      	mov	sp, r7
 8014a78:	bd80      	pop	{r7, pc}

08014a7a <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 8014a7a:	b580      	push	{r7, lr}
 8014a7c:	b086      	sub	sp, #24
 8014a7e:	af00      	add	r7, sp, #0
 8014a80:	60f8      	str	r0, [r7, #12]
 8014a82:	60b9      	str	r1, [r7, #8]
 8014a84:	607a      	str	r2, [r7, #4]
	unsigned int bit;
	for (bit = start;
 8014a86:	68bb      	ldr	r3, [r7, #8]
 8014a88:	617b      	str	r3, [r7, #20]
 8014a8a:	e002      	b.n	8014a92 <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 8014a8c:	697b      	ldr	r3, [r7, #20]
 8014a8e:	3301      	adds	r3, #1
 8014a90:	617b      	str	r3, [r7, #20]
	for (bit = start;
 8014a92:	697a      	ldr	r2, [r7, #20]
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	429a      	cmp	r2, r3
 8014a98:	d207      	bcs.n	8014aaa <metal_bitmap_next_clear_bit+0x30>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 8014a9a:	697b      	ldr	r3, [r7, #20]
 8014a9c:	4619      	mov	r1, r3
 8014a9e:	68f8      	ldr	r0, [r7, #12]
 8014aa0:	f7ff ffd8 	bl	8014a54 <metal_bitmap_is_bit_clear>
 8014aa4:	4603      	mov	r3, r0
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d0f0      	beq.n	8014a8c <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
 8014aaa:	697b      	ldr	r3, [r7, #20]
}
 8014aac:	4618      	mov	r0, r3
 8014aae:	3718      	adds	r7, #24
 8014ab0:	46bd      	mov	sp, r7
 8014ab2:	bd80      	pop	{r7, pc}

08014ab4 <rpmsg_init_ept>:
{
 8014ab4:	b580      	push	{r7, lr}
 8014ab6:	b084      	sub	sp, #16
 8014ab8:	af00      	add	r7, sp, #0
 8014aba:	60f8      	str	r0, [r7, #12]
 8014abc:	60b9      	str	r1, [r7, #8]
 8014abe:	607a      	str	r2, [r7, #4]
 8014ac0:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8014ac2:	68fb      	ldr	r3, [r7, #12]
 8014ac4:	2220      	movs	r2, #32
 8014ac6:	68b9      	ldr	r1, [r7, #8]
 8014ac8:	4618      	mov	r0, r3
 8014aca:	f006 fffd 	bl	801bac8 <strncpy>
	ept->addr = src;
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	687a      	ldr	r2, [r7, #4]
 8014ad2:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 8014ad4:	68fb      	ldr	r3, [r7, #12]
 8014ad6:	683a      	ldr	r2, [r7, #0]
 8014ad8:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	69ba      	ldr	r2, [r7, #24]
 8014ade:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8014ae0:	68fb      	ldr	r3, [r7, #12]
 8014ae2:	69fa      	ldr	r2, [r7, #28]
 8014ae4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8014ae6:	bf00      	nop
 8014ae8:	3710      	adds	r7, #16
 8014aea:	46bd      	mov	sp, r7
 8014aec:	bd80      	pop	{r7, pc}

08014aee <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 8014aee:	b580      	push	{r7, lr}
 8014af0:	b084      	sub	sp, #16
 8014af2:	af00      	add	r7, sp, #0
 8014af4:	6078      	str	r0, [r7, #4]
 8014af6:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
 8014af8:	f04f 33ff 	mov.w	r3, #4294967295
 8014afc:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 8014afe:	683b      	ldr	r3, [r7, #0]
 8014b00:	461a      	mov	r2, r3
 8014b02:	2100      	movs	r1, #0
 8014b04:	6878      	ldr	r0, [r7, #4]
 8014b06:	f7ff ffb8 	bl	8014a7a <metal_bitmap_next_clear_bit>
 8014b0a:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
 8014b0c:	683b      	ldr	r3, [r7, #0]
 8014b0e:	68ba      	ldr	r2, [r7, #8]
 8014b10:	429a      	cmp	r2, r3
 8014b12:	d206      	bcs.n	8014b22 <rpmsg_get_address+0x34>
		addr = nextbit;
 8014b14:	68bb      	ldr	r3, [r7, #8]
 8014b16:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
 8014b18:	68bb      	ldr	r3, [r7, #8]
 8014b1a:	4619      	mov	r1, r3
 8014b1c:	6878      	ldr	r0, [r7, #4]
 8014b1e:	f7ff ff48 	bl	80149b2 <metal_bitmap_set_bit>
	}

	return addr;
 8014b22:	68fb      	ldr	r3, [r7, #12]
}
 8014b24:	4618      	mov	r0, r3
 8014b26:	3710      	adds	r7, #16
 8014b28:	46bd      	mov	sp, r7
 8014b2a:	bd80      	pop	{r7, pc}

08014b2c <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 8014b2c:	b580      	push	{r7, lr}
 8014b2e:	b084      	sub	sp, #16
 8014b30:	af00      	add	r7, sp, #0
 8014b32:	60f8      	str	r0, [r7, #12]
 8014b34:	60b9      	str	r1, [r7, #8]
 8014b36:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8014b38:	687a      	ldr	r2, [r7, #4]
 8014b3a:	68bb      	ldr	r3, [r7, #8]
 8014b3c:	429a      	cmp	r2, r3
 8014b3e:	da03      	bge.n	8014b48 <rpmsg_release_address+0x1c>
		metal_bitmap_clear_bit(bitmap, addr);
 8014b40:	6879      	ldr	r1, [r7, #4]
 8014b42:	68f8      	ldr	r0, [r7, #12]
 8014b44:	f7ff ff69 	bl	8014a1a <metal_bitmap_clear_bit>
}
 8014b48:	bf00      	nop
 8014b4a:	3710      	adds	r7, #16
 8014b4c:	46bd      	mov	sp, r7
 8014b4e:	bd80      	pop	{r7, pc}

08014b50 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 8014b50:	b580      	push	{r7, lr}
 8014b52:	b084      	sub	sp, #16
 8014b54:	af00      	add	r7, sp, #0
 8014b56:	60f8      	str	r0, [r7, #12]
 8014b58:	60b9      	str	r1, [r7, #8]
 8014b5a:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8014b5c:	687a      	ldr	r2, [r7, #4]
 8014b5e:	68bb      	ldr	r3, [r7, #8]
 8014b60:	429a      	cmp	r2, r3
 8014b62:	da05      	bge.n	8014b70 <rpmsg_is_address_set+0x20>
		return metal_bitmap_is_bit_set(bitmap, addr);
 8014b64:	6879      	ldr	r1, [r7, #4]
 8014b66:	68f8      	ldr	r0, [r7, #12]
 8014b68:	f7ff ff3f 	bl	80149ea <metal_bitmap_is_bit_set>
 8014b6c:	4603      	mov	r3, r0
 8014b6e:	e000      	b.n	8014b72 <rpmsg_is_address_set+0x22>
	else
		return RPMSG_ERR_PARAM;
 8014b70:	4b02      	ldr	r3, [pc, #8]	; (8014b7c <rpmsg_is_address_set+0x2c>)
}
 8014b72:	4618      	mov	r0, r3
 8014b74:	3710      	adds	r7, #16
 8014b76:	46bd      	mov	sp, r7
 8014b78:	bd80      	pop	{r7, pc}
 8014b7a:	bf00      	nop
 8014b7c:	fffff82d 	.word	0xfffff82d

08014b80 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 8014b80:	b580      	push	{r7, lr}
 8014b82:	b084      	sub	sp, #16
 8014b84:	af00      	add	r7, sp, #0
 8014b86:	60f8      	str	r0, [r7, #12]
 8014b88:	60b9      	str	r1, [r7, #8]
 8014b8a:	607a      	str	r2, [r7, #4]
	if (addr < size) {
 8014b8c:	687a      	ldr	r2, [r7, #4]
 8014b8e:	68bb      	ldr	r3, [r7, #8]
 8014b90:	429a      	cmp	r2, r3
 8014b92:	da05      	bge.n	8014ba0 <rpmsg_set_address+0x20>
		metal_bitmap_set_bit(bitmap, addr);
 8014b94:	6879      	ldr	r1, [r7, #4]
 8014b96:	68f8      	ldr	r0, [r7, #12]
 8014b98:	f7ff ff0b 	bl	80149b2 <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 8014b9c:	2300      	movs	r3, #0
 8014b9e:	e000      	b.n	8014ba2 <rpmsg_set_address+0x22>
	} else {
		return RPMSG_ERR_PARAM;
 8014ba0:	4b02      	ldr	r3, [pc, #8]	; (8014bac <rpmsg_set_address+0x2c>)
	}
}
 8014ba2:	4618      	mov	r0, r3
 8014ba4:	3710      	adds	r7, #16
 8014ba6:	46bd      	mov	sp, r7
 8014ba8:	bd80      	pop	{r7, pc}
 8014baa:	bf00      	nop
 8014bac:	fffff82d 	.word	0xfffff82d

08014bb0 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 8014bb0:	b590      	push	{r4, r7, lr}
 8014bb2:	b089      	sub	sp, #36	; 0x24
 8014bb4:	af02      	add	r7, sp, #8
 8014bb6:	60f8      	str	r0, [r7, #12]
 8014bb8:	60b9      	str	r1, [r7, #8]
 8014bba:	607a      	str	r2, [r7, #4]
 8014bbc:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d00a      	beq.n	8014bda <rpmsg_send_offchannel_raw+0x2a>
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	6a1b      	ldr	r3, [r3, #32]
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d006      	beq.n	8014bda <rpmsg_send_offchannel_raw+0x2a>
 8014bcc:	683b      	ldr	r3, [r7, #0]
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d003      	beq.n	8014bda <rpmsg_send_offchannel_raw+0x2a>
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bd8:	d101      	bne.n	8014bde <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
 8014bda:	4b0d      	ldr	r3, [pc, #52]	; (8014c10 <rpmsg_send_offchannel_raw+0x60>)
 8014bdc:	e014      	b.n	8014c08 <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	6a1b      	ldr	r3, [r3, #32]
 8014be2:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
 8014be4:	697b      	ldr	r3, [r7, #20]
 8014be6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d00c      	beq.n	8014c06 <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 8014bec:	697b      	ldr	r3, [r7, #20]
 8014bee:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8014bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bf2:	9301      	str	r3, [sp, #4]
 8014bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bf6:	9300      	str	r3, [sp, #0]
 8014bf8:	683b      	ldr	r3, [r7, #0]
 8014bfa:	687a      	ldr	r2, [r7, #4]
 8014bfc:	68b9      	ldr	r1, [r7, #8]
 8014bfe:	6978      	ldr	r0, [r7, #20]
 8014c00:	47a0      	blx	r4
 8014c02:	4603      	mov	r3, r0
 8014c04:	e000      	b.n	8014c08 <rpmsg_send_offchannel_raw+0x58>
						      size, wait);

	return RPMSG_ERR_PARAM;
 8014c06:	4b02      	ldr	r3, [pc, #8]	; (8014c10 <rpmsg_send_offchannel_raw+0x60>)
}
 8014c08:	4618      	mov	r0, r3
 8014c0a:	371c      	adds	r7, #28
 8014c0c:	46bd      	mov	sp, r7
 8014c0e:	bd90      	pop	{r4, r7, pc}
 8014c10:	fffff82d 	.word	0xfffff82d

08014c14 <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 8014c14:	b580      	push	{r7, lr}
 8014c16:	b090      	sub	sp, #64	; 0x40
 8014c18:	af02      	add	r7, sp, #8
 8014c1a:	6078      	str	r0, [r7, #4]
 8014c1c:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 8014c1e:	683b      	ldr	r3, [r7, #0]
 8014c20:	633b      	str	r3, [r7, #48]	; 0x30
	ns_msg.addr = ept->addr;
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c26:	62fb      	str	r3, [r7, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 8014c28:	6879      	ldr	r1, [r7, #4]
 8014c2a:	f107 030c 	add.w	r3, r7, #12
 8014c2e:	2220      	movs	r2, #32
 8014c30:	4618      	mov	r0, r3
 8014c32:	f006 ff49 	bl	801bac8 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8014c3a:	f107 030c 	add.w	r3, r7, #12
 8014c3e:	2201      	movs	r2, #1
 8014c40:	9201      	str	r2, [sp, #4]
 8014c42:	2228      	movs	r2, #40	; 0x28
 8014c44:	9200      	str	r2, [sp, #0]
 8014c46:	2235      	movs	r2, #53	; 0x35
 8014c48:	6878      	ldr	r0, [r7, #4]
 8014c4a:	f7ff ffb1 	bl	8014bb0 <rpmsg_send_offchannel_raw>
 8014c4e:	6378      	str	r0, [r7, #52]	; 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 8014c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	da01      	bge.n	8014c5a <rpmsg_send_ns_message+0x46>
		return ret;
 8014c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c58:	e000      	b.n	8014c5c <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
 8014c5a:	2300      	movs	r3, #0
}
 8014c5c:	4618      	mov	r0, r3
 8014c5e:	3738      	adds	r7, #56	; 0x38
 8014c60:	46bd      	mov	sp, r7
 8014c62:	bd80      	pop	{r7, pc}

08014c64 <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 8014c64:	b580      	push	{r7, lr}
 8014c66:	b088      	sub	sp, #32
 8014c68:	af00      	add	r7, sp, #0
 8014c6a:	60f8      	str	r0, [r7, #12]
 8014c6c:	60b9      	str	r1, [r7, #8]
 8014c6e:	607a      	str	r2, [r7, #4]
 8014c70:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	61fb      	str	r3, [r7, #28]
 8014c78:	e04b      	b.n	8014d12 <rpmsg_get_endpoint+0xae>
		int name_match = 0;
 8014c7a:	2300      	movs	r3, #0
 8014c7c:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 8014c7e:	69fb      	ldr	r3, [r7, #28]
 8014c80:	3b34      	subs	r3, #52	; 0x34
 8014c82:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c8a:	d006      	beq.n	8014c9a <rpmsg_get_endpoint+0x36>
 8014c8c:	697b      	ldr	r3, [r7, #20]
 8014c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c90:	687a      	ldr	r2, [r7, #4]
 8014c92:	429a      	cmp	r2, r3
 8014c94:	d101      	bne.n	8014c9a <rpmsg_get_endpoint+0x36>
			return ept;
 8014c96:	697b      	ldr	r3, [r7, #20]
 8014c98:	e040      	b.n	8014d1c <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 8014c9a:	697b      	ldr	r3, [r7, #20]
 8014c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c9e:	687a      	ldr	r2, [r7, #4]
 8014ca0:	429a      	cmp	r2, r3
 8014ca2:	d106      	bne.n	8014cb2 <rpmsg_get_endpoint+0x4e>
 8014ca4:	697b      	ldr	r3, [r7, #20]
 8014ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ca8:	683a      	ldr	r2, [r7, #0]
 8014caa:	429a      	cmp	r2, r3
 8014cac:	d101      	bne.n	8014cb2 <rpmsg_get_endpoint+0x4e>
			return ept;
 8014cae:	697b      	ldr	r3, [r7, #20]
 8014cb0:	e034      	b.n	8014d1c <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
 8014cb2:	68bb      	ldr	r3, [r7, #8]
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d00c      	beq.n	8014cd2 <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
 8014cb8:	697b      	ldr	r3, [r7, #20]
 8014cba:	2220      	movs	r2, #32
 8014cbc:	68b9      	ldr	r1, [r7, #8]
 8014cbe:	4618      	mov	r0, r3
 8014cc0:	f006 fef0 	bl	801baa4 <strncmp>
 8014cc4:	4603      	mov	r3, r0
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	bf0c      	ite	eq
 8014cca:	2301      	moveq	r3, #1
 8014ccc:	2300      	movne	r3, #0
 8014cce:	b2db      	uxtb	r3, r3
 8014cd0:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
 8014cd2:	68bb      	ldr	r3, [r7, #8]
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d018      	beq.n	8014d0a <rpmsg_get_endpoint+0xa6>
 8014cd8:	69bb      	ldr	r3, [r7, #24]
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d015      	beq.n	8014d0a <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address*/
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 8014cde:	683b      	ldr	r3, [r7, #0]
 8014ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ce4:	d006      	beq.n	8014cf4 <rpmsg_get_endpoint+0x90>
 8014ce6:	697b      	ldr	r3, [r7, #20]
 8014ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014cea:	683a      	ldr	r2, [r7, #0]
 8014cec:	429a      	cmp	r2, r3
 8014cee:	d101      	bne.n	8014cf4 <rpmsg_get_endpoint+0x90>
			return ept;
 8014cf0:	697b      	ldr	r3, [r7, #20]
 8014cf2:	e013      	b.n	8014d1c <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept*/
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014cfa:	d107      	bne.n	8014d0c <rpmsg_get_endpoint+0xa8>
 8014cfc:	697b      	ldr	r3, [r7, #20]
 8014cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d04:	d102      	bne.n	8014d0c <rpmsg_get_endpoint+0xa8>
			return ept;
 8014d06:	697b      	ldr	r3, [r7, #20]
 8014d08:	e008      	b.n	8014d1c <rpmsg_get_endpoint+0xb8>
			continue;
 8014d0a:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
 8014d0c:	69fb      	ldr	r3, [r7, #28]
 8014d0e:	681b      	ldr	r3, [r3, #0]
 8014d10:	61fb      	str	r3, [r7, #28]
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	69fa      	ldr	r2, [r7, #28]
 8014d16:	429a      	cmp	r2, r3
 8014d18:	d1af      	bne.n	8014c7a <rpmsg_get_endpoint+0x16>
	}
	return NULL;
 8014d1a:	2300      	movs	r3, #0
}
 8014d1c:	4618      	mov	r0, r3
 8014d1e:	3720      	adds	r7, #32
 8014d20:	46bd      	mov	sp, r7
 8014d22:	bd80      	pop	{r7, pc}

08014d24 <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 8014d24:	b580      	push	{r7, lr}
 8014d26:	b084      	sub	sp, #16
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d016      	beq.n	8014d60 <rpmsg_unregister_endpoint+0x3c>
		return;

	rdev = ept->rdev;
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	6a1b      	ldr	r3, [r3, #32]
 8014d36:	60fb      	str	r3, [r7, #12]

	if (ept->addr != RPMSG_ADDR_ANY)
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d40:	d008      	beq.n	8014d54 <rpmsg_unregister_endpoint+0x30>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	f103 0048 	add.w	r0, r3, #72	; 0x48
				      ept->addr);
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8014d4c:	461a      	mov	r2, r3
 8014d4e:	2180      	movs	r1, #128	; 0x80
 8014d50:	f7ff feec 	bl	8014b2c <rpmsg_release_address>
	metal_list_del(&ept->node);
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	3334      	adds	r3, #52	; 0x34
 8014d58:	4618      	mov	r0, r3
 8014d5a:	f7ff fe0f 	bl	801497c <metal_list_del>
 8014d5e:	e000      	b.n	8014d62 <rpmsg_unregister_endpoint+0x3e>
		return;
 8014d60:	bf00      	nop
}
 8014d62:	3710      	adds	r7, #16
 8014d64:	46bd      	mov	sp, r7
 8014d66:	bd80      	pop	{r7, pc}

08014d68 <rpmsg_register_endpoint>:

int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept)
{
 8014d68:	b580      	push	{r7, lr}
 8014d6a:	b082      	sub	sp, #8
 8014d6c:	af00      	add	r7, sp, #0
 8014d6e:	6078      	str	r0, [r7, #4]
 8014d70:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
 8014d72:	683b      	ldr	r3, [r7, #0]
 8014d74:	687a      	ldr	r2, [r7, #4]
 8014d76:	621a      	str	r2, [r3, #32]

	metal_list_add_tail(&rdev->endpoints, &ept->node);
 8014d78:	687a      	ldr	r2, [r7, #4]
 8014d7a:	683b      	ldr	r3, [r7, #0]
 8014d7c:	3334      	adds	r3, #52	; 0x34
 8014d7e:	4619      	mov	r1, r3
 8014d80:	4610      	mov	r0, r2
 8014d82:	f7ff fdee 	bl	8014962 <metal_list_add_tail>
	return RPMSG_SUCCESS;
 8014d86:	2300      	movs	r3, #0
}
 8014d88:	4618      	mov	r0, r3
 8014d8a:	3708      	adds	r7, #8
 8014d8c:	46bd      	mov	sp, r7
 8014d8e:	bd80      	pop	{r7, pc}

08014d90 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 8014d90:	b580      	push	{r7, lr}
 8014d92:	b088      	sub	sp, #32
 8014d94:	af02      	add	r7, sp, #8
 8014d96:	60f8      	str	r0, [r7, #12]
 8014d98:	60b9      	str	r1, [r7, #8]
 8014d9a:	607a      	str	r2, [r7, #4]
 8014d9c:	603b      	str	r3, [r7, #0]
	int status;
	uint32_t addr = src;
 8014d9e:	683b      	ldr	r3, [r7, #0]
 8014da0:	613b      	str	r3, [r7, #16]

	if (!ept)
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d101      	bne.n	8014dac <rpmsg_create_ept+0x1c>
		return RPMSG_ERR_PARAM;
 8014da8:	4b37      	ldr	r3, [pc, #220]	; (8014e88 <rpmsg_create_ept+0xf8>)
 8014daa:	e068      	b.n	8014e7e <rpmsg_create_ept+0xee>

	metal_mutex_acquire(&rdev->lock);
 8014dac:	68bb      	ldr	r3, [r7, #8]
 8014dae:	3358      	adds	r3, #88	; 0x58
 8014db0:	4618      	mov	r0, r3
 8014db2:	f7ff fda6 	bl	8014902 <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 8014db6:	683b      	ldr	r3, [r7, #0]
 8014db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014dbc:	d018      	beq.n	8014df0 <rpmsg_create_ept+0x60>
		status = rpmsg_is_address_set(rdev->bitmap,
 8014dbe:	68bb      	ldr	r3, [r7, #8]
 8014dc0:	3348      	adds	r3, #72	; 0x48
 8014dc2:	683a      	ldr	r2, [r7, #0]
 8014dc4:	2180      	movs	r1, #128	; 0x80
 8014dc6:	4618      	mov	r0, r3
 8014dc8:	f7ff fec2 	bl	8014b50 <rpmsg_is_address_set>
 8014dcc:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 8014dce:	697b      	ldr	r3, [r7, #20]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d107      	bne.n	8014de4 <rpmsg_create_ept+0x54>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8014dd4:	68bb      	ldr	r3, [r7, #8]
 8014dd6:	3348      	adds	r3, #72	; 0x48
 8014dd8:	683a      	ldr	r2, [r7, #0]
 8014dda:	2180      	movs	r1, #128	; 0x80
 8014ddc:	4618      	mov	r0, r3
 8014dde:	f7ff fecf 	bl	8014b80 <rpmsg_set_address>
 8014de2:	e00c      	b.n	8014dfe <rpmsg_create_ept+0x6e>
					  src);
		} else if (status > 0) {
 8014de4:	697b      	ldr	r3, [r7, #20]
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	dd40      	ble.n	8014e6c <rpmsg_create_ept+0xdc>
			status = RPMSG_SUCCESS;
 8014dea:	2300      	movs	r3, #0
 8014dec:	617b      	str	r3, [r7, #20]
			goto ret_status;
 8014dee:	e040      	b.n	8014e72 <rpmsg_create_ept+0xe2>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 8014df0:	68bb      	ldr	r3, [r7, #8]
 8014df2:	3348      	adds	r3, #72	; 0x48
 8014df4:	2180      	movs	r1, #128	; 0x80
 8014df6:	4618      	mov	r0, r3
 8014df8:	f7ff fe79 	bl	8014aee <rpmsg_get_address>
 8014dfc:	6138      	str	r0, [r7, #16]
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 8014dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e00:	9301      	str	r3, [sp, #4]
 8014e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e04:	9300      	str	r3, [sp, #0]
 8014e06:	6a3b      	ldr	r3, [r7, #32]
 8014e08:	693a      	ldr	r2, [r7, #16]
 8014e0a:	6879      	ldr	r1, [r7, #4]
 8014e0c:	68f8      	ldr	r0, [r7, #12]
 8014e0e:	f7ff fe51 	bl	8014ab4 <rpmsg_init_ept>

	status = rpmsg_register_endpoint(rdev, ept);
 8014e12:	68f9      	ldr	r1, [r7, #12]
 8014e14:	68b8      	ldr	r0, [r7, #8]
 8014e16:	f7ff ffa7 	bl	8014d68 <rpmsg_register_endpoint>
 8014e1a:	6178      	str	r0, [r7, #20]
	if (status < 0)
 8014e1c:	697b      	ldr	r3, [r7, #20]
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	da06      	bge.n	8014e30 <rpmsg_create_ept+0xa0>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE, addr);
 8014e22:	68bb      	ldr	r3, [r7, #8]
 8014e24:	3348      	adds	r3, #72	; 0x48
 8014e26:	693a      	ldr	r2, [r7, #16]
 8014e28:	2180      	movs	r1, #128	; 0x80
 8014e2a:	4618      	mov	r0, r3
 8014e2c:	f7ff fe7e 	bl	8014b2c <rpmsg_release_address>

	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
 8014e30:	697b      	ldr	r3, [r7, #20]
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d11c      	bne.n	8014e70 <rpmsg_create_ept+0xe0>
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e3e:	d117      	bne.n	8014e70 <rpmsg_create_ept+0xe0>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 8014e40:	68bb      	ldr	r3, [r7, #8]
 8014e42:	3358      	adds	r3, #88	; 0x58
 8014e44:	4618      	mov	r0, r3
 8014e46:	f7ff fd67 	bl	8014918 <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 8014e4a:	2100      	movs	r1, #0
 8014e4c:	68f8      	ldr	r0, [r7, #12]
 8014e4e:	f7ff fee1 	bl	8014c14 <rpmsg_send_ns_message>
 8014e52:	6178      	str	r0, [r7, #20]
		metal_mutex_acquire(&rdev->lock);
 8014e54:	68bb      	ldr	r3, [r7, #8]
 8014e56:	3358      	adds	r3, #88	; 0x58
 8014e58:	4618      	mov	r0, r3
 8014e5a:	f7ff fd52 	bl	8014902 <metal_mutex_acquire>
		if (status)
 8014e5e:	697b      	ldr	r3, [r7, #20]
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d005      	beq.n	8014e70 <rpmsg_create_ept+0xe0>
			rpmsg_unregister_endpoint(ept);
 8014e64:	68f8      	ldr	r0, [r7, #12]
 8014e66:	f7ff ff5d 	bl	8014d24 <rpmsg_unregister_endpoint>
 8014e6a:	e002      	b.n	8014e72 <rpmsg_create_ept+0xe2>
			goto ret_status;
 8014e6c:	bf00      	nop
 8014e6e:	e000      	b.n	8014e72 <rpmsg_create_ept+0xe2>
	}

ret_status:
 8014e70:	bf00      	nop
	metal_mutex_release(&rdev->lock);
 8014e72:	68bb      	ldr	r3, [r7, #8]
 8014e74:	3358      	adds	r3, #88	; 0x58
 8014e76:	4618      	mov	r0, r3
 8014e78:	f7ff fd4e 	bl	8014918 <metal_mutex_release>
	return status;
 8014e7c:	697b      	ldr	r3, [r7, #20]
}
 8014e7e:	4618      	mov	r0, r3
 8014e80:	3718      	adds	r7, #24
 8014e82:	46bd      	mov	sp, r7
 8014e84:	bd80      	pop	{r7, pc}
 8014e86:	bf00      	nop
 8014e88:	fffff82d 	.word	0xfffff82d

08014e8c <__metal_cache_invalidate>:
{
 8014e8c:	b580      	push	{r7, lr}
 8014e8e:	b082      	sub	sp, #8
 8014e90:	af00      	add	r7, sp, #0
 8014e92:	6078      	str	r0, [r7, #4]
 8014e94:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8014e96:	6839      	ldr	r1, [r7, #0]
 8014e98:	6878      	ldr	r0, [r7, #4]
 8014e9a:	f000 fcc2 	bl	8015822 <metal_machine_cache_invalidate>
}
 8014e9e:	bf00      	nop
 8014ea0:	3708      	adds	r7, #8
 8014ea2:	46bd      	mov	sp, r7
 8014ea4:	bd80      	pop	{r7, pc}

08014ea6 <metal_cache_invalidate>:
{
 8014ea6:	b580      	push	{r7, lr}
 8014ea8:	b082      	sub	sp, #8
 8014eaa:	af00      	add	r7, sp, #0
 8014eac:	6078      	str	r0, [r7, #4]
 8014eae:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8014eb0:	6839      	ldr	r1, [r7, #0]
 8014eb2:	6878      	ldr	r0, [r7, #4]
 8014eb4:	f7ff ffea 	bl	8014e8c <__metal_cache_invalidate>
}
 8014eb8:	bf00      	nop
 8014eba:	3708      	adds	r7, #8
 8014ebc:	46bd      	mov	sp, r7
 8014ebe:	bd80      	pop	{r7, pc}

08014ec0 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 8014ec0:	b480      	push	{r7}
 8014ec2:	b083      	sub	sp, #12
 8014ec4:	af00      	add	r7, sp, #0
 8014ec6:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
 8014ec8:	2300      	movs	r3, #0
}
 8014eca:	4618      	mov	r0, r3
 8014ecc:	370c      	adds	r7, #12
 8014ece:	46bd      	mov	sp, r7
 8014ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ed4:	4770      	bx	lr

08014ed6 <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 8014ed6:	b580      	push	{r7, lr}
 8014ed8:	b082      	sub	sp, #8
 8014eda:	af00      	add	r7, sp, #0
 8014edc:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
 8014ede:	6878      	ldr	r0, [r7, #4]
 8014ee0:	f7ff ffee 	bl	8014ec0 <__metal_sleep_usec>
 8014ee4:	4603      	mov	r3, r0
}
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	3708      	adds	r7, #8
 8014eea:	46bd      	mov	sp, r7
 8014eec:	bd80      	pop	{r7, pc}

08014eee <metal_list_init>:
{
 8014eee:	b480      	push	{r7}
 8014ef0:	b083      	sub	sp, #12
 8014ef2:	af00      	add	r7, sp, #0
 8014ef4:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	687a      	ldr	r2, [r7, #4]
 8014efa:	605a      	str	r2, [r3, #4]
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	685a      	ldr	r2, [r3, #4]
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	601a      	str	r2, [r3, #0]
}
 8014f04:	bf00      	nop
 8014f06:	370c      	adds	r7, #12
 8014f08:	46bd      	mov	sp, r7
 8014f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f0e:	4770      	bx	lr

08014f10 <metal_io_virt_to_offset>:
{
 8014f10:	b480      	push	{r7}
 8014f12:	b085      	sub	sp, #20
 8014f14:	af00      	add	r7, sp, #0
 8014f16:	6078      	str	r0, [r7, #4]
 8014f18:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	683a      	ldr	r2, [r7, #0]
 8014f20:	1ad3      	subs	r3, r2, r3
 8014f22:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	689b      	ldr	r3, [r3, #8]
 8014f28:	68fa      	ldr	r2, [r7, #12]
 8014f2a:	429a      	cmp	r2, r3
 8014f2c:	d201      	bcs.n	8014f32 <metal_io_virt_to_offset+0x22>
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	e001      	b.n	8014f36 <metal_io_virt_to_offset+0x26>
 8014f32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014f36:	4618      	mov	r0, r3
 8014f38:	3714      	adds	r7, #20
 8014f3a:	46bd      	mov	sp, r7
 8014f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f40:	4770      	bx	lr

08014f42 <__metal_mutex_init>:
{
 8014f42:	b480      	push	{r7}
 8014f44:	b085      	sub	sp, #20
 8014f46:	af00      	add	r7, sp, #0
 8014f48:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, 0);
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	60fb      	str	r3, [r7, #12]
 8014f4e:	2300      	movs	r3, #0
 8014f50:	60bb      	str	r3, [r7, #8]
 8014f52:	68bb      	ldr	r3, [r7, #8]
 8014f54:	461a      	mov	r2, r3
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	f3bf 8f5b 	dmb	ish
 8014f5c:	601a      	str	r2, [r3, #0]
 8014f5e:	f3bf 8f5b 	dmb	ish
}
 8014f62:	bf00      	nop
 8014f64:	3714      	adds	r7, #20
 8014f66:	46bd      	mov	sp, r7
 8014f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f6c:	4770      	bx	lr

08014f6e <__metal_mutex_acquire>:
{
 8014f6e:	b480      	push	{r7}
 8014f70:	b083      	sub	sp, #12
 8014f72:	af00      	add	r7, sp, #0
 8014f74:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8014f76:	bf00      	nop
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	2201      	movs	r2, #1
 8014f7c:	4611      	mov	r1, r2
 8014f7e:	f3bf 8f5b 	dmb	ish
 8014f82:	e8d3 2f4f 	ldrexb	r2, [r3]
 8014f86:	e8c3 1f40 	strexb	r0, r1, [r3]
 8014f8a:	2800      	cmp	r0, #0
 8014f8c:	d1f9      	bne.n	8014f82 <__metal_mutex_acquire+0x14>
 8014f8e:	f3bf 8f5b 	dmb	ish
 8014f92:	b2d3      	uxtb	r3, r2
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	d1ef      	bne.n	8014f78 <__metal_mutex_acquire+0xa>
}
 8014f98:	bf00      	nop
 8014f9a:	bf00      	nop
 8014f9c:	370c      	adds	r7, #12
 8014f9e:	46bd      	mov	sp, r7
 8014fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fa4:	4770      	bx	lr

08014fa6 <__metal_mutex_release>:
{
 8014fa6:	b480      	push	{r7}
 8014fa8:	b083      	sub	sp, #12
 8014faa:	af00      	add	r7, sp, #0
 8014fac:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	f3bf 8f5b 	dmb	ish
 8014fb4:	2200      	movs	r2, #0
 8014fb6:	701a      	strb	r2, [r3, #0]
 8014fb8:	f3bf 8f5b 	dmb	ish
}
 8014fbc:	bf00      	nop
 8014fbe:	370c      	adds	r7, #12
 8014fc0:	46bd      	mov	sp, r7
 8014fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fc6:	4770      	bx	lr

08014fc8 <metal_mutex_init>:
{
 8014fc8:	b580      	push	{r7, lr}
 8014fca:	b082      	sub	sp, #8
 8014fcc:	af00      	add	r7, sp, #0
 8014fce:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
 8014fd0:	6878      	ldr	r0, [r7, #4]
 8014fd2:	f7ff ffb6 	bl	8014f42 <__metal_mutex_init>
}
 8014fd6:	bf00      	nop
 8014fd8:	3708      	adds	r7, #8
 8014fda:	46bd      	mov	sp, r7
 8014fdc:	bd80      	pop	{r7, pc}

08014fde <metal_mutex_acquire>:
{
 8014fde:	b580      	push	{r7, lr}
 8014fe0:	b082      	sub	sp, #8
 8014fe2:	af00      	add	r7, sp, #0
 8014fe4:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 8014fe6:	6878      	ldr	r0, [r7, #4]
 8014fe8:	f7ff ffc1 	bl	8014f6e <__metal_mutex_acquire>
}
 8014fec:	bf00      	nop
 8014fee:	3708      	adds	r7, #8
 8014ff0:	46bd      	mov	sp, r7
 8014ff2:	bd80      	pop	{r7, pc}

08014ff4 <metal_mutex_release>:
{
 8014ff4:	b580      	push	{r7, lr}
 8014ff6:	b082      	sub	sp, #8
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8014ffc:	6878      	ldr	r0, [r7, #4]
 8014ffe:	f7ff ffd2 	bl	8014fa6 <__metal_mutex_release>
}
 8015002:	bf00      	nop
 8015004:	3708      	adds	r7, #8
 8015006:	46bd      	mov	sp, r7
 8015008:	bd80      	pop	{r7, pc}

0801500a <rpmsg_init_ept>:
{
 801500a:	b580      	push	{r7, lr}
 801500c:	b084      	sub	sp, #16
 801500e:	af00      	add	r7, sp, #0
 8015010:	60f8      	str	r0, [r7, #12]
 8015012:	60b9      	str	r1, [r7, #8]
 8015014:	607a      	str	r2, [r7, #4]
 8015016:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8015018:	68fb      	ldr	r3, [r7, #12]
 801501a:	2220      	movs	r2, #32
 801501c:	68b9      	ldr	r1, [r7, #8]
 801501e:	4618      	mov	r0, r3
 8015020:	f006 fd52 	bl	801bac8 <strncpy>
	ept->addr = src;
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	687a      	ldr	r2, [r7, #4]
 8015028:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	683a      	ldr	r2, [r7, #0]
 801502e:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	69ba      	ldr	r2, [r7, #24]
 8015034:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	69fa      	ldr	r2, [r7, #28]
 801503a:	631a      	str	r2, [r3, #48]	; 0x30
}
 801503c:	bf00      	nop
 801503e:	3710      	adds	r7, #16
 8015040:	46bd      	mov	sp, r7
 8015042:	bd80      	pop	{r7, pc}

08015044 <rpmsg_virtio_get_role>:

#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER
static inline unsigned int
	rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 8015044:	b480      	push	{r7}
 8015046:	b083      	sub	sp, #12
 8015048:	af00      	add	r7, sp, #0
 801504a:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015050:	699b      	ldr	r3, [r3, #24]
}
 8015052:	4618      	mov	r0, r3
 8015054:	370c      	adds	r7, #12
 8015056:	46bd      	mov	sp, r7
 8015058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801505c:	4770      	bx	lr

0801505e <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 801505e:	b580      	push	{r7, lr}
 8015060:	b082      	sub	sp, #8
 8015062:	af00      	add	r7, sp, #0
 8015064:	6078      	str	r0, [r7, #4]
 8015066:	460b      	mov	r3, r1
 8015068:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801506e:	6a1b      	ldr	r3, [r3, #32]
 8015070:	685b      	ldr	r3, [r3, #4]
 8015072:	687a      	ldr	r2, [r7, #4]
 8015074:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8015076:	78f9      	ldrb	r1, [r7, #3]
 8015078:	4610      	mov	r0, r2
 801507a:	4798      	blx	r3
}
 801507c:	bf00      	nop
 801507e:	3708      	adds	r7, #8
 8015080:	46bd      	mov	sp, r7
 8015082:	bd80      	pop	{r7, pc}

08015084 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 8015084:	b580      	push	{r7, lr}
 8015086:	b082      	sub	sp, #8
 8015088:	af00      	add	r7, sp, #0
 801508a:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015090:	6a1b      	ldr	r3, [r3, #32]
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	687a      	ldr	r2, [r7, #4]
 8015096:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8015098:	4610      	mov	r0, r2
 801509a:	4798      	blx	r3
 801509c:	4603      	mov	r3, r0
}
 801509e:	4618      	mov	r0, r3
 80150a0:	3708      	adds	r7, #8
 80150a2:	46bd      	mov	sp, r7
 80150a4:	bd80      	pop	{r7, pc}

080150a6 <rpmsg_virtio_get_features>:

static inline uint32_t
	rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 80150a6:	b580      	push	{r7, lr}
 80150a8:	b082      	sub	sp, #8
 80150aa:	af00      	add	r7, sp, #0
 80150ac:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80150b2:	6a1b      	ldr	r3, [r3, #32]
 80150b4:	689b      	ldr	r3, [r3, #8]
 80150b6:	687a      	ldr	r2, [r7, #4]
 80150b8:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80150ba:	4610      	mov	r0, r2
 80150bc:	4798      	blx	r3
 80150be:	4603      	mov	r3, r0
}
 80150c0:	4618      	mov	r0, r3
 80150c2:	3708      	adds	r7, #8
 80150c4:	46bd      	mov	sp, r7
 80150c6:	bd80      	pop	{r7, pc}

080150c8 <rpmsg_virtio_create_virtqueues>:
static inline int
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
 80150c8:	b580      	push	{r7, lr}
 80150ca:	b086      	sub	sp, #24
 80150cc:	af02      	add	r7, sp, #8
 80150ce:	60f8      	str	r0, [r7, #12]
 80150d0:	60b9      	str	r1, [r7, #8]
 80150d2:	607a      	str	r2, [r7, #4]
 80150d4:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80150da:	68b9      	ldr	r1, [r7, #8]
 80150dc:	69bb      	ldr	r3, [r7, #24]
 80150de:	9300      	str	r3, [sp, #0]
 80150e0:	683b      	ldr	r3, [r7, #0]
 80150e2:	687a      	ldr	r2, [r7, #4]
 80150e4:	f000 fbf2 	bl	80158cc <virtio_create_virtqueues>
 80150e8:	4603      	mov	r3, r0
					callbacks);
}
 80150ea:	4618      	mov	r0, r3
 80150ec:	3710      	adds	r7, #16
 80150ee:	46bd      	mov	sp, r7
 80150f0:	bd80      	pop	{r7, pc}

080150f2 <rpmsg_get_ept_from_addr>:
int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 80150f2:	b580      	push	{r7, lr}
 80150f4:	b082      	sub	sp, #8
 80150f6:	af00      	add	r7, sp, #0
 80150f8:	6078      	str	r0, [r7, #4]
 80150fa:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 80150fc:	f04f 33ff 	mov.w	r3, #4294967295
 8015100:	683a      	ldr	r2, [r7, #0]
 8015102:	2100      	movs	r1, #0
 8015104:	6878      	ldr	r0, [r7, #4]
 8015106:	f7ff fdad 	bl	8014c64 <rpmsg_get_endpoint>
 801510a:	4603      	mov	r3, r0
}
 801510c:	4618      	mov	r0, r3
 801510e:	3708      	adds	r7, #8
 8015110:	46bd      	mov	sp, r7
 8015112:	bd80      	pop	{r7, pc}

08015114 <rpmsg_virtio_shm_pool_get_buffer>:

#ifndef VIRTIO_SLAVE_ONLY
metal_weak void *
rpmsg_virtio_shm_pool_get_buffer(struct rpmsg_virtio_shm_pool *shpool,
				 size_t size)
{
 8015114:	b480      	push	{r7}
 8015116:	b085      	sub	sp, #20
 8015118:	af00      	add	r7, sp, #0
 801511a:	6078      	str	r0, [r7, #4]
 801511c:	6039      	str	r1, [r7, #0]
	void *buffer;

	if (shpool->avail < size)
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	685b      	ldr	r3, [r3, #4]
 8015122:	683a      	ldr	r2, [r7, #0]
 8015124:	429a      	cmp	r2, r3
 8015126:	d901      	bls.n	801512c <rpmsg_virtio_shm_pool_get_buffer+0x18>
		return NULL;
 8015128:	2300      	movs	r3, #0
 801512a:	e00f      	b.n	801514c <rpmsg_virtio_shm_pool_get_buffer+0x38>
	buffer =  (void *)((char *)shpool->base + shpool->size - shpool->avail);
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	681a      	ldr	r2, [r3, #0]
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	6899      	ldr	r1, [r3, #8]
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	685b      	ldr	r3, [r3, #4]
 8015138:	1acb      	subs	r3, r1, r3
 801513a:	4413      	add	r3, r2
 801513c:	60fb      	str	r3, [r7, #12]
	shpool->avail -= size;
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	685a      	ldr	r2, [r3, #4]
 8015142:	683b      	ldr	r3, [r7, #0]
 8015144:	1ad2      	subs	r2, r2, r3
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	605a      	str	r2, [r3, #4]

	return buffer;
 801514a:	68fb      	ldr	r3, [r7, #12]
}
 801514c:	4618      	mov	r0, r3
 801514e:	3714      	adds	r7, #20
 8015150:	46bd      	mov	sp, r7
 8015152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015156:	4770      	bx	lr

08015158 <rpmsg_virtio_init_shm_pool>:
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 8015158:	b480      	push	{r7}
 801515a:	b085      	sub	sp, #20
 801515c:	af00      	add	r7, sp, #0
 801515e:	60f8      	str	r0, [r7, #12]
 8015160:	60b9      	str	r1, [r7, #8]
 8015162:	607a      	str	r2, [r7, #4]
	if (!shpool)
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d01d      	beq.n	80151a6 <rpmsg_virtio_init_shm_pool+0x4e>
		return;
	shpool->base = shb;
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	68ba      	ldr	r2, [r7, #8]
 801516e:	601a      	str	r2, [r3, #0]
	shpool->size = WORD_ALIGN(size);
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	f003 0303 	and.w	r3, r3, #3
 8015176:	2b00      	cmp	r3, #0
 8015178:	d004      	beq.n	8015184 <rpmsg_virtio_init_shm_pool+0x2c>
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	f023 0303 	bic.w	r3, r3, #3
 8015180:	3304      	adds	r3, #4
 8015182:	e000      	b.n	8015186 <rpmsg_virtio_init_shm_pool+0x2e>
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	68fa      	ldr	r2, [r7, #12]
 8015188:	6093      	str	r3, [r2, #8]
	shpool->avail = WORD_ALIGN(size);
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	f003 0303 	and.w	r3, r3, #3
 8015190:	2b00      	cmp	r3, #0
 8015192:	d004      	beq.n	801519e <rpmsg_virtio_init_shm_pool+0x46>
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	f023 0303 	bic.w	r3, r3, #3
 801519a:	3304      	adds	r3, #4
 801519c:	e000      	b.n	80151a0 <rpmsg_virtio_init_shm_pool+0x48>
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	68fa      	ldr	r2, [r7, #12]
 80151a2:	6053      	str	r3, [r2, #4]
 80151a4:	e000      	b.n	80151a8 <rpmsg_virtio_init_shm_pool+0x50>
		return;
 80151a6:	bf00      	nop
}
 80151a8:	3714      	adds	r7, #20
 80151aa:	46bd      	mov	sp, r7
 80151ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151b0:	4770      	bx	lr

080151b2 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 80151b2:	b580      	push	{r7, lr}
 80151b4:	b08a      	sub	sp, #40	; 0x28
 80151b6:	af02      	add	r7, sp, #8
 80151b8:	60f8      	str	r0, [r7, #12]
 80151ba:	60b9      	str	r1, [r7, #8]
 80151bc:	607a      	str	r2, [r7, #4]
 80151be:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 80151c0:	68f8      	ldr	r0, [r7, #12]
 80151c2:	f7ff ff3f 	bl	8015044 <rpmsg_virtio_get_role>
 80151c6:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 80151c8:	69fb      	ldr	r3, [r7, #28]
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d10d      	bne.n	80151ea <rpmsg_virtio_return_buffer+0x38>
		struct virtqueue_buf vqbuf;

		(void)idx;
		/* Initialize buffer node */
		vqbuf.buf = buffer;
 80151ce:	68bb      	ldr	r3, [r7, #8]
 80151d0:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	61bb      	str	r3, [r7, #24]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80151da:	f107 0114 	add.w	r1, r7, #20
 80151de:	68bb      	ldr	r3, [r7, #8]
 80151e0:	9300      	str	r3, [sp, #0]
 80151e2:	2301      	movs	r3, #1
 80151e4:	2200      	movs	r2, #0
 80151e6:	f000 fcc0 	bl	8015b6a <virtqueue_add_buffer>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 80151ea:	bf00      	nop
 80151ec:	3720      	adds	r7, #32
 80151ee:	46bd      	mov	sp, r7
 80151f0:	bd80      	pop	{r7, pc}

080151f2 <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 80151f2:	b580      	push	{r7, lr}
 80151f4:	b08a      	sub	sp, #40	; 0x28
 80151f6:	af02      	add	r7, sp, #8
 80151f8:	60f8      	str	r0, [r7, #12]
 80151fa:	60b9      	str	r1, [r7, #8]
 80151fc:	607a      	str	r2, [r7, #4]
 80151fe:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8015200:	68f8      	ldr	r0, [r7, #12]
 8015202:	f7ff ff1f 	bl	8015044 <rpmsg_virtio_get_role>
 8015206:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8015208:	69fb      	ldr	r3, [r7, #28]
 801520a:	2b00      	cmp	r3, #0
 801520c:	d10f      	bne.n	801522e <rpmsg_virtio_enqueue_buffer+0x3c>
		struct virtqueue_buf vqbuf;
		(void)idx;

		/* Initialize buffer node */
		vqbuf.buf = buffer;
 801520e:	68bb      	ldr	r3, [r7, #8]
 8015210:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	61bb      	str	r3, [r7, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
 8015216:	68fb      	ldr	r3, [r7, #12]
 8015218:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 801521a:	f107 0114 	add.w	r1, r7, #20
 801521e:	68bb      	ldr	r3, [r7, #8]
 8015220:	9300      	str	r3, [sp, #0]
 8015222:	2301      	movs	r3, #1
 8015224:	2200      	movs	r2, #0
 8015226:	f000 fca0 	bl	8015b6a <virtqueue_add_buffer>
 801522a:	4603      	mov	r3, r0
 801522c:	e000      	b.n	8015230 <rpmsg_virtio_enqueue_buffer+0x3e>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 801522e:	2300      	movs	r3, #0
}
 8015230:	4618      	mov	r0, r3
 8015232:	3720      	adds	r7, #32
 8015234:	46bd      	mov	sp, r7
 8015236:	bd80      	pop	{r7, pc}

08015238 <rpmsg_virtio_get_tx_buffer>:
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8015238:	b580      	push	{r7, lr}
 801523a:	b086      	sub	sp, #24
 801523c:	af00      	add	r7, sp, #0
 801523e:	60f8      	str	r0, [r7, #12]
 8015240:	60b9      	str	r1, [r7, #8]
 8015242:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8015244:	68f8      	ldr	r0, [r7, #12]
 8015246:	f7ff fefd 	bl	8015044 <rpmsg_virtio_get_role>
 801524a:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 801524c:	2300      	movs	r3, #0
 801524e:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8015250:	693b      	ldr	r3, [r7, #16]
 8015252:	2b00      	cmp	r3, #0
 8015254:	d116      	bne.n	8015284 <rpmsg_virtio_get_tx_buffer+0x4c>
		data = virtqueue_get_buffer(rvdev->svq, (uint32_t *)len, idx);
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801525a:	687a      	ldr	r2, [r7, #4]
 801525c:	68b9      	ldr	r1, [r7, #8]
 801525e:	4618      	mov	r0, r3
 8015260:	f000 fcc7 	bl	8015bf2 <virtqueue_get_buffer>
 8015264:	6178      	str	r0, [r7, #20]
		if (data == NULL) {
 8015266:	697b      	ldr	r3, [r7, #20]
 8015268:	2b00      	cmp	r3, #0
 801526a:	d10b      	bne.n	8015284 <rpmsg_virtio_get_tx_buffer+0x4c>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
 801526c:	68fb      	ldr	r3, [r7, #12]
 801526e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015270:	f44f 7100 	mov.w	r1, #512	; 0x200
 8015274:	4618      	mov	r0, r3
 8015276:	f7ff ff4d 	bl	8015114 <rpmsg_virtio_shm_pool_get_buffer>
 801527a:	6178      	str	r0, [r7, #20]
							RPMSG_BUFFER_SIZE);
			*len = RPMSG_BUFFER_SIZE;
 801527c:	68bb      	ldr	r3, [r7, #8]
 801527e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015282:	601a      	str	r2, [r3, #0]
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
						      (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 8015284:	697b      	ldr	r3, [r7, #20]
}
 8015286:	4618      	mov	r0, r3
 8015288:	3718      	adds	r7, #24
 801528a:	46bd      	mov	sp, r7
 801528c:	bd80      	pop	{r7, pc}

0801528e <rpmsg_virtio_get_rx_buffer>:
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 801528e:	b580      	push	{r7, lr}
 8015290:	b086      	sub	sp, #24
 8015292:	af00      	add	r7, sp, #0
 8015294:	60f8      	str	r0, [r7, #12]
 8015296:	60b9      	str	r1, [r7, #8]
 8015298:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 801529a:	68f8      	ldr	r0, [r7, #12]
 801529c:	f7ff fed2 	bl	8015044 <rpmsg_virtio_get_role>
 80152a0:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 80152a2:	2300      	movs	r3, #0
 80152a4:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 80152a6:	693b      	ldr	r3, [r7, #16]
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d107      	bne.n	80152bc <rpmsg_virtio_get_rx_buffer+0x2e>
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80152b0:	687a      	ldr	r2, [r7, #4]
 80152b2:	68b9      	ldr	r1, [r7, #8]
 80152b4:	4618      	mov	r0, r3
 80152b6:	f000 fc9c 	bl	8015bf2 <virtqueue_get_buffer>
 80152ba:	6178      	str	r0, [r7, #20]
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
						   (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	if (data) {
 80152bc:	697b      	ldr	r3, [r7, #20]
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d005      	beq.n	80152ce <rpmsg_virtio_get_rx_buffer+0x40>
		/* FIX ME: library should not worry about if it needs
		 * to flush/invalidate cache, it is shared memory.
		 * The shared memory should be mapped properly before
		 * using it.
		 */
		metal_cache_invalidate(data, (unsigned int)(*len));
 80152c2:	68bb      	ldr	r3, [r7, #8]
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	4619      	mov	r1, r3
 80152c8:	6978      	ldr	r0, [r7, #20]
 80152ca:	f7ff fdec 	bl	8014ea6 <metal_cache_invalidate>
	}

	return data;
 80152ce:	697b      	ldr	r3, [r7, #20]
}
 80152d0:	4618      	mov	r0, r3
 80152d2:	3718      	adds	r7, #24
 80152d4:	46bd      	mov	sp, r7
 80152d6:	bd80      	pop	{r7, pc}

080152d8 <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 80152d8:	b580      	push	{r7, lr}
 80152da:	b084      	sub	sp, #16
 80152dc:	af00      	add	r7, sp, #0
 80152de:	6078      	str	r0, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 80152e0:	6878      	ldr	r0, [r7, #4]
 80152e2:	f7ff feaf 	bl	8015044 <rpmsg_virtio_get_role>
 80152e6:	60b8      	str	r0, [r7, #8]
	int length = 0;
 80152e8:	2300      	movs	r3, #0
 80152ea:	60fb      	str	r3, [r7, #12]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 80152ec:	68bb      	ldr	r3, [r7, #8]
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d102      	bne.n	80152f8 <_rpmsg_virtio_get_buffer_size+0x20>
		/*
		 * If device role is Remote then buffers are provided by us
		 * (RPMSG Master), so just provide the macro.
		 */
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
 80152f2:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 80152f6:	60fb      	str	r3, [r7, #12]
		    (int)virtqueue_get_desc_size(rvdev->svq) -
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 80152f8:	68fb      	ldr	r3, [r7, #12]
}
 80152fa:	4618      	mov	r0, r3
 80152fc:	3710      	adds	r7, #16
 80152fe:	46bd      	mov	sp, r7
 8015300:	bd80      	pop	{r7, pc}
	...

08015304 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 8015304:	b580      	push	{r7, lr}
 8015306:	b090      	sub	sp, #64	; 0x40
 8015308:	af00      	add	r7, sp, #0
 801530a:	60f8      	str	r0, [r7, #12]
 801530c:	60b9      	str	r1, [r7, #8]
 801530e:	607a      	str	r2, [r7, #4]
 8015310:	603b      	str	r3, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 8015312:	2300      	movs	r3, #0
 8015314:	63fb      	str	r3, [r7, #60]	; 0x3c
	unsigned short idx;
	int tick_count = 0;
 8015316:	2300      	movs	r3, #0
 8015318:	63bb      	str	r3, [r7, #56]	; 0x38
	unsigned long buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	637b      	str	r3, [r7, #52]	; 0x34

	status = rpmsg_virtio_get_status(rvdev);
 801531e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015320:	f7ff feb0 	bl	8015084 <rpmsg_virtio_get_status>
 8015324:	4603      	mov	r3, r0
 8015326:	633b      	str	r3, [r7, #48]	; 0x30
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 8015328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801532a:	f003 0304 	and.w	r3, r3, #4
 801532e:	2b00      	cmp	r3, #0
 8015330:	d101      	bne.n	8015336 <rpmsg_virtio_send_offchannel_raw+0x32>
		return RPMSG_ERR_DEV_STATE;
 8015332:	4b45      	ldr	r3, [pc, #276]	; (8015448 <rpmsg_virtio_send_offchannel_raw+0x144>)
 8015334:	e083      	b.n	801543e <rpmsg_virtio_send_offchannel_raw+0x13a>
	}

	if (wait)
 8015336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015338:	2b00      	cmp	r3, #0
 801533a:	d003      	beq.n	8015344 <rpmsg_virtio_send_offchannel_raw+0x40>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 801533c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8015340:	63bb      	str	r3, [r7, #56]	; 0x38
 8015342:	e001      	b.n	8015348 <rpmsg_virtio_send_offchannel_raw+0x44>
	else
		tick_count = 0;
 8015344:	2300      	movs	r3, #0
 8015346:	63bb      	str	r3, [r7, #56]	; 0x38

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	3358      	adds	r3, #88	; 0x58
 801534c:	4618      	mov	r0, r3
 801534e:	f7ff fe46 	bl	8014fde <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 8015352:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015354:	f7ff ffc0 	bl	80152d8 <_rpmsg_virtio_get_buffer_size>
 8015358:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (size <= avail_size)
 801535a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801535c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801535e:	429a      	cmp	r2, r3
 8015360:	dc08      	bgt.n	8015374 <rpmsg_virtio_send_offchannel_raw+0x70>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 8015362:	f107 0216 	add.w	r2, r7, #22
 8015366:	f107 0310 	add.w	r3, r7, #16
 801536a:	4619      	mov	r1, r3
 801536c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801536e:	f7ff ff63 	bl	8015238 <rpmsg_virtio_get_tx_buffer>
 8015372:	63f8      	str	r0, [r7, #60]	; 0x3c
							    &idx);
		metal_mutex_release(&rdev->lock);
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	3358      	adds	r3, #88	; 0x58
 8015378:	4618      	mov	r0, r3
 801537a:	f7ff fe3b 	bl	8014ff4 <metal_mutex_release>
		if (buffer || !tick_count)
 801537e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015380:	2b00      	cmp	r3, #0
 8015382:	d10e      	bne.n	80153a2 <rpmsg_virtio_send_offchannel_raw+0x9e>
 8015384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015386:	2b00      	cmp	r3, #0
 8015388:	d00b      	beq.n	80153a2 <rpmsg_virtio_send_offchannel_raw+0x9e>
			break;
		if (avail_size != 0)
 801538a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801538c:	2b00      	cmp	r3, #0
 801538e:	d001      	beq.n	8015394 <rpmsg_virtio_send_offchannel_raw+0x90>
			return RPMSG_ERR_BUFF_SIZE;
 8015390:	4b2e      	ldr	r3, [pc, #184]	; (801544c <rpmsg_virtio_send_offchannel_raw+0x148>)
 8015392:	e054      	b.n	801543e <rpmsg_virtio_send_offchannel_raw+0x13a>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 8015394:	200a      	movs	r0, #10
 8015396:	f7ff fd9e 	bl	8014ed6 <metal_sleep_usec>
		tick_count--;
 801539a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801539c:	3b01      	subs	r3, #1
 801539e:	63bb      	str	r3, [r7, #56]	; 0x38
	while (1) {
 80153a0:	e7d2      	b.n	8015348 <rpmsg_virtio_send_offchannel_raw+0x44>
	}
	if (!buffer)
 80153a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d101      	bne.n	80153ac <rpmsg_virtio_send_offchannel_raw+0xa8>
		return RPMSG_ERR_NO_BUFF;
 80153a8:	4b29      	ldr	r3, [pc, #164]	; (8015450 <rpmsg_virtio_send_offchannel_raw+0x14c>)
 80153aa:	e048      	b.n	801543e <rpmsg_virtio_send_offchannel_raw+0x13a>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	61fb      	str	r3, [r7, #28]
	rp_hdr.src = src;
 80153b0:	68bb      	ldr	r3, [r7, #8]
 80153b2:	61bb      	str	r3, [r7, #24]
	rp_hdr.len = size;
 80153b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80153b6:	b29b      	uxth	r3, r3
 80153b8:	84bb      	strh	r3, [r7, #36]	; 0x24
	rp_hdr.reserved = 0;
 80153ba:	2300      	movs	r3, #0
 80153bc:	623b      	str	r3, [r7, #32]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 80153be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80153c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80153c2:	62bb      	str	r3, [r7, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 80153c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80153c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80153c8:	f7ff fda2 	bl	8014f10 <metal_io_virt_to_offset>
 80153cc:	4601      	mov	r1, r0
 80153ce:	f107 0218 	add.w	r2, r7, #24
 80153d2:	2310      	movs	r3, #16
 80153d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80153d6:	f7fe fdd8 	bl	8013f8a <metal_io_block_write>
 80153da:	6338      	str	r0, [r7, #48]	; 0x30
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
 80153dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153de:	2b10      	cmp	r3, #16
 80153e0:	d000      	beq.n	80153e4 <rpmsg_virtio_send_offchannel_raw+0xe0>
 80153e2:	e7fe      	b.n	80153e2 <rpmsg_virtio_send_offchannel_raw+0xde>

	status = metal_io_block_write(io,
 80153e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80153e6:	3310      	adds	r3, #16
 80153e8:	4619      	mov	r1, r3
 80153ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80153ec:	f7ff fd90 	bl	8014f10 <metal_io_virt_to_offset>
 80153f0:	4601      	mov	r1, r0
 80153f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80153f4:	683a      	ldr	r2, [r7, #0]
 80153f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80153f8:	f7fe fdc7 	bl	8013f8a <metal_io_block_write>
 80153fc:	6338      	str	r0, [r7, #48]	; 0x30
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
 80153fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015400:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015402:	429a      	cmp	r2, r3
 8015404:	d000      	beq.n	8015408 <rpmsg_virtio_send_offchannel_raw+0x104>
 8015406:	e7fe      	b.n	8015406 <rpmsg_virtio_send_offchannel_raw+0x102>
	metal_mutex_acquire(&rdev->lock);
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	3358      	adds	r3, #88	; 0x58
 801540c:	4618      	mov	r0, r3
 801540e:	f7ff fde6 	bl	8014fde <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 8015412:	693a      	ldr	r2, [r7, #16]
 8015414:	8afb      	ldrh	r3, [r7, #22]
 8015416:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015418:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801541a:	f7ff feea 	bl	80151f2 <rpmsg_virtio_enqueue_buffer>
 801541e:	6338      	str	r0, [r7, #48]	; 0x30
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
 8015420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015422:	2b00      	cmp	r3, #0
 8015424:	d000      	beq.n	8015428 <rpmsg_virtio_send_offchannel_raw+0x124>
 8015426:	e7fe      	b.n	8015426 <rpmsg_virtio_send_offchannel_raw+0x122>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 8015428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801542a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801542c:	4618      	mov	r0, r3
 801542e:	f000 fc5a 	bl	8015ce6 <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	3358      	adds	r3, #88	; 0x58
 8015436:	4618      	mov	r0, r3
 8015438:	f7ff fddc 	bl	8014ff4 <metal_mutex_release>

	return size;
 801543c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 801543e:	4618      	mov	r0, r3
 8015440:	3740      	adds	r7, #64	; 0x40
 8015442:	46bd      	mov	sp, r7
 8015444:	bd80      	pop	{r7, pc}
 8015446:	bf00      	nop
 8015448:	fffff82c 	.word	0xfffff82c
 801544c:	fffff82b 	.word	0xfffff82b
 8015450:	fffff82e 	.word	0xfffff82e

08015454 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 8015454:	b480      	push	{r7}
 8015456:	b083      	sub	sp, #12
 8015458:	af00      	add	r7, sp, #0
 801545a:	6078      	str	r0, [r7, #4]
	(void)vq;
}
 801545c:	bf00      	nop
 801545e:	370c      	adds	r7, #12
 8015460:	46bd      	mov	sp, r7
 8015462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015466:	4770      	bx	lr

08015468 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 8015468:	b590      	push	{r4, r7, lr}
 801546a:	b08d      	sub	sp, #52	; 0x34
 801546c:	af02      	add	r7, sp, #8
 801546e:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	681b      	ldr	r3, [r3, #0]
 8015474:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 8015476:	6a3b      	ldr	r3, [r7, #32]
 8015478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801547a:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
 801547c:	69fb      	ldr	r3, [r7, #28]
 801547e:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	unsigned long len;
	unsigned short idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 8015480:	69bb      	ldr	r3, [r7, #24]
 8015482:	3358      	adds	r3, #88	; 0x58
 8015484:	4618      	mov	r0, r3
 8015486:	f7ff fdaa 	bl	8014fde <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = (struct rpmsg_hdr *)rpmsg_virtio_get_rx_buffer(rvdev,
 801548a:	f107 020a 	add.w	r2, r7, #10
 801548e:	f107 030c 	add.w	r3, r7, #12
 8015492:	4619      	mov	r1, r3
 8015494:	69f8      	ldr	r0, [r7, #28]
 8015496:	f7ff fefa 	bl	801528e <rpmsg_virtio_get_rx_buffer>
 801549a:	6278      	str	r0, [r7, #36]	; 0x24
								&len, &idx);

	metal_mutex_release(&rdev->lock);
 801549c:	69bb      	ldr	r3, [r7, #24]
 801549e:	3358      	adds	r3, #88	; 0x58
 80154a0:	4618      	mov	r0, r3
 80154a2:	f7ff fda7 	bl	8014ff4 <metal_mutex_release>

	while (rp_hdr) {
 80154a6:	e04c      	b.n	8015542 <rpmsg_virtio_rx_callback+0xda>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 80154a8:	69bb      	ldr	r3, [r7, #24]
 80154aa:	3358      	adds	r3, #88	; 0x58
 80154ac:	4618      	mov	r0, r3
 80154ae:	f7ff fd96 	bl	8014fde <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 80154b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154b4:	685b      	ldr	r3, [r3, #4]
 80154b6:	4619      	mov	r1, r3
 80154b8:	69b8      	ldr	r0, [r7, #24]
 80154ba:	f7ff fe1a 	bl	80150f2 <rpmsg_get_ept_from_addr>
 80154be:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
 80154c0:	69bb      	ldr	r3, [r7, #24]
 80154c2:	3358      	adds	r3, #88	; 0x58
 80154c4:	4618      	mov	r0, r3
 80154c6:	f7ff fd95 	bl	8014ff4 <metal_mutex_release>

		if (!ept)
 80154ca:	697b      	ldr	r3, [r7, #20]
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d03c      	beq.n	801554a <rpmsg_virtio_rx_callback+0xe2>
			/* Fatal error no endpoint for the given dst addr. */
			return;

		if (ept->dest_addr == RPMSG_ADDR_ANY) {
 80154d0:	697b      	ldr	r3, [r7, #20]
 80154d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80154d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80154d8:	d103      	bne.n	80154e2 <rpmsg_virtio_rx_callback+0x7a>
			/*
			 * First message received from the remote side,
			 * update channel destination address
			 */
			ept->dest_addr = rp_hdr->src;
 80154da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154dc:	681a      	ldr	r2, [r3, #0]
 80154de:	697b      	ldr	r3, [r7, #20]
 80154e0:	629a      	str	r2, [r3, #40]	; 0x28
		}
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 80154e2:	697b      	ldr	r3, [r7, #20]
 80154e4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80154e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154e8:	f103 0110 	add.w	r1, r3, #16
				   rp_hdr->len, ept->addr, ept->priv);
 80154ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154ee:	899b      	ldrh	r3, [r3, #12]
 80154f0:	b29b      	uxth	r3, r3
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 80154f2:	4618      	mov	r0, r3
 80154f4:	697b      	ldr	r3, [r7, #20]
 80154f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80154f8:	697b      	ldr	r3, [r7, #20]
 80154fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80154fc:	9300      	str	r3, [sp, #0]
 80154fe:	4613      	mov	r3, r2
 8015500:	4602      	mov	r2, r0
 8015502:	6978      	ldr	r0, [r7, #20]
 8015504:	47a0      	blx	r4
 8015506:	6138      	str	r0, [r7, #16]

		RPMSG_ASSERT(status == RPMSG_SUCCESS,
 8015508:	693b      	ldr	r3, [r7, #16]
 801550a:	2b00      	cmp	r3, #0
 801550c:	d000      	beq.n	8015510 <rpmsg_virtio_rx_callback+0xa8>
 801550e:	e7fe      	b.n	801550e <rpmsg_virtio_rx_callback+0xa6>
			     "unexpected callback status\n");
		metal_mutex_acquire(&rdev->lock);
 8015510:	69bb      	ldr	r3, [r7, #24]
 8015512:	3358      	adds	r3, #88	; 0x58
 8015514:	4618      	mov	r0, r3
 8015516:	f7ff fd62 	bl	8014fde <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 801551a:	68fa      	ldr	r2, [r7, #12]
 801551c:	897b      	ldrh	r3, [r7, #10]
 801551e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015520:	69f8      	ldr	r0, [r7, #28]
 8015522:	f7ff fe46 	bl	80151b2 <rpmsg_virtio_return_buffer>

		rp_hdr = (struct rpmsg_hdr *)
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 8015526:	f107 020a 	add.w	r2, r7, #10
 801552a:	f107 030c 	add.w	r3, r7, #12
 801552e:	4619      	mov	r1, r3
 8015530:	69f8      	ldr	r0, [r7, #28]
 8015532:	f7ff feac 	bl	801528e <rpmsg_virtio_get_rx_buffer>
 8015536:	6278      	str	r0, [r7, #36]	; 0x24
		metal_mutex_release(&rdev->lock);
 8015538:	69bb      	ldr	r3, [r7, #24]
 801553a:	3358      	adds	r3, #88	; 0x58
 801553c:	4618      	mov	r0, r3
 801553e:	f7ff fd59 	bl	8014ff4 <metal_mutex_release>
	while (rp_hdr) {
 8015542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015544:	2b00      	cmp	r3, #0
 8015546:	d1af      	bne.n	80154a8 <rpmsg_virtio_rx_callback+0x40>
 8015548:	e000      	b.n	801554c <rpmsg_virtio_rx_callback+0xe4>
			return;
 801554a:	bf00      	nop
	}
}
 801554c:	372c      	adds	r7, #44	; 0x2c
 801554e:	46bd      	mov	sp, r7
 8015550:	bd90      	pop	{r4, r7, pc}

08015552 <rpmsg_virtio_ns_callback>:
#pragma push
#pragma O0
#endif
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 8015552:	b580      	push	{r7, lr}
 8015554:	b092      	sub	sp, #72	; 0x48
 8015556:	af00      	add	r7, sp, #0
 8015558:	60f8      	str	r0, [r7, #12]
 801555a:	60b9      	str	r1, [r7, #8]
 801555c:	607a      	str	r2, [r7, #4]
 801555e:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	6a1b      	ldr	r3, [r3, #32]
 8015564:	647b      	str	r3, [r7, #68]	; 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 8015566:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015568:	643b      	str	r3, [r7, #64]	; 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
 801556a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801556c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801556e:	63fb      	str	r3, [r7, #60]	; 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = (struct rpmsg_ns_msg *)data;
 8015570:	68bb      	ldr	r3, [r7, #8]
 8015572:	63bb      	str	r3, [r7, #56]	; 0x38
	if (len != sizeof(*ns_msg))
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	2b28      	cmp	r3, #40	; 0x28
 8015578:	d001      	beq.n	801557e <rpmsg_virtio_ns_callback+0x2c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 801557a:	2300      	movs	r3, #0
 801557c:	e057      	b.n	801562e <rpmsg_virtio_ns_callback+0xdc>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 801557e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	metal_io_block_read(io,
 8015580:	4619      	mov	r1, r3
 8015582:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015584:	f7ff fcc4 	bl	8014f10 <metal_io_virt_to_offset>
 8015588:	4601      	mov	r1, r0
 801558a:	f107 0210 	add.w	r2, r7, #16
 801558e:	2320      	movs	r3, #32
 8015590:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015592:	f7fe fc83 	bl	8013e9c <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
 8015596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015598:	6a1b      	ldr	r3, [r3, #32]
 801559a:	637b      	str	r3, [r7, #52]	; 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 801559c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801559e:	3358      	adds	r3, #88	; 0x58
 80155a0:	4618      	mov	r0, r3
 80155a2:	f7ff fd1c 	bl	8014fde <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 80155a6:	f107 0110 	add.w	r1, r7, #16
 80155aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80155ac:	f04f 32ff 	mov.w	r2, #4294967295
 80155b0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80155b2:	f7ff fb57 	bl	8014c64 <rpmsg_get_endpoint>
 80155b6:	6338      	str	r0, [r7, #48]	; 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 80155b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155bc:	f003 0301 	and.w	r3, r3, #1
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d017      	beq.n	80155f4 <rpmsg_virtio_ns_callback+0xa2>
		if (_ept)
 80155c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d003      	beq.n	80155d2 <rpmsg_virtio_ns_callback+0x80>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 80155ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155cc:	f04f 32ff 	mov.w	r2, #4294967295
 80155d0:	629a      	str	r2, [r3, #40]	; 0x28
		metal_mutex_release(&rdev->lock);
 80155d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80155d4:	3358      	adds	r3, #88	; 0x58
 80155d6:	4618      	mov	r0, r3
 80155d8:	f7ff fd0c 	bl	8014ff4 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 80155dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d024      	beq.n	801562c <rpmsg_virtio_ns_callback+0xda>
 80155e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d020      	beq.n	801562c <rpmsg_virtio_ns_callback+0xda>
			_ept->ns_unbind_cb(ept);
 80155ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80155ee:	68f8      	ldr	r0, [r7, #12]
 80155f0:	4798      	blx	r3
 80155f2:	e01b      	b.n	801562c <rpmsg_virtio_ns_callback+0xda>
	} else {
		if (!_ept) {
 80155f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d110      	bne.n	801561c <rpmsg_virtio_ns_callback+0xca>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 80155fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80155fc:	3358      	adds	r3, #88	; 0x58
 80155fe:	4618      	mov	r0, r3
 8015600:	f7ff fcf8 	bl	8014ff4 <metal_mutex_release>
			if (rdev->ns_bind_cb)
 8015604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015608:	2b00      	cmp	r3, #0
 801560a:	d00f      	beq.n	801562c <rpmsg_virtio_ns_callback+0xda>
				rdev->ns_bind_cb(rdev, name, dest);
 801560c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801560e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015610:	f107 0110 	add.w	r1, r7, #16
 8015614:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015616:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015618:	4798      	blx	r3
 801561a:	e007      	b.n	801562c <rpmsg_virtio_ns_callback+0xda>
		} else {
			_ept->dest_addr = dest;
 801561c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801561e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015620:	629a      	str	r2, [r3, #40]	; 0x28
			metal_mutex_release(&rdev->lock);
 8015622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015624:	3358      	adds	r3, #88	; 0x58
 8015626:	4618      	mov	r0, r3
 8015628:	f7ff fce4 	bl	8014ff4 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 801562c:	2300      	movs	r3, #0
}
 801562e:	4618      	mov	r0, r3
 8015630:	3748      	adds	r7, #72	; 0x48
 8015632:	46bd      	mov	sp, r7
 8015634:	bd80      	pop	{r7, pc}
	...

08015638 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 8015638:	b580      	push	{r7, lr}
 801563a:	b094      	sub	sp, #80	; 0x50
 801563c:	af02      	add	r7, sp, #8
 801563e:	60f8      	str	r0, [r7, #12]
 8015640:	60b9      	str	r1, [r7, #8]
 8015642:	607a      	str	r2, [r7, #4]
 8015644:	603b      	str	r3, [r7, #0]
	vqcallback callback[RPMSG_NUM_VRINGS];
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 8015646:	68fb      	ldr	r3, [r7, #12]
 8015648:	63bb      	str	r3, [r7, #56]	; 0x38
	memset(rdev, 0, sizeof(*rdev));
 801564a:	2264      	movs	r2, #100	; 0x64
 801564c:	2100      	movs	r1, #0
 801564e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015650:	f005 f8de 	bl	801a810 <memset>
	metal_mutex_init(&rdev->lock);
 8015654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015656:	3358      	adds	r3, #88	; 0x58
 8015658:	4618      	mov	r0, r3
 801565a:	f7ff fcb5 	bl	8014fc8 <metal_mutex_init>
	rvdev->vdev = vdev;
 801565e:	68fb      	ldr	r3, [r7, #12]
 8015660:	68ba      	ldr	r2, [r7, #8]
 8015662:	665a      	str	r2, [r3, #100]	; 0x64
	rdev->ns_bind_cb = ns_bind_cb;
 8015664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015666:	687a      	ldr	r2, [r7, #4]
 8015668:	65da      	str	r2, [r3, #92]	; 0x5c
	vdev->priv = rvdev;
 801566a:	68bb      	ldr	r3, [r7, #8]
 801566c:	68fa      	ldr	r2, [r7, #12]
 801566e:	625a      	str	r2, [r3, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 8015670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015672:	4a5d      	ldr	r2, [pc, #372]	; (80157e8 <rpmsg_init_vdev+0x1b0>)
 8015674:	661a      	str	r2, [r3, #96]	; 0x60
	role = rpmsg_virtio_get_role(rvdev);
 8015676:	68f8      	ldr	r0, [r7, #12]
 8015678:	f7ff fce4 	bl	8015044 <rpmsg_virtio_get_role>
 801567c:	6378      	str	r0, [r7, #52]	; 0x34

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 801567e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015680:	2b00      	cmp	r3, #0
 8015682:	d120      	bne.n	80156c6 <rpmsg_init_vdev+0x8e>
		/*
		 * Since device is RPMSG Remote so we need to manage the
		 * shared buffers. Create shared memory pool to handle buffers.
		 */
		if (!shpool)
 8015684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015686:	2b00      	cmp	r3, #0
 8015688:	d101      	bne.n	801568e <rpmsg_init_vdev+0x56>
			return RPMSG_ERR_PARAM;
 801568a:	4b58      	ldr	r3, [pc, #352]	; (80157ec <rpmsg_init_vdev+0x1b4>)
 801568c:	e0a7      	b.n	80157de <rpmsg_init_vdev+0x1a6>
		if (!shpool->size)
 801568e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015690:	689b      	ldr	r3, [r3, #8]
 8015692:	2b00      	cmp	r3, #0
 8015694:	d101      	bne.n	801569a <rpmsg_init_vdev+0x62>
			return RPMSG_ERR_NO_BUFF;
 8015696:	4b56      	ldr	r3, [pc, #344]	; (80157f0 <rpmsg_init_vdev+0x1b8>)
 8015698:	e0a1      	b.n	80157de <rpmsg_init_vdev+0x1a6>
		rvdev->shpool = shpool;
 801569a:	68fb      	ldr	r3, [r7, #12]
 801569c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801569e:	675a      	str	r2, [r3, #116]	; 0x74

		vq_names[0] = "rx_vq";
 80156a0:	4b54      	ldr	r3, [pc, #336]	; (80157f4 <rpmsg_init_vdev+0x1bc>)
 80156a2:	623b      	str	r3, [r7, #32]
		vq_names[1] = "tx_vq";
 80156a4:	4b54      	ldr	r3, [pc, #336]	; (80157f8 <rpmsg_init_vdev+0x1c0>)
 80156a6:	627b      	str	r3, [r7, #36]	; 0x24
		callback[0] = rpmsg_virtio_rx_callback;
 80156a8:	4b54      	ldr	r3, [pc, #336]	; (80157fc <rpmsg_init_vdev+0x1c4>)
 80156aa:	61bb      	str	r3, [r7, #24]
		callback[1] = rpmsg_virtio_tx_callback;
 80156ac:	4b54      	ldr	r3, [pc, #336]	; (8015800 <rpmsg_init_vdev+0x1c8>)
 80156ae:	61fb      	str	r3, [r7, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
 80156b0:	68bb      	ldr	r3, [r7, #8]
 80156b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156b4:	681a      	ldr	r2, [r3, #0]
 80156b6:	68fb      	ldr	r3, [r7, #12]
 80156b8:	669a      	str	r2, [r3, #104]	; 0x68
		rvdev->svq  = vdev->vrings_info[1].vq;
 80156ba:	68bb      	ldr	r3, [r7, #8]
 80156bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156be:	3318      	adds	r3, #24
 80156c0:	681a      	ldr	r2, [r3, #0]
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	66da      	str	r2, [r3, #108]	; 0x6c
		callback[1] = rpmsg_virtio_rx_callback;
		rvdev->rvq  = vdev->vrings_info[1].vq;
		rvdev->svq  = vdev->vrings_info[0].vq;
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	683a      	ldr	r2, [r7, #0]
 80156ca:	671a      	str	r2, [r3, #112]	; 0x70
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 80156cc:	f107 0220 	add.w	r2, r7, #32
 80156d0:	f107 0318 	add.w	r3, r7, #24
 80156d4:	9300      	str	r3, [sp, #0]
 80156d6:	4613      	mov	r3, r2
 80156d8:	2202      	movs	r2, #2
 80156da:	2100      	movs	r1, #0
 80156dc:	68f8      	ldr	r0, [r7, #12]
 80156de:	f7ff fcf3 	bl	80150c8 <rpmsg_virtio_create_virtqueues>
 80156e2:	6478      	str	r0, [r7, #68]	; 0x44
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 80156e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d001      	beq.n	80156ee <rpmsg_init_vdev+0xb6>
		return status;
 80156ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80156ec:	e077      	b.n	80157de <rpmsg_init_vdev+0x1a6>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 80156ee:	2300      	movs	r3, #0
 80156f0:	643b      	str	r3, [r7, #64]	; 0x40
 80156f2:	e00f      	b.n	8015714 <rpmsg_init_vdev+0xdc>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 80156f4:	68bb      	ldr	r3, [r7, #8]
 80156f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80156f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80156fa:	4613      	mov	r3, r2
 80156fc:	005b      	lsls	r3, r3, #1
 80156fe:	4413      	add	r3, r2
 8015700:	00db      	lsls	r3, r3, #3
 8015702:	440b      	add	r3, r1
 8015704:	681b      	ldr	r3, [r3, #0]
 8015706:	62bb      	str	r3, [r7, #40]	; 0x28
		vq->shm_io = shm_io;
 8015708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801570a:	683a      	ldr	r2, [r7, #0]
 801570c:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 801570e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015710:	3301      	adds	r3, #1
 8015712:	643b      	str	r3, [r7, #64]	; 0x40
 8015714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015716:	2b01      	cmp	r3, #1
 8015718:	d9ec      	bls.n	80156f4 <rpmsg_init_vdev+0xbc>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 801571a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801571c:	2b00      	cmp	r3, #0
 801571e:	d137      	bne.n	8015790 <rpmsg_init_vdev+0x158>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
 8015720:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015724:	617b      	str	r3, [r7, #20]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 8015726:	2300      	movs	r3, #0
 8015728:	63fb      	str	r3, [r7, #60]	; 0x3c
 801572a:	e02a      	b.n	8015782 <rpmsg_init_vdev+0x14a>
			/* Initialize TX virtqueue buffers for remote device */
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
 801572c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8015730:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8015732:	f7ff fcef 	bl	8015114 <rpmsg_virtio_shm_pool_get_buffer>
 8015736:	6338      	str	r0, [r7, #48]	; 0x30
							RPMSG_BUFFER_SIZE);

			if (!buffer) {
 8015738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801573a:	2b00      	cmp	r3, #0
 801573c:	d101      	bne.n	8015742 <rpmsg_init_vdev+0x10a>
				return RPMSG_ERR_NO_BUFF;
 801573e:	4b2c      	ldr	r3, [pc, #176]	; (80157f0 <rpmsg_init_vdev+0x1b8>)
 8015740:	e04d      	b.n	80157de <rpmsg_init_vdev+0x1a6>
			}

			vqbuf.buf = buffer;
 8015742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015744:	613b      	str	r3, [r7, #16]

			metal_io_block_set(shm_io,
 8015746:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015748:	6838      	ldr	r0, [r7, #0]
 801574a:	f7ff fbe1 	bl	8014f10 <metal_io_virt_to_offset>
 801574e:	4601      	mov	r1, r0
 8015750:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015754:	2200      	movs	r2, #0
 8015756:	6838      	ldr	r0, [r7, #0]
 8015758:	f7fe fc8d 	bl	8014076 <metal_io_block_set>
					   metal_io_virt_to_offset(shm_io,
								   buffer),
					   0x00, RPMSG_BUFFER_SIZE);
			status =
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8015760:	f107 0110 	add.w	r1, r7, #16
 8015764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015766:	9300      	str	r3, [sp, #0]
 8015768:	2301      	movs	r3, #1
 801576a:	2200      	movs	r2, #0
 801576c:	f000 f9fd 	bl	8015b6a <virtqueue_add_buffer>
 8015770:	6478      	str	r0, [r7, #68]	; 0x44
						     buffer);

			if (status != RPMSG_SUCCESS) {
 8015772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015774:	2b00      	cmp	r3, #0
 8015776:	d001      	beq.n	801577c <rpmsg_init_vdev+0x144>
				return status;
 8015778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801577a:	e030      	b.n	80157de <rpmsg_init_vdev+0x1a6>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 801577c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801577e:	3301      	adds	r3, #1
 8015780:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015782:	68fb      	ldr	r3, [r7, #12]
 8015784:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015786:	895b      	ldrh	r3, [r3, #10]
 8015788:	461a      	mov	r2, r3
 801578a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801578c:	4293      	cmp	r3, r2
 801578e:	d3cd      	bcc.n	801572c <rpmsg_init_vdev+0xf4>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 8015790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015792:	4618      	mov	r0, r3
 8015794:	f7ff fbab 	bl	8014eee <metal_list_init>

	dev_features = rpmsg_virtio_get_features(rvdev);
 8015798:	68f8      	ldr	r0, [r7, #12]
 801579a:	f7ff fc84 	bl	80150a6 <rpmsg_virtio_get_features>
 801579e:	62f8      	str	r0, [r7, #44]	; 0x2c

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
 80157a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157a2:	f003 0301 	and.w	r3, r3, #1
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d011      	beq.n	80157ce <rpmsg_init_vdev+0x196>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 80157aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157ac:	f103 0008 	add.w	r0, r3, #8
 80157b0:	2300      	movs	r3, #0
 80157b2:	9301      	str	r3, [sp, #4]
 80157b4:	4b13      	ldr	r3, [pc, #76]	; (8015804 <rpmsg_init_vdev+0x1cc>)
 80157b6:	9300      	str	r3, [sp, #0]
 80157b8:	2335      	movs	r3, #53	; 0x35
 80157ba:	2235      	movs	r2, #53	; 0x35
 80157bc:	4912      	ldr	r1, [pc, #72]	; (8015808 <rpmsg_init_vdev+0x1d0>)
 80157be:	f7ff fc24 	bl	801500a <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 80157c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157c4:	3308      	adds	r3, #8
 80157c6:	4619      	mov	r1, r3
 80157c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80157ca:	f7ff facd 	bl	8014d68 <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
 80157ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d103      	bne.n	80157dc <rpmsg_init_vdev+0x1a4>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
 80157d4:	2104      	movs	r1, #4
 80157d6:	68f8      	ldr	r0, [r7, #12]
 80157d8:	f7ff fc41 	bl	801505e <rpmsg_virtio_set_status>
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 80157dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80157de:	4618      	mov	r0, r3
 80157e0:	3748      	adds	r7, #72	; 0x48
 80157e2:	46bd      	mov	sp, r7
 80157e4:	bd80      	pop	{r7, pc}
 80157e6:	bf00      	nop
 80157e8:	08015305 	.word	0x08015305
 80157ec:	fffff82d 	.word	0xfffff82d
 80157f0:	fffff82e 	.word	0xfffff82e
 80157f4:	0801f8e0 	.word	0x0801f8e0
 80157f8:	0801f8e8 	.word	0x0801f8e8
 80157fc:	08015469 	.word	0x08015469
 8015800:	08015455 	.word	0x08015455
 8015804:	08015553 	.word	0x08015553
 8015808:	0801f8f0 	.word	0x0801f8f0

0801580c <metal_machine_cache_flush>:
{
  return 0;
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 801580c:	b480      	push	{r7}
 801580e:	b083      	sub	sp, #12
 8015810:	af00      	add	r7, sp, #0
 8015812:	6078      	str	r0, [r7, #4]
 8015814:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 8015816:	bf00      	nop
 8015818:	370c      	adds	r7, #12
 801581a:	46bd      	mov	sp, r7
 801581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015820:	4770      	bx	lr

08015822 <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 8015822:	b480      	push	{r7}
 8015824:	b083      	sub	sp, #12
 8015826:	af00      	add	r7, sp, #0
 8015828:	6078      	str	r0, [r7, #4]
 801582a:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 801582c:	bf00      	nop
 801582e:	370c      	adds	r7, #12
 8015830:	46bd      	mov	sp, r7
 8015832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015836:	4770      	bx	lr

08015838 <metal_machine_io_mem_map>:
{
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
 8015838:	b480      	push	{r7}
 801583a:	b085      	sub	sp, #20
 801583c:	af00      	add	r7, sp, #0
 801583e:	60f8      	str	r0, [r7, #12]
 8015840:	60b9      	str	r1, [r7, #8]
 8015842:	607a      	str	r2, [r7, #4]
 8015844:	603b      	str	r3, [r7, #0]
	(void)va;
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 8015846:	68fb      	ldr	r3, [r7, #12]
}
 8015848:	4618      	mov	r0, r3
 801584a:	3714      	adds	r7, #20
 801584c:	46bd      	mov	sp, r7
 801584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015852:	4770      	bx	lr

08015854 <vring_size>:
 */
#define vring_used_event(vr)	((vr)->avail->ring[(vr)->num])
#define vring_avail_event(vr)	((vr)->used->ring[(vr)->num].id & 0xFFFF)

static inline int vring_size(unsigned int num, unsigned long align)
{
 8015854:	b480      	push	{r7}
 8015856:	b085      	sub	sp, #20
 8015858:	af00      	add	r7, sp, #0
 801585a:	6078      	str	r0, [r7, #4]
 801585c:	6039      	str	r1, [r7, #0]
	int size;

	size = num * sizeof(struct vring_desc);
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	011b      	lsls	r3, r3, #4
 8015862:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	3303      	adds	r3, #3
 8015868:	005a      	lsls	r2, r3, #1
 801586a:	68fb      	ldr	r3, [r7, #12]
 801586c:	4413      	add	r3, r2
 801586e:	60fb      	str	r3, [r7, #12]
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
 8015870:	68fa      	ldr	r2, [r7, #12]
 8015872:	683b      	ldr	r3, [r7, #0]
 8015874:	4413      	add	r3, r2
 8015876:	1e5a      	subs	r2, r3, #1
 8015878:	683b      	ldr	r3, [r7, #0]
 801587a:	425b      	negs	r3, r3
 801587c:	4013      	ands	r3, r2
 801587e:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	00da      	lsls	r2, r3, #3
	size += sizeof(struct vring_used) +
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	4413      	add	r3, r2
 8015888:	3306      	adds	r3, #6
 801588a:	60fb      	str	r3, [r7, #12]

	return size;
 801588c:	68fb      	ldr	r3, [r7, #12]
}
 801588e:	4618      	mov	r0, r3
 8015890:	3714      	adds	r7, #20
 8015892:	46bd      	mov	sp, r7
 8015894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015898:	4770      	bx	lr

0801589a <metal_io_virt_to_offset>:
{
 801589a:	b480      	push	{r7}
 801589c:	b085      	sub	sp, #20
 801589e:	af00      	add	r7, sp, #0
 80158a0:	6078      	str	r0, [r7, #4]
 80158a2:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	681b      	ldr	r3, [r3, #0]
 80158a8:	683a      	ldr	r2, [r7, #0]
 80158aa:	1ad3      	subs	r3, r2, r3
 80158ac:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	689b      	ldr	r3, [r3, #8]
 80158b2:	68fa      	ldr	r2, [r7, #12]
 80158b4:	429a      	cmp	r2, r3
 80158b6:	d201      	bcs.n	80158bc <metal_io_virt_to_offset+0x22>
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	e001      	b.n	80158c0 <metal_io_virt_to_offset+0x26>
 80158bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80158c0:	4618      	mov	r0, r3
 80158c2:	3714      	adds	r7, #20
 80158c4:	46bd      	mov	sp, r7
 80158c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ca:	4770      	bx	lr

080158cc <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 80158cc:	b590      	push	{r4, r7, lr}
 80158ce:	b091      	sub	sp, #68	; 0x44
 80158d0:	af04      	add	r7, sp, #16
 80158d2:	60f8      	str	r0, [r7, #12]
 80158d4:	60b9      	str	r1, [r7, #8]
 80158d6:	607a      	str	r2, [r7, #4]
 80158d8:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 80158da:	68fb      	ldr	r3, [r7, #12]
 80158dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80158de:	62bb      	str	r3, [r7, #40]	; 0x28
	if (nvqs > num_vrings)
 80158e0:	687a      	ldr	r2, [r7, #4]
 80158e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158e4:	429a      	cmp	r2, r3
 80158e6:	d902      	bls.n	80158ee <virtio_create_virtqueues+0x22>
		return -ERROR_VQUEUE_INVLD_PARAM;
 80158e8:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 80158ec:	e053      	b.n	8015996 <virtio_create_virtqueues+0xca>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 80158ee:	2300      	movs	r3, #0
 80158f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80158f2:	e04b      	b.n	801598c <virtio_create_virtqueues+0xc0>
		vring_info = &vdev->vrings_info[i];
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80158f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80158fa:	4613      	mov	r3, r2
 80158fc:	005b      	lsls	r3, r3, #1
 80158fe:	4413      	add	r3, r2
 8015900:	00db      	lsls	r3, r3, #3
 8015902:	440b      	add	r3, r1
 8015904:	627b      	str	r3, [r7, #36]	; 0x24

		vring_alloc = &vring_info->info;
 8015906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015908:	3304      	adds	r3, #4
 801590a:	623b      	str	r3, [r7, #32]
#ifndef VIRTIO_SLAVE_ONLY
		if (vdev->role == VIRTIO_DEV_MASTER) {
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	699b      	ldr	r3, [r3, #24]
 8015910:	2b00      	cmp	r3, #0
 8015912:	d118      	bne.n	8015946 <virtio_create_virtqueues+0x7a>
			size_t offset;
			struct metal_io_region *io = vring_info->io;
 8015914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015916:	695b      	ldr	r3, [r3, #20]
 8015918:	61fb      	str	r3, [r7, #28]

			offset = metal_io_virt_to_offset(io,
 801591a:	6a3b      	ldr	r3, [r7, #32]
 801591c:	681b      	ldr	r3, [r3, #0]
 801591e:	4619      	mov	r1, r3
 8015920:	69f8      	ldr	r0, [r7, #28]
 8015922:	f7ff ffba 	bl	801589a <metal_io_virt_to_offset>
 8015926:	61b8      	str	r0, [r7, #24]
							 vring_alloc->vaddr);
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
 8015928:	6a3b      	ldr	r3, [r7, #32]
 801592a:	891b      	ldrh	r3, [r3, #8]
			metal_io_block_set(io, offset, 0,
 801592c:	461a      	mov	r2, r3
 801592e:	6a3b      	ldr	r3, [r7, #32]
 8015930:	685b      	ldr	r3, [r3, #4]
 8015932:	4619      	mov	r1, r3
 8015934:	4610      	mov	r0, r2
 8015936:	f7ff ff8d 	bl	8015854 <vring_size>
 801593a:	4603      	mov	r3, r0
 801593c:	2200      	movs	r2, #0
 801593e:	69b9      	ldr	r1, [r7, #24]
 8015940:	69f8      	ldr	r0, [r7, #28]
 8015942:	f7fe fb98 	bl	8014076 <metal_io_block_set>
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8015946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015948:	b298      	uxth	r0, r3
 801594a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801594c:	009b      	lsls	r3, r3, #2
 801594e:	683a      	ldr	r2, [r7, #0]
 8015950:	4413      	add	r3, r2
 8015952:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
 8015954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015956:	009b      	lsls	r3, r3, #2
 8015958:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801595a:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 801595c:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
 801595e:	68fa      	ldr	r2, [r7, #12]
 8015960:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8015962:	6a12      	ldr	r2, [r2, #32]
 8015964:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015966:	6809      	ldr	r1, [r1, #0]
 8015968:	9102      	str	r1, [sp, #8]
 801596a:	9201      	str	r2, [sp, #4]
 801596c:	9300      	str	r3, [sp, #0]
 801596e:	6a3b      	ldr	r3, [r7, #32]
 8015970:	4622      	mov	r2, r4
 8015972:	4601      	mov	r1, r0
 8015974:	68f8      	ldr	r0, [r7, #12]
 8015976:	f000 f8c4 	bl	8015b02 <virtqueue_create>
 801597a:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
 801597c:	697b      	ldr	r3, [r7, #20]
 801597e:	2b00      	cmp	r3, #0
 8015980:	d001      	beq.n	8015986 <virtio_create_virtqueues+0xba>
			return ret;
 8015982:	697b      	ldr	r3, [r7, #20]
 8015984:	e007      	b.n	8015996 <virtio_create_virtqueues+0xca>
	for (i = 0; i < nvqs; i++) {
 8015986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015988:	3301      	adds	r3, #1
 801598a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801598c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	429a      	cmp	r2, r3
 8015992:	d3af      	bcc.n	80158f4 <virtio_create_virtqueues+0x28>
	}
	return 0;
 8015994:	2300      	movs	r3, #0
}
 8015996:	4618      	mov	r0, r3
 8015998:	3734      	adds	r7, #52	; 0x34
 801599a:	46bd      	mov	sp, r7
 801599c:	bd90      	pop	{r4, r7, pc}

0801599e <vring_init>:

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 801599e:	b480      	push	{r7}
 80159a0:	b085      	sub	sp, #20
 80159a2:	af00      	add	r7, sp, #0
 80159a4:	60f8      	str	r0, [r7, #12]
 80159a6:	60b9      	str	r1, [r7, #8]
 80159a8:	607a      	str	r2, [r7, #4]
 80159aa:	603b      	str	r3, [r7, #0]
	vr->num = num;
 80159ac:	68fb      	ldr	r3, [r7, #12]
 80159ae:	68ba      	ldr	r2, [r7, #8]
 80159b0:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
 80159b2:	68fb      	ldr	r3, [r7, #12]
 80159b4:	687a      	ldr	r2, [r7, #4]
 80159b6:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 80159b8:	68bb      	ldr	r3, [r7, #8]
 80159ba:	011b      	lsls	r3, r3, #4
 80159bc:	687a      	ldr	r2, [r7, #4]
 80159be:	441a      	add	r2, r3
 80159c0:	68fb      	ldr	r3, [r7, #12]
 80159c2:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 80159c4:	68fb      	ldr	r3, [r7, #12]
 80159c6:	689a      	ldr	r2, [r3, #8]
 80159c8:	68bb      	ldr	r3, [r7, #8]
 80159ca:	005b      	lsls	r3, r3, #1
 80159cc:	4413      	add	r3, r2
 80159ce:	3304      	adds	r3, #4
 80159d0:	461a      	mov	r2, r3
 80159d2:	683b      	ldr	r3, [r7, #0]
 80159d4:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
 80159d6:	1c5a      	adds	r2, r3, #1
 80159d8:	683b      	ldr	r3, [r7, #0]
 80159da:	425b      	negs	r3, r3
 80159dc:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
 80159de:	461a      	mov	r2, r3
 80159e0:	68fb      	ldr	r3, [r7, #12]
 80159e2:	60da      	str	r2, [r3, #12]
}
 80159e4:	bf00      	nop
 80159e6:	3714      	adds	r7, #20
 80159e8:	46bd      	mov	sp, r7
 80159ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ee:	4770      	bx	lr

080159f0 <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 80159f0:	b480      	push	{r7}
 80159f2:	b083      	sub	sp, #12
 80159f4:	af00      	add	r7, sp, #0
 80159f6:	4603      	mov	r3, r0
 80159f8:	80fb      	strh	r3, [r7, #6]
 80159fa:	460b      	mov	r3, r1
 80159fc:	80bb      	strh	r3, [r7, #4]
 80159fe:	4613      	mov	r3, r2
 8015a00:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
 8015a02:	88ba      	ldrh	r2, [r7, #4]
 8015a04:	88fb      	ldrh	r3, [r7, #6]
 8015a06:	1ad3      	subs	r3, r2, r3
 8015a08:	b29b      	uxth	r3, r3
 8015a0a:	3b01      	subs	r3, #1
 8015a0c:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
 8015a0e:	88b9      	ldrh	r1, [r7, #4]
 8015a10:	887b      	ldrh	r3, [r7, #2]
 8015a12:	1acb      	subs	r3, r1, r3
 8015a14:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
 8015a16:	429a      	cmp	r2, r3
 8015a18:	bf34      	ite	cc
 8015a1a:	2301      	movcc	r3, #1
 8015a1c:	2300      	movcs	r3, #0
 8015a1e:	b2db      	uxtb	r3, r3
}
 8015a20:	4618      	mov	r0, r3
 8015a22:	370c      	adds	r7, #12
 8015a24:	46bd      	mov	sp, r7
 8015a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a2a:	4770      	bx	lr

08015a2c <metal_io_virt_to_offset>:
{
 8015a2c:	b480      	push	{r7}
 8015a2e:	b085      	sub	sp, #20
 8015a30:	af00      	add	r7, sp, #0
 8015a32:	6078      	str	r0, [r7, #4]
 8015a34:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	683a      	ldr	r2, [r7, #0]
 8015a3c:	1ad3      	subs	r3, r2, r3
 8015a3e:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	689b      	ldr	r3, [r3, #8]
 8015a44:	68fa      	ldr	r2, [r7, #12]
 8015a46:	429a      	cmp	r2, r3
 8015a48:	d201      	bcs.n	8015a4e <metal_io_virt_to_offset+0x22>
 8015a4a:	68fb      	ldr	r3, [r7, #12]
 8015a4c:	e001      	b.n	8015a52 <metal_io_virt_to_offset+0x26>
 8015a4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015a52:	4618      	mov	r0, r3
 8015a54:	3714      	adds	r7, #20
 8015a56:	46bd      	mov	sp, r7
 8015a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a5c:	4770      	bx	lr

08015a5e <metal_io_phys>:
{
 8015a5e:	b480      	push	{r7}
 8015a60:	b085      	sub	sp, #20
 8015a62:	af00      	add	r7, sp, #0
 8015a64:	6078      	str	r0, [r7, #4]
 8015a66:	6039      	str	r1, [r7, #0]
	unsigned long page = (io->page_shift >=
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	68db      	ldr	r3, [r3, #12]
			     0 : offset >> io->page_shift);
 8015a6c:	2b1f      	cmp	r3, #31
 8015a6e:	d805      	bhi.n	8015a7c <metal_io_phys+0x1e>
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	68db      	ldr	r3, [r3, #12]
 8015a74:	683a      	ldr	r2, [r7, #0]
 8015a76:	fa22 f303 	lsr.w	r3, r2, r3
 8015a7a:	e000      	b.n	8015a7e <metal_io_phys+0x20>
 8015a7c:	2300      	movs	r3, #0
	unsigned long page = (io->page_shift >=
 8015a7e:	60fb      	str	r3, [r7, #12]
	return (io->physmap != NULL && offset <= io->size
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	685b      	ldr	r3, [r3, #4]
		: METAL_BAD_PHYS);
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	d010      	beq.n	8015aaa <metal_io_phys+0x4c>
	return (io->physmap != NULL && offset <= io->size
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	689b      	ldr	r3, [r3, #8]
 8015a8c:	683a      	ldr	r2, [r7, #0]
 8015a8e:	429a      	cmp	r2, r3
 8015a90:	d80b      	bhi.n	8015aaa <metal_io_phys+0x4c>
		? io->physmap[page] + (offset & io->page_mask)
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	685a      	ldr	r2, [r3, #4]
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	009b      	lsls	r3, r3, #2
 8015a9a:	4413      	add	r3, r2
 8015a9c:	681a      	ldr	r2, [r3, #0]
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	6919      	ldr	r1, [r3, #16]
 8015aa2:	683b      	ldr	r3, [r7, #0]
 8015aa4:	400b      	ands	r3, r1
		: METAL_BAD_PHYS);
 8015aa6:	4413      	add	r3, r2
 8015aa8:	e001      	b.n	8015aae <metal_io_phys+0x50>
 8015aaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015aae:	4618      	mov	r0, r3
 8015ab0:	3714      	adds	r7, #20
 8015ab2:	46bd      	mov	sp, r7
 8015ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ab8:	4770      	bx	lr

08015aba <metal_io_virt_to_phys>:
{
 8015aba:	b580      	push	{r7, lr}
 8015abc:	b082      	sub	sp, #8
 8015abe:	af00      	add	r7, sp, #0
 8015ac0:	6078      	str	r0, [r7, #4]
 8015ac2:	6039      	str	r1, [r7, #0]
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
 8015ac4:	6839      	ldr	r1, [r7, #0]
 8015ac6:	6878      	ldr	r0, [r7, #4]
 8015ac8:	f7ff ffb0 	bl	8015a2c <metal_io_virt_to_offset>
 8015acc:	4603      	mov	r3, r0
 8015ace:	4619      	mov	r1, r3
 8015ad0:	6878      	ldr	r0, [r7, #4]
 8015ad2:	f7ff ffc4 	bl	8015a5e <metal_io_phys>
 8015ad6:	4603      	mov	r3, r0
}
 8015ad8:	4618      	mov	r0, r3
 8015ada:	3708      	adds	r7, #8
 8015adc:	46bd      	mov	sp, r7
 8015ade:	bd80      	pop	{r7, pc}

08015ae0 <virtqueue_virt_to_phys>:
}

/* Default implementation of V2P based on libmetal */
static inline metal_phys_addr_t virtqueue_virt_to_phys(struct virtqueue *vq,
						       void *buf)
{
 8015ae0:	b580      	push	{r7, lr}
 8015ae2:	b084      	sub	sp, #16
 8015ae4:	af00      	add	r7, sp, #0
 8015ae6:	6078      	str	r0, [r7, #4]
 8015ae8:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015aee:	60fb      	str	r3, [r7, #12]

	return metal_io_virt_to_phys(io, buf);
 8015af0:	6839      	ldr	r1, [r7, #0]
 8015af2:	68f8      	ldr	r0, [r7, #12]
 8015af4:	f7ff ffe1 	bl	8015aba <metal_io_virt_to_phys>
 8015af8:	4603      	mov	r3, r0
}
 8015afa:	4618      	mov	r0, r3
 8015afc:	3710      	adds	r7, #16
 8015afe:	46bd      	mov	sp, r7
 8015b00:	bd80      	pop	{r7, pc}

08015b02 <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 8015b02:	b580      	push	{r7, lr}
 8015b04:	b086      	sub	sp, #24
 8015b06:	af00      	add	r7, sp, #0
 8015b08:	60f8      	str	r0, [r7, #12]
 8015b0a:	607a      	str	r2, [r7, #4]
 8015b0c:	603b      	str	r3, [r7, #0]
 8015b0e:	460b      	mov	r3, r1
 8015b10:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
 8015b12:	2300      	movs	r3, #0
 8015b14:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 8015b16:	697b      	ldr	r3, [r7, #20]
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	d121      	bne.n	8015b60 <virtqueue_create+0x5e>
		vq->vq_dev = virt_dev;
 8015b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b1e:	68fa      	ldr	r2, [r7, #12]
 8015b20:	601a      	str	r2, [r3, #0]
		vq->vq_name =  name;
 8015b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b24:	687a      	ldr	r2, [r7, #4]
 8015b26:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
 8015b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b2a:	897a      	ldrh	r2, [r7, #10]
 8015b2c:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
 8015b2e:	683b      	ldr	r3, [r7, #0]
 8015b30:	891a      	ldrh	r2, [r3, #8]
 8015b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b34:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 8015b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b38:	895a      	ldrh	r2, [r3, #10]
 8015b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b3c:	851a      	strh	r2, [r3, #40]	; 0x28
		vq->callback = callback;
 8015b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b40:	6a3a      	ldr	r2, [r7, #32]
 8015b42:	611a      	str	r2, [r3, #16]
		vq->notify = notify;
 8015b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b48:	615a      	str	r2, [r3, #20]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
 8015b4a:	683b      	ldr	r3, [r7, #0]
 8015b4c:	6819      	ldr	r1, [r3, #0]
 8015b4e:	683b      	ldr	r3, [r7, #0]
 8015b50:	685b      	ldr	r3, [r3, #4]
 8015b52:	461a      	mov	r2, r3
 8015b54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015b56:	f000 f97a 	bl	8015e4e <vq_ring_init>

		/* Disable callbacks - will be enabled by the application
		 * once initialization is completed.
		 */
		virtqueue_disable_cb(vq);
 8015b5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015b5c:	f000 f899 	bl	8015c92 <virtqueue_disable_cb>
	}

	return (status);
 8015b60:	697b      	ldr	r3, [r7, #20]
}
 8015b62:	4618      	mov	r0, r3
 8015b64:	3718      	adds	r7, #24
 8015b66:	46bd      	mov	sp, r7
 8015b68:	bd80      	pop	{r7, pc}

08015b6a <virtqueue_add_buffer>:
 *
 * @return                  - Function status
 */
int virtqueue_add_buffer(struct virtqueue *vq, struct virtqueue_buf *buf_list,
			 int readable, int writable, void *cookie)
{
 8015b6a:	b580      	push	{r7, lr}
 8015b6c:	b08a      	sub	sp, #40	; 0x28
 8015b6e:	af02      	add	r7, sp, #8
 8015b70:	60f8      	str	r0, [r7, #12]
 8015b72:	60b9      	str	r1, [r7, #8]
 8015b74:	607a      	str	r2, [r7, #4]
 8015b76:	603b      	str	r3, [r7, #0]
	struct vq_desc_extra *dxp = NULL;
 8015b78:	2300      	movs	r3, #0
 8015b7a:	61fb      	str	r3, [r7, #28]
	int status = VQUEUE_SUCCESS;
 8015b7c:	2300      	movs	r3, #0
 8015b7e:	61bb      	str	r3, [r7, #24]
	uint16_t head_idx;
	uint16_t idx;
	int needed;

	needed = readable + writable;
 8015b80:	687a      	ldr	r2, [r7, #4]
 8015b82:	683b      	ldr	r3, [r7, #0]
 8015b84:	4413      	add	r3, r2
 8015b86:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(needed < 1, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(vq->vq_free_cnt == 0, status, ERROR_VRING_FULL);

	VQUEUE_BUSY(vq);

	if (status == VQUEUE_SUCCESS) {
 8015b88:	69bb      	ldr	r3, [r7, #24]
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d12c      	bne.n	8015be8 <virtqueue_add_buffer+0x7e>
		VQASSERT(vq, cookie != NULL, "enqueuing with no cookie");

		head_idx = vq->vq_desc_head_idx;
 8015b8e:	68fb      	ldr	r3, [r7, #12]
 8015b90:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8015b92:	827b      	strh	r3, [r7, #18]
		VQ_RING_ASSERT_VALID_IDX(vq, head_idx);
		dxp = &vq->vq_descx[head_idx];
 8015b94:	8a7b      	ldrh	r3, [r7, #18]
 8015b96:	3307      	adds	r3, #7
 8015b98:	00db      	lsls	r3, r3, #3
 8015b9a:	68fa      	ldr	r2, [r7, #12]
 8015b9c:	4413      	add	r3, r2
 8015b9e:	61fb      	str	r3, [r7, #28]

		VQASSERT(vq, dxp->cookie == NULL,
			 "cookie already exists for index");

		dxp->cookie = cookie;
 8015ba0:	69fb      	ldr	r3, [r7, #28]
 8015ba2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015ba4:	601a      	str	r2, [r3, #0]
		dxp->ndescs = needed;
 8015ba6:	697b      	ldr	r3, [r7, #20]
 8015ba8:	b29a      	uxth	r2, r3
 8015baa:	69fb      	ldr	r3, [r7, #28]
 8015bac:	809a      	strh	r2, [r3, #4]

		/* Enqueue buffer onto the ring. */
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
 8015bae:	68fb      	ldr	r3, [r7, #12]
 8015bb0:	69d9      	ldr	r1, [r3, #28]
 8015bb2:	8a7a      	ldrh	r2, [r7, #18]
 8015bb4:	683b      	ldr	r3, [r7, #0]
 8015bb6:	9301      	str	r3, [sp, #4]
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	9300      	str	r3, [sp, #0]
 8015bbc:	68bb      	ldr	r3, [r7, #8]
 8015bbe:	68f8      	ldr	r0, [r7, #12]
 8015bc0:	f000 f8a7 	bl	8015d12 <vq_ring_add_buffer>
 8015bc4:	4603      	mov	r3, r0
 8015bc6:	823b      	strh	r3, [r7, #16]
					 buf_list, readable, writable);

		vq->vq_desc_head_idx = idx;
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	8a3a      	ldrh	r2, [r7, #16]
 8015bcc:	861a      	strh	r2, [r3, #48]	; 0x30
		vq->vq_free_cnt -= needed;
 8015bce:	68fb      	ldr	r3, [r7, #12]
 8015bd0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015bd2:	697b      	ldr	r3, [r7, #20]
 8015bd4:	b29b      	uxth	r3, r3
 8015bd6:	1ad3      	subs	r3, r2, r3
 8015bd8:	b29a      	uxth	r2, r3
 8015bda:	68fb      	ldr	r3, [r7, #12]
 8015bdc:	851a      	strh	r2, [r3, #40]	; 0x28

		/*
		 * Update vring_avail control block fields so that other
		 * side can get buffer using it.
		 */
		vq_ring_update_avail(vq, head_idx);
 8015bde:	8a7b      	ldrh	r3, [r7, #18]
 8015be0:	4619      	mov	r1, r3
 8015be2:	68f8      	ldr	r0, [r7, #12]
 8015be4:	f000 f966 	bl	8015eb4 <vq_ring_update_avail>
	}

	VQUEUE_IDLE(vq);

	return status;
 8015be8:	69bb      	ldr	r3, [r7, #24]
}
 8015bea:	4618      	mov	r0, r3
 8015bec:	3720      	adds	r7, #32
 8015bee:	46bd      	mov	sp, r7
 8015bf0:	bd80      	pop	{r7, pc}

08015bf2 <virtqueue_get_buffer>:
 * @param idx           - index of the buffer
 *
 * @return              - Pointer to used buffer
 */
void *virtqueue_get_buffer(struct virtqueue *vq, uint32_t *len, uint16_t *idx)
{
 8015bf2:	b580      	push	{r7, lr}
 8015bf4:	b088      	sub	sp, #32
 8015bf6:	af00      	add	r7, sp, #0
 8015bf8:	60f8      	str	r0, [r7, #12]
 8015bfa:	60b9      	str	r1, [r7, #8]
 8015bfc:	607a      	str	r2, [r7, #4]
	struct vring_used_elem *uep;
	void *cookie;
	uint16_t used_idx, desc_idx;

	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d006      	beq.n	8015c12 <virtqueue_get_buffer+0x20>
 8015c04:	68fb      	ldr	r3, [r7, #12]
 8015c06:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8015c08:	68fb      	ldr	r3, [r7, #12]
 8015c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c0c:	885b      	ldrh	r3, [r3, #2]
 8015c0e:	429a      	cmp	r2, r3
 8015c10:	d101      	bne.n	8015c16 <virtqueue_get_buffer+0x24>
		return (NULL);
 8015c12:	2300      	movs	r3, #0
 8015c14:	e039      	b.n	8015c8a <virtqueue_get_buffer+0x98>

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
 8015c16:	68fb      	ldr	r3, [r7, #12]
 8015c18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015c1a:	1c5a      	adds	r2, r3, #1
 8015c1c:	b291      	uxth	r1, r2
 8015c1e:	68fa      	ldr	r2, [r7, #12]
 8015c20:	8651      	strh	r1, [r2, #50]	; 0x32
 8015c22:	b21a      	sxth	r2, r3
 8015c24:	68fb      	ldr	r3, [r7, #12]
 8015c26:	895b      	ldrh	r3, [r3, #10]
 8015c28:	3b01      	subs	r3, #1
 8015c2a:	b29b      	uxth	r3, r3
 8015c2c:	b21b      	sxth	r3, r3
 8015c2e:	4013      	ands	r3, r2
 8015c30:	b21b      	sxth	r3, r3
 8015c32:	83fb      	strh	r3, [r7, #30]
	uep = &vq->vq_ring.used->ring[used_idx];
 8015c34:	68fb      	ldr	r3, [r7, #12]
 8015c36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015c38:	8bfb      	ldrh	r3, [r7, #30]
 8015c3a:	00db      	lsls	r3, r3, #3
 8015c3c:	4413      	add	r3, r2
 8015c3e:	3304      	adds	r3, #4
 8015c40:	61bb      	str	r3, [r7, #24]

	atomic_thread_fence(memory_order_seq_cst);
 8015c42:	f3bf 8f5b 	dmb	ish

	desc_idx = (uint16_t)uep->id;
 8015c46:	69bb      	ldr	r3, [r7, #24]
 8015c48:	681b      	ldr	r3, [r3, #0]
 8015c4a:	82fb      	strh	r3, [r7, #22]
	if (len)
 8015c4c:	68bb      	ldr	r3, [r7, #8]
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d003      	beq.n	8015c5a <virtqueue_get_buffer+0x68>
		*len = uep->len;
 8015c52:	69bb      	ldr	r3, [r7, #24]
 8015c54:	685a      	ldr	r2, [r3, #4]
 8015c56:	68bb      	ldr	r3, [r7, #8]
 8015c58:	601a      	str	r2, [r3, #0]

	vq_ring_free_chain(vq, desc_idx);
 8015c5a:	8afb      	ldrh	r3, [r7, #22]
 8015c5c:	4619      	mov	r1, r3
 8015c5e:	68f8      	ldr	r0, [r7, #12]
 8015c60:	f000 f8ae 	bl	8015dc0 <vq_ring_free_chain>

	cookie = vq->vq_descx[desc_idx].cookie;
 8015c64:	8afa      	ldrh	r2, [r7, #22]
 8015c66:	68fb      	ldr	r3, [r7, #12]
 8015c68:	3207      	adds	r2, #7
 8015c6a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8015c6e:	613b      	str	r3, [r7, #16]
	vq->vq_descx[desc_idx].cookie = NULL;
 8015c70:	8afa      	ldrh	r2, [r7, #22]
 8015c72:	68fb      	ldr	r3, [r7, #12]
 8015c74:	3207      	adds	r2, #7
 8015c76:	2100      	movs	r1, #0
 8015c78:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

	if (idx)
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d002      	beq.n	8015c88 <virtqueue_get_buffer+0x96>
		*idx = used_idx;
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	8bfa      	ldrh	r2, [r7, #30]
 8015c86:	801a      	strh	r2, [r3, #0]
	VQUEUE_IDLE(vq);

	return cookie;
 8015c88:	693b      	ldr	r3, [r7, #16]
}
 8015c8a:	4618      	mov	r0, r3
 8015c8c:	3720      	adds	r7, #32
 8015c8e:	46bd      	mov	sp, r7
 8015c90:	bd80      	pop	{r7, pc}

08015c92 <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 8015c92:	b480      	push	{r7}
 8015c94:	b083      	sub	sp, #12
 8015c96:	af00      	add	r7, sp, #0
 8015c98:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	68db      	ldr	r3, [r3, #12]
 8015c9e:	f003 0302 	and.w	r3, r3, #2
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d010      	beq.n	8015cc8 <virtqueue_disable_cb+0x36>
		vring_used_event(&vq->vq_ring) =
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	895b      	ldrh	r3, [r3, #10]
 8015cae:	1ad3      	subs	r3, r2, r3
 8015cb0:	b299      	uxth	r1, r3
		vring_used_event(&vq->vq_ring) =
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	6a1a      	ldr	r2, [r3, #32]
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	699b      	ldr	r3, [r3, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8015cba:	3901      	subs	r1, #1
 8015cbc:	b289      	uxth	r1, r1
		vring_used_event(&vq->vq_ring) =
 8015cbe:	005b      	lsls	r3, r3, #1
 8015cc0:	4413      	add	r3, r2
 8015cc2:	460a      	mov	r2, r1
 8015cc4:	809a      	strh	r2, [r3, #4]
	} else {
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
	}

	VQUEUE_IDLE(vq);
}
 8015cc6:	e008      	b.n	8015cda <virtqueue_disable_cb+0x48>
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	6a1b      	ldr	r3, [r3, #32]
 8015ccc:	881a      	ldrh	r2, [r3, #0]
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	6a1b      	ldr	r3, [r3, #32]
 8015cd2:	f042 0201 	orr.w	r2, r2, #1
 8015cd6:	b292      	uxth	r2, r2
 8015cd8:	801a      	strh	r2, [r3, #0]
}
 8015cda:	bf00      	nop
 8015cdc:	370c      	adds	r7, #12
 8015cde:	46bd      	mov	sp, r7
 8015ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ce4:	4770      	bx	lr

08015ce6 <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 8015ce6:	b580      	push	{r7, lr}
 8015ce8:	b082      	sub	sp, #8
 8015cea:	af00      	add	r7, sp, #0
 8015cec:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 8015cee:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify_host(vq))
 8015cf2:	6878      	ldr	r0, [r7, #4]
 8015cf4:	f000 f91d 	bl	8015f32 <vq_ring_must_notify_host>
 8015cf8:	4603      	mov	r3, r0
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d002      	beq.n	8015d04 <virtqueue_kick+0x1e>
		vq_ring_notify_host(vq);
 8015cfe:	6878      	ldr	r0, [r7, #4]
 8015d00:	f000 f94d 	bl	8015f9e <vq_ring_notify_host>

	vq->vq_queued_cnt = 0;
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	2200      	movs	r2, #0
 8015d08:	855a      	strh	r2, [r3, #42]	; 0x2a

	VQUEUE_IDLE(vq);
}
 8015d0a:	bf00      	nop
 8015d0c:	3708      	adds	r7, #8
 8015d0e:	46bd      	mov	sp, r7
 8015d10:	bd80      	pop	{r7, pc}

08015d12 <vq_ring_add_buffer>:
 */
static uint16_t vq_ring_add_buffer(struct virtqueue *vq,
				   struct vring_desc *desc, uint16_t head_idx,
				   struct virtqueue_buf *buf_list, int readable,
				   int writable)
{
 8015d12:	b580      	push	{r7, lr}
 8015d14:	b088      	sub	sp, #32
 8015d16:	af00      	add	r7, sp, #0
 8015d18:	60f8      	str	r0, [r7, #12]
 8015d1a:	60b9      	str	r1, [r7, #8]
 8015d1c:	603b      	str	r3, [r7, #0]
 8015d1e:	4613      	mov	r3, r2
 8015d20:	80fb      	strh	r3, [r7, #6]
	int i, needed;
	uint16_t idx;

	(void)vq;

	needed = readable + writable;
 8015d22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d26:	4413      	add	r3, r2
 8015d28:	617b      	str	r3, [r7, #20]

	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 8015d2a:	2300      	movs	r3, #0
 8015d2c:	61fb      	str	r3, [r7, #28]
 8015d2e:	88fb      	ldrh	r3, [r7, #6]
 8015d30:	837b      	strh	r3, [r7, #26]
 8015d32:	e03c      	b.n	8015dae <vq_ring_add_buffer+0x9c>
		VQASSERT(vq, idx != VQ_RING_DESC_CHAIN_END,
			 "premature end of free desc chain");

		dp = &desc[idx];
 8015d34:	8b7b      	ldrh	r3, [r7, #26]
 8015d36:	011b      	lsls	r3, r3, #4
 8015d38:	68ba      	ldr	r2, [r7, #8]
 8015d3a:	4413      	add	r3, r2
 8015d3c:	613b      	str	r3, [r7, #16]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
 8015d3e:	69fb      	ldr	r3, [r7, #28]
 8015d40:	00db      	lsls	r3, r3, #3
 8015d42:	683a      	ldr	r2, [r7, #0]
 8015d44:	4413      	add	r3, r2
 8015d46:	681b      	ldr	r3, [r3, #0]
 8015d48:	4619      	mov	r1, r3
 8015d4a:	68f8      	ldr	r0, [r7, #12]
 8015d4c:	f7ff fec8 	bl	8015ae0 <virtqueue_virt_to_phys>
 8015d50:	4603      	mov	r3, r0
 8015d52:	461a      	mov	r2, r3
 8015d54:	f04f 0300 	mov.w	r3, #0
 8015d58:	6939      	ldr	r1, [r7, #16]
 8015d5a:	e9c1 2300 	strd	r2, r3, [r1]
		dp->len = buf_list[i].len;
 8015d5e:	69fb      	ldr	r3, [r7, #28]
 8015d60:	00db      	lsls	r3, r3, #3
 8015d62:	683a      	ldr	r2, [r7, #0]
 8015d64:	4413      	add	r3, r2
 8015d66:	685b      	ldr	r3, [r3, #4]
 8015d68:	461a      	mov	r2, r3
 8015d6a:	693b      	ldr	r3, [r7, #16]
 8015d6c:	609a      	str	r2, [r3, #8]
		dp->flags = 0;
 8015d6e:	693b      	ldr	r3, [r7, #16]
 8015d70:	2200      	movs	r2, #0
 8015d72:	819a      	strh	r2, [r3, #12]

		if (i < needed - 1)
 8015d74:	697b      	ldr	r3, [r7, #20]
 8015d76:	3b01      	subs	r3, #1
 8015d78:	69fa      	ldr	r2, [r7, #28]
 8015d7a:	429a      	cmp	r2, r3
 8015d7c:	da06      	bge.n	8015d8c <vq_ring_add_buffer+0x7a>
			dp->flags |= VRING_DESC_F_NEXT;
 8015d7e:	693b      	ldr	r3, [r7, #16]
 8015d80:	899b      	ldrh	r3, [r3, #12]
 8015d82:	f043 0301 	orr.w	r3, r3, #1
 8015d86:	b29a      	uxth	r2, r3
 8015d88:	693b      	ldr	r3, [r7, #16]
 8015d8a:	819a      	strh	r2, [r3, #12]

		/*
		 * Readable buffers are inserted  into vring before the
		 * writable buffers.
		 */
		if (i >= readable)
 8015d8c:	69fa      	ldr	r2, [r7, #28]
 8015d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d90:	429a      	cmp	r2, r3
 8015d92:	db06      	blt.n	8015da2 <vq_ring_add_buffer+0x90>
			dp->flags |= VRING_DESC_F_WRITE;
 8015d94:	693b      	ldr	r3, [r7, #16]
 8015d96:	899b      	ldrh	r3, [r3, #12]
 8015d98:	f043 0302 	orr.w	r3, r3, #2
 8015d9c:	b29a      	uxth	r2, r3
 8015d9e:	693b      	ldr	r3, [r7, #16]
 8015da0:	819a      	strh	r2, [r3, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 8015da2:	69fb      	ldr	r3, [r7, #28]
 8015da4:	3301      	adds	r3, #1
 8015da6:	61fb      	str	r3, [r7, #28]
 8015da8:	693b      	ldr	r3, [r7, #16]
 8015daa:	89db      	ldrh	r3, [r3, #14]
 8015dac:	837b      	strh	r3, [r7, #26]
 8015dae:	69fa      	ldr	r2, [r7, #28]
 8015db0:	697b      	ldr	r3, [r7, #20]
 8015db2:	429a      	cmp	r2, r3
 8015db4:	dbbe      	blt.n	8015d34 <vq_ring_add_buffer+0x22>
	}

	return (idx);
 8015db6:	8b7b      	ldrh	r3, [r7, #26]
}
 8015db8:	4618      	mov	r0, r3
 8015dba:	3720      	adds	r7, #32
 8015dbc:	46bd      	mov	sp, r7
 8015dbe:	bd80      	pop	{r7, pc}

08015dc0 <vq_ring_free_chain>:
 *
 * vq_ring_free_chain
 *
 */
static void vq_ring_free_chain(struct virtqueue *vq, uint16_t desc_idx)
{
 8015dc0:	b480      	push	{r7}
 8015dc2:	b085      	sub	sp, #20
 8015dc4:	af00      	add	r7, sp, #0
 8015dc6:	6078      	str	r0, [r7, #4]
 8015dc8:	460b      	mov	r3, r1
 8015dca:	807b      	strh	r3, [r7, #2]
	struct vring_desc *dp;
	struct vq_desc_extra *dxp;

	VQ_RING_ASSERT_VALID_IDX(vq, desc_idx);
	dp = &vq->vq_ring.desc[desc_idx];
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	69da      	ldr	r2, [r3, #28]
 8015dd0:	887b      	ldrh	r3, [r7, #2]
 8015dd2:	011b      	lsls	r3, r3, #4
 8015dd4:	4413      	add	r3, r2
 8015dd6:	60fb      	str	r3, [r7, #12]
	dxp = &vq->vq_descx[desc_idx];
 8015dd8:	887b      	ldrh	r3, [r7, #2]
 8015dda:	3307      	adds	r3, #7
 8015ddc:	00db      	lsls	r3, r3, #3
 8015dde:	687a      	ldr	r2, [r7, #4]
 8015de0:	4413      	add	r3, r2
 8015de2:	60bb      	str	r3, [r7, #8]

	if (vq->vq_free_cnt == 0) {
		VQ_RING_ASSERT_CHAIN_TERM(vq);
	}

	vq->vq_free_cnt += dxp->ndescs;
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015de8:	68bb      	ldr	r3, [r7, #8]
 8015dea:	889b      	ldrh	r3, [r3, #4]
 8015dec:	4413      	add	r3, r2
 8015dee:	b29a      	uxth	r2, r3
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	851a      	strh	r2, [r3, #40]	; 0x28
	dxp->ndescs--;
 8015df4:	68bb      	ldr	r3, [r7, #8]
 8015df6:	889b      	ldrh	r3, [r3, #4]
 8015df8:	3b01      	subs	r3, #1
 8015dfa:	b29a      	uxth	r2, r3
 8015dfc:	68bb      	ldr	r3, [r7, #8]
 8015dfe:	809a      	strh	r2, [r3, #4]

	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
 8015e00:	68fb      	ldr	r3, [r7, #12]
 8015e02:	899b      	ldrh	r3, [r3, #12]
 8015e04:	f003 0304 	and.w	r3, r3, #4
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d113      	bne.n	8015e34 <vq_ring_free_chain+0x74>
		while (dp->flags & VRING_DESC_F_NEXT) {
 8015e0c:	e00c      	b.n	8015e28 <vq_ring_free_chain+0x68>
			VQ_RING_ASSERT_VALID_IDX(vq, dp->next);
			dp = &vq->vq_ring.desc[dp->next];
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	69da      	ldr	r2, [r3, #28]
 8015e12:	68fb      	ldr	r3, [r7, #12]
 8015e14:	89db      	ldrh	r3, [r3, #14]
 8015e16:	011b      	lsls	r3, r3, #4
 8015e18:	4413      	add	r3, r2
 8015e1a:	60fb      	str	r3, [r7, #12]
			dxp->ndescs--;
 8015e1c:	68bb      	ldr	r3, [r7, #8]
 8015e1e:	889b      	ldrh	r3, [r3, #4]
 8015e20:	3b01      	subs	r3, #1
 8015e22:	b29a      	uxth	r2, r3
 8015e24:	68bb      	ldr	r3, [r7, #8]
 8015e26:	809a      	strh	r2, [r3, #4]
		while (dp->flags & VRING_DESC_F_NEXT) {
 8015e28:	68fb      	ldr	r3, [r7, #12]
 8015e2a:	899b      	ldrh	r3, [r3, #12]
 8015e2c:	f003 0301 	and.w	r3, r3, #1
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d1ec      	bne.n	8015e0e <vq_ring_free_chain+0x4e>
	/*
	 * We must append the existing free chain, if any, to the end of
	 * newly freed chain. If the virtqueue was completely used, then
	 * head would be VQ_RING_DESC_CHAIN_END (ASSERTed above).
	 */
	dp->next = vq->vq_desc_head_idx;
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8015e38:	68fb      	ldr	r3, [r7, #12]
 8015e3a:	81da      	strh	r2, [r3, #14]
	vq->vq_desc_head_idx = desc_idx;
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	887a      	ldrh	r2, [r7, #2]
 8015e40:	861a      	strh	r2, [r3, #48]	; 0x30
}
 8015e42:	bf00      	nop
 8015e44:	3714      	adds	r7, #20
 8015e46:	46bd      	mov	sp, r7
 8015e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e4c:	4770      	bx	lr

08015e4e <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 8015e4e:	b580      	push	{r7, lr}
 8015e50:	b088      	sub	sp, #32
 8015e52:	af00      	add	r7, sp, #0
 8015e54:	60f8      	str	r0, [r7, #12]
 8015e56:	60b9      	str	r1, [r7, #8]
 8015e58:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	895b      	ldrh	r3, [r3, #10]
 8015e5e:	61bb      	str	r3, [r7, #24]
	vr = &vq->vq_ring;
 8015e60:	68fb      	ldr	r3, [r7, #12]
 8015e62:	3318      	adds	r3, #24
 8015e64:	617b      	str	r3, [r7, #20]

	vring_init(vr, size, (unsigned char *)ring_mem, alignment);
 8015e66:	69b9      	ldr	r1, [r7, #24]
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	68ba      	ldr	r2, [r7, #8]
 8015e6c:	6978      	ldr	r0, [r7, #20]
 8015e6e:	f7ff fd96 	bl	801599e <vring_init>

	for (i = 0; i < size - 1; i++)
 8015e72:	2300      	movs	r3, #0
 8015e74:	61fb      	str	r3, [r7, #28]
 8015e76:	e00c      	b.n	8015e92 <vq_ring_init+0x44>
		vr->desc[i].next = i + 1;
 8015e78:	69fb      	ldr	r3, [r7, #28]
 8015e7a:	b29a      	uxth	r2, r3
 8015e7c:	697b      	ldr	r3, [r7, #20]
 8015e7e:	6859      	ldr	r1, [r3, #4]
 8015e80:	69fb      	ldr	r3, [r7, #28]
 8015e82:	011b      	lsls	r3, r3, #4
 8015e84:	440b      	add	r3, r1
 8015e86:	3201      	adds	r2, #1
 8015e88:	b292      	uxth	r2, r2
 8015e8a:	81da      	strh	r2, [r3, #14]
	for (i = 0; i < size - 1; i++)
 8015e8c:	69fb      	ldr	r3, [r7, #28]
 8015e8e:	3301      	adds	r3, #1
 8015e90:	61fb      	str	r3, [r7, #28]
 8015e92:	69bb      	ldr	r3, [r7, #24]
 8015e94:	3b01      	subs	r3, #1
 8015e96:	69fa      	ldr	r2, [r7, #28]
 8015e98:	429a      	cmp	r2, r3
 8015e9a:	dbed      	blt.n	8015e78 <vq_ring_init+0x2a>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 8015e9c:	697b      	ldr	r3, [r7, #20]
 8015e9e:	685a      	ldr	r2, [r3, #4]
 8015ea0:	69fb      	ldr	r3, [r7, #28]
 8015ea2:	011b      	lsls	r3, r3, #4
 8015ea4:	4413      	add	r3, r2
 8015ea6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8015eaa:	81da      	strh	r2, [r3, #14]
}
 8015eac:	bf00      	nop
 8015eae:	3720      	adds	r7, #32
 8015eb0:	46bd      	mov	sp, r7
 8015eb2:	bd80      	pop	{r7, pc}

08015eb4 <vq_ring_update_avail>:
 *
 * vq_ring_update_avail
 *
 */
static void vq_ring_update_avail(struct virtqueue *vq, uint16_t desc_idx)
{
 8015eb4:	b480      	push	{r7}
 8015eb6:	b085      	sub	sp, #20
 8015eb8:	af00      	add	r7, sp, #0
 8015eba:	6078      	str	r0, [r7, #4]
 8015ebc:	460b      	mov	r3, r1
 8015ebe:	807b      	strh	r3, [r7, #2]
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	6a1b      	ldr	r3, [r3, #32]
 8015ec4:	885b      	ldrh	r3, [r3, #2]
 8015ec6:	b21a      	sxth	r2, r3
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	895b      	ldrh	r3, [r3, #10]
 8015ecc:	3b01      	subs	r3, #1
 8015ece:	b29b      	uxth	r3, r3
 8015ed0:	b21b      	sxth	r3, r3
 8015ed2:	4013      	ands	r3, r2
 8015ed4:	b21b      	sxth	r3, r3
 8015ed6:	81fb      	strh	r3, [r7, #14]
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	6a1a      	ldr	r2, [r3, #32]
 8015edc:	89fb      	ldrh	r3, [r7, #14]
 8015ede:	005b      	lsls	r3, r3, #1
 8015ee0:	4413      	add	r3, r2
 8015ee2:	887a      	ldrh	r2, [r7, #2]
 8015ee4:	809a      	strh	r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 8015ee6:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	6a1b      	ldr	r3, [r3, #32]
 8015eee:	885a      	ldrh	r2, [r3, #2]
 8015ef0:	3201      	adds	r2, #1
 8015ef2:	b292      	uxth	r2, r2
 8015ef4:	805a      	strh	r2, [r3, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015efa:	3301      	adds	r3, #1
 8015efc:	b29a      	uxth	r2, r3
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8015f02:	bf00      	nop
 8015f04:	3714      	adds	r7, #20
 8015f06:	46bd      	mov	sp, r7
 8015f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f0c:	4770      	bx	lr

08015f0e <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 8015f0e:	b580      	push	{r7, lr}
 8015f10:	b082      	sub	sp, #8
 8015f12:	af00      	add	r7, sp, #0
 8015f14:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
 8015f16:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	691b      	ldr	r3, [r3, #16]
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d003      	beq.n	8015f2a <virtqueue_notification+0x1c>
		vq->callback(vq);
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	691b      	ldr	r3, [r3, #16]
 8015f26:	6878      	ldr	r0, [r7, #4]
 8015f28:	4798      	blx	r3
}
 8015f2a:	bf00      	nop
 8015f2c:	3708      	adds	r7, #8
 8015f2e:	46bd      	mov	sp, r7
 8015f30:	bd80      	pop	{r7, pc}

08015f32 <vq_ring_must_notify_host>:
 *
 * vq_ring_must_notify_host
 *
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
 8015f32:	b580      	push	{r7, lr}
 8015f34:	b084      	sub	sp, #16
 8015f36:	af00      	add	r7, sp, #0
 8015f38:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	68db      	ldr	r3, [r3, #12]
 8015f3e:	f003 0302 	and.w	r3, r3, #2
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d01d      	beq.n	8015f82 <vq_ring_must_notify_host+0x50>
		new_idx = vq->vq_ring.avail->idx;
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	6a1b      	ldr	r3, [r3, #32]
 8015f4a:	885b      	ldrh	r3, [r3, #2]
 8015f4c:	81fb      	strh	r3, [r7, #14]
		prev_idx = new_idx - vq->vq_queued_cnt;
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015f52:	89fa      	ldrh	r2, [r7, #14]
 8015f54:	1ad3      	subs	r3, r2, r3
 8015f56:	81bb      	strh	r3, [r7, #12]
		event_idx = vring_avail_event(&vq->vq_ring);
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	699b      	ldr	r3, [r3, #24]
 8015f60:	00db      	lsls	r3, r3, #3
 8015f62:	4413      	add	r3, r2
 8015f64:	685b      	ldr	r3, [r3, #4]
 8015f66:	817b      	strh	r3, [r7, #10]

		return (vring_need_event(event_idx, new_idx, prev_idx) != 0);
 8015f68:	89ba      	ldrh	r2, [r7, #12]
 8015f6a:	89f9      	ldrh	r1, [r7, #14]
 8015f6c:	897b      	ldrh	r3, [r7, #10]
 8015f6e:	4618      	mov	r0, r3
 8015f70:	f7ff fd3e 	bl	80159f0 <vring_need_event>
 8015f74:	4603      	mov	r3, r0
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	bf14      	ite	ne
 8015f7a:	2301      	movne	r3, #1
 8015f7c:	2300      	moveq	r3, #0
 8015f7e:	b2db      	uxtb	r3, r3
 8015f80:	e009      	b.n	8015f96 <vq_ring_must_notify_host+0x64>
	}

	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f86:	881b      	ldrh	r3, [r3, #0]
 8015f88:	f003 0301 	and.w	r3, r3, #1
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	bf0c      	ite	eq
 8015f90:	2301      	moveq	r3, #1
 8015f92:	2300      	movne	r3, #0
 8015f94:	b2db      	uxtb	r3, r3
}
 8015f96:	4618      	mov	r0, r3
 8015f98:	3710      	adds	r7, #16
 8015f9a:	46bd      	mov	sp, r7
 8015f9c:	bd80      	pop	{r7, pc}

08015f9e <vq_ring_notify_host>:
 *
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
 8015f9e:	b580      	push	{r7, lr}
 8015fa0:	b082      	sub	sp, #8
 8015fa2:	af00      	add	r7, sp, #0
 8015fa4:	6078      	str	r0, [r7, #4]
	if (vq->notify)
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	695b      	ldr	r3, [r3, #20]
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d003      	beq.n	8015fb6 <vq_ring_notify_host+0x18>
		vq->notify(vq);
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	695b      	ldr	r3, [r3, #20]
 8015fb2:	6878      	ldr	r0, [r7, #4]
 8015fb4:	4798      	blx	r3
}
 8015fb6:	bf00      	nop
 8015fb8:	3708      	adds	r7, #8
 8015fba:	46bd      	mov	sp, r7
 8015fbc:	bd80      	pop	{r7, pc}
	...

08015fc0 <initSDCard>:

char currentLogFilename[64] = "";
char logBuffer[16384];

uint8_t initSDCard(void)
{
 8015fc0:	b580      	push	{r7, lr}
 8015fc2:	af00      	add	r7, sp, #0

	//Open the file system
	fres = f_mount(&FatFs, "", 0); //1=mount now
 8015fc4:	2200      	movs	r2, #0
 8015fc6:	491c      	ldr	r1, [pc, #112]	; (8016038 <initSDCard+0x78>)
 8015fc8:	481c      	ldr	r0, [pc, #112]	; (801603c <initSDCard+0x7c>)
 8015fca:	f7fc fde3 	bl	8012b94 <f_mount>
 8015fce:	4603      	mov	r3, r0
 8015fd0:	461a      	mov	r2, r3
 8015fd2:	4b1b      	ldr	r3, [pc, #108]	; (8016040 <initSDCard+0x80>)
 8015fd4:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK)
 8015fd6:	4b1a      	ldr	r3, [pc, #104]	; (8016040 <initSDCard+0x80>)
 8015fd8:	781b      	ldrb	r3, [r3, #0]
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d002      	beq.n	8015fe4 <initSDCard+0x24>
	{
		//	myprintf("f_mount error (%i)\r\n", fres);
		return (uint8_t)fres;
 8015fde:	4b18      	ldr	r3, [pc, #96]	; (8016040 <initSDCard+0x80>)
 8015fe0:	781b      	ldrb	r3, [r3, #0]
 8015fe2:	e026      	b.n	8016032 <initSDCard+0x72>
	}


	//  fres = f_mkfs("\\", FM_FAT32, 0, buffer, sizeof(buffer));
	fres = f_getfree("", &free_clusters, &getFreeFs);
 8015fe4:	4a17      	ldr	r2, [pc, #92]	; (8016044 <initSDCard+0x84>)
 8015fe6:	4918      	ldr	r1, [pc, #96]	; (8016048 <initSDCard+0x88>)
 8015fe8:	4813      	ldr	r0, [pc, #76]	; (8016038 <initSDCard+0x78>)
 8015fea:	f7fd fb33 	bl	8013654 <f_getfree>
 8015fee:	4603      	mov	r3, r0
 8015ff0:	461a      	mov	r2, r3
 8015ff2:	4b13      	ldr	r3, [pc, #76]	; (8016040 <initSDCard+0x80>)
 8015ff4:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK)
 8015ff6:	4b12      	ldr	r3, [pc, #72]	; (8016040 <initSDCard+0x80>)
 8015ff8:	781b      	ldrb	r3, [r3, #0]
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d002      	beq.n	8016004 <initSDCard+0x44>
	{
		//	myprintf("f_getfree error (%i)\r\n", fres);
		return (uint8_t)fres;
 8015ffe:	4b10      	ldr	r3, [pc, #64]	; (8016040 <initSDCard+0x80>)
 8016000:	781b      	ldrb	r3, [r3, #0]
 8016002:	e016      	b.n	8016032 <initSDCard+0x72>
	}

	//Formula comes from ChaN's documentation
	total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8016004:	4b0f      	ldr	r3, [pc, #60]	; (8016044 <initSDCard+0x84>)
 8016006:	681b      	ldr	r3, [r3, #0]
 8016008:	699b      	ldr	r3, [r3, #24]
 801600a:	3b02      	subs	r3, #2
 801600c:	4a0d      	ldr	r2, [pc, #52]	; (8016044 <initSDCard+0x84>)
 801600e:	6812      	ldr	r2, [r2, #0]
 8016010:	8952      	ldrh	r2, [r2, #10]
 8016012:	fb02 f303 	mul.w	r3, r2, r3
 8016016:	4a0d      	ldr	r2, [pc, #52]	; (801604c <initSDCard+0x8c>)
 8016018:	6013      	str	r3, [r2, #0]
	free_sectors = free_clusters * getFreeFs->csize;
 801601a:	4b0a      	ldr	r3, [pc, #40]	; (8016044 <initSDCard+0x84>)
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	895b      	ldrh	r3, [r3, #10]
 8016020:	461a      	mov	r2, r3
 8016022:	4b09      	ldr	r3, [pc, #36]	; (8016048 <initSDCard+0x88>)
 8016024:	681b      	ldr	r3, [r3, #0]
 8016026:	fb03 f302 	mul.w	r3, r3, r2
 801602a:	4a09      	ldr	r2, [pc, #36]	; (8016050 <initSDCard+0x90>)
 801602c:	6013      	str	r3, [r2, #0]
	return (uint8_t)fres;
 801602e:	4b04      	ldr	r3, [pc, #16]	; (8016040 <initSDCard+0x80>)
 8016030:	781b      	ldrb	r3, [r3, #0]
}
 8016032:	4618      	mov	r0, r3
 8016034:	bd80      	pop	{r7, pc}
 8016036:	bf00      	nop
 8016038:	0801f8f4 	.word	0x0801f8f4
 801603c:	2400b4f8 	.word	0x2400b4f8
 8016040:	2400f934 	.word	0x2400f934
 8016044:	2400b72c 	.word	0x2400b72c
 8016048:	2400fb68 	.word	0x2400fb68
 801604c:	2400fb6c 	.word	0x2400fb6c
 8016050:	2400b730 	.word	0x2400b730

08016054 <createNewLogFile>:

void createNewLogFile(void)
{
 8016054:	b580      	push	{r7, lr}
 8016056:	b088      	sub	sp, #32
 8016058:	af00      	add	r7, sp, #0
	unsigned int BytesWritten = 0;
 801605a:	2300      	movs	r3, #0
 801605c:	61fb      	str	r3, [r7, #28]
	unsigned int BytesRead = 0;
 801605e:	2300      	movs	r3, #0
 8016060:	61bb      	str	r3, [r7, #24]
	char localIndex[6] = "";
 8016062:	2300      	movs	r3, #0
 8016064:	613b      	str	r3, [r7, #16]
 8016066:	2300      	movs	r3, #0
 8016068:	82bb      	strh	r3, [r7, #20]

	fres = f_open(&fil, "Index.txt", FA_READ);
 801606a:	2201      	movs	r2, #1
 801606c:	4957      	ldr	r1, [pc, #348]	; (80161cc <createNewLogFile+0x178>)
 801606e:	4858      	ldr	r0, [pc, #352]	; (80161d0 <createNewLogFile+0x17c>)
 8016070:	f7fc fdd6 	bl	8012c20 <f_open>
 8016074:	4603      	mov	r3, r0
 8016076:	461a      	mov	r2, r3
 8016078:	4b56      	ldr	r3, [pc, #344]	; (80161d4 <createNewLogFile+0x180>)
 801607a:	701a      	strb	r2, [r3, #0]
	fres = f_read(&fil, &FileReadBuffer, sizeof(FileReadBuffer), &BytesRead);
 801607c:	f107 0318 	add.w	r3, r7, #24
 8016080:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016084:	4954      	ldr	r1, [pc, #336]	; (80161d8 <createNewLogFile+0x184>)
 8016086:	4852      	ldr	r0, [pc, #328]	; (80161d0 <createNewLogFile+0x17c>)
 8016088:	f7fc ff88 	bl	8012f9c <f_read>
 801608c:	4603      	mov	r3, r0
 801608e:	461a      	mov	r2, r3
 8016090:	4b50      	ldr	r3, [pc, #320]	; (80161d4 <createNewLogFile+0x180>)
 8016092:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK)
 8016094:	4b4f      	ldr	r3, [pc, #316]	; (80161d4 <createNewLogFile+0x180>)
 8016096:	781b      	ldrb	r3, [r3, #0]
 8016098:	2b00      	cmp	r3, #0
 801609a:	d021      	beq.n	80160e0 <createNewLogFile+0x8c>
	{

		do
		{
			HAL_Delay(1);
 801609c:	2001      	movs	r0, #1
 801609e:	f7ec fad1 	bl	8002644 <HAL_Delay>
			fres = f_open(&fil, "Index.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 80160a2:	221a      	movs	r2, #26
 80160a4:	4949      	ldr	r1, [pc, #292]	; (80161cc <createNewLogFile+0x178>)
 80160a6:	484a      	ldr	r0, [pc, #296]	; (80161d0 <createNewLogFile+0x17c>)
 80160a8:	f7fc fdba 	bl	8012c20 <f_open>
 80160ac:	4603      	mov	r3, r0
 80160ae:	461a      	mov	r2, r3
 80160b0:	4b48      	ldr	r3, [pc, #288]	; (80161d4 <createNewLogFile+0x180>)
 80160b2:	701a      	strb	r2, [r3, #0]
		} while ( (fres != FR_OK) );
 80160b4:	4b47      	ldr	r3, [pc, #284]	; (80161d4 <createNewLogFile+0x180>)
 80160b6:	781b      	ldrb	r3, [r3, #0]
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d1ef      	bne.n	801609c <createNewLogFile+0x48>

		fres = f_write(&fil, "00000\t", strlen("00000\t"), &BytesWritten);
 80160bc:	f107 031c 	add.w	r3, r7, #28
 80160c0:	2206      	movs	r2, #6
 80160c2:	4946      	ldr	r1, [pc, #280]	; (80161dc <createNewLogFile+0x188>)
 80160c4:	4842      	ldr	r0, [pc, #264]	; (80161d0 <createNewLogFile+0x17c>)
 80160c6:	f7fd f8a8 	bl	801321a <f_write>
 80160ca:	4603      	mov	r3, r0
 80160cc:	461a      	mov	r2, r3
 80160ce:	4b41      	ldr	r3, [pc, #260]	; (80161d4 <createNewLogFile+0x180>)
 80160d0:	701a      	strb	r2, [r3, #0]
		fres = f_close(&fil);
 80160d2:	483f      	ldr	r0, [pc, #252]	; (80161d0 <createNewLogFile+0x17c>)
 80160d4:	f7fd fa94 	bl	8013600 <f_close>
 80160d8:	4603      	mov	r3, r0
 80160da:	461a      	mov	r2, r3
 80160dc:	4b3d      	ldr	r3, [pc, #244]	; (80161d4 <createNewLogFile+0x180>)
 80160de:	701a      	strb	r2, [r3, #0]
	}
	if (BytesRead == 6)
 80160e0:	69bb      	ldr	r3, [r7, #24]
 80160e2:	2b06      	cmp	r3, #6
 80160e4:	d112      	bne.n	801610c <createNewLogFile+0xb8>
	{
		memcpy(localIndex, FileReadBuffer, 5);
 80160e6:	f107 0310 	add.w	r3, r7, #16
 80160ea:	2205      	movs	r2, #5
 80160ec:	493a      	ldr	r1, [pc, #232]	; (80161d8 <createNewLogFile+0x184>)
 80160ee:	4618      	mov	r0, r3
 80160f0:	f004 fb66 	bl	801a7c0 <memcpy>
		localIndex[5] = '\0';
 80160f4:	2300      	movs	r3, #0
 80160f6:	757b      	strb	r3, [r7, #21]
		previousLogIndex = atoi(localIndex);
 80160f8:	f107 0310 	add.w	r3, r7, #16
 80160fc:	4618      	mov	r0, r3
 80160fe:	f004 fb0f 	bl	801a720 <atoi>
 8016102:	4603      	mov	r3, r0
 8016104:	461a      	mov	r2, r3
 8016106:	4b36      	ldr	r3, [pc, #216]	; (80161e0 <createNewLogFile+0x18c>)
 8016108:	601a      	str	r2, [r3, #0]
 801610a:	e002      	b.n	8016112 <createNewLogFile+0xbe>
	}
	else
	{
		//TODO: what if br is not 6
		// recreate index, etc.
		previousLogIndex = 0;
 801610c:	4b34      	ldr	r3, [pc, #208]	; (80161e0 <createNewLogFile+0x18c>)
 801610e:	2200      	movs	r2, #0
 8016110:	601a      	str	r2, [r3, #0]
	}
	fres = f_close(&fil);
 8016112:	482f      	ldr	r0, [pc, #188]	; (80161d0 <createNewLogFile+0x17c>)
 8016114:	f7fd fa74 	bl	8013600 <f_close>
 8016118:	4603      	mov	r3, r0
 801611a:	461a      	mov	r2, r3
 801611c:	4b2d      	ldr	r3, [pc, #180]	; (80161d4 <createNewLogFile+0x180>)
 801611e:	701a      	strb	r2, [r3, #0]
	fres = f_open(&fil, "Index.txt", FA_OPEN_EXISTING | FA_WRITE);
 8016120:	2202      	movs	r2, #2
 8016122:	492a      	ldr	r1, [pc, #168]	; (80161cc <createNewLogFile+0x178>)
 8016124:	482a      	ldr	r0, [pc, #168]	; (80161d0 <createNewLogFile+0x17c>)
 8016126:	f7fc fd7b 	bl	8012c20 <f_open>
 801612a:	4603      	mov	r3, r0
 801612c:	461a      	mov	r2, r3
 801612e:	4b29      	ldr	r3, [pc, #164]	; (80161d4 <createNewLogFile+0x180>)
 8016130:	701a      	strb	r2, [r3, #0]

	if (previousLogIndex + 1 < 100000)
 8016132:	4b2b      	ldr	r3, [pc, #172]	; (80161e0 <createNewLogFile+0x18c>)
 8016134:	681b      	ldr	r3, [r3, #0]
 8016136:	3301      	adds	r3, #1
 8016138:	4a2a      	ldr	r2, [pc, #168]	; (80161e4 <createNewLogFile+0x190>)
 801613a:	4293      	cmp	r3, r2
 801613c:	d902      	bls.n	8016144 <createNewLogFile+0xf0>
	{

	}
	else
	{
		previousLogIndex = 0;
 801613e:	4b28      	ldr	r3, [pc, #160]	; (80161e0 <createNewLogFile+0x18c>)
 8016140:	2200      	movs	r2, #0
 8016142:	601a      	str	r2, [r3, #0]
	}
	previousLogIndex++;
 8016144:	4b26      	ldr	r3, [pc, #152]	; (80161e0 <createNewLogFile+0x18c>)
 8016146:	681b      	ldr	r3, [r3, #0]
 8016148:	3301      	adds	r3, #1
 801614a:	4a25      	ldr	r2, [pc, #148]	; (80161e0 <createNewLogFile+0x18c>)
 801614c:	6013      	str	r3, [r2, #0]

	char localString[16] = "";
 801614e:	2300      	movs	r3, #0
 8016150:	603b      	str	r3, [r7, #0]
 8016152:	1d3b      	adds	r3, r7, #4
 8016154:	2200      	movs	r2, #0
 8016156:	601a      	str	r2, [r3, #0]
 8016158:	605a      	str	r2, [r3, #4]
 801615a:	609a      	str	r2, [r3, #8]
	sprintf(localString, "%05ld\t",previousLogIndex);
 801615c:	4b20      	ldr	r3, [pc, #128]	; (80161e0 <createNewLogFile+0x18c>)
 801615e:	681a      	ldr	r2, [r3, #0]
 8016160:	463b      	mov	r3, r7
 8016162:	4921      	ldr	r1, [pc, #132]	; (80161e8 <createNewLogFile+0x194>)
 8016164:	4618      	mov	r0, r3
 8016166:	f005 fc7d 	bl	801ba64 <siprintf>
	//
	fres = f_write(&fil, localString, strlen(localString), &BytesWritten);
 801616a:	463b      	mov	r3, r7
 801616c:	4618      	mov	r0, r3
 801616e:	f7ea f8c1 	bl	80002f4 <strlen>
 8016172:	4602      	mov	r2, r0
 8016174:	f107 031c 	add.w	r3, r7, #28
 8016178:	4639      	mov	r1, r7
 801617a:	4815      	ldr	r0, [pc, #84]	; (80161d0 <createNewLogFile+0x17c>)
 801617c:	f7fd f84d 	bl	801321a <f_write>
 8016180:	4603      	mov	r3, r0
 8016182:	461a      	mov	r2, r3
 8016184:	4b13      	ldr	r3, [pc, #76]	; (80161d4 <createNewLogFile+0x180>)
 8016186:	701a      	strb	r2, [r3, #0]
	f_close(&fil);
 8016188:	4811      	ldr	r0, [pc, #68]	; (80161d0 <createNewLogFile+0x17c>)
 801618a:	f7fd fa39 	bl	8013600 <f_close>

	sprintf(currentLogFilename,"LOG_%05ld.CSV", previousLogIndex);
 801618e:	4b14      	ldr	r3, [pc, #80]	; (80161e0 <createNewLogFile+0x18c>)
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	461a      	mov	r2, r3
 8016194:	4915      	ldr	r1, [pc, #84]	; (80161ec <createNewLogFile+0x198>)
 8016196:	4816      	ldr	r0, [pc, #88]	; (80161f0 <createNewLogFile+0x19c>)
 8016198:	f005 fc64 	bl	801ba64 <siprintf>
	fres = f_open(&fil, currentLogFilename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 801619c:	221a      	movs	r2, #26
 801619e:	4914      	ldr	r1, [pc, #80]	; (80161f0 <createNewLogFile+0x19c>)
 80161a0:	480b      	ldr	r0, [pc, #44]	; (80161d0 <createNewLogFile+0x17c>)
 80161a2:	f7fc fd3d 	bl	8012c20 <f_open>
 80161a6:	4603      	mov	r3, r0
 80161a8:	461a      	mov	r2, r3
 80161aa:	4b0a      	ldr	r3, [pc, #40]	; (80161d4 <createNewLogFile+0x180>)
 80161ac:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK)
 80161ae:	4b09      	ldr	r3, [pc, #36]	; (80161d4 <createNewLogFile+0x180>)
 80161b0:	781b      	ldrb	r3, [r3, #0]
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d103      	bne.n	80161be <createNewLogFile+0x16a>
	{
		isValidLog = true;
 80161b6:	4b0f      	ldr	r3, [pc, #60]	; (80161f4 <createNewLogFile+0x1a0>)
 80161b8:	2201      	movs	r2, #1
 80161ba:	701a      	strb	r2, [r3, #0]
	else
	{
		isValidLog = false;
	}

}
 80161bc:	e002      	b.n	80161c4 <createNewLogFile+0x170>
		isValidLog = false;
 80161be:	4b0d      	ldr	r3, [pc, #52]	; (80161f4 <createNewLogFile+0x1a0>)
 80161c0:	2200      	movs	r2, #0
 80161c2:	701a      	strb	r2, [r3, #0]
}
 80161c4:	bf00      	nop
 80161c6:	3720      	adds	r7, #32
 80161c8:	46bd      	mov	sp, r7
 80161ca:	bd80      	pop	{r7, pc}
 80161cc:	0801f8f8 	.word	0x0801f8f8
 80161d0:	2400f938 	.word	0x2400f938
 80161d4:	2400f934 	.word	0x2400f934
 80161d8:	2400a624 	.word	0x2400a624
 80161dc:	0801f904 	.word	0x0801f904
 80161e0:	2400aa24 	.word	0x2400aa24
 80161e4:	0001869f 	.word	0x0001869f
 80161e8:	0801f90c 	.word	0x0801f90c
 80161ec:	0801f914 	.word	0x0801f914
 80161f0:	2400aa2c 	.word	0x2400aa2c
 80161f4:	2400aa28 	.word	0x2400aa28

080161f8 <screenInit>:
tIMAGE_DATA safeairBarImageArray[5];

uint8_t nextFrameToDraw[40960] = {0xFF};

void screenInit(void)
{
 80161f8:	b580      	push	{r7, lr}
 80161fa:	b082      	sub	sp, #8
 80161fc:	af02      	add	r7, sp, #8
	isPortrait = true;
 80161fe:	4b63      	ldr	r3, [pc, #396]	; (801638c <screenInit+0x194>)
 8016200:	2201      	movs	r2, #1
 8016202:	701a      	strb	r2, [r3, #0]
	DEV_Module_Init();
 8016204:	f7f8 f840 	bl	800e288 <DEV_Module_Init>
	LCD_1IN8_SetBackLight(1000);
 8016208:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801620c:	f7f9 f9ee 	bl	800f5ec <LCD_1IN8_SetBackLight>

	if (isPortrait)
 8016210:	4b5e      	ldr	r3, [pc, #376]	; (801638c <screenInit+0x194>)
 8016212:	781b      	ldrb	r3, [r3, #0]
 8016214:	2b00      	cmp	r3, #0
 8016216:	d00d      	beq.n	8016234 <screenInit+0x3c>
	{
		LCD_1IN8_Init(L2R_U2D);
 8016218:	2000      	movs	r0, #0
 801621a:	f7f9 f8c7 	bl	800f3ac <LCD_1IN8_Init>
		LCD_1IN8_Clear(BLACK);
 801621e:	2000      	movs	r0, #0
 8016220:	f7f9 f9a6 	bl	800f570 <LCD_1IN8_Clear>
		Paint_NewImage(LCD_1IN8_HEIGHT,LCD_1IN8_WIDTH, 0, WHITE);
 8016224:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016228:	2200      	movs	r2, #0
 801622a:	21a0      	movs	r1, #160	; 0xa0
 801622c:	2080      	movs	r0, #128	; 0x80
 801622e:	f7f8 f84b 	bl	800e2c8 <Paint_NewImage>
 8016232:	e00c      	b.n	801624e <screenInit+0x56>
	}
	else
	{
		LCD_1IN8_Init(U2D_R2L);
 8016234:	2005      	movs	r0, #5
 8016236:	f7f9 f8b9 	bl	800f3ac <LCD_1IN8_Init>
		LCD_1IN8_Clear(BLACK);
 801623a:	2000      	movs	r0, #0
 801623c:	f7f9 f998 	bl	800f570 <LCD_1IN8_Clear>
		Paint_NewImage(LCD_1IN8_WIDTH,LCD_1IN8_HEIGHT, 0, WHITE);
 8016240:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016244:	2200      	movs	r2, #0
 8016246:	2180      	movs	r1, #128	; 0x80
 8016248:	20a0      	movs	r0, #160	; 0xa0
 801624a:	f7f8 f83d 	bl	800e2c8 <Paint_NewImage>
	}

	Paint_SetClearFuntion(LCD_1IN8_Clear);
 801624e:	4850      	ldr	r0, [pc, #320]	; (8016390 <screenInit+0x198>)
 8016250:	f7f8 f886 	bl	800e360 <Paint_SetClearFuntion>
	Paint_SetDisplayFuntion(LCD_1IN8_DrawPaint);
 8016254:	484f      	ldr	r0, [pc, #316]	; (8016394 <screenInit+0x19c>)
 8016256:	f7f8 f893 	bl	800e380 <Paint_SetDisplayFuntion>

//	printf("Paint_Clear\r\n");
	Paint_Clear(WHITE);
 801625a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801625e:	f7f8 f94f 	bl	800e500 <Paint_Clear>
	DEV_Delay_ms(1000);
 8016262:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016266:	f7ec f9ed 	bl	8002644 <HAL_Delay>

	if (isPortrait)
 801626a:	4b48      	ldr	r3, [pc, #288]	; (801638c <screenInit+0x194>)
 801626c:	781b      	ldrb	r3, [r3, #0]
 801626e:	2b00      	cmp	r3, #0
 8016270:	d042      	beq.n	80162f8 <screenInit+0x100>
	{
		Paint_DrawImage(gImage_Rain, 0, 0, 128, 128);
 8016272:	2380      	movs	r3, #128	; 0x80
 8016274:	9300      	str	r3, [sp, #0]
 8016276:	2380      	movs	r3, #128	; 0x80
 8016278:	2200      	movs	r2, #0
 801627a:	2100      	movs	r1, #0
 801627c:	4846      	ldr	r0, [pc, #280]	; (8016398 <screenInit+0x1a0>)
 801627e:	f7f8 fe57 	bl	800ef30 <Paint_DrawImage>
		Paint_DrawString_EN(1, 130, "Version", &Font12, WHITE,  BLACK);
 8016282:	2300      	movs	r3, #0
 8016284:	9301      	str	r3, [sp, #4]
 8016286:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801628a:	9300      	str	r3, [sp, #0]
 801628c:	4b43      	ldr	r3, [pc, #268]	; (801639c <screenInit+0x1a4>)
 801628e:	4a44      	ldr	r2, [pc, #272]	; (80163a0 <screenInit+0x1a8>)
 8016290:	2182      	movs	r1, #130	; 0x82
 8016292:	2001      	movs	r0, #1
 8016294:	f7f8 fd62 	bl	800ed5c <Paint_DrawString_EN>
		Paint_DrawFloatNum (1, 142 , versionID, 2,  &Font12, BLACK, WHITE);
 8016298:	4b42      	ldr	r3, [pc, #264]	; (80163a4 <screenInit+0x1ac>)
 801629a:	edd3 7a00 	vldr	s15, [r3]
 801629e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80162a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80162a6:	9301      	str	r3, [sp, #4]
 80162a8:	2300      	movs	r3, #0
 80162aa:	9300      	str	r3, [sp, #0]
 80162ac:	4b3b      	ldr	r3, [pc, #236]	; (801639c <screenInit+0x1a4>)
 80162ae:	2202      	movs	r2, #2
 80162b0:	eeb0 0b47 	vmov.f64	d0, d7
 80162b4:	218e      	movs	r1, #142	; 0x8e
 80162b6:	2001      	movs	r0, #1
 80162b8:	f7f8 fda8 	bl	800ee0c <Paint_DrawFloatNum>
		Paint_DrawString_EN(70, 130, "BuildID", &Font12, WHITE,  BLACK);
 80162bc:	2300      	movs	r3, #0
 80162be:	9301      	str	r3, [sp, #4]
 80162c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80162c4:	9300      	str	r3, [sp, #0]
 80162c6:	4b35      	ldr	r3, [pc, #212]	; (801639c <screenInit+0x1a4>)
 80162c8:	4a37      	ldr	r2, [pc, #220]	; (80163a8 <screenInit+0x1b0>)
 80162ca:	2182      	movs	r1, #130	; 0x82
 80162cc:	2046      	movs	r0, #70	; 0x46
 80162ce:	f7f8 fd45 	bl	800ed5c <Paint_DrawString_EN>
		Paint_DrawFloatNum (70, 142 , buildID, 2,  &Font12, BLACK, WHITE);
 80162d2:	4b36      	ldr	r3, [pc, #216]	; (80163ac <screenInit+0x1b4>)
 80162d4:	edd3 7a00 	vldr	s15, [r3]
 80162d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80162dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80162e0:	9301      	str	r3, [sp, #4]
 80162e2:	2300      	movs	r3, #0
 80162e4:	9300      	str	r3, [sp, #0]
 80162e6:	4b2d      	ldr	r3, [pc, #180]	; (801639c <screenInit+0x1a4>)
 80162e8:	2202      	movs	r2, #2
 80162ea:	eeb0 0b47 	vmov.f64	d0, d7
 80162ee:	218e      	movs	r1, #142	; 0x8e
 80162f0:	2046      	movs	r0, #70	; 0x46
 80162f2:	f7f8 fd8b 	bl	800ee0c <Paint_DrawFloatNum>
 80162f6:	e041      	b.n	801637c <screenInit+0x184>
	}
	else
	{
		Paint_DrawImage(gImage_Rain, 16, 0, 128, 128);
 80162f8:	2380      	movs	r3, #128	; 0x80
 80162fa:	9300      	str	r3, [sp, #0]
 80162fc:	2380      	movs	r3, #128	; 0x80
 80162fe:	2200      	movs	r2, #0
 8016300:	2110      	movs	r1, #16
 8016302:	4825      	ldr	r0, [pc, #148]	; (8016398 <screenInit+0x1a0>)
 8016304:	f7f8 fe14 	bl	800ef30 <Paint_DrawImage>
		Paint_DrawString_EN(1, 98, "Version", &Font12, WHITE,  BLACK);
 8016308:	2300      	movs	r3, #0
 801630a:	9301      	str	r3, [sp, #4]
 801630c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016310:	9300      	str	r3, [sp, #0]
 8016312:	4b22      	ldr	r3, [pc, #136]	; (801639c <screenInit+0x1a4>)
 8016314:	4a22      	ldr	r2, [pc, #136]	; (80163a0 <screenInit+0x1a8>)
 8016316:	2162      	movs	r1, #98	; 0x62
 8016318:	2001      	movs	r0, #1
 801631a:	f7f8 fd1f 	bl	800ed5c <Paint_DrawString_EN>
		Paint_DrawFloatNum (1, 110 , versionID, 2,  &Font12, BLACK, WHITE);
 801631e:	4b21      	ldr	r3, [pc, #132]	; (80163a4 <screenInit+0x1ac>)
 8016320:	edd3 7a00 	vldr	s15, [r3]
 8016324:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8016328:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801632c:	9301      	str	r3, [sp, #4]
 801632e:	2300      	movs	r3, #0
 8016330:	9300      	str	r3, [sp, #0]
 8016332:	4b1a      	ldr	r3, [pc, #104]	; (801639c <screenInit+0x1a4>)
 8016334:	2202      	movs	r2, #2
 8016336:	eeb0 0b47 	vmov.f64	d0, d7
 801633a:	216e      	movs	r1, #110	; 0x6e
 801633c:	2001      	movs	r0, #1
 801633e:	f7f8 fd65 	bl	800ee0c <Paint_DrawFloatNum>
		Paint_DrawString_EN(104, 98, "BuildID", &Font12, WHITE,  BLACK);
 8016342:	2300      	movs	r3, #0
 8016344:	9301      	str	r3, [sp, #4]
 8016346:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801634a:	9300      	str	r3, [sp, #0]
 801634c:	4b13      	ldr	r3, [pc, #76]	; (801639c <screenInit+0x1a4>)
 801634e:	4a16      	ldr	r2, [pc, #88]	; (80163a8 <screenInit+0x1b0>)
 8016350:	2162      	movs	r1, #98	; 0x62
 8016352:	2068      	movs	r0, #104	; 0x68
 8016354:	f7f8 fd02 	bl	800ed5c <Paint_DrawString_EN>
		Paint_DrawFloatNum (124, 110 , buildID, 2,  &Font12, BLACK, WHITE);
 8016358:	4b14      	ldr	r3, [pc, #80]	; (80163ac <screenInit+0x1b4>)
 801635a:	edd3 7a00 	vldr	s15, [r3]
 801635e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8016362:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016366:	9301      	str	r3, [sp, #4]
 8016368:	2300      	movs	r3, #0
 801636a:	9300      	str	r3, [sp, #0]
 801636c:	4b0b      	ldr	r3, [pc, #44]	; (801639c <screenInit+0x1a4>)
 801636e:	2202      	movs	r2, #2
 8016370:	eeb0 0b47 	vmov.f64	d0, d7
 8016374:	216e      	movs	r1, #110	; 0x6e
 8016376:	207c      	movs	r0, #124	; 0x7c
 8016378:	f7f8 fd48 	bl	800ee0c <Paint_DrawFloatNum>
	}


	HAL_Delay(1000);
 801637c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016380:	f7ec f960 	bl	8002644 <HAL_Delay>
}
 8016384:	bf00      	nop
 8016386:	46bd      	mov	sp, r7
 8016388:	bd80      	pop	{r7, pc}
 801638a:	bf00      	nop
 801638c:	2400008c 	.word	0x2400008c
 8016390:	0800f571 	.word	0x0800f571
 8016394:	0800f4e5 	.word	0x0800f4e5
 8016398:	08020154 	.word	0x08020154
 801639c:	24000030 	.word	0x24000030
 80163a0:	0801f930 	.word	0x0801f930
 80163a4:	24000008 	.word	0x24000008
 80163a8:	0801f938 	.word	0x0801f938
 80163ac:	2400000c 	.word	0x2400000c

080163b0 <screenClear>:

void screenClear(void)
{
 80163b0:	b580      	push	{r7, lr}
 80163b2:	af00      	add	r7, sp, #0
	if (isPortrait)
 80163b4:	4b0e      	ldr	r3, [pc, #56]	; (80163f0 <screenClear+0x40>)
 80163b6:	781b      	ldrb	r3, [r3, #0]
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	d007      	beq.n	80163cc <screenClear+0x1c>
	{
		Paint_NewImage(LCD_1IN8_HEIGHT,LCD_1IN8_WIDTH, 0, WHITE);
 80163bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80163c0:	2200      	movs	r2, #0
 80163c2:	21a0      	movs	r1, #160	; 0xa0
 80163c4:	2080      	movs	r0, #128	; 0x80
 80163c6:	f7f7 ff7f 	bl	800e2c8 <Paint_NewImage>
 80163ca:	e006      	b.n	80163da <screenClear+0x2a>
	}
	else
	{
		Paint_NewImage(LCD_1IN8_WIDTH,LCD_1IN8_HEIGHT, 0, WHITE);
 80163cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80163d0:	2200      	movs	r2, #0
 80163d2:	2180      	movs	r1, #128	; 0x80
 80163d4:	20a0      	movs	r0, #160	; 0xa0
 80163d6:	f7f7 ff77 	bl	800e2c8 <Paint_NewImage>
	}

	Paint_Clear(WHITE);
 80163da:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80163de:	f7f8 f88f 	bl	800e500 <Paint_Clear>
	DEV_Delay_ms(1000);
 80163e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80163e6:	f7ec f92d 	bl	8002644 <HAL_Delay>
}
 80163ea:	bf00      	nop
 80163ec:	bd80      	pop	{r7, pc}
 80163ee:	bf00      	nop
 80163f0:	2400008c 	.word	0x2400008c
 80163f4:	00000000 	.word	0x00000000

080163f8 <centeredString>:

void centeredString(UWORD XCenterstart, UWORD Ystart, const char * pString, uint16_t textColor, uint16_t backgroundColor, uint8_t numberOfCharactersToClear, sFONT localFont)
{
 80163f8:	b590      	push	{r4, r7, lr}
 80163fa:	b089      	sub	sp, #36	; 0x24
 80163fc:	af02      	add	r7, sp, #8
 80163fe:	60ba      	str	r2, [r7, #8]
 8016400:	461a      	mov	r2, r3
 8016402:	4603      	mov	r3, r0
 8016404:	81fb      	strh	r3, [r7, #14]
 8016406:	460b      	mov	r3, r1
 8016408:	81bb      	strh	r3, [r7, #12]
 801640a:	4613      	mov	r3, r2
 801640c:	80fb      	strh	r3, [r7, #6]
	uint8_t Xstart = 0;
 801640e:	2300      	movs	r3, #0
 8016410:	75fb      	strb	r3, [r7, #23]

	Xstart = fmax( XCenterstart - numberOfCharactersToClear * localFont.Width / 2, 0) ;
 8016412:	89fa      	ldrh	r2, [r7, #14]
 8016414:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8016418:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 801641a:	fb01 f303 	mul.w	r3, r1, r3
 801641e:	2b00      	cmp	r3, #0
 8016420:	da00      	bge.n	8016424 <centeredString+0x2c>
 8016422:	3301      	adds	r3, #1
 8016424:	105b      	asrs	r3, r3, #1
 8016426:	425b      	negs	r3, r3
 8016428:	4413      	add	r3, r2
 801642a:	ee07 3a90 	vmov	s15, r3
 801642e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016432:	ed9f 1b57 	vldr	d1, [pc, #348]	; 8016590 <centeredString+0x198>
 8016436:	eeb0 0b47 	vmov.f64	d0, d7
 801643a:	f008 fe9b 	bl	801f174 <fmax>
 801643e:	eeb0 7b40 	vmov.f64	d7, d0
 8016442:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8016446:	edc7 7a00 	vstr	s15, [r7]
 801644a:	683b      	ldr	r3, [r7, #0]
 801644c:	75fb      	strb	r3, [r7, #23]
//	Paint_DrawString_EN(Xstart, Ystart, "MAINTENANCE", &Font12, WHITE,  WHITE);
	if (!renderCompleteFrame)
 801644e:	4b52      	ldr	r3, [pc, #328]	; (8016598 <centeredString+0x1a0>)
 8016450:	781b      	ldrb	r3, [r3, #0]
 8016452:	f083 0301 	eor.w	r3, r3, #1
 8016456:	b2db      	uxtb	r3, r3
 8016458:	2b00      	cmp	r3, #0
 801645a:	d018      	beq.n	801648e <centeredString+0x96>
	{
		Paint_ClearWindows(Xstart, Ystart, Xstart + numberOfCharactersToClear * localFont.Width, Ystart + localFont.Height, WHITE);
 801645c:	7dfb      	ldrb	r3, [r7, #23]
 801645e:	b298      	uxth	r0, r3
 8016460:	7dfb      	ldrb	r3, [r7, #23]
 8016462:	b29a      	uxth	r2, r3
 8016464:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8016468:	b299      	uxth	r1, r3
 801646a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801646c:	fb11 f303 	smulbb	r3, r1, r3
 8016470:	b29b      	uxth	r3, r3
 8016472:	4413      	add	r3, r2
 8016474:	b29c      	uxth	r4, r3
 8016476:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8016478:	89bb      	ldrh	r3, [r7, #12]
 801647a:	4413      	add	r3, r2
 801647c:	b29b      	uxth	r3, r3
 801647e:	89b9      	ldrh	r1, [r7, #12]
 8016480:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016484:	9200      	str	r2, [sp, #0]
 8016486:	4622      	mov	r2, r4
 8016488:	f7f8 f84a 	bl	800e520 <Paint_ClearWindows>
 801648c:	e04e      	b.n	801652c <centeredString+0x134>
	}
	else if ( (renderCompleteFrame) && (!isMenuDisplayed) && (!isPopupDisplayed) )
 801648e:	4b42      	ldr	r3, [pc, #264]	; (8016598 <centeredString+0x1a0>)
 8016490:	781b      	ldrb	r3, [r3, #0]
 8016492:	2b00      	cmp	r3, #0
 8016494:	d026      	beq.n	80164e4 <centeredString+0xec>
 8016496:	4b41      	ldr	r3, [pc, #260]	; (801659c <centeredString+0x1a4>)
 8016498:	781b      	ldrb	r3, [r3, #0]
 801649a:	f083 0301 	eor.w	r3, r3, #1
 801649e:	b2db      	uxtb	r3, r3
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d01f      	beq.n	80164e4 <centeredString+0xec>
 80164a4:	4b3e      	ldr	r3, [pc, #248]	; (80165a0 <centeredString+0x1a8>)
 80164a6:	781b      	ldrb	r3, [r3, #0]
 80164a8:	f083 0301 	eor.w	r3, r3, #1
 80164ac:	b2db      	uxtb	r3, r3
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d018      	beq.n	80164e4 <centeredString+0xec>
	{
		Paint_ClearWindows(Xstart, Ystart, Xstart + numberOfCharactersToClear * localFont.Width, Ystart + localFont.Height, backgroundColor);
 80164b2:	7dfb      	ldrb	r3, [r7, #23]
 80164b4:	b298      	uxth	r0, r3
 80164b6:	7dfb      	ldrb	r3, [r7, #23]
 80164b8:	b29a      	uxth	r2, r3
 80164ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80164be:	b299      	uxth	r1, r3
 80164c0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80164c2:	fb11 f303 	smulbb	r3, r1, r3
 80164c6:	b29b      	uxth	r3, r3
 80164c8:	4413      	add	r3, r2
 80164ca:	b29c      	uxth	r4, r3
 80164cc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80164ce:	89bb      	ldrh	r3, [r7, #12]
 80164d0:	4413      	add	r3, r2
 80164d2:	b29a      	uxth	r2, r3
 80164d4:	89b9      	ldrh	r1, [r7, #12]
 80164d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80164d8:	9300      	str	r3, [sp, #0]
 80164da:	4613      	mov	r3, r2
 80164dc:	4622      	mov	r2, r4
 80164de:	f7f8 f81f 	bl	800e520 <Paint_ClearWindows>
 80164e2:	e023      	b.n	801652c <centeredString+0x134>
	}
	else if ( (renderCompleteFrame) && ( (isMenuDisplayed) || (isPopupDisplayed) ) )
 80164e4:	4b2c      	ldr	r3, [pc, #176]	; (8016598 <centeredString+0x1a0>)
 80164e6:	781b      	ldrb	r3, [r3, #0]
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d01f      	beq.n	801652c <centeredString+0x134>
 80164ec:	4b2b      	ldr	r3, [pc, #172]	; (801659c <centeredString+0x1a4>)
 80164ee:	781b      	ldrb	r3, [r3, #0]
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d103      	bne.n	80164fc <centeredString+0x104>
 80164f4:	4b2a      	ldr	r3, [pc, #168]	; (80165a0 <centeredString+0x1a8>)
 80164f6:	781b      	ldrb	r3, [r3, #0]
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d017      	beq.n	801652c <centeredString+0x134>
	{
		Paint_ClearWindows(Xstart, Ystart, Xstart + numberOfCharactersToClear * localFont.Width, Ystart + localFont.Height, WHITE);
 80164fc:	7dfb      	ldrb	r3, [r7, #23]
 80164fe:	b298      	uxth	r0, r3
 8016500:	7dfb      	ldrb	r3, [r7, #23]
 8016502:	b29a      	uxth	r2, r3
 8016504:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8016508:	b299      	uxth	r1, r3
 801650a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801650c:	fb11 f303 	smulbb	r3, r1, r3
 8016510:	b29b      	uxth	r3, r3
 8016512:	4413      	add	r3, r2
 8016514:	b29c      	uxth	r4, r3
 8016516:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8016518:	89bb      	ldrh	r3, [r7, #12]
 801651a:	4413      	add	r3, r2
 801651c:	b29b      	uxth	r3, r3
 801651e:	89b9      	ldrh	r1, [r7, #12]
 8016520:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016524:	9200      	str	r2, [sp, #0]
 8016526:	4622      	mov	r2, r4
 8016528:	f7f7 fffa 	bl	800e520 <Paint_ClearWindows>
	}
	Xstart = strlen(pString);
 801652c:	68b8      	ldr	r0, [r7, #8]
 801652e:	f7e9 fee1 	bl	80002f4 <strlen>
 8016532:	4603      	mov	r3, r0
 8016534:	75fb      	strb	r3, [r7, #23]
	Xstart = fmax( XCenterstart - strlen(pString) * localFont.Width / 2, 0) ;
 8016536:	89fc      	ldrh	r4, [r7, #14]
 8016538:	68b8      	ldr	r0, [r7, #8]
 801653a:	f7e9 fedb 	bl	80002f4 <strlen>
 801653e:	4603      	mov	r3, r0
 8016540:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8016542:	fb02 f303 	mul.w	r3, r2, r3
 8016546:	085b      	lsrs	r3, r3, #1
 8016548:	1ae3      	subs	r3, r4, r3
 801654a:	ee07 3a90 	vmov	s15, r3
 801654e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8016552:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8016590 <centeredString+0x198>
 8016556:	eeb0 0b47 	vmov.f64	d0, d7
 801655a:	f008 fe0b 	bl	801f174 <fmax>
 801655e:	eeb0 7b40 	vmov.f64	d7, d0
 8016562:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8016566:	edc7 7a00 	vstr	s15, [r7]
 801656a:	683b      	ldr	r3, [r7, #0]
 801656c:	75fb      	strb	r3, [r7, #23]
	Paint_DrawString_EN(Xstart, Ystart, pString, &localFont, backgroundColor,  textColor);
 801656e:	7dfb      	ldrb	r3, [r7, #23]
 8016570:	b298      	uxth	r0, r3
 8016572:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8016576:	89b9      	ldrh	r1, [r7, #12]
 8016578:	88fb      	ldrh	r3, [r7, #6]
 801657a:	9301      	str	r3, [sp, #4]
 801657c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801657e:	9300      	str	r3, [sp, #0]
 8016580:	4613      	mov	r3, r2
 8016582:	68ba      	ldr	r2, [r7, #8]
 8016584:	f7f8 fbea 	bl	800ed5c <Paint_DrawString_EN>
}
 8016588:	bf00      	nop
 801658a:	371c      	adds	r7, #28
 801658c:	46bd      	mov	sp, r7
 801658e:	bd90      	pop	{r4, r7, pc}
	...
 8016598:	2400aa73 	.word	0x2400aa73
 801659c:	2400aa6d 	.word	0x2400aa6d
 80165a0:	2400aa72 	.word	0x2400aa72

080165a4 <showAngles>:

void showAngles(void)
{
 80165a4:	b580      	push	{r7, lr}
 80165a6:	b08a      	sub	sp, #40	; 0x28
 80165a8:	af02      	add	r7, sp, #8
	char localT[32] = "";
 80165aa:	2300      	movs	r3, #0
 80165ac:	603b      	str	r3, [r7, #0]
 80165ae:	1d3b      	adds	r3, r7, #4
 80165b0:	2200      	movs	r2, #0
 80165b2:	601a      	str	r2, [r3, #0]
 80165b4:	605a      	str	r2, [r3, #4]
 80165b6:	609a      	str	r2, [r3, #8]
 80165b8:	60da      	str	r2, [r3, #12]
 80165ba:	611a      	str	r2, [r3, #16]
 80165bc:	615a      	str	r2, [r3, #20]
 80165be:	619a      	str	r2, [r3, #24]

	snprintf(localT,sizeof(localT),"R: %04.3f", receivedAnglesData->bodyAngles.Roll);
 80165c0:	4b2a      	ldr	r3, [pc, #168]	; (801666c <showAngles+0xc8>)
 80165c2:	681b      	ldr	r3, [r3, #0]
 80165c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80165c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80165cc:	463b      	mov	r3, r7
 80165ce:	ed8d 7b00 	vstr	d7, [sp]
 80165d2:	4a27      	ldr	r2, [pc, #156]	; (8016670 <showAngles+0xcc>)
 80165d4:	2120      	movs	r1, #32
 80165d6:	4618      	mov	r0, r3
 80165d8:	f005 fa10 	bl	801b9fc <sniprintf>
	Paint_DrawString_EN(VerticalRollChasisX, VerticalRollChasisY, (char *)localT, &Font8, WHITE, BLACK);
 80165dc:	463a      	mov	r2, r7
 80165de:	2300      	movs	r3, #0
 80165e0:	9301      	str	r3, [sp, #4]
 80165e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80165e6:	9300      	str	r3, [sp, #0]
 80165e8:	4b22      	ldr	r3, [pc, #136]	; (8016674 <showAngles+0xd0>)
 80165ea:	218c      	movs	r1, #140	; 0x8c
 80165ec:	2002      	movs	r0, #2
 80165ee:	f7f8 fbb5 	bl	800ed5c <Paint_DrawString_EN>

	memset(localT,0,32);
 80165f2:	463b      	mov	r3, r7
 80165f4:	2220      	movs	r2, #32
 80165f6:	2100      	movs	r1, #0
 80165f8:	4618      	mov	r0, r3
 80165fa:	f004 f909 	bl	801a810 <memset>
	snprintf(localT,sizeof(localT),"P: %04.3f", receivedAnglesData->bodyAngles.Pitch);
 80165fe:	4b1b      	ldr	r3, [pc, #108]	; (801666c <showAngles+0xc8>)
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	edd3 7a02 	vldr	s15, [r3, #8]
 8016606:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801660a:	463b      	mov	r3, r7
 801660c:	ed8d 7b00 	vstr	d7, [sp]
 8016610:	4a19      	ldr	r2, [pc, #100]	; (8016678 <showAngles+0xd4>)
 8016612:	2120      	movs	r1, #32
 8016614:	4618      	mov	r0, r3
 8016616:	f005 f9f1 	bl	801b9fc <sniprintf>
	Paint_DrawString_EN(VerticalPitchChasisX, VerticalPitchChasisY, (char *)localT, &Font8, WHITE, BLACK);
 801661a:	463a      	mov	r2, r7
 801661c:	2300      	movs	r3, #0
 801661e:	9301      	str	r3, [sp, #4]
 8016620:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016624:	9300      	str	r3, [sp, #0]
 8016626:	4b13      	ldr	r3, [pc, #76]	; (8016674 <showAngles+0xd0>)
 8016628:	218c      	movs	r1, #140	; 0x8c
 801662a:	2044      	movs	r0, #68	; 0x44
 801662c:	f7f8 fb96 	bl	800ed5c <Paint_DrawString_EN>

	memset(localT,0,32);
 8016630:	463b      	mov	r3, r7
 8016632:	2220      	movs	r2, #32
 8016634:	2100      	movs	r1, #0
 8016636:	4618      	mov	r0, r3
 8016638:	f004 f8ea 	bl	801a810 <memset>
	snprintf(localT,sizeof(localT),"Y: %04.3f", receivedAnglesData->bodyAngles.Yaw);
 801663c:	4b0b      	ldr	r3, [pc, #44]	; (801666c <showAngles+0xc8>)
 801663e:	681b      	ldr	r3, [r3, #0]
 8016640:	edd3 7a03 	vldr	s15, [r3, #12]
 8016644:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8016648:	463b      	mov	r3, r7
 801664a:	ed8d 7b00 	vstr	d7, [sp]
 801664e:	4a0b      	ldr	r2, [pc, #44]	; (801667c <showAngles+0xd8>)
 8016650:	2120      	movs	r1, #32
 8016652:	4618      	mov	r0, r3
 8016654:	f005 f9d2 	bl	801b9fc <sniprintf>
//	Paint_DrawString_EN(VerticalYawChasisX, VerticalYawChasisY, (char *)localT, &Font8, WHITE, BLACK);
	memset(localT,0,32);
 8016658:	463b      	mov	r3, r7
 801665a:	2220      	movs	r2, #32
 801665c:	2100      	movs	r1, #0
 801665e:	4618      	mov	r0, r3
 8016660:	f004 f8d6 	bl	801a810 <memset>
}
 8016664:	bf00      	nop
 8016666:	3720      	adds	r7, #32
 8016668:	46bd      	mov	sp, r7
 801666a:	bd80      	pop	{r7, pc}
 801666c:	2400ac34 	.word	0x2400ac34
 8016670:	0801f940 	.word	0x0801f940
 8016674:	24000038 	.word	0x24000038
 8016678:	0801f94c 	.word	0x0801f94c
 801667c:	0801f958 	.word	0x0801f958

08016680 <showLIDAR>:

void showLIDAR(void)
{
 8016680:	b590      	push	{r4, r7, lr}
 8016682:	b085      	sub	sp, #20
 8016684:	af04      	add	r7, sp, #16
	Paint_DrawCircle(  lidarCenterX, lidarCenterY, 50, BLUE, DOT_PIXEL_2X2, DRAW_FILL_EMPTY );
 8016686:	2300      	movs	r3, #0
 8016688:	9301      	str	r3, [sp, #4]
 801668a:	2302      	movs	r3, #2
 801668c:	9300      	str	r3, [sp, #0]
 801668e:	231f      	movs	r3, #31
 8016690:	2232      	movs	r2, #50	; 0x32
 8016692:	214c      	movs	r1, #76	; 0x4c
 8016694:	2040      	movs	r0, #64	; 0x40
 8016696:	f7f8 f945 	bl	800e924 <Paint_DrawCircle>
	Paint_DrawCircle(  lidarCenterX, lidarCenterY, 1, RED, DOT_PIXEL_2X2, DRAW_FILL_FULL );
 801669a:	2301      	movs	r3, #1
 801669c:	9301      	str	r3, [sp, #4]
 801669e:	2302      	movs	r3, #2
 80166a0:	9300      	str	r3, [sp, #0]
 80166a2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80166a6:	2201      	movs	r2, #1
 80166a8:	214c      	movs	r1, #76	; 0x4c
 80166aa:	2040      	movs	r0, #64	; 0x40
 80166ac:	f7f8 f93a 	bl	800e924 <Paint_DrawCircle>

	if (HAL_GetTick() - lastLidarBoresight >= 40)
 80166b0:	f7eb ffbc 	bl	800262c <HAL_GetTick>
 80166b4:	4602      	mov	r2, r0
 80166b6:	4b48      	ldr	r3, [pc, #288]	; (80167d8 <showLIDAR+0x158>)
 80166b8:	681b      	ldr	r3, [r3, #0]
 80166ba:	1ad3      	subs	r3, r2, r3
 80166bc:	2b27      	cmp	r3, #39	; 0x27
 80166be:	d927      	bls.n	8016710 <showLIDAR+0x90>
	{
		currentLidarAngle = (float)((uint32_t)(1.8 * (HAL_GetTick() - lastLidarBoresight)) % (360));
 80166c0:	f7eb ffb4 	bl	800262c <HAL_GetTick>
 80166c4:	4602      	mov	r2, r0
 80166c6:	4b44      	ldr	r3, [pc, #272]	; (80167d8 <showLIDAR+0x158>)
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	1ad3      	subs	r3, r2, r3
 80166cc:	ee07 3a90 	vmov	s15, r3
 80166d0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80166d4:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 80167c0 <showLIDAR+0x140>
 80166d8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80166dc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80166e0:	ee17 2a90 	vmov	r2, s15
 80166e4:	08d3      	lsrs	r3, r2, #3
 80166e6:	493d      	ldr	r1, [pc, #244]	; (80167dc <showLIDAR+0x15c>)
 80166e8:	fba1 1303 	umull	r1, r3, r1, r3
 80166ec:	089b      	lsrs	r3, r3, #2
 80166ee:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80166f2:	fb01 f303 	mul.w	r3, r1, r3
 80166f6:	1ad3      	subs	r3, r2, r3
 80166f8:	ee07 3a90 	vmov	s15, r3
 80166fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016700:	4b37      	ldr	r3, [pc, #220]	; (80167e0 <showLIDAR+0x160>)
 8016702:	edc3 7a00 	vstr	s15, [r3]
		lastLidarBoresight = HAL_GetTick();
 8016706:	f7eb ff91 	bl	800262c <HAL_GetTick>
 801670a:	4603      	mov	r3, r0
 801670c:	4a32      	ldr	r2, [pc, #200]	; (80167d8 <showLIDAR+0x158>)
 801670e:	6013      	str	r3, [r2, #0]
	}
	Paint_DrawLine(lidarCenterX, lidarCenterY, lidarCenterX + lidarRadius * cosf(receivedAnglesData->bodyAngles.Yaw * AHRSIMU_DEG2RAD),
 8016710:	4b34      	ldr	r3, [pc, #208]	; (80167e4 <showLIDAR+0x164>)
 8016712:	681b      	ldr	r3, [r3, #0]
 8016714:	edd3 7a03 	vldr	s15, [r3, #12]
 8016718:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801671c:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 80167c8 <showLIDAR+0x148>
 8016720:	ee27 6b06 	vmul.f64	d6, d7, d6
 8016724:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 80167d0 <showLIDAR+0x150>
 8016728:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801672c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8016730:	eeb0 0a67 	vmov.f32	s0, s15
 8016734:	f008 fc70 	bl	801f018 <cosf>
 8016738:	eef0 7a40 	vmov.f32	s15, s0
 801673c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80167e8 <showLIDAR+0x168>
 8016740:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016744:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80167ec <showLIDAR+0x16c>
 8016748:	ee77 7a87 	vadd.f32	s15, s15, s14
 801674c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016750:	ee17 3a90 	vmov	r3, s15
 8016754:	b29c      	uxth	r4, r3
			lidarCenterY + lidarRadius * sinf(receivedAnglesData->bodyAngles.Yaw * AHRSIMU_DEG2RAD), DARKBLUE, DOT_PIXEL_1X1, LINE_STYLE_SOLID);
 8016756:	4b23      	ldr	r3, [pc, #140]	; (80167e4 <showLIDAR+0x164>)
 8016758:	681b      	ldr	r3, [r3, #0]
 801675a:	edd3 7a03 	vldr	s15, [r3, #12]
 801675e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8016762:	ed9f 6b19 	vldr	d6, [pc, #100]	; 80167c8 <showLIDAR+0x148>
 8016766:	ee27 6b06 	vmul.f64	d6, d7, d6
 801676a:	ed9f 5b19 	vldr	d5, [pc, #100]	; 80167d0 <showLIDAR+0x150>
 801676e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8016772:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8016776:	eeb0 0a67 	vmov.f32	s0, s15
 801677a:	f008 fd85 	bl	801f288 <sinf>
 801677e:	eef0 7a40 	vmov.f32	s15, s0
 8016782:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80167e8 <showLIDAR+0x168>
 8016786:	ee67 7a87 	vmul.f32	s15, s15, s14
 801678a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80167f0 <showLIDAR+0x170>
 801678e:	ee77 7a87 	vadd.f32	s15, s15, s14
	Paint_DrawLine(lidarCenterX, lidarCenterY, lidarCenterX + lidarRadius * cosf(receivedAnglesData->bodyAngles.Yaw * AHRSIMU_DEG2RAD),
 8016792:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016796:	ee17 3a90 	vmov	r3, s15
 801679a:	b29b      	uxth	r3, r3
 801679c:	2200      	movs	r2, #0
 801679e:	9202      	str	r2, [sp, #8]
 80167a0:	2201      	movs	r2, #1
 80167a2:	9201      	str	r2, [sp, #4]
 80167a4:	f240 12cf 	movw	r2, #463	; 0x1cf
 80167a8:	9200      	str	r2, [sp, #0]
 80167aa:	4622      	mov	r2, r4
 80167ac:	214c      	movs	r1, #76	; 0x4c
 80167ae:	2040      	movs	r0, #64	; 0x40
 80167b0:	f7f7 ff80 	bl	800e6b4 <Paint_DrawLine>

}
 80167b4:	bf00      	nop
 80167b6:	3704      	adds	r7, #4
 80167b8:	46bd      	mov	sp, r7
 80167ba:	bd90      	pop	{r4, r7, pc}
 80167bc:	f3af 8000 	nop.w
 80167c0:	cccccccd 	.word	0xcccccccd
 80167c4:	3ffccccc 	.word	0x3ffccccc
 80167c8:	54442d18 	.word	0x54442d18
 80167cc:	400921fb 	.word	0x400921fb
 80167d0:	00000000 	.word	0x00000000
 80167d4:	40668000 	.word	0x40668000
 80167d8:	2400aa78 	.word	0x2400aa78
 80167dc:	16c16c17 	.word	0x16c16c17
 80167e0:	2400aa7c 	.word	0x2400aa7c
 80167e4:	2400ac34 	.word	0x2400ac34
 80167e8:	42480000 	.word	0x42480000
 80167ec:	42800000 	.word	0x42800000
 80167f0:	42980000 	.word	0x42980000

080167f4 <screenUpdate>:



void screenUpdate(bool drawDeltaImage)
{
 80167f4:	b580      	push	{r7, lr}
 80167f6:	b082      	sub	sp, #8
 80167f8:	af00      	add	r7, sp, #0
 80167fa:	4603      	mov	r3, r0
 80167fc:	71fb      	strb	r3, [r7, #7]
//	numberOfDisplayedSafeAirIcons = 1 * isAutoPilotDisplayed + 1 * isPlatformDisplayed +
//			1 * isTriggerModeDisplayed + 1 * isSafeAirBatteryDisplayed;
//	setIconPositionOnScreen();
	if ( (!isMenuDisplayed) && (!isPopupDisplayed) )
 80167fe:	4b21      	ldr	r3, [pc, #132]	; (8016884 <screenUpdate+0x90>)
 8016800:	781b      	ldrb	r3, [r3, #0]
 8016802:	f083 0301 	eor.w	r3, r3, #1
 8016806:	b2db      	uxtb	r3, r3
 8016808:	2b00      	cmp	r3, #0
 801680a:	d00e      	beq.n	801682a <screenUpdate+0x36>
 801680c:	4b1e      	ldr	r3, [pc, #120]	; (8016888 <screenUpdate+0x94>)
 801680e:	781b      	ldrb	r3, [r3, #0]
 8016810:	f083 0301 	eor.w	r3, r3, #1
 8016814:	b2db      	uxtb	r3, r3
 8016816:	2b00      	cmp	r3, #0
 8016818:	d007      	beq.n	801682a <screenUpdate+0x36>
	{
		createEmptyFrame(false);
 801681a:	2000      	movs	r0, #0
 801681c:	f000 fe80 	bl	8017520 <createEmptyFrame>
		showAngles();
 8016820:	f7ff fec0 	bl	80165a4 <showAngles>
		showLIDAR();
 8016824:	f7ff ff2c 	bl	8016680 <showLIDAR>
 8016828:	e01f      	b.n	801686a <screenUpdate+0x76>
	}
	else if (isMenuDisplayed)
 801682a:	4b16      	ldr	r3, [pc, #88]	; (8016884 <screenUpdate+0x90>)
 801682c:	781b      	ldrb	r3, [r3, #0]
 801682e:	2b00      	cmp	r3, #0
 8016830:	d01b      	beq.n	801686a <screenUpdate+0x76>
	{
		if (shouldRenderMenu)
 8016832:	4b16      	ldr	r3, [pc, #88]	; (801688c <screenUpdate+0x98>)
 8016834:	781b      	ldrb	r3, [r3, #0]
 8016836:	2b00      	cmp	r3, #0
 8016838:	d00a      	beq.n	8016850 <screenUpdate+0x5c>
		{
			drawMenu(shouldClearScreen, menuDrawDirection);
 801683a:	4b15      	ldr	r3, [pc, #84]	; (8016890 <screenUpdate+0x9c>)
 801683c:	781b      	ldrb	r3, [r3, #0]
 801683e:	4a15      	ldr	r2, [pc, #84]	; (8016894 <screenUpdate+0xa0>)
 8016840:	7812      	ldrb	r2, [r2, #0]
 8016842:	4611      	mov	r1, r2
 8016844:	4618      	mov	r0, r3
 8016846:	f000 f82d 	bl	80168a4 <drawMenu>
			shouldRenderMenu = false;
 801684a:	4b10      	ldr	r3, [pc, #64]	; (801688c <screenUpdate+0x98>)
 801684c:	2200      	movs	r2, #0
 801684e:	701a      	strb	r2, [r3, #0]
		}
		if (shouldRenderItem)
 8016850:	4b11      	ldr	r3, [pc, #68]	; (8016898 <screenUpdate+0xa4>)
 8016852:	781b      	ldrb	r3, [r3, #0]
 8016854:	2b00      	cmp	r3, #0
 8016856:	d008      	beq.n	801686a <screenUpdate+0x76>
		{
			drawItem(false, itemDrawDirection);
 8016858:	4b10      	ldr	r3, [pc, #64]	; (801689c <screenUpdate+0xa8>)
 801685a:	781b      	ldrb	r3, [r3, #0]
 801685c:	4619      	mov	r1, r3
 801685e:	2000      	movs	r0, #0
 8016860:	f000 f9c4 	bl	8016bec <drawItem>
			shouldRenderItem = false;
 8016864:	4b0c      	ldr	r3, [pc, #48]	; (8016898 <screenUpdate+0xa4>)
 8016866:	2200      	movs	r2, #0
 8016868:	701a      	strb	r2, [r3, #0]
		}

	} // End of is Menu displayed
	if(shouldRenderPopup)
 801686a:	4b0d      	ldr	r3, [pc, #52]	; (80168a0 <screenUpdate+0xac>)
 801686c:	781b      	ldrb	r3, [r3, #0]
 801686e:	2b00      	cmp	r3, #0
 8016870:	d004      	beq.n	801687c <screenUpdate+0x88>
	{
		drawPopup();
 8016872:	f000 fa7b 	bl	8016d6c <drawPopup>
		shouldRenderPopup = false;
 8016876:	4b0a      	ldr	r3, [pc, #40]	; (80168a0 <screenUpdate+0xac>)
 8016878:	2200      	movs	r2, #0
 801687a:	701a      	strb	r2, [r3, #0]
	}
}
 801687c:	bf00      	nop
 801687e:	3708      	adds	r7, #8
 8016880:	46bd      	mov	sp, r7
 8016882:	bd80      	pop	{r7, pc}
 8016884:	2400aa6d 	.word	0x2400aa6d
 8016888:	2400aa72 	.word	0x2400aa72
 801688c:	2400aa6c 	.word	0x2400aa6c
 8016890:	2400aa6e 	.word	0x2400aa6e
 8016894:	2400008d 	.word	0x2400008d
 8016898:	2400aa6f 	.word	0x2400aa6f
 801689c:	2400008e 	.word	0x2400008e
 80168a0:	2400aa71 	.word	0x2400aa71

080168a4 <drawMenu>:

void drawMenu(bool clearScreen, MENUDRAWType howToDraw)
{
 80168a4:	b5b0      	push	{r4, r5, r7, lr}
 80168a6:	b08a      	sub	sp, #40	; 0x28
 80168a8:	af04      	add	r7, sp, #16
 80168aa:	4603      	mov	r3, r0
 80168ac:	460a      	mov	r2, r1
 80168ae:	71fb      	strb	r3, [r7, #7]
 80168b0:	4613      	mov	r3, r2
 80168b2:	71bb      	strb	r3, [r7, #6]
	if (clearScreen)
 80168b4:	79fb      	ldrb	r3, [r7, #7]
 80168b6:	2b00      	cmp	r3, #0
 80168b8:	d006      	beq.n	80168c8 <drawMenu+0x24>
	{
		Paint_Clear(WHITE);
 80168ba:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80168be:	f7f7 fe1f 	bl	800e500 <Paint_Clear>
		createEmptyFrame(true);
 80168c2:	2001      	movs	r0, #1
 80168c4:	f000 fe2c 	bl	8017520 <createEmptyFrame>
	}

	uint8_t MenuRectangleStartX = 0;
 80168c8:	2300      	movs	r3, #0
 80168ca:	75fb      	strb	r3, [r7, #23]
	uint8_t MenuRectangleStartY = 0;
 80168cc:	2300      	movs	r3, #0
 80168ce:	75bb      	strb	r3, [r7, #22]
	uint8_t MenuRectangleHeight = 0;
 80168d0:	2300      	movs	r3, #0
 80168d2:	757b      	strb	r3, [r7, #21]
	uint8_t MenuRectangleWidth = 0;
 80168d4:	2300      	movs	r3, #0
 80168d6:	753b      	strb	r3, [r7, #20]
	uint8_t DisplayCenterWidth = 0;
 80168d8:	2300      	movs	r3, #0
 80168da:	74fb      	strb	r3, [r7, #19]

	if (isPortrait)
 80168dc:	4b89      	ldr	r3, [pc, #548]	; (8016b04 <drawMenu+0x260>)
 80168de:	781b      	ldrb	r3, [r3, #0]
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d009      	beq.n	80168f8 <drawMenu+0x54>
	{
		MenuRectangleStartX = VerticalMenuRectangleStartX;
 80168e4:	2302      	movs	r3, #2
 80168e6:	75fb      	strb	r3, [r7, #23]
		MenuRectangleStartY = VerticalMenuRectangleStartY;
 80168e8:	230c      	movs	r3, #12
 80168ea:	75bb      	strb	r3, [r7, #22]
		MenuRectangleHeight = VerticalMenuRectangleHeight;
 80168ec:	230e      	movs	r3, #14
 80168ee:	757b      	strb	r3, [r7, #21]
		MenuRectangleWidth = VerticalMenuRectangleWidth;
 80168f0:	237c      	movs	r3, #124	; 0x7c
 80168f2:	753b      	strb	r3, [r7, #20]
		DisplayCenterWidth = VerticalDisplayCenterWidth;
 80168f4:	2340      	movs	r3, #64	; 0x40
 80168f6:	74fb      	strb	r3, [r7, #19]
//		MenuRectangleHeight = HorizontalMenuRectangleHeight;
//		MenuRectangleWidth = HorizontalMenuRectangleWidth;
//		DisplayCenterWidth = HorizontalDisplayCenterWidth;
	}

	if (howToDraw == FULL)
 80168f8:	79bb      	ldrb	r3, [r7, #6]
 80168fa:	2b02      	cmp	r3, #2
 80168fc:	f040 809f 	bne.w	8016a3e <drawMenu+0x19a>
	{
		for (int i = 0; i < pagesArray[currentCursorPosition.currentPageID].numberOfItemsInPage; i++)
 8016900:	2300      	movs	r3, #0
 8016902:	60fb      	str	r3, [r7, #12]
 8016904:	e08a      	b.n	8016a1c <drawMenu+0x178>
		{
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 8016906:	7dfb      	ldrb	r3, [r7, #23]
 8016908:	b298      	uxth	r0, r3
 801690a:	7dbb      	ldrb	r3, [r7, #22]
 801690c:	b29a      	uxth	r2, r3
 801690e:	7d7b      	ldrb	r3, [r7, #21]
 8016910:	b299      	uxth	r1, r3
 8016912:	68fb      	ldr	r3, [r7, #12]
 8016914:	b29b      	uxth	r3, r3
 8016916:	fb11 f303 	smulbb	r3, r1, r3
 801691a:	b29b      	uxth	r3, r3
 801691c:	4413      	add	r3, r2
 801691e:	b29c      	uxth	r4, r3
 8016920:	7dfb      	ldrb	r3, [r7, #23]
 8016922:	b29a      	uxth	r2, r3
 8016924:	7d3b      	ldrb	r3, [r7, #20]
 8016926:	b29b      	uxth	r3, r3
 8016928:	4413      	add	r3, r2
 801692a:	b29d      	uxth	r5, r3
 801692c:	7dbb      	ldrb	r3, [r7, #22]
 801692e:	b29a      	uxth	r2, r3
 8016930:	7d7b      	ldrb	r3, [r7, #21]
 8016932:	b299      	uxth	r1, r3
					MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * ( i + 1),
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	3301      	adds	r3, #1
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 8016938:	b29b      	uxth	r3, r3
 801693a:	fb11 f303 	smulbb	r3, r1, r3
 801693e:	b29b      	uxth	r3, r3
 8016940:	4413      	add	r3, r2
 8016942:	b29b      	uxth	r3, r3
 8016944:	2200      	movs	r2, #0
 8016946:	9202      	str	r2, [sp, #8]
 8016948:	2201      	movs	r2, #1
 801694a:	9201      	str	r2, [sp, #4]
 801694c:	2200      	movs	r2, #0
 801694e:	9200      	str	r2, [sp, #0]
 8016950:	462a      	mov	r2, r5
 8016952:	4621      	mov	r1, r4
 8016954:	f7f7 ff5e 	bl	800e814 <Paint_DrawRectangle>
					BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
			if (i == currentCursorPosition.cursorPosition)
 8016958:	4b6b      	ldr	r3, [pc, #428]	; (8016b08 <drawMenu+0x264>)
 801695a:	781b      	ldrb	r3, [r3, #0]
 801695c:	461a      	mov	r2, r3
 801695e:	68fb      	ldr	r3, [r7, #12]
 8016960:	4293      	cmp	r3, r2
 8016962:	d12c      	bne.n	80169be <drawMenu+0x11a>
			{
				centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * i,
 8016964:	7cfb      	ldrb	r3, [r7, #19]
 8016966:	b29c      	uxth	r4, r3
 8016968:	7dbb      	ldrb	r3, [r7, #22]
 801696a:	b29a      	uxth	r2, r3
 801696c:	7d7b      	ldrb	r3, [r7, #21]
 801696e:	b299      	uxth	r1, r3
 8016970:	68fb      	ldr	r3, [r7, #12]
 8016972:	b29b      	uxth	r3, r3
 8016974:	fb11 f303 	smulbb	r3, r1, r3
 8016978:	b29b      	uxth	r3, r3
 801697a:	4413      	add	r3, r2
 801697c:	b29b      	uxth	r3, r3
 801697e:	3301      	adds	r3, #1
 8016980:	b29d      	uxth	r5, r3
						pagesArray[currentCursorPosition.currentPageID].itemsArray[i], BLACK, LGRAY, 16, Font12);
 8016982:	4b61      	ldr	r3, [pc, #388]	; (8016b08 <drawMenu+0x264>)
 8016984:	785b      	ldrb	r3, [r3, #1]
 8016986:	4619      	mov	r1, r3
 8016988:	68fb      	ldr	r3, [r7, #12]
 801698a:	330a      	adds	r3, #10
 801698c:	011a      	lsls	r2, r3, #4
 801698e:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 8016992:	fb03 f301 	mul.w	r3, r3, r1
 8016996:	4413      	add	r3, r2
 8016998:	4a5c      	ldr	r2, [pc, #368]	; (8016b0c <drawMenu+0x268>)
 801699a:	4413      	add	r3, r2
 801699c:	1c9a      	adds	r2, r3, #2
				centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * i,
 801699e:	495c      	ldr	r1, [pc, #368]	; (8016b10 <drawMenu+0x26c>)
 80169a0:	ab02      	add	r3, sp, #8
 80169a2:	c903      	ldmia	r1, {r0, r1}
 80169a4:	e883 0003 	stmia.w	r3, {r0, r1}
 80169a8:	2310      	movs	r3, #16
 80169aa:	9301      	str	r3, [sp, #4]
 80169ac:	f24c 6318 	movw	r3, #50712	; 0xc618
 80169b0:	9300      	str	r3, [sp, #0]
 80169b2:	2300      	movs	r3, #0
 80169b4:	4629      	mov	r1, r5
 80169b6:	4620      	mov	r0, r4
 80169b8:	f7ff fd1e 	bl	80163f8 <centeredString>
 80169bc:	e02b      	b.n	8016a16 <drawMenu+0x172>
			}
			else
			{
				centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * i,
 80169be:	7cfb      	ldrb	r3, [r7, #19]
 80169c0:	b29c      	uxth	r4, r3
 80169c2:	7dbb      	ldrb	r3, [r7, #22]
 80169c4:	b29a      	uxth	r2, r3
 80169c6:	7d7b      	ldrb	r3, [r7, #21]
 80169c8:	b299      	uxth	r1, r3
 80169ca:	68fb      	ldr	r3, [r7, #12]
 80169cc:	b29b      	uxth	r3, r3
 80169ce:	fb11 f303 	smulbb	r3, r1, r3
 80169d2:	b29b      	uxth	r3, r3
 80169d4:	4413      	add	r3, r2
 80169d6:	b29b      	uxth	r3, r3
 80169d8:	3301      	adds	r3, #1
 80169da:	b29d      	uxth	r5, r3
						pagesArray[currentCursorPosition.currentPageID].itemsArray[i], BLACK, WHITE, 16, Font12);
 80169dc:	4b4a      	ldr	r3, [pc, #296]	; (8016b08 <drawMenu+0x264>)
 80169de:	785b      	ldrb	r3, [r3, #1]
 80169e0:	4619      	mov	r1, r3
 80169e2:	68fb      	ldr	r3, [r7, #12]
 80169e4:	330a      	adds	r3, #10
 80169e6:	011a      	lsls	r2, r3, #4
 80169e8:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 80169ec:	fb03 f301 	mul.w	r3, r3, r1
 80169f0:	4413      	add	r3, r2
 80169f2:	4a46      	ldr	r2, [pc, #280]	; (8016b0c <drawMenu+0x268>)
 80169f4:	4413      	add	r3, r2
 80169f6:	1c9a      	adds	r2, r3, #2
				centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * i,
 80169f8:	4945      	ldr	r1, [pc, #276]	; (8016b10 <drawMenu+0x26c>)
 80169fa:	ab02      	add	r3, sp, #8
 80169fc:	c903      	ldmia	r1, {r0, r1}
 80169fe:	e883 0003 	stmia.w	r3, {r0, r1}
 8016a02:	2310      	movs	r3, #16
 8016a04:	9301      	str	r3, [sp, #4]
 8016a06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016a0a:	9300      	str	r3, [sp, #0]
 8016a0c:	2300      	movs	r3, #0
 8016a0e:	4629      	mov	r1, r5
 8016a10:	4620      	mov	r0, r4
 8016a12:	f7ff fcf1 	bl	80163f8 <centeredString>
		for (int i = 0; i < pagesArray[currentCursorPosition.currentPageID].numberOfItemsInPage; i++)
 8016a16:	68fb      	ldr	r3, [r7, #12]
 8016a18:	3301      	adds	r3, #1
 8016a1a:	60fb      	str	r3, [r7, #12]
 8016a1c:	4b3a      	ldr	r3, [pc, #232]	; (8016b08 <drawMenu+0x264>)
 8016a1e:	785b      	ldrb	r3, [r3, #1]
 8016a20:	4619      	mov	r1, r3
 8016a22:	4a3a      	ldr	r2, [pc, #232]	; (8016b0c <drawMenu+0x268>)
 8016a24:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 8016a28:	fb03 f301 	mul.w	r3, r3, r1
 8016a2c:	4413      	add	r3, r2
 8016a2e:	33a1      	adds	r3, #161	; 0xa1
 8016a30:	781b      	ldrb	r3, [r3, #0]
 8016a32:	461a      	mov	r2, r3
 8016a34:	68fb      	ldr	r3, [r7, #12]
 8016a36:	4293      	cmp	r3, r2
 8016a38:	f6ff af65 	blt.w	8016906 <drawMenu+0x62>
		centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * (currentCursorPosition.cursorPosition - 1),
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition - 1], BLACK, WHITE, 16, Font12);
		centeredString(DisplayCenterWidth, MenuRectangleStartY+ 1 + MenuRectangleHeight * currentCursorPosition.cursorPosition,
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition], BLACK, LGRAY, 16, Font12);
	}
}
 8016a3c:	e0cb      	b.n	8016bd6 <drawMenu+0x332>
	else if (howToDraw == UP)
 8016a3e:	79bb      	ldrb	r3, [r7, #6]
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d167      	bne.n	8016b14 <drawMenu+0x270>
		centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * (currentCursorPosition.cursorPosition + 1),
 8016a44:	7cfb      	ldrb	r3, [r7, #19]
 8016a46:	b29c      	uxth	r4, r3
 8016a48:	7dbb      	ldrb	r3, [r7, #22]
 8016a4a:	b29a      	uxth	r2, r3
 8016a4c:	7d7b      	ldrb	r3, [r7, #21]
 8016a4e:	b299      	uxth	r1, r3
 8016a50:	4b2d      	ldr	r3, [pc, #180]	; (8016b08 <drawMenu+0x264>)
 8016a52:	781b      	ldrb	r3, [r3, #0]
 8016a54:	3301      	adds	r3, #1
 8016a56:	b29b      	uxth	r3, r3
 8016a58:	fb11 f303 	smulbb	r3, r1, r3
 8016a5c:	b29b      	uxth	r3, r3
 8016a5e:	4413      	add	r3, r2
 8016a60:	b29b      	uxth	r3, r3
 8016a62:	3301      	adds	r3, #1
 8016a64:	b29d      	uxth	r5, r3
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition + 1], BLACK, WHITE, 16, Font12);
 8016a66:	4b28      	ldr	r3, [pc, #160]	; (8016b08 <drawMenu+0x264>)
 8016a68:	785b      	ldrb	r3, [r3, #1]
 8016a6a:	4619      	mov	r1, r3
 8016a6c:	4b26      	ldr	r3, [pc, #152]	; (8016b08 <drawMenu+0x264>)
 8016a6e:	781b      	ldrb	r3, [r3, #0]
 8016a70:	3301      	adds	r3, #1
 8016a72:	330a      	adds	r3, #10
 8016a74:	011a      	lsls	r2, r3, #4
 8016a76:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 8016a7a:	fb03 f301 	mul.w	r3, r3, r1
 8016a7e:	4413      	add	r3, r2
 8016a80:	4a22      	ldr	r2, [pc, #136]	; (8016b0c <drawMenu+0x268>)
 8016a82:	4413      	add	r3, r2
 8016a84:	1c9a      	adds	r2, r3, #2
		centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * (currentCursorPosition.cursorPosition + 1),
 8016a86:	4922      	ldr	r1, [pc, #136]	; (8016b10 <drawMenu+0x26c>)
 8016a88:	ab02      	add	r3, sp, #8
 8016a8a:	c903      	ldmia	r1, {r0, r1}
 8016a8c:	e883 0003 	stmia.w	r3, {r0, r1}
 8016a90:	2310      	movs	r3, #16
 8016a92:	9301      	str	r3, [sp, #4]
 8016a94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016a98:	9300      	str	r3, [sp, #0]
 8016a9a:	2300      	movs	r3, #0
 8016a9c:	4629      	mov	r1, r5
 8016a9e:	4620      	mov	r0, r4
 8016aa0:	f7ff fcaa 	bl	80163f8 <centeredString>
		centeredString(DisplayCenterWidth, MenuRectangleStartY+ 1 + MenuRectangleHeight * currentCursorPosition.cursorPosition,
 8016aa4:	7cfb      	ldrb	r3, [r7, #19]
 8016aa6:	b29c      	uxth	r4, r3
 8016aa8:	7dbb      	ldrb	r3, [r7, #22]
 8016aaa:	b29a      	uxth	r2, r3
 8016aac:	7d7b      	ldrb	r3, [r7, #21]
 8016aae:	b299      	uxth	r1, r3
 8016ab0:	4b15      	ldr	r3, [pc, #84]	; (8016b08 <drawMenu+0x264>)
 8016ab2:	781b      	ldrb	r3, [r3, #0]
 8016ab4:	b29b      	uxth	r3, r3
 8016ab6:	fb11 f303 	smulbb	r3, r1, r3
 8016aba:	b29b      	uxth	r3, r3
 8016abc:	4413      	add	r3, r2
 8016abe:	b29b      	uxth	r3, r3
 8016ac0:	3301      	adds	r3, #1
 8016ac2:	b29d      	uxth	r5, r3
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition], BLACK, LGRAY, 16, Font12);
 8016ac4:	4b10      	ldr	r3, [pc, #64]	; (8016b08 <drawMenu+0x264>)
 8016ac6:	785b      	ldrb	r3, [r3, #1]
 8016ac8:	4619      	mov	r1, r3
 8016aca:	4b0f      	ldr	r3, [pc, #60]	; (8016b08 <drawMenu+0x264>)
 8016acc:	781b      	ldrb	r3, [r3, #0]
 8016ace:	330a      	adds	r3, #10
 8016ad0:	011a      	lsls	r2, r3, #4
 8016ad2:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 8016ad6:	fb03 f301 	mul.w	r3, r3, r1
 8016ada:	4413      	add	r3, r2
 8016adc:	4a0b      	ldr	r2, [pc, #44]	; (8016b0c <drawMenu+0x268>)
 8016ade:	4413      	add	r3, r2
 8016ae0:	1c9a      	adds	r2, r3, #2
		centeredString(DisplayCenterWidth, MenuRectangleStartY+ 1 + MenuRectangleHeight * currentCursorPosition.cursorPosition,
 8016ae2:	490b      	ldr	r1, [pc, #44]	; (8016b10 <drawMenu+0x26c>)
 8016ae4:	ab02      	add	r3, sp, #8
 8016ae6:	c903      	ldmia	r1, {r0, r1}
 8016ae8:	e883 0003 	stmia.w	r3, {r0, r1}
 8016aec:	2310      	movs	r3, #16
 8016aee:	9301      	str	r3, [sp, #4]
 8016af0:	f24c 6318 	movw	r3, #50712	; 0xc618
 8016af4:	9300      	str	r3, [sp, #0]
 8016af6:	2300      	movs	r3, #0
 8016af8:	4629      	mov	r1, r5
 8016afa:	4620      	mov	r0, r4
 8016afc:	f7ff fc7c 	bl	80163f8 <centeredString>
}
 8016b00:	e069      	b.n	8016bd6 <drawMenu+0x332>
 8016b02:	bf00      	nop
 8016b04:	2400008c 	.word	0x2400008c
 8016b08:	2400ac84 	.word	0x2400ac84
 8016b0c:	24013208 	.word	0x24013208
 8016b10:	24000030 	.word	0x24000030
	else if (howToDraw == DOWN)
 8016b14:	79bb      	ldrb	r3, [r7, #6]
 8016b16:	2b01      	cmp	r3, #1
 8016b18:	d15d      	bne.n	8016bd6 <drawMenu+0x332>
		centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * (currentCursorPosition.cursorPosition - 1),
 8016b1a:	7cfb      	ldrb	r3, [r7, #19]
 8016b1c:	b29c      	uxth	r4, r3
 8016b1e:	7dbb      	ldrb	r3, [r7, #22]
 8016b20:	b29a      	uxth	r2, r3
 8016b22:	7d7b      	ldrb	r3, [r7, #21]
 8016b24:	b299      	uxth	r1, r3
 8016b26:	4b2e      	ldr	r3, [pc, #184]	; (8016be0 <drawMenu+0x33c>)
 8016b28:	781b      	ldrb	r3, [r3, #0]
 8016b2a:	3b01      	subs	r3, #1
 8016b2c:	b29b      	uxth	r3, r3
 8016b2e:	fb11 f303 	smulbb	r3, r1, r3
 8016b32:	b29b      	uxth	r3, r3
 8016b34:	4413      	add	r3, r2
 8016b36:	b29b      	uxth	r3, r3
 8016b38:	3301      	adds	r3, #1
 8016b3a:	b29d      	uxth	r5, r3
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition - 1], BLACK, WHITE, 16, Font12);
 8016b3c:	4b28      	ldr	r3, [pc, #160]	; (8016be0 <drawMenu+0x33c>)
 8016b3e:	785b      	ldrb	r3, [r3, #1]
 8016b40:	4619      	mov	r1, r3
 8016b42:	4b27      	ldr	r3, [pc, #156]	; (8016be0 <drawMenu+0x33c>)
 8016b44:	781b      	ldrb	r3, [r3, #0]
 8016b46:	3b01      	subs	r3, #1
 8016b48:	330a      	adds	r3, #10
 8016b4a:	011a      	lsls	r2, r3, #4
 8016b4c:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 8016b50:	fb03 f301 	mul.w	r3, r3, r1
 8016b54:	4413      	add	r3, r2
 8016b56:	4a23      	ldr	r2, [pc, #140]	; (8016be4 <drawMenu+0x340>)
 8016b58:	4413      	add	r3, r2
 8016b5a:	1c9a      	adds	r2, r3, #2
		centeredString(DisplayCenterWidth, MenuRectangleStartY + 1 + MenuRectangleHeight * (currentCursorPosition.cursorPosition - 1),
 8016b5c:	4922      	ldr	r1, [pc, #136]	; (8016be8 <drawMenu+0x344>)
 8016b5e:	ab02      	add	r3, sp, #8
 8016b60:	c903      	ldmia	r1, {r0, r1}
 8016b62:	e883 0003 	stmia.w	r3, {r0, r1}
 8016b66:	2310      	movs	r3, #16
 8016b68:	9301      	str	r3, [sp, #4]
 8016b6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016b6e:	9300      	str	r3, [sp, #0]
 8016b70:	2300      	movs	r3, #0
 8016b72:	4629      	mov	r1, r5
 8016b74:	4620      	mov	r0, r4
 8016b76:	f7ff fc3f 	bl	80163f8 <centeredString>
		centeredString(DisplayCenterWidth, MenuRectangleStartY+ 1 + MenuRectangleHeight * currentCursorPosition.cursorPosition,
 8016b7a:	7cfb      	ldrb	r3, [r7, #19]
 8016b7c:	b29c      	uxth	r4, r3
 8016b7e:	7dbb      	ldrb	r3, [r7, #22]
 8016b80:	b29a      	uxth	r2, r3
 8016b82:	7d7b      	ldrb	r3, [r7, #21]
 8016b84:	b299      	uxth	r1, r3
 8016b86:	4b16      	ldr	r3, [pc, #88]	; (8016be0 <drawMenu+0x33c>)
 8016b88:	781b      	ldrb	r3, [r3, #0]
 8016b8a:	b29b      	uxth	r3, r3
 8016b8c:	fb11 f303 	smulbb	r3, r1, r3
 8016b90:	b29b      	uxth	r3, r3
 8016b92:	4413      	add	r3, r2
 8016b94:	b29b      	uxth	r3, r3
 8016b96:	3301      	adds	r3, #1
 8016b98:	b29d      	uxth	r5, r3
				pagesArray[currentCursorPosition.currentPageID].itemsArray[currentCursorPosition.cursorPosition], BLACK, LGRAY, 16, Font12);
 8016b9a:	4b11      	ldr	r3, [pc, #68]	; (8016be0 <drawMenu+0x33c>)
 8016b9c:	785b      	ldrb	r3, [r3, #1]
 8016b9e:	4619      	mov	r1, r3
 8016ba0:	4b0f      	ldr	r3, [pc, #60]	; (8016be0 <drawMenu+0x33c>)
 8016ba2:	781b      	ldrb	r3, [r3, #0]
 8016ba4:	330a      	adds	r3, #10
 8016ba6:	011a      	lsls	r2, r3, #4
 8016ba8:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 8016bac:	fb03 f301 	mul.w	r3, r3, r1
 8016bb0:	4413      	add	r3, r2
 8016bb2:	4a0c      	ldr	r2, [pc, #48]	; (8016be4 <drawMenu+0x340>)
 8016bb4:	4413      	add	r3, r2
 8016bb6:	1c9a      	adds	r2, r3, #2
		centeredString(DisplayCenterWidth, MenuRectangleStartY+ 1 + MenuRectangleHeight * currentCursorPosition.cursorPosition,
 8016bb8:	490b      	ldr	r1, [pc, #44]	; (8016be8 <drawMenu+0x344>)
 8016bba:	ab02      	add	r3, sp, #8
 8016bbc:	c903      	ldmia	r1, {r0, r1}
 8016bbe:	e883 0003 	stmia.w	r3, {r0, r1}
 8016bc2:	2310      	movs	r3, #16
 8016bc4:	9301      	str	r3, [sp, #4]
 8016bc6:	f24c 6318 	movw	r3, #50712	; 0xc618
 8016bca:	9300      	str	r3, [sp, #0]
 8016bcc:	2300      	movs	r3, #0
 8016bce:	4629      	mov	r1, r5
 8016bd0:	4620      	mov	r0, r4
 8016bd2:	f7ff fc11 	bl	80163f8 <centeredString>
}
 8016bd6:	bf00      	nop
 8016bd8:	3718      	adds	r7, #24
 8016bda:	46bd      	mov	sp, r7
 8016bdc:	bdb0      	pop	{r4, r5, r7, pc}
 8016bde:	bf00      	nop
 8016be0:	2400ac84 	.word	0x2400ac84
 8016be4:	24013208 	.word	0x24013208
 8016be8:	24000030 	.word	0x24000030

08016bec <drawItem>:

void drawItem(bool clearScreen, MENUDRAWType howToDraw)
{
 8016bec:	b580      	push	{r7, lr}
 8016bee:	b082      	sub	sp, #8
 8016bf0:	af00      	add	r7, sp, #0
 8016bf2:	4603      	mov	r3, r0
 8016bf4:	460a      	mov	r2, r1
 8016bf6:	71fb      	strb	r3, [r7, #7]
 8016bf8:	4613      	mov	r3, r2
 8016bfa:	71bb      	strb	r3, [r7, #6]
	if ((clearScreen) || (!isItemDisplayed) )
 8016bfc:	79fb      	ldrb	r3, [r7, #7]
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d106      	bne.n	8016c10 <drawItem+0x24>
 8016c02:	4b53      	ldr	r3, [pc, #332]	; (8016d50 <drawItem+0x164>)
 8016c04:	781b      	ldrb	r3, [r3, #0]
 8016c06:	f083 0301 	eor.w	r3, r3, #1
 8016c0a:	b2db      	uxtb	r3, r3
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d006      	beq.n	8016c1e <drawItem+0x32>
	{
		Paint_Clear(WHITE);
 8016c10:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016c14:	f7f7 fc74 	bl	800e500 <Paint_Clear>
		createEmptyFrame(true);
 8016c18:	2001      	movs	r0, #1
 8016c1a:	f000 fc81 	bl	8017520 <createEmptyFrame>
	}
	if ( pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth - 1]].
 8016c1e:	4b4d      	ldr	r3, [pc, #308]	; (8016d54 <drawItem+0x168>)
 8016c20:	7b1b      	ldrb	r3, [r3, #12]
 8016c22:	3b01      	subs	r3, #1
 8016c24:	4a4b      	ldr	r2, [pc, #300]	; (8016d54 <drawItem+0x168>)
 8016c26:	4413      	add	r3, r2
 8016c28:	789b      	ldrb	r3, [r3, #2]
 8016c2a:	4618      	mov	r0, r3
			cellTypeArray[currentCursorPosition.previousPageCursorPosition[currentCursorPosition.menuDepth - 1]] == UINT16_ITEM )
 8016c2c:	4b49      	ldr	r3, [pc, #292]	; (8016d54 <drawItem+0x168>)
 8016c2e:	7b1b      	ldrb	r3, [r3, #12]
 8016c30:	3b01      	subs	r3, #1
 8016c32:	4a48      	ldr	r2, [pc, #288]	; (8016d54 <drawItem+0x168>)
 8016c34:	4413      	add	r3, r2
 8016c36:	79db      	ldrb	r3, [r3, #7]
 8016c38:	4619      	mov	r1, r3
 8016c3a:	4a47      	ldr	r2, [pc, #284]	; (8016d58 <drawItem+0x16c>)
 8016c3c:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 8016c40:	fb03 f300 	mul.w	r3, r3, r0
 8016c44:	4413      	add	r3, r2
 8016c46:	440b      	add	r3, r1
 8016c48:	3380      	adds	r3, #128	; 0x80
 8016c4a:	781b      	ldrb	r3, [r3, #0]
	if ( pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth - 1]].
 8016c4c:	2b02      	cmp	r3, #2
 8016c4e:	d130      	bne.n	8016cb2 <drawItem+0xc6>
	{
		if ( !(isItemDisplayed) )
 8016c50:	4b3f      	ldr	r3, [pc, #252]	; (8016d50 <drawItem+0x164>)
 8016c52:	781b      	ldrb	r3, [r3, #0]
 8016c54:	f083 0301 	eor.w	r3, r3, #1
 8016c58:	b2db      	uxtb	r3, r3
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	d022      	beq.n	8016ca4 <drawItem+0xb8>
		{
			multiplierIndex = 0;
 8016c5e:	4b3f      	ldr	r3, [pc, #252]	; (8016d5c <drawItem+0x170>)
 8016c60:	2200      	movs	r2, #0
 8016c62:	701a      	strb	r2, [r3, #0]
			memcpy(&uint16Item, (uint32_t *)pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth -1]].
 8016c64:	4b3b      	ldr	r3, [pc, #236]	; (8016d54 <drawItem+0x168>)
 8016c66:	7b1b      	ldrb	r3, [r3, #12]
 8016c68:	3b01      	subs	r3, #1
 8016c6a:	4a3a      	ldr	r2, [pc, #232]	; (8016d54 <drawItem+0x168>)
 8016c6c:	4413      	add	r3, r2
 8016c6e:	789b      	ldrb	r3, [r3, #2]
 8016c70:	4618      	mov	r0, r3
					nextCellIDArray[currentCursorPosition.previousPageCursorPosition[currentCursorPosition.menuDepth -1]], sizeof(tUINT16_ITEM));
 8016c72:	4b38      	ldr	r3, [pc, #224]	; (8016d54 <drawItem+0x168>)
 8016c74:	7b1b      	ldrb	r3, [r3, #12]
 8016c76:	3b01      	subs	r3, #1
 8016c78:	4a36      	ldr	r2, [pc, #216]	; (8016d54 <drawItem+0x168>)
 8016c7a:	4413      	add	r3, r2
 8016c7c:	79db      	ldrb	r3, [r3, #7]
 8016c7e:	4619      	mov	r1, r3
 8016c80:	4a35      	ldr	r2, [pc, #212]	; (8016d58 <drawItem+0x16c>)
 8016c82:	23a9      	movs	r3, #169	; 0xa9
 8016c84:	fb03 f300 	mul.w	r3, r3, r0
 8016c88:	440b      	add	r3, r1
 8016c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			memcpy(&uint16Item, (uint32_t *)pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth -1]].
 8016c8e:	f44f 7204 	mov.w	r2, #528	; 0x210
 8016c92:	4619      	mov	r1, r3
 8016c94:	4832      	ldr	r0, [pc, #200]	; (8016d60 <drawItem+0x174>)
 8016c96:	f003 fd93 	bl	801a7c0 <memcpy>
			itemIDtoUpdate = uint16Item.itemID;
 8016c9a:	4b31      	ldr	r3, [pc, #196]	; (8016d60 <drawItem+0x174>)
 8016c9c:	7b9b      	ldrb	r3, [r3, #14]
 8016c9e:	461a      	mov	r2, r3
 8016ca0:	4b30      	ldr	r3, [pc, #192]	; (8016d64 <drawItem+0x178>)
 8016ca2:	601a      	str	r2, [r3, #0]
		}
		isItemDisplayed = true;
 8016ca4:	4b2a      	ldr	r3, [pc, #168]	; (8016d50 <drawItem+0x164>)
 8016ca6:	2201      	movs	r2, #1
 8016ca8:	701a      	strb	r2, [r3, #0]
		updateUint16Item(howToDraw);
 8016caa:	79bb      	ldrb	r3, [r7, #6]
 8016cac:	4618      	mov	r0, r3
 8016cae:	f000 fc9b 	bl	80175e8 <updateUint16Item>
	}
	if ( pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth - 1]].
 8016cb2:	4b28      	ldr	r3, [pc, #160]	; (8016d54 <drawItem+0x168>)
 8016cb4:	7b1b      	ldrb	r3, [r3, #12]
 8016cb6:	3b01      	subs	r3, #1
 8016cb8:	4a26      	ldr	r2, [pc, #152]	; (8016d54 <drawItem+0x168>)
 8016cba:	4413      	add	r3, r2
 8016cbc:	789b      	ldrb	r3, [r3, #2]
 8016cbe:	4618      	mov	r0, r3
			cellTypeArray[currentCursorPosition.previousPageCursorPosition[currentCursorPosition.menuDepth - 1]] == STRING_ITEM )
 8016cc0:	4b24      	ldr	r3, [pc, #144]	; (8016d54 <drawItem+0x168>)
 8016cc2:	7b1b      	ldrb	r3, [r3, #12]
 8016cc4:	3b01      	subs	r3, #1
 8016cc6:	4a23      	ldr	r2, [pc, #140]	; (8016d54 <drawItem+0x168>)
 8016cc8:	4413      	add	r3, r2
 8016cca:	79db      	ldrb	r3, [r3, #7]
 8016ccc:	4619      	mov	r1, r3
 8016cce:	4a22      	ldr	r2, [pc, #136]	; (8016d58 <drawItem+0x16c>)
 8016cd0:	f44f 7329 	mov.w	r3, #676	; 0x2a4
 8016cd4:	fb03 f300 	mul.w	r3, r3, r0
 8016cd8:	4413      	add	r3, r2
 8016cda:	440b      	add	r3, r1
 8016cdc:	3380      	adds	r3, #128	; 0x80
 8016cde:	781b      	ldrb	r3, [r3, #0]
	if ( pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth - 1]].
 8016ce0:	2b08      	cmp	r3, #8
 8016ce2:	d131      	bne.n	8016d48 <drawItem+0x15c>
	{
		if ( !(isItemDisplayed) )
 8016ce4:	4b1a      	ldr	r3, [pc, #104]	; (8016d50 <drawItem+0x164>)
 8016ce6:	781b      	ldrb	r3, [r3, #0]
 8016ce8:	f083 0301 	eor.w	r3, r3, #1
 8016cec:	b2db      	uxtb	r3, r3
 8016cee:	2b00      	cmp	r3, #0
 8016cf0:	d023      	beq.n	8016d3a <drawItem+0x14e>
		{
			multiplierIndex = 0;
 8016cf2:	4b1a      	ldr	r3, [pc, #104]	; (8016d5c <drawItem+0x170>)
 8016cf4:	2200      	movs	r2, #0
 8016cf6:	701a      	strb	r2, [r3, #0]
			memcpy(&stringItem, (uint32_t *)pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth -1]].
 8016cf8:	4b16      	ldr	r3, [pc, #88]	; (8016d54 <drawItem+0x168>)
 8016cfa:	7b1b      	ldrb	r3, [r3, #12]
 8016cfc:	3b01      	subs	r3, #1
 8016cfe:	4a15      	ldr	r2, [pc, #84]	; (8016d54 <drawItem+0x168>)
 8016d00:	4413      	add	r3, r2
 8016d02:	789b      	ldrb	r3, [r3, #2]
 8016d04:	4618      	mov	r0, r3
					nextCellIDArray[currentCursorPosition.previousPageCursorPosition[currentCursorPosition.menuDepth -1]], sizeof(tSTRING_ITEM));
 8016d06:	4b13      	ldr	r3, [pc, #76]	; (8016d54 <drawItem+0x168>)
 8016d08:	7b1b      	ldrb	r3, [r3, #12]
 8016d0a:	3b01      	subs	r3, #1
 8016d0c:	4a11      	ldr	r2, [pc, #68]	; (8016d54 <drawItem+0x168>)
 8016d0e:	4413      	add	r3, r2
 8016d10:	79db      	ldrb	r3, [r3, #7]
 8016d12:	4619      	mov	r1, r3
 8016d14:	4a10      	ldr	r2, [pc, #64]	; (8016d58 <drawItem+0x16c>)
 8016d16:	23a9      	movs	r3, #169	; 0xa9
 8016d18:	fb03 f300 	mul.w	r3, r3, r0
 8016d1c:	440b      	add	r3, r1
 8016d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			memcpy(&stringItem, (uint32_t *)pagesArray[currentCursorPosition.previousPageID[currentCursorPosition.menuDepth -1]].
 8016d22:	f240 420c 	movw	r2, #1036	; 0x40c
 8016d26:	4619      	mov	r1, r3
 8016d28:	480f      	ldr	r0, [pc, #60]	; (8016d68 <drawItem+0x17c>)
 8016d2a:	f003 fd49 	bl	801a7c0 <memcpy>
			itemIDtoUpdate = stringItem.itemID;
 8016d2e:	4b0e      	ldr	r3, [pc, #56]	; (8016d68 <drawItem+0x17c>)
 8016d30:	f893 320a 	ldrb.w	r3, [r3, #522]	; 0x20a
 8016d34:	461a      	mov	r2, r3
 8016d36:	4b0b      	ldr	r3, [pc, #44]	; (8016d64 <drawItem+0x178>)
 8016d38:	601a      	str	r2, [r3, #0]
		}
		isItemDisplayed = true;
 8016d3a:	4b05      	ldr	r3, [pc, #20]	; (8016d50 <drawItem+0x164>)
 8016d3c:	2201      	movs	r2, #1
 8016d3e:	701a      	strb	r2, [r3, #0]
		updateStringItem(howToDraw);
 8016d40:	79bb      	ldrb	r3, [r7, #6]
 8016d42:	4618      	mov	r0, r3
 8016d44:	f001 ff80 	bl	8018c48 <updateStringItem>
	}
}
 8016d48:	bf00      	nop
 8016d4a:	3708      	adds	r7, #8
 8016d4c:	46bd      	mov	sp, r7
 8016d4e:	bd80      	pop	{r7, pc}
 8016d50:	2400aa70 	.word	0x2400aa70
 8016d54:	2400ac84 	.word	0x2400ac84
 8016d58:	24013208 	.word	0x24013208
 8016d5c:	2400a110 	.word	0x2400a110
 8016d60:	2400fe04 	.word	0x2400fe04
 8016d64:	2400ab18 	.word	0x2400ab18
 8016d68:	24010018 	.word	0x24010018

08016d6c <drawPopup>:

void drawPopup(void)
{
 8016d6c:	b5b0      	push	{r4, r5, r7, lr}
 8016d6e:	b088      	sub	sp, #32
 8016d70:	af04      	add	r7, sp, #16
	uint8_t MenuRectangleStartX = 0;
 8016d72:	2300      	movs	r3, #0
 8016d74:	73fb      	strb	r3, [r7, #15]
	uint8_t MenuRectangleStartY = 0;
 8016d76:	2300      	movs	r3, #0
 8016d78:	73bb      	strb	r3, [r7, #14]
	uint8_t MenuRectangleHeight = 0;
 8016d7a:	2300      	movs	r3, #0
 8016d7c:	737b      	strb	r3, [r7, #13]
	uint8_t MenuRectangleWidth = 0;
 8016d7e:	2300      	movs	r3, #0
 8016d80:	733b      	strb	r3, [r7, #12]
	uint8_t DisplayCenterWidth = 0;
 8016d82:	2300      	movs	r3, #0
 8016d84:	72fb      	strb	r3, [r7, #11]
	uint8_t PopupRectangleHeight = 0;
 8016d86:	2300      	movs	r3, #0
 8016d88:	72bb      	strb	r3, [r7, #10]
	uint8_t QuestionRectangleHeight = 0;
 8016d8a:	2300      	movs	r3, #0
 8016d8c:	727b      	strb	r3, [r7, #9]

	if (isPortrait)
 8016d8e:	4ba3      	ldr	r3, [pc, #652]	; (801701c <drawPopup+0x2b0>)
 8016d90:	781b      	ldrb	r3, [r3, #0]
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	d00d      	beq.n	8016db2 <drawPopup+0x46>
	{
		MenuRectangleStartX = VerticalMenuRectangleStartX;
 8016d96:	2302      	movs	r3, #2
 8016d98:	73fb      	strb	r3, [r7, #15]
		MenuRectangleStartY = VerticalMenuRectangleStartY;
 8016d9a:	230c      	movs	r3, #12
 8016d9c:	73bb      	strb	r3, [r7, #14]
		MenuRectangleHeight = VerticalMenuRectangleHeight;
 8016d9e:	230e      	movs	r3, #14
 8016da0:	737b      	strb	r3, [r7, #13]
		MenuRectangleWidth = VerticalMenuRectangleWidth;
 8016da2:	237c      	movs	r3, #124	; 0x7c
 8016da4:	733b      	strb	r3, [r7, #12]
		DisplayCenterWidth = VerticalDisplayCenterWidth;
 8016da6:	2340      	movs	r3, #64	; 0x40
 8016da8:	72fb      	strb	r3, [r7, #11]
		PopupRectangleHeight = VerticalPopupRectangleHeight;
 8016daa:	2364      	movs	r3, #100	; 0x64
 8016dac:	72bb      	strb	r3, [r7, #10]
		QuestionRectangleHeight = VerticalQuestionRectangleHeight;
 8016dae:	2356      	movs	r3, #86	; 0x56
 8016db0:	727b      	strb	r3, [r7, #9]
//		DisplayCenterWidth = HorizontalDisplayCenterWidth;
//		PopupRectangleHeight = HorizontalPopupRectangleHeight;
//		QuestionRectangleHeight = HorizontalQuestionRectangleHeight;
	}

	isPopupDisplayed = true;
 8016db2:	4b9b      	ldr	r3, [pc, #620]	; (8017020 <drawPopup+0x2b4>)
 8016db4:	2201      	movs	r2, #1
 8016db6:	701a      	strb	r2, [r3, #0]
	isItemDisplayed = false;
 8016db8:	4b9a      	ldr	r3, [pc, #616]	; (8017024 <drawPopup+0x2b8>)
 8016dba:	2200      	movs	r2, #0
 8016dbc:	701a      	strb	r2, [r3, #0]
	isMenuDisplayed = false;
 8016dbe:	4b9a      	ldr	r3, [pc, #616]	; (8017028 <drawPopup+0x2bc>)
 8016dc0:	2200      	movs	r2, #0
 8016dc2:	701a      	strb	r2, [r3, #0]
	if (popupDrawDirection == FULL)
 8016dc4:	4b99      	ldr	r3, [pc, #612]	; (801702c <drawPopup+0x2c0>)
 8016dc6:	781b      	ldrb	r3, [r3, #0]
 8016dc8:	2b02      	cmp	r3, #2
 8016dca:	f040 8097 	bne.w	8016efc <drawPopup+0x190>
	{
		Paint_Clear(WHITE);
 8016dce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016dd2:	f7f7 fb95 	bl	800e500 <Paint_Clear>
		createEmptyFrame(true);
 8016dd6:	2001      	movs	r0, #1
 8016dd8:	f000 fba2 	bl	8017520 <createEmptyFrame>
		Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY ,
 8016ddc:	7bfb      	ldrb	r3, [r7, #15]
 8016dde:	b298      	uxth	r0, r3
 8016de0:	7bbb      	ldrb	r3, [r7, #14]
 8016de2:	b299      	uxth	r1, r3
 8016de4:	7bfb      	ldrb	r3, [r7, #15]
 8016de6:	b29a      	uxth	r2, r3
 8016de8:	7b3b      	ldrb	r3, [r7, #12]
 8016dea:	b29b      	uxth	r3, r3
 8016dec:	4413      	add	r3, r2
 8016dee:	b29c      	uxth	r4, r3
 8016df0:	7bbb      	ldrb	r3, [r7, #14]
 8016df2:	b29a      	uxth	r2, r3
 8016df4:	7abb      	ldrb	r3, [r7, #10]
 8016df6:	b29b      	uxth	r3, r3
 8016df8:	4413      	add	r3, r2
 8016dfa:	b29b      	uxth	r3, r3
 8016dfc:	2200      	movs	r2, #0
 8016dfe:	9202      	str	r2, [sp, #8]
 8016e00:	2201      	movs	r2, #1
 8016e02:	9201      	str	r2, [sp, #4]
 8016e04:	2200      	movs	r2, #0
 8016e06:	9200      	str	r2, [sp, #0]
 8016e08:	4622      	mov	r2, r4
 8016e0a:	f7f7 fd03 	bl	800e814 <Paint_DrawRectangle>
				MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + PopupRectangleHeight,
				BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );

		if (popupToShow.isQuestion)
 8016e0e:	4b88      	ldr	r3, [pc, #544]	; (8017030 <drawPopup+0x2c4>)
 8016e10:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	d020      	beq.n	8016e5a <drawPopup+0xee>
		{
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + QuestionRectangleHeight,
 8016e18:	7bfb      	ldrb	r3, [r7, #15]
 8016e1a:	b298      	uxth	r0, r3
 8016e1c:	7bbb      	ldrb	r3, [r7, #14]
 8016e1e:	b29a      	uxth	r2, r3
 8016e20:	7a7b      	ldrb	r3, [r7, #9]
 8016e22:	b29b      	uxth	r3, r3
 8016e24:	4413      	add	r3, r2
 8016e26:	b299      	uxth	r1, r3
 8016e28:	7bfb      	ldrb	r3, [r7, #15]
 8016e2a:	b29a      	uxth	r2, r3
 8016e2c:	7b3b      	ldrb	r3, [r7, #12]
 8016e2e:	b29b      	uxth	r3, r3
 8016e30:	4413      	add	r3, r2
 8016e32:	b29c      	uxth	r4, r3
					MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + QuestionRectangleHeight + MenuRectangleHeight,
 8016e34:	7bbb      	ldrb	r3, [r7, #14]
 8016e36:	b29a      	uxth	r2, r3
 8016e38:	7a7b      	ldrb	r3, [r7, #9]
 8016e3a:	b29b      	uxth	r3, r3
 8016e3c:	4413      	add	r3, r2
 8016e3e:	b29a      	uxth	r2, r3
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + QuestionRectangleHeight,
 8016e40:	7b7b      	ldrb	r3, [r7, #13]
 8016e42:	b29b      	uxth	r3, r3
 8016e44:	4413      	add	r3, r2
 8016e46:	b29b      	uxth	r3, r3
 8016e48:	2200      	movs	r2, #0
 8016e4a:	9202      	str	r2, [sp, #8]
 8016e4c:	2201      	movs	r2, #1
 8016e4e:	9201      	str	r2, [sp, #4]
 8016e50:	2200      	movs	r2, #0
 8016e52:	9200      	str	r2, [sp, #0]
 8016e54:	4622      	mov	r2, r4
 8016e56:	f7f7 fcdd 	bl	800e814 <Paint_DrawRectangle>
					BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
		}

		Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + PopupRectangleHeight,
 8016e5a:	7bfb      	ldrb	r3, [r7, #15]
 8016e5c:	b298      	uxth	r0, r3
 8016e5e:	7bbb      	ldrb	r3, [r7, #14]
 8016e60:	b29a      	uxth	r2, r3
 8016e62:	7abb      	ldrb	r3, [r7, #10]
 8016e64:	b29b      	uxth	r3, r3
 8016e66:	4413      	add	r3, r2
 8016e68:	b299      	uxth	r1, r3
 8016e6a:	7bfb      	ldrb	r3, [r7, #15]
 8016e6c:	b29a      	uxth	r2, r3
 8016e6e:	7b3b      	ldrb	r3, [r7, #12]
 8016e70:	b29b      	uxth	r3, r3
 8016e72:	4413      	add	r3, r2
 8016e74:	b29c      	uxth	r4, r3
				MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + PopupRectangleHeight + MenuRectangleHeight,
 8016e76:	7bbb      	ldrb	r3, [r7, #14]
 8016e78:	b29a      	uxth	r2, r3
 8016e7a:	7abb      	ldrb	r3, [r7, #10]
 8016e7c:	b29b      	uxth	r3, r3
 8016e7e:	4413      	add	r3, r2
 8016e80:	b29a      	uxth	r2, r3
		Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + PopupRectangleHeight,
 8016e82:	7b7b      	ldrb	r3, [r7, #13]
 8016e84:	b29b      	uxth	r3, r3
 8016e86:	4413      	add	r3, r2
 8016e88:	b29b      	uxth	r3, r3
 8016e8a:	2200      	movs	r2, #0
 8016e8c:	9202      	str	r2, [sp, #8]
 8016e8e:	2201      	movs	r2, #1
 8016e90:	9201      	str	r2, [sp, #4]
 8016e92:	2200      	movs	r2, #0
 8016e94:	9200      	str	r2, [sp, #0]
 8016e96:	4622      	mov	r2, r4
 8016e98:	f7f7 fcbc 	bl	800e814 <Paint_DrawRectangle>
				BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );

		for (int i = 0 ; i < popupToShow.numberOfItemsInPopup - 2; i++)
 8016e9c:	2300      	movs	r3, #0
 8016e9e:	607b      	str	r3, [r7, #4]
 8016ea0:	e026      	b.n	8016ef0 <drawPopup+0x184>
		{
			centeredString( DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1) + 1,
 8016ea2:	7afb      	ldrb	r3, [r7, #11]
 8016ea4:	b29c      	uxth	r4, r3
 8016ea6:	7bbb      	ldrb	r3, [r7, #14]
 8016ea8:	b29a      	uxth	r2, r3
 8016eaa:	7b7b      	ldrb	r3, [r7, #13]
 8016eac:	b299      	uxth	r1, r3
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	3301      	adds	r3, #1
 8016eb2:	b29b      	uxth	r3, r3
 8016eb4:	fb11 f303 	smulbb	r3, r1, r3
 8016eb8:	b29b      	uxth	r3, r3
 8016eba:	4413      	add	r3, r2
 8016ebc:	b29b      	uxth	r3, r3
 8016ebe:	3301      	adds	r3, #1
 8016ec0:	b29d      	uxth	r5, r3
					popupToShow.itemsArray[i], BLACK, WHITE, 16, Font12);
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	011b      	lsls	r3, r3, #4
 8016ec6:	4a5a      	ldr	r2, [pc, #360]	; (8017030 <drawPopup+0x2c4>)
 8016ec8:	4413      	add	r3, r2
 8016eca:	1c9a      	adds	r2, r3, #2
			centeredString( DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1) + 1,
 8016ecc:	4959      	ldr	r1, [pc, #356]	; (8017034 <drawPopup+0x2c8>)
 8016ece:	ab02      	add	r3, sp, #8
 8016ed0:	c903      	ldmia	r1, {r0, r1}
 8016ed2:	e883 0003 	stmia.w	r3, {r0, r1}
 8016ed6:	2310      	movs	r3, #16
 8016ed8:	9301      	str	r3, [sp, #4]
 8016eda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016ede:	9300      	str	r3, [sp, #0]
 8016ee0:	2300      	movs	r3, #0
 8016ee2:	4629      	mov	r1, r5
 8016ee4:	4620      	mov	r0, r4
 8016ee6:	f7ff fa87 	bl	80163f8 <centeredString>
		for (int i = 0 ; i < popupToShow.numberOfItemsInPopup - 2; i++)
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	3301      	adds	r3, #1
 8016eee:	607b      	str	r3, [r7, #4]
 8016ef0:	4b4f      	ldr	r3, [pc, #316]	; (8017030 <drawPopup+0x2c4>)
 8016ef2:	785b      	ldrb	r3, [r3, #1]
 8016ef4:	3b02      	subs	r3, #2
 8016ef6:	687a      	ldr	r2, [r7, #4]
 8016ef8:	429a      	cmp	r2, r3
 8016efa:	dbd2      	blt.n	8016ea2 <drawPopup+0x136>
		}
	}

	if (popupToShow.isQuestion)
 8016efc:	4b4c      	ldr	r3, [pc, #304]	; (8017030 <drawPopup+0x2c4>)
 8016efe:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	f000 8098 	beq.w	8017038 <drawPopup+0x2cc>
	{
		if ( (popupDrawDirection == FULL) || (popupDrawDirection == UP))
 8016f08:	4b48      	ldr	r3, [pc, #288]	; (801702c <drawPopup+0x2c0>)
 8016f0a:	781b      	ldrb	r3, [r3, #0]
 8016f0c:	2b02      	cmp	r3, #2
 8016f0e:	d003      	beq.n	8016f18 <drawPopup+0x1ac>
 8016f10:	4b46      	ldr	r3, [pc, #280]	; (801702c <drawPopup+0x2c0>)
 8016f12:	781b      	ldrb	r3, [r3, #0]
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d140      	bne.n	8016f9a <drawPopup+0x22e>
		{
			centeredString( DisplayCenterWidth, MenuRectangleStartY + QuestionRectangleHeight + 1,
 8016f18:	7afb      	ldrb	r3, [r7, #11]
 8016f1a:	b29c      	uxth	r4, r3
 8016f1c:	7bbb      	ldrb	r3, [r7, #14]
 8016f1e:	b29a      	uxth	r2, r3
 8016f20:	7a7b      	ldrb	r3, [r7, #9]
 8016f22:	b29b      	uxth	r3, r3
 8016f24:	4413      	add	r3, r2
 8016f26:	b29b      	uxth	r3, r3
 8016f28:	3301      	adds	r3, #1
 8016f2a:	b29d      	uxth	r5, r3
					popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 2], BLACK, LGRAY, 16, Font12);
 8016f2c:	4b40      	ldr	r3, [pc, #256]	; (8017030 <drawPopup+0x2c4>)
 8016f2e:	785b      	ldrb	r3, [r3, #1]
 8016f30:	3b02      	subs	r3, #2
 8016f32:	011b      	lsls	r3, r3, #4
 8016f34:	4a3e      	ldr	r2, [pc, #248]	; (8017030 <drawPopup+0x2c4>)
 8016f36:	4413      	add	r3, r2
 8016f38:	1c9a      	adds	r2, r3, #2
			centeredString( DisplayCenterWidth, MenuRectangleStartY + QuestionRectangleHeight + 1,
 8016f3a:	493e      	ldr	r1, [pc, #248]	; (8017034 <drawPopup+0x2c8>)
 8016f3c:	ab02      	add	r3, sp, #8
 8016f3e:	c903      	ldmia	r1, {r0, r1}
 8016f40:	e883 0003 	stmia.w	r3, {r0, r1}
 8016f44:	2310      	movs	r3, #16
 8016f46:	9301      	str	r3, [sp, #4]
 8016f48:	f24c 6318 	movw	r3, #50712	; 0xc618
 8016f4c:	9300      	str	r3, [sp, #0]
 8016f4e:	2300      	movs	r3, #0
 8016f50:	4629      	mov	r1, r5
 8016f52:	4620      	mov	r0, r4
 8016f54:	f7ff fa50 	bl	80163f8 <centeredString>

			centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 8016f58:	7afb      	ldrb	r3, [r7, #11]
 8016f5a:	b29c      	uxth	r4, r3
 8016f5c:	7bbb      	ldrb	r3, [r7, #14]
 8016f5e:	b29a      	uxth	r2, r3
 8016f60:	7abb      	ldrb	r3, [r7, #10]
 8016f62:	b29b      	uxth	r3, r3
 8016f64:	4413      	add	r3, r2
 8016f66:	b29b      	uxth	r3, r3
 8016f68:	3301      	adds	r3, #1
 8016f6a:	b29d      	uxth	r5, r3
					popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 1], BLACK, WHITE, 16, Font12);
 8016f6c:	4b30      	ldr	r3, [pc, #192]	; (8017030 <drawPopup+0x2c4>)
 8016f6e:	785b      	ldrb	r3, [r3, #1]
 8016f70:	3b01      	subs	r3, #1
 8016f72:	011b      	lsls	r3, r3, #4
 8016f74:	4a2e      	ldr	r2, [pc, #184]	; (8017030 <drawPopup+0x2c4>)
 8016f76:	4413      	add	r3, r2
 8016f78:	1c9a      	adds	r2, r3, #2
			centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 8016f7a:	492e      	ldr	r1, [pc, #184]	; (8017034 <drawPopup+0x2c8>)
 8016f7c:	ab02      	add	r3, sp, #8
 8016f7e:	c903      	ldmia	r1, {r0, r1}
 8016f80:	e883 0003 	stmia.w	r3, {r0, r1}
 8016f84:	2310      	movs	r3, #16
 8016f86:	9301      	str	r3, [sp, #4]
 8016f88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016f8c:	9300      	str	r3, [sp, #0]
 8016f8e:	2300      	movs	r3, #0
 8016f90:	4629      	mov	r1, r5
 8016f92:	4620      	mov	r0, r4
 8016f94:	f7ff fa30 	bl	80163f8 <centeredString>
	else
	{
		centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
				popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 1], BLACK, LGRAY, 16, Font12);
	}
}
 8016f98:	e06e      	b.n	8017078 <drawPopup+0x30c>
			centeredString( DisplayCenterWidth, MenuRectangleStartY + QuestionRectangleHeight + 1,
 8016f9a:	7afb      	ldrb	r3, [r7, #11]
 8016f9c:	b29c      	uxth	r4, r3
 8016f9e:	7bbb      	ldrb	r3, [r7, #14]
 8016fa0:	b29a      	uxth	r2, r3
 8016fa2:	7a7b      	ldrb	r3, [r7, #9]
 8016fa4:	b29b      	uxth	r3, r3
 8016fa6:	4413      	add	r3, r2
 8016fa8:	b29b      	uxth	r3, r3
 8016faa:	3301      	adds	r3, #1
 8016fac:	b29d      	uxth	r5, r3
					popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 2], BLACK, WHITE, 16, Font12);
 8016fae:	4b20      	ldr	r3, [pc, #128]	; (8017030 <drawPopup+0x2c4>)
 8016fb0:	785b      	ldrb	r3, [r3, #1]
 8016fb2:	3b02      	subs	r3, #2
 8016fb4:	011b      	lsls	r3, r3, #4
 8016fb6:	4a1e      	ldr	r2, [pc, #120]	; (8017030 <drawPopup+0x2c4>)
 8016fb8:	4413      	add	r3, r2
 8016fba:	1c9a      	adds	r2, r3, #2
			centeredString( DisplayCenterWidth, MenuRectangleStartY + QuestionRectangleHeight + 1,
 8016fbc:	491d      	ldr	r1, [pc, #116]	; (8017034 <drawPopup+0x2c8>)
 8016fbe:	ab02      	add	r3, sp, #8
 8016fc0:	c903      	ldmia	r1, {r0, r1}
 8016fc2:	e883 0003 	stmia.w	r3, {r0, r1}
 8016fc6:	2310      	movs	r3, #16
 8016fc8:	9301      	str	r3, [sp, #4]
 8016fca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016fce:	9300      	str	r3, [sp, #0]
 8016fd0:	2300      	movs	r3, #0
 8016fd2:	4629      	mov	r1, r5
 8016fd4:	4620      	mov	r0, r4
 8016fd6:	f7ff fa0f 	bl	80163f8 <centeredString>
			centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 8016fda:	7afb      	ldrb	r3, [r7, #11]
 8016fdc:	b29c      	uxth	r4, r3
 8016fde:	7bbb      	ldrb	r3, [r7, #14]
 8016fe0:	b29a      	uxth	r2, r3
 8016fe2:	7abb      	ldrb	r3, [r7, #10]
 8016fe4:	b29b      	uxth	r3, r3
 8016fe6:	4413      	add	r3, r2
 8016fe8:	b29b      	uxth	r3, r3
 8016fea:	3301      	adds	r3, #1
 8016fec:	b29d      	uxth	r5, r3
					popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 1], BLACK, LGRAY, 16, Font12);
 8016fee:	4b10      	ldr	r3, [pc, #64]	; (8017030 <drawPopup+0x2c4>)
 8016ff0:	785b      	ldrb	r3, [r3, #1]
 8016ff2:	3b01      	subs	r3, #1
 8016ff4:	011b      	lsls	r3, r3, #4
 8016ff6:	4a0e      	ldr	r2, [pc, #56]	; (8017030 <drawPopup+0x2c4>)
 8016ff8:	4413      	add	r3, r2
 8016ffa:	1c9a      	adds	r2, r3, #2
			centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 8016ffc:	490d      	ldr	r1, [pc, #52]	; (8017034 <drawPopup+0x2c8>)
 8016ffe:	ab02      	add	r3, sp, #8
 8017000:	c903      	ldmia	r1, {r0, r1}
 8017002:	e883 0003 	stmia.w	r3, {r0, r1}
 8017006:	2310      	movs	r3, #16
 8017008:	9301      	str	r3, [sp, #4]
 801700a:	f24c 6318 	movw	r3, #50712	; 0xc618
 801700e:	9300      	str	r3, [sp, #0]
 8017010:	2300      	movs	r3, #0
 8017012:	4629      	mov	r1, r5
 8017014:	4620      	mov	r0, r4
 8017016:	f7ff f9ef 	bl	80163f8 <centeredString>
}
 801701a:	e02d      	b.n	8017078 <drawPopup+0x30c>
 801701c:	2400008c 	.word	0x2400008c
 8017020:	2400aa72 	.word	0x2400aa72
 8017024:	2400aa70 	.word	0x2400aa70
 8017028:	2400aa6d 	.word	0x2400aa6d
 801702c:	2400008f 	.word	0x2400008f
 8017030:	24010648 	.word	0x24010648
 8017034:	24000030 	.word	0x24000030
		centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 8017038:	7afb      	ldrb	r3, [r7, #11]
 801703a:	b29c      	uxth	r4, r3
 801703c:	7bbb      	ldrb	r3, [r7, #14]
 801703e:	b29a      	uxth	r2, r3
 8017040:	7abb      	ldrb	r3, [r7, #10]
 8017042:	b29b      	uxth	r3, r3
 8017044:	4413      	add	r3, r2
 8017046:	b29b      	uxth	r3, r3
 8017048:	3301      	adds	r3, #1
 801704a:	b29d      	uxth	r5, r3
				popupToShow.itemsArray[popupToShow.numberOfItemsInPopup - 1], BLACK, LGRAY, 16, Font12);
 801704c:	4b0c      	ldr	r3, [pc, #48]	; (8017080 <drawPopup+0x314>)
 801704e:	785b      	ldrb	r3, [r3, #1]
 8017050:	3b01      	subs	r3, #1
 8017052:	011b      	lsls	r3, r3, #4
 8017054:	4a0a      	ldr	r2, [pc, #40]	; (8017080 <drawPopup+0x314>)
 8017056:	4413      	add	r3, r2
 8017058:	1c9a      	adds	r2, r3, #2
		centeredString( DisplayCenterWidth, MenuRectangleStartY + PopupRectangleHeight + 1,
 801705a:	490a      	ldr	r1, [pc, #40]	; (8017084 <drawPopup+0x318>)
 801705c:	ab02      	add	r3, sp, #8
 801705e:	c903      	ldmia	r1, {r0, r1}
 8017060:	e883 0003 	stmia.w	r3, {r0, r1}
 8017064:	2310      	movs	r3, #16
 8017066:	9301      	str	r3, [sp, #4]
 8017068:	f24c 6318 	movw	r3, #50712	; 0xc618
 801706c:	9300      	str	r3, [sp, #0]
 801706e:	2300      	movs	r3, #0
 8017070:	4629      	mov	r1, r5
 8017072:	4620      	mov	r0, r4
 8017074:	f7ff f9c0 	bl	80163f8 <centeredString>
}
 8017078:	bf00      	nop
 801707a:	3710      	adds	r7, #16
 801707c:	46bd      	mov	sp, r7
 801707e:	bdb0      	pop	{r4, r5, r7, pc}
 8017080:	24010648 	.word	0x24010648
 8017084:	24000030 	.word	0x24000030

08017088 <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8017088:	b580      	push	{r7, lr}
 801708a:	b082      	sub	sp, #8
 801708c:	af00      	add	r7, sp, #0
 801708e:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 8017090:	4b04      	ldr	r3, [pc, #16]	; (80170a4 <HAL_HSEM_FreeCallback+0x1c>)
 8017092:	2201      	movs	r2, #1
 8017094:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM7 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 8017096:	2002      	movs	r0, #2
 8017098:	f7ef ff32 	bl	8006f00 <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 801709c:	bf00      	nop
 801709e:	3708      	adds	r7, #8
 80170a0:	46bd      	mov	sp, r7
 80170a2:	bd80      	pop	{r7, pc}
 80170a4:	2400aa80 	.word	0x2400aa80

080170a8 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
 80170a8:	b580      	push	{r7, lr}
 80170aa:	b082      	sub	sp, #8
 80170ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MAILBOX_INIT */

  /* USER CODE END MAILBOX_INIT */
  __HAL_RCC_HSEM_CLK_ENABLE();
 80170ae:	4b0b      	ldr	r3, [pc, #44]	; (80170dc <MAILBOX_Init+0x34>)
 80170b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80170b4:	4a09      	ldr	r2, [pc, #36]	; (80170dc <MAILBOX_Init+0x34>)
 80170b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80170ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80170be:	4b07      	ldr	r3, [pc, #28]	; (80170dc <MAILBOX_Init+0x34>)
 80170c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80170c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80170c8:	607b      	str	r3, [r7, #4]
 80170ca:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN PRE_MAILBOX_INIT_CM7 */

  /* USER CODE END PRE_MAILBOX_INIT_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 80170cc:	2002      	movs	r0, #2
 80170ce:	f7ef ff17 	bl	8006f00 <HAL_HSEM_ActivateNotification>
  /* USER CODE BEGIN POST_MAILBOX_INIT_CM4 */

  /* USER CODE END POST_MAILBOX_INIT_CM4 */
#endif

  return 0;
 80170d2:	2300      	movs	r3, #0
}
 80170d4:	4618      	mov	r0, r3
 80170d6:	3708      	adds	r7, #8
 80170d8:	46bd      	mov	sp, r7
 80170da:	bd80      	pop	{r7, pc}
 80170dc:	58024400 	.word	0x58024400

080170e0 <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
 80170e0:	b580      	push	{r7, lr}
 80170e2:	b082      	sub	sp, #8
 80170e4:	af00      	add	r7, sp, #0
 80170e6:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */

  if (msg_received == RX_NEW_MSG)
 80170e8:	4b09      	ldr	r3, [pc, #36]	; (8017110 <MAILBOX_Poll+0x30>)
 80170ea:	681b      	ldr	r3, [r3, #0]
 80170ec:	2b01      	cmp	r3, #1
 80170ee:	d108      	bne.n	8017102 <MAILBOX_Poll+0x22>

    /* USER CODE BEGIN PRE_NEW_MSG_CM7 */

    /* USER CODE END PRE_NEW_MSG_CM7 */

    rproc_virtio_notified(vdev, VRING0_ID);
 80170f0:	2100      	movs	r1, #0
 80170f2:	6878      	ldr	r0, [r7, #4]
 80170f4:	f7fd fb83 	bl	80147fe <rproc_virtio_notified>

    /* USER CODE BEGIN POST_NEW_MSG_CM4 */

    /* USER CODE END POST_NEW_MSG_CM4 */
#endif
    msg_received = RX_NO_MSG;
 80170f8:	4b05      	ldr	r3, [pc, #20]	; (8017110 <MAILBOX_Poll+0x30>)
 80170fa:	2200      	movs	r2, #0
 80170fc:	601a      	str	r2, [r3, #0]
    return 0;
 80170fe:	2300      	movs	r3, #0
 8017100:	e001      	b.n	8017106 <MAILBOX_Poll+0x26>
  }

    /* USER CODE BEGIN NO_MSG */

    /* USER CODE END NO_MSG */
  return -EAGAIN;
 8017102:	f06f 030a 	mvn.w	r3, #10
}
 8017106:	4618      	mov	r0, r3
 8017108:	3708      	adds	r7, #8
 801710a:	46bd      	mov	sp, r7
 801710c:	bd80      	pop	{r7, pc}
 801710e:	bf00      	nop
 8017110:	2400aa80 	.word	0x2400aa80

08017114 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
 8017114:	b580      	push	{r7, lr}
 8017116:	b082      	sub	sp, #8
 8017118:	af00      	add	r7, sp, #0
 801711a:	6078      	str	r0, [r7, #4]
 801711c:	6039      	str	r1, [r7, #0]
#ifdef CORE_CM7

  /* USER CODE BEGIN  PRE_MAILBOX_NOTIFY_CM7 */

  /* USER CODE END PRE_MAILBOX_NOTIFY_CM7 */
  HAL_HSEM_FastTake(HSEM_ID_0);
 801711e:	2000      	movs	r0, #0
 8017120:	f7ef fec0 	bl	8006ea4 <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_0,0);
 8017124:	2100      	movs	r1, #0
 8017126:	2000      	movs	r0, #0
 8017128:	f7ef fed6 	bl	8006ed8 <HAL_HSEM_Release>
  /* USER CODE BEGIN  POST_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END POST_MAILBOX_NOTIFY_CM4 */
#endif

  return 0;
 801712c:	2300      	movs	r3, #0
}
 801712e:	4618      	mov	r0, r3
 8017130:	3708      	adds	r7, #8
 8017132:	46bd      	mov	sp, r7
 8017134:	bd80      	pop	{r7, pc}

08017136 <is_rpmsg_ept_ready>:
 *
 * Returns 1 if the rpmsg endpoint has both local addr and destination
 * addr set, 0 otherwise
 */
static inline unsigned int is_rpmsg_ept_ready(struct rpmsg_endpoint *ept)
{
 8017136:	b480      	push	{r7}
 8017138:	b083      	sub	sp, #12
 801713a:	af00      	add	r7, sp, #0
 801713c:	6078      	str	r0, [r7, #4]
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017146:	d006      	beq.n	8017156 <is_rpmsg_ept_ready+0x20>
		ept->addr != RPMSG_ADDR_ANY);
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 801714c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017150:	d001      	beq.n	8017156 <is_rpmsg_ept_ready+0x20>
 8017152:	2301      	movs	r3, #1
 8017154:	e000      	b.n	8017158 <is_rpmsg_ept_ready+0x22>
 8017156:	2300      	movs	r3, #0
}
 8017158:	4618      	mov	r0, r3
 801715a:	370c      	adds	r7, #12
 801715c:	46bd      	mov	sp, r7
 801715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017162:	4770      	bx	lr

08017164 <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 8017164:	b480      	push	{r7}
 8017166:	b083      	sub	sp, #12
 8017168:	af00      	add	r7, sp, #0
 801716a:	6078      	str	r0, [r7, #4]
 801716c:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
 8017172:	683a      	ldr	r2, [r7, #0]
 8017174:	429a      	cmp	r2, r3
 8017176:	d209      	bcs.n	801718c <metal_device_io_region+0x28>
 8017178:	683a      	ldr	r2, [r7, #0]
 801717a:	4613      	mov	r3, r2
 801717c:	005b      	lsls	r3, r3, #1
 801717e:	4413      	add	r3, r2
 8017180:	011b      	lsls	r3, r3, #4
 8017182:	3308      	adds	r3, #8
 8017184:	687a      	ldr	r2, [r7, #4]
 8017186:	4413      	add	r3, r2
 8017188:	3304      	adds	r3, #4
 801718a:	e000      	b.n	801718e <metal_device_io_region+0x2a>
 801718c:	2300      	movs	r3, #0
}
 801718e:	4618      	mov	r0, r3
 8017190:	370c      	adds	r7, #12
 8017192:	46bd      	mov	sp, r7
 8017194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017198:	4770      	bx	lr
	...

0801719c <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
 801719c:	b590      	push	{r4, r7, lr}
 801719e:	b08d      	sub	sp, #52	; 0x34
 80171a0:	af04      	add	r7, sp, #16
 80171a2:	6078      	str	r0, [r7, #4]
  int status = 0;
 80171a4:	2300      	movs	r3, #0
 80171a6:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
 80171a8:	2300      	movs	r3, #0
 80171aa:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 80171ac:	4a41      	ldr	r2, [pc, #260]	; (80172b4 <OPENAMP_shmem_init+0x118>)
 80171ae:	f107 0310 	add.w	r3, r7, #16
 80171b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80171b6:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
 80171ba:	2300      	movs	r3, #0
 80171bc:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
 80171be:	2300      	movs	r3, #0
 80171c0:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
 80171c2:	f107 0310 	add.w	r3, r7, #16
 80171c6:	4618      	mov	r0, r3
 80171c8:	f7fc fdcc 	bl	8013d64 <metal_init>

  status = metal_register_generic_device(&shm_device);
 80171cc:	483a      	ldr	r0, [pc, #232]	; (80172b8 <OPENAMP_shmem_init+0x11c>)
 80171ce:	f7fc fc71 	bl	8013ab4 <metal_register_generic_device>
 80171d2:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 80171d4:	69fb      	ldr	r3, [r7, #28]
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	d001      	beq.n	80171de <OPENAMP_shmem_init+0x42>
    return status;
 80171da:	69fb      	ldr	r3, [r7, #28]
 80171dc:	e066      	b.n	80172ac <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 80171de:	f107 0318 	add.w	r3, r7, #24
 80171e2:	461a      	mov	r2, r3
 80171e4:	4935      	ldr	r1, [pc, #212]	; (80172bc <OPENAMP_shmem_init+0x120>)
 80171e6:	4836      	ldr	r0, [pc, #216]	; (80172c0 <OPENAMP_shmem_init+0x124>)
 80171e8:	f7fc fc26 	bl	8013a38 <metal_device_open>
 80171ec:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 80171ee:	69fb      	ldr	r3, [r7, #28]
 80171f0:	2b00      	cmp	r3, #0
 80171f2:	d001      	beq.n	80171f8 <OPENAMP_shmem_init+0x5c>
    return status;
 80171f4:	69fb      	ldr	r3, [r7, #28]
 80171f6:	e059      	b.n	80172ac <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
 80171f8:	4a32      	ldr	r2, [pc, #200]	; (80172c4 <OPENAMP_shmem_init+0x128>)
 80171fa:	4b33      	ldr	r3, [pc, #204]	; (80172c8 <OPENAMP_shmem_init+0x12c>)
 80171fc:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 80171fe:	69bb      	ldr	r3, [r7, #24]
 8017200:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, -1, 0, NULL);
 8017204:	4a31      	ldr	r2, [pc, #196]	; (80172cc <OPENAMP_shmem_init+0x130>)
 8017206:	4b2f      	ldr	r3, [pc, #188]	; (80172c4 <OPENAMP_shmem_init+0x128>)
 8017208:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 801720a:	461a      	mov	r2, r3
 801720c:	2300      	movs	r3, #0
 801720e:	9302      	str	r3, [sp, #8]
 8017210:	2300      	movs	r3, #0
 8017212:	9301      	str	r3, [sp, #4]
 8017214:	f04f 33ff 	mov.w	r3, #4294967295
 8017218:	9300      	str	r3, [sp, #0]
 801721a:	4613      	mov	r3, r2
 801721c:	4a2a      	ldr	r2, [pc, #168]	; (80172c8 <OPENAMP_shmem_init+0x12c>)
 801721e:	4929      	ldr	r1, [pc, #164]	; (80172c4 <OPENAMP_shmem_init+0x128>)
 8017220:	f7fc fded 	bl	8013dfe <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
 8017224:	69bb      	ldr	r3, [r7, #24]
 8017226:	2100      	movs	r1, #0
 8017228:	4618      	mov	r0, r3
 801722a:	f7ff ff9b 	bl	8017164 <metal_device_io_region>
 801722e:	4603      	mov	r3, r0
 8017230:	4a27      	ldr	r2, [pc, #156]	; (80172d0 <OPENAMP_shmem_init+0x134>)
 8017232:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
 8017234:	4b26      	ldr	r3, [pc, #152]	; (80172d0 <OPENAMP_shmem_init+0x134>)
 8017236:	681b      	ldr	r3, [r3, #0]
 8017238:	2b00      	cmp	r3, #0
 801723a:	d102      	bne.n	8017242 <OPENAMP_shmem_init+0xa6>
    return -1;
 801723c:	f04f 33ff 	mov.w	r3, #4294967295
 8017240:	e034      	b.n	80172ac <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
 8017242:	f107 0208 	add.w	r2, r7, #8
 8017246:	f107 030c 	add.w	r3, r7, #12
 801724a:	4619      	mov	r1, r3
 801724c:	6878      	ldr	r0, [r7, #4]
 801724e:	f000 f91d 	bl	801748c <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
 8017252:	68fb      	ldr	r3, [r7, #12]
 8017254:	4a1f      	ldr	r2, [pc, #124]	; (80172d4 <OPENAMP_shmem_init+0x138>)
 8017256:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
 8017258:	4b1e      	ldr	r3, [pc, #120]	; (80172d4 <OPENAMP_shmem_init+0x138>)
 801725a:	681b      	ldr	r3, [r3, #0]
 801725c:	2b00      	cmp	r3, #0
 801725e:	d102      	bne.n	8017266 <OPENAMP_shmem_init+0xca>
  {
    return -1;
 8017260:	f04f 33ff 	mov.w	r3, #4294967295
 8017264:	e022      	b.n	80172ac <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
 8017266:	69bb      	ldr	r3, [r7, #24]
 8017268:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 801726c:	4b19      	ldr	r3, [pc, #100]	; (80172d4 <OPENAMP_shmem_init+0x138>)
 801726e:	6819      	ldr	r1, [r3, #0]
 8017270:	4b18      	ldr	r3, [pc, #96]	; (80172d4 <OPENAMP_shmem_init+0x138>)
 8017272:	681a      	ldr	r2, [r3, #0]
 8017274:	68bb      	ldr	r3, [r7, #8]
 8017276:	461c      	mov	r4, r3
 8017278:	2300      	movs	r3, #0
 801727a:	9302      	str	r3, [sp, #8]
 801727c:	2300      	movs	r3, #0
 801727e:	9301      	str	r3, [sp, #4]
 8017280:	f04f 33ff 	mov.w	r3, #4294967295
 8017284:	9300      	str	r3, [sp, #0]
 8017286:	4623      	mov	r3, r4
 8017288:	f7fc fdb9 	bl	8013dfe <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
 801728c:	69bb      	ldr	r3, [r7, #24]
 801728e:	2101      	movs	r1, #1
 8017290:	4618      	mov	r0, r3
 8017292:	f7ff ff67 	bl	8017164 <metal_device_io_region>
 8017296:	4603      	mov	r3, r0
 8017298:	4a0f      	ldr	r2, [pc, #60]	; (80172d8 <OPENAMP_shmem_init+0x13c>)
 801729a:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
 801729c:	4b0e      	ldr	r3, [pc, #56]	; (80172d8 <OPENAMP_shmem_init+0x13c>)
 801729e:	681b      	ldr	r3, [r3, #0]
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d102      	bne.n	80172aa <OPENAMP_shmem_init+0x10e>
    return -1;
 80172a4:	f04f 33ff 	mov.w	r3, #4294967295
 80172a8:	e000      	b.n	80172ac <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
 80172aa:	2300      	movs	r3, #0
}
 80172ac:	4618      	mov	r0, r3
 80172ae:	3724      	adds	r7, #36	; 0x24
 80172b0:	46bd      	mov	sp, r7
 80172b2:	bd90      	pop	{r4, r7, pc}
 80172b4:	0801f978 	.word	0x0801f978
 80172b8:	2400a090 	.word	0x2400a090
 80172bc:	0801f964 	.word	0x0801f964
 80172c0:	0801f970 	.word	0x0801f970
 80172c4:	38000400 	.word	0x38000400
 80172c8:	2400ab14 	.word	0x2400ab14
 80172cc:	38010000 	.word	0x38010000
 80172d0:	2400aa84 	.word	0x2400aa84
 80172d4:	2400aa8c 	.word	0x2400aa8c
 80172d8:	2400aa88 	.word	0x2400aa88

080172dc <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
 80172dc:	b590      	push	{r4, r7, lr}
 80172de:	b08b      	sub	sp, #44	; 0x2c
 80172e0:	af04      	add	r7, sp, #16
 80172e2:	6078      	str	r0, [r7, #4]
 80172e4:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
 80172e6:	2300      	movs	r3, #0
 80172e8:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
 80172ea:	2300      	movs	r3, #0
 80172ec:	613b      	str	r3, [r7, #16]
  int status = 0;
 80172ee:	2300      	movs	r3, #0
 80172f0:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
 80172f2:	f7ff fed9 	bl	80170a8 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
 80172f6:	6878      	ldr	r0, [r7, #4]
 80172f8:	f7ff ff50 	bl	801719c <OPENAMP_shmem_init>
 80172fc:	60f8      	str	r0, [r7, #12]
  if(status)
 80172fe:	68fb      	ldr	r3, [r7, #12]
 8017300:	2b00      	cmp	r3, #0
 8017302:	d001      	beq.n	8017308 <MX_OPENAMP_Init+0x2c>
  {
    return status;
 8017304:	68fb      	ldr	r3, [r7, #12]
 8017306:	e06a      	b.n	80173de <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
 8017308:	6878      	ldr	r0, [r7, #4]
 801730a:	4b37      	ldr	r3, [pc, #220]	; (80173e8 <MX_OPENAMP_Init+0x10c>)
 801730c:	681b      	ldr	r3, [r3, #0]
 801730e:	f103 0218 	add.w	r2, r3, #24
 8017312:	4b36      	ldr	r3, [pc, #216]	; (80173ec <MX_OPENAMP_Init+0x110>)
 8017314:	681b      	ldr	r3, [r3, #0]
 8017316:	2100      	movs	r1, #0
 8017318:	9102      	str	r1, [sp, #8]
 801731a:	4935      	ldr	r1, [pc, #212]	; (80173f0 <MX_OPENAMP_Init+0x114>)
 801731c:	9101      	str	r1, [sp, #4]
 801731e:	2100      	movs	r1, #0
 8017320:	9100      	str	r1, [sp, #0]
 8017322:	21ff      	movs	r1, #255	; 0xff
 8017324:	f7fd f98c 	bl	8014640 <rproc_virtio_create_vdev>
 8017328:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
 801732a:	693b      	ldr	r3, [r7, #16]
 801732c:	2b00      	cmp	r3, #0
 801732e:	d102      	bne.n	8017336 <MX_OPENAMP_Init+0x5a>
  {
    return -1;
 8017330:	f04f 33ff 	mov.w	r3, #4294967295
 8017334:	e053      	b.n	80173de <MX_OPENAMP_Init+0x102>
  }

  rproc_virtio_wait_remote_ready(vdev);
 8017336:	6938      	ldr	r0, [r7, #16]
 8017338:	f7fd fa9d 	bl	8014876 <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
 801733c:	4b2a      	ldr	r3, [pc, #168]	; (80173e8 <MX_OPENAMP_Init+0x10c>)
 801733e:	681b      	ldr	r3, [r3, #0]
 8017340:	3334      	adds	r3, #52	; 0x34
 8017342:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8017344:	697b      	ldr	r3, [r7, #20]
 8017346:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 8017348:	697b      	ldr	r3, [r7, #20]
 801734a:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 801734c:	461c      	mov	r4, r3
 801734e:	4b29      	ldr	r3, [pc, #164]	; (80173f4 <MX_OPENAMP_Init+0x118>)
 8017350:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 8017352:	697a      	ldr	r2, [r7, #20]
 8017354:	6892      	ldr	r2, [r2, #8]
 8017356:	6979      	ldr	r1, [r7, #20]
 8017358:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 801735a:	9102      	str	r1, [sp, #8]
 801735c:	9201      	str	r2, [sp, #4]
 801735e:	9300      	str	r3, [sp, #0]
 8017360:	4623      	mov	r3, r4
 8017362:	4602      	mov	r2, r0
 8017364:	2100      	movs	r1, #0
 8017366:	6938      	ldr	r0, [r7, #16]
 8017368:	f7fd fa18 	bl	801479c <rproc_virtio_init_vring>
 801736c:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 801736e:	68fb      	ldr	r3, [r7, #12]
 8017370:	2b00      	cmp	r3, #0
 8017372:	d001      	beq.n	8017378 <MX_OPENAMP_Init+0x9c>
  {
    return status;
 8017374:	68fb      	ldr	r3, [r7, #12]
 8017376:	e032      	b.n	80173de <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
 8017378:	4b1b      	ldr	r3, [pc, #108]	; (80173e8 <MX_OPENAMP_Init+0x10c>)
 801737a:	681b      	ldr	r3, [r3, #0]
 801737c:	3348      	adds	r3, #72	; 0x48
 801737e:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8017380:	697b      	ldr	r3, [r7, #20]
 8017382:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 8017384:	697b      	ldr	r3, [r7, #20]
 8017386:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8017388:	461c      	mov	r4, r3
 801738a:	4b1a      	ldr	r3, [pc, #104]	; (80173f4 <MX_OPENAMP_Init+0x118>)
 801738c:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 801738e:	697a      	ldr	r2, [r7, #20]
 8017390:	6892      	ldr	r2, [r2, #8]
 8017392:	6979      	ldr	r1, [r7, #20]
 8017394:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8017396:	9102      	str	r1, [sp, #8]
 8017398:	9201      	str	r2, [sp, #4]
 801739a:	9300      	str	r3, [sp, #0]
 801739c:	4623      	mov	r3, r4
 801739e:	4602      	mov	r2, r0
 80173a0:	2101      	movs	r1, #1
 80173a2:	6938      	ldr	r0, [r7, #16]
 80173a4:	f7fd f9fa 	bl	801479c <rproc_virtio_init_vring>
 80173a8:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 80173aa:	68fb      	ldr	r3, [r7, #12]
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d001      	beq.n	80173b4 <MX_OPENAMP_Init+0xd8>
  {
    return status;
 80173b0:	68fb      	ldr	r3, [r7, #12]
 80173b2:	e014      	b.n	80173de <MX_OPENAMP_Init+0x102>

  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 80173b4:	4b10      	ldr	r3, [pc, #64]	; (80173f8 <MX_OPENAMP_Init+0x11c>)
 80173b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80173ba:	4619      	mov	r1, r3
                             (size_t)SHM_SIZE);
 80173bc:	4a0f      	ldr	r2, [pc, #60]	; (80173fc <MX_OPENAMP_Init+0x120>)
 80173be:	4b0e      	ldr	r3, [pc, #56]	; (80173f8 <MX_OPENAMP_Init+0x11c>)
 80173c0:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 80173c2:	461a      	mov	r2, r3
 80173c4:	480e      	ldr	r0, [pc, #56]	; (8017400 <MX_OPENAMP_Init+0x124>)
 80173c6:	f7fd fec7 	bl	8015158 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
 80173ca:	4b0a      	ldr	r3, [pc, #40]	; (80173f4 <MX_OPENAMP_Init+0x118>)
 80173cc:	681b      	ldr	r3, [r3, #0]
 80173ce:	4a0c      	ldr	r2, [pc, #48]	; (8017400 <MX_OPENAMP_Init+0x124>)
 80173d0:	9200      	str	r2, [sp, #0]
 80173d2:	683a      	ldr	r2, [r7, #0]
 80173d4:	6939      	ldr	r1, [r7, #16]
 80173d6:	480b      	ldr	r0, [pc, #44]	; (8017404 <MX_OPENAMP_Init+0x128>)
 80173d8:	f7fe f92e 	bl	8015638 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
 80173dc:	2300      	movs	r3, #0
}
 80173de:	4618      	mov	r0, r3
 80173e0:	371c      	adds	r7, #28
 80173e2:	46bd      	mov	sp, r7
 80173e4:	bd90      	pop	{r4, r7, pc}
 80173e6:	bf00      	nop
 80173e8:	2400aa8c 	.word	0x2400aa8c
 80173ec:	2400aa88 	.word	0x2400aa88
 80173f0:	08017115 	.word	0x08017115
 80173f4:	2400aa84 	.word	0x2400aa84
 80173f8:	38000400 	.word	0x38000400
 80173fc:	38010000 	.word	0x38010000
 8017400:	2400aa90 	.word	0x2400aa90
 8017404:	2400aa9c 	.word	0x2400aa9c

08017408 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
 8017408:	b580      	push	{r7, lr}
 801740a:	b08a      	sub	sp, #40	; 0x28
 801740c:	af04      	add	r7, sp, #16
 801740e:	60f8      	str	r0, [r7, #12]
 8017410:	60b9      	str	r1, [r7, #8]
 8017412:	607a      	str	r2, [r7, #4]
 8017414:	603b      	str	r3, [r7, #0]
  int ret = 0;
 8017416:	2300      	movs	r3, #0
 8017418:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
 801741a:	6a3b      	ldr	r3, [r7, #32]
 801741c:	9302      	str	r3, [sp, #8]
 801741e:	683b      	ldr	r3, [r7, #0]
 8017420:	9301      	str	r3, [sp, #4]
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	9300      	str	r3, [sp, #0]
 8017426:	f04f 33ff 	mov.w	r3, #4294967295
 801742a:	68ba      	ldr	r2, [r7, #8]
 801742c:	4904      	ldr	r1, [pc, #16]	; (8017440 <OPENAMP_create_endpoint+0x38>)
 801742e:	68f8      	ldr	r0, [r7, #12]
 8017430:	f7fd fcae 	bl	8014d90 <rpmsg_create_ept>
 8017434:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
 8017436:	697b      	ldr	r3, [r7, #20]
}
 8017438:	4618      	mov	r0, r3
 801743a:	3718      	adds	r7, #24
 801743c:	46bd      	mov	sp, r7
 801743e:	bd80      	pop	{r7, pc}
 8017440:	2400aa9c 	.word	0x2400aa9c

08017444 <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
 8017444:	b580      	push	{r7, lr}
 8017446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
 8017448:	4b03      	ldr	r3, [pc, #12]	; (8017458 <OPENAMP_check_for_message+0x14>)
 801744a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801744c:	4618      	mov	r0, r3
 801744e:	f7ff fe47 	bl	80170e0 <MAILBOX_Poll>
}
 8017452:	bf00      	nop
 8017454:	bd80      	pop	{r7, pc}
 8017456:	bf00      	nop
 8017458:	2400aa9c 	.word	0x2400aa9c

0801745c <OPENAMP_Wait_EndPointready>:

void OPENAMP_Wait_EndPointready(struct rpmsg_endpoint *rp_ept)
{
 801745c:	b580      	push	{r7, lr}
 801745e:	b082      	sub	sp, #8
 8017460:	af00      	add	r7, sp, #0
 8017462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EP_READY */

  /* USER CODE END EP_READY */

  while(!is_rpmsg_ept_ready(rp_ept))
 8017464:	e004      	b.n	8017470 <OPENAMP_Wait_EndPointready+0x14>
  {
    /* USER CODE BEGIN 0 */

    /* USER CODE END 0 */
      MAILBOX_Poll(rvdev.vdev);
 8017466:	4b08      	ldr	r3, [pc, #32]	; (8017488 <OPENAMP_Wait_EndPointready+0x2c>)
 8017468:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801746a:	4618      	mov	r0, r3
 801746c:	f7ff fe38 	bl	80170e0 <MAILBOX_Poll>
  while(!is_rpmsg_ept_ready(rp_ept))
 8017470:	6878      	ldr	r0, [r7, #4]
 8017472:	f7ff fe60 	bl	8017136 <is_rpmsg_ept_ready>
 8017476:	4603      	mov	r3, r0
 8017478:	2b00      	cmp	r3, #0
 801747a:	d0f4      	beq.n	8017466 <OPENAMP_Wait_EndPointready+0xa>

    /* USER CODE BEGIN 1 */

    /* USER CODE END 1 */
  }
}
 801747c:	bf00      	nop
 801747e:	bf00      	nop
 8017480:	3708      	adds	r7, #8
 8017482:	46bd      	mov	sp, r7
 8017484:	bd80      	pop	{r7, pc}
 8017486:	bf00      	nop
 8017488:	2400aa9c 	.word	0x2400aa9c

0801748c <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
 801748c:	b580      	push	{r7, lr}
 801748e:	b084      	sub	sp, #16
 8017490:	af00      	add	r7, sp, #0
 8017492:	60f8      	str	r0, [r7, #12]
 8017494:	60b9      	str	r1, [r7, #8]
 8017496:	607a      	str	r2, [r7, #4]

    /*
     * Currently the GCC linker doesn't initialize the resource_table global variable at startup
     * it is done here by the master application.
     */
	memset(&resource_table, '\0', sizeof(struct shared_resource_table));
 8017498:	228c      	movs	r2, #140	; 0x8c
 801749a:	2100      	movs	r1, #0
 801749c:	481e      	ldr	r0, [pc, #120]	; (8017518 <resource_table_init+0x8c>)
 801749e:	f003 f9b7 	bl	801a810 <memset>
	resource_table.num = 1;
 80174a2:	4b1d      	ldr	r3, [pc, #116]	; (8017518 <resource_table_init+0x8c>)
 80174a4:	2201      	movs	r2, #1
 80174a6:	605a      	str	r2, [r3, #4]
	resource_table.version = 1;
 80174a8:	4b1b      	ldr	r3, [pc, #108]	; (8017518 <resource_table_init+0x8c>)
 80174aa:	2201      	movs	r2, #1
 80174ac:	601a      	str	r2, [r3, #0]
	resource_table.offset[0] = offsetof(struct shared_resource_table, vdev);
 80174ae:	4b1a      	ldr	r3, [pc, #104]	; (8017518 <resource_table_init+0x8c>)
 80174b0:	2218      	movs	r2, #24
 80174b2:	611a      	str	r2, [r3, #16]

	resource_table.vring0.da = VRING_TX_ADDRESS;
 80174b4:	4b19      	ldr	r3, [pc, #100]	; (801751c <resource_table_init+0x90>)
 80174b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80174ba:	4a17      	ldr	r2, [pc, #92]	; (8017518 <resource_table_init+0x8c>)
 80174bc:	6353      	str	r3, [r2, #52]	; 0x34
	resource_table.vring0.align = VRING_ALIGNMENT;
 80174be:	4b16      	ldr	r3, [pc, #88]	; (8017518 <resource_table_init+0x8c>)
 80174c0:	2204      	movs	r2, #4
 80174c2:	639a      	str	r2, [r3, #56]	; 0x38
	resource_table.vring0.num = VRING_NUM_BUFFS;
 80174c4:	4b14      	ldr	r3, [pc, #80]	; (8017518 <resource_table_init+0x8c>)
 80174c6:	2204      	movs	r2, #4
 80174c8:	63da      	str	r2, [r3, #60]	; 0x3c
	resource_table.vring0.notifyid = VRING0_ID;
 80174ca:	4b13      	ldr	r3, [pc, #76]	; (8017518 <resource_table_init+0x8c>)
 80174cc:	2200      	movs	r2, #0
 80174ce:	641a      	str	r2, [r3, #64]	; 0x40

	resource_table.vring1.da = VRING_RX_ADDRESS;
 80174d0:	4a12      	ldr	r2, [pc, #72]	; (801751c <resource_table_init+0x90>)
 80174d2:	4b11      	ldr	r3, [pc, #68]	; (8017518 <resource_table_init+0x8c>)
 80174d4:	649a      	str	r2, [r3, #72]	; 0x48
	resource_table.vring1.align = VRING_ALIGNMENT;
 80174d6:	4b10      	ldr	r3, [pc, #64]	; (8017518 <resource_table_init+0x8c>)
 80174d8:	2204      	movs	r2, #4
 80174da:	64da      	str	r2, [r3, #76]	; 0x4c
	resource_table.vring1.num = VRING_NUM_BUFFS;
 80174dc:	4b0e      	ldr	r3, [pc, #56]	; (8017518 <resource_table_init+0x8c>)
 80174de:	2204      	movs	r2, #4
 80174e0:	651a      	str	r2, [r3, #80]	; 0x50
	resource_table.vring1.notifyid = VRING1_ID;
 80174e2:	4b0d      	ldr	r3, [pc, #52]	; (8017518 <resource_table_init+0x8c>)
 80174e4:	2201      	movs	r2, #1
 80174e6:	655a      	str	r2, [r3, #84]	; 0x54

	resource_table.vdev.type = RSC_VDEV;
 80174e8:	4b0b      	ldr	r3, [pc, #44]	; (8017518 <resource_table_init+0x8c>)
 80174ea:	2203      	movs	r2, #3
 80174ec:	619a      	str	r2, [r3, #24]
	resource_table.vdev.id = VIRTIO_ID_RPMSG_;
 80174ee:	4b0a      	ldr	r3, [pc, #40]	; (8017518 <resource_table_init+0x8c>)
 80174f0:	2207      	movs	r2, #7
 80174f2:	61da      	str	r2, [r3, #28]
	resource_table.vdev.num_of_vrings=VRING_COUNT;
 80174f4:	4b08      	ldr	r3, [pc, #32]	; (8017518 <resource_table_init+0x8c>)
 80174f6:	2202      	movs	r2, #2
 80174f8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	resource_table.vdev.dfeatures = RPMSG_IPU_C0_FEATURES;
 80174fc:	4b06      	ldr	r3, [pc, #24]	; (8017518 <resource_table_init+0x8c>)
 80174fe:	2201      	movs	r2, #1
 8017500:	625a      	str	r2, [r3, #36]	; 0x24
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	228c      	movs	r2, #140	; 0x8c
 8017506:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
 8017508:	68bb      	ldr	r3, [r7, #8]
 801750a:	4a03      	ldr	r2, [pc, #12]	; (8017518 <resource_table_init+0x8c>)
 801750c:	601a      	str	r2, [r3, #0]
}
 801750e:	bf00      	nop
 8017510:	3710      	adds	r7, #16
 8017512:	46bd      	mov	sp, r7
 8017514:	bd80      	pop	{r7, pc}
 8017516:	bf00      	nop
 8017518:	38000000 	.word	0x38000000
 801751c:	38000400 	.word	0x38000400

08017520 <createEmptyFrame>:
uint8_t numberOfDisplayedSafeAirIcons = 0;

uint32_t LCDArraySize = 40960;

void createEmptyFrame(bool isMenuFrame)
{
 8017520:	b580      	push	{r7, lr}
 8017522:	b084      	sub	sp, #16
 8017524:	af00      	add	r7, sp, #0
 8017526:	4603      	mov	r3, r0
 8017528:	71fb      	strb	r3, [r7, #7]
	if (!isMenuFrame)
 801752a:	79fb      	ldrb	r3, [r7, #7]
 801752c:	f083 0301 	eor.w	r3, r3, #1
 8017530:	b2db      	uxtb	r3, r3
 8017532:	2b00      	cmp	r3, #0
 8017534:	d024      	beq.n	8017580 <createEmptyFrame+0x60>
	{
		memset(nextFrameToDraw,0x00,LCDArraySize);
 8017536:	4b19      	ldr	r3, [pc, #100]	; (801759c <createEmptyFrame+0x7c>)
 8017538:	681b      	ldr	r3, [r3, #0]
 801753a:	461a      	mov	r2, r3
 801753c:	2100      	movs	r1, #0
 801753e:	4818      	ldr	r0, [pc, #96]	; (80175a0 <createEmptyFrame+0x80>)
 8017540:	f003 f966 	bl	801a810 <memset>

		for (int i = 0 ; i < (LCDArraySize - SCREEN_WIDTH * STATUSBAR_HEIGHT * 2) /2 ; i++)
 8017544:	2300      	movs	r3, #0
 8017546:	60fb      	str	r3, [r7, #12]
 8017548:	e011      	b.n	801756e <createEmptyFrame+0x4e>
		{
			nextFrameToDraw[(i + SCREEN_WIDTH * STATUSBAR_HEIGHT) * 2] = BACKGROUND_HIGH_BYTE;
 801754a:	68fb      	ldr	r3, [r7, #12]
 801754c:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 8017550:	005b      	lsls	r3, r3, #1
 8017552:	4a13      	ldr	r2, [pc, #76]	; (80175a0 <createEmptyFrame+0x80>)
 8017554:	21ff      	movs	r1, #255	; 0xff
 8017556:	54d1      	strb	r1, [r2, r3]
			nextFrameToDraw[(i + SCREEN_WIDTH * STATUSBAR_HEIGHT) * 2 + 1] = BACKGROUND_LOW_BYTE;
 8017558:	68fb      	ldr	r3, [r7, #12]
 801755a:	f503 6348 	add.w	r3, r3, #3200	; 0xc80
 801755e:	005b      	lsls	r3, r3, #1
 8017560:	3301      	adds	r3, #1
 8017562:	4a0f      	ldr	r2, [pc, #60]	; (80175a0 <createEmptyFrame+0x80>)
 8017564:	21ff      	movs	r1, #255	; 0xff
 8017566:	54d1      	strb	r1, [r2, r3]
		for (int i = 0 ; i < (LCDArraySize - SCREEN_WIDTH * STATUSBAR_HEIGHT * 2) /2 ; i++)
 8017568:	68fb      	ldr	r3, [r7, #12]
 801756a:	3301      	adds	r3, #1
 801756c:	60fb      	str	r3, [r7, #12]
 801756e:	4b0b      	ldr	r3, [pc, #44]	; (801759c <createEmptyFrame+0x7c>)
 8017570:	681b      	ldr	r3, [r3, #0]
 8017572:	f5a3 53c8 	sub.w	r3, r3, #6400	; 0x1900
 8017576:	085a      	lsrs	r2, r3, #1
 8017578:	68fb      	ldr	r3, [r7, #12]
 801757a:	429a      	cmp	r2, r3
 801757c:	d8e5      	bhi.n	801754a <createEmptyFrame+0x2a>
	}
	else if (isMenuFrame)
	{
		memset(nextFrameToDraw,0xFF,LCDArraySize);
	}
}
 801757e:	e009      	b.n	8017594 <createEmptyFrame+0x74>
	else if (isMenuFrame)
 8017580:	79fb      	ldrb	r3, [r7, #7]
 8017582:	2b00      	cmp	r3, #0
 8017584:	d006      	beq.n	8017594 <createEmptyFrame+0x74>
		memset(nextFrameToDraw,0xFF,LCDArraySize);
 8017586:	4b05      	ldr	r3, [pc, #20]	; (801759c <createEmptyFrame+0x7c>)
 8017588:	681b      	ldr	r3, [r3, #0]
 801758a:	461a      	mov	r2, r3
 801758c:	21ff      	movs	r1, #255	; 0xff
 801758e:	4804      	ldr	r0, [pc, #16]	; (80175a0 <createEmptyFrame+0x80>)
 8017590:	f003 f93e 	bl	801a810 <memset>
}
 8017594:	bf00      	nop
 8017596:	3710      	adds	r7, #16
 8017598:	46bd      	mov	sp, r7
 801759a:	bd80      	pop	{r7, pc}
 801759c:	2400a10c 	.word	0x2400a10c
 80175a0:	24000090 	.word	0x24000090

080175a4 <displayNextFrame>:

void displayNextFrame(void)
{
 80175a4:	b580      	push	{r7, lr}
 80175a6:	af00      	add	r7, sp, #0
//	LCD_1IN8_SetCursor(0, 0);
	if (HAL_GetTick() - lastFrameDisplayed > 30)
 80175a8:	f7eb f840 	bl	800262c <HAL_GetTick>
 80175ac:	4602      	mov	r2, r0
 80175ae:	4b0a      	ldr	r3, [pc, #40]	; (80175d8 <displayNextFrame+0x34>)
 80175b0:	681b      	ldr	r3, [r3, #0]
 80175b2:	1ad3      	subs	r3, r2, r3
 80175b4:	2b1e      	cmp	r3, #30
 80175b6:	d90d      	bls.n	80175d4 <displayNextFrame+0x30>
	{
		HAL_SPI_Transmit(&DEV_SPI, (uint8_t *)nextFrameToDraw, LCDArraySize, 1500);
 80175b8:	4b08      	ldr	r3, [pc, #32]	; (80175dc <displayNextFrame+0x38>)
 80175ba:	681b      	ldr	r3, [r3, #0]
 80175bc:	b29a      	uxth	r2, r3
 80175be:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80175c2:	4907      	ldr	r1, [pc, #28]	; (80175e0 <displayNextFrame+0x3c>)
 80175c4:	4807      	ldr	r0, [pc, #28]	; (80175e4 <displayNextFrame+0x40>)
 80175c6:	f7f2 fa73 	bl	8009ab0 <HAL_SPI_Transmit>
//		createEmptyFrame();
		lastFrameDisplayed = HAL_GetTick();
 80175ca:	f7eb f82f 	bl	800262c <HAL_GetTick>
 80175ce:	4603      	mov	r3, r0
 80175d0:	4a01      	ldr	r2, [pc, #4]	; (80175d8 <displayNextFrame+0x34>)
 80175d2:	6013      	str	r3, [r2, #0]
	}
}
 80175d4:	bf00      	nop
 80175d6:	bd80      	pop	{r7, pc}
 80175d8:	2400aa74 	.word	0x2400aa74
 80175dc:	2400a10c 	.word	0x2400a10c
 80175e0:	24000090 	.word	0x24000090
 80175e4:	2400ad3c 	.word	0x2400ad3c

080175e8 <updateUint16Item>:
		}
	}
}

void updateUint16Item(MENUDRAWType howToDraw)
{
 80175e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80175ea:	b08f      	sub	sp, #60	; 0x3c
 80175ec:	af04      	add	r7, sp, #16
 80175ee:	4603      	mov	r3, r0
 80175f0:	71fb      	strb	r3, [r7, #7]

	uint8_t MenuRectangleStartX = 0;
 80175f2:	2300      	movs	r3, #0
 80175f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t MenuRectangleStartY = 0;
 80175f8:	2300      	movs	r3, #0
 80175fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MenuRectangleHeight = 0;
 80175fe:	2300      	movs	r3, #0
 8017600:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MenuRectangleWidth = 0;
 8017604:	2300      	movs	r3, #0
 8017606:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t DisplayCenterWidth = 0;
 801760a:	2300      	movs	r3, #0
 801760c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if (isPortrait)
 8017610:	4b0b      	ldr	r3, [pc, #44]	; (8017640 <updateUint16Item+0x58>)
 8017612:	781b      	ldrb	r3, [r3, #0]
 8017614:	2b00      	cmp	r3, #0
 8017616:	d00e      	beq.n	8017636 <updateUint16Item+0x4e>
	{
		MenuRectangleStartX = VerticalMenuRectangleStartX;
 8017618:	2302      	movs	r3, #2
 801761a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		MenuRectangleStartY = VerticalMenuRectangleStartY;
 801761e:	230c      	movs	r3, #12
 8017620:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		MenuRectangleHeight = VerticalMenuRectangleHeight;
 8017624:	230e      	movs	r3, #14
 8017626:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		MenuRectangleWidth = VerticalMenuRectangleWidth;
 801762a:	237c      	movs	r3, #124	; 0x7c
 801762c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		DisplayCenterWidth = VerticalDisplayCenterWidth;
 8017630:	2340      	movs	r3, #64	; 0x40
 8017632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
//		MenuRectangleHeight = HorizontalMenuRectangleHeight;
//		MenuRectangleWidth = HorizontalMenuRectangleWidth;
//		DisplayCenterWidth = HorizontalDisplayCenterWidth;
	}

	for (int i = 0; i < uint16Item.numberOfItemsInPage ; i++)
 8017636:	2300      	movs	r3, #0
 8017638:	61fb      	str	r3, [r7, #28]
 801763a:	f001 baf3 	b.w	8018c24 <updateUint16Item+0x163c>
 801763e:	bf00      	nop
 8017640:	2400008c 	.word	0x2400008c
	{
		if  ( (i < 2) && (howToDraw == FULL) )
 8017644:	69fb      	ldr	r3, [r7, #28]
 8017646:	2b01      	cmp	r3, #1
 8017648:	dc58      	bgt.n	80176fc <updateUint16Item+0x114>
 801764a:	79fb      	ldrb	r3, [r7, #7]
 801764c:	2b02      	cmp	r3, #2
 801764e:	d155      	bne.n	80176fc <updateUint16Item+0x114>
		{
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 8017650:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017654:	b298      	uxth	r0, r3
 8017656:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801765a:	b29a      	uxth	r2, r3
 801765c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017660:	b299      	uxth	r1, r3
 8017662:	69fb      	ldr	r3, [r7, #28]
 8017664:	b29b      	uxth	r3, r3
 8017666:	fb11 f303 	smulbb	r3, r1, r3
 801766a:	b29b      	uxth	r3, r3
 801766c:	4413      	add	r3, r2
 801766e:	b29c      	uxth	r4, r3
 8017670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017674:	b29a      	uxth	r2, r3
 8017676:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801767a:	b29b      	uxth	r3, r3
 801767c:	4413      	add	r3, r2
 801767e:	b29d      	uxth	r5, r3
 8017680:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017684:	b29a      	uxth	r2, r3
 8017686:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801768a:	b299      	uxth	r1, r3
					MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 801768c:	69fb      	ldr	r3, [r7, #28]
 801768e:	3301      	adds	r3, #1
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 8017690:	b29b      	uxth	r3, r3
 8017692:	fb11 f303 	smulbb	r3, r1, r3
 8017696:	b29b      	uxth	r3, r3
 8017698:	4413      	add	r3, r2
 801769a:	b29b      	uxth	r3, r3
 801769c:	2200      	movs	r2, #0
 801769e:	9202      	str	r2, [sp, #8]
 80176a0:	2201      	movs	r2, #1
 80176a2:	9201      	str	r2, [sp, #4]
 80176a4:	2200      	movs	r2, #0
 80176a6:	9200      	str	r2, [sp, #0]
 80176a8:	462a      	mov	r2, r5
 80176aa:	4621      	mov	r1, r4
 80176ac:	f7f7 f8b2 	bl	800e814 <Paint_DrawRectangle>
					BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
			centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 80176b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80176b4:	b29c      	uxth	r4, r3
 80176b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80176ba:	b29a      	uxth	r2, r3
 80176bc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80176c0:	b299      	uxth	r1, r3
 80176c2:	69fb      	ldr	r3, [r7, #28]
 80176c4:	b29b      	uxth	r3, r3
 80176c6:	fb11 f303 	smulbb	r3, r1, r3
 80176ca:	b29b      	uxth	r3, r3
 80176cc:	4413      	add	r3, r2
 80176ce:	b29b      	uxth	r3, r3
 80176d0:	3301      	adds	r3, #1
 80176d2:	b29d      	uxth	r5, r3
					uint16Item.itemsArray[i], BLACK, WHITE, 16, Font12);
 80176d4:	69fb      	ldr	r3, [r7, #28]
 80176d6:	3301      	adds	r3, #1
 80176d8:	011b      	lsls	r3, r3, #4
 80176da:	4a9f      	ldr	r2, [pc, #636]	; (8017958 <updateUint16Item+0x370>)
 80176dc:	441a      	add	r2, r3
			centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 80176de:	499f      	ldr	r1, [pc, #636]	; (801795c <updateUint16Item+0x374>)
 80176e0:	ab02      	add	r3, sp, #8
 80176e2:	c903      	ldmia	r1, {r0, r1}
 80176e4:	e883 0003 	stmia.w	r3, {r0, r1}
 80176e8:	2310      	movs	r3, #16
 80176ea:	9301      	str	r3, [sp, #4]
 80176ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80176f0:	9300      	str	r3, [sp, #0]
 80176f2:	2300      	movs	r3, #0
 80176f4:	4629      	mov	r1, r5
 80176f6:	4620      	mov	r0, r4
 80176f8:	f7fe fe7e 	bl	80163f8 <centeredString>
		}
		if ( (i >= 2) && (i < uint16Item.numberOfItemsInPage - 2) )
 80176fc:	69fb      	ldr	r3, [r7, #28]
 80176fe:	2b01      	cmp	r3, #1
 8017700:	f340 87ed 	ble.w	80186de <updateUint16Item+0x10f6>
 8017704:	4b94      	ldr	r3, [pc, #592]	; (8017958 <updateUint16Item+0x370>)
 8017706:	7bdb      	ldrb	r3, [r3, #15]
 8017708:	3b02      	subs	r3, #2
 801770a:	69fa      	ldr	r2, [r7, #28]
 801770c:	429a      	cmp	r2, r3
 801770e:	f280 87e6 	bge.w	80186de <updateUint16Item+0x10f6>
		{
			if (howToDraw == FULL)
 8017712:	79fb      	ldrb	r3, [r7, #7]
 8017714:	2b02      	cmp	r3, #2
 8017716:	d168      	bne.n	80177ea <updateUint16Item+0x202>
			{
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 8017718:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801771c:	b298      	uxth	r0, r3
 801771e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017722:	b29a      	uxth	r2, r3
 8017724:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017728:	b299      	uxth	r1, r3
 801772a:	69fb      	ldr	r3, [r7, #28]
 801772c:	b29b      	uxth	r3, r3
 801772e:	fb11 f303 	smulbb	r3, r1, r3
 8017732:	b29b      	uxth	r3, r3
 8017734:	4413      	add	r3, r2
 8017736:	b29c      	uxth	r4, r3
 8017738:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801773c:	b29a      	uxth	r2, r3
 801773e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017742:	085b      	lsrs	r3, r3, #1
 8017744:	b2db      	uxtb	r3, r3
 8017746:	b29b      	uxth	r3, r3
 8017748:	4413      	add	r3, r2
 801774a:	b29d      	uxth	r5, r3
 801774c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017750:	b29a      	uxth	r2, r3
 8017752:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017756:	b299      	uxth	r1, r3
						MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 8017758:	69fb      	ldr	r3, [r7, #28]
 801775a:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 801775c:	b29b      	uxth	r3, r3
 801775e:	fb11 f303 	smulbb	r3, r1, r3
 8017762:	b29b      	uxth	r3, r3
 8017764:	4413      	add	r3, r2
 8017766:	b29b      	uxth	r3, r3
 8017768:	2200      	movs	r2, #0
 801776a:	9202      	str	r2, [sp, #8]
 801776c:	2201      	movs	r2, #1
 801776e:	9201      	str	r2, [sp, #4]
 8017770:	2200      	movs	r2, #0
 8017772:	9200      	str	r2, [sp, #0]
 8017774:	462a      	mov	r2, r5
 8017776:	4621      	mov	r1, r4
 8017778:	f7f7 f84c 	bl	800e814 <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
				Paint_DrawRectangle( MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * i,
 801777c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017780:	b29a      	uxth	r2, r3
 8017782:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017786:	085b      	lsrs	r3, r3, #1
 8017788:	b2db      	uxtb	r3, r3
 801778a:	b29b      	uxth	r3, r3
 801778c:	4413      	add	r3, r2
 801778e:	b298      	uxth	r0, r3
 8017790:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017794:	b29a      	uxth	r2, r3
 8017796:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801779a:	b299      	uxth	r1, r3
 801779c:	69fb      	ldr	r3, [r7, #28]
 801779e:	b29b      	uxth	r3, r3
 80177a0:	fb11 f303 	smulbb	r3, r1, r3
 80177a4:	b29b      	uxth	r3, r3
 80177a6:	4413      	add	r3, r2
 80177a8:	b29c      	uxth	r4, r3
 80177aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80177ae:	b29a      	uxth	r2, r3
 80177b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80177b4:	b29b      	uxth	r3, r3
 80177b6:	4413      	add	r3, r2
 80177b8:	b29d      	uxth	r5, r3
 80177ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80177be:	b29a      	uxth	r2, r3
 80177c0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80177c4:	b299      	uxth	r1, r3
						MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 80177c6:	69fb      	ldr	r3, [r7, #28]
 80177c8:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * i,
 80177ca:	b29b      	uxth	r3, r3
 80177cc:	fb11 f303 	smulbb	r3, r1, r3
 80177d0:	b29b      	uxth	r3, r3
 80177d2:	4413      	add	r3, r2
 80177d4:	b29b      	uxth	r3, r3
 80177d6:	2200      	movs	r2, #0
 80177d8:	9202      	str	r2, [sp, #8]
 80177da:	2201      	movs	r2, #1
 80177dc:	9201      	str	r2, [sp, #4]
 80177de:	2200      	movs	r2, #0
 80177e0:	9200      	str	r2, [sp, #0]
 80177e2:	462a      	mov	r2, r5
 80177e4:	4621      	mov	r1, r4
 80177e6:	f7f7 f815 	bl	800e814 <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
			}

			if ( (i == 2) )
 80177ea:	69fb      	ldr	r3, [r7, #28]
 80177ec:	2b02      	cmp	r3, #2
 80177ee:	f040 83b6 	bne.w	8017f5e <updateUint16Item+0x976>
			{
				char localString[8] = "";
 80177f2:	2300      	movs	r3, #0
 80177f4:	617b      	str	r3, [r7, #20]
 80177f6:	2300      	movs	r3, #0
 80177f8:	61bb      	str	r3, [r7, #24]
				sprintf(localString,"%04d",uint16Item.startValue);
 80177fa:	4b57      	ldr	r3, [pc, #348]	; (8017958 <updateUint16Item+0x370>)
 80177fc:	891b      	ldrh	r3, [r3, #8]
 80177fe:	461a      	mov	r2, r3
 8017800:	f107 0314 	add.w	r3, r7, #20
 8017804:	4956      	ldr	r1, [pc, #344]	; (8017960 <updateUint16Item+0x378>)
 8017806:	4618      	mov	r0, r3
 8017808:	f004 f92c 	bl	801ba64 <siprintf>
				if (currentCursorPosition.cursorPosition == 0x02)
 801780c:	4b55      	ldr	r3, [pc, #340]	; (8017964 <updateUint16Item+0x37c>)
 801780e:	781b      	ldrb	r3, [r3, #0]
 8017810:	2b02      	cmp	r3, #2
 8017812:	f040 81cd 	bne.w	8017bb0 <updateUint16Item+0x5c8>
				{
					if ( (howToDraw == LEFT) || (howToDraw == FULL) )
 8017816:	79fb      	ldrb	r3, [r7, #7]
 8017818:	2b03      	cmp	r3, #3
 801781a:	d003      	beq.n	8017824 <updateUint16Item+0x23c>
 801781c:	79fb      	ldrb	r3, [r7, #7]
 801781e:	2b02      	cmp	r3, #2
 8017820:	f040 80a2 	bne.w	8017968 <updateUint16Item+0x380>
					{
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8017824:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017828:	b29b      	uxth	r3, r3
 801782a:	3301      	adds	r3, #1
 801782c:	b298      	uxth	r0, r3
 801782e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017832:	b29a      	uxth	r2, r3
 8017834:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017838:	b299      	uxth	r1, r3
 801783a:	69fb      	ldr	r3, [r7, #28]
 801783c:	b29b      	uxth	r3, r3
 801783e:	fb11 f303 	smulbb	r3, r1, r3
 8017842:	b29b      	uxth	r3, r3
 8017844:	4413      	add	r3, r2
 8017846:	b29b      	uxth	r3, r3
 8017848:	3301      	adds	r3, #1
 801784a:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, LGRAY,  BLACK);
 801784c:	69fb      	ldr	r3, [r7, #28]
 801784e:	3301      	adds	r3, #1
 8017850:	011b      	lsls	r3, r3, #4
 8017852:	4a41      	ldr	r2, [pc, #260]	; (8017958 <updateUint16Item+0x370>)
 8017854:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8017856:	2300      	movs	r3, #0
 8017858:	9301      	str	r3, [sp, #4]
 801785a:	f24c 6318 	movw	r3, #50712	; 0xc618
 801785e:	9300      	str	r3, [sp, #0]
 8017860:	4b3e      	ldr	r3, [pc, #248]	; (801795c <updateUint16Item+0x374>)
 8017862:	f7f7 fa7b 	bl	800ed5c <Paint_DrawString_EN>
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 8017866:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801786a:	b29a      	uxth	r2, r3
 801786c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017870:	085b      	lsrs	r3, r3, #1
 8017872:	b2db      	uxtb	r3, r3
 8017874:	b29b      	uxth	r3, r3
 8017876:	4413      	add	r3, r2
 8017878:	b29b      	uxth	r3, r3
 801787a:	3301      	adds	r3, #1
 801787c:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801787e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017882:	b29a      	uxth	r2, r3
 8017884:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017888:	b299      	uxth	r1, r3
 801788a:	69fb      	ldr	r3, [r7, #28]
 801788c:	b29b      	uxth	r3, r3
 801788e:	fb11 f303 	smulbb	r3, r1, r3
 8017892:	b29b      	uxth	r3, r3
 8017894:	4413      	add	r3, r2
 8017896:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 8017898:	3301      	adds	r3, #1
 801789a:	b29e      	uxth	r6, r3
								MenuRectangleStartX + MenuRectangleWidth / 2 + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 801789c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80178a0:	b29a      	uxth	r2, r3
 80178a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80178a6:	085b      	lsrs	r3, r3, #1
 80178a8:	b2db      	uxtb	r3, r3
 80178aa:	b29b      	uxth	r3, r3
 80178ac:	4413      	add	r3, r2
 80178ae:	b29c      	uxth	r4, r3
 80178b0:	69fb      	ldr	r3, [r7, #28]
 80178b2:	3301      	adds	r3, #1
 80178b4:	011b      	lsls	r3, r3, #4
 80178b6:	4a28      	ldr	r2, [pc, #160]	; (8017958 <updateUint16Item+0x370>)
 80178b8:	4413      	add	r3, r2
 80178ba:	4618      	mov	r0, r3
 80178bc:	f7e8 fd1a 	bl	80002f4 <strlen>
 80178c0:	4603      	mov	r3, r0
 80178c2:	b29a      	uxth	r2, r3
 80178c4:	4b25      	ldr	r3, [pc, #148]	; (801795c <updateUint16Item+0x374>)
 80178c6:	889b      	ldrh	r3, [r3, #4]
 80178c8:	fb12 f303 	smulbb	r3, r2, r3
 80178cc:	b29b      	uxth	r3, r3
 80178ce:	4423      	add	r3, r4
 80178d0:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 80178d2:	3301      	adds	r3, #1
 80178d4:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 80178d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80178da:	b29a      	uxth	r2, r3
 80178dc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80178e0:	b299      	uxth	r1, r3
 80178e2:	69fb      	ldr	r3, [r7, #28]
 80178e4:	b29b      	uxth	r3, r3
 80178e6:	fb11 f303 	smulbb	r3, r1, r3
 80178ea:	b29b      	uxth	r3, r3
 80178ec:	4413      	add	r3, r2
 80178ee:	b29a      	uxth	r2, r3
 80178f0:	4b1a      	ldr	r3, [pc, #104]	; (801795c <updateUint16Item+0x374>)
 80178f2:	88db      	ldrh	r3, [r3, #6]
 80178f4:	4413      	add	r3, r2
 80178f6:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 80178f8:	3301      	adds	r3, #1
 80178fa:	b29b      	uxth	r3, r3
 80178fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017900:	9200      	str	r2, [sp, #0]
 8017902:	4602      	mov	r2, r0
 8017904:	4631      	mov	r1, r6
 8017906:	4628      	mov	r0, r5
 8017908:	f7f6 fe0a 	bl	800e520 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801790c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017910:	b29a      	uxth	r2, r3
 8017912:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017916:	085b      	lsrs	r3, r3, #1
 8017918:	b2db      	uxtb	r3, r3
 801791a:	b29b      	uxth	r3, r3
 801791c:	4413      	add	r3, r2
 801791e:	b29b      	uxth	r3, r3
 8017920:	3301      	adds	r3, #1
 8017922:	b298      	uxth	r0, r3
 8017924:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017928:	b29a      	uxth	r2, r3
 801792a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801792e:	b299      	uxth	r1, r3
 8017930:	69fb      	ldr	r3, [r7, #28]
 8017932:	b29b      	uxth	r3, r3
 8017934:	fb11 f303 	smulbb	r3, r1, r3
 8017938:	b29b      	uxth	r3, r3
 801793a:	4413      	add	r3, r2
 801793c:	b29b      	uxth	r3, r3
 801793e:	3301      	adds	r3, #1
 8017940:	b299      	uxth	r1, r3
 8017942:	f107 0214 	add.w	r2, r7, #20
 8017946:	2300      	movs	r3, #0
 8017948:	9301      	str	r3, [sp, #4]
 801794a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801794e:	9300      	str	r3, [sp, #0]
 8017950:	4b02      	ldr	r3, [pc, #8]	; (801795c <updateUint16Item+0x374>)
 8017952:	f7f7 fa03 	bl	800ed5c <Paint_DrawString_EN>
 8017956:	e302      	b.n	8017f5e <updateUint16Item+0x976>
 8017958:	2400fe04 	.word	0x2400fe04
 801795c:	24000030 	.word	0x24000030
 8017960:	0801f98c 	.word	0x0801f98c
 8017964:	2400ac84 	.word	0x2400ac84
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == DOWN)
 8017968:	79fb      	ldrb	r3, [r7, #7]
 801796a:	2b01      	cmp	r3, #1
 801796c:	f040 808c 	bne.w	8017a88 <updateUint16Item+0x4a0>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8017970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017974:	b29b      	uxth	r3, r3
 8017976:	3301      	adds	r3, #1
 8017978:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801797a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801797e:	b29a      	uxth	r2, r3
 8017980:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017984:	b299      	uxth	r1, r3
 8017986:	69fb      	ldr	r3, [r7, #28]
 8017988:	b29b      	uxth	r3, r3
 801798a:	fb11 f303 	smulbb	r3, r1, r3
 801798e:	b29b      	uxth	r3, r3
 8017990:	4413      	add	r3, r2
 8017992:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8017994:	3301      	adds	r3, #1
 8017996:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 8017998:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801799c:	b29c      	uxth	r4, r3
 801799e:	69fb      	ldr	r3, [r7, #28]
 80179a0:	3301      	adds	r3, #1
 80179a2:	011b      	lsls	r3, r3, #4
 80179a4:	4a80      	ldr	r2, [pc, #512]	; (8017ba8 <updateUint16Item+0x5c0>)
 80179a6:	4413      	add	r3, r2
 80179a8:	4618      	mov	r0, r3
 80179aa:	f7e8 fca3 	bl	80002f4 <strlen>
 80179ae:	4603      	mov	r3, r0
 80179b0:	b29a      	uxth	r2, r3
 80179b2:	4b7e      	ldr	r3, [pc, #504]	; (8017bac <updateUint16Item+0x5c4>)
 80179b4:	889b      	ldrh	r3, [r3, #4]
 80179b6:	fb12 f303 	smulbb	r3, r2, r3
 80179ba:	b29b      	uxth	r3, r3
 80179bc:	4423      	add	r3, r4
 80179be:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 80179c0:	3301      	adds	r3, #1
 80179c2:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 80179c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80179c8:	b29a      	uxth	r2, r3
 80179ca:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80179ce:	b299      	uxth	r1, r3
 80179d0:	69fb      	ldr	r3, [r7, #28]
 80179d2:	b29b      	uxth	r3, r3
 80179d4:	fb11 f303 	smulbb	r3, r1, r3
 80179d8:	b29b      	uxth	r3, r3
 80179da:	4413      	add	r3, r2
 80179dc:	b29a      	uxth	r2, r3
 80179de:	4b73      	ldr	r3, [pc, #460]	; (8017bac <updateUint16Item+0x5c4>)
 80179e0:	88db      	ldrh	r3, [r3, #6]
 80179e2:	4413      	add	r3, r2
 80179e4:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 80179e6:	3301      	adds	r3, #1
 80179e8:	b29b      	uxth	r3, r3
 80179ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80179ee:	9200      	str	r2, [sp, #0]
 80179f0:	4602      	mov	r2, r0
 80179f2:	4631      	mov	r1, r6
 80179f4:	4628      	mov	r0, r5
 80179f6:	f7f6 fd93 	bl	800e520 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80179fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80179fe:	b29b      	uxth	r3, r3
 8017a00:	3301      	adds	r3, #1
 8017a02:	b298      	uxth	r0, r3
 8017a04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017a08:	b29a      	uxth	r2, r3
 8017a0a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017a0e:	b299      	uxth	r1, r3
 8017a10:	69fb      	ldr	r3, [r7, #28]
 8017a12:	b29b      	uxth	r3, r3
 8017a14:	fb11 f303 	smulbb	r3, r1, r3
 8017a18:	b29b      	uxth	r3, r3
 8017a1a:	4413      	add	r3, r2
 8017a1c:	b29b      	uxth	r3, r3
 8017a1e:	3301      	adds	r3, #1
 8017a20:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, WHITE,  BLACK);
 8017a22:	69fb      	ldr	r3, [r7, #28]
 8017a24:	3301      	adds	r3, #1
 8017a26:	011b      	lsls	r3, r3, #4
 8017a28:	4a5f      	ldr	r2, [pc, #380]	; (8017ba8 <updateUint16Item+0x5c0>)
 8017a2a:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8017a2c:	2300      	movs	r3, #0
 8017a2e:	9301      	str	r3, [sp, #4]
 8017a30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017a34:	9300      	str	r3, [sp, #0]
 8017a36:	4b5d      	ldr	r3, [pc, #372]	; (8017bac <updateUint16Item+0x5c4>)
 8017a38:	f7f7 f990 	bl	800ed5c <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8017a3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017a40:	b29a      	uxth	r2, r3
 8017a42:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017a46:	085b      	lsrs	r3, r3, #1
 8017a48:	b2db      	uxtb	r3, r3
 8017a4a:	b29b      	uxth	r3, r3
 8017a4c:	4413      	add	r3, r2
 8017a4e:	b29b      	uxth	r3, r3
 8017a50:	3301      	adds	r3, #1
 8017a52:	b298      	uxth	r0, r3
 8017a54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017a58:	b29a      	uxth	r2, r3
 8017a5a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017a5e:	b299      	uxth	r1, r3
 8017a60:	69fb      	ldr	r3, [r7, #28]
 8017a62:	b29b      	uxth	r3, r3
 8017a64:	fb11 f303 	smulbb	r3, r1, r3
 8017a68:	b29b      	uxth	r3, r3
 8017a6a:	4413      	add	r3, r2
 8017a6c:	b29b      	uxth	r3, r3
 8017a6e:	3301      	adds	r3, #1
 8017a70:	b299      	uxth	r1, r3
 8017a72:	f107 0214 	add.w	r2, r7, #20
 8017a76:	2300      	movs	r3, #0
 8017a78:	9301      	str	r3, [sp, #4]
 8017a7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017a7e:	9300      	str	r3, [sp, #0]
 8017a80:	4b4a      	ldr	r3, [pc, #296]	; (8017bac <updateUint16Item+0x5c4>)
 8017a82:	f7f7 f96b 	bl	800ed5c <Paint_DrawString_EN>
 8017a86:	e26a      	b.n	8017f5e <updateUint16Item+0x976>
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == UP)
 8017a88:	79fb      	ldrb	r3, [r7, #7]
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	f040 8267 	bne.w	8017f5e <updateUint16Item+0x976>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8017a90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017a94:	b29b      	uxth	r3, r3
 8017a96:	3301      	adds	r3, #1
 8017a98:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8017a9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017a9e:	b29a      	uxth	r2, r3
 8017aa0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017aa4:	b299      	uxth	r1, r3
 8017aa6:	69fb      	ldr	r3, [r7, #28]
 8017aa8:	b29b      	uxth	r3, r3
 8017aaa:	fb11 f303 	smulbb	r3, r1, r3
 8017aae:	b29b      	uxth	r3, r3
 8017ab0:	4413      	add	r3, r2
 8017ab2:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8017ab4:	3301      	adds	r3, #1
 8017ab6:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 8017ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017abc:	b29c      	uxth	r4, r3
 8017abe:	69fb      	ldr	r3, [r7, #28]
 8017ac0:	3301      	adds	r3, #1
 8017ac2:	011b      	lsls	r3, r3, #4
 8017ac4:	4a38      	ldr	r2, [pc, #224]	; (8017ba8 <updateUint16Item+0x5c0>)
 8017ac6:	4413      	add	r3, r2
 8017ac8:	4618      	mov	r0, r3
 8017aca:	f7e8 fc13 	bl	80002f4 <strlen>
 8017ace:	4603      	mov	r3, r0
 8017ad0:	b29a      	uxth	r2, r3
 8017ad2:	4b36      	ldr	r3, [pc, #216]	; (8017bac <updateUint16Item+0x5c4>)
 8017ad4:	889b      	ldrh	r3, [r3, #4]
 8017ad6:	fb12 f303 	smulbb	r3, r2, r3
 8017ada:	b29b      	uxth	r3, r3
 8017adc:	4423      	add	r3, r4
 8017ade:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8017ae0:	3301      	adds	r3, #1
 8017ae2:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 8017ae4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017ae8:	b29a      	uxth	r2, r3
 8017aea:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017aee:	b299      	uxth	r1, r3
 8017af0:	69fb      	ldr	r3, [r7, #28]
 8017af2:	b29b      	uxth	r3, r3
 8017af4:	fb11 f303 	smulbb	r3, r1, r3
 8017af8:	b29b      	uxth	r3, r3
 8017afa:	4413      	add	r3, r2
 8017afc:	b29a      	uxth	r2, r3
 8017afe:	4b2b      	ldr	r3, [pc, #172]	; (8017bac <updateUint16Item+0x5c4>)
 8017b00:	88db      	ldrh	r3, [r3, #6]
 8017b02:	4413      	add	r3, r2
 8017b04:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8017b06:	3301      	adds	r3, #1
 8017b08:	b29b      	uxth	r3, r3
 8017b0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017b0e:	9200      	str	r2, [sp, #0]
 8017b10:	4602      	mov	r2, r0
 8017b12:	4631      	mov	r1, r6
 8017b14:	4628      	mov	r0, r5
 8017b16:	f7f6 fd03 	bl	800e520 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8017b1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017b1e:	b29b      	uxth	r3, r3
 8017b20:	3301      	adds	r3, #1
 8017b22:	b298      	uxth	r0, r3
 8017b24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017b28:	b29a      	uxth	r2, r3
 8017b2a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017b2e:	b299      	uxth	r1, r3
 8017b30:	69fb      	ldr	r3, [r7, #28]
 8017b32:	b29b      	uxth	r3, r3
 8017b34:	fb11 f303 	smulbb	r3, r1, r3
 8017b38:	b29b      	uxth	r3, r3
 8017b3a:	4413      	add	r3, r2
 8017b3c:	b29b      	uxth	r3, r3
 8017b3e:	3301      	adds	r3, #1
 8017b40:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, LGRAY,  BLACK);
 8017b42:	69fb      	ldr	r3, [r7, #28]
 8017b44:	3301      	adds	r3, #1
 8017b46:	011b      	lsls	r3, r3, #4
 8017b48:	4a17      	ldr	r2, [pc, #92]	; (8017ba8 <updateUint16Item+0x5c0>)
 8017b4a:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8017b4c:	2300      	movs	r3, #0
 8017b4e:	9301      	str	r3, [sp, #4]
 8017b50:	f24c 6318 	movw	r3, #50712	; 0xc618
 8017b54:	9300      	str	r3, [sp, #0]
 8017b56:	4b15      	ldr	r3, [pc, #84]	; (8017bac <updateUint16Item+0x5c4>)
 8017b58:	f7f7 f900 	bl	800ed5c <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8017b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017b60:	b29a      	uxth	r2, r3
 8017b62:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017b66:	085b      	lsrs	r3, r3, #1
 8017b68:	b2db      	uxtb	r3, r3
 8017b6a:	b29b      	uxth	r3, r3
 8017b6c:	4413      	add	r3, r2
 8017b6e:	b29b      	uxth	r3, r3
 8017b70:	3301      	adds	r3, #1
 8017b72:	b298      	uxth	r0, r3
 8017b74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017b78:	b29a      	uxth	r2, r3
 8017b7a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017b7e:	b299      	uxth	r1, r3
 8017b80:	69fb      	ldr	r3, [r7, #28]
 8017b82:	b29b      	uxth	r3, r3
 8017b84:	fb11 f303 	smulbb	r3, r1, r3
 8017b88:	b29b      	uxth	r3, r3
 8017b8a:	4413      	add	r3, r2
 8017b8c:	b29b      	uxth	r3, r3
 8017b8e:	3301      	adds	r3, #1
 8017b90:	b299      	uxth	r1, r3
 8017b92:	f107 0214 	add.w	r2, r7, #20
 8017b96:	2300      	movs	r3, #0
 8017b98:	9301      	str	r3, [sp, #4]
 8017b9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017b9e:	9300      	str	r3, [sp, #0]
 8017ba0:	4b02      	ldr	r3, [pc, #8]	; (8017bac <updateUint16Item+0x5c4>)
 8017ba2:	f7f7 f8db 	bl	800ed5c <Paint_DrawString_EN>
 8017ba6:	e1da      	b.n	8017f5e <updateUint16Item+0x976>
 8017ba8:	2400fe04 	.word	0x2400fe04
 8017bac:	24000030 	.word	0x24000030
								localString, &Font12, WHITE,  BLACK);
					}

				}
				else if (currentCursorPosition.cursorPosition == VALUE)
 8017bb0:	4ba1      	ldr	r3, [pc, #644]	; (8017e38 <updateUint16Item+0x850>)
 8017bb2:	781b      	ldrb	r3, [r3, #0]
 8017bb4:	2b0b      	cmp	r3, #11
 8017bb6:	f040 8147 	bne.w	8017e48 <updateUint16Item+0x860>
				{
					if (howToDraw == RIGHT)
 8017bba:	79fb      	ldrb	r3, [r7, #7]
 8017bbc:	2b04      	cmp	r3, #4
 8017bbe:	f040 808c 	bne.w	8017cda <updateUint16Item+0x6f2>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8017bc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017bc6:	b29b      	uxth	r3, r3
 8017bc8:	3301      	adds	r3, #1
 8017bca:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8017bcc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017bd0:	b29a      	uxth	r2, r3
 8017bd2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017bd6:	b299      	uxth	r1, r3
 8017bd8:	69fb      	ldr	r3, [r7, #28]
 8017bda:	b29b      	uxth	r3, r3
 8017bdc:	fb11 f303 	smulbb	r3, r1, r3
 8017be0:	b29b      	uxth	r3, r3
 8017be2:	4413      	add	r3, r2
 8017be4:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8017be6:	3301      	adds	r3, #1
 8017be8:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 8017bea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017bee:	b29c      	uxth	r4, r3
 8017bf0:	69fb      	ldr	r3, [r7, #28]
 8017bf2:	3301      	adds	r3, #1
 8017bf4:	011b      	lsls	r3, r3, #4
 8017bf6:	4a91      	ldr	r2, [pc, #580]	; (8017e3c <updateUint16Item+0x854>)
 8017bf8:	4413      	add	r3, r2
 8017bfa:	4618      	mov	r0, r3
 8017bfc:	f7e8 fb7a 	bl	80002f4 <strlen>
 8017c00:	4603      	mov	r3, r0
 8017c02:	b29a      	uxth	r2, r3
 8017c04:	4b8e      	ldr	r3, [pc, #568]	; (8017e40 <updateUint16Item+0x858>)
 8017c06:	889b      	ldrh	r3, [r3, #4]
 8017c08:	fb12 f303 	smulbb	r3, r2, r3
 8017c0c:	b29b      	uxth	r3, r3
 8017c0e:	4423      	add	r3, r4
 8017c10:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8017c12:	3301      	adds	r3, #1
 8017c14:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 8017c16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017c1a:	b29a      	uxth	r2, r3
 8017c1c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017c20:	b299      	uxth	r1, r3
 8017c22:	69fb      	ldr	r3, [r7, #28]
 8017c24:	b29b      	uxth	r3, r3
 8017c26:	fb11 f303 	smulbb	r3, r1, r3
 8017c2a:	b29b      	uxth	r3, r3
 8017c2c:	4413      	add	r3, r2
 8017c2e:	b29a      	uxth	r2, r3
 8017c30:	4b83      	ldr	r3, [pc, #524]	; (8017e40 <updateUint16Item+0x858>)
 8017c32:	88db      	ldrh	r3, [r3, #6]
 8017c34:	4413      	add	r3, r2
 8017c36:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8017c38:	3301      	adds	r3, #1
 8017c3a:	b29b      	uxth	r3, r3
 8017c3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017c40:	9200      	str	r2, [sp, #0]
 8017c42:	4602      	mov	r2, r0
 8017c44:	4631      	mov	r1, r6
 8017c46:	4628      	mov	r0, r5
 8017c48:	f7f6 fc6a 	bl	800e520 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8017c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017c50:	b29b      	uxth	r3, r3
 8017c52:	3301      	adds	r3, #1
 8017c54:	b298      	uxth	r0, r3
 8017c56:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017c5a:	b29a      	uxth	r2, r3
 8017c5c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017c60:	b299      	uxth	r1, r3
 8017c62:	69fb      	ldr	r3, [r7, #28]
 8017c64:	b29b      	uxth	r3, r3
 8017c66:	fb11 f303 	smulbb	r3, r1, r3
 8017c6a:	b29b      	uxth	r3, r3
 8017c6c:	4413      	add	r3, r2
 8017c6e:	b29b      	uxth	r3, r3
 8017c70:	3301      	adds	r3, #1
 8017c72:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, WHITE,  BLACK);
 8017c74:	69fb      	ldr	r3, [r7, #28]
 8017c76:	3301      	adds	r3, #1
 8017c78:	011b      	lsls	r3, r3, #4
 8017c7a:	4a70      	ldr	r2, [pc, #448]	; (8017e3c <updateUint16Item+0x854>)
 8017c7c:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8017c7e:	2300      	movs	r3, #0
 8017c80:	9301      	str	r3, [sp, #4]
 8017c82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017c86:	9300      	str	r3, [sp, #0]
 8017c88:	4b6d      	ldr	r3, [pc, #436]	; (8017e40 <updateUint16Item+0x858>)
 8017c8a:	f7f7 f867 	bl	800ed5c <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8017c8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017c92:	b29a      	uxth	r2, r3
 8017c94:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017c98:	085b      	lsrs	r3, r3, #1
 8017c9a:	b2db      	uxtb	r3, r3
 8017c9c:	b29b      	uxth	r3, r3
 8017c9e:	4413      	add	r3, r2
 8017ca0:	b29b      	uxth	r3, r3
 8017ca2:	3301      	adds	r3, #1
 8017ca4:	b298      	uxth	r0, r3
 8017ca6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017caa:	b29a      	uxth	r2, r3
 8017cac:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017cb0:	b299      	uxth	r1, r3
 8017cb2:	69fb      	ldr	r3, [r7, #28]
 8017cb4:	b29b      	uxth	r3, r3
 8017cb6:	fb11 f303 	smulbb	r3, r1, r3
 8017cba:	b29b      	uxth	r3, r3
 8017cbc:	4413      	add	r3, r2
 8017cbe:	b29b      	uxth	r3, r3
 8017cc0:	3301      	adds	r3, #1
 8017cc2:	b299      	uxth	r1, r3
 8017cc4:	f107 0214 	add.w	r2, r7, #20
 8017cc8:	2300      	movs	r3, #0
 8017cca:	9301      	str	r3, [sp, #4]
 8017ccc:	f24c 6318 	movw	r3, #50712	; 0xc618
 8017cd0:	9300      	str	r3, [sp, #0]
 8017cd2:	4b5b      	ldr	r3, [pc, #364]	; (8017e40 <updateUint16Item+0x858>)
 8017cd4:	f7f7 f842 	bl	800ed5c <Paint_DrawString_EN>
 8017cd8:	e141      	b.n	8017f5e <updateUint16Item+0x976>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == DOWN)
 8017cda:	79fb      	ldrb	r3, [r7, #7]
 8017cdc:	2b01      	cmp	r3, #1
 8017cde:	d158      	bne.n	8017d92 <updateUint16Item+0x7aa>
					{
						if (uint16Item.deltaMultiplier < uint16Item.startValue)
 8017ce0:	4b56      	ldr	r3, [pc, #344]	; (8017e3c <updateUint16Item+0x854>)
 8017ce2:	899a      	ldrh	r2, [r3, #12]
 8017ce4:	4b55      	ldr	r3, [pc, #340]	; (8017e3c <updateUint16Item+0x854>)
 8017ce6:	891b      	ldrh	r3, [r3, #8]
 8017ce8:	429a      	cmp	r2, r3
 8017cea:	d21f      	bcs.n	8017d2c <updateUint16Item+0x744>
						{
							uint16Item.startValue = fmax(uint16Item.startValue - uint16Item.deltaMultiplier, uint16Item.minValue * 1.0);
 8017cec:	4b53      	ldr	r3, [pc, #332]	; (8017e3c <updateUint16Item+0x854>)
 8017cee:	891b      	ldrh	r3, [r3, #8]
 8017cf0:	461a      	mov	r2, r3
 8017cf2:	4b52      	ldr	r3, [pc, #328]	; (8017e3c <updateUint16Item+0x854>)
 8017cf4:	899b      	ldrh	r3, [r3, #12]
 8017cf6:	1ad3      	subs	r3, r2, r3
 8017cf8:	ee07 3a90 	vmov	s15, r3
 8017cfc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017d00:	4b4e      	ldr	r3, [pc, #312]	; (8017e3c <updateUint16Item+0x854>)
 8017d02:	889b      	ldrh	r3, [r3, #4]
 8017d04:	ee06 3a90 	vmov	s13, r3
 8017d08:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8017d0c:	eeb0 1b46 	vmov.f64	d1, d6
 8017d10:	eeb0 0b47 	vmov.f64	d0, d7
 8017d14:	f007 fa2e 	bl	801f174 <fmax>
 8017d18:	eeb0 7b40 	vmov.f64	d7, d0
 8017d1c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8017d20:	ee17 3a90 	vmov	r3, s15
 8017d24:	b29a      	uxth	r2, r3
 8017d26:	4b45      	ldr	r3, [pc, #276]	; (8017e3c <updateUint16Item+0x854>)
 8017d28:	811a      	strh	r2, [r3, #8]
 8017d2a:	e003      	b.n	8017d34 <updateUint16Item+0x74c>
						}
						else
						{
							uint16Item.startValue = uint16Item.minValue;
 8017d2c:	4b43      	ldr	r3, [pc, #268]	; (8017e3c <updateUint16Item+0x854>)
 8017d2e:	889a      	ldrh	r2, [r3, #4]
 8017d30:	4b42      	ldr	r3, [pc, #264]	; (8017e3c <updateUint16Item+0x854>)
 8017d32:	811a      	strh	r2, [r3, #8]
						}

						sprintf(localString,"%04d",uint16Item.startValue);
 8017d34:	4b41      	ldr	r3, [pc, #260]	; (8017e3c <updateUint16Item+0x854>)
 8017d36:	891b      	ldrh	r3, [r3, #8]
 8017d38:	461a      	mov	r2, r3
 8017d3a:	f107 0314 	add.w	r3, r7, #20
 8017d3e:	4941      	ldr	r1, [pc, #260]	; (8017e44 <updateUint16Item+0x85c>)
 8017d40:	4618      	mov	r0, r3
 8017d42:	f003 fe8f 	bl	801ba64 <siprintf>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8017d46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017d4a:	b29a      	uxth	r2, r3
 8017d4c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017d50:	085b      	lsrs	r3, r3, #1
 8017d52:	b2db      	uxtb	r3, r3
 8017d54:	b29b      	uxth	r3, r3
 8017d56:	4413      	add	r3, r2
 8017d58:	b29b      	uxth	r3, r3
 8017d5a:	3301      	adds	r3, #1
 8017d5c:	b298      	uxth	r0, r3
 8017d5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017d62:	b29a      	uxth	r2, r3
 8017d64:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017d68:	b299      	uxth	r1, r3
 8017d6a:	69fb      	ldr	r3, [r7, #28]
 8017d6c:	b29b      	uxth	r3, r3
 8017d6e:	fb11 f303 	smulbb	r3, r1, r3
 8017d72:	b29b      	uxth	r3, r3
 8017d74:	4413      	add	r3, r2
 8017d76:	b29b      	uxth	r3, r3
 8017d78:	3301      	adds	r3, #1
 8017d7a:	b299      	uxth	r1, r3
 8017d7c:	f107 0214 	add.w	r2, r7, #20
 8017d80:	2300      	movs	r3, #0
 8017d82:	9301      	str	r3, [sp, #4]
 8017d84:	f24c 6318 	movw	r3, #50712	; 0xc618
 8017d88:	9300      	str	r3, [sp, #0]
 8017d8a:	4b2d      	ldr	r3, [pc, #180]	; (8017e40 <updateUint16Item+0x858>)
 8017d8c:	f7f6 ffe6 	bl	800ed5c <Paint_DrawString_EN>
 8017d90:	e0e5      	b.n	8017f5e <updateUint16Item+0x976>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == UP)
 8017d92:	79fb      	ldrb	r3, [r7, #7]
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	f040 80e2 	bne.w	8017f5e <updateUint16Item+0x976>
					{
						uint16Item.startValue = fmin(uint16Item.startValue + uint16Item.deltaMultiplier, uint16Item.maxValue * 1.0);
 8017d9a:	4b28      	ldr	r3, [pc, #160]	; (8017e3c <updateUint16Item+0x854>)
 8017d9c:	891b      	ldrh	r3, [r3, #8]
 8017d9e:	461a      	mov	r2, r3
 8017da0:	4b26      	ldr	r3, [pc, #152]	; (8017e3c <updateUint16Item+0x854>)
 8017da2:	899b      	ldrh	r3, [r3, #12]
 8017da4:	4413      	add	r3, r2
 8017da6:	ee07 3a90 	vmov	s15, r3
 8017daa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017dae:	4b23      	ldr	r3, [pc, #140]	; (8017e3c <updateUint16Item+0x854>)
 8017db0:	88db      	ldrh	r3, [r3, #6]
 8017db2:	ee06 3a90 	vmov	s13, r3
 8017db6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8017dba:	eeb0 1b46 	vmov.f64	d1, d6
 8017dbe:	eeb0 0b47 	vmov.f64	d0, d7
 8017dc2:	f007 f9f2 	bl	801f1aa <fmin>
 8017dc6:	eeb0 7b40 	vmov.f64	d7, d0
 8017dca:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8017dce:	ee17 3a90 	vmov	r3, s15
 8017dd2:	b29a      	uxth	r2, r3
 8017dd4:	4b19      	ldr	r3, [pc, #100]	; (8017e3c <updateUint16Item+0x854>)
 8017dd6:	811a      	strh	r2, [r3, #8]
						sprintf(localString,"%04d",uint16Item.startValue);
 8017dd8:	4b18      	ldr	r3, [pc, #96]	; (8017e3c <updateUint16Item+0x854>)
 8017dda:	891b      	ldrh	r3, [r3, #8]
 8017ddc:	461a      	mov	r2, r3
 8017dde:	f107 0314 	add.w	r3, r7, #20
 8017de2:	4918      	ldr	r1, [pc, #96]	; (8017e44 <updateUint16Item+0x85c>)
 8017de4:	4618      	mov	r0, r3
 8017de6:	f003 fe3d 	bl	801ba64 <siprintf>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8017dea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017dee:	b29a      	uxth	r2, r3
 8017df0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017df4:	085b      	lsrs	r3, r3, #1
 8017df6:	b2db      	uxtb	r3, r3
 8017df8:	b29b      	uxth	r3, r3
 8017dfa:	4413      	add	r3, r2
 8017dfc:	b29b      	uxth	r3, r3
 8017dfe:	3301      	adds	r3, #1
 8017e00:	b298      	uxth	r0, r3
 8017e02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017e06:	b29a      	uxth	r2, r3
 8017e08:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017e0c:	b299      	uxth	r1, r3
 8017e0e:	69fb      	ldr	r3, [r7, #28]
 8017e10:	b29b      	uxth	r3, r3
 8017e12:	fb11 f303 	smulbb	r3, r1, r3
 8017e16:	b29b      	uxth	r3, r3
 8017e18:	4413      	add	r3, r2
 8017e1a:	b29b      	uxth	r3, r3
 8017e1c:	3301      	adds	r3, #1
 8017e1e:	b299      	uxth	r1, r3
 8017e20:	f107 0214 	add.w	r2, r7, #20
 8017e24:	2300      	movs	r3, #0
 8017e26:	9301      	str	r3, [sp, #4]
 8017e28:	f24c 6318 	movw	r3, #50712	; 0xc618
 8017e2c:	9300      	str	r3, [sp, #0]
 8017e2e:	4b04      	ldr	r3, [pc, #16]	; (8017e40 <updateUint16Item+0x858>)
 8017e30:	f7f6 ff94 	bl	800ed5c <Paint_DrawString_EN>
 8017e34:	e093      	b.n	8017f5e <updateUint16Item+0x976>
 8017e36:	bf00      	nop
 8017e38:	2400ac84 	.word	0x2400ac84
 8017e3c:	2400fe04 	.word	0x2400fe04
 8017e40:	24000030 	.word	0x24000030
 8017e44:	0801f98c 	.word	0x0801f98c
								localString, &Font12, LGRAY,  BLACK);
					}
				}
				else
				{
					Paint_ClearWindows(MenuRectangleStartX + 1,
 8017e48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017e4c:	b29b      	uxth	r3, r3
 8017e4e:	3301      	adds	r3, #1
 8017e50:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8017e52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017e56:	b29a      	uxth	r2, r3
 8017e58:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017e5c:	b299      	uxth	r1, r3
 8017e5e:	69fb      	ldr	r3, [r7, #28]
 8017e60:	b29b      	uxth	r3, r3
 8017e62:	fb11 f303 	smulbb	r3, r1, r3
 8017e66:	b29b      	uxth	r3, r3
 8017e68:	4413      	add	r3, r2
 8017e6a:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 8017e6c:	3301      	adds	r3, #1
 8017e6e:	b29e      	uxth	r6, r3
							MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 8017e70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017e74:	b29c      	uxth	r4, r3
 8017e76:	69fb      	ldr	r3, [r7, #28]
 8017e78:	3301      	adds	r3, #1
 8017e7a:	011b      	lsls	r3, r3, #4
 8017e7c:	4a93      	ldr	r2, [pc, #588]	; (80180cc <updateUint16Item+0xae4>)
 8017e7e:	4413      	add	r3, r2
 8017e80:	4618      	mov	r0, r3
 8017e82:	f7e8 fa37 	bl	80002f4 <strlen>
 8017e86:	4603      	mov	r3, r0
 8017e88:	b29a      	uxth	r2, r3
 8017e8a:	4b91      	ldr	r3, [pc, #580]	; (80180d0 <updateUint16Item+0xae8>)
 8017e8c:	889b      	ldrh	r3, [r3, #4]
 8017e8e:	fb12 f303 	smulbb	r3, r2, r3
 8017e92:	b29b      	uxth	r3, r3
 8017e94:	4423      	add	r3, r4
 8017e96:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 8017e98:	3301      	adds	r3, #1
 8017e9a:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 8017e9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017ea0:	b29a      	uxth	r2, r3
 8017ea2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017ea6:	b299      	uxth	r1, r3
 8017ea8:	69fb      	ldr	r3, [r7, #28]
 8017eaa:	b29b      	uxth	r3, r3
 8017eac:	fb11 f303 	smulbb	r3, r1, r3
 8017eb0:	b29b      	uxth	r3, r3
 8017eb2:	4413      	add	r3, r2
 8017eb4:	b29a      	uxth	r2, r3
 8017eb6:	4b86      	ldr	r3, [pc, #536]	; (80180d0 <updateUint16Item+0xae8>)
 8017eb8:	88db      	ldrh	r3, [r3, #6]
 8017eba:	4413      	add	r3, r2
 8017ebc:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 8017ebe:	3301      	adds	r3, #1
 8017ec0:	b29b      	uxth	r3, r3
 8017ec2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017ec6:	9200      	str	r2, [sp, #0]
 8017ec8:	4602      	mov	r2, r0
 8017eca:	4631      	mov	r1, r6
 8017ecc:	4628      	mov	r0, r5
 8017ece:	f7f6 fb27 	bl	800e520 <Paint_ClearWindows>
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8017ed2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017ed6:	b29b      	uxth	r3, r3
 8017ed8:	3301      	adds	r3, #1
 8017eda:	b298      	uxth	r0, r3
 8017edc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017ee0:	b29a      	uxth	r2, r3
 8017ee2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017ee6:	b299      	uxth	r1, r3
 8017ee8:	69fb      	ldr	r3, [r7, #28]
 8017eea:	b29b      	uxth	r3, r3
 8017eec:	fb11 f303 	smulbb	r3, r1, r3
 8017ef0:	b29b      	uxth	r3, r3
 8017ef2:	4413      	add	r3, r2
 8017ef4:	b29b      	uxth	r3, r3
 8017ef6:	3301      	adds	r3, #1
 8017ef8:	b299      	uxth	r1, r3
							uint16Item.itemsArray[i], &Font12, WHITE,  BLACK);
 8017efa:	69fb      	ldr	r3, [r7, #28]
 8017efc:	3301      	adds	r3, #1
 8017efe:	011b      	lsls	r3, r3, #4
 8017f00:	4a72      	ldr	r2, [pc, #456]	; (80180cc <updateUint16Item+0xae4>)
 8017f02:	441a      	add	r2, r3
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8017f04:	2300      	movs	r3, #0
 8017f06:	9301      	str	r3, [sp, #4]
 8017f08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017f0c:	9300      	str	r3, [sp, #0]
 8017f0e:	4b70      	ldr	r3, [pc, #448]	; (80180d0 <updateUint16Item+0xae8>)
 8017f10:	f7f6 ff24 	bl	800ed5c <Paint_DrawString_EN>
					Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8017f14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017f18:	b29a      	uxth	r2, r3
 8017f1a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017f1e:	085b      	lsrs	r3, r3, #1
 8017f20:	b2db      	uxtb	r3, r3
 8017f22:	b29b      	uxth	r3, r3
 8017f24:	4413      	add	r3, r2
 8017f26:	b29b      	uxth	r3, r3
 8017f28:	3301      	adds	r3, #1
 8017f2a:	b298      	uxth	r0, r3
 8017f2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017f30:	b29a      	uxth	r2, r3
 8017f32:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017f36:	b299      	uxth	r1, r3
 8017f38:	69fb      	ldr	r3, [r7, #28]
 8017f3a:	b29b      	uxth	r3, r3
 8017f3c:	fb11 f303 	smulbb	r3, r1, r3
 8017f40:	b29b      	uxth	r3, r3
 8017f42:	4413      	add	r3, r2
 8017f44:	b29b      	uxth	r3, r3
 8017f46:	3301      	adds	r3, #1
 8017f48:	b299      	uxth	r1, r3
 8017f4a:	f107 0214 	add.w	r2, r7, #20
 8017f4e:	2300      	movs	r3, #0
 8017f50:	9301      	str	r3, [sp, #4]
 8017f52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017f56:	9300      	str	r3, [sp, #0]
 8017f58:	4b5d      	ldr	r3, [pc, #372]	; (80180d0 <updateUint16Item+0xae8>)
 8017f5a:	f7f6 feff 	bl	800ed5c <Paint_DrawString_EN>
							localString, &Font12, WHITE,  BLACK);
				}
			}
			// Render value text of "Multiplier" with Grey or White background
			if ( (i == 3) )
 8017f5e:	69fb      	ldr	r3, [r7, #28]
 8017f60:	2b03      	cmp	r3, #3
 8017f62:	f040 83bc 	bne.w	80186de <updateUint16Item+0x10f6>
			{
				char localString[8] = "";
 8017f66:	2300      	movs	r3, #0
 8017f68:	60fb      	str	r3, [r7, #12]
 8017f6a:	2300      	movs	r3, #0
 8017f6c:	613b      	str	r3, [r7, #16]
				sprintf(localString,"%04d",uint16Item.deltaMultiplier);
 8017f6e:	4b57      	ldr	r3, [pc, #348]	; (80180cc <updateUint16Item+0xae4>)
 8017f70:	899b      	ldrh	r3, [r3, #12]
 8017f72:	461a      	mov	r2, r3
 8017f74:	f107 030c 	add.w	r3, r7, #12
 8017f78:	4956      	ldr	r1, [pc, #344]	; (80180d4 <updateUint16Item+0xaec>)
 8017f7a:	4618      	mov	r0, r3
 8017f7c:	f003 fd72 	bl	801ba64 <siprintf>
				if (currentCursorPosition.cursorPosition == 0x03)
 8017f80:	4b55      	ldr	r3, [pc, #340]	; (80180d8 <updateUint16Item+0xaf0>)
 8017f82:	781b      	ldrb	r3, [r3, #0]
 8017f84:	2b03      	cmp	r3, #3
 8017f86:	f040 81cd 	bne.w	8018324 <updateUint16Item+0xd3c>
				{
					if ( (howToDraw == LEFT) || (howToDraw == FULL) )
 8017f8a:	79fb      	ldrb	r3, [r7, #7]
 8017f8c:	2b03      	cmp	r3, #3
 8017f8e:	d003      	beq.n	8017f98 <updateUint16Item+0x9b0>
 8017f90:	79fb      	ldrb	r3, [r7, #7]
 8017f92:	2b02      	cmp	r3, #2
 8017f94:	f040 80a2 	bne.w	80180dc <updateUint16Item+0xaf4>
					{
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8017f98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017f9c:	b29b      	uxth	r3, r3
 8017f9e:	3301      	adds	r3, #1
 8017fa0:	b298      	uxth	r0, r3
 8017fa2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017fa6:	b29a      	uxth	r2, r3
 8017fa8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017fac:	b299      	uxth	r1, r3
 8017fae:	69fb      	ldr	r3, [r7, #28]
 8017fb0:	b29b      	uxth	r3, r3
 8017fb2:	fb11 f303 	smulbb	r3, r1, r3
 8017fb6:	b29b      	uxth	r3, r3
 8017fb8:	4413      	add	r3, r2
 8017fba:	b29b      	uxth	r3, r3
 8017fbc:	3301      	adds	r3, #1
 8017fbe:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, LGRAY,  BLACK);
 8017fc0:	69fb      	ldr	r3, [r7, #28]
 8017fc2:	3301      	adds	r3, #1
 8017fc4:	011b      	lsls	r3, r3, #4
 8017fc6:	4a41      	ldr	r2, [pc, #260]	; (80180cc <updateUint16Item+0xae4>)
 8017fc8:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8017fca:	2300      	movs	r3, #0
 8017fcc:	9301      	str	r3, [sp, #4]
 8017fce:	f24c 6318 	movw	r3, #50712	; 0xc618
 8017fd2:	9300      	str	r3, [sp, #0]
 8017fd4:	4b3e      	ldr	r3, [pc, #248]	; (80180d0 <updateUint16Item+0xae8>)
 8017fd6:	f7f6 fec1 	bl	800ed5c <Paint_DrawString_EN>
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 8017fda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017fde:	b29a      	uxth	r2, r3
 8017fe0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017fe4:	085b      	lsrs	r3, r3, #1
 8017fe6:	b2db      	uxtb	r3, r3
 8017fe8:	b29b      	uxth	r3, r3
 8017fea:	4413      	add	r3, r2
 8017fec:	b29b      	uxth	r3, r3
 8017fee:	3301      	adds	r3, #1
 8017ff0:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8017ff2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017ff6:	b29a      	uxth	r2, r3
 8017ff8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017ffc:	b299      	uxth	r1, r3
 8017ffe:	69fb      	ldr	r3, [r7, #28]
 8018000:	b29b      	uxth	r3, r3
 8018002:	fb11 f303 	smulbb	r3, r1, r3
 8018006:	b29b      	uxth	r3, r3
 8018008:	4413      	add	r3, r2
 801800a:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 801800c:	3301      	adds	r3, #1
 801800e:	b29e      	uxth	r6, r3
								MenuRectangleStartX + MenuRectangleWidth / 2 + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 8018010:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018014:	b29a      	uxth	r2, r3
 8018016:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801801a:	085b      	lsrs	r3, r3, #1
 801801c:	b2db      	uxtb	r3, r3
 801801e:	b29b      	uxth	r3, r3
 8018020:	4413      	add	r3, r2
 8018022:	b29c      	uxth	r4, r3
 8018024:	69fb      	ldr	r3, [r7, #28]
 8018026:	3301      	adds	r3, #1
 8018028:	011b      	lsls	r3, r3, #4
 801802a:	4a28      	ldr	r2, [pc, #160]	; (80180cc <updateUint16Item+0xae4>)
 801802c:	4413      	add	r3, r2
 801802e:	4618      	mov	r0, r3
 8018030:	f7e8 f960 	bl	80002f4 <strlen>
 8018034:	4603      	mov	r3, r0
 8018036:	b29a      	uxth	r2, r3
 8018038:	4b25      	ldr	r3, [pc, #148]	; (80180d0 <updateUint16Item+0xae8>)
 801803a:	889b      	ldrh	r3, [r3, #4]
 801803c:	fb12 f303 	smulbb	r3, r2, r3
 8018040:	b29b      	uxth	r3, r3
 8018042:	4423      	add	r3, r4
 8018044:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 8018046:	3301      	adds	r3, #1
 8018048:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801804a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801804e:	b29a      	uxth	r2, r3
 8018050:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018054:	b299      	uxth	r1, r3
 8018056:	69fb      	ldr	r3, [r7, #28]
 8018058:	b29b      	uxth	r3, r3
 801805a:	fb11 f303 	smulbb	r3, r1, r3
 801805e:	b29b      	uxth	r3, r3
 8018060:	4413      	add	r3, r2
 8018062:	b29a      	uxth	r2, r3
 8018064:	4b1a      	ldr	r3, [pc, #104]	; (80180d0 <updateUint16Item+0xae8>)
 8018066:	88db      	ldrh	r3, [r3, #6]
 8018068:	4413      	add	r3, r2
 801806a:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 801806c:	3301      	adds	r3, #1
 801806e:	b29b      	uxth	r3, r3
 8018070:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018074:	9200      	str	r2, [sp, #0]
 8018076:	4602      	mov	r2, r0
 8018078:	4631      	mov	r1, r6
 801807a:	4628      	mov	r0, r5
 801807c:	f7f6 fa50 	bl	800e520 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018080:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018084:	b29a      	uxth	r2, r3
 8018086:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801808a:	085b      	lsrs	r3, r3, #1
 801808c:	b2db      	uxtb	r3, r3
 801808e:	b29b      	uxth	r3, r3
 8018090:	4413      	add	r3, r2
 8018092:	b29b      	uxth	r3, r3
 8018094:	3301      	adds	r3, #1
 8018096:	b298      	uxth	r0, r3
 8018098:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801809c:	b29a      	uxth	r2, r3
 801809e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80180a2:	b299      	uxth	r1, r3
 80180a4:	69fb      	ldr	r3, [r7, #28]
 80180a6:	b29b      	uxth	r3, r3
 80180a8:	fb11 f303 	smulbb	r3, r1, r3
 80180ac:	b29b      	uxth	r3, r3
 80180ae:	4413      	add	r3, r2
 80180b0:	b29b      	uxth	r3, r3
 80180b2:	3301      	adds	r3, #1
 80180b4:	b299      	uxth	r1, r3
 80180b6:	f107 020c 	add.w	r2, r7, #12
 80180ba:	2300      	movs	r3, #0
 80180bc:	9301      	str	r3, [sp, #4]
 80180be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80180c2:	9300      	str	r3, [sp, #0]
 80180c4:	4b02      	ldr	r3, [pc, #8]	; (80180d0 <updateUint16Item+0xae8>)
 80180c6:	f7f6 fe49 	bl	800ed5c <Paint_DrawString_EN>
 80180ca:	e308      	b.n	80186de <updateUint16Item+0x10f6>
 80180cc:	2400fe04 	.word	0x2400fe04
 80180d0:	24000030 	.word	0x24000030
 80180d4:	0801f98c 	.word	0x0801f98c
 80180d8:	2400ac84 	.word	0x2400ac84
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == DOWN)
 80180dc:	79fb      	ldrb	r3, [r7, #7]
 80180de:	2b01      	cmp	r3, #1
 80180e0:	f040 808c 	bne.w	80181fc <updateUint16Item+0xc14>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 80180e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80180e8:	b29b      	uxth	r3, r3
 80180ea:	3301      	adds	r3, #1
 80180ec:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80180ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80180f2:	b29a      	uxth	r2, r3
 80180f4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80180f8:	b299      	uxth	r1, r3
 80180fa:	69fb      	ldr	r3, [r7, #28]
 80180fc:	b29b      	uxth	r3, r3
 80180fe:	fb11 f303 	smulbb	r3, r1, r3
 8018102:	b29b      	uxth	r3, r3
 8018104:	4413      	add	r3, r2
 8018106:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8018108:	3301      	adds	r3, #1
 801810a:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 801810c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018110:	b29c      	uxth	r4, r3
 8018112:	69fb      	ldr	r3, [r7, #28]
 8018114:	3301      	adds	r3, #1
 8018116:	011b      	lsls	r3, r3, #4
 8018118:	4a80      	ldr	r2, [pc, #512]	; (801831c <updateUint16Item+0xd34>)
 801811a:	4413      	add	r3, r2
 801811c:	4618      	mov	r0, r3
 801811e:	f7e8 f8e9 	bl	80002f4 <strlen>
 8018122:	4603      	mov	r3, r0
 8018124:	b29a      	uxth	r2, r3
 8018126:	4b7e      	ldr	r3, [pc, #504]	; (8018320 <updateUint16Item+0xd38>)
 8018128:	889b      	ldrh	r3, [r3, #4]
 801812a:	fb12 f303 	smulbb	r3, r2, r3
 801812e:	b29b      	uxth	r3, r3
 8018130:	4423      	add	r3, r4
 8018132:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8018134:	3301      	adds	r3, #1
 8018136:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 8018138:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801813c:	b29a      	uxth	r2, r3
 801813e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018142:	b299      	uxth	r1, r3
 8018144:	69fb      	ldr	r3, [r7, #28]
 8018146:	b29b      	uxth	r3, r3
 8018148:	fb11 f303 	smulbb	r3, r1, r3
 801814c:	b29b      	uxth	r3, r3
 801814e:	4413      	add	r3, r2
 8018150:	b29a      	uxth	r2, r3
 8018152:	4b73      	ldr	r3, [pc, #460]	; (8018320 <updateUint16Item+0xd38>)
 8018154:	88db      	ldrh	r3, [r3, #6]
 8018156:	4413      	add	r3, r2
 8018158:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801815a:	3301      	adds	r3, #1
 801815c:	b29b      	uxth	r3, r3
 801815e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018162:	9200      	str	r2, [sp, #0]
 8018164:	4602      	mov	r2, r0
 8018166:	4631      	mov	r1, r6
 8018168:	4628      	mov	r0, r5
 801816a:	f7f6 f9d9 	bl	800e520 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801816e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018172:	b29b      	uxth	r3, r3
 8018174:	3301      	adds	r3, #1
 8018176:	b298      	uxth	r0, r3
 8018178:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801817c:	b29a      	uxth	r2, r3
 801817e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018182:	b299      	uxth	r1, r3
 8018184:	69fb      	ldr	r3, [r7, #28]
 8018186:	b29b      	uxth	r3, r3
 8018188:	fb11 f303 	smulbb	r3, r1, r3
 801818c:	b29b      	uxth	r3, r3
 801818e:	4413      	add	r3, r2
 8018190:	b29b      	uxth	r3, r3
 8018192:	3301      	adds	r3, #1
 8018194:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, LGRAY,  BLACK);
 8018196:	69fb      	ldr	r3, [r7, #28]
 8018198:	3301      	adds	r3, #1
 801819a:	011b      	lsls	r3, r3, #4
 801819c:	4a5f      	ldr	r2, [pc, #380]	; (801831c <updateUint16Item+0xd34>)
 801819e:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80181a0:	2300      	movs	r3, #0
 80181a2:	9301      	str	r3, [sp, #4]
 80181a4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80181a8:	9300      	str	r3, [sp, #0]
 80181aa:	4b5d      	ldr	r3, [pc, #372]	; (8018320 <updateUint16Item+0xd38>)
 80181ac:	f7f6 fdd6 	bl	800ed5c <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80181b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80181b4:	b29a      	uxth	r2, r3
 80181b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80181ba:	085b      	lsrs	r3, r3, #1
 80181bc:	b2db      	uxtb	r3, r3
 80181be:	b29b      	uxth	r3, r3
 80181c0:	4413      	add	r3, r2
 80181c2:	b29b      	uxth	r3, r3
 80181c4:	3301      	adds	r3, #1
 80181c6:	b298      	uxth	r0, r3
 80181c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80181cc:	b29a      	uxth	r2, r3
 80181ce:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80181d2:	b299      	uxth	r1, r3
 80181d4:	69fb      	ldr	r3, [r7, #28]
 80181d6:	b29b      	uxth	r3, r3
 80181d8:	fb11 f303 	smulbb	r3, r1, r3
 80181dc:	b29b      	uxth	r3, r3
 80181de:	4413      	add	r3, r2
 80181e0:	b29b      	uxth	r3, r3
 80181e2:	3301      	adds	r3, #1
 80181e4:	b299      	uxth	r1, r3
 80181e6:	f107 020c 	add.w	r2, r7, #12
 80181ea:	2300      	movs	r3, #0
 80181ec:	9301      	str	r3, [sp, #4]
 80181ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80181f2:	9300      	str	r3, [sp, #0]
 80181f4:	4b4a      	ldr	r3, [pc, #296]	; (8018320 <updateUint16Item+0xd38>)
 80181f6:	f7f6 fdb1 	bl	800ed5c <Paint_DrawString_EN>
 80181fa:	e270      	b.n	80186de <updateUint16Item+0x10f6>
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == UP)
 80181fc:	79fb      	ldrb	r3, [r7, #7]
 80181fe:	2b00      	cmp	r3, #0
 8018200:	f040 826d 	bne.w	80186de <updateUint16Item+0x10f6>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8018204:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018208:	b29b      	uxth	r3, r3
 801820a:	3301      	adds	r3, #1
 801820c:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801820e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018212:	b29a      	uxth	r2, r3
 8018214:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018218:	b299      	uxth	r1, r3
 801821a:	69fb      	ldr	r3, [r7, #28]
 801821c:	b29b      	uxth	r3, r3
 801821e:	fb11 f303 	smulbb	r3, r1, r3
 8018222:	b29b      	uxth	r3, r3
 8018224:	4413      	add	r3, r2
 8018226:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8018228:	3301      	adds	r3, #1
 801822a:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 801822c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018230:	b29c      	uxth	r4, r3
 8018232:	69fb      	ldr	r3, [r7, #28]
 8018234:	3301      	adds	r3, #1
 8018236:	011b      	lsls	r3, r3, #4
 8018238:	4a38      	ldr	r2, [pc, #224]	; (801831c <updateUint16Item+0xd34>)
 801823a:	4413      	add	r3, r2
 801823c:	4618      	mov	r0, r3
 801823e:	f7e8 f859 	bl	80002f4 <strlen>
 8018242:	4603      	mov	r3, r0
 8018244:	b29a      	uxth	r2, r3
 8018246:	4b36      	ldr	r3, [pc, #216]	; (8018320 <updateUint16Item+0xd38>)
 8018248:	889b      	ldrh	r3, [r3, #4]
 801824a:	fb12 f303 	smulbb	r3, r2, r3
 801824e:	b29b      	uxth	r3, r3
 8018250:	4423      	add	r3, r4
 8018252:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8018254:	3301      	adds	r3, #1
 8018256:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 8018258:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801825c:	b29a      	uxth	r2, r3
 801825e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018262:	b299      	uxth	r1, r3
 8018264:	69fb      	ldr	r3, [r7, #28]
 8018266:	b29b      	uxth	r3, r3
 8018268:	fb11 f303 	smulbb	r3, r1, r3
 801826c:	b29b      	uxth	r3, r3
 801826e:	4413      	add	r3, r2
 8018270:	b29a      	uxth	r2, r3
 8018272:	4b2b      	ldr	r3, [pc, #172]	; (8018320 <updateUint16Item+0xd38>)
 8018274:	88db      	ldrh	r3, [r3, #6]
 8018276:	4413      	add	r3, r2
 8018278:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801827a:	3301      	adds	r3, #1
 801827c:	b29b      	uxth	r3, r3
 801827e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018282:	9200      	str	r2, [sp, #0]
 8018284:	4602      	mov	r2, r0
 8018286:	4631      	mov	r1, r6
 8018288:	4628      	mov	r0, r5
 801828a:	f7f6 f949 	bl	800e520 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801828e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018292:	b29b      	uxth	r3, r3
 8018294:	3301      	adds	r3, #1
 8018296:	b298      	uxth	r0, r3
 8018298:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801829c:	b29a      	uxth	r2, r3
 801829e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80182a2:	b299      	uxth	r1, r3
 80182a4:	69fb      	ldr	r3, [r7, #28]
 80182a6:	b29b      	uxth	r3, r3
 80182a8:	fb11 f303 	smulbb	r3, r1, r3
 80182ac:	b29b      	uxth	r3, r3
 80182ae:	4413      	add	r3, r2
 80182b0:	b29b      	uxth	r3, r3
 80182b2:	3301      	adds	r3, #1
 80182b4:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, LGRAY,  BLACK);
 80182b6:	69fb      	ldr	r3, [r7, #28]
 80182b8:	3301      	adds	r3, #1
 80182ba:	011b      	lsls	r3, r3, #4
 80182bc:	4a17      	ldr	r2, [pc, #92]	; (801831c <updateUint16Item+0xd34>)
 80182be:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80182c0:	2300      	movs	r3, #0
 80182c2:	9301      	str	r3, [sp, #4]
 80182c4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80182c8:	9300      	str	r3, [sp, #0]
 80182ca:	4b15      	ldr	r3, [pc, #84]	; (8018320 <updateUint16Item+0xd38>)
 80182cc:	f7f6 fd46 	bl	800ed5c <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80182d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80182d4:	b29a      	uxth	r2, r3
 80182d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80182da:	085b      	lsrs	r3, r3, #1
 80182dc:	b2db      	uxtb	r3, r3
 80182de:	b29b      	uxth	r3, r3
 80182e0:	4413      	add	r3, r2
 80182e2:	b29b      	uxth	r3, r3
 80182e4:	3301      	adds	r3, #1
 80182e6:	b298      	uxth	r0, r3
 80182e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80182ec:	b29a      	uxth	r2, r3
 80182ee:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80182f2:	b299      	uxth	r1, r3
 80182f4:	69fb      	ldr	r3, [r7, #28]
 80182f6:	b29b      	uxth	r3, r3
 80182f8:	fb11 f303 	smulbb	r3, r1, r3
 80182fc:	b29b      	uxth	r3, r3
 80182fe:	4413      	add	r3, r2
 8018300:	b29b      	uxth	r3, r3
 8018302:	3301      	adds	r3, #1
 8018304:	b299      	uxth	r1, r3
 8018306:	f107 020c 	add.w	r2, r7, #12
 801830a:	2300      	movs	r3, #0
 801830c:	9301      	str	r3, [sp, #4]
 801830e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018312:	9300      	str	r3, [sp, #0]
 8018314:	4b02      	ldr	r3, [pc, #8]	; (8018320 <updateUint16Item+0xd38>)
 8018316:	f7f6 fd21 	bl	800ed5c <Paint_DrawString_EN>
 801831a:	e1e0      	b.n	80186de <updateUint16Item+0x10f6>
 801831c:	2400fe04 	.word	0x2400fe04
 8018320:	24000030 	.word	0x24000030
								localString, &Font12, WHITE,  BLACK);
					}
				}
				else if (currentCursorPosition.cursorPosition == MULTIPLIER)
 8018324:	4ba2      	ldr	r3, [pc, #648]	; (80185b0 <updateUint16Item+0xfc8>)
 8018326:	781b      	ldrb	r3, [r3, #0]
 8018328:	2b0c      	cmp	r3, #12
 801832a:	f040 814d 	bne.w	80185c8 <updateUint16Item+0xfe0>
				{
					if (howToDraw == RIGHT)
 801832e:	79fb      	ldrb	r3, [r7, #7]
 8018330:	2b04      	cmp	r3, #4
 8018332:	f040 808c 	bne.w	801844e <updateUint16Item+0xe66>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8018336:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801833a:	b29b      	uxth	r3, r3
 801833c:	3301      	adds	r3, #1
 801833e:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018340:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018344:	b29a      	uxth	r2, r3
 8018346:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801834a:	b299      	uxth	r1, r3
 801834c:	69fb      	ldr	r3, [r7, #28]
 801834e:	b29b      	uxth	r3, r3
 8018350:	fb11 f303 	smulbb	r3, r1, r3
 8018354:	b29b      	uxth	r3, r3
 8018356:	4413      	add	r3, r2
 8018358:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801835a:	3301      	adds	r3, #1
 801835c:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 801835e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018362:	b29c      	uxth	r4, r3
 8018364:	69fb      	ldr	r3, [r7, #28]
 8018366:	3301      	adds	r3, #1
 8018368:	011b      	lsls	r3, r3, #4
 801836a:	4a92      	ldr	r2, [pc, #584]	; (80185b4 <updateUint16Item+0xfcc>)
 801836c:	4413      	add	r3, r2
 801836e:	4618      	mov	r0, r3
 8018370:	f7e7 ffc0 	bl	80002f4 <strlen>
 8018374:	4603      	mov	r3, r0
 8018376:	b29a      	uxth	r2, r3
 8018378:	4b8f      	ldr	r3, [pc, #572]	; (80185b8 <updateUint16Item+0xfd0>)
 801837a:	889b      	ldrh	r3, [r3, #4]
 801837c:	fb12 f303 	smulbb	r3, r2, r3
 8018380:	b29b      	uxth	r3, r3
 8018382:	4423      	add	r3, r4
 8018384:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8018386:	3301      	adds	r3, #1
 8018388:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801838a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801838e:	b29a      	uxth	r2, r3
 8018390:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018394:	b299      	uxth	r1, r3
 8018396:	69fb      	ldr	r3, [r7, #28]
 8018398:	b29b      	uxth	r3, r3
 801839a:	fb11 f303 	smulbb	r3, r1, r3
 801839e:	b29b      	uxth	r3, r3
 80183a0:	4413      	add	r3, r2
 80183a2:	b29a      	uxth	r2, r3
 80183a4:	4b84      	ldr	r3, [pc, #528]	; (80185b8 <updateUint16Item+0xfd0>)
 80183a6:	88db      	ldrh	r3, [r3, #6]
 80183a8:	4413      	add	r3, r2
 80183aa:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 80183ac:	3301      	adds	r3, #1
 80183ae:	b29b      	uxth	r3, r3
 80183b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80183b4:	9200      	str	r2, [sp, #0]
 80183b6:	4602      	mov	r2, r0
 80183b8:	4631      	mov	r1, r6
 80183ba:	4628      	mov	r0, r5
 80183bc:	f7f6 f8b0 	bl	800e520 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80183c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80183c4:	b29b      	uxth	r3, r3
 80183c6:	3301      	adds	r3, #1
 80183c8:	b298      	uxth	r0, r3
 80183ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80183ce:	b29a      	uxth	r2, r3
 80183d0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80183d4:	b299      	uxth	r1, r3
 80183d6:	69fb      	ldr	r3, [r7, #28]
 80183d8:	b29b      	uxth	r3, r3
 80183da:	fb11 f303 	smulbb	r3, r1, r3
 80183de:	b29b      	uxth	r3, r3
 80183e0:	4413      	add	r3, r2
 80183e2:	b29b      	uxth	r3, r3
 80183e4:	3301      	adds	r3, #1
 80183e6:	b299      	uxth	r1, r3
								uint16Item.itemsArray[i], &Font12, WHITE,  BLACK);
 80183e8:	69fb      	ldr	r3, [r7, #28]
 80183ea:	3301      	adds	r3, #1
 80183ec:	011b      	lsls	r3, r3, #4
 80183ee:	4a71      	ldr	r2, [pc, #452]	; (80185b4 <updateUint16Item+0xfcc>)
 80183f0:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80183f2:	2300      	movs	r3, #0
 80183f4:	9301      	str	r3, [sp, #4]
 80183f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80183fa:	9300      	str	r3, [sp, #0]
 80183fc:	4b6e      	ldr	r3, [pc, #440]	; (80185b8 <updateUint16Item+0xfd0>)
 80183fe:	f7f6 fcad 	bl	800ed5c <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018402:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018406:	b29a      	uxth	r2, r3
 8018408:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801840c:	085b      	lsrs	r3, r3, #1
 801840e:	b2db      	uxtb	r3, r3
 8018410:	b29b      	uxth	r3, r3
 8018412:	4413      	add	r3, r2
 8018414:	b29b      	uxth	r3, r3
 8018416:	3301      	adds	r3, #1
 8018418:	b298      	uxth	r0, r3
 801841a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801841e:	b29a      	uxth	r2, r3
 8018420:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018424:	b299      	uxth	r1, r3
 8018426:	69fb      	ldr	r3, [r7, #28]
 8018428:	b29b      	uxth	r3, r3
 801842a:	fb11 f303 	smulbb	r3, r1, r3
 801842e:	b29b      	uxth	r3, r3
 8018430:	4413      	add	r3, r2
 8018432:	b29b      	uxth	r3, r3
 8018434:	3301      	adds	r3, #1
 8018436:	b299      	uxth	r1, r3
 8018438:	f107 020c 	add.w	r2, r7, #12
 801843c:	2300      	movs	r3, #0
 801843e:	9301      	str	r3, [sp, #4]
 8018440:	f24c 6318 	movw	r3, #50712	; 0xc618
 8018444:	9300      	str	r3, [sp, #0]
 8018446:	4b5c      	ldr	r3, [pc, #368]	; (80185b8 <updateUint16Item+0xfd0>)
 8018448:	f7f6 fc88 	bl	800ed5c <Paint_DrawString_EN>
 801844c:	e147      	b.n	80186de <updateUint16Item+0x10f6>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == DOWN)
 801844e:	79fb      	ldrb	r3, [r7, #7]
 8018450:	2b01      	cmp	r3, #1
 8018452:	d155      	bne.n	8018500 <updateUint16Item+0xf18>
					{
						if (multiplierIndex >= 1)
 8018454:	4b59      	ldr	r3, [pc, #356]	; (80185bc <updateUint16Item+0xfd4>)
 8018456:	781b      	ldrb	r3, [r3, #0]
 8018458:	2b00      	cmp	r3, #0
 801845a:	d017      	beq.n	801848c <updateUint16Item+0xea4>
						{
							multiplierIndex = fmax(multiplierIndex - 1, 0);
 801845c:	4b57      	ldr	r3, [pc, #348]	; (80185bc <updateUint16Item+0xfd4>)
 801845e:	781b      	ldrb	r3, [r3, #0]
 8018460:	3b01      	subs	r3, #1
 8018462:	ee07 3a90 	vmov	s15, r3
 8018466:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801846a:	ed9f 1b4f 	vldr	d1, [pc, #316]	; 80185a8 <updateUint16Item+0xfc0>
 801846e:	eeb0 0b47 	vmov.f64	d0, d7
 8018472:	f006 fe7f 	bl	801f174 <fmax>
 8018476:	eeb0 7b40 	vmov.f64	d7, d0
 801847a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 801847e:	edc7 7a00 	vstr	s15, [r7]
 8018482:	683b      	ldr	r3, [r7, #0]
 8018484:	b2da      	uxtb	r2, r3
 8018486:	4b4d      	ldr	r3, [pc, #308]	; (80185bc <updateUint16Item+0xfd4>)
 8018488:	701a      	strb	r2, [r3, #0]
 801848a:	e002      	b.n	8018492 <updateUint16Item+0xeaa>
						}
						else
						{
							multiplierIndex = 0;
 801848c:	4b4b      	ldr	r3, [pc, #300]	; (80185bc <updateUint16Item+0xfd4>)
 801848e:	2200      	movs	r2, #0
 8018490:	701a      	strb	r2, [r3, #0]
						}
						uint16Item.deltaMultiplier = uint16MultiplierArray[multiplierIndex];
 8018492:	4b4a      	ldr	r3, [pc, #296]	; (80185bc <updateUint16Item+0xfd4>)
 8018494:	781b      	ldrb	r3, [r3, #0]
 8018496:	461a      	mov	r2, r3
 8018498:	4b49      	ldr	r3, [pc, #292]	; (80185c0 <updateUint16Item+0xfd8>)
 801849a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801849e:	4b45      	ldr	r3, [pc, #276]	; (80185b4 <updateUint16Item+0xfcc>)
 80184a0:	819a      	strh	r2, [r3, #12]
						sprintf(localString,"%04d",uint16Item.deltaMultiplier);
 80184a2:	4b44      	ldr	r3, [pc, #272]	; (80185b4 <updateUint16Item+0xfcc>)
 80184a4:	899b      	ldrh	r3, [r3, #12]
 80184a6:	461a      	mov	r2, r3
 80184a8:	f107 030c 	add.w	r3, r7, #12
 80184ac:	4945      	ldr	r1, [pc, #276]	; (80185c4 <updateUint16Item+0xfdc>)
 80184ae:	4618      	mov	r0, r3
 80184b0:	f003 fad8 	bl	801ba64 <siprintf>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80184b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80184b8:	b29a      	uxth	r2, r3
 80184ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80184be:	085b      	lsrs	r3, r3, #1
 80184c0:	b2db      	uxtb	r3, r3
 80184c2:	b29b      	uxth	r3, r3
 80184c4:	4413      	add	r3, r2
 80184c6:	b29b      	uxth	r3, r3
 80184c8:	3301      	adds	r3, #1
 80184ca:	b298      	uxth	r0, r3
 80184cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80184d0:	b29a      	uxth	r2, r3
 80184d2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80184d6:	b299      	uxth	r1, r3
 80184d8:	69fb      	ldr	r3, [r7, #28]
 80184da:	b29b      	uxth	r3, r3
 80184dc:	fb11 f303 	smulbb	r3, r1, r3
 80184e0:	b29b      	uxth	r3, r3
 80184e2:	4413      	add	r3, r2
 80184e4:	b29b      	uxth	r3, r3
 80184e6:	3301      	adds	r3, #1
 80184e8:	b299      	uxth	r1, r3
 80184ea:	f107 020c 	add.w	r2, r7, #12
 80184ee:	2300      	movs	r3, #0
 80184f0:	9301      	str	r3, [sp, #4]
 80184f2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80184f6:	9300      	str	r3, [sp, #0]
 80184f8:	4b2f      	ldr	r3, [pc, #188]	; (80185b8 <updateUint16Item+0xfd0>)
 80184fa:	f7f6 fc2f 	bl	800ed5c <Paint_DrawString_EN>
 80184fe:	e0ee      	b.n	80186de <updateUint16Item+0x10f6>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == UP)
 8018500:	79fb      	ldrb	r3, [r7, #7]
 8018502:	2b00      	cmp	r3, #0
 8018504:	f040 80eb 	bne.w	80186de <updateUint16Item+0x10f6>
					{
						multiplierIndex = fmin(multiplierIndex + 1, 7);
 8018508:	4b2c      	ldr	r3, [pc, #176]	; (80185bc <updateUint16Item+0xfd4>)
 801850a:	781b      	ldrb	r3, [r3, #0]
 801850c:	3301      	adds	r3, #1
 801850e:	ee07 3a90 	vmov	s15, r3
 8018512:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8018516:	eeb1 1b0c 	vmov.f64	d1, #28	; 0x40e00000  7.0
 801851a:	eeb0 0b47 	vmov.f64	d0, d7
 801851e:	f006 fe44 	bl	801f1aa <fmin>
 8018522:	eeb0 7b40 	vmov.f64	d7, d0
 8018526:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 801852a:	edc7 7a00 	vstr	s15, [r7]
 801852e:	683b      	ldr	r3, [r7, #0]
 8018530:	b2da      	uxtb	r2, r3
 8018532:	4b22      	ldr	r3, [pc, #136]	; (80185bc <updateUint16Item+0xfd4>)
 8018534:	701a      	strb	r2, [r3, #0]
						uint16Item.deltaMultiplier = uint16MultiplierArray[multiplierIndex];
 8018536:	4b21      	ldr	r3, [pc, #132]	; (80185bc <updateUint16Item+0xfd4>)
 8018538:	781b      	ldrb	r3, [r3, #0]
 801853a:	461a      	mov	r2, r3
 801853c:	4b20      	ldr	r3, [pc, #128]	; (80185c0 <updateUint16Item+0xfd8>)
 801853e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8018542:	4b1c      	ldr	r3, [pc, #112]	; (80185b4 <updateUint16Item+0xfcc>)
 8018544:	819a      	strh	r2, [r3, #12]
						sprintf(localString,"%04d",uint16Item.deltaMultiplier);
 8018546:	4b1b      	ldr	r3, [pc, #108]	; (80185b4 <updateUint16Item+0xfcc>)
 8018548:	899b      	ldrh	r3, [r3, #12]
 801854a:	461a      	mov	r2, r3
 801854c:	f107 030c 	add.w	r3, r7, #12
 8018550:	491c      	ldr	r1, [pc, #112]	; (80185c4 <updateUint16Item+0xfdc>)
 8018552:	4618      	mov	r0, r3
 8018554:	f003 fa86 	bl	801ba64 <siprintf>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801855c:	b29a      	uxth	r2, r3
 801855e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018562:	085b      	lsrs	r3, r3, #1
 8018564:	b2db      	uxtb	r3, r3
 8018566:	b29b      	uxth	r3, r3
 8018568:	4413      	add	r3, r2
 801856a:	b29b      	uxth	r3, r3
 801856c:	3301      	adds	r3, #1
 801856e:	b298      	uxth	r0, r3
 8018570:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018574:	b29a      	uxth	r2, r3
 8018576:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801857a:	b299      	uxth	r1, r3
 801857c:	69fb      	ldr	r3, [r7, #28]
 801857e:	b29b      	uxth	r3, r3
 8018580:	fb11 f303 	smulbb	r3, r1, r3
 8018584:	b29b      	uxth	r3, r3
 8018586:	4413      	add	r3, r2
 8018588:	b29b      	uxth	r3, r3
 801858a:	3301      	adds	r3, #1
 801858c:	b299      	uxth	r1, r3
 801858e:	f107 020c 	add.w	r2, r7, #12
 8018592:	2300      	movs	r3, #0
 8018594:	9301      	str	r3, [sp, #4]
 8018596:	f24c 6318 	movw	r3, #50712	; 0xc618
 801859a:	9300      	str	r3, [sp, #0]
 801859c:	4b06      	ldr	r3, [pc, #24]	; (80185b8 <updateUint16Item+0xfd0>)
 801859e:	f7f6 fbdd 	bl	800ed5c <Paint_DrawString_EN>
 80185a2:	e09c      	b.n	80186de <updateUint16Item+0x10f6>
 80185a4:	f3af 8000 	nop.w
	...
 80185b0:	2400ac84 	.word	0x2400ac84
 80185b4:	2400fe04 	.word	0x2400fe04
 80185b8:	24000030 	.word	0x24000030
 80185bc:	2400a110 	.word	0x2400a110
 80185c0:	2400a114 	.word	0x2400a114
 80185c4:	0801f98c 	.word	0x0801f98c
					//									localString, &Font12, WHITE,  BLACK);
					//						}
				}
				else
				{
					Paint_ClearWindows(MenuRectangleStartX + 1,
 80185c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80185cc:	b29b      	uxth	r3, r3
 80185ce:	3301      	adds	r3, #1
 80185d0:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80185d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80185d6:	b29a      	uxth	r2, r3
 80185d8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80185dc:	b299      	uxth	r1, r3
 80185de:	69fb      	ldr	r3, [r7, #28]
 80185e0:	b29b      	uxth	r3, r3
 80185e2:	fb11 f303 	smulbb	r3, r1, r3
 80185e6:	b29b      	uxth	r3, r3
 80185e8:	4413      	add	r3, r2
 80185ea:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 80185ec:	3301      	adds	r3, #1
 80185ee:	b29e      	uxth	r6, r3
							MenuRectangleStartX + 1 + strlen(uint16Item.itemsArray[i]) * Font12.Width,
 80185f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80185f4:	b29c      	uxth	r4, r3
 80185f6:	69fb      	ldr	r3, [r7, #28]
 80185f8:	3301      	adds	r3, #1
 80185fa:	011b      	lsls	r3, r3, #4
 80185fc:	4a9c      	ldr	r2, [pc, #624]	; (8018870 <updateUint16Item+0x1288>)
 80185fe:	4413      	add	r3, r2
 8018600:	4618      	mov	r0, r3
 8018602:	f7e7 fe77 	bl	80002f4 <strlen>
 8018606:	4603      	mov	r3, r0
 8018608:	b29a      	uxth	r2, r3
 801860a:	4b9a      	ldr	r3, [pc, #616]	; (8018874 <updateUint16Item+0x128c>)
 801860c:	889b      	ldrh	r3, [r3, #4]
 801860e:	fb12 f303 	smulbb	r3, r2, r3
 8018612:	b29b      	uxth	r3, r3
 8018614:	4423      	add	r3, r4
 8018616:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 8018618:	3301      	adds	r3, #1
 801861a:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801861c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018620:	b29a      	uxth	r2, r3
 8018622:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018626:	b299      	uxth	r1, r3
 8018628:	69fb      	ldr	r3, [r7, #28]
 801862a:	b29b      	uxth	r3, r3
 801862c:	fb11 f303 	smulbb	r3, r1, r3
 8018630:	b29b      	uxth	r3, r3
 8018632:	4413      	add	r3, r2
 8018634:	b29a      	uxth	r2, r3
 8018636:	4b8f      	ldr	r3, [pc, #572]	; (8018874 <updateUint16Item+0x128c>)
 8018638:	88db      	ldrh	r3, [r3, #6]
 801863a:	4413      	add	r3, r2
 801863c:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 801863e:	3301      	adds	r3, #1
 8018640:	b29b      	uxth	r3, r3
 8018642:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018646:	9200      	str	r2, [sp, #0]
 8018648:	4602      	mov	r2, r0
 801864a:	4631      	mov	r1, r6
 801864c:	4628      	mov	r0, r5
 801864e:	f7f5 ff67 	bl	800e520 <Paint_ClearWindows>
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018652:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018656:	b29b      	uxth	r3, r3
 8018658:	3301      	adds	r3, #1
 801865a:	b298      	uxth	r0, r3
 801865c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018660:	b29a      	uxth	r2, r3
 8018662:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018666:	b299      	uxth	r1, r3
 8018668:	69fb      	ldr	r3, [r7, #28]
 801866a:	b29b      	uxth	r3, r3
 801866c:	fb11 f303 	smulbb	r3, r1, r3
 8018670:	b29b      	uxth	r3, r3
 8018672:	4413      	add	r3, r2
 8018674:	b29b      	uxth	r3, r3
 8018676:	3301      	adds	r3, #1
 8018678:	b299      	uxth	r1, r3
							uint16Item.itemsArray[i], &Font12, WHITE,  BLACK);
 801867a:	69fb      	ldr	r3, [r7, #28]
 801867c:	3301      	adds	r3, #1
 801867e:	011b      	lsls	r3, r3, #4
 8018680:	4a7b      	ldr	r2, [pc, #492]	; (8018870 <updateUint16Item+0x1288>)
 8018682:	441a      	add	r2, r3
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018684:	2300      	movs	r3, #0
 8018686:	9301      	str	r3, [sp, #4]
 8018688:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801868c:	9300      	str	r3, [sp, #0]
 801868e:	4b79      	ldr	r3, [pc, #484]	; (8018874 <updateUint16Item+0x128c>)
 8018690:	f7f6 fb64 	bl	800ed5c <Paint_DrawString_EN>
					Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018698:	b29a      	uxth	r2, r3
 801869a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801869e:	085b      	lsrs	r3, r3, #1
 80186a0:	b2db      	uxtb	r3, r3
 80186a2:	b29b      	uxth	r3, r3
 80186a4:	4413      	add	r3, r2
 80186a6:	b29b      	uxth	r3, r3
 80186a8:	3301      	adds	r3, #1
 80186aa:	b298      	uxth	r0, r3
 80186ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80186b0:	b29a      	uxth	r2, r3
 80186b2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80186b6:	b299      	uxth	r1, r3
 80186b8:	69fb      	ldr	r3, [r7, #28]
 80186ba:	b29b      	uxth	r3, r3
 80186bc:	fb11 f303 	smulbb	r3, r1, r3
 80186c0:	b29b      	uxth	r3, r3
 80186c2:	4413      	add	r3, r2
 80186c4:	b29b      	uxth	r3, r3
 80186c6:	3301      	adds	r3, #1
 80186c8:	b299      	uxth	r1, r3
 80186ca:	f107 020c 	add.w	r2, r7, #12
 80186ce:	2300      	movs	r3, #0
 80186d0:	9301      	str	r3, [sp, #4]
 80186d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80186d6:	9300      	str	r3, [sp, #0]
 80186d8:	4b66      	ldr	r3, [pc, #408]	; (8018874 <updateUint16Item+0x128c>)
 80186da:	f7f6 fb3f 	bl	800ed5c <Paint_DrawString_EN>
			}
		}
		//			Paint_DrawRectangle( HorizontalMenuRectangleStartX + HorizontalMenuRectangleWidth / 2, HorizontalMenuRectangleStartY + HorizontalMenuRectangleHeight * (i + 1),
		//					HorizontalMenuRectangleStartX + HorizontalMenuRectangleWidth, HorizontalMenuRectangleStartY + HorizontalMenuRectangleHeight * (i + 2),
		//					BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
		if ( (i >= uint16Item.numberOfItemsInPage - 2) && (i < uint16Item.numberOfItemsInPage) )
 80186de:	4b64      	ldr	r3, [pc, #400]	; (8018870 <updateUint16Item+0x1288>)
 80186e0:	7bdb      	ldrb	r3, [r3, #15]
 80186e2:	3b02      	subs	r3, #2
 80186e4:	69fa      	ldr	r2, [r7, #28]
 80186e6:	429a      	cmp	r2, r3
 80186e8:	f2c0 8299 	blt.w	8018c1e <updateUint16Item+0x1636>
 80186ec:	4b60      	ldr	r3, [pc, #384]	; (8018870 <updateUint16Item+0x1288>)
 80186ee:	7bdb      	ldrb	r3, [r3, #15]
 80186f0:	461a      	mov	r2, r3
 80186f2:	69fb      	ldr	r3, [r7, #28]
 80186f4:	4293      	cmp	r3, r2
 80186f6:	f280 8292 	bge.w	8018c1e <updateUint16Item+0x1636>
		{
			if (howToDraw == FULL)
 80186fa:	79fb      	ldrb	r3, [r7, #7]
 80186fc:	2b02      	cmp	r3, #2
 80186fe:	f040 8084 	bne.w	801880a <updateUint16Item+0x1222>
			{
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 8018702:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018706:	b298      	uxth	r0, r3
 8018708:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801870c:	b29a      	uxth	r2, r3
 801870e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018712:	b299      	uxth	r1, r3
 8018714:	69fb      	ldr	r3, [r7, #28]
 8018716:	b29b      	uxth	r3, r3
 8018718:	fb11 f303 	smulbb	r3, r1, r3
 801871c:	b29b      	uxth	r3, r3
 801871e:	4413      	add	r3, r2
 8018720:	b29c      	uxth	r4, r3
 8018722:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018726:	b29a      	uxth	r2, r3
 8018728:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801872c:	b29b      	uxth	r3, r3
 801872e:	4413      	add	r3, r2
 8018730:	b29d      	uxth	r5, r3
 8018732:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018736:	b29a      	uxth	r2, r3
 8018738:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801873c:	b299      	uxth	r1, r3
						MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 801873e:	69fb      	ldr	r3, [r7, #28]
 8018740:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 8018742:	b29b      	uxth	r3, r3
 8018744:	fb11 f303 	smulbb	r3, r1, r3
 8018748:	b29b      	uxth	r3, r3
 801874a:	4413      	add	r3, r2
 801874c:	b29b      	uxth	r3, r3
 801874e:	2200      	movs	r2, #0
 8018750:	9202      	str	r2, [sp, #8]
 8018752:	2201      	movs	r2, #1
 8018754:	9201      	str	r2, [sp, #4]
 8018756:	2200      	movs	r2, #0
 8018758:	9200      	str	r2, [sp, #0]
 801875a:	462a      	mov	r2, r5
 801875c:	4621      	mov	r1, r4
 801875e:	f7f6 f859 	bl	800e814 <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
				if (currentCursorPosition.cursorPosition == i)
 8018762:	4b45      	ldr	r3, [pc, #276]	; (8018878 <updateUint16Item+0x1290>)
 8018764:	781b      	ldrb	r3, [r3, #0]
 8018766:	461a      	mov	r2, r3
 8018768:	69fb      	ldr	r3, [r7, #28]
 801876a:	4293      	cmp	r3, r2
 801876c:	d126      	bne.n	80187bc <updateUint16Item+0x11d4>
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801876e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018772:	b29c      	uxth	r4, r3
 8018774:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018778:	b29a      	uxth	r2, r3
 801877a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801877e:	b299      	uxth	r1, r3
 8018780:	69fb      	ldr	r3, [r7, #28]
 8018782:	b29b      	uxth	r3, r3
 8018784:	fb11 f303 	smulbb	r3, r1, r3
 8018788:	b29b      	uxth	r3, r3
 801878a:	4413      	add	r3, r2
 801878c:	b29b      	uxth	r3, r3
 801878e:	3301      	adds	r3, #1
 8018790:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[i], BLACK, LGRAY, 16, Font12);
 8018792:	69fb      	ldr	r3, [r7, #28]
 8018794:	3301      	adds	r3, #1
 8018796:	011b      	lsls	r3, r3, #4
 8018798:	4a35      	ldr	r2, [pc, #212]	; (8018870 <updateUint16Item+0x1288>)
 801879a:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801879c:	4935      	ldr	r1, [pc, #212]	; (8018874 <updateUint16Item+0x128c>)
 801879e:	ab02      	add	r3, sp, #8
 80187a0:	c903      	ldmia	r1, {r0, r1}
 80187a2:	e883 0003 	stmia.w	r3, {r0, r1}
 80187a6:	2310      	movs	r3, #16
 80187a8:	9301      	str	r3, [sp, #4]
 80187aa:	f24c 6318 	movw	r3, #50712	; 0xc618
 80187ae:	9300      	str	r3, [sp, #0]
 80187b0:	2300      	movs	r3, #0
 80187b2:	4629      	mov	r1, r5
 80187b4:	4620      	mov	r0, r4
 80187b6:	f7fd fe1f 	bl	80163f8 <centeredString>
 80187ba:	e230      	b.n	8018c1e <updateUint16Item+0x1636>
				}
				else
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 80187bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80187c0:	b29c      	uxth	r4, r3
 80187c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80187c6:	b29a      	uxth	r2, r3
 80187c8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80187cc:	b299      	uxth	r1, r3
 80187ce:	69fb      	ldr	r3, [r7, #28]
 80187d0:	b29b      	uxth	r3, r3
 80187d2:	fb11 f303 	smulbb	r3, r1, r3
 80187d6:	b29b      	uxth	r3, r3
 80187d8:	4413      	add	r3, r2
 80187da:	b29b      	uxth	r3, r3
 80187dc:	3301      	adds	r3, #1
 80187de:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[i], BLACK, WHITE, 16, Font12);
 80187e0:	69fb      	ldr	r3, [r7, #28]
 80187e2:	3301      	adds	r3, #1
 80187e4:	011b      	lsls	r3, r3, #4
 80187e6:	4a22      	ldr	r2, [pc, #136]	; (8018870 <updateUint16Item+0x1288>)
 80187e8:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 80187ea:	4922      	ldr	r1, [pc, #136]	; (8018874 <updateUint16Item+0x128c>)
 80187ec:	ab02      	add	r3, sp, #8
 80187ee:	c903      	ldmia	r1, {r0, r1}
 80187f0:	e883 0003 	stmia.w	r3, {r0, r1}
 80187f4:	2310      	movs	r3, #16
 80187f6:	9301      	str	r3, [sp, #4]
 80187f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80187fc:	9300      	str	r3, [sp, #0]
 80187fe:	2300      	movs	r3, #0
 8018800:	4629      	mov	r1, r5
 8018802:	4620      	mov	r0, r4
 8018804:	f7fd fdf8 	bl	80163f8 <centeredString>
 8018808:	e209      	b.n	8018c1e <updateUint16Item+0x1636>
				}
			}
			else if (howToDraw == DOWN)
 801880a:	79fb      	ldrb	r3, [r7, #7]
 801880c:	2b01      	cmp	r3, #1
 801880e:	f040 80d1 	bne.w	80189b4 <updateUint16Item+0x13cc>
			{
				if ( (currentCursorPosition.cursorPosition == 4) && (i == 4) )
 8018812:	4b19      	ldr	r3, [pc, #100]	; (8018878 <updateUint16Item+0x1290>)
 8018814:	781b      	ldrb	r3, [r3, #0]
 8018816:	2b04      	cmp	r3, #4
 8018818:	d130      	bne.n	801887c <updateUint16Item+0x1294>
 801881a:	69fb      	ldr	r3, [r7, #28]
 801881c:	2b04      	cmp	r3, #4
 801881e:	d12d      	bne.n	801887c <updateUint16Item+0x1294>
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 8018820:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018824:	b29c      	uxth	r4, r3
 8018826:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801882a:	b29a      	uxth	r2, r3
 801882c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018830:	b299      	uxth	r1, r3
 8018832:	69fb      	ldr	r3, [r7, #28]
 8018834:	b29b      	uxth	r3, r3
 8018836:	fb11 f303 	smulbb	r3, r1, r3
 801883a:	b29b      	uxth	r3, r3
 801883c:	4413      	add	r3, r2
 801883e:	b29b      	uxth	r3, r3
 8018840:	3301      	adds	r3, #1
 8018842:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[i], BLACK, LGRAY, 16, Font12);
 8018844:	69fb      	ldr	r3, [r7, #28]
 8018846:	3301      	adds	r3, #1
 8018848:	011b      	lsls	r3, r3, #4
 801884a:	4a09      	ldr	r2, [pc, #36]	; (8018870 <updateUint16Item+0x1288>)
 801884c:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 801884e:	4909      	ldr	r1, [pc, #36]	; (8018874 <updateUint16Item+0x128c>)
 8018850:	ab02      	add	r3, sp, #8
 8018852:	c903      	ldmia	r1, {r0, r1}
 8018854:	e883 0003 	stmia.w	r3, {r0, r1}
 8018858:	2310      	movs	r3, #16
 801885a:	9301      	str	r3, [sp, #4]
 801885c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8018860:	9300      	str	r3, [sp, #0]
 8018862:	2300      	movs	r3, #0
 8018864:	4629      	mov	r1, r5
 8018866:	4620      	mov	r0, r4
 8018868:	f7fd fdc6 	bl	80163f8 <centeredString>
 801886c:	e1d7      	b.n	8018c1e <updateUint16Item+0x1636>
 801886e:	bf00      	nop
 8018870:	2400fe04 	.word	0x2400fe04
 8018874:	24000030 	.word	0x24000030
 8018878:	2400ac84 	.word	0x2400ac84
				}
				else if ( (currentCursorPosition.cursorPosition == 5) && (i == 5) )
 801887c:	4b90      	ldr	r3, [pc, #576]	; (8018ac0 <updateUint16Item+0x14d8>)
 801887e:	781b      	ldrb	r3, [r3, #0]
 8018880:	2b05      	cmp	r3, #5
 8018882:	f040 81cc 	bne.w	8018c1e <updateUint16Item+0x1636>
 8018886:	69fb      	ldr	r3, [r7, #28]
 8018888:	2b05      	cmp	r3, #5
 801888a:	f040 81c8 	bne.w	8018c1e <updateUint16Item+0x1636>
				{
					Paint_ClearWindows(DisplayCenterWidth,
 801888e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018892:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 8018894:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018898:	b29a      	uxth	r2, r3
 801889a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801889e:	b299      	uxth	r1, r3
 80188a0:	69fb      	ldr	r3, [r7, #28]
 80188a2:	3b01      	subs	r3, #1
 80188a4:	b29b      	uxth	r3, r3
 80188a6:	fb11 f303 	smulbb	r3, r1, r3
 80188aa:	b29b      	uxth	r3, r3
 80188ac:	4413      	add	r3, r2
 80188ae:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth,
 80188b0:	3301      	adds	r3, #1
 80188b2:	b29e      	uxth	r6, r3
 80188b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80188b8:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(uint16Item.itemsArray[i - 1]) * Font12.Width,
 80188ba:	69fb      	ldr	r3, [r7, #28]
 80188bc:	3b01      	subs	r3, #1
 80188be:	3301      	adds	r3, #1
 80188c0:	011b      	lsls	r3, r3, #4
 80188c2:	4a80      	ldr	r2, [pc, #512]	; (8018ac4 <updateUint16Item+0x14dc>)
 80188c4:	4413      	add	r3, r2
 80188c6:	4618      	mov	r0, r3
 80188c8:	f7e7 fd14 	bl	80002f4 <strlen>
 80188cc:	4603      	mov	r3, r0
					Paint_ClearWindows(DisplayCenterWidth,
 80188ce:	b29a      	uxth	r2, r3
							DisplayCenterWidth + strlen(uint16Item.itemsArray[i - 1]) * Font12.Width,
 80188d0:	4b7d      	ldr	r3, [pc, #500]	; (8018ac8 <updateUint16Item+0x14e0>)
 80188d2:	889b      	ldrh	r3, [r3, #4]
					Paint_ClearWindows(DisplayCenterWidth,
 80188d4:	fb12 f303 	smulbb	r3, r2, r3
 80188d8:	b29b      	uxth	r3, r3
 80188da:	4423      	add	r3, r4
 80188dc:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1 + Font12.Height, WHITE);
 80188de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80188e2:	b29a      	uxth	r2, r3
 80188e4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80188e8:	b299      	uxth	r1, r3
 80188ea:	69fb      	ldr	r3, [r7, #28]
 80188ec:	3b01      	subs	r3, #1
 80188ee:	b29b      	uxth	r3, r3
 80188f0:	fb11 f303 	smulbb	r3, r1, r3
 80188f4:	b29b      	uxth	r3, r3
 80188f6:	4413      	add	r3, r2
 80188f8:	b29a      	uxth	r2, r3
 80188fa:	4b73      	ldr	r3, [pc, #460]	; (8018ac8 <updateUint16Item+0x14e0>)
 80188fc:	88db      	ldrh	r3, [r3, #6]
 80188fe:	4413      	add	r3, r2
 8018900:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth,
 8018902:	3301      	adds	r3, #1
 8018904:	b29b      	uxth	r3, r3
 8018906:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801890a:	9200      	str	r2, [sp, #0]
 801890c:	4602      	mov	r2, r0
 801890e:	4631      	mov	r1, r6
 8018910:	4628      	mov	r0, r5
 8018912:	f7f5 fe05 	bl	800e520 <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 8018916:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801891a:	b29c      	uxth	r4, r3
 801891c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018920:	b29a      	uxth	r2, r3
 8018922:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018926:	b299      	uxth	r1, r3
 8018928:	69fb      	ldr	r3, [r7, #28]
 801892a:	3b01      	subs	r3, #1
 801892c:	b29b      	uxth	r3, r3
 801892e:	fb11 f303 	smulbb	r3, r1, r3
 8018932:	b29b      	uxth	r3, r3
 8018934:	4413      	add	r3, r2
 8018936:	b29b      	uxth	r3, r3
 8018938:	3301      	adds	r3, #1
 801893a:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[(i - 1)], BLACK, WHITE, 16, Font12);
 801893c:	69fb      	ldr	r3, [r7, #28]
 801893e:	3b01      	subs	r3, #1
 8018940:	3301      	adds	r3, #1
 8018942:	011b      	lsls	r3, r3, #4
 8018944:	4a5f      	ldr	r2, [pc, #380]	; (8018ac4 <updateUint16Item+0x14dc>)
 8018946:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 8018948:	495f      	ldr	r1, [pc, #380]	; (8018ac8 <updateUint16Item+0x14e0>)
 801894a:	ab02      	add	r3, sp, #8
 801894c:	c903      	ldmia	r1, {r0, r1}
 801894e:	e883 0003 	stmia.w	r3, {r0, r1}
 8018952:	2310      	movs	r3, #16
 8018954:	9301      	str	r3, [sp, #4]
 8018956:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801895a:	9300      	str	r3, [sp, #0]
 801895c:	2300      	movs	r3, #0
 801895e:	4629      	mov	r1, r5
 8018960:	4620      	mov	r0, r4
 8018962:	f7fd fd49 	bl	80163f8 <centeredString>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 8018966:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801896a:	b29c      	uxth	r4, r3
 801896c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018970:	b29a      	uxth	r2, r3
 8018972:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018976:	b299      	uxth	r1, r3
 8018978:	69fb      	ldr	r3, [r7, #28]
 801897a:	b29b      	uxth	r3, r3
 801897c:	fb11 f303 	smulbb	r3, r1, r3
 8018980:	b29b      	uxth	r3, r3
 8018982:	4413      	add	r3, r2
 8018984:	b29b      	uxth	r3, r3
 8018986:	3301      	adds	r3, #1
 8018988:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[i], BLACK, LGRAY, 16, Font12);
 801898a:	69fb      	ldr	r3, [r7, #28]
 801898c:	3301      	adds	r3, #1
 801898e:	011b      	lsls	r3, r3, #4
 8018990:	4a4c      	ldr	r2, [pc, #304]	; (8018ac4 <updateUint16Item+0x14dc>)
 8018992:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 8018994:	494c      	ldr	r1, [pc, #304]	; (8018ac8 <updateUint16Item+0x14e0>)
 8018996:	ab02      	add	r3, sp, #8
 8018998:	c903      	ldmia	r1, {r0, r1}
 801899a:	e883 0003 	stmia.w	r3, {r0, r1}
 801899e:	2310      	movs	r3, #16
 80189a0:	9301      	str	r3, [sp, #4]
 80189a2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80189a6:	9300      	str	r3, [sp, #0]
 80189a8:	2300      	movs	r3, #0
 80189aa:	4629      	mov	r1, r5
 80189ac:	4620      	mov	r0, r4
 80189ae:	f7fd fd23 	bl	80163f8 <centeredString>
 80189b2:	e134      	b.n	8018c1e <updateUint16Item+0x1636>
				}
			}
			else if (howToDraw == UP)
 80189b4:	79fb      	ldrb	r3, [r7, #7]
 80189b6:	2b00      	cmp	r3, #0
 80189b8:	f040 8131 	bne.w	8018c1e <updateUint16Item+0x1636>
			{
				if ( (currentCursorPosition.cursorPosition == 3) && (i == 4) )
 80189bc:	4b40      	ldr	r3, [pc, #256]	; (8018ac0 <updateUint16Item+0x14d8>)
 80189be:	781b      	ldrb	r3, [r3, #0]
 80189c0:	2b03      	cmp	r3, #3
 80189c2:	f040 8083 	bne.w	8018acc <updateUint16Item+0x14e4>
 80189c6:	69fb      	ldr	r3, [r7, #28]
 80189c8:	2b04      	cmp	r3, #4
 80189ca:	d17f      	bne.n	8018acc <updateUint16Item+0x14e4>
				{
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 80189cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80189d0:	b29c      	uxth	r4, r3
 80189d2:	69fb      	ldr	r3, [r7, #28]
 80189d4:	3301      	adds	r3, #1
 80189d6:	011b      	lsls	r3, r3, #4
 80189d8:	4a3a      	ldr	r2, [pc, #232]	; (8018ac4 <updateUint16Item+0x14dc>)
 80189da:	4413      	add	r3, r2
 80189dc:	4618      	mov	r0, r3
 80189de:	f7e7 fc89 	bl	80002f4 <strlen>
 80189e2:	4603      	mov	r3, r0
 80189e4:	4a38      	ldr	r2, [pc, #224]	; (8018ac8 <updateUint16Item+0x14e0>)
 80189e6:	8892      	ldrh	r2, [r2, #4]
 80189e8:	fb02 f303 	mul.w	r3, r2, r3
 80189ec:	085b      	lsrs	r3, r3, #1
 80189ee:	b29b      	uxth	r3, r3
 80189f0:	1ae3      	subs	r3, r4, r3
 80189f2:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80189f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80189f8:	b29a      	uxth	r2, r3
 80189fa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80189fe:	b299      	uxth	r1, r3
 8018a00:	69fb      	ldr	r3, [r7, #28]
 8018a02:	b29b      	uxth	r3, r3
 8018a04:	fb11 f303 	smulbb	r3, r1, r3
 8018a08:	b29b      	uxth	r3, r3
 8018a0a:	4413      	add	r3, r2
 8018a0c:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 8018a0e:	3301      	adds	r3, #1
 8018a10:	b29e      	uxth	r6, r3
 8018a12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018a16:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(uint16Item.itemsArray[i]) * Font12.Width /2,
 8018a18:	69fb      	ldr	r3, [r7, #28]
 8018a1a:	3301      	adds	r3, #1
 8018a1c:	011b      	lsls	r3, r3, #4
 8018a1e:	4a29      	ldr	r2, [pc, #164]	; (8018ac4 <updateUint16Item+0x14dc>)
 8018a20:	4413      	add	r3, r2
 8018a22:	4618      	mov	r0, r3
 8018a24:	f7e7 fc66 	bl	80002f4 <strlen>
 8018a28:	4603      	mov	r3, r0
 8018a2a:	4a27      	ldr	r2, [pc, #156]	; (8018ac8 <updateUint16Item+0x14e0>)
 8018a2c:	8892      	ldrh	r2, [r2, #4]
 8018a2e:	fb02 f303 	mul.w	r3, r2, r3
 8018a32:	085b      	lsrs	r3, r3, #1
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 8018a34:	b29b      	uxth	r3, r3
 8018a36:	4423      	add	r3, r4
 8018a38:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 8018a3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018a3e:	b29a      	uxth	r2, r3
 8018a40:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018a44:	b299      	uxth	r1, r3
 8018a46:	69fb      	ldr	r3, [r7, #28]
 8018a48:	b29b      	uxth	r3, r3
 8018a4a:	fb11 f303 	smulbb	r3, r1, r3
 8018a4e:	b29b      	uxth	r3, r3
 8018a50:	4413      	add	r3, r2
 8018a52:	b29a      	uxth	r2, r3
 8018a54:	4b1c      	ldr	r3, [pc, #112]	; (8018ac8 <updateUint16Item+0x14e0>)
 8018a56:	88db      	ldrh	r3, [r3, #6]
 8018a58:	4413      	add	r3, r2
 8018a5a:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 8018a5c:	3301      	adds	r3, #1
 8018a5e:	b29b      	uxth	r3, r3
 8018a60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018a64:	9200      	str	r2, [sp, #0]
 8018a66:	4602      	mov	r2, r0
 8018a68:	4631      	mov	r1, r6
 8018a6a:	4628      	mov	r0, r5
 8018a6c:	f7f5 fd58 	bl	800e520 <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018a70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018a74:	b29c      	uxth	r4, r3
 8018a76:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018a7a:	b29a      	uxth	r2, r3
 8018a7c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018a80:	b299      	uxth	r1, r3
 8018a82:	69fb      	ldr	r3, [r7, #28]
 8018a84:	b29b      	uxth	r3, r3
 8018a86:	fb11 f303 	smulbb	r3, r1, r3
 8018a8a:	b29b      	uxth	r3, r3
 8018a8c:	4413      	add	r3, r2
 8018a8e:	b29b      	uxth	r3, r3
 8018a90:	3301      	adds	r3, #1
 8018a92:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[(i)], BLACK, WHITE, 16, Font12);
 8018a94:	69fb      	ldr	r3, [r7, #28]
 8018a96:	3301      	adds	r3, #1
 8018a98:	011b      	lsls	r3, r3, #4
 8018a9a:	4a0a      	ldr	r2, [pc, #40]	; (8018ac4 <updateUint16Item+0x14dc>)
 8018a9c:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018a9e:	490a      	ldr	r1, [pc, #40]	; (8018ac8 <updateUint16Item+0x14e0>)
 8018aa0:	ab02      	add	r3, sp, #8
 8018aa2:	c903      	ldmia	r1, {r0, r1}
 8018aa4:	e883 0003 	stmia.w	r3, {r0, r1}
 8018aa8:	2310      	movs	r3, #16
 8018aaa:	9301      	str	r3, [sp, #4]
 8018aac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018ab0:	9300      	str	r3, [sp, #0]
 8018ab2:	2300      	movs	r3, #0
 8018ab4:	4629      	mov	r1, r5
 8018ab6:	4620      	mov	r0, r4
 8018ab8:	f7fd fc9e 	bl	80163f8 <centeredString>
 8018abc:	e0af      	b.n	8018c1e <updateUint16Item+0x1636>
 8018abe:	bf00      	nop
 8018ac0:	2400ac84 	.word	0x2400ac84
 8018ac4:	2400fe04 	.word	0x2400fe04
 8018ac8:	24000030 	.word	0x24000030
					//						centeredString(HorizontalDisplayCenterWidth, HorizontalMenuRectangleStartY + HorizontalMenuRectangleHeight * i + 1,
					//								uint16Item.itemsArray[i], BLACK, LGRAY, 16);
				}
				else if ( (currentCursorPosition.cursorPosition == 4) && (i == 5) )
 8018acc:	4b5b      	ldr	r3, [pc, #364]	; (8018c3c <updateUint16Item+0x1654>)
 8018ace:	781b      	ldrb	r3, [r3, #0]
 8018ad0:	2b04      	cmp	r3, #4
 8018ad2:	f040 80a4 	bne.w	8018c1e <updateUint16Item+0x1636>
 8018ad6:	69fb      	ldr	r3, [r7, #28]
 8018ad8:	2b05      	cmp	r3, #5
 8018ada:	f040 80a0 	bne.w	8018c1e <updateUint16Item+0x1636>
				{
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 8018ade:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018ae2:	b29c      	uxth	r4, r3
 8018ae4:	69fb      	ldr	r3, [r7, #28]
 8018ae6:	3301      	adds	r3, #1
 8018ae8:	011b      	lsls	r3, r3, #4
 8018aea:	4a55      	ldr	r2, [pc, #340]	; (8018c40 <updateUint16Item+0x1658>)
 8018aec:	4413      	add	r3, r2
 8018aee:	4618      	mov	r0, r3
 8018af0:	f7e7 fc00 	bl	80002f4 <strlen>
 8018af4:	4603      	mov	r3, r0
 8018af6:	4a53      	ldr	r2, [pc, #332]	; (8018c44 <updateUint16Item+0x165c>)
 8018af8:	8892      	ldrh	r2, [r2, #4]
 8018afa:	fb02 f303 	mul.w	r3, r2, r3
 8018afe:	085b      	lsrs	r3, r3, #1
 8018b00:	b29b      	uxth	r3, r3
 8018b02:	1ae3      	subs	r3, r4, r3
 8018b04:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018b06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018b0a:	b29a      	uxth	r2, r3
 8018b0c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018b10:	b299      	uxth	r1, r3
 8018b12:	69fb      	ldr	r3, [r7, #28]
 8018b14:	b29b      	uxth	r3, r3
 8018b16:	fb11 f303 	smulbb	r3, r1, r3
 8018b1a:	b29b      	uxth	r3, r3
 8018b1c:	4413      	add	r3, r2
 8018b1e:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 8018b20:	3301      	adds	r3, #1
 8018b22:	b29e      	uxth	r6, r3
 8018b24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018b28:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(uint16Item.itemsArray[i]) * Font12.Width /2,
 8018b2a:	69fb      	ldr	r3, [r7, #28]
 8018b2c:	3301      	adds	r3, #1
 8018b2e:	011b      	lsls	r3, r3, #4
 8018b30:	4a43      	ldr	r2, [pc, #268]	; (8018c40 <updateUint16Item+0x1658>)
 8018b32:	4413      	add	r3, r2
 8018b34:	4618      	mov	r0, r3
 8018b36:	f7e7 fbdd 	bl	80002f4 <strlen>
 8018b3a:	4603      	mov	r3, r0
 8018b3c:	4a41      	ldr	r2, [pc, #260]	; (8018c44 <updateUint16Item+0x165c>)
 8018b3e:	8892      	ldrh	r2, [r2, #4]
 8018b40:	fb02 f303 	mul.w	r3, r2, r3
 8018b44:	085b      	lsrs	r3, r3, #1
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 8018b46:	b29b      	uxth	r3, r3
 8018b48:	4423      	add	r3, r4
 8018b4a:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 8018b4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018b50:	b29a      	uxth	r2, r3
 8018b52:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018b56:	b299      	uxth	r1, r3
 8018b58:	69fb      	ldr	r3, [r7, #28]
 8018b5a:	b29b      	uxth	r3, r3
 8018b5c:	fb11 f303 	smulbb	r3, r1, r3
 8018b60:	b29b      	uxth	r3, r3
 8018b62:	4413      	add	r3, r2
 8018b64:	b29a      	uxth	r2, r3
 8018b66:	4b37      	ldr	r3, [pc, #220]	; (8018c44 <updateUint16Item+0x165c>)
 8018b68:	88db      	ldrh	r3, [r3, #6]
 8018b6a:	4413      	add	r3, r2
 8018b6c:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(uint16Item.itemsArray[i]) * Font12.Width / 2,
 8018b6e:	3301      	adds	r3, #1
 8018b70:	b29b      	uxth	r3, r3
 8018b72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018b76:	9200      	str	r2, [sp, #0]
 8018b78:	4602      	mov	r2, r0
 8018b7a:	4631      	mov	r1, r6
 8018b7c:	4628      	mov	r0, r5
 8018b7e:	f7f5 fccf 	bl	800e520 <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018b82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018b86:	b29c      	uxth	r4, r3
 8018b88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018b8c:	b29a      	uxth	r2, r3
 8018b8e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018b92:	b299      	uxth	r1, r3
 8018b94:	69fb      	ldr	r3, [r7, #28]
 8018b96:	b29b      	uxth	r3, r3
 8018b98:	fb11 f303 	smulbb	r3, r1, r3
 8018b9c:	b29b      	uxth	r3, r3
 8018b9e:	4413      	add	r3, r2
 8018ba0:	b29b      	uxth	r3, r3
 8018ba2:	3301      	adds	r3, #1
 8018ba4:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[(i)], BLACK, WHITE, 16, Font12);
 8018ba6:	69fb      	ldr	r3, [r7, #28]
 8018ba8:	3301      	adds	r3, #1
 8018baa:	011b      	lsls	r3, r3, #4
 8018bac:	4a24      	ldr	r2, [pc, #144]	; (8018c40 <updateUint16Item+0x1658>)
 8018bae:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018bb0:	4924      	ldr	r1, [pc, #144]	; (8018c44 <updateUint16Item+0x165c>)
 8018bb2:	ab02      	add	r3, sp, #8
 8018bb4:	c903      	ldmia	r1, {r0, r1}
 8018bb6:	e883 0003 	stmia.w	r3, {r0, r1}
 8018bba:	2310      	movs	r3, #16
 8018bbc:	9301      	str	r3, [sp, #4]
 8018bbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018bc2:	9300      	str	r3, [sp, #0]
 8018bc4:	2300      	movs	r3, #0
 8018bc6:	4629      	mov	r1, r5
 8018bc8:	4620      	mov	r0, r4
 8018bca:	f7fd fc15 	bl	80163f8 <centeredString>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 8018bce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018bd2:	b29c      	uxth	r4, r3
 8018bd4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018bd8:	b29a      	uxth	r2, r3
 8018bda:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8018bde:	b299      	uxth	r1, r3
 8018be0:	69fb      	ldr	r3, [r7, #28]
 8018be2:	3b01      	subs	r3, #1
 8018be4:	b29b      	uxth	r3, r3
 8018be6:	fb11 f303 	smulbb	r3, r1, r3
 8018bea:	b29b      	uxth	r3, r3
 8018bec:	4413      	add	r3, r2
 8018bee:	b29b      	uxth	r3, r3
 8018bf0:	3301      	adds	r3, #1
 8018bf2:	b29d      	uxth	r5, r3
							uint16Item.itemsArray[i - 1], BLACK, LGRAY, 16, Font12);
 8018bf4:	69fb      	ldr	r3, [r7, #28]
 8018bf6:	3b01      	subs	r3, #1
 8018bf8:	3301      	adds	r3, #1
 8018bfa:	011b      	lsls	r3, r3, #4
 8018bfc:	4a10      	ldr	r2, [pc, #64]	; (8018c40 <updateUint16Item+0x1658>)
 8018bfe:	441a      	add	r2, r3
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 8018c00:	4910      	ldr	r1, [pc, #64]	; (8018c44 <updateUint16Item+0x165c>)
 8018c02:	ab02      	add	r3, sp, #8
 8018c04:	c903      	ldmia	r1, {r0, r1}
 8018c06:	e883 0003 	stmia.w	r3, {r0, r1}
 8018c0a:	2310      	movs	r3, #16
 8018c0c:	9301      	str	r3, [sp, #4]
 8018c0e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8018c12:	9300      	str	r3, [sp, #0]
 8018c14:	2300      	movs	r3, #0
 8018c16:	4629      	mov	r1, r5
 8018c18:	4620      	mov	r0, r4
 8018c1a:	f7fd fbed 	bl	80163f8 <centeredString>
	for (int i = 0; i < uint16Item.numberOfItemsInPage ; i++)
 8018c1e:	69fb      	ldr	r3, [r7, #28]
 8018c20:	3301      	adds	r3, #1
 8018c22:	61fb      	str	r3, [r7, #28]
 8018c24:	4b06      	ldr	r3, [pc, #24]	; (8018c40 <updateUint16Item+0x1658>)
 8018c26:	7bdb      	ldrb	r3, [r3, #15]
 8018c28:	461a      	mov	r2, r3
 8018c2a:	69fb      	ldr	r3, [r7, #28]
 8018c2c:	4293      	cmp	r3, r2
 8018c2e:	f6fe ad09 	blt.w	8017644 <updateUint16Item+0x5c>
				}
			}
		}
	}
}
 8018c32:	bf00      	nop
 8018c34:	bf00      	nop
 8018c36:	372c      	adds	r7, #44	; 0x2c
 8018c38:	46bd      	mov	sp, r7
 8018c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c3c:	2400ac84 	.word	0x2400ac84
 8018c40:	2400fe04 	.word	0x2400fe04
 8018c44:	24000030 	.word	0x24000030

08018c48 <updateStringItem>:
		}
	}
}

void updateStringItem(MENUDRAWType howToDraw)
{
 8018c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018c4a:	b08d      	sub	sp, #52	; 0x34
 8018c4c:	af04      	add	r7, sp, #16
 8018c4e:	4603      	mov	r3, r0
 8018c50:	71fb      	strb	r3, [r7, #7]
	uint8_t MenuRectangleStartX = 0;
 8018c52:	2300      	movs	r3, #0
 8018c54:	77fb      	strb	r3, [r7, #31]
	uint8_t MenuRectangleStartY = 0;
 8018c56:	2300      	movs	r3, #0
 8018c58:	77bb      	strb	r3, [r7, #30]
	uint8_t MenuRectangleHeight = 0;
 8018c5a:	2300      	movs	r3, #0
 8018c5c:	777b      	strb	r3, [r7, #29]
	uint8_t MenuRectangleWidth = 0;
 8018c5e:	2300      	movs	r3, #0
 8018c60:	773b      	strb	r3, [r7, #28]
	uint8_t DisplayCenterWidth = 0;
 8018c62:	2300      	movs	r3, #0
 8018c64:	76fb      	strb	r3, [r7, #27]

	if (isPortrait)
 8018c66:	4b09      	ldr	r3, [pc, #36]	; (8018c8c <updateStringItem+0x44>)
 8018c68:	781b      	ldrb	r3, [r3, #0]
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	d009      	beq.n	8018c82 <updateStringItem+0x3a>
	{
		MenuRectangleStartX = VerticalMenuRectangleStartX;
 8018c6e:	2302      	movs	r3, #2
 8018c70:	77fb      	strb	r3, [r7, #31]
		MenuRectangleStartY = VerticalMenuRectangleStartY;
 8018c72:	230c      	movs	r3, #12
 8018c74:	77bb      	strb	r3, [r7, #30]
		MenuRectangleHeight = VerticalMenuRectangleHeight;
 8018c76:	230e      	movs	r3, #14
 8018c78:	777b      	strb	r3, [r7, #29]
		MenuRectangleWidth = VerticalMenuRectangleWidth;
 8018c7a:	237c      	movs	r3, #124	; 0x7c
 8018c7c:	773b      	strb	r3, [r7, #28]
		DisplayCenterWidth = VerticalDisplayCenterWidth;
 8018c7e:	2340      	movs	r3, #64	; 0x40
 8018c80:	76fb      	strb	r3, [r7, #27]
//		MenuRectangleHeight = HorizontalMenuRectangleHeight;
//		MenuRectangleWidth = HorizontalMenuRectangleWidth;
//		DisplayCenterWidth = HorizontalDisplayCenterWidth;
	}

	for (int i = 0; i < stringItem.numberOfItemsInPage ; i++)
 8018c82:	2300      	movs	r3, #0
 8018c84:	617b      	str	r3, [r7, #20]
 8018c86:	f001 ba23 	b.w	801a0d0 <updateStringItem+0x1488>
 8018c8a:	bf00      	nop
 8018c8c:	2400008c 	.word	0x2400008c
	{
		if  ( (i < 2) && (howToDraw == FULL) )
 8018c90:	697b      	ldr	r3, [r7, #20]
 8018c92:	2b01      	cmp	r3, #1
 8018c94:	dc50      	bgt.n	8018d38 <updateStringItem+0xf0>
 8018c96:	79fb      	ldrb	r3, [r7, #7]
 8018c98:	2b02      	cmp	r3, #2
 8018c9a:	d14d      	bne.n	8018d38 <updateStringItem+0xf0>
		{
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 8018c9c:	7ffb      	ldrb	r3, [r7, #31]
 8018c9e:	b298      	uxth	r0, r3
 8018ca0:	7fbb      	ldrb	r3, [r7, #30]
 8018ca2:	b29a      	uxth	r2, r3
 8018ca4:	7f7b      	ldrb	r3, [r7, #29]
 8018ca6:	b299      	uxth	r1, r3
 8018ca8:	697b      	ldr	r3, [r7, #20]
 8018caa:	b29b      	uxth	r3, r3
 8018cac:	fb11 f303 	smulbb	r3, r1, r3
 8018cb0:	b29b      	uxth	r3, r3
 8018cb2:	4413      	add	r3, r2
 8018cb4:	b29c      	uxth	r4, r3
 8018cb6:	7ffb      	ldrb	r3, [r7, #31]
 8018cb8:	b29a      	uxth	r2, r3
 8018cba:	7f3b      	ldrb	r3, [r7, #28]
 8018cbc:	b29b      	uxth	r3, r3
 8018cbe:	4413      	add	r3, r2
 8018cc0:	b29d      	uxth	r5, r3
 8018cc2:	7fbb      	ldrb	r3, [r7, #30]
 8018cc4:	b29a      	uxth	r2, r3
 8018cc6:	7f7b      	ldrb	r3, [r7, #29]
 8018cc8:	b299      	uxth	r1, r3
					MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 8018cca:	697b      	ldr	r3, [r7, #20]
 8018ccc:	3301      	adds	r3, #1
			Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 8018cce:	b29b      	uxth	r3, r3
 8018cd0:	fb11 f303 	smulbb	r3, r1, r3
 8018cd4:	b29b      	uxth	r3, r3
 8018cd6:	4413      	add	r3, r2
 8018cd8:	b29b      	uxth	r3, r3
 8018cda:	2200      	movs	r2, #0
 8018cdc:	9202      	str	r2, [sp, #8]
 8018cde:	2201      	movs	r2, #1
 8018ce0:	9201      	str	r2, [sp, #4]
 8018ce2:	2200      	movs	r2, #0
 8018ce4:	9200      	str	r2, [sp, #0]
 8018ce6:	462a      	mov	r2, r5
 8018ce8:	4621      	mov	r1, r4
 8018cea:	f7f5 fd93 	bl	800e814 <Paint_DrawRectangle>
					BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
			centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 8018cee:	7efb      	ldrb	r3, [r7, #27]
 8018cf0:	b29c      	uxth	r4, r3
 8018cf2:	7fbb      	ldrb	r3, [r7, #30]
 8018cf4:	b29a      	uxth	r2, r3
 8018cf6:	7f7b      	ldrb	r3, [r7, #29]
 8018cf8:	b299      	uxth	r1, r3
 8018cfa:	697b      	ldr	r3, [r7, #20]
 8018cfc:	b29b      	uxth	r3, r3
 8018cfe:	fb11 f303 	smulbb	r3, r1, r3
 8018d02:	b29b      	uxth	r3, r3
 8018d04:	4413      	add	r3, r2
 8018d06:	b29b      	uxth	r3, r3
 8018d08:	3301      	adds	r3, #1
 8018d0a:	b29d      	uxth	r5, r3
					stringItem.itemsArray[i], BLACK, WHITE, 16, Font12);
 8018d0c:	697b      	ldr	r3, [r7, #20]
 8018d0e:	011b      	lsls	r3, r3, #4
 8018d10:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8018d14:	4a8e      	ldr	r2, [pc, #568]	; (8018f50 <updateStringItem+0x308>)
 8018d16:	4413      	add	r3, r2
 8018d18:	1d1a      	adds	r2, r3, #4
			centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 8018d1a:	498e      	ldr	r1, [pc, #568]	; (8018f54 <updateStringItem+0x30c>)
 8018d1c:	ab02      	add	r3, sp, #8
 8018d1e:	c903      	ldmia	r1, {r0, r1}
 8018d20:	e883 0003 	stmia.w	r3, {r0, r1}
 8018d24:	2310      	movs	r3, #16
 8018d26:	9301      	str	r3, [sp, #4]
 8018d28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018d2c:	9300      	str	r3, [sp, #0]
 8018d2e:	2300      	movs	r3, #0
 8018d30:	4629      	mov	r1, r5
 8018d32:	4620      	mov	r0, r4
 8018d34:	f7fd fb60 	bl	80163f8 <centeredString>
		}
		if ( (i >= 2) && (i < stringItem.numberOfItemsInPage - 2) )
 8018d38:	697b      	ldr	r3, [r7, #20]
 8018d3a:	2b01      	cmp	r3, #1
 8018d3c:	f340 873c 	ble.w	8019bb8 <updateStringItem+0xf70>
 8018d40:	4b83      	ldr	r3, [pc, #524]	; (8018f50 <updateStringItem+0x308>)
 8018d42:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 8018d46:	3b02      	subs	r3, #2
 8018d48:	697a      	ldr	r2, [r7, #20]
 8018d4a:	429a      	cmp	r2, r3
 8018d4c:	f280 8734 	bge.w	8019bb8 <updateStringItem+0xf70>
		{
			if (howToDraw == FULL)
 8018d50:	79fb      	ldrb	r3, [r7, #7]
 8018d52:	2b02      	cmp	r3, #2
 8018d54:	d159      	bne.n	8018e0a <updateStringItem+0x1c2>
			{
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 8018d56:	7ffb      	ldrb	r3, [r7, #31]
 8018d58:	b298      	uxth	r0, r3
 8018d5a:	7fbb      	ldrb	r3, [r7, #30]
 8018d5c:	b29a      	uxth	r2, r3
 8018d5e:	7f7b      	ldrb	r3, [r7, #29]
 8018d60:	b299      	uxth	r1, r3
 8018d62:	697b      	ldr	r3, [r7, #20]
 8018d64:	b29b      	uxth	r3, r3
 8018d66:	fb11 f303 	smulbb	r3, r1, r3
 8018d6a:	b29b      	uxth	r3, r3
 8018d6c:	4413      	add	r3, r2
 8018d6e:	b29c      	uxth	r4, r3
 8018d70:	7ffb      	ldrb	r3, [r7, #31]
 8018d72:	b29a      	uxth	r2, r3
 8018d74:	7f3b      	ldrb	r3, [r7, #28]
 8018d76:	085b      	lsrs	r3, r3, #1
 8018d78:	b2db      	uxtb	r3, r3
 8018d7a:	b29b      	uxth	r3, r3
 8018d7c:	4413      	add	r3, r2
 8018d7e:	b29d      	uxth	r5, r3
 8018d80:	7fbb      	ldrb	r3, [r7, #30]
 8018d82:	b29a      	uxth	r2, r3
 8018d84:	7f7b      	ldrb	r3, [r7, #29]
 8018d86:	b299      	uxth	r1, r3
						MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 8018d88:	697b      	ldr	r3, [r7, #20]
 8018d8a:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 8018d8c:	b29b      	uxth	r3, r3
 8018d8e:	fb11 f303 	smulbb	r3, r1, r3
 8018d92:	b29b      	uxth	r3, r3
 8018d94:	4413      	add	r3, r2
 8018d96:	b29b      	uxth	r3, r3
 8018d98:	2200      	movs	r2, #0
 8018d9a:	9202      	str	r2, [sp, #8]
 8018d9c:	2201      	movs	r2, #1
 8018d9e:	9201      	str	r2, [sp, #4]
 8018da0:	2200      	movs	r2, #0
 8018da2:	9200      	str	r2, [sp, #0]
 8018da4:	462a      	mov	r2, r5
 8018da6:	4621      	mov	r1, r4
 8018da8:	f7f5 fd34 	bl	800e814 <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
				Paint_DrawRectangle( MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * i,
 8018dac:	7ffb      	ldrb	r3, [r7, #31]
 8018dae:	b29a      	uxth	r2, r3
 8018db0:	7f3b      	ldrb	r3, [r7, #28]
 8018db2:	085b      	lsrs	r3, r3, #1
 8018db4:	b2db      	uxtb	r3, r3
 8018db6:	b29b      	uxth	r3, r3
 8018db8:	4413      	add	r3, r2
 8018dba:	b298      	uxth	r0, r3
 8018dbc:	7fbb      	ldrb	r3, [r7, #30]
 8018dbe:	b29a      	uxth	r2, r3
 8018dc0:	7f7b      	ldrb	r3, [r7, #29]
 8018dc2:	b299      	uxth	r1, r3
 8018dc4:	697b      	ldr	r3, [r7, #20]
 8018dc6:	b29b      	uxth	r3, r3
 8018dc8:	fb11 f303 	smulbb	r3, r1, r3
 8018dcc:	b29b      	uxth	r3, r3
 8018dce:	4413      	add	r3, r2
 8018dd0:	b29c      	uxth	r4, r3
 8018dd2:	7ffb      	ldrb	r3, [r7, #31]
 8018dd4:	b29a      	uxth	r2, r3
 8018dd6:	7f3b      	ldrb	r3, [r7, #28]
 8018dd8:	b29b      	uxth	r3, r3
 8018dda:	4413      	add	r3, r2
 8018ddc:	b29d      	uxth	r5, r3
 8018dde:	7fbb      	ldrb	r3, [r7, #30]
 8018de0:	b29a      	uxth	r2, r3
 8018de2:	7f7b      	ldrb	r3, [r7, #29]
 8018de4:	b299      	uxth	r1, r3
						MenuRectangleStartX + MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 8018de6:	697b      	ldr	r3, [r7, #20]
 8018de8:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX + MenuRectangleWidth / 2, MenuRectangleStartY + MenuRectangleHeight * i,
 8018dea:	b29b      	uxth	r3, r3
 8018dec:	fb11 f303 	smulbb	r3, r1, r3
 8018df0:	b29b      	uxth	r3, r3
 8018df2:	4413      	add	r3, r2
 8018df4:	b29b      	uxth	r3, r3
 8018df6:	2200      	movs	r2, #0
 8018df8:	9202      	str	r2, [sp, #8]
 8018dfa:	2201      	movs	r2, #1
 8018dfc:	9201      	str	r2, [sp, #4]
 8018dfe:	2200      	movs	r2, #0
 8018e00:	9200      	str	r2, [sp, #0]
 8018e02:	462a      	mov	r2, r5
 8018e04:	4621      	mov	r1, r4
 8018e06:	f7f5 fd05 	bl	800e814 <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
			}

			if ( (i == 2) )
 8018e0a:	697b      	ldr	r3, [r7, #20]
 8018e0c:	2b02      	cmp	r3, #2
 8018e0e:	f040 8371 	bne.w	80194f4 <updateStringItem+0x8ac>
			{
//				char localString[8] = "";
//				sprintf(localString,"%03d",stringItem.startValue);
				if (currentCursorPosition.cursorPosition == 0x02)
 8018e12:	4b51      	ldr	r3, [pc, #324]	; (8018f58 <updateStringItem+0x310>)
 8018e14:	781b      	ldrb	r3, [r3, #0]
 8018e16:	2b02      	cmp	r3, #2
 8018e18:	f040 81ba 	bne.w	8019190 <updateStringItem+0x548>
				{
					if ( (howToDraw == LEFT) || (howToDraw == FULL) )
 8018e1c:	79fb      	ldrb	r3, [r7, #7]
 8018e1e:	2b03      	cmp	r3, #3
 8018e20:	d003      	beq.n	8018e2a <updateStringItem+0x1e2>
 8018e22:	79fb      	ldrb	r3, [r7, #7]
 8018e24:	2b02      	cmp	r3, #2
 8018e26:	f040 8099 	bne.w	8018f5c <updateStringItem+0x314>
					{
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018e2a:	7ffb      	ldrb	r3, [r7, #31]
 8018e2c:	b29b      	uxth	r3, r3
 8018e2e:	3301      	adds	r3, #1
 8018e30:	b298      	uxth	r0, r3
 8018e32:	7fbb      	ldrb	r3, [r7, #30]
 8018e34:	b29a      	uxth	r2, r3
 8018e36:	7f7b      	ldrb	r3, [r7, #29]
 8018e38:	b299      	uxth	r1, r3
 8018e3a:	697b      	ldr	r3, [r7, #20]
 8018e3c:	b29b      	uxth	r3, r3
 8018e3e:	fb11 f303 	smulbb	r3, r1, r3
 8018e42:	b29b      	uxth	r3, r3
 8018e44:	4413      	add	r3, r2
 8018e46:	b29b      	uxth	r3, r3
 8018e48:	3301      	adds	r3, #1
 8018e4a:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, LGRAY,  BLACK);
 8018e4c:	697b      	ldr	r3, [r7, #20]
 8018e4e:	011b      	lsls	r3, r3, #4
 8018e50:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8018e54:	4a3e      	ldr	r2, [pc, #248]	; (8018f50 <updateStringItem+0x308>)
 8018e56:	4413      	add	r3, r2
 8018e58:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018e5a:	2300      	movs	r3, #0
 8018e5c:	9301      	str	r3, [sp, #4]
 8018e5e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8018e62:	9300      	str	r3, [sp, #0]
 8018e64:	4b3b      	ldr	r3, [pc, #236]	; (8018f54 <updateStringItem+0x30c>)
 8018e66:	f7f5 ff79 	bl	800ed5c <Paint_DrawString_EN>
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 8018e6a:	7ffb      	ldrb	r3, [r7, #31]
 8018e6c:	b29a      	uxth	r2, r3
 8018e6e:	7f3b      	ldrb	r3, [r7, #28]
 8018e70:	085b      	lsrs	r3, r3, #1
 8018e72:	b2db      	uxtb	r3, r3
 8018e74:	b29b      	uxth	r3, r3
 8018e76:	4413      	add	r3, r2
 8018e78:	b29b      	uxth	r3, r3
 8018e7a:	3301      	adds	r3, #1
 8018e7c:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018e7e:	7fbb      	ldrb	r3, [r7, #30]
 8018e80:	b29a      	uxth	r2, r3
 8018e82:	7f7b      	ldrb	r3, [r7, #29]
 8018e84:	b299      	uxth	r1, r3
 8018e86:	697b      	ldr	r3, [r7, #20]
 8018e88:	b29b      	uxth	r3, r3
 8018e8a:	fb11 f303 	smulbb	r3, r1, r3
 8018e8e:	b29b      	uxth	r3, r3
 8018e90:	4413      	add	r3, r2
 8018e92:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 8018e94:	3301      	adds	r3, #1
 8018e96:	b29e      	uxth	r6, r3
								MenuRectangleStartX + MenuRectangleWidth / 2 + 1 + strlen(stringItem.valuesArray[stringItem.startValue]) * Font12.Width,
 8018e98:	7ffb      	ldrb	r3, [r7, #31]
 8018e9a:	b29a      	uxth	r2, r3
 8018e9c:	7f3b      	ldrb	r3, [r7, #28]
 8018e9e:	085b      	lsrs	r3, r3, #1
 8018ea0:	b2db      	uxtb	r3, r3
 8018ea2:	b29b      	uxth	r3, r3
 8018ea4:	4413      	add	r3, r2
 8018ea6:	b29c      	uxth	r4, r3
 8018ea8:	4b29      	ldr	r3, [pc, #164]	; (8018f50 <updateStringItem+0x308>)
 8018eaa:	799b      	ldrb	r3, [r3, #6]
 8018eac:	011b      	lsls	r3, r3, #4
 8018eae:	3308      	adds	r3, #8
 8018eb0:	4a27      	ldr	r2, [pc, #156]	; (8018f50 <updateStringItem+0x308>)
 8018eb2:	4413      	add	r3, r2
 8018eb4:	4618      	mov	r0, r3
 8018eb6:	f7e7 fa1d 	bl	80002f4 <strlen>
 8018eba:	4603      	mov	r3, r0
 8018ebc:	b29a      	uxth	r2, r3
 8018ebe:	4b25      	ldr	r3, [pc, #148]	; (8018f54 <updateStringItem+0x30c>)
 8018ec0:	889b      	ldrh	r3, [r3, #4]
 8018ec2:	fb12 f303 	smulbb	r3, r2, r3
 8018ec6:	b29b      	uxth	r3, r3
 8018ec8:	4423      	add	r3, r4
 8018eca:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 8018ecc:	3301      	adds	r3, #1
 8018ece:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 8018ed0:	7fbb      	ldrb	r3, [r7, #30]
 8018ed2:	b29a      	uxth	r2, r3
 8018ed4:	7f7b      	ldrb	r3, [r7, #29]
 8018ed6:	b299      	uxth	r1, r3
 8018ed8:	697b      	ldr	r3, [r7, #20]
 8018eda:	b29b      	uxth	r3, r3
 8018edc:	fb11 f303 	smulbb	r3, r1, r3
 8018ee0:	b29b      	uxth	r3, r3
 8018ee2:	4413      	add	r3, r2
 8018ee4:	b29a      	uxth	r2, r3
 8018ee6:	4b1b      	ldr	r3, [pc, #108]	; (8018f54 <updateStringItem+0x30c>)
 8018ee8:	88db      	ldrh	r3, [r3, #6]
 8018eea:	4413      	add	r3, r2
 8018eec:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 8018eee:	3301      	adds	r3, #1
 8018ef0:	b29b      	uxth	r3, r3
 8018ef2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018ef6:	9200      	str	r2, [sp, #0]
 8018ef8:	4602      	mov	r2, r0
 8018efa:	4631      	mov	r1, r6
 8018efc:	4628      	mov	r0, r5
 8018efe:	f7f5 fb0f 	bl	800e520 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018f02:	7ffb      	ldrb	r3, [r7, #31]
 8018f04:	b29a      	uxth	r2, r3
 8018f06:	7f3b      	ldrb	r3, [r7, #28]
 8018f08:	085b      	lsrs	r3, r3, #1
 8018f0a:	b2db      	uxtb	r3, r3
 8018f0c:	b29b      	uxth	r3, r3
 8018f0e:	4413      	add	r3, r2
 8018f10:	b29b      	uxth	r3, r3
 8018f12:	3301      	adds	r3, #1
 8018f14:	b298      	uxth	r0, r3
 8018f16:	7fbb      	ldrb	r3, [r7, #30]
 8018f18:	b29a      	uxth	r2, r3
 8018f1a:	7f7b      	ldrb	r3, [r7, #29]
 8018f1c:	b299      	uxth	r1, r3
 8018f1e:	697b      	ldr	r3, [r7, #20]
 8018f20:	b29b      	uxth	r3, r3
 8018f22:	fb11 f303 	smulbb	r3, r1, r3
 8018f26:	b29b      	uxth	r3, r3
 8018f28:	4413      	add	r3, r2
 8018f2a:	b29b      	uxth	r3, r3
 8018f2c:	3301      	adds	r3, #1
 8018f2e:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, WHITE,  BLACK);
 8018f30:	4b07      	ldr	r3, [pc, #28]	; (8018f50 <updateStringItem+0x308>)
 8018f32:	799b      	ldrb	r3, [r3, #6]
 8018f34:	011b      	lsls	r3, r3, #4
 8018f36:	3308      	adds	r3, #8
 8018f38:	4a05      	ldr	r2, [pc, #20]	; (8018f50 <updateStringItem+0x308>)
 8018f3a:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018f3c:	2300      	movs	r3, #0
 8018f3e:	9301      	str	r3, [sp, #4]
 8018f40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018f44:	9300      	str	r3, [sp, #0]
 8018f46:	4b03      	ldr	r3, [pc, #12]	; (8018f54 <updateStringItem+0x30c>)
 8018f48:	f7f5 ff08 	bl	800ed5c <Paint_DrawString_EN>
 8018f4c:	e2d2      	b.n	80194f4 <updateStringItem+0x8ac>
 8018f4e:	bf00      	nop
 8018f50:	24010018 	.word	0x24010018
 8018f54:	24000030 	.word	0x24000030
 8018f58:	2400ac84 	.word	0x2400ac84
					}
					else if (howToDraw == DOWN)
 8018f5c:	79fb      	ldrb	r3, [r7, #7]
 8018f5e:	2b01      	cmp	r3, #1
 8018f60:	f040 8087 	bne.w	8019072 <updateStringItem+0x42a>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8018f64:	7ffb      	ldrb	r3, [r7, #31]
 8018f66:	b29b      	uxth	r3, r3
 8018f68:	3301      	adds	r3, #1
 8018f6a:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018f6c:	7fbb      	ldrb	r3, [r7, #30]
 8018f6e:	b29a      	uxth	r2, r3
 8018f70:	7f7b      	ldrb	r3, [r7, #29]
 8018f72:	b299      	uxth	r1, r3
 8018f74:	697b      	ldr	r3, [r7, #20]
 8018f76:	b29b      	uxth	r3, r3
 8018f78:	fb11 f303 	smulbb	r3, r1, r3
 8018f7c:	b29b      	uxth	r3, r3
 8018f7e:	4413      	add	r3, r2
 8018f80:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8018f82:	3301      	adds	r3, #1
 8018f84:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 8018f86:	7ffb      	ldrb	r3, [r7, #31]
 8018f88:	b29c      	uxth	r4, r3
 8018f8a:	697b      	ldr	r3, [r7, #20]
 8018f8c:	011b      	lsls	r3, r3, #4
 8018f8e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8018f92:	4a7d      	ldr	r2, [pc, #500]	; (8019188 <updateStringItem+0x540>)
 8018f94:	4413      	add	r3, r2
 8018f96:	3304      	adds	r3, #4
 8018f98:	4618      	mov	r0, r3
 8018f9a:	f7e7 f9ab 	bl	80002f4 <strlen>
 8018f9e:	4603      	mov	r3, r0
 8018fa0:	b29a      	uxth	r2, r3
 8018fa2:	4b7a      	ldr	r3, [pc, #488]	; (801918c <updateStringItem+0x544>)
 8018fa4:	889b      	ldrh	r3, [r3, #4]
 8018fa6:	fb12 f303 	smulbb	r3, r2, r3
 8018faa:	b29b      	uxth	r3, r3
 8018fac:	4423      	add	r3, r4
 8018fae:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8018fb0:	3301      	adds	r3, #1
 8018fb2:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 8018fb4:	7fbb      	ldrb	r3, [r7, #30]
 8018fb6:	b29a      	uxth	r2, r3
 8018fb8:	7f7b      	ldrb	r3, [r7, #29]
 8018fba:	b299      	uxth	r1, r3
 8018fbc:	697b      	ldr	r3, [r7, #20]
 8018fbe:	b29b      	uxth	r3, r3
 8018fc0:	fb11 f303 	smulbb	r3, r1, r3
 8018fc4:	b29b      	uxth	r3, r3
 8018fc6:	4413      	add	r3, r2
 8018fc8:	b29a      	uxth	r2, r3
 8018fca:	4b70      	ldr	r3, [pc, #448]	; (801918c <updateStringItem+0x544>)
 8018fcc:	88db      	ldrh	r3, [r3, #6]
 8018fce:	4413      	add	r3, r2
 8018fd0:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8018fd2:	3301      	adds	r3, #1
 8018fd4:	b29b      	uxth	r3, r3
 8018fd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018fda:	9200      	str	r2, [sp, #0]
 8018fdc:	4602      	mov	r2, r0
 8018fde:	4631      	mov	r1, r6
 8018fe0:	4628      	mov	r0, r5
 8018fe2:	f7f5 fa9d 	bl	800e520 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8018fe6:	7ffb      	ldrb	r3, [r7, #31]
 8018fe8:	b29b      	uxth	r3, r3
 8018fea:	3301      	adds	r3, #1
 8018fec:	b298      	uxth	r0, r3
 8018fee:	7fbb      	ldrb	r3, [r7, #30]
 8018ff0:	b29a      	uxth	r2, r3
 8018ff2:	7f7b      	ldrb	r3, [r7, #29]
 8018ff4:	b299      	uxth	r1, r3
 8018ff6:	697b      	ldr	r3, [r7, #20]
 8018ff8:	b29b      	uxth	r3, r3
 8018ffa:	fb11 f303 	smulbb	r3, r1, r3
 8018ffe:	b29b      	uxth	r3, r3
 8019000:	4413      	add	r3, r2
 8019002:	b29b      	uxth	r3, r3
 8019004:	3301      	adds	r3, #1
 8019006:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, WHITE,  BLACK);
 8019008:	697b      	ldr	r3, [r7, #20]
 801900a:	011b      	lsls	r3, r3, #4
 801900c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019010:	4a5d      	ldr	r2, [pc, #372]	; (8019188 <updateStringItem+0x540>)
 8019012:	4413      	add	r3, r2
 8019014:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019016:	2300      	movs	r3, #0
 8019018:	9301      	str	r3, [sp, #4]
 801901a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801901e:	9300      	str	r3, [sp, #0]
 8019020:	4b5a      	ldr	r3, [pc, #360]	; (801918c <updateStringItem+0x544>)
 8019022:	f7f5 fe9b 	bl	800ed5c <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019026:	7ffb      	ldrb	r3, [r7, #31]
 8019028:	b29a      	uxth	r2, r3
 801902a:	7f3b      	ldrb	r3, [r7, #28]
 801902c:	085b      	lsrs	r3, r3, #1
 801902e:	b2db      	uxtb	r3, r3
 8019030:	b29b      	uxth	r3, r3
 8019032:	4413      	add	r3, r2
 8019034:	b29b      	uxth	r3, r3
 8019036:	3301      	adds	r3, #1
 8019038:	b298      	uxth	r0, r3
 801903a:	7fbb      	ldrb	r3, [r7, #30]
 801903c:	b29a      	uxth	r2, r3
 801903e:	7f7b      	ldrb	r3, [r7, #29]
 8019040:	b299      	uxth	r1, r3
 8019042:	697b      	ldr	r3, [r7, #20]
 8019044:	b29b      	uxth	r3, r3
 8019046:	fb11 f303 	smulbb	r3, r1, r3
 801904a:	b29b      	uxth	r3, r3
 801904c:	4413      	add	r3, r2
 801904e:	b29b      	uxth	r3, r3
 8019050:	3301      	adds	r3, #1
 8019052:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, WHITE,  BLACK);
 8019054:	4b4c      	ldr	r3, [pc, #304]	; (8019188 <updateStringItem+0x540>)
 8019056:	799b      	ldrb	r3, [r3, #6]
 8019058:	011b      	lsls	r3, r3, #4
 801905a:	3308      	adds	r3, #8
 801905c:	4a4a      	ldr	r2, [pc, #296]	; (8019188 <updateStringItem+0x540>)
 801905e:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019060:	2300      	movs	r3, #0
 8019062:	9301      	str	r3, [sp, #4]
 8019064:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019068:	9300      	str	r3, [sp, #0]
 801906a:	4b48      	ldr	r3, [pc, #288]	; (801918c <updateStringItem+0x544>)
 801906c:	f7f5 fe76 	bl	800ed5c <Paint_DrawString_EN>
 8019070:	e240      	b.n	80194f4 <updateStringItem+0x8ac>
					}
					else if (howToDraw == UP)
 8019072:	79fb      	ldrb	r3, [r7, #7]
 8019074:	2b00      	cmp	r3, #0
 8019076:	f040 823d 	bne.w	80194f4 <updateStringItem+0x8ac>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 801907a:	7ffb      	ldrb	r3, [r7, #31]
 801907c:	b29b      	uxth	r3, r3
 801907e:	3301      	adds	r3, #1
 8019080:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019082:	7fbb      	ldrb	r3, [r7, #30]
 8019084:	b29a      	uxth	r2, r3
 8019086:	7f7b      	ldrb	r3, [r7, #29]
 8019088:	b299      	uxth	r1, r3
 801908a:	697b      	ldr	r3, [r7, #20]
 801908c:	b29b      	uxth	r3, r3
 801908e:	fb11 f303 	smulbb	r3, r1, r3
 8019092:	b29b      	uxth	r3, r3
 8019094:	4413      	add	r3, r2
 8019096:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019098:	3301      	adds	r3, #1
 801909a:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 801909c:	7ffb      	ldrb	r3, [r7, #31]
 801909e:	b29c      	uxth	r4, r3
 80190a0:	697b      	ldr	r3, [r7, #20]
 80190a2:	011b      	lsls	r3, r3, #4
 80190a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80190a8:	4a37      	ldr	r2, [pc, #220]	; (8019188 <updateStringItem+0x540>)
 80190aa:	4413      	add	r3, r2
 80190ac:	3304      	adds	r3, #4
 80190ae:	4618      	mov	r0, r3
 80190b0:	f7e7 f920 	bl	80002f4 <strlen>
 80190b4:	4603      	mov	r3, r0
 80190b6:	b29a      	uxth	r2, r3
 80190b8:	4b34      	ldr	r3, [pc, #208]	; (801918c <updateStringItem+0x544>)
 80190ba:	889b      	ldrh	r3, [r3, #4]
 80190bc:	fb12 f303 	smulbb	r3, r2, r3
 80190c0:	b29b      	uxth	r3, r3
 80190c2:	4423      	add	r3, r4
 80190c4:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 80190c6:	3301      	adds	r3, #1
 80190c8:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 80190ca:	7fbb      	ldrb	r3, [r7, #30]
 80190cc:	b29a      	uxth	r2, r3
 80190ce:	7f7b      	ldrb	r3, [r7, #29]
 80190d0:	b299      	uxth	r1, r3
 80190d2:	697b      	ldr	r3, [r7, #20]
 80190d4:	b29b      	uxth	r3, r3
 80190d6:	fb11 f303 	smulbb	r3, r1, r3
 80190da:	b29b      	uxth	r3, r3
 80190dc:	4413      	add	r3, r2
 80190de:	b29a      	uxth	r2, r3
 80190e0:	4b2a      	ldr	r3, [pc, #168]	; (801918c <updateStringItem+0x544>)
 80190e2:	88db      	ldrh	r3, [r3, #6]
 80190e4:	4413      	add	r3, r2
 80190e6:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 80190e8:	3301      	adds	r3, #1
 80190ea:	b29b      	uxth	r3, r3
 80190ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80190f0:	9200      	str	r2, [sp, #0]
 80190f2:	4602      	mov	r2, r0
 80190f4:	4631      	mov	r1, r6
 80190f6:	4628      	mov	r0, r5
 80190f8:	f7f5 fa12 	bl	800e520 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80190fc:	7ffb      	ldrb	r3, [r7, #31]
 80190fe:	b29b      	uxth	r3, r3
 8019100:	3301      	adds	r3, #1
 8019102:	b298      	uxth	r0, r3
 8019104:	7fbb      	ldrb	r3, [r7, #30]
 8019106:	b29a      	uxth	r2, r3
 8019108:	7f7b      	ldrb	r3, [r7, #29]
 801910a:	b299      	uxth	r1, r3
 801910c:	697b      	ldr	r3, [r7, #20]
 801910e:	b29b      	uxth	r3, r3
 8019110:	fb11 f303 	smulbb	r3, r1, r3
 8019114:	b29b      	uxth	r3, r3
 8019116:	4413      	add	r3, r2
 8019118:	b29b      	uxth	r3, r3
 801911a:	3301      	adds	r3, #1
 801911c:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, LGRAY,  BLACK);
 801911e:	697b      	ldr	r3, [r7, #20]
 8019120:	011b      	lsls	r3, r3, #4
 8019122:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019126:	4a18      	ldr	r2, [pc, #96]	; (8019188 <updateStringItem+0x540>)
 8019128:	4413      	add	r3, r2
 801912a:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801912c:	2300      	movs	r3, #0
 801912e:	9301      	str	r3, [sp, #4]
 8019130:	f24c 6318 	movw	r3, #50712	; 0xc618
 8019134:	9300      	str	r3, [sp, #0]
 8019136:	4b15      	ldr	r3, [pc, #84]	; (801918c <updateStringItem+0x544>)
 8019138:	f7f5 fe10 	bl	800ed5c <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801913c:	7ffb      	ldrb	r3, [r7, #31]
 801913e:	b29a      	uxth	r2, r3
 8019140:	7f3b      	ldrb	r3, [r7, #28]
 8019142:	085b      	lsrs	r3, r3, #1
 8019144:	b2db      	uxtb	r3, r3
 8019146:	b29b      	uxth	r3, r3
 8019148:	4413      	add	r3, r2
 801914a:	b29b      	uxth	r3, r3
 801914c:	3301      	adds	r3, #1
 801914e:	b298      	uxth	r0, r3
 8019150:	7fbb      	ldrb	r3, [r7, #30]
 8019152:	b29a      	uxth	r2, r3
 8019154:	7f7b      	ldrb	r3, [r7, #29]
 8019156:	b299      	uxth	r1, r3
 8019158:	697b      	ldr	r3, [r7, #20]
 801915a:	b29b      	uxth	r3, r3
 801915c:	fb11 f303 	smulbb	r3, r1, r3
 8019160:	b29b      	uxth	r3, r3
 8019162:	4413      	add	r3, r2
 8019164:	b29b      	uxth	r3, r3
 8019166:	3301      	adds	r3, #1
 8019168:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, WHITE,  BLACK);
 801916a:	4b07      	ldr	r3, [pc, #28]	; (8019188 <updateStringItem+0x540>)
 801916c:	799b      	ldrb	r3, [r3, #6]
 801916e:	011b      	lsls	r3, r3, #4
 8019170:	3308      	adds	r3, #8
 8019172:	4a05      	ldr	r2, [pc, #20]	; (8019188 <updateStringItem+0x540>)
 8019174:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019176:	2300      	movs	r3, #0
 8019178:	9301      	str	r3, [sp, #4]
 801917a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801917e:	9300      	str	r3, [sp, #0]
 8019180:	4b02      	ldr	r3, [pc, #8]	; (801918c <updateStringItem+0x544>)
 8019182:	f7f5 fdeb 	bl	800ed5c <Paint_DrawString_EN>
 8019186:	e1b5      	b.n	80194f4 <updateStringItem+0x8ac>
 8019188:	24010018 	.word	0x24010018
 801918c:	24000030 	.word	0x24000030
					}

				}
				else if (currentCursorPosition.cursorPosition == VALUE)
 8019190:	4b92      	ldr	r3, [pc, #584]	; (80193dc <updateStringItem+0x794>)
 8019192:	781b      	ldrb	r3, [r3, #0]
 8019194:	2b0b      	cmp	r3, #11
 8019196:	f040 8127 	bne.w	80193e8 <updateStringItem+0x7a0>
				{
					if (howToDraw == RIGHT)
 801919a:	79fb      	ldrb	r3, [r7, #7]
 801919c:	2b04      	cmp	r3, #4
 801919e:	f040 8087 	bne.w	80192b0 <updateStringItem+0x668>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 80191a2:	7ffb      	ldrb	r3, [r7, #31]
 80191a4:	b29b      	uxth	r3, r3
 80191a6:	3301      	adds	r3, #1
 80191a8:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80191aa:	7fbb      	ldrb	r3, [r7, #30]
 80191ac:	b29a      	uxth	r2, r3
 80191ae:	7f7b      	ldrb	r3, [r7, #29]
 80191b0:	b299      	uxth	r1, r3
 80191b2:	697b      	ldr	r3, [r7, #20]
 80191b4:	b29b      	uxth	r3, r3
 80191b6:	fb11 f303 	smulbb	r3, r1, r3
 80191ba:	b29b      	uxth	r3, r3
 80191bc:	4413      	add	r3, r2
 80191be:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 80191c0:	3301      	adds	r3, #1
 80191c2:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 80191c4:	7ffb      	ldrb	r3, [r7, #31]
 80191c6:	b29c      	uxth	r4, r3
 80191c8:	697b      	ldr	r3, [r7, #20]
 80191ca:	011b      	lsls	r3, r3, #4
 80191cc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80191d0:	4a83      	ldr	r2, [pc, #524]	; (80193e0 <updateStringItem+0x798>)
 80191d2:	4413      	add	r3, r2
 80191d4:	3304      	adds	r3, #4
 80191d6:	4618      	mov	r0, r3
 80191d8:	f7e7 f88c 	bl	80002f4 <strlen>
 80191dc:	4603      	mov	r3, r0
 80191de:	b29a      	uxth	r2, r3
 80191e0:	4b80      	ldr	r3, [pc, #512]	; (80193e4 <updateStringItem+0x79c>)
 80191e2:	889b      	ldrh	r3, [r3, #4]
 80191e4:	fb12 f303 	smulbb	r3, r2, r3
 80191e8:	b29b      	uxth	r3, r3
 80191ea:	4423      	add	r3, r4
 80191ec:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 80191ee:	3301      	adds	r3, #1
 80191f0:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 80191f2:	7fbb      	ldrb	r3, [r7, #30]
 80191f4:	b29a      	uxth	r2, r3
 80191f6:	7f7b      	ldrb	r3, [r7, #29]
 80191f8:	b299      	uxth	r1, r3
 80191fa:	697b      	ldr	r3, [r7, #20]
 80191fc:	b29b      	uxth	r3, r3
 80191fe:	fb11 f303 	smulbb	r3, r1, r3
 8019202:	b29b      	uxth	r3, r3
 8019204:	4413      	add	r3, r2
 8019206:	b29a      	uxth	r2, r3
 8019208:	4b76      	ldr	r3, [pc, #472]	; (80193e4 <updateStringItem+0x79c>)
 801920a:	88db      	ldrh	r3, [r3, #6]
 801920c:	4413      	add	r3, r2
 801920e:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019210:	3301      	adds	r3, #1
 8019212:	b29b      	uxth	r3, r3
 8019214:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019218:	9200      	str	r2, [sp, #0]
 801921a:	4602      	mov	r2, r0
 801921c:	4631      	mov	r1, r6
 801921e:	4628      	mov	r0, r5
 8019220:	f7f5 f97e 	bl	800e520 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019224:	7ffb      	ldrb	r3, [r7, #31]
 8019226:	b29b      	uxth	r3, r3
 8019228:	3301      	adds	r3, #1
 801922a:	b298      	uxth	r0, r3
 801922c:	7fbb      	ldrb	r3, [r7, #30]
 801922e:	b29a      	uxth	r2, r3
 8019230:	7f7b      	ldrb	r3, [r7, #29]
 8019232:	b299      	uxth	r1, r3
 8019234:	697b      	ldr	r3, [r7, #20]
 8019236:	b29b      	uxth	r3, r3
 8019238:	fb11 f303 	smulbb	r3, r1, r3
 801923c:	b29b      	uxth	r3, r3
 801923e:	4413      	add	r3, r2
 8019240:	b29b      	uxth	r3, r3
 8019242:	3301      	adds	r3, #1
 8019244:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, WHITE,  BLACK);
 8019246:	697b      	ldr	r3, [r7, #20]
 8019248:	011b      	lsls	r3, r3, #4
 801924a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801924e:	4a64      	ldr	r2, [pc, #400]	; (80193e0 <updateStringItem+0x798>)
 8019250:	4413      	add	r3, r2
 8019252:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019254:	2300      	movs	r3, #0
 8019256:	9301      	str	r3, [sp, #4]
 8019258:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801925c:	9300      	str	r3, [sp, #0]
 801925e:	4b61      	ldr	r3, [pc, #388]	; (80193e4 <updateStringItem+0x79c>)
 8019260:	f7f5 fd7c 	bl	800ed5c <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019264:	7ffb      	ldrb	r3, [r7, #31]
 8019266:	b29a      	uxth	r2, r3
 8019268:	7f3b      	ldrb	r3, [r7, #28]
 801926a:	085b      	lsrs	r3, r3, #1
 801926c:	b2db      	uxtb	r3, r3
 801926e:	b29b      	uxth	r3, r3
 8019270:	4413      	add	r3, r2
 8019272:	b29b      	uxth	r3, r3
 8019274:	3301      	adds	r3, #1
 8019276:	b298      	uxth	r0, r3
 8019278:	7fbb      	ldrb	r3, [r7, #30]
 801927a:	b29a      	uxth	r2, r3
 801927c:	7f7b      	ldrb	r3, [r7, #29]
 801927e:	b299      	uxth	r1, r3
 8019280:	697b      	ldr	r3, [r7, #20]
 8019282:	b29b      	uxth	r3, r3
 8019284:	fb11 f303 	smulbb	r3, r1, r3
 8019288:	b29b      	uxth	r3, r3
 801928a:	4413      	add	r3, r2
 801928c:	b29b      	uxth	r3, r3
 801928e:	3301      	adds	r3, #1
 8019290:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, LGRAY,  BLACK);
 8019292:	4b53      	ldr	r3, [pc, #332]	; (80193e0 <updateStringItem+0x798>)
 8019294:	799b      	ldrb	r3, [r3, #6]
 8019296:	011b      	lsls	r3, r3, #4
 8019298:	3308      	adds	r3, #8
 801929a:	4a51      	ldr	r2, [pc, #324]	; (80193e0 <updateStringItem+0x798>)
 801929c:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801929e:	2300      	movs	r3, #0
 80192a0:	9301      	str	r3, [sp, #4]
 80192a2:	f24c 6318 	movw	r3, #50712	; 0xc618
 80192a6:	9300      	str	r3, [sp, #0]
 80192a8:	4b4e      	ldr	r3, [pc, #312]	; (80193e4 <updateStringItem+0x79c>)
 80192aa:	f7f5 fd57 	bl	800ed5c <Paint_DrawString_EN>
 80192ae:	e121      	b.n	80194f4 <updateStringItem+0x8ac>
					}
					else if (howToDraw == DOWN)
 80192b0:	79fb      	ldrb	r3, [r7, #7]
 80192b2:	2b01      	cmp	r3, #1
 80192b4:	d146      	bne.n	8019344 <updateStringItem+0x6fc>
					{
						stringItem.startValue = fmax(stringItem.startValue - stringItem.deltaMultiplier, stringItem.minValue * 1.0);
 80192b6:	4b4a      	ldr	r3, [pc, #296]	; (80193e0 <updateStringItem+0x798>)
 80192b8:	799b      	ldrb	r3, [r3, #6]
 80192ba:	461a      	mov	r2, r3
 80192bc:	4b48      	ldr	r3, [pc, #288]	; (80193e0 <updateStringItem+0x798>)
 80192be:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 80192c2:	1ad3      	subs	r3, r2, r3
 80192c4:	ee07 3a90 	vmov	s15, r3
 80192c8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80192cc:	4b44      	ldr	r3, [pc, #272]	; (80193e0 <updateStringItem+0x798>)
 80192ce:	791b      	ldrb	r3, [r3, #4]
 80192d0:	ee06 3a90 	vmov	s13, r3
 80192d4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80192d8:	eeb0 1b46 	vmov.f64	d1, d6
 80192dc:	eeb0 0b47 	vmov.f64	d0, d7
 80192e0:	f005 ff48 	bl	801f174 <fmax>
 80192e4:	eeb0 7b40 	vmov.f64	d7, d0
 80192e8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80192ec:	edc7 7a00 	vstr	s15, [r7]
 80192f0:	683b      	ldr	r3, [r7, #0]
 80192f2:	b2da      	uxtb	r2, r3
 80192f4:	4b3a      	ldr	r3, [pc, #232]	; (80193e0 <updateStringItem+0x798>)
 80192f6:	719a      	strb	r2, [r3, #6]
//						sprintf(localString,"%05d",stringItem.startValue);
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80192f8:	7ffb      	ldrb	r3, [r7, #31]
 80192fa:	b29a      	uxth	r2, r3
 80192fc:	7f3b      	ldrb	r3, [r7, #28]
 80192fe:	085b      	lsrs	r3, r3, #1
 8019300:	b2db      	uxtb	r3, r3
 8019302:	b29b      	uxth	r3, r3
 8019304:	4413      	add	r3, r2
 8019306:	b29b      	uxth	r3, r3
 8019308:	3301      	adds	r3, #1
 801930a:	b298      	uxth	r0, r3
 801930c:	7fbb      	ldrb	r3, [r7, #30]
 801930e:	b29a      	uxth	r2, r3
 8019310:	7f7b      	ldrb	r3, [r7, #29]
 8019312:	b299      	uxth	r1, r3
 8019314:	697b      	ldr	r3, [r7, #20]
 8019316:	b29b      	uxth	r3, r3
 8019318:	fb11 f303 	smulbb	r3, r1, r3
 801931c:	b29b      	uxth	r3, r3
 801931e:	4413      	add	r3, r2
 8019320:	b29b      	uxth	r3, r3
 8019322:	3301      	adds	r3, #1
 8019324:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, LGRAY,  BLACK);
 8019326:	4b2e      	ldr	r3, [pc, #184]	; (80193e0 <updateStringItem+0x798>)
 8019328:	799b      	ldrb	r3, [r3, #6]
 801932a:	011b      	lsls	r3, r3, #4
 801932c:	3308      	adds	r3, #8
 801932e:	4a2c      	ldr	r2, [pc, #176]	; (80193e0 <updateStringItem+0x798>)
 8019330:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019332:	2300      	movs	r3, #0
 8019334:	9301      	str	r3, [sp, #4]
 8019336:	f24c 6318 	movw	r3, #50712	; 0xc618
 801933a:	9300      	str	r3, [sp, #0]
 801933c:	4b29      	ldr	r3, [pc, #164]	; (80193e4 <updateStringItem+0x79c>)
 801933e:	f7f5 fd0d 	bl	800ed5c <Paint_DrawString_EN>
 8019342:	e0d7      	b.n	80194f4 <updateStringItem+0x8ac>
					}
					else if (howToDraw == UP)
 8019344:	79fb      	ldrb	r3, [r7, #7]
 8019346:	2b00      	cmp	r3, #0
 8019348:	f040 80d4 	bne.w	80194f4 <updateStringItem+0x8ac>
					{
						stringItem.startValue = fmin(stringItem.startValue + stringItem.deltaMultiplier, stringItem.maxValue * 1.0);
 801934c:	4b24      	ldr	r3, [pc, #144]	; (80193e0 <updateStringItem+0x798>)
 801934e:	799b      	ldrb	r3, [r3, #6]
 8019350:	461a      	mov	r2, r3
 8019352:	4b23      	ldr	r3, [pc, #140]	; (80193e0 <updateStringItem+0x798>)
 8019354:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 8019358:	4413      	add	r3, r2
 801935a:	ee07 3a90 	vmov	s15, r3
 801935e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8019362:	4b1f      	ldr	r3, [pc, #124]	; (80193e0 <updateStringItem+0x798>)
 8019364:	795b      	ldrb	r3, [r3, #5]
 8019366:	ee06 3a90 	vmov	s13, r3
 801936a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801936e:	eeb0 1b46 	vmov.f64	d1, d6
 8019372:	eeb0 0b47 	vmov.f64	d0, d7
 8019376:	f005 ff18 	bl	801f1aa <fmin>
 801937a:	eeb0 7b40 	vmov.f64	d7, d0
 801937e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8019382:	edc7 7a00 	vstr	s15, [r7]
 8019386:	683b      	ldr	r3, [r7, #0]
 8019388:	b2da      	uxtb	r2, r3
 801938a:	4b15      	ldr	r3, [pc, #84]	; (80193e0 <updateStringItem+0x798>)
 801938c:	719a      	strb	r2, [r3, #6]
//						sprintf(localString,"%05d",stringItem.startValue);
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801938e:	7ffb      	ldrb	r3, [r7, #31]
 8019390:	b29a      	uxth	r2, r3
 8019392:	7f3b      	ldrb	r3, [r7, #28]
 8019394:	085b      	lsrs	r3, r3, #1
 8019396:	b2db      	uxtb	r3, r3
 8019398:	b29b      	uxth	r3, r3
 801939a:	4413      	add	r3, r2
 801939c:	b29b      	uxth	r3, r3
 801939e:	3301      	adds	r3, #1
 80193a0:	b298      	uxth	r0, r3
 80193a2:	7fbb      	ldrb	r3, [r7, #30]
 80193a4:	b29a      	uxth	r2, r3
 80193a6:	7f7b      	ldrb	r3, [r7, #29]
 80193a8:	b299      	uxth	r1, r3
 80193aa:	697b      	ldr	r3, [r7, #20]
 80193ac:	b29b      	uxth	r3, r3
 80193ae:	fb11 f303 	smulbb	r3, r1, r3
 80193b2:	b29b      	uxth	r3, r3
 80193b4:	4413      	add	r3, r2
 80193b6:	b29b      	uxth	r3, r3
 80193b8:	3301      	adds	r3, #1
 80193ba:	b299      	uxth	r1, r3
								stringItem.valuesArray[stringItem.startValue], &Font12, LGRAY,  BLACK);
 80193bc:	4b08      	ldr	r3, [pc, #32]	; (80193e0 <updateStringItem+0x798>)
 80193be:	799b      	ldrb	r3, [r3, #6]
 80193c0:	011b      	lsls	r3, r3, #4
 80193c2:	3308      	adds	r3, #8
 80193c4:	4a06      	ldr	r2, [pc, #24]	; (80193e0 <updateStringItem+0x798>)
 80193c6:	441a      	add	r2, r3
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80193c8:	2300      	movs	r3, #0
 80193ca:	9301      	str	r3, [sp, #4]
 80193cc:	f24c 6318 	movw	r3, #50712	; 0xc618
 80193d0:	9300      	str	r3, [sp, #0]
 80193d2:	4b04      	ldr	r3, [pc, #16]	; (80193e4 <updateStringItem+0x79c>)
 80193d4:	f7f5 fcc2 	bl	800ed5c <Paint_DrawString_EN>
 80193d8:	e08c      	b.n	80194f4 <updateStringItem+0x8ac>
 80193da:	bf00      	nop
 80193dc:	2400ac84 	.word	0x2400ac84
 80193e0:	24010018 	.word	0x24010018
 80193e4:	24000030 	.word	0x24000030
					}
				}
				else
				{
					Paint_ClearWindows(MenuRectangleStartX + 1,
 80193e8:	7ffb      	ldrb	r3, [r7, #31]
 80193ea:	b29b      	uxth	r3, r3
 80193ec:	3301      	adds	r3, #1
 80193ee:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80193f0:	7fbb      	ldrb	r3, [r7, #30]
 80193f2:	b29a      	uxth	r2, r3
 80193f4:	7f7b      	ldrb	r3, [r7, #29]
 80193f6:	b299      	uxth	r1, r3
 80193f8:	697b      	ldr	r3, [r7, #20]
 80193fa:	b29b      	uxth	r3, r3
 80193fc:	fb11 f303 	smulbb	r3, r1, r3
 8019400:	b29b      	uxth	r3, r3
 8019402:	4413      	add	r3, r2
 8019404:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 8019406:	3301      	adds	r3, #1
 8019408:	b29e      	uxth	r6, r3
							MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 801940a:	7ffb      	ldrb	r3, [r7, #31]
 801940c:	b29c      	uxth	r4, r3
 801940e:	697b      	ldr	r3, [r7, #20]
 8019410:	011b      	lsls	r3, r3, #4
 8019412:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019416:	4a8e      	ldr	r2, [pc, #568]	; (8019650 <updateStringItem+0xa08>)
 8019418:	4413      	add	r3, r2
 801941a:	3304      	adds	r3, #4
 801941c:	4618      	mov	r0, r3
 801941e:	f7e6 ff69 	bl	80002f4 <strlen>
 8019422:	4603      	mov	r3, r0
 8019424:	b29a      	uxth	r2, r3
 8019426:	4b8b      	ldr	r3, [pc, #556]	; (8019654 <updateStringItem+0xa0c>)
 8019428:	889b      	ldrh	r3, [r3, #4]
 801942a:	fb12 f303 	smulbb	r3, r2, r3
 801942e:	b29b      	uxth	r3, r3
 8019430:	4423      	add	r3, r4
 8019432:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 8019434:	3301      	adds	r3, #1
 8019436:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 8019438:	7fbb      	ldrb	r3, [r7, #30]
 801943a:	b29a      	uxth	r2, r3
 801943c:	7f7b      	ldrb	r3, [r7, #29]
 801943e:	b299      	uxth	r1, r3
 8019440:	697b      	ldr	r3, [r7, #20]
 8019442:	b29b      	uxth	r3, r3
 8019444:	fb11 f303 	smulbb	r3, r1, r3
 8019448:	b29b      	uxth	r3, r3
 801944a:	4413      	add	r3, r2
 801944c:	b29a      	uxth	r2, r3
 801944e:	4b81      	ldr	r3, [pc, #516]	; (8019654 <updateStringItem+0xa0c>)
 8019450:	88db      	ldrh	r3, [r3, #6]
 8019452:	4413      	add	r3, r2
 8019454:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 8019456:	3301      	adds	r3, #1
 8019458:	b29b      	uxth	r3, r3
 801945a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801945e:	9200      	str	r2, [sp, #0]
 8019460:	4602      	mov	r2, r0
 8019462:	4631      	mov	r1, r6
 8019464:	4628      	mov	r0, r5
 8019466:	f7f5 f85b 	bl	800e520 <Paint_ClearWindows>
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801946a:	7ffb      	ldrb	r3, [r7, #31]
 801946c:	b29b      	uxth	r3, r3
 801946e:	3301      	adds	r3, #1
 8019470:	b298      	uxth	r0, r3
 8019472:	7fbb      	ldrb	r3, [r7, #30]
 8019474:	b29a      	uxth	r2, r3
 8019476:	7f7b      	ldrb	r3, [r7, #29]
 8019478:	b299      	uxth	r1, r3
 801947a:	697b      	ldr	r3, [r7, #20]
 801947c:	b29b      	uxth	r3, r3
 801947e:	fb11 f303 	smulbb	r3, r1, r3
 8019482:	b29b      	uxth	r3, r3
 8019484:	4413      	add	r3, r2
 8019486:	b29b      	uxth	r3, r3
 8019488:	3301      	adds	r3, #1
 801948a:	b299      	uxth	r1, r3
							stringItem.itemsArray[i], &Font12, WHITE,  BLACK);
 801948c:	697b      	ldr	r3, [r7, #20]
 801948e:	011b      	lsls	r3, r3, #4
 8019490:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019494:	4a6e      	ldr	r2, [pc, #440]	; (8019650 <updateStringItem+0xa08>)
 8019496:	4413      	add	r3, r2
 8019498:	1d1a      	adds	r2, r3, #4
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801949a:	2300      	movs	r3, #0
 801949c:	9301      	str	r3, [sp, #4]
 801949e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80194a2:	9300      	str	r3, [sp, #0]
 80194a4:	4b6b      	ldr	r3, [pc, #428]	; (8019654 <updateStringItem+0xa0c>)
 80194a6:	f7f5 fc59 	bl	800ed5c <Paint_DrawString_EN>
					Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80194aa:	7ffb      	ldrb	r3, [r7, #31]
 80194ac:	b29a      	uxth	r2, r3
 80194ae:	7f3b      	ldrb	r3, [r7, #28]
 80194b0:	085b      	lsrs	r3, r3, #1
 80194b2:	b2db      	uxtb	r3, r3
 80194b4:	b29b      	uxth	r3, r3
 80194b6:	4413      	add	r3, r2
 80194b8:	b29b      	uxth	r3, r3
 80194ba:	3301      	adds	r3, #1
 80194bc:	b298      	uxth	r0, r3
 80194be:	7fbb      	ldrb	r3, [r7, #30]
 80194c0:	b29a      	uxth	r2, r3
 80194c2:	7f7b      	ldrb	r3, [r7, #29]
 80194c4:	b299      	uxth	r1, r3
 80194c6:	697b      	ldr	r3, [r7, #20]
 80194c8:	b29b      	uxth	r3, r3
 80194ca:	fb11 f303 	smulbb	r3, r1, r3
 80194ce:	b29b      	uxth	r3, r3
 80194d0:	4413      	add	r3, r2
 80194d2:	b29b      	uxth	r3, r3
 80194d4:	3301      	adds	r3, #1
 80194d6:	b299      	uxth	r1, r3
							stringItem.valuesArray[stringItem.startValue], &Font12, WHITE,  BLACK);
 80194d8:	4b5d      	ldr	r3, [pc, #372]	; (8019650 <updateStringItem+0xa08>)
 80194da:	799b      	ldrb	r3, [r3, #6]
 80194dc:	011b      	lsls	r3, r3, #4
 80194de:	3308      	adds	r3, #8
 80194e0:	4a5b      	ldr	r2, [pc, #364]	; (8019650 <updateStringItem+0xa08>)
 80194e2:	441a      	add	r2, r3
					Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80194e4:	2300      	movs	r3, #0
 80194e6:	9301      	str	r3, [sp, #4]
 80194e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80194ec:	9300      	str	r3, [sp, #0]
 80194ee:	4b59      	ldr	r3, [pc, #356]	; (8019654 <updateStringItem+0xa0c>)
 80194f0:	f7f5 fc34 	bl	800ed5c <Paint_DrawString_EN>
				}
			}
			// Render value text of "Multiplier" with Grey or White background
			if ( (i == 3) )
 80194f4:	697b      	ldr	r3, [r7, #20]
 80194f6:	2b03      	cmp	r3, #3
 80194f8:	f040 835e 	bne.w	8019bb8 <updateStringItem+0xf70>
			{
				char localString[8] = "";
 80194fc:	2300      	movs	r3, #0
 80194fe:	60fb      	str	r3, [r7, #12]
 8019500:	2300      	movs	r3, #0
 8019502:	613b      	str	r3, [r7, #16]
				sprintf(localString,"%d",stringItem.deltaMultiplier);
 8019504:	4b52      	ldr	r3, [pc, #328]	; (8019650 <updateStringItem+0xa08>)
 8019506:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 801950a:	461a      	mov	r2, r3
 801950c:	f107 030c 	add.w	r3, r7, #12
 8019510:	4951      	ldr	r1, [pc, #324]	; (8019658 <updateStringItem+0xa10>)
 8019512:	4618      	mov	r0, r3
 8019514:	f002 faa6 	bl	801ba64 <siprintf>
				if (currentCursorPosition.cursorPosition == 0x03)
 8019518:	4b50      	ldr	r3, [pc, #320]	; (801965c <updateStringItem+0xa14>)
 801951a:	781b      	ldrb	r3, [r3, #0]
 801951c:	2b03      	cmp	r3, #3
 801951e:	f040 81b1 	bne.w	8019884 <updateStringItem+0xc3c>
				{
					if ( (howToDraw == LEFT) || (howToDraw == FULL) )
 8019522:	79fb      	ldrb	r3, [r7, #7]
 8019524:	2b03      	cmp	r3, #3
 8019526:	d003      	beq.n	8019530 <updateStringItem+0x8e8>
 8019528:	79fb      	ldrb	r3, [r7, #7]
 801952a:	2b02      	cmp	r3, #2
 801952c:	f040 8098 	bne.w	8019660 <updateStringItem+0xa18>
					{
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019530:	7ffb      	ldrb	r3, [r7, #31]
 8019532:	b29b      	uxth	r3, r3
 8019534:	3301      	adds	r3, #1
 8019536:	b298      	uxth	r0, r3
 8019538:	7fbb      	ldrb	r3, [r7, #30]
 801953a:	b29a      	uxth	r2, r3
 801953c:	7f7b      	ldrb	r3, [r7, #29]
 801953e:	b299      	uxth	r1, r3
 8019540:	697b      	ldr	r3, [r7, #20]
 8019542:	b29b      	uxth	r3, r3
 8019544:	fb11 f303 	smulbb	r3, r1, r3
 8019548:	b29b      	uxth	r3, r3
 801954a:	4413      	add	r3, r2
 801954c:	b29b      	uxth	r3, r3
 801954e:	3301      	adds	r3, #1
 8019550:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, LGRAY,  BLACK);
 8019552:	697b      	ldr	r3, [r7, #20]
 8019554:	011b      	lsls	r3, r3, #4
 8019556:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801955a:	4a3d      	ldr	r2, [pc, #244]	; (8019650 <updateStringItem+0xa08>)
 801955c:	4413      	add	r3, r2
 801955e:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019560:	2300      	movs	r3, #0
 8019562:	9301      	str	r3, [sp, #4]
 8019564:	f24c 6318 	movw	r3, #50712	; 0xc618
 8019568:	9300      	str	r3, [sp, #0]
 801956a:	4b3a      	ldr	r3, [pc, #232]	; (8019654 <updateStringItem+0xa0c>)
 801956c:	f7f5 fbf6 	bl	800ed5c <Paint_DrawString_EN>
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 8019570:	7ffb      	ldrb	r3, [r7, #31]
 8019572:	b29a      	uxth	r2, r3
 8019574:	7f3b      	ldrb	r3, [r7, #28]
 8019576:	085b      	lsrs	r3, r3, #1
 8019578:	b2db      	uxtb	r3, r3
 801957a:	b29b      	uxth	r3, r3
 801957c:	4413      	add	r3, r2
 801957e:	b29b      	uxth	r3, r3
 8019580:	3301      	adds	r3, #1
 8019582:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019584:	7fbb      	ldrb	r3, [r7, #30]
 8019586:	b29a      	uxth	r2, r3
 8019588:	7f7b      	ldrb	r3, [r7, #29]
 801958a:	b299      	uxth	r1, r3
 801958c:	697b      	ldr	r3, [r7, #20]
 801958e:	b29b      	uxth	r3, r3
 8019590:	fb11 f303 	smulbb	r3, r1, r3
 8019594:	b29b      	uxth	r3, r3
 8019596:	4413      	add	r3, r2
 8019598:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 801959a:	3301      	adds	r3, #1
 801959c:	b29e      	uxth	r6, r3
								MenuRectangleStartX + MenuRectangleWidth / 2 + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 801959e:	7ffb      	ldrb	r3, [r7, #31]
 80195a0:	b29a      	uxth	r2, r3
 80195a2:	7f3b      	ldrb	r3, [r7, #28]
 80195a4:	085b      	lsrs	r3, r3, #1
 80195a6:	b2db      	uxtb	r3, r3
 80195a8:	b29b      	uxth	r3, r3
 80195aa:	4413      	add	r3, r2
 80195ac:	b29c      	uxth	r4, r3
 80195ae:	697b      	ldr	r3, [r7, #20]
 80195b0:	011b      	lsls	r3, r3, #4
 80195b2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80195b6:	4a26      	ldr	r2, [pc, #152]	; (8019650 <updateStringItem+0xa08>)
 80195b8:	4413      	add	r3, r2
 80195ba:	3304      	adds	r3, #4
 80195bc:	4618      	mov	r0, r3
 80195be:	f7e6 fe99 	bl	80002f4 <strlen>
 80195c2:	4603      	mov	r3, r0
 80195c4:	b29a      	uxth	r2, r3
 80195c6:	4b23      	ldr	r3, [pc, #140]	; (8019654 <updateStringItem+0xa0c>)
 80195c8:	889b      	ldrh	r3, [r3, #4]
 80195ca:	fb12 f303 	smulbb	r3, r2, r3
 80195ce:	b29b      	uxth	r3, r3
 80195d0:	4423      	add	r3, r4
 80195d2:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 80195d4:	3301      	adds	r3, #1
 80195d6:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 80195d8:	7fbb      	ldrb	r3, [r7, #30]
 80195da:	b29a      	uxth	r2, r3
 80195dc:	7f7b      	ldrb	r3, [r7, #29]
 80195de:	b299      	uxth	r1, r3
 80195e0:	697b      	ldr	r3, [r7, #20]
 80195e2:	b29b      	uxth	r3, r3
 80195e4:	fb11 f303 	smulbb	r3, r1, r3
 80195e8:	b29b      	uxth	r3, r3
 80195ea:	4413      	add	r3, r2
 80195ec:	b29a      	uxth	r2, r3
 80195ee:	4b19      	ldr	r3, [pc, #100]	; (8019654 <updateStringItem+0xa0c>)
 80195f0:	88db      	ldrh	r3, [r3, #6]
 80195f2:	4413      	add	r3, r2
 80195f4:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + MenuRectangleWidth / 2 + 1,
 80195f6:	3301      	adds	r3, #1
 80195f8:	b29b      	uxth	r3, r3
 80195fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80195fe:	9200      	str	r2, [sp, #0]
 8019600:	4602      	mov	r2, r0
 8019602:	4631      	mov	r1, r6
 8019604:	4628      	mov	r0, r5
 8019606:	f7f4 ff8b 	bl	800e520 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801960a:	7ffb      	ldrb	r3, [r7, #31]
 801960c:	b29a      	uxth	r2, r3
 801960e:	7f3b      	ldrb	r3, [r7, #28]
 8019610:	085b      	lsrs	r3, r3, #1
 8019612:	b2db      	uxtb	r3, r3
 8019614:	b29b      	uxth	r3, r3
 8019616:	4413      	add	r3, r2
 8019618:	b29b      	uxth	r3, r3
 801961a:	3301      	adds	r3, #1
 801961c:	b298      	uxth	r0, r3
 801961e:	7fbb      	ldrb	r3, [r7, #30]
 8019620:	b29a      	uxth	r2, r3
 8019622:	7f7b      	ldrb	r3, [r7, #29]
 8019624:	b299      	uxth	r1, r3
 8019626:	697b      	ldr	r3, [r7, #20]
 8019628:	b29b      	uxth	r3, r3
 801962a:	fb11 f303 	smulbb	r3, r1, r3
 801962e:	b29b      	uxth	r3, r3
 8019630:	4413      	add	r3, r2
 8019632:	b29b      	uxth	r3, r3
 8019634:	3301      	adds	r3, #1
 8019636:	b299      	uxth	r1, r3
 8019638:	f107 020c 	add.w	r2, r7, #12
 801963c:	2300      	movs	r3, #0
 801963e:	9301      	str	r3, [sp, #4]
 8019640:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019644:	9300      	str	r3, [sp, #0]
 8019646:	4b03      	ldr	r3, [pc, #12]	; (8019654 <updateStringItem+0xa0c>)
 8019648:	f7f5 fb88 	bl	800ed5c <Paint_DrawString_EN>
 801964c:	e2b4      	b.n	8019bb8 <updateStringItem+0xf70>
 801964e:	bf00      	nop
 8019650:	24010018 	.word	0x24010018
 8019654:	24000030 	.word	0x24000030
 8019658:	0801f9a4 	.word	0x0801f9a4
 801965c:	2400ac84 	.word	0x2400ac84
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == DOWN)
 8019660:	79fb      	ldrb	r3, [r7, #7]
 8019662:	2b01      	cmp	r3, #1
 8019664:	f040 8083 	bne.w	801976e <updateStringItem+0xb26>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019668:	7ffb      	ldrb	r3, [r7, #31]
 801966a:	b29b      	uxth	r3, r3
 801966c:	3301      	adds	r3, #1
 801966e:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019670:	7fbb      	ldrb	r3, [r7, #30]
 8019672:	b29a      	uxth	r2, r3
 8019674:	7f7b      	ldrb	r3, [r7, #29]
 8019676:	b299      	uxth	r1, r3
 8019678:	697b      	ldr	r3, [r7, #20]
 801967a:	b29b      	uxth	r3, r3
 801967c:	fb11 f303 	smulbb	r3, r1, r3
 8019680:	b29b      	uxth	r3, r3
 8019682:	4413      	add	r3, r2
 8019684:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019686:	3301      	adds	r3, #1
 8019688:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 801968a:	7ffb      	ldrb	r3, [r7, #31]
 801968c:	b29c      	uxth	r4, r3
 801968e:	697b      	ldr	r3, [r7, #20]
 8019690:	011b      	lsls	r3, r3, #4
 8019692:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019696:	4a79      	ldr	r2, [pc, #484]	; (801987c <updateStringItem+0xc34>)
 8019698:	4413      	add	r3, r2
 801969a:	3304      	adds	r3, #4
 801969c:	4618      	mov	r0, r3
 801969e:	f7e6 fe29 	bl	80002f4 <strlen>
 80196a2:	4603      	mov	r3, r0
 80196a4:	b29a      	uxth	r2, r3
 80196a6:	4b76      	ldr	r3, [pc, #472]	; (8019880 <updateStringItem+0xc38>)
 80196a8:	889b      	ldrh	r3, [r3, #4]
 80196aa:	fb12 f303 	smulbb	r3, r2, r3
 80196ae:	b29b      	uxth	r3, r3
 80196b0:	4423      	add	r3, r4
 80196b2:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 80196b4:	3301      	adds	r3, #1
 80196b6:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 80196b8:	7fbb      	ldrb	r3, [r7, #30]
 80196ba:	b29a      	uxth	r2, r3
 80196bc:	7f7b      	ldrb	r3, [r7, #29]
 80196be:	b299      	uxth	r1, r3
 80196c0:	697b      	ldr	r3, [r7, #20]
 80196c2:	b29b      	uxth	r3, r3
 80196c4:	fb11 f303 	smulbb	r3, r1, r3
 80196c8:	b29b      	uxth	r3, r3
 80196ca:	4413      	add	r3, r2
 80196cc:	b29a      	uxth	r2, r3
 80196ce:	4b6c      	ldr	r3, [pc, #432]	; (8019880 <updateStringItem+0xc38>)
 80196d0:	88db      	ldrh	r3, [r3, #6]
 80196d2:	4413      	add	r3, r2
 80196d4:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 80196d6:	3301      	adds	r3, #1
 80196d8:	b29b      	uxth	r3, r3
 80196da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80196de:	9200      	str	r2, [sp, #0]
 80196e0:	4602      	mov	r2, r0
 80196e2:	4631      	mov	r1, r6
 80196e4:	4628      	mov	r0, r5
 80196e6:	f7f4 ff1b 	bl	800e520 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80196ea:	7ffb      	ldrb	r3, [r7, #31]
 80196ec:	b29b      	uxth	r3, r3
 80196ee:	3301      	adds	r3, #1
 80196f0:	b298      	uxth	r0, r3
 80196f2:	7fbb      	ldrb	r3, [r7, #30]
 80196f4:	b29a      	uxth	r2, r3
 80196f6:	7f7b      	ldrb	r3, [r7, #29]
 80196f8:	b299      	uxth	r1, r3
 80196fa:	697b      	ldr	r3, [r7, #20]
 80196fc:	b29b      	uxth	r3, r3
 80196fe:	fb11 f303 	smulbb	r3, r1, r3
 8019702:	b29b      	uxth	r3, r3
 8019704:	4413      	add	r3, r2
 8019706:	b29b      	uxth	r3, r3
 8019708:	3301      	adds	r3, #1
 801970a:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, LGRAY,  BLACK);
 801970c:	697b      	ldr	r3, [r7, #20]
 801970e:	011b      	lsls	r3, r3, #4
 8019710:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019714:	4a59      	ldr	r2, [pc, #356]	; (801987c <updateStringItem+0xc34>)
 8019716:	4413      	add	r3, r2
 8019718:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801971a:	2300      	movs	r3, #0
 801971c:	9301      	str	r3, [sp, #4]
 801971e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8019722:	9300      	str	r3, [sp, #0]
 8019724:	4b56      	ldr	r3, [pc, #344]	; (8019880 <updateStringItem+0xc38>)
 8019726:	f7f5 fb19 	bl	800ed5c <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801972a:	7ffb      	ldrb	r3, [r7, #31]
 801972c:	b29a      	uxth	r2, r3
 801972e:	7f3b      	ldrb	r3, [r7, #28]
 8019730:	085b      	lsrs	r3, r3, #1
 8019732:	b2db      	uxtb	r3, r3
 8019734:	b29b      	uxth	r3, r3
 8019736:	4413      	add	r3, r2
 8019738:	b29b      	uxth	r3, r3
 801973a:	3301      	adds	r3, #1
 801973c:	b298      	uxth	r0, r3
 801973e:	7fbb      	ldrb	r3, [r7, #30]
 8019740:	b29a      	uxth	r2, r3
 8019742:	7f7b      	ldrb	r3, [r7, #29]
 8019744:	b299      	uxth	r1, r3
 8019746:	697b      	ldr	r3, [r7, #20]
 8019748:	b29b      	uxth	r3, r3
 801974a:	fb11 f303 	smulbb	r3, r1, r3
 801974e:	b29b      	uxth	r3, r3
 8019750:	4413      	add	r3, r2
 8019752:	b29b      	uxth	r3, r3
 8019754:	3301      	adds	r3, #1
 8019756:	b299      	uxth	r1, r3
 8019758:	f107 020c 	add.w	r2, r7, #12
 801975c:	2300      	movs	r3, #0
 801975e:	9301      	str	r3, [sp, #4]
 8019760:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019764:	9300      	str	r3, [sp, #0]
 8019766:	4b46      	ldr	r3, [pc, #280]	; (8019880 <updateStringItem+0xc38>)
 8019768:	f7f5 faf8 	bl	800ed5c <Paint_DrawString_EN>
 801976c:	e224      	b.n	8019bb8 <updateStringItem+0xf70>
								localString, &Font12, WHITE,  BLACK);
					}
					else if (howToDraw == UP)
 801976e:	79fb      	ldrb	r3, [r7, #7]
 8019770:	2b00      	cmp	r3, #0
 8019772:	f040 8221 	bne.w	8019bb8 <updateStringItem+0xf70>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019776:	7ffb      	ldrb	r3, [r7, #31]
 8019778:	b29b      	uxth	r3, r3
 801977a:	3301      	adds	r3, #1
 801977c:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801977e:	7fbb      	ldrb	r3, [r7, #30]
 8019780:	b29a      	uxth	r2, r3
 8019782:	7f7b      	ldrb	r3, [r7, #29]
 8019784:	b299      	uxth	r1, r3
 8019786:	697b      	ldr	r3, [r7, #20]
 8019788:	b29b      	uxth	r3, r3
 801978a:	fb11 f303 	smulbb	r3, r1, r3
 801978e:	b29b      	uxth	r3, r3
 8019790:	4413      	add	r3, r2
 8019792:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019794:	3301      	adds	r3, #1
 8019796:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 8019798:	7ffb      	ldrb	r3, [r7, #31]
 801979a:	b29c      	uxth	r4, r3
 801979c:	697b      	ldr	r3, [r7, #20]
 801979e:	011b      	lsls	r3, r3, #4
 80197a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80197a4:	4a35      	ldr	r2, [pc, #212]	; (801987c <updateStringItem+0xc34>)
 80197a6:	4413      	add	r3, r2
 80197a8:	3304      	adds	r3, #4
 80197aa:	4618      	mov	r0, r3
 80197ac:	f7e6 fda2 	bl	80002f4 <strlen>
 80197b0:	4603      	mov	r3, r0
 80197b2:	b29a      	uxth	r2, r3
 80197b4:	4b32      	ldr	r3, [pc, #200]	; (8019880 <updateStringItem+0xc38>)
 80197b6:	889b      	ldrh	r3, [r3, #4]
 80197b8:	fb12 f303 	smulbb	r3, r2, r3
 80197bc:	b29b      	uxth	r3, r3
 80197be:	4423      	add	r3, r4
 80197c0:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 80197c2:	3301      	adds	r3, #1
 80197c4:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 80197c6:	7fbb      	ldrb	r3, [r7, #30]
 80197c8:	b29a      	uxth	r2, r3
 80197ca:	7f7b      	ldrb	r3, [r7, #29]
 80197cc:	b299      	uxth	r1, r3
 80197ce:	697b      	ldr	r3, [r7, #20]
 80197d0:	b29b      	uxth	r3, r3
 80197d2:	fb11 f303 	smulbb	r3, r1, r3
 80197d6:	b29b      	uxth	r3, r3
 80197d8:	4413      	add	r3, r2
 80197da:	b29a      	uxth	r2, r3
 80197dc:	4b28      	ldr	r3, [pc, #160]	; (8019880 <updateStringItem+0xc38>)
 80197de:	88db      	ldrh	r3, [r3, #6]
 80197e0:	4413      	add	r3, r2
 80197e2:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 80197e4:	3301      	adds	r3, #1
 80197e6:	b29b      	uxth	r3, r3
 80197e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80197ec:	9200      	str	r2, [sp, #0]
 80197ee:	4602      	mov	r2, r0
 80197f0:	4631      	mov	r1, r6
 80197f2:	4628      	mov	r0, r5
 80197f4:	f7f4 fe94 	bl	800e520 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80197f8:	7ffb      	ldrb	r3, [r7, #31]
 80197fa:	b29b      	uxth	r3, r3
 80197fc:	3301      	adds	r3, #1
 80197fe:	b298      	uxth	r0, r3
 8019800:	7fbb      	ldrb	r3, [r7, #30]
 8019802:	b29a      	uxth	r2, r3
 8019804:	7f7b      	ldrb	r3, [r7, #29]
 8019806:	b299      	uxth	r1, r3
 8019808:	697b      	ldr	r3, [r7, #20]
 801980a:	b29b      	uxth	r3, r3
 801980c:	fb11 f303 	smulbb	r3, r1, r3
 8019810:	b29b      	uxth	r3, r3
 8019812:	4413      	add	r3, r2
 8019814:	b29b      	uxth	r3, r3
 8019816:	3301      	adds	r3, #1
 8019818:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, LGRAY,  BLACK);
 801981a:	697b      	ldr	r3, [r7, #20]
 801981c:	011b      	lsls	r3, r3, #4
 801981e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019822:	4a16      	ldr	r2, [pc, #88]	; (801987c <updateStringItem+0xc34>)
 8019824:	4413      	add	r3, r2
 8019826:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019828:	2300      	movs	r3, #0
 801982a:	9301      	str	r3, [sp, #4]
 801982c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8019830:	9300      	str	r3, [sp, #0]
 8019832:	4b13      	ldr	r3, [pc, #76]	; (8019880 <updateStringItem+0xc38>)
 8019834:	f7f5 fa92 	bl	800ed5c <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019838:	7ffb      	ldrb	r3, [r7, #31]
 801983a:	b29a      	uxth	r2, r3
 801983c:	7f3b      	ldrb	r3, [r7, #28]
 801983e:	085b      	lsrs	r3, r3, #1
 8019840:	b2db      	uxtb	r3, r3
 8019842:	b29b      	uxth	r3, r3
 8019844:	4413      	add	r3, r2
 8019846:	b29b      	uxth	r3, r3
 8019848:	3301      	adds	r3, #1
 801984a:	b298      	uxth	r0, r3
 801984c:	7fbb      	ldrb	r3, [r7, #30]
 801984e:	b29a      	uxth	r2, r3
 8019850:	7f7b      	ldrb	r3, [r7, #29]
 8019852:	b299      	uxth	r1, r3
 8019854:	697b      	ldr	r3, [r7, #20]
 8019856:	b29b      	uxth	r3, r3
 8019858:	fb11 f303 	smulbb	r3, r1, r3
 801985c:	b29b      	uxth	r3, r3
 801985e:	4413      	add	r3, r2
 8019860:	b29b      	uxth	r3, r3
 8019862:	3301      	adds	r3, #1
 8019864:	b299      	uxth	r1, r3
 8019866:	f107 020c 	add.w	r2, r7, #12
 801986a:	2300      	movs	r3, #0
 801986c:	9301      	str	r3, [sp, #4]
 801986e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019872:	9300      	str	r3, [sp, #0]
 8019874:	4b02      	ldr	r3, [pc, #8]	; (8019880 <updateStringItem+0xc38>)
 8019876:	f7f5 fa71 	bl	800ed5c <Paint_DrawString_EN>
 801987a:	e19d      	b.n	8019bb8 <updateStringItem+0xf70>
 801987c:	24010018 	.word	0x24010018
 8019880:	24000030 	.word	0x24000030
								localString, &Font12, WHITE,  BLACK);
					}
				}
				else if (currentCursorPosition.cursorPosition == MULTIPLIER)
 8019884:	4b85      	ldr	r3, [pc, #532]	; (8019a9c <updateStringItem+0xe54>)
 8019886:	781b      	ldrb	r3, [r3, #0]
 8019888:	2b0c      	cmp	r3, #12
 801988a:	f040 8113 	bne.w	8019ab4 <updateStringItem+0xe6c>
				{
					if (howToDraw == RIGHT)
 801988e:	79fb      	ldrb	r3, [r7, #7]
 8019890:	2b04      	cmp	r3, #4
 8019892:	f040 8083 	bne.w	801999c <updateStringItem+0xd54>
					{
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019896:	7ffb      	ldrb	r3, [r7, #31]
 8019898:	b29b      	uxth	r3, r3
 801989a:	3301      	adds	r3, #1
 801989c:	b29d      	uxth	r5, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801989e:	7fbb      	ldrb	r3, [r7, #30]
 80198a0:	b29a      	uxth	r2, r3
 80198a2:	7f7b      	ldrb	r3, [r7, #29]
 80198a4:	b299      	uxth	r1, r3
 80198a6:	697b      	ldr	r3, [r7, #20]
 80198a8:	b29b      	uxth	r3, r3
 80198aa:	fb11 f303 	smulbb	r3, r1, r3
 80198ae:	b29b      	uxth	r3, r3
 80198b0:	4413      	add	r3, r2
 80198b2:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 80198b4:	3301      	adds	r3, #1
 80198b6:	b29e      	uxth	r6, r3
								MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 80198b8:	7ffb      	ldrb	r3, [r7, #31]
 80198ba:	b29c      	uxth	r4, r3
 80198bc:	697b      	ldr	r3, [r7, #20]
 80198be:	011b      	lsls	r3, r3, #4
 80198c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80198c4:	4a76      	ldr	r2, [pc, #472]	; (8019aa0 <updateStringItem+0xe58>)
 80198c6:	4413      	add	r3, r2
 80198c8:	3304      	adds	r3, #4
 80198ca:	4618      	mov	r0, r3
 80198cc:	f7e6 fd12 	bl	80002f4 <strlen>
 80198d0:	4603      	mov	r3, r0
 80198d2:	b29a      	uxth	r2, r3
 80198d4:	4b73      	ldr	r3, [pc, #460]	; (8019aa4 <updateStringItem+0xe5c>)
 80198d6:	889b      	ldrh	r3, [r3, #4]
 80198d8:	fb12 f303 	smulbb	r3, r2, r3
 80198dc:	b29b      	uxth	r3, r3
 80198de:	4423      	add	r3, r4
 80198e0:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 80198e2:	3301      	adds	r3, #1
 80198e4:	b298      	uxth	r0, r3
								MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 80198e6:	7fbb      	ldrb	r3, [r7, #30]
 80198e8:	b29a      	uxth	r2, r3
 80198ea:	7f7b      	ldrb	r3, [r7, #29]
 80198ec:	b299      	uxth	r1, r3
 80198ee:	697b      	ldr	r3, [r7, #20]
 80198f0:	b29b      	uxth	r3, r3
 80198f2:	fb11 f303 	smulbb	r3, r1, r3
 80198f6:	b29b      	uxth	r3, r3
 80198f8:	4413      	add	r3, r2
 80198fa:	b29a      	uxth	r2, r3
 80198fc:	4b69      	ldr	r3, [pc, #420]	; (8019aa4 <updateStringItem+0xe5c>)
 80198fe:	88db      	ldrh	r3, [r3, #6]
 8019900:	4413      	add	r3, r2
 8019902:	b29b      	uxth	r3, r3
						Paint_ClearWindows(MenuRectangleStartX + 1,
 8019904:	3301      	adds	r3, #1
 8019906:	b29b      	uxth	r3, r3
 8019908:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801990c:	9200      	str	r2, [sp, #0]
 801990e:	4602      	mov	r2, r0
 8019910:	4631      	mov	r1, r6
 8019912:	4628      	mov	r0, r5
 8019914:	f7f4 fe04 	bl	800e520 <Paint_ClearWindows>
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019918:	7ffb      	ldrb	r3, [r7, #31]
 801991a:	b29b      	uxth	r3, r3
 801991c:	3301      	adds	r3, #1
 801991e:	b298      	uxth	r0, r3
 8019920:	7fbb      	ldrb	r3, [r7, #30]
 8019922:	b29a      	uxth	r2, r3
 8019924:	7f7b      	ldrb	r3, [r7, #29]
 8019926:	b299      	uxth	r1, r3
 8019928:	697b      	ldr	r3, [r7, #20]
 801992a:	b29b      	uxth	r3, r3
 801992c:	fb11 f303 	smulbb	r3, r1, r3
 8019930:	b29b      	uxth	r3, r3
 8019932:	4413      	add	r3, r2
 8019934:	b29b      	uxth	r3, r3
 8019936:	3301      	adds	r3, #1
 8019938:	b299      	uxth	r1, r3
								stringItem.itemsArray[i], &Font12, WHITE,  BLACK);
 801993a:	697b      	ldr	r3, [r7, #20]
 801993c:	011b      	lsls	r3, r3, #4
 801993e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019942:	4a57      	ldr	r2, [pc, #348]	; (8019aa0 <updateStringItem+0xe58>)
 8019944:	4413      	add	r3, r2
 8019946:	1d1a      	adds	r2, r3, #4
						Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019948:	2300      	movs	r3, #0
 801994a:	9301      	str	r3, [sp, #4]
 801994c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019950:	9300      	str	r3, [sp, #0]
 8019952:	4b54      	ldr	r3, [pc, #336]	; (8019aa4 <updateStringItem+0xe5c>)
 8019954:	f7f5 fa02 	bl	800ed5c <Paint_DrawString_EN>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019958:	7ffb      	ldrb	r3, [r7, #31]
 801995a:	b29a      	uxth	r2, r3
 801995c:	7f3b      	ldrb	r3, [r7, #28]
 801995e:	085b      	lsrs	r3, r3, #1
 8019960:	b2db      	uxtb	r3, r3
 8019962:	b29b      	uxth	r3, r3
 8019964:	4413      	add	r3, r2
 8019966:	b29b      	uxth	r3, r3
 8019968:	3301      	adds	r3, #1
 801996a:	b298      	uxth	r0, r3
 801996c:	7fbb      	ldrb	r3, [r7, #30]
 801996e:	b29a      	uxth	r2, r3
 8019970:	7f7b      	ldrb	r3, [r7, #29]
 8019972:	b299      	uxth	r1, r3
 8019974:	697b      	ldr	r3, [r7, #20]
 8019976:	b29b      	uxth	r3, r3
 8019978:	fb11 f303 	smulbb	r3, r1, r3
 801997c:	b29b      	uxth	r3, r3
 801997e:	4413      	add	r3, r2
 8019980:	b29b      	uxth	r3, r3
 8019982:	3301      	adds	r3, #1
 8019984:	b299      	uxth	r1, r3
 8019986:	f107 020c 	add.w	r2, r7, #12
 801998a:	2300      	movs	r3, #0
 801998c:	9301      	str	r3, [sp, #4]
 801998e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8019992:	9300      	str	r3, [sp, #0]
 8019994:	4b43      	ldr	r3, [pc, #268]	; (8019aa4 <updateStringItem+0xe5c>)
 8019996:	f7f5 f9e1 	bl	800ed5c <Paint_DrawString_EN>
 801999a:	e10d      	b.n	8019bb8 <updateStringItem+0xf70>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == DOWN)
 801999c:	79fb      	ldrb	r3, [r7, #7]
 801999e:	2b01      	cmp	r3, #1
 80199a0:	d136      	bne.n	8019a10 <updateStringItem+0xdc8>
					{

						multiplierIndex = 0;
 80199a2:	4b41      	ldr	r3, [pc, #260]	; (8019aa8 <updateStringItem+0xe60>)
 80199a4:	2200      	movs	r2, #0
 80199a6:	701a      	strb	r2, [r3, #0]
						stringItem.deltaMultiplier = stringMultiplierArray[multiplierIndex];
 80199a8:	4b3f      	ldr	r3, [pc, #252]	; (8019aa8 <updateStringItem+0xe60>)
 80199aa:	781b      	ldrb	r3, [r3, #0]
 80199ac:	461a      	mov	r2, r3
 80199ae:	4b3f      	ldr	r3, [pc, #252]	; (8019aac <updateStringItem+0xe64>)
 80199b0:	5c9a      	ldrb	r2, [r3, r2]
 80199b2:	4b3b      	ldr	r3, [pc, #236]	; (8019aa0 <updateStringItem+0xe58>)
 80199b4:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
						sprintf(localString,"%d",stringItem.deltaMultiplier);
 80199b8:	4b39      	ldr	r3, [pc, #228]	; (8019aa0 <updateStringItem+0xe58>)
 80199ba:	f893 3209 	ldrb.w	r3, [r3, #521]	; 0x209
 80199be:	461a      	mov	r2, r3
 80199c0:	f107 030c 	add.w	r3, r7, #12
 80199c4:	493a      	ldr	r1, [pc, #232]	; (8019ab0 <updateStringItem+0xe68>)
 80199c6:	4618      	mov	r0, r3
 80199c8:	f002 f84c 	bl	801ba64 <siprintf>
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 80199cc:	7ffb      	ldrb	r3, [r7, #31]
 80199ce:	b29a      	uxth	r2, r3
 80199d0:	7f3b      	ldrb	r3, [r7, #28]
 80199d2:	085b      	lsrs	r3, r3, #1
 80199d4:	b2db      	uxtb	r3, r3
 80199d6:	b29b      	uxth	r3, r3
 80199d8:	4413      	add	r3, r2
 80199da:	b29b      	uxth	r3, r3
 80199dc:	3301      	adds	r3, #1
 80199de:	b298      	uxth	r0, r3
 80199e0:	7fbb      	ldrb	r3, [r7, #30]
 80199e2:	b29a      	uxth	r2, r3
 80199e4:	7f7b      	ldrb	r3, [r7, #29]
 80199e6:	b299      	uxth	r1, r3
 80199e8:	697b      	ldr	r3, [r7, #20]
 80199ea:	b29b      	uxth	r3, r3
 80199ec:	fb11 f303 	smulbb	r3, r1, r3
 80199f0:	b29b      	uxth	r3, r3
 80199f2:	4413      	add	r3, r2
 80199f4:	b29b      	uxth	r3, r3
 80199f6:	3301      	adds	r3, #1
 80199f8:	b299      	uxth	r1, r3
 80199fa:	f107 020c 	add.w	r2, r7, #12
 80199fe:	2300      	movs	r3, #0
 8019a00:	9301      	str	r3, [sp, #4]
 8019a02:	f24c 6318 	movw	r3, #50712	; 0xc618
 8019a06:	9300      	str	r3, [sp, #0]
 8019a08:	4b26      	ldr	r3, [pc, #152]	; (8019aa4 <updateStringItem+0xe5c>)
 8019a0a:	f7f5 f9a7 	bl	800ed5c <Paint_DrawString_EN>
 8019a0e:	e0d3      	b.n	8019bb8 <updateStringItem+0xf70>
								localString, &Font12, LGRAY,  BLACK);
					}
					else if (howToDraw == UP)
 8019a10:	79fb      	ldrb	r3, [r7, #7]
 8019a12:	2b00      	cmp	r3, #0
 8019a14:	f040 80d0 	bne.w	8019bb8 <updateStringItem+0xf70>
					{
						multiplierIndex = fmin(multiplierIndex + 1, 7);
 8019a18:	4b23      	ldr	r3, [pc, #140]	; (8019aa8 <updateStringItem+0xe60>)
 8019a1a:	781b      	ldrb	r3, [r3, #0]
 8019a1c:	3301      	adds	r3, #1
 8019a1e:	ee07 3a90 	vmov	s15, r3
 8019a22:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8019a26:	eeb1 1b0c 	vmov.f64	d1, #28	; 0x40e00000  7.0
 8019a2a:	eeb0 0b47 	vmov.f64	d0, d7
 8019a2e:	f005 fbbc 	bl	801f1aa <fmin>
 8019a32:	eeb0 7b40 	vmov.f64	d7, d0
 8019a36:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8019a3a:	edc7 7a00 	vstr	s15, [r7]
 8019a3e:	683b      	ldr	r3, [r7, #0]
 8019a40:	b2da      	uxtb	r2, r3
 8019a42:	4b19      	ldr	r3, [pc, #100]	; (8019aa8 <updateStringItem+0xe60>)
 8019a44:	701a      	strb	r2, [r3, #0]
						stringItem.deltaMultiplier = stringMultiplierArray[multiplierIndex];
 8019a46:	4b18      	ldr	r3, [pc, #96]	; (8019aa8 <updateStringItem+0xe60>)
 8019a48:	781b      	ldrb	r3, [r3, #0]
 8019a4a:	461a      	mov	r2, r3
 8019a4c:	4b17      	ldr	r3, [pc, #92]	; (8019aac <updateStringItem+0xe64>)
 8019a4e:	5c9a      	ldrb	r2, [r3, r2]
 8019a50:	4b13      	ldr	r3, [pc, #76]	; (8019aa0 <updateStringItem+0xe58>)
 8019a52:	f883 2209 	strb.w	r2, [r3, #521]	; 0x209
//						sprintf(localString,"%04d",stringItem.deltaMultiplier);
						Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019a56:	7ffb      	ldrb	r3, [r7, #31]
 8019a58:	b29a      	uxth	r2, r3
 8019a5a:	7f3b      	ldrb	r3, [r7, #28]
 8019a5c:	085b      	lsrs	r3, r3, #1
 8019a5e:	b2db      	uxtb	r3, r3
 8019a60:	b29b      	uxth	r3, r3
 8019a62:	4413      	add	r3, r2
 8019a64:	b29b      	uxth	r3, r3
 8019a66:	3301      	adds	r3, #1
 8019a68:	b298      	uxth	r0, r3
 8019a6a:	7fbb      	ldrb	r3, [r7, #30]
 8019a6c:	b29a      	uxth	r2, r3
 8019a6e:	7f7b      	ldrb	r3, [r7, #29]
 8019a70:	b299      	uxth	r1, r3
 8019a72:	697b      	ldr	r3, [r7, #20]
 8019a74:	b29b      	uxth	r3, r3
 8019a76:	fb11 f303 	smulbb	r3, r1, r3
 8019a7a:	b29b      	uxth	r3, r3
 8019a7c:	4413      	add	r3, r2
 8019a7e:	b29b      	uxth	r3, r3
 8019a80:	3301      	adds	r3, #1
 8019a82:	b299      	uxth	r1, r3
 8019a84:	f107 020c 	add.w	r2, r7, #12
 8019a88:	2300      	movs	r3, #0
 8019a8a:	9301      	str	r3, [sp, #4]
 8019a8c:	f24c 6318 	movw	r3, #50712	; 0xc618
 8019a90:	9300      	str	r3, [sp, #0]
 8019a92:	4b04      	ldr	r3, [pc, #16]	; (8019aa4 <updateStringItem+0xe5c>)
 8019a94:	f7f5 f962 	bl	800ed5c <Paint_DrawString_EN>
 8019a98:	e08e      	b.n	8019bb8 <updateStringItem+0xf70>
 8019a9a:	bf00      	nop
 8019a9c:	2400ac84 	.word	0x2400ac84
 8019aa0:	24010018 	.word	0x24010018
 8019aa4:	24000030 	.word	0x24000030
 8019aa8:	2400a110 	.word	0x2400a110
 8019aac:	2400a124 	.word	0x2400a124
 8019ab0:	0801f9a4 	.word	0x0801f9a4
								localString, &Font12, LGRAY,  BLACK);
					}
				}
				else
				{
					Paint_ClearWindows(MenuRectangleStartX + 1,
 8019ab4:	7ffb      	ldrb	r3, [r7, #31]
 8019ab6:	b29b      	uxth	r3, r3
 8019ab8:	3301      	adds	r3, #1
 8019aba:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019abc:	7fbb      	ldrb	r3, [r7, #30]
 8019abe:	b29a      	uxth	r2, r3
 8019ac0:	7f7b      	ldrb	r3, [r7, #29]
 8019ac2:	b299      	uxth	r1, r3
 8019ac4:	697b      	ldr	r3, [r7, #20]
 8019ac6:	b29b      	uxth	r3, r3
 8019ac8:	fb11 f303 	smulbb	r3, r1, r3
 8019acc:	b29b      	uxth	r3, r3
 8019ace:	4413      	add	r3, r2
 8019ad0:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 8019ad2:	3301      	adds	r3, #1
 8019ad4:	b29e      	uxth	r6, r3
							MenuRectangleStartX + 1 + strlen(stringItem.itemsArray[i]) * Font12.Width,
 8019ad6:	7ffb      	ldrb	r3, [r7, #31]
 8019ad8:	b29c      	uxth	r4, r3
 8019ada:	697b      	ldr	r3, [r7, #20]
 8019adc:	011b      	lsls	r3, r3, #4
 8019ade:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019ae2:	4a95      	ldr	r2, [pc, #596]	; (8019d38 <updateStringItem+0x10f0>)
 8019ae4:	4413      	add	r3, r2
 8019ae6:	3304      	adds	r3, #4
 8019ae8:	4618      	mov	r0, r3
 8019aea:	f7e6 fc03 	bl	80002f4 <strlen>
 8019aee:	4603      	mov	r3, r0
 8019af0:	b29a      	uxth	r2, r3
 8019af2:	4b92      	ldr	r3, [pc, #584]	; (8019d3c <updateStringItem+0x10f4>)
 8019af4:	889b      	ldrh	r3, [r3, #4]
 8019af6:	fb12 f303 	smulbb	r3, r2, r3
 8019afa:	b29b      	uxth	r3, r3
 8019afc:	4423      	add	r3, r4
 8019afe:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 8019b00:	3301      	adds	r3, #1
 8019b02:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 8019b04:	7fbb      	ldrb	r3, [r7, #30]
 8019b06:	b29a      	uxth	r2, r3
 8019b08:	7f7b      	ldrb	r3, [r7, #29]
 8019b0a:	b299      	uxth	r1, r3
 8019b0c:	697b      	ldr	r3, [r7, #20]
 8019b0e:	b29b      	uxth	r3, r3
 8019b10:	fb11 f303 	smulbb	r3, r1, r3
 8019b14:	b29b      	uxth	r3, r3
 8019b16:	4413      	add	r3, r2
 8019b18:	b29a      	uxth	r2, r3
 8019b1a:	4b88      	ldr	r3, [pc, #544]	; (8019d3c <updateStringItem+0x10f4>)
 8019b1c:	88db      	ldrh	r3, [r3, #6]
 8019b1e:	4413      	add	r3, r2
 8019b20:	b29b      	uxth	r3, r3
					Paint_ClearWindows(MenuRectangleStartX + 1,
 8019b22:	3301      	adds	r3, #1
 8019b24:	b29b      	uxth	r3, r3
 8019b26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019b2a:	9200      	str	r2, [sp, #0]
 8019b2c:	4602      	mov	r2, r0
 8019b2e:	4631      	mov	r1, r6
 8019b30:	4628      	mov	r0, r5
 8019b32:	f7f4 fcf5 	bl	800e520 <Paint_ClearWindows>
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019b36:	7ffb      	ldrb	r3, [r7, #31]
 8019b38:	b29b      	uxth	r3, r3
 8019b3a:	3301      	adds	r3, #1
 8019b3c:	b298      	uxth	r0, r3
 8019b3e:	7fbb      	ldrb	r3, [r7, #30]
 8019b40:	b29a      	uxth	r2, r3
 8019b42:	7f7b      	ldrb	r3, [r7, #29]
 8019b44:	b299      	uxth	r1, r3
 8019b46:	697b      	ldr	r3, [r7, #20]
 8019b48:	b29b      	uxth	r3, r3
 8019b4a:	fb11 f303 	smulbb	r3, r1, r3
 8019b4e:	b29b      	uxth	r3, r3
 8019b50:	4413      	add	r3, r2
 8019b52:	b29b      	uxth	r3, r3
 8019b54:	3301      	adds	r3, #1
 8019b56:	b299      	uxth	r1, r3
							stringItem.itemsArray[i], &Font12, WHITE,  BLACK);
 8019b58:	697b      	ldr	r3, [r7, #20]
 8019b5a:	011b      	lsls	r3, r3, #4
 8019b5c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019b60:	4a75      	ldr	r2, [pc, #468]	; (8019d38 <updateStringItem+0x10f0>)
 8019b62:	4413      	add	r3, r2
 8019b64:	1d1a      	adds	r2, r3, #4
					Paint_DrawString_EN(MenuRectangleStartX + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019b66:	2300      	movs	r3, #0
 8019b68:	9301      	str	r3, [sp, #4]
 8019b6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019b6e:	9300      	str	r3, [sp, #0]
 8019b70:	4b72      	ldr	r3, [pc, #456]	; (8019d3c <updateStringItem+0x10f4>)
 8019b72:	f7f5 f8f3 	bl	800ed5c <Paint_DrawString_EN>
					Paint_DrawString_EN(MenuRectangleStartX  + MenuRectangleWidth / 2 + 1, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019b76:	7ffb      	ldrb	r3, [r7, #31]
 8019b78:	b29a      	uxth	r2, r3
 8019b7a:	7f3b      	ldrb	r3, [r7, #28]
 8019b7c:	085b      	lsrs	r3, r3, #1
 8019b7e:	b2db      	uxtb	r3, r3
 8019b80:	b29b      	uxth	r3, r3
 8019b82:	4413      	add	r3, r2
 8019b84:	b29b      	uxth	r3, r3
 8019b86:	3301      	adds	r3, #1
 8019b88:	b298      	uxth	r0, r3
 8019b8a:	7fbb      	ldrb	r3, [r7, #30]
 8019b8c:	b29a      	uxth	r2, r3
 8019b8e:	7f7b      	ldrb	r3, [r7, #29]
 8019b90:	b299      	uxth	r1, r3
 8019b92:	697b      	ldr	r3, [r7, #20]
 8019b94:	b29b      	uxth	r3, r3
 8019b96:	fb11 f303 	smulbb	r3, r1, r3
 8019b9a:	b29b      	uxth	r3, r3
 8019b9c:	4413      	add	r3, r2
 8019b9e:	b29b      	uxth	r3, r3
 8019ba0:	3301      	adds	r3, #1
 8019ba2:	b299      	uxth	r1, r3
 8019ba4:	f107 020c 	add.w	r2, r7, #12
 8019ba8:	2300      	movs	r3, #0
 8019baa:	9301      	str	r3, [sp, #4]
 8019bac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019bb0:	9300      	str	r3, [sp, #0]
 8019bb2:	4b62      	ldr	r3, [pc, #392]	; (8019d3c <updateStringItem+0x10f4>)
 8019bb4:	f7f5 f8d2 	bl	800ed5c <Paint_DrawString_EN>
							localString, &Font12, WHITE,  BLACK);
				}
			}
		}
		if ( (i >= stringItem.numberOfItemsInPage - 2) && (i < stringItem.numberOfItemsInPage) )
 8019bb8:	4b5f      	ldr	r3, [pc, #380]	; (8019d38 <updateStringItem+0x10f0>)
 8019bba:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 8019bbe:	3b02      	subs	r3, #2
 8019bc0:	697a      	ldr	r2, [r7, #20]
 8019bc2:	429a      	cmp	r2, r3
 8019bc4:	f2c0 8281 	blt.w	801a0ca <updateStringItem+0x1482>
 8019bc8:	4b5b      	ldr	r3, [pc, #364]	; (8019d38 <updateStringItem+0x10f0>)
 8019bca:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 8019bce:	461a      	mov	r2, r3
 8019bd0:	697b      	ldr	r3, [r7, #20]
 8019bd2:	4293      	cmp	r3, r2
 8019bd4:	f280 8279 	bge.w	801a0ca <updateStringItem+0x1482>
		{
			if (howToDraw == FULL)
 8019bd8:	79fb      	ldrb	r3, [r7, #7]
 8019bda:	2b02      	cmp	r3, #2
 8019bdc:	d17a      	bne.n	8019cd4 <updateStringItem+0x108c>
			{
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 8019bde:	7ffb      	ldrb	r3, [r7, #31]
 8019be0:	b298      	uxth	r0, r3
 8019be2:	7fbb      	ldrb	r3, [r7, #30]
 8019be4:	b29a      	uxth	r2, r3
 8019be6:	7f7b      	ldrb	r3, [r7, #29]
 8019be8:	b299      	uxth	r1, r3
 8019bea:	697b      	ldr	r3, [r7, #20]
 8019bec:	b29b      	uxth	r3, r3
 8019bee:	fb11 f303 	smulbb	r3, r1, r3
 8019bf2:	b29b      	uxth	r3, r3
 8019bf4:	4413      	add	r3, r2
 8019bf6:	b29c      	uxth	r4, r3
 8019bf8:	7ffb      	ldrb	r3, [r7, #31]
 8019bfa:	b29a      	uxth	r2, r3
 8019bfc:	7f3b      	ldrb	r3, [r7, #28]
 8019bfe:	b29b      	uxth	r3, r3
 8019c00:	4413      	add	r3, r2
 8019c02:	b29d      	uxth	r5, r3
 8019c04:	7fbb      	ldrb	r3, [r7, #30]
 8019c06:	b29a      	uxth	r2, r3
 8019c08:	7f7b      	ldrb	r3, [r7, #29]
 8019c0a:	b299      	uxth	r1, r3
						MenuRectangleStartX+MenuRectangleWidth, MenuRectangleStartY + MenuRectangleHeight * (i + 1),
 8019c0c:	697b      	ldr	r3, [r7, #20]
 8019c0e:	3301      	adds	r3, #1
				Paint_DrawRectangle( MenuRectangleStartX, MenuRectangleStartY + MenuRectangleHeight * i,
 8019c10:	b29b      	uxth	r3, r3
 8019c12:	fb11 f303 	smulbb	r3, r1, r3
 8019c16:	b29b      	uxth	r3, r3
 8019c18:	4413      	add	r3, r2
 8019c1a:	b29b      	uxth	r3, r3
 8019c1c:	2200      	movs	r2, #0
 8019c1e:	9202      	str	r2, [sp, #8]
 8019c20:	2201      	movs	r2, #1
 8019c22:	9201      	str	r2, [sp, #4]
 8019c24:	2200      	movs	r2, #0
 8019c26:	9200      	str	r2, [sp, #0]
 8019c28:	462a      	mov	r2, r5
 8019c2a:	4621      	mov	r1, r4
 8019c2c:	f7f4 fdf2 	bl	800e814 <Paint_DrawRectangle>
						BLACK, DOT_PIXEL_1X1, DRAW_FILL_EMPTY );
				if (currentCursorPosition.cursorPosition == i)
 8019c30:	4b43      	ldr	r3, [pc, #268]	; (8019d40 <updateStringItem+0x10f8>)
 8019c32:	781b      	ldrb	r3, [r3, #0]
 8019c34:	461a      	mov	r2, r3
 8019c36:	697b      	ldr	r3, [r7, #20]
 8019c38:	4293      	cmp	r3, r2
 8019c3a:	d125      	bne.n	8019c88 <updateStringItem+0x1040>
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 8019c3c:	7efb      	ldrb	r3, [r7, #27]
 8019c3e:	b29c      	uxth	r4, r3
 8019c40:	7fbb      	ldrb	r3, [r7, #30]
 8019c42:	b29a      	uxth	r2, r3
 8019c44:	7f7b      	ldrb	r3, [r7, #29]
 8019c46:	b299      	uxth	r1, r3
 8019c48:	697b      	ldr	r3, [r7, #20]
 8019c4a:	b29b      	uxth	r3, r3
 8019c4c:	fb11 f303 	smulbb	r3, r1, r3
 8019c50:	b29b      	uxth	r3, r3
 8019c52:	4413      	add	r3, r2
 8019c54:	b29b      	uxth	r3, r3
 8019c56:	3301      	adds	r3, #1
 8019c58:	b29d      	uxth	r5, r3
							stringItem.itemsArray[i], BLACK, LGRAY, 16, Font12);
 8019c5a:	697b      	ldr	r3, [r7, #20]
 8019c5c:	011b      	lsls	r3, r3, #4
 8019c5e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019c62:	4a35      	ldr	r2, [pc, #212]	; (8019d38 <updateStringItem+0x10f0>)
 8019c64:	4413      	add	r3, r2
 8019c66:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 8019c68:	4934      	ldr	r1, [pc, #208]	; (8019d3c <updateStringItem+0x10f4>)
 8019c6a:	ab02      	add	r3, sp, #8
 8019c6c:	c903      	ldmia	r1, {r0, r1}
 8019c6e:	e883 0003 	stmia.w	r3, {r0, r1}
 8019c72:	2310      	movs	r3, #16
 8019c74:	9301      	str	r3, [sp, #4]
 8019c76:	f24c 6318 	movw	r3, #50712	; 0xc618
 8019c7a:	9300      	str	r3, [sp, #0]
 8019c7c:	2300      	movs	r3, #0
 8019c7e:	4629      	mov	r1, r5
 8019c80:	4620      	mov	r0, r4
 8019c82:	f7fc fbb9 	bl	80163f8 <centeredString>
 8019c86:	e220      	b.n	801a0ca <updateStringItem+0x1482>
				}
				else
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 8019c88:	7efb      	ldrb	r3, [r7, #27]
 8019c8a:	b29c      	uxth	r4, r3
 8019c8c:	7fbb      	ldrb	r3, [r7, #30]
 8019c8e:	b29a      	uxth	r2, r3
 8019c90:	7f7b      	ldrb	r3, [r7, #29]
 8019c92:	b299      	uxth	r1, r3
 8019c94:	697b      	ldr	r3, [r7, #20]
 8019c96:	b29b      	uxth	r3, r3
 8019c98:	fb11 f303 	smulbb	r3, r1, r3
 8019c9c:	b29b      	uxth	r3, r3
 8019c9e:	4413      	add	r3, r2
 8019ca0:	b29b      	uxth	r3, r3
 8019ca2:	3301      	adds	r3, #1
 8019ca4:	b29d      	uxth	r5, r3
							stringItem.itemsArray[i], BLACK, WHITE, 16, Font12);
 8019ca6:	697b      	ldr	r3, [r7, #20]
 8019ca8:	011b      	lsls	r3, r3, #4
 8019caa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019cae:	4a22      	ldr	r2, [pc, #136]	; (8019d38 <updateStringItem+0x10f0>)
 8019cb0:	4413      	add	r3, r2
 8019cb2:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 8019cb4:	4921      	ldr	r1, [pc, #132]	; (8019d3c <updateStringItem+0x10f4>)
 8019cb6:	ab02      	add	r3, sp, #8
 8019cb8:	c903      	ldmia	r1, {r0, r1}
 8019cba:	e883 0003 	stmia.w	r3, {r0, r1}
 8019cbe:	2310      	movs	r3, #16
 8019cc0:	9301      	str	r3, [sp, #4]
 8019cc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019cc6:	9300      	str	r3, [sp, #0]
 8019cc8:	2300      	movs	r3, #0
 8019cca:	4629      	mov	r1, r5
 8019ccc:	4620      	mov	r0, r4
 8019cce:	f7fc fb93 	bl	80163f8 <centeredString>
 8019cd2:	e1fa      	b.n	801a0ca <updateStringItem+0x1482>
				}
			}
			else if (howToDraw == DOWN)
 8019cd4:	79fb      	ldrb	r3, [r7, #7]
 8019cd6:	2b01      	cmp	r3, #1
 8019cd8:	f040 80ca 	bne.w	8019e70 <updateStringItem+0x1228>
			{
				if ( (currentCursorPosition.cursorPosition == 4) && (i == 4) )
 8019cdc:	4b18      	ldr	r3, [pc, #96]	; (8019d40 <updateStringItem+0x10f8>)
 8019cde:	781b      	ldrb	r3, [r3, #0]
 8019ce0:	2b04      	cmp	r3, #4
 8019ce2:	d12f      	bne.n	8019d44 <updateStringItem+0x10fc>
 8019ce4:	697b      	ldr	r3, [r7, #20]
 8019ce6:	2b04      	cmp	r3, #4
 8019ce8:	d12c      	bne.n	8019d44 <updateStringItem+0x10fc>
				{
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 8019cea:	7efb      	ldrb	r3, [r7, #27]
 8019cec:	b29c      	uxth	r4, r3
 8019cee:	7fbb      	ldrb	r3, [r7, #30]
 8019cf0:	b29a      	uxth	r2, r3
 8019cf2:	7f7b      	ldrb	r3, [r7, #29]
 8019cf4:	b299      	uxth	r1, r3
 8019cf6:	697b      	ldr	r3, [r7, #20]
 8019cf8:	b29b      	uxth	r3, r3
 8019cfa:	fb11 f303 	smulbb	r3, r1, r3
 8019cfe:	b29b      	uxth	r3, r3
 8019d00:	4413      	add	r3, r2
 8019d02:	b29b      	uxth	r3, r3
 8019d04:	3301      	adds	r3, #1
 8019d06:	b29d      	uxth	r5, r3
							stringItem.itemsArray[i], BLACK, LGRAY, 16, Font12);
 8019d08:	697b      	ldr	r3, [r7, #20]
 8019d0a:	011b      	lsls	r3, r3, #4
 8019d0c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019d10:	4a09      	ldr	r2, [pc, #36]	; (8019d38 <updateStringItem+0x10f0>)
 8019d12:	4413      	add	r3, r2
 8019d14:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 8019d16:	4909      	ldr	r1, [pc, #36]	; (8019d3c <updateStringItem+0x10f4>)
 8019d18:	ab02      	add	r3, sp, #8
 8019d1a:	c903      	ldmia	r1, {r0, r1}
 8019d1c:	e883 0003 	stmia.w	r3, {r0, r1}
 8019d20:	2310      	movs	r3, #16
 8019d22:	9301      	str	r3, [sp, #4]
 8019d24:	f24c 6318 	movw	r3, #50712	; 0xc618
 8019d28:	9300      	str	r3, [sp, #0]
 8019d2a:	2300      	movs	r3, #0
 8019d2c:	4629      	mov	r1, r5
 8019d2e:	4620      	mov	r0, r4
 8019d30:	f7fc fb62 	bl	80163f8 <centeredString>
 8019d34:	e1c9      	b.n	801a0ca <updateStringItem+0x1482>
 8019d36:	bf00      	nop
 8019d38:	24010018 	.word	0x24010018
 8019d3c:	24000030 	.word	0x24000030
 8019d40:	2400ac84 	.word	0x2400ac84
				}
				else if ( (currentCursorPosition.cursorPosition == 5) && (i == 5) )
 8019d44:	4b8b      	ldr	r3, [pc, #556]	; (8019f74 <updateStringItem+0x132c>)
 8019d46:	781b      	ldrb	r3, [r3, #0]
 8019d48:	2b05      	cmp	r3, #5
 8019d4a:	f040 81be 	bne.w	801a0ca <updateStringItem+0x1482>
 8019d4e:	697b      	ldr	r3, [r7, #20]
 8019d50:	2b05      	cmp	r3, #5
 8019d52:	f040 81ba 	bne.w	801a0ca <updateStringItem+0x1482>
				{
					Paint_ClearWindows(DisplayCenterWidth,
 8019d56:	7efb      	ldrb	r3, [r7, #27]
 8019d58:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 8019d5a:	7fbb      	ldrb	r3, [r7, #30]
 8019d5c:	b29a      	uxth	r2, r3
 8019d5e:	7f7b      	ldrb	r3, [r7, #29]
 8019d60:	b299      	uxth	r1, r3
 8019d62:	697b      	ldr	r3, [r7, #20]
 8019d64:	3b01      	subs	r3, #1
 8019d66:	b29b      	uxth	r3, r3
 8019d68:	fb11 f303 	smulbb	r3, r1, r3
 8019d6c:	b29b      	uxth	r3, r3
 8019d6e:	4413      	add	r3, r2
 8019d70:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth,
 8019d72:	3301      	adds	r3, #1
 8019d74:	b29e      	uxth	r6, r3
 8019d76:	7efb      	ldrb	r3, [r7, #27]
 8019d78:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(stringItem.itemsArray[i - 1]) * Font12.Width,
 8019d7a:	697b      	ldr	r3, [r7, #20]
 8019d7c:	3b01      	subs	r3, #1
 8019d7e:	011b      	lsls	r3, r3, #4
 8019d80:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019d84:	4a7c      	ldr	r2, [pc, #496]	; (8019f78 <updateStringItem+0x1330>)
 8019d86:	4413      	add	r3, r2
 8019d88:	3304      	adds	r3, #4
 8019d8a:	4618      	mov	r0, r3
 8019d8c:	f7e6 fab2 	bl	80002f4 <strlen>
 8019d90:	4603      	mov	r3, r0
					Paint_ClearWindows(DisplayCenterWidth,
 8019d92:	b29a      	uxth	r2, r3
							DisplayCenterWidth + strlen(stringItem.itemsArray[i - 1]) * Font12.Width,
 8019d94:	4b79      	ldr	r3, [pc, #484]	; (8019f7c <updateStringItem+0x1334>)
 8019d96:	889b      	ldrh	r3, [r3, #4]
					Paint_ClearWindows(DisplayCenterWidth,
 8019d98:	fb12 f303 	smulbb	r3, r2, r3
 8019d9c:	b29b      	uxth	r3, r3
 8019d9e:	4423      	add	r3, r4
 8019da0:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1 + Font12.Height, WHITE);
 8019da2:	7fbb      	ldrb	r3, [r7, #30]
 8019da4:	b29a      	uxth	r2, r3
 8019da6:	7f7b      	ldrb	r3, [r7, #29]
 8019da8:	b299      	uxth	r1, r3
 8019daa:	697b      	ldr	r3, [r7, #20]
 8019dac:	3b01      	subs	r3, #1
 8019dae:	b29b      	uxth	r3, r3
 8019db0:	fb11 f303 	smulbb	r3, r1, r3
 8019db4:	b29b      	uxth	r3, r3
 8019db6:	4413      	add	r3, r2
 8019db8:	b29a      	uxth	r2, r3
 8019dba:	4b70      	ldr	r3, [pc, #448]	; (8019f7c <updateStringItem+0x1334>)
 8019dbc:	88db      	ldrh	r3, [r3, #6]
 8019dbe:	4413      	add	r3, r2
 8019dc0:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth,
 8019dc2:	3301      	adds	r3, #1
 8019dc4:	b29b      	uxth	r3, r3
 8019dc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019dca:	9200      	str	r2, [sp, #0]
 8019dcc:	4602      	mov	r2, r0
 8019dce:	4631      	mov	r1, r6
 8019dd0:	4628      	mov	r0, r5
 8019dd2:	f7f4 fba5 	bl	800e520 <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 8019dd6:	7efb      	ldrb	r3, [r7, #27]
 8019dd8:	b29c      	uxth	r4, r3
 8019dda:	7fbb      	ldrb	r3, [r7, #30]
 8019ddc:	b29a      	uxth	r2, r3
 8019dde:	7f7b      	ldrb	r3, [r7, #29]
 8019de0:	b299      	uxth	r1, r3
 8019de2:	697b      	ldr	r3, [r7, #20]
 8019de4:	3b01      	subs	r3, #1
 8019de6:	b29b      	uxth	r3, r3
 8019de8:	fb11 f303 	smulbb	r3, r1, r3
 8019dec:	b29b      	uxth	r3, r3
 8019dee:	4413      	add	r3, r2
 8019df0:	b29b      	uxth	r3, r3
 8019df2:	3301      	adds	r3, #1
 8019df4:	b29d      	uxth	r5, r3
							stringItem.itemsArray[(i - 1)], BLACK, WHITE, 16, Font12);
 8019df6:	697b      	ldr	r3, [r7, #20]
 8019df8:	3b01      	subs	r3, #1
 8019dfa:	011b      	lsls	r3, r3, #4
 8019dfc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019e00:	4a5d      	ldr	r2, [pc, #372]	; (8019f78 <updateStringItem+0x1330>)
 8019e02:	4413      	add	r3, r2
 8019e04:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 8019e06:	495d      	ldr	r1, [pc, #372]	; (8019f7c <updateStringItem+0x1334>)
 8019e08:	ab02      	add	r3, sp, #8
 8019e0a:	c903      	ldmia	r1, {r0, r1}
 8019e0c:	e883 0003 	stmia.w	r3, {r0, r1}
 8019e10:	2310      	movs	r3, #16
 8019e12:	9301      	str	r3, [sp, #4]
 8019e14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019e18:	9300      	str	r3, [sp, #0]
 8019e1a:	2300      	movs	r3, #0
 8019e1c:	4629      	mov	r1, r5
 8019e1e:	4620      	mov	r0, r4
 8019e20:	f7fc faea 	bl	80163f8 <centeredString>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 8019e24:	7efb      	ldrb	r3, [r7, #27]
 8019e26:	b29c      	uxth	r4, r3
 8019e28:	7fbb      	ldrb	r3, [r7, #30]
 8019e2a:	b29a      	uxth	r2, r3
 8019e2c:	7f7b      	ldrb	r3, [r7, #29]
 8019e2e:	b299      	uxth	r1, r3
 8019e30:	697b      	ldr	r3, [r7, #20]
 8019e32:	b29b      	uxth	r3, r3
 8019e34:	fb11 f303 	smulbb	r3, r1, r3
 8019e38:	b29b      	uxth	r3, r3
 8019e3a:	4413      	add	r3, r2
 8019e3c:	b29b      	uxth	r3, r3
 8019e3e:	3301      	adds	r3, #1
 8019e40:	b29d      	uxth	r5, r3
							stringItem.itemsArray[i], BLACK, LGRAY, 16, Font12);
 8019e42:	697b      	ldr	r3, [r7, #20]
 8019e44:	011b      	lsls	r3, r3, #4
 8019e46:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019e4a:	4a4b      	ldr	r2, [pc, #300]	; (8019f78 <updateStringItem+0x1330>)
 8019e4c:	4413      	add	r3, r2
 8019e4e:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
 8019e50:	494a      	ldr	r1, [pc, #296]	; (8019f7c <updateStringItem+0x1334>)
 8019e52:	ab02      	add	r3, sp, #8
 8019e54:	c903      	ldmia	r1, {r0, r1}
 8019e56:	e883 0003 	stmia.w	r3, {r0, r1}
 8019e5a:	2310      	movs	r3, #16
 8019e5c:	9301      	str	r3, [sp, #4]
 8019e5e:	f24c 6318 	movw	r3, #50712	; 0xc618
 8019e62:	9300      	str	r3, [sp, #0]
 8019e64:	2300      	movs	r3, #0
 8019e66:	4629      	mov	r1, r5
 8019e68:	4620      	mov	r0, r4
 8019e6a:	f7fc fac5 	bl	80163f8 <centeredString>
 8019e6e:	e12c      	b.n	801a0ca <updateStringItem+0x1482>
				}
			}
			else if (howToDraw == UP)
 8019e70:	79fb      	ldrb	r3, [r7, #7]
 8019e72:	2b00      	cmp	r3, #0
 8019e74:	f040 8129 	bne.w	801a0ca <updateStringItem+0x1482>
			{
				if ( (currentCursorPosition.cursorPosition == 3) && (i == 4) )
 8019e78:	4b3e      	ldr	r3, [pc, #248]	; (8019f74 <updateStringItem+0x132c>)
 8019e7a:	781b      	ldrb	r3, [r3, #0]
 8019e7c:	2b03      	cmp	r3, #3
 8019e7e:	d17f      	bne.n	8019f80 <updateStringItem+0x1338>
 8019e80:	697b      	ldr	r3, [r7, #20]
 8019e82:	2b04      	cmp	r3, #4
 8019e84:	d17c      	bne.n	8019f80 <updateStringItem+0x1338>
				{
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 8019e86:	7efb      	ldrb	r3, [r7, #27]
 8019e88:	b29c      	uxth	r4, r3
 8019e8a:	697b      	ldr	r3, [r7, #20]
 8019e8c:	011b      	lsls	r3, r3, #4
 8019e8e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019e92:	4a39      	ldr	r2, [pc, #228]	; (8019f78 <updateStringItem+0x1330>)
 8019e94:	4413      	add	r3, r2
 8019e96:	3304      	adds	r3, #4
 8019e98:	4618      	mov	r0, r3
 8019e9a:	f7e6 fa2b 	bl	80002f4 <strlen>
 8019e9e:	4603      	mov	r3, r0
 8019ea0:	4a36      	ldr	r2, [pc, #216]	; (8019f7c <updateStringItem+0x1334>)
 8019ea2:	8892      	ldrh	r2, [r2, #4]
 8019ea4:	fb02 f303 	mul.w	r3, r2, r3
 8019ea8:	085b      	lsrs	r3, r3, #1
 8019eaa:	b29b      	uxth	r3, r3
 8019eac:	1ae3      	subs	r3, r4, r3
 8019eae:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019eb0:	7fbb      	ldrb	r3, [r7, #30]
 8019eb2:	b29a      	uxth	r2, r3
 8019eb4:	7f7b      	ldrb	r3, [r7, #29]
 8019eb6:	b299      	uxth	r1, r3
 8019eb8:	697b      	ldr	r3, [r7, #20]
 8019eba:	b29b      	uxth	r3, r3
 8019ebc:	fb11 f303 	smulbb	r3, r1, r3
 8019ec0:	b29b      	uxth	r3, r3
 8019ec2:	4413      	add	r3, r2
 8019ec4:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 8019ec6:	3301      	adds	r3, #1
 8019ec8:	b29e      	uxth	r6, r3
 8019eca:	7efb      	ldrb	r3, [r7, #27]
 8019ecc:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(stringItem.itemsArray[i]) * Font12.Width /2,
 8019ece:	697b      	ldr	r3, [r7, #20]
 8019ed0:	011b      	lsls	r3, r3, #4
 8019ed2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019ed6:	4a28      	ldr	r2, [pc, #160]	; (8019f78 <updateStringItem+0x1330>)
 8019ed8:	4413      	add	r3, r2
 8019eda:	3304      	adds	r3, #4
 8019edc:	4618      	mov	r0, r3
 8019ede:	f7e6 fa09 	bl	80002f4 <strlen>
 8019ee2:	4603      	mov	r3, r0
 8019ee4:	4a25      	ldr	r2, [pc, #148]	; (8019f7c <updateStringItem+0x1334>)
 8019ee6:	8892      	ldrh	r2, [r2, #4]
 8019ee8:	fb02 f303 	mul.w	r3, r2, r3
 8019eec:	085b      	lsrs	r3, r3, #1
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 8019eee:	b29b      	uxth	r3, r3
 8019ef0:	4423      	add	r3, r4
 8019ef2:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 8019ef4:	7fbb      	ldrb	r3, [r7, #30]
 8019ef6:	b29a      	uxth	r2, r3
 8019ef8:	7f7b      	ldrb	r3, [r7, #29]
 8019efa:	b299      	uxth	r1, r3
 8019efc:	697b      	ldr	r3, [r7, #20]
 8019efe:	b29b      	uxth	r3, r3
 8019f00:	fb11 f303 	smulbb	r3, r1, r3
 8019f04:	b29b      	uxth	r3, r3
 8019f06:	4413      	add	r3, r2
 8019f08:	b29a      	uxth	r2, r3
 8019f0a:	4b1c      	ldr	r3, [pc, #112]	; (8019f7c <updateStringItem+0x1334>)
 8019f0c:	88db      	ldrh	r3, [r3, #6]
 8019f0e:	4413      	add	r3, r2
 8019f10:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 8019f12:	3301      	adds	r3, #1
 8019f14:	b29b      	uxth	r3, r3
 8019f16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019f1a:	9200      	str	r2, [sp, #0]
 8019f1c:	4602      	mov	r2, r0
 8019f1e:	4631      	mov	r1, r6
 8019f20:	4628      	mov	r0, r5
 8019f22:	f7f4 fafd 	bl	800e520 <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019f26:	7efb      	ldrb	r3, [r7, #27]
 8019f28:	b29c      	uxth	r4, r3
 8019f2a:	7fbb      	ldrb	r3, [r7, #30]
 8019f2c:	b29a      	uxth	r2, r3
 8019f2e:	7f7b      	ldrb	r3, [r7, #29]
 8019f30:	b299      	uxth	r1, r3
 8019f32:	697b      	ldr	r3, [r7, #20]
 8019f34:	b29b      	uxth	r3, r3
 8019f36:	fb11 f303 	smulbb	r3, r1, r3
 8019f3a:	b29b      	uxth	r3, r3
 8019f3c:	4413      	add	r3, r2
 8019f3e:	b29b      	uxth	r3, r3
 8019f40:	3301      	adds	r3, #1
 8019f42:	b29d      	uxth	r5, r3
							stringItem.itemsArray[(i)], BLACK, WHITE, 16, Font12);
 8019f44:	697b      	ldr	r3, [r7, #20]
 8019f46:	011b      	lsls	r3, r3, #4
 8019f48:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019f4c:	4a0a      	ldr	r2, [pc, #40]	; (8019f78 <updateStringItem+0x1330>)
 8019f4e:	4413      	add	r3, r2
 8019f50:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019f52:	490a      	ldr	r1, [pc, #40]	; (8019f7c <updateStringItem+0x1334>)
 8019f54:	ab02      	add	r3, sp, #8
 8019f56:	c903      	ldmia	r1, {r0, r1}
 8019f58:	e883 0003 	stmia.w	r3, {r0, r1}
 8019f5c:	2310      	movs	r3, #16
 8019f5e:	9301      	str	r3, [sp, #4]
 8019f60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019f64:	9300      	str	r3, [sp, #0]
 8019f66:	2300      	movs	r3, #0
 8019f68:	4629      	mov	r1, r5
 8019f6a:	4620      	mov	r0, r4
 8019f6c:	f7fc fa44 	bl	80163f8 <centeredString>
 8019f70:	e0ab      	b.n	801a0ca <updateStringItem+0x1482>
 8019f72:	bf00      	nop
 8019f74:	2400ac84 	.word	0x2400ac84
 8019f78:	24010018 	.word	0x24010018
 8019f7c:	24000030 	.word	0x24000030
					//						centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * i + 1,
					//								uint16Item.itemsArray[i], BLACK, LGRAY, 16);
				}
				else if ( (currentCursorPosition.cursorPosition == 4) && (i == 5) )
 8019f80:	4b5a      	ldr	r3, [pc, #360]	; (801a0ec <updateStringItem+0x14a4>)
 8019f82:	781b      	ldrb	r3, [r3, #0]
 8019f84:	2b04      	cmp	r3, #4
 8019f86:	f040 80a0 	bne.w	801a0ca <updateStringItem+0x1482>
 8019f8a:	697b      	ldr	r3, [r7, #20]
 8019f8c:	2b05      	cmp	r3, #5
 8019f8e:	f040 809c 	bne.w	801a0ca <updateStringItem+0x1482>
				{
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 8019f92:	7efb      	ldrb	r3, [r7, #27]
 8019f94:	b29c      	uxth	r4, r3
 8019f96:	697b      	ldr	r3, [r7, #20]
 8019f98:	011b      	lsls	r3, r3, #4
 8019f9a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019f9e:	4a54      	ldr	r2, [pc, #336]	; (801a0f0 <updateStringItem+0x14a8>)
 8019fa0:	4413      	add	r3, r2
 8019fa2:	3304      	adds	r3, #4
 8019fa4:	4618      	mov	r0, r3
 8019fa6:	f7e6 f9a5 	bl	80002f4 <strlen>
 8019faa:	4603      	mov	r3, r0
 8019fac:	4a51      	ldr	r2, [pc, #324]	; (801a0f4 <updateStringItem+0x14ac>)
 8019fae:	8892      	ldrh	r2, [r2, #4]
 8019fb0:	fb02 f303 	mul.w	r3, r2, r3
 8019fb4:	085b      	lsrs	r3, r3, #1
 8019fb6:	b29b      	uxth	r3, r3
 8019fb8:	1ae3      	subs	r3, r4, r3
 8019fba:	b29d      	uxth	r5, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 8019fbc:	7fbb      	ldrb	r3, [r7, #30]
 8019fbe:	b29a      	uxth	r2, r3
 8019fc0:	7f7b      	ldrb	r3, [r7, #29]
 8019fc2:	b299      	uxth	r1, r3
 8019fc4:	697b      	ldr	r3, [r7, #20]
 8019fc6:	b29b      	uxth	r3, r3
 8019fc8:	fb11 f303 	smulbb	r3, r1, r3
 8019fcc:	b29b      	uxth	r3, r3
 8019fce:	4413      	add	r3, r2
 8019fd0:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 8019fd2:	3301      	adds	r3, #1
 8019fd4:	b29e      	uxth	r6, r3
 8019fd6:	7efb      	ldrb	r3, [r7, #27]
 8019fd8:	b29c      	uxth	r4, r3
							DisplayCenterWidth + strlen(stringItem.itemsArray[i]) * Font12.Width /2,
 8019fda:	697b      	ldr	r3, [r7, #20]
 8019fdc:	011b      	lsls	r3, r3, #4
 8019fde:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019fe2:	4a43      	ldr	r2, [pc, #268]	; (801a0f0 <updateStringItem+0x14a8>)
 8019fe4:	4413      	add	r3, r2
 8019fe6:	3304      	adds	r3, #4
 8019fe8:	4618      	mov	r0, r3
 8019fea:	f7e6 f983 	bl	80002f4 <strlen>
 8019fee:	4603      	mov	r3, r0
 8019ff0:	4a40      	ldr	r2, [pc, #256]	; (801a0f4 <updateStringItem+0x14ac>)
 8019ff2:	8892      	ldrh	r2, [r2, #4]
 8019ff4:	fb02 f303 	mul.w	r3, r2, r3
 8019ff8:	085b      	lsrs	r3, r3, #1
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 8019ffa:	b29b      	uxth	r3, r3
 8019ffc:	4423      	add	r3, r4
 8019ffe:	b298      	uxth	r0, r3
							MenuRectangleStartY + MenuRectangleHeight * (i) + 1 + Font12.Height, WHITE);
 801a000:	7fbb      	ldrb	r3, [r7, #30]
 801a002:	b29a      	uxth	r2, r3
 801a004:	7f7b      	ldrb	r3, [r7, #29]
 801a006:	b299      	uxth	r1, r3
 801a008:	697b      	ldr	r3, [r7, #20]
 801a00a:	b29b      	uxth	r3, r3
 801a00c:	fb11 f303 	smulbb	r3, r1, r3
 801a010:	b29b      	uxth	r3, r3
 801a012:	4413      	add	r3, r2
 801a014:	b29a      	uxth	r2, r3
 801a016:	4b37      	ldr	r3, [pc, #220]	; (801a0f4 <updateStringItem+0x14ac>)
 801a018:	88db      	ldrh	r3, [r3, #6]
 801a01a:	4413      	add	r3, r2
 801a01c:	b29b      	uxth	r3, r3
					Paint_ClearWindows(DisplayCenterWidth - strlen(stringItem.itemsArray[i]) * Font12.Width / 2,
 801a01e:	3301      	adds	r3, #1
 801a020:	b29b      	uxth	r3, r3
 801a022:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a026:	9200      	str	r2, [sp, #0]
 801a028:	4602      	mov	r2, r0
 801a02a:	4631      	mov	r1, r6
 801a02c:	4628      	mov	r0, r5
 801a02e:	f7f4 fa77 	bl	800e520 <Paint_ClearWindows>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a032:	7efb      	ldrb	r3, [r7, #27]
 801a034:	b29c      	uxth	r4, r3
 801a036:	7fbb      	ldrb	r3, [r7, #30]
 801a038:	b29a      	uxth	r2, r3
 801a03a:	7f7b      	ldrb	r3, [r7, #29]
 801a03c:	b299      	uxth	r1, r3
 801a03e:	697b      	ldr	r3, [r7, #20]
 801a040:	b29b      	uxth	r3, r3
 801a042:	fb11 f303 	smulbb	r3, r1, r3
 801a046:	b29b      	uxth	r3, r3
 801a048:	4413      	add	r3, r2
 801a04a:	b29b      	uxth	r3, r3
 801a04c:	3301      	adds	r3, #1
 801a04e:	b29d      	uxth	r5, r3
							stringItem.itemsArray[(i)], BLACK, WHITE, 16, Font12);
 801a050:	697b      	ldr	r3, [r7, #20]
 801a052:	011b      	lsls	r3, r3, #4
 801a054:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801a058:	4a25      	ldr	r2, [pc, #148]	; (801a0f0 <updateStringItem+0x14a8>)
 801a05a:	4413      	add	r3, r2
 801a05c:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i) + 1,
 801a05e:	4925      	ldr	r1, [pc, #148]	; (801a0f4 <updateStringItem+0x14ac>)
 801a060:	ab02      	add	r3, sp, #8
 801a062:	c903      	ldmia	r1, {r0, r1}
 801a064:	e883 0003 	stmia.w	r3, {r0, r1}
 801a068:	2310      	movs	r3, #16
 801a06a:	9301      	str	r3, [sp, #4]
 801a06c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a070:	9300      	str	r3, [sp, #0]
 801a072:	2300      	movs	r3, #0
 801a074:	4629      	mov	r1, r5
 801a076:	4620      	mov	r0, r4
 801a078:	f7fc f9be 	bl	80163f8 <centeredString>
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 801a07c:	7efb      	ldrb	r3, [r7, #27]
 801a07e:	b29c      	uxth	r4, r3
 801a080:	7fbb      	ldrb	r3, [r7, #30]
 801a082:	b29a      	uxth	r2, r3
 801a084:	7f7b      	ldrb	r3, [r7, #29]
 801a086:	b299      	uxth	r1, r3
 801a088:	697b      	ldr	r3, [r7, #20]
 801a08a:	3b01      	subs	r3, #1
 801a08c:	b29b      	uxth	r3, r3
 801a08e:	fb11 f303 	smulbb	r3, r1, r3
 801a092:	b29b      	uxth	r3, r3
 801a094:	4413      	add	r3, r2
 801a096:	b29b      	uxth	r3, r3
 801a098:	3301      	adds	r3, #1
 801a09a:	b29d      	uxth	r5, r3
							stringItem.itemsArray[i - 1], BLACK, LGRAY, 16, Font12);
 801a09c:	697b      	ldr	r3, [r7, #20]
 801a09e:	3b01      	subs	r3, #1
 801a0a0:	011b      	lsls	r3, r3, #4
 801a0a2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801a0a6:	4a12      	ldr	r2, [pc, #72]	; (801a0f0 <updateStringItem+0x14a8>)
 801a0a8:	4413      	add	r3, r2
 801a0aa:	1d1a      	adds	r2, r3, #4
					centeredString(DisplayCenterWidth, MenuRectangleStartY + MenuRectangleHeight * (i - 1) + 1,
 801a0ac:	4911      	ldr	r1, [pc, #68]	; (801a0f4 <updateStringItem+0x14ac>)
 801a0ae:	ab02      	add	r3, sp, #8
 801a0b0:	c903      	ldmia	r1, {r0, r1}
 801a0b2:	e883 0003 	stmia.w	r3, {r0, r1}
 801a0b6:	2310      	movs	r3, #16
 801a0b8:	9301      	str	r3, [sp, #4]
 801a0ba:	f24c 6318 	movw	r3, #50712	; 0xc618
 801a0be:	9300      	str	r3, [sp, #0]
 801a0c0:	2300      	movs	r3, #0
 801a0c2:	4629      	mov	r1, r5
 801a0c4:	4620      	mov	r0, r4
 801a0c6:	f7fc f997 	bl	80163f8 <centeredString>
	for (int i = 0; i < stringItem.numberOfItemsInPage ; i++)
 801a0ca:	697b      	ldr	r3, [r7, #20]
 801a0cc:	3301      	adds	r3, #1
 801a0ce:	617b      	str	r3, [r7, #20]
 801a0d0:	4b07      	ldr	r3, [pc, #28]	; (801a0f0 <updateStringItem+0x14a8>)
 801a0d2:	f893 320b 	ldrb.w	r3, [r3, #523]	; 0x20b
 801a0d6:	461a      	mov	r2, r3
 801a0d8:	697b      	ldr	r3, [r7, #20]
 801a0da:	4293      	cmp	r3, r2
 801a0dc:	f6fe add8 	blt.w	8018c90 <updateStringItem+0x48>
				}
			}
		}
	}
}
 801a0e0:	bf00      	nop
 801a0e2:	bf00      	nop
 801a0e4:	3724      	adds	r7, #36	; 0x24
 801a0e6:	46bd      	mov	sp, r7
 801a0e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a0ea:	bf00      	nop
 801a0ec:	2400ac84 	.word	0x2400ac84
 801a0f0:	24010018 	.word	0x24010018
 801a0f4:	24000030 	.word	0x24000030

0801a0f8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801a0f8:	b580      	push	{r7, lr}
 801a0fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801a0fc:	2201      	movs	r2, #1
 801a0fe:	490e      	ldr	r1, [pc, #56]	; (801a138 <MX_USB_HOST_Init+0x40>)
 801a100:	480e      	ldr	r0, [pc, #56]	; (801a13c <MX_USB_HOST_Init+0x44>)
 801a102:	f7f5 fe4f 	bl	800fda4 <USBH_Init>
 801a106:	4603      	mov	r3, r0
 801a108:	2b00      	cmp	r3, #0
 801a10a:	d001      	beq.n	801a110 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 801a10c:	f7e7 fb19 	bl	8001742 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 801a110:	490b      	ldr	r1, [pc, #44]	; (801a140 <MX_USB_HOST_Init+0x48>)
 801a112:	480a      	ldr	r0, [pc, #40]	; (801a13c <MX_USB_HOST_Init+0x44>)
 801a114:	f7f5 feee 	bl	800fef4 <USBH_RegisterClass>
 801a118:	4603      	mov	r3, r0
 801a11a:	2b00      	cmp	r3, #0
 801a11c:	d001      	beq.n	801a122 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801a11e:	f7e7 fb10 	bl	8001742 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801a122:	4806      	ldr	r0, [pc, #24]	; (801a13c <MX_USB_HOST_Init+0x44>)
 801a124:	f7f5 ff7b 	bl	801001e <USBH_Start>
 801a128:	4603      	mov	r3, r0
 801a12a:	2b00      	cmp	r3, #0
 801a12c:	d001      	beq.n	801a132 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801a12e:	f7e7 fb08 	bl	8001742 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801a132:	bf00      	nop
 801a134:	bd80      	pop	{r7, pc}
 801a136:	bf00      	nop
 801a138:	0801a145 	.word	0x0801a145
 801a13c:	240146cc 	.word	0x240146cc
 801a140:	24000040 	.word	0x24000040

0801a144 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 801a144:	b480      	push	{r7}
 801a146:	b083      	sub	sp, #12
 801a148:	af00      	add	r7, sp, #0
 801a14a:	6078      	str	r0, [r7, #4]
 801a14c:	460b      	mov	r3, r1
 801a14e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801a150:	78fb      	ldrb	r3, [r7, #3]
 801a152:	3b01      	subs	r3, #1
 801a154:	2b04      	cmp	r3, #4
 801a156:	d819      	bhi.n	801a18c <USBH_UserProcess+0x48>
 801a158:	a201      	add	r2, pc, #4	; (adr r2, 801a160 <USBH_UserProcess+0x1c>)
 801a15a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a15e:	bf00      	nop
 801a160:	0801a18d 	.word	0x0801a18d
 801a164:	0801a17d 	.word	0x0801a17d
 801a168:	0801a18d 	.word	0x0801a18d
 801a16c:	0801a185 	.word	0x0801a185
 801a170:	0801a175 	.word	0x0801a175
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 801a174:	4b09      	ldr	r3, [pc, #36]	; (801a19c <USBH_UserProcess+0x58>)
 801a176:	2203      	movs	r2, #3
 801a178:	701a      	strb	r2, [r3, #0]
  break;
 801a17a:	e008      	b.n	801a18e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 801a17c:	4b07      	ldr	r3, [pc, #28]	; (801a19c <USBH_UserProcess+0x58>)
 801a17e:	2202      	movs	r2, #2
 801a180:	701a      	strb	r2, [r3, #0]
  break;
 801a182:	e004      	b.n	801a18e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 801a184:	4b05      	ldr	r3, [pc, #20]	; (801a19c <USBH_UserProcess+0x58>)
 801a186:	2201      	movs	r2, #1
 801a188:	701a      	strb	r2, [r3, #0]
  break;
 801a18a:	e000      	b.n	801a18e <USBH_UserProcess+0x4a>

  default:
  break;
 801a18c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801a18e:	bf00      	nop
 801a190:	370c      	adds	r7, #12
 801a192:	46bd      	mov	sp, r7
 801a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a198:	4770      	bx	lr
 801a19a:	bf00      	nop
 801a19c:	2400ab1c 	.word	0x2400ab1c

0801a1a0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801a1a0:	b580      	push	{r7, lr}
 801a1a2:	b0b8      	sub	sp, #224	; 0xe0
 801a1a4:	af00      	add	r7, sp, #0
 801a1a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801a1a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801a1ac:	2200      	movs	r2, #0
 801a1ae:	601a      	str	r2, [r3, #0]
 801a1b0:	605a      	str	r2, [r3, #4]
 801a1b2:	609a      	str	r2, [r3, #8]
 801a1b4:	60da      	str	r2, [r3, #12]
 801a1b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801a1b8:	f107 0310 	add.w	r3, r7, #16
 801a1bc:	22bc      	movs	r2, #188	; 0xbc
 801a1be:	2100      	movs	r1, #0
 801a1c0:	4618      	mov	r0, r3
 801a1c2:	f000 fb25 	bl	801a810 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 801a1c6:	687b      	ldr	r3, [r7, #4]
 801a1c8:	681b      	ldr	r3, [r3, #0]
 801a1ca:	4a3b      	ldr	r2, [pc, #236]	; (801a2b8 <HAL_HCD_MspInit+0x118>)
 801a1cc:	4293      	cmp	r3, r2
 801a1ce:	d16e      	bne.n	801a2ae <HAL_HCD_MspInit+0x10e>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801a1d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801a1d4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 801a1d6:	2301      	movs	r3, #1
 801a1d8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 801a1da:	2312      	movs	r3, #18
 801a1dc:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 801a1de:	2302      	movs	r3, #2
 801a1e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 801a1e2:	2303      	movs	r3, #3
 801a1e4:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 801a1e6:	2302      	movs	r3, #2
 801a1e8:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 801a1ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 801a1ee:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 801a1f0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801a1f4:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 801a1f6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801a1fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801a1fe:	f107 0310 	add.w	r3, r7, #16
 801a202:	4618      	mov	r0, r3
 801a204:	f7ed fff0 	bl	80081e8 <HAL_RCCEx_PeriphCLKConfig>
 801a208:	4603      	mov	r3, r0
 801a20a:	2b00      	cmp	r3, #0
 801a20c:	d001      	beq.n	801a212 <HAL_HCD_MspInit+0x72>
    {
      Error_Handler();
 801a20e:	f7e7 fa98 	bl	8001742 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801a212:	f7ed f83d 	bl	8007290 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801a216:	4b29      	ldr	r3, [pc, #164]	; (801a2bc <HAL_HCD_MspInit+0x11c>)
 801a218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801a21c:	4a27      	ldr	r2, [pc, #156]	; (801a2bc <HAL_HCD_MspInit+0x11c>)
 801a21e:	f043 0301 	orr.w	r3, r3, #1
 801a222:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801a226:	4b25      	ldr	r3, [pc, #148]	; (801a2bc <HAL_HCD_MspInit+0x11c>)
 801a228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801a22c:	f003 0301 	and.w	r3, r3, #1
 801a230:	60fb      	str	r3, [r7, #12]
 801a232:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 801a234:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 801a238:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a23c:	2302      	movs	r3, #2
 801a23e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a242:	2300      	movs	r3, #0
 801a244:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801a248:	2300      	movs	r3, #0
 801a24a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801a24e:	230a      	movs	r3, #10
 801a250:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801a254:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801a258:	4619      	mov	r1, r3
 801a25a:	4819      	ldr	r0, [pc, #100]	; (801a2c0 <HAL_HCD_MspInit+0x120>)
 801a25c:	f7ea fede 	bl	800501c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 801a260:	f44f 7300 	mov.w	r3, #512	; 0x200
 801a264:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801a268:	2300      	movs	r3, #0
 801a26a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a26e:	2300      	movs	r3, #0
 801a270:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801a274:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801a278:	4619      	mov	r1, r3
 801a27a:	4811      	ldr	r0, [pc, #68]	; (801a2c0 <HAL_HCD_MspInit+0x120>)
 801a27c:	f7ea fece 	bl	800501c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801a280:	4b0e      	ldr	r3, [pc, #56]	; (801a2bc <HAL_HCD_MspInit+0x11c>)
 801a282:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801a286:	4a0d      	ldr	r2, [pc, #52]	; (801a2bc <HAL_HCD_MspInit+0x11c>)
 801a288:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801a28c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801a290:	4b0a      	ldr	r3, [pc, #40]	; (801a2bc <HAL_HCD_MspInit+0x11c>)
 801a292:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801a296:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801a29a:	60bb      	str	r3, [r7, #8]
 801a29c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801a29e:	2200      	movs	r2, #0
 801a2a0:	2100      	movs	r1, #0
 801a2a2:	2065      	movs	r0, #101	; 0x65
 801a2a4:	f7e8 faed 	bl	8002882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801a2a8:	2065      	movs	r0, #101	; 0x65
 801a2aa:	f7e8 fb04 	bl	80028b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801a2ae:	bf00      	nop
 801a2b0:	37e0      	adds	r7, #224	; 0xe0
 801a2b2:	46bd      	mov	sp, r7
 801a2b4:	bd80      	pop	{r7, pc}
 801a2b6:	bf00      	nop
 801a2b8:	40080000 	.word	0x40080000
 801a2bc:	58024400 	.word	0x58024400
 801a2c0:	58020000 	.word	0x58020000

0801a2c4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 801a2c4:	b580      	push	{r7, lr}
 801a2c6:	b082      	sub	sp, #8
 801a2c8:	af00      	add	r7, sp, #0
 801a2ca:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801a2cc:	687b      	ldr	r3, [r7, #4]
 801a2ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801a2d2:	4618      	mov	r0, r3
 801a2d4:	f7f5 fec4 	bl	8010060 <USBH_LL_IncTimer>
}
 801a2d8:	bf00      	nop
 801a2da:	3708      	adds	r7, #8
 801a2dc:	46bd      	mov	sp, r7
 801a2de:	bd80      	pop	{r7, pc}

0801a2e0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801a2e0:	b580      	push	{r7, lr}
 801a2e2:	b082      	sub	sp, #8
 801a2e4:	af00      	add	r7, sp, #0
 801a2e6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801a2e8:	687b      	ldr	r3, [r7, #4]
 801a2ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801a2ee:	4618      	mov	r0, r3
 801a2f0:	f7f5 ff08 	bl	8010104 <USBH_LL_Connect>
}
 801a2f4:	bf00      	nop
 801a2f6:	3708      	adds	r7, #8
 801a2f8:	46bd      	mov	sp, r7
 801a2fa:	bd80      	pop	{r7, pc}

0801a2fc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801a2fc:	b580      	push	{r7, lr}
 801a2fe:	b082      	sub	sp, #8
 801a300:	af00      	add	r7, sp, #0
 801a302:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801a304:	687b      	ldr	r3, [r7, #4]
 801a306:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801a30a:	4618      	mov	r0, r3
 801a30c:	f7f5 ff17 	bl	801013e <USBH_LL_Disconnect>
}
 801a310:	bf00      	nop
 801a312:	3708      	adds	r7, #8
 801a314:	46bd      	mov	sp, r7
 801a316:	bd80      	pop	{r7, pc}

0801a318 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801a318:	b480      	push	{r7}
 801a31a:	b083      	sub	sp, #12
 801a31c:	af00      	add	r7, sp, #0
 801a31e:	6078      	str	r0, [r7, #4]
 801a320:	460b      	mov	r3, r1
 801a322:	70fb      	strb	r3, [r7, #3]
 801a324:	4613      	mov	r3, r2
 801a326:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 801a328:	bf00      	nop
 801a32a:	370c      	adds	r7, #12
 801a32c:	46bd      	mov	sp, r7
 801a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a332:	4770      	bx	lr

0801a334 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801a334:	b580      	push	{r7, lr}
 801a336:	b082      	sub	sp, #8
 801a338:	af00      	add	r7, sp, #0
 801a33a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 801a33c:	687b      	ldr	r3, [r7, #4]
 801a33e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801a342:	4618      	mov	r0, r3
 801a344:	f7f5 febe 	bl	80100c4 <USBH_LL_PortEnabled>
}
 801a348:	bf00      	nop
 801a34a:	3708      	adds	r7, #8
 801a34c:	46bd      	mov	sp, r7
 801a34e:	bd80      	pop	{r7, pc}

0801a350 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801a350:	b580      	push	{r7, lr}
 801a352:	b082      	sub	sp, #8
 801a354:	af00      	add	r7, sp, #0
 801a356:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801a358:	687b      	ldr	r3, [r7, #4]
 801a35a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801a35e:	4618      	mov	r0, r3
 801a360:	f7f5 fec0 	bl	80100e4 <USBH_LL_PortDisabled>
}
 801a364:	bf00      	nop
 801a366:	3708      	adds	r7, #8
 801a368:	46bd      	mov	sp, r7
 801a36a:	bd80      	pop	{r7, pc}

0801a36c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 801a36c:	b580      	push	{r7, lr}
 801a36e:	b082      	sub	sp, #8
 801a370:	af00      	add	r7, sp, #0
 801a372:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 801a374:	687a      	ldr	r2, [r7, #4]
 801a376:	f643 230c 	movw	r3, #14860	; 0x3a0c
 801a37a:	4413      	add	r3, r2
 801a37c:	781b      	ldrb	r3, [r3, #0]
 801a37e:	2b01      	cmp	r3, #1
 801a380:	d12b      	bne.n	801a3da <USBH_LL_Init+0x6e>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801a382:	4a18      	ldr	r2, [pc, #96]	; (801a3e4 <USBH_LL_Init+0x78>)
 801a384:	687b      	ldr	r3, [r7, #4]
 801a386:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 801a38a:	687a      	ldr	r2, [r7, #4]
 801a38c:	f643 2310 	movw	r3, #14864	; 0x3a10
 801a390:	4413      	add	r3, r2
 801a392:	4a14      	ldr	r2, [pc, #80]	; (801a3e4 <USBH_LL_Init+0x78>)
 801a394:	601a      	str	r2, [r3, #0]

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801a396:	4b13      	ldr	r3, [pc, #76]	; (801a3e4 <USBH_LL_Init+0x78>)
 801a398:	4a13      	ldr	r2, [pc, #76]	; (801a3e8 <USBH_LL_Init+0x7c>)
 801a39a:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 801a39c:	4b11      	ldr	r3, [pc, #68]	; (801a3e4 <USBH_LL_Init+0x78>)
 801a39e:	2210      	movs	r2, #16
 801a3a0:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 801a3a2:	4b10      	ldr	r3, [pc, #64]	; (801a3e4 <USBH_LL_Init+0x78>)
 801a3a4:	2201      	movs	r2, #1
 801a3a6:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801a3a8:	4b0e      	ldr	r3, [pc, #56]	; (801a3e4 <USBH_LL_Init+0x78>)
 801a3aa:	2200      	movs	r2, #0
 801a3ac:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801a3ae:	4b0d      	ldr	r3, [pc, #52]	; (801a3e4 <USBH_LL_Init+0x78>)
 801a3b0:	2202      	movs	r2, #2
 801a3b2:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801a3b4:	4b0b      	ldr	r3, [pc, #44]	; (801a3e4 <USBH_LL_Init+0x78>)
 801a3b6:	2200      	movs	r2, #0
 801a3b8:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801a3ba:	480a      	ldr	r0, [pc, #40]	; (801a3e4 <USBH_LL_Init+0x78>)
 801a3bc:	f7eb f829 	bl	8005412 <HAL_HCD_Init>
 801a3c0:	4603      	mov	r3, r0
 801a3c2:	2b00      	cmp	r3, #0
 801a3c4:	d001      	beq.n	801a3ca <USBH_LL_Init+0x5e>
  {
    Error_Handler( );
 801a3c6:	f7e7 f9bc 	bl	8001742 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801a3ca:	4806      	ldr	r0, [pc, #24]	; (801a3e4 <USBH_LL_Init+0x78>)
 801a3cc:	f7eb fbf8 	bl	8005bc0 <HAL_HCD_GetCurrentFrame>
 801a3d0:	4603      	mov	r3, r0
 801a3d2:	4619      	mov	r1, r3
 801a3d4:	6878      	ldr	r0, [r7, #4]
 801a3d6:	f7f5 fe32 	bl	801003e <USBH_LL_SetTimer>
  }
  return USBH_OK;
 801a3da:	2300      	movs	r3, #0
}
 801a3dc:	4618      	mov	r0, r3
 801a3de:	3708      	adds	r7, #8
 801a3e0:	46bd      	mov	sp, r7
 801a3e2:	bd80      	pop	{r7, pc}
 801a3e4:	24018124 	.word	0x24018124
 801a3e8:	40080000 	.word	0x40080000

0801a3ec <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801a3ec:	b580      	push	{r7, lr}
 801a3ee:	b084      	sub	sp, #16
 801a3f0:	af00      	add	r7, sp, #0
 801a3f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a3f4:	2300      	movs	r3, #0
 801a3f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801a3f8:	2300      	movs	r3, #0
 801a3fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 801a3fc:	687a      	ldr	r2, [r7, #4]
 801a3fe:	f643 2310 	movw	r3, #14864	; 0x3a10
 801a402:	4413      	add	r3, r2
 801a404:	681b      	ldr	r3, [r3, #0]
 801a406:	4618      	mov	r0, r3
 801a408:	f7eb fb72 	bl	8005af0 <HAL_HCD_Start>
 801a40c:	4603      	mov	r3, r0
 801a40e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801a410:	7bfb      	ldrb	r3, [r7, #15]
 801a412:	4618      	mov	r0, r3
 801a414:	f000 f91e 	bl	801a654 <USBH_Get_USB_Status>
 801a418:	4603      	mov	r3, r0
 801a41a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a41c:	7bbb      	ldrb	r3, [r7, #14]
}
 801a41e:	4618      	mov	r0, r3
 801a420:	3710      	adds	r7, #16
 801a422:	46bd      	mov	sp, r7
 801a424:	bd80      	pop	{r7, pc}

0801a426 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 801a426:	b580      	push	{r7, lr}
 801a428:	b084      	sub	sp, #16
 801a42a:	af00      	add	r7, sp, #0
 801a42c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a42e:	2300      	movs	r3, #0
 801a430:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801a432:	2300      	movs	r3, #0
 801a434:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 801a436:	687a      	ldr	r2, [r7, #4]
 801a438:	f643 2310 	movw	r3, #14864	; 0x3a10
 801a43c:	4413      	add	r3, r2
 801a43e:	681b      	ldr	r3, [r3, #0]
 801a440:	4618      	mov	r0, r3
 801a442:	f7eb fb78 	bl	8005b36 <HAL_HCD_Stop>
 801a446:	4603      	mov	r3, r0
 801a448:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801a44a:	7bfb      	ldrb	r3, [r7, #15]
 801a44c:	4618      	mov	r0, r3
 801a44e:	f000 f901 	bl	801a654 <USBH_Get_USB_Status>
 801a452:	4603      	mov	r3, r0
 801a454:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a456:	7bbb      	ldrb	r3, [r7, #14]
}
 801a458:	4618      	mov	r0, r3
 801a45a:	3710      	adds	r7, #16
 801a45c:	46bd      	mov	sp, r7
 801a45e:	bd80      	pop	{r7, pc}

0801a460 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801a460:	b580      	push	{r7, lr}
 801a462:	b082      	sub	sp, #8
 801a464:	af00      	add	r7, sp, #0
 801a466:	6078      	str	r0, [r7, #4]
 801a468:	460b      	mov	r3, r1
 801a46a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801a46c:	687a      	ldr	r2, [r7, #4]
 801a46e:	f643 2310 	movw	r3, #14864	; 0x3a10
 801a472:	4413      	add	r3, r2
 801a474:	681b      	ldr	r3, [r3, #0]
 801a476:	78fa      	ldrb	r2, [r7, #3]
 801a478:	4611      	mov	r1, r2
 801a47a:	4618      	mov	r0, r3
 801a47c:	f7eb fb8c 	bl	8005b98 <HAL_HCD_HC_GetXferCount>
 801a480:	4603      	mov	r3, r0
}
 801a482:	4618      	mov	r0, r3
 801a484:	3708      	adds	r7, #8
 801a486:	46bd      	mov	sp, r7
 801a488:	bd80      	pop	{r7, pc}

0801a48a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801a48a:	b590      	push	{r4, r7, lr}
 801a48c:	b089      	sub	sp, #36	; 0x24
 801a48e:	af04      	add	r7, sp, #16
 801a490:	6078      	str	r0, [r7, #4]
 801a492:	4608      	mov	r0, r1
 801a494:	4611      	mov	r1, r2
 801a496:	461a      	mov	r2, r3
 801a498:	4603      	mov	r3, r0
 801a49a:	70fb      	strb	r3, [r7, #3]
 801a49c:	460b      	mov	r3, r1
 801a49e:	70bb      	strb	r3, [r7, #2]
 801a4a0:	4613      	mov	r3, r2
 801a4a2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a4a4:	2300      	movs	r3, #0
 801a4a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801a4a8:	2300      	movs	r3, #0
 801a4aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801a4ac:	687a      	ldr	r2, [r7, #4]
 801a4ae:	f643 2310 	movw	r3, #14864	; 0x3a10
 801a4b2:	4413      	add	r3, r2
 801a4b4:	6818      	ldr	r0, [r3, #0]
 801a4b6:	787c      	ldrb	r4, [r7, #1]
 801a4b8:	78ba      	ldrb	r2, [r7, #2]
 801a4ba:	78f9      	ldrb	r1, [r7, #3]
 801a4bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a4be:	9302      	str	r3, [sp, #8]
 801a4c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a4c4:	9301      	str	r3, [sp, #4]
 801a4c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 801a4ca:	9300      	str	r3, [sp, #0]
 801a4cc:	4623      	mov	r3, r4
 801a4ce:	f7eb f802 	bl	80054d6 <HAL_HCD_HC_Init>
 801a4d2:	4603      	mov	r3, r0
 801a4d4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801a4d6:	7bfb      	ldrb	r3, [r7, #15]
 801a4d8:	4618      	mov	r0, r3
 801a4da:	f000 f8bb 	bl	801a654 <USBH_Get_USB_Status>
 801a4de:	4603      	mov	r3, r0
 801a4e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a4e2:	7bbb      	ldrb	r3, [r7, #14]
}
 801a4e4:	4618      	mov	r0, r3
 801a4e6:	3714      	adds	r7, #20
 801a4e8:	46bd      	mov	sp, r7
 801a4ea:	bd90      	pop	{r4, r7, pc}

0801a4ec <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801a4ec:	b580      	push	{r7, lr}
 801a4ee:	b084      	sub	sp, #16
 801a4f0:	af00      	add	r7, sp, #0
 801a4f2:	6078      	str	r0, [r7, #4]
 801a4f4:	460b      	mov	r3, r1
 801a4f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a4f8:	2300      	movs	r3, #0
 801a4fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801a4fc:	2300      	movs	r3, #0
 801a4fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801a500:	687a      	ldr	r2, [r7, #4]
 801a502:	f643 2310 	movw	r3, #14864	; 0x3a10
 801a506:	4413      	add	r3, r2
 801a508:	681b      	ldr	r3, [r3, #0]
 801a50a:	78fa      	ldrb	r2, [r7, #3]
 801a50c:	4611      	mov	r1, r2
 801a50e:	4618      	mov	r0, r3
 801a510:	f7eb f870 	bl	80055f4 <HAL_HCD_HC_Halt>
 801a514:	4603      	mov	r3, r0
 801a516:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801a518:	7bfb      	ldrb	r3, [r7, #15]
 801a51a:	4618      	mov	r0, r3
 801a51c:	f000 f89a 	bl	801a654 <USBH_Get_USB_Status>
 801a520:	4603      	mov	r3, r0
 801a522:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a524:	7bbb      	ldrb	r3, [r7, #14]
}
 801a526:	4618      	mov	r0, r3
 801a528:	3710      	adds	r7, #16
 801a52a:	46bd      	mov	sp, r7
 801a52c:	bd80      	pop	{r7, pc}

0801a52e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801a52e:	b590      	push	{r4, r7, lr}
 801a530:	b089      	sub	sp, #36	; 0x24
 801a532:	af04      	add	r7, sp, #16
 801a534:	6078      	str	r0, [r7, #4]
 801a536:	4608      	mov	r0, r1
 801a538:	4611      	mov	r1, r2
 801a53a:	461a      	mov	r2, r3
 801a53c:	4603      	mov	r3, r0
 801a53e:	70fb      	strb	r3, [r7, #3]
 801a540:	460b      	mov	r3, r1
 801a542:	70bb      	strb	r3, [r7, #2]
 801a544:	4613      	mov	r3, r2
 801a546:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a548:	2300      	movs	r3, #0
 801a54a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801a54c:	2300      	movs	r3, #0
 801a54e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801a550:	687a      	ldr	r2, [r7, #4]
 801a552:	f643 2310 	movw	r3, #14864	; 0x3a10
 801a556:	4413      	add	r3, r2
 801a558:	6818      	ldr	r0, [r3, #0]
 801a55a:	787c      	ldrb	r4, [r7, #1]
 801a55c:	78ba      	ldrb	r2, [r7, #2]
 801a55e:	78f9      	ldrb	r1, [r7, #3]
 801a560:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801a564:	9303      	str	r3, [sp, #12]
 801a566:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a568:	9302      	str	r3, [sp, #8]
 801a56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a56c:	9301      	str	r3, [sp, #4]
 801a56e:	f897 3020 	ldrb.w	r3, [r7, #32]
 801a572:	9300      	str	r3, [sp, #0]
 801a574:	4623      	mov	r3, r4
 801a576:	f7eb f861 	bl	800563c <HAL_HCD_HC_SubmitRequest>
 801a57a:	4603      	mov	r3, r0
 801a57c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801a57e:	7bfb      	ldrb	r3, [r7, #15]
 801a580:	4618      	mov	r0, r3
 801a582:	f000 f867 	bl	801a654 <USBH_Get_USB_Status>
 801a586:	4603      	mov	r3, r0
 801a588:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801a58a:	7bbb      	ldrb	r3, [r7, #14]
}
 801a58c:	4618      	mov	r0, r3
 801a58e:	3714      	adds	r7, #20
 801a590:	46bd      	mov	sp, r7
 801a592:	bd90      	pop	{r4, r7, pc}

0801a594 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801a594:	b580      	push	{r7, lr}
 801a596:	b082      	sub	sp, #8
 801a598:	af00      	add	r7, sp, #0
 801a59a:	6078      	str	r0, [r7, #4]
 801a59c:	460b      	mov	r3, r1
 801a59e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801a5a0:	687a      	ldr	r2, [r7, #4]
 801a5a2:	f643 2310 	movw	r3, #14864	; 0x3a10
 801a5a6:	4413      	add	r3, r2
 801a5a8:	681b      	ldr	r3, [r3, #0]
 801a5aa:	78fa      	ldrb	r2, [r7, #3]
 801a5ac:	4611      	mov	r1, r2
 801a5ae:	4618      	mov	r0, r3
 801a5b0:	f7eb fade 	bl	8005b70 <HAL_HCD_HC_GetURBState>
 801a5b4:	4603      	mov	r3, r0
}
 801a5b6:	4618      	mov	r0, r3
 801a5b8:	3708      	adds	r7, #8
 801a5ba:	46bd      	mov	sp, r7
 801a5bc:	bd80      	pop	{r7, pc}

0801a5be <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801a5be:	b580      	push	{r7, lr}
 801a5c0:	b082      	sub	sp, #8
 801a5c2:	af00      	add	r7, sp, #0
 801a5c4:	6078      	str	r0, [r7, #4]
 801a5c6:	460b      	mov	r3, r1
 801a5c8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801a5ca:	687a      	ldr	r2, [r7, #4]
 801a5cc:	f643 230c 	movw	r3, #14860	; 0x3a0c
 801a5d0:	4413      	add	r3, r2
 801a5d2:	781b      	ldrb	r3, [r3, #0]
 801a5d4:	2b01      	cmp	r3, #1
 801a5d6:	d103      	bne.n	801a5e0 <USBH_LL_DriverVBUS+0x22>
    MX_DriverVbusFS(state);
 801a5d8:	78fb      	ldrb	r3, [r7, #3]
 801a5da:	4618      	mov	r0, r3
 801a5dc:	f000 f866 	bl	801a6ac <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 801a5e0:	20c8      	movs	r0, #200	; 0xc8
 801a5e2:	f7e8 f82f 	bl	8002644 <HAL_Delay>
  return USBH_OK;
 801a5e6:	2300      	movs	r3, #0
}
 801a5e8:	4618      	mov	r0, r3
 801a5ea:	3708      	adds	r7, #8
 801a5ec:	46bd      	mov	sp, r7
 801a5ee:	bd80      	pop	{r7, pc}

0801a5f0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 801a5f0:	b480      	push	{r7}
 801a5f2:	b085      	sub	sp, #20
 801a5f4:	af00      	add	r7, sp, #0
 801a5f6:	6078      	str	r0, [r7, #4]
 801a5f8:	460b      	mov	r3, r1
 801a5fa:	70fb      	strb	r3, [r7, #3]
 801a5fc:	4613      	mov	r3, r2
 801a5fe:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801a600:	687a      	ldr	r2, [r7, #4]
 801a602:	f643 2310 	movw	r3, #14864	; 0x3a10
 801a606:	4413      	add	r3, r2
 801a608:	681b      	ldr	r3, [r3, #0]
 801a60a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801a60c:	78fb      	ldrb	r3, [r7, #3]
 801a60e:	68fa      	ldr	r2, [r7, #12]
 801a610:	212c      	movs	r1, #44	; 0x2c
 801a612:	fb01 f303 	mul.w	r3, r1, r3
 801a616:	4413      	add	r3, r2
 801a618:	333b      	adds	r3, #59	; 0x3b
 801a61a:	781b      	ldrb	r3, [r3, #0]
 801a61c:	2b00      	cmp	r3, #0
 801a61e:	d009      	beq.n	801a634 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801a620:	78fb      	ldrb	r3, [r7, #3]
 801a622:	68fa      	ldr	r2, [r7, #12]
 801a624:	212c      	movs	r1, #44	; 0x2c
 801a626:	fb01 f303 	mul.w	r3, r1, r3
 801a62a:	4413      	add	r3, r2
 801a62c:	3354      	adds	r3, #84	; 0x54
 801a62e:	78ba      	ldrb	r2, [r7, #2]
 801a630:	701a      	strb	r2, [r3, #0]
 801a632:	e008      	b.n	801a646 <USBH_LL_SetToggle+0x56>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801a634:	78fb      	ldrb	r3, [r7, #3]
 801a636:	68fa      	ldr	r2, [r7, #12]
 801a638:	212c      	movs	r1, #44	; 0x2c
 801a63a:	fb01 f303 	mul.w	r3, r1, r3
 801a63e:	4413      	add	r3, r2
 801a640:	3355      	adds	r3, #85	; 0x55
 801a642:	78ba      	ldrb	r2, [r7, #2]
 801a644:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801a646:	2300      	movs	r3, #0
}
 801a648:	4618      	mov	r0, r3
 801a64a:	3714      	adds	r7, #20
 801a64c:	46bd      	mov	sp, r7
 801a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a652:	4770      	bx	lr

0801a654 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801a654:	b480      	push	{r7}
 801a656:	b085      	sub	sp, #20
 801a658:	af00      	add	r7, sp, #0
 801a65a:	4603      	mov	r3, r0
 801a65c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801a65e:	2300      	movs	r3, #0
 801a660:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801a662:	79fb      	ldrb	r3, [r7, #7]
 801a664:	2b03      	cmp	r3, #3
 801a666:	d817      	bhi.n	801a698 <USBH_Get_USB_Status+0x44>
 801a668:	a201      	add	r2, pc, #4	; (adr r2, 801a670 <USBH_Get_USB_Status+0x1c>)
 801a66a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a66e:	bf00      	nop
 801a670:	0801a681 	.word	0x0801a681
 801a674:	0801a687 	.word	0x0801a687
 801a678:	0801a68d 	.word	0x0801a68d
 801a67c:	0801a693 	.word	0x0801a693
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801a680:	2300      	movs	r3, #0
 801a682:	73fb      	strb	r3, [r7, #15]
    break;
 801a684:	e00b      	b.n	801a69e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801a686:	2302      	movs	r3, #2
 801a688:	73fb      	strb	r3, [r7, #15]
    break;
 801a68a:	e008      	b.n	801a69e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 801a68c:	2301      	movs	r3, #1
 801a68e:	73fb      	strb	r3, [r7, #15]
    break;
 801a690:	e005      	b.n	801a69e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801a692:	2302      	movs	r3, #2
 801a694:	73fb      	strb	r3, [r7, #15]
    break;
 801a696:	e002      	b.n	801a69e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801a698:	2302      	movs	r3, #2
 801a69a:	73fb      	strb	r3, [r7, #15]
    break;
 801a69c:	bf00      	nop
  }
  return usb_status;
 801a69e:	7bfb      	ldrb	r3, [r7, #15]
}
 801a6a0:	4618      	mov	r0, r3
 801a6a2:	3714      	adds	r7, #20
 801a6a4:	46bd      	mov	sp, r7
 801a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6aa:	4770      	bx	lr

0801a6ac <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 801a6ac:	b580      	push	{r7, lr}
 801a6ae:	b084      	sub	sp, #16
 801a6b0:	af00      	add	r7, sp, #0
 801a6b2:	4603      	mov	r3, r0
 801a6b4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801a6b6:	79fb      	ldrb	r3, [r7, #7]
 801a6b8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801a6ba:	79fb      	ldrb	r3, [r7, #7]
 801a6bc:	2b00      	cmp	r3, #0
 801a6be:	d102      	bne.n	801a6c6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 801a6c0:	2301      	movs	r3, #1
 801a6c2:	73fb      	strb	r3, [r7, #15]
 801a6c4:	e001      	b.n	801a6ca <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801a6c6:	2300      	movs	r3, #0
 801a6c8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10,(GPIO_PinState)data);
 801a6ca:	7bfb      	ldrb	r3, [r7, #15]
 801a6cc:	461a      	mov	r2, r3
 801a6ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801a6d2:	4803      	ldr	r0, [pc, #12]	; (801a6e0 <MX_DriverVbusFS+0x34>)
 801a6d4:	f7ea fe6a 	bl	80053ac <HAL_GPIO_WritePin>
}
 801a6d8:	bf00      	nop
 801a6da:	3710      	adds	r7, #16
 801a6dc:	46bd      	mov	sp, r7
 801a6de:	bd80      	pop	{r7, pc}
 801a6e0:	58020000 	.word	0x58020000

0801a6e4 <__assert_func>:
 801a6e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a6e6:	4614      	mov	r4, r2
 801a6e8:	461a      	mov	r2, r3
 801a6ea:	4b09      	ldr	r3, [pc, #36]	; (801a710 <__assert_func+0x2c>)
 801a6ec:	681b      	ldr	r3, [r3, #0]
 801a6ee:	4605      	mov	r5, r0
 801a6f0:	68d8      	ldr	r0, [r3, #12]
 801a6f2:	b14c      	cbz	r4, 801a708 <__assert_func+0x24>
 801a6f4:	4b07      	ldr	r3, [pc, #28]	; (801a714 <__assert_func+0x30>)
 801a6f6:	9100      	str	r1, [sp, #0]
 801a6f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a6fc:	4906      	ldr	r1, [pc, #24]	; (801a718 <__assert_func+0x34>)
 801a6fe:	462b      	mov	r3, r5
 801a700:	f000 f818 	bl	801a734 <fiprintf>
 801a704:	f002 f93c 	bl	801c980 <abort>
 801a708:	4b04      	ldr	r3, [pc, #16]	; (801a71c <__assert_func+0x38>)
 801a70a:	461c      	mov	r4, r3
 801a70c:	e7f3      	b.n	801a6f6 <__assert_func+0x12>
 801a70e:	bf00      	nop
 801a710:	2400a128 	.word	0x2400a128
 801a714:	080285f7 	.word	0x080285f7
 801a718:	08028604 	.word	0x08028604
 801a71c:	08028632 	.word	0x08028632

0801a720 <atoi>:
 801a720:	220a      	movs	r2, #10
 801a722:	2100      	movs	r1, #0
 801a724:	f002 b862 	b.w	801c7ec <strtol>

0801a728 <__errno>:
 801a728:	4b01      	ldr	r3, [pc, #4]	; (801a730 <__errno+0x8>)
 801a72a:	6818      	ldr	r0, [r3, #0]
 801a72c:	4770      	bx	lr
 801a72e:	bf00      	nop
 801a730:	2400a128 	.word	0x2400a128

0801a734 <fiprintf>:
 801a734:	b40e      	push	{r1, r2, r3}
 801a736:	b503      	push	{r0, r1, lr}
 801a738:	4601      	mov	r1, r0
 801a73a:	ab03      	add	r3, sp, #12
 801a73c:	4805      	ldr	r0, [pc, #20]	; (801a754 <fiprintf+0x20>)
 801a73e:	f853 2b04 	ldr.w	r2, [r3], #4
 801a742:	6800      	ldr	r0, [r0, #0]
 801a744:	9301      	str	r3, [sp, #4]
 801a746:	f000 f93f 	bl	801a9c8 <_vfiprintf_r>
 801a74a:	b002      	add	sp, #8
 801a74c:	f85d eb04 	ldr.w	lr, [sp], #4
 801a750:	b003      	add	sp, #12
 801a752:	4770      	bx	lr
 801a754:	2400a128 	.word	0x2400a128

0801a758 <__libc_init_array>:
 801a758:	b570      	push	{r4, r5, r6, lr}
 801a75a:	4d0d      	ldr	r5, [pc, #52]	; (801a790 <__libc_init_array+0x38>)
 801a75c:	4c0d      	ldr	r4, [pc, #52]	; (801a794 <__libc_init_array+0x3c>)
 801a75e:	1b64      	subs	r4, r4, r5
 801a760:	10a4      	asrs	r4, r4, #2
 801a762:	2600      	movs	r6, #0
 801a764:	42a6      	cmp	r6, r4
 801a766:	d109      	bne.n	801a77c <__libc_init_array+0x24>
 801a768:	4d0b      	ldr	r5, [pc, #44]	; (801a798 <__libc_init_array+0x40>)
 801a76a:	4c0c      	ldr	r4, [pc, #48]	; (801a79c <__libc_init_array+0x44>)
 801a76c:	f004 fe2c 	bl	801f3c8 <_init>
 801a770:	1b64      	subs	r4, r4, r5
 801a772:	10a4      	asrs	r4, r4, #2
 801a774:	2600      	movs	r6, #0
 801a776:	42a6      	cmp	r6, r4
 801a778:	d105      	bne.n	801a786 <__libc_init_array+0x2e>
 801a77a:	bd70      	pop	{r4, r5, r6, pc}
 801a77c:	f855 3b04 	ldr.w	r3, [r5], #4
 801a780:	4798      	blx	r3
 801a782:	3601      	adds	r6, #1
 801a784:	e7ee      	b.n	801a764 <__libc_init_array+0xc>
 801a786:	f855 3b04 	ldr.w	r3, [r5], #4
 801a78a:	4798      	blx	r3
 801a78c:	3601      	adds	r6, #1
 801a78e:	e7f2      	b.n	801a776 <__libc_init_array+0x1e>
 801a790:	08028bf8 	.word	0x08028bf8
 801a794:	08028bf8 	.word	0x08028bf8
 801a798:	08028bf8 	.word	0x08028bf8
 801a79c:	08028bfc 	.word	0x08028bfc

0801a7a0 <malloc>:
 801a7a0:	4b02      	ldr	r3, [pc, #8]	; (801a7ac <malloc+0xc>)
 801a7a2:	4601      	mov	r1, r0
 801a7a4:	6818      	ldr	r0, [r3, #0]
 801a7a6:	f000 b88b 	b.w	801a8c0 <_malloc_r>
 801a7aa:	bf00      	nop
 801a7ac:	2400a128 	.word	0x2400a128

0801a7b0 <free>:
 801a7b0:	4b02      	ldr	r3, [pc, #8]	; (801a7bc <free+0xc>)
 801a7b2:	4601      	mov	r1, r0
 801a7b4:	6818      	ldr	r0, [r3, #0]
 801a7b6:	f000 b833 	b.w	801a820 <_free_r>
 801a7ba:	bf00      	nop
 801a7bc:	2400a128 	.word	0x2400a128

0801a7c0 <memcpy>:
 801a7c0:	440a      	add	r2, r1
 801a7c2:	4291      	cmp	r1, r2
 801a7c4:	f100 33ff 	add.w	r3, r0, #4294967295
 801a7c8:	d100      	bne.n	801a7cc <memcpy+0xc>
 801a7ca:	4770      	bx	lr
 801a7cc:	b510      	push	{r4, lr}
 801a7ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a7d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a7d6:	4291      	cmp	r1, r2
 801a7d8:	d1f9      	bne.n	801a7ce <memcpy+0xe>
 801a7da:	bd10      	pop	{r4, pc}

0801a7dc <memmove>:
 801a7dc:	4288      	cmp	r0, r1
 801a7de:	b510      	push	{r4, lr}
 801a7e0:	eb01 0402 	add.w	r4, r1, r2
 801a7e4:	d902      	bls.n	801a7ec <memmove+0x10>
 801a7e6:	4284      	cmp	r4, r0
 801a7e8:	4623      	mov	r3, r4
 801a7ea:	d807      	bhi.n	801a7fc <memmove+0x20>
 801a7ec:	1e43      	subs	r3, r0, #1
 801a7ee:	42a1      	cmp	r1, r4
 801a7f0:	d008      	beq.n	801a804 <memmove+0x28>
 801a7f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a7f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a7fa:	e7f8      	b.n	801a7ee <memmove+0x12>
 801a7fc:	4402      	add	r2, r0
 801a7fe:	4601      	mov	r1, r0
 801a800:	428a      	cmp	r2, r1
 801a802:	d100      	bne.n	801a806 <memmove+0x2a>
 801a804:	bd10      	pop	{r4, pc}
 801a806:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a80a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a80e:	e7f7      	b.n	801a800 <memmove+0x24>

0801a810 <memset>:
 801a810:	4402      	add	r2, r0
 801a812:	4603      	mov	r3, r0
 801a814:	4293      	cmp	r3, r2
 801a816:	d100      	bne.n	801a81a <memset+0xa>
 801a818:	4770      	bx	lr
 801a81a:	f803 1b01 	strb.w	r1, [r3], #1
 801a81e:	e7f9      	b.n	801a814 <memset+0x4>

0801a820 <_free_r>:
 801a820:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a822:	2900      	cmp	r1, #0
 801a824:	d048      	beq.n	801a8b8 <_free_r+0x98>
 801a826:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a82a:	9001      	str	r0, [sp, #4]
 801a82c:	2b00      	cmp	r3, #0
 801a82e:	f1a1 0404 	sub.w	r4, r1, #4
 801a832:	bfb8      	it	lt
 801a834:	18e4      	addlt	r4, r4, r3
 801a836:	f003 fc5d 	bl	801e0f4 <__malloc_lock>
 801a83a:	4a20      	ldr	r2, [pc, #128]	; (801a8bc <_free_r+0x9c>)
 801a83c:	9801      	ldr	r0, [sp, #4]
 801a83e:	6813      	ldr	r3, [r2, #0]
 801a840:	4615      	mov	r5, r2
 801a842:	b933      	cbnz	r3, 801a852 <_free_r+0x32>
 801a844:	6063      	str	r3, [r4, #4]
 801a846:	6014      	str	r4, [r2, #0]
 801a848:	b003      	add	sp, #12
 801a84a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a84e:	f003 bc57 	b.w	801e100 <__malloc_unlock>
 801a852:	42a3      	cmp	r3, r4
 801a854:	d90b      	bls.n	801a86e <_free_r+0x4e>
 801a856:	6821      	ldr	r1, [r4, #0]
 801a858:	1862      	adds	r2, r4, r1
 801a85a:	4293      	cmp	r3, r2
 801a85c:	bf04      	itt	eq
 801a85e:	681a      	ldreq	r2, [r3, #0]
 801a860:	685b      	ldreq	r3, [r3, #4]
 801a862:	6063      	str	r3, [r4, #4]
 801a864:	bf04      	itt	eq
 801a866:	1852      	addeq	r2, r2, r1
 801a868:	6022      	streq	r2, [r4, #0]
 801a86a:	602c      	str	r4, [r5, #0]
 801a86c:	e7ec      	b.n	801a848 <_free_r+0x28>
 801a86e:	461a      	mov	r2, r3
 801a870:	685b      	ldr	r3, [r3, #4]
 801a872:	b10b      	cbz	r3, 801a878 <_free_r+0x58>
 801a874:	42a3      	cmp	r3, r4
 801a876:	d9fa      	bls.n	801a86e <_free_r+0x4e>
 801a878:	6811      	ldr	r1, [r2, #0]
 801a87a:	1855      	adds	r5, r2, r1
 801a87c:	42a5      	cmp	r5, r4
 801a87e:	d10b      	bne.n	801a898 <_free_r+0x78>
 801a880:	6824      	ldr	r4, [r4, #0]
 801a882:	4421      	add	r1, r4
 801a884:	1854      	adds	r4, r2, r1
 801a886:	42a3      	cmp	r3, r4
 801a888:	6011      	str	r1, [r2, #0]
 801a88a:	d1dd      	bne.n	801a848 <_free_r+0x28>
 801a88c:	681c      	ldr	r4, [r3, #0]
 801a88e:	685b      	ldr	r3, [r3, #4]
 801a890:	6053      	str	r3, [r2, #4]
 801a892:	4421      	add	r1, r4
 801a894:	6011      	str	r1, [r2, #0]
 801a896:	e7d7      	b.n	801a848 <_free_r+0x28>
 801a898:	d902      	bls.n	801a8a0 <_free_r+0x80>
 801a89a:	230c      	movs	r3, #12
 801a89c:	6003      	str	r3, [r0, #0]
 801a89e:	e7d3      	b.n	801a848 <_free_r+0x28>
 801a8a0:	6825      	ldr	r5, [r4, #0]
 801a8a2:	1961      	adds	r1, r4, r5
 801a8a4:	428b      	cmp	r3, r1
 801a8a6:	bf04      	itt	eq
 801a8a8:	6819      	ldreq	r1, [r3, #0]
 801a8aa:	685b      	ldreq	r3, [r3, #4]
 801a8ac:	6063      	str	r3, [r4, #4]
 801a8ae:	bf04      	itt	eq
 801a8b0:	1949      	addeq	r1, r1, r5
 801a8b2:	6021      	streq	r1, [r4, #0]
 801a8b4:	6054      	str	r4, [r2, #4]
 801a8b6:	e7c7      	b.n	801a848 <_free_r+0x28>
 801a8b8:	b003      	add	sp, #12
 801a8ba:	bd30      	pop	{r4, r5, pc}
 801a8bc:	2400ab20 	.word	0x2400ab20

0801a8c0 <_malloc_r>:
 801a8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a8c2:	1ccd      	adds	r5, r1, #3
 801a8c4:	f025 0503 	bic.w	r5, r5, #3
 801a8c8:	3508      	adds	r5, #8
 801a8ca:	2d0c      	cmp	r5, #12
 801a8cc:	bf38      	it	cc
 801a8ce:	250c      	movcc	r5, #12
 801a8d0:	2d00      	cmp	r5, #0
 801a8d2:	4606      	mov	r6, r0
 801a8d4:	db01      	blt.n	801a8da <_malloc_r+0x1a>
 801a8d6:	42a9      	cmp	r1, r5
 801a8d8:	d903      	bls.n	801a8e2 <_malloc_r+0x22>
 801a8da:	230c      	movs	r3, #12
 801a8dc:	6033      	str	r3, [r6, #0]
 801a8de:	2000      	movs	r0, #0
 801a8e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a8e2:	f003 fc07 	bl	801e0f4 <__malloc_lock>
 801a8e6:	4921      	ldr	r1, [pc, #132]	; (801a96c <_malloc_r+0xac>)
 801a8e8:	680a      	ldr	r2, [r1, #0]
 801a8ea:	4614      	mov	r4, r2
 801a8ec:	b99c      	cbnz	r4, 801a916 <_malloc_r+0x56>
 801a8ee:	4f20      	ldr	r7, [pc, #128]	; (801a970 <_malloc_r+0xb0>)
 801a8f0:	683b      	ldr	r3, [r7, #0]
 801a8f2:	b923      	cbnz	r3, 801a8fe <_malloc_r+0x3e>
 801a8f4:	4621      	mov	r1, r4
 801a8f6:	4630      	mov	r0, r6
 801a8f8:	f001 f86a 	bl	801b9d0 <_sbrk_r>
 801a8fc:	6038      	str	r0, [r7, #0]
 801a8fe:	4629      	mov	r1, r5
 801a900:	4630      	mov	r0, r6
 801a902:	f001 f865 	bl	801b9d0 <_sbrk_r>
 801a906:	1c43      	adds	r3, r0, #1
 801a908:	d123      	bne.n	801a952 <_malloc_r+0x92>
 801a90a:	230c      	movs	r3, #12
 801a90c:	6033      	str	r3, [r6, #0]
 801a90e:	4630      	mov	r0, r6
 801a910:	f003 fbf6 	bl	801e100 <__malloc_unlock>
 801a914:	e7e3      	b.n	801a8de <_malloc_r+0x1e>
 801a916:	6823      	ldr	r3, [r4, #0]
 801a918:	1b5b      	subs	r3, r3, r5
 801a91a:	d417      	bmi.n	801a94c <_malloc_r+0x8c>
 801a91c:	2b0b      	cmp	r3, #11
 801a91e:	d903      	bls.n	801a928 <_malloc_r+0x68>
 801a920:	6023      	str	r3, [r4, #0]
 801a922:	441c      	add	r4, r3
 801a924:	6025      	str	r5, [r4, #0]
 801a926:	e004      	b.n	801a932 <_malloc_r+0x72>
 801a928:	6863      	ldr	r3, [r4, #4]
 801a92a:	42a2      	cmp	r2, r4
 801a92c:	bf0c      	ite	eq
 801a92e:	600b      	streq	r3, [r1, #0]
 801a930:	6053      	strne	r3, [r2, #4]
 801a932:	4630      	mov	r0, r6
 801a934:	f003 fbe4 	bl	801e100 <__malloc_unlock>
 801a938:	f104 000b 	add.w	r0, r4, #11
 801a93c:	1d23      	adds	r3, r4, #4
 801a93e:	f020 0007 	bic.w	r0, r0, #7
 801a942:	1ac2      	subs	r2, r0, r3
 801a944:	d0cc      	beq.n	801a8e0 <_malloc_r+0x20>
 801a946:	1a1b      	subs	r3, r3, r0
 801a948:	50a3      	str	r3, [r4, r2]
 801a94a:	e7c9      	b.n	801a8e0 <_malloc_r+0x20>
 801a94c:	4622      	mov	r2, r4
 801a94e:	6864      	ldr	r4, [r4, #4]
 801a950:	e7cc      	b.n	801a8ec <_malloc_r+0x2c>
 801a952:	1cc4      	adds	r4, r0, #3
 801a954:	f024 0403 	bic.w	r4, r4, #3
 801a958:	42a0      	cmp	r0, r4
 801a95a:	d0e3      	beq.n	801a924 <_malloc_r+0x64>
 801a95c:	1a21      	subs	r1, r4, r0
 801a95e:	4630      	mov	r0, r6
 801a960:	f001 f836 	bl	801b9d0 <_sbrk_r>
 801a964:	3001      	adds	r0, #1
 801a966:	d1dd      	bne.n	801a924 <_malloc_r+0x64>
 801a968:	e7cf      	b.n	801a90a <_malloc_r+0x4a>
 801a96a:	bf00      	nop
 801a96c:	2400ab20 	.word	0x2400ab20
 801a970:	2400ab24 	.word	0x2400ab24

0801a974 <__sfputc_r>:
 801a974:	6893      	ldr	r3, [r2, #8]
 801a976:	3b01      	subs	r3, #1
 801a978:	2b00      	cmp	r3, #0
 801a97a:	b410      	push	{r4}
 801a97c:	6093      	str	r3, [r2, #8]
 801a97e:	da08      	bge.n	801a992 <__sfputc_r+0x1e>
 801a980:	6994      	ldr	r4, [r2, #24]
 801a982:	42a3      	cmp	r3, r4
 801a984:	db01      	blt.n	801a98a <__sfputc_r+0x16>
 801a986:	290a      	cmp	r1, #10
 801a988:	d103      	bne.n	801a992 <__sfputc_r+0x1e>
 801a98a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a98e:	f001 bf37 	b.w	801c800 <__swbuf_r>
 801a992:	6813      	ldr	r3, [r2, #0]
 801a994:	1c58      	adds	r0, r3, #1
 801a996:	6010      	str	r0, [r2, #0]
 801a998:	7019      	strb	r1, [r3, #0]
 801a99a:	4608      	mov	r0, r1
 801a99c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a9a0:	4770      	bx	lr

0801a9a2 <__sfputs_r>:
 801a9a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a9a4:	4606      	mov	r6, r0
 801a9a6:	460f      	mov	r7, r1
 801a9a8:	4614      	mov	r4, r2
 801a9aa:	18d5      	adds	r5, r2, r3
 801a9ac:	42ac      	cmp	r4, r5
 801a9ae:	d101      	bne.n	801a9b4 <__sfputs_r+0x12>
 801a9b0:	2000      	movs	r0, #0
 801a9b2:	e007      	b.n	801a9c4 <__sfputs_r+0x22>
 801a9b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a9b8:	463a      	mov	r2, r7
 801a9ba:	4630      	mov	r0, r6
 801a9bc:	f7ff ffda 	bl	801a974 <__sfputc_r>
 801a9c0:	1c43      	adds	r3, r0, #1
 801a9c2:	d1f3      	bne.n	801a9ac <__sfputs_r+0xa>
 801a9c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a9c8 <_vfiprintf_r>:
 801a9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9cc:	460d      	mov	r5, r1
 801a9ce:	b09d      	sub	sp, #116	; 0x74
 801a9d0:	4614      	mov	r4, r2
 801a9d2:	4698      	mov	r8, r3
 801a9d4:	4606      	mov	r6, r0
 801a9d6:	b118      	cbz	r0, 801a9e0 <_vfiprintf_r+0x18>
 801a9d8:	6983      	ldr	r3, [r0, #24]
 801a9da:	b90b      	cbnz	r3, 801a9e0 <_vfiprintf_r+0x18>
 801a9dc:	f002 ff00 	bl	801d7e0 <__sinit>
 801a9e0:	4b89      	ldr	r3, [pc, #548]	; (801ac08 <_vfiprintf_r+0x240>)
 801a9e2:	429d      	cmp	r5, r3
 801a9e4:	d11b      	bne.n	801aa1e <_vfiprintf_r+0x56>
 801a9e6:	6875      	ldr	r5, [r6, #4]
 801a9e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a9ea:	07d9      	lsls	r1, r3, #31
 801a9ec:	d405      	bmi.n	801a9fa <_vfiprintf_r+0x32>
 801a9ee:	89ab      	ldrh	r3, [r5, #12]
 801a9f0:	059a      	lsls	r2, r3, #22
 801a9f2:	d402      	bmi.n	801a9fa <_vfiprintf_r+0x32>
 801a9f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a9f6:	f003 fb04 	bl	801e002 <__retarget_lock_acquire_recursive>
 801a9fa:	89ab      	ldrh	r3, [r5, #12]
 801a9fc:	071b      	lsls	r3, r3, #28
 801a9fe:	d501      	bpl.n	801aa04 <_vfiprintf_r+0x3c>
 801aa00:	692b      	ldr	r3, [r5, #16]
 801aa02:	b9eb      	cbnz	r3, 801aa40 <_vfiprintf_r+0x78>
 801aa04:	4629      	mov	r1, r5
 801aa06:	4630      	mov	r0, r6
 801aa08:	f001 ff4c 	bl	801c8a4 <__swsetup_r>
 801aa0c:	b1c0      	cbz	r0, 801aa40 <_vfiprintf_r+0x78>
 801aa0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801aa10:	07dc      	lsls	r4, r3, #31
 801aa12:	d50e      	bpl.n	801aa32 <_vfiprintf_r+0x6a>
 801aa14:	f04f 30ff 	mov.w	r0, #4294967295
 801aa18:	b01d      	add	sp, #116	; 0x74
 801aa1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa1e:	4b7b      	ldr	r3, [pc, #492]	; (801ac0c <_vfiprintf_r+0x244>)
 801aa20:	429d      	cmp	r5, r3
 801aa22:	d101      	bne.n	801aa28 <_vfiprintf_r+0x60>
 801aa24:	68b5      	ldr	r5, [r6, #8]
 801aa26:	e7df      	b.n	801a9e8 <_vfiprintf_r+0x20>
 801aa28:	4b79      	ldr	r3, [pc, #484]	; (801ac10 <_vfiprintf_r+0x248>)
 801aa2a:	429d      	cmp	r5, r3
 801aa2c:	bf08      	it	eq
 801aa2e:	68f5      	ldreq	r5, [r6, #12]
 801aa30:	e7da      	b.n	801a9e8 <_vfiprintf_r+0x20>
 801aa32:	89ab      	ldrh	r3, [r5, #12]
 801aa34:	0598      	lsls	r0, r3, #22
 801aa36:	d4ed      	bmi.n	801aa14 <_vfiprintf_r+0x4c>
 801aa38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801aa3a:	f003 fae3 	bl	801e004 <__retarget_lock_release_recursive>
 801aa3e:	e7e9      	b.n	801aa14 <_vfiprintf_r+0x4c>
 801aa40:	2300      	movs	r3, #0
 801aa42:	9309      	str	r3, [sp, #36]	; 0x24
 801aa44:	2320      	movs	r3, #32
 801aa46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801aa4a:	f8cd 800c 	str.w	r8, [sp, #12]
 801aa4e:	2330      	movs	r3, #48	; 0x30
 801aa50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801ac14 <_vfiprintf_r+0x24c>
 801aa54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801aa58:	f04f 0901 	mov.w	r9, #1
 801aa5c:	4623      	mov	r3, r4
 801aa5e:	469a      	mov	sl, r3
 801aa60:	f813 2b01 	ldrb.w	r2, [r3], #1
 801aa64:	b10a      	cbz	r2, 801aa6a <_vfiprintf_r+0xa2>
 801aa66:	2a25      	cmp	r2, #37	; 0x25
 801aa68:	d1f9      	bne.n	801aa5e <_vfiprintf_r+0x96>
 801aa6a:	ebba 0b04 	subs.w	fp, sl, r4
 801aa6e:	d00b      	beq.n	801aa88 <_vfiprintf_r+0xc0>
 801aa70:	465b      	mov	r3, fp
 801aa72:	4622      	mov	r2, r4
 801aa74:	4629      	mov	r1, r5
 801aa76:	4630      	mov	r0, r6
 801aa78:	f7ff ff93 	bl	801a9a2 <__sfputs_r>
 801aa7c:	3001      	adds	r0, #1
 801aa7e:	f000 80aa 	beq.w	801abd6 <_vfiprintf_r+0x20e>
 801aa82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801aa84:	445a      	add	r2, fp
 801aa86:	9209      	str	r2, [sp, #36]	; 0x24
 801aa88:	f89a 3000 	ldrb.w	r3, [sl]
 801aa8c:	2b00      	cmp	r3, #0
 801aa8e:	f000 80a2 	beq.w	801abd6 <_vfiprintf_r+0x20e>
 801aa92:	2300      	movs	r3, #0
 801aa94:	f04f 32ff 	mov.w	r2, #4294967295
 801aa98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801aa9c:	f10a 0a01 	add.w	sl, sl, #1
 801aaa0:	9304      	str	r3, [sp, #16]
 801aaa2:	9307      	str	r3, [sp, #28]
 801aaa4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801aaa8:	931a      	str	r3, [sp, #104]	; 0x68
 801aaaa:	4654      	mov	r4, sl
 801aaac:	2205      	movs	r2, #5
 801aaae:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aab2:	4858      	ldr	r0, [pc, #352]	; (801ac14 <_vfiprintf_r+0x24c>)
 801aab4:	f7e5 fc2c 	bl	8000310 <memchr>
 801aab8:	9a04      	ldr	r2, [sp, #16]
 801aaba:	b9d8      	cbnz	r0, 801aaf4 <_vfiprintf_r+0x12c>
 801aabc:	06d1      	lsls	r1, r2, #27
 801aabe:	bf44      	itt	mi
 801aac0:	2320      	movmi	r3, #32
 801aac2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801aac6:	0713      	lsls	r3, r2, #28
 801aac8:	bf44      	itt	mi
 801aaca:	232b      	movmi	r3, #43	; 0x2b
 801aacc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801aad0:	f89a 3000 	ldrb.w	r3, [sl]
 801aad4:	2b2a      	cmp	r3, #42	; 0x2a
 801aad6:	d015      	beq.n	801ab04 <_vfiprintf_r+0x13c>
 801aad8:	9a07      	ldr	r2, [sp, #28]
 801aada:	4654      	mov	r4, sl
 801aadc:	2000      	movs	r0, #0
 801aade:	f04f 0c0a 	mov.w	ip, #10
 801aae2:	4621      	mov	r1, r4
 801aae4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801aae8:	3b30      	subs	r3, #48	; 0x30
 801aaea:	2b09      	cmp	r3, #9
 801aaec:	d94e      	bls.n	801ab8c <_vfiprintf_r+0x1c4>
 801aaee:	b1b0      	cbz	r0, 801ab1e <_vfiprintf_r+0x156>
 801aaf0:	9207      	str	r2, [sp, #28]
 801aaf2:	e014      	b.n	801ab1e <_vfiprintf_r+0x156>
 801aaf4:	eba0 0308 	sub.w	r3, r0, r8
 801aaf8:	fa09 f303 	lsl.w	r3, r9, r3
 801aafc:	4313      	orrs	r3, r2
 801aafe:	9304      	str	r3, [sp, #16]
 801ab00:	46a2      	mov	sl, r4
 801ab02:	e7d2      	b.n	801aaaa <_vfiprintf_r+0xe2>
 801ab04:	9b03      	ldr	r3, [sp, #12]
 801ab06:	1d19      	adds	r1, r3, #4
 801ab08:	681b      	ldr	r3, [r3, #0]
 801ab0a:	9103      	str	r1, [sp, #12]
 801ab0c:	2b00      	cmp	r3, #0
 801ab0e:	bfbb      	ittet	lt
 801ab10:	425b      	neglt	r3, r3
 801ab12:	f042 0202 	orrlt.w	r2, r2, #2
 801ab16:	9307      	strge	r3, [sp, #28]
 801ab18:	9307      	strlt	r3, [sp, #28]
 801ab1a:	bfb8      	it	lt
 801ab1c:	9204      	strlt	r2, [sp, #16]
 801ab1e:	7823      	ldrb	r3, [r4, #0]
 801ab20:	2b2e      	cmp	r3, #46	; 0x2e
 801ab22:	d10c      	bne.n	801ab3e <_vfiprintf_r+0x176>
 801ab24:	7863      	ldrb	r3, [r4, #1]
 801ab26:	2b2a      	cmp	r3, #42	; 0x2a
 801ab28:	d135      	bne.n	801ab96 <_vfiprintf_r+0x1ce>
 801ab2a:	9b03      	ldr	r3, [sp, #12]
 801ab2c:	1d1a      	adds	r2, r3, #4
 801ab2e:	681b      	ldr	r3, [r3, #0]
 801ab30:	9203      	str	r2, [sp, #12]
 801ab32:	2b00      	cmp	r3, #0
 801ab34:	bfb8      	it	lt
 801ab36:	f04f 33ff 	movlt.w	r3, #4294967295
 801ab3a:	3402      	adds	r4, #2
 801ab3c:	9305      	str	r3, [sp, #20]
 801ab3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801ac24 <_vfiprintf_r+0x25c>
 801ab42:	7821      	ldrb	r1, [r4, #0]
 801ab44:	2203      	movs	r2, #3
 801ab46:	4650      	mov	r0, sl
 801ab48:	f7e5 fbe2 	bl	8000310 <memchr>
 801ab4c:	b140      	cbz	r0, 801ab60 <_vfiprintf_r+0x198>
 801ab4e:	2340      	movs	r3, #64	; 0x40
 801ab50:	eba0 000a 	sub.w	r0, r0, sl
 801ab54:	fa03 f000 	lsl.w	r0, r3, r0
 801ab58:	9b04      	ldr	r3, [sp, #16]
 801ab5a:	4303      	orrs	r3, r0
 801ab5c:	3401      	adds	r4, #1
 801ab5e:	9304      	str	r3, [sp, #16]
 801ab60:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ab64:	482c      	ldr	r0, [pc, #176]	; (801ac18 <_vfiprintf_r+0x250>)
 801ab66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ab6a:	2206      	movs	r2, #6
 801ab6c:	f7e5 fbd0 	bl	8000310 <memchr>
 801ab70:	2800      	cmp	r0, #0
 801ab72:	d03f      	beq.n	801abf4 <_vfiprintf_r+0x22c>
 801ab74:	4b29      	ldr	r3, [pc, #164]	; (801ac1c <_vfiprintf_r+0x254>)
 801ab76:	bb1b      	cbnz	r3, 801abc0 <_vfiprintf_r+0x1f8>
 801ab78:	9b03      	ldr	r3, [sp, #12]
 801ab7a:	3307      	adds	r3, #7
 801ab7c:	f023 0307 	bic.w	r3, r3, #7
 801ab80:	3308      	adds	r3, #8
 801ab82:	9303      	str	r3, [sp, #12]
 801ab84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ab86:	443b      	add	r3, r7
 801ab88:	9309      	str	r3, [sp, #36]	; 0x24
 801ab8a:	e767      	b.n	801aa5c <_vfiprintf_r+0x94>
 801ab8c:	fb0c 3202 	mla	r2, ip, r2, r3
 801ab90:	460c      	mov	r4, r1
 801ab92:	2001      	movs	r0, #1
 801ab94:	e7a5      	b.n	801aae2 <_vfiprintf_r+0x11a>
 801ab96:	2300      	movs	r3, #0
 801ab98:	3401      	adds	r4, #1
 801ab9a:	9305      	str	r3, [sp, #20]
 801ab9c:	4619      	mov	r1, r3
 801ab9e:	f04f 0c0a 	mov.w	ip, #10
 801aba2:	4620      	mov	r0, r4
 801aba4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801aba8:	3a30      	subs	r2, #48	; 0x30
 801abaa:	2a09      	cmp	r2, #9
 801abac:	d903      	bls.n	801abb6 <_vfiprintf_r+0x1ee>
 801abae:	2b00      	cmp	r3, #0
 801abb0:	d0c5      	beq.n	801ab3e <_vfiprintf_r+0x176>
 801abb2:	9105      	str	r1, [sp, #20]
 801abb4:	e7c3      	b.n	801ab3e <_vfiprintf_r+0x176>
 801abb6:	fb0c 2101 	mla	r1, ip, r1, r2
 801abba:	4604      	mov	r4, r0
 801abbc:	2301      	movs	r3, #1
 801abbe:	e7f0      	b.n	801aba2 <_vfiprintf_r+0x1da>
 801abc0:	ab03      	add	r3, sp, #12
 801abc2:	9300      	str	r3, [sp, #0]
 801abc4:	462a      	mov	r2, r5
 801abc6:	4b16      	ldr	r3, [pc, #88]	; (801ac20 <_vfiprintf_r+0x258>)
 801abc8:	a904      	add	r1, sp, #16
 801abca:	4630      	mov	r0, r6
 801abcc:	f000 f8bc 	bl	801ad48 <_printf_float>
 801abd0:	4607      	mov	r7, r0
 801abd2:	1c78      	adds	r0, r7, #1
 801abd4:	d1d6      	bne.n	801ab84 <_vfiprintf_r+0x1bc>
 801abd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801abd8:	07d9      	lsls	r1, r3, #31
 801abda:	d405      	bmi.n	801abe8 <_vfiprintf_r+0x220>
 801abdc:	89ab      	ldrh	r3, [r5, #12]
 801abde:	059a      	lsls	r2, r3, #22
 801abe0:	d402      	bmi.n	801abe8 <_vfiprintf_r+0x220>
 801abe2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801abe4:	f003 fa0e 	bl	801e004 <__retarget_lock_release_recursive>
 801abe8:	89ab      	ldrh	r3, [r5, #12]
 801abea:	065b      	lsls	r3, r3, #25
 801abec:	f53f af12 	bmi.w	801aa14 <_vfiprintf_r+0x4c>
 801abf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801abf2:	e711      	b.n	801aa18 <_vfiprintf_r+0x50>
 801abf4:	ab03      	add	r3, sp, #12
 801abf6:	9300      	str	r3, [sp, #0]
 801abf8:	462a      	mov	r2, r5
 801abfa:	4b09      	ldr	r3, [pc, #36]	; (801ac20 <_vfiprintf_r+0x258>)
 801abfc:	a904      	add	r1, sp, #16
 801abfe:	4630      	mov	r0, r6
 801ac00:	f000 fb2e 	bl	801b260 <_printf_i>
 801ac04:	e7e4      	b.n	801abd0 <_vfiprintf_r+0x208>
 801ac06:	bf00      	nop
 801ac08:	08028890 	.word	0x08028890
 801ac0c:	080288b0 	.word	0x080288b0
 801ac10:	08028870 	.word	0x08028870
 801ac14:	08028638 	.word	0x08028638
 801ac18:	08028642 	.word	0x08028642
 801ac1c:	0801ad49 	.word	0x0801ad49
 801ac20:	0801a9a3 	.word	0x0801a9a3
 801ac24:	0802863e 	.word	0x0802863e

0801ac28 <__cvt>:
 801ac28:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ac2a:	ed2d 8b02 	vpush	{d8}
 801ac2e:	eeb0 8b40 	vmov.f64	d8, d0
 801ac32:	b085      	sub	sp, #20
 801ac34:	4617      	mov	r7, r2
 801ac36:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801ac38:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801ac3a:	ee18 2a90 	vmov	r2, s17
 801ac3e:	f025 0520 	bic.w	r5, r5, #32
 801ac42:	2a00      	cmp	r2, #0
 801ac44:	bfb6      	itet	lt
 801ac46:	222d      	movlt	r2, #45	; 0x2d
 801ac48:	2200      	movge	r2, #0
 801ac4a:	eeb1 8b40 	vneglt.f64	d8, d0
 801ac4e:	2d46      	cmp	r5, #70	; 0x46
 801ac50:	460c      	mov	r4, r1
 801ac52:	701a      	strb	r2, [r3, #0]
 801ac54:	d004      	beq.n	801ac60 <__cvt+0x38>
 801ac56:	2d45      	cmp	r5, #69	; 0x45
 801ac58:	d100      	bne.n	801ac5c <__cvt+0x34>
 801ac5a:	3401      	adds	r4, #1
 801ac5c:	2102      	movs	r1, #2
 801ac5e:	e000      	b.n	801ac62 <__cvt+0x3a>
 801ac60:	2103      	movs	r1, #3
 801ac62:	ab03      	add	r3, sp, #12
 801ac64:	9301      	str	r3, [sp, #4]
 801ac66:	ab02      	add	r3, sp, #8
 801ac68:	9300      	str	r3, [sp, #0]
 801ac6a:	4622      	mov	r2, r4
 801ac6c:	4633      	mov	r3, r6
 801ac6e:	eeb0 0b48 	vmov.f64	d0, d8
 801ac72:	f001 ff19 	bl	801caa8 <_dtoa_r>
 801ac76:	2d47      	cmp	r5, #71	; 0x47
 801ac78:	d109      	bne.n	801ac8e <__cvt+0x66>
 801ac7a:	07fb      	lsls	r3, r7, #31
 801ac7c:	d407      	bmi.n	801ac8e <__cvt+0x66>
 801ac7e:	9b03      	ldr	r3, [sp, #12]
 801ac80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ac82:	1a1b      	subs	r3, r3, r0
 801ac84:	6013      	str	r3, [r2, #0]
 801ac86:	b005      	add	sp, #20
 801ac88:	ecbd 8b02 	vpop	{d8}
 801ac8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ac8e:	2d46      	cmp	r5, #70	; 0x46
 801ac90:	eb00 0204 	add.w	r2, r0, r4
 801ac94:	d10c      	bne.n	801acb0 <__cvt+0x88>
 801ac96:	7803      	ldrb	r3, [r0, #0]
 801ac98:	2b30      	cmp	r3, #48	; 0x30
 801ac9a:	d107      	bne.n	801acac <__cvt+0x84>
 801ac9c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801aca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aca4:	bf1c      	itt	ne
 801aca6:	f1c4 0401 	rsbne	r4, r4, #1
 801acaa:	6034      	strne	r4, [r6, #0]
 801acac:	6833      	ldr	r3, [r6, #0]
 801acae:	441a      	add	r2, r3
 801acb0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801acb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801acb8:	bf08      	it	eq
 801acba:	9203      	streq	r2, [sp, #12]
 801acbc:	2130      	movs	r1, #48	; 0x30
 801acbe:	9b03      	ldr	r3, [sp, #12]
 801acc0:	4293      	cmp	r3, r2
 801acc2:	d2dc      	bcs.n	801ac7e <__cvt+0x56>
 801acc4:	1c5c      	adds	r4, r3, #1
 801acc6:	9403      	str	r4, [sp, #12]
 801acc8:	7019      	strb	r1, [r3, #0]
 801acca:	e7f8      	b.n	801acbe <__cvt+0x96>

0801accc <__exponent>:
 801accc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801acce:	4603      	mov	r3, r0
 801acd0:	2900      	cmp	r1, #0
 801acd2:	bfb8      	it	lt
 801acd4:	4249      	neglt	r1, r1
 801acd6:	f803 2b02 	strb.w	r2, [r3], #2
 801acda:	bfb4      	ite	lt
 801acdc:	222d      	movlt	r2, #45	; 0x2d
 801acde:	222b      	movge	r2, #43	; 0x2b
 801ace0:	2909      	cmp	r1, #9
 801ace2:	7042      	strb	r2, [r0, #1]
 801ace4:	dd2a      	ble.n	801ad3c <__exponent+0x70>
 801ace6:	f10d 0407 	add.w	r4, sp, #7
 801acea:	46a4      	mov	ip, r4
 801acec:	270a      	movs	r7, #10
 801acee:	46a6      	mov	lr, r4
 801acf0:	460a      	mov	r2, r1
 801acf2:	fb91 f6f7 	sdiv	r6, r1, r7
 801acf6:	fb07 1516 	mls	r5, r7, r6, r1
 801acfa:	3530      	adds	r5, #48	; 0x30
 801acfc:	2a63      	cmp	r2, #99	; 0x63
 801acfe:	f104 34ff 	add.w	r4, r4, #4294967295
 801ad02:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801ad06:	4631      	mov	r1, r6
 801ad08:	dcf1      	bgt.n	801acee <__exponent+0x22>
 801ad0a:	3130      	adds	r1, #48	; 0x30
 801ad0c:	f1ae 0502 	sub.w	r5, lr, #2
 801ad10:	f804 1c01 	strb.w	r1, [r4, #-1]
 801ad14:	1c44      	adds	r4, r0, #1
 801ad16:	4629      	mov	r1, r5
 801ad18:	4561      	cmp	r1, ip
 801ad1a:	d30a      	bcc.n	801ad32 <__exponent+0x66>
 801ad1c:	f10d 0209 	add.w	r2, sp, #9
 801ad20:	eba2 020e 	sub.w	r2, r2, lr
 801ad24:	4565      	cmp	r5, ip
 801ad26:	bf88      	it	hi
 801ad28:	2200      	movhi	r2, #0
 801ad2a:	4413      	add	r3, r2
 801ad2c:	1a18      	subs	r0, r3, r0
 801ad2e:	b003      	add	sp, #12
 801ad30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ad32:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ad36:	f804 2f01 	strb.w	r2, [r4, #1]!
 801ad3a:	e7ed      	b.n	801ad18 <__exponent+0x4c>
 801ad3c:	2330      	movs	r3, #48	; 0x30
 801ad3e:	3130      	adds	r1, #48	; 0x30
 801ad40:	7083      	strb	r3, [r0, #2]
 801ad42:	70c1      	strb	r1, [r0, #3]
 801ad44:	1d03      	adds	r3, r0, #4
 801ad46:	e7f1      	b.n	801ad2c <__exponent+0x60>

0801ad48 <_printf_float>:
 801ad48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad4c:	b08b      	sub	sp, #44	; 0x2c
 801ad4e:	460c      	mov	r4, r1
 801ad50:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801ad54:	4616      	mov	r6, r2
 801ad56:	461f      	mov	r7, r3
 801ad58:	4605      	mov	r5, r0
 801ad5a:	f003 f94d 	bl	801dff8 <_localeconv_r>
 801ad5e:	f8d0 b000 	ldr.w	fp, [r0]
 801ad62:	4658      	mov	r0, fp
 801ad64:	f7e5 fac6 	bl	80002f4 <strlen>
 801ad68:	2300      	movs	r3, #0
 801ad6a:	9308      	str	r3, [sp, #32]
 801ad6c:	f8d8 3000 	ldr.w	r3, [r8]
 801ad70:	f894 9018 	ldrb.w	r9, [r4, #24]
 801ad74:	6822      	ldr	r2, [r4, #0]
 801ad76:	3307      	adds	r3, #7
 801ad78:	f023 0307 	bic.w	r3, r3, #7
 801ad7c:	f103 0108 	add.w	r1, r3, #8
 801ad80:	f8c8 1000 	str.w	r1, [r8]
 801ad84:	4682      	mov	sl, r0
 801ad86:	e9d3 0100 	ldrd	r0, r1, [r3]
 801ad8a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801ad8e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 801aff0 <_printf_float+0x2a8>
 801ad92:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801ad96:	eeb0 6bc0 	vabs.f64	d6, d0
 801ad9a:	eeb4 6b47 	vcmp.f64	d6, d7
 801ad9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ada2:	dd24      	ble.n	801adee <_printf_float+0xa6>
 801ada4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801ada8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801adac:	d502      	bpl.n	801adb4 <_printf_float+0x6c>
 801adae:	232d      	movs	r3, #45	; 0x2d
 801adb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801adb4:	4b90      	ldr	r3, [pc, #576]	; (801aff8 <_printf_float+0x2b0>)
 801adb6:	4891      	ldr	r0, [pc, #580]	; (801affc <_printf_float+0x2b4>)
 801adb8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801adbc:	bf94      	ite	ls
 801adbe:	4698      	movls	r8, r3
 801adc0:	4680      	movhi	r8, r0
 801adc2:	2303      	movs	r3, #3
 801adc4:	6123      	str	r3, [r4, #16]
 801adc6:	f022 0204 	bic.w	r2, r2, #4
 801adca:	2300      	movs	r3, #0
 801adcc:	6022      	str	r2, [r4, #0]
 801adce:	9304      	str	r3, [sp, #16]
 801add0:	9700      	str	r7, [sp, #0]
 801add2:	4633      	mov	r3, r6
 801add4:	aa09      	add	r2, sp, #36	; 0x24
 801add6:	4621      	mov	r1, r4
 801add8:	4628      	mov	r0, r5
 801adda:	f000 f9d3 	bl	801b184 <_printf_common>
 801adde:	3001      	adds	r0, #1
 801ade0:	f040 808a 	bne.w	801aef8 <_printf_float+0x1b0>
 801ade4:	f04f 30ff 	mov.w	r0, #4294967295
 801ade8:	b00b      	add	sp, #44	; 0x2c
 801adea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801adee:	eeb4 0b40 	vcmp.f64	d0, d0
 801adf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801adf6:	d709      	bvc.n	801ae0c <_printf_float+0xc4>
 801adf8:	ee10 3a90 	vmov	r3, s1
 801adfc:	2b00      	cmp	r3, #0
 801adfe:	bfbc      	itt	lt
 801ae00:	232d      	movlt	r3, #45	; 0x2d
 801ae02:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801ae06:	487e      	ldr	r0, [pc, #504]	; (801b000 <_printf_float+0x2b8>)
 801ae08:	4b7e      	ldr	r3, [pc, #504]	; (801b004 <_printf_float+0x2bc>)
 801ae0a:	e7d5      	b.n	801adb8 <_printf_float+0x70>
 801ae0c:	6863      	ldr	r3, [r4, #4]
 801ae0e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801ae12:	9104      	str	r1, [sp, #16]
 801ae14:	1c59      	adds	r1, r3, #1
 801ae16:	d13c      	bne.n	801ae92 <_printf_float+0x14a>
 801ae18:	2306      	movs	r3, #6
 801ae1a:	6063      	str	r3, [r4, #4]
 801ae1c:	2300      	movs	r3, #0
 801ae1e:	9303      	str	r3, [sp, #12]
 801ae20:	ab08      	add	r3, sp, #32
 801ae22:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801ae26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801ae2a:	ab07      	add	r3, sp, #28
 801ae2c:	6861      	ldr	r1, [r4, #4]
 801ae2e:	9300      	str	r3, [sp, #0]
 801ae30:	6022      	str	r2, [r4, #0]
 801ae32:	f10d 031b 	add.w	r3, sp, #27
 801ae36:	4628      	mov	r0, r5
 801ae38:	f7ff fef6 	bl	801ac28 <__cvt>
 801ae3c:	9b04      	ldr	r3, [sp, #16]
 801ae3e:	9907      	ldr	r1, [sp, #28]
 801ae40:	2b47      	cmp	r3, #71	; 0x47
 801ae42:	4680      	mov	r8, r0
 801ae44:	d108      	bne.n	801ae58 <_printf_float+0x110>
 801ae46:	1cc8      	adds	r0, r1, #3
 801ae48:	db02      	blt.n	801ae50 <_printf_float+0x108>
 801ae4a:	6863      	ldr	r3, [r4, #4]
 801ae4c:	4299      	cmp	r1, r3
 801ae4e:	dd41      	ble.n	801aed4 <_printf_float+0x18c>
 801ae50:	f1a9 0902 	sub.w	r9, r9, #2
 801ae54:	fa5f f989 	uxtb.w	r9, r9
 801ae58:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801ae5c:	d820      	bhi.n	801aea0 <_printf_float+0x158>
 801ae5e:	3901      	subs	r1, #1
 801ae60:	464a      	mov	r2, r9
 801ae62:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801ae66:	9107      	str	r1, [sp, #28]
 801ae68:	f7ff ff30 	bl	801accc <__exponent>
 801ae6c:	9a08      	ldr	r2, [sp, #32]
 801ae6e:	9004      	str	r0, [sp, #16]
 801ae70:	1813      	adds	r3, r2, r0
 801ae72:	2a01      	cmp	r2, #1
 801ae74:	6123      	str	r3, [r4, #16]
 801ae76:	dc02      	bgt.n	801ae7e <_printf_float+0x136>
 801ae78:	6822      	ldr	r2, [r4, #0]
 801ae7a:	07d2      	lsls	r2, r2, #31
 801ae7c:	d501      	bpl.n	801ae82 <_printf_float+0x13a>
 801ae7e:	3301      	adds	r3, #1
 801ae80:	6123      	str	r3, [r4, #16]
 801ae82:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801ae86:	2b00      	cmp	r3, #0
 801ae88:	d0a2      	beq.n	801add0 <_printf_float+0x88>
 801ae8a:	232d      	movs	r3, #45	; 0x2d
 801ae8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ae90:	e79e      	b.n	801add0 <_printf_float+0x88>
 801ae92:	9904      	ldr	r1, [sp, #16]
 801ae94:	2947      	cmp	r1, #71	; 0x47
 801ae96:	d1c1      	bne.n	801ae1c <_printf_float+0xd4>
 801ae98:	2b00      	cmp	r3, #0
 801ae9a:	d1bf      	bne.n	801ae1c <_printf_float+0xd4>
 801ae9c:	2301      	movs	r3, #1
 801ae9e:	e7bc      	b.n	801ae1a <_printf_float+0xd2>
 801aea0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801aea4:	d118      	bne.n	801aed8 <_printf_float+0x190>
 801aea6:	2900      	cmp	r1, #0
 801aea8:	6863      	ldr	r3, [r4, #4]
 801aeaa:	dd0b      	ble.n	801aec4 <_printf_float+0x17c>
 801aeac:	6121      	str	r1, [r4, #16]
 801aeae:	b913      	cbnz	r3, 801aeb6 <_printf_float+0x16e>
 801aeb0:	6822      	ldr	r2, [r4, #0]
 801aeb2:	07d0      	lsls	r0, r2, #31
 801aeb4:	d502      	bpl.n	801aebc <_printf_float+0x174>
 801aeb6:	3301      	adds	r3, #1
 801aeb8:	440b      	add	r3, r1
 801aeba:	6123      	str	r3, [r4, #16]
 801aebc:	2300      	movs	r3, #0
 801aebe:	65a1      	str	r1, [r4, #88]	; 0x58
 801aec0:	9304      	str	r3, [sp, #16]
 801aec2:	e7de      	b.n	801ae82 <_printf_float+0x13a>
 801aec4:	b913      	cbnz	r3, 801aecc <_printf_float+0x184>
 801aec6:	6822      	ldr	r2, [r4, #0]
 801aec8:	07d2      	lsls	r2, r2, #31
 801aeca:	d501      	bpl.n	801aed0 <_printf_float+0x188>
 801aecc:	3302      	adds	r3, #2
 801aece:	e7f4      	b.n	801aeba <_printf_float+0x172>
 801aed0:	2301      	movs	r3, #1
 801aed2:	e7f2      	b.n	801aeba <_printf_float+0x172>
 801aed4:	f04f 0967 	mov.w	r9, #103	; 0x67
 801aed8:	9b08      	ldr	r3, [sp, #32]
 801aeda:	4299      	cmp	r1, r3
 801aedc:	db05      	blt.n	801aeea <_printf_float+0x1a2>
 801aede:	6823      	ldr	r3, [r4, #0]
 801aee0:	6121      	str	r1, [r4, #16]
 801aee2:	07d8      	lsls	r0, r3, #31
 801aee4:	d5ea      	bpl.n	801aebc <_printf_float+0x174>
 801aee6:	1c4b      	adds	r3, r1, #1
 801aee8:	e7e7      	b.n	801aeba <_printf_float+0x172>
 801aeea:	2900      	cmp	r1, #0
 801aeec:	bfd4      	ite	le
 801aeee:	f1c1 0202 	rsble	r2, r1, #2
 801aef2:	2201      	movgt	r2, #1
 801aef4:	4413      	add	r3, r2
 801aef6:	e7e0      	b.n	801aeba <_printf_float+0x172>
 801aef8:	6823      	ldr	r3, [r4, #0]
 801aefa:	055a      	lsls	r2, r3, #21
 801aefc:	d407      	bmi.n	801af0e <_printf_float+0x1c6>
 801aefe:	6923      	ldr	r3, [r4, #16]
 801af00:	4642      	mov	r2, r8
 801af02:	4631      	mov	r1, r6
 801af04:	4628      	mov	r0, r5
 801af06:	47b8      	blx	r7
 801af08:	3001      	adds	r0, #1
 801af0a:	d12a      	bne.n	801af62 <_printf_float+0x21a>
 801af0c:	e76a      	b.n	801ade4 <_printf_float+0x9c>
 801af0e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801af12:	f240 80e2 	bls.w	801b0da <_printf_float+0x392>
 801af16:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801af1a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801af1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af22:	d133      	bne.n	801af8c <_printf_float+0x244>
 801af24:	4a38      	ldr	r2, [pc, #224]	; (801b008 <_printf_float+0x2c0>)
 801af26:	2301      	movs	r3, #1
 801af28:	4631      	mov	r1, r6
 801af2a:	4628      	mov	r0, r5
 801af2c:	47b8      	blx	r7
 801af2e:	3001      	adds	r0, #1
 801af30:	f43f af58 	beq.w	801ade4 <_printf_float+0x9c>
 801af34:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801af38:	429a      	cmp	r2, r3
 801af3a:	db02      	blt.n	801af42 <_printf_float+0x1fa>
 801af3c:	6823      	ldr	r3, [r4, #0]
 801af3e:	07d8      	lsls	r0, r3, #31
 801af40:	d50f      	bpl.n	801af62 <_printf_float+0x21a>
 801af42:	4653      	mov	r3, sl
 801af44:	465a      	mov	r2, fp
 801af46:	4631      	mov	r1, r6
 801af48:	4628      	mov	r0, r5
 801af4a:	47b8      	blx	r7
 801af4c:	3001      	adds	r0, #1
 801af4e:	f43f af49 	beq.w	801ade4 <_printf_float+0x9c>
 801af52:	f04f 0800 	mov.w	r8, #0
 801af56:	f104 091a 	add.w	r9, r4, #26
 801af5a:	9b08      	ldr	r3, [sp, #32]
 801af5c:	3b01      	subs	r3, #1
 801af5e:	4543      	cmp	r3, r8
 801af60:	dc09      	bgt.n	801af76 <_printf_float+0x22e>
 801af62:	6823      	ldr	r3, [r4, #0]
 801af64:	079b      	lsls	r3, r3, #30
 801af66:	f100 8108 	bmi.w	801b17a <_printf_float+0x432>
 801af6a:	68e0      	ldr	r0, [r4, #12]
 801af6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801af6e:	4298      	cmp	r0, r3
 801af70:	bfb8      	it	lt
 801af72:	4618      	movlt	r0, r3
 801af74:	e738      	b.n	801ade8 <_printf_float+0xa0>
 801af76:	2301      	movs	r3, #1
 801af78:	464a      	mov	r2, r9
 801af7a:	4631      	mov	r1, r6
 801af7c:	4628      	mov	r0, r5
 801af7e:	47b8      	blx	r7
 801af80:	3001      	adds	r0, #1
 801af82:	f43f af2f 	beq.w	801ade4 <_printf_float+0x9c>
 801af86:	f108 0801 	add.w	r8, r8, #1
 801af8a:	e7e6      	b.n	801af5a <_printf_float+0x212>
 801af8c:	9b07      	ldr	r3, [sp, #28]
 801af8e:	2b00      	cmp	r3, #0
 801af90:	dc3c      	bgt.n	801b00c <_printf_float+0x2c4>
 801af92:	4a1d      	ldr	r2, [pc, #116]	; (801b008 <_printf_float+0x2c0>)
 801af94:	2301      	movs	r3, #1
 801af96:	4631      	mov	r1, r6
 801af98:	4628      	mov	r0, r5
 801af9a:	47b8      	blx	r7
 801af9c:	3001      	adds	r0, #1
 801af9e:	f43f af21 	beq.w	801ade4 <_printf_float+0x9c>
 801afa2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801afa6:	4313      	orrs	r3, r2
 801afa8:	d102      	bne.n	801afb0 <_printf_float+0x268>
 801afaa:	6823      	ldr	r3, [r4, #0]
 801afac:	07d9      	lsls	r1, r3, #31
 801afae:	d5d8      	bpl.n	801af62 <_printf_float+0x21a>
 801afb0:	4653      	mov	r3, sl
 801afb2:	465a      	mov	r2, fp
 801afb4:	4631      	mov	r1, r6
 801afb6:	4628      	mov	r0, r5
 801afb8:	47b8      	blx	r7
 801afba:	3001      	adds	r0, #1
 801afbc:	f43f af12 	beq.w	801ade4 <_printf_float+0x9c>
 801afc0:	f04f 0900 	mov.w	r9, #0
 801afc4:	f104 0a1a 	add.w	sl, r4, #26
 801afc8:	9b07      	ldr	r3, [sp, #28]
 801afca:	425b      	negs	r3, r3
 801afcc:	454b      	cmp	r3, r9
 801afce:	dc01      	bgt.n	801afd4 <_printf_float+0x28c>
 801afd0:	9b08      	ldr	r3, [sp, #32]
 801afd2:	e795      	b.n	801af00 <_printf_float+0x1b8>
 801afd4:	2301      	movs	r3, #1
 801afd6:	4652      	mov	r2, sl
 801afd8:	4631      	mov	r1, r6
 801afda:	4628      	mov	r0, r5
 801afdc:	47b8      	blx	r7
 801afde:	3001      	adds	r0, #1
 801afe0:	f43f af00 	beq.w	801ade4 <_printf_float+0x9c>
 801afe4:	f109 0901 	add.w	r9, r9, #1
 801afe8:	e7ee      	b.n	801afc8 <_printf_float+0x280>
 801afea:	bf00      	nop
 801afec:	f3af 8000 	nop.w
 801aff0:	ffffffff 	.word	0xffffffff
 801aff4:	7fefffff 	.word	0x7fefffff
 801aff8:	08028649 	.word	0x08028649
 801affc:	0802864d 	.word	0x0802864d
 801b000:	08028655 	.word	0x08028655
 801b004:	08028651 	.word	0x08028651
 801b008:	08028659 	.word	0x08028659
 801b00c:	9a08      	ldr	r2, [sp, #32]
 801b00e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b010:	429a      	cmp	r2, r3
 801b012:	bfa8      	it	ge
 801b014:	461a      	movge	r2, r3
 801b016:	2a00      	cmp	r2, #0
 801b018:	4691      	mov	r9, r2
 801b01a:	dc38      	bgt.n	801b08e <_printf_float+0x346>
 801b01c:	2300      	movs	r3, #0
 801b01e:	9305      	str	r3, [sp, #20]
 801b020:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b024:	f104 021a 	add.w	r2, r4, #26
 801b028:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b02a:	9905      	ldr	r1, [sp, #20]
 801b02c:	9304      	str	r3, [sp, #16]
 801b02e:	eba3 0309 	sub.w	r3, r3, r9
 801b032:	428b      	cmp	r3, r1
 801b034:	dc33      	bgt.n	801b09e <_printf_float+0x356>
 801b036:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b03a:	429a      	cmp	r2, r3
 801b03c:	db3c      	blt.n	801b0b8 <_printf_float+0x370>
 801b03e:	6823      	ldr	r3, [r4, #0]
 801b040:	07da      	lsls	r2, r3, #31
 801b042:	d439      	bmi.n	801b0b8 <_printf_float+0x370>
 801b044:	9a08      	ldr	r2, [sp, #32]
 801b046:	9b04      	ldr	r3, [sp, #16]
 801b048:	9907      	ldr	r1, [sp, #28]
 801b04a:	1ad3      	subs	r3, r2, r3
 801b04c:	eba2 0901 	sub.w	r9, r2, r1
 801b050:	4599      	cmp	r9, r3
 801b052:	bfa8      	it	ge
 801b054:	4699      	movge	r9, r3
 801b056:	f1b9 0f00 	cmp.w	r9, #0
 801b05a:	dc35      	bgt.n	801b0c8 <_printf_float+0x380>
 801b05c:	f04f 0800 	mov.w	r8, #0
 801b060:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b064:	f104 0a1a 	add.w	sl, r4, #26
 801b068:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b06c:	1a9b      	subs	r3, r3, r2
 801b06e:	eba3 0309 	sub.w	r3, r3, r9
 801b072:	4543      	cmp	r3, r8
 801b074:	f77f af75 	ble.w	801af62 <_printf_float+0x21a>
 801b078:	2301      	movs	r3, #1
 801b07a:	4652      	mov	r2, sl
 801b07c:	4631      	mov	r1, r6
 801b07e:	4628      	mov	r0, r5
 801b080:	47b8      	blx	r7
 801b082:	3001      	adds	r0, #1
 801b084:	f43f aeae 	beq.w	801ade4 <_printf_float+0x9c>
 801b088:	f108 0801 	add.w	r8, r8, #1
 801b08c:	e7ec      	b.n	801b068 <_printf_float+0x320>
 801b08e:	4613      	mov	r3, r2
 801b090:	4631      	mov	r1, r6
 801b092:	4642      	mov	r2, r8
 801b094:	4628      	mov	r0, r5
 801b096:	47b8      	blx	r7
 801b098:	3001      	adds	r0, #1
 801b09a:	d1bf      	bne.n	801b01c <_printf_float+0x2d4>
 801b09c:	e6a2      	b.n	801ade4 <_printf_float+0x9c>
 801b09e:	2301      	movs	r3, #1
 801b0a0:	4631      	mov	r1, r6
 801b0a2:	4628      	mov	r0, r5
 801b0a4:	9204      	str	r2, [sp, #16]
 801b0a6:	47b8      	blx	r7
 801b0a8:	3001      	adds	r0, #1
 801b0aa:	f43f ae9b 	beq.w	801ade4 <_printf_float+0x9c>
 801b0ae:	9b05      	ldr	r3, [sp, #20]
 801b0b0:	9a04      	ldr	r2, [sp, #16]
 801b0b2:	3301      	adds	r3, #1
 801b0b4:	9305      	str	r3, [sp, #20]
 801b0b6:	e7b7      	b.n	801b028 <_printf_float+0x2e0>
 801b0b8:	4653      	mov	r3, sl
 801b0ba:	465a      	mov	r2, fp
 801b0bc:	4631      	mov	r1, r6
 801b0be:	4628      	mov	r0, r5
 801b0c0:	47b8      	blx	r7
 801b0c2:	3001      	adds	r0, #1
 801b0c4:	d1be      	bne.n	801b044 <_printf_float+0x2fc>
 801b0c6:	e68d      	b.n	801ade4 <_printf_float+0x9c>
 801b0c8:	9a04      	ldr	r2, [sp, #16]
 801b0ca:	464b      	mov	r3, r9
 801b0cc:	4442      	add	r2, r8
 801b0ce:	4631      	mov	r1, r6
 801b0d0:	4628      	mov	r0, r5
 801b0d2:	47b8      	blx	r7
 801b0d4:	3001      	adds	r0, #1
 801b0d6:	d1c1      	bne.n	801b05c <_printf_float+0x314>
 801b0d8:	e684      	b.n	801ade4 <_printf_float+0x9c>
 801b0da:	9a08      	ldr	r2, [sp, #32]
 801b0dc:	2a01      	cmp	r2, #1
 801b0de:	dc01      	bgt.n	801b0e4 <_printf_float+0x39c>
 801b0e0:	07db      	lsls	r3, r3, #31
 801b0e2:	d537      	bpl.n	801b154 <_printf_float+0x40c>
 801b0e4:	2301      	movs	r3, #1
 801b0e6:	4642      	mov	r2, r8
 801b0e8:	4631      	mov	r1, r6
 801b0ea:	4628      	mov	r0, r5
 801b0ec:	47b8      	blx	r7
 801b0ee:	3001      	adds	r0, #1
 801b0f0:	f43f ae78 	beq.w	801ade4 <_printf_float+0x9c>
 801b0f4:	4653      	mov	r3, sl
 801b0f6:	465a      	mov	r2, fp
 801b0f8:	4631      	mov	r1, r6
 801b0fa:	4628      	mov	r0, r5
 801b0fc:	47b8      	blx	r7
 801b0fe:	3001      	adds	r0, #1
 801b100:	f43f ae70 	beq.w	801ade4 <_printf_float+0x9c>
 801b104:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801b108:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b10c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b110:	d01b      	beq.n	801b14a <_printf_float+0x402>
 801b112:	9b08      	ldr	r3, [sp, #32]
 801b114:	f108 0201 	add.w	r2, r8, #1
 801b118:	3b01      	subs	r3, #1
 801b11a:	4631      	mov	r1, r6
 801b11c:	4628      	mov	r0, r5
 801b11e:	47b8      	blx	r7
 801b120:	3001      	adds	r0, #1
 801b122:	d10e      	bne.n	801b142 <_printf_float+0x3fa>
 801b124:	e65e      	b.n	801ade4 <_printf_float+0x9c>
 801b126:	2301      	movs	r3, #1
 801b128:	464a      	mov	r2, r9
 801b12a:	4631      	mov	r1, r6
 801b12c:	4628      	mov	r0, r5
 801b12e:	47b8      	blx	r7
 801b130:	3001      	adds	r0, #1
 801b132:	f43f ae57 	beq.w	801ade4 <_printf_float+0x9c>
 801b136:	f108 0801 	add.w	r8, r8, #1
 801b13a:	9b08      	ldr	r3, [sp, #32]
 801b13c:	3b01      	subs	r3, #1
 801b13e:	4543      	cmp	r3, r8
 801b140:	dcf1      	bgt.n	801b126 <_printf_float+0x3de>
 801b142:	9b04      	ldr	r3, [sp, #16]
 801b144:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801b148:	e6db      	b.n	801af02 <_printf_float+0x1ba>
 801b14a:	f04f 0800 	mov.w	r8, #0
 801b14e:	f104 091a 	add.w	r9, r4, #26
 801b152:	e7f2      	b.n	801b13a <_printf_float+0x3f2>
 801b154:	2301      	movs	r3, #1
 801b156:	4642      	mov	r2, r8
 801b158:	e7df      	b.n	801b11a <_printf_float+0x3d2>
 801b15a:	2301      	movs	r3, #1
 801b15c:	464a      	mov	r2, r9
 801b15e:	4631      	mov	r1, r6
 801b160:	4628      	mov	r0, r5
 801b162:	47b8      	blx	r7
 801b164:	3001      	adds	r0, #1
 801b166:	f43f ae3d 	beq.w	801ade4 <_printf_float+0x9c>
 801b16a:	f108 0801 	add.w	r8, r8, #1
 801b16e:	68e3      	ldr	r3, [r4, #12]
 801b170:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b172:	1a5b      	subs	r3, r3, r1
 801b174:	4543      	cmp	r3, r8
 801b176:	dcf0      	bgt.n	801b15a <_printf_float+0x412>
 801b178:	e6f7      	b.n	801af6a <_printf_float+0x222>
 801b17a:	f04f 0800 	mov.w	r8, #0
 801b17e:	f104 0919 	add.w	r9, r4, #25
 801b182:	e7f4      	b.n	801b16e <_printf_float+0x426>

0801b184 <_printf_common>:
 801b184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b188:	4616      	mov	r6, r2
 801b18a:	4699      	mov	r9, r3
 801b18c:	688a      	ldr	r2, [r1, #8]
 801b18e:	690b      	ldr	r3, [r1, #16]
 801b190:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b194:	4293      	cmp	r3, r2
 801b196:	bfb8      	it	lt
 801b198:	4613      	movlt	r3, r2
 801b19a:	6033      	str	r3, [r6, #0]
 801b19c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b1a0:	4607      	mov	r7, r0
 801b1a2:	460c      	mov	r4, r1
 801b1a4:	b10a      	cbz	r2, 801b1aa <_printf_common+0x26>
 801b1a6:	3301      	adds	r3, #1
 801b1a8:	6033      	str	r3, [r6, #0]
 801b1aa:	6823      	ldr	r3, [r4, #0]
 801b1ac:	0699      	lsls	r1, r3, #26
 801b1ae:	bf42      	ittt	mi
 801b1b0:	6833      	ldrmi	r3, [r6, #0]
 801b1b2:	3302      	addmi	r3, #2
 801b1b4:	6033      	strmi	r3, [r6, #0]
 801b1b6:	6825      	ldr	r5, [r4, #0]
 801b1b8:	f015 0506 	ands.w	r5, r5, #6
 801b1bc:	d106      	bne.n	801b1cc <_printf_common+0x48>
 801b1be:	f104 0a19 	add.w	sl, r4, #25
 801b1c2:	68e3      	ldr	r3, [r4, #12]
 801b1c4:	6832      	ldr	r2, [r6, #0]
 801b1c6:	1a9b      	subs	r3, r3, r2
 801b1c8:	42ab      	cmp	r3, r5
 801b1ca:	dc26      	bgt.n	801b21a <_printf_common+0x96>
 801b1cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b1d0:	1e13      	subs	r3, r2, #0
 801b1d2:	6822      	ldr	r2, [r4, #0]
 801b1d4:	bf18      	it	ne
 801b1d6:	2301      	movne	r3, #1
 801b1d8:	0692      	lsls	r2, r2, #26
 801b1da:	d42b      	bmi.n	801b234 <_printf_common+0xb0>
 801b1dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b1e0:	4649      	mov	r1, r9
 801b1e2:	4638      	mov	r0, r7
 801b1e4:	47c0      	blx	r8
 801b1e6:	3001      	adds	r0, #1
 801b1e8:	d01e      	beq.n	801b228 <_printf_common+0xa4>
 801b1ea:	6823      	ldr	r3, [r4, #0]
 801b1ec:	68e5      	ldr	r5, [r4, #12]
 801b1ee:	6832      	ldr	r2, [r6, #0]
 801b1f0:	f003 0306 	and.w	r3, r3, #6
 801b1f4:	2b04      	cmp	r3, #4
 801b1f6:	bf08      	it	eq
 801b1f8:	1aad      	subeq	r5, r5, r2
 801b1fa:	68a3      	ldr	r3, [r4, #8]
 801b1fc:	6922      	ldr	r2, [r4, #16]
 801b1fe:	bf0c      	ite	eq
 801b200:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b204:	2500      	movne	r5, #0
 801b206:	4293      	cmp	r3, r2
 801b208:	bfc4      	itt	gt
 801b20a:	1a9b      	subgt	r3, r3, r2
 801b20c:	18ed      	addgt	r5, r5, r3
 801b20e:	2600      	movs	r6, #0
 801b210:	341a      	adds	r4, #26
 801b212:	42b5      	cmp	r5, r6
 801b214:	d11a      	bne.n	801b24c <_printf_common+0xc8>
 801b216:	2000      	movs	r0, #0
 801b218:	e008      	b.n	801b22c <_printf_common+0xa8>
 801b21a:	2301      	movs	r3, #1
 801b21c:	4652      	mov	r2, sl
 801b21e:	4649      	mov	r1, r9
 801b220:	4638      	mov	r0, r7
 801b222:	47c0      	blx	r8
 801b224:	3001      	adds	r0, #1
 801b226:	d103      	bne.n	801b230 <_printf_common+0xac>
 801b228:	f04f 30ff 	mov.w	r0, #4294967295
 801b22c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b230:	3501      	adds	r5, #1
 801b232:	e7c6      	b.n	801b1c2 <_printf_common+0x3e>
 801b234:	18e1      	adds	r1, r4, r3
 801b236:	1c5a      	adds	r2, r3, #1
 801b238:	2030      	movs	r0, #48	; 0x30
 801b23a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b23e:	4422      	add	r2, r4
 801b240:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b244:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b248:	3302      	adds	r3, #2
 801b24a:	e7c7      	b.n	801b1dc <_printf_common+0x58>
 801b24c:	2301      	movs	r3, #1
 801b24e:	4622      	mov	r2, r4
 801b250:	4649      	mov	r1, r9
 801b252:	4638      	mov	r0, r7
 801b254:	47c0      	blx	r8
 801b256:	3001      	adds	r0, #1
 801b258:	d0e6      	beq.n	801b228 <_printf_common+0xa4>
 801b25a:	3601      	adds	r6, #1
 801b25c:	e7d9      	b.n	801b212 <_printf_common+0x8e>
	...

0801b260 <_printf_i>:
 801b260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b264:	460c      	mov	r4, r1
 801b266:	4691      	mov	r9, r2
 801b268:	7e27      	ldrb	r7, [r4, #24]
 801b26a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b26c:	2f78      	cmp	r7, #120	; 0x78
 801b26e:	4680      	mov	r8, r0
 801b270:	469a      	mov	sl, r3
 801b272:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b276:	d807      	bhi.n	801b288 <_printf_i+0x28>
 801b278:	2f62      	cmp	r7, #98	; 0x62
 801b27a:	d80a      	bhi.n	801b292 <_printf_i+0x32>
 801b27c:	2f00      	cmp	r7, #0
 801b27e:	f000 80d8 	beq.w	801b432 <_printf_i+0x1d2>
 801b282:	2f58      	cmp	r7, #88	; 0x58
 801b284:	f000 80a3 	beq.w	801b3ce <_printf_i+0x16e>
 801b288:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b28c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b290:	e03a      	b.n	801b308 <_printf_i+0xa8>
 801b292:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b296:	2b15      	cmp	r3, #21
 801b298:	d8f6      	bhi.n	801b288 <_printf_i+0x28>
 801b29a:	a001      	add	r0, pc, #4	; (adr r0, 801b2a0 <_printf_i+0x40>)
 801b29c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801b2a0:	0801b2f9 	.word	0x0801b2f9
 801b2a4:	0801b30d 	.word	0x0801b30d
 801b2a8:	0801b289 	.word	0x0801b289
 801b2ac:	0801b289 	.word	0x0801b289
 801b2b0:	0801b289 	.word	0x0801b289
 801b2b4:	0801b289 	.word	0x0801b289
 801b2b8:	0801b30d 	.word	0x0801b30d
 801b2bc:	0801b289 	.word	0x0801b289
 801b2c0:	0801b289 	.word	0x0801b289
 801b2c4:	0801b289 	.word	0x0801b289
 801b2c8:	0801b289 	.word	0x0801b289
 801b2cc:	0801b419 	.word	0x0801b419
 801b2d0:	0801b33d 	.word	0x0801b33d
 801b2d4:	0801b3fb 	.word	0x0801b3fb
 801b2d8:	0801b289 	.word	0x0801b289
 801b2dc:	0801b289 	.word	0x0801b289
 801b2e0:	0801b43b 	.word	0x0801b43b
 801b2e4:	0801b289 	.word	0x0801b289
 801b2e8:	0801b33d 	.word	0x0801b33d
 801b2ec:	0801b289 	.word	0x0801b289
 801b2f0:	0801b289 	.word	0x0801b289
 801b2f4:	0801b403 	.word	0x0801b403
 801b2f8:	680b      	ldr	r3, [r1, #0]
 801b2fa:	1d1a      	adds	r2, r3, #4
 801b2fc:	681b      	ldr	r3, [r3, #0]
 801b2fe:	600a      	str	r2, [r1, #0]
 801b300:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b304:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b308:	2301      	movs	r3, #1
 801b30a:	e0a3      	b.n	801b454 <_printf_i+0x1f4>
 801b30c:	6825      	ldr	r5, [r4, #0]
 801b30e:	6808      	ldr	r0, [r1, #0]
 801b310:	062e      	lsls	r6, r5, #24
 801b312:	f100 0304 	add.w	r3, r0, #4
 801b316:	d50a      	bpl.n	801b32e <_printf_i+0xce>
 801b318:	6805      	ldr	r5, [r0, #0]
 801b31a:	600b      	str	r3, [r1, #0]
 801b31c:	2d00      	cmp	r5, #0
 801b31e:	da03      	bge.n	801b328 <_printf_i+0xc8>
 801b320:	232d      	movs	r3, #45	; 0x2d
 801b322:	426d      	negs	r5, r5
 801b324:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b328:	485e      	ldr	r0, [pc, #376]	; (801b4a4 <_printf_i+0x244>)
 801b32a:	230a      	movs	r3, #10
 801b32c:	e019      	b.n	801b362 <_printf_i+0x102>
 801b32e:	f015 0f40 	tst.w	r5, #64	; 0x40
 801b332:	6805      	ldr	r5, [r0, #0]
 801b334:	600b      	str	r3, [r1, #0]
 801b336:	bf18      	it	ne
 801b338:	b22d      	sxthne	r5, r5
 801b33a:	e7ef      	b.n	801b31c <_printf_i+0xbc>
 801b33c:	680b      	ldr	r3, [r1, #0]
 801b33e:	6825      	ldr	r5, [r4, #0]
 801b340:	1d18      	adds	r0, r3, #4
 801b342:	6008      	str	r0, [r1, #0]
 801b344:	0628      	lsls	r0, r5, #24
 801b346:	d501      	bpl.n	801b34c <_printf_i+0xec>
 801b348:	681d      	ldr	r5, [r3, #0]
 801b34a:	e002      	b.n	801b352 <_printf_i+0xf2>
 801b34c:	0669      	lsls	r1, r5, #25
 801b34e:	d5fb      	bpl.n	801b348 <_printf_i+0xe8>
 801b350:	881d      	ldrh	r5, [r3, #0]
 801b352:	4854      	ldr	r0, [pc, #336]	; (801b4a4 <_printf_i+0x244>)
 801b354:	2f6f      	cmp	r7, #111	; 0x6f
 801b356:	bf0c      	ite	eq
 801b358:	2308      	moveq	r3, #8
 801b35a:	230a      	movne	r3, #10
 801b35c:	2100      	movs	r1, #0
 801b35e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b362:	6866      	ldr	r6, [r4, #4]
 801b364:	60a6      	str	r6, [r4, #8]
 801b366:	2e00      	cmp	r6, #0
 801b368:	bfa2      	ittt	ge
 801b36a:	6821      	ldrge	r1, [r4, #0]
 801b36c:	f021 0104 	bicge.w	r1, r1, #4
 801b370:	6021      	strge	r1, [r4, #0]
 801b372:	b90d      	cbnz	r5, 801b378 <_printf_i+0x118>
 801b374:	2e00      	cmp	r6, #0
 801b376:	d04d      	beq.n	801b414 <_printf_i+0x1b4>
 801b378:	4616      	mov	r6, r2
 801b37a:	fbb5 f1f3 	udiv	r1, r5, r3
 801b37e:	fb03 5711 	mls	r7, r3, r1, r5
 801b382:	5dc7      	ldrb	r7, [r0, r7]
 801b384:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b388:	462f      	mov	r7, r5
 801b38a:	42bb      	cmp	r3, r7
 801b38c:	460d      	mov	r5, r1
 801b38e:	d9f4      	bls.n	801b37a <_printf_i+0x11a>
 801b390:	2b08      	cmp	r3, #8
 801b392:	d10b      	bne.n	801b3ac <_printf_i+0x14c>
 801b394:	6823      	ldr	r3, [r4, #0]
 801b396:	07df      	lsls	r7, r3, #31
 801b398:	d508      	bpl.n	801b3ac <_printf_i+0x14c>
 801b39a:	6923      	ldr	r3, [r4, #16]
 801b39c:	6861      	ldr	r1, [r4, #4]
 801b39e:	4299      	cmp	r1, r3
 801b3a0:	bfde      	ittt	le
 801b3a2:	2330      	movle	r3, #48	; 0x30
 801b3a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b3a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 801b3ac:	1b92      	subs	r2, r2, r6
 801b3ae:	6122      	str	r2, [r4, #16]
 801b3b0:	f8cd a000 	str.w	sl, [sp]
 801b3b4:	464b      	mov	r3, r9
 801b3b6:	aa03      	add	r2, sp, #12
 801b3b8:	4621      	mov	r1, r4
 801b3ba:	4640      	mov	r0, r8
 801b3bc:	f7ff fee2 	bl	801b184 <_printf_common>
 801b3c0:	3001      	adds	r0, #1
 801b3c2:	d14c      	bne.n	801b45e <_printf_i+0x1fe>
 801b3c4:	f04f 30ff 	mov.w	r0, #4294967295
 801b3c8:	b004      	add	sp, #16
 801b3ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b3ce:	4835      	ldr	r0, [pc, #212]	; (801b4a4 <_printf_i+0x244>)
 801b3d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b3d4:	6823      	ldr	r3, [r4, #0]
 801b3d6:	680e      	ldr	r6, [r1, #0]
 801b3d8:	061f      	lsls	r7, r3, #24
 801b3da:	f856 5b04 	ldr.w	r5, [r6], #4
 801b3de:	600e      	str	r6, [r1, #0]
 801b3e0:	d514      	bpl.n	801b40c <_printf_i+0x1ac>
 801b3e2:	07d9      	lsls	r1, r3, #31
 801b3e4:	bf44      	itt	mi
 801b3e6:	f043 0320 	orrmi.w	r3, r3, #32
 801b3ea:	6023      	strmi	r3, [r4, #0]
 801b3ec:	b91d      	cbnz	r5, 801b3f6 <_printf_i+0x196>
 801b3ee:	6823      	ldr	r3, [r4, #0]
 801b3f0:	f023 0320 	bic.w	r3, r3, #32
 801b3f4:	6023      	str	r3, [r4, #0]
 801b3f6:	2310      	movs	r3, #16
 801b3f8:	e7b0      	b.n	801b35c <_printf_i+0xfc>
 801b3fa:	6823      	ldr	r3, [r4, #0]
 801b3fc:	f043 0320 	orr.w	r3, r3, #32
 801b400:	6023      	str	r3, [r4, #0]
 801b402:	2378      	movs	r3, #120	; 0x78
 801b404:	4828      	ldr	r0, [pc, #160]	; (801b4a8 <_printf_i+0x248>)
 801b406:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b40a:	e7e3      	b.n	801b3d4 <_printf_i+0x174>
 801b40c:	065e      	lsls	r6, r3, #25
 801b40e:	bf48      	it	mi
 801b410:	b2ad      	uxthmi	r5, r5
 801b412:	e7e6      	b.n	801b3e2 <_printf_i+0x182>
 801b414:	4616      	mov	r6, r2
 801b416:	e7bb      	b.n	801b390 <_printf_i+0x130>
 801b418:	680b      	ldr	r3, [r1, #0]
 801b41a:	6826      	ldr	r6, [r4, #0]
 801b41c:	6960      	ldr	r0, [r4, #20]
 801b41e:	1d1d      	adds	r5, r3, #4
 801b420:	600d      	str	r5, [r1, #0]
 801b422:	0635      	lsls	r5, r6, #24
 801b424:	681b      	ldr	r3, [r3, #0]
 801b426:	d501      	bpl.n	801b42c <_printf_i+0x1cc>
 801b428:	6018      	str	r0, [r3, #0]
 801b42a:	e002      	b.n	801b432 <_printf_i+0x1d2>
 801b42c:	0671      	lsls	r1, r6, #25
 801b42e:	d5fb      	bpl.n	801b428 <_printf_i+0x1c8>
 801b430:	8018      	strh	r0, [r3, #0]
 801b432:	2300      	movs	r3, #0
 801b434:	6123      	str	r3, [r4, #16]
 801b436:	4616      	mov	r6, r2
 801b438:	e7ba      	b.n	801b3b0 <_printf_i+0x150>
 801b43a:	680b      	ldr	r3, [r1, #0]
 801b43c:	1d1a      	adds	r2, r3, #4
 801b43e:	600a      	str	r2, [r1, #0]
 801b440:	681e      	ldr	r6, [r3, #0]
 801b442:	6862      	ldr	r2, [r4, #4]
 801b444:	2100      	movs	r1, #0
 801b446:	4630      	mov	r0, r6
 801b448:	f7e4 ff62 	bl	8000310 <memchr>
 801b44c:	b108      	cbz	r0, 801b452 <_printf_i+0x1f2>
 801b44e:	1b80      	subs	r0, r0, r6
 801b450:	6060      	str	r0, [r4, #4]
 801b452:	6863      	ldr	r3, [r4, #4]
 801b454:	6123      	str	r3, [r4, #16]
 801b456:	2300      	movs	r3, #0
 801b458:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b45c:	e7a8      	b.n	801b3b0 <_printf_i+0x150>
 801b45e:	6923      	ldr	r3, [r4, #16]
 801b460:	4632      	mov	r2, r6
 801b462:	4649      	mov	r1, r9
 801b464:	4640      	mov	r0, r8
 801b466:	47d0      	blx	sl
 801b468:	3001      	adds	r0, #1
 801b46a:	d0ab      	beq.n	801b3c4 <_printf_i+0x164>
 801b46c:	6823      	ldr	r3, [r4, #0]
 801b46e:	079b      	lsls	r3, r3, #30
 801b470:	d413      	bmi.n	801b49a <_printf_i+0x23a>
 801b472:	68e0      	ldr	r0, [r4, #12]
 801b474:	9b03      	ldr	r3, [sp, #12]
 801b476:	4298      	cmp	r0, r3
 801b478:	bfb8      	it	lt
 801b47a:	4618      	movlt	r0, r3
 801b47c:	e7a4      	b.n	801b3c8 <_printf_i+0x168>
 801b47e:	2301      	movs	r3, #1
 801b480:	4632      	mov	r2, r6
 801b482:	4649      	mov	r1, r9
 801b484:	4640      	mov	r0, r8
 801b486:	47d0      	blx	sl
 801b488:	3001      	adds	r0, #1
 801b48a:	d09b      	beq.n	801b3c4 <_printf_i+0x164>
 801b48c:	3501      	adds	r5, #1
 801b48e:	68e3      	ldr	r3, [r4, #12]
 801b490:	9903      	ldr	r1, [sp, #12]
 801b492:	1a5b      	subs	r3, r3, r1
 801b494:	42ab      	cmp	r3, r5
 801b496:	dcf2      	bgt.n	801b47e <_printf_i+0x21e>
 801b498:	e7eb      	b.n	801b472 <_printf_i+0x212>
 801b49a:	2500      	movs	r5, #0
 801b49c:	f104 0619 	add.w	r6, r4, #25
 801b4a0:	e7f5      	b.n	801b48e <_printf_i+0x22e>
 801b4a2:	bf00      	nop
 801b4a4:	0802865b 	.word	0x0802865b
 801b4a8:	0802866c 	.word	0x0802866c

0801b4ac <_scanf_float>:
 801b4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4b0:	b087      	sub	sp, #28
 801b4b2:	4617      	mov	r7, r2
 801b4b4:	9303      	str	r3, [sp, #12]
 801b4b6:	688b      	ldr	r3, [r1, #8]
 801b4b8:	1e5a      	subs	r2, r3, #1
 801b4ba:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801b4be:	bf83      	ittte	hi
 801b4c0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801b4c4:	195b      	addhi	r3, r3, r5
 801b4c6:	9302      	strhi	r3, [sp, #8]
 801b4c8:	2300      	movls	r3, #0
 801b4ca:	bf86      	itte	hi
 801b4cc:	f240 135d 	movwhi	r3, #349	; 0x15d
 801b4d0:	608b      	strhi	r3, [r1, #8]
 801b4d2:	9302      	strls	r3, [sp, #8]
 801b4d4:	680b      	ldr	r3, [r1, #0]
 801b4d6:	468b      	mov	fp, r1
 801b4d8:	2500      	movs	r5, #0
 801b4da:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801b4de:	f84b 3b1c 	str.w	r3, [fp], #28
 801b4e2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801b4e6:	4680      	mov	r8, r0
 801b4e8:	460c      	mov	r4, r1
 801b4ea:	465e      	mov	r6, fp
 801b4ec:	46aa      	mov	sl, r5
 801b4ee:	46a9      	mov	r9, r5
 801b4f0:	9501      	str	r5, [sp, #4]
 801b4f2:	68a2      	ldr	r2, [r4, #8]
 801b4f4:	b152      	cbz	r2, 801b50c <_scanf_float+0x60>
 801b4f6:	683b      	ldr	r3, [r7, #0]
 801b4f8:	781b      	ldrb	r3, [r3, #0]
 801b4fa:	2b4e      	cmp	r3, #78	; 0x4e
 801b4fc:	d864      	bhi.n	801b5c8 <_scanf_float+0x11c>
 801b4fe:	2b40      	cmp	r3, #64	; 0x40
 801b500:	d83c      	bhi.n	801b57c <_scanf_float+0xd0>
 801b502:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801b506:	b2c8      	uxtb	r0, r1
 801b508:	280e      	cmp	r0, #14
 801b50a:	d93a      	bls.n	801b582 <_scanf_float+0xd6>
 801b50c:	f1b9 0f00 	cmp.w	r9, #0
 801b510:	d003      	beq.n	801b51a <_scanf_float+0x6e>
 801b512:	6823      	ldr	r3, [r4, #0]
 801b514:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b518:	6023      	str	r3, [r4, #0]
 801b51a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b51e:	f1ba 0f01 	cmp.w	sl, #1
 801b522:	f200 8113 	bhi.w	801b74c <_scanf_float+0x2a0>
 801b526:	455e      	cmp	r6, fp
 801b528:	f200 8105 	bhi.w	801b736 <_scanf_float+0x28a>
 801b52c:	2501      	movs	r5, #1
 801b52e:	4628      	mov	r0, r5
 801b530:	b007      	add	sp, #28
 801b532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b536:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801b53a:	2a0d      	cmp	r2, #13
 801b53c:	d8e6      	bhi.n	801b50c <_scanf_float+0x60>
 801b53e:	a101      	add	r1, pc, #4	; (adr r1, 801b544 <_scanf_float+0x98>)
 801b540:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801b544:	0801b683 	.word	0x0801b683
 801b548:	0801b50d 	.word	0x0801b50d
 801b54c:	0801b50d 	.word	0x0801b50d
 801b550:	0801b50d 	.word	0x0801b50d
 801b554:	0801b6e3 	.word	0x0801b6e3
 801b558:	0801b6bb 	.word	0x0801b6bb
 801b55c:	0801b50d 	.word	0x0801b50d
 801b560:	0801b50d 	.word	0x0801b50d
 801b564:	0801b691 	.word	0x0801b691
 801b568:	0801b50d 	.word	0x0801b50d
 801b56c:	0801b50d 	.word	0x0801b50d
 801b570:	0801b50d 	.word	0x0801b50d
 801b574:	0801b50d 	.word	0x0801b50d
 801b578:	0801b649 	.word	0x0801b649
 801b57c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801b580:	e7db      	b.n	801b53a <_scanf_float+0x8e>
 801b582:	290e      	cmp	r1, #14
 801b584:	d8c2      	bhi.n	801b50c <_scanf_float+0x60>
 801b586:	a001      	add	r0, pc, #4	; (adr r0, 801b58c <_scanf_float+0xe0>)
 801b588:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801b58c:	0801b63b 	.word	0x0801b63b
 801b590:	0801b50d 	.word	0x0801b50d
 801b594:	0801b63b 	.word	0x0801b63b
 801b598:	0801b6cf 	.word	0x0801b6cf
 801b59c:	0801b50d 	.word	0x0801b50d
 801b5a0:	0801b5e9 	.word	0x0801b5e9
 801b5a4:	0801b625 	.word	0x0801b625
 801b5a8:	0801b625 	.word	0x0801b625
 801b5ac:	0801b625 	.word	0x0801b625
 801b5b0:	0801b625 	.word	0x0801b625
 801b5b4:	0801b625 	.word	0x0801b625
 801b5b8:	0801b625 	.word	0x0801b625
 801b5bc:	0801b625 	.word	0x0801b625
 801b5c0:	0801b625 	.word	0x0801b625
 801b5c4:	0801b625 	.word	0x0801b625
 801b5c8:	2b6e      	cmp	r3, #110	; 0x6e
 801b5ca:	d809      	bhi.n	801b5e0 <_scanf_float+0x134>
 801b5cc:	2b60      	cmp	r3, #96	; 0x60
 801b5ce:	d8b2      	bhi.n	801b536 <_scanf_float+0x8a>
 801b5d0:	2b54      	cmp	r3, #84	; 0x54
 801b5d2:	d077      	beq.n	801b6c4 <_scanf_float+0x218>
 801b5d4:	2b59      	cmp	r3, #89	; 0x59
 801b5d6:	d199      	bne.n	801b50c <_scanf_float+0x60>
 801b5d8:	2d07      	cmp	r5, #7
 801b5da:	d197      	bne.n	801b50c <_scanf_float+0x60>
 801b5dc:	2508      	movs	r5, #8
 801b5de:	e029      	b.n	801b634 <_scanf_float+0x188>
 801b5e0:	2b74      	cmp	r3, #116	; 0x74
 801b5e2:	d06f      	beq.n	801b6c4 <_scanf_float+0x218>
 801b5e4:	2b79      	cmp	r3, #121	; 0x79
 801b5e6:	e7f6      	b.n	801b5d6 <_scanf_float+0x12a>
 801b5e8:	6821      	ldr	r1, [r4, #0]
 801b5ea:	05c8      	lsls	r0, r1, #23
 801b5ec:	d51a      	bpl.n	801b624 <_scanf_float+0x178>
 801b5ee:	9b02      	ldr	r3, [sp, #8]
 801b5f0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801b5f4:	6021      	str	r1, [r4, #0]
 801b5f6:	f109 0901 	add.w	r9, r9, #1
 801b5fa:	b11b      	cbz	r3, 801b604 <_scanf_float+0x158>
 801b5fc:	3b01      	subs	r3, #1
 801b5fe:	3201      	adds	r2, #1
 801b600:	9302      	str	r3, [sp, #8]
 801b602:	60a2      	str	r2, [r4, #8]
 801b604:	68a3      	ldr	r3, [r4, #8]
 801b606:	3b01      	subs	r3, #1
 801b608:	60a3      	str	r3, [r4, #8]
 801b60a:	6923      	ldr	r3, [r4, #16]
 801b60c:	3301      	adds	r3, #1
 801b60e:	6123      	str	r3, [r4, #16]
 801b610:	687b      	ldr	r3, [r7, #4]
 801b612:	3b01      	subs	r3, #1
 801b614:	2b00      	cmp	r3, #0
 801b616:	607b      	str	r3, [r7, #4]
 801b618:	f340 8084 	ble.w	801b724 <_scanf_float+0x278>
 801b61c:	683b      	ldr	r3, [r7, #0]
 801b61e:	3301      	adds	r3, #1
 801b620:	603b      	str	r3, [r7, #0]
 801b622:	e766      	b.n	801b4f2 <_scanf_float+0x46>
 801b624:	eb1a 0f05 	cmn.w	sl, r5
 801b628:	f47f af70 	bne.w	801b50c <_scanf_float+0x60>
 801b62c:	6822      	ldr	r2, [r4, #0]
 801b62e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801b632:	6022      	str	r2, [r4, #0]
 801b634:	f806 3b01 	strb.w	r3, [r6], #1
 801b638:	e7e4      	b.n	801b604 <_scanf_float+0x158>
 801b63a:	6822      	ldr	r2, [r4, #0]
 801b63c:	0610      	lsls	r0, r2, #24
 801b63e:	f57f af65 	bpl.w	801b50c <_scanf_float+0x60>
 801b642:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801b646:	e7f4      	b.n	801b632 <_scanf_float+0x186>
 801b648:	f1ba 0f00 	cmp.w	sl, #0
 801b64c:	d10e      	bne.n	801b66c <_scanf_float+0x1c0>
 801b64e:	f1b9 0f00 	cmp.w	r9, #0
 801b652:	d10e      	bne.n	801b672 <_scanf_float+0x1c6>
 801b654:	6822      	ldr	r2, [r4, #0]
 801b656:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801b65a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801b65e:	d108      	bne.n	801b672 <_scanf_float+0x1c6>
 801b660:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b664:	6022      	str	r2, [r4, #0]
 801b666:	f04f 0a01 	mov.w	sl, #1
 801b66a:	e7e3      	b.n	801b634 <_scanf_float+0x188>
 801b66c:	f1ba 0f02 	cmp.w	sl, #2
 801b670:	d055      	beq.n	801b71e <_scanf_float+0x272>
 801b672:	2d01      	cmp	r5, #1
 801b674:	d002      	beq.n	801b67c <_scanf_float+0x1d0>
 801b676:	2d04      	cmp	r5, #4
 801b678:	f47f af48 	bne.w	801b50c <_scanf_float+0x60>
 801b67c:	3501      	adds	r5, #1
 801b67e:	b2ed      	uxtb	r5, r5
 801b680:	e7d8      	b.n	801b634 <_scanf_float+0x188>
 801b682:	f1ba 0f01 	cmp.w	sl, #1
 801b686:	f47f af41 	bne.w	801b50c <_scanf_float+0x60>
 801b68a:	f04f 0a02 	mov.w	sl, #2
 801b68e:	e7d1      	b.n	801b634 <_scanf_float+0x188>
 801b690:	b97d      	cbnz	r5, 801b6b2 <_scanf_float+0x206>
 801b692:	f1b9 0f00 	cmp.w	r9, #0
 801b696:	f47f af3c 	bne.w	801b512 <_scanf_float+0x66>
 801b69a:	6822      	ldr	r2, [r4, #0]
 801b69c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801b6a0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801b6a4:	f47f af39 	bne.w	801b51a <_scanf_float+0x6e>
 801b6a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b6ac:	6022      	str	r2, [r4, #0]
 801b6ae:	2501      	movs	r5, #1
 801b6b0:	e7c0      	b.n	801b634 <_scanf_float+0x188>
 801b6b2:	2d03      	cmp	r5, #3
 801b6b4:	d0e2      	beq.n	801b67c <_scanf_float+0x1d0>
 801b6b6:	2d05      	cmp	r5, #5
 801b6b8:	e7de      	b.n	801b678 <_scanf_float+0x1cc>
 801b6ba:	2d02      	cmp	r5, #2
 801b6bc:	f47f af26 	bne.w	801b50c <_scanf_float+0x60>
 801b6c0:	2503      	movs	r5, #3
 801b6c2:	e7b7      	b.n	801b634 <_scanf_float+0x188>
 801b6c4:	2d06      	cmp	r5, #6
 801b6c6:	f47f af21 	bne.w	801b50c <_scanf_float+0x60>
 801b6ca:	2507      	movs	r5, #7
 801b6cc:	e7b2      	b.n	801b634 <_scanf_float+0x188>
 801b6ce:	6822      	ldr	r2, [r4, #0]
 801b6d0:	0591      	lsls	r1, r2, #22
 801b6d2:	f57f af1b 	bpl.w	801b50c <_scanf_float+0x60>
 801b6d6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801b6da:	6022      	str	r2, [r4, #0]
 801b6dc:	f8cd 9004 	str.w	r9, [sp, #4]
 801b6e0:	e7a8      	b.n	801b634 <_scanf_float+0x188>
 801b6e2:	6822      	ldr	r2, [r4, #0]
 801b6e4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801b6e8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801b6ec:	d006      	beq.n	801b6fc <_scanf_float+0x250>
 801b6ee:	0550      	lsls	r0, r2, #21
 801b6f0:	f57f af0c 	bpl.w	801b50c <_scanf_float+0x60>
 801b6f4:	f1b9 0f00 	cmp.w	r9, #0
 801b6f8:	f43f af0f 	beq.w	801b51a <_scanf_float+0x6e>
 801b6fc:	0591      	lsls	r1, r2, #22
 801b6fe:	bf58      	it	pl
 801b700:	9901      	ldrpl	r1, [sp, #4]
 801b702:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b706:	bf58      	it	pl
 801b708:	eba9 0101 	subpl.w	r1, r9, r1
 801b70c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801b710:	bf58      	it	pl
 801b712:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801b716:	6022      	str	r2, [r4, #0]
 801b718:	f04f 0900 	mov.w	r9, #0
 801b71c:	e78a      	b.n	801b634 <_scanf_float+0x188>
 801b71e:	f04f 0a03 	mov.w	sl, #3
 801b722:	e787      	b.n	801b634 <_scanf_float+0x188>
 801b724:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801b728:	4639      	mov	r1, r7
 801b72a:	4640      	mov	r0, r8
 801b72c:	4798      	blx	r3
 801b72e:	2800      	cmp	r0, #0
 801b730:	f43f aedf 	beq.w	801b4f2 <_scanf_float+0x46>
 801b734:	e6ea      	b.n	801b50c <_scanf_float+0x60>
 801b736:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b73a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b73e:	463a      	mov	r2, r7
 801b740:	4640      	mov	r0, r8
 801b742:	4798      	blx	r3
 801b744:	6923      	ldr	r3, [r4, #16]
 801b746:	3b01      	subs	r3, #1
 801b748:	6123      	str	r3, [r4, #16]
 801b74a:	e6ec      	b.n	801b526 <_scanf_float+0x7a>
 801b74c:	1e6b      	subs	r3, r5, #1
 801b74e:	2b06      	cmp	r3, #6
 801b750:	d825      	bhi.n	801b79e <_scanf_float+0x2f2>
 801b752:	2d02      	cmp	r5, #2
 801b754:	d836      	bhi.n	801b7c4 <_scanf_float+0x318>
 801b756:	455e      	cmp	r6, fp
 801b758:	f67f aee8 	bls.w	801b52c <_scanf_float+0x80>
 801b75c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b760:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b764:	463a      	mov	r2, r7
 801b766:	4640      	mov	r0, r8
 801b768:	4798      	blx	r3
 801b76a:	6923      	ldr	r3, [r4, #16]
 801b76c:	3b01      	subs	r3, #1
 801b76e:	6123      	str	r3, [r4, #16]
 801b770:	e7f1      	b.n	801b756 <_scanf_float+0x2aa>
 801b772:	9802      	ldr	r0, [sp, #8]
 801b774:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b778:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801b77c:	9002      	str	r0, [sp, #8]
 801b77e:	463a      	mov	r2, r7
 801b780:	4640      	mov	r0, r8
 801b782:	4798      	blx	r3
 801b784:	6923      	ldr	r3, [r4, #16]
 801b786:	3b01      	subs	r3, #1
 801b788:	6123      	str	r3, [r4, #16]
 801b78a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b78e:	fa5f fa8a 	uxtb.w	sl, sl
 801b792:	f1ba 0f02 	cmp.w	sl, #2
 801b796:	d1ec      	bne.n	801b772 <_scanf_float+0x2c6>
 801b798:	3d03      	subs	r5, #3
 801b79a:	b2ed      	uxtb	r5, r5
 801b79c:	1b76      	subs	r6, r6, r5
 801b79e:	6823      	ldr	r3, [r4, #0]
 801b7a0:	05da      	lsls	r2, r3, #23
 801b7a2:	d52f      	bpl.n	801b804 <_scanf_float+0x358>
 801b7a4:	055b      	lsls	r3, r3, #21
 801b7a6:	d510      	bpl.n	801b7ca <_scanf_float+0x31e>
 801b7a8:	455e      	cmp	r6, fp
 801b7aa:	f67f aebf 	bls.w	801b52c <_scanf_float+0x80>
 801b7ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b7b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b7b6:	463a      	mov	r2, r7
 801b7b8:	4640      	mov	r0, r8
 801b7ba:	4798      	blx	r3
 801b7bc:	6923      	ldr	r3, [r4, #16]
 801b7be:	3b01      	subs	r3, #1
 801b7c0:	6123      	str	r3, [r4, #16]
 801b7c2:	e7f1      	b.n	801b7a8 <_scanf_float+0x2fc>
 801b7c4:	46aa      	mov	sl, r5
 801b7c6:	9602      	str	r6, [sp, #8]
 801b7c8:	e7df      	b.n	801b78a <_scanf_float+0x2de>
 801b7ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801b7ce:	6923      	ldr	r3, [r4, #16]
 801b7d0:	2965      	cmp	r1, #101	; 0x65
 801b7d2:	f103 33ff 	add.w	r3, r3, #4294967295
 801b7d6:	f106 35ff 	add.w	r5, r6, #4294967295
 801b7da:	6123      	str	r3, [r4, #16]
 801b7dc:	d00c      	beq.n	801b7f8 <_scanf_float+0x34c>
 801b7de:	2945      	cmp	r1, #69	; 0x45
 801b7e0:	d00a      	beq.n	801b7f8 <_scanf_float+0x34c>
 801b7e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b7e6:	463a      	mov	r2, r7
 801b7e8:	4640      	mov	r0, r8
 801b7ea:	4798      	blx	r3
 801b7ec:	6923      	ldr	r3, [r4, #16]
 801b7ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801b7f2:	3b01      	subs	r3, #1
 801b7f4:	1eb5      	subs	r5, r6, #2
 801b7f6:	6123      	str	r3, [r4, #16]
 801b7f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b7fc:	463a      	mov	r2, r7
 801b7fe:	4640      	mov	r0, r8
 801b800:	4798      	blx	r3
 801b802:	462e      	mov	r6, r5
 801b804:	6825      	ldr	r5, [r4, #0]
 801b806:	f015 0510 	ands.w	r5, r5, #16
 801b80a:	d14d      	bne.n	801b8a8 <_scanf_float+0x3fc>
 801b80c:	7035      	strb	r5, [r6, #0]
 801b80e:	6823      	ldr	r3, [r4, #0]
 801b810:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801b814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b818:	d11a      	bne.n	801b850 <_scanf_float+0x3a4>
 801b81a:	9b01      	ldr	r3, [sp, #4]
 801b81c:	454b      	cmp	r3, r9
 801b81e:	eba3 0209 	sub.w	r2, r3, r9
 801b822:	d122      	bne.n	801b86a <_scanf_float+0x3be>
 801b824:	2200      	movs	r2, #0
 801b826:	4659      	mov	r1, fp
 801b828:	4640      	mov	r0, r8
 801b82a:	f000 ff53 	bl	801c6d4 <_strtod_r>
 801b82e:	9b03      	ldr	r3, [sp, #12]
 801b830:	6821      	ldr	r1, [r4, #0]
 801b832:	681b      	ldr	r3, [r3, #0]
 801b834:	f011 0f02 	tst.w	r1, #2
 801b838:	f103 0204 	add.w	r2, r3, #4
 801b83c:	d020      	beq.n	801b880 <_scanf_float+0x3d4>
 801b83e:	9903      	ldr	r1, [sp, #12]
 801b840:	600a      	str	r2, [r1, #0]
 801b842:	681b      	ldr	r3, [r3, #0]
 801b844:	ed83 0b00 	vstr	d0, [r3]
 801b848:	68e3      	ldr	r3, [r4, #12]
 801b84a:	3301      	adds	r3, #1
 801b84c:	60e3      	str	r3, [r4, #12]
 801b84e:	e66e      	b.n	801b52e <_scanf_float+0x82>
 801b850:	9b04      	ldr	r3, [sp, #16]
 801b852:	2b00      	cmp	r3, #0
 801b854:	d0e6      	beq.n	801b824 <_scanf_float+0x378>
 801b856:	9905      	ldr	r1, [sp, #20]
 801b858:	230a      	movs	r3, #10
 801b85a:	462a      	mov	r2, r5
 801b85c:	3101      	adds	r1, #1
 801b85e:	4640      	mov	r0, r8
 801b860:	f000 ffc2 	bl	801c7e8 <_strtol_r>
 801b864:	9b04      	ldr	r3, [sp, #16]
 801b866:	9e05      	ldr	r6, [sp, #20]
 801b868:	1ac2      	subs	r2, r0, r3
 801b86a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801b86e:	429e      	cmp	r6, r3
 801b870:	bf28      	it	cs
 801b872:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801b876:	490d      	ldr	r1, [pc, #52]	; (801b8ac <_scanf_float+0x400>)
 801b878:	4630      	mov	r0, r6
 801b87a:	f000 f8f3 	bl	801ba64 <siprintf>
 801b87e:	e7d1      	b.n	801b824 <_scanf_float+0x378>
 801b880:	f011 0f04 	tst.w	r1, #4
 801b884:	9903      	ldr	r1, [sp, #12]
 801b886:	600a      	str	r2, [r1, #0]
 801b888:	d1db      	bne.n	801b842 <_scanf_float+0x396>
 801b88a:	eeb4 0b40 	vcmp.f64	d0, d0
 801b88e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b892:	681e      	ldr	r6, [r3, #0]
 801b894:	d705      	bvc.n	801b8a2 <_scanf_float+0x3f6>
 801b896:	4806      	ldr	r0, [pc, #24]	; (801b8b0 <_scanf_float+0x404>)
 801b898:	f000 f8aa 	bl	801b9f0 <nanf>
 801b89c:	ed86 0a00 	vstr	s0, [r6]
 801b8a0:	e7d2      	b.n	801b848 <_scanf_float+0x39c>
 801b8a2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801b8a6:	e7f9      	b.n	801b89c <_scanf_float+0x3f0>
 801b8a8:	2500      	movs	r5, #0
 801b8aa:	e640      	b.n	801b52e <_scanf_float+0x82>
 801b8ac:	0802867d 	.word	0x0802867d
 801b8b0:	08028632 	.word	0x08028632

0801b8b4 <iprintf>:
 801b8b4:	b40f      	push	{r0, r1, r2, r3}
 801b8b6:	4b0a      	ldr	r3, [pc, #40]	; (801b8e0 <iprintf+0x2c>)
 801b8b8:	b513      	push	{r0, r1, r4, lr}
 801b8ba:	681c      	ldr	r4, [r3, #0]
 801b8bc:	b124      	cbz	r4, 801b8c8 <iprintf+0x14>
 801b8be:	69a3      	ldr	r3, [r4, #24]
 801b8c0:	b913      	cbnz	r3, 801b8c8 <iprintf+0x14>
 801b8c2:	4620      	mov	r0, r4
 801b8c4:	f001 ff8c 	bl	801d7e0 <__sinit>
 801b8c8:	ab05      	add	r3, sp, #20
 801b8ca:	9a04      	ldr	r2, [sp, #16]
 801b8cc:	68a1      	ldr	r1, [r4, #8]
 801b8ce:	9301      	str	r3, [sp, #4]
 801b8d0:	4620      	mov	r0, r4
 801b8d2:	f7ff f879 	bl	801a9c8 <_vfiprintf_r>
 801b8d6:	b002      	add	sp, #8
 801b8d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b8dc:	b004      	add	sp, #16
 801b8de:	4770      	bx	lr
 801b8e0:	2400a128 	.word	0x2400a128

0801b8e4 <_puts_r>:
 801b8e4:	b570      	push	{r4, r5, r6, lr}
 801b8e6:	460e      	mov	r6, r1
 801b8e8:	4605      	mov	r5, r0
 801b8ea:	b118      	cbz	r0, 801b8f4 <_puts_r+0x10>
 801b8ec:	6983      	ldr	r3, [r0, #24]
 801b8ee:	b90b      	cbnz	r3, 801b8f4 <_puts_r+0x10>
 801b8f0:	f001 ff76 	bl	801d7e0 <__sinit>
 801b8f4:	69ab      	ldr	r3, [r5, #24]
 801b8f6:	68ac      	ldr	r4, [r5, #8]
 801b8f8:	b913      	cbnz	r3, 801b900 <_puts_r+0x1c>
 801b8fa:	4628      	mov	r0, r5
 801b8fc:	f001 ff70 	bl	801d7e0 <__sinit>
 801b900:	4b2c      	ldr	r3, [pc, #176]	; (801b9b4 <_puts_r+0xd0>)
 801b902:	429c      	cmp	r4, r3
 801b904:	d120      	bne.n	801b948 <_puts_r+0x64>
 801b906:	686c      	ldr	r4, [r5, #4]
 801b908:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b90a:	07db      	lsls	r3, r3, #31
 801b90c:	d405      	bmi.n	801b91a <_puts_r+0x36>
 801b90e:	89a3      	ldrh	r3, [r4, #12]
 801b910:	0598      	lsls	r0, r3, #22
 801b912:	d402      	bmi.n	801b91a <_puts_r+0x36>
 801b914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b916:	f002 fb74 	bl	801e002 <__retarget_lock_acquire_recursive>
 801b91a:	89a3      	ldrh	r3, [r4, #12]
 801b91c:	0719      	lsls	r1, r3, #28
 801b91e:	d51d      	bpl.n	801b95c <_puts_r+0x78>
 801b920:	6923      	ldr	r3, [r4, #16]
 801b922:	b1db      	cbz	r3, 801b95c <_puts_r+0x78>
 801b924:	3e01      	subs	r6, #1
 801b926:	68a3      	ldr	r3, [r4, #8]
 801b928:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b92c:	3b01      	subs	r3, #1
 801b92e:	60a3      	str	r3, [r4, #8]
 801b930:	bb39      	cbnz	r1, 801b982 <_puts_r+0x9e>
 801b932:	2b00      	cmp	r3, #0
 801b934:	da38      	bge.n	801b9a8 <_puts_r+0xc4>
 801b936:	4622      	mov	r2, r4
 801b938:	210a      	movs	r1, #10
 801b93a:	4628      	mov	r0, r5
 801b93c:	f000 ff60 	bl	801c800 <__swbuf_r>
 801b940:	3001      	adds	r0, #1
 801b942:	d011      	beq.n	801b968 <_puts_r+0x84>
 801b944:	250a      	movs	r5, #10
 801b946:	e011      	b.n	801b96c <_puts_r+0x88>
 801b948:	4b1b      	ldr	r3, [pc, #108]	; (801b9b8 <_puts_r+0xd4>)
 801b94a:	429c      	cmp	r4, r3
 801b94c:	d101      	bne.n	801b952 <_puts_r+0x6e>
 801b94e:	68ac      	ldr	r4, [r5, #8]
 801b950:	e7da      	b.n	801b908 <_puts_r+0x24>
 801b952:	4b1a      	ldr	r3, [pc, #104]	; (801b9bc <_puts_r+0xd8>)
 801b954:	429c      	cmp	r4, r3
 801b956:	bf08      	it	eq
 801b958:	68ec      	ldreq	r4, [r5, #12]
 801b95a:	e7d5      	b.n	801b908 <_puts_r+0x24>
 801b95c:	4621      	mov	r1, r4
 801b95e:	4628      	mov	r0, r5
 801b960:	f000 ffa0 	bl	801c8a4 <__swsetup_r>
 801b964:	2800      	cmp	r0, #0
 801b966:	d0dd      	beq.n	801b924 <_puts_r+0x40>
 801b968:	f04f 35ff 	mov.w	r5, #4294967295
 801b96c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b96e:	07da      	lsls	r2, r3, #31
 801b970:	d405      	bmi.n	801b97e <_puts_r+0x9a>
 801b972:	89a3      	ldrh	r3, [r4, #12]
 801b974:	059b      	lsls	r3, r3, #22
 801b976:	d402      	bmi.n	801b97e <_puts_r+0x9a>
 801b978:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b97a:	f002 fb43 	bl	801e004 <__retarget_lock_release_recursive>
 801b97e:	4628      	mov	r0, r5
 801b980:	bd70      	pop	{r4, r5, r6, pc}
 801b982:	2b00      	cmp	r3, #0
 801b984:	da04      	bge.n	801b990 <_puts_r+0xac>
 801b986:	69a2      	ldr	r2, [r4, #24]
 801b988:	429a      	cmp	r2, r3
 801b98a:	dc06      	bgt.n	801b99a <_puts_r+0xb6>
 801b98c:	290a      	cmp	r1, #10
 801b98e:	d004      	beq.n	801b99a <_puts_r+0xb6>
 801b990:	6823      	ldr	r3, [r4, #0]
 801b992:	1c5a      	adds	r2, r3, #1
 801b994:	6022      	str	r2, [r4, #0]
 801b996:	7019      	strb	r1, [r3, #0]
 801b998:	e7c5      	b.n	801b926 <_puts_r+0x42>
 801b99a:	4622      	mov	r2, r4
 801b99c:	4628      	mov	r0, r5
 801b99e:	f000 ff2f 	bl	801c800 <__swbuf_r>
 801b9a2:	3001      	adds	r0, #1
 801b9a4:	d1bf      	bne.n	801b926 <_puts_r+0x42>
 801b9a6:	e7df      	b.n	801b968 <_puts_r+0x84>
 801b9a8:	6823      	ldr	r3, [r4, #0]
 801b9aa:	250a      	movs	r5, #10
 801b9ac:	1c5a      	adds	r2, r3, #1
 801b9ae:	6022      	str	r2, [r4, #0]
 801b9b0:	701d      	strb	r5, [r3, #0]
 801b9b2:	e7db      	b.n	801b96c <_puts_r+0x88>
 801b9b4:	08028890 	.word	0x08028890
 801b9b8:	080288b0 	.word	0x080288b0
 801b9bc:	08028870 	.word	0x08028870

0801b9c0 <puts>:
 801b9c0:	4b02      	ldr	r3, [pc, #8]	; (801b9cc <puts+0xc>)
 801b9c2:	4601      	mov	r1, r0
 801b9c4:	6818      	ldr	r0, [r3, #0]
 801b9c6:	f7ff bf8d 	b.w	801b8e4 <_puts_r>
 801b9ca:	bf00      	nop
 801b9cc:	2400a128 	.word	0x2400a128

0801b9d0 <_sbrk_r>:
 801b9d0:	b538      	push	{r3, r4, r5, lr}
 801b9d2:	4d06      	ldr	r5, [pc, #24]	; (801b9ec <_sbrk_r+0x1c>)
 801b9d4:	2300      	movs	r3, #0
 801b9d6:	4604      	mov	r4, r0
 801b9d8:	4608      	mov	r0, r1
 801b9da:	602b      	str	r3, [r5, #0]
 801b9dc:	f7e6 fa92 	bl	8001f04 <_sbrk>
 801b9e0:	1c43      	adds	r3, r0, #1
 801b9e2:	d102      	bne.n	801b9ea <_sbrk_r+0x1a>
 801b9e4:	682b      	ldr	r3, [r5, #0]
 801b9e6:	b103      	cbz	r3, 801b9ea <_sbrk_r+0x1a>
 801b9e8:	6023      	str	r3, [r4, #0]
 801b9ea:	bd38      	pop	{r3, r4, r5, pc}
 801b9ec:	24018434 	.word	0x24018434

0801b9f0 <nanf>:
 801b9f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801b9f8 <nanf+0x8>
 801b9f4:	4770      	bx	lr
 801b9f6:	bf00      	nop
 801b9f8:	7fc00000 	.word	0x7fc00000

0801b9fc <sniprintf>:
 801b9fc:	b40c      	push	{r2, r3}
 801b9fe:	b530      	push	{r4, r5, lr}
 801ba00:	4b17      	ldr	r3, [pc, #92]	; (801ba60 <sniprintf+0x64>)
 801ba02:	1e0c      	subs	r4, r1, #0
 801ba04:	681d      	ldr	r5, [r3, #0]
 801ba06:	b09d      	sub	sp, #116	; 0x74
 801ba08:	da08      	bge.n	801ba1c <sniprintf+0x20>
 801ba0a:	238b      	movs	r3, #139	; 0x8b
 801ba0c:	602b      	str	r3, [r5, #0]
 801ba0e:	f04f 30ff 	mov.w	r0, #4294967295
 801ba12:	b01d      	add	sp, #116	; 0x74
 801ba14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ba18:	b002      	add	sp, #8
 801ba1a:	4770      	bx	lr
 801ba1c:	f44f 7302 	mov.w	r3, #520	; 0x208
 801ba20:	f8ad 3014 	strh.w	r3, [sp, #20]
 801ba24:	bf14      	ite	ne
 801ba26:	f104 33ff 	addne.w	r3, r4, #4294967295
 801ba2a:	4623      	moveq	r3, r4
 801ba2c:	9304      	str	r3, [sp, #16]
 801ba2e:	9307      	str	r3, [sp, #28]
 801ba30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ba34:	9002      	str	r0, [sp, #8]
 801ba36:	9006      	str	r0, [sp, #24]
 801ba38:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ba3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801ba3e:	ab21      	add	r3, sp, #132	; 0x84
 801ba40:	a902      	add	r1, sp, #8
 801ba42:	4628      	mov	r0, r5
 801ba44:	9301      	str	r3, [sp, #4]
 801ba46:	f003 f8ad 	bl	801eba4 <_svfiprintf_r>
 801ba4a:	1c43      	adds	r3, r0, #1
 801ba4c:	bfbc      	itt	lt
 801ba4e:	238b      	movlt	r3, #139	; 0x8b
 801ba50:	602b      	strlt	r3, [r5, #0]
 801ba52:	2c00      	cmp	r4, #0
 801ba54:	d0dd      	beq.n	801ba12 <sniprintf+0x16>
 801ba56:	9b02      	ldr	r3, [sp, #8]
 801ba58:	2200      	movs	r2, #0
 801ba5a:	701a      	strb	r2, [r3, #0]
 801ba5c:	e7d9      	b.n	801ba12 <sniprintf+0x16>
 801ba5e:	bf00      	nop
 801ba60:	2400a128 	.word	0x2400a128

0801ba64 <siprintf>:
 801ba64:	b40e      	push	{r1, r2, r3}
 801ba66:	b500      	push	{lr}
 801ba68:	b09c      	sub	sp, #112	; 0x70
 801ba6a:	ab1d      	add	r3, sp, #116	; 0x74
 801ba6c:	9002      	str	r0, [sp, #8]
 801ba6e:	9006      	str	r0, [sp, #24]
 801ba70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ba74:	4809      	ldr	r0, [pc, #36]	; (801ba9c <siprintf+0x38>)
 801ba76:	9107      	str	r1, [sp, #28]
 801ba78:	9104      	str	r1, [sp, #16]
 801ba7a:	4909      	ldr	r1, [pc, #36]	; (801baa0 <siprintf+0x3c>)
 801ba7c:	f853 2b04 	ldr.w	r2, [r3], #4
 801ba80:	9105      	str	r1, [sp, #20]
 801ba82:	6800      	ldr	r0, [r0, #0]
 801ba84:	9301      	str	r3, [sp, #4]
 801ba86:	a902      	add	r1, sp, #8
 801ba88:	f003 f88c 	bl	801eba4 <_svfiprintf_r>
 801ba8c:	9b02      	ldr	r3, [sp, #8]
 801ba8e:	2200      	movs	r2, #0
 801ba90:	701a      	strb	r2, [r3, #0]
 801ba92:	b01c      	add	sp, #112	; 0x70
 801ba94:	f85d eb04 	ldr.w	lr, [sp], #4
 801ba98:	b003      	add	sp, #12
 801ba9a:	4770      	bx	lr
 801ba9c:	2400a128 	.word	0x2400a128
 801baa0:	ffff0208 	.word	0xffff0208

0801baa4 <strncmp>:
 801baa4:	b510      	push	{r4, lr}
 801baa6:	b16a      	cbz	r2, 801bac4 <strncmp+0x20>
 801baa8:	3901      	subs	r1, #1
 801baaa:	1884      	adds	r4, r0, r2
 801baac:	f810 3b01 	ldrb.w	r3, [r0], #1
 801bab0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801bab4:	4293      	cmp	r3, r2
 801bab6:	d103      	bne.n	801bac0 <strncmp+0x1c>
 801bab8:	42a0      	cmp	r0, r4
 801baba:	d001      	beq.n	801bac0 <strncmp+0x1c>
 801babc:	2b00      	cmp	r3, #0
 801babe:	d1f5      	bne.n	801baac <strncmp+0x8>
 801bac0:	1a98      	subs	r0, r3, r2
 801bac2:	bd10      	pop	{r4, pc}
 801bac4:	4610      	mov	r0, r2
 801bac6:	e7fc      	b.n	801bac2 <strncmp+0x1e>

0801bac8 <strncpy>:
 801bac8:	b510      	push	{r4, lr}
 801baca:	3901      	subs	r1, #1
 801bacc:	4603      	mov	r3, r0
 801bace:	b132      	cbz	r2, 801bade <strncpy+0x16>
 801bad0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801bad4:	f803 4b01 	strb.w	r4, [r3], #1
 801bad8:	3a01      	subs	r2, #1
 801bada:	2c00      	cmp	r4, #0
 801badc:	d1f7      	bne.n	801bace <strncpy+0x6>
 801bade:	441a      	add	r2, r3
 801bae0:	2100      	movs	r1, #0
 801bae2:	4293      	cmp	r3, r2
 801bae4:	d100      	bne.n	801bae8 <strncpy+0x20>
 801bae6:	bd10      	pop	{r4, pc}
 801bae8:	f803 1b01 	strb.w	r1, [r3], #1
 801baec:	e7f9      	b.n	801bae2 <strncpy+0x1a>

0801baee <sulp>:
 801baee:	b570      	push	{r4, r5, r6, lr}
 801baf0:	4604      	mov	r4, r0
 801baf2:	460d      	mov	r5, r1
 801baf4:	4616      	mov	r6, r2
 801baf6:	ec45 4b10 	vmov	d0, r4, r5
 801bafa:	f002 fe73 	bl	801e7e4 <__ulp>
 801bafe:	b17e      	cbz	r6, 801bb20 <sulp+0x32>
 801bb00:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801bb04:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801bb08:	2b00      	cmp	r3, #0
 801bb0a:	dd09      	ble.n	801bb20 <sulp+0x32>
 801bb0c:	051b      	lsls	r3, r3, #20
 801bb0e:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801bb12:	2000      	movs	r0, #0
 801bb14:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 801bb18:	ec41 0b17 	vmov	d7, r0, r1
 801bb1c:	ee20 0b07 	vmul.f64	d0, d0, d7
 801bb20:	bd70      	pop	{r4, r5, r6, pc}
 801bb22:	0000      	movs	r0, r0
 801bb24:	0000      	movs	r0, r0
	...

0801bb28 <_strtod_l>:
 801bb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb2c:	ed2d 8b0c 	vpush	{d8-d13}
 801bb30:	b09d      	sub	sp, #116	; 0x74
 801bb32:	461f      	mov	r7, r3
 801bb34:	2300      	movs	r3, #0
 801bb36:	9318      	str	r3, [sp, #96]	; 0x60
 801bb38:	4ba6      	ldr	r3, [pc, #664]	; (801bdd4 <_strtod_l+0x2ac>)
 801bb3a:	9213      	str	r2, [sp, #76]	; 0x4c
 801bb3c:	681b      	ldr	r3, [r3, #0]
 801bb3e:	9308      	str	r3, [sp, #32]
 801bb40:	4604      	mov	r4, r0
 801bb42:	4618      	mov	r0, r3
 801bb44:	468a      	mov	sl, r1
 801bb46:	f7e4 fbd5 	bl	80002f4 <strlen>
 801bb4a:	f04f 0800 	mov.w	r8, #0
 801bb4e:	4605      	mov	r5, r0
 801bb50:	f04f 0900 	mov.w	r9, #0
 801bb54:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 801bb58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801bb5a:	781a      	ldrb	r2, [r3, #0]
 801bb5c:	2a2b      	cmp	r2, #43	; 0x2b
 801bb5e:	d04d      	beq.n	801bbfc <_strtod_l+0xd4>
 801bb60:	d83a      	bhi.n	801bbd8 <_strtod_l+0xb0>
 801bb62:	2a0d      	cmp	r2, #13
 801bb64:	d833      	bhi.n	801bbce <_strtod_l+0xa6>
 801bb66:	2a08      	cmp	r2, #8
 801bb68:	d833      	bhi.n	801bbd2 <_strtod_l+0xaa>
 801bb6a:	2a00      	cmp	r2, #0
 801bb6c:	d03d      	beq.n	801bbea <_strtod_l+0xc2>
 801bb6e:	2300      	movs	r3, #0
 801bb70:	930b      	str	r3, [sp, #44]	; 0x2c
 801bb72:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801bb74:	7833      	ldrb	r3, [r6, #0]
 801bb76:	2b30      	cmp	r3, #48	; 0x30
 801bb78:	f040 80b6 	bne.w	801bce8 <_strtod_l+0x1c0>
 801bb7c:	7873      	ldrb	r3, [r6, #1]
 801bb7e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801bb82:	2b58      	cmp	r3, #88	; 0x58
 801bb84:	d16d      	bne.n	801bc62 <_strtod_l+0x13a>
 801bb86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bb88:	9301      	str	r3, [sp, #4]
 801bb8a:	ab18      	add	r3, sp, #96	; 0x60
 801bb8c:	9702      	str	r7, [sp, #8]
 801bb8e:	9300      	str	r3, [sp, #0]
 801bb90:	4a91      	ldr	r2, [pc, #580]	; (801bdd8 <_strtod_l+0x2b0>)
 801bb92:	ab19      	add	r3, sp, #100	; 0x64
 801bb94:	a917      	add	r1, sp, #92	; 0x5c
 801bb96:	4620      	mov	r0, r4
 801bb98:	f001 ff26 	bl	801d9e8 <__gethex>
 801bb9c:	f010 0507 	ands.w	r5, r0, #7
 801bba0:	4607      	mov	r7, r0
 801bba2:	d005      	beq.n	801bbb0 <_strtod_l+0x88>
 801bba4:	2d06      	cmp	r5, #6
 801bba6:	d12b      	bne.n	801bc00 <_strtod_l+0xd8>
 801bba8:	3601      	adds	r6, #1
 801bbaa:	2300      	movs	r3, #0
 801bbac:	9617      	str	r6, [sp, #92]	; 0x5c
 801bbae:	930b      	str	r3, [sp, #44]	; 0x2c
 801bbb0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801bbb2:	2b00      	cmp	r3, #0
 801bbb4:	f040 856e 	bne.w	801c694 <_strtod_l+0xb6c>
 801bbb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bbba:	b1e3      	cbz	r3, 801bbf6 <_strtod_l+0xce>
 801bbbc:	ec49 8b17 	vmov	d7, r8, r9
 801bbc0:	eeb1 0b47 	vneg.f64	d0, d7
 801bbc4:	b01d      	add	sp, #116	; 0x74
 801bbc6:	ecbd 8b0c 	vpop	{d8-d13}
 801bbca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbce:	2a20      	cmp	r2, #32
 801bbd0:	d1cd      	bne.n	801bb6e <_strtod_l+0x46>
 801bbd2:	3301      	adds	r3, #1
 801bbd4:	9317      	str	r3, [sp, #92]	; 0x5c
 801bbd6:	e7bf      	b.n	801bb58 <_strtod_l+0x30>
 801bbd8:	2a2d      	cmp	r2, #45	; 0x2d
 801bbda:	d1c8      	bne.n	801bb6e <_strtod_l+0x46>
 801bbdc:	2201      	movs	r2, #1
 801bbde:	920b      	str	r2, [sp, #44]	; 0x2c
 801bbe0:	1c5a      	adds	r2, r3, #1
 801bbe2:	9217      	str	r2, [sp, #92]	; 0x5c
 801bbe4:	785b      	ldrb	r3, [r3, #1]
 801bbe6:	2b00      	cmp	r3, #0
 801bbe8:	d1c3      	bne.n	801bb72 <_strtod_l+0x4a>
 801bbea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801bbec:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 801bbf0:	2b00      	cmp	r3, #0
 801bbf2:	f040 854d 	bne.w	801c690 <_strtod_l+0xb68>
 801bbf6:	ec49 8b10 	vmov	d0, r8, r9
 801bbfa:	e7e3      	b.n	801bbc4 <_strtod_l+0x9c>
 801bbfc:	2200      	movs	r2, #0
 801bbfe:	e7ee      	b.n	801bbde <_strtod_l+0xb6>
 801bc00:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801bc02:	b13a      	cbz	r2, 801bc14 <_strtod_l+0xec>
 801bc04:	2135      	movs	r1, #53	; 0x35
 801bc06:	a81a      	add	r0, sp, #104	; 0x68
 801bc08:	f002 fef8 	bl	801e9fc <__copybits>
 801bc0c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801bc0e:	4620      	mov	r0, r4
 801bc10:	f002 fabc 	bl	801e18c <_Bfree>
 801bc14:	3d01      	subs	r5, #1
 801bc16:	2d05      	cmp	r5, #5
 801bc18:	d807      	bhi.n	801bc2a <_strtod_l+0x102>
 801bc1a:	e8df f005 	tbb	[pc, r5]
 801bc1e:	0b0e      	.short	0x0b0e
 801bc20:	030e1d18 	.word	0x030e1d18
 801bc24:	f04f 0900 	mov.w	r9, #0
 801bc28:	46c8      	mov	r8, r9
 801bc2a:	073b      	lsls	r3, r7, #28
 801bc2c:	d5c0      	bpl.n	801bbb0 <_strtod_l+0x88>
 801bc2e:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 801bc32:	e7bd      	b.n	801bbb0 <_strtod_l+0x88>
 801bc34:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 801bc38:	e7f7      	b.n	801bc2a <_strtod_l+0x102>
 801bc3a:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 801bc3e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801bc40:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801bc44:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801bc48:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801bc4c:	e7ed      	b.n	801bc2a <_strtod_l+0x102>
 801bc4e:	f8df 918c 	ldr.w	r9, [pc, #396]	; 801bddc <_strtod_l+0x2b4>
 801bc52:	f04f 0800 	mov.w	r8, #0
 801bc56:	e7e8      	b.n	801bc2a <_strtod_l+0x102>
 801bc58:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801bc5c:	f04f 38ff 	mov.w	r8, #4294967295
 801bc60:	e7e3      	b.n	801bc2a <_strtod_l+0x102>
 801bc62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801bc64:	1c5a      	adds	r2, r3, #1
 801bc66:	9217      	str	r2, [sp, #92]	; 0x5c
 801bc68:	785b      	ldrb	r3, [r3, #1]
 801bc6a:	2b30      	cmp	r3, #48	; 0x30
 801bc6c:	d0f9      	beq.n	801bc62 <_strtod_l+0x13a>
 801bc6e:	2b00      	cmp	r3, #0
 801bc70:	d09e      	beq.n	801bbb0 <_strtod_l+0x88>
 801bc72:	2301      	movs	r3, #1
 801bc74:	9306      	str	r3, [sp, #24]
 801bc76:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801bc78:	930c      	str	r3, [sp, #48]	; 0x30
 801bc7a:	2300      	movs	r3, #0
 801bc7c:	9304      	str	r3, [sp, #16]
 801bc7e:	930a      	str	r3, [sp, #40]	; 0x28
 801bc80:	461e      	mov	r6, r3
 801bc82:	220a      	movs	r2, #10
 801bc84:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801bc86:	f890 b000 	ldrb.w	fp, [r0]
 801bc8a:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 801bc8e:	b2d9      	uxtb	r1, r3
 801bc90:	2909      	cmp	r1, #9
 801bc92:	d92b      	bls.n	801bcec <_strtod_l+0x1c4>
 801bc94:	9908      	ldr	r1, [sp, #32]
 801bc96:	462a      	mov	r2, r5
 801bc98:	f7ff ff04 	bl	801baa4 <strncmp>
 801bc9c:	2800      	cmp	r0, #0
 801bc9e:	d035      	beq.n	801bd0c <_strtod_l+0x1e4>
 801bca0:	2000      	movs	r0, #0
 801bca2:	465a      	mov	r2, fp
 801bca4:	4633      	mov	r3, r6
 801bca6:	4683      	mov	fp, r0
 801bca8:	4601      	mov	r1, r0
 801bcaa:	2a65      	cmp	r2, #101	; 0x65
 801bcac:	d001      	beq.n	801bcb2 <_strtod_l+0x18a>
 801bcae:	2a45      	cmp	r2, #69	; 0x45
 801bcb0:	d118      	bne.n	801bce4 <_strtod_l+0x1bc>
 801bcb2:	b91b      	cbnz	r3, 801bcbc <_strtod_l+0x194>
 801bcb4:	9b06      	ldr	r3, [sp, #24]
 801bcb6:	4303      	orrs	r3, r0
 801bcb8:	d097      	beq.n	801bbea <_strtod_l+0xc2>
 801bcba:	2300      	movs	r3, #0
 801bcbc:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 801bcc0:	f10a 0201 	add.w	r2, sl, #1
 801bcc4:	9217      	str	r2, [sp, #92]	; 0x5c
 801bcc6:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801bcca:	2a2b      	cmp	r2, #43	; 0x2b
 801bccc:	d077      	beq.n	801bdbe <_strtod_l+0x296>
 801bcce:	2a2d      	cmp	r2, #45	; 0x2d
 801bcd0:	d07d      	beq.n	801bdce <_strtod_l+0x2a6>
 801bcd2:	f04f 0e00 	mov.w	lr, #0
 801bcd6:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 801bcda:	2d09      	cmp	r5, #9
 801bcdc:	f240 8084 	bls.w	801bde8 <_strtod_l+0x2c0>
 801bce0:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 801bce4:	2500      	movs	r5, #0
 801bce6:	e09f      	b.n	801be28 <_strtod_l+0x300>
 801bce8:	2300      	movs	r3, #0
 801bcea:	e7c3      	b.n	801bc74 <_strtod_l+0x14c>
 801bcec:	2e08      	cmp	r6, #8
 801bcee:	bfd5      	itete	le
 801bcf0:	990a      	ldrle	r1, [sp, #40]	; 0x28
 801bcf2:	9904      	ldrgt	r1, [sp, #16]
 801bcf4:	fb02 3301 	mlale	r3, r2, r1, r3
 801bcf8:	fb02 3301 	mlagt	r3, r2, r1, r3
 801bcfc:	f100 0001 	add.w	r0, r0, #1
 801bd00:	bfd4      	ite	le
 801bd02:	930a      	strle	r3, [sp, #40]	; 0x28
 801bd04:	9304      	strgt	r3, [sp, #16]
 801bd06:	3601      	adds	r6, #1
 801bd08:	9017      	str	r0, [sp, #92]	; 0x5c
 801bd0a:	e7bb      	b.n	801bc84 <_strtod_l+0x15c>
 801bd0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801bd0e:	195a      	adds	r2, r3, r5
 801bd10:	9217      	str	r2, [sp, #92]	; 0x5c
 801bd12:	5d5a      	ldrb	r2, [r3, r5]
 801bd14:	b3ae      	cbz	r6, 801bd82 <_strtod_l+0x25a>
 801bd16:	4683      	mov	fp, r0
 801bd18:	4633      	mov	r3, r6
 801bd1a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801bd1e:	2909      	cmp	r1, #9
 801bd20:	d912      	bls.n	801bd48 <_strtod_l+0x220>
 801bd22:	2101      	movs	r1, #1
 801bd24:	e7c1      	b.n	801bcaa <_strtod_l+0x182>
 801bd26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801bd28:	1c5a      	adds	r2, r3, #1
 801bd2a:	9217      	str	r2, [sp, #92]	; 0x5c
 801bd2c:	785a      	ldrb	r2, [r3, #1]
 801bd2e:	3001      	adds	r0, #1
 801bd30:	2a30      	cmp	r2, #48	; 0x30
 801bd32:	d0f8      	beq.n	801bd26 <_strtod_l+0x1fe>
 801bd34:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801bd38:	2b08      	cmp	r3, #8
 801bd3a:	f200 84b0 	bhi.w	801c69e <_strtod_l+0xb76>
 801bd3e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801bd40:	930c      	str	r3, [sp, #48]	; 0x30
 801bd42:	4683      	mov	fp, r0
 801bd44:	2000      	movs	r0, #0
 801bd46:	4603      	mov	r3, r0
 801bd48:	3a30      	subs	r2, #48	; 0x30
 801bd4a:	f100 0101 	add.w	r1, r0, #1
 801bd4e:	d012      	beq.n	801bd76 <_strtod_l+0x24e>
 801bd50:	448b      	add	fp, r1
 801bd52:	eb00 0c03 	add.w	ip, r0, r3
 801bd56:	4619      	mov	r1, r3
 801bd58:	250a      	movs	r5, #10
 801bd5a:	4561      	cmp	r1, ip
 801bd5c:	d113      	bne.n	801bd86 <_strtod_l+0x25e>
 801bd5e:	1819      	adds	r1, r3, r0
 801bd60:	2908      	cmp	r1, #8
 801bd62:	f103 0301 	add.w	r3, r3, #1
 801bd66:	4403      	add	r3, r0
 801bd68:	dc1d      	bgt.n	801bda6 <_strtod_l+0x27e>
 801bd6a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801bd6c:	210a      	movs	r1, #10
 801bd6e:	fb01 2200 	mla	r2, r1, r0, r2
 801bd72:	920a      	str	r2, [sp, #40]	; 0x28
 801bd74:	2100      	movs	r1, #0
 801bd76:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801bd78:	1c50      	adds	r0, r2, #1
 801bd7a:	9017      	str	r0, [sp, #92]	; 0x5c
 801bd7c:	7852      	ldrb	r2, [r2, #1]
 801bd7e:	4608      	mov	r0, r1
 801bd80:	e7cb      	b.n	801bd1a <_strtod_l+0x1f2>
 801bd82:	4630      	mov	r0, r6
 801bd84:	e7d4      	b.n	801bd30 <_strtod_l+0x208>
 801bd86:	2908      	cmp	r1, #8
 801bd88:	dc04      	bgt.n	801bd94 <_strtod_l+0x26c>
 801bd8a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801bd8c:	436f      	muls	r7, r5
 801bd8e:	970a      	str	r7, [sp, #40]	; 0x28
 801bd90:	3101      	adds	r1, #1
 801bd92:	e7e2      	b.n	801bd5a <_strtod_l+0x232>
 801bd94:	f101 0e01 	add.w	lr, r1, #1
 801bd98:	f1be 0f10 	cmp.w	lr, #16
 801bd9c:	bfde      	ittt	le
 801bd9e:	9f04      	ldrle	r7, [sp, #16]
 801bda0:	436f      	mulle	r7, r5
 801bda2:	9704      	strle	r7, [sp, #16]
 801bda4:	e7f4      	b.n	801bd90 <_strtod_l+0x268>
 801bda6:	2b10      	cmp	r3, #16
 801bda8:	bfdf      	itttt	le
 801bdaa:	9804      	ldrle	r0, [sp, #16]
 801bdac:	210a      	movle	r1, #10
 801bdae:	fb01 2200 	mlale	r2, r1, r0, r2
 801bdb2:	9204      	strle	r2, [sp, #16]
 801bdb4:	e7de      	b.n	801bd74 <_strtod_l+0x24c>
 801bdb6:	f04f 0b00 	mov.w	fp, #0
 801bdba:	2101      	movs	r1, #1
 801bdbc:	e77a      	b.n	801bcb4 <_strtod_l+0x18c>
 801bdbe:	f04f 0e00 	mov.w	lr, #0
 801bdc2:	f10a 0202 	add.w	r2, sl, #2
 801bdc6:	9217      	str	r2, [sp, #92]	; 0x5c
 801bdc8:	f89a 2002 	ldrb.w	r2, [sl, #2]
 801bdcc:	e783      	b.n	801bcd6 <_strtod_l+0x1ae>
 801bdce:	f04f 0e01 	mov.w	lr, #1
 801bdd2:	e7f6      	b.n	801bdc2 <_strtod_l+0x29a>
 801bdd4:	0802893c 	.word	0x0802893c
 801bdd8:	08028684 	.word	0x08028684
 801bddc:	7ff00000 	.word	0x7ff00000
 801bde0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801bde2:	1c55      	adds	r5, r2, #1
 801bde4:	9517      	str	r5, [sp, #92]	; 0x5c
 801bde6:	7852      	ldrb	r2, [r2, #1]
 801bde8:	2a30      	cmp	r2, #48	; 0x30
 801bdea:	d0f9      	beq.n	801bde0 <_strtod_l+0x2b8>
 801bdec:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 801bdf0:	2d08      	cmp	r5, #8
 801bdf2:	f63f af77 	bhi.w	801bce4 <_strtod_l+0x1bc>
 801bdf6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 801bdfa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801bdfc:	9208      	str	r2, [sp, #32]
 801bdfe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801be00:	1c55      	adds	r5, r2, #1
 801be02:	9517      	str	r5, [sp, #92]	; 0x5c
 801be04:	7852      	ldrb	r2, [r2, #1]
 801be06:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 801be0a:	2f09      	cmp	r7, #9
 801be0c:	d937      	bls.n	801be7e <_strtod_l+0x356>
 801be0e:	9f08      	ldr	r7, [sp, #32]
 801be10:	1bed      	subs	r5, r5, r7
 801be12:	2d08      	cmp	r5, #8
 801be14:	f644 651f 	movw	r5, #19999	; 0x4e1f
 801be18:	dc02      	bgt.n	801be20 <_strtod_l+0x2f8>
 801be1a:	4565      	cmp	r5, ip
 801be1c:	bfa8      	it	ge
 801be1e:	4665      	movge	r5, ip
 801be20:	f1be 0f00 	cmp.w	lr, #0
 801be24:	d000      	beq.n	801be28 <_strtod_l+0x300>
 801be26:	426d      	negs	r5, r5
 801be28:	2b00      	cmp	r3, #0
 801be2a:	d14f      	bne.n	801becc <_strtod_l+0x3a4>
 801be2c:	9b06      	ldr	r3, [sp, #24]
 801be2e:	4303      	orrs	r3, r0
 801be30:	f47f aebe 	bne.w	801bbb0 <_strtod_l+0x88>
 801be34:	2900      	cmp	r1, #0
 801be36:	f47f aed8 	bne.w	801bbea <_strtod_l+0xc2>
 801be3a:	2a69      	cmp	r2, #105	; 0x69
 801be3c:	d027      	beq.n	801be8e <_strtod_l+0x366>
 801be3e:	dc24      	bgt.n	801be8a <_strtod_l+0x362>
 801be40:	2a49      	cmp	r2, #73	; 0x49
 801be42:	d024      	beq.n	801be8e <_strtod_l+0x366>
 801be44:	2a4e      	cmp	r2, #78	; 0x4e
 801be46:	f47f aed0 	bne.w	801bbea <_strtod_l+0xc2>
 801be4a:	499b      	ldr	r1, [pc, #620]	; (801c0b8 <_strtod_l+0x590>)
 801be4c:	a817      	add	r0, sp, #92	; 0x5c
 801be4e:	f002 f823 	bl	801de98 <__match>
 801be52:	2800      	cmp	r0, #0
 801be54:	f43f aec9 	beq.w	801bbea <_strtod_l+0xc2>
 801be58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801be5a:	781b      	ldrb	r3, [r3, #0]
 801be5c:	2b28      	cmp	r3, #40	; 0x28
 801be5e:	d12d      	bne.n	801bebc <_strtod_l+0x394>
 801be60:	4996      	ldr	r1, [pc, #600]	; (801c0bc <_strtod_l+0x594>)
 801be62:	aa1a      	add	r2, sp, #104	; 0x68
 801be64:	a817      	add	r0, sp, #92	; 0x5c
 801be66:	f002 f82b 	bl	801dec0 <__hexnan>
 801be6a:	2805      	cmp	r0, #5
 801be6c:	d126      	bne.n	801bebc <_strtod_l+0x394>
 801be6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801be70:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 801be74:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801be78:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801be7c:	e698      	b.n	801bbb0 <_strtod_l+0x88>
 801be7e:	250a      	movs	r5, #10
 801be80:	fb05 250c 	mla	r5, r5, ip, r2
 801be84:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 801be88:	e7b9      	b.n	801bdfe <_strtod_l+0x2d6>
 801be8a:	2a6e      	cmp	r2, #110	; 0x6e
 801be8c:	e7db      	b.n	801be46 <_strtod_l+0x31e>
 801be8e:	498c      	ldr	r1, [pc, #560]	; (801c0c0 <_strtod_l+0x598>)
 801be90:	a817      	add	r0, sp, #92	; 0x5c
 801be92:	f002 f801 	bl	801de98 <__match>
 801be96:	2800      	cmp	r0, #0
 801be98:	f43f aea7 	beq.w	801bbea <_strtod_l+0xc2>
 801be9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801be9e:	4989      	ldr	r1, [pc, #548]	; (801c0c4 <_strtod_l+0x59c>)
 801bea0:	3b01      	subs	r3, #1
 801bea2:	a817      	add	r0, sp, #92	; 0x5c
 801bea4:	9317      	str	r3, [sp, #92]	; 0x5c
 801bea6:	f001 fff7 	bl	801de98 <__match>
 801beaa:	b910      	cbnz	r0, 801beb2 <_strtod_l+0x38a>
 801beac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801beae:	3301      	adds	r3, #1
 801beb0:	9317      	str	r3, [sp, #92]	; 0x5c
 801beb2:	f8df 9224 	ldr.w	r9, [pc, #548]	; 801c0d8 <_strtod_l+0x5b0>
 801beb6:	f04f 0800 	mov.w	r8, #0
 801beba:	e679      	b.n	801bbb0 <_strtod_l+0x88>
 801bebc:	4882      	ldr	r0, [pc, #520]	; (801c0c8 <_strtod_l+0x5a0>)
 801bebe:	f002 ff73 	bl	801eda8 <nan>
 801bec2:	ed8d 0b04 	vstr	d0, [sp, #16]
 801bec6:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801beca:	e671      	b.n	801bbb0 <_strtod_l+0x88>
 801becc:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 801bed0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801bed4:	eba5 020b 	sub.w	r2, r5, fp
 801bed8:	2e00      	cmp	r6, #0
 801beda:	bf08      	it	eq
 801bedc:	461e      	moveq	r6, r3
 801bede:	2b10      	cmp	r3, #16
 801bee0:	ed8d 7b08 	vstr	d7, [sp, #32]
 801bee4:	9206      	str	r2, [sp, #24]
 801bee6:	461a      	mov	r2, r3
 801bee8:	bfa8      	it	ge
 801beea:	2210      	movge	r2, #16
 801beec:	2b09      	cmp	r3, #9
 801beee:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 801bef2:	dd0e      	ble.n	801bf12 <_strtod_l+0x3ea>
 801bef4:	4975      	ldr	r1, [pc, #468]	; (801c0cc <_strtod_l+0x5a4>)
 801bef6:	eddd 7a04 	vldr	s15, [sp, #16]
 801befa:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801befe:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 801bf02:	ed9d 5b08 	vldr	d5, [sp, #32]
 801bf06:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801bf0a:	eea5 7b06 	vfma.f64	d7, d5, d6
 801bf0e:	ec59 8b17 	vmov	r8, r9, d7
 801bf12:	2b0f      	cmp	r3, #15
 801bf14:	dc37      	bgt.n	801bf86 <_strtod_l+0x45e>
 801bf16:	9906      	ldr	r1, [sp, #24]
 801bf18:	2900      	cmp	r1, #0
 801bf1a:	f43f ae49 	beq.w	801bbb0 <_strtod_l+0x88>
 801bf1e:	dd23      	ble.n	801bf68 <_strtod_l+0x440>
 801bf20:	2916      	cmp	r1, #22
 801bf22:	dc0b      	bgt.n	801bf3c <_strtod_l+0x414>
 801bf24:	4b69      	ldr	r3, [pc, #420]	; (801c0cc <_strtod_l+0x5a4>)
 801bf26:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801bf2a:	ed93 7b00 	vldr	d7, [r3]
 801bf2e:	ec49 8b16 	vmov	d6, r8, r9
 801bf32:	ee27 7b06 	vmul.f64	d7, d7, d6
 801bf36:	ec59 8b17 	vmov	r8, r9, d7
 801bf3a:	e639      	b.n	801bbb0 <_strtod_l+0x88>
 801bf3c:	9806      	ldr	r0, [sp, #24]
 801bf3e:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801bf42:	4281      	cmp	r1, r0
 801bf44:	db1f      	blt.n	801bf86 <_strtod_l+0x45e>
 801bf46:	4a61      	ldr	r2, [pc, #388]	; (801c0cc <_strtod_l+0x5a4>)
 801bf48:	f1c3 030f 	rsb	r3, r3, #15
 801bf4c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801bf50:	ed91 7b00 	vldr	d7, [r1]
 801bf54:	ec49 8b16 	vmov	d6, r8, r9
 801bf58:	1ac3      	subs	r3, r0, r3
 801bf5a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801bf5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801bf62:	ed92 6b00 	vldr	d6, [r2]
 801bf66:	e7e4      	b.n	801bf32 <_strtod_l+0x40a>
 801bf68:	9906      	ldr	r1, [sp, #24]
 801bf6a:	3116      	adds	r1, #22
 801bf6c:	db0b      	blt.n	801bf86 <_strtod_l+0x45e>
 801bf6e:	4b57      	ldr	r3, [pc, #348]	; (801c0cc <_strtod_l+0x5a4>)
 801bf70:	ebab 0505 	sub.w	r5, fp, r5
 801bf74:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801bf78:	ed95 7b00 	vldr	d7, [r5]
 801bf7c:	ec49 8b16 	vmov	d6, r8, r9
 801bf80:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801bf84:	e7d7      	b.n	801bf36 <_strtod_l+0x40e>
 801bf86:	9906      	ldr	r1, [sp, #24]
 801bf88:	1a9a      	subs	r2, r3, r2
 801bf8a:	440a      	add	r2, r1
 801bf8c:	2a00      	cmp	r2, #0
 801bf8e:	dd74      	ble.n	801c07a <_strtod_l+0x552>
 801bf90:	f012 000f 	ands.w	r0, r2, #15
 801bf94:	d00a      	beq.n	801bfac <_strtod_l+0x484>
 801bf96:	494d      	ldr	r1, [pc, #308]	; (801c0cc <_strtod_l+0x5a4>)
 801bf98:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801bf9c:	ed91 7b00 	vldr	d7, [r1]
 801bfa0:	ec49 8b16 	vmov	d6, r8, r9
 801bfa4:	ee27 7b06 	vmul.f64	d7, d7, d6
 801bfa8:	ec59 8b17 	vmov	r8, r9, d7
 801bfac:	f032 020f 	bics.w	r2, r2, #15
 801bfb0:	d04f      	beq.n	801c052 <_strtod_l+0x52a>
 801bfb2:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801bfb6:	dd22      	ble.n	801bffe <_strtod_l+0x4d6>
 801bfb8:	2500      	movs	r5, #0
 801bfba:	462e      	mov	r6, r5
 801bfbc:	950a      	str	r5, [sp, #40]	; 0x28
 801bfbe:	462f      	mov	r7, r5
 801bfc0:	2322      	movs	r3, #34	; 0x22
 801bfc2:	f8df 9114 	ldr.w	r9, [pc, #276]	; 801c0d8 <_strtod_l+0x5b0>
 801bfc6:	6023      	str	r3, [r4, #0]
 801bfc8:	f04f 0800 	mov.w	r8, #0
 801bfcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bfce:	2b00      	cmp	r3, #0
 801bfd0:	f43f adee 	beq.w	801bbb0 <_strtod_l+0x88>
 801bfd4:	9918      	ldr	r1, [sp, #96]	; 0x60
 801bfd6:	4620      	mov	r0, r4
 801bfd8:	f002 f8d8 	bl	801e18c <_Bfree>
 801bfdc:	4639      	mov	r1, r7
 801bfde:	4620      	mov	r0, r4
 801bfe0:	f002 f8d4 	bl	801e18c <_Bfree>
 801bfe4:	4631      	mov	r1, r6
 801bfe6:	4620      	mov	r0, r4
 801bfe8:	f002 f8d0 	bl	801e18c <_Bfree>
 801bfec:	990a      	ldr	r1, [sp, #40]	; 0x28
 801bfee:	4620      	mov	r0, r4
 801bff0:	f002 f8cc 	bl	801e18c <_Bfree>
 801bff4:	4629      	mov	r1, r5
 801bff6:	4620      	mov	r0, r4
 801bff8:	f002 f8c8 	bl	801e18c <_Bfree>
 801bffc:	e5d8      	b.n	801bbb0 <_strtod_l+0x88>
 801bffe:	e9cd 8904 	strd	r8, r9, [sp, #16]
 801c002:	2000      	movs	r0, #0
 801c004:	4f32      	ldr	r7, [pc, #200]	; (801c0d0 <_strtod_l+0x5a8>)
 801c006:	1112      	asrs	r2, r2, #4
 801c008:	4601      	mov	r1, r0
 801c00a:	2a01      	cmp	r2, #1
 801c00c:	dc24      	bgt.n	801c058 <_strtod_l+0x530>
 801c00e:	b108      	cbz	r0, 801c014 <_strtod_l+0x4ec>
 801c010:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801c014:	4a2e      	ldr	r2, [pc, #184]	; (801c0d0 <_strtod_l+0x5a8>)
 801c016:	482f      	ldr	r0, [pc, #188]	; (801c0d4 <_strtod_l+0x5ac>)
 801c018:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 801c01c:	ed91 7b00 	vldr	d7, [r1]
 801c020:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801c024:	ec49 8b16 	vmov	d6, r8, r9
 801c028:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c02c:	ed8d 7b04 	vstr	d7, [sp, #16]
 801c030:	9905      	ldr	r1, [sp, #20]
 801c032:	4a29      	ldr	r2, [pc, #164]	; (801c0d8 <_strtod_l+0x5b0>)
 801c034:	400a      	ands	r2, r1
 801c036:	4282      	cmp	r2, r0
 801c038:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801c03c:	d8bc      	bhi.n	801bfb8 <_strtod_l+0x490>
 801c03e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801c042:	4282      	cmp	r2, r0
 801c044:	bf86      	itte	hi
 801c046:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 801c0dc <_strtod_l+0x5b4>
 801c04a:	f04f 38ff 	movhi.w	r8, #4294967295
 801c04e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801c052:	2200      	movs	r2, #0
 801c054:	9204      	str	r2, [sp, #16]
 801c056:	e07f      	b.n	801c158 <_strtod_l+0x630>
 801c058:	f012 0f01 	tst.w	r2, #1
 801c05c:	d00a      	beq.n	801c074 <_strtod_l+0x54c>
 801c05e:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 801c062:	ed90 7b00 	vldr	d7, [r0]
 801c066:	ed9d 6b04 	vldr	d6, [sp, #16]
 801c06a:	ee26 7b07 	vmul.f64	d7, d6, d7
 801c06e:	ed8d 7b04 	vstr	d7, [sp, #16]
 801c072:	2001      	movs	r0, #1
 801c074:	3101      	adds	r1, #1
 801c076:	1052      	asrs	r2, r2, #1
 801c078:	e7c7      	b.n	801c00a <_strtod_l+0x4e2>
 801c07a:	d0ea      	beq.n	801c052 <_strtod_l+0x52a>
 801c07c:	4252      	negs	r2, r2
 801c07e:	f012 000f 	ands.w	r0, r2, #15
 801c082:	d00a      	beq.n	801c09a <_strtod_l+0x572>
 801c084:	4911      	ldr	r1, [pc, #68]	; (801c0cc <_strtod_l+0x5a4>)
 801c086:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801c08a:	ed91 7b00 	vldr	d7, [r1]
 801c08e:	ec49 8b16 	vmov	d6, r8, r9
 801c092:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801c096:	ec59 8b17 	vmov	r8, r9, d7
 801c09a:	1112      	asrs	r2, r2, #4
 801c09c:	d0d9      	beq.n	801c052 <_strtod_l+0x52a>
 801c09e:	2a1f      	cmp	r2, #31
 801c0a0:	dd1e      	ble.n	801c0e0 <_strtod_l+0x5b8>
 801c0a2:	2500      	movs	r5, #0
 801c0a4:	462e      	mov	r6, r5
 801c0a6:	950a      	str	r5, [sp, #40]	; 0x28
 801c0a8:	462f      	mov	r7, r5
 801c0aa:	2322      	movs	r3, #34	; 0x22
 801c0ac:	f04f 0800 	mov.w	r8, #0
 801c0b0:	f04f 0900 	mov.w	r9, #0
 801c0b4:	6023      	str	r3, [r4, #0]
 801c0b6:	e789      	b.n	801bfcc <_strtod_l+0x4a4>
 801c0b8:	08028656 	.word	0x08028656
 801c0bc:	08028698 	.word	0x08028698
 801c0c0:	0802864e 	.word	0x0802864e
 801c0c4:	080287dc 	.word	0x080287dc
 801c0c8:	08028632 	.word	0x08028632
 801c0cc:	080289d8 	.word	0x080289d8
 801c0d0:	080289b0 	.word	0x080289b0
 801c0d4:	7ca00000 	.word	0x7ca00000
 801c0d8:	7ff00000 	.word	0x7ff00000
 801c0dc:	7fefffff 	.word	0x7fefffff
 801c0e0:	f012 0110 	ands.w	r1, r2, #16
 801c0e4:	bf18      	it	ne
 801c0e6:	216a      	movne	r1, #106	; 0x6a
 801c0e8:	e9cd 8908 	strd	r8, r9, [sp, #32]
 801c0ec:	9104      	str	r1, [sp, #16]
 801c0ee:	49c0      	ldr	r1, [pc, #768]	; (801c3f0 <_strtod_l+0x8c8>)
 801c0f0:	2000      	movs	r0, #0
 801c0f2:	07d7      	lsls	r7, r2, #31
 801c0f4:	d508      	bpl.n	801c108 <_strtod_l+0x5e0>
 801c0f6:	ed9d 6b08 	vldr	d6, [sp, #32]
 801c0fa:	ed91 7b00 	vldr	d7, [r1]
 801c0fe:	ee26 7b07 	vmul.f64	d7, d6, d7
 801c102:	ed8d 7b08 	vstr	d7, [sp, #32]
 801c106:	2001      	movs	r0, #1
 801c108:	1052      	asrs	r2, r2, #1
 801c10a:	f101 0108 	add.w	r1, r1, #8
 801c10e:	d1f0      	bne.n	801c0f2 <_strtod_l+0x5ca>
 801c110:	b108      	cbz	r0, 801c116 <_strtod_l+0x5ee>
 801c112:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 801c116:	9a04      	ldr	r2, [sp, #16]
 801c118:	b1ba      	cbz	r2, 801c14a <_strtod_l+0x622>
 801c11a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801c11e:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 801c122:	2a00      	cmp	r2, #0
 801c124:	4649      	mov	r1, r9
 801c126:	dd10      	ble.n	801c14a <_strtod_l+0x622>
 801c128:	2a1f      	cmp	r2, #31
 801c12a:	f340 8132 	ble.w	801c392 <_strtod_l+0x86a>
 801c12e:	2a34      	cmp	r2, #52	; 0x34
 801c130:	bfde      	ittt	le
 801c132:	3a20      	suble	r2, #32
 801c134:	f04f 30ff 	movle.w	r0, #4294967295
 801c138:	fa00 f202 	lslle.w	r2, r0, r2
 801c13c:	f04f 0800 	mov.w	r8, #0
 801c140:	bfcc      	ite	gt
 801c142:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801c146:	ea02 0901 	andle.w	r9, r2, r1
 801c14a:	ec49 8b17 	vmov	d7, r8, r9
 801c14e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801c152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c156:	d0a4      	beq.n	801c0a2 <_strtod_l+0x57a>
 801c158:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c15a:	9200      	str	r2, [sp, #0]
 801c15c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c15e:	4632      	mov	r2, r6
 801c160:	4620      	mov	r0, r4
 801c162:	f002 f87f 	bl	801e264 <__s2b>
 801c166:	900a      	str	r0, [sp, #40]	; 0x28
 801c168:	2800      	cmp	r0, #0
 801c16a:	f43f af25 	beq.w	801bfb8 <_strtod_l+0x490>
 801c16e:	9b06      	ldr	r3, [sp, #24]
 801c170:	ebab 0505 	sub.w	r5, fp, r5
 801c174:	2b00      	cmp	r3, #0
 801c176:	bfb4      	ite	lt
 801c178:	462b      	movlt	r3, r5
 801c17a:	2300      	movge	r3, #0
 801c17c:	930c      	str	r3, [sp, #48]	; 0x30
 801c17e:	9b06      	ldr	r3, [sp, #24]
 801c180:	ed9f 9b95 	vldr	d9, [pc, #596]	; 801c3d8 <_strtod_l+0x8b0>
 801c184:	ed9f ab96 	vldr	d10, [pc, #600]	; 801c3e0 <_strtod_l+0x8b8>
 801c188:	ed9f bb97 	vldr	d11, [pc, #604]	; 801c3e8 <_strtod_l+0x8c0>
 801c18c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c190:	2500      	movs	r5, #0
 801c192:	9312      	str	r3, [sp, #72]	; 0x48
 801c194:	462e      	mov	r6, r5
 801c196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c198:	4620      	mov	r0, r4
 801c19a:	6859      	ldr	r1, [r3, #4]
 801c19c:	f001 ffb6 	bl	801e10c <_Balloc>
 801c1a0:	4607      	mov	r7, r0
 801c1a2:	2800      	cmp	r0, #0
 801c1a4:	f43f af0c 	beq.w	801bfc0 <_strtod_l+0x498>
 801c1a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c1aa:	691a      	ldr	r2, [r3, #16]
 801c1ac:	3202      	adds	r2, #2
 801c1ae:	f103 010c 	add.w	r1, r3, #12
 801c1b2:	0092      	lsls	r2, r2, #2
 801c1b4:	300c      	adds	r0, #12
 801c1b6:	f7fe fb03 	bl	801a7c0 <memcpy>
 801c1ba:	ec49 8b10 	vmov	d0, r8, r9
 801c1be:	aa1a      	add	r2, sp, #104	; 0x68
 801c1c0:	a919      	add	r1, sp, #100	; 0x64
 801c1c2:	4620      	mov	r0, r4
 801c1c4:	e9cd 8908 	strd	r8, r9, [sp, #32]
 801c1c8:	f002 fb88 	bl	801e8dc <__d2b>
 801c1cc:	9018      	str	r0, [sp, #96]	; 0x60
 801c1ce:	2800      	cmp	r0, #0
 801c1d0:	f43f aef6 	beq.w	801bfc0 <_strtod_l+0x498>
 801c1d4:	2101      	movs	r1, #1
 801c1d6:	4620      	mov	r0, r4
 801c1d8:	f002 f8de 	bl	801e398 <__i2b>
 801c1dc:	4606      	mov	r6, r0
 801c1de:	2800      	cmp	r0, #0
 801c1e0:	f43f aeee 	beq.w	801bfc0 <_strtod_l+0x498>
 801c1e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801c1e6:	991a      	ldr	r1, [sp, #104]	; 0x68
 801c1e8:	2b00      	cmp	r3, #0
 801c1ea:	bfab      	itete	ge
 801c1ec:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801c1ee:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801c1f0:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 801c1f4:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 801c1f8:	bfac      	ite	ge
 801c1fa:	eb03 0b02 	addge.w	fp, r3, r2
 801c1fe:	eba2 0a03 	sublt.w	sl, r2, r3
 801c202:	9a04      	ldr	r2, [sp, #16]
 801c204:	1a9b      	subs	r3, r3, r2
 801c206:	440b      	add	r3, r1
 801c208:	4a7a      	ldr	r2, [pc, #488]	; (801c3f4 <_strtod_l+0x8cc>)
 801c20a:	3b01      	subs	r3, #1
 801c20c:	4293      	cmp	r3, r2
 801c20e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 801c212:	f280 80d1 	bge.w	801c3b8 <_strtod_l+0x890>
 801c216:	1ad2      	subs	r2, r2, r3
 801c218:	2a1f      	cmp	r2, #31
 801c21a:	eba1 0102 	sub.w	r1, r1, r2
 801c21e:	f04f 0001 	mov.w	r0, #1
 801c222:	f300 80bd 	bgt.w	801c3a0 <_strtod_l+0x878>
 801c226:	fa00 f302 	lsl.w	r3, r0, r2
 801c22a:	930e      	str	r3, [sp, #56]	; 0x38
 801c22c:	2300      	movs	r3, #0
 801c22e:	930d      	str	r3, [sp, #52]	; 0x34
 801c230:	eb0b 0301 	add.w	r3, fp, r1
 801c234:	9a04      	ldr	r2, [sp, #16]
 801c236:	459b      	cmp	fp, r3
 801c238:	448a      	add	sl, r1
 801c23a:	4492      	add	sl, r2
 801c23c:	465a      	mov	r2, fp
 801c23e:	bfa8      	it	ge
 801c240:	461a      	movge	r2, r3
 801c242:	4552      	cmp	r2, sl
 801c244:	bfa8      	it	ge
 801c246:	4652      	movge	r2, sl
 801c248:	2a00      	cmp	r2, #0
 801c24a:	bfc2      	ittt	gt
 801c24c:	1a9b      	subgt	r3, r3, r2
 801c24e:	ebaa 0a02 	subgt.w	sl, sl, r2
 801c252:	ebab 0b02 	subgt.w	fp, fp, r2
 801c256:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c258:	2a00      	cmp	r2, #0
 801c25a:	dd18      	ble.n	801c28e <_strtod_l+0x766>
 801c25c:	4631      	mov	r1, r6
 801c25e:	4620      	mov	r0, r4
 801c260:	9315      	str	r3, [sp, #84]	; 0x54
 801c262:	f002 f955 	bl	801e510 <__pow5mult>
 801c266:	4606      	mov	r6, r0
 801c268:	2800      	cmp	r0, #0
 801c26a:	f43f aea9 	beq.w	801bfc0 <_strtod_l+0x498>
 801c26e:	4601      	mov	r1, r0
 801c270:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801c272:	4620      	mov	r0, r4
 801c274:	f002 f8a6 	bl	801e3c4 <__multiply>
 801c278:	9014      	str	r0, [sp, #80]	; 0x50
 801c27a:	2800      	cmp	r0, #0
 801c27c:	f43f aea0 	beq.w	801bfc0 <_strtod_l+0x498>
 801c280:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c282:	4620      	mov	r0, r4
 801c284:	f001 ff82 	bl	801e18c <_Bfree>
 801c288:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c28a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c28c:	9218      	str	r2, [sp, #96]	; 0x60
 801c28e:	2b00      	cmp	r3, #0
 801c290:	f300 8097 	bgt.w	801c3c2 <_strtod_l+0x89a>
 801c294:	9b06      	ldr	r3, [sp, #24]
 801c296:	2b00      	cmp	r3, #0
 801c298:	dd08      	ble.n	801c2ac <_strtod_l+0x784>
 801c29a:	4639      	mov	r1, r7
 801c29c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c29e:	4620      	mov	r0, r4
 801c2a0:	f002 f936 	bl	801e510 <__pow5mult>
 801c2a4:	4607      	mov	r7, r0
 801c2a6:	2800      	cmp	r0, #0
 801c2a8:	f43f ae8a 	beq.w	801bfc0 <_strtod_l+0x498>
 801c2ac:	f1ba 0f00 	cmp.w	sl, #0
 801c2b0:	dd08      	ble.n	801c2c4 <_strtod_l+0x79c>
 801c2b2:	4639      	mov	r1, r7
 801c2b4:	4652      	mov	r2, sl
 801c2b6:	4620      	mov	r0, r4
 801c2b8:	f002 f984 	bl	801e5c4 <__lshift>
 801c2bc:	4607      	mov	r7, r0
 801c2be:	2800      	cmp	r0, #0
 801c2c0:	f43f ae7e 	beq.w	801bfc0 <_strtod_l+0x498>
 801c2c4:	f1bb 0f00 	cmp.w	fp, #0
 801c2c8:	dd08      	ble.n	801c2dc <_strtod_l+0x7b4>
 801c2ca:	4631      	mov	r1, r6
 801c2cc:	465a      	mov	r2, fp
 801c2ce:	4620      	mov	r0, r4
 801c2d0:	f002 f978 	bl	801e5c4 <__lshift>
 801c2d4:	4606      	mov	r6, r0
 801c2d6:	2800      	cmp	r0, #0
 801c2d8:	f43f ae72 	beq.w	801bfc0 <_strtod_l+0x498>
 801c2dc:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c2de:	463a      	mov	r2, r7
 801c2e0:	4620      	mov	r0, r4
 801c2e2:	f002 f9f7 	bl	801e6d4 <__mdiff>
 801c2e6:	4605      	mov	r5, r0
 801c2e8:	2800      	cmp	r0, #0
 801c2ea:	f43f ae69 	beq.w	801bfc0 <_strtod_l+0x498>
 801c2ee:	2300      	movs	r3, #0
 801c2f0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 801c2f4:	60c3      	str	r3, [r0, #12]
 801c2f6:	4631      	mov	r1, r6
 801c2f8:	f002 f9d0 	bl	801e69c <__mcmp>
 801c2fc:	2800      	cmp	r0, #0
 801c2fe:	da7f      	bge.n	801c400 <_strtod_l+0x8d8>
 801c300:	ea5a 0308 	orrs.w	r3, sl, r8
 801c304:	f040 80a5 	bne.w	801c452 <_strtod_l+0x92a>
 801c308:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c30c:	2b00      	cmp	r3, #0
 801c30e:	f040 80a0 	bne.w	801c452 <_strtod_l+0x92a>
 801c312:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801c316:	0d1b      	lsrs	r3, r3, #20
 801c318:	051b      	lsls	r3, r3, #20
 801c31a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801c31e:	f240 8098 	bls.w	801c452 <_strtod_l+0x92a>
 801c322:	696b      	ldr	r3, [r5, #20]
 801c324:	b91b      	cbnz	r3, 801c32e <_strtod_l+0x806>
 801c326:	692b      	ldr	r3, [r5, #16]
 801c328:	2b01      	cmp	r3, #1
 801c32a:	f340 8092 	ble.w	801c452 <_strtod_l+0x92a>
 801c32e:	4629      	mov	r1, r5
 801c330:	2201      	movs	r2, #1
 801c332:	4620      	mov	r0, r4
 801c334:	f002 f946 	bl	801e5c4 <__lshift>
 801c338:	4631      	mov	r1, r6
 801c33a:	4605      	mov	r5, r0
 801c33c:	f002 f9ae 	bl	801e69c <__mcmp>
 801c340:	2800      	cmp	r0, #0
 801c342:	f340 8086 	ble.w	801c452 <_strtod_l+0x92a>
 801c346:	9904      	ldr	r1, [sp, #16]
 801c348:	4a2b      	ldr	r2, [pc, #172]	; (801c3f8 <_strtod_l+0x8d0>)
 801c34a:	464b      	mov	r3, r9
 801c34c:	2900      	cmp	r1, #0
 801c34e:	f000 80a1 	beq.w	801c494 <_strtod_l+0x96c>
 801c352:	ea02 0109 	and.w	r1, r2, r9
 801c356:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801c35a:	f300 809b 	bgt.w	801c494 <_strtod_l+0x96c>
 801c35e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801c362:	f77f aea2 	ble.w	801c0aa <_strtod_l+0x582>
 801c366:	4a25      	ldr	r2, [pc, #148]	; (801c3fc <_strtod_l+0x8d4>)
 801c368:	2300      	movs	r3, #0
 801c36a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 801c36e:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 801c372:	ec49 8b17 	vmov	d7, r8, r9
 801c376:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c37a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801c37e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801c382:	4313      	orrs	r3, r2
 801c384:	bf08      	it	eq
 801c386:	2322      	moveq	r3, #34	; 0x22
 801c388:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801c38c:	bf08      	it	eq
 801c38e:	6023      	streq	r3, [r4, #0]
 801c390:	e620      	b.n	801bfd4 <_strtod_l+0x4ac>
 801c392:	f04f 31ff 	mov.w	r1, #4294967295
 801c396:	fa01 f202 	lsl.w	r2, r1, r2
 801c39a:	ea02 0808 	and.w	r8, r2, r8
 801c39e:	e6d4      	b.n	801c14a <_strtod_l+0x622>
 801c3a0:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801c3a4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801c3a8:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801c3ac:	33e2      	adds	r3, #226	; 0xe2
 801c3ae:	fa00 f303 	lsl.w	r3, r0, r3
 801c3b2:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 801c3b6:	e73b      	b.n	801c230 <_strtod_l+0x708>
 801c3b8:	2000      	movs	r0, #0
 801c3ba:	2301      	movs	r3, #1
 801c3bc:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 801c3c0:	e736      	b.n	801c230 <_strtod_l+0x708>
 801c3c2:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c3c4:	461a      	mov	r2, r3
 801c3c6:	4620      	mov	r0, r4
 801c3c8:	f002 f8fc 	bl	801e5c4 <__lshift>
 801c3cc:	9018      	str	r0, [sp, #96]	; 0x60
 801c3ce:	2800      	cmp	r0, #0
 801c3d0:	f47f af60 	bne.w	801c294 <_strtod_l+0x76c>
 801c3d4:	e5f4      	b.n	801bfc0 <_strtod_l+0x498>
 801c3d6:	bf00      	nop
 801c3d8:	94a03595 	.word	0x94a03595
 801c3dc:	3fcfffff 	.word	0x3fcfffff
 801c3e0:	94a03595 	.word	0x94a03595
 801c3e4:	3fdfffff 	.word	0x3fdfffff
 801c3e8:	35afe535 	.word	0x35afe535
 801c3ec:	3fe00000 	.word	0x3fe00000
 801c3f0:	080286b0 	.word	0x080286b0
 801c3f4:	fffffc02 	.word	0xfffffc02
 801c3f8:	7ff00000 	.word	0x7ff00000
 801c3fc:	39500000 	.word	0x39500000
 801c400:	46cb      	mov	fp, r9
 801c402:	d165      	bne.n	801c4d0 <_strtod_l+0x9a8>
 801c404:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c408:	f1ba 0f00 	cmp.w	sl, #0
 801c40c:	d02a      	beq.n	801c464 <_strtod_l+0x93c>
 801c40e:	4aaa      	ldr	r2, [pc, #680]	; (801c6b8 <_strtod_l+0xb90>)
 801c410:	4293      	cmp	r3, r2
 801c412:	d12b      	bne.n	801c46c <_strtod_l+0x944>
 801c414:	9b04      	ldr	r3, [sp, #16]
 801c416:	4641      	mov	r1, r8
 801c418:	b1fb      	cbz	r3, 801c45a <_strtod_l+0x932>
 801c41a:	4aa8      	ldr	r2, [pc, #672]	; (801c6bc <_strtod_l+0xb94>)
 801c41c:	ea09 0202 	and.w	r2, r9, r2
 801c420:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801c424:	f04f 30ff 	mov.w	r0, #4294967295
 801c428:	d81a      	bhi.n	801c460 <_strtod_l+0x938>
 801c42a:	0d12      	lsrs	r2, r2, #20
 801c42c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801c430:	fa00 f303 	lsl.w	r3, r0, r3
 801c434:	4299      	cmp	r1, r3
 801c436:	d119      	bne.n	801c46c <_strtod_l+0x944>
 801c438:	4ba1      	ldr	r3, [pc, #644]	; (801c6c0 <_strtod_l+0xb98>)
 801c43a:	459b      	cmp	fp, r3
 801c43c:	d102      	bne.n	801c444 <_strtod_l+0x91c>
 801c43e:	3101      	adds	r1, #1
 801c440:	f43f adbe 	beq.w	801bfc0 <_strtod_l+0x498>
 801c444:	4b9d      	ldr	r3, [pc, #628]	; (801c6bc <_strtod_l+0xb94>)
 801c446:	ea0b 0303 	and.w	r3, fp, r3
 801c44a:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801c44e:	f04f 0800 	mov.w	r8, #0
 801c452:	9b04      	ldr	r3, [sp, #16]
 801c454:	2b00      	cmp	r3, #0
 801c456:	d186      	bne.n	801c366 <_strtod_l+0x83e>
 801c458:	e5bc      	b.n	801bfd4 <_strtod_l+0x4ac>
 801c45a:	f04f 33ff 	mov.w	r3, #4294967295
 801c45e:	e7e9      	b.n	801c434 <_strtod_l+0x90c>
 801c460:	4603      	mov	r3, r0
 801c462:	e7e7      	b.n	801c434 <_strtod_l+0x90c>
 801c464:	ea53 0308 	orrs.w	r3, r3, r8
 801c468:	f43f af6d 	beq.w	801c346 <_strtod_l+0x81e>
 801c46c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c46e:	b1db      	cbz	r3, 801c4a8 <_strtod_l+0x980>
 801c470:	ea13 0f0b 	tst.w	r3, fp
 801c474:	d0ed      	beq.n	801c452 <_strtod_l+0x92a>
 801c476:	9a04      	ldr	r2, [sp, #16]
 801c478:	4640      	mov	r0, r8
 801c47a:	4649      	mov	r1, r9
 801c47c:	f1ba 0f00 	cmp.w	sl, #0
 801c480:	d016      	beq.n	801c4b0 <_strtod_l+0x988>
 801c482:	f7ff fb34 	bl	801baee <sulp>
 801c486:	ed9d 7b08 	vldr	d7, [sp, #32]
 801c48a:	ee37 7b00 	vadd.f64	d7, d7, d0
 801c48e:	ec59 8b17 	vmov	r8, r9, d7
 801c492:	e7de      	b.n	801c452 <_strtod_l+0x92a>
 801c494:	4013      	ands	r3, r2
 801c496:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801c49a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801c49e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801c4a2:	f04f 38ff 	mov.w	r8, #4294967295
 801c4a6:	e7d4      	b.n	801c452 <_strtod_l+0x92a>
 801c4a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c4aa:	ea13 0f08 	tst.w	r3, r8
 801c4ae:	e7e1      	b.n	801c474 <_strtod_l+0x94c>
 801c4b0:	f7ff fb1d 	bl	801baee <sulp>
 801c4b4:	ed9d 7b08 	vldr	d7, [sp, #32]
 801c4b8:	ee37 7b40 	vsub.f64	d7, d7, d0
 801c4bc:	ed8d 7b06 	vstr	d7, [sp, #24]
 801c4c0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801c4c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4c8:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 801c4cc:	d1c1      	bne.n	801c452 <_strtod_l+0x92a>
 801c4ce:	e5ec      	b.n	801c0aa <_strtod_l+0x582>
 801c4d0:	4631      	mov	r1, r6
 801c4d2:	4628      	mov	r0, r5
 801c4d4:	f002 fa5e 	bl	801e994 <__ratio>
 801c4d8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801c4dc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801c4e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4e4:	d867      	bhi.n	801c5b6 <_strtod_l+0xa8e>
 801c4e6:	f1ba 0f00 	cmp.w	sl, #0
 801c4ea:	d044      	beq.n	801c576 <_strtod_l+0xa4e>
 801c4ec:	4b75      	ldr	r3, [pc, #468]	; (801c6c4 <_strtod_l+0xb9c>)
 801c4ee:	2200      	movs	r2, #0
 801c4f0:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 801c4f4:	4971      	ldr	r1, [pc, #452]	; (801c6bc <_strtod_l+0xb94>)
 801c4f6:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 801c6d0 <_strtod_l+0xba8>
 801c4fa:	ea0b 0001 	and.w	r0, fp, r1
 801c4fe:	4560      	cmp	r0, ip
 801c500:	900d      	str	r0, [sp, #52]	; 0x34
 801c502:	f040 808b 	bne.w	801c61c <_strtod_l+0xaf4>
 801c506:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801c50a:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 801c50e:	ec49 8b10 	vmov	d0, r8, r9
 801c512:	ec43 2b1c 	vmov	d12, r2, r3
 801c516:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 801c51a:	f002 f963 	bl	801e7e4 <__ulp>
 801c51e:	ec49 8b1d 	vmov	d13, r8, r9
 801c522:	eeac db00 	vfma.f64	d13, d12, d0
 801c526:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 801c52a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c52c:	4963      	ldr	r1, [pc, #396]	; (801c6bc <_strtod_l+0xb94>)
 801c52e:	4a66      	ldr	r2, [pc, #408]	; (801c6c8 <_strtod_l+0xba0>)
 801c530:	4019      	ands	r1, r3
 801c532:	4291      	cmp	r1, r2
 801c534:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 801c538:	d947      	bls.n	801c5ca <_strtod_l+0xaa2>
 801c53a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c53c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801c540:	4293      	cmp	r3, r2
 801c542:	d103      	bne.n	801c54c <_strtod_l+0xa24>
 801c544:	9b08      	ldr	r3, [sp, #32]
 801c546:	3301      	adds	r3, #1
 801c548:	f43f ad3a 	beq.w	801bfc0 <_strtod_l+0x498>
 801c54c:	f8df 9170 	ldr.w	r9, [pc, #368]	; 801c6c0 <_strtod_l+0xb98>
 801c550:	f04f 38ff 	mov.w	r8, #4294967295
 801c554:	9918      	ldr	r1, [sp, #96]	; 0x60
 801c556:	4620      	mov	r0, r4
 801c558:	f001 fe18 	bl	801e18c <_Bfree>
 801c55c:	4639      	mov	r1, r7
 801c55e:	4620      	mov	r0, r4
 801c560:	f001 fe14 	bl	801e18c <_Bfree>
 801c564:	4631      	mov	r1, r6
 801c566:	4620      	mov	r0, r4
 801c568:	f001 fe10 	bl	801e18c <_Bfree>
 801c56c:	4629      	mov	r1, r5
 801c56e:	4620      	mov	r0, r4
 801c570:	f001 fe0c 	bl	801e18c <_Bfree>
 801c574:	e60f      	b.n	801c196 <_strtod_l+0x66e>
 801c576:	f1b8 0f00 	cmp.w	r8, #0
 801c57a:	d112      	bne.n	801c5a2 <_strtod_l+0xa7a>
 801c57c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c580:	b9b3      	cbnz	r3, 801c5b0 <_strtod_l+0xa88>
 801c582:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801c586:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801c58a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c58e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 801c592:	d401      	bmi.n	801c598 <_strtod_l+0xa70>
 801c594:	ee20 8b08 	vmul.f64	d8, d0, d8
 801c598:	eeb1 7b48 	vneg.f64	d7, d8
 801c59c:	ec53 2b17 	vmov	r2, r3, d7
 801c5a0:	e7a8      	b.n	801c4f4 <_strtod_l+0x9cc>
 801c5a2:	f1b8 0f01 	cmp.w	r8, #1
 801c5a6:	d103      	bne.n	801c5b0 <_strtod_l+0xa88>
 801c5a8:	f1b9 0f00 	cmp.w	r9, #0
 801c5ac:	f43f ad7d 	beq.w	801c0aa <_strtod_l+0x582>
 801c5b0:	4b46      	ldr	r3, [pc, #280]	; (801c6cc <_strtod_l+0xba4>)
 801c5b2:	2200      	movs	r2, #0
 801c5b4:	e79c      	b.n	801c4f0 <_strtod_l+0x9c8>
 801c5b6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 801c5ba:	ee20 8b08 	vmul.f64	d8, d0, d8
 801c5be:	f1ba 0f00 	cmp.w	sl, #0
 801c5c2:	d0e9      	beq.n	801c598 <_strtod_l+0xa70>
 801c5c4:	ec53 2b18 	vmov	r2, r3, d8
 801c5c8:	e794      	b.n	801c4f4 <_strtod_l+0x9cc>
 801c5ca:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801c5ce:	9b04      	ldr	r3, [sp, #16]
 801c5d0:	2b00      	cmp	r3, #0
 801c5d2:	d1bf      	bne.n	801c554 <_strtod_l+0xa2c>
 801c5d4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801c5d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c5da:	0d1b      	lsrs	r3, r3, #20
 801c5dc:	051b      	lsls	r3, r3, #20
 801c5de:	429a      	cmp	r2, r3
 801c5e0:	d1b8      	bne.n	801c554 <_strtod_l+0xa2c>
 801c5e2:	ec51 0b18 	vmov	r0, r1, d8
 801c5e6:	f7e4 f8b7 	bl	8000758 <__aeabi_d2lz>
 801c5ea:	f7e4 f86f 	bl	80006cc <__aeabi_l2d>
 801c5ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c5f2:	ec41 0b17 	vmov	d7, r0, r1
 801c5f6:	ea43 0308 	orr.w	r3, r3, r8
 801c5fa:	ea53 030a 	orrs.w	r3, r3, sl
 801c5fe:	ee38 8b47 	vsub.f64	d8, d8, d7
 801c602:	d03e      	beq.n	801c682 <_strtod_l+0xb5a>
 801c604:	eeb4 8bca 	vcmpe.f64	d8, d10
 801c608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c60c:	f53f ace2 	bmi.w	801bfd4 <_strtod_l+0x4ac>
 801c610:	eeb4 8bcb 	vcmpe.f64	d8, d11
 801c614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c618:	dd9c      	ble.n	801c554 <_strtod_l+0xa2c>
 801c61a:	e4db      	b.n	801bfd4 <_strtod_l+0x4ac>
 801c61c:	9904      	ldr	r1, [sp, #16]
 801c61e:	b301      	cbz	r1, 801c662 <_strtod_l+0xb3a>
 801c620:	990d      	ldr	r1, [sp, #52]	; 0x34
 801c622:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 801c626:	d81c      	bhi.n	801c662 <_strtod_l+0xb3a>
 801c628:	ed9f 7b21 	vldr	d7, [pc, #132]	; 801c6b0 <_strtod_l+0xb88>
 801c62c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801c630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c634:	d811      	bhi.n	801c65a <_strtod_l+0xb32>
 801c636:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 801c63a:	ee18 3a10 	vmov	r3, s16
 801c63e:	2b01      	cmp	r3, #1
 801c640:	bf38      	it	cc
 801c642:	2301      	movcc	r3, #1
 801c644:	ee08 3a10 	vmov	s16, r3
 801c648:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 801c64c:	f1ba 0f00 	cmp.w	sl, #0
 801c650:	d114      	bne.n	801c67c <_strtod_l+0xb54>
 801c652:	eeb1 7b48 	vneg.f64	d7, d8
 801c656:	ec53 2b17 	vmov	r2, r3, d7
 801c65a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801c65c:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 801c660:	1a0b      	subs	r3, r1, r0
 801c662:	ed9d 0b08 	vldr	d0, [sp, #32]
 801c666:	ec43 2b1c 	vmov	d12, r2, r3
 801c66a:	f002 f8bb 	bl	801e7e4 <__ulp>
 801c66e:	ed9d 7b08 	vldr	d7, [sp, #32]
 801c672:	eeac 7b00 	vfma.f64	d7, d12, d0
 801c676:	ec59 8b17 	vmov	r8, r9, d7
 801c67a:	e7a8      	b.n	801c5ce <_strtod_l+0xaa6>
 801c67c:	ec53 2b18 	vmov	r2, r3, d8
 801c680:	e7eb      	b.n	801c65a <_strtod_l+0xb32>
 801c682:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801c686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c68a:	f57f af63 	bpl.w	801c554 <_strtod_l+0xa2c>
 801c68e:	e4a1      	b.n	801bfd4 <_strtod_l+0x4ac>
 801c690:	2300      	movs	r3, #0
 801c692:	930b      	str	r3, [sp, #44]	; 0x2c
 801c694:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c696:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c698:	6013      	str	r3, [r2, #0]
 801c69a:	f7ff ba8d 	b.w	801bbb8 <_strtod_l+0x90>
 801c69e:	2a65      	cmp	r2, #101	; 0x65
 801c6a0:	f43f ab89 	beq.w	801bdb6 <_strtod_l+0x28e>
 801c6a4:	2a45      	cmp	r2, #69	; 0x45
 801c6a6:	f43f ab86 	beq.w	801bdb6 <_strtod_l+0x28e>
 801c6aa:	2101      	movs	r1, #1
 801c6ac:	f7ff bbbe 	b.w	801be2c <_strtod_l+0x304>
 801c6b0:	ffc00000 	.word	0xffc00000
 801c6b4:	41dfffff 	.word	0x41dfffff
 801c6b8:	000fffff 	.word	0x000fffff
 801c6bc:	7ff00000 	.word	0x7ff00000
 801c6c0:	7fefffff 	.word	0x7fefffff
 801c6c4:	3ff00000 	.word	0x3ff00000
 801c6c8:	7c9fffff 	.word	0x7c9fffff
 801c6cc:	bff00000 	.word	0xbff00000
 801c6d0:	7fe00000 	.word	0x7fe00000

0801c6d4 <_strtod_r>:
 801c6d4:	4b01      	ldr	r3, [pc, #4]	; (801c6dc <_strtod_r+0x8>)
 801c6d6:	f7ff ba27 	b.w	801bb28 <_strtod_l>
 801c6da:	bf00      	nop
 801c6dc:	2400a190 	.word	0x2400a190

0801c6e0 <_strtol_l.isra.0>:
 801c6e0:	2b01      	cmp	r3, #1
 801c6e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c6e6:	d001      	beq.n	801c6ec <_strtol_l.isra.0+0xc>
 801c6e8:	2b24      	cmp	r3, #36	; 0x24
 801c6ea:	d906      	bls.n	801c6fa <_strtol_l.isra.0+0x1a>
 801c6ec:	f7fe f81c 	bl	801a728 <__errno>
 801c6f0:	2316      	movs	r3, #22
 801c6f2:	6003      	str	r3, [r0, #0]
 801c6f4:	2000      	movs	r0, #0
 801c6f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c6fa:	4f3a      	ldr	r7, [pc, #232]	; (801c7e4 <_strtol_l.isra.0+0x104>)
 801c6fc:	468e      	mov	lr, r1
 801c6fe:	4676      	mov	r6, lr
 801c700:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801c704:	5de5      	ldrb	r5, [r4, r7]
 801c706:	f015 0508 	ands.w	r5, r5, #8
 801c70a:	d1f8      	bne.n	801c6fe <_strtol_l.isra.0+0x1e>
 801c70c:	2c2d      	cmp	r4, #45	; 0x2d
 801c70e:	d134      	bne.n	801c77a <_strtol_l.isra.0+0x9a>
 801c710:	f89e 4000 	ldrb.w	r4, [lr]
 801c714:	f04f 0801 	mov.w	r8, #1
 801c718:	f106 0e02 	add.w	lr, r6, #2
 801c71c:	2b00      	cmp	r3, #0
 801c71e:	d05c      	beq.n	801c7da <_strtol_l.isra.0+0xfa>
 801c720:	2b10      	cmp	r3, #16
 801c722:	d10c      	bne.n	801c73e <_strtol_l.isra.0+0x5e>
 801c724:	2c30      	cmp	r4, #48	; 0x30
 801c726:	d10a      	bne.n	801c73e <_strtol_l.isra.0+0x5e>
 801c728:	f89e 4000 	ldrb.w	r4, [lr]
 801c72c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801c730:	2c58      	cmp	r4, #88	; 0x58
 801c732:	d14d      	bne.n	801c7d0 <_strtol_l.isra.0+0xf0>
 801c734:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801c738:	2310      	movs	r3, #16
 801c73a:	f10e 0e02 	add.w	lr, lr, #2
 801c73e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801c742:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c746:	2600      	movs	r6, #0
 801c748:	fbbc f9f3 	udiv	r9, ip, r3
 801c74c:	4635      	mov	r5, r6
 801c74e:	fb03 ca19 	mls	sl, r3, r9, ip
 801c752:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801c756:	2f09      	cmp	r7, #9
 801c758:	d818      	bhi.n	801c78c <_strtol_l.isra.0+0xac>
 801c75a:	463c      	mov	r4, r7
 801c75c:	42a3      	cmp	r3, r4
 801c75e:	dd24      	ble.n	801c7aa <_strtol_l.isra.0+0xca>
 801c760:	2e00      	cmp	r6, #0
 801c762:	db1f      	blt.n	801c7a4 <_strtol_l.isra.0+0xc4>
 801c764:	45a9      	cmp	r9, r5
 801c766:	d31d      	bcc.n	801c7a4 <_strtol_l.isra.0+0xc4>
 801c768:	d101      	bne.n	801c76e <_strtol_l.isra.0+0x8e>
 801c76a:	45a2      	cmp	sl, r4
 801c76c:	db1a      	blt.n	801c7a4 <_strtol_l.isra.0+0xc4>
 801c76e:	fb05 4503 	mla	r5, r5, r3, r4
 801c772:	2601      	movs	r6, #1
 801c774:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801c778:	e7eb      	b.n	801c752 <_strtol_l.isra.0+0x72>
 801c77a:	2c2b      	cmp	r4, #43	; 0x2b
 801c77c:	bf08      	it	eq
 801c77e:	f89e 4000 	ldrbeq.w	r4, [lr]
 801c782:	46a8      	mov	r8, r5
 801c784:	bf08      	it	eq
 801c786:	f106 0e02 	addeq.w	lr, r6, #2
 801c78a:	e7c7      	b.n	801c71c <_strtol_l.isra.0+0x3c>
 801c78c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801c790:	2f19      	cmp	r7, #25
 801c792:	d801      	bhi.n	801c798 <_strtol_l.isra.0+0xb8>
 801c794:	3c37      	subs	r4, #55	; 0x37
 801c796:	e7e1      	b.n	801c75c <_strtol_l.isra.0+0x7c>
 801c798:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801c79c:	2f19      	cmp	r7, #25
 801c79e:	d804      	bhi.n	801c7aa <_strtol_l.isra.0+0xca>
 801c7a0:	3c57      	subs	r4, #87	; 0x57
 801c7a2:	e7db      	b.n	801c75c <_strtol_l.isra.0+0x7c>
 801c7a4:	f04f 36ff 	mov.w	r6, #4294967295
 801c7a8:	e7e4      	b.n	801c774 <_strtol_l.isra.0+0x94>
 801c7aa:	2e00      	cmp	r6, #0
 801c7ac:	da05      	bge.n	801c7ba <_strtol_l.isra.0+0xda>
 801c7ae:	2322      	movs	r3, #34	; 0x22
 801c7b0:	6003      	str	r3, [r0, #0]
 801c7b2:	4665      	mov	r5, ip
 801c7b4:	b942      	cbnz	r2, 801c7c8 <_strtol_l.isra.0+0xe8>
 801c7b6:	4628      	mov	r0, r5
 801c7b8:	e79d      	b.n	801c6f6 <_strtol_l.isra.0+0x16>
 801c7ba:	f1b8 0f00 	cmp.w	r8, #0
 801c7be:	d000      	beq.n	801c7c2 <_strtol_l.isra.0+0xe2>
 801c7c0:	426d      	negs	r5, r5
 801c7c2:	2a00      	cmp	r2, #0
 801c7c4:	d0f7      	beq.n	801c7b6 <_strtol_l.isra.0+0xd6>
 801c7c6:	b10e      	cbz	r6, 801c7cc <_strtol_l.isra.0+0xec>
 801c7c8:	f10e 31ff 	add.w	r1, lr, #4294967295
 801c7cc:	6011      	str	r1, [r2, #0]
 801c7ce:	e7f2      	b.n	801c7b6 <_strtol_l.isra.0+0xd6>
 801c7d0:	2430      	movs	r4, #48	; 0x30
 801c7d2:	2b00      	cmp	r3, #0
 801c7d4:	d1b3      	bne.n	801c73e <_strtol_l.isra.0+0x5e>
 801c7d6:	2308      	movs	r3, #8
 801c7d8:	e7b1      	b.n	801c73e <_strtol_l.isra.0+0x5e>
 801c7da:	2c30      	cmp	r4, #48	; 0x30
 801c7dc:	d0a4      	beq.n	801c728 <_strtol_l.isra.0+0x48>
 801c7de:	230a      	movs	r3, #10
 801c7e0:	e7ad      	b.n	801c73e <_strtol_l.isra.0+0x5e>
 801c7e2:	bf00      	nop
 801c7e4:	080286d9 	.word	0x080286d9

0801c7e8 <_strtol_r>:
 801c7e8:	f7ff bf7a 	b.w	801c6e0 <_strtol_l.isra.0>

0801c7ec <strtol>:
 801c7ec:	4613      	mov	r3, r2
 801c7ee:	460a      	mov	r2, r1
 801c7f0:	4601      	mov	r1, r0
 801c7f2:	4802      	ldr	r0, [pc, #8]	; (801c7fc <strtol+0x10>)
 801c7f4:	6800      	ldr	r0, [r0, #0]
 801c7f6:	f7ff bf73 	b.w	801c6e0 <_strtol_l.isra.0>
 801c7fa:	bf00      	nop
 801c7fc:	2400a128 	.word	0x2400a128

0801c800 <__swbuf_r>:
 801c800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c802:	460e      	mov	r6, r1
 801c804:	4614      	mov	r4, r2
 801c806:	4605      	mov	r5, r0
 801c808:	b118      	cbz	r0, 801c812 <__swbuf_r+0x12>
 801c80a:	6983      	ldr	r3, [r0, #24]
 801c80c:	b90b      	cbnz	r3, 801c812 <__swbuf_r+0x12>
 801c80e:	f000 ffe7 	bl	801d7e0 <__sinit>
 801c812:	4b21      	ldr	r3, [pc, #132]	; (801c898 <__swbuf_r+0x98>)
 801c814:	429c      	cmp	r4, r3
 801c816:	d12b      	bne.n	801c870 <__swbuf_r+0x70>
 801c818:	686c      	ldr	r4, [r5, #4]
 801c81a:	69a3      	ldr	r3, [r4, #24]
 801c81c:	60a3      	str	r3, [r4, #8]
 801c81e:	89a3      	ldrh	r3, [r4, #12]
 801c820:	071a      	lsls	r2, r3, #28
 801c822:	d52f      	bpl.n	801c884 <__swbuf_r+0x84>
 801c824:	6923      	ldr	r3, [r4, #16]
 801c826:	b36b      	cbz	r3, 801c884 <__swbuf_r+0x84>
 801c828:	6923      	ldr	r3, [r4, #16]
 801c82a:	6820      	ldr	r0, [r4, #0]
 801c82c:	1ac0      	subs	r0, r0, r3
 801c82e:	6963      	ldr	r3, [r4, #20]
 801c830:	b2f6      	uxtb	r6, r6
 801c832:	4283      	cmp	r3, r0
 801c834:	4637      	mov	r7, r6
 801c836:	dc04      	bgt.n	801c842 <__swbuf_r+0x42>
 801c838:	4621      	mov	r1, r4
 801c83a:	4628      	mov	r0, r5
 801c83c:	f000 ff3c 	bl	801d6b8 <_fflush_r>
 801c840:	bb30      	cbnz	r0, 801c890 <__swbuf_r+0x90>
 801c842:	68a3      	ldr	r3, [r4, #8]
 801c844:	3b01      	subs	r3, #1
 801c846:	60a3      	str	r3, [r4, #8]
 801c848:	6823      	ldr	r3, [r4, #0]
 801c84a:	1c5a      	adds	r2, r3, #1
 801c84c:	6022      	str	r2, [r4, #0]
 801c84e:	701e      	strb	r6, [r3, #0]
 801c850:	6963      	ldr	r3, [r4, #20]
 801c852:	3001      	adds	r0, #1
 801c854:	4283      	cmp	r3, r0
 801c856:	d004      	beq.n	801c862 <__swbuf_r+0x62>
 801c858:	89a3      	ldrh	r3, [r4, #12]
 801c85a:	07db      	lsls	r3, r3, #31
 801c85c:	d506      	bpl.n	801c86c <__swbuf_r+0x6c>
 801c85e:	2e0a      	cmp	r6, #10
 801c860:	d104      	bne.n	801c86c <__swbuf_r+0x6c>
 801c862:	4621      	mov	r1, r4
 801c864:	4628      	mov	r0, r5
 801c866:	f000 ff27 	bl	801d6b8 <_fflush_r>
 801c86a:	b988      	cbnz	r0, 801c890 <__swbuf_r+0x90>
 801c86c:	4638      	mov	r0, r7
 801c86e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c870:	4b0a      	ldr	r3, [pc, #40]	; (801c89c <__swbuf_r+0x9c>)
 801c872:	429c      	cmp	r4, r3
 801c874:	d101      	bne.n	801c87a <__swbuf_r+0x7a>
 801c876:	68ac      	ldr	r4, [r5, #8]
 801c878:	e7cf      	b.n	801c81a <__swbuf_r+0x1a>
 801c87a:	4b09      	ldr	r3, [pc, #36]	; (801c8a0 <__swbuf_r+0xa0>)
 801c87c:	429c      	cmp	r4, r3
 801c87e:	bf08      	it	eq
 801c880:	68ec      	ldreq	r4, [r5, #12]
 801c882:	e7ca      	b.n	801c81a <__swbuf_r+0x1a>
 801c884:	4621      	mov	r1, r4
 801c886:	4628      	mov	r0, r5
 801c888:	f000 f80c 	bl	801c8a4 <__swsetup_r>
 801c88c:	2800      	cmp	r0, #0
 801c88e:	d0cb      	beq.n	801c828 <__swbuf_r+0x28>
 801c890:	f04f 37ff 	mov.w	r7, #4294967295
 801c894:	e7ea      	b.n	801c86c <__swbuf_r+0x6c>
 801c896:	bf00      	nop
 801c898:	08028890 	.word	0x08028890
 801c89c:	080288b0 	.word	0x080288b0
 801c8a0:	08028870 	.word	0x08028870

0801c8a4 <__swsetup_r>:
 801c8a4:	4b32      	ldr	r3, [pc, #200]	; (801c970 <__swsetup_r+0xcc>)
 801c8a6:	b570      	push	{r4, r5, r6, lr}
 801c8a8:	681d      	ldr	r5, [r3, #0]
 801c8aa:	4606      	mov	r6, r0
 801c8ac:	460c      	mov	r4, r1
 801c8ae:	b125      	cbz	r5, 801c8ba <__swsetup_r+0x16>
 801c8b0:	69ab      	ldr	r3, [r5, #24]
 801c8b2:	b913      	cbnz	r3, 801c8ba <__swsetup_r+0x16>
 801c8b4:	4628      	mov	r0, r5
 801c8b6:	f000 ff93 	bl	801d7e0 <__sinit>
 801c8ba:	4b2e      	ldr	r3, [pc, #184]	; (801c974 <__swsetup_r+0xd0>)
 801c8bc:	429c      	cmp	r4, r3
 801c8be:	d10f      	bne.n	801c8e0 <__swsetup_r+0x3c>
 801c8c0:	686c      	ldr	r4, [r5, #4]
 801c8c2:	89a3      	ldrh	r3, [r4, #12]
 801c8c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c8c8:	0719      	lsls	r1, r3, #28
 801c8ca:	d42c      	bmi.n	801c926 <__swsetup_r+0x82>
 801c8cc:	06dd      	lsls	r5, r3, #27
 801c8ce:	d411      	bmi.n	801c8f4 <__swsetup_r+0x50>
 801c8d0:	2309      	movs	r3, #9
 801c8d2:	6033      	str	r3, [r6, #0]
 801c8d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c8d8:	81a3      	strh	r3, [r4, #12]
 801c8da:	f04f 30ff 	mov.w	r0, #4294967295
 801c8de:	e03e      	b.n	801c95e <__swsetup_r+0xba>
 801c8e0:	4b25      	ldr	r3, [pc, #148]	; (801c978 <__swsetup_r+0xd4>)
 801c8e2:	429c      	cmp	r4, r3
 801c8e4:	d101      	bne.n	801c8ea <__swsetup_r+0x46>
 801c8e6:	68ac      	ldr	r4, [r5, #8]
 801c8e8:	e7eb      	b.n	801c8c2 <__swsetup_r+0x1e>
 801c8ea:	4b24      	ldr	r3, [pc, #144]	; (801c97c <__swsetup_r+0xd8>)
 801c8ec:	429c      	cmp	r4, r3
 801c8ee:	bf08      	it	eq
 801c8f0:	68ec      	ldreq	r4, [r5, #12]
 801c8f2:	e7e6      	b.n	801c8c2 <__swsetup_r+0x1e>
 801c8f4:	0758      	lsls	r0, r3, #29
 801c8f6:	d512      	bpl.n	801c91e <__swsetup_r+0x7a>
 801c8f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c8fa:	b141      	cbz	r1, 801c90e <__swsetup_r+0x6a>
 801c8fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c900:	4299      	cmp	r1, r3
 801c902:	d002      	beq.n	801c90a <__swsetup_r+0x66>
 801c904:	4630      	mov	r0, r6
 801c906:	f7fd ff8b 	bl	801a820 <_free_r>
 801c90a:	2300      	movs	r3, #0
 801c90c:	6363      	str	r3, [r4, #52]	; 0x34
 801c90e:	89a3      	ldrh	r3, [r4, #12]
 801c910:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c914:	81a3      	strh	r3, [r4, #12]
 801c916:	2300      	movs	r3, #0
 801c918:	6063      	str	r3, [r4, #4]
 801c91a:	6923      	ldr	r3, [r4, #16]
 801c91c:	6023      	str	r3, [r4, #0]
 801c91e:	89a3      	ldrh	r3, [r4, #12]
 801c920:	f043 0308 	orr.w	r3, r3, #8
 801c924:	81a3      	strh	r3, [r4, #12]
 801c926:	6923      	ldr	r3, [r4, #16]
 801c928:	b94b      	cbnz	r3, 801c93e <__swsetup_r+0x9a>
 801c92a:	89a3      	ldrh	r3, [r4, #12]
 801c92c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c934:	d003      	beq.n	801c93e <__swsetup_r+0x9a>
 801c936:	4621      	mov	r1, r4
 801c938:	4630      	mov	r0, r6
 801c93a:	f001 fb89 	bl	801e050 <__smakebuf_r>
 801c93e:	89a0      	ldrh	r0, [r4, #12]
 801c940:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c944:	f010 0301 	ands.w	r3, r0, #1
 801c948:	d00a      	beq.n	801c960 <__swsetup_r+0xbc>
 801c94a:	2300      	movs	r3, #0
 801c94c:	60a3      	str	r3, [r4, #8]
 801c94e:	6963      	ldr	r3, [r4, #20]
 801c950:	425b      	negs	r3, r3
 801c952:	61a3      	str	r3, [r4, #24]
 801c954:	6923      	ldr	r3, [r4, #16]
 801c956:	b943      	cbnz	r3, 801c96a <__swsetup_r+0xc6>
 801c958:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c95c:	d1ba      	bne.n	801c8d4 <__swsetup_r+0x30>
 801c95e:	bd70      	pop	{r4, r5, r6, pc}
 801c960:	0781      	lsls	r1, r0, #30
 801c962:	bf58      	it	pl
 801c964:	6963      	ldrpl	r3, [r4, #20]
 801c966:	60a3      	str	r3, [r4, #8]
 801c968:	e7f4      	b.n	801c954 <__swsetup_r+0xb0>
 801c96a:	2000      	movs	r0, #0
 801c96c:	e7f7      	b.n	801c95e <__swsetup_r+0xba>
 801c96e:	bf00      	nop
 801c970:	2400a128 	.word	0x2400a128
 801c974:	08028890 	.word	0x08028890
 801c978:	080288b0 	.word	0x080288b0
 801c97c:	08028870 	.word	0x08028870

0801c980 <abort>:
 801c980:	b508      	push	{r3, lr}
 801c982:	2006      	movs	r0, #6
 801c984:	f002 fa40 	bl	801ee08 <raise>
 801c988:	2001      	movs	r0, #1
 801c98a:	f7e5 fa43 	bl	8001e14 <_exit>

0801c98e <quorem>:
 801c98e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c992:	6903      	ldr	r3, [r0, #16]
 801c994:	690c      	ldr	r4, [r1, #16]
 801c996:	42a3      	cmp	r3, r4
 801c998:	4607      	mov	r7, r0
 801c99a:	f2c0 8081 	blt.w	801caa0 <quorem+0x112>
 801c99e:	3c01      	subs	r4, #1
 801c9a0:	f101 0814 	add.w	r8, r1, #20
 801c9a4:	f100 0514 	add.w	r5, r0, #20
 801c9a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c9ac:	9301      	str	r3, [sp, #4]
 801c9ae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801c9b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c9b6:	3301      	adds	r3, #1
 801c9b8:	429a      	cmp	r2, r3
 801c9ba:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801c9be:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801c9c2:	fbb2 f6f3 	udiv	r6, r2, r3
 801c9c6:	d331      	bcc.n	801ca2c <quorem+0x9e>
 801c9c8:	f04f 0e00 	mov.w	lr, #0
 801c9cc:	4640      	mov	r0, r8
 801c9ce:	46ac      	mov	ip, r5
 801c9d0:	46f2      	mov	sl, lr
 801c9d2:	f850 2b04 	ldr.w	r2, [r0], #4
 801c9d6:	b293      	uxth	r3, r2
 801c9d8:	fb06 e303 	mla	r3, r6, r3, lr
 801c9dc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801c9e0:	b29b      	uxth	r3, r3
 801c9e2:	ebaa 0303 	sub.w	r3, sl, r3
 801c9e6:	0c12      	lsrs	r2, r2, #16
 801c9e8:	f8dc a000 	ldr.w	sl, [ip]
 801c9ec:	fb06 e202 	mla	r2, r6, r2, lr
 801c9f0:	fa13 f38a 	uxtah	r3, r3, sl
 801c9f4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801c9f8:	fa1f fa82 	uxth.w	sl, r2
 801c9fc:	f8dc 2000 	ldr.w	r2, [ip]
 801ca00:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801ca04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801ca08:	b29b      	uxth	r3, r3
 801ca0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ca0e:	4581      	cmp	r9, r0
 801ca10:	f84c 3b04 	str.w	r3, [ip], #4
 801ca14:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801ca18:	d2db      	bcs.n	801c9d2 <quorem+0x44>
 801ca1a:	f855 300b 	ldr.w	r3, [r5, fp]
 801ca1e:	b92b      	cbnz	r3, 801ca2c <quorem+0x9e>
 801ca20:	9b01      	ldr	r3, [sp, #4]
 801ca22:	3b04      	subs	r3, #4
 801ca24:	429d      	cmp	r5, r3
 801ca26:	461a      	mov	r2, r3
 801ca28:	d32e      	bcc.n	801ca88 <quorem+0xfa>
 801ca2a:	613c      	str	r4, [r7, #16]
 801ca2c:	4638      	mov	r0, r7
 801ca2e:	f001 fe35 	bl	801e69c <__mcmp>
 801ca32:	2800      	cmp	r0, #0
 801ca34:	db24      	blt.n	801ca80 <quorem+0xf2>
 801ca36:	3601      	adds	r6, #1
 801ca38:	4628      	mov	r0, r5
 801ca3a:	f04f 0c00 	mov.w	ip, #0
 801ca3e:	f858 2b04 	ldr.w	r2, [r8], #4
 801ca42:	f8d0 e000 	ldr.w	lr, [r0]
 801ca46:	b293      	uxth	r3, r2
 801ca48:	ebac 0303 	sub.w	r3, ip, r3
 801ca4c:	0c12      	lsrs	r2, r2, #16
 801ca4e:	fa13 f38e 	uxtah	r3, r3, lr
 801ca52:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801ca56:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801ca5a:	b29b      	uxth	r3, r3
 801ca5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ca60:	45c1      	cmp	r9, r8
 801ca62:	f840 3b04 	str.w	r3, [r0], #4
 801ca66:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801ca6a:	d2e8      	bcs.n	801ca3e <quorem+0xb0>
 801ca6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ca70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ca74:	b922      	cbnz	r2, 801ca80 <quorem+0xf2>
 801ca76:	3b04      	subs	r3, #4
 801ca78:	429d      	cmp	r5, r3
 801ca7a:	461a      	mov	r2, r3
 801ca7c:	d30a      	bcc.n	801ca94 <quorem+0x106>
 801ca7e:	613c      	str	r4, [r7, #16]
 801ca80:	4630      	mov	r0, r6
 801ca82:	b003      	add	sp, #12
 801ca84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca88:	6812      	ldr	r2, [r2, #0]
 801ca8a:	3b04      	subs	r3, #4
 801ca8c:	2a00      	cmp	r2, #0
 801ca8e:	d1cc      	bne.n	801ca2a <quorem+0x9c>
 801ca90:	3c01      	subs	r4, #1
 801ca92:	e7c7      	b.n	801ca24 <quorem+0x96>
 801ca94:	6812      	ldr	r2, [r2, #0]
 801ca96:	3b04      	subs	r3, #4
 801ca98:	2a00      	cmp	r2, #0
 801ca9a:	d1f0      	bne.n	801ca7e <quorem+0xf0>
 801ca9c:	3c01      	subs	r4, #1
 801ca9e:	e7eb      	b.n	801ca78 <quorem+0xea>
 801caa0:	2000      	movs	r0, #0
 801caa2:	e7ee      	b.n	801ca82 <quorem+0xf4>
 801caa4:	0000      	movs	r0, r0
	...

0801caa8 <_dtoa_r>:
 801caa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801caac:	ec59 8b10 	vmov	r8, r9, d0
 801cab0:	b095      	sub	sp, #84	; 0x54
 801cab2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801cab4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801cab6:	9107      	str	r1, [sp, #28]
 801cab8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801cabc:	4606      	mov	r6, r0
 801cabe:	9209      	str	r2, [sp, #36]	; 0x24
 801cac0:	9310      	str	r3, [sp, #64]	; 0x40
 801cac2:	b975      	cbnz	r5, 801cae2 <_dtoa_r+0x3a>
 801cac4:	2010      	movs	r0, #16
 801cac6:	f7fd fe6b 	bl	801a7a0 <malloc>
 801caca:	4602      	mov	r2, r0
 801cacc:	6270      	str	r0, [r6, #36]	; 0x24
 801cace:	b920      	cbnz	r0, 801cada <_dtoa_r+0x32>
 801cad0:	4bab      	ldr	r3, [pc, #684]	; (801cd80 <_dtoa_r+0x2d8>)
 801cad2:	21ea      	movs	r1, #234	; 0xea
 801cad4:	48ab      	ldr	r0, [pc, #684]	; (801cd84 <_dtoa_r+0x2dc>)
 801cad6:	f7fd fe05 	bl	801a6e4 <__assert_func>
 801cada:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801cade:	6005      	str	r5, [r0, #0]
 801cae0:	60c5      	str	r5, [r0, #12]
 801cae2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801cae4:	6819      	ldr	r1, [r3, #0]
 801cae6:	b151      	cbz	r1, 801cafe <_dtoa_r+0x56>
 801cae8:	685a      	ldr	r2, [r3, #4]
 801caea:	604a      	str	r2, [r1, #4]
 801caec:	2301      	movs	r3, #1
 801caee:	4093      	lsls	r3, r2
 801caf0:	608b      	str	r3, [r1, #8]
 801caf2:	4630      	mov	r0, r6
 801caf4:	f001 fb4a 	bl	801e18c <_Bfree>
 801caf8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801cafa:	2200      	movs	r2, #0
 801cafc:	601a      	str	r2, [r3, #0]
 801cafe:	f1b9 0300 	subs.w	r3, r9, #0
 801cb02:	bfbb      	ittet	lt
 801cb04:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801cb08:	9303      	strlt	r3, [sp, #12]
 801cb0a:	2300      	movge	r3, #0
 801cb0c:	2201      	movlt	r2, #1
 801cb0e:	bfac      	ite	ge
 801cb10:	6023      	strge	r3, [r4, #0]
 801cb12:	6022      	strlt	r2, [r4, #0]
 801cb14:	4b9c      	ldr	r3, [pc, #624]	; (801cd88 <_dtoa_r+0x2e0>)
 801cb16:	9c03      	ldr	r4, [sp, #12]
 801cb18:	43a3      	bics	r3, r4
 801cb1a:	d11a      	bne.n	801cb52 <_dtoa_r+0xaa>
 801cb1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cb1e:	f242 730f 	movw	r3, #9999	; 0x270f
 801cb22:	6013      	str	r3, [r2, #0]
 801cb24:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801cb28:	ea53 0308 	orrs.w	r3, r3, r8
 801cb2c:	f000 8512 	beq.w	801d554 <_dtoa_r+0xaac>
 801cb30:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801cb32:	b953      	cbnz	r3, 801cb4a <_dtoa_r+0xa2>
 801cb34:	4b95      	ldr	r3, [pc, #596]	; (801cd8c <_dtoa_r+0x2e4>)
 801cb36:	e01f      	b.n	801cb78 <_dtoa_r+0xd0>
 801cb38:	4b95      	ldr	r3, [pc, #596]	; (801cd90 <_dtoa_r+0x2e8>)
 801cb3a:	9300      	str	r3, [sp, #0]
 801cb3c:	3308      	adds	r3, #8
 801cb3e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801cb40:	6013      	str	r3, [r2, #0]
 801cb42:	9800      	ldr	r0, [sp, #0]
 801cb44:	b015      	add	sp, #84	; 0x54
 801cb46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb4a:	4b90      	ldr	r3, [pc, #576]	; (801cd8c <_dtoa_r+0x2e4>)
 801cb4c:	9300      	str	r3, [sp, #0]
 801cb4e:	3303      	adds	r3, #3
 801cb50:	e7f5      	b.n	801cb3e <_dtoa_r+0x96>
 801cb52:	ed9d 7b02 	vldr	d7, [sp, #8]
 801cb56:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801cb5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb5e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801cb62:	d10b      	bne.n	801cb7c <_dtoa_r+0xd4>
 801cb64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cb66:	2301      	movs	r3, #1
 801cb68:	6013      	str	r3, [r2, #0]
 801cb6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801cb6c:	2b00      	cmp	r3, #0
 801cb6e:	f000 84ee 	beq.w	801d54e <_dtoa_r+0xaa6>
 801cb72:	4888      	ldr	r0, [pc, #544]	; (801cd94 <_dtoa_r+0x2ec>)
 801cb74:	6018      	str	r0, [r3, #0]
 801cb76:	1e43      	subs	r3, r0, #1
 801cb78:	9300      	str	r3, [sp, #0]
 801cb7a:	e7e2      	b.n	801cb42 <_dtoa_r+0x9a>
 801cb7c:	a913      	add	r1, sp, #76	; 0x4c
 801cb7e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801cb82:	aa12      	add	r2, sp, #72	; 0x48
 801cb84:	4630      	mov	r0, r6
 801cb86:	f001 fea9 	bl	801e8dc <__d2b>
 801cb8a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801cb8e:	4605      	mov	r5, r0
 801cb90:	9812      	ldr	r0, [sp, #72]	; 0x48
 801cb92:	2900      	cmp	r1, #0
 801cb94:	d047      	beq.n	801cc26 <_dtoa_r+0x17e>
 801cb96:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801cb98:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801cb9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801cba0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801cba4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801cba8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801cbac:	2400      	movs	r4, #0
 801cbae:	ec43 2b16 	vmov	d6, r2, r3
 801cbb2:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801cbb6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 801cd68 <_dtoa_r+0x2c0>
 801cbba:	ee36 7b47 	vsub.f64	d7, d6, d7
 801cbbe:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 801cd70 <_dtoa_r+0x2c8>
 801cbc2:	eea7 6b05 	vfma.f64	d6, d7, d5
 801cbc6:	eeb0 7b46 	vmov.f64	d7, d6
 801cbca:	ee06 1a90 	vmov	s13, r1
 801cbce:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 801cbd2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 801cd78 <_dtoa_r+0x2d0>
 801cbd6:	eea5 7b06 	vfma.f64	d7, d5, d6
 801cbda:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801cbde:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801cbe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cbe6:	ee16 ba90 	vmov	fp, s13
 801cbea:	9411      	str	r4, [sp, #68]	; 0x44
 801cbec:	d508      	bpl.n	801cc00 <_dtoa_r+0x158>
 801cbee:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801cbf2:	eeb4 6b47 	vcmp.f64	d6, d7
 801cbf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cbfa:	bf18      	it	ne
 801cbfc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801cc00:	f1bb 0f16 	cmp.w	fp, #22
 801cc04:	d832      	bhi.n	801cc6c <_dtoa_r+0x1c4>
 801cc06:	4b64      	ldr	r3, [pc, #400]	; (801cd98 <_dtoa_r+0x2f0>)
 801cc08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801cc0c:	ed93 7b00 	vldr	d7, [r3]
 801cc10:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801cc14:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801cc18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc1c:	d501      	bpl.n	801cc22 <_dtoa_r+0x17a>
 801cc1e:	f10b 3bff 	add.w	fp, fp, #4294967295
 801cc22:	2300      	movs	r3, #0
 801cc24:	e023      	b.n	801cc6e <_dtoa_r+0x1c6>
 801cc26:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801cc28:	4401      	add	r1, r0
 801cc2a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 801cc2e:	2b20      	cmp	r3, #32
 801cc30:	bfc3      	ittte	gt
 801cc32:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801cc36:	fa04 f303 	lslgt.w	r3, r4, r3
 801cc3a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 801cc3e:	f1c3 0320 	rsble	r3, r3, #32
 801cc42:	bfc6      	itte	gt
 801cc44:	fa28 f804 	lsrgt.w	r8, r8, r4
 801cc48:	ea43 0308 	orrgt.w	r3, r3, r8
 801cc4c:	fa08 f303 	lslle.w	r3, r8, r3
 801cc50:	ee07 3a90 	vmov	s15, r3
 801cc54:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801cc58:	3901      	subs	r1, #1
 801cc5a:	ed8d 7b00 	vstr	d7, [sp]
 801cc5e:	9c01      	ldr	r4, [sp, #4]
 801cc60:	e9dd 2300 	ldrd	r2, r3, [sp]
 801cc64:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 801cc68:	2401      	movs	r4, #1
 801cc6a:	e7a0      	b.n	801cbae <_dtoa_r+0x106>
 801cc6c:	2301      	movs	r3, #1
 801cc6e:	930f      	str	r3, [sp, #60]	; 0x3c
 801cc70:	1a43      	subs	r3, r0, r1
 801cc72:	1e5a      	subs	r2, r3, #1
 801cc74:	bf45      	ittet	mi
 801cc76:	f1c3 0301 	rsbmi	r3, r3, #1
 801cc7a:	9305      	strmi	r3, [sp, #20]
 801cc7c:	2300      	movpl	r3, #0
 801cc7e:	2300      	movmi	r3, #0
 801cc80:	9206      	str	r2, [sp, #24]
 801cc82:	bf54      	ite	pl
 801cc84:	9305      	strpl	r3, [sp, #20]
 801cc86:	9306      	strmi	r3, [sp, #24]
 801cc88:	f1bb 0f00 	cmp.w	fp, #0
 801cc8c:	db18      	blt.n	801ccc0 <_dtoa_r+0x218>
 801cc8e:	9b06      	ldr	r3, [sp, #24]
 801cc90:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801cc94:	445b      	add	r3, fp
 801cc96:	9306      	str	r3, [sp, #24]
 801cc98:	2300      	movs	r3, #0
 801cc9a:	9a07      	ldr	r2, [sp, #28]
 801cc9c:	2a09      	cmp	r2, #9
 801cc9e:	d849      	bhi.n	801cd34 <_dtoa_r+0x28c>
 801cca0:	2a05      	cmp	r2, #5
 801cca2:	bfc4      	itt	gt
 801cca4:	3a04      	subgt	r2, #4
 801cca6:	9207      	strgt	r2, [sp, #28]
 801cca8:	9a07      	ldr	r2, [sp, #28]
 801ccaa:	f1a2 0202 	sub.w	r2, r2, #2
 801ccae:	bfcc      	ite	gt
 801ccb0:	2400      	movgt	r4, #0
 801ccb2:	2401      	movle	r4, #1
 801ccb4:	2a03      	cmp	r2, #3
 801ccb6:	d848      	bhi.n	801cd4a <_dtoa_r+0x2a2>
 801ccb8:	e8df f002 	tbb	[pc, r2]
 801ccbc:	3a2c2e0b 	.word	0x3a2c2e0b
 801ccc0:	9b05      	ldr	r3, [sp, #20]
 801ccc2:	2200      	movs	r2, #0
 801ccc4:	eba3 030b 	sub.w	r3, r3, fp
 801ccc8:	9305      	str	r3, [sp, #20]
 801ccca:	920e      	str	r2, [sp, #56]	; 0x38
 801cccc:	f1cb 0300 	rsb	r3, fp, #0
 801ccd0:	e7e3      	b.n	801cc9a <_dtoa_r+0x1f2>
 801ccd2:	2200      	movs	r2, #0
 801ccd4:	9208      	str	r2, [sp, #32]
 801ccd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ccd8:	2a00      	cmp	r2, #0
 801ccda:	dc39      	bgt.n	801cd50 <_dtoa_r+0x2a8>
 801ccdc:	f04f 0a01 	mov.w	sl, #1
 801cce0:	46d1      	mov	r9, sl
 801cce2:	4652      	mov	r2, sl
 801cce4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801cce8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801ccea:	2100      	movs	r1, #0
 801ccec:	6079      	str	r1, [r7, #4]
 801ccee:	2004      	movs	r0, #4
 801ccf0:	f100 0c14 	add.w	ip, r0, #20
 801ccf4:	4594      	cmp	ip, r2
 801ccf6:	6879      	ldr	r1, [r7, #4]
 801ccf8:	d92f      	bls.n	801cd5a <_dtoa_r+0x2b2>
 801ccfa:	4630      	mov	r0, r6
 801ccfc:	930c      	str	r3, [sp, #48]	; 0x30
 801ccfe:	f001 fa05 	bl	801e10c <_Balloc>
 801cd02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cd04:	9000      	str	r0, [sp, #0]
 801cd06:	4602      	mov	r2, r0
 801cd08:	2800      	cmp	r0, #0
 801cd0a:	d149      	bne.n	801cda0 <_dtoa_r+0x2f8>
 801cd0c:	4b23      	ldr	r3, [pc, #140]	; (801cd9c <_dtoa_r+0x2f4>)
 801cd0e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801cd12:	e6df      	b.n	801cad4 <_dtoa_r+0x2c>
 801cd14:	2201      	movs	r2, #1
 801cd16:	e7dd      	b.n	801ccd4 <_dtoa_r+0x22c>
 801cd18:	2200      	movs	r2, #0
 801cd1a:	9208      	str	r2, [sp, #32]
 801cd1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cd1e:	eb0b 0a02 	add.w	sl, fp, r2
 801cd22:	f10a 0901 	add.w	r9, sl, #1
 801cd26:	464a      	mov	r2, r9
 801cd28:	2a01      	cmp	r2, #1
 801cd2a:	bfb8      	it	lt
 801cd2c:	2201      	movlt	r2, #1
 801cd2e:	e7db      	b.n	801cce8 <_dtoa_r+0x240>
 801cd30:	2201      	movs	r2, #1
 801cd32:	e7f2      	b.n	801cd1a <_dtoa_r+0x272>
 801cd34:	2401      	movs	r4, #1
 801cd36:	2200      	movs	r2, #0
 801cd38:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801cd3c:	f04f 3aff 	mov.w	sl, #4294967295
 801cd40:	2100      	movs	r1, #0
 801cd42:	46d1      	mov	r9, sl
 801cd44:	2212      	movs	r2, #18
 801cd46:	9109      	str	r1, [sp, #36]	; 0x24
 801cd48:	e7ce      	b.n	801cce8 <_dtoa_r+0x240>
 801cd4a:	2201      	movs	r2, #1
 801cd4c:	9208      	str	r2, [sp, #32]
 801cd4e:	e7f5      	b.n	801cd3c <_dtoa_r+0x294>
 801cd50:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 801cd54:	46d1      	mov	r9, sl
 801cd56:	4652      	mov	r2, sl
 801cd58:	e7c6      	b.n	801cce8 <_dtoa_r+0x240>
 801cd5a:	3101      	adds	r1, #1
 801cd5c:	6079      	str	r1, [r7, #4]
 801cd5e:	0040      	lsls	r0, r0, #1
 801cd60:	e7c6      	b.n	801ccf0 <_dtoa_r+0x248>
 801cd62:	bf00      	nop
 801cd64:	f3af 8000 	nop.w
 801cd68:	636f4361 	.word	0x636f4361
 801cd6c:	3fd287a7 	.word	0x3fd287a7
 801cd70:	8b60c8b3 	.word	0x8b60c8b3
 801cd74:	3fc68a28 	.word	0x3fc68a28
 801cd78:	509f79fb 	.word	0x509f79fb
 801cd7c:	3fd34413 	.word	0x3fd34413
 801cd80:	080287e6 	.word	0x080287e6
 801cd84:	080287fd 	.word	0x080287fd
 801cd88:	7ff00000 	.word	0x7ff00000
 801cd8c:	080287e2 	.word	0x080287e2
 801cd90:	080287d9 	.word	0x080287d9
 801cd94:	0802865a 	.word	0x0802865a
 801cd98:	080289d8 	.word	0x080289d8
 801cd9c:	0802885c 	.word	0x0802885c
 801cda0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801cda2:	9900      	ldr	r1, [sp, #0]
 801cda4:	6011      	str	r1, [r2, #0]
 801cda6:	f1b9 0f0e 	cmp.w	r9, #14
 801cdaa:	d872      	bhi.n	801ce92 <_dtoa_r+0x3ea>
 801cdac:	2c00      	cmp	r4, #0
 801cdae:	d070      	beq.n	801ce92 <_dtoa_r+0x3ea>
 801cdb0:	f1bb 0f00 	cmp.w	fp, #0
 801cdb4:	f340 80a6 	ble.w	801cf04 <_dtoa_r+0x45c>
 801cdb8:	49ca      	ldr	r1, [pc, #808]	; (801d0e4 <_dtoa_r+0x63c>)
 801cdba:	f00b 020f 	and.w	r2, fp, #15
 801cdbe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801cdc2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801cdc6:	ed92 7b00 	vldr	d7, [r2]
 801cdca:	ea4f 112b 	mov.w	r1, fp, asr #4
 801cdce:	f000 808d 	beq.w	801ceec <_dtoa_r+0x444>
 801cdd2:	4ac5      	ldr	r2, [pc, #788]	; (801d0e8 <_dtoa_r+0x640>)
 801cdd4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 801cdd8:	ed92 6b08 	vldr	d6, [r2, #32]
 801cddc:	ee85 6b06 	vdiv.f64	d6, d5, d6
 801cde0:	ed8d 6b02 	vstr	d6, [sp, #8]
 801cde4:	f001 010f 	and.w	r1, r1, #15
 801cde8:	2203      	movs	r2, #3
 801cdea:	48bf      	ldr	r0, [pc, #764]	; (801d0e8 <_dtoa_r+0x640>)
 801cdec:	2900      	cmp	r1, #0
 801cdee:	d17f      	bne.n	801cef0 <_dtoa_r+0x448>
 801cdf0:	ed9d 6b02 	vldr	d6, [sp, #8]
 801cdf4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801cdf8:	ed8d 7b02 	vstr	d7, [sp, #8]
 801cdfc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801cdfe:	2900      	cmp	r1, #0
 801ce00:	f000 80b2 	beq.w	801cf68 <_dtoa_r+0x4c0>
 801ce04:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801ce08:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ce0c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801ce10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce14:	f140 80a8 	bpl.w	801cf68 <_dtoa_r+0x4c0>
 801ce18:	f1b9 0f00 	cmp.w	r9, #0
 801ce1c:	f000 80a4 	beq.w	801cf68 <_dtoa_r+0x4c0>
 801ce20:	f1ba 0f00 	cmp.w	sl, #0
 801ce24:	dd31      	ble.n	801ce8a <_dtoa_r+0x3e2>
 801ce26:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801ce2a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ce2e:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ce32:	f10b 37ff 	add.w	r7, fp, #4294967295
 801ce36:	3201      	adds	r2, #1
 801ce38:	4650      	mov	r0, sl
 801ce3a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801ce3e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801ce42:	ee07 2a90 	vmov	s15, r2
 801ce46:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801ce4a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801ce4e:	ed8d 5b02 	vstr	d5, [sp, #8]
 801ce52:	9c03      	ldr	r4, [sp, #12]
 801ce54:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801ce58:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801ce5c:	2800      	cmp	r0, #0
 801ce5e:	f040 8086 	bne.w	801cf6e <_dtoa_r+0x4c6>
 801ce62:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801ce66:	ee36 6b47 	vsub.f64	d6, d6, d7
 801ce6a:	ec42 1b17 	vmov	d7, r1, r2
 801ce6e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ce72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce76:	f300 8272 	bgt.w	801d35e <_dtoa_r+0x8b6>
 801ce7a:	eeb1 7b47 	vneg.f64	d7, d7
 801ce7e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ce82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce86:	f100 8267 	bmi.w	801d358 <_dtoa_r+0x8b0>
 801ce8a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 801ce8e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801ce92:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801ce94:	2a00      	cmp	r2, #0
 801ce96:	f2c0 8129 	blt.w	801d0ec <_dtoa_r+0x644>
 801ce9a:	f1bb 0f0e 	cmp.w	fp, #14
 801ce9e:	f300 8125 	bgt.w	801d0ec <_dtoa_r+0x644>
 801cea2:	4b90      	ldr	r3, [pc, #576]	; (801d0e4 <_dtoa_r+0x63c>)
 801cea4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801cea8:	ed93 6b00 	vldr	d6, [r3]
 801ceac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ceae:	2b00      	cmp	r3, #0
 801ceb0:	f280 80c3 	bge.w	801d03a <_dtoa_r+0x592>
 801ceb4:	f1b9 0f00 	cmp.w	r9, #0
 801ceb8:	f300 80bf 	bgt.w	801d03a <_dtoa_r+0x592>
 801cebc:	f040 824c 	bne.w	801d358 <_dtoa_r+0x8b0>
 801cec0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801cec4:	ee26 6b07 	vmul.f64	d6, d6, d7
 801cec8:	ed9d 7b02 	vldr	d7, [sp, #8]
 801cecc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ced0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ced4:	464c      	mov	r4, r9
 801ced6:	464f      	mov	r7, r9
 801ced8:	f280 8222 	bge.w	801d320 <_dtoa_r+0x878>
 801cedc:	f8dd 8000 	ldr.w	r8, [sp]
 801cee0:	2331      	movs	r3, #49	; 0x31
 801cee2:	f808 3b01 	strb.w	r3, [r8], #1
 801cee6:	f10b 0b01 	add.w	fp, fp, #1
 801ceea:	e21e      	b.n	801d32a <_dtoa_r+0x882>
 801ceec:	2202      	movs	r2, #2
 801ceee:	e77c      	b.n	801cdea <_dtoa_r+0x342>
 801cef0:	07cc      	lsls	r4, r1, #31
 801cef2:	d504      	bpl.n	801cefe <_dtoa_r+0x456>
 801cef4:	ed90 6b00 	vldr	d6, [r0]
 801cef8:	3201      	adds	r2, #1
 801cefa:	ee27 7b06 	vmul.f64	d7, d7, d6
 801cefe:	1049      	asrs	r1, r1, #1
 801cf00:	3008      	adds	r0, #8
 801cf02:	e773      	b.n	801cdec <_dtoa_r+0x344>
 801cf04:	d02e      	beq.n	801cf64 <_dtoa_r+0x4bc>
 801cf06:	f1cb 0100 	rsb	r1, fp, #0
 801cf0a:	4a76      	ldr	r2, [pc, #472]	; (801d0e4 <_dtoa_r+0x63c>)
 801cf0c:	f001 000f 	and.w	r0, r1, #15
 801cf10:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801cf14:	ed92 7b00 	vldr	d7, [r2]
 801cf18:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801cf1c:	ee26 7b07 	vmul.f64	d7, d6, d7
 801cf20:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801cf24:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 801cf28:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801cf2c:	486e      	ldr	r0, [pc, #440]	; (801d0e8 <_dtoa_r+0x640>)
 801cf2e:	1109      	asrs	r1, r1, #4
 801cf30:	2400      	movs	r4, #0
 801cf32:	2202      	movs	r2, #2
 801cf34:	b939      	cbnz	r1, 801cf46 <_dtoa_r+0x49e>
 801cf36:	2c00      	cmp	r4, #0
 801cf38:	f43f af60 	beq.w	801cdfc <_dtoa_r+0x354>
 801cf3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801cf40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801cf44:	e75a      	b.n	801cdfc <_dtoa_r+0x354>
 801cf46:	07cf      	lsls	r7, r1, #31
 801cf48:	d509      	bpl.n	801cf5e <_dtoa_r+0x4b6>
 801cf4a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801cf4e:	ed90 7b00 	vldr	d7, [r0]
 801cf52:	ee26 7b07 	vmul.f64	d7, d6, d7
 801cf56:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801cf5a:	3201      	adds	r2, #1
 801cf5c:	2401      	movs	r4, #1
 801cf5e:	1049      	asrs	r1, r1, #1
 801cf60:	3008      	adds	r0, #8
 801cf62:	e7e7      	b.n	801cf34 <_dtoa_r+0x48c>
 801cf64:	2202      	movs	r2, #2
 801cf66:	e749      	b.n	801cdfc <_dtoa_r+0x354>
 801cf68:	465f      	mov	r7, fp
 801cf6a:	4648      	mov	r0, r9
 801cf6c:	e765      	b.n	801ce3a <_dtoa_r+0x392>
 801cf6e:	ec42 1b17 	vmov	d7, r1, r2
 801cf72:	4a5c      	ldr	r2, [pc, #368]	; (801d0e4 <_dtoa_r+0x63c>)
 801cf74:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801cf78:	ed12 4b02 	vldr	d4, [r2, #-8]
 801cf7c:	9a00      	ldr	r2, [sp, #0]
 801cf7e:	1814      	adds	r4, r2, r0
 801cf80:	9a08      	ldr	r2, [sp, #32]
 801cf82:	b352      	cbz	r2, 801cfda <_dtoa_r+0x532>
 801cf84:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801cf88:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801cf8c:	f8dd 8000 	ldr.w	r8, [sp]
 801cf90:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801cf94:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801cf98:	ee35 7b47 	vsub.f64	d7, d5, d7
 801cf9c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801cfa0:	ee14 2a90 	vmov	r2, s9
 801cfa4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801cfa8:	3230      	adds	r2, #48	; 0x30
 801cfaa:	ee36 6b45 	vsub.f64	d6, d6, d5
 801cfae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801cfb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cfb6:	f808 2b01 	strb.w	r2, [r8], #1
 801cfba:	d439      	bmi.n	801d030 <_dtoa_r+0x588>
 801cfbc:	ee32 5b46 	vsub.f64	d5, d2, d6
 801cfc0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801cfc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cfc8:	d472      	bmi.n	801d0b0 <_dtoa_r+0x608>
 801cfca:	45a0      	cmp	r8, r4
 801cfcc:	f43f af5d 	beq.w	801ce8a <_dtoa_r+0x3e2>
 801cfd0:	ee27 7b03 	vmul.f64	d7, d7, d3
 801cfd4:	ee26 6b03 	vmul.f64	d6, d6, d3
 801cfd8:	e7e0      	b.n	801cf9c <_dtoa_r+0x4f4>
 801cfda:	f8dd 8000 	ldr.w	r8, [sp]
 801cfde:	ee27 7b04 	vmul.f64	d7, d7, d4
 801cfe2:	4621      	mov	r1, r4
 801cfe4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801cfe8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801cfec:	ee14 2a90 	vmov	r2, s9
 801cff0:	3230      	adds	r2, #48	; 0x30
 801cff2:	f808 2b01 	strb.w	r2, [r8], #1
 801cff6:	45a0      	cmp	r8, r4
 801cff8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801cffc:	ee36 6b45 	vsub.f64	d6, d6, d5
 801d000:	d118      	bne.n	801d034 <_dtoa_r+0x58c>
 801d002:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801d006:	ee37 4b05 	vadd.f64	d4, d7, d5
 801d00a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801d00e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d012:	dc4d      	bgt.n	801d0b0 <_dtoa_r+0x608>
 801d014:	ee35 7b47 	vsub.f64	d7, d5, d7
 801d018:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801d01c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d020:	f57f af33 	bpl.w	801ce8a <_dtoa_r+0x3e2>
 801d024:	4688      	mov	r8, r1
 801d026:	3901      	subs	r1, #1
 801d028:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801d02c:	2b30      	cmp	r3, #48	; 0x30
 801d02e:	d0f9      	beq.n	801d024 <_dtoa_r+0x57c>
 801d030:	46bb      	mov	fp, r7
 801d032:	e02a      	b.n	801d08a <_dtoa_r+0x5e2>
 801d034:	ee26 6b03 	vmul.f64	d6, d6, d3
 801d038:	e7d6      	b.n	801cfe8 <_dtoa_r+0x540>
 801d03a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801d03e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801d042:	f8dd 8000 	ldr.w	r8, [sp]
 801d046:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801d04a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801d04e:	ee15 3a10 	vmov	r3, s10
 801d052:	3330      	adds	r3, #48	; 0x30
 801d054:	f808 3b01 	strb.w	r3, [r8], #1
 801d058:	9b00      	ldr	r3, [sp, #0]
 801d05a:	eba8 0303 	sub.w	r3, r8, r3
 801d05e:	4599      	cmp	r9, r3
 801d060:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801d064:	eea3 7b46 	vfms.f64	d7, d3, d6
 801d068:	d133      	bne.n	801d0d2 <_dtoa_r+0x62a>
 801d06a:	ee37 7b07 	vadd.f64	d7, d7, d7
 801d06e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801d072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d076:	dc1a      	bgt.n	801d0ae <_dtoa_r+0x606>
 801d078:	eeb4 7b46 	vcmp.f64	d7, d6
 801d07c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d080:	d103      	bne.n	801d08a <_dtoa_r+0x5e2>
 801d082:	ee15 3a10 	vmov	r3, s10
 801d086:	07d9      	lsls	r1, r3, #31
 801d088:	d411      	bmi.n	801d0ae <_dtoa_r+0x606>
 801d08a:	4629      	mov	r1, r5
 801d08c:	4630      	mov	r0, r6
 801d08e:	f001 f87d 	bl	801e18c <_Bfree>
 801d092:	2300      	movs	r3, #0
 801d094:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d096:	f888 3000 	strb.w	r3, [r8]
 801d09a:	f10b 0301 	add.w	r3, fp, #1
 801d09e:	6013      	str	r3, [r2, #0]
 801d0a0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d0a2:	2b00      	cmp	r3, #0
 801d0a4:	f43f ad4d 	beq.w	801cb42 <_dtoa_r+0x9a>
 801d0a8:	f8c3 8000 	str.w	r8, [r3]
 801d0ac:	e549      	b.n	801cb42 <_dtoa_r+0x9a>
 801d0ae:	465f      	mov	r7, fp
 801d0b0:	4643      	mov	r3, r8
 801d0b2:	4698      	mov	r8, r3
 801d0b4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d0b8:	2a39      	cmp	r2, #57	; 0x39
 801d0ba:	d106      	bne.n	801d0ca <_dtoa_r+0x622>
 801d0bc:	9a00      	ldr	r2, [sp, #0]
 801d0be:	429a      	cmp	r2, r3
 801d0c0:	d1f7      	bne.n	801d0b2 <_dtoa_r+0x60a>
 801d0c2:	9900      	ldr	r1, [sp, #0]
 801d0c4:	2230      	movs	r2, #48	; 0x30
 801d0c6:	3701      	adds	r7, #1
 801d0c8:	700a      	strb	r2, [r1, #0]
 801d0ca:	781a      	ldrb	r2, [r3, #0]
 801d0cc:	3201      	adds	r2, #1
 801d0ce:	701a      	strb	r2, [r3, #0]
 801d0d0:	e7ae      	b.n	801d030 <_dtoa_r+0x588>
 801d0d2:	ee27 7b04 	vmul.f64	d7, d7, d4
 801d0d6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801d0da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d0de:	d1b2      	bne.n	801d046 <_dtoa_r+0x59e>
 801d0e0:	e7d3      	b.n	801d08a <_dtoa_r+0x5e2>
 801d0e2:	bf00      	nop
 801d0e4:	080289d8 	.word	0x080289d8
 801d0e8:	080289b0 	.word	0x080289b0
 801d0ec:	9908      	ldr	r1, [sp, #32]
 801d0ee:	2900      	cmp	r1, #0
 801d0f0:	f000 80d1 	beq.w	801d296 <_dtoa_r+0x7ee>
 801d0f4:	9907      	ldr	r1, [sp, #28]
 801d0f6:	2901      	cmp	r1, #1
 801d0f8:	f300 80b4 	bgt.w	801d264 <_dtoa_r+0x7bc>
 801d0fc:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d0fe:	2900      	cmp	r1, #0
 801d100:	f000 80ac 	beq.w	801d25c <_dtoa_r+0x7b4>
 801d104:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801d108:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801d10c:	461c      	mov	r4, r3
 801d10e:	930a      	str	r3, [sp, #40]	; 0x28
 801d110:	9b05      	ldr	r3, [sp, #20]
 801d112:	4413      	add	r3, r2
 801d114:	9305      	str	r3, [sp, #20]
 801d116:	9b06      	ldr	r3, [sp, #24]
 801d118:	2101      	movs	r1, #1
 801d11a:	4413      	add	r3, r2
 801d11c:	4630      	mov	r0, r6
 801d11e:	9306      	str	r3, [sp, #24]
 801d120:	f001 f93a 	bl	801e398 <__i2b>
 801d124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d126:	4607      	mov	r7, r0
 801d128:	f1b8 0f00 	cmp.w	r8, #0
 801d12c:	dd0d      	ble.n	801d14a <_dtoa_r+0x6a2>
 801d12e:	9a06      	ldr	r2, [sp, #24]
 801d130:	2a00      	cmp	r2, #0
 801d132:	dd0a      	ble.n	801d14a <_dtoa_r+0x6a2>
 801d134:	4542      	cmp	r2, r8
 801d136:	9905      	ldr	r1, [sp, #20]
 801d138:	bfa8      	it	ge
 801d13a:	4642      	movge	r2, r8
 801d13c:	1a89      	subs	r1, r1, r2
 801d13e:	9105      	str	r1, [sp, #20]
 801d140:	9906      	ldr	r1, [sp, #24]
 801d142:	eba8 0802 	sub.w	r8, r8, r2
 801d146:	1a8a      	subs	r2, r1, r2
 801d148:	9206      	str	r2, [sp, #24]
 801d14a:	b303      	cbz	r3, 801d18e <_dtoa_r+0x6e6>
 801d14c:	9a08      	ldr	r2, [sp, #32]
 801d14e:	2a00      	cmp	r2, #0
 801d150:	f000 80a6 	beq.w	801d2a0 <_dtoa_r+0x7f8>
 801d154:	2c00      	cmp	r4, #0
 801d156:	dd13      	ble.n	801d180 <_dtoa_r+0x6d8>
 801d158:	4639      	mov	r1, r7
 801d15a:	4622      	mov	r2, r4
 801d15c:	4630      	mov	r0, r6
 801d15e:	930c      	str	r3, [sp, #48]	; 0x30
 801d160:	f001 f9d6 	bl	801e510 <__pow5mult>
 801d164:	462a      	mov	r2, r5
 801d166:	4601      	mov	r1, r0
 801d168:	4607      	mov	r7, r0
 801d16a:	4630      	mov	r0, r6
 801d16c:	f001 f92a 	bl	801e3c4 <__multiply>
 801d170:	4629      	mov	r1, r5
 801d172:	900a      	str	r0, [sp, #40]	; 0x28
 801d174:	4630      	mov	r0, r6
 801d176:	f001 f809 	bl	801e18c <_Bfree>
 801d17a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d17c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d17e:	4615      	mov	r5, r2
 801d180:	1b1a      	subs	r2, r3, r4
 801d182:	d004      	beq.n	801d18e <_dtoa_r+0x6e6>
 801d184:	4629      	mov	r1, r5
 801d186:	4630      	mov	r0, r6
 801d188:	f001 f9c2 	bl	801e510 <__pow5mult>
 801d18c:	4605      	mov	r5, r0
 801d18e:	2101      	movs	r1, #1
 801d190:	4630      	mov	r0, r6
 801d192:	f001 f901 	bl	801e398 <__i2b>
 801d196:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d198:	2b00      	cmp	r3, #0
 801d19a:	4604      	mov	r4, r0
 801d19c:	f340 8082 	ble.w	801d2a4 <_dtoa_r+0x7fc>
 801d1a0:	461a      	mov	r2, r3
 801d1a2:	4601      	mov	r1, r0
 801d1a4:	4630      	mov	r0, r6
 801d1a6:	f001 f9b3 	bl	801e510 <__pow5mult>
 801d1aa:	9b07      	ldr	r3, [sp, #28]
 801d1ac:	2b01      	cmp	r3, #1
 801d1ae:	4604      	mov	r4, r0
 801d1b0:	dd7b      	ble.n	801d2aa <_dtoa_r+0x802>
 801d1b2:	2300      	movs	r3, #0
 801d1b4:	930a      	str	r3, [sp, #40]	; 0x28
 801d1b6:	6922      	ldr	r2, [r4, #16]
 801d1b8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801d1bc:	6910      	ldr	r0, [r2, #16]
 801d1be:	f001 f89b 	bl	801e2f8 <__hi0bits>
 801d1c2:	f1c0 0020 	rsb	r0, r0, #32
 801d1c6:	9b06      	ldr	r3, [sp, #24]
 801d1c8:	4418      	add	r0, r3
 801d1ca:	f010 001f 	ands.w	r0, r0, #31
 801d1ce:	f000 808d 	beq.w	801d2ec <_dtoa_r+0x844>
 801d1d2:	f1c0 0220 	rsb	r2, r0, #32
 801d1d6:	2a04      	cmp	r2, #4
 801d1d8:	f340 8086 	ble.w	801d2e8 <_dtoa_r+0x840>
 801d1dc:	f1c0 001c 	rsb	r0, r0, #28
 801d1e0:	9b05      	ldr	r3, [sp, #20]
 801d1e2:	4403      	add	r3, r0
 801d1e4:	9305      	str	r3, [sp, #20]
 801d1e6:	9b06      	ldr	r3, [sp, #24]
 801d1e8:	4403      	add	r3, r0
 801d1ea:	4480      	add	r8, r0
 801d1ec:	9306      	str	r3, [sp, #24]
 801d1ee:	9b05      	ldr	r3, [sp, #20]
 801d1f0:	2b00      	cmp	r3, #0
 801d1f2:	dd05      	ble.n	801d200 <_dtoa_r+0x758>
 801d1f4:	4629      	mov	r1, r5
 801d1f6:	461a      	mov	r2, r3
 801d1f8:	4630      	mov	r0, r6
 801d1fa:	f001 f9e3 	bl	801e5c4 <__lshift>
 801d1fe:	4605      	mov	r5, r0
 801d200:	9b06      	ldr	r3, [sp, #24]
 801d202:	2b00      	cmp	r3, #0
 801d204:	dd05      	ble.n	801d212 <_dtoa_r+0x76a>
 801d206:	4621      	mov	r1, r4
 801d208:	461a      	mov	r2, r3
 801d20a:	4630      	mov	r0, r6
 801d20c:	f001 f9da 	bl	801e5c4 <__lshift>
 801d210:	4604      	mov	r4, r0
 801d212:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d214:	2b00      	cmp	r3, #0
 801d216:	d06b      	beq.n	801d2f0 <_dtoa_r+0x848>
 801d218:	4621      	mov	r1, r4
 801d21a:	4628      	mov	r0, r5
 801d21c:	f001 fa3e 	bl	801e69c <__mcmp>
 801d220:	2800      	cmp	r0, #0
 801d222:	da65      	bge.n	801d2f0 <_dtoa_r+0x848>
 801d224:	2300      	movs	r3, #0
 801d226:	4629      	mov	r1, r5
 801d228:	220a      	movs	r2, #10
 801d22a:	4630      	mov	r0, r6
 801d22c:	f000 ffd0 	bl	801e1d0 <__multadd>
 801d230:	9b08      	ldr	r3, [sp, #32]
 801d232:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d236:	4605      	mov	r5, r0
 801d238:	2b00      	cmp	r3, #0
 801d23a:	f000 8192 	beq.w	801d562 <_dtoa_r+0xaba>
 801d23e:	4639      	mov	r1, r7
 801d240:	2300      	movs	r3, #0
 801d242:	220a      	movs	r2, #10
 801d244:	4630      	mov	r0, r6
 801d246:	f000 ffc3 	bl	801e1d0 <__multadd>
 801d24a:	f1ba 0f00 	cmp.w	sl, #0
 801d24e:	4607      	mov	r7, r0
 801d250:	f300 808e 	bgt.w	801d370 <_dtoa_r+0x8c8>
 801d254:	9b07      	ldr	r3, [sp, #28]
 801d256:	2b02      	cmp	r3, #2
 801d258:	dc51      	bgt.n	801d2fe <_dtoa_r+0x856>
 801d25a:	e089      	b.n	801d370 <_dtoa_r+0x8c8>
 801d25c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d25e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801d262:	e751      	b.n	801d108 <_dtoa_r+0x660>
 801d264:	f109 34ff 	add.w	r4, r9, #4294967295
 801d268:	42a3      	cmp	r3, r4
 801d26a:	bfbf      	itttt	lt
 801d26c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 801d26e:	1ae3      	sublt	r3, r4, r3
 801d270:	18d2      	addlt	r2, r2, r3
 801d272:	4613      	movlt	r3, r2
 801d274:	bfb7      	itett	lt
 801d276:	930e      	strlt	r3, [sp, #56]	; 0x38
 801d278:	1b1c      	subge	r4, r3, r4
 801d27a:	4623      	movlt	r3, r4
 801d27c:	2400      	movlt	r4, #0
 801d27e:	f1b9 0f00 	cmp.w	r9, #0
 801d282:	bfb5      	itete	lt
 801d284:	9a05      	ldrlt	r2, [sp, #20]
 801d286:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 801d28a:	eba2 0809 	sublt.w	r8, r2, r9
 801d28e:	464a      	movge	r2, r9
 801d290:	bfb8      	it	lt
 801d292:	2200      	movlt	r2, #0
 801d294:	e73b      	b.n	801d10e <_dtoa_r+0x666>
 801d296:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801d29a:	9f08      	ldr	r7, [sp, #32]
 801d29c:	461c      	mov	r4, r3
 801d29e:	e743      	b.n	801d128 <_dtoa_r+0x680>
 801d2a0:	461a      	mov	r2, r3
 801d2a2:	e76f      	b.n	801d184 <_dtoa_r+0x6dc>
 801d2a4:	9b07      	ldr	r3, [sp, #28]
 801d2a6:	2b01      	cmp	r3, #1
 801d2a8:	dc18      	bgt.n	801d2dc <_dtoa_r+0x834>
 801d2aa:	9b02      	ldr	r3, [sp, #8]
 801d2ac:	b9b3      	cbnz	r3, 801d2dc <_dtoa_r+0x834>
 801d2ae:	9b03      	ldr	r3, [sp, #12]
 801d2b0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801d2b4:	b9a2      	cbnz	r2, 801d2e0 <_dtoa_r+0x838>
 801d2b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801d2ba:	0d12      	lsrs	r2, r2, #20
 801d2bc:	0512      	lsls	r2, r2, #20
 801d2be:	b18a      	cbz	r2, 801d2e4 <_dtoa_r+0x83c>
 801d2c0:	9b05      	ldr	r3, [sp, #20]
 801d2c2:	3301      	adds	r3, #1
 801d2c4:	9305      	str	r3, [sp, #20]
 801d2c6:	9b06      	ldr	r3, [sp, #24]
 801d2c8:	3301      	adds	r3, #1
 801d2ca:	9306      	str	r3, [sp, #24]
 801d2cc:	2301      	movs	r3, #1
 801d2ce:	930a      	str	r3, [sp, #40]	; 0x28
 801d2d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d2d2:	2b00      	cmp	r3, #0
 801d2d4:	f47f af6f 	bne.w	801d1b6 <_dtoa_r+0x70e>
 801d2d8:	2001      	movs	r0, #1
 801d2da:	e774      	b.n	801d1c6 <_dtoa_r+0x71e>
 801d2dc:	2300      	movs	r3, #0
 801d2de:	e7f6      	b.n	801d2ce <_dtoa_r+0x826>
 801d2e0:	9b02      	ldr	r3, [sp, #8]
 801d2e2:	e7f4      	b.n	801d2ce <_dtoa_r+0x826>
 801d2e4:	920a      	str	r2, [sp, #40]	; 0x28
 801d2e6:	e7f3      	b.n	801d2d0 <_dtoa_r+0x828>
 801d2e8:	d081      	beq.n	801d1ee <_dtoa_r+0x746>
 801d2ea:	4610      	mov	r0, r2
 801d2ec:	301c      	adds	r0, #28
 801d2ee:	e777      	b.n	801d1e0 <_dtoa_r+0x738>
 801d2f0:	f1b9 0f00 	cmp.w	r9, #0
 801d2f4:	dc37      	bgt.n	801d366 <_dtoa_r+0x8be>
 801d2f6:	9b07      	ldr	r3, [sp, #28]
 801d2f8:	2b02      	cmp	r3, #2
 801d2fa:	dd34      	ble.n	801d366 <_dtoa_r+0x8be>
 801d2fc:	46ca      	mov	sl, r9
 801d2fe:	f1ba 0f00 	cmp.w	sl, #0
 801d302:	d10d      	bne.n	801d320 <_dtoa_r+0x878>
 801d304:	4621      	mov	r1, r4
 801d306:	4653      	mov	r3, sl
 801d308:	2205      	movs	r2, #5
 801d30a:	4630      	mov	r0, r6
 801d30c:	f000 ff60 	bl	801e1d0 <__multadd>
 801d310:	4601      	mov	r1, r0
 801d312:	4604      	mov	r4, r0
 801d314:	4628      	mov	r0, r5
 801d316:	f001 f9c1 	bl	801e69c <__mcmp>
 801d31a:	2800      	cmp	r0, #0
 801d31c:	f73f adde 	bgt.w	801cedc <_dtoa_r+0x434>
 801d320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d322:	f8dd 8000 	ldr.w	r8, [sp]
 801d326:	ea6f 0b03 	mvn.w	fp, r3
 801d32a:	f04f 0900 	mov.w	r9, #0
 801d32e:	4621      	mov	r1, r4
 801d330:	4630      	mov	r0, r6
 801d332:	f000 ff2b 	bl	801e18c <_Bfree>
 801d336:	2f00      	cmp	r7, #0
 801d338:	f43f aea7 	beq.w	801d08a <_dtoa_r+0x5e2>
 801d33c:	f1b9 0f00 	cmp.w	r9, #0
 801d340:	d005      	beq.n	801d34e <_dtoa_r+0x8a6>
 801d342:	45b9      	cmp	r9, r7
 801d344:	d003      	beq.n	801d34e <_dtoa_r+0x8a6>
 801d346:	4649      	mov	r1, r9
 801d348:	4630      	mov	r0, r6
 801d34a:	f000 ff1f 	bl	801e18c <_Bfree>
 801d34e:	4639      	mov	r1, r7
 801d350:	4630      	mov	r0, r6
 801d352:	f000 ff1b 	bl	801e18c <_Bfree>
 801d356:	e698      	b.n	801d08a <_dtoa_r+0x5e2>
 801d358:	2400      	movs	r4, #0
 801d35a:	4627      	mov	r7, r4
 801d35c:	e7e0      	b.n	801d320 <_dtoa_r+0x878>
 801d35e:	46bb      	mov	fp, r7
 801d360:	4604      	mov	r4, r0
 801d362:	4607      	mov	r7, r0
 801d364:	e5ba      	b.n	801cedc <_dtoa_r+0x434>
 801d366:	9b08      	ldr	r3, [sp, #32]
 801d368:	46ca      	mov	sl, r9
 801d36a:	2b00      	cmp	r3, #0
 801d36c:	f000 8100 	beq.w	801d570 <_dtoa_r+0xac8>
 801d370:	f1b8 0f00 	cmp.w	r8, #0
 801d374:	dd05      	ble.n	801d382 <_dtoa_r+0x8da>
 801d376:	4639      	mov	r1, r7
 801d378:	4642      	mov	r2, r8
 801d37a:	4630      	mov	r0, r6
 801d37c:	f001 f922 	bl	801e5c4 <__lshift>
 801d380:	4607      	mov	r7, r0
 801d382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d384:	2b00      	cmp	r3, #0
 801d386:	d05d      	beq.n	801d444 <_dtoa_r+0x99c>
 801d388:	6879      	ldr	r1, [r7, #4]
 801d38a:	4630      	mov	r0, r6
 801d38c:	f000 febe 	bl	801e10c <_Balloc>
 801d390:	4680      	mov	r8, r0
 801d392:	b928      	cbnz	r0, 801d3a0 <_dtoa_r+0x8f8>
 801d394:	4b82      	ldr	r3, [pc, #520]	; (801d5a0 <_dtoa_r+0xaf8>)
 801d396:	4602      	mov	r2, r0
 801d398:	f240 21ea 	movw	r1, #746	; 0x2ea
 801d39c:	f7ff bb9a 	b.w	801cad4 <_dtoa_r+0x2c>
 801d3a0:	693a      	ldr	r2, [r7, #16]
 801d3a2:	3202      	adds	r2, #2
 801d3a4:	0092      	lsls	r2, r2, #2
 801d3a6:	f107 010c 	add.w	r1, r7, #12
 801d3aa:	300c      	adds	r0, #12
 801d3ac:	f7fd fa08 	bl	801a7c0 <memcpy>
 801d3b0:	2201      	movs	r2, #1
 801d3b2:	4641      	mov	r1, r8
 801d3b4:	4630      	mov	r0, r6
 801d3b6:	f001 f905 	bl	801e5c4 <__lshift>
 801d3ba:	9b00      	ldr	r3, [sp, #0]
 801d3bc:	3301      	adds	r3, #1
 801d3be:	9305      	str	r3, [sp, #20]
 801d3c0:	9b00      	ldr	r3, [sp, #0]
 801d3c2:	4453      	add	r3, sl
 801d3c4:	9309      	str	r3, [sp, #36]	; 0x24
 801d3c6:	9b02      	ldr	r3, [sp, #8]
 801d3c8:	f003 0301 	and.w	r3, r3, #1
 801d3cc:	46b9      	mov	r9, r7
 801d3ce:	9308      	str	r3, [sp, #32]
 801d3d0:	4607      	mov	r7, r0
 801d3d2:	9b05      	ldr	r3, [sp, #20]
 801d3d4:	4621      	mov	r1, r4
 801d3d6:	3b01      	subs	r3, #1
 801d3d8:	4628      	mov	r0, r5
 801d3da:	9302      	str	r3, [sp, #8]
 801d3dc:	f7ff fad7 	bl	801c98e <quorem>
 801d3e0:	4603      	mov	r3, r0
 801d3e2:	3330      	adds	r3, #48	; 0x30
 801d3e4:	9006      	str	r0, [sp, #24]
 801d3e6:	4649      	mov	r1, r9
 801d3e8:	4628      	mov	r0, r5
 801d3ea:	930a      	str	r3, [sp, #40]	; 0x28
 801d3ec:	f001 f956 	bl	801e69c <__mcmp>
 801d3f0:	463a      	mov	r2, r7
 801d3f2:	4682      	mov	sl, r0
 801d3f4:	4621      	mov	r1, r4
 801d3f6:	4630      	mov	r0, r6
 801d3f8:	f001 f96c 	bl	801e6d4 <__mdiff>
 801d3fc:	68c2      	ldr	r2, [r0, #12]
 801d3fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d400:	4680      	mov	r8, r0
 801d402:	bb0a      	cbnz	r2, 801d448 <_dtoa_r+0x9a0>
 801d404:	4601      	mov	r1, r0
 801d406:	4628      	mov	r0, r5
 801d408:	f001 f948 	bl	801e69c <__mcmp>
 801d40c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d40e:	4602      	mov	r2, r0
 801d410:	4641      	mov	r1, r8
 801d412:	4630      	mov	r0, r6
 801d414:	920e      	str	r2, [sp, #56]	; 0x38
 801d416:	930a      	str	r3, [sp, #40]	; 0x28
 801d418:	f000 feb8 	bl	801e18c <_Bfree>
 801d41c:	9b07      	ldr	r3, [sp, #28]
 801d41e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d420:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801d424:	ea43 0102 	orr.w	r1, r3, r2
 801d428:	9b08      	ldr	r3, [sp, #32]
 801d42a:	430b      	orrs	r3, r1
 801d42c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d42e:	d10d      	bne.n	801d44c <_dtoa_r+0x9a4>
 801d430:	2b39      	cmp	r3, #57	; 0x39
 801d432:	d029      	beq.n	801d488 <_dtoa_r+0x9e0>
 801d434:	f1ba 0f00 	cmp.w	sl, #0
 801d438:	dd01      	ble.n	801d43e <_dtoa_r+0x996>
 801d43a:	9b06      	ldr	r3, [sp, #24]
 801d43c:	3331      	adds	r3, #49	; 0x31
 801d43e:	9a02      	ldr	r2, [sp, #8]
 801d440:	7013      	strb	r3, [r2, #0]
 801d442:	e774      	b.n	801d32e <_dtoa_r+0x886>
 801d444:	4638      	mov	r0, r7
 801d446:	e7b8      	b.n	801d3ba <_dtoa_r+0x912>
 801d448:	2201      	movs	r2, #1
 801d44a:	e7e1      	b.n	801d410 <_dtoa_r+0x968>
 801d44c:	f1ba 0f00 	cmp.w	sl, #0
 801d450:	db06      	blt.n	801d460 <_dtoa_r+0x9b8>
 801d452:	9907      	ldr	r1, [sp, #28]
 801d454:	ea41 0a0a 	orr.w	sl, r1, sl
 801d458:	9908      	ldr	r1, [sp, #32]
 801d45a:	ea5a 0101 	orrs.w	r1, sl, r1
 801d45e:	d120      	bne.n	801d4a2 <_dtoa_r+0x9fa>
 801d460:	2a00      	cmp	r2, #0
 801d462:	ddec      	ble.n	801d43e <_dtoa_r+0x996>
 801d464:	4629      	mov	r1, r5
 801d466:	2201      	movs	r2, #1
 801d468:	4630      	mov	r0, r6
 801d46a:	9305      	str	r3, [sp, #20]
 801d46c:	f001 f8aa 	bl	801e5c4 <__lshift>
 801d470:	4621      	mov	r1, r4
 801d472:	4605      	mov	r5, r0
 801d474:	f001 f912 	bl	801e69c <__mcmp>
 801d478:	2800      	cmp	r0, #0
 801d47a:	9b05      	ldr	r3, [sp, #20]
 801d47c:	dc02      	bgt.n	801d484 <_dtoa_r+0x9dc>
 801d47e:	d1de      	bne.n	801d43e <_dtoa_r+0x996>
 801d480:	07da      	lsls	r2, r3, #31
 801d482:	d5dc      	bpl.n	801d43e <_dtoa_r+0x996>
 801d484:	2b39      	cmp	r3, #57	; 0x39
 801d486:	d1d8      	bne.n	801d43a <_dtoa_r+0x992>
 801d488:	9a02      	ldr	r2, [sp, #8]
 801d48a:	2339      	movs	r3, #57	; 0x39
 801d48c:	7013      	strb	r3, [r2, #0]
 801d48e:	4643      	mov	r3, r8
 801d490:	4698      	mov	r8, r3
 801d492:	3b01      	subs	r3, #1
 801d494:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801d498:	2a39      	cmp	r2, #57	; 0x39
 801d49a:	d051      	beq.n	801d540 <_dtoa_r+0xa98>
 801d49c:	3201      	adds	r2, #1
 801d49e:	701a      	strb	r2, [r3, #0]
 801d4a0:	e745      	b.n	801d32e <_dtoa_r+0x886>
 801d4a2:	2a00      	cmp	r2, #0
 801d4a4:	dd03      	ble.n	801d4ae <_dtoa_r+0xa06>
 801d4a6:	2b39      	cmp	r3, #57	; 0x39
 801d4a8:	d0ee      	beq.n	801d488 <_dtoa_r+0x9e0>
 801d4aa:	3301      	adds	r3, #1
 801d4ac:	e7c7      	b.n	801d43e <_dtoa_r+0x996>
 801d4ae:	9a05      	ldr	r2, [sp, #20]
 801d4b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d4b2:	f802 3c01 	strb.w	r3, [r2, #-1]
 801d4b6:	428a      	cmp	r2, r1
 801d4b8:	d02b      	beq.n	801d512 <_dtoa_r+0xa6a>
 801d4ba:	4629      	mov	r1, r5
 801d4bc:	2300      	movs	r3, #0
 801d4be:	220a      	movs	r2, #10
 801d4c0:	4630      	mov	r0, r6
 801d4c2:	f000 fe85 	bl	801e1d0 <__multadd>
 801d4c6:	45b9      	cmp	r9, r7
 801d4c8:	4605      	mov	r5, r0
 801d4ca:	f04f 0300 	mov.w	r3, #0
 801d4ce:	f04f 020a 	mov.w	r2, #10
 801d4d2:	4649      	mov	r1, r9
 801d4d4:	4630      	mov	r0, r6
 801d4d6:	d107      	bne.n	801d4e8 <_dtoa_r+0xa40>
 801d4d8:	f000 fe7a 	bl	801e1d0 <__multadd>
 801d4dc:	4681      	mov	r9, r0
 801d4de:	4607      	mov	r7, r0
 801d4e0:	9b05      	ldr	r3, [sp, #20]
 801d4e2:	3301      	adds	r3, #1
 801d4e4:	9305      	str	r3, [sp, #20]
 801d4e6:	e774      	b.n	801d3d2 <_dtoa_r+0x92a>
 801d4e8:	f000 fe72 	bl	801e1d0 <__multadd>
 801d4ec:	4639      	mov	r1, r7
 801d4ee:	4681      	mov	r9, r0
 801d4f0:	2300      	movs	r3, #0
 801d4f2:	220a      	movs	r2, #10
 801d4f4:	4630      	mov	r0, r6
 801d4f6:	f000 fe6b 	bl	801e1d0 <__multadd>
 801d4fa:	4607      	mov	r7, r0
 801d4fc:	e7f0      	b.n	801d4e0 <_dtoa_r+0xa38>
 801d4fe:	f1ba 0f00 	cmp.w	sl, #0
 801d502:	9a00      	ldr	r2, [sp, #0]
 801d504:	bfcc      	ite	gt
 801d506:	46d0      	movgt	r8, sl
 801d508:	f04f 0801 	movle.w	r8, #1
 801d50c:	4490      	add	r8, r2
 801d50e:	f04f 0900 	mov.w	r9, #0
 801d512:	4629      	mov	r1, r5
 801d514:	2201      	movs	r2, #1
 801d516:	4630      	mov	r0, r6
 801d518:	9302      	str	r3, [sp, #8]
 801d51a:	f001 f853 	bl	801e5c4 <__lshift>
 801d51e:	4621      	mov	r1, r4
 801d520:	4605      	mov	r5, r0
 801d522:	f001 f8bb 	bl	801e69c <__mcmp>
 801d526:	2800      	cmp	r0, #0
 801d528:	dcb1      	bgt.n	801d48e <_dtoa_r+0x9e6>
 801d52a:	d102      	bne.n	801d532 <_dtoa_r+0xa8a>
 801d52c:	9b02      	ldr	r3, [sp, #8]
 801d52e:	07db      	lsls	r3, r3, #31
 801d530:	d4ad      	bmi.n	801d48e <_dtoa_r+0x9e6>
 801d532:	4643      	mov	r3, r8
 801d534:	4698      	mov	r8, r3
 801d536:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d53a:	2a30      	cmp	r2, #48	; 0x30
 801d53c:	d0fa      	beq.n	801d534 <_dtoa_r+0xa8c>
 801d53e:	e6f6      	b.n	801d32e <_dtoa_r+0x886>
 801d540:	9a00      	ldr	r2, [sp, #0]
 801d542:	429a      	cmp	r2, r3
 801d544:	d1a4      	bne.n	801d490 <_dtoa_r+0x9e8>
 801d546:	f10b 0b01 	add.w	fp, fp, #1
 801d54a:	2331      	movs	r3, #49	; 0x31
 801d54c:	e778      	b.n	801d440 <_dtoa_r+0x998>
 801d54e:	4b15      	ldr	r3, [pc, #84]	; (801d5a4 <_dtoa_r+0xafc>)
 801d550:	f7ff bb12 	b.w	801cb78 <_dtoa_r+0xd0>
 801d554:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d556:	2b00      	cmp	r3, #0
 801d558:	f47f aaee 	bne.w	801cb38 <_dtoa_r+0x90>
 801d55c:	4b12      	ldr	r3, [pc, #72]	; (801d5a8 <_dtoa_r+0xb00>)
 801d55e:	f7ff bb0b 	b.w	801cb78 <_dtoa_r+0xd0>
 801d562:	f1ba 0f00 	cmp.w	sl, #0
 801d566:	dc03      	bgt.n	801d570 <_dtoa_r+0xac8>
 801d568:	9b07      	ldr	r3, [sp, #28]
 801d56a:	2b02      	cmp	r3, #2
 801d56c:	f73f aec7 	bgt.w	801d2fe <_dtoa_r+0x856>
 801d570:	f8dd 8000 	ldr.w	r8, [sp]
 801d574:	4621      	mov	r1, r4
 801d576:	4628      	mov	r0, r5
 801d578:	f7ff fa09 	bl	801c98e <quorem>
 801d57c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801d580:	f808 3b01 	strb.w	r3, [r8], #1
 801d584:	9a00      	ldr	r2, [sp, #0]
 801d586:	eba8 0202 	sub.w	r2, r8, r2
 801d58a:	4592      	cmp	sl, r2
 801d58c:	ddb7      	ble.n	801d4fe <_dtoa_r+0xa56>
 801d58e:	4629      	mov	r1, r5
 801d590:	2300      	movs	r3, #0
 801d592:	220a      	movs	r2, #10
 801d594:	4630      	mov	r0, r6
 801d596:	f000 fe1b 	bl	801e1d0 <__multadd>
 801d59a:	4605      	mov	r5, r0
 801d59c:	e7ea      	b.n	801d574 <_dtoa_r+0xacc>
 801d59e:	bf00      	nop
 801d5a0:	0802885c 	.word	0x0802885c
 801d5a4:	08028659 	.word	0x08028659
 801d5a8:	080287d9 	.word	0x080287d9

0801d5ac <__sflush_r>:
 801d5ac:	898a      	ldrh	r2, [r1, #12]
 801d5ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d5b2:	4605      	mov	r5, r0
 801d5b4:	0710      	lsls	r0, r2, #28
 801d5b6:	460c      	mov	r4, r1
 801d5b8:	d458      	bmi.n	801d66c <__sflush_r+0xc0>
 801d5ba:	684b      	ldr	r3, [r1, #4]
 801d5bc:	2b00      	cmp	r3, #0
 801d5be:	dc05      	bgt.n	801d5cc <__sflush_r+0x20>
 801d5c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d5c2:	2b00      	cmp	r3, #0
 801d5c4:	dc02      	bgt.n	801d5cc <__sflush_r+0x20>
 801d5c6:	2000      	movs	r0, #0
 801d5c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d5cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d5ce:	2e00      	cmp	r6, #0
 801d5d0:	d0f9      	beq.n	801d5c6 <__sflush_r+0x1a>
 801d5d2:	2300      	movs	r3, #0
 801d5d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d5d8:	682f      	ldr	r7, [r5, #0]
 801d5da:	602b      	str	r3, [r5, #0]
 801d5dc:	d032      	beq.n	801d644 <__sflush_r+0x98>
 801d5de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d5e0:	89a3      	ldrh	r3, [r4, #12]
 801d5e2:	075a      	lsls	r2, r3, #29
 801d5e4:	d505      	bpl.n	801d5f2 <__sflush_r+0x46>
 801d5e6:	6863      	ldr	r3, [r4, #4]
 801d5e8:	1ac0      	subs	r0, r0, r3
 801d5ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d5ec:	b10b      	cbz	r3, 801d5f2 <__sflush_r+0x46>
 801d5ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d5f0:	1ac0      	subs	r0, r0, r3
 801d5f2:	2300      	movs	r3, #0
 801d5f4:	4602      	mov	r2, r0
 801d5f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d5f8:	6a21      	ldr	r1, [r4, #32]
 801d5fa:	4628      	mov	r0, r5
 801d5fc:	47b0      	blx	r6
 801d5fe:	1c43      	adds	r3, r0, #1
 801d600:	89a3      	ldrh	r3, [r4, #12]
 801d602:	d106      	bne.n	801d612 <__sflush_r+0x66>
 801d604:	6829      	ldr	r1, [r5, #0]
 801d606:	291d      	cmp	r1, #29
 801d608:	d82c      	bhi.n	801d664 <__sflush_r+0xb8>
 801d60a:	4a2a      	ldr	r2, [pc, #168]	; (801d6b4 <__sflush_r+0x108>)
 801d60c:	40ca      	lsrs	r2, r1
 801d60e:	07d6      	lsls	r6, r2, #31
 801d610:	d528      	bpl.n	801d664 <__sflush_r+0xb8>
 801d612:	2200      	movs	r2, #0
 801d614:	6062      	str	r2, [r4, #4]
 801d616:	04d9      	lsls	r1, r3, #19
 801d618:	6922      	ldr	r2, [r4, #16]
 801d61a:	6022      	str	r2, [r4, #0]
 801d61c:	d504      	bpl.n	801d628 <__sflush_r+0x7c>
 801d61e:	1c42      	adds	r2, r0, #1
 801d620:	d101      	bne.n	801d626 <__sflush_r+0x7a>
 801d622:	682b      	ldr	r3, [r5, #0]
 801d624:	b903      	cbnz	r3, 801d628 <__sflush_r+0x7c>
 801d626:	6560      	str	r0, [r4, #84]	; 0x54
 801d628:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d62a:	602f      	str	r7, [r5, #0]
 801d62c:	2900      	cmp	r1, #0
 801d62e:	d0ca      	beq.n	801d5c6 <__sflush_r+0x1a>
 801d630:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d634:	4299      	cmp	r1, r3
 801d636:	d002      	beq.n	801d63e <__sflush_r+0x92>
 801d638:	4628      	mov	r0, r5
 801d63a:	f7fd f8f1 	bl	801a820 <_free_r>
 801d63e:	2000      	movs	r0, #0
 801d640:	6360      	str	r0, [r4, #52]	; 0x34
 801d642:	e7c1      	b.n	801d5c8 <__sflush_r+0x1c>
 801d644:	6a21      	ldr	r1, [r4, #32]
 801d646:	2301      	movs	r3, #1
 801d648:	4628      	mov	r0, r5
 801d64a:	47b0      	blx	r6
 801d64c:	1c41      	adds	r1, r0, #1
 801d64e:	d1c7      	bne.n	801d5e0 <__sflush_r+0x34>
 801d650:	682b      	ldr	r3, [r5, #0]
 801d652:	2b00      	cmp	r3, #0
 801d654:	d0c4      	beq.n	801d5e0 <__sflush_r+0x34>
 801d656:	2b1d      	cmp	r3, #29
 801d658:	d001      	beq.n	801d65e <__sflush_r+0xb2>
 801d65a:	2b16      	cmp	r3, #22
 801d65c:	d101      	bne.n	801d662 <__sflush_r+0xb6>
 801d65e:	602f      	str	r7, [r5, #0]
 801d660:	e7b1      	b.n	801d5c6 <__sflush_r+0x1a>
 801d662:	89a3      	ldrh	r3, [r4, #12]
 801d664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d668:	81a3      	strh	r3, [r4, #12]
 801d66a:	e7ad      	b.n	801d5c8 <__sflush_r+0x1c>
 801d66c:	690f      	ldr	r7, [r1, #16]
 801d66e:	2f00      	cmp	r7, #0
 801d670:	d0a9      	beq.n	801d5c6 <__sflush_r+0x1a>
 801d672:	0793      	lsls	r3, r2, #30
 801d674:	680e      	ldr	r6, [r1, #0]
 801d676:	bf08      	it	eq
 801d678:	694b      	ldreq	r3, [r1, #20]
 801d67a:	600f      	str	r7, [r1, #0]
 801d67c:	bf18      	it	ne
 801d67e:	2300      	movne	r3, #0
 801d680:	eba6 0807 	sub.w	r8, r6, r7
 801d684:	608b      	str	r3, [r1, #8]
 801d686:	f1b8 0f00 	cmp.w	r8, #0
 801d68a:	dd9c      	ble.n	801d5c6 <__sflush_r+0x1a>
 801d68c:	6a21      	ldr	r1, [r4, #32]
 801d68e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d690:	4643      	mov	r3, r8
 801d692:	463a      	mov	r2, r7
 801d694:	4628      	mov	r0, r5
 801d696:	47b0      	blx	r6
 801d698:	2800      	cmp	r0, #0
 801d69a:	dc06      	bgt.n	801d6aa <__sflush_r+0xfe>
 801d69c:	89a3      	ldrh	r3, [r4, #12]
 801d69e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d6a2:	81a3      	strh	r3, [r4, #12]
 801d6a4:	f04f 30ff 	mov.w	r0, #4294967295
 801d6a8:	e78e      	b.n	801d5c8 <__sflush_r+0x1c>
 801d6aa:	4407      	add	r7, r0
 801d6ac:	eba8 0800 	sub.w	r8, r8, r0
 801d6b0:	e7e9      	b.n	801d686 <__sflush_r+0xda>
 801d6b2:	bf00      	nop
 801d6b4:	20400001 	.word	0x20400001

0801d6b8 <_fflush_r>:
 801d6b8:	b538      	push	{r3, r4, r5, lr}
 801d6ba:	690b      	ldr	r3, [r1, #16]
 801d6bc:	4605      	mov	r5, r0
 801d6be:	460c      	mov	r4, r1
 801d6c0:	b913      	cbnz	r3, 801d6c8 <_fflush_r+0x10>
 801d6c2:	2500      	movs	r5, #0
 801d6c4:	4628      	mov	r0, r5
 801d6c6:	bd38      	pop	{r3, r4, r5, pc}
 801d6c8:	b118      	cbz	r0, 801d6d2 <_fflush_r+0x1a>
 801d6ca:	6983      	ldr	r3, [r0, #24]
 801d6cc:	b90b      	cbnz	r3, 801d6d2 <_fflush_r+0x1a>
 801d6ce:	f000 f887 	bl	801d7e0 <__sinit>
 801d6d2:	4b14      	ldr	r3, [pc, #80]	; (801d724 <_fflush_r+0x6c>)
 801d6d4:	429c      	cmp	r4, r3
 801d6d6:	d11b      	bne.n	801d710 <_fflush_r+0x58>
 801d6d8:	686c      	ldr	r4, [r5, #4]
 801d6da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d6de:	2b00      	cmp	r3, #0
 801d6e0:	d0ef      	beq.n	801d6c2 <_fflush_r+0xa>
 801d6e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d6e4:	07d0      	lsls	r0, r2, #31
 801d6e6:	d404      	bmi.n	801d6f2 <_fflush_r+0x3a>
 801d6e8:	0599      	lsls	r1, r3, #22
 801d6ea:	d402      	bmi.n	801d6f2 <_fflush_r+0x3a>
 801d6ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d6ee:	f000 fc88 	bl	801e002 <__retarget_lock_acquire_recursive>
 801d6f2:	4628      	mov	r0, r5
 801d6f4:	4621      	mov	r1, r4
 801d6f6:	f7ff ff59 	bl	801d5ac <__sflush_r>
 801d6fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d6fc:	07da      	lsls	r2, r3, #31
 801d6fe:	4605      	mov	r5, r0
 801d700:	d4e0      	bmi.n	801d6c4 <_fflush_r+0xc>
 801d702:	89a3      	ldrh	r3, [r4, #12]
 801d704:	059b      	lsls	r3, r3, #22
 801d706:	d4dd      	bmi.n	801d6c4 <_fflush_r+0xc>
 801d708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d70a:	f000 fc7b 	bl	801e004 <__retarget_lock_release_recursive>
 801d70e:	e7d9      	b.n	801d6c4 <_fflush_r+0xc>
 801d710:	4b05      	ldr	r3, [pc, #20]	; (801d728 <_fflush_r+0x70>)
 801d712:	429c      	cmp	r4, r3
 801d714:	d101      	bne.n	801d71a <_fflush_r+0x62>
 801d716:	68ac      	ldr	r4, [r5, #8]
 801d718:	e7df      	b.n	801d6da <_fflush_r+0x22>
 801d71a:	4b04      	ldr	r3, [pc, #16]	; (801d72c <_fflush_r+0x74>)
 801d71c:	429c      	cmp	r4, r3
 801d71e:	bf08      	it	eq
 801d720:	68ec      	ldreq	r4, [r5, #12]
 801d722:	e7da      	b.n	801d6da <_fflush_r+0x22>
 801d724:	08028890 	.word	0x08028890
 801d728:	080288b0 	.word	0x080288b0
 801d72c:	08028870 	.word	0x08028870

0801d730 <std>:
 801d730:	2300      	movs	r3, #0
 801d732:	b510      	push	{r4, lr}
 801d734:	4604      	mov	r4, r0
 801d736:	e9c0 3300 	strd	r3, r3, [r0]
 801d73a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d73e:	6083      	str	r3, [r0, #8]
 801d740:	8181      	strh	r1, [r0, #12]
 801d742:	6643      	str	r3, [r0, #100]	; 0x64
 801d744:	81c2      	strh	r2, [r0, #14]
 801d746:	6183      	str	r3, [r0, #24]
 801d748:	4619      	mov	r1, r3
 801d74a:	2208      	movs	r2, #8
 801d74c:	305c      	adds	r0, #92	; 0x5c
 801d74e:	f7fd f85f 	bl	801a810 <memset>
 801d752:	4b05      	ldr	r3, [pc, #20]	; (801d768 <std+0x38>)
 801d754:	6263      	str	r3, [r4, #36]	; 0x24
 801d756:	4b05      	ldr	r3, [pc, #20]	; (801d76c <std+0x3c>)
 801d758:	62a3      	str	r3, [r4, #40]	; 0x28
 801d75a:	4b05      	ldr	r3, [pc, #20]	; (801d770 <std+0x40>)
 801d75c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801d75e:	4b05      	ldr	r3, [pc, #20]	; (801d774 <std+0x44>)
 801d760:	6224      	str	r4, [r4, #32]
 801d762:	6323      	str	r3, [r4, #48]	; 0x30
 801d764:	bd10      	pop	{r4, pc}
 801d766:	bf00      	nop
 801d768:	0801ee41 	.word	0x0801ee41
 801d76c:	0801ee63 	.word	0x0801ee63
 801d770:	0801ee9b 	.word	0x0801ee9b
 801d774:	0801eebf 	.word	0x0801eebf

0801d778 <_cleanup_r>:
 801d778:	4901      	ldr	r1, [pc, #4]	; (801d780 <_cleanup_r+0x8>)
 801d77a:	f000 b8af 	b.w	801d8dc <_fwalk_reent>
 801d77e:	bf00      	nop
 801d780:	0801d6b9 	.word	0x0801d6b9

0801d784 <__sfmoreglue>:
 801d784:	b570      	push	{r4, r5, r6, lr}
 801d786:	1e4a      	subs	r2, r1, #1
 801d788:	2568      	movs	r5, #104	; 0x68
 801d78a:	4355      	muls	r5, r2
 801d78c:	460e      	mov	r6, r1
 801d78e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801d792:	f7fd f895 	bl	801a8c0 <_malloc_r>
 801d796:	4604      	mov	r4, r0
 801d798:	b140      	cbz	r0, 801d7ac <__sfmoreglue+0x28>
 801d79a:	2100      	movs	r1, #0
 801d79c:	e9c0 1600 	strd	r1, r6, [r0]
 801d7a0:	300c      	adds	r0, #12
 801d7a2:	60a0      	str	r0, [r4, #8]
 801d7a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801d7a8:	f7fd f832 	bl	801a810 <memset>
 801d7ac:	4620      	mov	r0, r4
 801d7ae:	bd70      	pop	{r4, r5, r6, pc}

0801d7b0 <__sfp_lock_acquire>:
 801d7b0:	4801      	ldr	r0, [pc, #4]	; (801d7b8 <__sfp_lock_acquire+0x8>)
 801d7b2:	f000 bc26 	b.w	801e002 <__retarget_lock_acquire_recursive>
 801d7b6:	bf00      	nop
 801d7b8:	24018430 	.word	0x24018430

0801d7bc <__sfp_lock_release>:
 801d7bc:	4801      	ldr	r0, [pc, #4]	; (801d7c4 <__sfp_lock_release+0x8>)
 801d7be:	f000 bc21 	b.w	801e004 <__retarget_lock_release_recursive>
 801d7c2:	bf00      	nop
 801d7c4:	24018430 	.word	0x24018430

0801d7c8 <__sinit_lock_acquire>:
 801d7c8:	4801      	ldr	r0, [pc, #4]	; (801d7d0 <__sinit_lock_acquire+0x8>)
 801d7ca:	f000 bc1a 	b.w	801e002 <__retarget_lock_acquire_recursive>
 801d7ce:	bf00      	nop
 801d7d0:	2401842b 	.word	0x2401842b

0801d7d4 <__sinit_lock_release>:
 801d7d4:	4801      	ldr	r0, [pc, #4]	; (801d7dc <__sinit_lock_release+0x8>)
 801d7d6:	f000 bc15 	b.w	801e004 <__retarget_lock_release_recursive>
 801d7da:	bf00      	nop
 801d7dc:	2401842b 	.word	0x2401842b

0801d7e0 <__sinit>:
 801d7e0:	b510      	push	{r4, lr}
 801d7e2:	4604      	mov	r4, r0
 801d7e4:	f7ff fff0 	bl	801d7c8 <__sinit_lock_acquire>
 801d7e8:	69a3      	ldr	r3, [r4, #24]
 801d7ea:	b11b      	cbz	r3, 801d7f4 <__sinit+0x14>
 801d7ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d7f0:	f7ff bff0 	b.w	801d7d4 <__sinit_lock_release>
 801d7f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801d7f8:	6523      	str	r3, [r4, #80]	; 0x50
 801d7fa:	4b13      	ldr	r3, [pc, #76]	; (801d848 <__sinit+0x68>)
 801d7fc:	4a13      	ldr	r2, [pc, #76]	; (801d84c <__sinit+0x6c>)
 801d7fe:	681b      	ldr	r3, [r3, #0]
 801d800:	62a2      	str	r2, [r4, #40]	; 0x28
 801d802:	42a3      	cmp	r3, r4
 801d804:	bf04      	itt	eq
 801d806:	2301      	moveq	r3, #1
 801d808:	61a3      	streq	r3, [r4, #24]
 801d80a:	4620      	mov	r0, r4
 801d80c:	f000 f820 	bl	801d850 <__sfp>
 801d810:	6060      	str	r0, [r4, #4]
 801d812:	4620      	mov	r0, r4
 801d814:	f000 f81c 	bl	801d850 <__sfp>
 801d818:	60a0      	str	r0, [r4, #8]
 801d81a:	4620      	mov	r0, r4
 801d81c:	f000 f818 	bl	801d850 <__sfp>
 801d820:	2200      	movs	r2, #0
 801d822:	60e0      	str	r0, [r4, #12]
 801d824:	2104      	movs	r1, #4
 801d826:	6860      	ldr	r0, [r4, #4]
 801d828:	f7ff ff82 	bl	801d730 <std>
 801d82c:	68a0      	ldr	r0, [r4, #8]
 801d82e:	2201      	movs	r2, #1
 801d830:	2109      	movs	r1, #9
 801d832:	f7ff ff7d 	bl	801d730 <std>
 801d836:	68e0      	ldr	r0, [r4, #12]
 801d838:	2202      	movs	r2, #2
 801d83a:	2112      	movs	r1, #18
 801d83c:	f7ff ff78 	bl	801d730 <std>
 801d840:	2301      	movs	r3, #1
 801d842:	61a3      	str	r3, [r4, #24]
 801d844:	e7d2      	b.n	801d7ec <__sinit+0xc>
 801d846:	bf00      	nop
 801d848:	08028634 	.word	0x08028634
 801d84c:	0801d779 	.word	0x0801d779

0801d850 <__sfp>:
 801d850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d852:	4607      	mov	r7, r0
 801d854:	f7ff ffac 	bl	801d7b0 <__sfp_lock_acquire>
 801d858:	4b1e      	ldr	r3, [pc, #120]	; (801d8d4 <__sfp+0x84>)
 801d85a:	681e      	ldr	r6, [r3, #0]
 801d85c:	69b3      	ldr	r3, [r6, #24]
 801d85e:	b913      	cbnz	r3, 801d866 <__sfp+0x16>
 801d860:	4630      	mov	r0, r6
 801d862:	f7ff ffbd 	bl	801d7e0 <__sinit>
 801d866:	3648      	adds	r6, #72	; 0x48
 801d868:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801d86c:	3b01      	subs	r3, #1
 801d86e:	d503      	bpl.n	801d878 <__sfp+0x28>
 801d870:	6833      	ldr	r3, [r6, #0]
 801d872:	b30b      	cbz	r3, 801d8b8 <__sfp+0x68>
 801d874:	6836      	ldr	r6, [r6, #0]
 801d876:	e7f7      	b.n	801d868 <__sfp+0x18>
 801d878:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801d87c:	b9d5      	cbnz	r5, 801d8b4 <__sfp+0x64>
 801d87e:	4b16      	ldr	r3, [pc, #88]	; (801d8d8 <__sfp+0x88>)
 801d880:	60e3      	str	r3, [r4, #12]
 801d882:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801d886:	6665      	str	r5, [r4, #100]	; 0x64
 801d888:	f000 fbba 	bl	801e000 <__retarget_lock_init_recursive>
 801d88c:	f7ff ff96 	bl	801d7bc <__sfp_lock_release>
 801d890:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801d894:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801d898:	6025      	str	r5, [r4, #0]
 801d89a:	61a5      	str	r5, [r4, #24]
 801d89c:	2208      	movs	r2, #8
 801d89e:	4629      	mov	r1, r5
 801d8a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801d8a4:	f7fc ffb4 	bl	801a810 <memset>
 801d8a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801d8ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801d8b0:	4620      	mov	r0, r4
 801d8b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d8b4:	3468      	adds	r4, #104	; 0x68
 801d8b6:	e7d9      	b.n	801d86c <__sfp+0x1c>
 801d8b8:	2104      	movs	r1, #4
 801d8ba:	4638      	mov	r0, r7
 801d8bc:	f7ff ff62 	bl	801d784 <__sfmoreglue>
 801d8c0:	4604      	mov	r4, r0
 801d8c2:	6030      	str	r0, [r6, #0]
 801d8c4:	2800      	cmp	r0, #0
 801d8c6:	d1d5      	bne.n	801d874 <__sfp+0x24>
 801d8c8:	f7ff ff78 	bl	801d7bc <__sfp_lock_release>
 801d8cc:	230c      	movs	r3, #12
 801d8ce:	603b      	str	r3, [r7, #0]
 801d8d0:	e7ee      	b.n	801d8b0 <__sfp+0x60>
 801d8d2:	bf00      	nop
 801d8d4:	08028634 	.word	0x08028634
 801d8d8:	ffff0001 	.word	0xffff0001

0801d8dc <_fwalk_reent>:
 801d8dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d8e0:	4606      	mov	r6, r0
 801d8e2:	4688      	mov	r8, r1
 801d8e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801d8e8:	2700      	movs	r7, #0
 801d8ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d8ee:	f1b9 0901 	subs.w	r9, r9, #1
 801d8f2:	d505      	bpl.n	801d900 <_fwalk_reent+0x24>
 801d8f4:	6824      	ldr	r4, [r4, #0]
 801d8f6:	2c00      	cmp	r4, #0
 801d8f8:	d1f7      	bne.n	801d8ea <_fwalk_reent+0xe>
 801d8fa:	4638      	mov	r0, r7
 801d8fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d900:	89ab      	ldrh	r3, [r5, #12]
 801d902:	2b01      	cmp	r3, #1
 801d904:	d907      	bls.n	801d916 <_fwalk_reent+0x3a>
 801d906:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d90a:	3301      	adds	r3, #1
 801d90c:	d003      	beq.n	801d916 <_fwalk_reent+0x3a>
 801d90e:	4629      	mov	r1, r5
 801d910:	4630      	mov	r0, r6
 801d912:	47c0      	blx	r8
 801d914:	4307      	orrs	r7, r0
 801d916:	3568      	adds	r5, #104	; 0x68
 801d918:	e7e9      	b.n	801d8ee <_fwalk_reent+0x12>

0801d91a <rshift>:
 801d91a:	6903      	ldr	r3, [r0, #16]
 801d91c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801d920:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d924:	ea4f 1261 	mov.w	r2, r1, asr #5
 801d928:	f100 0414 	add.w	r4, r0, #20
 801d92c:	dd45      	ble.n	801d9ba <rshift+0xa0>
 801d92e:	f011 011f 	ands.w	r1, r1, #31
 801d932:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801d936:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801d93a:	d10c      	bne.n	801d956 <rshift+0x3c>
 801d93c:	f100 0710 	add.w	r7, r0, #16
 801d940:	4629      	mov	r1, r5
 801d942:	42b1      	cmp	r1, r6
 801d944:	d334      	bcc.n	801d9b0 <rshift+0x96>
 801d946:	1a9b      	subs	r3, r3, r2
 801d948:	009b      	lsls	r3, r3, #2
 801d94a:	1eea      	subs	r2, r5, #3
 801d94c:	4296      	cmp	r6, r2
 801d94e:	bf38      	it	cc
 801d950:	2300      	movcc	r3, #0
 801d952:	4423      	add	r3, r4
 801d954:	e015      	b.n	801d982 <rshift+0x68>
 801d956:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801d95a:	f1c1 0820 	rsb	r8, r1, #32
 801d95e:	40cf      	lsrs	r7, r1
 801d960:	f105 0e04 	add.w	lr, r5, #4
 801d964:	46a1      	mov	r9, r4
 801d966:	4576      	cmp	r6, lr
 801d968:	46f4      	mov	ip, lr
 801d96a:	d815      	bhi.n	801d998 <rshift+0x7e>
 801d96c:	1a9b      	subs	r3, r3, r2
 801d96e:	009a      	lsls	r2, r3, #2
 801d970:	3a04      	subs	r2, #4
 801d972:	3501      	adds	r5, #1
 801d974:	42ae      	cmp	r6, r5
 801d976:	bf38      	it	cc
 801d978:	2200      	movcc	r2, #0
 801d97a:	18a3      	adds	r3, r4, r2
 801d97c:	50a7      	str	r7, [r4, r2]
 801d97e:	b107      	cbz	r7, 801d982 <rshift+0x68>
 801d980:	3304      	adds	r3, #4
 801d982:	1b1a      	subs	r2, r3, r4
 801d984:	42a3      	cmp	r3, r4
 801d986:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801d98a:	bf08      	it	eq
 801d98c:	2300      	moveq	r3, #0
 801d98e:	6102      	str	r2, [r0, #16]
 801d990:	bf08      	it	eq
 801d992:	6143      	streq	r3, [r0, #20]
 801d994:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d998:	f8dc c000 	ldr.w	ip, [ip]
 801d99c:	fa0c fc08 	lsl.w	ip, ip, r8
 801d9a0:	ea4c 0707 	orr.w	r7, ip, r7
 801d9a4:	f849 7b04 	str.w	r7, [r9], #4
 801d9a8:	f85e 7b04 	ldr.w	r7, [lr], #4
 801d9ac:	40cf      	lsrs	r7, r1
 801d9ae:	e7da      	b.n	801d966 <rshift+0x4c>
 801d9b0:	f851 cb04 	ldr.w	ip, [r1], #4
 801d9b4:	f847 cf04 	str.w	ip, [r7, #4]!
 801d9b8:	e7c3      	b.n	801d942 <rshift+0x28>
 801d9ba:	4623      	mov	r3, r4
 801d9bc:	e7e1      	b.n	801d982 <rshift+0x68>

0801d9be <__hexdig_fun>:
 801d9be:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801d9c2:	2b09      	cmp	r3, #9
 801d9c4:	d802      	bhi.n	801d9cc <__hexdig_fun+0xe>
 801d9c6:	3820      	subs	r0, #32
 801d9c8:	b2c0      	uxtb	r0, r0
 801d9ca:	4770      	bx	lr
 801d9cc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801d9d0:	2b05      	cmp	r3, #5
 801d9d2:	d801      	bhi.n	801d9d8 <__hexdig_fun+0x1a>
 801d9d4:	3847      	subs	r0, #71	; 0x47
 801d9d6:	e7f7      	b.n	801d9c8 <__hexdig_fun+0xa>
 801d9d8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801d9dc:	2b05      	cmp	r3, #5
 801d9de:	d801      	bhi.n	801d9e4 <__hexdig_fun+0x26>
 801d9e0:	3827      	subs	r0, #39	; 0x27
 801d9e2:	e7f1      	b.n	801d9c8 <__hexdig_fun+0xa>
 801d9e4:	2000      	movs	r0, #0
 801d9e6:	4770      	bx	lr

0801d9e8 <__gethex>:
 801d9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9ec:	ed2d 8b02 	vpush	{d8}
 801d9f0:	b089      	sub	sp, #36	; 0x24
 801d9f2:	ee08 0a10 	vmov	s16, r0
 801d9f6:	9304      	str	r3, [sp, #16]
 801d9f8:	4bbc      	ldr	r3, [pc, #752]	; (801dcec <__gethex+0x304>)
 801d9fa:	681b      	ldr	r3, [r3, #0]
 801d9fc:	9301      	str	r3, [sp, #4]
 801d9fe:	4618      	mov	r0, r3
 801da00:	468b      	mov	fp, r1
 801da02:	4690      	mov	r8, r2
 801da04:	f7e2 fc76 	bl	80002f4 <strlen>
 801da08:	9b01      	ldr	r3, [sp, #4]
 801da0a:	f8db 2000 	ldr.w	r2, [fp]
 801da0e:	4403      	add	r3, r0
 801da10:	4682      	mov	sl, r0
 801da12:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801da16:	9305      	str	r3, [sp, #20]
 801da18:	1c93      	adds	r3, r2, #2
 801da1a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801da1e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801da22:	32fe      	adds	r2, #254	; 0xfe
 801da24:	18d1      	adds	r1, r2, r3
 801da26:	461f      	mov	r7, r3
 801da28:	f813 0b01 	ldrb.w	r0, [r3], #1
 801da2c:	9100      	str	r1, [sp, #0]
 801da2e:	2830      	cmp	r0, #48	; 0x30
 801da30:	d0f8      	beq.n	801da24 <__gethex+0x3c>
 801da32:	f7ff ffc4 	bl	801d9be <__hexdig_fun>
 801da36:	4604      	mov	r4, r0
 801da38:	2800      	cmp	r0, #0
 801da3a:	d13a      	bne.n	801dab2 <__gethex+0xca>
 801da3c:	9901      	ldr	r1, [sp, #4]
 801da3e:	4652      	mov	r2, sl
 801da40:	4638      	mov	r0, r7
 801da42:	f7fe f82f 	bl	801baa4 <strncmp>
 801da46:	4605      	mov	r5, r0
 801da48:	2800      	cmp	r0, #0
 801da4a:	d168      	bne.n	801db1e <__gethex+0x136>
 801da4c:	f817 000a 	ldrb.w	r0, [r7, sl]
 801da50:	eb07 060a 	add.w	r6, r7, sl
 801da54:	f7ff ffb3 	bl	801d9be <__hexdig_fun>
 801da58:	2800      	cmp	r0, #0
 801da5a:	d062      	beq.n	801db22 <__gethex+0x13a>
 801da5c:	4633      	mov	r3, r6
 801da5e:	7818      	ldrb	r0, [r3, #0]
 801da60:	2830      	cmp	r0, #48	; 0x30
 801da62:	461f      	mov	r7, r3
 801da64:	f103 0301 	add.w	r3, r3, #1
 801da68:	d0f9      	beq.n	801da5e <__gethex+0x76>
 801da6a:	f7ff ffa8 	bl	801d9be <__hexdig_fun>
 801da6e:	2301      	movs	r3, #1
 801da70:	fab0 f480 	clz	r4, r0
 801da74:	0964      	lsrs	r4, r4, #5
 801da76:	4635      	mov	r5, r6
 801da78:	9300      	str	r3, [sp, #0]
 801da7a:	463a      	mov	r2, r7
 801da7c:	4616      	mov	r6, r2
 801da7e:	3201      	adds	r2, #1
 801da80:	7830      	ldrb	r0, [r6, #0]
 801da82:	f7ff ff9c 	bl	801d9be <__hexdig_fun>
 801da86:	2800      	cmp	r0, #0
 801da88:	d1f8      	bne.n	801da7c <__gethex+0x94>
 801da8a:	9901      	ldr	r1, [sp, #4]
 801da8c:	4652      	mov	r2, sl
 801da8e:	4630      	mov	r0, r6
 801da90:	f7fe f808 	bl	801baa4 <strncmp>
 801da94:	b980      	cbnz	r0, 801dab8 <__gethex+0xd0>
 801da96:	b94d      	cbnz	r5, 801daac <__gethex+0xc4>
 801da98:	eb06 050a 	add.w	r5, r6, sl
 801da9c:	462a      	mov	r2, r5
 801da9e:	4616      	mov	r6, r2
 801daa0:	3201      	adds	r2, #1
 801daa2:	7830      	ldrb	r0, [r6, #0]
 801daa4:	f7ff ff8b 	bl	801d9be <__hexdig_fun>
 801daa8:	2800      	cmp	r0, #0
 801daaa:	d1f8      	bne.n	801da9e <__gethex+0xb6>
 801daac:	1bad      	subs	r5, r5, r6
 801daae:	00ad      	lsls	r5, r5, #2
 801dab0:	e004      	b.n	801dabc <__gethex+0xd4>
 801dab2:	2400      	movs	r4, #0
 801dab4:	4625      	mov	r5, r4
 801dab6:	e7e0      	b.n	801da7a <__gethex+0x92>
 801dab8:	2d00      	cmp	r5, #0
 801daba:	d1f7      	bne.n	801daac <__gethex+0xc4>
 801dabc:	7833      	ldrb	r3, [r6, #0]
 801dabe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801dac2:	2b50      	cmp	r3, #80	; 0x50
 801dac4:	d13b      	bne.n	801db3e <__gethex+0x156>
 801dac6:	7873      	ldrb	r3, [r6, #1]
 801dac8:	2b2b      	cmp	r3, #43	; 0x2b
 801daca:	d02c      	beq.n	801db26 <__gethex+0x13e>
 801dacc:	2b2d      	cmp	r3, #45	; 0x2d
 801dace:	d02e      	beq.n	801db2e <__gethex+0x146>
 801dad0:	1c71      	adds	r1, r6, #1
 801dad2:	f04f 0900 	mov.w	r9, #0
 801dad6:	7808      	ldrb	r0, [r1, #0]
 801dad8:	f7ff ff71 	bl	801d9be <__hexdig_fun>
 801dadc:	1e43      	subs	r3, r0, #1
 801dade:	b2db      	uxtb	r3, r3
 801dae0:	2b18      	cmp	r3, #24
 801dae2:	d82c      	bhi.n	801db3e <__gethex+0x156>
 801dae4:	f1a0 0210 	sub.w	r2, r0, #16
 801dae8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801daec:	f7ff ff67 	bl	801d9be <__hexdig_fun>
 801daf0:	1e43      	subs	r3, r0, #1
 801daf2:	b2db      	uxtb	r3, r3
 801daf4:	2b18      	cmp	r3, #24
 801daf6:	d91d      	bls.n	801db34 <__gethex+0x14c>
 801daf8:	f1b9 0f00 	cmp.w	r9, #0
 801dafc:	d000      	beq.n	801db00 <__gethex+0x118>
 801dafe:	4252      	negs	r2, r2
 801db00:	4415      	add	r5, r2
 801db02:	f8cb 1000 	str.w	r1, [fp]
 801db06:	b1e4      	cbz	r4, 801db42 <__gethex+0x15a>
 801db08:	9b00      	ldr	r3, [sp, #0]
 801db0a:	2b00      	cmp	r3, #0
 801db0c:	bf14      	ite	ne
 801db0e:	2700      	movne	r7, #0
 801db10:	2706      	moveq	r7, #6
 801db12:	4638      	mov	r0, r7
 801db14:	b009      	add	sp, #36	; 0x24
 801db16:	ecbd 8b02 	vpop	{d8}
 801db1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db1e:	463e      	mov	r6, r7
 801db20:	4625      	mov	r5, r4
 801db22:	2401      	movs	r4, #1
 801db24:	e7ca      	b.n	801dabc <__gethex+0xd4>
 801db26:	f04f 0900 	mov.w	r9, #0
 801db2a:	1cb1      	adds	r1, r6, #2
 801db2c:	e7d3      	b.n	801dad6 <__gethex+0xee>
 801db2e:	f04f 0901 	mov.w	r9, #1
 801db32:	e7fa      	b.n	801db2a <__gethex+0x142>
 801db34:	230a      	movs	r3, #10
 801db36:	fb03 0202 	mla	r2, r3, r2, r0
 801db3a:	3a10      	subs	r2, #16
 801db3c:	e7d4      	b.n	801dae8 <__gethex+0x100>
 801db3e:	4631      	mov	r1, r6
 801db40:	e7df      	b.n	801db02 <__gethex+0x11a>
 801db42:	1bf3      	subs	r3, r6, r7
 801db44:	3b01      	subs	r3, #1
 801db46:	4621      	mov	r1, r4
 801db48:	2b07      	cmp	r3, #7
 801db4a:	dc0b      	bgt.n	801db64 <__gethex+0x17c>
 801db4c:	ee18 0a10 	vmov	r0, s16
 801db50:	f000 fadc 	bl	801e10c <_Balloc>
 801db54:	4604      	mov	r4, r0
 801db56:	b940      	cbnz	r0, 801db6a <__gethex+0x182>
 801db58:	4b65      	ldr	r3, [pc, #404]	; (801dcf0 <__gethex+0x308>)
 801db5a:	4602      	mov	r2, r0
 801db5c:	21de      	movs	r1, #222	; 0xde
 801db5e:	4865      	ldr	r0, [pc, #404]	; (801dcf4 <__gethex+0x30c>)
 801db60:	f7fc fdc0 	bl	801a6e4 <__assert_func>
 801db64:	3101      	adds	r1, #1
 801db66:	105b      	asrs	r3, r3, #1
 801db68:	e7ee      	b.n	801db48 <__gethex+0x160>
 801db6a:	f100 0914 	add.w	r9, r0, #20
 801db6e:	f04f 0b00 	mov.w	fp, #0
 801db72:	f1ca 0301 	rsb	r3, sl, #1
 801db76:	f8cd 9008 	str.w	r9, [sp, #8]
 801db7a:	f8cd b000 	str.w	fp, [sp]
 801db7e:	9306      	str	r3, [sp, #24]
 801db80:	42b7      	cmp	r7, r6
 801db82:	d340      	bcc.n	801dc06 <__gethex+0x21e>
 801db84:	9802      	ldr	r0, [sp, #8]
 801db86:	9b00      	ldr	r3, [sp, #0]
 801db88:	f840 3b04 	str.w	r3, [r0], #4
 801db8c:	eba0 0009 	sub.w	r0, r0, r9
 801db90:	1080      	asrs	r0, r0, #2
 801db92:	0146      	lsls	r6, r0, #5
 801db94:	6120      	str	r0, [r4, #16]
 801db96:	4618      	mov	r0, r3
 801db98:	f000 fbae 	bl	801e2f8 <__hi0bits>
 801db9c:	1a30      	subs	r0, r6, r0
 801db9e:	f8d8 6000 	ldr.w	r6, [r8]
 801dba2:	42b0      	cmp	r0, r6
 801dba4:	dd63      	ble.n	801dc6e <__gethex+0x286>
 801dba6:	1b87      	subs	r7, r0, r6
 801dba8:	4639      	mov	r1, r7
 801dbaa:	4620      	mov	r0, r4
 801dbac:	f000 ff49 	bl	801ea42 <__any_on>
 801dbb0:	4682      	mov	sl, r0
 801dbb2:	b1a8      	cbz	r0, 801dbe0 <__gethex+0x1f8>
 801dbb4:	1e7b      	subs	r3, r7, #1
 801dbb6:	1159      	asrs	r1, r3, #5
 801dbb8:	f003 021f 	and.w	r2, r3, #31
 801dbbc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801dbc0:	f04f 0a01 	mov.w	sl, #1
 801dbc4:	fa0a f202 	lsl.w	r2, sl, r2
 801dbc8:	420a      	tst	r2, r1
 801dbca:	d009      	beq.n	801dbe0 <__gethex+0x1f8>
 801dbcc:	4553      	cmp	r3, sl
 801dbce:	dd05      	ble.n	801dbdc <__gethex+0x1f4>
 801dbd0:	1eb9      	subs	r1, r7, #2
 801dbd2:	4620      	mov	r0, r4
 801dbd4:	f000 ff35 	bl	801ea42 <__any_on>
 801dbd8:	2800      	cmp	r0, #0
 801dbda:	d145      	bne.n	801dc68 <__gethex+0x280>
 801dbdc:	f04f 0a02 	mov.w	sl, #2
 801dbe0:	4639      	mov	r1, r7
 801dbe2:	4620      	mov	r0, r4
 801dbe4:	f7ff fe99 	bl	801d91a <rshift>
 801dbe8:	443d      	add	r5, r7
 801dbea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801dbee:	42ab      	cmp	r3, r5
 801dbf0:	da4c      	bge.n	801dc8c <__gethex+0x2a4>
 801dbf2:	ee18 0a10 	vmov	r0, s16
 801dbf6:	4621      	mov	r1, r4
 801dbf8:	f000 fac8 	bl	801e18c <_Bfree>
 801dbfc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801dbfe:	2300      	movs	r3, #0
 801dc00:	6013      	str	r3, [r2, #0]
 801dc02:	27a3      	movs	r7, #163	; 0xa3
 801dc04:	e785      	b.n	801db12 <__gethex+0x12a>
 801dc06:	1e73      	subs	r3, r6, #1
 801dc08:	9a05      	ldr	r2, [sp, #20]
 801dc0a:	9303      	str	r3, [sp, #12]
 801dc0c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801dc10:	4293      	cmp	r3, r2
 801dc12:	d019      	beq.n	801dc48 <__gethex+0x260>
 801dc14:	f1bb 0f20 	cmp.w	fp, #32
 801dc18:	d107      	bne.n	801dc2a <__gethex+0x242>
 801dc1a:	9b02      	ldr	r3, [sp, #8]
 801dc1c:	9a00      	ldr	r2, [sp, #0]
 801dc1e:	f843 2b04 	str.w	r2, [r3], #4
 801dc22:	9302      	str	r3, [sp, #8]
 801dc24:	2300      	movs	r3, #0
 801dc26:	9300      	str	r3, [sp, #0]
 801dc28:	469b      	mov	fp, r3
 801dc2a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801dc2e:	f7ff fec6 	bl	801d9be <__hexdig_fun>
 801dc32:	9b00      	ldr	r3, [sp, #0]
 801dc34:	f000 000f 	and.w	r0, r0, #15
 801dc38:	fa00 f00b 	lsl.w	r0, r0, fp
 801dc3c:	4303      	orrs	r3, r0
 801dc3e:	9300      	str	r3, [sp, #0]
 801dc40:	f10b 0b04 	add.w	fp, fp, #4
 801dc44:	9b03      	ldr	r3, [sp, #12]
 801dc46:	e00d      	b.n	801dc64 <__gethex+0x27c>
 801dc48:	9b03      	ldr	r3, [sp, #12]
 801dc4a:	9a06      	ldr	r2, [sp, #24]
 801dc4c:	4413      	add	r3, r2
 801dc4e:	42bb      	cmp	r3, r7
 801dc50:	d3e0      	bcc.n	801dc14 <__gethex+0x22c>
 801dc52:	4618      	mov	r0, r3
 801dc54:	9901      	ldr	r1, [sp, #4]
 801dc56:	9307      	str	r3, [sp, #28]
 801dc58:	4652      	mov	r2, sl
 801dc5a:	f7fd ff23 	bl	801baa4 <strncmp>
 801dc5e:	9b07      	ldr	r3, [sp, #28]
 801dc60:	2800      	cmp	r0, #0
 801dc62:	d1d7      	bne.n	801dc14 <__gethex+0x22c>
 801dc64:	461e      	mov	r6, r3
 801dc66:	e78b      	b.n	801db80 <__gethex+0x198>
 801dc68:	f04f 0a03 	mov.w	sl, #3
 801dc6c:	e7b8      	b.n	801dbe0 <__gethex+0x1f8>
 801dc6e:	da0a      	bge.n	801dc86 <__gethex+0x29e>
 801dc70:	1a37      	subs	r7, r6, r0
 801dc72:	4621      	mov	r1, r4
 801dc74:	ee18 0a10 	vmov	r0, s16
 801dc78:	463a      	mov	r2, r7
 801dc7a:	f000 fca3 	bl	801e5c4 <__lshift>
 801dc7e:	1bed      	subs	r5, r5, r7
 801dc80:	4604      	mov	r4, r0
 801dc82:	f100 0914 	add.w	r9, r0, #20
 801dc86:	f04f 0a00 	mov.w	sl, #0
 801dc8a:	e7ae      	b.n	801dbea <__gethex+0x202>
 801dc8c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801dc90:	42a8      	cmp	r0, r5
 801dc92:	dd72      	ble.n	801dd7a <__gethex+0x392>
 801dc94:	1b45      	subs	r5, r0, r5
 801dc96:	42ae      	cmp	r6, r5
 801dc98:	dc36      	bgt.n	801dd08 <__gethex+0x320>
 801dc9a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801dc9e:	2b02      	cmp	r3, #2
 801dca0:	d02a      	beq.n	801dcf8 <__gethex+0x310>
 801dca2:	2b03      	cmp	r3, #3
 801dca4:	d02c      	beq.n	801dd00 <__gethex+0x318>
 801dca6:	2b01      	cmp	r3, #1
 801dca8:	d115      	bne.n	801dcd6 <__gethex+0x2ee>
 801dcaa:	42ae      	cmp	r6, r5
 801dcac:	d113      	bne.n	801dcd6 <__gethex+0x2ee>
 801dcae:	2e01      	cmp	r6, #1
 801dcb0:	d10b      	bne.n	801dcca <__gethex+0x2e2>
 801dcb2:	9a04      	ldr	r2, [sp, #16]
 801dcb4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801dcb8:	6013      	str	r3, [r2, #0]
 801dcba:	2301      	movs	r3, #1
 801dcbc:	6123      	str	r3, [r4, #16]
 801dcbe:	f8c9 3000 	str.w	r3, [r9]
 801dcc2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801dcc4:	2762      	movs	r7, #98	; 0x62
 801dcc6:	601c      	str	r4, [r3, #0]
 801dcc8:	e723      	b.n	801db12 <__gethex+0x12a>
 801dcca:	1e71      	subs	r1, r6, #1
 801dccc:	4620      	mov	r0, r4
 801dcce:	f000 feb8 	bl	801ea42 <__any_on>
 801dcd2:	2800      	cmp	r0, #0
 801dcd4:	d1ed      	bne.n	801dcb2 <__gethex+0x2ca>
 801dcd6:	ee18 0a10 	vmov	r0, s16
 801dcda:	4621      	mov	r1, r4
 801dcdc:	f000 fa56 	bl	801e18c <_Bfree>
 801dce0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801dce2:	2300      	movs	r3, #0
 801dce4:	6013      	str	r3, [r2, #0]
 801dce6:	2750      	movs	r7, #80	; 0x50
 801dce8:	e713      	b.n	801db12 <__gethex+0x12a>
 801dcea:	bf00      	nop
 801dcec:	0802893c 	.word	0x0802893c
 801dcf0:	0802885c 	.word	0x0802885c
 801dcf4:	080288d0 	.word	0x080288d0
 801dcf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dcfa:	2b00      	cmp	r3, #0
 801dcfc:	d1eb      	bne.n	801dcd6 <__gethex+0x2ee>
 801dcfe:	e7d8      	b.n	801dcb2 <__gethex+0x2ca>
 801dd00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dd02:	2b00      	cmp	r3, #0
 801dd04:	d1d5      	bne.n	801dcb2 <__gethex+0x2ca>
 801dd06:	e7e6      	b.n	801dcd6 <__gethex+0x2ee>
 801dd08:	1e6f      	subs	r7, r5, #1
 801dd0a:	f1ba 0f00 	cmp.w	sl, #0
 801dd0e:	d131      	bne.n	801dd74 <__gethex+0x38c>
 801dd10:	b127      	cbz	r7, 801dd1c <__gethex+0x334>
 801dd12:	4639      	mov	r1, r7
 801dd14:	4620      	mov	r0, r4
 801dd16:	f000 fe94 	bl	801ea42 <__any_on>
 801dd1a:	4682      	mov	sl, r0
 801dd1c:	117b      	asrs	r3, r7, #5
 801dd1e:	2101      	movs	r1, #1
 801dd20:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801dd24:	f007 071f 	and.w	r7, r7, #31
 801dd28:	fa01 f707 	lsl.w	r7, r1, r7
 801dd2c:	421f      	tst	r7, r3
 801dd2e:	4629      	mov	r1, r5
 801dd30:	4620      	mov	r0, r4
 801dd32:	bf18      	it	ne
 801dd34:	f04a 0a02 	orrne.w	sl, sl, #2
 801dd38:	1b76      	subs	r6, r6, r5
 801dd3a:	f7ff fdee 	bl	801d91a <rshift>
 801dd3e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801dd42:	2702      	movs	r7, #2
 801dd44:	f1ba 0f00 	cmp.w	sl, #0
 801dd48:	d048      	beq.n	801dddc <__gethex+0x3f4>
 801dd4a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801dd4e:	2b02      	cmp	r3, #2
 801dd50:	d015      	beq.n	801dd7e <__gethex+0x396>
 801dd52:	2b03      	cmp	r3, #3
 801dd54:	d017      	beq.n	801dd86 <__gethex+0x39e>
 801dd56:	2b01      	cmp	r3, #1
 801dd58:	d109      	bne.n	801dd6e <__gethex+0x386>
 801dd5a:	f01a 0f02 	tst.w	sl, #2
 801dd5e:	d006      	beq.n	801dd6e <__gethex+0x386>
 801dd60:	f8d9 0000 	ldr.w	r0, [r9]
 801dd64:	ea4a 0a00 	orr.w	sl, sl, r0
 801dd68:	f01a 0f01 	tst.w	sl, #1
 801dd6c:	d10e      	bne.n	801dd8c <__gethex+0x3a4>
 801dd6e:	f047 0710 	orr.w	r7, r7, #16
 801dd72:	e033      	b.n	801dddc <__gethex+0x3f4>
 801dd74:	f04f 0a01 	mov.w	sl, #1
 801dd78:	e7d0      	b.n	801dd1c <__gethex+0x334>
 801dd7a:	2701      	movs	r7, #1
 801dd7c:	e7e2      	b.n	801dd44 <__gethex+0x35c>
 801dd7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dd80:	f1c3 0301 	rsb	r3, r3, #1
 801dd84:	9315      	str	r3, [sp, #84]	; 0x54
 801dd86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dd88:	2b00      	cmp	r3, #0
 801dd8a:	d0f0      	beq.n	801dd6e <__gethex+0x386>
 801dd8c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801dd90:	f104 0314 	add.w	r3, r4, #20
 801dd94:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801dd98:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801dd9c:	f04f 0c00 	mov.w	ip, #0
 801dda0:	4618      	mov	r0, r3
 801dda2:	f853 2b04 	ldr.w	r2, [r3], #4
 801dda6:	f1b2 3fff 	cmp.w	r2, #4294967295
 801ddaa:	d01c      	beq.n	801dde6 <__gethex+0x3fe>
 801ddac:	3201      	adds	r2, #1
 801ddae:	6002      	str	r2, [r0, #0]
 801ddb0:	2f02      	cmp	r7, #2
 801ddb2:	f104 0314 	add.w	r3, r4, #20
 801ddb6:	d13f      	bne.n	801de38 <__gethex+0x450>
 801ddb8:	f8d8 2000 	ldr.w	r2, [r8]
 801ddbc:	3a01      	subs	r2, #1
 801ddbe:	42b2      	cmp	r2, r6
 801ddc0:	d10a      	bne.n	801ddd8 <__gethex+0x3f0>
 801ddc2:	1171      	asrs	r1, r6, #5
 801ddc4:	2201      	movs	r2, #1
 801ddc6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ddca:	f006 061f 	and.w	r6, r6, #31
 801ddce:	fa02 f606 	lsl.w	r6, r2, r6
 801ddd2:	421e      	tst	r6, r3
 801ddd4:	bf18      	it	ne
 801ddd6:	4617      	movne	r7, r2
 801ddd8:	f047 0720 	orr.w	r7, r7, #32
 801dddc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ddde:	601c      	str	r4, [r3, #0]
 801dde0:	9b04      	ldr	r3, [sp, #16]
 801dde2:	601d      	str	r5, [r3, #0]
 801dde4:	e695      	b.n	801db12 <__gethex+0x12a>
 801dde6:	4299      	cmp	r1, r3
 801dde8:	f843 cc04 	str.w	ip, [r3, #-4]
 801ddec:	d8d8      	bhi.n	801dda0 <__gethex+0x3b8>
 801ddee:	68a3      	ldr	r3, [r4, #8]
 801ddf0:	459b      	cmp	fp, r3
 801ddf2:	db19      	blt.n	801de28 <__gethex+0x440>
 801ddf4:	6861      	ldr	r1, [r4, #4]
 801ddf6:	ee18 0a10 	vmov	r0, s16
 801ddfa:	3101      	adds	r1, #1
 801ddfc:	f000 f986 	bl	801e10c <_Balloc>
 801de00:	4681      	mov	r9, r0
 801de02:	b918      	cbnz	r0, 801de0c <__gethex+0x424>
 801de04:	4b1a      	ldr	r3, [pc, #104]	; (801de70 <__gethex+0x488>)
 801de06:	4602      	mov	r2, r0
 801de08:	2184      	movs	r1, #132	; 0x84
 801de0a:	e6a8      	b.n	801db5e <__gethex+0x176>
 801de0c:	6922      	ldr	r2, [r4, #16]
 801de0e:	3202      	adds	r2, #2
 801de10:	f104 010c 	add.w	r1, r4, #12
 801de14:	0092      	lsls	r2, r2, #2
 801de16:	300c      	adds	r0, #12
 801de18:	f7fc fcd2 	bl	801a7c0 <memcpy>
 801de1c:	4621      	mov	r1, r4
 801de1e:	ee18 0a10 	vmov	r0, s16
 801de22:	f000 f9b3 	bl	801e18c <_Bfree>
 801de26:	464c      	mov	r4, r9
 801de28:	6923      	ldr	r3, [r4, #16]
 801de2a:	1c5a      	adds	r2, r3, #1
 801de2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801de30:	6122      	str	r2, [r4, #16]
 801de32:	2201      	movs	r2, #1
 801de34:	615a      	str	r2, [r3, #20]
 801de36:	e7bb      	b.n	801ddb0 <__gethex+0x3c8>
 801de38:	6922      	ldr	r2, [r4, #16]
 801de3a:	455a      	cmp	r2, fp
 801de3c:	dd0b      	ble.n	801de56 <__gethex+0x46e>
 801de3e:	2101      	movs	r1, #1
 801de40:	4620      	mov	r0, r4
 801de42:	f7ff fd6a 	bl	801d91a <rshift>
 801de46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801de4a:	3501      	adds	r5, #1
 801de4c:	42ab      	cmp	r3, r5
 801de4e:	f6ff aed0 	blt.w	801dbf2 <__gethex+0x20a>
 801de52:	2701      	movs	r7, #1
 801de54:	e7c0      	b.n	801ddd8 <__gethex+0x3f0>
 801de56:	f016 061f 	ands.w	r6, r6, #31
 801de5a:	d0fa      	beq.n	801de52 <__gethex+0x46a>
 801de5c:	449a      	add	sl, r3
 801de5e:	f1c6 0620 	rsb	r6, r6, #32
 801de62:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801de66:	f000 fa47 	bl	801e2f8 <__hi0bits>
 801de6a:	42b0      	cmp	r0, r6
 801de6c:	dbe7      	blt.n	801de3e <__gethex+0x456>
 801de6e:	e7f0      	b.n	801de52 <__gethex+0x46a>
 801de70:	0802885c 	.word	0x0802885c

0801de74 <L_shift>:
 801de74:	f1c2 0208 	rsb	r2, r2, #8
 801de78:	0092      	lsls	r2, r2, #2
 801de7a:	b570      	push	{r4, r5, r6, lr}
 801de7c:	f1c2 0620 	rsb	r6, r2, #32
 801de80:	6843      	ldr	r3, [r0, #4]
 801de82:	6804      	ldr	r4, [r0, #0]
 801de84:	fa03 f506 	lsl.w	r5, r3, r6
 801de88:	432c      	orrs	r4, r5
 801de8a:	40d3      	lsrs	r3, r2
 801de8c:	6004      	str	r4, [r0, #0]
 801de8e:	f840 3f04 	str.w	r3, [r0, #4]!
 801de92:	4288      	cmp	r0, r1
 801de94:	d3f4      	bcc.n	801de80 <L_shift+0xc>
 801de96:	bd70      	pop	{r4, r5, r6, pc}

0801de98 <__match>:
 801de98:	b530      	push	{r4, r5, lr}
 801de9a:	6803      	ldr	r3, [r0, #0]
 801de9c:	3301      	adds	r3, #1
 801de9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801dea2:	b914      	cbnz	r4, 801deaa <__match+0x12>
 801dea4:	6003      	str	r3, [r0, #0]
 801dea6:	2001      	movs	r0, #1
 801dea8:	bd30      	pop	{r4, r5, pc}
 801deaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 801deae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801deb2:	2d19      	cmp	r5, #25
 801deb4:	bf98      	it	ls
 801deb6:	3220      	addls	r2, #32
 801deb8:	42a2      	cmp	r2, r4
 801deba:	d0f0      	beq.n	801de9e <__match+0x6>
 801debc:	2000      	movs	r0, #0
 801debe:	e7f3      	b.n	801dea8 <__match+0x10>

0801dec0 <__hexnan>:
 801dec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dec4:	680b      	ldr	r3, [r1, #0]
 801dec6:	6801      	ldr	r1, [r0, #0]
 801dec8:	115e      	asrs	r6, r3, #5
 801deca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801dece:	f013 031f 	ands.w	r3, r3, #31
 801ded2:	b087      	sub	sp, #28
 801ded4:	bf18      	it	ne
 801ded6:	3604      	addne	r6, #4
 801ded8:	2500      	movs	r5, #0
 801deda:	1f37      	subs	r7, r6, #4
 801dedc:	4682      	mov	sl, r0
 801dede:	4690      	mov	r8, r2
 801dee0:	9301      	str	r3, [sp, #4]
 801dee2:	f846 5c04 	str.w	r5, [r6, #-4]
 801dee6:	46b9      	mov	r9, r7
 801dee8:	463c      	mov	r4, r7
 801deea:	9502      	str	r5, [sp, #8]
 801deec:	46ab      	mov	fp, r5
 801deee:	784a      	ldrb	r2, [r1, #1]
 801def0:	1c4b      	adds	r3, r1, #1
 801def2:	9303      	str	r3, [sp, #12]
 801def4:	b342      	cbz	r2, 801df48 <__hexnan+0x88>
 801def6:	4610      	mov	r0, r2
 801def8:	9105      	str	r1, [sp, #20]
 801defa:	9204      	str	r2, [sp, #16]
 801defc:	f7ff fd5f 	bl	801d9be <__hexdig_fun>
 801df00:	2800      	cmp	r0, #0
 801df02:	d14f      	bne.n	801dfa4 <__hexnan+0xe4>
 801df04:	9a04      	ldr	r2, [sp, #16]
 801df06:	9905      	ldr	r1, [sp, #20]
 801df08:	2a20      	cmp	r2, #32
 801df0a:	d818      	bhi.n	801df3e <__hexnan+0x7e>
 801df0c:	9b02      	ldr	r3, [sp, #8]
 801df0e:	459b      	cmp	fp, r3
 801df10:	dd13      	ble.n	801df3a <__hexnan+0x7a>
 801df12:	454c      	cmp	r4, r9
 801df14:	d206      	bcs.n	801df24 <__hexnan+0x64>
 801df16:	2d07      	cmp	r5, #7
 801df18:	dc04      	bgt.n	801df24 <__hexnan+0x64>
 801df1a:	462a      	mov	r2, r5
 801df1c:	4649      	mov	r1, r9
 801df1e:	4620      	mov	r0, r4
 801df20:	f7ff ffa8 	bl	801de74 <L_shift>
 801df24:	4544      	cmp	r4, r8
 801df26:	d950      	bls.n	801dfca <__hexnan+0x10a>
 801df28:	2300      	movs	r3, #0
 801df2a:	f1a4 0904 	sub.w	r9, r4, #4
 801df2e:	f844 3c04 	str.w	r3, [r4, #-4]
 801df32:	f8cd b008 	str.w	fp, [sp, #8]
 801df36:	464c      	mov	r4, r9
 801df38:	461d      	mov	r5, r3
 801df3a:	9903      	ldr	r1, [sp, #12]
 801df3c:	e7d7      	b.n	801deee <__hexnan+0x2e>
 801df3e:	2a29      	cmp	r2, #41	; 0x29
 801df40:	d156      	bne.n	801dff0 <__hexnan+0x130>
 801df42:	3102      	adds	r1, #2
 801df44:	f8ca 1000 	str.w	r1, [sl]
 801df48:	f1bb 0f00 	cmp.w	fp, #0
 801df4c:	d050      	beq.n	801dff0 <__hexnan+0x130>
 801df4e:	454c      	cmp	r4, r9
 801df50:	d206      	bcs.n	801df60 <__hexnan+0xa0>
 801df52:	2d07      	cmp	r5, #7
 801df54:	dc04      	bgt.n	801df60 <__hexnan+0xa0>
 801df56:	462a      	mov	r2, r5
 801df58:	4649      	mov	r1, r9
 801df5a:	4620      	mov	r0, r4
 801df5c:	f7ff ff8a 	bl	801de74 <L_shift>
 801df60:	4544      	cmp	r4, r8
 801df62:	d934      	bls.n	801dfce <__hexnan+0x10e>
 801df64:	f1a8 0204 	sub.w	r2, r8, #4
 801df68:	4623      	mov	r3, r4
 801df6a:	f853 1b04 	ldr.w	r1, [r3], #4
 801df6e:	f842 1f04 	str.w	r1, [r2, #4]!
 801df72:	429f      	cmp	r7, r3
 801df74:	d2f9      	bcs.n	801df6a <__hexnan+0xaa>
 801df76:	1b3b      	subs	r3, r7, r4
 801df78:	f023 0303 	bic.w	r3, r3, #3
 801df7c:	3304      	adds	r3, #4
 801df7e:	3401      	adds	r4, #1
 801df80:	3e03      	subs	r6, #3
 801df82:	42b4      	cmp	r4, r6
 801df84:	bf88      	it	hi
 801df86:	2304      	movhi	r3, #4
 801df88:	4443      	add	r3, r8
 801df8a:	2200      	movs	r2, #0
 801df8c:	f843 2b04 	str.w	r2, [r3], #4
 801df90:	429f      	cmp	r7, r3
 801df92:	d2fb      	bcs.n	801df8c <__hexnan+0xcc>
 801df94:	683b      	ldr	r3, [r7, #0]
 801df96:	b91b      	cbnz	r3, 801dfa0 <__hexnan+0xe0>
 801df98:	4547      	cmp	r7, r8
 801df9a:	d127      	bne.n	801dfec <__hexnan+0x12c>
 801df9c:	2301      	movs	r3, #1
 801df9e:	603b      	str	r3, [r7, #0]
 801dfa0:	2005      	movs	r0, #5
 801dfa2:	e026      	b.n	801dff2 <__hexnan+0x132>
 801dfa4:	3501      	adds	r5, #1
 801dfa6:	2d08      	cmp	r5, #8
 801dfa8:	f10b 0b01 	add.w	fp, fp, #1
 801dfac:	dd06      	ble.n	801dfbc <__hexnan+0xfc>
 801dfae:	4544      	cmp	r4, r8
 801dfb0:	d9c3      	bls.n	801df3a <__hexnan+0x7a>
 801dfb2:	2300      	movs	r3, #0
 801dfb4:	f844 3c04 	str.w	r3, [r4, #-4]
 801dfb8:	2501      	movs	r5, #1
 801dfba:	3c04      	subs	r4, #4
 801dfbc:	6822      	ldr	r2, [r4, #0]
 801dfbe:	f000 000f 	and.w	r0, r0, #15
 801dfc2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801dfc6:	6022      	str	r2, [r4, #0]
 801dfc8:	e7b7      	b.n	801df3a <__hexnan+0x7a>
 801dfca:	2508      	movs	r5, #8
 801dfcc:	e7b5      	b.n	801df3a <__hexnan+0x7a>
 801dfce:	9b01      	ldr	r3, [sp, #4]
 801dfd0:	2b00      	cmp	r3, #0
 801dfd2:	d0df      	beq.n	801df94 <__hexnan+0xd4>
 801dfd4:	f04f 32ff 	mov.w	r2, #4294967295
 801dfd8:	f1c3 0320 	rsb	r3, r3, #32
 801dfdc:	fa22 f303 	lsr.w	r3, r2, r3
 801dfe0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801dfe4:	401a      	ands	r2, r3
 801dfe6:	f846 2c04 	str.w	r2, [r6, #-4]
 801dfea:	e7d3      	b.n	801df94 <__hexnan+0xd4>
 801dfec:	3f04      	subs	r7, #4
 801dfee:	e7d1      	b.n	801df94 <__hexnan+0xd4>
 801dff0:	2004      	movs	r0, #4
 801dff2:	b007      	add	sp, #28
 801dff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dff8 <_localeconv_r>:
 801dff8:	4800      	ldr	r0, [pc, #0]	; (801dffc <_localeconv_r+0x4>)
 801dffa:	4770      	bx	lr
 801dffc:	2400a280 	.word	0x2400a280

0801e000 <__retarget_lock_init_recursive>:
 801e000:	4770      	bx	lr

0801e002 <__retarget_lock_acquire_recursive>:
 801e002:	4770      	bx	lr

0801e004 <__retarget_lock_release_recursive>:
 801e004:	4770      	bx	lr

0801e006 <__swhatbuf_r>:
 801e006:	b570      	push	{r4, r5, r6, lr}
 801e008:	460e      	mov	r6, r1
 801e00a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e00e:	2900      	cmp	r1, #0
 801e010:	b096      	sub	sp, #88	; 0x58
 801e012:	4614      	mov	r4, r2
 801e014:	461d      	mov	r5, r3
 801e016:	da07      	bge.n	801e028 <__swhatbuf_r+0x22>
 801e018:	2300      	movs	r3, #0
 801e01a:	602b      	str	r3, [r5, #0]
 801e01c:	89b3      	ldrh	r3, [r6, #12]
 801e01e:	061a      	lsls	r2, r3, #24
 801e020:	d410      	bmi.n	801e044 <__swhatbuf_r+0x3e>
 801e022:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e026:	e00e      	b.n	801e046 <__swhatbuf_r+0x40>
 801e028:	466a      	mov	r2, sp
 801e02a:	f000 ff7b 	bl	801ef24 <_fstat_r>
 801e02e:	2800      	cmp	r0, #0
 801e030:	dbf2      	blt.n	801e018 <__swhatbuf_r+0x12>
 801e032:	9a01      	ldr	r2, [sp, #4]
 801e034:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801e038:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801e03c:	425a      	negs	r2, r3
 801e03e:	415a      	adcs	r2, r3
 801e040:	602a      	str	r2, [r5, #0]
 801e042:	e7ee      	b.n	801e022 <__swhatbuf_r+0x1c>
 801e044:	2340      	movs	r3, #64	; 0x40
 801e046:	2000      	movs	r0, #0
 801e048:	6023      	str	r3, [r4, #0]
 801e04a:	b016      	add	sp, #88	; 0x58
 801e04c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801e050 <__smakebuf_r>:
 801e050:	898b      	ldrh	r3, [r1, #12]
 801e052:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e054:	079d      	lsls	r5, r3, #30
 801e056:	4606      	mov	r6, r0
 801e058:	460c      	mov	r4, r1
 801e05a:	d507      	bpl.n	801e06c <__smakebuf_r+0x1c>
 801e05c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e060:	6023      	str	r3, [r4, #0]
 801e062:	6123      	str	r3, [r4, #16]
 801e064:	2301      	movs	r3, #1
 801e066:	6163      	str	r3, [r4, #20]
 801e068:	b002      	add	sp, #8
 801e06a:	bd70      	pop	{r4, r5, r6, pc}
 801e06c:	ab01      	add	r3, sp, #4
 801e06e:	466a      	mov	r2, sp
 801e070:	f7ff ffc9 	bl	801e006 <__swhatbuf_r>
 801e074:	9900      	ldr	r1, [sp, #0]
 801e076:	4605      	mov	r5, r0
 801e078:	4630      	mov	r0, r6
 801e07a:	f7fc fc21 	bl	801a8c0 <_malloc_r>
 801e07e:	b948      	cbnz	r0, 801e094 <__smakebuf_r+0x44>
 801e080:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e084:	059a      	lsls	r2, r3, #22
 801e086:	d4ef      	bmi.n	801e068 <__smakebuf_r+0x18>
 801e088:	f023 0303 	bic.w	r3, r3, #3
 801e08c:	f043 0302 	orr.w	r3, r3, #2
 801e090:	81a3      	strh	r3, [r4, #12]
 801e092:	e7e3      	b.n	801e05c <__smakebuf_r+0xc>
 801e094:	4b0d      	ldr	r3, [pc, #52]	; (801e0cc <__smakebuf_r+0x7c>)
 801e096:	62b3      	str	r3, [r6, #40]	; 0x28
 801e098:	89a3      	ldrh	r3, [r4, #12]
 801e09a:	6020      	str	r0, [r4, #0]
 801e09c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e0a0:	81a3      	strh	r3, [r4, #12]
 801e0a2:	9b00      	ldr	r3, [sp, #0]
 801e0a4:	6163      	str	r3, [r4, #20]
 801e0a6:	9b01      	ldr	r3, [sp, #4]
 801e0a8:	6120      	str	r0, [r4, #16]
 801e0aa:	b15b      	cbz	r3, 801e0c4 <__smakebuf_r+0x74>
 801e0ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e0b0:	4630      	mov	r0, r6
 801e0b2:	f000 ff49 	bl	801ef48 <_isatty_r>
 801e0b6:	b128      	cbz	r0, 801e0c4 <__smakebuf_r+0x74>
 801e0b8:	89a3      	ldrh	r3, [r4, #12]
 801e0ba:	f023 0303 	bic.w	r3, r3, #3
 801e0be:	f043 0301 	orr.w	r3, r3, #1
 801e0c2:	81a3      	strh	r3, [r4, #12]
 801e0c4:	89a0      	ldrh	r0, [r4, #12]
 801e0c6:	4305      	orrs	r5, r0
 801e0c8:	81a5      	strh	r5, [r4, #12]
 801e0ca:	e7cd      	b.n	801e068 <__smakebuf_r+0x18>
 801e0cc:	0801d779 	.word	0x0801d779

0801e0d0 <__ascii_mbtowc>:
 801e0d0:	b082      	sub	sp, #8
 801e0d2:	b901      	cbnz	r1, 801e0d6 <__ascii_mbtowc+0x6>
 801e0d4:	a901      	add	r1, sp, #4
 801e0d6:	b142      	cbz	r2, 801e0ea <__ascii_mbtowc+0x1a>
 801e0d8:	b14b      	cbz	r3, 801e0ee <__ascii_mbtowc+0x1e>
 801e0da:	7813      	ldrb	r3, [r2, #0]
 801e0dc:	600b      	str	r3, [r1, #0]
 801e0de:	7812      	ldrb	r2, [r2, #0]
 801e0e0:	1e10      	subs	r0, r2, #0
 801e0e2:	bf18      	it	ne
 801e0e4:	2001      	movne	r0, #1
 801e0e6:	b002      	add	sp, #8
 801e0e8:	4770      	bx	lr
 801e0ea:	4610      	mov	r0, r2
 801e0ec:	e7fb      	b.n	801e0e6 <__ascii_mbtowc+0x16>
 801e0ee:	f06f 0001 	mvn.w	r0, #1
 801e0f2:	e7f8      	b.n	801e0e6 <__ascii_mbtowc+0x16>

0801e0f4 <__malloc_lock>:
 801e0f4:	4801      	ldr	r0, [pc, #4]	; (801e0fc <__malloc_lock+0x8>)
 801e0f6:	f7ff bf84 	b.w	801e002 <__retarget_lock_acquire_recursive>
 801e0fa:	bf00      	nop
 801e0fc:	2401842c 	.word	0x2401842c

0801e100 <__malloc_unlock>:
 801e100:	4801      	ldr	r0, [pc, #4]	; (801e108 <__malloc_unlock+0x8>)
 801e102:	f7ff bf7f 	b.w	801e004 <__retarget_lock_release_recursive>
 801e106:	bf00      	nop
 801e108:	2401842c 	.word	0x2401842c

0801e10c <_Balloc>:
 801e10c:	b570      	push	{r4, r5, r6, lr}
 801e10e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801e110:	4604      	mov	r4, r0
 801e112:	460d      	mov	r5, r1
 801e114:	b976      	cbnz	r6, 801e134 <_Balloc+0x28>
 801e116:	2010      	movs	r0, #16
 801e118:	f7fc fb42 	bl	801a7a0 <malloc>
 801e11c:	4602      	mov	r2, r0
 801e11e:	6260      	str	r0, [r4, #36]	; 0x24
 801e120:	b920      	cbnz	r0, 801e12c <_Balloc+0x20>
 801e122:	4b18      	ldr	r3, [pc, #96]	; (801e184 <_Balloc+0x78>)
 801e124:	4818      	ldr	r0, [pc, #96]	; (801e188 <_Balloc+0x7c>)
 801e126:	2166      	movs	r1, #102	; 0x66
 801e128:	f7fc fadc 	bl	801a6e4 <__assert_func>
 801e12c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e130:	6006      	str	r6, [r0, #0]
 801e132:	60c6      	str	r6, [r0, #12]
 801e134:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801e136:	68f3      	ldr	r3, [r6, #12]
 801e138:	b183      	cbz	r3, 801e15c <_Balloc+0x50>
 801e13a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e13c:	68db      	ldr	r3, [r3, #12]
 801e13e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801e142:	b9b8      	cbnz	r0, 801e174 <_Balloc+0x68>
 801e144:	2101      	movs	r1, #1
 801e146:	fa01 f605 	lsl.w	r6, r1, r5
 801e14a:	1d72      	adds	r2, r6, #5
 801e14c:	0092      	lsls	r2, r2, #2
 801e14e:	4620      	mov	r0, r4
 801e150:	f000 fc98 	bl	801ea84 <_calloc_r>
 801e154:	b160      	cbz	r0, 801e170 <_Balloc+0x64>
 801e156:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801e15a:	e00e      	b.n	801e17a <_Balloc+0x6e>
 801e15c:	2221      	movs	r2, #33	; 0x21
 801e15e:	2104      	movs	r1, #4
 801e160:	4620      	mov	r0, r4
 801e162:	f000 fc8f 	bl	801ea84 <_calloc_r>
 801e166:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e168:	60f0      	str	r0, [r6, #12]
 801e16a:	68db      	ldr	r3, [r3, #12]
 801e16c:	2b00      	cmp	r3, #0
 801e16e:	d1e4      	bne.n	801e13a <_Balloc+0x2e>
 801e170:	2000      	movs	r0, #0
 801e172:	bd70      	pop	{r4, r5, r6, pc}
 801e174:	6802      	ldr	r2, [r0, #0]
 801e176:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801e17a:	2300      	movs	r3, #0
 801e17c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801e180:	e7f7      	b.n	801e172 <_Balloc+0x66>
 801e182:	bf00      	nop
 801e184:	080287e6 	.word	0x080287e6
 801e188:	08028950 	.word	0x08028950

0801e18c <_Bfree>:
 801e18c:	b570      	push	{r4, r5, r6, lr}
 801e18e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801e190:	4605      	mov	r5, r0
 801e192:	460c      	mov	r4, r1
 801e194:	b976      	cbnz	r6, 801e1b4 <_Bfree+0x28>
 801e196:	2010      	movs	r0, #16
 801e198:	f7fc fb02 	bl	801a7a0 <malloc>
 801e19c:	4602      	mov	r2, r0
 801e19e:	6268      	str	r0, [r5, #36]	; 0x24
 801e1a0:	b920      	cbnz	r0, 801e1ac <_Bfree+0x20>
 801e1a2:	4b09      	ldr	r3, [pc, #36]	; (801e1c8 <_Bfree+0x3c>)
 801e1a4:	4809      	ldr	r0, [pc, #36]	; (801e1cc <_Bfree+0x40>)
 801e1a6:	218a      	movs	r1, #138	; 0x8a
 801e1a8:	f7fc fa9c 	bl	801a6e4 <__assert_func>
 801e1ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801e1b0:	6006      	str	r6, [r0, #0]
 801e1b2:	60c6      	str	r6, [r0, #12]
 801e1b4:	b13c      	cbz	r4, 801e1c6 <_Bfree+0x3a>
 801e1b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801e1b8:	6862      	ldr	r2, [r4, #4]
 801e1ba:	68db      	ldr	r3, [r3, #12]
 801e1bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e1c0:	6021      	str	r1, [r4, #0]
 801e1c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801e1c6:	bd70      	pop	{r4, r5, r6, pc}
 801e1c8:	080287e6 	.word	0x080287e6
 801e1cc:	08028950 	.word	0x08028950

0801e1d0 <__multadd>:
 801e1d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e1d4:	690e      	ldr	r6, [r1, #16]
 801e1d6:	4607      	mov	r7, r0
 801e1d8:	4698      	mov	r8, r3
 801e1da:	460c      	mov	r4, r1
 801e1dc:	f101 0014 	add.w	r0, r1, #20
 801e1e0:	2300      	movs	r3, #0
 801e1e2:	6805      	ldr	r5, [r0, #0]
 801e1e4:	b2a9      	uxth	r1, r5
 801e1e6:	fb02 8101 	mla	r1, r2, r1, r8
 801e1ea:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801e1ee:	0c2d      	lsrs	r5, r5, #16
 801e1f0:	fb02 c505 	mla	r5, r2, r5, ip
 801e1f4:	b289      	uxth	r1, r1
 801e1f6:	3301      	adds	r3, #1
 801e1f8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801e1fc:	429e      	cmp	r6, r3
 801e1fe:	f840 1b04 	str.w	r1, [r0], #4
 801e202:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801e206:	dcec      	bgt.n	801e1e2 <__multadd+0x12>
 801e208:	f1b8 0f00 	cmp.w	r8, #0
 801e20c:	d022      	beq.n	801e254 <__multadd+0x84>
 801e20e:	68a3      	ldr	r3, [r4, #8]
 801e210:	42b3      	cmp	r3, r6
 801e212:	dc19      	bgt.n	801e248 <__multadd+0x78>
 801e214:	6861      	ldr	r1, [r4, #4]
 801e216:	4638      	mov	r0, r7
 801e218:	3101      	adds	r1, #1
 801e21a:	f7ff ff77 	bl	801e10c <_Balloc>
 801e21e:	4605      	mov	r5, r0
 801e220:	b928      	cbnz	r0, 801e22e <__multadd+0x5e>
 801e222:	4602      	mov	r2, r0
 801e224:	4b0d      	ldr	r3, [pc, #52]	; (801e25c <__multadd+0x8c>)
 801e226:	480e      	ldr	r0, [pc, #56]	; (801e260 <__multadd+0x90>)
 801e228:	21b5      	movs	r1, #181	; 0xb5
 801e22a:	f7fc fa5b 	bl	801a6e4 <__assert_func>
 801e22e:	6922      	ldr	r2, [r4, #16]
 801e230:	3202      	adds	r2, #2
 801e232:	f104 010c 	add.w	r1, r4, #12
 801e236:	0092      	lsls	r2, r2, #2
 801e238:	300c      	adds	r0, #12
 801e23a:	f7fc fac1 	bl	801a7c0 <memcpy>
 801e23e:	4621      	mov	r1, r4
 801e240:	4638      	mov	r0, r7
 801e242:	f7ff ffa3 	bl	801e18c <_Bfree>
 801e246:	462c      	mov	r4, r5
 801e248:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801e24c:	3601      	adds	r6, #1
 801e24e:	f8c3 8014 	str.w	r8, [r3, #20]
 801e252:	6126      	str	r6, [r4, #16]
 801e254:	4620      	mov	r0, r4
 801e256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e25a:	bf00      	nop
 801e25c:	0802885c 	.word	0x0802885c
 801e260:	08028950 	.word	0x08028950

0801e264 <__s2b>:
 801e264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e268:	460c      	mov	r4, r1
 801e26a:	4615      	mov	r5, r2
 801e26c:	461f      	mov	r7, r3
 801e26e:	2209      	movs	r2, #9
 801e270:	3308      	adds	r3, #8
 801e272:	4606      	mov	r6, r0
 801e274:	fb93 f3f2 	sdiv	r3, r3, r2
 801e278:	2100      	movs	r1, #0
 801e27a:	2201      	movs	r2, #1
 801e27c:	429a      	cmp	r2, r3
 801e27e:	db09      	blt.n	801e294 <__s2b+0x30>
 801e280:	4630      	mov	r0, r6
 801e282:	f7ff ff43 	bl	801e10c <_Balloc>
 801e286:	b940      	cbnz	r0, 801e29a <__s2b+0x36>
 801e288:	4602      	mov	r2, r0
 801e28a:	4b19      	ldr	r3, [pc, #100]	; (801e2f0 <__s2b+0x8c>)
 801e28c:	4819      	ldr	r0, [pc, #100]	; (801e2f4 <__s2b+0x90>)
 801e28e:	21ce      	movs	r1, #206	; 0xce
 801e290:	f7fc fa28 	bl	801a6e4 <__assert_func>
 801e294:	0052      	lsls	r2, r2, #1
 801e296:	3101      	adds	r1, #1
 801e298:	e7f0      	b.n	801e27c <__s2b+0x18>
 801e29a:	9b08      	ldr	r3, [sp, #32]
 801e29c:	6143      	str	r3, [r0, #20]
 801e29e:	2d09      	cmp	r5, #9
 801e2a0:	f04f 0301 	mov.w	r3, #1
 801e2a4:	6103      	str	r3, [r0, #16]
 801e2a6:	dd16      	ble.n	801e2d6 <__s2b+0x72>
 801e2a8:	f104 0909 	add.w	r9, r4, #9
 801e2ac:	46c8      	mov	r8, r9
 801e2ae:	442c      	add	r4, r5
 801e2b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 801e2b4:	4601      	mov	r1, r0
 801e2b6:	3b30      	subs	r3, #48	; 0x30
 801e2b8:	220a      	movs	r2, #10
 801e2ba:	4630      	mov	r0, r6
 801e2bc:	f7ff ff88 	bl	801e1d0 <__multadd>
 801e2c0:	45a0      	cmp	r8, r4
 801e2c2:	d1f5      	bne.n	801e2b0 <__s2b+0x4c>
 801e2c4:	f1a5 0408 	sub.w	r4, r5, #8
 801e2c8:	444c      	add	r4, r9
 801e2ca:	1b2d      	subs	r5, r5, r4
 801e2cc:	1963      	adds	r3, r4, r5
 801e2ce:	42bb      	cmp	r3, r7
 801e2d0:	db04      	blt.n	801e2dc <__s2b+0x78>
 801e2d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e2d6:	340a      	adds	r4, #10
 801e2d8:	2509      	movs	r5, #9
 801e2da:	e7f6      	b.n	801e2ca <__s2b+0x66>
 801e2dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 801e2e0:	4601      	mov	r1, r0
 801e2e2:	3b30      	subs	r3, #48	; 0x30
 801e2e4:	220a      	movs	r2, #10
 801e2e6:	4630      	mov	r0, r6
 801e2e8:	f7ff ff72 	bl	801e1d0 <__multadd>
 801e2ec:	e7ee      	b.n	801e2cc <__s2b+0x68>
 801e2ee:	bf00      	nop
 801e2f0:	0802885c 	.word	0x0802885c
 801e2f4:	08028950 	.word	0x08028950

0801e2f8 <__hi0bits>:
 801e2f8:	0c03      	lsrs	r3, r0, #16
 801e2fa:	041b      	lsls	r3, r3, #16
 801e2fc:	b9d3      	cbnz	r3, 801e334 <__hi0bits+0x3c>
 801e2fe:	0400      	lsls	r0, r0, #16
 801e300:	2310      	movs	r3, #16
 801e302:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801e306:	bf04      	itt	eq
 801e308:	0200      	lsleq	r0, r0, #8
 801e30a:	3308      	addeq	r3, #8
 801e30c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801e310:	bf04      	itt	eq
 801e312:	0100      	lsleq	r0, r0, #4
 801e314:	3304      	addeq	r3, #4
 801e316:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801e31a:	bf04      	itt	eq
 801e31c:	0080      	lsleq	r0, r0, #2
 801e31e:	3302      	addeq	r3, #2
 801e320:	2800      	cmp	r0, #0
 801e322:	db05      	blt.n	801e330 <__hi0bits+0x38>
 801e324:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801e328:	f103 0301 	add.w	r3, r3, #1
 801e32c:	bf08      	it	eq
 801e32e:	2320      	moveq	r3, #32
 801e330:	4618      	mov	r0, r3
 801e332:	4770      	bx	lr
 801e334:	2300      	movs	r3, #0
 801e336:	e7e4      	b.n	801e302 <__hi0bits+0xa>

0801e338 <__lo0bits>:
 801e338:	6803      	ldr	r3, [r0, #0]
 801e33a:	f013 0207 	ands.w	r2, r3, #7
 801e33e:	4601      	mov	r1, r0
 801e340:	d00b      	beq.n	801e35a <__lo0bits+0x22>
 801e342:	07da      	lsls	r2, r3, #31
 801e344:	d424      	bmi.n	801e390 <__lo0bits+0x58>
 801e346:	0798      	lsls	r0, r3, #30
 801e348:	bf49      	itett	mi
 801e34a:	085b      	lsrmi	r3, r3, #1
 801e34c:	089b      	lsrpl	r3, r3, #2
 801e34e:	2001      	movmi	r0, #1
 801e350:	600b      	strmi	r3, [r1, #0]
 801e352:	bf5c      	itt	pl
 801e354:	600b      	strpl	r3, [r1, #0]
 801e356:	2002      	movpl	r0, #2
 801e358:	4770      	bx	lr
 801e35a:	b298      	uxth	r0, r3
 801e35c:	b9b0      	cbnz	r0, 801e38c <__lo0bits+0x54>
 801e35e:	0c1b      	lsrs	r3, r3, #16
 801e360:	2010      	movs	r0, #16
 801e362:	f013 0fff 	tst.w	r3, #255	; 0xff
 801e366:	bf04      	itt	eq
 801e368:	0a1b      	lsreq	r3, r3, #8
 801e36a:	3008      	addeq	r0, #8
 801e36c:	071a      	lsls	r2, r3, #28
 801e36e:	bf04      	itt	eq
 801e370:	091b      	lsreq	r3, r3, #4
 801e372:	3004      	addeq	r0, #4
 801e374:	079a      	lsls	r2, r3, #30
 801e376:	bf04      	itt	eq
 801e378:	089b      	lsreq	r3, r3, #2
 801e37a:	3002      	addeq	r0, #2
 801e37c:	07da      	lsls	r2, r3, #31
 801e37e:	d403      	bmi.n	801e388 <__lo0bits+0x50>
 801e380:	085b      	lsrs	r3, r3, #1
 801e382:	f100 0001 	add.w	r0, r0, #1
 801e386:	d005      	beq.n	801e394 <__lo0bits+0x5c>
 801e388:	600b      	str	r3, [r1, #0]
 801e38a:	4770      	bx	lr
 801e38c:	4610      	mov	r0, r2
 801e38e:	e7e8      	b.n	801e362 <__lo0bits+0x2a>
 801e390:	2000      	movs	r0, #0
 801e392:	4770      	bx	lr
 801e394:	2020      	movs	r0, #32
 801e396:	4770      	bx	lr

0801e398 <__i2b>:
 801e398:	b510      	push	{r4, lr}
 801e39a:	460c      	mov	r4, r1
 801e39c:	2101      	movs	r1, #1
 801e39e:	f7ff feb5 	bl	801e10c <_Balloc>
 801e3a2:	4602      	mov	r2, r0
 801e3a4:	b928      	cbnz	r0, 801e3b2 <__i2b+0x1a>
 801e3a6:	4b05      	ldr	r3, [pc, #20]	; (801e3bc <__i2b+0x24>)
 801e3a8:	4805      	ldr	r0, [pc, #20]	; (801e3c0 <__i2b+0x28>)
 801e3aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801e3ae:	f7fc f999 	bl	801a6e4 <__assert_func>
 801e3b2:	2301      	movs	r3, #1
 801e3b4:	6144      	str	r4, [r0, #20]
 801e3b6:	6103      	str	r3, [r0, #16]
 801e3b8:	bd10      	pop	{r4, pc}
 801e3ba:	bf00      	nop
 801e3bc:	0802885c 	.word	0x0802885c
 801e3c0:	08028950 	.word	0x08028950

0801e3c4 <__multiply>:
 801e3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3c8:	4614      	mov	r4, r2
 801e3ca:	690a      	ldr	r2, [r1, #16]
 801e3cc:	6923      	ldr	r3, [r4, #16]
 801e3ce:	429a      	cmp	r2, r3
 801e3d0:	bfb8      	it	lt
 801e3d2:	460b      	movlt	r3, r1
 801e3d4:	460d      	mov	r5, r1
 801e3d6:	bfbc      	itt	lt
 801e3d8:	4625      	movlt	r5, r4
 801e3da:	461c      	movlt	r4, r3
 801e3dc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801e3e0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801e3e4:	68ab      	ldr	r3, [r5, #8]
 801e3e6:	6869      	ldr	r1, [r5, #4]
 801e3e8:	eb0a 0709 	add.w	r7, sl, r9
 801e3ec:	42bb      	cmp	r3, r7
 801e3ee:	b085      	sub	sp, #20
 801e3f0:	bfb8      	it	lt
 801e3f2:	3101      	addlt	r1, #1
 801e3f4:	f7ff fe8a 	bl	801e10c <_Balloc>
 801e3f8:	b930      	cbnz	r0, 801e408 <__multiply+0x44>
 801e3fa:	4602      	mov	r2, r0
 801e3fc:	4b42      	ldr	r3, [pc, #264]	; (801e508 <__multiply+0x144>)
 801e3fe:	4843      	ldr	r0, [pc, #268]	; (801e50c <__multiply+0x148>)
 801e400:	f240 115d 	movw	r1, #349	; 0x15d
 801e404:	f7fc f96e 	bl	801a6e4 <__assert_func>
 801e408:	f100 0614 	add.w	r6, r0, #20
 801e40c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801e410:	4633      	mov	r3, r6
 801e412:	2200      	movs	r2, #0
 801e414:	4543      	cmp	r3, r8
 801e416:	d31e      	bcc.n	801e456 <__multiply+0x92>
 801e418:	f105 0c14 	add.w	ip, r5, #20
 801e41c:	f104 0314 	add.w	r3, r4, #20
 801e420:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801e424:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801e428:	9202      	str	r2, [sp, #8]
 801e42a:	ebac 0205 	sub.w	r2, ip, r5
 801e42e:	3a15      	subs	r2, #21
 801e430:	f022 0203 	bic.w	r2, r2, #3
 801e434:	3204      	adds	r2, #4
 801e436:	f105 0115 	add.w	r1, r5, #21
 801e43a:	458c      	cmp	ip, r1
 801e43c:	bf38      	it	cc
 801e43e:	2204      	movcc	r2, #4
 801e440:	9201      	str	r2, [sp, #4]
 801e442:	9a02      	ldr	r2, [sp, #8]
 801e444:	9303      	str	r3, [sp, #12]
 801e446:	429a      	cmp	r2, r3
 801e448:	d808      	bhi.n	801e45c <__multiply+0x98>
 801e44a:	2f00      	cmp	r7, #0
 801e44c:	dc55      	bgt.n	801e4fa <__multiply+0x136>
 801e44e:	6107      	str	r7, [r0, #16]
 801e450:	b005      	add	sp, #20
 801e452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e456:	f843 2b04 	str.w	r2, [r3], #4
 801e45a:	e7db      	b.n	801e414 <__multiply+0x50>
 801e45c:	f8b3 a000 	ldrh.w	sl, [r3]
 801e460:	f1ba 0f00 	cmp.w	sl, #0
 801e464:	d020      	beq.n	801e4a8 <__multiply+0xe4>
 801e466:	f105 0e14 	add.w	lr, r5, #20
 801e46a:	46b1      	mov	r9, r6
 801e46c:	2200      	movs	r2, #0
 801e46e:	f85e 4b04 	ldr.w	r4, [lr], #4
 801e472:	f8d9 b000 	ldr.w	fp, [r9]
 801e476:	b2a1      	uxth	r1, r4
 801e478:	fa1f fb8b 	uxth.w	fp, fp
 801e47c:	fb0a b101 	mla	r1, sl, r1, fp
 801e480:	4411      	add	r1, r2
 801e482:	f8d9 2000 	ldr.w	r2, [r9]
 801e486:	0c24      	lsrs	r4, r4, #16
 801e488:	0c12      	lsrs	r2, r2, #16
 801e48a:	fb0a 2404 	mla	r4, sl, r4, r2
 801e48e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801e492:	b289      	uxth	r1, r1
 801e494:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801e498:	45f4      	cmp	ip, lr
 801e49a:	f849 1b04 	str.w	r1, [r9], #4
 801e49e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801e4a2:	d8e4      	bhi.n	801e46e <__multiply+0xaa>
 801e4a4:	9901      	ldr	r1, [sp, #4]
 801e4a6:	5072      	str	r2, [r6, r1]
 801e4a8:	9a03      	ldr	r2, [sp, #12]
 801e4aa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801e4ae:	3304      	adds	r3, #4
 801e4b0:	f1b9 0f00 	cmp.w	r9, #0
 801e4b4:	d01f      	beq.n	801e4f6 <__multiply+0x132>
 801e4b6:	6834      	ldr	r4, [r6, #0]
 801e4b8:	f105 0114 	add.w	r1, r5, #20
 801e4bc:	46b6      	mov	lr, r6
 801e4be:	f04f 0a00 	mov.w	sl, #0
 801e4c2:	880a      	ldrh	r2, [r1, #0]
 801e4c4:	f8be b002 	ldrh.w	fp, [lr, #2]
 801e4c8:	fb09 b202 	mla	r2, r9, r2, fp
 801e4cc:	4492      	add	sl, r2
 801e4ce:	b2a4      	uxth	r4, r4
 801e4d0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801e4d4:	f84e 4b04 	str.w	r4, [lr], #4
 801e4d8:	f851 4b04 	ldr.w	r4, [r1], #4
 801e4dc:	f8be 2000 	ldrh.w	r2, [lr]
 801e4e0:	0c24      	lsrs	r4, r4, #16
 801e4e2:	fb09 2404 	mla	r4, r9, r4, r2
 801e4e6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801e4ea:	458c      	cmp	ip, r1
 801e4ec:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801e4f0:	d8e7      	bhi.n	801e4c2 <__multiply+0xfe>
 801e4f2:	9a01      	ldr	r2, [sp, #4]
 801e4f4:	50b4      	str	r4, [r6, r2]
 801e4f6:	3604      	adds	r6, #4
 801e4f8:	e7a3      	b.n	801e442 <__multiply+0x7e>
 801e4fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801e4fe:	2b00      	cmp	r3, #0
 801e500:	d1a5      	bne.n	801e44e <__multiply+0x8a>
 801e502:	3f01      	subs	r7, #1
 801e504:	e7a1      	b.n	801e44a <__multiply+0x86>
 801e506:	bf00      	nop
 801e508:	0802885c 	.word	0x0802885c
 801e50c:	08028950 	.word	0x08028950

0801e510 <__pow5mult>:
 801e510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e514:	4615      	mov	r5, r2
 801e516:	f012 0203 	ands.w	r2, r2, #3
 801e51a:	4606      	mov	r6, r0
 801e51c:	460f      	mov	r7, r1
 801e51e:	d007      	beq.n	801e530 <__pow5mult+0x20>
 801e520:	4c25      	ldr	r4, [pc, #148]	; (801e5b8 <__pow5mult+0xa8>)
 801e522:	3a01      	subs	r2, #1
 801e524:	2300      	movs	r3, #0
 801e526:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801e52a:	f7ff fe51 	bl	801e1d0 <__multadd>
 801e52e:	4607      	mov	r7, r0
 801e530:	10ad      	asrs	r5, r5, #2
 801e532:	d03d      	beq.n	801e5b0 <__pow5mult+0xa0>
 801e534:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801e536:	b97c      	cbnz	r4, 801e558 <__pow5mult+0x48>
 801e538:	2010      	movs	r0, #16
 801e53a:	f7fc f931 	bl	801a7a0 <malloc>
 801e53e:	4602      	mov	r2, r0
 801e540:	6270      	str	r0, [r6, #36]	; 0x24
 801e542:	b928      	cbnz	r0, 801e550 <__pow5mult+0x40>
 801e544:	4b1d      	ldr	r3, [pc, #116]	; (801e5bc <__pow5mult+0xac>)
 801e546:	481e      	ldr	r0, [pc, #120]	; (801e5c0 <__pow5mult+0xb0>)
 801e548:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801e54c:	f7fc f8ca 	bl	801a6e4 <__assert_func>
 801e550:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801e554:	6004      	str	r4, [r0, #0]
 801e556:	60c4      	str	r4, [r0, #12]
 801e558:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801e55c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801e560:	b94c      	cbnz	r4, 801e576 <__pow5mult+0x66>
 801e562:	f240 2171 	movw	r1, #625	; 0x271
 801e566:	4630      	mov	r0, r6
 801e568:	f7ff ff16 	bl	801e398 <__i2b>
 801e56c:	2300      	movs	r3, #0
 801e56e:	f8c8 0008 	str.w	r0, [r8, #8]
 801e572:	4604      	mov	r4, r0
 801e574:	6003      	str	r3, [r0, #0]
 801e576:	f04f 0900 	mov.w	r9, #0
 801e57a:	07eb      	lsls	r3, r5, #31
 801e57c:	d50a      	bpl.n	801e594 <__pow5mult+0x84>
 801e57e:	4639      	mov	r1, r7
 801e580:	4622      	mov	r2, r4
 801e582:	4630      	mov	r0, r6
 801e584:	f7ff ff1e 	bl	801e3c4 <__multiply>
 801e588:	4639      	mov	r1, r7
 801e58a:	4680      	mov	r8, r0
 801e58c:	4630      	mov	r0, r6
 801e58e:	f7ff fdfd 	bl	801e18c <_Bfree>
 801e592:	4647      	mov	r7, r8
 801e594:	106d      	asrs	r5, r5, #1
 801e596:	d00b      	beq.n	801e5b0 <__pow5mult+0xa0>
 801e598:	6820      	ldr	r0, [r4, #0]
 801e59a:	b938      	cbnz	r0, 801e5ac <__pow5mult+0x9c>
 801e59c:	4622      	mov	r2, r4
 801e59e:	4621      	mov	r1, r4
 801e5a0:	4630      	mov	r0, r6
 801e5a2:	f7ff ff0f 	bl	801e3c4 <__multiply>
 801e5a6:	6020      	str	r0, [r4, #0]
 801e5a8:	f8c0 9000 	str.w	r9, [r0]
 801e5ac:	4604      	mov	r4, r0
 801e5ae:	e7e4      	b.n	801e57a <__pow5mult+0x6a>
 801e5b0:	4638      	mov	r0, r7
 801e5b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e5b6:	bf00      	nop
 801e5b8:	08028aa0 	.word	0x08028aa0
 801e5bc:	080287e6 	.word	0x080287e6
 801e5c0:	08028950 	.word	0x08028950

0801e5c4 <__lshift>:
 801e5c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e5c8:	460c      	mov	r4, r1
 801e5ca:	6849      	ldr	r1, [r1, #4]
 801e5cc:	6923      	ldr	r3, [r4, #16]
 801e5ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801e5d2:	68a3      	ldr	r3, [r4, #8]
 801e5d4:	4607      	mov	r7, r0
 801e5d6:	4691      	mov	r9, r2
 801e5d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801e5dc:	f108 0601 	add.w	r6, r8, #1
 801e5e0:	42b3      	cmp	r3, r6
 801e5e2:	db0b      	blt.n	801e5fc <__lshift+0x38>
 801e5e4:	4638      	mov	r0, r7
 801e5e6:	f7ff fd91 	bl	801e10c <_Balloc>
 801e5ea:	4605      	mov	r5, r0
 801e5ec:	b948      	cbnz	r0, 801e602 <__lshift+0x3e>
 801e5ee:	4602      	mov	r2, r0
 801e5f0:	4b28      	ldr	r3, [pc, #160]	; (801e694 <__lshift+0xd0>)
 801e5f2:	4829      	ldr	r0, [pc, #164]	; (801e698 <__lshift+0xd4>)
 801e5f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 801e5f8:	f7fc f874 	bl	801a6e4 <__assert_func>
 801e5fc:	3101      	adds	r1, #1
 801e5fe:	005b      	lsls	r3, r3, #1
 801e600:	e7ee      	b.n	801e5e0 <__lshift+0x1c>
 801e602:	2300      	movs	r3, #0
 801e604:	f100 0114 	add.w	r1, r0, #20
 801e608:	f100 0210 	add.w	r2, r0, #16
 801e60c:	4618      	mov	r0, r3
 801e60e:	4553      	cmp	r3, sl
 801e610:	db33      	blt.n	801e67a <__lshift+0xb6>
 801e612:	6920      	ldr	r0, [r4, #16]
 801e614:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801e618:	f104 0314 	add.w	r3, r4, #20
 801e61c:	f019 091f 	ands.w	r9, r9, #31
 801e620:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801e624:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801e628:	d02b      	beq.n	801e682 <__lshift+0xbe>
 801e62a:	f1c9 0e20 	rsb	lr, r9, #32
 801e62e:	468a      	mov	sl, r1
 801e630:	2200      	movs	r2, #0
 801e632:	6818      	ldr	r0, [r3, #0]
 801e634:	fa00 f009 	lsl.w	r0, r0, r9
 801e638:	4302      	orrs	r2, r0
 801e63a:	f84a 2b04 	str.w	r2, [sl], #4
 801e63e:	f853 2b04 	ldr.w	r2, [r3], #4
 801e642:	459c      	cmp	ip, r3
 801e644:	fa22 f20e 	lsr.w	r2, r2, lr
 801e648:	d8f3      	bhi.n	801e632 <__lshift+0x6e>
 801e64a:	ebac 0304 	sub.w	r3, ip, r4
 801e64e:	3b15      	subs	r3, #21
 801e650:	f023 0303 	bic.w	r3, r3, #3
 801e654:	3304      	adds	r3, #4
 801e656:	f104 0015 	add.w	r0, r4, #21
 801e65a:	4584      	cmp	ip, r0
 801e65c:	bf38      	it	cc
 801e65e:	2304      	movcc	r3, #4
 801e660:	50ca      	str	r2, [r1, r3]
 801e662:	b10a      	cbz	r2, 801e668 <__lshift+0xa4>
 801e664:	f108 0602 	add.w	r6, r8, #2
 801e668:	3e01      	subs	r6, #1
 801e66a:	4638      	mov	r0, r7
 801e66c:	612e      	str	r6, [r5, #16]
 801e66e:	4621      	mov	r1, r4
 801e670:	f7ff fd8c 	bl	801e18c <_Bfree>
 801e674:	4628      	mov	r0, r5
 801e676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e67a:	f842 0f04 	str.w	r0, [r2, #4]!
 801e67e:	3301      	adds	r3, #1
 801e680:	e7c5      	b.n	801e60e <__lshift+0x4a>
 801e682:	3904      	subs	r1, #4
 801e684:	f853 2b04 	ldr.w	r2, [r3], #4
 801e688:	f841 2f04 	str.w	r2, [r1, #4]!
 801e68c:	459c      	cmp	ip, r3
 801e68e:	d8f9      	bhi.n	801e684 <__lshift+0xc0>
 801e690:	e7ea      	b.n	801e668 <__lshift+0xa4>
 801e692:	bf00      	nop
 801e694:	0802885c 	.word	0x0802885c
 801e698:	08028950 	.word	0x08028950

0801e69c <__mcmp>:
 801e69c:	b530      	push	{r4, r5, lr}
 801e69e:	6902      	ldr	r2, [r0, #16]
 801e6a0:	690c      	ldr	r4, [r1, #16]
 801e6a2:	1b12      	subs	r2, r2, r4
 801e6a4:	d10e      	bne.n	801e6c4 <__mcmp+0x28>
 801e6a6:	f100 0314 	add.w	r3, r0, #20
 801e6aa:	3114      	adds	r1, #20
 801e6ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801e6b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801e6b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801e6b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801e6bc:	42a5      	cmp	r5, r4
 801e6be:	d003      	beq.n	801e6c8 <__mcmp+0x2c>
 801e6c0:	d305      	bcc.n	801e6ce <__mcmp+0x32>
 801e6c2:	2201      	movs	r2, #1
 801e6c4:	4610      	mov	r0, r2
 801e6c6:	bd30      	pop	{r4, r5, pc}
 801e6c8:	4283      	cmp	r3, r0
 801e6ca:	d3f3      	bcc.n	801e6b4 <__mcmp+0x18>
 801e6cc:	e7fa      	b.n	801e6c4 <__mcmp+0x28>
 801e6ce:	f04f 32ff 	mov.w	r2, #4294967295
 801e6d2:	e7f7      	b.n	801e6c4 <__mcmp+0x28>

0801e6d4 <__mdiff>:
 801e6d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6d8:	460c      	mov	r4, r1
 801e6da:	4606      	mov	r6, r0
 801e6dc:	4611      	mov	r1, r2
 801e6de:	4620      	mov	r0, r4
 801e6e0:	4617      	mov	r7, r2
 801e6e2:	f7ff ffdb 	bl	801e69c <__mcmp>
 801e6e6:	1e05      	subs	r5, r0, #0
 801e6e8:	d110      	bne.n	801e70c <__mdiff+0x38>
 801e6ea:	4629      	mov	r1, r5
 801e6ec:	4630      	mov	r0, r6
 801e6ee:	f7ff fd0d 	bl	801e10c <_Balloc>
 801e6f2:	b930      	cbnz	r0, 801e702 <__mdiff+0x2e>
 801e6f4:	4b39      	ldr	r3, [pc, #228]	; (801e7dc <__mdiff+0x108>)
 801e6f6:	4602      	mov	r2, r0
 801e6f8:	f240 2132 	movw	r1, #562	; 0x232
 801e6fc:	4838      	ldr	r0, [pc, #224]	; (801e7e0 <__mdiff+0x10c>)
 801e6fe:	f7fb fff1 	bl	801a6e4 <__assert_func>
 801e702:	2301      	movs	r3, #1
 801e704:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801e708:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e70c:	bfa4      	itt	ge
 801e70e:	463b      	movge	r3, r7
 801e710:	4627      	movge	r7, r4
 801e712:	4630      	mov	r0, r6
 801e714:	6879      	ldr	r1, [r7, #4]
 801e716:	bfa6      	itte	ge
 801e718:	461c      	movge	r4, r3
 801e71a:	2500      	movge	r5, #0
 801e71c:	2501      	movlt	r5, #1
 801e71e:	f7ff fcf5 	bl	801e10c <_Balloc>
 801e722:	b920      	cbnz	r0, 801e72e <__mdiff+0x5a>
 801e724:	4b2d      	ldr	r3, [pc, #180]	; (801e7dc <__mdiff+0x108>)
 801e726:	4602      	mov	r2, r0
 801e728:	f44f 7110 	mov.w	r1, #576	; 0x240
 801e72c:	e7e6      	b.n	801e6fc <__mdiff+0x28>
 801e72e:	693e      	ldr	r6, [r7, #16]
 801e730:	60c5      	str	r5, [r0, #12]
 801e732:	6925      	ldr	r5, [r4, #16]
 801e734:	f107 0114 	add.w	r1, r7, #20
 801e738:	f104 0914 	add.w	r9, r4, #20
 801e73c:	f100 0e14 	add.w	lr, r0, #20
 801e740:	f107 0210 	add.w	r2, r7, #16
 801e744:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801e748:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801e74c:	46f2      	mov	sl, lr
 801e74e:	2700      	movs	r7, #0
 801e750:	f859 3b04 	ldr.w	r3, [r9], #4
 801e754:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801e758:	fa1f f883 	uxth.w	r8, r3
 801e75c:	fa17 f78b 	uxtah	r7, r7, fp
 801e760:	0c1b      	lsrs	r3, r3, #16
 801e762:	eba7 0808 	sub.w	r8, r7, r8
 801e766:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801e76a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801e76e:	fa1f f888 	uxth.w	r8, r8
 801e772:	141f      	asrs	r7, r3, #16
 801e774:	454d      	cmp	r5, r9
 801e776:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801e77a:	f84a 3b04 	str.w	r3, [sl], #4
 801e77e:	d8e7      	bhi.n	801e750 <__mdiff+0x7c>
 801e780:	1b2b      	subs	r3, r5, r4
 801e782:	3b15      	subs	r3, #21
 801e784:	f023 0303 	bic.w	r3, r3, #3
 801e788:	3304      	adds	r3, #4
 801e78a:	3415      	adds	r4, #21
 801e78c:	42a5      	cmp	r5, r4
 801e78e:	bf38      	it	cc
 801e790:	2304      	movcc	r3, #4
 801e792:	4419      	add	r1, r3
 801e794:	4473      	add	r3, lr
 801e796:	469e      	mov	lr, r3
 801e798:	460d      	mov	r5, r1
 801e79a:	4565      	cmp	r5, ip
 801e79c:	d30e      	bcc.n	801e7bc <__mdiff+0xe8>
 801e79e:	f10c 0203 	add.w	r2, ip, #3
 801e7a2:	1a52      	subs	r2, r2, r1
 801e7a4:	f022 0203 	bic.w	r2, r2, #3
 801e7a8:	3903      	subs	r1, #3
 801e7aa:	458c      	cmp	ip, r1
 801e7ac:	bf38      	it	cc
 801e7ae:	2200      	movcc	r2, #0
 801e7b0:	441a      	add	r2, r3
 801e7b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801e7b6:	b17b      	cbz	r3, 801e7d8 <__mdiff+0x104>
 801e7b8:	6106      	str	r6, [r0, #16]
 801e7ba:	e7a5      	b.n	801e708 <__mdiff+0x34>
 801e7bc:	f855 8b04 	ldr.w	r8, [r5], #4
 801e7c0:	fa17 f488 	uxtah	r4, r7, r8
 801e7c4:	1422      	asrs	r2, r4, #16
 801e7c6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801e7ca:	b2a4      	uxth	r4, r4
 801e7cc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801e7d0:	f84e 4b04 	str.w	r4, [lr], #4
 801e7d4:	1417      	asrs	r7, r2, #16
 801e7d6:	e7e0      	b.n	801e79a <__mdiff+0xc6>
 801e7d8:	3e01      	subs	r6, #1
 801e7da:	e7ea      	b.n	801e7b2 <__mdiff+0xde>
 801e7dc:	0802885c 	.word	0x0802885c
 801e7e0:	08028950 	.word	0x08028950

0801e7e4 <__ulp>:
 801e7e4:	b082      	sub	sp, #8
 801e7e6:	ed8d 0b00 	vstr	d0, [sp]
 801e7ea:	9b01      	ldr	r3, [sp, #4]
 801e7ec:	4912      	ldr	r1, [pc, #72]	; (801e838 <__ulp+0x54>)
 801e7ee:	4019      	ands	r1, r3
 801e7f0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801e7f4:	2900      	cmp	r1, #0
 801e7f6:	dd05      	ble.n	801e804 <__ulp+0x20>
 801e7f8:	2200      	movs	r2, #0
 801e7fa:	460b      	mov	r3, r1
 801e7fc:	ec43 2b10 	vmov	d0, r2, r3
 801e800:	b002      	add	sp, #8
 801e802:	4770      	bx	lr
 801e804:	4249      	negs	r1, r1
 801e806:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801e80a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801e80e:	f04f 0200 	mov.w	r2, #0
 801e812:	f04f 0300 	mov.w	r3, #0
 801e816:	da04      	bge.n	801e822 <__ulp+0x3e>
 801e818:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801e81c:	fa41 f300 	asr.w	r3, r1, r0
 801e820:	e7ec      	b.n	801e7fc <__ulp+0x18>
 801e822:	f1a0 0114 	sub.w	r1, r0, #20
 801e826:	291e      	cmp	r1, #30
 801e828:	bfda      	itte	le
 801e82a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801e82e:	fa20 f101 	lsrle.w	r1, r0, r1
 801e832:	2101      	movgt	r1, #1
 801e834:	460a      	mov	r2, r1
 801e836:	e7e1      	b.n	801e7fc <__ulp+0x18>
 801e838:	7ff00000 	.word	0x7ff00000

0801e83c <__b2d>:
 801e83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e83e:	6905      	ldr	r5, [r0, #16]
 801e840:	f100 0714 	add.w	r7, r0, #20
 801e844:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801e848:	1f2e      	subs	r6, r5, #4
 801e84a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801e84e:	4620      	mov	r0, r4
 801e850:	f7ff fd52 	bl	801e2f8 <__hi0bits>
 801e854:	f1c0 0320 	rsb	r3, r0, #32
 801e858:	280a      	cmp	r0, #10
 801e85a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801e8d8 <__b2d+0x9c>
 801e85e:	600b      	str	r3, [r1, #0]
 801e860:	dc14      	bgt.n	801e88c <__b2d+0x50>
 801e862:	f1c0 0e0b 	rsb	lr, r0, #11
 801e866:	fa24 f10e 	lsr.w	r1, r4, lr
 801e86a:	42b7      	cmp	r7, r6
 801e86c:	ea41 030c 	orr.w	r3, r1, ip
 801e870:	bf34      	ite	cc
 801e872:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801e876:	2100      	movcs	r1, #0
 801e878:	3015      	adds	r0, #21
 801e87a:	fa04 f000 	lsl.w	r0, r4, r0
 801e87e:	fa21 f10e 	lsr.w	r1, r1, lr
 801e882:	ea40 0201 	orr.w	r2, r0, r1
 801e886:	ec43 2b10 	vmov	d0, r2, r3
 801e88a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e88c:	42b7      	cmp	r7, r6
 801e88e:	bf3a      	itte	cc
 801e890:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801e894:	f1a5 0608 	subcc.w	r6, r5, #8
 801e898:	2100      	movcs	r1, #0
 801e89a:	380b      	subs	r0, #11
 801e89c:	d017      	beq.n	801e8ce <__b2d+0x92>
 801e89e:	f1c0 0c20 	rsb	ip, r0, #32
 801e8a2:	fa04 f500 	lsl.w	r5, r4, r0
 801e8a6:	42be      	cmp	r6, r7
 801e8a8:	fa21 f40c 	lsr.w	r4, r1, ip
 801e8ac:	ea45 0504 	orr.w	r5, r5, r4
 801e8b0:	bf8c      	ite	hi
 801e8b2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801e8b6:	2400      	movls	r4, #0
 801e8b8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801e8bc:	fa01 f000 	lsl.w	r0, r1, r0
 801e8c0:	fa24 f40c 	lsr.w	r4, r4, ip
 801e8c4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801e8c8:	ea40 0204 	orr.w	r2, r0, r4
 801e8cc:	e7db      	b.n	801e886 <__b2d+0x4a>
 801e8ce:	ea44 030c 	orr.w	r3, r4, ip
 801e8d2:	460a      	mov	r2, r1
 801e8d4:	e7d7      	b.n	801e886 <__b2d+0x4a>
 801e8d6:	bf00      	nop
 801e8d8:	3ff00000 	.word	0x3ff00000

0801e8dc <__d2b>:
 801e8dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801e8e0:	4689      	mov	r9, r1
 801e8e2:	2101      	movs	r1, #1
 801e8e4:	ec57 6b10 	vmov	r6, r7, d0
 801e8e8:	4690      	mov	r8, r2
 801e8ea:	f7ff fc0f 	bl	801e10c <_Balloc>
 801e8ee:	4604      	mov	r4, r0
 801e8f0:	b930      	cbnz	r0, 801e900 <__d2b+0x24>
 801e8f2:	4602      	mov	r2, r0
 801e8f4:	4b25      	ldr	r3, [pc, #148]	; (801e98c <__d2b+0xb0>)
 801e8f6:	4826      	ldr	r0, [pc, #152]	; (801e990 <__d2b+0xb4>)
 801e8f8:	f240 310a 	movw	r1, #778	; 0x30a
 801e8fc:	f7fb fef2 	bl	801a6e4 <__assert_func>
 801e900:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801e904:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801e908:	bb35      	cbnz	r5, 801e958 <__d2b+0x7c>
 801e90a:	2e00      	cmp	r6, #0
 801e90c:	9301      	str	r3, [sp, #4]
 801e90e:	d028      	beq.n	801e962 <__d2b+0x86>
 801e910:	4668      	mov	r0, sp
 801e912:	9600      	str	r6, [sp, #0]
 801e914:	f7ff fd10 	bl	801e338 <__lo0bits>
 801e918:	9900      	ldr	r1, [sp, #0]
 801e91a:	b300      	cbz	r0, 801e95e <__d2b+0x82>
 801e91c:	9a01      	ldr	r2, [sp, #4]
 801e91e:	f1c0 0320 	rsb	r3, r0, #32
 801e922:	fa02 f303 	lsl.w	r3, r2, r3
 801e926:	430b      	orrs	r3, r1
 801e928:	40c2      	lsrs	r2, r0
 801e92a:	6163      	str	r3, [r4, #20]
 801e92c:	9201      	str	r2, [sp, #4]
 801e92e:	9b01      	ldr	r3, [sp, #4]
 801e930:	61a3      	str	r3, [r4, #24]
 801e932:	2b00      	cmp	r3, #0
 801e934:	bf14      	ite	ne
 801e936:	2202      	movne	r2, #2
 801e938:	2201      	moveq	r2, #1
 801e93a:	6122      	str	r2, [r4, #16]
 801e93c:	b1d5      	cbz	r5, 801e974 <__d2b+0x98>
 801e93e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801e942:	4405      	add	r5, r0
 801e944:	f8c9 5000 	str.w	r5, [r9]
 801e948:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801e94c:	f8c8 0000 	str.w	r0, [r8]
 801e950:	4620      	mov	r0, r4
 801e952:	b003      	add	sp, #12
 801e954:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e958:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801e95c:	e7d5      	b.n	801e90a <__d2b+0x2e>
 801e95e:	6161      	str	r1, [r4, #20]
 801e960:	e7e5      	b.n	801e92e <__d2b+0x52>
 801e962:	a801      	add	r0, sp, #4
 801e964:	f7ff fce8 	bl	801e338 <__lo0bits>
 801e968:	9b01      	ldr	r3, [sp, #4]
 801e96a:	6163      	str	r3, [r4, #20]
 801e96c:	2201      	movs	r2, #1
 801e96e:	6122      	str	r2, [r4, #16]
 801e970:	3020      	adds	r0, #32
 801e972:	e7e3      	b.n	801e93c <__d2b+0x60>
 801e974:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801e978:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801e97c:	f8c9 0000 	str.w	r0, [r9]
 801e980:	6918      	ldr	r0, [r3, #16]
 801e982:	f7ff fcb9 	bl	801e2f8 <__hi0bits>
 801e986:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801e98a:	e7df      	b.n	801e94c <__d2b+0x70>
 801e98c:	0802885c 	.word	0x0802885c
 801e990:	08028950 	.word	0x08028950

0801e994 <__ratio>:
 801e994:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e998:	468a      	mov	sl, r1
 801e99a:	4669      	mov	r1, sp
 801e99c:	4683      	mov	fp, r0
 801e99e:	f7ff ff4d 	bl	801e83c <__b2d>
 801e9a2:	a901      	add	r1, sp, #4
 801e9a4:	4650      	mov	r0, sl
 801e9a6:	ec59 8b10 	vmov	r8, r9, d0
 801e9aa:	ee10 6a10 	vmov	r6, s0
 801e9ae:	f7ff ff45 	bl	801e83c <__b2d>
 801e9b2:	f8db 3010 	ldr.w	r3, [fp, #16]
 801e9b6:	f8da 2010 	ldr.w	r2, [sl, #16]
 801e9ba:	eba3 0c02 	sub.w	ip, r3, r2
 801e9be:	e9dd 3200 	ldrd	r3, r2, [sp]
 801e9c2:	1a9b      	subs	r3, r3, r2
 801e9c4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801e9c8:	ec55 4b10 	vmov	r4, r5, d0
 801e9cc:	2b00      	cmp	r3, #0
 801e9ce:	ee10 0a10 	vmov	r0, s0
 801e9d2:	bfce      	itee	gt
 801e9d4:	464a      	movgt	r2, r9
 801e9d6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801e9da:	462a      	movle	r2, r5
 801e9dc:	464f      	mov	r7, r9
 801e9de:	4629      	mov	r1, r5
 801e9e0:	bfcc      	ite	gt
 801e9e2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801e9e6:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 801e9ea:	ec47 6b17 	vmov	d7, r6, r7
 801e9ee:	ec41 0b16 	vmov	d6, r0, r1
 801e9f2:	ee87 0b06 	vdiv.f64	d0, d7, d6
 801e9f6:	b003      	add	sp, #12
 801e9f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e9fc <__copybits>:
 801e9fc:	3901      	subs	r1, #1
 801e9fe:	b570      	push	{r4, r5, r6, lr}
 801ea00:	1149      	asrs	r1, r1, #5
 801ea02:	6914      	ldr	r4, [r2, #16]
 801ea04:	3101      	adds	r1, #1
 801ea06:	f102 0314 	add.w	r3, r2, #20
 801ea0a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801ea0e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801ea12:	1f05      	subs	r5, r0, #4
 801ea14:	42a3      	cmp	r3, r4
 801ea16:	d30c      	bcc.n	801ea32 <__copybits+0x36>
 801ea18:	1aa3      	subs	r3, r4, r2
 801ea1a:	3b11      	subs	r3, #17
 801ea1c:	f023 0303 	bic.w	r3, r3, #3
 801ea20:	3211      	adds	r2, #17
 801ea22:	42a2      	cmp	r2, r4
 801ea24:	bf88      	it	hi
 801ea26:	2300      	movhi	r3, #0
 801ea28:	4418      	add	r0, r3
 801ea2a:	2300      	movs	r3, #0
 801ea2c:	4288      	cmp	r0, r1
 801ea2e:	d305      	bcc.n	801ea3c <__copybits+0x40>
 801ea30:	bd70      	pop	{r4, r5, r6, pc}
 801ea32:	f853 6b04 	ldr.w	r6, [r3], #4
 801ea36:	f845 6f04 	str.w	r6, [r5, #4]!
 801ea3a:	e7eb      	b.n	801ea14 <__copybits+0x18>
 801ea3c:	f840 3b04 	str.w	r3, [r0], #4
 801ea40:	e7f4      	b.n	801ea2c <__copybits+0x30>

0801ea42 <__any_on>:
 801ea42:	f100 0214 	add.w	r2, r0, #20
 801ea46:	6900      	ldr	r0, [r0, #16]
 801ea48:	114b      	asrs	r3, r1, #5
 801ea4a:	4298      	cmp	r0, r3
 801ea4c:	b510      	push	{r4, lr}
 801ea4e:	db11      	blt.n	801ea74 <__any_on+0x32>
 801ea50:	dd0a      	ble.n	801ea68 <__any_on+0x26>
 801ea52:	f011 011f 	ands.w	r1, r1, #31
 801ea56:	d007      	beq.n	801ea68 <__any_on+0x26>
 801ea58:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801ea5c:	fa24 f001 	lsr.w	r0, r4, r1
 801ea60:	fa00 f101 	lsl.w	r1, r0, r1
 801ea64:	428c      	cmp	r4, r1
 801ea66:	d10b      	bne.n	801ea80 <__any_on+0x3e>
 801ea68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ea6c:	4293      	cmp	r3, r2
 801ea6e:	d803      	bhi.n	801ea78 <__any_on+0x36>
 801ea70:	2000      	movs	r0, #0
 801ea72:	bd10      	pop	{r4, pc}
 801ea74:	4603      	mov	r3, r0
 801ea76:	e7f7      	b.n	801ea68 <__any_on+0x26>
 801ea78:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801ea7c:	2900      	cmp	r1, #0
 801ea7e:	d0f5      	beq.n	801ea6c <__any_on+0x2a>
 801ea80:	2001      	movs	r0, #1
 801ea82:	e7f6      	b.n	801ea72 <__any_on+0x30>

0801ea84 <_calloc_r>:
 801ea84:	b513      	push	{r0, r1, r4, lr}
 801ea86:	434a      	muls	r2, r1
 801ea88:	4611      	mov	r1, r2
 801ea8a:	9201      	str	r2, [sp, #4]
 801ea8c:	f7fb ff18 	bl	801a8c0 <_malloc_r>
 801ea90:	4604      	mov	r4, r0
 801ea92:	b118      	cbz	r0, 801ea9c <_calloc_r+0x18>
 801ea94:	9a01      	ldr	r2, [sp, #4]
 801ea96:	2100      	movs	r1, #0
 801ea98:	f7fb feba 	bl	801a810 <memset>
 801ea9c:	4620      	mov	r0, r4
 801ea9e:	b002      	add	sp, #8
 801eaa0:	bd10      	pop	{r4, pc}

0801eaa2 <_realloc_r>:
 801eaa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eaa4:	4607      	mov	r7, r0
 801eaa6:	4614      	mov	r4, r2
 801eaa8:	460e      	mov	r6, r1
 801eaaa:	b921      	cbnz	r1, 801eab6 <_realloc_r+0x14>
 801eaac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801eab0:	4611      	mov	r1, r2
 801eab2:	f7fb bf05 	b.w	801a8c0 <_malloc_r>
 801eab6:	b922      	cbnz	r2, 801eac2 <_realloc_r+0x20>
 801eab8:	f7fb feb2 	bl	801a820 <_free_r>
 801eabc:	4625      	mov	r5, r4
 801eabe:	4628      	mov	r0, r5
 801eac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801eac2:	f000 fa63 	bl	801ef8c <_malloc_usable_size_r>
 801eac6:	42a0      	cmp	r0, r4
 801eac8:	d20f      	bcs.n	801eaea <_realloc_r+0x48>
 801eaca:	4621      	mov	r1, r4
 801eacc:	4638      	mov	r0, r7
 801eace:	f7fb fef7 	bl	801a8c0 <_malloc_r>
 801ead2:	4605      	mov	r5, r0
 801ead4:	2800      	cmp	r0, #0
 801ead6:	d0f2      	beq.n	801eabe <_realloc_r+0x1c>
 801ead8:	4631      	mov	r1, r6
 801eada:	4622      	mov	r2, r4
 801eadc:	f7fb fe70 	bl	801a7c0 <memcpy>
 801eae0:	4631      	mov	r1, r6
 801eae2:	4638      	mov	r0, r7
 801eae4:	f7fb fe9c 	bl	801a820 <_free_r>
 801eae8:	e7e9      	b.n	801eabe <_realloc_r+0x1c>
 801eaea:	4635      	mov	r5, r6
 801eaec:	e7e7      	b.n	801eabe <_realloc_r+0x1c>

0801eaee <__ssputs_r>:
 801eaee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eaf2:	688e      	ldr	r6, [r1, #8]
 801eaf4:	429e      	cmp	r6, r3
 801eaf6:	4682      	mov	sl, r0
 801eaf8:	460c      	mov	r4, r1
 801eafa:	4690      	mov	r8, r2
 801eafc:	461f      	mov	r7, r3
 801eafe:	d838      	bhi.n	801eb72 <__ssputs_r+0x84>
 801eb00:	898a      	ldrh	r2, [r1, #12]
 801eb02:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801eb06:	d032      	beq.n	801eb6e <__ssputs_r+0x80>
 801eb08:	6825      	ldr	r5, [r4, #0]
 801eb0a:	6909      	ldr	r1, [r1, #16]
 801eb0c:	eba5 0901 	sub.w	r9, r5, r1
 801eb10:	6965      	ldr	r5, [r4, #20]
 801eb12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801eb16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801eb1a:	3301      	adds	r3, #1
 801eb1c:	444b      	add	r3, r9
 801eb1e:	106d      	asrs	r5, r5, #1
 801eb20:	429d      	cmp	r5, r3
 801eb22:	bf38      	it	cc
 801eb24:	461d      	movcc	r5, r3
 801eb26:	0553      	lsls	r3, r2, #21
 801eb28:	d531      	bpl.n	801eb8e <__ssputs_r+0xa0>
 801eb2a:	4629      	mov	r1, r5
 801eb2c:	f7fb fec8 	bl	801a8c0 <_malloc_r>
 801eb30:	4606      	mov	r6, r0
 801eb32:	b950      	cbnz	r0, 801eb4a <__ssputs_r+0x5c>
 801eb34:	230c      	movs	r3, #12
 801eb36:	f8ca 3000 	str.w	r3, [sl]
 801eb3a:	89a3      	ldrh	r3, [r4, #12]
 801eb3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801eb40:	81a3      	strh	r3, [r4, #12]
 801eb42:	f04f 30ff 	mov.w	r0, #4294967295
 801eb46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eb4a:	6921      	ldr	r1, [r4, #16]
 801eb4c:	464a      	mov	r2, r9
 801eb4e:	f7fb fe37 	bl	801a7c0 <memcpy>
 801eb52:	89a3      	ldrh	r3, [r4, #12]
 801eb54:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801eb58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801eb5c:	81a3      	strh	r3, [r4, #12]
 801eb5e:	6126      	str	r6, [r4, #16]
 801eb60:	6165      	str	r5, [r4, #20]
 801eb62:	444e      	add	r6, r9
 801eb64:	eba5 0509 	sub.w	r5, r5, r9
 801eb68:	6026      	str	r6, [r4, #0]
 801eb6a:	60a5      	str	r5, [r4, #8]
 801eb6c:	463e      	mov	r6, r7
 801eb6e:	42be      	cmp	r6, r7
 801eb70:	d900      	bls.n	801eb74 <__ssputs_r+0x86>
 801eb72:	463e      	mov	r6, r7
 801eb74:	4632      	mov	r2, r6
 801eb76:	6820      	ldr	r0, [r4, #0]
 801eb78:	4641      	mov	r1, r8
 801eb7a:	f7fb fe2f 	bl	801a7dc <memmove>
 801eb7e:	68a3      	ldr	r3, [r4, #8]
 801eb80:	6822      	ldr	r2, [r4, #0]
 801eb82:	1b9b      	subs	r3, r3, r6
 801eb84:	4432      	add	r2, r6
 801eb86:	60a3      	str	r3, [r4, #8]
 801eb88:	6022      	str	r2, [r4, #0]
 801eb8a:	2000      	movs	r0, #0
 801eb8c:	e7db      	b.n	801eb46 <__ssputs_r+0x58>
 801eb8e:	462a      	mov	r2, r5
 801eb90:	f7ff ff87 	bl	801eaa2 <_realloc_r>
 801eb94:	4606      	mov	r6, r0
 801eb96:	2800      	cmp	r0, #0
 801eb98:	d1e1      	bne.n	801eb5e <__ssputs_r+0x70>
 801eb9a:	6921      	ldr	r1, [r4, #16]
 801eb9c:	4650      	mov	r0, sl
 801eb9e:	f7fb fe3f 	bl	801a820 <_free_r>
 801eba2:	e7c7      	b.n	801eb34 <__ssputs_r+0x46>

0801eba4 <_svfiprintf_r>:
 801eba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eba8:	4698      	mov	r8, r3
 801ebaa:	898b      	ldrh	r3, [r1, #12]
 801ebac:	061b      	lsls	r3, r3, #24
 801ebae:	b09d      	sub	sp, #116	; 0x74
 801ebb0:	4607      	mov	r7, r0
 801ebb2:	460d      	mov	r5, r1
 801ebb4:	4614      	mov	r4, r2
 801ebb6:	d50e      	bpl.n	801ebd6 <_svfiprintf_r+0x32>
 801ebb8:	690b      	ldr	r3, [r1, #16]
 801ebba:	b963      	cbnz	r3, 801ebd6 <_svfiprintf_r+0x32>
 801ebbc:	2140      	movs	r1, #64	; 0x40
 801ebbe:	f7fb fe7f 	bl	801a8c0 <_malloc_r>
 801ebc2:	6028      	str	r0, [r5, #0]
 801ebc4:	6128      	str	r0, [r5, #16]
 801ebc6:	b920      	cbnz	r0, 801ebd2 <_svfiprintf_r+0x2e>
 801ebc8:	230c      	movs	r3, #12
 801ebca:	603b      	str	r3, [r7, #0]
 801ebcc:	f04f 30ff 	mov.w	r0, #4294967295
 801ebd0:	e0d1      	b.n	801ed76 <_svfiprintf_r+0x1d2>
 801ebd2:	2340      	movs	r3, #64	; 0x40
 801ebd4:	616b      	str	r3, [r5, #20]
 801ebd6:	2300      	movs	r3, #0
 801ebd8:	9309      	str	r3, [sp, #36]	; 0x24
 801ebda:	2320      	movs	r3, #32
 801ebdc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ebe0:	f8cd 800c 	str.w	r8, [sp, #12]
 801ebe4:	2330      	movs	r3, #48	; 0x30
 801ebe6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801ed90 <_svfiprintf_r+0x1ec>
 801ebea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ebee:	f04f 0901 	mov.w	r9, #1
 801ebf2:	4623      	mov	r3, r4
 801ebf4:	469a      	mov	sl, r3
 801ebf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ebfa:	b10a      	cbz	r2, 801ec00 <_svfiprintf_r+0x5c>
 801ebfc:	2a25      	cmp	r2, #37	; 0x25
 801ebfe:	d1f9      	bne.n	801ebf4 <_svfiprintf_r+0x50>
 801ec00:	ebba 0b04 	subs.w	fp, sl, r4
 801ec04:	d00b      	beq.n	801ec1e <_svfiprintf_r+0x7a>
 801ec06:	465b      	mov	r3, fp
 801ec08:	4622      	mov	r2, r4
 801ec0a:	4629      	mov	r1, r5
 801ec0c:	4638      	mov	r0, r7
 801ec0e:	f7ff ff6e 	bl	801eaee <__ssputs_r>
 801ec12:	3001      	adds	r0, #1
 801ec14:	f000 80aa 	beq.w	801ed6c <_svfiprintf_r+0x1c8>
 801ec18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ec1a:	445a      	add	r2, fp
 801ec1c:	9209      	str	r2, [sp, #36]	; 0x24
 801ec1e:	f89a 3000 	ldrb.w	r3, [sl]
 801ec22:	2b00      	cmp	r3, #0
 801ec24:	f000 80a2 	beq.w	801ed6c <_svfiprintf_r+0x1c8>
 801ec28:	2300      	movs	r3, #0
 801ec2a:	f04f 32ff 	mov.w	r2, #4294967295
 801ec2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ec32:	f10a 0a01 	add.w	sl, sl, #1
 801ec36:	9304      	str	r3, [sp, #16]
 801ec38:	9307      	str	r3, [sp, #28]
 801ec3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ec3e:	931a      	str	r3, [sp, #104]	; 0x68
 801ec40:	4654      	mov	r4, sl
 801ec42:	2205      	movs	r2, #5
 801ec44:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ec48:	4851      	ldr	r0, [pc, #324]	; (801ed90 <_svfiprintf_r+0x1ec>)
 801ec4a:	f7e1 fb61 	bl	8000310 <memchr>
 801ec4e:	9a04      	ldr	r2, [sp, #16]
 801ec50:	b9d8      	cbnz	r0, 801ec8a <_svfiprintf_r+0xe6>
 801ec52:	06d0      	lsls	r0, r2, #27
 801ec54:	bf44      	itt	mi
 801ec56:	2320      	movmi	r3, #32
 801ec58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ec5c:	0711      	lsls	r1, r2, #28
 801ec5e:	bf44      	itt	mi
 801ec60:	232b      	movmi	r3, #43	; 0x2b
 801ec62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ec66:	f89a 3000 	ldrb.w	r3, [sl]
 801ec6a:	2b2a      	cmp	r3, #42	; 0x2a
 801ec6c:	d015      	beq.n	801ec9a <_svfiprintf_r+0xf6>
 801ec6e:	9a07      	ldr	r2, [sp, #28]
 801ec70:	4654      	mov	r4, sl
 801ec72:	2000      	movs	r0, #0
 801ec74:	f04f 0c0a 	mov.w	ip, #10
 801ec78:	4621      	mov	r1, r4
 801ec7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ec7e:	3b30      	subs	r3, #48	; 0x30
 801ec80:	2b09      	cmp	r3, #9
 801ec82:	d94e      	bls.n	801ed22 <_svfiprintf_r+0x17e>
 801ec84:	b1b0      	cbz	r0, 801ecb4 <_svfiprintf_r+0x110>
 801ec86:	9207      	str	r2, [sp, #28]
 801ec88:	e014      	b.n	801ecb4 <_svfiprintf_r+0x110>
 801ec8a:	eba0 0308 	sub.w	r3, r0, r8
 801ec8e:	fa09 f303 	lsl.w	r3, r9, r3
 801ec92:	4313      	orrs	r3, r2
 801ec94:	9304      	str	r3, [sp, #16]
 801ec96:	46a2      	mov	sl, r4
 801ec98:	e7d2      	b.n	801ec40 <_svfiprintf_r+0x9c>
 801ec9a:	9b03      	ldr	r3, [sp, #12]
 801ec9c:	1d19      	adds	r1, r3, #4
 801ec9e:	681b      	ldr	r3, [r3, #0]
 801eca0:	9103      	str	r1, [sp, #12]
 801eca2:	2b00      	cmp	r3, #0
 801eca4:	bfbb      	ittet	lt
 801eca6:	425b      	neglt	r3, r3
 801eca8:	f042 0202 	orrlt.w	r2, r2, #2
 801ecac:	9307      	strge	r3, [sp, #28]
 801ecae:	9307      	strlt	r3, [sp, #28]
 801ecb0:	bfb8      	it	lt
 801ecb2:	9204      	strlt	r2, [sp, #16]
 801ecb4:	7823      	ldrb	r3, [r4, #0]
 801ecb6:	2b2e      	cmp	r3, #46	; 0x2e
 801ecb8:	d10c      	bne.n	801ecd4 <_svfiprintf_r+0x130>
 801ecba:	7863      	ldrb	r3, [r4, #1]
 801ecbc:	2b2a      	cmp	r3, #42	; 0x2a
 801ecbe:	d135      	bne.n	801ed2c <_svfiprintf_r+0x188>
 801ecc0:	9b03      	ldr	r3, [sp, #12]
 801ecc2:	1d1a      	adds	r2, r3, #4
 801ecc4:	681b      	ldr	r3, [r3, #0]
 801ecc6:	9203      	str	r2, [sp, #12]
 801ecc8:	2b00      	cmp	r3, #0
 801ecca:	bfb8      	it	lt
 801eccc:	f04f 33ff 	movlt.w	r3, #4294967295
 801ecd0:	3402      	adds	r4, #2
 801ecd2:	9305      	str	r3, [sp, #20]
 801ecd4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801eda0 <_svfiprintf_r+0x1fc>
 801ecd8:	7821      	ldrb	r1, [r4, #0]
 801ecda:	2203      	movs	r2, #3
 801ecdc:	4650      	mov	r0, sl
 801ecde:	f7e1 fb17 	bl	8000310 <memchr>
 801ece2:	b140      	cbz	r0, 801ecf6 <_svfiprintf_r+0x152>
 801ece4:	2340      	movs	r3, #64	; 0x40
 801ece6:	eba0 000a 	sub.w	r0, r0, sl
 801ecea:	fa03 f000 	lsl.w	r0, r3, r0
 801ecee:	9b04      	ldr	r3, [sp, #16]
 801ecf0:	4303      	orrs	r3, r0
 801ecf2:	3401      	adds	r4, #1
 801ecf4:	9304      	str	r3, [sp, #16]
 801ecf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ecfa:	4826      	ldr	r0, [pc, #152]	; (801ed94 <_svfiprintf_r+0x1f0>)
 801ecfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ed00:	2206      	movs	r2, #6
 801ed02:	f7e1 fb05 	bl	8000310 <memchr>
 801ed06:	2800      	cmp	r0, #0
 801ed08:	d038      	beq.n	801ed7c <_svfiprintf_r+0x1d8>
 801ed0a:	4b23      	ldr	r3, [pc, #140]	; (801ed98 <_svfiprintf_r+0x1f4>)
 801ed0c:	bb1b      	cbnz	r3, 801ed56 <_svfiprintf_r+0x1b2>
 801ed0e:	9b03      	ldr	r3, [sp, #12]
 801ed10:	3307      	adds	r3, #7
 801ed12:	f023 0307 	bic.w	r3, r3, #7
 801ed16:	3308      	adds	r3, #8
 801ed18:	9303      	str	r3, [sp, #12]
 801ed1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ed1c:	4433      	add	r3, r6
 801ed1e:	9309      	str	r3, [sp, #36]	; 0x24
 801ed20:	e767      	b.n	801ebf2 <_svfiprintf_r+0x4e>
 801ed22:	fb0c 3202 	mla	r2, ip, r2, r3
 801ed26:	460c      	mov	r4, r1
 801ed28:	2001      	movs	r0, #1
 801ed2a:	e7a5      	b.n	801ec78 <_svfiprintf_r+0xd4>
 801ed2c:	2300      	movs	r3, #0
 801ed2e:	3401      	adds	r4, #1
 801ed30:	9305      	str	r3, [sp, #20]
 801ed32:	4619      	mov	r1, r3
 801ed34:	f04f 0c0a 	mov.w	ip, #10
 801ed38:	4620      	mov	r0, r4
 801ed3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ed3e:	3a30      	subs	r2, #48	; 0x30
 801ed40:	2a09      	cmp	r2, #9
 801ed42:	d903      	bls.n	801ed4c <_svfiprintf_r+0x1a8>
 801ed44:	2b00      	cmp	r3, #0
 801ed46:	d0c5      	beq.n	801ecd4 <_svfiprintf_r+0x130>
 801ed48:	9105      	str	r1, [sp, #20]
 801ed4a:	e7c3      	b.n	801ecd4 <_svfiprintf_r+0x130>
 801ed4c:	fb0c 2101 	mla	r1, ip, r1, r2
 801ed50:	4604      	mov	r4, r0
 801ed52:	2301      	movs	r3, #1
 801ed54:	e7f0      	b.n	801ed38 <_svfiprintf_r+0x194>
 801ed56:	ab03      	add	r3, sp, #12
 801ed58:	9300      	str	r3, [sp, #0]
 801ed5a:	462a      	mov	r2, r5
 801ed5c:	4b0f      	ldr	r3, [pc, #60]	; (801ed9c <_svfiprintf_r+0x1f8>)
 801ed5e:	a904      	add	r1, sp, #16
 801ed60:	4638      	mov	r0, r7
 801ed62:	f7fb fff1 	bl	801ad48 <_printf_float>
 801ed66:	1c42      	adds	r2, r0, #1
 801ed68:	4606      	mov	r6, r0
 801ed6a:	d1d6      	bne.n	801ed1a <_svfiprintf_r+0x176>
 801ed6c:	89ab      	ldrh	r3, [r5, #12]
 801ed6e:	065b      	lsls	r3, r3, #25
 801ed70:	f53f af2c 	bmi.w	801ebcc <_svfiprintf_r+0x28>
 801ed74:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ed76:	b01d      	add	sp, #116	; 0x74
 801ed78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed7c:	ab03      	add	r3, sp, #12
 801ed7e:	9300      	str	r3, [sp, #0]
 801ed80:	462a      	mov	r2, r5
 801ed82:	4b06      	ldr	r3, [pc, #24]	; (801ed9c <_svfiprintf_r+0x1f8>)
 801ed84:	a904      	add	r1, sp, #16
 801ed86:	4638      	mov	r0, r7
 801ed88:	f7fc fa6a 	bl	801b260 <_printf_i>
 801ed8c:	e7eb      	b.n	801ed66 <_svfiprintf_r+0x1c2>
 801ed8e:	bf00      	nop
 801ed90:	08028638 	.word	0x08028638
 801ed94:	08028642 	.word	0x08028642
 801ed98:	0801ad49 	.word	0x0801ad49
 801ed9c:	0801eaef 	.word	0x0801eaef
 801eda0:	0802863e 	.word	0x0802863e
 801eda4:	00000000 	.word	0x00000000

0801eda8 <nan>:
 801eda8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801edb0 <nan+0x8>
 801edac:	4770      	bx	lr
 801edae:	bf00      	nop
 801edb0:	00000000 	.word	0x00000000
 801edb4:	7ff80000 	.word	0x7ff80000

0801edb8 <_raise_r>:
 801edb8:	291f      	cmp	r1, #31
 801edba:	b538      	push	{r3, r4, r5, lr}
 801edbc:	4604      	mov	r4, r0
 801edbe:	460d      	mov	r5, r1
 801edc0:	d904      	bls.n	801edcc <_raise_r+0x14>
 801edc2:	2316      	movs	r3, #22
 801edc4:	6003      	str	r3, [r0, #0]
 801edc6:	f04f 30ff 	mov.w	r0, #4294967295
 801edca:	bd38      	pop	{r3, r4, r5, pc}
 801edcc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801edce:	b112      	cbz	r2, 801edd6 <_raise_r+0x1e>
 801edd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801edd4:	b94b      	cbnz	r3, 801edea <_raise_r+0x32>
 801edd6:	4620      	mov	r0, r4
 801edd8:	f000 f830 	bl	801ee3c <_getpid_r>
 801eddc:	462a      	mov	r2, r5
 801edde:	4601      	mov	r1, r0
 801ede0:	4620      	mov	r0, r4
 801ede2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ede6:	f000 b817 	b.w	801ee18 <_kill_r>
 801edea:	2b01      	cmp	r3, #1
 801edec:	d00a      	beq.n	801ee04 <_raise_r+0x4c>
 801edee:	1c59      	adds	r1, r3, #1
 801edf0:	d103      	bne.n	801edfa <_raise_r+0x42>
 801edf2:	2316      	movs	r3, #22
 801edf4:	6003      	str	r3, [r0, #0]
 801edf6:	2001      	movs	r0, #1
 801edf8:	e7e7      	b.n	801edca <_raise_r+0x12>
 801edfa:	2400      	movs	r4, #0
 801edfc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ee00:	4628      	mov	r0, r5
 801ee02:	4798      	blx	r3
 801ee04:	2000      	movs	r0, #0
 801ee06:	e7e0      	b.n	801edca <_raise_r+0x12>

0801ee08 <raise>:
 801ee08:	4b02      	ldr	r3, [pc, #8]	; (801ee14 <raise+0xc>)
 801ee0a:	4601      	mov	r1, r0
 801ee0c:	6818      	ldr	r0, [r3, #0]
 801ee0e:	f7ff bfd3 	b.w	801edb8 <_raise_r>
 801ee12:	bf00      	nop
 801ee14:	2400a128 	.word	0x2400a128

0801ee18 <_kill_r>:
 801ee18:	b538      	push	{r3, r4, r5, lr}
 801ee1a:	4d07      	ldr	r5, [pc, #28]	; (801ee38 <_kill_r+0x20>)
 801ee1c:	2300      	movs	r3, #0
 801ee1e:	4604      	mov	r4, r0
 801ee20:	4608      	mov	r0, r1
 801ee22:	4611      	mov	r1, r2
 801ee24:	602b      	str	r3, [r5, #0]
 801ee26:	f7e2 ffe5 	bl	8001df4 <_kill>
 801ee2a:	1c43      	adds	r3, r0, #1
 801ee2c:	d102      	bne.n	801ee34 <_kill_r+0x1c>
 801ee2e:	682b      	ldr	r3, [r5, #0]
 801ee30:	b103      	cbz	r3, 801ee34 <_kill_r+0x1c>
 801ee32:	6023      	str	r3, [r4, #0]
 801ee34:	bd38      	pop	{r3, r4, r5, pc}
 801ee36:	bf00      	nop
 801ee38:	24018434 	.word	0x24018434

0801ee3c <_getpid_r>:
 801ee3c:	f7e2 bfd2 	b.w	8001de4 <_getpid>

0801ee40 <__sread>:
 801ee40:	b510      	push	{r4, lr}
 801ee42:	460c      	mov	r4, r1
 801ee44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ee48:	f000 f8a8 	bl	801ef9c <_read_r>
 801ee4c:	2800      	cmp	r0, #0
 801ee4e:	bfab      	itete	ge
 801ee50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ee52:	89a3      	ldrhlt	r3, [r4, #12]
 801ee54:	181b      	addge	r3, r3, r0
 801ee56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ee5a:	bfac      	ite	ge
 801ee5c:	6563      	strge	r3, [r4, #84]	; 0x54
 801ee5e:	81a3      	strhlt	r3, [r4, #12]
 801ee60:	bd10      	pop	{r4, pc}

0801ee62 <__swrite>:
 801ee62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ee66:	461f      	mov	r7, r3
 801ee68:	898b      	ldrh	r3, [r1, #12]
 801ee6a:	05db      	lsls	r3, r3, #23
 801ee6c:	4605      	mov	r5, r0
 801ee6e:	460c      	mov	r4, r1
 801ee70:	4616      	mov	r6, r2
 801ee72:	d505      	bpl.n	801ee80 <__swrite+0x1e>
 801ee74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ee78:	2302      	movs	r3, #2
 801ee7a:	2200      	movs	r2, #0
 801ee7c:	f000 f874 	bl	801ef68 <_lseek_r>
 801ee80:	89a3      	ldrh	r3, [r4, #12]
 801ee82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ee86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ee8a:	81a3      	strh	r3, [r4, #12]
 801ee8c:	4632      	mov	r2, r6
 801ee8e:	463b      	mov	r3, r7
 801ee90:	4628      	mov	r0, r5
 801ee92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ee96:	f000 b823 	b.w	801eee0 <_write_r>

0801ee9a <__sseek>:
 801ee9a:	b510      	push	{r4, lr}
 801ee9c:	460c      	mov	r4, r1
 801ee9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eea2:	f000 f861 	bl	801ef68 <_lseek_r>
 801eea6:	1c43      	adds	r3, r0, #1
 801eea8:	89a3      	ldrh	r3, [r4, #12]
 801eeaa:	bf15      	itete	ne
 801eeac:	6560      	strne	r0, [r4, #84]	; 0x54
 801eeae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801eeb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801eeb6:	81a3      	strheq	r3, [r4, #12]
 801eeb8:	bf18      	it	ne
 801eeba:	81a3      	strhne	r3, [r4, #12]
 801eebc:	bd10      	pop	{r4, pc}

0801eebe <__sclose>:
 801eebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eec2:	f000 b81f 	b.w	801ef04 <_close_r>

0801eec6 <__ascii_wctomb>:
 801eec6:	b149      	cbz	r1, 801eedc <__ascii_wctomb+0x16>
 801eec8:	2aff      	cmp	r2, #255	; 0xff
 801eeca:	bf85      	ittet	hi
 801eecc:	238a      	movhi	r3, #138	; 0x8a
 801eece:	6003      	strhi	r3, [r0, #0]
 801eed0:	700a      	strbls	r2, [r1, #0]
 801eed2:	f04f 30ff 	movhi.w	r0, #4294967295
 801eed6:	bf98      	it	ls
 801eed8:	2001      	movls	r0, #1
 801eeda:	4770      	bx	lr
 801eedc:	4608      	mov	r0, r1
 801eede:	4770      	bx	lr

0801eee0 <_write_r>:
 801eee0:	b538      	push	{r3, r4, r5, lr}
 801eee2:	4d07      	ldr	r5, [pc, #28]	; (801ef00 <_write_r+0x20>)
 801eee4:	4604      	mov	r4, r0
 801eee6:	4608      	mov	r0, r1
 801eee8:	4611      	mov	r1, r2
 801eeea:	2200      	movs	r2, #0
 801eeec:	602a      	str	r2, [r5, #0]
 801eeee:	461a      	mov	r2, r3
 801eef0:	f7e2 ffb7 	bl	8001e62 <_write>
 801eef4:	1c43      	adds	r3, r0, #1
 801eef6:	d102      	bne.n	801eefe <_write_r+0x1e>
 801eef8:	682b      	ldr	r3, [r5, #0]
 801eefa:	b103      	cbz	r3, 801eefe <_write_r+0x1e>
 801eefc:	6023      	str	r3, [r4, #0]
 801eefe:	bd38      	pop	{r3, r4, r5, pc}
 801ef00:	24018434 	.word	0x24018434

0801ef04 <_close_r>:
 801ef04:	b538      	push	{r3, r4, r5, lr}
 801ef06:	4d06      	ldr	r5, [pc, #24]	; (801ef20 <_close_r+0x1c>)
 801ef08:	2300      	movs	r3, #0
 801ef0a:	4604      	mov	r4, r0
 801ef0c:	4608      	mov	r0, r1
 801ef0e:	602b      	str	r3, [r5, #0]
 801ef10:	f7e2 ffc3 	bl	8001e9a <_close>
 801ef14:	1c43      	adds	r3, r0, #1
 801ef16:	d102      	bne.n	801ef1e <_close_r+0x1a>
 801ef18:	682b      	ldr	r3, [r5, #0]
 801ef1a:	b103      	cbz	r3, 801ef1e <_close_r+0x1a>
 801ef1c:	6023      	str	r3, [r4, #0]
 801ef1e:	bd38      	pop	{r3, r4, r5, pc}
 801ef20:	24018434 	.word	0x24018434

0801ef24 <_fstat_r>:
 801ef24:	b538      	push	{r3, r4, r5, lr}
 801ef26:	4d07      	ldr	r5, [pc, #28]	; (801ef44 <_fstat_r+0x20>)
 801ef28:	2300      	movs	r3, #0
 801ef2a:	4604      	mov	r4, r0
 801ef2c:	4608      	mov	r0, r1
 801ef2e:	4611      	mov	r1, r2
 801ef30:	602b      	str	r3, [r5, #0]
 801ef32:	f7e2 ffbe 	bl	8001eb2 <_fstat>
 801ef36:	1c43      	adds	r3, r0, #1
 801ef38:	d102      	bne.n	801ef40 <_fstat_r+0x1c>
 801ef3a:	682b      	ldr	r3, [r5, #0]
 801ef3c:	b103      	cbz	r3, 801ef40 <_fstat_r+0x1c>
 801ef3e:	6023      	str	r3, [r4, #0]
 801ef40:	bd38      	pop	{r3, r4, r5, pc}
 801ef42:	bf00      	nop
 801ef44:	24018434 	.word	0x24018434

0801ef48 <_isatty_r>:
 801ef48:	b538      	push	{r3, r4, r5, lr}
 801ef4a:	4d06      	ldr	r5, [pc, #24]	; (801ef64 <_isatty_r+0x1c>)
 801ef4c:	2300      	movs	r3, #0
 801ef4e:	4604      	mov	r4, r0
 801ef50:	4608      	mov	r0, r1
 801ef52:	602b      	str	r3, [r5, #0]
 801ef54:	f7e2 ffbd 	bl	8001ed2 <_isatty>
 801ef58:	1c43      	adds	r3, r0, #1
 801ef5a:	d102      	bne.n	801ef62 <_isatty_r+0x1a>
 801ef5c:	682b      	ldr	r3, [r5, #0]
 801ef5e:	b103      	cbz	r3, 801ef62 <_isatty_r+0x1a>
 801ef60:	6023      	str	r3, [r4, #0]
 801ef62:	bd38      	pop	{r3, r4, r5, pc}
 801ef64:	24018434 	.word	0x24018434

0801ef68 <_lseek_r>:
 801ef68:	b538      	push	{r3, r4, r5, lr}
 801ef6a:	4d07      	ldr	r5, [pc, #28]	; (801ef88 <_lseek_r+0x20>)
 801ef6c:	4604      	mov	r4, r0
 801ef6e:	4608      	mov	r0, r1
 801ef70:	4611      	mov	r1, r2
 801ef72:	2200      	movs	r2, #0
 801ef74:	602a      	str	r2, [r5, #0]
 801ef76:	461a      	mov	r2, r3
 801ef78:	f7e2 ffb6 	bl	8001ee8 <_lseek>
 801ef7c:	1c43      	adds	r3, r0, #1
 801ef7e:	d102      	bne.n	801ef86 <_lseek_r+0x1e>
 801ef80:	682b      	ldr	r3, [r5, #0]
 801ef82:	b103      	cbz	r3, 801ef86 <_lseek_r+0x1e>
 801ef84:	6023      	str	r3, [r4, #0]
 801ef86:	bd38      	pop	{r3, r4, r5, pc}
 801ef88:	24018434 	.word	0x24018434

0801ef8c <_malloc_usable_size_r>:
 801ef8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ef90:	1f18      	subs	r0, r3, #4
 801ef92:	2b00      	cmp	r3, #0
 801ef94:	bfbc      	itt	lt
 801ef96:	580b      	ldrlt	r3, [r1, r0]
 801ef98:	18c0      	addlt	r0, r0, r3
 801ef9a:	4770      	bx	lr

0801ef9c <_read_r>:
 801ef9c:	b538      	push	{r3, r4, r5, lr}
 801ef9e:	4d07      	ldr	r5, [pc, #28]	; (801efbc <_read_r+0x20>)
 801efa0:	4604      	mov	r4, r0
 801efa2:	4608      	mov	r0, r1
 801efa4:	4611      	mov	r1, r2
 801efa6:	2200      	movs	r2, #0
 801efa8:	602a      	str	r2, [r5, #0]
 801efaa:	461a      	mov	r2, r3
 801efac:	f7e2 ff3c 	bl	8001e28 <_read>
 801efb0:	1c43      	adds	r3, r0, #1
 801efb2:	d102      	bne.n	801efba <_read_r+0x1e>
 801efb4:	682b      	ldr	r3, [r5, #0]
 801efb6:	b103      	cbz	r3, 801efba <_read_r+0x1e>
 801efb8:	6023      	str	r3, [r4, #0]
 801efba:	bd38      	pop	{r3, r4, r5, pc}
 801efbc:	24018434 	.word	0x24018434

0801efc0 <sinf_poly>:
 801efc0:	07cb      	lsls	r3, r1, #31
 801efc2:	d412      	bmi.n	801efea <sinf_poly+0x2a>
 801efc4:	ee21 6b00 	vmul.f64	d6, d1, d0
 801efc8:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 801efcc:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 801efd0:	eea5 7b01 	vfma.f64	d7, d5, d1
 801efd4:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 801efd8:	ee21 1b06 	vmul.f64	d1, d1, d6
 801efdc:	eea5 0b06 	vfma.f64	d0, d5, d6
 801efe0:	eea7 0b01 	vfma.f64	d0, d7, d1
 801efe4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801efe8:	4770      	bx	lr
 801efea:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 801efee:	ee21 6b01 	vmul.f64	d6, d1, d1
 801eff2:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 801eff6:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 801effa:	eea1 7b05 	vfma.f64	d7, d1, d5
 801effe:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 801f002:	eea1 0b05 	vfma.f64	d0, d1, d5
 801f006:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 801f00a:	ee21 1b06 	vmul.f64	d1, d1, d6
 801f00e:	eea6 0b05 	vfma.f64	d0, d6, d5
 801f012:	e7e5      	b.n	801efe0 <sinf_poly+0x20>
 801f014:	0000      	movs	r0, r0
	...

0801f018 <cosf>:
 801f018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f01a:	ee10 4a10 	vmov	r4, s0
 801f01e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801f022:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 801f026:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801f02a:	d20c      	bcs.n	801f046 <cosf+0x2e>
 801f02c:	ee26 1b06 	vmul.f64	d1, d6, d6
 801f030:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 801f034:	d378      	bcc.n	801f128 <cosf+0x110>
 801f036:	eeb0 0b46 	vmov.f64	d0, d6
 801f03a:	483f      	ldr	r0, [pc, #252]	; (801f138 <cosf+0x120>)
 801f03c:	2101      	movs	r1, #1
 801f03e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801f042:	f7ff bfbd 	b.w	801efc0 <sinf_poly>
 801f046:	f240 422e 	movw	r2, #1070	; 0x42e
 801f04a:	4293      	cmp	r3, r2
 801f04c:	d826      	bhi.n	801f09c <cosf+0x84>
 801f04e:	4b3a      	ldr	r3, [pc, #232]	; (801f138 <cosf+0x120>)
 801f050:	ed93 7b08 	vldr	d7, [r3, #32]
 801f054:	ee26 7b07 	vmul.f64	d7, d6, d7
 801f058:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801f05c:	f103 0070 	add.w	r0, r3, #112	; 0x70
 801f060:	ee17 1a90 	vmov	r1, s15
 801f064:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 801f068:	1609      	asrs	r1, r1, #24
 801f06a:	ee07 1a90 	vmov	s15, r1
 801f06e:	f001 0203 	and.w	r2, r1, #3
 801f072:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801f076:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801f07a:	ed92 0b00 	vldr	d0, [r2]
 801f07e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 801f082:	f011 0f02 	tst.w	r1, #2
 801f086:	eea5 6b47 	vfms.f64	d6, d5, d7
 801f08a:	f081 0101 	eor.w	r1, r1, #1
 801f08e:	bf08      	it	eq
 801f090:	4618      	moveq	r0, r3
 801f092:	ee26 1b06 	vmul.f64	d1, d6, d6
 801f096:	ee20 0b06 	vmul.f64	d0, d0, d6
 801f09a:	e7d0      	b.n	801f03e <cosf+0x26>
 801f09c:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 801f0a0:	d23e      	bcs.n	801f120 <cosf+0x108>
 801f0a2:	4b26      	ldr	r3, [pc, #152]	; (801f13c <cosf+0x124>)
 801f0a4:	f3c4 6283 	ubfx	r2, r4, #26, #4
 801f0a8:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 801f0ac:	f3c4 0116 	ubfx	r1, r4, #0, #23
 801f0b0:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 801f0b4:	6a06      	ldr	r6, [r0, #32]
 801f0b6:	6900      	ldr	r0, [r0, #16]
 801f0b8:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 801f0bc:	40a9      	lsls	r1, r5
 801f0be:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801f0c2:	fba1 6706 	umull	r6, r7, r1, r6
 801f0c6:	fb05 f301 	mul.w	r3, r5, r1
 801f0ca:	463a      	mov	r2, r7
 801f0cc:	fbe0 2301 	umlal	r2, r3, r0, r1
 801f0d0:	1c11      	adds	r1, r2, #0
 801f0d2:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 801f0d6:	2000      	movs	r0, #0
 801f0d8:	1a10      	subs	r0, r2, r0
 801f0da:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 801f0de:	eb63 0101 	sbc.w	r1, r3, r1
 801f0e2:	f7e1 faf3 	bl	80006cc <__aeabi_l2d>
 801f0e6:	0fb5      	lsrs	r5, r6, #30
 801f0e8:	4b13      	ldr	r3, [pc, #76]	; (801f138 <cosf+0x120>)
 801f0ea:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 801f0ee:	ed9f 0b10 	vldr	d0, [pc, #64]	; 801f130 <cosf+0x118>
 801f0f2:	ec41 0b17 	vmov	d7, r0, r1
 801f0f6:	f004 0203 	and.w	r2, r4, #3
 801f0fa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801f0fe:	ee27 0b00 	vmul.f64	d0, d7, d0
 801f102:	ed92 7b00 	vldr	d7, [r2]
 801f106:	ee20 1b00 	vmul.f64	d1, d0, d0
 801f10a:	f014 0f02 	tst.w	r4, #2
 801f10e:	f103 0070 	add.w	r0, r3, #112	; 0x70
 801f112:	f085 0101 	eor.w	r1, r5, #1
 801f116:	bf08      	it	eq
 801f118:	4618      	moveq	r0, r3
 801f11a:	ee27 0b00 	vmul.f64	d0, d7, d0
 801f11e:	e78e      	b.n	801f03e <cosf+0x26>
 801f120:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801f124:	f000 b817 	b.w	801f156 <__math_invalidf>
 801f128:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801f12c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f12e:	bf00      	nop
 801f130:	54442d18 	.word	0x54442d18
 801f134:	3c1921fb 	.word	0x3c1921fb
 801f138:	08028b10 	.word	0x08028b10
 801f13c:	08028aac 	.word	0x08028aac

0801f140 <with_errnof>:
 801f140:	b513      	push	{r0, r1, r4, lr}
 801f142:	4604      	mov	r4, r0
 801f144:	ed8d 0a01 	vstr	s0, [sp, #4]
 801f148:	f7fb faee 	bl	801a728 <__errno>
 801f14c:	ed9d 0a01 	vldr	s0, [sp, #4]
 801f150:	6004      	str	r4, [r0, #0]
 801f152:	b002      	add	sp, #8
 801f154:	bd10      	pop	{r4, pc}

0801f156 <__math_invalidf>:
 801f156:	eef0 7a40 	vmov.f32	s15, s0
 801f15a:	ee30 7a40 	vsub.f32	s14, s0, s0
 801f15e:	eef4 7a67 	vcmp.f32	s15, s15
 801f162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f166:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801f16a:	d602      	bvs.n	801f172 <__math_invalidf+0x1c>
 801f16c:	2021      	movs	r0, #33	; 0x21
 801f16e:	f7ff bfe7 	b.w	801f140 <with_errnof>
 801f172:	4770      	bx	lr

0801f174 <fmax>:
 801f174:	b508      	push	{r3, lr}
 801f176:	ed2d 8b04 	vpush	{d8-d9}
 801f17a:	eeb0 8b40 	vmov.f64	d8, d0
 801f17e:	eeb0 9b41 	vmov.f64	d9, d1
 801f182:	f000 f82d 	bl	801f1e0 <__fpclassifyd>
 801f186:	b148      	cbz	r0, 801f19c <fmax+0x28>
 801f188:	eeb0 0b49 	vmov.f64	d0, d9
 801f18c:	f000 f828 	bl	801f1e0 <__fpclassifyd>
 801f190:	b130      	cbz	r0, 801f1a0 <fmax+0x2c>
 801f192:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801f196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f19a:	dc01      	bgt.n	801f1a0 <fmax+0x2c>
 801f19c:	eeb0 8b49 	vmov.f64	d8, d9
 801f1a0:	eeb0 0b48 	vmov.f64	d0, d8
 801f1a4:	ecbd 8b04 	vpop	{d8-d9}
 801f1a8:	bd08      	pop	{r3, pc}

0801f1aa <fmin>:
 801f1aa:	b508      	push	{r3, lr}
 801f1ac:	ed2d 8b04 	vpush	{d8-d9}
 801f1b0:	eeb0 8b40 	vmov.f64	d8, d0
 801f1b4:	eeb0 9b41 	vmov.f64	d9, d1
 801f1b8:	f000 f812 	bl	801f1e0 <__fpclassifyd>
 801f1bc:	b148      	cbz	r0, 801f1d2 <fmin+0x28>
 801f1be:	eeb0 0b49 	vmov.f64	d0, d9
 801f1c2:	f000 f80d 	bl	801f1e0 <__fpclassifyd>
 801f1c6:	b130      	cbz	r0, 801f1d6 <fmin+0x2c>
 801f1c8:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801f1cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f1d0:	d401      	bmi.n	801f1d6 <fmin+0x2c>
 801f1d2:	eeb0 8b49 	vmov.f64	d8, d9
 801f1d6:	eeb0 0b48 	vmov.f64	d0, d8
 801f1da:	ecbd 8b04 	vpop	{d8-d9}
 801f1de:	bd08      	pop	{r3, pc}

0801f1e0 <__fpclassifyd>:
 801f1e0:	ec51 0b10 	vmov	r0, r1, d0
 801f1e4:	b510      	push	{r4, lr}
 801f1e6:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 801f1ea:	460b      	mov	r3, r1
 801f1ec:	d019      	beq.n	801f222 <__fpclassifyd+0x42>
 801f1ee:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 801f1f2:	490e      	ldr	r1, [pc, #56]	; (801f22c <__fpclassifyd+0x4c>)
 801f1f4:	428a      	cmp	r2, r1
 801f1f6:	d90e      	bls.n	801f216 <__fpclassifyd+0x36>
 801f1f8:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 801f1fc:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 801f200:	428a      	cmp	r2, r1
 801f202:	d908      	bls.n	801f216 <__fpclassifyd+0x36>
 801f204:	4a0a      	ldr	r2, [pc, #40]	; (801f230 <__fpclassifyd+0x50>)
 801f206:	4213      	tst	r3, r2
 801f208:	d007      	beq.n	801f21a <__fpclassifyd+0x3a>
 801f20a:	4294      	cmp	r4, r2
 801f20c:	d107      	bne.n	801f21e <__fpclassifyd+0x3e>
 801f20e:	fab0 f080 	clz	r0, r0
 801f212:	0940      	lsrs	r0, r0, #5
 801f214:	bd10      	pop	{r4, pc}
 801f216:	2004      	movs	r0, #4
 801f218:	e7fc      	b.n	801f214 <__fpclassifyd+0x34>
 801f21a:	2003      	movs	r0, #3
 801f21c:	e7fa      	b.n	801f214 <__fpclassifyd+0x34>
 801f21e:	2000      	movs	r0, #0
 801f220:	e7f8      	b.n	801f214 <__fpclassifyd+0x34>
 801f222:	2800      	cmp	r0, #0
 801f224:	d1ee      	bne.n	801f204 <__fpclassifyd+0x24>
 801f226:	2002      	movs	r0, #2
 801f228:	e7f4      	b.n	801f214 <__fpclassifyd+0x34>
 801f22a:	bf00      	nop
 801f22c:	7fdfffff 	.word	0x7fdfffff
 801f230:	7ff00000 	.word	0x7ff00000

0801f234 <sinf_poly>:
 801f234:	07cb      	lsls	r3, r1, #31
 801f236:	d412      	bmi.n	801f25e <sinf_poly+0x2a>
 801f238:	ee21 6b00 	vmul.f64	d6, d1, d0
 801f23c:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 801f240:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 801f244:	eea5 7b01 	vfma.f64	d7, d5, d1
 801f248:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 801f24c:	ee21 1b06 	vmul.f64	d1, d1, d6
 801f250:	eea5 0b06 	vfma.f64	d0, d5, d6
 801f254:	eea7 0b01 	vfma.f64	d0, d7, d1
 801f258:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801f25c:	4770      	bx	lr
 801f25e:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 801f262:	ee21 6b01 	vmul.f64	d6, d1, d1
 801f266:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 801f26a:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 801f26e:	eea1 7b05 	vfma.f64	d7, d1, d5
 801f272:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 801f276:	eea1 0b05 	vfma.f64	d0, d1, d5
 801f27a:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 801f27e:	ee21 1b06 	vmul.f64	d1, d1, d6
 801f282:	eea6 0b05 	vfma.f64	d0, d6, d5
 801f286:	e7e5      	b.n	801f254 <sinf_poly+0x20>

0801f288 <sinf>:
 801f288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f28a:	ee10 4a10 	vmov	r4, s0
 801f28e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801f292:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 801f296:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801f29a:	eef0 7a40 	vmov.f32	s15, s0
 801f29e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 801f2a2:	d218      	bcs.n	801f2d6 <sinf+0x4e>
 801f2a4:	ee26 1b06 	vmul.f64	d1, d6, d6
 801f2a8:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 801f2ac:	d20a      	bcs.n	801f2c4 <sinf+0x3c>
 801f2ae:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 801f2b2:	d103      	bne.n	801f2bc <sinf+0x34>
 801f2b4:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 801f2b8:	ed8d 1a01 	vstr	s2, [sp, #4]
 801f2bc:	eeb0 0a67 	vmov.f32	s0, s15
 801f2c0:	b003      	add	sp, #12
 801f2c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f2c4:	483e      	ldr	r0, [pc, #248]	; (801f3c0 <sinf+0x138>)
 801f2c6:	eeb0 0b46 	vmov.f64	d0, d6
 801f2ca:	2100      	movs	r1, #0
 801f2cc:	b003      	add	sp, #12
 801f2ce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801f2d2:	f7ff bfaf 	b.w	801f234 <sinf_poly>
 801f2d6:	f240 422e 	movw	r2, #1070	; 0x42e
 801f2da:	4293      	cmp	r3, r2
 801f2dc:	d824      	bhi.n	801f328 <sinf+0xa0>
 801f2de:	4b38      	ldr	r3, [pc, #224]	; (801f3c0 <sinf+0x138>)
 801f2e0:	ed93 7b08 	vldr	d7, [r3, #32]
 801f2e4:	ee26 7b07 	vmul.f64	d7, d6, d7
 801f2e8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801f2ec:	f103 0070 	add.w	r0, r3, #112	; 0x70
 801f2f0:	ee17 1a90 	vmov	r1, s15
 801f2f4:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 801f2f8:	1609      	asrs	r1, r1, #24
 801f2fa:	ee07 1a90 	vmov	s15, r1
 801f2fe:	f001 0203 	and.w	r2, r1, #3
 801f302:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801f306:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801f30a:	ed92 0b00 	vldr	d0, [r2]
 801f30e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 801f312:	f011 0f02 	tst.w	r1, #2
 801f316:	eea5 6b47 	vfms.f64	d6, d5, d7
 801f31a:	bf08      	it	eq
 801f31c:	4618      	moveq	r0, r3
 801f31e:	ee26 1b06 	vmul.f64	d1, d6, d6
 801f322:	ee20 0b06 	vmul.f64	d0, d0, d6
 801f326:	e7d1      	b.n	801f2cc <sinf+0x44>
 801f328:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 801f32c:	d23d      	bcs.n	801f3aa <sinf+0x122>
 801f32e:	4b25      	ldr	r3, [pc, #148]	; (801f3c4 <sinf+0x13c>)
 801f330:	f3c4 6283 	ubfx	r2, r4, #26, #4
 801f334:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 801f338:	f3c4 0116 	ubfx	r1, r4, #0, #23
 801f33c:	6a06      	ldr	r6, [r0, #32]
 801f33e:	6900      	ldr	r0, [r0, #16]
 801f340:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 801f344:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 801f348:	40a9      	lsls	r1, r5
 801f34a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801f34e:	fba1 6706 	umull	r6, r7, r1, r6
 801f352:	fb05 f301 	mul.w	r3, r5, r1
 801f356:	463a      	mov	r2, r7
 801f358:	fbe0 2301 	umlal	r2, r3, r0, r1
 801f35c:	1c11      	adds	r1, r2, #0
 801f35e:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 801f362:	2000      	movs	r0, #0
 801f364:	1a10      	subs	r0, r2, r0
 801f366:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 801f36a:	eb63 0101 	sbc.w	r1, r3, r1
 801f36e:	f7e1 f9ad 	bl	80006cc <__aeabi_l2d>
 801f372:	0fb5      	lsrs	r5, r6, #30
 801f374:	4a12      	ldr	r2, [pc, #72]	; (801f3c0 <sinf+0x138>)
 801f376:	eb05 73d4 	add.w	r3, r5, r4, lsr #31
 801f37a:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 801f3b8 <sinf+0x130>
 801f37e:	ec41 0b17 	vmov	d7, r0, r1
 801f382:	f003 0103 	and.w	r1, r3, #3
 801f386:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 801f38a:	ee27 0b00 	vmul.f64	d0, d7, d0
 801f38e:	ed91 7b00 	vldr	d7, [r1]
 801f392:	ee20 1b00 	vmul.f64	d1, d0, d0
 801f396:	f013 0f02 	tst.w	r3, #2
 801f39a:	f102 0070 	add.w	r0, r2, #112	; 0x70
 801f39e:	4629      	mov	r1, r5
 801f3a0:	bf08      	it	eq
 801f3a2:	4610      	moveq	r0, r2
 801f3a4:	ee27 0b00 	vmul.f64	d0, d7, d0
 801f3a8:	e790      	b.n	801f2cc <sinf+0x44>
 801f3aa:	b003      	add	sp, #12
 801f3ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801f3b0:	f7ff bed1 	b.w	801f156 <__math_invalidf>
 801f3b4:	f3af 8000 	nop.w
 801f3b8:	54442d18 	.word	0x54442d18
 801f3bc:	3c1921fb 	.word	0x3c1921fb
 801f3c0:	08028b10 	.word	0x08028b10
 801f3c4:	08028aac 	.word	0x08028aac

0801f3c8 <_init>:
 801f3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f3ca:	bf00      	nop
 801f3cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f3ce:	bc08      	pop	{r3}
 801f3d0:	469e      	mov	lr, r3
 801f3d2:	4770      	bx	lr

0801f3d4 <_fini>:
 801f3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f3d6:	bf00      	nop
 801f3d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f3da:	bc08      	pop	{r3}
 801f3dc:	469e      	mov	lr, r3
 801f3de:	4770      	bx	lr
